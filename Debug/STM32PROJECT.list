
STM32PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9b8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000934  0800aac4  0800aac4  0000bac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3f8  0800b3f8  0000d080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b3f8  0800b3f8  0000c3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b400  0800b400  0000d080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b400  0800b400  0000c400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b404  0800b404  0000c404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800b408  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004084  20000080  0800b488  0000d080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004104  0800b488  0000d104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc9b  00000000  00000000  0000d0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003005  00000000  00000000  0001cd44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  0001fd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d87  00000000  00000000  00020e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6c8  00000000  00000000  00021bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a70  00000000  00000000  0003c2c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e447  00000000  00000000  00051d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e017e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005794  00000000  00000000  000e01c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000e5958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	0800aaac 	.word	0x0800aaac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	0800aaac 	.word	0x0800aaac

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_fcmpun>:
 8000718:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800071c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000720:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000724:	d102      	bne.n	800072c <__aeabi_fcmpun+0x14>
 8000726:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800072a:	d108      	bne.n	800073e <__aeabi_fcmpun+0x26>
 800072c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000730:	d102      	bne.n	8000738 <__aeabi_fcmpun+0x20>
 8000732:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000736:	d102      	bne.n	800073e <__aeabi_fcmpun+0x26>
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	4770      	bx	lr
 800073e:	f04f 0001 	mov.w	r0, #1
 8000742:	4770      	bx	lr

08000744 <__aeabi_f2iz>:
 8000744:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000748:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800074c:	d30f      	bcc.n	800076e <__aeabi_f2iz+0x2a>
 800074e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000752:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000756:	d90d      	bls.n	8000774 <__aeabi_f2iz+0x30>
 8000758:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800075c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000760:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000764:	fa23 f002 	lsr.w	r0, r3, r2
 8000768:	bf18      	it	ne
 800076a:	4240      	negne	r0, r0
 800076c:	4770      	bx	lr
 800076e:	f04f 0000 	mov.w	r0, #0
 8000772:	4770      	bx	lr
 8000774:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000778:	d101      	bne.n	800077e <__aeabi_f2iz+0x3a>
 800077a:	0242      	lsls	r2, r0, #9
 800077c:	d105      	bne.n	800078a <__aeabi_f2iz+0x46>
 800077e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000782:	bf08      	it	eq
 8000784:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000788:	4770      	bx	lr
 800078a:	f04f 0000 	mov.w	r0, #0
 800078e:	4770      	bx	lr

08000790 <__aeabi_f2uiz>:
 8000790:	0042      	lsls	r2, r0, #1
 8000792:	d20e      	bcs.n	80007b2 <__aeabi_f2uiz+0x22>
 8000794:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000798:	d30b      	bcc.n	80007b2 <__aeabi_f2uiz+0x22>
 800079a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800079e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007a2:	d409      	bmi.n	80007b8 <__aeabi_f2uiz+0x28>
 80007a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ac:	fa23 f002 	lsr.w	r0, r3, r2
 80007b0:	4770      	bx	lr
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	4770      	bx	lr
 80007b8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80007bc:	d101      	bne.n	80007c2 <__aeabi_f2uiz+0x32>
 80007be:	0242      	lsls	r2, r0, #9
 80007c0:	d102      	bne.n	80007c8 <__aeabi_f2uiz+0x38>
 80007c2:	f04f 30ff 	mov.w	r0, #4294967295
 80007c6:	4770      	bx	lr
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_DMA_Init+0x38>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a0b      	ldr	r2, [pc, #44]	@ (8000808 <MX_DMA_Init+0x38>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_DMA_Init+0x38>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	2010      	movs	r0, #16
 80007f4:	f005 f987 	bl	8005b06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007f8:	2010      	movs	r0, #16
 80007fa:	f005 f9a0 	bl	8005b3e <HAL_NVIC_EnableIRQ>

}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <DrawBlock>:
#define INPUT_DEBOUNCE_MS 50             // Milliseconds for switch debounce
#define INPUT_PROCESSING_COOLDOWN_MS 200 // Minimum time between processing inputs

// Helper function to draw a block on the OLED (used by Snake)
static void DrawBlock(int16_t x, int16_t y, uint8_t color)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af02      	add	r7, sp, #8
 8000812:	4603      	mov	r3, r0
 8000814:	80fb      	strh	r3, [r7, #6]
 8000816:	460b      	mov	r3, r1
 8000818:	80bb      	strh	r3, [r7, #4]
 800081a:	4613      	mov	r3, r2
 800081c:	70fb      	strb	r3, [r7, #3]
    OLED_DrawFilledRectangle(x * SNAKE_BLOCK_SIZE, y * SNAKE_BLOCK_SIZE, SNAKE_BLOCK_SIZE, SNAKE_BLOCK_SIZE, color);
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	b29b      	uxth	r3, r3
 8000824:	b218      	sxth	r0, r3
 8000826:	88bb      	ldrh	r3, [r7, #4]
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	b29b      	uxth	r3, r3
 800082c:	b219      	sxth	r1, r3
 800082e:	78fb      	ldrb	r3, [r7, #3]
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2304      	movs	r3, #4
 8000834:	2204      	movs	r2, #4
 8000836:	f004 fc7e 	bl	8005136 <OLED_DrawFilledRectangle>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <Snake_GenerateFood>:

// Function to generate food at a random position (used by Snake)
static void Snake_GenerateFood()
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
    bool food_on_snake;
    do
    {
        food_on_snake = false;
 800084a:	2300      	movs	r3, #0
 800084c:	71fb      	strb	r3, [r7, #7]
        food.pos.x = rand() % GAME_AREA_WIDTH;
 800084e:	f007 fca1 	bl	8008194 <rand>
 8000852:	4603      	mov	r3, r0
 8000854:	425a      	negs	r2, r3
 8000856:	f003 031f 	and.w	r3, r3, #31
 800085a:	f002 021f 	and.w	r2, r2, #31
 800085e:	bf58      	it	pl
 8000860:	4253      	negpl	r3, r2
 8000862:	b21a      	sxth	r2, r3
 8000864:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <Snake_GenerateFood+0xa4>)
 8000866:	801a      	strh	r2, [r3, #0]
        food.pos.y = rand() % GAME_AREA_HEIGHT;
 8000868:	f007 fc94 	bl	8008194 <rand>
 800086c:	4602      	mov	r2, r0
 800086e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <Snake_GenerateFood+0xa8>)
 8000870:	fb83 1302 	smull	r1, r3, r3, r2
 8000874:	4413      	add	r3, r2
 8000876:	10d9      	asrs	r1, r3, #3
 8000878:	17d3      	asrs	r3, r2, #31
 800087a:	1ac9      	subs	r1, r1, r3
 800087c:	460b      	mov	r3, r1
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	1a5b      	subs	r3, r3, r1
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	1ad1      	subs	r1, r2, r3
 8000886:	b20a      	sxth	r2, r1
 8000888:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <Snake_GenerateFood+0xa4>)
 800088a:	805a      	strh	r2, [r3, #2]
        for (uint16_t i = 0; i < snake.length; i++)
 800088c:	2300      	movs	r3, #0
 800088e:	80bb      	strh	r3, [r7, #4]
 8000890:	e019      	b.n	80008c6 <Snake_GenerateFood+0x82>
        {
            if (snake.body[i].x == food.pos.x && snake.body[i].y == food.pos.y)
 8000892:	88bb      	ldrh	r3, [r7, #4]
 8000894:	4a16      	ldr	r2, [pc, #88]	@ (80008f0 <Snake_GenerateFood+0xac>)
 8000896:	f932 2023 	ldrsh.w	r2, [r2, r3, lsl #2]
 800089a:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <Snake_GenerateFood+0xa4>)
 800089c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d10d      	bne.n	80008c0 <Snake_GenerateFood+0x7c>
 80008a4:	88bb      	ldrh	r3, [r7, #4]
 80008a6:	4a12      	ldr	r2, [pc, #72]	@ (80008f0 <Snake_GenerateFood+0xac>)
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4413      	add	r3, r2
 80008ac:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80008b0:	4b0d      	ldr	r3, [pc, #52]	@ (80008e8 <Snake_GenerateFood+0xa4>)
 80008b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d102      	bne.n	80008c0 <Snake_GenerateFood+0x7c>
            {
                food_on_snake = true;
 80008ba:	2301      	movs	r3, #1
 80008bc:	71fb      	strb	r3, [r7, #7]
                break;
 80008be:	e008      	b.n	80008d2 <Snake_GenerateFood+0x8e>
        for (uint16_t i = 0; i < snake.length; i++)
 80008c0:	88bb      	ldrh	r3, [r7, #4]
 80008c2:	3301      	adds	r3, #1
 80008c4:	80bb      	strh	r3, [r7, #4]
 80008c6:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <Snake_GenerateFood+0xac>)
 80008c8:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80008cc:	88ba      	ldrh	r2, [r7, #4]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d3df      	bcc.n	8000892 <Snake_GenerateFood+0x4e>
            }
        }
    } while (food_on_snake);
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d1b8      	bne.n	800084a <Snake_GenerateFood+0x6>
    food.active = true;
 80008d8:	4b03      	ldr	r3, [pc, #12]	@ (80008e8 <Snake_GenerateFood+0xa4>)
 80008da:	2201      	movs	r2, #1
 80008dc:	711a      	strb	r2, [r3, #4]
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000230 	.word	0x20000230
 80008ec:	92492493 	.word	0x92492493
 80008f0:	2000009c 	.word	0x2000009c

080008f4 <Snake_InitGame>:

void Snake_InitGame(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
    // srand(HAL_GetTick()); // Seed RNG if not done elsewhere
    gameOver = false;
 80008fa:	4b28      	ldr	r3, [pc, #160]	@ (800099c <Snake_InitGame+0xa8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
    snake.length = 3;
 8000900:	4b27      	ldr	r3, [pc, #156]	@ (80009a0 <Snake_InitGame+0xac>)
 8000902:	2203      	movs	r2, #3
 8000904:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
    snake.dir = DIR_RIGHT;
 8000908:	4b25      	ldr	r3, [pc, #148]	@ (80009a0 <Snake_InitGame+0xac>)
 800090a:	2203      	movs	r2, #3
 800090c:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192
    snake.body[0].x = GAME_AREA_WIDTH / 2;
 8000910:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <Snake_InitGame+0xac>)
 8000912:	2210      	movs	r2, #16
 8000914:	801a      	strh	r2, [r3, #0]
    snake.body[0].y = GAME_AREA_HEIGHT / 2;
 8000916:	4b22      	ldr	r3, [pc, #136]	@ (80009a0 <Snake_InitGame+0xac>)
 8000918:	2207      	movs	r2, #7
 800091a:	805a      	strh	r2, [r3, #2]
    snake.body[1].x = snake.body[0].x - 1;
 800091c:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <Snake_InitGame+0xac>)
 800091e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000922:	b29b      	uxth	r3, r3
 8000924:	3b01      	subs	r3, #1
 8000926:	b29b      	uxth	r3, r3
 8000928:	b21a      	sxth	r2, r3
 800092a:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <Snake_InitGame+0xac>)
 800092c:	809a      	strh	r2, [r3, #4]
    snake.body[1].y = snake.body[0].y;
 800092e:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <Snake_InitGame+0xac>)
 8000930:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000934:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <Snake_InitGame+0xac>)
 8000936:	80da      	strh	r2, [r3, #6]
    snake.body[2].x = snake.body[0].x - 2;
 8000938:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <Snake_InitGame+0xac>)
 800093a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800093e:	b29b      	uxth	r3, r3
 8000940:	3b02      	subs	r3, #2
 8000942:	b29b      	uxth	r3, r3
 8000944:	b21a      	sxth	r2, r3
 8000946:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <Snake_InitGame+0xac>)
 8000948:	811a      	strh	r2, [r3, #8]
    snake.body[2].y = snake.body[0].y;
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <Snake_InitGame+0xac>)
 800094c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000950:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <Snake_InitGame+0xac>)
 8000952:	815a      	strh	r2, [r3, #10]
    for (uint16_t i = snake.length; i < SNAKE_MAX_LENGTH; ++i)
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <Snake_InitGame+0xac>)
 8000956:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 800095a:	80fb      	strh	r3, [r7, #6]
 800095c:	e00f      	b.n	800097e <Snake_InitGame+0x8a>
    {
        snake.body[i].x = -1;
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	4a0f      	ldr	r2, [pc, #60]	@ (80009a0 <Snake_InitGame+0xac>)
 8000962:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000966:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
        snake.body[i].y = -1;
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	4a0c      	ldr	r2, [pc, #48]	@ (80009a0 <Snake_InitGame+0xac>)
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	4413      	add	r3, r2
 8000972:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000976:	805a      	strh	r2, [r3, #2]
    for (uint16_t i = snake.length; i < SNAKE_MAX_LENGTH; ++i)
 8000978:	88fb      	ldrh	r3, [r7, #6]
 800097a:	3301      	adds	r3, #1
 800097c:	80fb      	strh	r3, [r7, #6]
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	2b63      	cmp	r3, #99	@ 0x63
 8000982:	d9ec      	bls.n	800095e <Snake_InitGame+0x6a>
    }
    Snake_GenerateFood();
 8000984:	f7ff ff5e 	bl	8000844 <Snake_GenerateFood>
    gameTickLast = HAL_GetTick();
 8000988:	f004 ffb8 	bl	80058fc <HAL_GetTick>
 800098c:	4603      	mov	r3, r0
 800098e:	4a05      	ldr	r2, [pc, #20]	@ (80009a4 <Snake_InitGame+0xb0>)
 8000990:	6013      	str	r3, [r2, #0]
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000236 	.word	0x20000236
 80009a0:	2000009c 	.word	0x2000009c
 80009a4:	20000238 	.word	0x20000238

080009a8 <Snake_Draw>:

static void Snake_Draw(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
    for (uint16_t i = 0; i < snake.length; i++)
 80009ae:	2300      	movs	r3, #0
 80009b0:	80fb      	strh	r3, [r7, #6]
 80009b2:	e010      	b.n	80009d6 <Snake_Draw+0x2e>
    {
        DrawBlock(snake.body[i].x, snake.body[i].y, 1);
 80009b4:	88fb      	ldrh	r3, [r7, #6]
 80009b6:	4a1d      	ldr	r2, [pc, #116]	@ (8000a2c <Snake_Draw+0x84>)
 80009b8:	f932 0023 	ldrsh.w	r0, [r2, r3, lsl #2]
 80009bc:	88fb      	ldrh	r3, [r7, #6]
 80009be:	4a1b      	ldr	r2, [pc, #108]	@ (8000a2c <Snake_Draw+0x84>)
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	4413      	add	r3, r2
 80009c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80009c8:	2201      	movs	r2, #1
 80009ca:	4619      	mov	r1, r3
 80009cc:	f7ff ff1e 	bl	800080c <DrawBlock>
    for (uint16_t i = 0; i < snake.length; i++)
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	3301      	adds	r3, #1
 80009d4:	80fb      	strh	r3, [r7, #6]
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <Snake_Draw+0x84>)
 80009d8:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80009dc:	88fa      	ldrh	r2, [r7, #6]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d3e8      	bcc.n	80009b4 <Snake_Draw+0xc>
    }
    if (food.active)
 80009e2:	4b13      	ldr	r3, [pc, #76]	@ (8000a30 <Snake_Draw+0x88>)
 80009e4:	791b      	ldrb	r3, [r3, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d009      	beq.n	80009fe <Snake_Draw+0x56>
    {
        DrawBlock(food.pos.x, food.pos.y, 1);
 80009ea:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <Snake_Draw+0x88>)
 80009ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000a30 <Snake_Draw+0x88>)
 80009f2:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 80009f6:	2201      	movs	r2, #1
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff07 	bl	800080c <DrawBlock>
    }
    if (gameOver)
 80009fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <Snake_Draw+0x8c>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d00e      	beq.n	8000a24 <Snake_Draw+0x7c>
    {
        OLED_DisplayString(OLED_WIDTH / 2 - 3 * 6, OLED_HEIGHT / 2 - 4, "GAME");
 8000a06:	4a0c      	ldr	r2, [pc, #48]	@ (8000a38 <Snake_Draw+0x90>)
 8000a08:	211c      	movs	r1, #28
 8000a0a:	202e      	movs	r0, #46	@ 0x2e
 8000a0c:	f001 fd52 	bl	80024b4 <OLED_DisplayString>
        OLED_DisplayString(OLED_WIDTH / 2 - 3 * 6, OLED_HEIGHT / 2 + 4, "OVER");
 8000a10:	4a0a      	ldr	r2, [pc, #40]	@ (8000a3c <Snake_Draw+0x94>)
 8000a12:	2124      	movs	r1, #36	@ 0x24
 8000a14:	202e      	movs	r0, #46	@ 0x2e
 8000a16:	f001 fd4d 	bl	80024b4 <OLED_DisplayString>
        OLED_DisplayString(OLED_WIDTH / 2 - 5 * 6, OLED_HEIGHT / 2 + 12, "RST BTN=RS");
 8000a1a:	4a09      	ldr	r2, [pc, #36]	@ (8000a40 <Snake_Draw+0x98>)
 8000a1c:	212c      	movs	r1, #44	@ 0x2c
 8000a1e:	2022      	movs	r0, #34	@ 0x22
 8000a20:	f001 fd48 	bl	80024b4 <OLED_DisplayString>
    }
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	2000009c 	.word	0x2000009c
 8000a30:	20000230 	.word	0x20000230
 8000a34:	20000236 	.word	0x20000236
 8000a38:	0800aac4 	.word	0x0800aac4
 8000a3c:	0800aacc 	.word	0x0800aacc
 8000a40:	0800aad4 	.word	0x0800aad4

08000a44 <Snake_Update>:

static void Snake_Update(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
    if (gameOver)
 8000a4a:	4b5a      	ldr	r3, [pc, #360]	@ (8000bb4 <Snake_Update+0x170>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f040 80ab 	bne.w	8000baa <Snake_Update+0x166>
        return;

    Point new_head = snake.body[0];
 8000a54:	4b58      	ldr	r3, [pc, #352]	@ (8000bb8 <Snake_Update+0x174>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	603b      	str	r3, [r7, #0]
    switch (snake.dir)
 8000a5a:	4b57      	ldr	r3, [pc, #348]	@ (8000bb8 <Snake_Update+0x174>)
 8000a5c:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000a60:	2b03      	cmp	r3, #3
 8000a62:	d82b      	bhi.n	8000abc <Snake_Update+0x78>
 8000a64:	a201      	add	r2, pc, #4	@ (adr r2, 8000a6c <Snake_Update+0x28>)
 8000a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6a:	bf00      	nop
 8000a6c:	08000a7d 	.word	0x08000a7d
 8000a70:	08000a8d 	.word	0x08000a8d
 8000a74:	08000a9d 	.word	0x08000a9d
 8000a78:	08000aad 	.word	0x08000aad
    {
    case DIR_UP:
        new_head.y--;
 8000a7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	3b01      	subs	r3, #1
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	807b      	strh	r3, [r7, #2]
        break;
 8000a8a:	e017      	b.n	8000abc <Snake_Update+0x78>
    case DIR_DOWN:
        new_head.y++;
 8000a8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	3301      	adds	r3, #1
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	807b      	strh	r3, [r7, #2]
        break;
 8000a9a:	e00f      	b.n	8000abc <Snake_Update+0x78>
    case DIR_LEFT:
        new_head.x--;
 8000a9c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	b21b      	sxth	r3, r3
 8000aa8:	803b      	strh	r3, [r7, #0]
        break;
 8000aaa:	e007      	b.n	8000abc <Snake_Update+0x78>
    case DIR_RIGHT:
        new_head.x++;
 8000aac:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	b21b      	sxth	r3, r3
 8000ab8:	803b      	strh	r3, [r7, #0]
        break;
 8000aba:	bf00      	nop
    }

    if (new_head.x < 0)
 8000abc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	da02      	bge.n	8000aca <Snake_Update+0x86>
        new_head.x = GAME_AREA_WIDTH - 1;
 8000ac4:	231f      	movs	r3, #31
 8000ac6:	803b      	strh	r3, [r7, #0]
 8000ac8:	e005      	b.n	8000ad6 <Snake_Update+0x92>
    else if (new_head.x >= GAME_AREA_WIDTH)
 8000aca:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ace:	2b1f      	cmp	r3, #31
 8000ad0:	dd01      	ble.n	8000ad6 <Snake_Update+0x92>
        new_head.x = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	803b      	strh	r3, [r7, #0]
    if (new_head.y < 0)
 8000ad6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	da02      	bge.n	8000ae4 <Snake_Update+0xa0>
        new_head.y = GAME_AREA_HEIGHT - 1;
 8000ade:	230d      	movs	r3, #13
 8000ae0:	807b      	strh	r3, [r7, #2]
 8000ae2:	e005      	b.n	8000af0 <Snake_Update+0xac>
    else if (new_head.y >= GAME_AREA_HEIGHT)
 8000ae4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ae8:	2b0d      	cmp	r3, #13
 8000aea:	dd01      	ble.n	8000af0 <Snake_Update+0xac>
        new_head.y = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	807b      	strh	r3, [r7, #2]

    for (uint16_t i = 0; i < snake.length - 1; i++) // Check up to length-1
 8000af0:	2300      	movs	r3, #0
 8000af2:	80fb      	strh	r3, [r7, #6]
 8000af4:	e018      	b.n	8000b28 <Snake_Update+0xe4>
    {
        if (new_head.x == snake.body[i].x && new_head.y == snake.body[i].y)
 8000af6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000afa:	88fb      	ldrh	r3, [r7, #6]
 8000afc:	492e      	ldr	r1, [pc, #184]	@ (8000bb8 <Snake_Update+0x174>)
 8000afe:	f931 3023 	ldrsh.w	r3, [r1, r3, lsl #2]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d10d      	bne.n	8000b22 <Snake_Update+0xde>
 8000b06:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	492a      	ldr	r1, [pc, #168]	@ (8000bb8 <Snake_Update+0x174>)
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	440b      	add	r3, r1
 8000b12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d103      	bne.n	8000b22 <Snake_Update+0xde>
        {
            gameOver = true;
 8000b1a:	4b26      	ldr	r3, [pc, #152]	@ (8000bb4 <Snake_Update+0x170>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	701a      	strb	r2, [r3, #0]
            return;
 8000b20:	e044      	b.n	8000bac <Snake_Update+0x168>
    for (uint16_t i = 0; i < snake.length - 1; i++) // Check up to length-1
 8000b22:	88fb      	ldrh	r3, [r7, #6]
 8000b24:	3301      	adds	r3, #1
 8000b26:	80fb      	strh	r3, [r7, #6]
 8000b28:	88fa      	ldrh	r2, [r7, #6]
 8000b2a:	4b23      	ldr	r3, [pc, #140]	@ (8000bb8 <Snake_Update+0x174>)
 8000b2c:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000b30:	3b01      	subs	r3, #1
 8000b32:	429a      	cmp	r2, r3
 8000b34:	dbdf      	blt.n	8000af6 <Snake_Update+0xb2>
        }
    }

    if (food.active && new_head.x == food.pos.x && new_head.y == food.pos.y)
 8000b36:	4b21      	ldr	r3, [pc, #132]	@ (8000bbc <Snake_Update+0x178>)
 8000b38:	791b      	ldrb	r3, [r3, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d01c      	beq.n	8000b78 <Snake_Update+0x134>
 8000b3e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b42:	4b1e      	ldr	r3, [pc, #120]	@ (8000bbc <Snake_Update+0x178>)
 8000b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d115      	bne.n	8000b78 <Snake_Update+0x134>
 8000b4c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000b50:	4b1a      	ldr	r3, [pc, #104]	@ (8000bbc <Snake_Update+0x178>)
 8000b52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d10e      	bne.n	8000b78 <Snake_Update+0x134>
    {
        if (snake.length < SNAKE_MAX_LENGTH)
 8000b5a:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <Snake_Update+0x174>)
 8000b5c:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000b60:	2b63      	cmp	r3, #99	@ 0x63
 8000b62:	d807      	bhi.n	8000b74 <Snake_Update+0x130>
            snake.length++;
 8000b64:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <Snake_Update+0x174>)
 8000b66:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <Snake_Update+0x174>)
 8000b70:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
        Snake_GenerateFood();
 8000b74:	f7ff fe66 	bl	8000844 <Snake_GenerateFood>
    }
    // No else needed for tail movement; body shift handles it.

    for (uint16_t i = snake.length - 1; i > 0; i--)
 8000b78:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <Snake_Update+0x174>)
 8000b7a:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	80bb      	strh	r3, [r7, #4]
 8000b82:	e00b      	b.n	8000b9c <Snake_Update+0x158>
    {
        snake.body[i] = snake.body[i - 1];
 8000b84:	88bb      	ldrh	r3, [r7, #4]
 8000b86:	1e5a      	subs	r2, r3, #1
 8000b88:	88bb      	ldrh	r3, [r7, #4]
 8000b8a:	490b      	ldr	r1, [pc, #44]	@ (8000bb8 <Snake_Update+0x174>)
 8000b8c:	480a      	ldr	r0, [pc, #40]	@ (8000bb8 <Snake_Update+0x174>)
 8000b8e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8000b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint16_t i = snake.length - 1; i > 0; i--)
 8000b96:	88bb      	ldrh	r3, [r7, #4]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	80bb      	strh	r3, [r7, #4]
 8000b9c:	88bb      	ldrh	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d1f0      	bne.n	8000b84 <Snake_Update+0x140>
    }
    snake.body[0] = new_head;
 8000ba2:	4a05      	ldr	r2, [pc, #20]	@ (8000bb8 <Snake_Update+0x174>)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	e000      	b.n	8000bac <Snake_Update+0x168>
        return;
 8000baa:	bf00      	nop
}
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000236 	.word	0x20000236
 8000bb8:	2000009c 	.word	0x2000009c
 8000bbc:	20000230 	.word	0x20000230

08000bc0 <Snake_HandleInput>:

void Snake_HandleInput(Direction input_dir)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
    if ((snake.dir == DIR_UP && input_dir != DIR_DOWN) ||
 8000bca:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <Snake_HandleInput+0x5c>)
 8000bcc:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <Snake_HandleInput+0x1a>
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d117      	bne.n	8000c0a <Snake_HandleInput+0x4a>
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <Snake_HandleInput+0x5c>)
 8000bdc:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
    if ((snake.dir == DIR_UP && input_dir != DIR_DOWN) ||
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d102      	bne.n	8000bea <Snake_HandleInput+0x2a>
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d10f      	bne.n	8000c0a <Snake_HandleInput+0x4a>
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <Snake_HandleInput+0x5c>)
 8000bec:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d102      	bne.n	8000bfa <Snake_HandleInput+0x3a>
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b03      	cmp	r3, #3
 8000bf8:	d107      	bne.n	8000c0a <Snake_HandleInput+0x4a>
        (snake.dir == DIR_RIGHT && input_dir != DIR_LEFT))
 8000bfa:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <Snake_HandleInput+0x5c>)
 8000bfc:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8000c00:	2b03      	cmp	r3, #3
 8000c02:	d106      	bne.n	8000c12 <Snake_HandleInput+0x52>
        (snake.dir == DIR_RIGHT && input_dir != DIR_LEFT))
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d003      	beq.n	8000c12 <Snake_HandleInput+0x52>
    {
        snake.dir = input_dir;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	@ (8000c1c <Snake_HandleInput+0x5c>)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	f882 3192 	strb.w	r3, [r2, #402]	@ 0x192
    }
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	2000009c 	.word	0x2000009c

08000c20 <Snake_GameLoop>:

void Snake_GameLoop(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
    static uint16_t LastCount;
    static bool preMutiTurn = false;

    if (FirstRun)
 8000c26:	4b60      	ldr	r3, [pc, #384]	@ (8000da8 <Snake_GameLoop+0x188>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d006      	beq.n	8000c3c <Snake_GameLoop+0x1c>
    {
        FirstRun = false;
 8000c2e:	4b5e      	ldr	r3, [pc, #376]	@ (8000da8 <Snake_GameLoop+0x188>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
        LastCount = count;
 8000c34:	4b5d      	ldr	r3, [pc, #372]	@ (8000dac <Snake_GameLoop+0x18c>)
 8000c36:	881a      	ldrh	r2, [r3, #0]
 8000c38:	4b5d      	ldr	r3, [pc, #372]	@ (8000db0 <Snake_GameLoop+0x190>)
 8000c3a:	801a      	strh	r2, [r3, #0]
    }

    if (!preMutiTurn)
 8000c3c:	4b5d      	ldr	r3, [pc, #372]	@ (8000db4 <Snake_GameLoop+0x194>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	f083 0301 	eor.w	r3, r3, #1
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d065      	beq.n	8000d16 <Snake_GameLoop+0xf6>
    {
        if (count - LastCount > 1)
 8000c4a:	4b58      	ldr	r3, [pc, #352]	@ (8000dac <Snake_GameLoop+0x18c>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b57      	ldr	r3, [pc, #348]	@ (8000db0 <Snake_GameLoop+0x190>)
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	dd2a      	ble.n	8000cb0 <Snake_GameLoop+0x90>
        {
            if (snake.dir == DIR_UP)
 8000c5a:	4b57      	ldr	r3, [pc, #348]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000c5c:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d103      	bne.n	8000c6c <Snake_GameLoop+0x4c>
                Snake_HandleInput(DIR_RIGHT);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f7ff ffab 	bl	8000bc0 <Snake_HandleInput>
 8000c6a:	e019      	b.n	8000ca0 <Snake_GameLoop+0x80>
            else if (snake.dir == DIR_DOWN)
 8000c6c:	4b52      	ldr	r3, [pc, #328]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000c6e:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d103      	bne.n	8000c7e <Snake_GameLoop+0x5e>
                Snake_HandleInput(DIR_LEFT);
 8000c76:	2002      	movs	r0, #2
 8000c78:	f7ff ffa2 	bl	8000bc0 <Snake_HandleInput>
 8000c7c:	e010      	b.n	8000ca0 <Snake_GameLoop+0x80>
            else if (snake.dir == DIR_LEFT)
 8000c7e:	4b4e      	ldr	r3, [pc, #312]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000c80:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d103      	bne.n	8000c90 <Snake_GameLoop+0x70>
                Snake_HandleInput(DIR_UP);
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff ff99 	bl	8000bc0 <Snake_HandleInput>
 8000c8e:	e007      	b.n	8000ca0 <Snake_GameLoop+0x80>
            else if (snake.dir == DIR_RIGHT)
 8000c90:	4b49      	ldr	r3, [pc, #292]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000c92:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d102      	bne.n	8000ca0 <Snake_GameLoop+0x80>
                Snake_HandleInput(DIR_DOWN);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff ff90 	bl	8000bc0 <Snake_HandleInput>

            preMutiTurn = true;
 8000ca0:	4b44      	ldr	r3, [pc, #272]	@ (8000db4 <Snake_GameLoop+0x194>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	701a      	strb	r2, [r3, #0]
            LastCount = count;
 8000ca6:	4b41      	ldr	r3, [pc, #260]	@ (8000dac <Snake_GameLoop+0x18c>)
 8000ca8:	881a      	ldrh	r2, [r3, #0]
 8000caa:	4b41      	ldr	r3, [pc, #260]	@ (8000db0 <Snake_GameLoop+0x190>)
 8000cac:	801a      	strh	r2, [r3, #0]
 8000cae:	e032      	b.n	8000d16 <Snake_GameLoop+0xf6>
        }
        else if (count - LastCount < -1)
 8000cb0:	4b3e      	ldr	r3, [pc, #248]	@ (8000dac <Snake_GameLoop+0x18c>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b3e      	ldr	r3, [pc, #248]	@ (8000db0 <Snake_GameLoop+0x190>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc0:	da29      	bge.n	8000d16 <Snake_GameLoop+0xf6>
        {
            if (snake.dir == DIR_UP)
 8000cc2:	4b3d      	ldr	r3, [pc, #244]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000cc4:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d103      	bne.n	8000cd4 <Snake_GameLoop+0xb4>
                Snake_HandleInput(DIR_LEFT);
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f7ff ff77 	bl	8000bc0 <Snake_HandleInput>
 8000cd2:	e019      	b.n	8000d08 <Snake_GameLoop+0xe8>
            else if (snake.dir == DIR_DOWN)
 8000cd4:	4b38      	ldr	r3, [pc, #224]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000cd6:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d103      	bne.n	8000ce6 <Snake_GameLoop+0xc6>
                Snake_HandleInput(DIR_RIGHT);
 8000cde:	2003      	movs	r0, #3
 8000ce0:	f7ff ff6e 	bl	8000bc0 <Snake_HandleInput>
 8000ce4:	e010      	b.n	8000d08 <Snake_GameLoop+0xe8>
            else if (snake.dir == DIR_LEFT)
 8000ce6:	4b34      	ldr	r3, [pc, #208]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000ce8:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d103      	bne.n	8000cf8 <Snake_GameLoop+0xd8>
                Snake_HandleInput(DIR_DOWN);
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f7ff ff65 	bl	8000bc0 <Snake_HandleInput>
 8000cf6:	e007      	b.n	8000d08 <Snake_GameLoop+0xe8>
            else if (snake.dir == DIR_RIGHT)
 8000cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000cfa:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	d102      	bne.n	8000d08 <Snake_GameLoop+0xe8>
                Snake_HandleInput(DIR_UP);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff ff5c 	bl	8000bc0 <Snake_HandleInput>

            preMutiTurn = true;
 8000d08:	4b2a      	ldr	r3, [pc, #168]	@ (8000db4 <Snake_GameLoop+0x194>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
            LastCount = count;
 8000d0e:	4b27      	ldr	r3, [pc, #156]	@ (8000dac <Snake_GameLoop+0x18c>)
 8000d10:	881a      	ldrh	r2, [r3, #0]
 8000d12:	4b27      	ldr	r3, [pc, #156]	@ (8000db0 <Snake_GameLoop+0x190>)
 8000d14:	801a      	strh	r2, [r3, #0]
        }
    }

    if (HAL_GetTick() - gameTickLast >= GAME_TICK_MS)
 8000d16:	f004 fdf1 	bl	80058fc <HAL_GetTick>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	4b27      	ldr	r3, [pc, #156]	@ (8000dbc <Snake_GameLoop+0x19c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b63      	cmp	r3, #99	@ 0x63
 8000d24:	d909      	bls.n	8000d3a <Snake_GameLoop+0x11a>
    {
        Snake_Update();
 8000d26:	f7ff fe8d 	bl	8000a44 <Snake_Update>
        gameTickLast = HAL_GetTick();
 8000d2a:	f004 fde7 	bl	80058fc <HAL_GetTick>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4a22      	ldr	r2, [pc, #136]	@ (8000dbc <Snake_GameLoop+0x19c>)
 8000d32:	6013      	str	r3, [r2, #0]
        preMutiTurn = false;
 8000d34:	4b1f      	ldr	r3, [pc, #124]	@ (8000db4 <Snake_GameLoop+0x194>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
    }
    Snake_Draw();
 8000d3a:	f7ff fe35 	bl	80009a8 <Snake_Draw>

    if (gameOver)
 8000d3e:	4b20      	ldr	r3, [pc, #128]	@ (8000dc0 <Snake_GameLoop+0x1a0>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d01d      	beq.n	8000d82 <Snake_GameLoop+0x162>
    {
        if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8000d46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d4a:	481e      	ldr	r0, [pc, #120]	@ (8000dc4 <Snake_GameLoop+0x1a4>)
 8000d4c:	f005 f9f6 	bl	800613c <HAL_GPIO_ReadPin>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d115      	bne.n	8000d82 <Snake_GameLoop+0x162>
        {
            HAL_Delay(INPUT_DEBOUNCE_MS);
 8000d56:	2032      	movs	r0, #50	@ 0x32
 8000d58:	f004 fdda 	bl	8005910 <HAL_Delay>
            if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8000d5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d60:	4818      	ldr	r0, [pc, #96]	@ (8000dc4 <Snake_GameLoop+0x1a4>)
 8000d62:	f005 f9eb 	bl	800613c <HAL_GPIO_ReadPin>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d10a      	bne.n	8000d82 <Snake_GameLoop+0x162>
            {
                Snake_InitGame();
 8000d6c:	f7ff fdc2 	bl	80008f4 <Snake_InitGame>
                while (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8000d70:	bf00      	nop
 8000d72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d76:	4813      	ldr	r0, [pc, #76]	@ (8000dc4 <Snake_GameLoop+0x1a4>)
 8000d78:	f005 f9e0 	bl	800613c <HAL_GPIO_ReadPin>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0f7      	beq.n	8000d72 <Snake_GameLoop+0x152>
                    ;
            }
        }
    }
    char score_str[20];
    sprintf(score_str, "Score: %d", snake.length - 3);
 8000d82:	4b0d      	ldr	r3, [pc, #52]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000d84:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000d88:	1eda      	subs	r2, r3, #3
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	490e      	ldr	r1, [pc, #56]	@ (8000dc8 <Snake_GameLoop+0x1a8>)
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f007 fb5e 	bl	8008450 <siprintf>
    OLED_DisplayString(0, OLED_HEIGHT-8, score_str);
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	461a      	mov	r2, r3
 8000d98:	2138      	movs	r1, #56	@ 0x38
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f001 fb8a 	bl	80024b4 <OLED_DisplayString>
}
 8000da0:	bf00      	nop
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000000 	.word	0x20000000
 8000dac:	20000358 	.word	0x20000358
 8000db0:	20000264 	.word	0x20000264
 8000db4:	20000266 	.word	0x20000266
 8000db8:	2000009c 	.word	0x2000009c
 8000dbc:	20000238 	.word	0x20000238
 8000dc0:	20000236 	.word	0x20000236
 8000dc4:	40010c00 	.word	0x40010c00
 8000dc8:	0800aae0 	.word	0x0800aae0

08000dcc <Game2048_AddRandomTile>:

#pragma region 2048 Game Definitions
// --- 2048 Game Implementation ---

static void Game2048_AddRandomTile()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b092      	sub	sp, #72	@ 0x48
 8000dd0:	af00      	add	r7, sp, #0
    Point empty_tiles[GAME2048_BOARD_SIZE * GAME2048_BOARD_SIZE]; // Use GAME2048_BOARD_SIZE
    uint8_t num_empty_tiles = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8000dde:	e035      	b.n	8000e4c <Game2048_AddRandomTile+0x80>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000de0:	2300      	movs	r3, #0
 8000de2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8000de6:	e028      	b.n	8000e3a <Game2048_AddRandomTile+0x6e>
        {
            if (game2048_board[r][c].value == 0)
 8000de8:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8000dec:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000df0:	493a      	ldr	r1, [pc, #232]	@ (8000edc <Game2048_AddRandomTile+0x110>)
 8000df2:	0092      	lsls	r2, r2, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d118      	bne.n	8000e30 <Game2048_AddRandomTile+0x64>
            {
                empty_tiles[num_empty_tiles].x = c;
 8000dfe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000e02:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8000e06:	b212      	sxth	r2, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	3348      	adds	r3, #72	@ 0x48
 8000e0c:	443b      	add	r3, r7
 8000e0e:	f823 2c48 	strh.w	r2, [r3, #-72]
                empty_tiles[num_empty_tiles].y = r;
 8000e12:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000e16:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8000e1a:	b212      	sxth	r2, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	3348      	adds	r3, #72	@ 0x48
 8000e20:	443b      	add	r3, r7
 8000e22:	f823 2c46 	strh.w	r2, [r3, #-70]
                num_empty_tiles++;
 8000e26:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000e30:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000e34:	3301      	adds	r3, #1
 8000e36:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8000e3a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d9d2      	bls.n	8000de8 <Game2048_AddRandomTile+0x1c>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000e42:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000e46:	3301      	adds	r3, #1
 8000e48:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8000e4c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000e50:	2b03      	cmp	r3, #3
 8000e52:	d9c5      	bls.n	8000de0 <Game2048_AddRandomTile+0x14>
            }
        }
    }
    if (num_empty_tiles > 0)
 8000e54:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d03a      	beq.n	8000ed2 <Game2048_AddRandomTile+0x106>
    {
        uint16_t rand_index = rand() % num_empty_tiles;
 8000e5c:	f007 f99a 	bl	8008194 <rand>
 8000e60:	4602      	mov	r2, r0
 8000e62:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000e66:	fb92 f1f3 	sdiv	r1, r2, r3
 8000e6a:	fb01 f303 	mul.w	r3, r1, r3
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        uint8_t r_pos = empty_tiles[rand_index].y;
 8000e74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	3348      	adds	r3, #72	@ 0x48
 8000e7c:	443b      	add	r3, r7
 8000e7e:	f933 3c46 	ldrsh.w	r3, [r3, #-70]
 8000e82:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
        uint8_t c_pos = empty_tiles[rand_index].x;
 8000e86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	3348      	adds	r3, #72	@ 0x48
 8000e8e:	443b      	add	r3, r7
 8000e90:	f933 3c48 	ldrsh.w	r3, [r3, #-72]
 8000e94:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
        game2048_board[r_pos][c_pos].value = (rand() % 10 == 0) ? 4 : 2;
 8000e98:	f007 f97c 	bl	8008194 <rand>
 8000e9c:	4601      	mov	r1, r0
 8000e9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <Game2048_AddRandomTile+0x114>)
 8000ea0:	fb83 2301 	smull	r2, r3, r3, r1
 8000ea4:	109a      	asrs	r2, r3, #2
 8000ea6:	17cb      	asrs	r3, r1, #31
 8000ea8:	1ad2      	subs	r2, r2, r3
 8000eaa:	4613      	mov	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	1aca      	subs	r2, r1, r3
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	d101      	bne.n	8000ebc <Game2048_AddRandomTile+0xf0>
 8000eb8:	2004      	movs	r0, #4
 8000eba:	e000      	b.n	8000ebe <Game2048_AddRandomTile+0xf2>
 8000ebc:	2002      	movs	r0, #2
 8000ebe:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 8000ec2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000ec6:	4905      	ldr	r1, [pc, #20]	@ (8000edc <Game2048_AddRandomTile+0x110>)
 8000ec8:	0092      	lsls	r2, r2, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	4602      	mov	r2, r0
 8000ece:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }
}
 8000ed2:	bf00      	nop
 8000ed4:	3748      	adds	r7, #72	@ 0x48
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000023c 	.word	0x2000023c
 8000ee0:	66666667 	.word	0x66666667

08000ee4 <Game2048_Init>:

void Game2048_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000eea:	2300      	movs	r3, #0
 8000eec:	71fb      	strb	r3, [r7, #7]
 8000eee:	e013      	b.n	8000f18 <Game2048_Init+0x34>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	71bb      	strb	r3, [r7, #6]
 8000ef4:	e00a      	b.n	8000f0c <Game2048_Init+0x28>
        {
            game2048_board[r][c].value = 0;
 8000ef6:	79fa      	ldrb	r2, [r7, #7]
 8000ef8:	79bb      	ldrb	r3, [r7, #6]
 8000efa:	4913      	ldr	r1, [pc, #76]	@ (8000f48 <Game2048_Init+0x64>)
 8000efc:	0092      	lsls	r2, r2, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	2200      	movs	r2, #0
 8000f02:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000f06:	79bb      	ldrb	r3, [r7, #6]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	71bb      	strb	r3, [r7, #6]
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d9f1      	bls.n	8000ef6 <Game2048_Init+0x12>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	3301      	adds	r3, #1
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d9e8      	bls.n	8000ef0 <Game2048_Init+0xc>
        }
    }
    game2048_score = 0;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f4c <Game2048_Init+0x68>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
    game2048_game_over = false;
 8000f24:	4b0a      	ldr	r3, [pc, #40]	@ (8000f50 <Game2048_Init+0x6c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
    game2048_game_won = false;
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <Game2048_Init+0x70>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
    game2048_move_made_this_turn = false;
 8000f30:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <Game2048_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
    Game2048_AddRandomTile();
 8000f36:	f7ff ff49 	bl	8000dcc <Game2048_AddRandomTile>

    OLED_UpdateDisplayVSync(); // Update display to show the initial state
 8000f3a:	f000 fecb 	bl	8001cd4 <OLED_UpdateDisplayVSync>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000023c 	.word	0x2000023c
 8000f4c:	2000025c 	.word	0x2000025c
 8000f50:	20000260 	.word	0x20000260
 8000f54:	20000261 	.word	0x20000261
 8000f58:	20000262 	.word	0x20000262

08000f5c <Game2048_Restart>:

void Game2048_Restart(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
    Game2048_Init();
 8000f60:	f7ff ffc0 	bl	8000ee4 <Game2048_Init>
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <Game2048_DrawBoard>:

void Game2048_DrawBoard(void)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b089      	sub	sp, #36	@ 0x24
 8000f6c:	af02      	add	r7, sp, #8
    OLED_ClearBuffer();
 8000f6e:	f000 fe69 	bl	8001c44 <OLED_ClearBuffer>
    char str_buffer[10];
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000f72:	2300      	movs	r3, #0
 8000f74:	75fb      	strb	r3, [r7, #23]
 8000f76:	e068      	b.n	800104a <Game2048_DrawBoard+0xe2>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000f78:	2300      	movs	r3, #0
 8000f7a:	75bb      	strb	r3, [r7, #22]
 8000f7c:	e05f      	b.n	800103e <Game2048_DrawBoard+0xd6>
        {
            uint16_t val = game2048_board[r][c].value;
 8000f7e:	7dfa      	ldrb	r2, [r7, #23]
 8000f80:	7dbb      	ldrb	r3, [r7, #22]
 8000f82:	494d      	ldr	r1, [pc, #308]	@ (80010b8 <Game2048_DrawBoard+0x150>)
 8000f84:	0092      	lsls	r2, r2, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f8c:	82bb      	strh	r3, [r7, #20]
            uint8_t tile_x = c * GAME2048_TILE_WIDTH;
 8000f8e:	7dbb      	ldrb	r3, [r7, #22]
 8000f90:	015b      	lsls	r3, r3, #5
 8000f92:	74fb      	strb	r3, [r7, #19]
            uint8_t tile_y = r * GAME2048_TILE_HEIGHT;
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	461a      	mov	r2, r3
 8000f98:	00d2      	lsls	r2, r2, #3
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	74bb      	strb	r3, [r7, #18]
            uint8_t tile_inner_width = GAME2048_TILE_WIDTH - 2 * GAME2048_TILE_PADDING;
 8000fa0:	231e      	movs	r3, #30
 8000fa2:	747b      	strb	r3, [r7, #17]
            uint8_t tile_inner_height = GAME2048_TILE_HEIGHT - 2 * GAME2048_TILE_PADDING;
 8000fa4:	230c      	movs	r3, #12
 8000fa6:	743b      	strb	r3, [r7, #16]

            OLED_DrawFilledRectangle(tile_x + GAME2048_TILE_PADDING,
 8000fa8:	7cfb      	ldrb	r3, [r7, #19]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	3301      	adds	r3, #1
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	b218      	sxth	r0, r3
                                     tile_y + GAME2048_TILE_PADDING,
 8000fb2:	7cbb      	ldrb	r3, [r7, #18]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	b29b      	uxth	r3, r3
            OLED_DrawFilledRectangle(tile_x + GAME2048_TILE_PADDING,
 8000fba:	b219      	sxth	r1, r3
 8000fbc:	8abb      	ldrh	r3, [r7, #20]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	bf14      	ite	ne
 8000fc2:	2301      	movne	r3, #1
 8000fc4:	2300      	moveq	r3, #0
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	461c      	mov	r4, r3
 8000fca:	7c3b      	ldrb	r3, [r7, #16]
 8000fcc:	7c7a      	ldrb	r2, [r7, #17]
 8000fce:	9400      	str	r4, [sp, #0]
 8000fd0:	f004 f8b1 	bl	8005136 <OLED_DrawFilledRectangle>
                                     tile_inner_width, tile_inner_height,
                                     (val == 0) ? 0 : 1);
            if (val > 0)
 8000fd4:	8abb      	ldrh	r3, [r7, #20]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d02e      	beq.n	8001038 <Game2048_DrawBoard+0xd0>
            {
                sprintf(str_buffer, "%d", val);
 8000fda:	8aba      	ldrh	r2, [r7, #20]
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4937      	ldr	r1, [pc, #220]	@ (80010bc <Game2048_DrawBoard+0x154>)
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f007 fa35 	bl	8008450 <siprintf>
                uint8_t text_width = strlen(str_buffer) * 6;
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff f8b9 	bl	8000160 <strlen>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	0052      	lsls	r2, r2, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
                uint8_t text_height = 8;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	73bb      	strb	r3, [r7, #14]
                uint8_t text_x = tile_x + (GAME2048_TILE_WIDTH - text_width) / 2;
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	f1c3 0320 	rsb	r3, r3, #32
 8001006:	0fda      	lsrs	r2, r3, #31
 8001008:	4413      	add	r3, r2
 800100a:	105b      	asrs	r3, r3, #1
 800100c:	b2da      	uxtb	r2, r3
 800100e:	7cfb      	ldrb	r3, [r7, #19]
 8001010:	4413      	add	r3, r2
 8001012:	737b      	strb	r3, [r7, #13]
                uint8_t text_y = tile_y + (GAME2048_TILE_HEIGHT - text_height) / 2;
 8001014:	7bbb      	ldrb	r3, [r7, #14]
 8001016:	f1c3 030e 	rsb	r3, r3, #14
 800101a:	0fda      	lsrs	r2, r3, #31
 800101c:	4413      	add	r3, r2
 800101e:	105b      	asrs	r3, r3, #1
 8001020:	b2da      	uxtb	r2, r3
 8001022:	7cbb      	ldrb	r3, [r7, #18]
 8001024:	4413      	add	r3, r2
 8001026:	733b      	strb	r3, [r7, #12]
                OLED_DisplayStringInverted(text_x, text_y, str_buffer, 1);
 8001028:	7b7b      	ldrb	r3, [r7, #13]
 800102a:	b218      	sxth	r0, r3
 800102c:	7b3b      	ldrb	r3, [r7, #12]
 800102e:	b219      	sxth	r1, r3
 8001030:	463a      	mov	r2, r7
 8001032:	2301      	movs	r3, #1
 8001034:	f001 fa8b 	bl	800254e <OLED_DisplayStringInverted>
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001038:	7dbb      	ldrb	r3, [r7, #22]
 800103a:	3301      	adds	r3, #1
 800103c:	75bb      	strb	r3, [r7, #22]
 800103e:	7dbb      	ldrb	r3, [r7, #22]
 8001040:	2b03      	cmp	r3, #3
 8001042:	d99c      	bls.n	8000f7e <Game2048_DrawBoard+0x16>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	3301      	adds	r3, #1
 8001048:	75fb      	strb	r3, [r7, #23]
 800104a:	7dfb      	ldrb	r3, [r7, #23]
 800104c:	2b03      	cmp	r3, #3
 800104e:	d993      	bls.n	8000f78 <Game2048_DrawBoard+0x10>
            }
        }
    }
    sprintf(str_buffer, "Scores:%lu", game2048_score);
 8001050:	4b1b      	ldr	r3, [pc, #108]	@ (80010c0 <Game2048_DrawBoard+0x158>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	463b      	mov	r3, r7
 8001056:	491b      	ldr	r1, [pc, #108]	@ (80010c4 <Game2048_DrawBoard+0x15c>)
 8001058:	4618      	mov	r0, r3
 800105a:	f007 f9f9 	bl	8008450 <siprintf>
    OLED_DisplayString(0, OLED_HEIGHT - 8, str_buffer);
 800105e:	463b      	mov	r3, r7
 8001060:	461a      	mov	r2, r3
 8001062:	2138      	movs	r1, #56	@ 0x38
 8001064:	2000      	movs	r0, #0
 8001066:	f001 fa25 	bl	80024b4 <OLED_DisplayString>

    if (game2048_game_over)
 800106a:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <Game2048_DrawBoard+0x160>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d014      	beq.n	800109c <Game2048_DrawBoard+0x134>
    {
        OLED_DrawFilledRectangle(0, 0, OLED_WIDTH, OLED_HEIGHT-8, 1);
 8001072:	2301      	movs	r3, #1
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2338      	movs	r3, #56	@ 0x38
 8001078:	2280      	movs	r2, #128	@ 0x80
 800107a:	2100      	movs	r1, #0
 800107c:	2000      	movs	r0, #0
 800107e:	f004 f85a 	bl	8005136 <OLED_DrawFilledRectangle>
        OLED_DisplayStringInverted((OLED_WIDTH - 8 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2 - 8, "GAME OVER", 1);
 8001082:	2301      	movs	r3, #1
 8001084:	4a11      	ldr	r2, [pc, #68]	@ (80010cc <Game2048_DrawBoard+0x164>)
 8001086:	2114      	movs	r1, #20
 8001088:	2028      	movs	r0, #40	@ 0x28
 800108a:	f001 fa60 	bl	800254e <OLED_DisplayStringInverted>
        OLED_DisplayStringInverted((OLED_WIDTH - 10 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2, "RST BTN=RS", 1);
 800108e:	2301      	movs	r3, #1
 8001090:	4a0f      	ldr	r2, [pc, #60]	@ (80010d0 <Game2048_DrawBoard+0x168>)
 8001092:	211c      	movs	r1, #28
 8001094:	2022      	movs	r0, #34	@ 0x22
 8001096:	f001 fa5a 	bl	800254e <OLED_DisplayStringInverted>
    }
    else if (game2048_game_won)
    {
        OLED_DisplayString((OLED_WIDTH - 7 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2 - 4, "YOU WIN!");
    }
}
 800109a:	e008      	b.n	80010ae <Game2048_DrawBoard+0x146>
    else if (game2048_game_won)
 800109c:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <Game2048_DrawBoard+0x16c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d004      	beq.n	80010ae <Game2048_DrawBoard+0x146>
        OLED_DisplayString((OLED_WIDTH - 7 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2 - 4, "YOU WIN!");
 80010a4:	4a0c      	ldr	r2, [pc, #48]	@ (80010d8 <Game2048_DrawBoard+0x170>)
 80010a6:	2118      	movs	r1, #24
 80010a8:	202b      	movs	r0, #43	@ 0x2b
 80010aa:	f001 fa03 	bl	80024b4 <OLED_DisplayString>
}
 80010ae:	bf00      	nop
 80010b0:	371c      	adds	r7, #28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd90      	pop	{r4, r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000023c 	.word	0x2000023c
 80010bc:	0800aaec 	.word	0x0800aaec
 80010c0:	2000025c 	.word	0x2000025c
 80010c4:	0800aaf0 	.word	0x0800aaf0
 80010c8:	20000260 	.word	0x20000260
 80010cc:	0800aafc 	.word	0x0800aafc
 80010d0:	0800aad4 	.word	0x0800aad4
 80010d4:	20000261 	.word	0x20000261
 80010d8:	0800ab08 	.word	0x0800ab08

080010dc <Game2048_CompactAndMerge>:

static void Game2048_CompactAndMerge(uint8_t line_idx, Direction dir, bool is_row)
{
 80010dc:	b490      	push	{r4, r7}
 80010de:	b08c      	sub	sp, #48	@ 0x30
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
 80010e6:	460b      	mov	r3, r1
 80010e8:	71bb      	strb	r3, [r7, #6]
 80010ea:	4613      	mov	r3, r2
 80010ec:	717b      	strb	r3, [r7, #5]
    uint8_t line_size = GAME2048_BOARD_SIZE;          // Use GAME2048_BOARD_SIZE
 80010ee:	2304      	movs	r3, #4
 80010f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint16_t temp_line[GAME2048_BOARD_SIZE] = {0};    // Use GAME2048_BOARD_SIZE
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
    uint16_t original_line_copy[GAME2048_BOARD_SIZE]; // To check if anything changed

    for (uint8_t i = 0; i < line_size; ++i)
 80010fe:	2300      	movs	r3, #0
 8001100:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001104:	e01f      	b.n	8001146 <Game2048_CompactAndMerge+0x6a>
    {
        original_line_copy[i] = is_row ? game2048_board[line_idx][i].value : game2048_board[i][line_idx].value;
 8001106:	797b      	ldrb	r3, [r7, #5]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d008      	beq.n	800111e <Game2048_CompactAndMerge+0x42>
 800110c:	79fa      	ldrb	r2, [r7, #7]
 800110e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001112:	49c2      	ldr	r1, [pc, #776]	@ (800141c <Game2048_CompactAndMerge+0x340>)
 8001114:	0092      	lsls	r2, r2, #2
 8001116:	4413      	add	r3, r2
 8001118:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800111c:	e007      	b.n	800112e <Game2048_CompactAndMerge+0x52>
 800111e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	49bd      	ldr	r1, [pc, #756]	@ (800141c <Game2048_CompactAndMerge+0x340>)
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	4413      	add	r3, r2
 800112a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800112e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	3330      	adds	r3, #48	@ 0x30
 8001136:	443b      	add	r3, r7
 8001138:	f823 2c24 	strh.w	r2, [r3, #-36]
    for (uint8_t i = 0; i < line_size; ++i)
 800113c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001140:	3301      	adds	r3, #1
 8001142:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001146:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800114a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800114e:	429a      	cmp	r2, r3
 8001150:	d3d9      	bcc.n	8001106 <Game2048_CompactAndMerge+0x2a>
    }

    int8_t write_pos = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t increment = 1;
 8001158:	2301      	movs	r3, #1
 800115a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (dir == DIR_DOWN || dir == DIR_RIGHT)
 800115e:	79bb      	ldrb	r3, [r7, #6]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d002      	beq.n	800116a <Game2048_CompactAndMerge+0x8e>
 8001164:	79bb      	ldrb	r3, [r7, #6]
 8001166:	2b03      	cmp	r3, #3
 8001168:	d108      	bne.n	800117c <Game2048_CompactAndMerge+0xa0>
    {
        write_pos = line_size - 1;
 800116a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800116e:	3b01      	subs	r3, #1
 8001170:	b2db      	uxtb	r3, r3
 8001172:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        increment = -1;
 8001176:	23ff      	movs	r3, #255	@ 0xff
 8001178:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    }

    int8_t compact_pos = write_pos;
 800117c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001180:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 8001184:	2300      	movs	r3, #0
 8001186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800118a:	e041      	b.n	8001210 <Game2048_CompactAndMerge+0x134>
    {
        int8_t read_pos_actual = (dir == DIR_DOWN || dir == DIR_RIGHT) ? (line_size - 1 - i) : i;
 800118c:	79bb      	ldrb	r3, [r7, #6]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d002      	beq.n	8001198 <Game2048_CompactAndMerge+0xbc>
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	2b03      	cmp	r3, #3
 8001196:	d109      	bne.n	80011ac <Game2048_CompactAndMerge+0xd0>
 8001198:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800119c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	3b01      	subs	r3, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	b25b      	sxtb	r3, r3
 80011aa:	e001      	b.n	80011b0 <Game2048_CompactAndMerge+0xd4>
 80011ac:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80011b0:	f887 3020 	strb.w	r3, [r7, #32]
        uint16_t current_tile_value = is_row ? game2048_board[line_idx][read_pos_actual].value
 80011b4:	797b      	ldrb	r3, [r7, #5]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d008      	beq.n	80011cc <Game2048_CompactAndMerge+0xf0>
 80011ba:	79fa      	ldrb	r2, [r7, #7]
 80011bc:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80011c0:	4996      	ldr	r1, [pc, #600]	@ (800141c <Game2048_CompactAndMerge+0x340>)
 80011c2:	0092      	lsls	r2, r2, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011ca:	e007      	b.n	80011dc <Game2048_CompactAndMerge+0x100>
                                             : game2048_board[read_pos_actual][line_idx].value;
 80011cc:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80011d0:	79fb      	ldrb	r3, [r7, #7]
        uint16_t current_tile_value = is_row ? game2048_board[line_idx][read_pos_actual].value
 80011d2:	4992      	ldr	r1, [pc, #584]	@ (800141c <Game2048_CompactAndMerge+0x340>)
 80011d4:	0092      	lsls	r2, r2, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011dc:	83fb      	strh	r3, [r7, #30]
        if (current_tile_value != 0)
 80011de:	8bfb      	ldrh	r3, [r7, #30]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00f      	beq.n	8001204 <Game2048_CompactAndMerge+0x128>
        {
            temp_line[compact_pos] = current_tile_value;
 80011e4:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	3330      	adds	r3, #48	@ 0x30
 80011ec:	443b      	add	r3, r7
 80011ee:	8bfa      	ldrh	r2, [r7, #30]
 80011f0:	f823 2c1c 	strh.w	r2, [r3, #-28]
            compact_pos += increment;
 80011f4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80011f8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80011fc:	4413      	add	r3, r2
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 8001204:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001208:	3301      	adds	r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001210:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 8001214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001218:	429a      	cmp	r2, r3
 800121a:	dbb7      	blt.n	800118c <Game2048_CompactAndMerge+0xb0>
        }
    }

    for (int8_t i = 0; i < line_size - 1; ++i)
 800121c:	2300      	movs	r3, #0
 800121e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001222:	e078      	b.n	8001316 <Game2048_CompactAndMerge+0x23a>
    {
        int8_t current_idx = (dir == DIR_DOWN || dir == DIR_RIGHT) ? (line_size - 1 - i) : i;
 8001224:	79bb      	ldrb	r3, [r7, #6]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d002      	beq.n	8001230 <Game2048_CompactAndMerge+0x154>
 800122a:	79bb      	ldrb	r3, [r7, #6]
 800122c:	2b03      	cmp	r3, #3
 800122e:	d109      	bne.n	8001244 <Game2048_CompactAndMerge+0x168>
 8001230:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001234:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	3b01      	subs	r3, #1
 800123e:	b2db      	uxtb	r3, r3
 8001240:	b25b      	sxtb	r3, r3
 8001242:	e001      	b.n	8001248 <Game2048_CompactAndMerge+0x16c>
 8001244:	f997 302a 	ldrsb.w	r3, [r7, #42]	@ 0x2a
 8001248:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        int8_t next_idx = current_idx + increment;
 800124c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001250:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001254:	4413      	add	r3, r2
 8001256:	b2db      	uxtb	r3, r3
 8001258:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        if (next_idx < 0 || next_idx >= line_size)
 800125c:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8001260:	2b00      	cmp	r3, #0
 8001262:	db51      	blt.n	8001308 <Game2048_CompactAndMerge+0x22c>
 8001264:	f997 2021 	ldrsb.w	r2, [r7, #33]	@ 0x21
 8001268:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800126c:	429a      	cmp	r2, r3
 800126e:	da4b      	bge.n	8001308 <Game2048_CompactAndMerge+0x22c>
            continue;

        if (temp_line[current_idx] != 0 && temp_line[current_idx] == temp_line[next_idx])
 8001270:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	3330      	adds	r3, #48	@ 0x30
 8001278:	443b      	add	r3, r7
 800127a:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d043      	beq.n	800130a <Game2048_CompactAndMerge+0x22e>
 8001282:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	3330      	adds	r3, #48	@ 0x30
 800128a:	443b      	add	r3, r7
 800128c:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 8001290:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	3330      	adds	r3, #48	@ 0x30
 8001298:	443b      	add	r3, r7
 800129a:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d133      	bne.n	800130a <Game2048_CompactAndMerge+0x22e>
        {
            temp_line[current_idx] *= 2;
 80012a2:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	3330      	adds	r3, #48	@ 0x30
 80012aa:	443b      	add	r3, r7
 80012ac:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 80012b0:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80012b4:	0052      	lsls	r2, r2, #1
 80012b6:	b292      	uxth	r2, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	3330      	adds	r3, #48	@ 0x30
 80012bc:	443b      	add	r3, r7
 80012be:	f823 2c1c 	strh.w	r2, [r3, #-28]
            game2048_score += temp_line[current_idx];
 80012c2:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	3330      	adds	r3, #48	@ 0x30
 80012ca:	443b      	add	r3, r7
 80012cc:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b53      	ldr	r3, [pc, #332]	@ (8001420 <Game2048_CompactAndMerge+0x344>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a51      	ldr	r2, [pc, #324]	@ (8001420 <Game2048_CompactAndMerge+0x344>)
 80012da:	6013      	str	r3, [r2, #0]
            temp_line[next_idx] = 0;
 80012dc:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	3330      	adds	r3, #48	@ 0x30
 80012e4:	443b      	add	r3, r7
 80012e6:	2200      	movs	r2, #0
 80012e8:	f823 2c1c 	strh.w	r2, [r3, #-28]
            if (temp_line[current_idx] == 2048)
 80012ec:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	3330      	adds	r3, #48	@ 0x30
 80012f4:	443b      	add	r3, r7
 80012f6:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 80012fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80012fe:	d104      	bne.n	800130a <Game2048_CompactAndMerge+0x22e>
                game2048_game_won = true;
 8001300:	4b48      	ldr	r3, [pc, #288]	@ (8001424 <Game2048_CompactAndMerge+0x348>)
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
 8001306:	e000      	b.n	800130a <Game2048_CompactAndMerge+0x22e>
            continue;
 8001308:	bf00      	nop
    for (int8_t i = 0; i < line_size - 1; ++i)
 800130a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800130e:	3301      	adds	r3, #1
 8001310:	b2db      	uxtb	r3, r3
 8001312:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001316:	f997 202a 	ldrsb.w	r2, [r7, #42]	@ 0x2a
 800131a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800131e:	3b01      	subs	r3, #1
 8001320:	429a      	cmp	r2, r3
 8001322:	f6ff af7f 	blt.w	8001224 <Game2048_CompactAndMerge+0x148>
        }
    }

    compact_pos = write_pos;
 8001326:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800132a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 800132e:	2300      	movs	r3, #0
 8001330:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8001334:	e045      	b.n	80013c2 <Game2048_CompactAndMerge+0x2e6>
    {
        int8_t read_pos_temp = (dir == DIR_DOWN || dir == DIR_RIGHT) ? (line_size - 1 - i) : i;
 8001336:	79bb      	ldrb	r3, [r7, #6]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d002      	beq.n	8001342 <Game2048_CompactAndMerge+0x266>
 800133c:	79bb      	ldrb	r3, [r7, #6]
 800133e:	2b03      	cmp	r3, #3
 8001340:	d109      	bne.n	8001356 <Game2048_CompactAndMerge+0x27a>
 8001342:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001346:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	b2db      	uxtb	r3, r3
 800134e:	3b01      	subs	r3, #1
 8001350:	b2db      	uxtb	r3, r3
 8001352:	b25b      	sxtb	r3, r3
 8001354:	e001      	b.n	800135a <Game2048_CompactAndMerge+0x27e>
 8001356:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 800135a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        // The condition "if (temp_line[read_pos_temp] != 0)" was problematic.
        // temp_line already contains the correct values, including zeros, after compaction and merging.
        // We should always write the value from temp_line to the board and advance compact_pos.
        if (is_row)
 800135e:	797b      	ldrb	r3, [r7, #5]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d010      	beq.n	8001386 <Game2048_CompactAndMerge+0x2aa>
        {
            game2048_board[line_idx][compact_pos].value = temp_line[read_pos_temp];
 8001364:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8001368:	79f9      	ldrb	r1, [r7, #7]
 800136a:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	3330      	adds	r3, #48	@ 0x30
 8001372:	443b      	add	r3, r7
 8001374:	f833 4c1c 	ldrh.w	r4, [r3, #-28]
 8001378:	4828      	ldr	r0, [pc, #160]	@ (800141c <Game2048_CompactAndMerge+0x340>)
 800137a:	008b      	lsls	r3, r1, #2
 800137c:	4413      	add	r3, r2
 800137e:	4622      	mov	r2, r4
 8001380:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8001384:	e00f      	b.n	80013a6 <Game2048_CompactAndMerge+0x2ca>
        }
        else
        {
            game2048_board[compact_pos][line_idx].value = temp_line[read_pos_temp];
 8001386:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800138a:	f997 102c 	ldrsb.w	r1, [r7, #44]	@ 0x2c
 800138e:	79fa      	ldrb	r2, [r7, #7]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	3330      	adds	r3, #48	@ 0x30
 8001394:	443b      	add	r3, r7
 8001396:	f833 4c1c 	ldrh.w	r4, [r3, #-28]
 800139a:	4820      	ldr	r0, [pc, #128]	@ (800141c <Game2048_CompactAndMerge+0x340>)
 800139c:	008b      	lsls	r3, r1, #2
 800139e:	4413      	add	r3, r2
 80013a0:	4622      	mov	r2, r4
 80013a2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        }
        compact_pos += increment; // compact_pos should always be updated.
 80013a6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80013aa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80013ae:	4413      	add	r3, r2
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 80013b6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80013ba:	3301      	adds	r3, #1
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80013c2:	f997 2029 	ldrsb.w	r2, [r7, #41]	@ 0x29
 80013c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013ca:	429a      	cmp	r2, r3
 80013cc:	dbb3      	blt.n	8001336 <Game2048_CompactAndMerge+0x25a>
    }

    for (uint8_t i = 0; i < line_size; ++i)
 80013ce:	2300      	movs	r3, #0
 80013d0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80013d4:	e02f      	b.n	8001436 <Game2048_CompactAndMerge+0x35a>
    {
        uint16_t current_val = is_row ? game2048_board[line_idx][i].value : game2048_board[i][line_idx].value;
 80013d6:	797b      	ldrb	r3, [r7, #5]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d008      	beq.n	80013ee <Game2048_CompactAndMerge+0x312>
 80013dc:	79fa      	ldrb	r2, [r7, #7]
 80013de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80013e2:	490e      	ldr	r1, [pc, #56]	@ (800141c <Game2048_CompactAndMerge+0x340>)
 80013e4:	0092      	lsls	r2, r2, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013ec:	e007      	b.n	80013fe <Game2048_CompactAndMerge+0x322>
 80013ee:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	4909      	ldr	r1, [pc, #36]	@ (800141c <Game2048_CompactAndMerge+0x340>)
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
        if (original_line_copy[i] != current_val)
 8001400:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	3330      	adds	r3, #48	@ 0x30
 8001408:	443b      	add	r3, r7
 800140a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800140e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001410:	429a      	cmp	r2, r3
 8001412:	d00b      	beq.n	800142c <Game2048_CompactAndMerge+0x350>
        {
            game2048_move_made_this_turn = true;
 8001414:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <Game2048_CompactAndMerge+0x34c>)
 8001416:	2201      	movs	r2, #1
 8001418:	701a      	strb	r2, [r3, #0]
            break;
 800141a:	e013      	b.n	8001444 <Game2048_CompactAndMerge+0x368>
 800141c:	2000023c 	.word	0x2000023c
 8001420:	2000025c 	.word	0x2000025c
 8001424:	20000261 	.word	0x20000261
 8001428:	20000262 	.word	0x20000262
    for (uint8_t i = 0; i < line_size; ++i)
 800142c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001430:	3301      	adds	r3, #1
 8001432:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8001436:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800143a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800143e:	429a      	cmp	r2, r3
 8001440:	d3c9      	bcc.n	80013d6 <Game2048_CompactAndMerge+0x2fa>
        }
    }
}
 8001442:	bf00      	nop
 8001444:	bf00      	nop
 8001446:	3730      	adds	r7, #48	@ 0x30
 8001448:	46bd      	mov	sp, r7
 800144a:	bc90      	pop	{r4, r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop

08001450 <Game2048_MoveUp>:

static void Game2048_MoveUp()
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001456:	2300      	movs	r3, #0
 8001458:	71fb      	strb	r3, [r7, #7]
 800145a:	e008      	b.n	800146e <Game2048_MoveUp+0x1e>
    {
        Game2048_CompactAndMerge(c, DIR_UP, false);
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fe3a 	bl	80010dc <Game2048_CompactAndMerge>
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	3301      	adds	r3, #1
 800146c:	71fb      	strb	r3, [r7, #7]
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	2b03      	cmp	r3, #3
 8001472:	d9f3      	bls.n	800145c <Game2048_MoveUp+0xc>
    }
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <Game2048_MoveDown>:

static void Game2048_MoveDown()
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001484:	2300      	movs	r3, #0
 8001486:	71fb      	strb	r3, [r7, #7]
 8001488:	e008      	b.n	800149c <Game2048_MoveDown+0x1e>
    {
        Game2048_CompactAndMerge(c, DIR_DOWN, false);
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	2200      	movs	r2, #0
 800148e:	2101      	movs	r1, #1
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fe23 	bl	80010dc <Game2048_CompactAndMerge>
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	3301      	adds	r3, #1
 800149a:	71fb      	strb	r3, [r7, #7]
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d9f3      	bls.n	800148a <Game2048_MoveDown+0xc>
    }
}
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <Game2048_MoveLeft>:

static void Game2048_MoveLeft()
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 80014b2:	2300      	movs	r3, #0
 80014b4:	71fb      	strb	r3, [r7, #7]
 80014b6:	e008      	b.n	80014ca <Game2048_MoveLeft+0x1e>
    {
        Game2048_CompactAndMerge(r, DIR_LEFT, true);
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	2201      	movs	r2, #1
 80014bc:	2102      	movs	r1, #2
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fe0c 	bl	80010dc <Game2048_CompactAndMerge>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	3301      	adds	r3, #1
 80014c8:	71fb      	strb	r3, [r7, #7]
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d9f3      	bls.n	80014b8 <Game2048_MoveLeft+0xc>
    }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <Game2048_MoveRight>:

static void Game2048_MoveRight()
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 80014e0:	2300      	movs	r3, #0
 80014e2:	71fb      	strb	r3, [r7, #7]
 80014e4:	e008      	b.n	80014f8 <Game2048_MoveRight+0x1e>
    {
        Game2048_CompactAndMerge(r, DIR_RIGHT, true);
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	2201      	movs	r2, #1
 80014ea:	2103      	movs	r1, #3
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fdf5 	bl	80010dc <Game2048_CompactAndMerge>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	3301      	adds	r3, #1
 80014f6:	71fb      	strb	r3, [r7, #7]
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d9f3      	bls.n	80014e6 <Game2048_MoveRight+0xc>
    }
}
 80014fe:	bf00      	nop
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <Game2048_CanMove>:

static bool Game2048_CanMove()
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 800150e:	2300      	movs	r3, #0
 8001510:	71fb      	strb	r3, [r7, #7]
 8001512:	e03e      	b.n	8001592 <Game2048_CanMove+0x8a>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001514:	2300      	movs	r3, #0
 8001516:	71bb      	strb	r3, [r7, #6]
 8001518:	e035      	b.n	8001586 <Game2048_CanMove+0x7e>
        {
            if (game2048_board[r][c].value == 0)
 800151a:	79fa      	ldrb	r2, [r7, #7]
 800151c:	79bb      	ldrb	r3, [r7, #6]
 800151e:	4921      	ldr	r1, [pc, #132]	@ (80015a4 <Game2048_CanMove+0x9c>)
 8001520:	0092      	lsls	r2, r2, #2
 8001522:	4413      	add	r3, r2
 8001524:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <Game2048_CanMove+0x28>
                return true;
 800152c:	2301      	movs	r3, #1
 800152e:	e034      	b.n	800159a <Game2048_CanMove+0x92>
            uint16_t val = game2048_board[r][c].value;
 8001530:	79fa      	ldrb	r2, [r7, #7]
 8001532:	79bb      	ldrb	r3, [r7, #6]
 8001534:	491b      	ldr	r1, [pc, #108]	@ (80015a4 <Game2048_CanMove+0x9c>)
 8001536:	0092      	lsls	r2, r2, #2
 8001538:	4413      	add	r3, r2
 800153a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800153e:	80bb      	strh	r3, [r7, #4]
            if (c < GAME2048_BOARD_SIZE - 1 && game2048_board[r][c + 1].value == val) // Use GAME2048_BOARD_SIZE
 8001540:	79bb      	ldrb	r3, [r7, #6]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d80c      	bhi.n	8001560 <Game2048_CanMove+0x58>
 8001546:	79fa      	ldrb	r2, [r7, #7]
 8001548:	79bb      	ldrb	r3, [r7, #6]
 800154a:	3301      	adds	r3, #1
 800154c:	4915      	ldr	r1, [pc, #84]	@ (80015a4 <Game2048_CanMove+0x9c>)
 800154e:	0092      	lsls	r2, r2, #2
 8001550:	4413      	add	r3, r2
 8001552:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001556:	88ba      	ldrh	r2, [r7, #4]
 8001558:	429a      	cmp	r2, r3
 800155a:	d101      	bne.n	8001560 <Game2048_CanMove+0x58>
                return true;
 800155c:	2301      	movs	r3, #1
 800155e:	e01c      	b.n	800159a <Game2048_CanMove+0x92>
            if (r < GAME2048_BOARD_SIZE - 1 && game2048_board[r + 1][c].value == val) // Use GAME2048_BOARD_SIZE
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d80c      	bhi.n	8001580 <Game2048_CanMove+0x78>
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	79bb      	ldrb	r3, [r7, #6]
 800156c:	490d      	ldr	r1, [pc, #52]	@ (80015a4 <Game2048_CanMove+0x9c>)
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	4413      	add	r3, r2
 8001572:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001576:	88ba      	ldrh	r2, [r7, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	d101      	bne.n	8001580 <Game2048_CanMove+0x78>
                return true;
 800157c:	2301      	movs	r3, #1
 800157e:	e00c      	b.n	800159a <Game2048_CanMove+0x92>
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001580:	79bb      	ldrb	r3, [r7, #6]
 8001582:	3301      	adds	r3, #1
 8001584:	71bb      	strb	r3, [r7, #6]
 8001586:	79bb      	ldrb	r3, [r7, #6]
 8001588:	2b03      	cmp	r3, #3
 800158a:	d9c6      	bls.n	800151a <Game2048_CanMove+0x12>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	3301      	adds	r3, #1
 8001590:	71fb      	strb	r3, [r7, #7]
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	2b03      	cmp	r3, #3
 8001596:	d9bd      	bls.n	8001514 <Game2048_CanMove+0xc>
        }
    }
    return false;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	2000023c 	.word	0x2000023c

080015a8 <Game2048_HandleInput>:

bool Game2048_HandleInput(Direction input_dir)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
    if (game2048_game_over || game2048_game_won)
 80015b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001630 <Game2048_HandleInput+0x88>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d103      	bne.n	80015c2 <Game2048_HandleInput+0x1a>
 80015ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001634 <Game2048_HandleInput+0x8c>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <Game2048_HandleInput+0x1e>
        return false;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e02f      	b.n	8001626 <Game2048_HandleInput+0x7e>

    game2048_move_made_this_turn = false;
 80015c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <Game2048_HandleInput+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]

    switch (input_dir)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d816      	bhi.n	8001600 <Game2048_HandleInput+0x58>
 80015d2:	a201      	add	r2, pc, #4	@ (adr r2, 80015d8 <Game2048_HandleInput+0x30>)
 80015d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d8:	080015e9 	.word	0x080015e9
 80015dc:	080015ef 	.word	0x080015ef
 80015e0:	080015f5 	.word	0x080015f5
 80015e4:	080015fb 	.word	0x080015fb
    {
    case DIR_UP:
        Game2048_MoveUp();
 80015e8:	f7ff ff32 	bl	8001450 <Game2048_MoveUp>
        break;
 80015ec:	e008      	b.n	8001600 <Game2048_HandleInput+0x58>
    case DIR_DOWN:
        Game2048_MoveDown();
 80015ee:	f7ff ff46 	bl	800147e <Game2048_MoveDown>
        break;
 80015f2:	e005      	b.n	8001600 <Game2048_HandleInput+0x58>
    case DIR_LEFT:
        Game2048_MoveLeft();
 80015f4:	f7ff ff5a 	bl	80014ac <Game2048_MoveLeft>
        break;
 80015f8:	e002      	b.n	8001600 <Game2048_HandleInput+0x58>
    case DIR_RIGHT:
        Game2048_MoveRight();
 80015fa:	f7ff ff6e 	bl	80014da <Game2048_MoveRight>
        break;
 80015fe:	bf00      	nop
    }

    if (game2048_move_made_this_turn)
 8001600:	4b0d      	ldr	r3, [pc, #52]	@ (8001638 <Game2048_HandleInput+0x90>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00c      	beq.n	8001622 <Game2048_HandleInput+0x7a>
    {
        Game2048_AddRandomTile();
 8001608:	f7ff fbe0 	bl	8000dcc <Game2048_AddRandomTile>
        if (!Game2048_CanMove())
 800160c:	f7ff ff7c 	bl	8001508 <Game2048_CanMove>
 8001610:	4603      	mov	r3, r0
 8001612:	f083 0301 	eor.w	r3, r3, #1
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <Game2048_HandleInput+0x7a>
        {
            game2048_game_over = true;
 800161c:	4b04      	ldr	r3, [pc, #16]	@ (8001630 <Game2048_HandleInput+0x88>)
 800161e:	2201      	movs	r2, #1
 8001620:	701a      	strb	r2, [r3, #0]
        }
    }
    return game2048_move_made_this_turn;
 8001622:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <Game2048_HandleInput+0x90>)
 8001624:	781b      	ldrb	r3, [r3, #0]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000260 	.word	0x20000260
 8001634:	20000261 	.word	0x20000261
 8001638:	20000262 	.word	0x20000262

0800163c <Game2048_GameLoop>:

void Game2048_GameLoop(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
    static uint16_t LastCount;

    if (FirstRun)
 8001640:	4b48      	ldr	r3, [pc, #288]	@ (8001764 <Game2048_GameLoop+0x128>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d006      	beq.n	8001656 <Game2048_GameLoop+0x1a>
    {
        LastCount = count;
 8001648:	4b47      	ldr	r3, [pc, #284]	@ (8001768 <Game2048_GameLoop+0x12c>)
 800164a:	881a      	ldrh	r2, [r3, #0]
 800164c:	4b47      	ldr	r3, [pc, #284]	@ (800176c <Game2048_GameLoop+0x130>)
 800164e:	801a      	strh	r2, [r3, #0]
        FirstRun = false;
 8001650:	4b44      	ldr	r3, [pc, #272]	@ (8001764 <Game2048_GameLoop+0x128>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
    }

    if (count - LastCount > 1 && HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_SET)
 8001656:	4b44      	ldr	r3, [pc, #272]	@ (8001768 <Game2048_GameLoop+0x12c>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	4b43      	ldr	r3, [pc, #268]	@ (800176c <Game2048_GameLoop+0x130>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b01      	cmp	r3, #1
 8001664:	dd0f      	ble.n	8001686 <Game2048_GameLoop+0x4a>
 8001666:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800166a:	4841      	ldr	r0, [pc, #260]	@ (8001770 <Game2048_GameLoop+0x134>)
 800166c:	f004 fd66 	bl	800613c <HAL_GPIO_ReadPin>
 8001670:	4603      	mov	r3, r0
 8001672:	2b01      	cmp	r3, #1
 8001674:	d107      	bne.n	8001686 <Game2048_GameLoop+0x4a>
    {
        Game2048_HandleInput(DIR_RIGHT);
 8001676:	2003      	movs	r0, #3
 8001678:	f7ff ff96 	bl	80015a8 <Game2048_HandleInput>
        LastCount = count;
 800167c:	4b3a      	ldr	r3, [pc, #232]	@ (8001768 <Game2048_GameLoop+0x12c>)
 800167e:	881a      	ldrh	r2, [r3, #0]
 8001680:	4b3a      	ldr	r3, [pc, #232]	@ (800176c <Game2048_GameLoop+0x130>)
 8001682:	801a      	strh	r2, [r3, #0]
 8001684:	e048      	b.n	8001718 <Game2048_GameLoop+0xdc>
    }
    else if (count - LastCount < -1 && HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_SET)
 8001686:	4b38      	ldr	r3, [pc, #224]	@ (8001768 <Game2048_GameLoop+0x12c>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	4b37      	ldr	r3, [pc, #220]	@ (800176c <Game2048_GameLoop+0x130>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001696:	da0f      	bge.n	80016b8 <Game2048_GameLoop+0x7c>
 8001698:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800169c:	4834      	ldr	r0, [pc, #208]	@ (8001770 <Game2048_GameLoop+0x134>)
 800169e:	f004 fd4d 	bl	800613c <HAL_GPIO_ReadPin>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d107      	bne.n	80016b8 <Game2048_GameLoop+0x7c>
    {
        Game2048_HandleInput(DIR_LEFT);
 80016a8:	2002      	movs	r0, #2
 80016aa:	f7ff ff7d 	bl	80015a8 <Game2048_HandleInput>
        LastCount = count;
 80016ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001768 <Game2048_GameLoop+0x12c>)
 80016b0:	881a      	ldrh	r2, [r3, #0]
 80016b2:	4b2e      	ldr	r3, [pc, #184]	@ (800176c <Game2048_GameLoop+0x130>)
 80016b4:	801a      	strh	r2, [r3, #0]
 80016b6:	e02f      	b.n	8001718 <Game2048_GameLoop+0xdc>
    }
    else if (count - LastCount > 1 && HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 80016b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001768 <Game2048_GameLoop+0x12c>)
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b2b      	ldr	r3, [pc, #172]	@ (800176c <Game2048_GameLoop+0x130>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	dd0f      	ble.n	80016e8 <Game2048_GameLoop+0xac>
 80016c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016cc:	4828      	ldr	r0, [pc, #160]	@ (8001770 <Game2048_GameLoop+0x134>)
 80016ce:	f004 fd35 	bl	800613c <HAL_GPIO_ReadPin>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d107      	bne.n	80016e8 <Game2048_GameLoop+0xac>
    {
        Game2048_HandleInput(DIR_UP);
 80016d8:	2000      	movs	r0, #0
 80016da:	f7ff ff65 	bl	80015a8 <Game2048_HandleInput>
        LastCount = count;
 80016de:	4b22      	ldr	r3, [pc, #136]	@ (8001768 <Game2048_GameLoop+0x12c>)
 80016e0:	881a      	ldrh	r2, [r3, #0]
 80016e2:	4b22      	ldr	r3, [pc, #136]	@ (800176c <Game2048_GameLoop+0x130>)
 80016e4:	801a      	strh	r2, [r3, #0]
 80016e6:	e017      	b.n	8001718 <Game2048_GameLoop+0xdc>
    }
    else if (count - LastCount < -1 && HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 80016e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001768 <Game2048_GameLoop+0x12c>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <Game2048_GameLoop+0x130>)
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f8:	da0e      	bge.n	8001718 <Game2048_GameLoop+0xdc>
 80016fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016fe:	481c      	ldr	r0, [pc, #112]	@ (8001770 <Game2048_GameLoop+0x134>)
 8001700:	f004 fd1c 	bl	800613c <HAL_GPIO_ReadPin>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d106      	bne.n	8001718 <Game2048_GameLoop+0xdc>
    {
        Game2048_HandleInput(DIR_DOWN);
 800170a:	2001      	movs	r0, #1
 800170c:	f7ff ff4c 	bl	80015a8 <Game2048_HandleInput>
        LastCount = count;
 8001710:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <Game2048_GameLoop+0x12c>)
 8001712:	881a      	ldrh	r2, [r3, #0]
 8001714:	4b15      	ldr	r3, [pc, #84]	@ (800176c <Game2048_GameLoop+0x130>)
 8001716:	801a      	strh	r2, [r3, #0]
    }

    if (game2048_game_over)
 8001718:	4b16      	ldr	r3, [pc, #88]	@ (8001774 <Game2048_GameLoop+0x138>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d01d      	beq.n	800175c <Game2048_GameLoop+0x120>
    {
        if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8001720:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001724:	4812      	ldr	r0, [pc, #72]	@ (8001770 <Game2048_GameLoop+0x134>)
 8001726:	f004 fd09 	bl	800613c <HAL_GPIO_ReadPin>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d115      	bne.n	800175c <Game2048_GameLoop+0x120>
        {
            HAL_Delay(INPUT_DEBOUNCE_MS);
 8001730:	2032      	movs	r0, #50	@ 0x32
 8001732:	f004 f8ed 	bl	8005910 <HAL_Delay>
            if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8001736:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800173a:	480d      	ldr	r0, [pc, #52]	@ (8001770 <Game2048_GameLoop+0x134>)
 800173c:	f004 fcfe 	bl	800613c <HAL_GPIO_ReadPin>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10a      	bne.n	800175c <Game2048_GameLoop+0x120>
            {
                Game2048_Restart();
 8001746:	f7ff fc09 	bl	8000f5c <Game2048_Restart>
                while (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 800174a:	bf00      	nop
 800174c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001750:	4807      	ldr	r0, [pc, #28]	@ (8001770 <Game2048_GameLoop+0x134>)
 8001752:	f004 fcf3 	bl	800613c <HAL_GPIO_ReadPin>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f7      	beq.n	800174c <Game2048_GameLoop+0x110>
            }
        }
    }


    Game2048_DrawBoard();
 800175c:	f7ff fc04 	bl	8000f68 <Game2048_DrawBoard>
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000000 	.word	0x20000000
 8001768:	20000358 	.word	0x20000358
 800176c:	20000268 	.word	0x20000268
 8001770:	40010c00 	.word	0x40010c00
 8001774:	20000260 	.word	0x20000260

08001778 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177e:	f107 0310 	add.w	r3, r7, #16
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178c:	4b2a      	ldr	r3, [pc, #168]	@ (8001838 <MX_GPIO_Init+0xc0>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a29      	ldr	r2, [pc, #164]	@ (8001838 <MX_GPIO_Init+0xc0>)
 8001792:	f043 0310 	orr.w	r3, r3, #16
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b27      	ldr	r3, [pc, #156]	@ (8001838 <MX_GPIO_Init+0xc0>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a4:	4b24      	ldr	r3, [pc, #144]	@ (8001838 <MX_GPIO_Init+0xc0>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	4a23      	ldr	r2, [pc, #140]	@ (8001838 <MX_GPIO_Init+0xc0>)
 80017aa:	f043 0320 	orr.w	r3, r3, #32
 80017ae:	6193      	str	r3, [r2, #24]
 80017b0:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <MX_GPIO_Init+0xc0>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f003 0320 	and.w	r3, r3, #32
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <MX_GPIO_Init+0xc0>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001838 <MX_GPIO_Init+0xc0>)
 80017c2:	f043 0308 	orr.w	r3, r3, #8
 80017c6:	6193      	str	r3, [r2, #24]
 80017c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <MX_GPIO_Init+0xc0>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	4b18      	ldr	r3, [pc, #96]	@ (8001838 <MX_GPIO_Init+0xc0>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a17      	ldr	r2, [pc, #92]	@ (8001838 <MX_GPIO_Init+0xc0>)
 80017da:	f043 0304 	orr.w	r3, r3, #4
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <MX_GPIO_Init+0xc0>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	603b      	str	r3, [r7, #0]
 80017ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SysWork_Light_GPIO_Port, SysWork_Light_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017f2:	4812      	ldr	r0, [pc, #72]	@ (800183c <MX_GPIO_Init+0xc4>)
 80017f4:	f004 fcb9 	bl	800616a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SysWork_Light_Pin */
  GPIO_InitStruct.Pin = SysWork_Light_Pin;
 80017f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fe:	2301      	movs	r3, #1
 8001800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2302      	movs	r3, #2
 8001808:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SysWork_Light_GPIO_Port, &GPIO_InitStruct);
 800180a:	f107 0310 	add.w	r3, r7, #16
 800180e:	4619      	mov	r1, r3
 8001810:	480a      	ldr	r0, [pc, #40]	@ (800183c <MX_GPIO_Init+0xc4>)
 8001812:	f004 fb0f 	bl	8005e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Input_Pin */
  GPIO_InitStruct.Pin = Encoder_Input_Pin;
 8001816:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800181a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001820:	2301      	movs	r3, #1
 8001822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Encoder_Input_GPIO_Port, &GPIO_InitStruct);
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	4619      	mov	r1, r3
 800182a:	4805      	ldr	r0, [pc, #20]	@ (8001840 <MX_GPIO_Init+0xc8>)
 800182c:	f004 fb02 	bl	8005e34 <HAL_GPIO_Init>

}
 8001830:	bf00      	nop
 8001832:	3720      	adds	r7, #32
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40021000 	.word	0x40021000
 800183c:	40011000 	.word	0x40011000
 8001840:	40010c00 	.word	0x40010c00

08001844 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001848:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <MX_I2C1_Init+0x50>)
 800184a:	4a13      	ldr	r2, [pc, #76]	@ (8001898 <MX_I2C1_Init+0x54>)
 800184c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800184e:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <MX_I2C1_Init+0x50>)
 8001850:	4a12      	ldr	r2, [pc, #72]	@ (800189c <MX_I2C1_Init+0x58>)
 8001852:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001854:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <MX_I2C1_Init+0x50>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800185a:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <MX_I2C1_Init+0x50>)
 800185c:	2200      	movs	r2, #0
 800185e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001860:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <MX_I2C1_Init+0x50>)
 8001862:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001866:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001868:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <MX_I2C1_Init+0x50>)
 800186a:	2200      	movs	r2, #0
 800186c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800186e:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <MX_I2C1_Init+0x50>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001874:	4b07      	ldr	r3, [pc, #28]	@ (8001894 <MX_I2C1_Init+0x50>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <MX_I2C1_Init+0x50>)
 800187c:	2200      	movs	r2, #0
 800187e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001880:	4804      	ldr	r0, [pc, #16]	@ (8001894 <MX_I2C1_Init+0x50>)
 8001882:	f004 fc8b 	bl	800619c <HAL_I2C_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800188c:	f000 f99f 	bl	8001bce <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	2000026c 	.word	0x2000026c
 8001898:	40005400 	.word	0x40005400
 800189c:	00061a80 	.word	0x00061a80

080018a0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018a4:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018a6:	4a13      	ldr	r2, [pc, #76]	@ (80018f4 <MX_I2C2_Init+0x54>)
 80018a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80018aa:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018ac:	4a12      	ldr	r2, [pc, #72]	@ (80018f8 <MX_I2C2_Init+0x58>)
 80018ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c4:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d0:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018d6:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018dc:	4804      	ldr	r0, [pc, #16]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018de:	f004 fc5d 	bl	800619c <HAL_I2C_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018e8:	f000 f971 	bl	8001bce <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	200002c0 	.word	0x200002c0
 80018f4:	40005800 	.word	0x40005800
 80018f8:	00061a80 	.word	0x00061a80

080018fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	@ 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0318 	add.w	r3, r7, #24
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a3e      	ldr	r2, [pc, #248]	@ (8001a10 <HAL_I2C_MspInit+0x114>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d14b      	bne.n	80019b4 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a3c      	ldr	r2, [pc, #240]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 8001922:	f043 0308 	orr.w	r3, r3, #8
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b3a      	ldr	r3, [pc, #232]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8001934:	23c0      	movs	r3, #192	@ 0xc0
 8001936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001938:	2312      	movs	r3, #18
 800193a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001940:	f107 0318 	add.w	r3, r7, #24
 8001944:	4619      	mov	r1, r3
 8001946:	4834      	ldr	r0, [pc, #208]	@ (8001a18 <HAL_I2C_MspInit+0x11c>)
 8001948:	f004 fa74 	bl	8005e34 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800194c:	4b31      	ldr	r3, [pc, #196]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	4a30      	ldr	r2, [pc, #192]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 8001952:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001956:	61d3      	str	r3, [r2, #28]
 8001958:	4b2e      	ldr	r3, [pc, #184]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001964:	4b2d      	ldr	r3, [pc, #180]	@ (8001a1c <HAL_I2C_MspInit+0x120>)
 8001966:	4a2e      	ldr	r2, [pc, #184]	@ (8001a20 <HAL_I2C_MspInit+0x124>)
 8001968:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800196a:	4b2c      	ldr	r3, [pc, #176]	@ (8001a1c <HAL_I2C_MspInit+0x120>)
 800196c:	2210      	movs	r2, #16
 800196e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001970:	4b2a      	ldr	r3, [pc, #168]	@ (8001a1c <HAL_I2C_MspInit+0x120>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001976:	4b29      	ldr	r3, [pc, #164]	@ (8001a1c <HAL_I2C_MspInit+0x120>)
 8001978:	2280      	movs	r2, #128	@ 0x80
 800197a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800197c:	4b27      	ldr	r3, [pc, #156]	@ (8001a1c <HAL_I2C_MspInit+0x120>)
 800197e:	2200      	movs	r2, #0
 8001980:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001982:	4b26      	ldr	r3, [pc, #152]	@ (8001a1c <HAL_I2C_MspInit+0x120>)
 8001984:	2200      	movs	r2, #0
 8001986:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001988:	4b24      	ldr	r3, [pc, #144]	@ (8001a1c <HAL_I2C_MspInit+0x120>)
 800198a:	2200      	movs	r2, #0
 800198c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800198e:	4b23      	ldr	r3, [pc, #140]	@ (8001a1c <HAL_I2C_MspInit+0x120>)
 8001990:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001994:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001996:	4821      	ldr	r0, [pc, #132]	@ (8001a1c <HAL_I2C_MspInit+0x120>)
 8001998:	f004 f8ec 	bl	8005b74 <HAL_DMA_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 80019a2:	f000 f914 	bl	8001bce <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a1c      	ldr	r2, [pc, #112]	@ (8001a1c <HAL_I2C_MspInit+0x120>)
 80019aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80019ac:	4a1b      	ldr	r2, [pc, #108]	@ (8001a1c <HAL_I2C_MspInit+0x120>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80019b2:	e029      	b.n	8001a08 <HAL_I2C_MspInit+0x10c>
  else if(i2cHandle->Instance==I2C2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1a      	ldr	r2, [pc, #104]	@ (8001a24 <HAL_I2C_MspInit+0x128>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d124      	bne.n	8001a08 <HAL_I2C_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	4b15      	ldr	r3, [pc, #84]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	4a14      	ldr	r2, [pc, #80]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 80019c4:	f043 0308 	orr.w	r3, r3, #8
 80019c8:	6193      	str	r3, [r2, #24]
 80019ca:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GYRO_SCL_Pin|GYRO_SDA_Pin;
 80019d6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019dc:	2312      	movs	r3, #18
 80019de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e4:	f107 0318 	add.w	r3, r7, #24
 80019e8:	4619      	mov	r1, r3
 80019ea:	480b      	ldr	r0, [pc, #44]	@ (8001a18 <HAL_I2C_MspInit+0x11c>)
 80019ec:	f004 fa22 	bl	8005e34 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019f0:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	4a07      	ldr	r2, [pc, #28]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 80019f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019fa:	61d3      	str	r3, [r2, #28]
 80019fc:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
}
 8001a08:	bf00      	nop
 8001a0a:	3728      	adds	r7, #40	@ 0x28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40005400 	.word	0x40005400
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40010c00 	.word	0x40010c00
 8001a1c:	20000314 	.word	0x20000314
 8001a20:	4002006c 	.word	0x4002006c
 8001a24:	40005800 	.word	0x40005800

08001a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a2c:	f003 ff0e 	bl	800584c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a30:	f000 f888 	bl	8001b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a34:	f7ff fea0 	bl	8001778 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a38:	f7fe feca 	bl	80007d0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001a3c:	f7ff ff02 	bl	8001844 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001a40:	f003 fd44 	bl	80054cc <MX_TIM1_Init>
  MX_I2C2_Init();
 8001a44:	f7ff ff2c 	bl	80018a0 <MX_I2C2_Init>
  MX_TIM3_Init();
 8001a48:	f003 fde2 	bl	8005610 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init(); // 初始化OLED
 8001a4c:	f000 faa2 	bl	8001f94 <OLED_Init>
  OLED_InitBuffer(); // 初始化双缓冲
 8001a50:	f000 f8c4 	bl	8001bdc <OLED_InitBuffer>
  OLED_ClearBuffer(); // 清空缓冲区
 8001a54:	f000 f8f6 	bl	8001c44 <OLED_ClearBuffer>
  
  OLED_EnableDiffMode(1);  // 启用差分更新
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f002 f9f5 	bl	8003e48 <OLED_EnableDiffMode>
  OLED_EnableFastUpdate(1); // 启用快速更新
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f002 fa10 	bl	8003e84 <OLED_EnableFastUpdate>

  
  // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // 启动PWM
 8001a64:	2104      	movs	r1, #4
 8001a66:	482b      	ldr	r0, [pc, #172]	@ (8001b14 <main+0xec>)
 8001a68:	f005 fcd8 	bl	800741c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1); // 启动编码器
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	482a      	ldr	r0, [pc, #168]	@ (8001b18 <main+0xf0>)
 8001a70:	f005 fe18 	bl	80076a4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2); // 启动编码器
 8001a74:	2104      	movs	r1, #4
 8001a76:	4828      	ldr	r0, [pc, #160]	@ (8001b18 <main+0xf0>)
 8001a78:	f005 fe14 	bl	80076a4 <HAL_TIM_Encoder_Start>

  OLED_InitAnimationManager(&g_AnimationManager); // 初始化动画管理器
 8001a7c:	4827      	ldr	r0, [pc, #156]	@ (8001b1c <main+0xf4>)
 8001a7e:	f003 f9dd 	bl	8004e3c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Menu_AnimationManager); // 初始化菜单动画管理器
 8001a82:	4827      	ldr	r0, [pc, #156]	@ (8001b20 <main+0xf8>)
 8001a84:	f003 f9da 	bl	8004e3c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Games_AnimationManager); // 初始化游戏动画管理器
 8001a88:	4826      	ldr	r0, [pc, #152]	@ (8001b24 <main+0xfc>)
 8001a8a:	f003 f9d7 	bl	8004e3c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Tools_AnimationManager); // 初始化工具动画管理器
 8001a8e:	4826      	ldr	r0, [pc, #152]	@ (8001b28 <main+0x100>)
 8001a90:	f003 f9d4 	bl	8004e3c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Settings_AnimationManager); // 初始化设置动画管理器
 8001a94:	4825      	ldr	r0, [pc, #148]	@ (8001b2c <main+0x104>)
 8001a96:	f003 f9d1 	bl	8004e3c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&About_AnimationManager); // 初始化关于动画管理器
 8001a9a:	4825      	ldr	r0, [pc, #148]	@ (8001b30 <main+0x108>)
 8001a9c:	f003 f9ce 	bl	8004e3c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Status_AnimationManager); // 初始化状态动画管理器
 8001aa0:	4824      	ldr	r0, [pc, #144]	@ (8001b34 <main+0x10c>)
 8001aa2:	f003 f9cb 	bl	8004e3c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&g_Title_AnimationManager); // 初始化标题动画管理器
 8001aa6:	4824      	ldr	r0, [pc, #144]	@ (8001b38 <main+0x110>)
 8001aa8:	f003 f9c8 	bl	8004e3c <OLED_InitAnimationManager>
  __HAL_TIM_SET_COUNTER(&htim3, 32767);
 8001aac:	4b1a      	ldr	r3, [pc, #104]	@ (8001b18 <main+0xf0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001ab4:	625a      	str	r2, [r3, #36]	@ 0x24
  Game2048_Init(); // 初始化游戏
 8001ab6:	f7ff fa15 	bl	8000ee4 <Game2048_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {    
    #pragma region OLED_UI_SETTINGS // UI设置
    OLED_ClearBuffer();
 8001aba:	f000 f8c3 	bl	8001c44 <OLED_ClearBuffer>
    
    System_UI_Loop(); // UI循环
 8001abe:	f000 fd97 	bl	80025f0 <System_UI_Loop>
    
    // Game2048_GameLoop(); // 游戏循环

    
    OLED_OptimizedDisplayFPS(80, 56); // 显示帧率
 8001ac2:	2138      	movs	r1, #56	@ 0x38
 8001ac4:	2050      	movs	r0, #80	@ 0x50
 8001ac6:	f002 fa87 	bl	8003fd8 <OLED_OptimizedDisplayFPS>
    count = __HAL_TIM_GET_COUNTER(&htim3); // 获取编码器计数值 1圈40
 8001aca:	4b13      	ldr	r3, [pc, #76]	@ (8001b18 <main+0xf0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b3c <main+0x114>)
 8001ad4:	801a      	strh	r2, [r3, #0]
    OLED_UpdateAnimationManager(&Menu_AnimationManager); // 更新菜单动画管理器
 8001ad6:	4812      	ldr	r0, [pc, #72]	@ (8001b20 <main+0xf8>)
 8001ad8:	f003 fa62 	bl	8004fa0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_AnimationManager); // 更新动画管理器
 8001adc:	480f      	ldr	r0, [pc, #60]	@ (8001b1c <main+0xf4>)
 8001ade:	f003 fa5f 	bl	8004fa0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Games_AnimationManager); // 更新游戏动画管理器
 8001ae2:	4810      	ldr	r0, [pc, #64]	@ (8001b24 <main+0xfc>)
 8001ae4:	f003 fa5c 	bl	8004fa0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Tools_AnimationManager); // 更新工具动画管理器
 8001ae8:	480f      	ldr	r0, [pc, #60]	@ (8001b28 <main+0x100>)
 8001aea:	f003 fa59 	bl	8004fa0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Settings_AnimationManager); // 更新设置动画管理器
 8001aee:	480f      	ldr	r0, [pc, #60]	@ (8001b2c <main+0x104>)
 8001af0:	f003 fa56 	bl	8004fa0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&About_AnimationManager); // 更新关于动画管理器
 8001af4:	480e      	ldr	r0, [pc, #56]	@ (8001b30 <main+0x108>)
 8001af6:	f003 fa53 	bl	8004fa0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Status_AnimationManager); // 更新状态动画管理器
 8001afa:	480e      	ldr	r0, [pc, #56]	@ (8001b34 <main+0x10c>)
 8001afc:	f003 fa50 	bl	8004fa0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_Title_AnimationManager); // 更新标题动画管理器
 8001b00:	480d      	ldr	r0, [pc, #52]	@ (8001b38 <main+0x110>)
 8001b02:	f003 fa4d 	bl	8004fa0 <OLED_UpdateAnimationManager>
    OLED_SmartUpdate(); // 智能更新显示
 8001b06:	f002 f9cd 	bl	8003ea4 <OLED_SmartUpdate>

    printf("HELLO WORLD\r\n");
 8001b0a:	480d      	ldr	r0, [pc, #52]	@ (8001b40 <main+0x118>)
 8001b0c:	f006 fc98 	bl	8008440 <puts>
    OLED_ClearBuffer();
 8001b10:	bf00      	nop
 8001b12:	e7d2      	b.n	8001aba <main+0x92>
 8001b14:	20003f24 	.word	0x20003f24
 8001b18:	20003f6c 	.word	0x20003f6c
 8001b1c:	2000392c 	.word	0x2000392c
 8001b20:	20000f80 	.word	0x20000f80
 8001b24:	20001574 	.word	0x20001574
 8001b28:	20001b68 	.word	0x20001b68
 8001b2c:	2000215c 	.word	0x2000215c
 8001b30:	20002750 	.word	0x20002750
 8001b34:	20002d44 	.word	0x20002d44
 8001b38:	20003338 	.word	0x20003338
 8001b3c:	20000358 	.word	0x20000358
 8001b40:	0800ab14 	.word	0x0800ab14

08001b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b090      	sub	sp, #64	@ 0x40
 8001b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b4a:	f107 0318 	add.w	r3, r7, #24
 8001b4e:	2228      	movs	r2, #40	@ 0x28
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f006 fd76 	bl	8008644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
 8001b64:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b66:	2301      	movs	r3, #1
 8001b68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b6a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b74:	2301      	movs	r3, #1
 8001b76:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b80:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b82:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b88:	f107 0318 	add.w	r3, r7, #24
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f004 ffa1 	bl	8006ad4 <HAL_RCC_OscConfig>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001b98:	f000 f819 	bl	8001bce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b9c:	230f      	movs	r3, #15
 8001b9e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ba8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	2102      	movs	r1, #2
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f005 fa0e 	bl	8006fd8 <HAL_RCC_ClockConfig>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001bc2:	f000 f804 	bl	8001bce <Error_Handler>
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	3740      	adds	r7, #64	@ 0x40
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd2:	b672      	cpsid	i
}
 8001bd4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd6:	bf00      	nop
 8001bd8:	e7fd      	b.n	8001bd6 <Error_Handler+0x8>
	...

08001bdc <OLED_InitBuffer>:
        0x22, 0x00, 0x07  // 页地址范围: 0-7
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8001be2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001be6:	2100      	movs	r1, #0
 8001be8:	4811      	ldr	r0, [pc, #68]	@ (8001c30 <OLED_InitBuffer+0x54>)
 8001bea:	f006 fd2b 	bl	8008644 <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 8001bee:	f240 4201 	movw	r2, #1025	@ 0x401
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	480f      	ldr	r0, [pc, #60]	@ (8001c34 <OLED_InitBuffer+0x58>)
 8001bf6:	f006 fd25 	bl	8008644 <memset>

    // 初始化第一个字节为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <OLED_InitBuffer+0x58>)
 8001bfc:	2240      	movs	r2, #64	@ 0x40
 8001bfe:	701a      	strb	r2, [r3, #0]

    // 初始化状态变量
    oled_update_flag = OLED_READY;
 8001c00:	4b0d      	ldr	r3, [pc, #52]	@ (8001c38 <OLED_InitBuffer+0x5c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
    oled_dma_busy = OLED_READY;
 8001c06:	4b0d      	ldr	r3, [pc, #52]	@ (8001c3c <OLED_InitBuffer+0x60>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	71fb      	strb	r3, [r7, #7]
 8001c10:	e006      	b.n	8001c20 <OLED_InitBuffer+0x44>
    {
        oled_dirty_pages[i] = 1;
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	4a0a      	ldr	r2, [pc, #40]	@ (8001c40 <OLED_InitBuffer+0x64>)
 8001c16:	2101      	movs	r1, #1
 8001c18:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	71fb      	strb	r3, [r7, #7]
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	2b07      	cmp	r3, #7
 8001c24:	d9f5      	bls.n	8001c12 <OLED_InitBuffer+0x36>
    }
}
 8001c26:	bf00      	nop
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	2000036c 	.word	0x2000036c
 8001c34:	2000076c 	.word	0x2000076c
 8001c38:	20000360 	.word	0x20000360
 8001c3c:	20000361 	.word	0x20000361
 8001c40:	20000364 	.word	0x20000364

08001c44 <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8001c4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c4e:	2100      	movs	r1, #0
 8001c50:	480a      	ldr	r0, [pc, #40]	@ (8001c7c <OLED_ClearBuffer+0x38>)
 8001c52:	f006 fcf7 	bl	8008644 <memset>

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	71fb      	strb	r3, [r7, #7]
 8001c5a:	e006      	b.n	8001c6a <OLED_ClearBuffer+0x26>
    {
        oled_dirty_pages[i] = 1;
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	4a08      	ldr	r2, [pc, #32]	@ (8001c80 <OLED_ClearBuffer+0x3c>)
 8001c60:	2101      	movs	r1, #1
 8001c62:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	3301      	adds	r3, #1
 8001c68:	71fb      	strb	r3, [r7, #7]
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	2b07      	cmp	r3, #7
 8001c6e:	d9f5      	bls.n	8001c5c <OLED_ClearBuffer+0x18>
    }
}
 8001c70:	bf00      	nop
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	2000036c 	.word	0x2000036c
 8001c80:	20000364 	.word	0x20000364

08001c84 <OLED_IsBusy>:

uint8_t OLED_IsBusy(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
    // 如果标记为忙，检查是否已经过了足够时间
    if (oled_update_flag)
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc8 <OLED_IsBusy+0x44>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d007      	beq.n	8001ca4 <OLED_IsBusy+0x20>
    {
        // SSD1315/SSD1306 典型帧率约为60Hz，每帧约16.7ms
        // 可以根据需要调整刷新率，减小此值可以提高帧率
        uint32_t current_time = HAL_GetTick();
 8001c94:	f003 fe32 	bl	80058fc <HAL_GetTick>
 8001c98:	6078      	str	r0, [r7, #4]
        if (current_time - oled_last_update_time >= 0)
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001ccc <OLED_IsBusy+0x48>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
        {
            oled_update_flag = OLED_READY; // 已经过了足够时间，不再忙
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <OLED_IsBusy+0x44>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
        }
    }

    // 如果DMA传输正在进行，也视为忙
    return (oled_update_flag || oled_dma_busy);
 8001ca4:	4b08      	ldr	r3, [pc, #32]	@ (8001cc8 <OLED_IsBusy+0x44>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d104      	bne.n	8001cb8 <OLED_IsBusy+0x34>
 8001cae:	4b08      	ldr	r3, [pc, #32]	@ (8001cd0 <OLED_IsBusy+0x4c>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <OLED_IsBusy+0x38>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <OLED_IsBusy+0x3a>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	b2db      	uxtb	r3, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000360 	.word	0x20000360
 8001ccc:	2000035c 	.word	0x2000035c
 8001cd0:	20000361 	.word	0x20000361

08001cd4 <OLED_UpdateDisplayVSync>:

void OLED_UpdateDisplayVSync(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af02      	add	r7, sp, #8
    // 等待上一次更新完成
    while (OLED_IsBusy())
 8001cda:	bf00      	nop
 8001cdc:	f7ff ffd2 	bl	8001c84 <OLED_IsBusy>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1fa      	bne.n	8001cdc <OLED_UpdateDisplayVSync+0x8>
    {
        // 可以加入短暂延时或者让出CPU，但通常不会停留很久
    }

    oled_update_flag = OLED_BUSY;
 8001ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d64 <OLED_UpdateDisplayVSync+0x90>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8001cec:	f003 fe06 	bl	80058fc <HAL_GetTick>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d68 <OLED_UpdateDisplayVSync+0x94>)
 8001cf4:	6013      	str	r3, [r2, #0]

    OLED_FrontBuffer[0] = 0x40;                                             // 数据控制字节：Co=0, D/C#=1 (数据)
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d6c <OLED_UpdateDisplayVSync+0x98>)
 8001cf8:	2240      	movs	r2, #64	@ 0x40
 8001cfa:	701a      	strb	r2, [r3, #0]
    memcpy(OLED_FrontBuffer + 1, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES); // 复制当前缓冲区到前缓冲区
 8001cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8001d70 <OLED_UpdateDisplayVSync+0x9c>)
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001d74 <OLED_UpdateDisplayVSync+0xa0>)
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d08:	461a      	mov	r2, r3
 8001d0a:	f006 fd2a 	bl	8008762 <memcpy>

    // 一次性发送所有命令
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	71fb      	strb	r3, [r7, #7]
 8001d12:	e008      	b.n	8001d26 <OLED_UpdateDisplayVSync+0x52>
    {
        OLED_SendCommand(cmds[i]);
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	4a18      	ldr	r2, [pc, #96]	@ (8001d78 <OLED_UpdateDisplayVSync+0xa4>)
 8001d18:	5cd3      	ldrb	r3, [r2, r3]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 f920 	bl	8001f60 <OLED_SendCommand>
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	3301      	adds	r3, #1
 8001d24:	71fb      	strb	r3, [r7, #7]
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	2b07      	cmp	r3, #7
 8001d2a:	d9f3      	bls.n	8001d14 <OLED_UpdateDisplayVSync+0x40>
    }


    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, OLED_WIDTH * OLED_PAGES + 1, HAL_MAX_DELAY);
 8001d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	f240 4301 	movw	r3, #1025	@ 0x401
 8001d36:	4a0d      	ldr	r2, [pc, #52]	@ (8001d6c <OLED_UpdateDisplayVSync+0x98>)
 8001d38:	2178      	movs	r1, #120	@ 0x78
 8001d3a:	4810      	ldr	r0, [pc, #64]	@ (8001d7c <OLED_UpdateDisplayVSync+0xa8>)
 8001d3c:	f004 fb72 	bl	8006424 <HAL_I2C_Master_Transmit>

    // 重置所有脏页标记
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001d40:	2300      	movs	r3, #0
 8001d42:	71bb      	strb	r3, [r7, #6]
 8001d44:	e006      	b.n	8001d54 <OLED_UpdateDisplayVSync+0x80>
    {
        oled_dirty_pages[i] = 0;
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	4a0d      	ldr	r2, [pc, #52]	@ (8001d80 <OLED_UpdateDisplayVSync+0xac>)
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001d4e:	79bb      	ldrb	r3, [r7, #6]
 8001d50:	3301      	adds	r3, #1
 8001d52:	71bb      	strb	r3, [r7, #6]
 8001d54:	79bb      	ldrb	r3, [r7, #6]
 8001d56:	2b07      	cmp	r3, #7
 8001d58:	d9f5      	bls.n	8001d46 <OLED_UpdateDisplayVSync+0x72>
    }
}
 8001d5a:	bf00      	nop
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000360 	.word	0x20000360
 8001d68:	2000035c 	.word	0x2000035c
 8001d6c:	2000076c 	.word	0x2000076c
 8001d70:	2000076d 	.word	0x2000076d
 8001d74:	2000036c 	.word	0x2000036c
 8001d78:	0800aef8 	.word	0x0800aef8
 8001d7c:	2000026c 	.word	0x2000026c
 8001d80:	20000364 	.word	0x20000364

08001d84 <OLED_UpdateDisplayPartial>:
    }
}

// 局部更新显示函数
void OLED_UpdateDisplayPartial(uint8_t startPage, uint8_t endPage)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af02      	add	r7, sp, #8
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	460a      	mov	r2, r1
 8001d8e:	71fb      	strb	r3, [r7, #7]
 8001d90:	4613      	mov	r3, r2
 8001d92:	71bb      	strb	r3, [r7, #6]
    // 边界检查
    if (startPage >= OLED_PAGES || endPage >= OLED_PAGES || startPage > endPage)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	2b07      	cmp	r3, #7
 8001d98:	d85c      	bhi.n	8001e54 <OLED_UpdateDisplayPartial+0xd0>
 8001d9a:	79bb      	ldrb	r3, [r7, #6]
 8001d9c:	2b07      	cmp	r3, #7
 8001d9e:	d859      	bhi.n	8001e54 <OLED_UpdateDisplayPartial+0xd0>
 8001da0:	79fa      	ldrb	r2, [r7, #7]
 8001da2:	79bb      	ldrb	r3, [r7, #6]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d855      	bhi.n	8001e54 <OLED_UpdateDisplayPartial+0xd0>
        return;

    // 等待上一次更新完成
    while (OLED_IsBusy())
 8001da8:	bf00      	nop
 8001daa:	f7ff ff6b 	bl	8001c84 <OLED_IsBusy>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1fa      	bne.n	8001daa <OLED_UpdateDisplayPartial+0x26>
    {
        // 可以加入短暂延时或者让出CPU
    }

    oled_update_flag = OLED_BUSY;
 8001db4:	4b29      	ldr	r3, [pc, #164]	@ (8001e5c <OLED_UpdateDisplayPartial+0xd8>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8001dba:	f003 fd9f 	bl	80058fc <HAL_GetTick>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4a27      	ldr	r2, [pc, #156]	@ (8001e60 <OLED_UpdateDisplayPartial+0xdc>)
 8001dc2:	6013      	str	r3, [r2, #0]

    // 设置页地址范围
    OLED_SendCommand(0x22);      // 页地址设置命令
 8001dc4:	2022      	movs	r0, #34	@ 0x22
 8001dc6:	f000 f8cb 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(startPage); // 起始页
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 f8c7 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(endPage);   // 结束页
 8001dd2:	79bb      	ldrb	r3, [r7, #6]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 f8c3 	bl	8001f60 <OLED_SendCommand>

    // 设置列地址范围（总是更新整行）
    OLED_SendCommand(0x21); // 列地址设置命令
 8001dda:	2021      	movs	r0, #33	@ 0x21
 8001ddc:	f000 f8c0 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 起始列
 8001de0:	2000      	movs	r0, #0
 8001de2:	f000 f8bd 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0x7F); // 结束列 (127)
 8001de6:	207f      	movs	r0, #127	@ 0x7f
 8001de8:	f000 f8ba 	bl	8001f60 <OLED_SendCommand>

    // 计算需要传输的数据长度
    uint16_t dataLen = OLED_WIDTH * (endPage - startPage + 1);
 8001dec:	79ba      	ldrb	r2, [r7, #6]
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	3301      	adds	r3, #1
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	01db      	lsls	r3, r3, #7
 8001df8:	81bb      	strh	r3, [r7, #12]

    // 前缓冲区的第一个字节设为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001e64 <OLED_UpdateDisplayPartial+0xe0>)
 8001dfc:	2240      	movs	r2, #64	@ 0x40
 8001dfe:	701a      	strb	r2, [r3, #0]

    // 只复制需要更新的页
    for (uint8_t page = startPage; page <= endPage; page++)
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	73fb      	strb	r3, [r7, #15]
 8001e04:	e016      	b.n	8001e34 <OLED_UpdateDisplayPartial+0xb0>
    {
        memcpy(
            OLED_FrontBuffer + 1 + (page - startPage) * OLED_WIDTH,
 8001e06:	7bfa      	ldrb	r2, [r7, #15]
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	01db      	lsls	r3, r3, #7
 8001e0e:	3301      	adds	r3, #1
        memcpy(
 8001e10:	4a14      	ldr	r2, [pc, #80]	@ (8001e64 <OLED_UpdateDisplayPartial+0xe0>)
 8001e12:	1898      	adds	r0, r3, r2
            OLED_BackBuffer + page * OLED_WIDTH,
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	01db      	lsls	r3, r3, #7
 8001e18:	461a      	mov	r2, r3
        memcpy(
 8001e1a:	4b13      	ldr	r3, [pc, #76]	@ (8001e68 <OLED_UpdateDisplayPartial+0xe4>)
 8001e1c:	4413      	add	r3, r2
 8001e1e:	2280      	movs	r2, #128	@ 0x80
 8001e20:	4619      	mov	r1, r3
 8001e22:	f006 fc9e 	bl	8008762 <memcpy>
            OLED_WIDTH);
        oled_dirty_pages[page] = 0; // 重置脏页标记
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	4a10      	ldr	r2, [pc, #64]	@ (8001e6c <OLED_UpdateDisplayPartial+0xe8>)
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = startPage; page <= endPage; page++)
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	3301      	adds	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	79bb      	ldrb	r3, [r7, #6]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d9e4      	bls.n	8001e06 <OLED_UpdateDisplayPartial+0x82>
    }

    // 发送数据
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, dataLen + 1, HAL_MAX_DELAY);
 8001e3c:	89bb      	ldrh	r3, [r7, #12]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	f04f 32ff 	mov.w	r2, #4294967295
 8001e46:	9200      	str	r2, [sp, #0]
 8001e48:	4a06      	ldr	r2, [pc, #24]	@ (8001e64 <OLED_UpdateDisplayPartial+0xe0>)
 8001e4a:	2178      	movs	r1, #120	@ 0x78
 8001e4c:	4808      	ldr	r0, [pc, #32]	@ (8001e70 <OLED_UpdateDisplayPartial+0xec>)
 8001e4e:	f004 fae9 	bl	8006424 <HAL_I2C_Master_Transmit>
 8001e52:	e000      	b.n	8001e56 <OLED_UpdateDisplayPartial+0xd2>
        return;
 8001e54:	bf00      	nop
}
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000360 	.word	0x20000360
 8001e60:	2000035c 	.word	0x2000035c
 8001e64:	2000076c 	.word	0x2000076c
 8001e68:	2000036c 	.word	0x2000036c
 8001e6c:	20000364 	.word	0x20000364
 8001e70:	2000026c 	.word	0x2000026c

08001e74 <OLED_WritePixel>:

void OLED_WritePixel(int16_t x, int16_t y, uint8_t color)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	80fb      	strh	r3, [r7, #6]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	80bb      	strh	r3, [r7, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	70fb      	strb	r3, [r7, #3]
    // 边界检查
    if (x >= OLED_WIDTH || x < 0 || y >= OLED_HEIGHT || y < 0)
 8001e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e8c:	dc5e      	bgt.n	8001f4c <OLED_WritePixel+0xd8>
 8001e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db5a      	blt.n	8001f4c <OLED_WritePixel+0xd8>
 8001e96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e9c:	dc56      	bgt.n	8001f4c <OLED_WritePixel+0xd8>
 8001e9e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	db52      	blt.n	8001f4c <OLED_WritePixel+0xd8>
        return;

    // 计算像素所在的字节位置
    uint16_t byte_index = x + (y / 8) * OLED_WIDTH;
 8001ea6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	da00      	bge.n	8001eb0 <OLED_WritePixel+0x3c>
 8001eae:	3307      	adds	r3, #7
 8001eb0:	10db      	asrs	r3, r3, #3
 8001eb2:	b21b      	sxth	r3, r3
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	01db      	lsls	r3, r3, #7
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	81fb      	strh	r3, [r7, #14]
    uint8_t bit_position = y % 8;
 8001ec0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ec4:	425a      	negs	r2, r3
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	f002 0207 	and.w	r2, r2, #7
 8001ece:	bf58      	it	pl
 8001ed0:	4253      	negpl	r3, r2
 8001ed2:	b21b      	sxth	r3, r3
 8001ed4:	737b      	strb	r3, [r7, #13]
    uint8_t page = y / 8; // 计算所在页
 8001ed6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	da00      	bge.n	8001ee0 <OLED_WritePixel+0x6c>
 8001ede:	3307      	adds	r3, #7
 8001ee0:	10db      	asrs	r3, r3, #3
 8001ee2:	b21b      	sxth	r3, r3
 8001ee4:	733b      	strb	r3, [r7, #12]

    // 记录当前像素值
    uint8_t old_value = OLED_BackBuffer[byte_index];
 8001ee6:	89fb      	ldrh	r3, [r7, #14]
 8001ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f58 <OLED_WritePixel+0xe4>)
 8001eea:	5cd3      	ldrb	r3, [r2, r3]
 8001eec:	72fb      	strb	r3, [r7, #11]

    if (color) // 如果需要点亮像素
 8001eee:	78fb      	ldrb	r3, [r7, #3]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00f      	beq.n	8001f14 <OLED_WritePixel+0xa0>
        OLED_BackBuffer[byte_index] |= (1 << bit_position);
 8001ef4:	89fb      	ldrh	r3, [r7, #14]
 8001ef6:	4a18      	ldr	r2, [pc, #96]	@ (8001f58 <OLED_WritePixel+0xe4>)
 8001ef8:	5cd3      	ldrb	r3, [r2, r3]
 8001efa:	b25a      	sxtb	r2, r3
 8001efc:	7b7b      	ldrb	r3, [r7, #13]
 8001efe:	2101      	movs	r1, #1
 8001f00:	fa01 f303 	lsl.w	r3, r1, r3
 8001f04:	b25b      	sxtb	r3, r3
 8001f06:	4313      	orrs	r3, r2
 8001f08:	b25a      	sxtb	r2, r3
 8001f0a:	89fb      	ldrh	r3, [r7, #14]
 8001f0c:	b2d1      	uxtb	r1, r2
 8001f0e:	4a12      	ldr	r2, [pc, #72]	@ (8001f58 <OLED_WritePixel+0xe4>)
 8001f10:	54d1      	strb	r1, [r2, r3]
 8001f12:	e010      	b.n	8001f36 <OLED_WritePixel+0xc2>
    else // 如果需要熄灭像素
        OLED_BackBuffer[byte_index] &= ~(1 << bit_position);
 8001f14:	89fb      	ldrh	r3, [r7, #14]
 8001f16:	4a10      	ldr	r2, [pc, #64]	@ (8001f58 <OLED_WritePixel+0xe4>)
 8001f18:	5cd3      	ldrb	r3, [r2, r3]
 8001f1a:	b25a      	sxtb	r2, r3
 8001f1c:	7b7b      	ldrb	r3, [r7, #13]
 8001f1e:	2101      	movs	r1, #1
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	b25b      	sxtb	r3, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	b25b      	sxtb	r3, r3
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	b25a      	sxtb	r2, r3
 8001f2e:	89fb      	ldrh	r3, [r7, #14]
 8001f30:	b2d1      	uxtb	r1, r2
 8001f32:	4a09      	ldr	r2, [pc, #36]	@ (8001f58 <OLED_WritePixel+0xe4>)
 8001f34:	54d1      	strb	r1, [r2, r3]

    // 如果像素值发生变化，标记该页为脏
    if (old_value != OLED_BackBuffer[byte_index])
 8001f36:	89fb      	ldrh	r3, [r7, #14]
 8001f38:	4a07      	ldr	r2, [pc, #28]	@ (8001f58 <OLED_WritePixel+0xe4>)
 8001f3a:	5cd3      	ldrb	r3, [r2, r3]
 8001f3c:	7afa      	ldrb	r2, [r7, #11]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d005      	beq.n	8001f4e <OLED_WritePixel+0xda>
    {
        oled_dirty_pages[page] = 1;
 8001f42:	7b3b      	ldrb	r3, [r7, #12]
 8001f44:	4a05      	ldr	r2, [pc, #20]	@ (8001f5c <OLED_WritePixel+0xe8>)
 8001f46:	2101      	movs	r1, #1
 8001f48:	54d1      	strb	r1, [r2, r3]
 8001f4a:	e000      	b.n	8001f4e <OLED_WritePixel+0xda>
        return;
 8001f4c:	bf00      	nop
    }
}
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	2000036c 	.word	0x2000036c
 8001f5c:	20000364 	.word	0x20000364

08001f60 <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8001f72:	f107 020c 	add.w	r2, r7, #12
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	2178      	movs	r1, #120	@ 0x78
 8001f80:	4803      	ldr	r0, [pc, #12]	@ (8001f90 <OLED_SendCommand+0x30>)
 8001f82:	f004 fa4f 	bl	8006424 <HAL_I2C_Master_Transmit>
}
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	2000026c 	.word	0x2000026c

08001f94 <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 8001f98:	2064      	movs	r0, #100	@ 0x64
 8001f9a:	f003 fcb9 	bl	8005910 <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 8001f9e:	20ae      	movs	r0, #174	@ 0xae
 8001fa0:	f7ff ffde 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 8001fa4:	20d5      	movs	r0, #213	@ 0xd5
 8001fa6:	f7ff ffdb 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 8001faa:	2080      	movs	r0, #128	@ 0x80
 8001fac:	f7ff ffd8 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8001fb0:	20a8      	movs	r0, #168	@ 0xa8
 8001fb2:	f7ff ffd5 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 8001fb6:	203f      	movs	r0, #63	@ 0x3f
 8001fb8:	f7ff ffd2 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8001fbc:	20d3      	movs	r0, #211	@ 0xd3
 8001fbe:	f7ff ffcf 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7ff ffcc 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8001fc8:	2040      	movs	r0, #64	@ 0x40
 8001fca:	f7ff ffc9 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 8001fce:	208d      	movs	r0, #141	@ 0x8d
 8001fd0:	f7ff ffc6 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 8001fd4:	2014      	movs	r0, #20
 8001fd6:	f7ff ffc3 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 8001fda:	2020      	movs	r0, #32
 8001fdc:	f7ff ffc0 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f7ff ffbd 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 8001fe6:	20a1      	movs	r0, #161	@ 0xa1
 8001fe8:	f7ff ffba 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 8001fec:	20c8      	movs	r0, #200	@ 0xc8
 8001fee:	f7ff ffb7 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 8001ff2:	20da      	movs	r0, #218	@ 0xda
 8001ff4:	f7ff ffb4 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8001ff8:	2012      	movs	r0, #18
 8001ffa:	f7ff ffb1 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 8001ffe:	2081      	movs	r0, #129	@ 0x81
 8002000:	f7ff ffae 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 8002004:	20cf      	movs	r0, #207	@ 0xcf
 8002006:	f7ff ffab 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 800200a:	20d9      	movs	r0, #217	@ 0xd9
 800200c:	f7ff ffa8 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 8002010:	20f1      	movs	r0, #241	@ 0xf1
 8002012:	f7ff ffa5 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 8002016:	20db      	movs	r0, #219	@ 0xdb
 8002018:	f7ff ffa2 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 800201c:	2030      	movs	r0, #48	@ 0x30
 800201e:	f7ff ff9f 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 8002022:	20a4      	movs	r0, #164	@ 0xa4
 8002024:	f7ff ff9c 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 8002028:	20a6      	movs	r0, #166	@ 0xa6
 800202a:	f7ff ff99 	bl	8001f60 <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 800202e:	202e      	movs	r0, #46	@ 0x2e
 8002030:	f7ff ff96 	bl	8001f60 <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 8002034:	f7ff fdd2 	bl	8001bdc <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 8002038:	f7ff fe04 	bl	8001c44 <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 800203c:	20af      	movs	r0, #175	@ 0xaf
 800203e:	f7ff ff8f 	bl	8001f60 <OLED_SendCommand>
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <OLED_InvertArea>:

// 区域反色功能 - 将指定矩形区域内的像素颜色反转 //! UPDATEDISPLAY REQUIRED
void OLED_InvertArea(int16_t x, int16_t y, uint8_t width, uint8_t height)
{
 8002048:	b490      	push	{r4, r7}
 800204a:	b088      	sub	sp, #32
 800204c:	af00      	add	r7, sp, #0
 800204e:	4604      	mov	r4, r0
 8002050:	4608      	mov	r0, r1
 8002052:	4611      	mov	r1, r2
 8002054:	461a      	mov	r2, r3
 8002056:	4623      	mov	r3, r4
 8002058:	80fb      	strh	r3, [r7, #6]
 800205a:	4603      	mov	r3, r0
 800205c:	80bb      	strh	r3, [r7, #4]
 800205e:	460b      	mov	r3, r1
 8002060:	70fb      	strb	r3, [r7, #3]
 8002062:	4613      	mov	r3, r2
 8002064:	70bb      	strb	r3, [r7, #2]
    if (width == 0 || height == 0)
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 809d 	beq.w	80021a8 <OLED_InvertArea+0x160>
 800206e:	78bb      	ldrb	r3, [r7, #2]
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 8099 	beq.w	80021a8 <OLED_InvertArea+0x160>
        return;

    int16_t x_start_on_screen = x;
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	83fb      	strh	r3, [r7, #30]
    int16_t y_start_on_screen = y;
 800207a:	88bb      	ldrh	r3, [r7, #4]
 800207c:	83bb      	strh	r3, [r7, #28]
    int16_t x_end_on_screen = x + width - 1;
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	b29a      	uxth	r2, r3
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	4413      	add	r3, r2
 8002086:	b29b      	uxth	r3, r3
 8002088:	3b01      	subs	r3, #1
 800208a:	b29b      	uxth	r3, r3
 800208c:	837b      	strh	r3, [r7, #26]
    int16_t y_end_on_screen = y + height - 1;
 800208e:	78bb      	ldrb	r3, [r7, #2]
 8002090:	b29a      	uxth	r2, r3
 8002092:	88bb      	ldrh	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	b29b      	uxth	r3, r3
 800209c:	833b      	strh	r3, [r7, #24]

    // Clip to screen boundaries
    if (x_start_on_screen < 0)
 800209e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	da01      	bge.n	80020aa <OLED_InvertArea+0x62>
        x_start_on_screen = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	83fb      	strh	r3, [r7, #30]
    if (y_start_on_screen < 0)
 80020aa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	da01      	bge.n	80020b6 <OLED_InvertArea+0x6e>
        y_start_on_screen = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	83bb      	strh	r3, [r7, #28]
    if (x_end_on_screen >= OLED_WIDTH)
 80020b6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80020ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80020bc:	dd01      	ble.n	80020c2 <OLED_InvertArea+0x7a>
        x_end_on_screen = OLED_WIDTH - 1;
 80020be:	237f      	movs	r3, #127	@ 0x7f
 80020c0:	837b      	strh	r3, [r7, #26]
    if (y_end_on_screen >= OLED_HEIGHT)
 80020c2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80020c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80020c8:	dd01      	ble.n	80020ce <OLED_InvertArea+0x86>
        y_end_on_screen = OLED_HEIGHT - 1;
 80020ca:	233f      	movs	r3, #63	@ 0x3f
 80020cc:	833b      	strh	r3, [r7, #24]

    // If clipped area is invalid (e.g., entirely off-screen after clipping)
    if (x_start_on_screen > x_end_on_screen || y_start_on_screen > y_end_on_screen)
 80020ce:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80020d2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	dc68      	bgt.n	80021ac <OLED_InvertArea+0x164>
 80020da:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80020de:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	dc62      	bgt.n	80021ac <OLED_InvertArea+0x164>
        return;

    // 计算涉及的页范围
    uint8_t start_page = y_start_on_screen / 8;
 80020e6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	da00      	bge.n	80020f0 <OLED_InvertArea+0xa8>
 80020ee:	3307      	adds	r3, #7
 80020f0:	10db      	asrs	r3, r3, #3
 80020f2:	b21b      	sxth	r3, r3
 80020f4:	747b      	strb	r3, [r7, #17]
    uint8_t end_page = y_end_on_screen / 8;
 80020f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	da00      	bge.n	8002100 <OLED_InvertArea+0xb8>
 80020fe:	3307      	adds	r3, #7
 8002100:	10db      	asrs	r3, r3, #3
 8002102:	b21b      	sxth	r3, r3
 8002104:	743b      	strb	r3, [r7, #16]

    // 标记受影响的页为脏页
    extern volatile uint8_t oled_dirty_pages[];
    for (uint8_t page = start_page; page <= end_page; page++)
 8002106:	7c7b      	ldrb	r3, [r7, #17]
 8002108:	75fb      	strb	r3, [r7, #23]
 800210a:	e006      	b.n	800211a <OLED_InvertArea+0xd2>
    {
        oled_dirty_pages[page] = 1;
 800210c:	7dfb      	ldrb	r3, [r7, #23]
 800210e:	4a2a      	ldr	r2, [pc, #168]	@ (80021b8 <OLED_InvertArea+0x170>)
 8002110:	2101      	movs	r1, #1
 8002112:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = start_page; page <= end_page; page++)
 8002114:	7dfb      	ldrb	r3, [r7, #23]
 8002116:	3301      	adds	r3, #1
 8002118:	75fb      	strb	r3, [r7, #23]
 800211a:	7dfa      	ldrb	r2, [r7, #23]
 800211c:	7c3b      	ldrb	r3, [r7, #16]
 800211e:	429a      	cmp	r2, r3
 8002120:	d9f4      	bls.n	800210c <OLED_InvertArea+0xc4>
    }

    // 优化的像素更新逻辑 - 按行处理以提高缓存命中率
    for (int16_t j = y_start_on_screen; j <= y_end_on_screen; j++)
 8002122:	8bbb      	ldrh	r3, [r7, #28]
 8002124:	82bb      	strh	r3, [r7, #20]
 8002126:	e038      	b.n	800219a <OLED_InvertArea+0x152>
    {
        uint8_t page = (uint8_t)j / 8;
 8002128:	8abb      	ldrh	r3, [r7, #20]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	08db      	lsrs	r3, r3, #3
 800212e:	73fb      	strb	r3, [r7, #15]
        uint8_t bit_position = (uint8_t)j % 8;
 8002130:	8abb      	ldrh	r3, [r7, #20]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	73bb      	strb	r3, [r7, #14]
        uint16_t byte_index_base = page * OLED_WIDTH;
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	b29b      	uxth	r3, r3
 800213e:	01db      	lsls	r3, r3, #7
 8002140:	81bb      	strh	r3, [r7, #12]

        // 处理当前行上的所有像素
        for (int16_t i = x_start_on_screen; i <= x_end_on_screen; i++)
 8002142:	8bfb      	ldrh	r3, [r7, #30]
 8002144:	827b      	strh	r3, [r7, #18]
 8002146:	e01c      	b.n	8002182 <OLED_InvertArea+0x13a>
        {
            uint16_t byte_index = byte_index_base + i;
 8002148:	8a7a      	ldrh	r2, [r7, #18]
 800214a:	89bb      	ldrh	r3, [r7, #12]
 800214c:	4413      	add	r3, r2
 800214e:	817b      	strh	r3, [r7, #10]

            // 反转位
            if (byte_index < sizeof(OLED_BackBuffer))
 8002150:	897b      	ldrh	r3, [r7, #10]
 8002152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002156:	d20e      	bcs.n	8002176 <OLED_InvertArea+0x12e>
            {
                OLED_BackBuffer[byte_index] ^= (1 << bit_position);
 8002158:	897b      	ldrh	r3, [r7, #10]
 800215a:	4a18      	ldr	r2, [pc, #96]	@ (80021bc <OLED_InvertArea+0x174>)
 800215c:	5cd3      	ldrb	r3, [r2, r3]
 800215e:	b25a      	sxtb	r2, r3
 8002160:	7bbb      	ldrb	r3, [r7, #14]
 8002162:	2101      	movs	r1, #1
 8002164:	fa01 f303 	lsl.w	r3, r1, r3
 8002168:	b25b      	sxtb	r3, r3
 800216a:	4053      	eors	r3, r2
 800216c:	b25a      	sxtb	r2, r3
 800216e:	897b      	ldrh	r3, [r7, #10]
 8002170:	b2d1      	uxtb	r1, r2
 8002172:	4a12      	ldr	r2, [pc, #72]	@ (80021bc <OLED_InvertArea+0x174>)
 8002174:	54d1      	strb	r1, [r2, r3]
        for (int16_t i = x_start_on_screen; i <= x_end_on_screen; i++)
 8002176:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800217a:	b29b      	uxth	r3, r3
 800217c:	3301      	adds	r3, #1
 800217e:	b29b      	uxth	r3, r3
 8002180:	827b      	strh	r3, [r7, #18]
 8002182:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002186:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800218a:	429a      	cmp	r2, r3
 800218c:	dddc      	ble.n	8002148 <OLED_InvertArea+0x100>
    for (int16_t j = y_start_on_screen; j <= y_end_on_screen; j++)
 800218e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002192:	b29b      	uxth	r3, r3
 8002194:	3301      	adds	r3, #1
 8002196:	b29b      	uxth	r3, r3
 8002198:	82bb      	strh	r3, [r7, #20]
 800219a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800219e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	ddc0      	ble.n	8002128 <OLED_InvertArea+0xe0>
 80021a6:	e002      	b.n	80021ae <OLED_InvertArea+0x166>
        return;
 80021a8:	bf00      	nop
 80021aa:	e000      	b.n	80021ae <OLED_InvertArea+0x166>
        return;
 80021ac:	bf00      	nop
            }
        }
    }
}
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc90      	pop	{r4, r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000364 	.word	0x20000364
 80021bc:	2000036c 	.word	0x2000036c

080021c0 <OLED_DisplayChar>:
    OLED_SendCommand(0x00 + (x & 0x0F));        // 设置低4位列地址
    OLED_SendCommand(0x10 + ((x >> 4) & 0x0F)); // 设置高4位列地址
}

void OLED_DisplayChar(int16_t x, int16_t y, char ch) //! UPDATEDISPLAY REQUIRED
{
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	@ 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	80fb      	strh	r3, [r7, #6]
 80021ca:	460b      	mov	r3, r1
 80021cc:	80bb      	strh	r3, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	70fb      	strb	r3, [r7, #3]
    const uint8_t font_width = 6;
 80021d2:	2306      	movs	r3, #6
 80021d4:	773b      	strb	r3, [r7, #28]
    const uint8_t font_height = 8;
 80021d6:	2308      	movs	r3, #8
 80021d8:	76fb      	strb	r3, [r7, #27]

    if (ch < 32)
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	2b1f      	cmp	r3, #31
 80021de:	f240 80aa 	bls.w	8002336 <OLED_DisplayChar+0x176>
        return;

    uint8_t c = ch - 32;
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	3b20      	subs	r3, #32
 80021e6:	76bb      	strb	r3, [r7, #26]

    uint8_t start_page = (y >= 0) ? (y / 8) : 0;
 80021e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	db08      	blt.n	8002202 <OLED_DisplayChar+0x42>
 80021f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	da00      	bge.n	80021fa <OLED_DisplayChar+0x3a>
 80021f8:	3307      	adds	r3, #7
 80021fa:	10db      	asrs	r3, r3, #3
 80021fc:	b21b      	sxth	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	e000      	b.n	8002204 <OLED_DisplayChar+0x44>
 8002202:	2300      	movs	r3, #0
 8002204:	767b      	strb	r3, [r7, #25]
    uint8_t end_page = ((y + font_height - 1) < OLED_HEIGHT) ? ((y + font_height - 1) / 8) : (OLED_HEIGHT / 8 - 1);
 8002206:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800220a:	7efb      	ldrb	r3, [r7, #27]
 800220c:	4413      	add	r3, r2
 800220e:	2b40      	cmp	r3, #64	@ 0x40
 8002210:	dc0a      	bgt.n	8002228 <OLED_DisplayChar+0x68>
 8002212:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002216:	7efb      	ldrb	r3, [r7, #27]
 8002218:	4413      	add	r3, r2
 800221a:	3b01      	subs	r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	da00      	bge.n	8002222 <OLED_DisplayChar+0x62>
 8002220:	3307      	adds	r3, #7
 8002222:	10db      	asrs	r3, r3, #3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	e000      	b.n	800222a <OLED_DisplayChar+0x6a>
 8002228:	2307      	movs	r3, #7
 800222a:	763b      	strb	r3, [r7, #24]

    extern volatile uint8_t oled_dirty_pages[];
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 800222c:	7e7b      	ldrb	r3, [r7, #25]
 800222e:	77fb      	strb	r3, [r7, #31]
 8002230:	e006      	b.n	8002240 <OLED_DisplayChar+0x80>
    {
        oled_dirty_pages[page] = 1;
 8002232:	7ffb      	ldrb	r3, [r7, #31]
 8002234:	4a43      	ldr	r2, [pc, #268]	@ (8002344 <OLED_DisplayChar+0x184>)
 8002236:	2101      	movs	r1, #1
 8002238:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 800223a:	7ffb      	ldrb	r3, [r7, #31]
 800223c:	3301      	adds	r3, #1
 800223e:	77fb      	strb	r3, [r7, #31]
 8002240:	7ffa      	ldrb	r2, [r7, #31]
 8002242:	7e3b      	ldrb	r3, [r7, #24]
 8002244:	429a      	cmp	r2, r3
 8002246:	d802      	bhi.n	800224e <OLED_DisplayChar+0x8e>
 8002248:	7ffb      	ldrb	r3, [r7, #31]
 800224a:	2b07      	cmp	r3, #7
 800224c:	d9f1      	bls.n	8002232 <OLED_DisplayChar+0x72>
    }
    // 按列渲染
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 800224e:	2300      	movs	r3, #0
 8002250:	77bb      	strb	r3, [r7, #30]
 8002252:	e06b      	b.n	800232c <OLED_DisplayChar+0x16c>
    {
        int16_t screen_x = x + char_col;
 8002254:	7fbb      	ldrb	r3, [r7, #30]
 8002256:	b29a      	uxth	r2, r3
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	4413      	add	r3, r2
 800225c:	b29b      	uxth	r3, r3
 800225e:	82fb      	strh	r3, [r7, #22]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 8002260:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002264:	2b00      	cmp	r3, #0
 8002266:	db5d      	blt.n	8002324 <OLED_DisplayChar+0x164>
 8002268:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800226c:	2b7f      	cmp	r3, #127	@ 0x7f
 800226e:	dc59      	bgt.n	8002324 <OLED_DisplayChar+0x164>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 8002270:	7ebb      	ldrb	r3, [r7, #26]
 8002272:	7f3a      	ldrb	r2, [r7, #28]
 8002274:	fb03 f202 	mul.w	r2, r3, r2
 8002278:	7fbb      	ldrb	r3, [r7, #30]
 800227a:	4413      	add	r3, r2
 800227c:	461a      	mov	r2, r3
 800227e:	f240 2321 	movw	r3, #545	@ 0x221
 8002282:	429a      	cmp	r2, r3
 8002284:	d859      	bhi.n	800233a <OLED_DisplayChar+0x17a>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 8002286:	7ebb      	ldrb	r3, [r7, #26]
 8002288:	7f3a      	ldrb	r2, [r7, #28]
 800228a:	fb03 f202 	mul.w	r2, r3, r2
 800228e:	7fbb      	ldrb	r3, [r7, #30]
 8002290:	4413      	add	r3, r2
 8002292:	4a2d      	ldr	r2, [pc, #180]	@ (8002348 <OLED_DisplayChar+0x188>)
 8002294:	5cd3      	ldrb	r3, [r2, r3]
 8002296:	757b      	strb	r3, [r7, #21]

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8002298:	2300      	movs	r3, #0
 800229a:	777b      	strb	r3, [r7, #29]
 800229c:	e03d      	b.n	800231a <OLED_DisplayChar+0x15a>
        {
            int16_t screen_y = y + char_row_bit;
 800229e:	7f7b      	ldrb	r3, [r7, #29]
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	88bb      	ldrh	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	827b      	strh	r3, [r7, #18]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 80022aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	db2f      	blt.n	8002312 <OLED_DisplayChar+0x152>
 80022b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80022b8:	dc2b      	bgt.n	8002312 <OLED_DisplayChar+0x152>
                continue;

            if ((font_data_col >> char_row_bit) & 0x01)
 80022ba:	7d7a      	ldrb	r2, [r7, #21]
 80022bc:	7f7b      	ldrb	r3, [r7, #29]
 80022be:	fa42 f303 	asr.w	r3, r2, r3
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d024      	beq.n	8002314 <OLED_DisplayChar+0x154>
            {
                uint8_t page = (uint8_t)screen_y / 8;
 80022ca:	8a7b      	ldrh	r3, [r7, #18]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	08db      	lsrs	r3, r3, #3
 80022d0:	747b      	strb	r3, [r7, #17]
                uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 80022d2:	8a7b      	ldrh	r3, [r7, #18]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	743b      	strb	r3, [r7, #16]
                uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 80022dc:	7c7b      	ldrb	r3, [r7, #17]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	01db      	lsls	r3, r3, #7
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	8afb      	ldrh	r3, [r7, #22]
 80022e6:	4413      	add	r3, r2
 80022e8:	81fb      	strh	r3, [r7, #14]

                if (buffer_index < sizeof(OLED_BackBuffer))
 80022ea:	89fb      	ldrh	r3, [r7, #14]
 80022ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022f0:	d210      	bcs.n	8002314 <OLED_DisplayChar+0x154>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 80022f2:	89fb      	ldrh	r3, [r7, #14]
 80022f4:	4a15      	ldr	r2, [pc, #84]	@ (800234c <OLED_DisplayChar+0x18c>)
 80022f6:	5cd3      	ldrb	r3, [r2, r3]
 80022f8:	b25a      	sxtb	r2, r3
 80022fa:	7c3b      	ldrb	r3, [r7, #16]
 80022fc:	2101      	movs	r1, #1
 80022fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002302:	b25b      	sxtb	r3, r3
 8002304:	4313      	orrs	r3, r2
 8002306:	b25a      	sxtb	r2, r3
 8002308:	89fb      	ldrh	r3, [r7, #14]
 800230a:	b2d1      	uxtb	r1, r2
 800230c:	4a0f      	ldr	r2, [pc, #60]	@ (800234c <OLED_DisplayChar+0x18c>)
 800230e:	54d1      	strb	r1, [r2, r3]
 8002310:	e000      	b.n	8002314 <OLED_DisplayChar+0x154>
                continue;
 8002312:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8002314:	7f7b      	ldrb	r3, [r7, #29]
 8002316:	3301      	adds	r3, #1
 8002318:	777b      	strb	r3, [r7, #29]
 800231a:	7f7a      	ldrb	r2, [r7, #29]
 800231c:	7efb      	ldrb	r3, [r7, #27]
 800231e:	429a      	cmp	r2, r3
 8002320:	d3bd      	bcc.n	800229e <OLED_DisplayChar+0xde>
 8002322:	e000      	b.n	8002326 <OLED_DisplayChar+0x166>
            continue;
 8002324:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8002326:	7fbb      	ldrb	r3, [r7, #30]
 8002328:	3301      	adds	r3, #1
 800232a:	77bb      	strb	r3, [r7, #30]
 800232c:	7fba      	ldrb	r2, [r7, #30]
 800232e:	7f3b      	ldrb	r3, [r7, #28]
 8002330:	429a      	cmp	r2, r3
 8002332:	d38f      	bcc.n	8002254 <OLED_DisplayChar+0x94>
 8002334:	e002      	b.n	800233c <OLED_DisplayChar+0x17c>
        return;
 8002336:	bf00      	nop
 8002338:	e000      	b.n	800233c <OLED_DisplayChar+0x17c>
            break;
 800233a:	bf00      	nop
                }
            }
        }
    }
}
 800233c:	3724      	adds	r7, #36	@ 0x24
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	20000364 	.word	0x20000364
 8002348:	0800acd4 	.word	0x0800acd4
 800234c:	2000036c 	.word	0x2000036c

08002350 <OLED_DisplayCharInverted>:

void OLED_DisplayCharInverted(int16_t x, int16_t y, char ch, uint8_t inverted) //! UPDATEDISPLAY REQUIRED
{
 8002350:	b490      	push	{r4, r7}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	4604      	mov	r4, r0
 8002358:	4608      	mov	r0, r1
 800235a:	4611      	mov	r1, r2
 800235c:	461a      	mov	r2, r3
 800235e:	4623      	mov	r3, r4
 8002360:	80fb      	strh	r3, [r7, #6]
 8002362:	4603      	mov	r3, r0
 8002364:	80bb      	strh	r3, [r7, #4]
 8002366:	460b      	mov	r3, r1
 8002368:	70fb      	strb	r3, [r7, #3]
 800236a:	4613      	mov	r3, r2
 800236c:	70bb      	strb	r3, [r7, #2]
    const uint8_t font_width = 6;
 800236e:	2306      	movs	r3, #6
 8002370:	753b      	strb	r3, [r7, #20]
    const uint8_t font_height = 8;
 8002372:	2308      	movs	r3, #8
 8002374:	74fb      	strb	r3, [r7, #19]

    if (ch < 32)
 8002376:	78fb      	ldrb	r3, [r7, #3]
 8002378:	2b1f      	cmp	r3, #31
 800237a:	f240 8090 	bls.w	800249e <OLED_DisplayCharInverted+0x14e>
        return;

    uint8_t c = ch - 32;
 800237e:	78fb      	ldrb	r3, [r7, #3]
 8002380:	3b20      	subs	r3, #32
 8002382:	74bb      	strb	r3, [r7, #18]

    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8002384:	2300      	movs	r3, #0
 8002386:	75fb      	strb	r3, [r7, #23]
 8002388:	e083      	b.n	8002492 <OLED_DisplayCharInverted+0x142>
    {
        int16_t screen_x = x + char_col;
 800238a:	7dfb      	ldrb	r3, [r7, #23]
 800238c:	b29a      	uxth	r2, r3
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	4413      	add	r3, r2
 8002392:	b29b      	uxth	r3, r3
 8002394:	823b      	strh	r3, [r7, #16]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 8002396:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800239a:	2b00      	cmp	r3, #0
 800239c:	db75      	blt.n	800248a <OLED_DisplayCharInverted+0x13a>
 800239e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80023a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80023a4:	dc71      	bgt.n	800248a <OLED_DisplayCharInverted+0x13a>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 80023a6:	7cbb      	ldrb	r3, [r7, #18]
 80023a8:	7d3a      	ldrb	r2, [r7, #20]
 80023aa:	fb03 f202 	mul.w	r2, r3, r2
 80023ae:	7dfb      	ldrb	r3, [r7, #23]
 80023b0:	4413      	add	r3, r2
 80023b2:	461a      	mov	r2, r3
 80023b4:	f240 2321 	movw	r3, #545	@ 0x221
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d872      	bhi.n	80024a2 <OLED_DisplayCharInverted+0x152>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 80023bc:	7cbb      	ldrb	r3, [r7, #18]
 80023be:	7d3a      	ldrb	r2, [r7, #20]
 80023c0:	fb03 f202 	mul.w	r2, r3, r2
 80023c4:	7dfb      	ldrb	r3, [r7, #23]
 80023c6:	4413      	add	r3, r2
 80023c8:	4a38      	ldr	r2, [pc, #224]	@ (80024ac <OLED_DisplayCharInverted+0x15c>)
 80023ca:	5cd3      	ldrb	r3, [r2, r3]
 80023cc:	75bb      	strb	r3, [r7, #22]

        if (inverted)
 80023ce:	78bb      	ldrb	r3, [r7, #2]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <OLED_DisplayCharInverted+0x8a>
        {
            font_data_col = ~font_data_col;
 80023d4:	7dbb      	ldrb	r3, [r7, #22]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	75bb      	strb	r3, [r7, #22]
        }

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 80023da:	2300      	movs	r3, #0
 80023dc:	757b      	strb	r3, [r7, #21]
 80023de:	e04f      	b.n	8002480 <OLED_DisplayCharInverted+0x130>
        {
            int16_t screen_y = y + char_row_bit;
 80023e0:	7d7b      	ldrb	r3, [r7, #21]
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	88bb      	ldrh	r3, [r7, #4]
 80023e6:	4413      	add	r3, r2
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	81fb      	strh	r3, [r7, #14]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 80023ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	db41      	blt.n	8002478 <OLED_DisplayCharInverted+0x128>
 80023f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80023fa:	dc3d      	bgt.n	8002478 <OLED_DisplayCharInverted+0x128>
                continue;

            uint8_t page = (uint8_t)screen_y / 8;
 80023fc:	89fb      	ldrh	r3, [r7, #14]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	08db      	lsrs	r3, r3, #3
 8002402:	737b      	strb	r3, [r7, #13]
            uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 8002404:	89fb      	ldrh	r3, [r7, #14]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	733b      	strb	r3, [r7, #12]
            uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 800240e:	7b7b      	ldrb	r3, [r7, #13]
 8002410:	b29b      	uxth	r3, r3
 8002412:	01db      	lsls	r3, r3, #7
 8002414:	b29a      	uxth	r2, r3
 8002416:	8a3b      	ldrh	r3, [r7, #16]
 8002418:	4413      	add	r3, r2
 800241a:	817b      	strh	r3, [r7, #10]

            if (buffer_index < sizeof(OLED_BackBuffer))
 800241c:	897b      	ldrh	r3, [r7, #10]
 800241e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002422:	d22a      	bcs.n	800247a <OLED_DisplayCharInverted+0x12a>
            {
                if ((font_data_col >> char_row_bit) & 0x01)
 8002424:	7dba      	ldrb	r2, [r7, #22]
 8002426:	7d7b      	ldrb	r3, [r7, #21]
 8002428:	fa42 f303 	asr.w	r3, r2, r3
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00f      	beq.n	8002454 <OLED_DisplayCharInverted+0x104>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 8002434:	897b      	ldrh	r3, [r7, #10]
 8002436:	4a1e      	ldr	r2, [pc, #120]	@ (80024b0 <OLED_DisplayCharInverted+0x160>)
 8002438:	5cd3      	ldrb	r3, [r2, r3]
 800243a:	b25a      	sxtb	r2, r3
 800243c:	7b3b      	ldrb	r3, [r7, #12]
 800243e:	2101      	movs	r1, #1
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	b25b      	sxtb	r3, r3
 8002446:	4313      	orrs	r3, r2
 8002448:	b25a      	sxtb	r2, r3
 800244a:	897b      	ldrh	r3, [r7, #10]
 800244c:	b2d1      	uxtb	r1, r2
 800244e:	4a18      	ldr	r2, [pc, #96]	@ (80024b0 <OLED_DisplayCharInverted+0x160>)
 8002450:	54d1      	strb	r1, [r2, r3]
 8002452:	e012      	b.n	800247a <OLED_DisplayCharInverted+0x12a>
                }
                else
                {
                    OLED_BackBuffer[buffer_index] &= ~(1 << bit_offset_in_page);
 8002454:	897b      	ldrh	r3, [r7, #10]
 8002456:	4a16      	ldr	r2, [pc, #88]	@ (80024b0 <OLED_DisplayCharInverted+0x160>)
 8002458:	5cd3      	ldrb	r3, [r2, r3]
 800245a:	b25a      	sxtb	r2, r3
 800245c:	7b3b      	ldrb	r3, [r7, #12]
 800245e:	2101      	movs	r1, #1
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	b25b      	sxtb	r3, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	b25b      	sxtb	r3, r3
 800246a:	4013      	ands	r3, r2
 800246c:	b25a      	sxtb	r2, r3
 800246e:	897b      	ldrh	r3, [r7, #10]
 8002470:	b2d1      	uxtb	r1, r2
 8002472:	4a0f      	ldr	r2, [pc, #60]	@ (80024b0 <OLED_DisplayCharInverted+0x160>)
 8002474:	54d1      	strb	r1, [r2, r3]
 8002476:	e000      	b.n	800247a <OLED_DisplayCharInverted+0x12a>
                continue;
 8002478:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 800247a:	7d7b      	ldrb	r3, [r7, #21]
 800247c:	3301      	adds	r3, #1
 800247e:	757b      	strb	r3, [r7, #21]
 8002480:	7d7a      	ldrb	r2, [r7, #21]
 8002482:	7cfb      	ldrb	r3, [r7, #19]
 8002484:	429a      	cmp	r2, r3
 8002486:	d3ab      	bcc.n	80023e0 <OLED_DisplayCharInverted+0x90>
 8002488:	e000      	b.n	800248c <OLED_DisplayCharInverted+0x13c>
            continue;
 800248a:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 800248c:	7dfb      	ldrb	r3, [r7, #23]
 800248e:	3301      	adds	r3, #1
 8002490:	75fb      	strb	r3, [r7, #23]
 8002492:	7dfa      	ldrb	r2, [r7, #23]
 8002494:	7d3b      	ldrb	r3, [r7, #20]
 8002496:	429a      	cmp	r2, r3
 8002498:	f4ff af77 	bcc.w	800238a <OLED_DisplayCharInverted+0x3a>
 800249c:	e002      	b.n	80024a4 <OLED_DisplayCharInverted+0x154>
        return;
 800249e:	bf00      	nop
 80024a0:	e000      	b.n	80024a4 <OLED_DisplayCharInverted+0x154>
            break;
 80024a2:	bf00      	nop
                }
            }
        }
    }
}
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc90      	pop	{r4, r7}
 80024aa:	4770      	bx	lr
 80024ac:	0800acd4 	.word	0x0800acd4
 80024b0:	2000036c 	.word	0x2000036c

080024b4 <OLED_DisplayString>:

void OLED_DisplayString(int16_t x, int16_t y, char *str) //! UPDATEDISPLAY REQUIRED
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	603a      	str	r2, [r7, #0]
 80024be:	80fb      	strh	r3, [r7, #6]
 80024c0:	460b      	mov	r3, r1
 80024c2:	80bb      	strh	r3, [r7, #4]
    uint8_t j = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]
    const uint8_t font_width = 6;
 80024c8:	2306      	movs	r3, #6
 80024ca:	73bb      	strb	r3, [r7, #14]
    const uint8_t font_height = 8;
 80024cc:	2308      	movs	r3, #8
 80024ce:	737b      	strb	r3, [r7, #13]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 80024d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80024d6:	dc34      	bgt.n	8002542 <OLED_DisplayString+0x8e>
 80024d8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80024dc:	7b7b      	ldrb	r3, [r7, #13]
 80024de:	4413      	add	r3, r2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	dd2e      	ble.n	8002542 <OLED_DisplayString+0x8e>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 80024e4:	e026      	b.n	8002534 <OLED_DisplayString+0x80>
    {
        current_char_x = x + (j * font_width);
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	7bba      	ldrb	r2, [r7, #14]
 80024ec:	b292      	uxth	r2, r2
 80024ee:	fb02 f303 	mul.w	r3, r2, r3
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	4413      	add	r3, r2
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	817b      	strh	r3, [r7, #10]
        if (current_char_x >= OLED_WIDTH)
 80024fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002500:	2b7f      	cmp	r3, #127	@ 0x7f
 8002502:	dc20      	bgt.n	8002546 <OLED_DisplayString+0x92>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 8002504:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002508:	7bbb      	ldrb	r3, [r7, #14]
 800250a:	4413      	add	r3, r2
 800250c:	2b00      	cmp	r3, #0
 800250e:	dc03      	bgt.n	8002518 <OLED_DisplayString+0x64>
        {
            j++;
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	3301      	adds	r3, #1
 8002514:	73fb      	strb	r3, [r7, #15]
            continue;
 8002516:	e00d      	b.n	8002534 <OLED_DisplayString+0x80>
        }
        OLED_DisplayChar(current_char_x, y, str[j]);
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	4413      	add	r3, r2
 800251e:	781a      	ldrb	r2, [r3, #0]
 8002520:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002524:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fe49 	bl	80021c0 <OLED_DisplayChar>
        j++;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	3301      	adds	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
    while (str[j] != '\0')
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	4413      	add	r3, r2
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1d2      	bne.n	80024e6 <OLED_DisplayString+0x32>
 8002540:	e002      	b.n	8002548 <OLED_DisplayString+0x94>
        return;
 8002542:	bf00      	nop
 8002544:	e000      	b.n	8002548 <OLED_DisplayString+0x94>
            break;
 8002546:	bf00      	nop
    }
}
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <OLED_DisplayStringInverted>:

void OLED_DisplayStringInverted(int16_t x, int16_t y, char *str, uint8_t inverted) //! UPDATEDISPLAY REQUIRED
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	60ba      	str	r2, [r7, #8]
 8002556:	461a      	mov	r2, r3
 8002558:	4603      	mov	r3, r0
 800255a:	81fb      	strh	r3, [r7, #14]
 800255c:	460b      	mov	r3, r1
 800255e:	81bb      	strh	r3, [r7, #12]
 8002560:	4613      	mov	r3, r2
 8002562:	71fb      	strb	r3, [r7, #7]
    uint8_t j = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	75fb      	strb	r3, [r7, #23]
    const uint8_t font_width = 6;
 8002568:	2306      	movs	r3, #6
 800256a:	75bb      	strb	r3, [r7, #22]
    const uint8_t font_height = 8;
 800256c:	2308      	movs	r3, #8
 800256e:	757b      	strb	r3, [r7, #21]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 8002570:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002574:	2b3f      	cmp	r3, #63	@ 0x3f
 8002576:	dc34      	bgt.n	80025e2 <OLED_DisplayStringInverted+0x94>
 8002578:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800257c:	7d7b      	ldrb	r3, [r7, #21]
 800257e:	4413      	add	r3, r2
 8002580:	2b00      	cmp	r3, #0
 8002582:	dd2e      	ble.n	80025e2 <OLED_DisplayStringInverted+0x94>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 8002584:	e026      	b.n	80025d4 <OLED_DisplayStringInverted+0x86>
    {
        current_char_x = x + (j * font_width);
 8002586:	7dfb      	ldrb	r3, [r7, #23]
 8002588:	b29b      	uxth	r3, r3
 800258a:	7dba      	ldrb	r2, [r7, #22]
 800258c:	b292      	uxth	r2, r2
 800258e:	fb02 f303 	mul.w	r3, r2, r3
 8002592:	b29a      	uxth	r2, r3
 8002594:	89fb      	ldrh	r3, [r7, #14]
 8002596:	4413      	add	r3, r2
 8002598:	b29b      	uxth	r3, r3
 800259a:	827b      	strh	r3, [r7, #18]
        if (current_char_x >= OLED_WIDTH)
 800259c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80025a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80025a2:	dc20      	bgt.n	80025e6 <OLED_DisplayStringInverted+0x98>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 80025a4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80025a8:	7dbb      	ldrb	r3, [r7, #22]
 80025aa:	4413      	add	r3, r2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	dc03      	bgt.n	80025b8 <OLED_DisplayStringInverted+0x6a>
        {
            j++;
 80025b0:	7dfb      	ldrb	r3, [r7, #23]
 80025b2:	3301      	adds	r3, #1
 80025b4:	75fb      	strb	r3, [r7, #23]
            continue;
 80025b6:	e00d      	b.n	80025d4 <OLED_DisplayStringInverted+0x86>
        }
        OLED_DisplayCharInverted(current_char_x, y, str[j], inverted);
 80025b8:	7dfb      	ldrb	r3, [r7, #23]
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	4413      	add	r3, r2
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80025c6:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 80025ca:	f7ff fec1 	bl	8002350 <OLED_DisplayCharInverted>
        j++;
 80025ce:	7dfb      	ldrb	r3, [r7, #23]
 80025d0:	3301      	adds	r3, #1
 80025d2:	75fb      	strb	r3, [r7, #23]
    while (str[j] != '\0')
 80025d4:	7dfb      	ldrb	r3, [r7, #23]
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	4413      	add	r3, r2
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1d2      	bne.n	8002586 <OLED_DisplayStringInverted+0x38>
 80025e0:	e002      	b.n	80025e8 <OLED_DisplayStringInverted+0x9a>
        return;
 80025e2:	bf00      	nop
 80025e4:	e000      	b.n	80025e8 <OLED_DisplayStringInverted+0x9a>
            break;
 80025e6:	bf00      	nop
    }
}
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <System_UI_Loop>:
#define OLED_TITLE_End_Y 0
#define StartTweenTime 2500
#define TweenStyle EASE_INOUT_ELASTIC

void System_UI_Loop()
{
 80025f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025f2:	b089      	sub	sp, #36	@ 0x24
 80025f4:	af04      	add	r7, sp, #16
    static bool isFirstRun = true;

    float x, y, x1, y1;
    if (!isFirstRun)
 80025f6:	4ba5      	ldr	r3, [pc, #660]	@ (800288c <System_UI_Loop+0x29c>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	f083 0301 	eor.w	r3, r3, #1
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <System_UI_Loop+0x18>
        SystemGetsSignal();
 8002604:	f001 f88a 	bl	800371c <SystemGetsSignal>

    if (isFirstRun) //第一次启动调用，初始化部分
 8002608:	4ba0      	ldr	r3, [pc, #640]	@ (800288c <System_UI_Loop+0x29c>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 81a1 	beq.w	8002954 <System_UI_Loop+0x364>
    {
#pragma region 标题栏
        OLED_MoveObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_End_Y, StartTweenTime, TweenStyle);
 8002612:	230f      	movs	r3, #15
 8002614:	9303      	str	r3, [sp, #12]
 8002616:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800261a:	9302      	str	r3, [sp, #8]
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	4b9b      	ldr	r3, [pc, #620]	@ (8002890 <System_UI_Loop+0x2a0>)
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	4b9b      	ldr	r3, [pc, #620]	@ (8002894 <System_UI_Loop+0x2a4>)
 8002628:	4a99      	ldr	r2, [pc, #612]	@ (8002890 <System_UI_Loop+0x2a0>)
 800262a:	499b      	ldr	r1, [pc, #620]	@ (8002898 <System_UI_Loop+0x2a8>)
 800262c:	489b      	ldr	r0, [pc, #620]	@ (800289c <System_UI_Loop+0x2ac>)
 800262e:	f002 fc66 	bl	8004efe <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002632:	230f      	movs	r3, #15
 8002634:	9303      	str	r3, [sp, #12]
 8002636:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800263a:	9302      	str	r3, [sp, #8]
 800263c:	4b95      	ldr	r3, [pc, #596]	@ (8002894 <System_UI_Loop+0x2a4>)
 800263e:	9301      	str	r3, [sp, #4]
 8002640:	4b93      	ldr	r3, [pc, #588]	@ (8002890 <System_UI_Loop+0x2a0>)
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	4b93      	ldr	r3, [pc, #588]	@ (8002894 <System_UI_Loop+0x2a4>)
 8002646:	4a92      	ldr	r2, [pc, #584]	@ (8002890 <System_UI_Loop+0x2a0>)
 8002648:	4995      	ldr	r1, [pc, #596]	@ (80028a0 <System_UI_Loop+0x2b0>)
 800264a:	4894      	ldr	r0, [pc, #592]	@ (800289c <System_UI_Loop+0x2ac>)
 800264c:	f002 fc57 	bl	8004efe <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002650:	230f      	movs	r3, #15
 8002652:	9303      	str	r3, [sp, #12]
 8002654:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002658:	9302      	str	r3, [sp, #8]
 800265a:	4b8e      	ldr	r3, [pc, #568]	@ (8002894 <System_UI_Loop+0x2a4>)
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	4b91      	ldr	r3, [pc, #580]	@ (80028a4 <System_UI_Loop+0x2b4>)
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	4b8c      	ldr	r3, [pc, #560]	@ (8002894 <System_UI_Loop+0x2a4>)
 8002664:	4a8f      	ldr	r2, [pc, #572]	@ (80028a4 <System_UI_Loop+0x2b4>)
 8002666:	4990      	ldr	r1, [pc, #576]	@ (80028a8 <System_UI_Loop+0x2b8>)
 8002668:	488c      	ldr	r0, [pc, #560]	@ (800289c <System_UI_Loop+0x2ac>)
 800266a:	f002 fc48 	bl	8004efe <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 800266e:	230f      	movs	r3, #15
 8002670:	9303      	str	r3, [sp, #12]
 8002672:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002676:	9302      	str	r3, [sp, #8]
 8002678:	4b86      	ldr	r3, [pc, #536]	@ (8002894 <System_UI_Loop+0x2a4>)
 800267a:	9301      	str	r3, [sp, #4]
 800267c:	4b8b      	ldr	r3, [pc, #556]	@ (80028ac <System_UI_Loop+0x2bc>)
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	4b84      	ldr	r3, [pc, #528]	@ (8002894 <System_UI_Loop+0x2a4>)
 8002682:	4a8a      	ldr	r2, [pc, #552]	@ (80028ac <System_UI_Loop+0x2bc>)
 8002684:	498a      	ldr	r1, [pc, #552]	@ (80028b0 <System_UI_Loop+0x2c0>)
 8002686:	4885      	ldr	r0, [pc, #532]	@ (800289c <System_UI_Loop+0x2ac>)
 8002688:	f002 fc39 	bl	8004efe <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Developer") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 800268c:	230f      	movs	r3, #15
 800268e:	9303      	str	r3, [sp, #12]
 8002690:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002694:	9302      	str	r3, [sp, #8]
 8002696:	4b7f      	ldr	r3, [pc, #508]	@ (8002894 <System_UI_Loop+0x2a4>)
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	4b86      	ldr	r3, [pc, #536]	@ (80028b4 <System_UI_Loop+0x2c4>)
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	4b7d      	ldr	r3, [pc, #500]	@ (8002894 <System_UI_Loop+0x2a4>)
 80026a0:	4a84      	ldr	r2, [pc, #528]	@ (80028b4 <System_UI_Loop+0x2c4>)
 80026a2:	4985      	ldr	r1, [pc, #532]	@ (80028b8 <System_UI_Loop+0x2c8>)
 80026a4:	487d      	ldr	r0, [pc, #500]	@ (800289c <System_UI_Loop+0x2ac>)
 80026a6:	f002 fc2a 	bl	8004efe <OLED_MoveObject>

        OLED_MoveObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 80026aa:	230f      	movs	r3, #15
 80026ac:	9303      	str	r3, [sp, #12]
 80026ae:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80026b2:	9302      	str	r3, [sp, #8]
 80026b4:	4b77      	ldr	r3, [pc, #476]	@ (8002894 <System_UI_Loop+0x2a4>)
 80026b6:	9301      	str	r3, [sp, #4]
 80026b8:	4b7c      	ldr	r3, [pc, #496]	@ (80028ac <System_UI_Loop+0x2bc>)
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	4b75      	ldr	r3, [pc, #468]	@ (8002894 <System_UI_Loop+0x2a4>)
 80026be:	4a7b      	ldr	r2, [pc, #492]	@ (80028ac <System_UI_Loop+0x2bc>)
 80026c0:	497e      	ldr	r1, [pc, #504]	@ (80028bc <System_UI_Loop+0x2cc>)
 80026c2:	4876      	ldr	r0, [pc, #472]	@ (800289c <System_UI_Loop+0x2ac>)
 80026c4:	f002 fc1b 	bl	8004efe <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 80026c8:	230f      	movs	r3, #15
 80026ca:	9303      	str	r3, [sp, #12]
 80026cc:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80026d0:	9302      	str	r3, [sp, #8]
 80026d2:	4b70      	ldr	r3, [pc, #448]	@ (8002894 <System_UI_Loop+0x2a4>)
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	4b6e      	ldr	r3, [pc, #440]	@ (8002890 <System_UI_Loop+0x2a0>)
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	4b6e      	ldr	r3, [pc, #440]	@ (8002894 <System_UI_Loop+0x2a4>)
 80026dc:	4a6c      	ldr	r2, [pc, #432]	@ (8002890 <System_UI_Loop+0x2a0>)
 80026de:	4978      	ldr	r1, [pc, #480]	@ (80028c0 <System_UI_Loop+0x2d0>)
 80026e0:	486e      	ldr	r0, [pc, #440]	@ (800289c <System_UI_Loop+0x2ac>)
 80026e2:	f002 fc0c 	bl	8004efe <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 80026e6:	230f      	movs	r3, #15
 80026e8:	9303      	str	r3, [sp, #12]
 80026ea:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80026ee:	9302      	str	r3, [sp, #8]
 80026f0:	4b68      	ldr	r3, [pc, #416]	@ (8002894 <System_UI_Loop+0x2a4>)
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	4b6d      	ldr	r3, [pc, #436]	@ (80028ac <System_UI_Loop+0x2bc>)
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	4b66      	ldr	r3, [pc, #408]	@ (8002894 <System_UI_Loop+0x2a4>)
 80026fa:	4a6c      	ldr	r2, [pc, #432]	@ (80028ac <System_UI_Loop+0x2bc>)
 80026fc:	4971      	ldr	r1, [pc, #452]	@ (80028c4 <System_UI_Loop+0x2d4>)
 80026fe:	4867      	ldr	r0, [pc, #412]	@ (800289c <System_UI_Loop+0x2ac>)
 8002700:	f002 fbfd 	bl	8004efe <OLED_MoveObject>
#pragma endregion 标题栏

#pragma region 游戏栏
        OLED_MoveObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 8002704:	230f      	movs	r3, #15
 8002706:	9303      	str	r3, [sp, #12]
 8002708:	2301      	movs	r3, #1
 800270a:	9302      	str	r3, [sp, #8]
 800270c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	4b6d      	ldr	r3, [pc, #436]	@ (80028c8 <System_UI_Loop+0x2d8>)
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800271a:	4a6b      	ldr	r2, [pc, #428]	@ (80028c8 <System_UI_Loop+0x2d8>)
 800271c:	496b      	ldr	r1, [pc, #428]	@ (80028cc <System_UI_Loop+0x2dc>)
 800271e:	486c      	ldr	r0, [pc, #432]	@ (80028d0 <System_UI_Loop+0x2e0>)
 8002720:	f002 fbed 	bl	8004efe <OLED_MoveObject>
        OLED_MoveObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 8002724:	230f      	movs	r3, #15
 8002726:	9303      	str	r3, [sp, #12]
 8002728:	2301      	movs	r3, #1
 800272a:	9302      	str	r3, [sp, #8]
 800272c:	4b69      	ldr	r3, [pc, #420]	@ (80028d4 <System_UI_Loop+0x2e4>)
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	4b65      	ldr	r3, [pc, #404]	@ (80028c8 <System_UI_Loop+0x2d8>)
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	4b67      	ldr	r3, [pc, #412]	@ (80028d4 <System_UI_Loop+0x2e4>)
 8002736:	4a64      	ldr	r2, [pc, #400]	@ (80028c8 <System_UI_Loop+0x2d8>)
 8002738:	4967      	ldr	r1, [pc, #412]	@ (80028d8 <System_UI_Loop+0x2e8>)
 800273a:	4865      	ldr	r0, [pc, #404]	@ (80028d0 <System_UI_Loop+0x2e0>)
 800273c:	f002 fbdf 	bl	8004efe <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, TweenStyle);
 8002740:	230f      	movs	r3, #15
 8002742:	9303      	str	r3, [sp, #12]
 8002744:	2301      	movs	r3, #1
 8002746:	9302      	str	r3, [sp, #8]
 8002748:	4b64      	ldr	r3, [pc, #400]	@ (80028dc <System_UI_Loop+0x2ec>)
 800274a:	9301      	str	r3, [sp, #4]
 800274c:	4b5e      	ldr	r3, [pc, #376]	@ (80028c8 <System_UI_Loop+0x2d8>)
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	4b62      	ldr	r3, [pc, #392]	@ (80028dc <System_UI_Loop+0x2ec>)
 8002752:	4a5d      	ldr	r2, [pc, #372]	@ (80028c8 <System_UI_Loop+0x2d8>)
 8002754:	4962      	ldr	r1, [pc, #392]	@ (80028e0 <System_UI_Loop+0x2f0>)
 8002756:	4863      	ldr	r0, [pc, #396]	@ (80028e4 <System_UI_Loop+0x2f4>)
 8002758:	f002 fbd1 	bl	8004efe <OLED_MoveObject>
#pragma region 关于栏

#pragma endregion 关于栏

#pragma region 主菜单动画
        OLED_MoveObject(&g_AnimationManager, "TitleBGScale", 0, 8, strlen("Epicful Games") * 6 + 3, 8, StartTweenTime, EASE_INOUT_CUBIC);
 800275c:	2306      	movs	r3, #6
 800275e:	9303      	str	r3, [sp, #12]
 8002760:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002764:	9302      	str	r3, [sp, #8]
 8002766:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	4b5e      	ldr	r3, [pc, #376]	@ (80028e8 <System_UI_Loop+0x2f8>)
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	495c      	ldr	r1, [pc, #368]	@ (80028ec <System_UI_Loop+0x2fc>)
 800277a:	485a      	ldr	r0, [pc, #360]	@ (80028e4 <System_UI_Loop+0x2f4>)
 800277c:	f002 fbbf 	bl	8004efe <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "Cursor", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * menuSelection, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * menuSelection, StartTweenTime, TweenStyle);
 8002780:	4b5b      	ldr	r3, [pc, #364]	@ (80028f0 <System_UI_Loop+0x300>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	4613      	mov	r3, r2
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	4413      	add	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	3303      	adds	r3, #3
 8002792:	4618      	mov	r0, r3
 8002794:	f7fd fda6 	bl	80002e4 <__aeabi_i2f>
 8002798:	4604      	mov	r4, r0
 800279a:	4b55      	ldr	r3, [pc, #340]	@ (80028f0 <System_UI_Loop+0x300>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	4613      	mov	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	3303      	adds	r3, #3
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fd fd99 	bl	80002e4 <__aeabi_i2f>
 80027b2:	4603      	mov	r3, r0
 80027b4:	220f      	movs	r2, #15
 80027b6:	9203      	str	r2, [sp, #12]
 80027b8:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80027bc:	9202      	str	r2, [sp, #8]
 80027be:	9301      	str	r3, [sp, #4]
 80027c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	4623      	mov	r3, r4
 80027c8:	4a3f      	ldr	r2, [pc, #252]	@ (80028c8 <System_UI_Loop+0x2d8>)
 80027ca:	494a      	ldr	r1, [pc, #296]	@ (80028f4 <System_UI_Loop+0x304>)
 80027cc:	4845      	ldr	r0, [pc, #276]	@ (80028e4 <System_UI_Loop+0x2f4>)
 80027ce:	f002 fb96 	bl	8004efe <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "CursorScale", 0, 10, strlen("Games") * 6 + 3, 10, StartTweenTime, TweenStyle);
 80027d2:	230f      	movs	r3, #15
 80027d4:	9303      	str	r3, [sp, #12]
 80027d6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80027da:	9302      	str	r3, [sp, #8]
 80027dc:	4b46      	ldr	r3, [pc, #280]	@ (80028f8 <System_UI_Loop+0x308>)
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	4b46      	ldr	r3, [pc, #280]	@ (80028fc <System_UI_Loop+0x30c>)
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	4b44      	ldr	r3, [pc, #272]	@ (80028f8 <System_UI_Loop+0x308>)
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	4945      	ldr	r1, [pc, #276]	@ (8002900 <System_UI_Loop+0x310>)
 80027ec:	483d      	ldr	r0, [pc, #244]	@ (80028e4 <System_UI_Loop+0x2f4>)
 80027ee:	f002 fb86 	bl	8004efe <OLED_MoveObject>
        OLED_MoveObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, StartTweenTime, TweenStyle);
 80027f2:	230f      	movs	r3, #15
 80027f4:	9303      	str	r3, [sp, #12]
 80027f6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80027fa:	9302      	str	r3, [sp, #8]
 80027fc:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800280c:	4a2e      	ldr	r2, [pc, #184]	@ (80028c8 <System_UI_Loop+0x2d8>)
 800280e:	493d      	ldr	r1, [pc, #244]	@ (8002904 <System_UI_Loop+0x314>)
 8002810:	483d      	ldr	r0, [pc, #244]	@ (8002908 <System_UI_Loop+0x318>)
 8002812:	f002 fb74 	bl	8004efe <OLED_MoveObject>
        HAL_Delay(100);
 8002816:	2064      	movs	r0, #100	@ 0x64
 8002818:	f003 f87a 	bl	8005910 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, StartTweenTime, TweenStyle);
 800281c:	230f      	movs	r3, #15
 800281e:	9303      	str	r3, [sp, #12]
 8002820:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002824:	9302      	str	r3, [sp, #8]
 8002826:	4b2b      	ldr	r3, [pc, #172]	@ (80028d4 <System_UI_Loop+0x2e4>)
 8002828:	9301      	str	r3, [sp, #4]
 800282a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	4b28      	ldr	r3, [pc, #160]	@ (80028d4 <System_UI_Loop+0x2e4>)
 8002832:	4a25      	ldr	r2, [pc, #148]	@ (80028c8 <System_UI_Loop+0x2d8>)
 8002834:	4935      	ldr	r1, [pc, #212]	@ (800290c <System_UI_Loop+0x31c>)
 8002836:	4834      	ldr	r0, [pc, #208]	@ (8002908 <System_UI_Loop+0x318>)
 8002838:	f002 fb61 	bl	8004efe <OLED_MoveObject>
        HAL_Delay(100);
 800283c:	2064      	movs	r0, #100	@ 0x64
 800283e:	f003 f867 	bl	8005910 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, StartTweenTime, TweenStyle);
 8002842:	230f      	movs	r3, #15
 8002844:	9303      	str	r3, [sp, #12]
 8002846:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800284a:	9302      	str	r3, [sp, #8]
 800284c:	4b23      	ldr	r3, [pc, #140]	@ (80028dc <System_UI_Loop+0x2ec>)
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	4b21      	ldr	r3, [pc, #132]	@ (80028dc <System_UI_Loop+0x2ec>)
 8002858:	4a1b      	ldr	r2, [pc, #108]	@ (80028c8 <System_UI_Loop+0x2d8>)
 800285a:	492d      	ldr	r1, [pc, #180]	@ (8002910 <System_UI_Loop+0x320>)
 800285c:	482a      	ldr	r0, [pc, #168]	@ (8002908 <System_UI_Loop+0x318>)
 800285e:	f002 fb4e 	bl	8004efe <OLED_MoveObject>
        HAL_Delay(100);
 8002862:	2064      	movs	r0, #100	@ 0x64
 8002864:	f003 f854 	bl	8005910 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, StartTweenTime, TweenStyle);
 8002868:	230f      	movs	r3, #15
 800286a:	9303      	str	r3, [sp, #12]
 800286c:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	4b28      	ldr	r3, [pc, #160]	@ (8002914 <System_UI_Loop+0x324>)
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	4b25      	ldr	r3, [pc, #148]	@ (8002914 <System_UI_Loop+0x324>)
 800287e:	4a12      	ldr	r2, [pc, #72]	@ (80028c8 <System_UI_Loop+0x2d8>)
 8002880:	4925      	ldr	r1, [pc, #148]	@ (8002918 <System_UI_Loop+0x328>)
 8002882:	4821      	ldr	r0, [pc, #132]	@ (8002908 <System_UI_Loop+0x318>)
 8002884:	f002 fb3b 	bl	8004efe <OLED_MoveObject>
 8002888:	e048      	b.n	800291c <System_UI_Loop+0x32c>
 800288a:	bf00      	nop
 800288c:	20000003 	.word	0x20000003
 8002890:	42480000 	.word	0x42480000
 8002894:	c1200000 	.word	0xc1200000
 8002898:	0800ab24 	.word	0x0800ab24
 800289c:	20003338 	.word	0x20003338
 80028a0:	0800ab30 	.word	0x0800ab30
 80028a4:	42300000 	.word	0x42300000
 80028a8:	0800ab3c 	.word	0x0800ab3c
 80028ac:	42600000 	.word	0x42600000
 80028b0:	0800ab48 	.word	0x0800ab48
 80028b4:	42940000 	.word	0x42940000
 80028b8:	0800ab58 	.word	0x0800ab58
 80028bc:	0800ab64 	.word	0x0800ab64
 80028c0:	0800ab70 	.word	0x0800ab70
 80028c4:	0800ab7c 	.word	0x0800ab7c
 80028c8:	c2b40000 	.word	0xc2b40000
 80028cc:	0800ab88 	.word	0x0800ab88
 80028d0:	20001574 	.word	0x20001574
 80028d4:	41e80000 	.word	0x41e80000
 80028d8:	0800ab90 	.word	0x0800ab90
 80028dc:	42280000 	.word	0x42280000
 80028e0:	0800ab98 	.word	0x0800ab98
 80028e4:	2000392c 	.word	0x2000392c
 80028e8:	42a20000 	.word	0x42a20000
 80028ec:	0800aba4 	.word	0x0800aba4
 80028f0:	20000002 	.word	0x20000002
 80028f4:	0800abb4 	.word	0x0800abb4
 80028f8:	41200000 	.word	0x41200000
 80028fc:	42040000 	.word	0x42040000
 8002900:	0800abbc 	.word	0x0800abbc
 8002904:	0800abc8 	.word	0x0800abc8
 8002908:	20000f80 	.word	0x20000f80
 800290c:	0800abd4 	.word	0x0800abd4
 8002910:	0800abe0 	.word	0x0800abe0
 8002914:	425c0000 	.word	0x425c0000
 8002918:	0800abf0 	.word	0x0800abf0
        HAL_Delay(100);
 800291c:	2064      	movs	r0, #100	@ 0x64
 800291e:	f002 fff7 	bl	8005910 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, StartTweenTime, TweenStyle);
 8002922:	230f      	movs	r3, #15
 8002924:	9303      	str	r3, [sp, #12]
 8002926:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800292a:	9302      	str	r3, [sp, #8]
 800292c:	4b71      	ldr	r3, [pc, #452]	@ (8002af4 <System_UI_Loop+0x504>)
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	4b6f      	ldr	r3, [pc, #444]	@ (8002af4 <System_UI_Loop+0x504>)
 8002938:	4a6f      	ldr	r2, [pc, #444]	@ (8002af8 <System_UI_Loop+0x508>)
 800293a:	4970      	ldr	r1, [pc, #448]	@ (8002afc <System_UI_Loop+0x50c>)
 800293c:	4870      	ldr	r0, [pc, #448]	@ (8002b00 <System_UI_Loop+0x510>)
 800293e:	f002 fade 	bl	8004efe <OLED_MoveObject>
#pragma endregion 主菜单动画

        preMenuSelection = menuSelection;
 8002942:	4b70      	ldr	r3, [pc, #448]	@ (8002b04 <System_UI_Loop+0x514>)
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	4b70      	ldr	r3, [pc, #448]	@ (8002b08 <System_UI_Loop+0x518>)
 8002948:	701a      	strb	r2, [r3, #0]
        isFirstRun = false;
 800294a:	4b70      	ldr	r3, [pc, #448]	@ (8002b0c <System_UI_Loop+0x51c>)
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
        OLED_UpdateDisplayVSync();
 8002950:	f7ff f9c0 	bl	8001cd4 <OLED_UpdateDisplayVSync>
    }

#pragma region pager //翻页的函数

    if (menuRank == 1)
 8002954:	4b6e      	ldr	r3, [pc, #440]	@ (8002b10 <System_UI_Loop+0x520>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d178      	bne.n	8002a4e <System_UI_Loop+0x45e>
    {
        OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 200, EASE_IN_CIRC);
 800295c:	4b69      	ldr	r3, [pc, #420]	@ (8002b04 <System_UI_Loop+0x514>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	f1c3 0202 	rsb	r2, r3, #2
 8002964:	4613      	mov	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	3303      	adds	r3, #3
 8002970:	4618      	mov	r0, r3
 8002972:	f7fd fcb7 	bl	80002e4 <__aeabi_i2f>
 8002976:	4603      	mov	r3, r0
 8002978:	220a      	movs	r2, #10
 800297a:	9201      	str	r2, [sp, #4]
 800297c:	22c8      	movs	r2, #200	@ 0xc8
 800297e:	9200      	str	r2, [sp, #0]
 8002980:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002984:	4963      	ldr	r1, [pc, #396]	@ (8002b14 <System_UI_Loop+0x524>)
 8002986:	485e      	ldr	r0, [pc, #376]	@ (8002b00 <System_UI_Loop+0x510>)
 8002988:	f002 fb70 	bl	800506c <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 200, EASE_IN_CIRC);
 800298c:	4b5d      	ldr	r3, [pc, #372]	@ (8002b04 <System_UI_Loop+0x514>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	f1c3 0203 	rsb	r2, r3, #3
 8002994:	4613      	mov	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	3303      	adds	r3, #3
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fd fc9f 	bl	80002e4 <__aeabi_i2f>
 80029a6:	4603      	mov	r3, r0
 80029a8:	220a      	movs	r2, #10
 80029aa:	9201      	str	r2, [sp, #4]
 80029ac:	22c8      	movs	r2, #200	@ 0xc8
 80029ae:	9200      	str	r2, [sp, #0]
 80029b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80029b4:	4958      	ldr	r1, [pc, #352]	@ (8002b18 <System_UI_Loop+0x528>)
 80029b6:	4852      	ldr	r0, [pc, #328]	@ (8002b00 <System_UI_Loop+0x510>)
 80029b8:	f002 fb58 	bl	800506c <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 200, EASE_IN_CIRC);
 80029bc:	4b51      	ldr	r3, [pc, #324]	@ (8002b04 <System_UI_Loop+0x514>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	f1c3 0204 	rsb	r2, r3, #4
 80029c4:	4613      	mov	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	3303      	adds	r3, #3
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fd fc87 	bl	80002e4 <__aeabi_i2f>
 80029d6:	4603      	mov	r3, r0
 80029d8:	220a      	movs	r2, #10
 80029da:	9201      	str	r2, [sp, #4]
 80029dc:	22c8      	movs	r2, #200	@ 0xc8
 80029de:	9200      	str	r2, [sp, #0]
 80029e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80029e4:	494d      	ldr	r1, [pc, #308]	@ (8002b1c <System_UI_Loop+0x52c>)
 80029e6:	4846      	ldr	r0, [pc, #280]	@ (8002b00 <System_UI_Loop+0x510>)
 80029e8:	f002 fb40 	bl	800506c <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), 200, EASE_IN_CIRC);
 80029ec:	4b45      	ldr	r3, [pc, #276]	@ (8002b04 <System_UI_Loop+0x514>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	f1c3 0205 	rsb	r2, r3, #5
 80029f4:	4613      	mov	r3, r2
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	3303      	adds	r3, #3
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fc6f 	bl	80002e4 <__aeabi_i2f>
 8002a06:	4603      	mov	r3, r0
 8002a08:	220a      	movs	r2, #10
 8002a0a:	9201      	str	r2, [sp, #4]
 8002a0c:	22c8      	movs	r2, #200	@ 0xc8
 8002a0e:	9200      	str	r2, [sp, #0]
 8002a10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a14:	4942      	ldr	r1, [pc, #264]	@ (8002b20 <System_UI_Loop+0x530>)
 8002a16:	483a      	ldr	r0, [pc, #232]	@ (8002b00 <System_UI_Loop+0x510>)
 8002a18:	f002 fb28 	bl	800506c <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), 200, EASE_IN_CIRC);
 8002a1c:	4b39      	ldr	r3, [pc, #228]	@ (8002b04 <System_UI_Loop+0x514>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	f1c3 0206 	rsb	r2, r3, #6
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3303      	adds	r3, #3
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fd fc57 	bl	80002e4 <__aeabi_i2f>
 8002a36:	4603      	mov	r3, r0
 8002a38:	220a      	movs	r2, #10
 8002a3a:	9201      	str	r2, [sp, #4]
 8002a3c:	22c8      	movs	r2, #200	@ 0xc8
 8002a3e:	9200      	str	r2, [sp, #0]
 8002a40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a44:	492d      	ldr	r1, [pc, #180]	@ (8002afc <System_UI_Loop+0x50c>)
 8002a46:	482e      	ldr	r0, [pc, #184]	@ (8002b00 <System_UI_Loop+0x510>)
 8002a48:	f002 fb10 	bl	800506c <OLED_DoTweenObject>
 8002a4c:	e091      	b.n	8002b72 <System_UI_Loop+0x582>
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_GAMES)
 8002a4e:	4b30      	ldr	r3, [pc, #192]	@ (8002b10 <System_UI_Loop+0x520>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	f040 808d 	bne.w	8002b72 <System_UI_Loop+0x582>
 8002a58:	4b32      	ldr	r3, [pc, #200]	@ (8002b24 <System_UI_Loop+0x534>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b05      	cmp	r3, #5
 8002a5e:	d16d      	bne.n	8002b3c <System_UI_Loop+0x54c>
    {
        OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 200, EASE_IN_CIRC);
 8002a60:	4b28      	ldr	r3, [pc, #160]	@ (8002b04 <System_UI_Loop+0x514>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	f1c3 0202 	rsb	r2, r3, #2
 8002a68:	4613      	mov	r3, r2
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	3303      	adds	r3, #3
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fd fc35 	bl	80002e4 <__aeabi_i2f>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	220a      	movs	r2, #10
 8002a7e:	9201      	str	r2, [sp, #4]
 8002a80:	22c8      	movs	r2, #200	@ 0xc8
 8002a82:	9200      	str	r2, [sp, #0]
 8002a84:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a88:	4927      	ldr	r1, [pc, #156]	@ (8002b28 <System_UI_Loop+0x538>)
 8002a8a:	4828      	ldr	r0, [pc, #160]	@ (8002b2c <System_UI_Loop+0x53c>)
 8002a8c:	f002 faee 	bl	800506c <OLED_DoTweenObject>
        OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 200, EASE_IN_CIRC);
 8002a90:	4b1c      	ldr	r3, [pc, #112]	@ (8002b04 <System_UI_Loop+0x514>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	f1c3 0203 	rsb	r2, r3, #3
 8002a98:	4613      	mov	r3, r2
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3303      	adds	r3, #3
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fd fc1d 	bl	80002e4 <__aeabi_i2f>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	220a      	movs	r2, #10
 8002aae:	9201      	str	r2, [sp, #4]
 8002ab0:	22c8      	movs	r2, #200	@ 0xc8
 8002ab2:	9200      	str	r2, [sp, #0]
 8002ab4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ab8:	491d      	ldr	r1, [pc, #116]	@ (8002b30 <System_UI_Loop+0x540>)
 8002aba:	481c      	ldr	r0, [pc, #112]	@ (8002b2c <System_UI_Loop+0x53c>)
 8002abc:	f002 fad6 	bl	800506c <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 200, EASE_IN_CIRC);
 8002ac0:	4b10      	ldr	r3, [pc, #64]	@ (8002b04 <System_UI_Loop+0x514>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	f1c3 0204 	rsb	r2, r3, #4
 8002ac8:	4613      	mov	r3, r2
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3303      	adds	r3, #3
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fd fc05 	bl	80002e4 <__aeabi_i2f>
 8002ada:	4603      	mov	r3, r0
 8002adc:	220a      	movs	r2, #10
 8002ade:	9201      	str	r2, [sp, #4]
 8002ae0:	22c8      	movs	r2, #200	@ 0xc8
 8002ae2:	9200      	str	r2, [sp, #0]
 8002ae4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ae8:	4912      	ldr	r1, [pc, #72]	@ (8002b34 <System_UI_Loop+0x544>)
 8002aea:	4813      	ldr	r0, [pc, #76]	@ (8002b38 <System_UI_Loop+0x548>)
 8002aec:	f002 fabe 	bl	800506c <OLED_DoTweenObject>
 8002af0:	e03f      	b.n	8002b72 <System_UI_Loop+0x582>
 8002af2:	bf00      	nop
 8002af4:	42880000 	.word	0x42880000
 8002af8:	c2b40000 	.word	0xc2b40000
 8002afc:	0800ac00 	.word	0x0800ac00
 8002b00:	20000f80 	.word	0x20000f80
 8002b04:	20000002 	.word	0x20000002
 8002b08:	20000b6e 	.word	0x20000b6e
 8002b0c:	20000003 	.word	0x20000003
 8002b10:	20000001 	.word	0x20000001
 8002b14:	0800abc8 	.word	0x0800abc8
 8002b18:	0800abd4 	.word	0x0800abd4
 8002b1c:	0800abe0 	.word	0x0800abe0
 8002b20:	0800abf0 	.word	0x0800abf0
 8002b24:	20000b6d 	.word	0x20000b6d
 8002b28:	0800ab88 	.word	0x0800ab88
 8002b2c:	20001574 	.word	0x20001574
 8002b30:	0800ab90 	.word	0x0800ab90
 8002b34:	0800ab98 	.word	0x0800ab98
 8002b38:	2000392c 	.word	0x2000392c
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_SETTINGS)
 8002b3c:	4bb4      	ldr	r3, [pc, #720]	@ (8002e10 <System_UI_Loop+0x820>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d116      	bne.n	8002b72 <System_UI_Loop+0x582>
 8002b44:	4bb3      	ldr	r3, [pc, #716]	@ (8002e14 <System_UI_Loop+0x824>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d012      	beq.n	8002b72 <System_UI_Loop+0x582>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_STATUS)
 8002b4c:	4bb0      	ldr	r3, [pc, #704]	@ (8002e10 <System_UI_Loop+0x820>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d10e      	bne.n	8002b72 <System_UI_Loop+0x582>
 8002b54:	4baf      	ldr	r3, [pc, #700]	@ (8002e14 <System_UI_Loop+0x824>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d00a      	beq.n	8002b72 <System_UI_Loop+0x582>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_ABOUT)
 8002b5c:	4bac      	ldr	r3, [pc, #688]	@ (8002e10 <System_UI_Loop+0x820>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d106      	bne.n	8002b72 <System_UI_Loop+0x582>
 8002b64:	4bab      	ldr	r3, [pc, #684]	@ (8002e14 <System_UI_Loop+0x824>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d002      	beq.n	8002b72 <System_UI_Loop+0x582>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_TOOLS)
 8002b6c:	4ba8      	ldr	r3, [pc, #672]	@ (8002e10 <System_UI_Loop+0x820>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b02      	cmp	r3, #2

#pragma endregion pager

#pragma region DRAWER //画出你的UI

    OLED_GetObjectPosition(&Menu_AnimationManager, "SettingsButton", &x, &y);
 8002b72:	f107 0308 	add.w	r3, r7, #8
 8002b76:	f107 020c 	add.w	r2, r7, #12
 8002b7a:	49a7      	ldr	r1, [pc, #668]	@ (8002e18 <System_UI_Loop+0x828>)
 8002b7c:	48a7      	ldr	r0, [pc, #668]	@ (8002e1c <System_UI_Loop+0x82c>)
 8002b7e:	f002 f99a 	bl	8004eb6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Settings");
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fd fddd 	bl	8000744 <__aeabi_f2iz>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	b21c      	sxth	r4, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd fdd7 	bl	8000744 <__aeabi_f2iz>
 8002b96:	4603      	mov	r3, r0
 8002b98:	b21b      	sxth	r3, r3
 8002b9a:	4aa1      	ldr	r2, [pc, #644]	@ (8002e20 <System_UI_Loop+0x830>)
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	f7ff fc88 	bl	80024b4 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "StatusButton", &x, &y);
 8002ba4:	f107 0308 	add.w	r3, r7, #8
 8002ba8:	f107 020c 	add.w	r2, r7, #12
 8002bac:	499d      	ldr	r1, [pc, #628]	@ (8002e24 <System_UI_Loop+0x834>)
 8002bae:	489b      	ldr	r0, [pc, #620]	@ (8002e1c <System_UI_Loop+0x82c>)
 8002bb0:	f002 f981 	bl	8004eb6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Status");
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fd fdc4 	bl	8000744 <__aeabi_f2iz>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	b21c      	sxth	r4, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fd fdbe 	bl	8000744 <__aeabi_f2iz>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	b21b      	sxth	r3, r3
 8002bcc:	4a96      	ldr	r2, [pc, #600]	@ (8002e28 <System_UI_Loop+0x838>)
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	f7ff fc6f 	bl	80024b4 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "GamesButton", &x, &y);
 8002bd6:	f107 0308 	add.w	r3, r7, #8
 8002bda:	f107 020c 	add.w	r2, r7, #12
 8002bde:	4993      	ldr	r1, [pc, #588]	@ (8002e2c <System_UI_Loop+0x83c>)
 8002be0:	488e      	ldr	r0, [pc, #568]	@ (8002e1c <System_UI_Loop+0x82c>)
 8002be2:	f002 f968 	bl	8004eb6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Games");
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fd fdab 	bl	8000744 <__aeabi_f2iz>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	b21c      	sxth	r4, r3
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fd fda5 	bl	8000744 <__aeabi_f2iz>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	b21b      	sxth	r3, r3
 8002bfe:	4a8c      	ldr	r2, [pc, #560]	@ (8002e30 <System_UI_Loop+0x840>)
 8002c00:	4619      	mov	r1, r3
 8002c02:	4620      	mov	r0, r4
 8002c04:	f7ff fc56 	bl	80024b4 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "AboutButton", &x, &y);
 8002c08:	f107 0308 	add.w	r3, r7, #8
 8002c0c:	f107 020c 	add.w	r2, r7, #12
 8002c10:	4988      	ldr	r1, [pc, #544]	@ (8002e34 <System_UI_Loop+0x844>)
 8002c12:	4882      	ldr	r0, [pc, #520]	@ (8002e1c <System_UI_Loop+0x82c>)
 8002c14:	f002 f94f 	bl	8004eb6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "About");
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd fd92 	bl	8000744 <__aeabi_f2iz>
 8002c20:	4603      	mov	r3, r0
 8002c22:	b21c      	sxth	r4, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fd fd8c 	bl	8000744 <__aeabi_f2iz>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	b21b      	sxth	r3, r3
 8002c30:	4a81      	ldr	r2, [pc, #516]	@ (8002e38 <System_UI_Loop+0x848>)
 8002c32:	4619      	mov	r1, r3
 8002c34:	4620      	mov	r0, r4
 8002c36:	f7ff fc3d 	bl	80024b4 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "ToolsButton", &x, &y);
 8002c3a:	f107 0308 	add.w	r3, r7, #8
 8002c3e:	f107 020c 	add.w	r2, r7, #12
 8002c42:	497e      	ldr	r1, [pc, #504]	@ (8002e3c <System_UI_Loop+0x84c>)
 8002c44:	4875      	ldr	r0, [pc, #468]	@ (8002e1c <System_UI_Loop+0x82c>)
 8002c46:	f002 f936 	bl	8004eb6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Tools");
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fd fd79 	bl	8000744 <__aeabi_f2iz>
 8002c52:	4603      	mov	r3, r0
 8002c54:	b21c      	sxth	r4, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fd fd73 	bl	8000744 <__aeabi_f2iz>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	b21b      	sxth	r3, r3
 8002c62:	4a77      	ldr	r2, [pc, #476]	@ (8002e40 <System_UI_Loop+0x850>)
 8002c64:	4619      	mov	r1, r3
 8002c66:	4620      	mov	r0, r4
 8002c68:	f7ff fc24 	bl	80024b4 <OLED_DisplayString>
    OLED_GetObjectPosition(&Games_AnimationManager, "Snake", &x, &y);
 8002c6c:	f107 0308 	add.w	r3, r7, #8
 8002c70:	f107 020c 	add.w	r2, r7, #12
 8002c74:	4973      	ldr	r1, [pc, #460]	@ (8002e44 <System_UI_Loop+0x854>)
 8002c76:	4874      	ldr	r0, [pc, #464]	@ (8002e48 <System_UI_Loop+0x858>)
 8002c78:	f002 f91d 	bl	8004eb6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Snake");
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fd fd60 	bl	8000744 <__aeabi_f2iz>
 8002c84:	4603      	mov	r3, r0
 8002c86:	b21c      	sxth	r4, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fd fd5a 	bl	8000744 <__aeabi_f2iz>
 8002c90:	4603      	mov	r3, r0
 8002c92:	b21b      	sxth	r3, r3
 8002c94:	4a6b      	ldr	r2, [pc, #428]	@ (8002e44 <System_UI_Loop+0x854>)
 8002c96:	4619      	mov	r1, r3
 8002c98:	4620      	mov	r0, r4
 8002c9a:	f7ff fc0b 	bl	80024b4 <OLED_DisplayString>
    OLED_GetObjectPosition(&Games_AnimationManager, "2048", &x, &y);
 8002c9e:	f107 0308 	add.w	r3, r7, #8
 8002ca2:	f107 020c 	add.w	r2, r7, #12
 8002ca6:	4969      	ldr	r1, [pc, #420]	@ (8002e4c <System_UI_Loop+0x85c>)
 8002ca8:	4867      	ldr	r0, [pc, #412]	@ (8002e48 <System_UI_Loop+0x858>)
 8002caa:	f002 f904 	bl	8004eb6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "2048");
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fd fd47 	bl	8000744 <__aeabi_f2iz>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	b21c      	sxth	r4, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fd fd41 	bl	8000744 <__aeabi_f2iz>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	b21b      	sxth	r3, r3
 8002cc6:	4a61      	ldr	r2, [pc, #388]	@ (8002e4c <System_UI_Loop+0x85c>)
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4620      	mov	r0, r4
 8002ccc:	f7ff fbf2 	bl	80024b4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_AnimationManager, "BackButton", &x, &y);
 8002cd0:	f107 0308 	add.w	r3, r7, #8
 8002cd4:	f107 020c 	add.w	r2, r7, #12
 8002cd8:	495d      	ldr	r1, [pc, #372]	@ (8002e50 <System_UI_Loop+0x860>)
 8002cda:	485e      	ldr	r0, [pc, #376]	@ (8002e54 <System_UI_Loop+0x864>)
 8002cdc:	f002 f8eb 	bl	8004eb6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Back");
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fd fd2e 	bl	8000744 <__aeabi_f2iz>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	b21c      	sxth	r4, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd fd28 	bl	8000744 <__aeabi_f2iz>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	b21b      	sxth	r3, r3
 8002cf8:	4a57      	ldr	r2, [pc, #348]	@ (8002e58 <System_UI_Loop+0x868>)
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	f7ff fbd9 	bl	80024b4 <OLED_DisplayString>

    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleGames", &x, &y);
 8002d02:	f107 0308 	add.w	r3, r7, #8
 8002d06:	f107 020c 	add.w	r2, r7, #12
 8002d0a:	4954      	ldr	r1, [pc, #336]	@ (8002e5c <System_UI_Loop+0x86c>)
 8002d0c:	4854      	ldr	r0, [pc, #336]	@ (8002e60 <System_UI_Loop+0x870>)
 8002d0e:	f002 f8d2 	bl	8004eb6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Epicful Games");
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fd fd15 	bl	8000744 <__aeabi_f2iz>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	b21c      	sxth	r4, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fd fd0f 	bl	8000744 <__aeabi_f2iz>
 8002d26:	4603      	mov	r3, r0
 8002d28:	b21b      	sxth	r3, r3
 8002d2a:	4a4e      	ldr	r2, [pc, #312]	@ (8002e64 <System_UI_Loop+0x874>)
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4620      	mov	r0, r4
 8002d30:	f7ff fbc0 	bl	80024b4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleTools", &x, &y);
 8002d34:	f107 0308 	add.w	r3, r7, #8
 8002d38:	f107 020c 	add.w	r2, r7, #12
 8002d3c:	494a      	ldr	r1, [pc, #296]	@ (8002e68 <System_UI_Loop+0x878>)
 8002d3e:	4848      	ldr	r0, [pc, #288]	@ (8002e60 <System_UI_Loop+0x870>)
 8002d40:	f002 f8b9 	bl	8004eb6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Tools For You");
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fcfc 	bl	8000744 <__aeabi_f2iz>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	b21c      	sxth	r4, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fd fcf6 	bl	8000744 <__aeabi_f2iz>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	b21b      	sxth	r3, r3
 8002d5c:	4a43      	ldr	r2, [pc, #268]	@ (8002e6c <System_UI_Loop+0x87c>)
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4620      	mov	r0, r4
 8002d62:	f7ff fba7 	bl	80024b4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleStatus", &x, &y);
 8002d66:	f107 0308 	add.w	r3, r7, #8
 8002d6a:	f107 020c 	add.w	r2, r7, #12
 8002d6e:	4940      	ldr	r1, [pc, #256]	@ (8002e70 <System_UI_Loop+0x880>)
 8002d70:	483b      	ldr	r0, [pc, #236]	@ (8002e60 <System_UI_Loop+0x870>)
 8002d72:	f002 f8a0 	bl	8004eb6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Machine States");
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fd fce3 	bl	8000744 <__aeabi_f2iz>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	b21c      	sxth	r4, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fd fcdd 	bl	8000744 <__aeabi_f2iz>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	b21b      	sxth	r3, r3
 8002d8e:	4a39      	ldr	r2, [pc, #228]	@ (8002e74 <System_UI_Loop+0x884>)
 8002d90:	4619      	mov	r1, r3
 8002d92:	4620      	mov	r0, r4
 8002d94:	f7ff fb8e 	bl	80024b4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleSettings", &x, &y);
 8002d98:	f107 0308 	add.w	r3, r7, #8
 8002d9c:	f107 020c 	add.w	r2, r7, #12
 8002da0:	4935      	ldr	r1, [pc, #212]	@ (8002e78 <System_UI_Loop+0x888>)
 8002da2:	482f      	ldr	r0, [pc, #188]	@ (8002e60 <System_UI_Loop+0x870>)
 8002da4:	f002 f887 	bl	8004eb6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "STM Settings");
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd fcca 	bl	8000744 <__aeabi_f2iz>
 8002db0:	4603      	mov	r3, r0
 8002db2:	b21c      	sxth	r4, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd fcc4 	bl	8000744 <__aeabi_f2iz>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	b21b      	sxth	r3, r3
 8002dc0:	4a2e      	ldr	r2, [pc, #184]	@ (8002e7c <System_UI_Loop+0x88c>)
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	f7ff fb75 	bl	80024b4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleAbout", &x, &y);
 8002dca:	f107 0308 	add.w	r3, r7, #8
 8002dce:	f107 020c 	add.w	r2, r7, #12
 8002dd2:	492b      	ldr	r1, [pc, #172]	@ (8002e80 <System_UI_Loop+0x890>)
 8002dd4:	4822      	ldr	r0, [pc, #136]	@ (8002e60 <System_UI_Loop+0x870>)
 8002dd6:	f002 f86e 	bl	8004eb6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Developer!");
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fd fcb1 	bl	8000744 <__aeabi_f2iz>
 8002de2:	4603      	mov	r3, r0
 8002de4:	b21c      	sxth	r4, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fd fcab 	bl	8000744 <__aeabi_f2iz>
 8002dee:	4603      	mov	r3, r0
 8002df0:	b21b      	sxth	r3, r3
 8002df2:	4a24      	ldr	r2, [pc, #144]	@ (8002e84 <System_UI_Loop+0x894>)
 8002df4:	4619      	mov	r1, r3
 8002df6:	4620      	mov	r0, r4
 8002df8:	f7ff fb5c 	bl	80024b4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleSnake", &x, &y);
 8002dfc:	f107 0308 	add.w	r3, r7, #8
 8002e00:	f107 020c 	add.w	r2, r7, #12
 8002e04:	4920      	ldr	r1, [pc, #128]	@ (8002e88 <System_UI_Loop+0x898>)
 8002e06:	4816      	ldr	r0, [pc, #88]	@ (8002e60 <System_UI_Loop+0x870>)
 8002e08:	f002 f855 	bl	8004eb6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Greedy Snake");
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	e03d      	b.n	8002e8c <System_UI_Loop+0x89c>
 8002e10:	20000001 	.word	0x20000001
 8002e14:	20000b6d 	.word	0x20000b6d
 8002e18:	0800abf0 	.word	0x0800abf0
 8002e1c:	20000f80 	.word	0x20000f80
 8002e20:	0800ac0c 	.word	0x0800ac0c
 8002e24:	0800abe0 	.word	0x0800abe0
 8002e28:	0800ac18 	.word	0x0800ac18
 8002e2c:	0800abc8 	.word	0x0800abc8
 8002e30:	0800ac20 	.word	0x0800ac20
 8002e34:	0800ac00 	.word	0x0800ac00
 8002e38:	0800ac28 	.word	0x0800ac28
 8002e3c:	0800abd4 	.word	0x0800abd4
 8002e40:	0800ac30 	.word	0x0800ac30
 8002e44:	0800ab88 	.word	0x0800ab88
 8002e48:	20001574 	.word	0x20001574
 8002e4c:	0800ab90 	.word	0x0800ab90
 8002e50:	0800ab98 	.word	0x0800ab98
 8002e54:	2000392c 	.word	0x2000392c
 8002e58:	0800ac38 	.word	0x0800ac38
 8002e5c:	0800ab24 	.word	0x0800ab24
 8002e60:	20003338 	.word	0x20003338
 8002e64:	0800ac40 	.word	0x0800ac40
 8002e68:	0800ab30 	.word	0x0800ab30
 8002e6c:	0800ac50 	.word	0x0800ac50
 8002e70:	0800ab3c 	.word	0x0800ab3c
 8002e74:	0800ac60 	.word	0x0800ac60
 8002e78:	0800ab48 	.word	0x0800ab48
 8002e7c:	0800ac70 	.word	0x0800ac70
 8002e80:	0800ab58 	.word	0x0800ab58
 8002e84:	0800ac80 	.word	0x0800ac80
 8002e88:	0800ab64 	.word	0x0800ab64
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fd fc59 	bl	8000744 <__aeabi_f2iz>
 8002e92:	4603      	mov	r3, r0
 8002e94:	b21c      	sxth	r4, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fd fc53 	bl	8000744 <__aeabi_f2iz>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	b21b      	sxth	r3, r3
 8002ea2:	4aa8      	ldr	r2, [pc, #672]	@ (8003144 <System_UI_Loop+0xb54>)
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	f7ff fb04 	bl	80024b4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "Title2048", &x, &y);
 8002eac:	f107 0308 	add.w	r3, r7, #8
 8002eb0:	f107 020c 	add.w	r2, r7, #12
 8002eb4:	49a4      	ldr	r1, [pc, #656]	@ (8003148 <System_UI_Loop+0xb58>)
 8002eb6:	48a5      	ldr	r0, [pc, #660]	@ (800314c <System_UI_Loop+0xb5c>)
 8002eb8:	f001 fffd 	bl	8004eb6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Here is 2048!");
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd fc40 	bl	8000744 <__aeabi_f2iz>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	b21c      	sxth	r4, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fd fc3a 	bl	8000744 <__aeabi_f2iz>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	b21b      	sxth	r3, r3
 8002ed4:	4a9e      	ldr	r2, [pc, #632]	@ (8003150 <System_UI_Loop+0xb60>)
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4620      	mov	r0, r4
 8002eda:	f7ff faeb 	bl	80024b4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleBack", &x, &y);
 8002ede:	f107 0308 	add.w	r3, r7, #8
 8002ee2:	f107 020c 	add.w	r2, r7, #12
 8002ee6:	499b      	ldr	r1, [pc, #620]	@ (8003154 <System_UI_Loop+0xb64>)
 8002ee8:	4898      	ldr	r0, [pc, #608]	@ (800314c <System_UI_Loop+0xb5c>)
 8002eea:	f001 ffe4 	bl	8004eb6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Back To Menu");
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fd fc27 	bl	8000744 <__aeabi_f2iz>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	b21c      	sxth	r4, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd fc21 	bl	8000744 <__aeabi_f2iz>
 8002f02:	4603      	mov	r3, r0
 8002f04:	b21b      	sxth	r3, r3
 8002f06:	4a94      	ldr	r2, [pc, #592]	@ (8003158 <System_UI_Loop+0xb68>)
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	f7ff fad2 	bl	80024b4 <OLED_DisplayString>

    OLED_GetObjectPosition(&g_AnimationManager, "TitleBGScale", &x, &y);
 8002f10:	f107 0308 	add.w	r3, r7, #8
 8002f14:	f107 020c 	add.w	r2, r7, #12
 8002f18:	4990      	ldr	r1, [pc, #576]	@ (800315c <System_UI_Loop+0xb6c>)
 8002f1a:	4891      	ldr	r0, [pc, #580]	@ (8003160 <System_UI_Loop+0xb70>)
 8002f1c:	f001 ffcb 	bl	8004eb6 <OLED_GetObjectPosition>
    OLED_InvertArea(OLED_WIDTH - x, 0, x, y);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4619      	mov	r1, r3
 8002f24:	f04f 4086 	mov.w	r0, #1124073472	@ 0x43000000
 8002f28:	f7fd f926 	bl	8000178 <__aeabi_fsub>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fd fc08 	bl	8000744 <__aeabi_f2iz>
 8002f34:	4603      	mov	r3, r0
 8002f36:	b21c      	sxth	r4, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd fc28 	bl	8000790 <__aeabi_f2uiz>
 8002f40:	4603      	mov	r3, r0
 8002f42:	b2dd      	uxtb	r5, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd fc22 	bl	8000790 <__aeabi_f2uiz>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	462a      	mov	r2, r5
 8002f52:	2100      	movs	r1, #0
 8002f54:	4620      	mov	r0, r4
 8002f56:	f7ff f877 	bl	8002048 <OLED_InvertArea>

    OLED_GetObjectPosition(&g_AnimationManager, "Cursor", &x, &y);
 8002f5a:	f107 0308 	add.w	r3, r7, #8
 8002f5e:	f107 020c 	add.w	r2, r7, #12
 8002f62:	4980      	ldr	r1, [pc, #512]	@ (8003164 <System_UI_Loop+0xb74>)
 8002f64:	487e      	ldr	r0, [pc, #504]	@ (8003160 <System_UI_Loop+0xb70>)
 8002f66:	f001 ffa6 	bl	8004eb6 <OLED_GetObjectPosition>
    OLED_GetObjectPosition(&g_AnimationManager, "CursorScale", &x1, &y1);
 8002f6a:	463b      	mov	r3, r7
 8002f6c:	1d3a      	adds	r2, r7, #4
 8002f6e:	497e      	ldr	r1, [pc, #504]	@ (8003168 <System_UI_Loop+0xb78>)
 8002f70:	487b      	ldr	r0, [pc, #492]	@ (8003160 <System_UI_Loop+0xb70>)
 8002f72:	f001 ffa0 	bl	8004eb6 <OLED_GetObjectPosition>
    OLED_InvertArea(x - 2, y - 2, x1, y1); // 绘制光标
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd f8fb 	bl	8000178 <__aeabi_fsub>
 8002f82:	4603      	mov	r3, r0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fd fbdd 	bl	8000744 <__aeabi_f2iz>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	b21c      	sxth	r4, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fd f8ef 	bl	8000178 <__aeabi_fsub>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fd fbd1 	bl	8000744 <__aeabi_f2iz>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	b21d      	sxth	r5, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fd fbf1 	bl	8000790 <__aeabi_f2uiz>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	b2de      	uxtb	r6, r3
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd fbeb 	bl	8000790 <__aeabi_f2uiz>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	4632      	mov	r2, r6
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f7ff f840 	bl	8002048 <OLED_InvertArea>
#pragma endregion DRAWER

#pragma region PlayerSelection //选择某个选项时候的详细内容
    if (menuRank == 1)
 8002fc8:	4b68      	ldr	r3, [pc, #416]	@ (800316c <System_UI_Loop+0xb7c>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	f040 81d6 	bne.w	800337e <System_UI_Loop+0xd8e>
    {
        switch (menuSelection)
 8002fd2:	4b67      	ldr	r3, [pc, #412]	@ (8003170 <System_UI_Loop+0xb80>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	f200 81cc 	bhi.w	8003376 <System_UI_Loop+0xd86>
 8002fde:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe4 <System_UI_Loop+0x9f4>)
 8002fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe4:	08002ff9 	.word	0x08002ff9
 8002fe8:	080030a9 	.word	0x080030a9
 8002fec:	080031a9 	.word	0x080031a9
 8002ff0:	08003243 	.word	0x08003243
 8002ff4:	080032dd 	.word	0x080032dd
        {
        case 1:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, TweenStyle);
 8002ff8:	230f      	movs	r3, #15
 8002ffa:	9301      	str	r3, [sp, #4]
 8002ffc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	4b5c      	ldr	r3, [pc, #368]	@ (8003174 <System_UI_Loop+0xb84>)
 8003004:	4a5c      	ldr	r2, [pc, #368]	@ (8003178 <System_UI_Loop+0xb88>)
 8003006:	4953      	ldr	r1, [pc, #332]	@ (8003154 <System_UI_Loop+0xb64>)
 8003008:	4850      	ldr	r0, [pc, #320]	@ (800314c <System_UI_Loop+0xb5c>)
 800300a:	f002 f82f 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", OLED_WIDTH - strlen("Machine States") * 6, OLED_TITLE_Start_Y, 1, TweenStyle);
 800300e:	230f      	movs	r3, #15
 8003010:	9301      	str	r3, [sp, #4]
 8003012:	2301      	movs	r3, #1
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	4b57      	ldr	r3, [pc, #348]	@ (8003174 <System_UI_Loop+0xb84>)
 8003018:	4a58      	ldr	r2, [pc, #352]	@ (800317c <System_UI_Loop+0xb8c>)
 800301a:	4959      	ldr	r1, [pc, #356]	@ (8003180 <System_UI_Loop+0xb90>)
 800301c:	484b      	ldr	r0, [pc, #300]	@ (800314c <System_UI_Loop+0xb5c>)
 800301e:	f002 f825 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", OLED_WIDTH - strlen("STM Settings") * 6, OLED_TITLE_Start_Y, 1, TweenStyle);
 8003022:	230f      	movs	r3, #15
 8003024:	9301      	str	r3, [sp, #4]
 8003026:	2301      	movs	r3, #1
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	4b52      	ldr	r3, [pc, #328]	@ (8003174 <System_UI_Loop+0xb84>)
 800302c:	4a52      	ldr	r2, [pc, #328]	@ (8003178 <System_UI_Loop+0xb88>)
 800302e:	4955      	ldr	r1, [pc, #340]	@ (8003184 <System_UI_Loop+0xb94>)
 8003030:	4846      	ldr	r0, [pc, #280]	@ (800314c <System_UI_Loop+0xb5c>)
 8003032:	f002 f81b 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003036:	2304      	movs	r3, #4
 8003038:	9301      	str	r3, [sp, #4]
 800303a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	4b4c      	ldr	r3, [pc, #304]	@ (8003174 <System_UI_Loop+0xb84>)
 8003042:	4a51      	ldr	r2, [pc, #324]	@ (8003188 <System_UI_Loop+0xb98>)
 8003044:	4951      	ldr	r1, [pc, #324]	@ (800318c <System_UI_Loop+0xb9c>)
 8003046:	4841      	ldr	r0, [pc, #260]	@ (800314c <System_UI_Loop+0xb5c>)
 8003048:	f002 f810 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 800304c:	2304      	movs	r3, #4
 800304e:	9301      	str	r3, [sp, #4]
 8003050:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	4b47      	ldr	r3, [pc, #284]	@ (8003174 <System_UI_Loop+0xb84>)
 8003058:	4a4d      	ldr	r2, [pc, #308]	@ (8003190 <System_UI_Loop+0xba0>)
 800305a:	494e      	ldr	r1, [pc, #312]	@ (8003194 <System_UI_Loop+0xba4>)
 800305c:	483b      	ldr	r0, [pc, #236]	@ (800314c <System_UI_Loop+0xb5c>)
 800305e:	f002 f805 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8003062:	2304      	movs	r3, #4
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	4a47      	ldr	r2, [pc, #284]	@ (8003190 <System_UI_Loop+0xba0>)
 8003072:	4949      	ldr	r1, [pc, #292]	@ (8003198 <System_UI_Loop+0xba8>)
 8003074:	4835      	ldr	r0, [pc, #212]	@ (800314c <System_UI_Loop+0xb5c>)
 8003076:	f001 fff9 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Epicful Games") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 800307a:	2304      	movs	r3, #4
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003088:	4a44      	ldr	r2, [pc, #272]	@ (800319c <System_UI_Loop+0xbac>)
 800308a:	4934      	ldr	r1, [pc, #208]	@ (800315c <System_UI_Loop+0xb6c>)
 800308c:	4834      	ldr	r0, [pc, #208]	@ (8003160 <System_UI_Loop+0xb70>)
 800308e:	f001 ffed 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Games") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 8003092:	230c      	movs	r3, #12
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	2364      	movs	r3, #100	@ 0x64
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	4b41      	ldr	r3, [pc, #260]	@ (80031a0 <System_UI_Loop+0xbb0>)
 800309c:	4a41      	ldr	r2, [pc, #260]	@ (80031a4 <System_UI_Loop+0xbb4>)
 800309e:	4932      	ldr	r1, [pc, #200]	@ (8003168 <System_UI_Loop+0xb78>)
 80030a0:	482f      	ldr	r0, [pc, #188]	@ (8003160 <System_UI_Loop+0xb70>)
 80030a2:	f001 ffe3 	bl	800506c <OLED_DoTweenObject>
            break;
 80030a6:	e2ce      	b.n	8003646 <System_UI_Loop+0x1056>
        case 2:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80030a8:	2304      	movs	r3, #4
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	2301      	movs	r3, #1
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	4b30      	ldr	r3, [pc, #192]	@ (8003174 <System_UI_Loop+0xb84>)
 80030b2:	4a31      	ldr	r2, [pc, #196]	@ (8003178 <System_UI_Loop+0xb88>)
 80030b4:	4933      	ldr	r1, [pc, #204]	@ (8003184 <System_UI_Loop+0xb94>)
 80030b6:	4825      	ldr	r0, [pc, #148]	@ (800314c <System_UI_Loop+0xb5c>)
 80030b8:	f001 ffd8 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80030bc:	2304      	movs	r3, #4
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	2301      	movs	r3, #1
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003174 <System_UI_Loop+0xb84>)
 80030c6:	4a30      	ldr	r2, [pc, #192]	@ (8003188 <System_UI_Loop+0xb98>)
 80030c8:	4930      	ldr	r1, [pc, #192]	@ (800318c <System_UI_Loop+0xb9c>)
 80030ca:	4820      	ldr	r0, [pc, #128]	@ (800314c <System_UI_Loop+0xb5c>)
 80030cc:	f001 ffce 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80030d0:	2304      	movs	r3, #4
 80030d2:	9301      	str	r3, [sp, #4]
 80030d4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	4b26      	ldr	r3, [pc, #152]	@ (8003174 <System_UI_Loop+0xb84>)
 80030dc:	4a27      	ldr	r2, [pc, #156]	@ (800317c <System_UI_Loop+0xb8c>)
 80030de:	4928      	ldr	r1, [pc, #160]	@ (8003180 <System_UI_Loop+0xb90>)
 80030e0:	481a      	ldr	r0, [pc, #104]	@ (800314c <System_UI_Loop+0xb5c>)
 80030e2:	f001 ffc3 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80030e6:	2304      	movs	r3, #4
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	4b20      	ldr	r3, [pc, #128]	@ (8003174 <System_UI_Loop+0xb84>)
 80030f2:	4a27      	ldr	r2, [pc, #156]	@ (8003190 <System_UI_Loop+0xba0>)
 80030f4:	4928      	ldr	r1, [pc, #160]	@ (8003198 <System_UI_Loop+0xba8>)
 80030f6:	4815      	ldr	r0, [pc, #84]	@ (800314c <System_UI_Loop+0xb5c>)
 80030f8:	f001 ffb8 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 80030fc:	2304      	movs	r3, #4
 80030fe:	9301      	str	r3, [sp, #4]
 8003100:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	4a21      	ldr	r2, [pc, #132]	@ (8003190 <System_UI_Loop+0xba0>)
 800310c:	4921      	ldr	r1, [pc, #132]	@ (8003194 <System_UI_Loop+0xba4>)
 800310e:	480f      	ldr	r0, [pc, #60]	@ (800314c <System_UI_Loop+0xb5c>)
 8003110:	f001 ffac 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Tools for you") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8003114:	2304      	movs	r3, #4
 8003116:	9301      	str	r3, [sp, #4]
 8003118:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003122:	4a1e      	ldr	r2, [pc, #120]	@ (800319c <System_UI_Loop+0xbac>)
 8003124:	490d      	ldr	r1, [pc, #52]	@ (800315c <System_UI_Loop+0xb6c>)
 8003126:	480e      	ldr	r0, [pc, #56]	@ (8003160 <System_UI_Loop+0xb70>)
 8003128:	f001 ffa0 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Tools") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 800312c:	230c      	movs	r3, #12
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	2364      	movs	r3, #100	@ 0x64
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	4b1a      	ldr	r3, [pc, #104]	@ (80031a0 <System_UI_Loop+0xbb0>)
 8003136:	4a1b      	ldr	r2, [pc, #108]	@ (80031a4 <System_UI_Loop+0xbb4>)
 8003138:	490b      	ldr	r1, [pc, #44]	@ (8003168 <System_UI_Loop+0xb78>)
 800313a:	4809      	ldr	r0, [pc, #36]	@ (8003160 <System_UI_Loop+0xb70>)
 800313c:	f001 ff96 	bl	800506c <OLED_DoTweenObject>
            break;
 8003140:	e281      	b.n	8003646 <System_UI_Loop+0x1056>
 8003142:	bf00      	nop
 8003144:	0800ac8c 	.word	0x0800ac8c
 8003148:	0800ab70 	.word	0x0800ab70
 800314c:	20003338 	.word	0x20003338
 8003150:	0800ac9c 	.word	0x0800ac9c
 8003154:	0800ab7c 	.word	0x0800ab7c
 8003158:	0800acac 	.word	0x0800acac
 800315c:	0800aba4 	.word	0x0800aba4
 8003160:	2000392c 	.word	0x2000392c
 8003164:	0800abb4 	.word	0x0800abb4
 8003168:	0800abbc 	.word	0x0800abbc
 800316c:	20000001 	.word	0x20000001
 8003170:	20000002 	.word	0x20000002
 8003174:	c1200000 	.word	0xc1200000
 8003178:	42600000 	.word	0x42600000
 800317c:	42300000 	.word	0x42300000
 8003180:	0800ab3c 	.word	0x0800ab3c
 8003184:	0800ab48 	.word	0x0800ab48
 8003188:	42880000 	.word	0x42880000
 800318c:	0800ab58 	.word	0x0800ab58
 8003190:	42480000 	.word	0x42480000
 8003194:	0800ab30 	.word	0x0800ab30
 8003198:	0800ab24 	.word	0x0800ab24
 800319c:	42a20000 	.word	0x42a20000
 80031a0:	41200000 	.word	0x41200000
 80031a4:	42040000 	.word	0x42040000
        case 3:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80031a8:	2304      	movs	r3, #4
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	2301      	movs	r3, #1
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	4b90      	ldr	r3, [pc, #576]	@ (80033f4 <System_UI_Loop+0xe04>)
 80031b2:	4a91      	ldr	r2, [pc, #580]	@ (80033f8 <System_UI_Loop+0xe08>)
 80031b4:	4991      	ldr	r1, [pc, #580]	@ (80033fc <System_UI_Loop+0xe0c>)
 80031b6:	4892      	ldr	r0, [pc, #584]	@ (8003400 <System_UI_Loop+0xe10>)
 80031b8:	f001 ff58 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80031bc:	2304      	movs	r3, #4
 80031be:	9301      	str	r3, [sp, #4]
 80031c0:	2301      	movs	r3, #1
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	4b8b      	ldr	r3, [pc, #556]	@ (80033f4 <System_UI_Loop+0xe04>)
 80031c6:	4a8f      	ldr	r2, [pc, #572]	@ (8003404 <System_UI_Loop+0xe14>)
 80031c8:	498f      	ldr	r1, [pc, #572]	@ (8003408 <System_UI_Loop+0xe18>)
 80031ca:	488d      	ldr	r0, [pc, #564]	@ (8003400 <System_UI_Loop+0xe10>)
 80031cc:	f001 ff4e 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80031d0:	2304      	movs	r3, #4
 80031d2:	9301      	str	r3, [sp, #4]
 80031d4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	4b86      	ldr	r3, [pc, #536]	@ (80033f4 <System_UI_Loop+0xe04>)
 80031dc:	4a8b      	ldr	r2, [pc, #556]	@ (800340c <System_UI_Loop+0xe1c>)
 80031de:	498c      	ldr	r1, [pc, #560]	@ (8003410 <System_UI_Loop+0xe20>)
 80031e0:	4887      	ldr	r0, [pc, #540]	@ (8003400 <System_UI_Loop+0xe10>)
 80031e2:	f001 ff43 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80031e6:	2304      	movs	r3, #4
 80031e8:	9301      	str	r3, [sp, #4]
 80031ea:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	4b80      	ldr	r3, [pc, #512]	@ (80033f4 <System_UI_Loop+0xe04>)
 80031f2:	4a81      	ldr	r2, [pc, #516]	@ (80033f8 <System_UI_Loop+0xe08>)
 80031f4:	4987      	ldr	r1, [pc, #540]	@ (8003414 <System_UI_Loop+0xe24>)
 80031f6:	4882      	ldr	r0, [pc, #520]	@ (8003400 <System_UI_Loop+0xe10>)
 80031f8:	f001 ff38 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 80031fc:	2304      	movs	r3, #4
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	4a83      	ldr	r2, [pc, #524]	@ (8003418 <System_UI_Loop+0xe28>)
 800320c:	4983      	ldr	r1, [pc, #524]	@ (800341c <System_UI_Loop+0xe2c>)
 800320e:	487c      	ldr	r0, [pc, #496]	@ (8003400 <System_UI_Loop+0xe10>)
 8003210:	f001 ff2c 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Machine States") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8003214:	2304      	movs	r3, #4
 8003216:	9301      	str	r3, [sp, #4]
 8003218:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003222:	4a7f      	ldr	r2, [pc, #508]	@ (8003420 <System_UI_Loop+0xe30>)
 8003224:	497f      	ldr	r1, [pc, #508]	@ (8003424 <System_UI_Loop+0xe34>)
 8003226:	4880      	ldr	r0, [pc, #512]	@ (8003428 <System_UI_Loop+0xe38>)
 8003228:	f001 ff20 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("States") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 800322c:	230c      	movs	r3, #12
 800322e:	9301      	str	r3, [sp, #4]
 8003230:	2364      	movs	r3, #100	@ 0x64
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	4b7d      	ldr	r3, [pc, #500]	@ (800342c <System_UI_Loop+0xe3c>)
 8003236:	4a7e      	ldr	r2, [pc, #504]	@ (8003430 <System_UI_Loop+0xe40>)
 8003238:	497e      	ldr	r1, [pc, #504]	@ (8003434 <System_UI_Loop+0xe44>)
 800323a:	487b      	ldr	r0, [pc, #492]	@ (8003428 <System_UI_Loop+0xe38>)
 800323c:	f001 ff16 	bl	800506c <OLED_DoTweenObject>
            break;
 8003240:	e201      	b.n	8003646 <System_UI_Loop+0x1056>
        case 4:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8003242:	2304      	movs	r3, #4
 8003244:	9301      	str	r3, [sp, #4]
 8003246:	2301      	movs	r3, #1
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	4b6a      	ldr	r3, [pc, #424]	@ (80033f4 <System_UI_Loop+0xe04>)
 800324c:	4a6a      	ldr	r2, [pc, #424]	@ (80033f8 <System_UI_Loop+0xe08>)
 800324e:	496b      	ldr	r1, [pc, #428]	@ (80033fc <System_UI_Loop+0xe0c>)
 8003250:	486b      	ldr	r0, [pc, #428]	@ (8003400 <System_UI_Loop+0xe10>)
 8003252:	f001 ff0b 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8003256:	2304      	movs	r3, #4
 8003258:	9301      	str	r3, [sp, #4]
 800325a:	2301      	movs	r3, #1
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	4b65      	ldr	r3, [pc, #404]	@ (80033f4 <System_UI_Loop+0xe04>)
 8003260:	4a65      	ldr	r2, [pc, #404]	@ (80033f8 <System_UI_Loop+0xe08>)
 8003262:	496c      	ldr	r1, [pc, #432]	@ (8003414 <System_UI_Loop+0xe24>)
 8003264:	4866      	ldr	r0, [pc, #408]	@ (8003400 <System_UI_Loop+0xe10>)
 8003266:	f001 ff01 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 800326a:	2304      	movs	r3, #4
 800326c:	9301      	str	r3, [sp, #4]
 800326e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	4b5f      	ldr	r3, [pc, #380]	@ (80033f4 <System_UI_Loop+0xe04>)
 8003276:	4a68      	ldr	r2, [pc, #416]	@ (8003418 <System_UI_Loop+0xe28>)
 8003278:	4968      	ldr	r1, [pc, #416]	@ (800341c <System_UI_Loop+0xe2c>)
 800327a:	4861      	ldr	r0, [pc, #388]	@ (8003400 <System_UI_Loop+0xe10>)
 800327c:	f001 fef6 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003280:	2304      	movs	r3, #4
 8003282:	9301      	str	r3, [sp, #4]
 8003284:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	4b5a      	ldr	r3, [pc, #360]	@ (80033f4 <System_UI_Loop+0xe04>)
 800328c:	4a5d      	ldr	r2, [pc, #372]	@ (8003404 <System_UI_Loop+0xe14>)
 800328e:	495e      	ldr	r1, [pc, #376]	@ (8003408 <System_UI_Loop+0xe18>)
 8003290:	485b      	ldr	r0, [pc, #364]	@ (8003400 <System_UI_Loop+0xe10>)
 8003292:	f001 feeb 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8003296:	2304      	movs	r3, #4
 8003298:	9301      	str	r3, [sp, #4]
 800329a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	4a59      	ldr	r2, [pc, #356]	@ (800340c <System_UI_Loop+0xe1c>)
 80032a6:	495a      	ldr	r1, [pc, #360]	@ (8003410 <System_UI_Loop+0xe20>)
 80032a8:	4855      	ldr	r0, [pc, #340]	@ (8003400 <System_UI_Loop+0xe10>)
 80032aa:	f001 fedf 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("STM Settings") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 80032ae:	2304      	movs	r3, #4
 80032b0:	9301      	str	r3, [sp, #4]
 80032b2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80032bc:	4a5e      	ldr	r2, [pc, #376]	@ (8003438 <System_UI_Loop+0xe48>)
 80032be:	4959      	ldr	r1, [pc, #356]	@ (8003424 <System_UI_Loop+0xe34>)
 80032c0:	4859      	ldr	r0, [pc, #356]	@ (8003428 <System_UI_Loop+0xe38>)
 80032c2:	f001 fed3 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Settings") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 80032c6:	230c      	movs	r3, #12
 80032c8:	9301      	str	r3, [sp, #4]
 80032ca:	2364      	movs	r3, #100	@ 0x64
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	4b57      	ldr	r3, [pc, #348]	@ (800342c <System_UI_Loop+0xe3c>)
 80032d0:	4a5a      	ldr	r2, [pc, #360]	@ (800343c <System_UI_Loop+0xe4c>)
 80032d2:	4958      	ldr	r1, [pc, #352]	@ (8003434 <System_UI_Loop+0xe44>)
 80032d4:	4854      	ldr	r0, [pc, #336]	@ (8003428 <System_UI_Loop+0xe38>)
 80032d6:	f001 fec9 	bl	800506c <OLED_DoTweenObject>
            break;
 80032da:	e1b4      	b.n	8003646 <System_UI_Loop+0x1056>
        case 5:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80032dc:	2304      	movs	r3, #4
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	2301      	movs	r3, #1
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	4b43      	ldr	r3, [pc, #268]	@ (80033f4 <System_UI_Loop+0xe04>)
 80032e6:	4a44      	ldr	r2, [pc, #272]	@ (80033f8 <System_UI_Loop+0xe08>)
 80032e8:	494a      	ldr	r1, [pc, #296]	@ (8003414 <System_UI_Loop+0xe24>)
 80032ea:	4845      	ldr	r0, [pc, #276]	@ (8003400 <System_UI_Loop+0xe10>)
 80032ec:	f001 febe 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80032f0:	2304      	movs	r3, #4
 80032f2:	9301      	str	r3, [sp, #4]
 80032f4:	2301      	movs	r3, #1
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	4b3e      	ldr	r3, [pc, #248]	@ (80033f4 <System_UI_Loop+0xe04>)
 80032fa:	4a47      	ldr	r2, [pc, #284]	@ (8003418 <System_UI_Loop+0xe28>)
 80032fc:	4947      	ldr	r1, [pc, #284]	@ (800341c <System_UI_Loop+0xe2c>)
 80032fe:	4840      	ldr	r0, [pc, #256]	@ (8003400 <System_UI_Loop+0xe10>)
 8003300:	f001 feb4 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003304:	2304      	movs	r3, #4
 8003306:	9301      	str	r3, [sp, #4]
 8003308:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	4b39      	ldr	r3, [pc, #228]	@ (80033f4 <System_UI_Loop+0xe04>)
 8003310:	4a3e      	ldr	r2, [pc, #248]	@ (800340c <System_UI_Loop+0xe1c>)
 8003312:	493f      	ldr	r1, [pc, #252]	@ (8003410 <System_UI_Loop+0xe20>)
 8003314:	483a      	ldr	r0, [pc, #232]	@ (8003400 <System_UI_Loop+0xe10>)
 8003316:	f001 fea9 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 800331a:	2304      	movs	r3, #4
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	4b33      	ldr	r3, [pc, #204]	@ (80033f4 <System_UI_Loop+0xe04>)
 8003326:	4a34      	ldr	r2, [pc, #208]	@ (80033f8 <System_UI_Loop+0xe08>)
 8003328:	4934      	ldr	r1, [pc, #208]	@ (80033fc <System_UI_Loop+0xe0c>)
 800332a:	4835      	ldr	r0, [pc, #212]	@ (8003400 <System_UI_Loop+0xe10>)
 800332c:	f001 fe9e 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8003330:	2304      	movs	r3, #4
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	4a31      	ldr	r2, [pc, #196]	@ (8003404 <System_UI_Loop+0xe14>)
 8003340:	4931      	ldr	r1, [pc, #196]	@ (8003408 <System_UI_Loop+0xe18>)
 8003342:	482f      	ldr	r0, [pc, #188]	@ (8003400 <System_UI_Loop+0xe10>)
 8003344:	f001 fe92 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Developer!") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8003348:	2304      	movs	r3, #4
 800334a:	9301      	str	r3, [sp, #4]
 800334c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003356:	4a3a      	ldr	r2, [pc, #232]	@ (8003440 <System_UI_Loop+0xe50>)
 8003358:	4932      	ldr	r1, [pc, #200]	@ (8003424 <System_UI_Loop+0xe34>)
 800335a:	4833      	ldr	r0, [pc, #204]	@ (8003428 <System_UI_Loop+0xe38>)
 800335c:	f001 fe86 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("About") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 8003360:	230c      	movs	r3, #12
 8003362:	9301      	str	r3, [sp, #4]
 8003364:	2364      	movs	r3, #100	@ 0x64
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	4b30      	ldr	r3, [pc, #192]	@ (800342c <System_UI_Loop+0xe3c>)
 800336a:	4a36      	ldr	r2, [pc, #216]	@ (8003444 <System_UI_Loop+0xe54>)
 800336c:	4931      	ldr	r1, [pc, #196]	@ (8003434 <System_UI_Loop+0xe44>)
 800336e:	482e      	ldr	r0, [pc, #184]	@ (8003428 <System_UI_Loop+0xe38>)
 8003370:	f001 fe7c 	bl	800506c <OLED_DoTweenObject>
            break;
 8003374:	e167      	b.n	8003646 <System_UI_Loop+0x1056>
        default:
            OLED_DrawTitleBar("UnikoZera's UI");
 8003376:	4834      	ldr	r0, [pc, #208]	@ (8003448 <System_UI_Loop+0xe58>)
 8003378:	f001 feb7 	bl	80050ea <OLED_DrawTitleBar>
            break;
 800337c:	e163      	b.n	8003646 <System_UI_Loop+0x1056>
        }
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_SETTINGS)
 800337e:	4b33      	ldr	r3, [pc, #204]	@ (800344c <System_UI_Loop+0xe5c>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d104      	bne.n	8003390 <System_UI_Loop+0xda0>
 8003386:	4b32      	ldr	r3, [pc, #200]	@ (8003450 <System_UI_Loop+0xe60>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b01      	cmp	r3, #1
 800338c:	f000 815b 	beq.w	8003646 <System_UI_Loop+0x1056>
    {
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_STATUS)
 8003390:	4b2e      	ldr	r3, [pc, #184]	@ (800344c <System_UI_Loop+0xe5c>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d104      	bne.n	80033a2 <System_UI_Loop+0xdb2>
 8003398:	4b2d      	ldr	r3, [pc, #180]	@ (8003450 <System_UI_Loop+0xe60>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b02      	cmp	r3, #2
 800339e:	f000 8152 	beq.w	8003646 <System_UI_Loop+0x1056>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_ABOUT)
 80033a2:	4b2a      	ldr	r3, [pc, #168]	@ (800344c <System_UI_Loop+0xe5c>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d104      	bne.n	80033b4 <System_UI_Loop+0xdc4>
 80033aa:	4b29      	ldr	r3, [pc, #164]	@ (8003450 <System_UI_Loop+0xe60>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	f000 8149 	beq.w	8003646 <System_UI_Loop+0x1056>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_TOOLS)
 80033b4:	4b25      	ldr	r3, [pc, #148]	@ (800344c <System_UI_Loop+0xe5c>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d104      	bne.n	80033c6 <System_UI_Loop+0xdd6>
 80033bc:	4b24      	ldr	r3, [pc, #144]	@ (8003450 <System_UI_Loop+0xe60>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	f000 8140 	beq.w	8003646 <System_UI_Loop+0x1056>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_GAMES)
 80033c6:	4b21      	ldr	r3, [pc, #132]	@ (800344c <System_UI_Loop+0xe5c>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	f040 80fc 	bne.w	80035c8 <System_UI_Loop+0xfd8>
 80033d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003450 <System_UI_Loop+0xe60>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b05      	cmp	r3, #5
 80033d6:	f040 80f7 	bne.w	80035c8 <System_UI_Loop+0xfd8>
    {
        switch (menuSelection)
 80033da:	4b1e      	ldr	r3, [pc, #120]	@ (8003454 <System_UI_Loop+0xe64>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b03      	cmp	r3, #3
 80033e0:	f000 80b7 	beq.w	8003552 <System_UI_Loop+0xf62>
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	f300 80ed 	bgt.w	80035c4 <System_UI_Loop+0xfd4>
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d034      	beq.n	8003458 <System_UI_Loop+0xe68>
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d076      	beq.n	80034e0 <System_UI_Loop+0xef0>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, 500, EASE_IN_CUBIC);
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
            break;
        default:
            break;
 80033f2:	e0e7      	b.n	80035c4 <System_UI_Loop+0xfd4>
 80033f4:	c1200000 	.word	0xc1200000
 80033f8:	42480000 	.word	0x42480000
 80033fc:	0800ab24 	.word	0x0800ab24
 8003400:	20003338 	.word	0x20003338
 8003404:	42880000 	.word	0x42880000
 8003408:	0800ab58 	.word	0x0800ab58
 800340c:	42600000 	.word	0x42600000
 8003410:	0800ab48 	.word	0x0800ab48
 8003414:	0800ab30 	.word	0x0800ab30
 8003418:	42300000 	.word	0x42300000
 800341c:	0800ab3c 	.word	0x0800ab3c
 8003420:	42ae0000 	.word	0x42ae0000
 8003424:	0800aba4 	.word	0x0800aba4
 8003428:	2000392c 	.word	0x2000392c
 800342c:	41200000 	.word	0x41200000
 8003430:	421c0000 	.word	0x421c0000
 8003434:	0800abbc 	.word	0x0800abbc
 8003438:	42960000 	.word	0x42960000
 800343c:	424c0000 	.word	0x424c0000
 8003440:	427c0000 	.word	0x427c0000
 8003444:	42040000 	.word	0x42040000
 8003448:	0800acbc 	.word	0x0800acbc
 800344c:	20000001 	.word	0x20000001
 8003450:	20000b6d 	.word	0x20000b6d
 8003454:	20000002 	.word	0x20000002
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003458:	2304      	movs	r3, #4
 800345a:	9301      	str	r3, [sp, #4]
 800345c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	4b92      	ldr	r3, [pc, #584]	@ (80036ac <System_UI_Loop+0x10bc>)
 8003464:	4a92      	ldr	r2, [pc, #584]	@ (80036b0 <System_UI_Loop+0x10c0>)
 8003466:	4993      	ldr	r1, [pc, #588]	@ (80036b4 <System_UI_Loop+0x10c4>)
 8003468:	4893      	ldr	r0, [pc, #588]	@ (80036b8 <System_UI_Loop+0x10c8>)
 800346a:	f001 fdff 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 800346e:	2304      	movs	r3, #4
 8003470:	9301      	str	r3, [sp, #4]
 8003472:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	4a8f      	ldr	r2, [pc, #572]	@ (80036bc <System_UI_Loop+0x10cc>)
 800347e:	4990      	ldr	r1, [pc, #576]	@ (80036c0 <System_UI_Loop+0x10d0>)
 8003480:	488d      	ldr	r0, [pc, #564]	@ (80036b8 <System_UI_Loop+0x10c8>)
 8003482:	f001 fdf3 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003486:	2304      	movs	r3, #4
 8003488:	9301      	str	r3, [sp, #4]
 800348a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	4b86      	ldr	r3, [pc, #536]	@ (80036ac <System_UI_Loop+0x10bc>)
 8003492:	4a87      	ldr	r2, [pc, #540]	@ (80036b0 <System_UI_Loop+0x10c0>)
 8003494:	498b      	ldr	r1, [pc, #556]	@ (80036c4 <System_UI_Loop+0x10d4>)
 8003496:	4888      	ldr	r0, [pc, #544]	@ (80036b8 <System_UI_Loop+0x10c8>)
 8003498:	f001 fde8 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 800349c:	2304      	movs	r3, #4
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	4b81      	ldr	r3, [pc, #516]	@ (80036ac <System_UI_Loop+0x10bc>)
 80034a8:	4a84      	ldr	r2, [pc, #528]	@ (80036bc <System_UI_Loop+0x10cc>)
 80034aa:	4987      	ldr	r1, [pc, #540]	@ (80036c8 <System_UI_Loop+0x10d8>)
 80034ac:	4882      	ldr	r0, [pc, #520]	@ (80036b8 <System_UI_Loop+0x10c8>)
 80034ae:	f001 fddd 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Greedy Snake") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 80034b2:	2304      	movs	r3, #4
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80034c0:	4a82      	ldr	r2, [pc, #520]	@ (80036cc <System_UI_Loop+0x10dc>)
 80034c2:	4983      	ldr	r1, [pc, #524]	@ (80036d0 <System_UI_Loop+0x10e0>)
 80034c4:	4883      	ldr	r0, [pc, #524]	@ (80036d4 <System_UI_Loop+0x10e4>)
 80034c6:	f001 fdd1 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Snake") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 80034ca:	230c      	movs	r3, #12
 80034cc:	9301      	str	r3, [sp, #4]
 80034ce:	2364      	movs	r3, #100	@ 0x64
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	4b81      	ldr	r3, [pc, #516]	@ (80036d8 <System_UI_Loop+0x10e8>)
 80034d4:	4a81      	ldr	r2, [pc, #516]	@ (80036dc <System_UI_Loop+0x10ec>)
 80034d6:	4982      	ldr	r1, [pc, #520]	@ (80036e0 <System_UI_Loop+0x10f0>)
 80034d8:	487e      	ldr	r0, [pc, #504]	@ (80036d4 <System_UI_Loop+0x10e4>)
 80034da:	f001 fdc7 	bl	800506c <OLED_DoTweenObject>
            break;
 80034de:	e072      	b.n	80035c6 <System_UI_Loop+0xfd6>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 80034e0:	2304      	movs	r3, #4
 80034e2:	9301      	str	r3, [sp, #4]
 80034e4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	4a70      	ldr	r2, [pc, #448]	@ (80036b0 <System_UI_Loop+0x10c0>)
 80034f0:	4974      	ldr	r1, [pc, #464]	@ (80036c4 <System_UI_Loop+0x10d4>)
 80034f2:	4871      	ldr	r0, [pc, #452]	@ (80036b8 <System_UI_Loop+0x10c8>)
 80034f4:	f001 fdba 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80034f8:	2304      	movs	r3, #4
 80034fa:	9301      	str	r3, [sp, #4]
 80034fc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	4b6a      	ldr	r3, [pc, #424]	@ (80036ac <System_UI_Loop+0x10bc>)
 8003504:	4a6d      	ldr	r2, [pc, #436]	@ (80036bc <System_UI_Loop+0x10cc>)
 8003506:	496e      	ldr	r1, [pc, #440]	@ (80036c0 <System_UI_Loop+0x10d0>)
 8003508:	486b      	ldr	r0, [pc, #428]	@ (80036b8 <System_UI_Loop+0x10c8>)
 800350a:	f001 fdaf 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 800350e:	2304      	movs	r3, #4
 8003510:	9301      	str	r3, [sp, #4]
 8003512:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	4b64      	ldr	r3, [pc, #400]	@ (80036ac <System_UI_Loop+0x10bc>)
 800351a:	4a68      	ldr	r2, [pc, #416]	@ (80036bc <System_UI_Loop+0x10cc>)
 800351c:	496a      	ldr	r1, [pc, #424]	@ (80036c8 <System_UI_Loop+0x10d8>)
 800351e:	4866      	ldr	r0, [pc, #408]	@ (80036b8 <System_UI_Loop+0x10c8>)
 8003520:	f001 fda4 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Here is 2048!") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8003524:	2304      	movs	r3, #4
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003532:	4a6c      	ldr	r2, [pc, #432]	@ (80036e4 <System_UI_Loop+0x10f4>)
 8003534:	4966      	ldr	r1, [pc, #408]	@ (80036d0 <System_UI_Loop+0x10e0>)
 8003536:	4867      	ldr	r0, [pc, #412]	@ (80036d4 <System_UI_Loop+0x10e4>)
 8003538:	f001 fd98 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("2048") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 800353c:	230c      	movs	r3, #12
 800353e:	9301      	str	r3, [sp, #4]
 8003540:	2364      	movs	r3, #100	@ 0x64
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	4b64      	ldr	r3, [pc, #400]	@ (80036d8 <System_UI_Loop+0x10e8>)
 8003546:	4a68      	ldr	r2, [pc, #416]	@ (80036e8 <System_UI_Loop+0x10f8>)
 8003548:	4965      	ldr	r1, [pc, #404]	@ (80036e0 <System_UI_Loop+0x10f0>)
 800354a:	4862      	ldr	r0, [pc, #392]	@ (80036d4 <System_UI_Loop+0x10e4>)
 800354c:	f001 fd8e 	bl	800506c <OLED_DoTweenObject>
            break;
 8003550:	e039      	b.n	80035c6 <System_UI_Loop+0xfd6>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8003552:	2304      	movs	r3, #4
 8003554:	9301      	str	r3, [sp, #4]
 8003556:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	4a56      	ldr	r2, [pc, #344]	@ (80036bc <System_UI_Loop+0x10cc>)
 8003562:	4959      	ldr	r1, [pc, #356]	@ (80036c8 <System_UI_Loop+0x10d8>)
 8003564:	4854      	ldr	r0, [pc, #336]	@ (80036b8 <System_UI_Loop+0x10c8>)
 8003566:	f001 fd81 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 800356a:	2304      	movs	r3, #4
 800356c:	9301      	str	r3, [sp, #4]
 800356e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	4b4d      	ldr	r3, [pc, #308]	@ (80036ac <System_UI_Loop+0x10bc>)
 8003576:	4a51      	ldr	r2, [pc, #324]	@ (80036bc <System_UI_Loop+0x10cc>)
 8003578:	4951      	ldr	r1, [pc, #324]	@ (80036c0 <System_UI_Loop+0x10d0>)
 800357a:	484f      	ldr	r0, [pc, #316]	@ (80036b8 <System_UI_Loop+0x10c8>)
 800357c:	f001 fd76 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003580:	2304      	movs	r3, #4
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	4b48      	ldr	r3, [pc, #288]	@ (80036ac <System_UI_Loop+0x10bc>)
 800358c:	4a48      	ldr	r2, [pc, #288]	@ (80036b0 <System_UI_Loop+0x10c0>)
 800358e:	494d      	ldr	r1, [pc, #308]	@ (80036c4 <System_UI_Loop+0x10d4>)
 8003590:	4849      	ldr	r0, [pc, #292]	@ (80036b8 <System_UI_Loop+0x10c8>)
 8003592:	f001 fd6b 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8003596:	2304      	movs	r3, #4
 8003598:	9301      	str	r3, [sp, #4]
 800359a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80035a4:	4a49      	ldr	r2, [pc, #292]	@ (80036cc <System_UI_Loop+0x10dc>)
 80035a6:	494a      	ldr	r1, [pc, #296]	@ (80036d0 <System_UI_Loop+0x10e0>)
 80035a8:	484a      	ldr	r0, [pc, #296]	@ (80036d4 <System_UI_Loop+0x10e4>)
 80035aa:	f001 fd5f 	bl	800506c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 80035ae:	230c      	movs	r3, #12
 80035b0:	9301      	str	r3, [sp, #4]
 80035b2:	2364      	movs	r3, #100	@ 0x64
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	4b48      	ldr	r3, [pc, #288]	@ (80036d8 <System_UI_Loop+0x10e8>)
 80035b8:	4a4b      	ldr	r2, [pc, #300]	@ (80036e8 <System_UI_Loop+0x10f8>)
 80035ba:	4949      	ldr	r1, [pc, #292]	@ (80036e0 <System_UI_Loop+0x10f0>)
 80035bc:	4845      	ldr	r0, [pc, #276]	@ (80036d4 <System_UI_Loop+0x10e4>)
 80035be:	f001 fd55 	bl	800506c <OLED_DoTweenObject>
            break;
 80035c2:	e000      	b.n	80035c6 <System_UI_Loop+0xfd6>
            break;
 80035c4:	bf00      	nop
        switch (menuSelection)
 80035c6:	e03e      	b.n	8003646 <System_UI_Loop+0x1056>
        }
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_GAMES && menuSelection == 1)
 80035c8:	4b48      	ldr	r3, [pc, #288]	@ (80036ec <System_UI_Loop+0x10fc>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d10d      	bne.n	80035ec <System_UI_Loop+0xffc>
 80035d0:	4b47      	ldr	r3, [pc, #284]	@ (80036f0 <System_UI_Loop+0x1100>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b05      	cmp	r3, #5
 80035d6:	d109      	bne.n	80035ec <System_UI_Loop+0xffc>
 80035d8:	4b46      	ldr	r3, [pc, #280]	@ (80036f4 <System_UI_Loop+0x1104>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d105      	bne.n	80035ec <System_UI_Loop+0xffc>
    {
        cancelSelection = true;
 80035e0:	4b45      	ldr	r3, [pc, #276]	@ (80036f8 <System_UI_Loop+0x1108>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
        Snake_GameLoop();
 80035e6:	f7fd fb1b 	bl	8000c20 <Snake_GameLoop>
 80035ea:	e02c      	b.n	8003646 <System_UI_Loop+0x1056>
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_GAMES && menuSelection == 2)
 80035ec:	4b3f      	ldr	r3, [pc, #252]	@ (80036ec <System_UI_Loop+0x10fc>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d128      	bne.n	8003646 <System_UI_Loop+0x1056>
 80035f4:	4b3e      	ldr	r3, [pc, #248]	@ (80036f0 <System_UI_Loop+0x1100>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b05      	cmp	r3, #5
 80035fa:	d124      	bne.n	8003646 <System_UI_Loop+0x1056>
 80035fc:	4b3d      	ldr	r3, [pc, #244]	@ (80036f4 <System_UI_Loop+0x1104>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b02      	cmp	r3, #2
 8003602:	d105      	bne.n	8003610 <System_UI_Loop+0x1020>
    {
        cancelSelection = true;
 8003604:	4b3c      	ldr	r3, [pc, #240]	@ (80036f8 <System_UI_Loop+0x1108>)
 8003606:	2201      	movs	r2, #1
 8003608:	701a      	strb	r2, [r3, #0]
        Game2048_GameLoop();
 800360a:	f7fe f817 	bl	800163c <Game2048_GameLoop>
 800360e:	e01a      	b.n	8003646 <System_UI_Loop+0x1056>
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_SETTINGS)
 8003610:	4b36      	ldr	r3, [pc, #216]	@ (80036ec <System_UI_Loop+0x10fc>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b03      	cmp	r3, #3
 8003616:	d116      	bne.n	8003646 <System_UI_Loop+0x1056>
 8003618:	4b35      	ldr	r3, [pc, #212]	@ (80036f0 <System_UI_Loop+0x1100>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d012      	beq.n	8003646 <System_UI_Loop+0x1056>
    {
        /* code */
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_STATUS)
 8003620:	4b32      	ldr	r3, [pc, #200]	@ (80036ec <System_UI_Loop+0x10fc>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b03      	cmp	r3, #3
 8003626:	d10e      	bne.n	8003646 <System_UI_Loop+0x1056>
 8003628:	4b31      	ldr	r3, [pc, #196]	@ (80036f0 <System_UI_Loop+0x1100>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d00a      	beq.n	8003646 <System_UI_Loop+0x1056>
    {
        /* code */
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_ABOUT)
 8003630:	4b2e      	ldr	r3, [pc, #184]	@ (80036ec <System_UI_Loop+0x10fc>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b03      	cmp	r3, #3
 8003636:	d106      	bne.n	8003646 <System_UI_Loop+0x1056>
 8003638:	4b2d      	ldr	r3, [pc, #180]	@ (80036f0 <System_UI_Loop+0x1100>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b03      	cmp	r3, #3
 800363e:	d002      	beq.n	8003646 <System_UI_Loop+0x1056>
    {
        /* code */
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_TOOLS)
 8003640:	4b2a      	ldr	r3, [pc, #168]	@ (80036ec <System_UI_Loop+0x10fc>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b03      	cmp	r3, #3
    }
    
#pragma endregion PlayerSelection

#pragma region ResetAnimation //完成换级时候让动画复位
    if (menuRank == 1 && OLED_GetAnimationStates(&Games_AnimationManager, "Snake") == 0)
 8003646:	4b29      	ldr	r3, [pc, #164]	@ (80036ec <System_UI_Loop+0x10fc>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d125      	bne.n	800369a <System_UI_Loop+0x10aa>
 800364e:	492b      	ldr	r1, [pc, #172]	@ (80036fc <System_UI_Loop+0x110c>)
 8003650:	482b      	ldr	r0, [pc, #172]	@ (8003700 <System_UI_Loop+0x1110>)
 8003652:	f001 fcf5 	bl	8005040 <OLED_GetAnimationStates>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d11e      	bne.n	800369a <System_UI_Loop+0x10aa>
    {
        OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, EASE_IN_CIRC);
 800365c:	230a      	movs	r3, #10
 800365e:	9301      	str	r3, [sp, #4]
 8003660:	2301      	movs	r3, #1
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003668:	4a26      	ldr	r2, [pc, #152]	@ (8003704 <System_UI_Loop+0x1114>)
 800366a:	4924      	ldr	r1, [pc, #144]	@ (80036fc <System_UI_Loop+0x110c>)
 800366c:	4824      	ldr	r0, [pc, #144]	@ (8003700 <System_UI_Loop+0x1110>)
 800366e:	f001 fcfd 	bl	800506c <OLED_DoTweenObject>
        OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, EASE_IN_CIRC);
 8003672:	230a      	movs	r3, #10
 8003674:	9301      	str	r3, [sp, #4]
 8003676:	2301      	movs	r3, #1
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	4b23      	ldr	r3, [pc, #140]	@ (8003708 <System_UI_Loop+0x1118>)
 800367c:	4a21      	ldr	r2, [pc, #132]	@ (8003704 <System_UI_Loop+0x1114>)
 800367e:	4923      	ldr	r1, [pc, #140]	@ (800370c <System_UI_Loop+0x111c>)
 8003680:	481f      	ldr	r0, [pc, #124]	@ (8003700 <System_UI_Loop+0x1110>)
 8003682:	f001 fcf3 	bl	800506c <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, EASE_IN_CIRC);
 8003686:	230a      	movs	r3, #10
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	2301      	movs	r3, #1
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	4b20      	ldr	r3, [pc, #128]	@ (8003710 <System_UI_Loop+0x1120>)
 8003690:	4a1c      	ldr	r2, [pc, #112]	@ (8003704 <System_UI_Loop+0x1114>)
 8003692:	4920      	ldr	r1, [pc, #128]	@ (8003714 <System_UI_Loop+0x1124>)
 8003694:	480f      	ldr	r0, [pc, #60]	@ (80036d4 <System_UI_Loop+0x10e4>)
 8003696:	f001 fce9 	bl	800506c <OLED_DoTweenObject>
    }

#pragma endregion ResetAnimation

    preMenuSelection = menuSelection;
 800369a:	4b16      	ldr	r3, [pc, #88]	@ (80036f4 <System_UI_Loop+0x1104>)
 800369c:	781a      	ldrb	r2, [r3, #0]
 800369e:	4b1e      	ldr	r3, [pc, #120]	@ (8003718 <System_UI_Loop+0x1128>)
 80036a0:	701a      	strb	r2, [r3, #0]
}
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036aa:	bf00      	nop
 80036ac:	c1200000 	.word	0xc1200000
 80036b0:	42480000 	.word	0x42480000
 80036b4:	0800ab24 	.word	0x0800ab24
 80036b8:	20003338 	.word	0x20003338
 80036bc:	42600000 	.word	0x42600000
 80036c0:	0800ab64 	.word	0x0800ab64
 80036c4:	0800ab70 	.word	0x0800ab70
 80036c8:	0800ab7c 	.word	0x0800ab7c
 80036cc:	42960000 	.word	0x42960000
 80036d0:	0800aba4 	.word	0x0800aba4
 80036d4:	2000392c 	.word	0x2000392c
 80036d8:	41200000 	.word	0x41200000
 80036dc:	42040000 	.word	0x42040000
 80036e0:	0800abbc 	.word	0x0800abbc
 80036e4:	42a20000 	.word	0x42a20000
 80036e8:	41d80000 	.word	0x41d80000
 80036ec:	20000001 	.word	0x20000001
 80036f0:	20000b6d 	.word	0x20000b6d
 80036f4:	20000002 	.word	0x20000002
 80036f8:	20000b6f 	.word	0x20000b6f
 80036fc:	0800ab88 	.word	0x0800ab88
 8003700:	20001574 	.word	0x20001574
 8003704:	c2b40000 	.word	0xc2b40000
 8003708:	41e80000 	.word	0x41e80000
 800370c:	0800ab90 	.word	0x0800ab90
 8003710:	42280000 	.word	0x42280000
 8003714:	0800ab98 	.word	0x0800ab98
 8003718:	20000b6e 	.word	0x20000b6e

0800371c <SystemGetsSignal>:

void SystemGetsSignal() // 这里是旋钮数据的获取
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af02      	add	r7, sp, #8
    static uint16_t preCount = 32767;
    uint16_t pageCount;
    if (currentPage == UI_PAGE_MENU)
 8003722:	4ba5      	ldr	r3, [pc, #660]	@ (80039b8 <SystemGetsSignal+0x29c>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d102      	bne.n	8003730 <SystemGetsSignal+0x14>
    {
        pageCount = MainMenuItemCount;
 800372a:	2305      	movs	r3, #5
 800372c:	80fb      	strh	r3, [r7, #6]
 800372e:	e021      	b.n	8003774 <SystemGetsSignal+0x58>
    }
    else if (currentPage == UI_PAGE_SETTINGS)
 8003730:	4ba1      	ldr	r3, [pc, #644]	@ (80039b8 <SystemGetsSignal+0x29c>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d102      	bne.n	800373e <SystemGetsSignal+0x22>
    {
        pageCount = SettingsItemCount;
 8003738:	2305      	movs	r3, #5
 800373a:	80fb      	strh	r3, [r7, #6]
 800373c:	e01a      	b.n	8003774 <SystemGetsSignal+0x58>
    }
    else if (currentPage == UI_PAGE_STATUS)
 800373e:	4b9e      	ldr	r3, [pc, #632]	@ (80039b8 <SystemGetsSignal+0x29c>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d102      	bne.n	800374c <SystemGetsSignal+0x30>
    {
        pageCount = StatusItemCount;
 8003746:	2305      	movs	r3, #5
 8003748:	80fb      	strh	r3, [r7, #6]
 800374a:	e013      	b.n	8003774 <SystemGetsSignal+0x58>
    }
    else if (currentPage == UI_PAGE_ABOUT)
 800374c:	4b9a      	ldr	r3, [pc, #616]	@ (80039b8 <SystemGetsSignal+0x29c>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b03      	cmp	r3, #3
 8003752:	d102      	bne.n	800375a <SystemGetsSignal+0x3e>
    {
        pageCount = AboutItemCount;
 8003754:	2305      	movs	r3, #5
 8003756:	80fb      	strh	r3, [r7, #6]
 8003758:	e00c      	b.n	8003774 <SystemGetsSignal+0x58>
    }
    else if (currentPage == UI_PAGE_TOOLS)
 800375a:	4b97      	ldr	r3, [pc, #604]	@ (80039b8 <SystemGetsSignal+0x29c>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b04      	cmp	r3, #4
 8003760:	d102      	bne.n	8003768 <SystemGetsSignal+0x4c>
    {
        pageCount = ToolsItemCount;
 8003762:	2305      	movs	r3, #5
 8003764:	80fb      	strh	r3, [r7, #6]
 8003766:	e005      	b.n	8003774 <SystemGetsSignal+0x58>
    }
    else if (currentPage == UI_PAGE_GAMES)
 8003768:	4b93      	ldr	r3, [pc, #588]	@ (80039b8 <SystemGetsSignal+0x29c>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b05      	cmp	r3, #5
 800376e:	d101      	bne.n	8003774 <SystemGetsSignal+0x58>
    {
        pageCount = GamesItemCount;
 8003770:	2303      	movs	r3, #3
 8003772:	80fb      	strh	r3, [r7, #6]
    }

    if (!cancelSelection)
 8003774:	4b91      	ldr	r3, [pc, #580]	@ (80039bc <SystemGetsSignal+0x2a0>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	f083 0301 	eor.w	r3, r3, #1
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d039      	beq.n	80037f6 <SystemGetsSignal+0xda>
    {
        if (count - preCount > 1)
 8003782:	4b8f      	ldr	r3, [pc, #572]	@ (80039c0 <SystemGetsSignal+0x2a4>)
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	4b8e      	ldr	r3, [pc, #568]	@ (80039c4 <SystemGetsSignal+0x2a8>)
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b01      	cmp	r3, #1
 8003790:	dd14      	ble.n	80037bc <SystemGetsSignal+0xa0>
        {
            if (menuSelection < pageCount)
 8003792:	4b8d      	ldr	r3, [pc, #564]	@ (80039c8 <SystemGetsSignal+0x2ac>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	88fb      	ldrh	r3, [r7, #6]
 800379a:	4293      	cmp	r3, r2
 800379c:	d906      	bls.n	80037ac <SystemGetsSignal+0x90>
            {
                menuSelection++;
 800379e:	4b8a      	ldr	r3, [pc, #552]	@ (80039c8 <SystemGetsSignal+0x2ac>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	3301      	adds	r3, #1
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	4b88      	ldr	r3, [pc, #544]	@ (80039c8 <SystemGetsSignal+0x2ac>)
 80037a8:	701a      	strb	r2, [r3, #0]
 80037aa:	e002      	b.n	80037b2 <SystemGetsSignal+0x96>
            }
            else
            {
                menuSelection = 1;
 80037ac:	4b86      	ldr	r3, [pc, #536]	@ (80039c8 <SystemGetsSignal+0x2ac>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	701a      	strb	r2, [r3, #0]
            }

            preCount = count;
 80037b2:	4b83      	ldr	r3, [pc, #524]	@ (80039c0 <SystemGetsSignal+0x2a4>)
 80037b4:	881a      	ldrh	r2, [r3, #0]
 80037b6:	4b83      	ldr	r3, [pc, #524]	@ (80039c4 <SystemGetsSignal+0x2a8>)
 80037b8:	801a      	strh	r2, [r3, #0]
 80037ba:	e020      	b.n	80037fe <SystemGetsSignal+0xe2>
        }
        else if (count - preCount < -1)
 80037bc:	4b80      	ldr	r3, [pc, #512]	@ (80039c0 <SystemGetsSignal+0x2a4>)
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	4b80      	ldr	r3, [pc, #512]	@ (80039c4 <SystemGetsSignal+0x2a8>)
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037cc:	da17      	bge.n	80037fe <SystemGetsSignal+0xe2>
        {

            if (menuSelection > 1)
 80037ce:	4b7e      	ldr	r3, [pc, #504]	@ (80039c8 <SystemGetsSignal+0x2ac>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d906      	bls.n	80037e4 <SystemGetsSignal+0xc8>
            {
                menuSelection--;
 80037d6:	4b7c      	ldr	r3, [pc, #496]	@ (80039c8 <SystemGetsSignal+0x2ac>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	3b01      	subs	r3, #1
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	4b7a      	ldr	r3, [pc, #488]	@ (80039c8 <SystemGetsSignal+0x2ac>)
 80037e0:	701a      	strb	r2, [r3, #0]
 80037e2:	e003      	b.n	80037ec <SystemGetsSignal+0xd0>
            }
            else
            {
                menuSelection = pageCount;
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	4b77      	ldr	r3, [pc, #476]	@ (80039c8 <SystemGetsSignal+0x2ac>)
 80037ea:	701a      	strb	r2, [r3, #0]
            }

            preCount = count;
 80037ec:	4b74      	ldr	r3, [pc, #464]	@ (80039c0 <SystemGetsSignal+0x2a4>)
 80037ee:	881a      	ldrh	r2, [r3, #0]
 80037f0:	4b74      	ldr	r3, [pc, #464]	@ (80039c4 <SystemGetsSignal+0x2a8>)
 80037f2:	801a      	strh	r2, [r3, #0]
 80037f4:	e003      	b.n	80037fe <SystemGetsSignal+0xe2>
        }
    }
    else
        preCount = count;
 80037f6:	4b72      	ldr	r3, [pc, #456]	@ (80039c0 <SystemGetsSignal+0x2a4>)
 80037f8:	881a      	ldrh	r2, [r3, #0]
 80037fa:	4b72      	ldr	r3, [pc, #456]	@ (80039c4 <SystemGetsSignal+0x2a8>)
 80037fc:	801a      	strh	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 80037fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003802:	4872      	ldr	r0, [pc, #456]	@ (80039cc <SystemGetsSignal+0x2b0>)
 8003804:	f002 fc9a 	bl	800613c <HAL_GPIO_ReadPin>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	f040 82f3 	bne.w	8003df6 <SystemGetsSignal+0x6da>
    {
        HAL_Delay(50); // 防抖动延时
 8003810:	2032      	movs	r0, #50	@ 0x32
 8003812:	f002 f87d 	bl	8005910 <HAL_Delay>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && !gameOver)
 8003816:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800381a:	486c      	ldr	r0, [pc, #432]	@ (80039cc <SystemGetsSignal+0x2b0>)
 800381c:	f002 fc8e 	bl	800613c <HAL_GPIO_ReadPin>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	f040 82e7 	bne.w	8003df6 <SystemGetsSignal+0x6da>
 8003828:	4b69      	ldr	r3, [pc, #420]	@ (80039d0 <SystemGetsSignal+0x2b4>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	f083 0301 	eor.w	r3, r3, #1
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 82df 	beq.w	8003df6 <SystemGetsSignal+0x6da>
        {
            if (menuRank == 1 && menuSelection == 1)
 8003838:	4b66      	ldr	r3, [pc, #408]	@ (80039d4 <SystemGetsSignal+0x2b8>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b01      	cmp	r3, #1
 800383e:	f040 80e7 	bne.w	8003a10 <SystemGetsSignal+0x2f4>
 8003842:	4b61      	ldr	r3, [pc, #388]	@ (80039c8 <SystemGetsSignal+0x2ac>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b01      	cmp	r3, #1
 8003848:	f040 80e2 	bne.w	8003a10 <SystemGetsSignal+0x2f4>
            {
                menuRank = 2;
 800384c:	4b61      	ldr	r3, [pc, #388]	@ (80039d4 <SystemGetsSignal+0x2b8>)
 800384e:	2202      	movs	r2, #2
 8003850:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8003852:	4b59      	ldr	r3, [pc, #356]	@ (80039b8 <SystemGetsSignal+0x29c>)
 8003854:	2205      	movs	r2, #5
 8003856:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 1000, EASE_IN_CIRC);
 8003858:	4b5b      	ldr	r3, [pc, #364]	@ (80039c8 <SystemGetsSignal+0x2ac>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	f1c3 0202 	rsb	r2, r3, #2
 8003860:	4613      	mov	r3, r2
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	4413      	add	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	3303      	adds	r3, #3
 800386c:	4618      	mov	r0, r3
 800386e:	f7fc fd39 	bl	80002e4 <__aeabi_i2f>
 8003872:	4603      	mov	r3, r0
 8003874:	220a      	movs	r2, #10
 8003876:	9201      	str	r2, [sp, #4]
 8003878:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800387c:	9200      	str	r2, [sp, #0]
 800387e:	4a56      	ldr	r2, [pc, #344]	@ (80039d8 <SystemGetsSignal+0x2bc>)
 8003880:	4956      	ldr	r1, [pc, #344]	@ (80039dc <SystemGetsSignal+0x2c0>)
 8003882:	4857      	ldr	r0, [pc, #348]	@ (80039e0 <SystemGetsSignal+0x2c4>)
 8003884:	f001 fbf2 	bl	800506c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003888:	2064      	movs	r0, #100	@ 0x64
 800388a:	f002 f841 	bl	8005910 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 1000, EASE_IN_CIRC);
 800388e:	4b4e      	ldr	r3, [pc, #312]	@ (80039c8 <SystemGetsSignal+0x2ac>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	f1c3 0203 	rsb	r2, r3, #3
 8003896:	4613      	mov	r3, r2
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	3303      	adds	r3, #3
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fc fd1e 	bl	80002e4 <__aeabi_i2f>
 80038a8:	4603      	mov	r3, r0
 80038aa:	220a      	movs	r2, #10
 80038ac:	9201      	str	r2, [sp, #4]
 80038ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80038b2:	9200      	str	r2, [sp, #0]
 80038b4:	4a48      	ldr	r2, [pc, #288]	@ (80039d8 <SystemGetsSignal+0x2bc>)
 80038b6:	494b      	ldr	r1, [pc, #300]	@ (80039e4 <SystemGetsSignal+0x2c8>)
 80038b8:	4849      	ldr	r0, [pc, #292]	@ (80039e0 <SystemGetsSignal+0x2c4>)
 80038ba:	f001 fbd7 	bl	800506c <OLED_DoTweenObject>
                HAL_Delay(100);
 80038be:	2064      	movs	r0, #100	@ 0x64
 80038c0:	f002 f826 	bl	8005910 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 1000, EASE_IN_CIRC);
 80038c4:	4b40      	ldr	r3, [pc, #256]	@ (80039c8 <SystemGetsSignal+0x2ac>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	f1c3 0204 	rsb	r2, r3, #4
 80038cc:	4613      	mov	r3, r2
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	3303      	adds	r3, #3
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fc fd03 	bl	80002e4 <__aeabi_i2f>
 80038de:	4603      	mov	r3, r0
 80038e0:	220a      	movs	r2, #10
 80038e2:	9201      	str	r2, [sp, #4]
 80038e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80038e8:	9200      	str	r2, [sp, #0]
 80038ea:	4a3b      	ldr	r2, [pc, #236]	@ (80039d8 <SystemGetsSignal+0x2bc>)
 80038ec:	493e      	ldr	r1, [pc, #248]	@ (80039e8 <SystemGetsSignal+0x2cc>)
 80038ee:	483c      	ldr	r0, [pc, #240]	@ (80039e0 <SystemGetsSignal+0x2c4>)
 80038f0:	f001 fbbc 	bl	800506c <OLED_DoTweenObject>
                HAL_Delay(100);
 80038f4:	2064      	movs	r0, #100	@ 0x64
 80038f6:	f002 f80b 	bl	8005910 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), 1000, EASE_IN_CIRC);
 80038fa:	4b33      	ldr	r3, [pc, #204]	@ (80039c8 <SystemGetsSignal+0x2ac>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	f1c3 0205 	rsb	r2, r3, #5
 8003902:	4613      	mov	r3, r2
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	3303      	adds	r3, #3
 800390e:	4618      	mov	r0, r3
 8003910:	f7fc fce8 	bl	80002e4 <__aeabi_i2f>
 8003914:	4603      	mov	r3, r0
 8003916:	220a      	movs	r2, #10
 8003918:	9201      	str	r2, [sp, #4]
 800391a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800391e:	9200      	str	r2, [sp, #0]
 8003920:	4a2d      	ldr	r2, [pc, #180]	@ (80039d8 <SystemGetsSignal+0x2bc>)
 8003922:	4932      	ldr	r1, [pc, #200]	@ (80039ec <SystemGetsSignal+0x2d0>)
 8003924:	482e      	ldr	r0, [pc, #184]	@ (80039e0 <SystemGetsSignal+0x2c4>)
 8003926:	f001 fba1 	bl	800506c <OLED_DoTweenObject>
                HAL_Delay(100);
 800392a:	2064      	movs	r0, #100	@ 0x64
 800392c:	f001 fff0 	bl	8005910 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), 1000, EASE_IN_CIRC);
 8003930:	4b25      	ldr	r3, [pc, #148]	@ (80039c8 <SystemGetsSignal+0x2ac>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	f1c3 0206 	rsb	r2, r3, #6
 8003938:	4613      	mov	r3, r2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	3303      	adds	r3, #3
 8003944:	4618      	mov	r0, r3
 8003946:	f7fc fccd 	bl	80002e4 <__aeabi_i2f>
 800394a:	4603      	mov	r3, r0
 800394c:	220a      	movs	r2, #10
 800394e:	9201      	str	r2, [sp, #4]
 8003950:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003954:	9200      	str	r2, [sp, #0]
 8003956:	4a20      	ldr	r2, [pc, #128]	@ (80039d8 <SystemGetsSignal+0x2bc>)
 8003958:	4925      	ldr	r1, [pc, #148]	@ (80039f0 <SystemGetsSignal+0x2d4>)
 800395a:	4821      	ldr	r0, [pc, #132]	@ (80039e0 <SystemGetsSignal+0x2c4>)
 800395c:	f001 fb86 	bl	800506c <OLED_DoTweenObject>

                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003960:	230a      	movs	r3, #10
 8003962:	9301      	str	r3, [sp, #4]
 8003964:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800396e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003972:	4920      	ldr	r1, [pc, #128]	@ (80039f4 <SystemGetsSignal+0x2d8>)
 8003974:	4820      	ldr	r0, [pc, #128]	@ (80039f8 <SystemGetsSignal+0x2dc>)
 8003976:	f001 fb79 	bl	800506c <OLED_DoTweenObject>
                HAL_Delay(100);
 800397a:	2064      	movs	r0, #100	@ 0x64
 800397c:	f001 ffc8 	bl	8005910 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8003980:	230a      	movs	r3, #10
 8003982:	9301      	str	r3, [sp, #4]
 8003984:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	4b1c      	ldr	r3, [pc, #112]	@ (80039fc <SystemGetsSignal+0x2e0>)
 800398c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003990:	491b      	ldr	r1, [pc, #108]	@ (8003a00 <SystemGetsSignal+0x2e4>)
 8003992:	4819      	ldr	r0, [pc, #100]	@ (80039f8 <SystemGetsSignal+0x2dc>)
 8003994:	f001 fb6a 	bl	800506c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003998:	2064      	movs	r0, #100	@ 0x64
 800399a:	f001 ffb9 	bl	8005910 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 800399e:	230a      	movs	r3, #10
 80039a0:	9301      	str	r3, [sp, #4]
 80039a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	4b16      	ldr	r3, [pc, #88]	@ (8003a04 <SystemGetsSignal+0x2e8>)
 80039aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80039ae:	4916      	ldr	r1, [pc, #88]	@ (8003a08 <SystemGetsSignal+0x2ec>)
 80039b0:	4816      	ldr	r0, [pc, #88]	@ (8003a0c <SystemGetsSignal+0x2f0>)
 80039b2:	f001 fb5b 	bl	800506c <OLED_DoTweenObject>
 80039b6:	e215      	b.n	8003de4 <SystemGetsSignal+0x6c8>
 80039b8:	20000b6d 	.word	0x20000b6d
 80039bc:	20000b6f 	.word	0x20000b6f
 80039c0:	20000358 	.word	0x20000358
 80039c4:	20000004 	.word	0x20000004
 80039c8:	20000002 	.word	0x20000002
 80039cc:	40010c00 	.word	0x40010c00
 80039d0:	20000236 	.word	0x20000236
 80039d4:	20000001 	.word	0x20000001
 80039d8:	c2b40000 	.word	0xc2b40000
 80039dc:	0800abc8 	.word	0x0800abc8
 80039e0:	20000f80 	.word	0x20000f80
 80039e4:	0800abd4 	.word	0x0800abd4
 80039e8:	0800abe0 	.word	0x0800abe0
 80039ec:	0800abf0 	.word	0x0800abf0
 80039f0:	0800ac00 	.word	0x0800ac00
 80039f4:	0800ab88 	.word	0x0800ab88
 80039f8:	20001574 	.word	0x20001574
 80039fc:	41e80000 	.word	0x41e80000
 8003a00:	0800ab90 	.word	0x0800ab90
 8003a04:	42280000 	.word	0x42280000
 8003a08:	0800ab98 	.word	0x0800ab98
 8003a0c:	2000392c 	.word	0x2000392c
            }
            else if (menuRank == 2 && menuSelection == 3)
 8003a10:	4ba7      	ldr	r3, [pc, #668]	@ (8003cb0 <SystemGetsSignal+0x594>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d17e      	bne.n	8003b16 <SystemGetsSignal+0x3fa>
 8003a18:	4ba6      	ldr	r3, [pc, #664]	@ (8003cb4 <SystemGetsSignal+0x598>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d17a      	bne.n	8003b16 <SystemGetsSignal+0x3fa>
            {
                menuRank = 1;
 8003a20:	4ba3      	ldr	r3, [pc, #652]	@ (8003cb0 <SystemGetsSignal+0x594>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	701a      	strb	r2, [r3, #0]
                menuSelection = 1;
 8003a26:	4ba3      	ldr	r3, [pc, #652]	@ (8003cb4 <SystemGetsSignal+0x598>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_MENU;
 8003a2c:	4ba2      	ldr	r3, [pc, #648]	@ (8003cb8 <SystemGetsSignal+0x59c>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, 1000, EASE_IN_CIRC);
 8003a32:	230a      	movs	r3, #10
 8003a34:	9301      	str	r3, [sp, #4]
 8003a36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	4b9f      	ldr	r3, [pc, #636]	@ (8003cbc <SystemGetsSignal+0x5a0>)
 8003a3e:	4aa0      	ldr	r2, [pc, #640]	@ (8003cc0 <SystemGetsSignal+0x5a4>)
 8003a40:	49a0      	ldr	r1, [pc, #640]	@ (8003cc4 <SystemGetsSignal+0x5a8>)
 8003a42:	48a1      	ldr	r0, [pc, #644]	@ (8003cc8 <SystemGetsSignal+0x5ac>)
 8003a44:	f001 fb12 	bl	800506c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003a48:	2064      	movs	r0, #100	@ 0x64
 8003a4a:	f001 ff61 	bl	8005910 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, 1000, EASE_IN_CIRC);
 8003a4e:	230a      	movs	r3, #10
 8003a50:	9301      	str	r3, [sp, #4]
 8003a52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	4b9c      	ldr	r3, [pc, #624]	@ (8003ccc <SystemGetsSignal+0x5b0>)
 8003a5a:	4a99      	ldr	r2, [pc, #612]	@ (8003cc0 <SystemGetsSignal+0x5a4>)
 8003a5c:	499c      	ldr	r1, [pc, #624]	@ (8003cd0 <SystemGetsSignal+0x5b4>)
 8003a5e:	489a      	ldr	r0, [pc, #616]	@ (8003cc8 <SystemGetsSignal+0x5ac>)
 8003a60:	f001 fb04 	bl	800506c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003a64:	2064      	movs	r0, #100	@ 0x64
 8003a66:	f001 ff53 	bl	8005910 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003a6a:	230a      	movs	r3, #10
 8003a6c:	9301      	str	r3, [sp, #4]
 8003a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003a78:	4a91      	ldr	r2, [pc, #580]	@ (8003cc0 <SystemGetsSignal+0x5a4>)
 8003a7a:	4996      	ldr	r1, [pc, #600]	@ (8003cd4 <SystemGetsSignal+0x5b8>)
 8003a7c:	4896      	ldr	r0, [pc, #600]	@ (8003cd8 <SystemGetsSignal+0x5bc>)
 8003a7e:	f001 faf5 	bl	800506c <OLED_DoTweenObject>

                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003a82:	230a      	movs	r3, #10
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003a90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a94:	4991      	ldr	r1, [pc, #580]	@ (8003cdc <SystemGetsSignal+0x5c0>)
 8003a96:	4892      	ldr	r0, [pc, #584]	@ (8003ce0 <SystemGetsSignal+0x5c4>)
 8003a98:	f001 fae8 	bl	800506c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003a9c:	2064      	movs	r0, #100	@ 0x64
 8003a9e:	f001 ff37 	bl	8005910 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8003aa2:	230a      	movs	r3, #10
 8003aa4:	9301      	str	r3, [sp, #4]
 8003aa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	4b8d      	ldr	r3, [pc, #564]	@ (8003ce4 <SystemGetsSignal+0x5c8>)
 8003aae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ab2:	498d      	ldr	r1, [pc, #564]	@ (8003ce8 <SystemGetsSignal+0x5cc>)
 8003ab4:	488a      	ldr	r0, [pc, #552]	@ (8003ce0 <SystemGetsSignal+0x5c4>)
 8003ab6:	f001 fad9 	bl	800506c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003aba:	2064      	movs	r0, #100	@ 0x64
 8003abc:	f001 ff28 	bl	8005910 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 8003ac0:	230a      	movs	r3, #10
 8003ac2:	9301      	str	r3, [sp, #4]
 8003ac4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	4b88      	ldr	r3, [pc, #544]	@ (8003cec <SystemGetsSignal+0x5d0>)
 8003acc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ad0:	4987      	ldr	r1, [pc, #540]	@ (8003cf0 <SystemGetsSignal+0x5d4>)
 8003ad2:	4883      	ldr	r0, [pc, #524]	@ (8003ce0 <SystemGetsSignal+0x5c4>)
 8003ad4:	f001 faca 	bl	800506c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003ad8:	2064      	movs	r0, #100	@ 0x64
 8003ada:	f001 ff19 	bl	8005910 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, 1000, EASE_IN_CIRC);
 8003ade:	230a      	movs	r3, #10
 8003ae0:	9301      	str	r3, [sp, #4]
 8003ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	4b82      	ldr	r3, [pc, #520]	@ (8003cf4 <SystemGetsSignal+0x5d8>)
 8003aea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003aee:	4982      	ldr	r1, [pc, #520]	@ (8003cf8 <SystemGetsSignal+0x5dc>)
 8003af0:	487b      	ldr	r0, [pc, #492]	@ (8003ce0 <SystemGetsSignal+0x5c4>)
 8003af2:	f001 fabb 	bl	800506c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003af6:	2064      	movs	r0, #100	@ 0x64
 8003af8:	f001 ff0a 	bl	8005910 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, 1000, EASE_IN_CIRC);
 8003afc:	230a      	movs	r3, #10
 8003afe:	9301      	str	r3, [sp, #4]
 8003b00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	4b7d      	ldr	r3, [pc, #500]	@ (8003cfc <SystemGetsSignal+0x5e0>)
 8003b08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003b0c:	497c      	ldr	r1, [pc, #496]	@ (8003d00 <SystemGetsSignal+0x5e4>)
 8003b0e:	4874      	ldr	r0, [pc, #464]	@ (8003ce0 <SystemGetsSignal+0x5c4>)
 8003b10:	f001 faac 	bl	800506c <OLED_DoTweenObject>
 8003b14:	e166      	b.n	8003de4 <SystemGetsSignal+0x6c8>
            }
            else if (menuRank == 2 && menuSelection == 1)
 8003b16:	4b66      	ldr	r3, [pc, #408]	@ (8003cb0 <SystemGetsSignal+0x594>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d158      	bne.n	8003bd0 <SystemGetsSignal+0x4b4>
 8003b1e:	4b65      	ldr	r3, [pc, #404]	@ (8003cb4 <SystemGetsSignal+0x598>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d154      	bne.n	8003bd0 <SystemGetsSignal+0x4b4>
            {
                menuRank = 3;
 8003b26:	4b62      	ldr	r3, [pc, #392]	@ (8003cb0 <SystemGetsSignal+0x594>)
 8003b28:	2203      	movs	r2, #3
 8003b2a:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8003b2c:	4b62      	ldr	r3, [pc, #392]	@ (8003cb8 <SystemGetsSignal+0x59c>)
 8003b2e:	2205      	movs	r2, #5
 8003b30:	701a      	strb	r2, [r3, #0]
                Snake_InitGame();
 8003b32:	f7fc fedf 	bl	80008f4 <Snake_InitGame>
                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8003b36:	2304      	movs	r3, #4
 8003b38:	9301      	str	r3, [sp, #4]
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	4b5f      	ldr	r3, [pc, #380]	@ (8003cbc <SystemGetsSignal+0x5a0>)
 8003b40:	4a70      	ldr	r2, [pc, #448]	@ (8003d04 <SystemGetsSignal+0x5e8>)
 8003b42:	4971      	ldr	r1, [pc, #452]	@ (8003d08 <SystemGetsSignal+0x5ec>)
 8003b44:	4871      	ldr	r0, [pc, #452]	@ (8003d0c <SystemGetsSignal+0x5f0>)
 8003b46:	f001 fa91 	bl	800506c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, 1000, EASE_IN_CUBIC);
 8003b4a:	2304      	movs	r3, #4
 8003b4c:	9301      	str	r3, [sp, #4]
 8003b4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	496c      	ldr	r1, [pc, #432]	@ (8003d10 <SystemGetsSignal+0x5f4>)
 8003b5e:	485e      	ldr	r0, [pc, #376]	@ (8003cd8 <SystemGetsSignal+0x5bc>)
 8003b60:	f001 fa84 	bl	800506c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", 0, 8, 1000, EASE_INOUT_CIRC);
 8003b64:	230c      	movs	r3, #12
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	4967      	ldr	r1, [pc, #412]	@ (8003d14 <SystemGetsSignal+0x5f8>)
 8003b78:	4857      	ldr	r0, [pc, #348]	@ (8003cd8 <SystemGetsSignal+0x5bc>)
 8003b7a:	f001 fa77 	bl	800506c <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003b7e:	230a      	movs	r3, #10
 8003b80:	9301      	str	r3, [sp, #4]
 8003b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003b8c:	4a4c      	ldr	r2, [pc, #304]	@ (8003cc0 <SystemGetsSignal+0x5a4>)
 8003b8e:	494d      	ldr	r1, [pc, #308]	@ (8003cc4 <SystemGetsSignal+0x5a8>)
 8003b90:	484d      	ldr	r0, [pc, #308]	@ (8003cc8 <SystemGetsSignal+0x5ac>)
 8003b92:	f001 fa6b 	bl	800506c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003b96:	2064      	movs	r0, #100	@ 0x64
 8003b98:	f001 feba 	bl	8005910 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8003b9c:	230a      	movs	r3, #10
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	4b4f      	ldr	r3, [pc, #316]	@ (8003ce4 <SystemGetsSignal+0x5c8>)
 8003ba8:	4a45      	ldr	r2, [pc, #276]	@ (8003cc0 <SystemGetsSignal+0x5a4>)
 8003baa:	4949      	ldr	r1, [pc, #292]	@ (8003cd0 <SystemGetsSignal+0x5b4>)
 8003bac:	4846      	ldr	r0, [pc, #280]	@ (8003cc8 <SystemGetsSignal+0x5ac>)
 8003bae:	f001 fa5d 	bl	800506c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003bb2:	2064      	movs	r0, #100	@ 0x64
 8003bb4:	f001 feac 	bl	8005910 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 8003bb8:	230a      	movs	r3, #10
 8003bba:	9301      	str	r3, [sp, #4]
 8003bbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8003cec <SystemGetsSignal+0x5d0>)
 8003bc4:	4a3e      	ldr	r2, [pc, #248]	@ (8003cc0 <SystemGetsSignal+0x5a4>)
 8003bc6:	4943      	ldr	r1, [pc, #268]	@ (8003cd4 <SystemGetsSignal+0x5b8>)
 8003bc8:	4843      	ldr	r0, [pc, #268]	@ (8003cd8 <SystemGetsSignal+0x5bc>)
 8003bca:	f001 fa4f 	bl	800506c <OLED_DoTweenObject>
 8003bce:	e109      	b.n	8003de4 <SystemGetsSignal+0x6c8>
            }
            else if (menuRank == 3 && menuSelection == 1 && cancelSelection && UI_PAGE_GAMES && !gameOver)
 8003bd0:	4b37      	ldr	r3, [pc, #220]	@ (8003cb0 <SystemGetsSignal+0x594>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	f040 80a9 	bne.w	8003d2c <SystemGetsSignal+0x610>
 8003bda:	4b36      	ldr	r3, [pc, #216]	@ (8003cb4 <SystemGetsSignal+0x598>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	f040 80a4 	bne.w	8003d2c <SystemGetsSignal+0x610>
 8003be4:	4b4c      	ldr	r3, [pc, #304]	@ (8003d18 <SystemGetsSignal+0x5fc>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 809f 	beq.w	8003d2c <SystemGetsSignal+0x610>
 8003bee:	4b4b      	ldr	r3, [pc, #300]	@ (8003d1c <SystemGetsSignal+0x600>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	f083 0301 	eor.w	r3, r3, #1
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 8097 	beq.w	8003d2c <SystemGetsSignal+0x610>
            {
                menuRank = 2;
 8003bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8003cb0 <SystemGetsSignal+0x594>)
 8003c00:	2202      	movs	r2, #2
 8003c02:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8003c04:	4b2c      	ldr	r3, [pc, #176]	@ (8003cb8 <SystemGetsSignal+0x59c>)
 8003c06:	2205      	movs	r2, #5
 8003c08:	701a      	strb	r2, [r3, #0]
                
                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_End_Y, 1000, EASE_IN_CUBIC);
 8003c0a:	2304      	movs	r3, #4
 8003c0c:	9301      	str	r3, [sp, #4]
 8003c0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	4a3a      	ldr	r2, [pc, #232]	@ (8003d04 <SystemGetsSignal+0x5e8>)
 8003c1a:	493b      	ldr	r1, [pc, #236]	@ (8003d08 <SystemGetsSignal+0x5ec>)
 8003c1c:	483b      	ldr	r0, [pc, #236]	@ (8003d0c <SystemGetsSignal+0x5f0>)
 8003c1e:	f001 fa25 	bl	800506c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Greedy Snake") * 6 + 3, 8, 1000, EASE_IN_CUBIC);
 8003c22:	2304      	movs	r3, #4
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003c30:	4a3b      	ldr	r2, [pc, #236]	@ (8003d20 <SystemGetsSignal+0x604>)
 8003c32:	4937      	ldr	r1, [pc, #220]	@ (8003d10 <SystemGetsSignal+0x5f4>)
 8003c34:	4828      	ldr	r0, [pc, #160]	@ (8003cd8 <SystemGetsSignal+0x5bc>)
 8003c36:	f001 fa19 	bl	800506c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Snake") * 6 + 3, 10, 1000, EASE_INOUT_CIRC);
 8003c3a:	230c      	movs	r3, #12
 8003c3c:	9301      	str	r3, [sp, #4]
 8003c3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	4b37      	ldr	r3, [pc, #220]	@ (8003d24 <SystemGetsSignal+0x608>)
 8003c46:	4a38      	ldr	r2, [pc, #224]	@ (8003d28 <SystemGetsSignal+0x60c>)
 8003c48:	4932      	ldr	r1, [pc, #200]	@ (8003d14 <SystemGetsSignal+0x5f8>)
 8003c4a:	4823      	ldr	r0, [pc, #140]	@ (8003cd8 <SystemGetsSignal+0x5bc>)
 8003c4c:	f001 fa0e 	bl	800506c <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003c50:	230a      	movs	r3, #10
 8003c52:	9301      	str	r3, [sp, #4]
 8003c54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003c5e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003c62:	4918      	ldr	r1, [pc, #96]	@ (8003cc4 <SystemGetsSignal+0x5a8>)
 8003c64:	4818      	ldr	r0, [pc, #96]	@ (8003cc8 <SystemGetsSignal+0x5ac>)
 8003c66:	f001 fa01 	bl	800506c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003c6a:	2064      	movs	r0, #100	@ 0x64
 8003c6c:	f001 fe50 	bl	8005910 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8003c70:	230a      	movs	r3, #10
 8003c72:	9301      	str	r3, [sp, #4]
 8003c74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce4 <SystemGetsSignal+0x5c8>)
 8003c7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003c80:	4913      	ldr	r1, [pc, #76]	@ (8003cd0 <SystemGetsSignal+0x5b4>)
 8003c82:	4811      	ldr	r0, [pc, #68]	@ (8003cc8 <SystemGetsSignal+0x5ac>)
 8003c84:	f001 f9f2 	bl	800506c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003c88:	2064      	movs	r0, #100	@ 0x64
 8003c8a:	f001 fe41 	bl	8005910 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 8003c8e:	230a      	movs	r3, #10
 8003c90:	9301      	str	r3, [sp, #4]
 8003c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	4b14      	ldr	r3, [pc, #80]	@ (8003cec <SystemGetsSignal+0x5d0>)
 8003c9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003c9e:	490d      	ldr	r1, [pc, #52]	@ (8003cd4 <SystemGetsSignal+0x5b8>)
 8003ca0:	480d      	ldr	r0, [pc, #52]	@ (8003cd8 <SystemGetsSignal+0x5bc>)
 8003ca2:	f001 f9e3 	bl	800506c <OLED_DoTweenObject>
                cancelSelection = false;
 8003ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8003d18 <SystemGetsSignal+0x5fc>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	701a      	strb	r2, [r3, #0]
 8003cac:	e09a      	b.n	8003de4 <SystemGetsSignal+0x6c8>
 8003cae:	bf00      	nop
 8003cb0:	20000001 	.word	0x20000001
 8003cb4:	20000002 	.word	0x20000002
 8003cb8:	20000b6d 	.word	0x20000b6d
 8003cbc:	c1200000 	.word	0xc1200000
 8003cc0:	c2b40000 	.word	0xc2b40000
 8003cc4:	0800ab88 	.word	0x0800ab88
 8003cc8:	20001574 	.word	0x20001574
 8003ccc:	40400000 	.word	0x40400000
 8003cd0:	0800ab90 	.word	0x0800ab90
 8003cd4:	0800ab98 	.word	0x0800ab98
 8003cd8:	2000392c 	.word	0x2000392c
 8003cdc:	0800abc8 	.word	0x0800abc8
 8003ce0:	20000f80 	.word	0x20000f80
 8003ce4:	41e80000 	.word	0x41e80000
 8003ce8:	0800abd4 	.word	0x0800abd4
 8003cec:	42280000 	.word	0x42280000
 8003cf0:	0800abe0 	.word	0x0800abe0
 8003cf4:	425c0000 	.word	0x425c0000
 8003cf8:	0800abf0 	.word	0x0800abf0
 8003cfc:	42880000 	.word	0x42880000
 8003d00:	0800ac00 	.word	0x0800ac00
 8003d04:	42600000 	.word	0x42600000
 8003d08:	0800ab64 	.word	0x0800ab64
 8003d0c:	20003338 	.word	0x20003338
 8003d10:	0800aba4 	.word	0x0800aba4
 8003d14:	0800abbc 	.word	0x0800abbc
 8003d18:	20000b6f 	.word	0x20000b6f
 8003d1c:	20000236 	.word	0x20000236
 8003d20:	42960000 	.word	0x42960000
 8003d24:	41200000 	.word	0x41200000
 8003d28:	42040000 	.word	0x42040000
            }
            else if (menuRank == 2 && menuSelection == 2)
 8003d2c:	4b34      	ldr	r3, [pc, #208]	@ (8003e00 <SystemGetsSignal+0x6e4>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d157      	bne.n	8003de4 <SystemGetsSignal+0x6c8>
 8003d34:	4b33      	ldr	r3, [pc, #204]	@ (8003e04 <SystemGetsSignal+0x6e8>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d153      	bne.n	8003de4 <SystemGetsSignal+0x6c8>
            {
                menuRank = 3;
 8003d3c:	4b30      	ldr	r3, [pc, #192]	@ (8003e00 <SystemGetsSignal+0x6e4>)
 8003d3e:	2203      	movs	r2, #3
 8003d40:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8003d42:	4b31      	ldr	r3, [pc, #196]	@ (8003e08 <SystemGetsSignal+0x6ec>)
 8003d44:	2205      	movs	r2, #5
 8003d46:	701a      	strb	r2, [r3, #0]
                Game2048_Init();
 8003d48:	f7fd f8cc 	bl	8000ee4 <Game2048_Init>
                OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	9301      	str	r3, [sp, #4]
 8003d50:	2301      	movs	r3, #1
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	4b2d      	ldr	r3, [pc, #180]	@ (8003e0c <SystemGetsSignal+0x6f0>)
 8003d56:	4a2e      	ldr	r2, [pc, #184]	@ (8003e10 <SystemGetsSignal+0x6f4>)
 8003d58:	492e      	ldr	r1, [pc, #184]	@ (8003e14 <SystemGetsSignal+0x6f8>)
 8003d5a:	482f      	ldr	r0, [pc, #188]	@ (8003e18 <SystemGetsSignal+0x6fc>)
 8003d5c:	f001 f986 	bl	800506c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, 1000, EASE_IN_CUBIC);
 8003d60:	2304      	movs	r3, #4
 8003d62:	9301      	str	r3, [sp, #4]
 8003d64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	492a      	ldr	r1, [pc, #168]	@ (8003e1c <SystemGetsSignal+0x700>)
 8003d74:	482a      	ldr	r0, [pc, #168]	@ (8003e20 <SystemGetsSignal+0x704>)
 8003d76:	f001 f979 	bl	800506c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", 0, 8, 1000, EASE_INOUT_CIRC);
 8003d7a:	230c      	movs	r3, #12
 8003d7c:	9301      	str	r3, [sp, #4]
 8003d7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	4925      	ldr	r1, [pc, #148]	@ (8003e24 <SystemGetsSignal+0x708>)
 8003d8e:	4824      	ldr	r0, [pc, #144]	@ (8003e20 <SystemGetsSignal+0x704>)
 8003d90:	f001 f96c 	bl	800506c <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003d94:	230a      	movs	r3, #10
 8003d96:	9301      	str	r3, [sp, #4]
 8003d98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003da2:	4a21      	ldr	r2, [pc, #132]	@ (8003e28 <SystemGetsSignal+0x70c>)
 8003da4:	4921      	ldr	r1, [pc, #132]	@ (8003e2c <SystemGetsSignal+0x710>)
 8003da6:	4822      	ldr	r0, [pc, #136]	@ (8003e30 <SystemGetsSignal+0x714>)
 8003da8:	f001 f960 	bl	800506c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003dac:	2064      	movs	r0, #100	@ 0x64
 8003dae:	f001 fdaf 	bl	8005910 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8003db2:	230a      	movs	r3, #10
 8003db4:	9301      	str	r3, [sp, #4]
 8003db6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e34 <SystemGetsSignal+0x718>)
 8003dbe:	4a1a      	ldr	r2, [pc, #104]	@ (8003e28 <SystemGetsSignal+0x70c>)
 8003dc0:	491d      	ldr	r1, [pc, #116]	@ (8003e38 <SystemGetsSignal+0x71c>)
 8003dc2:	481b      	ldr	r0, [pc, #108]	@ (8003e30 <SystemGetsSignal+0x714>)
 8003dc4:	f001 f952 	bl	800506c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003dc8:	2064      	movs	r0, #100	@ 0x64
 8003dca:	f001 fda1 	bl	8005910 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 8003dce:	230a      	movs	r3, #10
 8003dd0:	9301      	str	r3, [sp, #4]
 8003dd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	4b18      	ldr	r3, [pc, #96]	@ (8003e3c <SystemGetsSignal+0x720>)
 8003dda:	4a13      	ldr	r2, [pc, #76]	@ (8003e28 <SystemGetsSignal+0x70c>)
 8003ddc:	4918      	ldr	r1, [pc, #96]	@ (8003e40 <SystemGetsSignal+0x724>)
 8003dde:	4810      	ldr	r0, [pc, #64]	@ (8003e20 <SystemGetsSignal+0x704>)
 8003de0:	f001 f944 	bl	800506c <OLED_DoTweenObject>
            //     OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
            //     cancelSelection = false;
            // }


            while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8003de4:	bf00      	nop
 8003de6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003dea:	4816      	ldr	r0, [pc, #88]	@ (8003e44 <SystemGetsSignal+0x728>)
 8003dec:	f002 f9a6 	bl	800613c <HAL_GPIO_ReadPin>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f7      	beq.n	8003de6 <SystemGetsSignal+0x6ca>
            {
                // 等待按钮释放
            }
        }
    }
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000001 	.word	0x20000001
 8003e04:	20000002 	.word	0x20000002
 8003e08:	20000b6d 	.word	0x20000b6d
 8003e0c:	c1200000 	.word	0xc1200000
 8003e10:	42480000 	.word	0x42480000
 8003e14:	0800ab70 	.word	0x0800ab70
 8003e18:	20003338 	.word	0x20003338
 8003e1c:	0800aba4 	.word	0x0800aba4
 8003e20:	2000392c 	.word	0x2000392c
 8003e24:	0800abbc 	.word	0x0800abbc
 8003e28:	c2b40000 	.word	0xc2b40000
 8003e2c:	0800ab88 	.word	0x0800ab88
 8003e30:	20001574 	.word	0x20001574
 8003e34:	41e80000 	.word	0x41e80000
 8003e38:	0800ab90 	.word	0x0800ab90
 8003e3c:	42280000 	.word	0x42280000
 8003e40:	0800ab98 	.word	0x0800ab98
 8003e44:	40010c00 	.word	0x40010c00

08003e48 <OLED_EnableDiffMode>:
    }
}

// 启用差分更新模式
void OLED_EnableDiffMode(uint8_t enable)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	71fb      	strb	r3, [r7, #7]
    diff_mode_enabled = enable;
 8003e52:	4a09      	ldr	r2, [pc, #36]	@ (8003e78 <OLED_EnableDiffMode+0x30>)
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	7013      	strb	r3, [r2, #0]
    if (enable)
 8003e58:	79fb      	ldrb	r3, [r7, #7]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d008      	beq.n	8003e70 <OLED_EnableDiffMode+0x28>
    {
        memcpy(OLED_PrevBuffer, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES);
 8003e5e:	4a07      	ldr	r2, [pc, #28]	@ (8003e7c <OLED_EnableDiffMode+0x34>)
 8003e60:	4b07      	ldr	r3, [pc, #28]	@ (8003e80 <OLED_EnableDiffMode+0x38>)
 8003e62:	4610      	mov	r0, r2
 8003e64:	4619      	mov	r1, r3
 8003e66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f004 fc79 	bl	8008762 <memcpy>
    }
}
 8003e70:	bf00      	nop
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	20000f70 	.word	0x20000f70
 8003e7c:	20000b70 	.word	0x20000b70
 8003e80:	2000036c 	.word	0x2000036c

08003e84 <OLED_EnableFastUpdate>:

// 设置快速更新模式
void OLED_EnableFastUpdate(uint8_t enable)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	71fb      	strb	r3, [r7, #7]
    fast_update_enabled = enable;
 8003e8e:	4a04      	ldr	r2, [pc, #16]	@ (8003ea0 <OLED_EnableFastUpdate+0x1c>)
 8003e90:	79fb      	ldrb	r3, [r7, #7]
 8003e92:	7013      	strb	r3, [r2, #0]
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	20000006 	.word	0x20000006

08003ea4 <OLED_SmartUpdate>:

// 智能更新显示
// 选择性更新脏页，以提高帧率
void OLED_SmartUpdate(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
    // 如果OLED/DMA忙，直接返回
    if (OLED_IsBusy())
 8003eaa:	f7fd feeb 	bl	8001c84 <OLED_IsBusy>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f040 8082 	bne.w	8003fba <OLED_SmartUpdate+0x116>
    {
        return;
    }

    // 检查是否有脏页需要更新
    uint8_t has_dirty = 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	73fb      	strb	r3, [r7, #15]
    uint8_t first_dirty = 255;
 8003eba:	23ff      	movs	r3, #255	@ 0xff
 8003ebc:	73bb      	strb	r3, [r7, #14]
    uint8_t last_dirty = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	737b      	strb	r3, [r7, #13]

    // 如果启用了差分更新，检查哪些页已经变化
    if (diff_mode_enabled)
 8003ec2:	4b40      	ldr	r3, [pc, #256]	@ (8003fc4 <OLED_SmartUpdate+0x120>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d046      	beq.n	8003f58 <OLED_SmartUpdate+0xb4>
    {
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 8003eca:	2300      	movs	r3, #0
 8003ecc:	733b      	strb	r3, [r7, #12]
 8003ece:	e03f      	b.n	8003f50 <OLED_SmartUpdate+0xac>
        {
            // 检查此页中是否有任何字节发生变化
            uint8_t page_changed = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	72fb      	strb	r3, [r7, #11]
            uint16_t start_idx = page * OLED_WIDTH;
 8003ed4:	7b3b      	ldrb	r3, [r7, #12]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	01db      	lsls	r3, r3, #7
 8003eda:	80bb      	strh	r3, [r7, #4]

            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 8003edc:	2300      	movs	r3, #0
 8003ede:	813b      	strh	r3, [r7, #8]
 8003ee0:	e015      	b.n	8003f0e <OLED_SmartUpdate+0x6a>
            {
                if (OLED_BackBuffer[start_idx + i] != OLED_PrevBuffer[start_idx + i])
 8003ee2:	88ba      	ldrh	r2, [r7, #4]
 8003ee4:	893b      	ldrh	r3, [r7, #8]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	4a37      	ldr	r2, [pc, #220]	@ (8003fc8 <OLED_SmartUpdate+0x124>)
 8003eea:	5cd2      	ldrb	r2, [r2, r3]
 8003eec:	88b9      	ldrh	r1, [r7, #4]
 8003eee:	893b      	ldrh	r3, [r7, #8]
 8003ef0:	440b      	add	r3, r1
 8003ef2:	4936      	ldr	r1, [pc, #216]	@ (8003fcc <OLED_SmartUpdate+0x128>)
 8003ef4:	5ccb      	ldrb	r3, [r1, r3]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d006      	beq.n	8003f08 <OLED_SmartUpdate+0x64>
                {
                    page_changed = 1;
 8003efa:	2301      	movs	r3, #1
 8003efc:	72fb      	strb	r3, [r7, #11]
                    oled_dirty_pages[page] = 1;
 8003efe:	7b3b      	ldrb	r3, [r7, #12]
 8003f00:	4a33      	ldr	r2, [pc, #204]	@ (8003fd0 <OLED_SmartUpdate+0x12c>)
 8003f02:	2101      	movs	r1, #1
 8003f04:	54d1      	strb	r1, [r2, r3]
                    break;
 8003f06:	e005      	b.n	8003f14 <OLED_SmartUpdate+0x70>
            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 8003f08:	893b      	ldrh	r3, [r7, #8]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	813b      	strh	r3, [r7, #8]
 8003f0e:	893b      	ldrh	r3, [r7, #8]
 8003f10:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f12:	d9e6      	bls.n	8003ee2 <OLED_SmartUpdate+0x3e>
                }
            }

            if (page_changed)
 8003f14:	7afb      	ldrb	r3, [r7, #11]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d017      	beq.n	8003f4a <OLED_SmartUpdate+0xa6>
            {
                has_dirty = 1;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	73fb      	strb	r3, [r7, #15]
                if (page < first_dirty)
 8003f1e:	7b3a      	ldrb	r2, [r7, #12]
 8003f20:	7bbb      	ldrb	r3, [r7, #14]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d201      	bcs.n	8003f2a <OLED_SmartUpdate+0x86>
                    first_dirty = page;
 8003f26:	7b3b      	ldrb	r3, [r7, #12]
 8003f28:	73bb      	strb	r3, [r7, #14]
                if (page > last_dirty)
 8003f2a:	7b3a      	ldrb	r2, [r7, #12]
 8003f2c:	7b7b      	ldrb	r3, [r7, #13]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d901      	bls.n	8003f36 <OLED_SmartUpdate+0x92>
                    last_dirty = page;
 8003f32:	7b3b      	ldrb	r3, [r7, #12]
 8003f34:	737b      	strb	r3, [r7, #13]

                // 更新上一帧缓存
                memcpy(
 8003f36:	88bb      	ldrh	r3, [r7, #4]
 8003f38:	4a24      	ldr	r2, [pc, #144]	@ (8003fcc <OLED_SmartUpdate+0x128>)
 8003f3a:	1898      	adds	r0, r3, r2
 8003f3c:	88bb      	ldrh	r3, [r7, #4]
 8003f3e:	4a22      	ldr	r2, [pc, #136]	@ (8003fc8 <OLED_SmartUpdate+0x124>)
 8003f40:	4413      	add	r3, r2
 8003f42:	2280      	movs	r2, #128	@ 0x80
 8003f44:	4619      	mov	r1, r3
 8003f46:	f004 fc0c 	bl	8008762 <memcpy>
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 8003f4a:	7b3b      	ldrb	r3, [r7, #12]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	733b      	strb	r3, [r7, #12]
 8003f50:	7b3b      	ldrb	r3, [r7, #12]
 8003f52:	2b07      	cmp	r3, #7
 8003f54:	d9bc      	bls.n	8003ed0 <OLED_SmartUpdate+0x2c>
 8003f56:	e01c      	b.n	8003f92 <OLED_SmartUpdate+0xee>
        }
    }
    else
    {
        // 如果未启用差分更新，使用脏页标记
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 8003f58:	2300      	movs	r3, #0
 8003f5a:	71fb      	strb	r3, [r7, #7]
 8003f5c:	e016      	b.n	8003f8c <OLED_SmartUpdate+0xe8>
        {
            if (oled_dirty_pages[i])
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	4a1b      	ldr	r2, [pc, #108]	@ (8003fd0 <OLED_SmartUpdate+0x12c>)
 8003f62:	5cd3      	ldrb	r3, [r2, r3]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00d      	beq.n	8003f86 <OLED_SmartUpdate+0xe2>
            {
                has_dirty = 1;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	73fb      	strb	r3, [r7, #15]
                if (i < first_dirty)
 8003f6e:	79fa      	ldrb	r2, [r7, #7]
 8003f70:	7bbb      	ldrb	r3, [r7, #14]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d201      	bcs.n	8003f7a <OLED_SmartUpdate+0xd6>
                    first_dirty = i;
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	73bb      	strb	r3, [r7, #14]
                if (i > last_dirty)
 8003f7a:	79fa      	ldrb	r2, [r7, #7]
 8003f7c:	7b7b      	ldrb	r3, [r7, #13]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d901      	bls.n	8003f86 <OLED_SmartUpdate+0xe2>
                    last_dirty = i;
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	737b      	strb	r3, [r7, #13]
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	71fb      	strb	r3, [r7, #7]
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	2b07      	cmp	r3, #7
 8003f90:	d9e5      	bls.n	8003f5e <OLED_SmartUpdate+0xba>
            }
        }
    }

    // 如果有脏页，只更新这些页
    if (has_dirty && fast_update_enabled)
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <OLED_SmartUpdate+0x10a>
 8003f98:	4b0e      	ldr	r3, [pc, #56]	@ (8003fd4 <OLED_SmartUpdate+0x130>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d006      	beq.n	8003fae <OLED_SmartUpdate+0x10a>
    {
        OLED_UpdateDisplayPartial(first_dirty, last_dirty);
 8003fa0:	7b7a      	ldrb	r2, [r7, #13]
 8003fa2:	7bbb      	ldrb	r3, [r7, #14]
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fd feec 	bl	8001d84 <OLED_UpdateDisplayPartial>
 8003fac:	e006      	b.n	8003fbc <OLED_SmartUpdate+0x118>
    }
    else if (has_dirty)
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <OLED_SmartUpdate+0x118>
    {
        OLED_UpdateDisplayVSync();
 8003fb4:	f7fd fe8e 	bl	8001cd4 <OLED_UpdateDisplayVSync>
 8003fb8:	e000      	b.n	8003fbc <OLED_SmartUpdate+0x118>
        return;
 8003fba:	bf00      	nop
    }
}
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20000f70 	.word	0x20000f70
 8003fc8:	2000036c 	.word	0x2000036c
 8003fcc:	20000b70 	.word	0x20000b70
 8003fd0:	20000364 	.word	0x20000364
 8003fd4:	20000006 	.word	0x20000006

08003fd8 <OLED_OptimizedDisplayFPS>:


// 显示FPS
void OLED_OptimizedDisplayFPS(int16_t x, int16_t y)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	460a      	mov	r2, r1
 8003fe2:	80fb      	strh	r3, [r7, #6]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	80bb      	strh	r3, [r7, #4]
    static uint32_t last_time = 0;
    static uint32_t frames = 0;
    static uint32_t fps = 0;
    static char fps_str[16] = "FPS:0";

    frames++;
 8003fe8:	4b15      	ldr	r3, [pc, #84]	@ (8004040 <OLED_OptimizedDisplayFPS+0x68>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3301      	adds	r3, #1
 8003fee:	4a14      	ldr	r2, [pc, #80]	@ (8004040 <OLED_OptimizedDisplayFPS+0x68>)
 8003ff0:	6013      	str	r3, [r2, #0]

    // 每秒更新一次FPS
    uint32_t current_time = HAL_GetTick();
 8003ff2:	f001 fc83 	bl	80058fc <HAL_GetTick>
 8003ff6:	60f8      	str	r0, [r7, #12]
    if (current_time - last_time >= 1000)
 8003ff8:	4b12      	ldr	r3, [pc, #72]	@ (8004044 <OLED_OptimizedDisplayFPS+0x6c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004004:	d310      	bcc.n	8004028 <OLED_OptimizedDisplayFPS+0x50>
    {
        fps = frames;
 8004006:	4b0e      	ldr	r3, [pc, #56]	@ (8004040 <OLED_OptimizedDisplayFPS+0x68>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a0f      	ldr	r2, [pc, #60]	@ (8004048 <OLED_OptimizedDisplayFPS+0x70>)
 800400c:	6013      	str	r3, [r2, #0]
        sprintf(fps_str, "FPS:%d", fps);
 800400e:	4b0e      	ldr	r3, [pc, #56]	@ (8004048 <OLED_OptimizedDisplayFPS+0x70>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	490d      	ldr	r1, [pc, #52]	@ (800404c <OLED_OptimizedDisplayFPS+0x74>)
 8004016:	480e      	ldr	r0, [pc, #56]	@ (8004050 <OLED_OptimizedDisplayFPS+0x78>)
 8004018:	f004 fa1a 	bl	8008450 <siprintf>
        frames = 0;
 800401c:	4b08      	ldr	r3, [pc, #32]	@ (8004040 <OLED_OptimizedDisplayFPS+0x68>)
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
        last_time = current_time;
 8004022:	4a08      	ldr	r2, [pc, #32]	@ (8004044 <OLED_OptimizedDisplayFPS+0x6c>)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6013      	str	r3, [r2, #0]
    }

    OLED_DisplayString(x, y, fps_str);
 8004028:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800402c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004030:	4a07      	ldr	r2, [pc, #28]	@ (8004050 <OLED_OptimizedDisplayFPS+0x78>)
 8004032:	4618      	mov	r0, r3
 8004034:	f7fe fa3e 	bl	80024b4 <OLED_DisplayString>
 8004038:	bf00      	nop
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	20000f74 	.word	0x20000f74
 8004044:	20000f78 	.word	0x20000f78
 8004048:	20000f7c 	.word	0x20000f7c
 800404c:	0800accc 	.word	0x0800accc
 8004050:	20000008 	.word	0x20000008

08004054 <EaseLinear>:
#include "stdint.h" // 添加 stdint.h 以支持标准整数类型
#include "oled_ui.h"
#pragma region TWEENS // 动画缓动函数全部在这里定义

static float EaseLinear(float t)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
    return t;
 800405c:	687b      	ldr	r3, [r7, #4]
}
 800405e:	4618      	mov	r0, r3
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr

08004068 <EaseInQuad>:

static float EaseInQuad(float t)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
    return t * t;
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7fc f98a 	bl	800038c <__aeabi_fmul>
 8004078:	4603      	mov	r3, r0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <EaseOutQuad>:

static float EaseOutQuad(float t)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b082      	sub	sp, #8
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
    return t * (2 - t);
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004090:	f7fc f872 	bl	8000178 <__aeabi_fsub>
 8004094:	4603      	mov	r3, r0
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	4618      	mov	r0, r3
 800409a:	f7fc f977 	bl	800038c <__aeabi_fmul>
 800409e:	4603      	mov	r3, r0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <EaseInOutQuad>:

static float EaseInOutQuad(float t)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 2 * t * t : -1 + (4 - 2 * t) * t;
 80040b0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7fc fb07 	bl	80006c8 <__aeabi_fcmplt>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00b      	beq.n	80040d8 <EaseInOutQuad+0x30>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4619      	mov	r1, r3
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fc f859 	bl	800017c <__addsf3>
 80040ca:	4603      	mov	r3, r0
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fc f95c 	bl	800038c <__aeabi_fmul>
 80040d4:	4603      	mov	r3, r0
 80040d6:	e016      	b.n	8004106 <EaseInOutQuad+0x5e>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4619      	mov	r1, r3
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fc f84d 	bl	800017c <__addsf3>
 80040e2:	4603      	mov	r3, r0
 80040e4:	4619      	mov	r1, r3
 80040e6:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 80040ea:	f7fc f845 	bl	8000178 <__aeabi_fsub>
 80040ee:	4603      	mov	r3, r0
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fc f94a 	bl	800038c <__aeabi_fmul>
 80040f8:	4603      	mov	r3, r0
 80040fa:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fc f83a 	bl	8000178 <__aeabi_fsub>
 8004104:	4603      	mov	r3, r0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <EaseInCubic>:

static float EaseInCubic(float t)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b082      	sub	sp, #8
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
    return t * t * t;
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7fc f937 	bl	800038c <__aeabi_fmul>
 800411e:	4603      	mov	r3, r0
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	4618      	mov	r0, r3
 8004124:	f7fc f932 	bl	800038c <__aeabi_fmul>
 8004128:	4603      	mov	r3, r0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <EaseOutCubic>:

static float EaseOutCubic(float t)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
    float t1 = t - 1;
 800413a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fc f81a 	bl	8000178 <__aeabi_fsub>
 8004144:	4603      	mov	r3, r0
 8004146:	60fb      	str	r3, [r7, #12]
    return t1 * t1 * t1 + 1;
 8004148:	68f9      	ldr	r1, [r7, #12]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f7fc f91e 	bl	800038c <__aeabi_fmul>
 8004150:	4603      	mov	r3, r0
 8004152:	68f9      	ldr	r1, [r7, #12]
 8004154:	4618      	mov	r0, r3
 8004156:	f7fc f919 	bl	800038c <__aeabi_fmul>
 800415a:	4603      	mov	r3, r0
 800415c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004160:	4618      	mov	r0, r3
 8004162:	f7fc f80b 	bl	800017c <__addsf3>
 8004166:	4603      	mov	r3, r0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <EaseInOutCubic>:

static float EaseInOutCubic(float t)
{
 8004170:	b590      	push	{r4, r7, lr}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
 8004178:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7fc faa3 	bl	80006c8 <__aeabi_fcmplt>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d010      	beq.n	80041aa <EaseInOutCubic+0x3a>
 8004188:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7fc f8fd 	bl	800038c <__aeabi_fmul>
 8004192:	4603      	mov	r3, r0
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	4618      	mov	r0, r3
 8004198:	f7fc f8f8 	bl	800038c <__aeabi_fmul>
 800419c:	4603      	mov	r3, r0
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fc f8f3 	bl	800038c <__aeabi_fmul>
 80041a6:	4603      	mov	r3, r0
 80041a8:	e02f      	b.n	800420a <EaseInOutCubic+0x9a>
 80041aa:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fb ffe2 	bl	8000178 <__aeabi_fsub>
 80041b4:	4603      	mov	r3, r0
 80041b6:	461c      	mov	r4, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4619      	mov	r1, r3
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fb ffdd 	bl	800017c <__addsf3>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fb ffd5 	bl	8000178 <__aeabi_fsub>
 80041ce:	4603      	mov	r3, r0
 80041d0:	4619      	mov	r1, r3
 80041d2:	4620      	mov	r0, r4
 80041d4:	f7fc f8da 	bl	800038c <__aeabi_fmul>
 80041d8:	4603      	mov	r3, r0
 80041da:	461c      	mov	r4, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4619      	mov	r1, r3
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fb ffcb 	bl	800017c <__addsf3>
 80041e6:	4603      	mov	r3, r0
 80041e8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7fb ffc3 	bl	8000178 <__aeabi_fsub>
 80041f2:	4603      	mov	r3, r0
 80041f4:	4619      	mov	r1, r3
 80041f6:	4620      	mov	r0, r4
 80041f8:	f7fc f8c8 	bl	800038c <__aeabi_fmul>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004202:	4618      	mov	r0, r3
 8004204:	f7fb ffba 	bl	800017c <__addsf3>
 8004208:	4603      	mov	r3, r0
}
 800420a:	4618      	mov	r0, r3
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	bd90      	pop	{r4, r7, pc}
	...

08004214 <EaseInExpo>:

// 在现有EaseType_t枚举中添加这些新类型
// 指数缓动
static float EaseInExpo(float t)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
    return (t == 0) ? 0 : powf(2, 10 * (t - 1));
 800421c:	f04f 0100 	mov.w	r1, #0
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7fc fa47 	bl	80006b4 <__aeabi_fcmpeq>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d111      	bne.n	8004250 <EaseInExpo+0x3c>
 800422c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7fb ffa1 	bl	8000178 <__aeabi_fsub>
 8004236:	4603      	mov	r3, r0
 8004238:	4908      	ldr	r1, [pc, #32]	@ (800425c <EaseInExpo+0x48>)
 800423a:	4618      	mov	r0, r3
 800423c:	f7fc f8a6 	bl	800038c <__aeabi_fmul>
 8004240:	4603      	mov	r3, r0
 8004242:	4619      	mov	r1, r3
 8004244:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004248:	f005 f9d4 	bl	80095f4 <powf>
 800424c:	4603      	mov	r3, r0
 800424e:	e001      	b.n	8004254 <EaseInExpo+0x40>
 8004250:	f04f 0300 	mov.w	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	41200000 	.word	0x41200000

08004260 <EaseOutExpo>:

static float EaseOutExpo(float t)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
    return (t == 1) ? 1 : (1 - powf(2, -10 * t));
 8004268:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7fc fa21 	bl	80006b4 <__aeabi_fcmpeq>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d111      	bne.n	800429c <EaseOutExpo+0x3c>
 8004278:	490b      	ldr	r1, [pc, #44]	@ (80042a8 <EaseOutExpo+0x48>)
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fc f886 	bl	800038c <__aeabi_fmul>
 8004280:	4603      	mov	r3, r0
 8004282:	4619      	mov	r1, r3
 8004284:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004288:	f005 f9b4 	bl	80095f4 <powf>
 800428c:	4603      	mov	r3, r0
 800428e:	4619      	mov	r1, r3
 8004290:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004294:	f7fb ff70 	bl	8000178 <__aeabi_fsub>
 8004298:	4603      	mov	r3, r0
 800429a:	e001      	b.n	80042a0 <EaseOutExpo+0x40>
 800429c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	c1200000 	.word	0xc1200000

080042ac <EaseInOutExpo>:

static float EaseInOutExpo(float t)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
    if (t == 0)
 80042b4:	f04f 0100 	mov.w	r1, #0
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7fc f9fb 	bl	80006b4 <__aeabi_fcmpeq>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <EaseInOutExpo+0x1e>
        return 0;
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	e045      	b.n	8004356 <EaseInOutExpo+0xaa>
    if (t == 1)
 80042ca:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fc f9f0 	bl	80006b4 <__aeabi_fcmpeq>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <EaseInOutExpo+0x34>
        return 1;
 80042da:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80042de:	e03a      	b.n	8004356 <EaseInOutExpo+0xaa>
    if (t < 0.5f)
 80042e0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7fc f9ef 	bl	80006c8 <__aeabi_fcmplt>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d016      	beq.n	800431e <EaseInOutExpo+0x72>
        return powf(2, 20 * t - 10) / 2;
 80042f0:	491b      	ldr	r1, [pc, #108]	@ (8004360 <EaseInOutExpo+0xb4>)
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7fc f84a 	bl	800038c <__aeabi_fmul>
 80042f8:	4603      	mov	r3, r0
 80042fa:	491a      	ldr	r1, [pc, #104]	@ (8004364 <EaseInOutExpo+0xb8>)
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fb ff3b 	bl	8000178 <__aeabi_fsub>
 8004302:	4603      	mov	r3, r0
 8004304:	4619      	mov	r1, r3
 8004306:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800430a:	f005 f973 	bl	80095f4 <powf>
 800430e:	4603      	mov	r3, r0
 8004310:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004314:	4618      	mov	r0, r3
 8004316:	f7fc f8ed 	bl	80004f4 <__aeabi_fdiv>
 800431a:	4603      	mov	r3, r0
 800431c:	e01b      	b.n	8004356 <EaseInOutExpo+0xaa>
    return (2 - powf(2, -20 * t + 10)) / 2;
 800431e:	4912      	ldr	r1, [pc, #72]	@ (8004368 <EaseInOutExpo+0xbc>)
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7fc f833 	bl	800038c <__aeabi_fmul>
 8004326:	4603      	mov	r3, r0
 8004328:	490e      	ldr	r1, [pc, #56]	@ (8004364 <EaseInOutExpo+0xb8>)
 800432a:	4618      	mov	r0, r3
 800432c:	f7fb ff26 	bl	800017c <__addsf3>
 8004330:	4603      	mov	r3, r0
 8004332:	4619      	mov	r1, r3
 8004334:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004338:	f005 f95c 	bl	80095f4 <powf>
 800433c:	4603      	mov	r3, r0
 800433e:	4619      	mov	r1, r3
 8004340:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004344:	f7fb ff18 	bl	8000178 <__aeabi_fsub>
 8004348:	4603      	mov	r3, r0
 800434a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800434e:	4618      	mov	r0, r3
 8004350:	f7fc f8d0 	bl	80004f4 <__aeabi_fdiv>
 8004354:	4603      	mov	r3, r0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	41a00000 	.word	0x41a00000
 8004364:	41200000 	.word	0x41200000
 8004368:	c1a00000 	.word	0xc1a00000

0800436c <EaseInCirc>:

// 圆形曲线缓动
static float EaseInCirc(float t)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
    return 1 - sqrtf(1 - t * t);
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fc f808 	bl	800038c <__aeabi_fmul>
 800437c:	4603      	mov	r3, r0
 800437e:	4619      	mov	r1, r3
 8004380:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004384:	f7fb fef8 	bl	8000178 <__aeabi_fsub>
 8004388:	4603      	mov	r3, r0
 800438a:	4618      	mov	r0, r3
 800438c:	f005 f97f 	bl	800968e <sqrtf>
 8004390:	4603      	mov	r3, r0
 8004392:	4619      	mov	r1, r3
 8004394:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004398:	f7fb feee 	bl	8000178 <__aeabi_fsub>
 800439c:	4603      	mov	r3, r0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <EaseOutCirc>:

static float EaseOutCirc(float t)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b082      	sub	sp, #8
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
    return sqrtf(1 - powf(t - 1, 2));
 80043ae:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fb fee0 	bl	8000178 <__aeabi_fsub>
 80043b8:	4603      	mov	r3, r0
 80043ba:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80043be:	4618      	mov	r0, r3
 80043c0:	f005 f918 	bl	80095f4 <powf>
 80043c4:	4603      	mov	r3, r0
 80043c6:	4619      	mov	r1, r3
 80043c8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80043cc:	f7fb fed4 	bl	8000178 <__aeabi_fsub>
 80043d0:	4603      	mov	r3, r0
 80043d2:	4618      	mov	r0, r3
 80043d4:	f005 f95b 	bl	800968e <sqrtf>
 80043d8:	4603      	mov	r3, r0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <EaseInOutCirc>:

static float EaseInOutCirc(float t)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b082      	sub	sp, #8
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 80043ea:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fc f96a 	bl	80006c8 <__aeabi_fcmplt>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d022      	beq.n	8004440 <EaseInOutCirc+0x5e>
        return (1 - sqrtf(1 - powf(2 * t, 2))) / 2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4619      	mov	r1, r3
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fb febc 	bl	800017c <__addsf3>
 8004404:	4603      	mov	r3, r0
 8004406:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800440a:	4618      	mov	r0, r3
 800440c:	f005 f8f2 	bl	80095f4 <powf>
 8004410:	4603      	mov	r3, r0
 8004412:	4619      	mov	r1, r3
 8004414:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004418:	f7fb feae 	bl	8000178 <__aeabi_fsub>
 800441c:	4603      	mov	r3, r0
 800441e:	4618      	mov	r0, r3
 8004420:	f005 f935 	bl	800968e <sqrtf>
 8004424:	4603      	mov	r3, r0
 8004426:	4619      	mov	r1, r3
 8004428:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800442c:	f7fb fea4 	bl	8000178 <__aeabi_fsub>
 8004430:	4603      	mov	r3, r0
 8004432:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004436:	4618      	mov	r0, r3
 8004438:	f7fc f85c 	bl	80004f4 <__aeabi_fdiv>
 800443c:	4603      	mov	r3, r0
 800443e:	e027      	b.n	8004490 <EaseInOutCirc+0xae>
    return (sqrtf(1 - powf(-2 * t + 2, 2)) + 1) / 2;
 8004440:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7fb ffa1 	bl	800038c <__aeabi_fmul>
 800444a:	4603      	mov	r3, r0
 800444c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004450:	4618      	mov	r0, r3
 8004452:	f7fb fe93 	bl	800017c <__addsf3>
 8004456:	4603      	mov	r3, r0
 8004458:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800445c:	4618      	mov	r0, r3
 800445e:	f005 f8c9 	bl	80095f4 <powf>
 8004462:	4603      	mov	r3, r0
 8004464:	4619      	mov	r1, r3
 8004466:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800446a:	f7fb fe85 	bl	8000178 <__aeabi_fsub>
 800446e:	4603      	mov	r3, r0
 8004470:	4618      	mov	r0, r3
 8004472:	f005 f90c 	bl	800968e <sqrtf>
 8004476:	4603      	mov	r3, r0
 8004478:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800447c:	4618      	mov	r0, r3
 800447e:	f7fb fe7d 	bl	800017c <__addsf3>
 8004482:	4603      	mov	r3, r0
 8004484:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004488:	4618      	mov	r0, r3
 800448a:	f7fc f833 	bl	80004f4 <__aeabi_fdiv>
 800448e:	4603      	mov	r3, r0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <EaseInElastic>:

// 弹性缓动
static float EaseInElastic(float t)
{
 8004498:	b590      	push	{r4, r7, lr}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 80044a0:	4b22      	ldr	r3, [pc, #136]	@ (800452c <EaseInElastic+0x94>)
 80044a2:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 80044a4:	f04f 0100 	mov.w	r1, #0
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7fc f903 	bl	80006b4 <__aeabi_fcmpeq>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <EaseInElastic+0x22>
        return 0;
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	e034      	b.n	8004524 <EaseInElastic+0x8c>
    if (t == 1)
 80044ba:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fc f8f8 	bl	80006b4 <__aeabi_fcmpeq>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <EaseInElastic+0x38>
        return 1;
 80044ca:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80044ce:	e029      	b.n	8004524 <EaseInElastic+0x8c>
    return -powf(2, 10 * t - 10) * sinf((t * 10 - 10.75f) * c4);
 80044d0:	4917      	ldr	r1, [pc, #92]	@ (8004530 <EaseInElastic+0x98>)
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fb ff5a 	bl	800038c <__aeabi_fmul>
 80044d8:	4603      	mov	r3, r0
 80044da:	4915      	ldr	r1, [pc, #84]	@ (8004530 <EaseInElastic+0x98>)
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fb fe4b 	bl	8000178 <__aeabi_fsub>
 80044e2:	4603      	mov	r3, r0
 80044e4:	4619      	mov	r1, r3
 80044e6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80044ea:	f005 f883 	bl	80095f4 <powf>
 80044ee:	4603      	mov	r3, r0
 80044f0:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 80044f4:	490e      	ldr	r1, [pc, #56]	@ (8004530 <EaseInElastic+0x98>)
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fb ff48 	bl	800038c <__aeabi_fmul>
 80044fc:	4603      	mov	r3, r0
 80044fe:	490d      	ldr	r1, [pc, #52]	@ (8004534 <EaseInElastic+0x9c>)
 8004500:	4618      	mov	r0, r3
 8004502:	f7fb fe39 	bl	8000178 <__aeabi_fsub>
 8004506:	4603      	mov	r3, r0
 8004508:	68f9      	ldr	r1, [r7, #12]
 800450a:	4618      	mov	r0, r3
 800450c:	f7fb ff3e 	bl	800038c <__aeabi_fmul>
 8004510:	4603      	mov	r3, r0
 8004512:	4618      	mov	r0, r3
 8004514:	f005 f90e 	bl	8009734 <sinf>
 8004518:	4603      	mov	r3, r0
 800451a:	4619      	mov	r1, r3
 800451c:	4620      	mov	r0, r4
 800451e:	f7fb ff35 	bl	800038c <__aeabi_fmul>
 8004522:	4603      	mov	r3, r0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	bd90      	pop	{r4, r7, pc}
 800452c:	40060a8b 	.word	0x40060a8b
 8004530:	41200000 	.word	0x41200000
 8004534:	412c0000 	.word	0x412c0000

08004538 <EaseOutElastic>:

static float EaseOutElastic(float t)
{
 8004538:	b590      	push	{r4, r7, lr}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 8004540:	4b22      	ldr	r3, [pc, #136]	@ (80045cc <EaseOutElastic+0x94>)
 8004542:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8004544:	f04f 0100 	mov.w	r1, #0
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7fc f8b3 	bl	80006b4 <__aeabi_fcmpeq>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <EaseOutElastic+0x22>
        return 0;
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	e034      	b.n	80045c4 <EaseOutElastic+0x8c>
    if (t == 1)
 800455a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fc f8a8 	bl	80006b4 <__aeabi_fcmpeq>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <EaseOutElastic+0x38>
        return 1;
 800456a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800456e:	e029      	b.n	80045c4 <EaseOutElastic+0x8c>
    return powf(2, -10 * t) * sinf((t * 10 - 0.75f) * c4) + 1;
 8004570:	4917      	ldr	r1, [pc, #92]	@ (80045d0 <EaseOutElastic+0x98>)
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fb ff0a 	bl	800038c <__aeabi_fmul>
 8004578:	4603      	mov	r3, r0
 800457a:	4619      	mov	r1, r3
 800457c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004580:	f005 f838 	bl	80095f4 <powf>
 8004584:	4604      	mov	r4, r0
 8004586:	4913      	ldr	r1, [pc, #76]	@ (80045d4 <EaseOutElastic+0x9c>)
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7fb feff 	bl	800038c <__aeabi_fmul>
 800458e:	4603      	mov	r3, r0
 8004590:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8004594:	4618      	mov	r0, r3
 8004596:	f7fb fdef 	bl	8000178 <__aeabi_fsub>
 800459a:	4603      	mov	r3, r0
 800459c:	68f9      	ldr	r1, [r7, #12]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fb fef4 	bl	800038c <__aeabi_fmul>
 80045a4:	4603      	mov	r3, r0
 80045a6:	4618      	mov	r0, r3
 80045a8:	f005 f8c4 	bl	8009734 <sinf>
 80045ac:	4603      	mov	r3, r0
 80045ae:	4619      	mov	r1, r3
 80045b0:	4620      	mov	r0, r4
 80045b2:	f7fb feeb 	bl	800038c <__aeabi_fmul>
 80045b6:	4603      	mov	r3, r0
 80045b8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fb fddd 	bl	800017c <__addsf3>
 80045c2:	4603      	mov	r3, r0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd90      	pop	{r4, r7, pc}
 80045cc:	40060a8b 	.word	0x40060a8b
 80045d0:	c1200000 	.word	0xc1200000
 80045d4:	41200000 	.word	0x41200000

080045d8 <EaseInOutElastic>:

static float EaseInOutElastic(float t)
{
 80045d8:	b590      	push	{r4, r7, lr}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
    const float c5 = (2 * 3.14159f) / 4.5f;
 80045e0:	4b44      	ldr	r3, [pc, #272]	@ (80046f4 <EaseInOutElastic+0x11c>)
 80045e2:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 80045e4:	f04f 0100 	mov.w	r1, #0
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7fc f863 	bl	80006b4 <__aeabi_fcmpeq>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <EaseInOutElastic+0x22>
        return 0;
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	e077      	b.n	80046ea <EaseInOutElastic+0x112>
    if (t == 1)
 80045fa:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fc f858 	bl	80006b4 <__aeabi_fcmpeq>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <EaseInOutElastic+0x38>
        return 1;
 800460a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800460e:	e06c      	b.n	80046ea <EaseInOutElastic+0x112>
    if (t < 0.5f)
 8004610:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7fc f857 	bl	80006c8 <__aeabi_fcmplt>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d030      	beq.n	8004682 <EaseInOutElastic+0xaa>
        return -(powf(2, 20 * t - 10) * sinf((20 * t - 11.125f) * c5)) / 2;
 8004620:	4935      	ldr	r1, [pc, #212]	@ (80046f8 <EaseInOutElastic+0x120>)
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fb feb2 	bl	800038c <__aeabi_fmul>
 8004628:	4603      	mov	r3, r0
 800462a:	4934      	ldr	r1, [pc, #208]	@ (80046fc <EaseInOutElastic+0x124>)
 800462c:	4618      	mov	r0, r3
 800462e:	f7fb fda3 	bl	8000178 <__aeabi_fsub>
 8004632:	4603      	mov	r3, r0
 8004634:	4619      	mov	r1, r3
 8004636:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800463a:	f004 ffdb 	bl	80095f4 <powf>
 800463e:	4604      	mov	r4, r0
 8004640:	492d      	ldr	r1, [pc, #180]	@ (80046f8 <EaseInOutElastic+0x120>)
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7fb fea2 	bl	800038c <__aeabi_fmul>
 8004648:	4603      	mov	r3, r0
 800464a:	492d      	ldr	r1, [pc, #180]	@ (8004700 <EaseInOutElastic+0x128>)
 800464c:	4618      	mov	r0, r3
 800464e:	f7fb fd93 	bl	8000178 <__aeabi_fsub>
 8004652:	4603      	mov	r3, r0
 8004654:	68f9      	ldr	r1, [r7, #12]
 8004656:	4618      	mov	r0, r3
 8004658:	f7fb fe98 	bl	800038c <__aeabi_fmul>
 800465c:	4603      	mov	r3, r0
 800465e:	4618      	mov	r0, r3
 8004660:	f005 f868 	bl	8009734 <sinf>
 8004664:	4603      	mov	r3, r0
 8004666:	4619      	mov	r1, r3
 8004668:	4620      	mov	r0, r4
 800466a:	f7fb fe8f 	bl	800038c <__aeabi_fmul>
 800466e:	4603      	mov	r3, r0
 8004670:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004674:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004678:	4618      	mov	r0, r3
 800467a:	f7fb ff3b 	bl	80004f4 <__aeabi_fdiv>
 800467e:	4603      	mov	r3, r0
 8004680:	e033      	b.n	80046ea <EaseInOutElastic+0x112>
    return (powf(2, -20 * t + 10) * sinf((20 * t - 11.125f) * c5)) / 2 + 1;
 8004682:	4920      	ldr	r1, [pc, #128]	@ (8004704 <EaseInOutElastic+0x12c>)
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7fb fe81 	bl	800038c <__aeabi_fmul>
 800468a:	4603      	mov	r3, r0
 800468c:	491b      	ldr	r1, [pc, #108]	@ (80046fc <EaseInOutElastic+0x124>)
 800468e:	4618      	mov	r0, r3
 8004690:	f7fb fd74 	bl	800017c <__addsf3>
 8004694:	4603      	mov	r3, r0
 8004696:	4619      	mov	r1, r3
 8004698:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800469c:	f004 ffaa 	bl	80095f4 <powf>
 80046a0:	4604      	mov	r4, r0
 80046a2:	4915      	ldr	r1, [pc, #84]	@ (80046f8 <EaseInOutElastic+0x120>)
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7fb fe71 	bl	800038c <__aeabi_fmul>
 80046aa:	4603      	mov	r3, r0
 80046ac:	4914      	ldr	r1, [pc, #80]	@ (8004700 <EaseInOutElastic+0x128>)
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fb fd62 	bl	8000178 <__aeabi_fsub>
 80046b4:	4603      	mov	r3, r0
 80046b6:	68f9      	ldr	r1, [r7, #12]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fb fe67 	bl	800038c <__aeabi_fmul>
 80046be:	4603      	mov	r3, r0
 80046c0:	4618      	mov	r0, r3
 80046c2:	f005 f837 	bl	8009734 <sinf>
 80046c6:	4603      	mov	r3, r0
 80046c8:	4619      	mov	r1, r3
 80046ca:	4620      	mov	r0, r4
 80046cc:	f7fb fe5e 	bl	800038c <__aeabi_fmul>
 80046d0:	4603      	mov	r3, r0
 80046d2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fb ff0c 	bl	80004f4 <__aeabi_fdiv>
 80046dc:	4603      	mov	r3, r0
 80046de:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fb fd4a 	bl	800017c <__addsf3>
 80046e8:	4603      	mov	r3, r0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd90      	pop	{r4, r7, pc}
 80046f2:	bf00      	nop
 80046f4:	3fb2b8b9 	.word	0x3fb2b8b9
 80046f8:	41a00000 	.word	0x41a00000
 80046fc:	41200000 	.word	0x41200000
 8004700:	41320000 	.word	0x41320000
 8004704:	c1a00000 	.word	0xc1a00000

08004708 <EaseOutBounce>:

static float EaseOutBounce(float t)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
    const float n1 = 7.5625f;
 8004710:	4b45      	ldr	r3, [pc, #276]	@ (8004828 <EaseOutBounce+0x120>)
 8004712:	60fb      	str	r3, [r7, #12]
    const float d1 = 2.75f;
 8004714:	4b45      	ldr	r3, [pc, #276]	@ (800482c <EaseOutBounce+0x124>)
 8004716:	60bb      	str	r3, [r7, #8]

    if (t < 1 / d1)
 8004718:	68b9      	ldr	r1, [r7, #8]
 800471a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800471e:	f7fb fee9 	bl	80004f4 <__aeabi_fdiv>
 8004722:	4603      	mov	r3, r0
 8004724:	4619      	mov	r1, r3
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fb ffce 	bl	80006c8 <__aeabi_fcmplt>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <EaseOutBounce+0x40>
    {
        return n1 * t * t;
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f7fb fe29 	bl	800038c <__aeabi_fmul>
 800473a:	4603      	mov	r3, r0
 800473c:	6879      	ldr	r1, [r7, #4]
 800473e:	4618      	mov	r0, r3
 8004740:	f7fb fe24 	bl	800038c <__aeabi_fmul>
 8004744:	4603      	mov	r3, r0
 8004746:	e06a      	b.n	800481e <EaseOutBounce+0x116>
    }
    else if (t < 2 / d1)
 8004748:	68b9      	ldr	r1, [r7, #8]
 800474a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800474e:	f7fb fed1 	bl	80004f4 <__aeabi_fdiv>
 8004752:	4603      	mov	r3, r0
 8004754:	4619      	mov	r1, r3
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fb ffb6 	bl	80006c8 <__aeabi_fcmplt>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d01c      	beq.n	800479c <EaseOutBounce+0x94>
    {
        t -= 1.5f / d1;
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8004768:	f7fb fec4 	bl	80004f4 <__aeabi_fdiv>
 800476c:	4603      	mov	r3, r0
 800476e:	4619      	mov	r1, r3
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7fb fd01 	bl	8000178 <__aeabi_fsub>
 8004776:	4603      	mov	r3, r0
 8004778:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.75f;
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f7fb fe05 	bl	800038c <__aeabi_fmul>
 8004782:	4603      	mov	r3, r0
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	4618      	mov	r0, r3
 8004788:	f7fb fe00 	bl	800038c <__aeabi_fmul>
 800478c:	4603      	mov	r3, r0
 800478e:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8004792:	4618      	mov	r0, r3
 8004794:	f7fb fcf2 	bl	800017c <__addsf3>
 8004798:	4603      	mov	r3, r0
 800479a:	e040      	b.n	800481e <EaseOutBounce+0x116>
    }
    else if (t < 2.5f / d1)
 800479c:	68b9      	ldr	r1, [r7, #8]
 800479e:	4824      	ldr	r0, [pc, #144]	@ (8004830 <EaseOutBounce+0x128>)
 80047a0:	f7fb fea8 	bl	80004f4 <__aeabi_fdiv>
 80047a4:	4603      	mov	r3, r0
 80047a6:	4619      	mov	r1, r3
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7fb ff8d 	bl	80006c8 <__aeabi_fcmplt>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01a      	beq.n	80047ea <EaseOutBounce+0xe2>
    {
        t -= 2.25f / d1;
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	481f      	ldr	r0, [pc, #124]	@ (8004834 <EaseOutBounce+0x12c>)
 80047b8:	f7fb fe9c 	bl	80004f4 <__aeabi_fdiv>
 80047bc:	4603      	mov	r3, r0
 80047be:	4619      	mov	r1, r3
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7fb fcd9 	bl	8000178 <__aeabi_fsub>
 80047c6:	4603      	mov	r3, r0
 80047c8:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.9375f;
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f7fb fddd 	bl	800038c <__aeabi_fmul>
 80047d2:	4603      	mov	r3, r0
 80047d4:	6879      	ldr	r1, [r7, #4]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fb fdd8 	bl	800038c <__aeabi_fmul>
 80047dc:	4603      	mov	r3, r0
 80047de:	4916      	ldr	r1, [pc, #88]	@ (8004838 <EaseOutBounce+0x130>)
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fb fccb 	bl	800017c <__addsf3>
 80047e6:	4603      	mov	r3, r0
 80047e8:	e019      	b.n	800481e <EaseOutBounce+0x116>
    }
    else
    {
        t -= 2.625f / d1;
 80047ea:	68b9      	ldr	r1, [r7, #8]
 80047ec:	4813      	ldr	r0, [pc, #76]	@ (800483c <EaseOutBounce+0x134>)
 80047ee:	f7fb fe81 	bl	80004f4 <__aeabi_fdiv>
 80047f2:	4603      	mov	r3, r0
 80047f4:	4619      	mov	r1, r3
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fb fcbe 	bl	8000178 <__aeabi_fsub>
 80047fc:	4603      	mov	r3, r0
 80047fe:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.984375f;
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f7fb fdc2 	bl	800038c <__aeabi_fmul>
 8004808:	4603      	mov	r3, r0
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	4618      	mov	r0, r3
 800480e:	f7fb fdbd 	bl	800038c <__aeabi_fmul>
 8004812:	4603      	mov	r3, r0
 8004814:	490a      	ldr	r1, [pc, #40]	@ (8004840 <EaseOutBounce+0x138>)
 8004816:	4618      	mov	r0, r3
 8004818:	f7fb fcb0 	bl	800017c <__addsf3>
 800481c:	4603      	mov	r3, r0
    }
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40f20000 	.word	0x40f20000
 800482c:	40300000 	.word	0x40300000
 8004830:	40200000 	.word	0x40200000
 8004834:	40100000 	.word	0x40100000
 8004838:	3f700000 	.word	0x3f700000
 800483c:	40280000 	.word	0x40280000
 8004840:	3f7c0000 	.word	0x3f7c0000

08004844 <EaseInBounce>:

// 反弹缓动
static float EaseInBounce(float t)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
    return 1 - EaseOutBounce(1 - t);
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004852:	f7fb fc91 	bl	8000178 <__aeabi_fsub>
 8004856:	4603      	mov	r3, r0
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff ff55 	bl	8004708 <EaseOutBounce>
 800485e:	4603      	mov	r3, r0
 8004860:	4619      	mov	r1, r3
 8004862:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004866:	f7fb fc87 	bl	8000178 <__aeabi_fsub>
 800486a:	4603      	mov	r3, r0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <EaseInOutBounce>:

static float EaseInOutBounce(float t)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 800487c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7fb ff21 	bl	80006c8 <__aeabi_fcmplt>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d010      	beq.n	80048ae <EaseInOutBounce+0x3a>
        return EaseInBounce(t * 2) * 0.5f;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4619      	mov	r1, r3
 8004890:	4618      	mov	r0, r3
 8004892:	f7fb fc73 	bl	800017c <__addsf3>
 8004896:	4603      	mov	r3, r0
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff ffd3 	bl	8004844 <EaseInBounce>
 800489e:	4603      	mov	r3, r0
 80048a0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fb fd71 	bl	800038c <__aeabi_fmul>
 80048aa:	4603      	mov	r3, r0
 80048ac:	e01b      	b.n	80048e6 <EaseInOutBounce+0x72>
    return EaseOutBounce(t * 2 - 1) * 0.5f + 0.5f;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4619      	mov	r1, r3
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fb fc62 	bl	800017c <__addsf3>
 80048b8:	4603      	mov	r3, r0
 80048ba:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fb fc5a 	bl	8000178 <__aeabi_fsub>
 80048c4:	4603      	mov	r3, r0
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff ff1e 	bl	8004708 <EaseOutBounce>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fb fd5a 	bl	800038c <__aeabi_fmul>
 80048d8:	4603      	mov	r3, r0
 80048da:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fb fc4c 	bl	800017c <__addsf3>
 80048e4:	4603      	mov	r3, r0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <EaseInBack>:

// 背越式缓动
static float EaseInBack(float t)
{
 80048f0:	b590      	push	{r4, r7, lr}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 80048f8:	4b15      	ldr	r3, [pc, #84]	@ (8004950 <EaseInBack+0x60>)
 80048fa:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 80048fc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f7fb fc3b 	bl	800017c <__addsf3>
 8004906:	4603      	mov	r3, r0
 8004908:	60bb      	str	r3, [r7, #8]

    return c3 * t * t * t - c1 * t * t;
 800490a:	6879      	ldr	r1, [r7, #4]
 800490c:	68b8      	ldr	r0, [r7, #8]
 800490e:	f7fb fd3d 	bl	800038c <__aeabi_fmul>
 8004912:	4603      	mov	r3, r0
 8004914:	6879      	ldr	r1, [r7, #4]
 8004916:	4618      	mov	r0, r3
 8004918:	f7fb fd38 	bl	800038c <__aeabi_fmul>
 800491c:	4603      	mov	r3, r0
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	4618      	mov	r0, r3
 8004922:	f7fb fd33 	bl	800038c <__aeabi_fmul>
 8004926:	4603      	mov	r3, r0
 8004928:	461c      	mov	r4, r3
 800492a:	6879      	ldr	r1, [r7, #4]
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f7fb fd2d 	bl	800038c <__aeabi_fmul>
 8004932:	4603      	mov	r3, r0
 8004934:	6879      	ldr	r1, [r7, #4]
 8004936:	4618      	mov	r0, r3
 8004938:	f7fb fd28 	bl	800038c <__aeabi_fmul>
 800493c:	4603      	mov	r3, r0
 800493e:	4619      	mov	r1, r3
 8004940:	4620      	mov	r0, r4
 8004942:	f7fb fc19 	bl	8000178 <__aeabi_fsub>
 8004946:	4603      	mov	r3, r0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	bd90      	pop	{r4, r7, pc}
 8004950:	3fd9cd60 	.word	0x3fd9cd60

08004954 <EaseOutBack>:

static float EaseOutBack(float t)
{
 8004954:	b590      	push	{r4, r7, lr}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 800495c:	4b1c      	ldr	r3, [pc, #112]	@ (80049d0 <EaseOutBack+0x7c>)
 800495e:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8004960:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f7fb fc09 	bl	800017c <__addsf3>
 800496a:	4603      	mov	r3, r0
 800496c:	60bb      	str	r3, [r7, #8]

    return 1 + c3 * powf(t - 1, 3) + c1 * powf(t - 1, 2);
 800496e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fb fc00 	bl	8000178 <__aeabi_fsub>
 8004978:	4603      	mov	r3, r0
 800497a:	4916      	ldr	r1, [pc, #88]	@ (80049d4 <EaseOutBack+0x80>)
 800497c:	4618      	mov	r0, r3
 800497e:	f004 fe39 	bl	80095f4 <powf>
 8004982:	4603      	mov	r3, r0
 8004984:	68b9      	ldr	r1, [r7, #8]
 8004986:	4618      	mov	r0, r3
 8004988:	f7fb fd00 	bl	800038c <__aeabi_fmul>
 800498c:	4603      	mov	r3, r0
 800498e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004992:	4618      	mov	r0, r3
 8004994:	f7fb fbf2 	bl	800017c <__addsf3>
 8004998:	4603      	mov	r3, r0
 800499a:	461c      	mov	r4, r3
 800499c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7fb fbe9 	bl	8000178 <__aeabi_fsub>
 80049a6:	4603      	mov	r3, r0
 80049a8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80049ac:	4618      	mov	r0, r3
 80049ae:	f004 fe21 	bl	80095f4 <powf>
 80049b2:	4603      	mov	r3, r0
 80049b4:	68f9      	ldr	r1, [r7, #12]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fb fce8 	bl	800038c <__aeabi_fmul>
 80049bc:	4603      	mov	r3, r0
 80049be:	4619      	mov	r1, r3
 80049c0:	4620      	mov	r0, r4
 80049c2:	f7fb fbdb 	bl	800017c <__addsf3>
 80049c6:	4603      	mov	r3, r0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd90      	pop	{r4, r7, pc}
 80049d0:	3fd9cd60 	.word	0x3fd9cd60
 80049d4:	40400000 	.word	0x40400000

080049d8 <EaseInOutBack>:

static float EaseInOutBack(float t)
{
 80049d8:	b5b0      	push	{r4, r5, r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 80049e0:	4b40      	ldr	r3, [pc, #256]	@ (8004ae4 <EaseInOutBack+0x10c>)
 80049e2:	60fb      	str	r3, [r7, #12]
    const float c2 = c1 * 1.525f;
 80049e4:	4940      	ldr	r1, [pc, #256]	@ (8004ae8 <EaseInOutBack+0x110>)
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f7fb fcd0 	bl	800038c <__aeabi_fmul>
 80049ec:	4603      	mov	r3, r0
 80049ee:	60bb      	str	r3, [r7, #8]

    if (t < 0.5f)
 80049f0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7fb fe67 	bl	80006c8 <__aeabi_fcmplt>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d02c      	beq.n	8004a5a <EaseInOutBack+0x82>
        return (powf(2 * t, 2) * ((c2 + 1) * 2 * t - c2)) / 2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4619      	mov	r1, r3
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fb fbb9 	bl	800017c <__addsf3>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004a10:	4618      	mov	r0, r3
 8004a12:	f004 fdef 	bl	80095f4 <powf>
 8004a16:	4604      	mov	r4, r0
 8004a18:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004a1c:	68b8      	ldr	r0, [r7, #8]
 8004a1e:	f7fb fbad 	bl	800017c <__addsf3>
 8004a22:	4603      	mov	r3, r0
 8004a24:	4619      	mov	r1, r3
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fb fba8 	bl	800017c <__addsf3>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fb fcab 	bl	800038c <__aeabi_fmul>
 8004a36:	4603      	mov	r3, r0
 8004a38:	68b9      	ldr	r1, [r7, #8]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fb fb9c 	bl	8000178 <__aeabi_fsub>
 8004a40:	4603      	mov	r3, r0
 8004a42:	4619      	mov	r1, r3
 8004a44:	4620      	mov	r0, r4
 8004a46:	f7fb fca1 	bl	800038c <__aeabi_fmul>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fb fd4f 	bl	80004f4 <__aeabi_fdiv>
 8004a56:	4603      	mov	r3, r0
 8004a58:	e03f      	b.n	8004ada <EaseInOutBack+0x102>
    return (powf(2 * t - 2, 2) * ((c2 + 1) * (t * 2 - 2) + c2) + 2) / 2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fb fb8c 	bl	800017c <__addsf3>
 8004a64:	4603      	mov	r3, r0
 8004a66:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fb fb84 	bl	8000178 <__aeabi_fsub>
 8004a70:	4603      	mov	r3, r0
 8004a72:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004a76:	4618      	mov	r0, r3
 8004a78:	f004 fdbc 	bl	80095f4 <powf>
 8004a7c:	4604      	mov	r4, r0
 8004a7e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004a82:	68b8      	ldr	r0, [r7, #8]
 8004a84:	f7fb fb7a 	bl	800017c <__addsf3>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	461d      	mov	r5, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fb fb73 	bl	800017c <__addsf3>
 8004a96:	4603      	mov	r3, r0
 8004a98:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fb fb6b 	bl	8000178 <__aeabi_fsub>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	f7fb fc70 	bl	800038c <__aeabi_fmul>
 8004aac:	4603      	mov	r3, r0
 8004aae:	68b9      	ldr	r1, [r7, #8]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fb fb63 	bl	800017c <__addsf3>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4620      	mov	r0, r4
 8004abc:	f7fb fc66 	bl	800038c <__aeabi_fmul>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fb fb58 	bl	800017c <__addsf3>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fb fd0e 	bl	80004f4 <__aeabi_fdiv>
 8004ad8:	4603      	mov	r3, r0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	3fd9cd60 	.word	0x3fd9cd60
 8004ae8:	3fc33333 	.word	0x3fc33333

08004aec <EaseInSine>:

// 正弦缓动
static float EaseInSine(float t)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
    return 1 - cosf((t * 3.14159f) / 2);
 8004af4:	490c      	ldr	r1, [pc, #48]	@ (8004b28 <EaseInSine+0x3c>)
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7fb fc48 	bl	800038c <__aeabi_fmul>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fb fcf6 	bl	80004f4 <__aeabi_fdiv>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f004 fdda 	bl	80096c4 <cosf>
 8004b10:	4603      	mov	r3, r0
 8004b12:	4619      	mov	r1, r3
 8004b14:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004b18:	f7fb fb2e 	bl	8000178 <__aeabi_fsub>
 8004b1c:	4603      	mov	r3, r0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40490fd0 	.word	0x40490fd0

08004b2c <EaseOutSine>:

static float EaseOutSine(float t)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
    return sinf((t * 3.14159f) / 2);
 8004b34:	4909      	ldr	r1, [pc, #36]	@ (8004b5c <EaseOutSine+0x30>)
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fb fc28 	bl	800038c <__aeabi_fmul>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fb fcd6 	bl	80004f4 <__aeabi_fdiv>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f004 fdf2 	bl	8009734 <sinf>
 8004b50:	4603      	mov	r3, r0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40490fd0 	.word	0x40490fd0

08004b60 <EaseInOutSine>:

static float EaseInOutSine(float t)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
    return -(cosf(3.14159f * t) - 1) / 2;
 8004b68:	490d      	ldr	r1, [pc, #52]	@ (8004ba0 <EaseInOutSine+0x40>)
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fb fc0e 	bl	800038c <__aeabi_fmul>
 8004b70:	4603      	mov	r3, r0
 8004b72:	4618      	mov	r0, r3
 8004b74:	f004 fda6 	bl	80096c4 <cosf>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fb fafa 	bl	8000178 <__aeabi_fsub>
 8004b84:	4603      	mov	r3, r0
 8004b86:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004b8a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fb fcb0 	bl	80004f4 <__aeabi_fdiv>
 8004b94:	4603      	mov	r3, r0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40490fd0 	.word	0x40490fd0

08004ba4 <GetEaseValue>:

static float GetEaseValue(float progress, EaseType_t easeType)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	70fb      	strb	r3, [r7, #3]
    switch (easeType)
 8004bb0:	78fb      	ldrb	r3, [r7, #3]
 8004bb2:	2b18      	cmp	r3, #24
 8004bb4:	f200 80b3 	bhi.w	8004d1e <GetEaseValue+0x17a>
 8004bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc0 <GetEaseValue+0x1c>)
 8004bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbe:	bf00      	nop
 8004bc0:	08004c25 	.word	0x08004c25
 8004bc4:	08004c2f 	.word	0x08004c2f
 8004bc8:	08004c39 	.word	0x08004c39
 8004bcc:	08004c43 	.word	0x08004c43
 8004bd0:	08004c4d 	.word	0x08004c4d
 8004bd4:	08004c57 	.word	0x08004c57
 8004bd8:	08004c61 	.word	0x08004c61
 8004bdc:	08004c6b 	.word	0x08004c6b
 8004be0:	08004c75 	.word	0x08004c75
 8004be4:	08004c7f 	.word	0x08004c7f
 8004be8:	08004c89 	.word	0x08004c89
 8004bec:	08004c93 	.word	0x08004c93
 8004bf0:	08004c9d 	.word	0x08004c9d
 8004bf4:	08004ca7 	.word	0x08004ca7
 8004bf8:	08004cb1 	.word	0x08004cb1
 8004bfc:	08004cbb 	.word	0x08004cbb
 8004c00:	08004cc5 	.word	0x08004cc5
 8004c04:	08004ccf 	.word	0x08004ccf
 8004c08:	08004cd9 	.word	0x08004cd9
 8004c0c:	08004ce3 	.word	0x08004ce3
 8004c10:	08004ced 	.word	0x08004ced
 8004c14:	08004cf7 	.word	0x08004cf7
 8004c18:	08004d01 	.word	0x08004d01
 8004c1c:	08004d0b 	.word	0x08004d0b
 8004c20:	08004d15 	.word	0x08004d15
    {
    case EASE_LINEAR:
        return EaseLinear(progress);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f7ff fa15 	bl	8004054 <EaseLinear>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	e078      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_IN_QUAD:
        return EaseInQuad(progress);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7ff fa1a 	bl	8004068 <EaseInQuad>
 8004c34:	4603      	mov	r3, r0
 8004c36:	e073      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_OUT_QUAD:
        return EaseOutQuad(progress);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7ff fa22 	bl	8004082 <EaseOutQuad>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	e06e      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_INOUT_QUAD:
        return EaseInOutQuad(progress);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7ff fa30 	bl	80040a8 <EaseInOutQuad>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	e069      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_IN_CUBIC:
        return EaseInCubic(progress);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff fa5e 	bl	800410e <EaseInCubic>
 8004c52:	4603      	mov	r3, r0
 8004c54:	e064      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_OUT_CUBIC:
        return EaseOutCubic(progress);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7ff fa6b 	bl	8004132 <EaseOutCubic>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	e05f      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_INOUT_CUBIC:
        return EaseInOutCubic(progress);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7ff fa85 	bl	8004170 <EaseInOutCubic>
 8004c66:	4603      	mov	r3, r0
 8004c68:	e05a      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_IN_EXPO:
        return EaseInExpo(progress);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff fad2 	bl	8004214 <EaseInExpo>
 8004c70:	4603      	mov	r3, r0
 8004c72:	e055      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_OUT_EXPO:
        return EaseOutExpo(progress);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff faf3 	bl	8004260 <EaseOutExpo>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	e050      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_INOUT_EXPO:
        return EaseInOutExpo(progress);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7ff fb14 	bl	80042ac <EaseInOutExpo>
 8004c84:	4603      	mov	r3, r0
 8004c86:	e04b      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_IN_CIRC:
        return EaseInCirc(progress);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff fb6f 	bl	800436c <EaseInCirc>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	e046      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_OUT_CIRC:
        return EaseOutCirc(progress);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7ff fb87 	bl	80043a6 <EaseOutCirc>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	e041      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_INOUT_CIRC:
        return EaseInOutCirc(progress);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7ff fba0 	bl	80043e2 <EaseInOutCirc>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	e03c      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_IN_ELASTIC:
        return EaseInElastic(progress);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7ff fbf6 	bl	8004498 <EaseInElastic>
 8004cac:	4603      	mov	r3, r0
 8004cae:	e037      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_OUT_ELASTIC:
        return EaseOutElastic(progress);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7ff fc41 	bl	8004538 <EaseOutElastic>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	e032      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_INOUT_ELASTIC:
        return EaseInOutElastic(progress);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7ff fc8c 	bl	80045d8 <EaseInOutElastic>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	e02d      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_IN_BOUNCE:
        return EaseInBounce(progress);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff fdbd 	bl	8004844 <EaseInBounce>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	e028      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_OUT_BOUNCE:
        return EaseOutBounce(progress);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7ff fd1a 	bl	8004708 <EaseOutBounce>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	e023      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_INOUT_BOUNCE:
        return EaseInOutBounce(progress);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff fdcb 	bl	8004874 <EaseInOutBounce>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	e01e      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_IN_BACK:
        return EaseInBack(progress);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7ff fe04 	bl	80048f0 <EaseInBack>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	e019      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_OUT_BACK:
        return EaseOutBack(progress);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7ff fe31 	bl	8004954 <EaseOutBack>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	e014      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_INOUT_BACK:
        return EaseInOutBack(progress);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7ff fe6e 	bl	80049d8 <EaseInOutBack>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	e00f      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_IN_SINE:
        return EaseInSine(progress);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff fef3 	bl	8004aec <EaseInSine>
 8004d06:	4603      	mov	r3, r0
 8004d08:	e00a      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_OUT_SINE:
        return EaseOutSine(progress);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7ff ff0e 	bl	8004b2c <EaseOutSine>
 8004d10:	4603      	mov	r3, r0
 8004d12:	e005      	b.n	8004d20 <GetEaseValue+0x17c>
    case EASE_INOUT_SINE:
        return EaseInOutSine(progress);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff ff23 	bl	8004b60 <EaseInOutSine>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	e000      	b.n	8004d20 <GetEaseValue+0x17c>
    default:
        return progress;
 8004d1e:	687b      	ldr	r3, [r7, #4]
    }
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <OLED_InitAnimation>:

#pragma region ANIMATIONTWEENS
// 这里是底层动画实现
void OLED_InitAnimation(Animation_t *anim, float startValue, float endValue,
                        uint32_t duration, EaseType_t easeType)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	603b      	str	r3, [r7, #0]
    anim->startTime = HAL_GetTick();
 8004d36:	f000 fde1 	bl	80058fc <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	601a      	str	r2, [r3, #0]
    anim->duration = duration;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	605a      	str	r2, [r3, #4]
    anim->startValue = startValue;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	609a      	str	r2, [r3, #8]
    anim->endValue = endValue;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	60da      	str	r2, [r3, #12]
    anim->currentValue = startValue;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	611a      	str	r2, [r3, #16]
    anim->isActive = 1;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	751a      	strb	r2, [r3, #20]
    anim->easeType = easeType;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	7e3a      	ldrb	r2, [r7, #24]
 8004d62:	755a      	strb	r2, [r3, #21]
}
 8004d64:	bf00      	nop
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <OLED_UpdateAnimation>:

// 更新动画状态，返回isActive的值
uint8_t OLED_UpdateAnimation(Animation_t *anim, uint32_t currentTime)
{
 8004d6c:	b590      	push	{r4, r7, lr}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
    if (!anim->isActive)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	7d1b      	ldrb	r3, [r3, #20]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <OLED_UpdateAnimation+0x16>
        return 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	e04d      	b.n	8004e1e <OLED_UpdateAnimation+0xb2>

    uint32_t elapsedTime = currentTime - anim->startTime;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	617b      	str	r3, [r7, #20]
    // 动画完成
    if (elapsedTime >= anim->duration || anim->currentValue == anim->endValue) // 如果我的目标在指定的点上，也关闭isActive
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d20a      	bcs.n	8004dac <OLED_UpdateAnimation+0x40>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4610      	mov	r0, r2
 8004da2:	f7fb fc87 	bl	80006b4 <__aeabi_fcmpeq>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d008      	beq.n	8004dbe <OLED_UpdateAnimation+0x52>
    {
        anim->currentValue = anim->endValue;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68da      	ldr	r2, [r3, #12]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	611a      	str	r2, [r3, #16]
        anim->isActive = 0;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	751a      	strb	r2, [r3, #20]
        return 0;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	e02f      	b.n	8004e1e <OLED_UpdateAnimation+0xb2>
    }

    // 计算当前进度 (0.0 - 1.0)
    float progress = (float)elapsedTime / anim->duration;
 8004dbe:	6978      	ldr	r0, [r7, #20]
 8004dc0:	f7fb fa8c 	bl	80002dc <__aeabi_ui2f>
 8004dc4:	4604      	mov	r4, r0
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fb fa86 	bl	80002dc <__aeabi_ui2f>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	f7fb fb8d 	bl	80004f4 <__aeabi_fdiv>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	613b      	str	r3, [r7, #16]

    // 应用缓动函数
    float easedProgress = GetEaseValue(progress, anim->easeType);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	7d5b      	ldrb	r3, [r3, #21]
 8004de2:	4619      	mov	r1, r3
 8004de4:	6938      	ldr	r0, [r7, #16]
 8004de6:	f7ff fedd 	bl	8004ba4 <GetEaseValue>
 8004dea:	60f8      	str	r0, [r7, #12]

    // 计算当前值
    anim->currentValue = anim->startValue + (anim->endValue - anim->startValue) * easedProgress;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689c      	ldr	r4, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	f7fb f9bc 	bl	8000178 <__aeabi_fsub>
 8004e00:	4603      	mov	r3, r0
 8004e02:	68f9      	ldr	r1, [r7, #12]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fb fac1 	bl	800038c <__aeabi_fmul>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4620      	mov	r0, r4
 8004e10:	f7fb f9b4 	bl	800017c <__addsf3>
 8004e14:	4603      	mov	r3, r0
 8004e16:	461a      	mov	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	611a      	str	r2, [r3, #16]

    return 1;
 8004e1c:	2301      	movs	r3, #1
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	371c      	adds	r7, #28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd90      	pop	{r4, r7, pc}

08004e26 <OLED_GetAnimationValue>:

// 获取当前动画值
float OLED_GetAnimationValue(Animation_t *anim)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
    return anim->currentValue;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr

08004e3c <OLED_InitAnimationManager>:
AnimationManager_t Status_AnimationManager;
AnimationManager_t g_Title_AnimationManager; // 菜单动画管理器
AnimationManager_t g_AnimationManager; // 全局动画管理器

void OLED_InitAnimationManager(AnimationManager_t *manager) // 这是初始化一个动画管理器，填入你的manager名字，在系统初始化时候调用它
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
    manager->count = 0;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 25f0 	strb.w	r2, [r3, #1520]	@ 0x5f0
    memset(manager->taggedAnimations, 0, sizeof(manager->taggedAnimations));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 8004e52:	2100      	movs	r1, #0
 8004e54:	4618      	mov	r0, r3
 8004e56:	f003 fbf5 	bl	8008644 <memset>
}
 8004e5a:	bf00      	nop
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <OLED_FindTaggedAnimation>:

TaggedAnimation_t *OLED_FindTaggedAnimation(AnimationManager_t *manager, const char *tag) // 查找对应manager的标签对应的动画tag
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b084      	sub	sp, #16
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < manager->count; i++)
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	73fb      	strb	r3, [r7, #15]
 8004e70:	e016      	b.n	8004ea0 <OLED_FindTaggedAnimation+0x3e>
    {
        if (strcmp(manager->taggedAnimations[i].tag, tag) == 0)
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
 8004e74:	224c      	movs	r2, #76	@ 0x4c
 8004e76:	fb02 f303 	mul.w	r3, r2, r3
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	6839      	ldr	r1, [r7, #0]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fb f963 	bl	800014c <strcmp>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d106      	bne.n	8004e9a <OLED_FindTaggedAnimation+0x38>
        {
            return &manager->taggedAnimations[i];
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	224c      	movs	r2, #76	@ 0x4c
 8004e90:	fb02 f303 	mul.w	r3, r2, r3
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	4413      	add	r3, r2
 8004e98:	e009      	b.n	8004eae <OLED_FindTaggedAnimation+0x4c>
    for (uint8_t i = 0; i < manager->count; i++)
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	73fb      	strb	r3, [r7, #15]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8004ea6:	7bfa      	ldrb	r2, [r7, #15]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d3e2      	bcc.n	8004e72 <OLED_FindTaggedAnimation+0x10>
        }
    }
    return NULL;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <OLED_GetObjectPosition>:

uint8_t OLED_GetObjectPosition(AnimationManager_t *manager, const char *tag, float *x, float *y) // 获取tag当前位置
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b086      	sub	sp, #24
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	60f8      	str	r0, [r7, #12]
 8004ebe:	60b9      	str	r1, [r7, #8]
 8004ec0:	607a      	str	r2, [r7, #4]
 8004ec2:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f7ff ffcb 	bl	8004e62 <OLED_FindTaggedAnimation>
 8004ecc:	6178      	str	r0, [r7, #20]
    if (anim)
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00f      	beq.n	8004ef4 <OLED_GetObjectPosition+0x3e>
    {
        if (x)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <OLED_GetObjectPosition+0x2c>
            *x = anim->currentX;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	601a      	str	r2, [r3, #0]
        if (y)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <OLED_GetObjectPosition+0x3a>
            *y = anim->currentY;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	601a      	str	r2, [r3, #0]
        return 1;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <OLED_GetObjectPosition+0x40>
    }
    return 0;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <OLED_MoveObject>:

// 移动指定标签的对象
void OLED_MoveObject(AnimationManager_t *manager, const char *tag,
                     float startX, float startY, float targetX, float targetY,
                     uint32_t duration, EaseType_t easeType) // 这个函数是用来移动一个对象的，tag是对象的标签，startX和startY是起始坐标，targetX和targetY是目标坐标，duration是动画持续时间，easeType是缓动类型
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b088      	sub	sp, #32
 8004f02:	af02      	add	r7, sp, #8
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	607a      	str	r2, [r7, #4]
 8004f0a:	603b      	str	r3, [r7, #0]
    // 查找已存在的动画
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8004f0c:	68b9      	ldr	r1, [r7, #8]
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f7ff ffa7 	bl	8004e62 <OLED_FindTaggedAnimation>
 8004f14:	6178      	str	r0, [r7, #20]

    // 如果没找到并且还有可用槽位，创建新的动画
    if (anim == NULL)
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d122      	bne.n	8004f62 <OLED_MoveObject+0x64>
    {
        if (manager->count >= MAX_ANIMATIONS)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8004f22:	2b13      	cmp	r3, #19
 8004f24:	d838      	bhi.n	8004f98 <OLED_MoveObject+0x9a>
            return; // 动画已满，无法添加

        anim = &manager->taggedAnimations[manager->count++];
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8004f2c:	1c5a      	adds	r2, r3, #1
 8004f2e:	b2d1      	uxtb	r1, r2
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	f882 15f0 	strb.w	r1, [r2, #1520]	@ 0x5f0
 8004f36:	461a      	mov	r2, r3
 8004f38:	234c      	movs	r3, #76	@ 0x4c
 8004f3a:	fb02 f303 	mul.w	r3, r2, r3
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4413      	add	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]
        strncpy(anim->tag, tag, sizeof(anim->tag) - 1);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	220f      	movs	r2, #15
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f003 fb82 	bl	8008654 <strncpy>
        anim->tag[sizeof(anim->tag) - 1] = '\0'; // 确保字符串结束
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2200      	movs	r2, #0
 8004f54:	73da      	strb	r2, [r3, #15]
        anim->currentX = startX;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = startY;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // 初始化或更新X和Y坐标的动画
    OLED_InitAnimation(&anim->xAnimation, startX, targetX, duration, easeType);
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f103 0010 	add.w	r0, r3, #16
 8004f68:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f70:	6a3a      	ldr	r2, [r7, #32]
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	f7ff fed8 	bl	8004d28 <OLED_InitAnimation>
    OLED_InitAnimation(&anim->yAnimation, startY, targetY, duration, easeType);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8004f7e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f88:	6839      	ldr	r1, [r7, #0]
 8004f8a:	f7ff fecd 	bl	8004d28 <OLED_InitAnimation>
    anim->isActive = 1;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f96:	e000      	b.n	8004f9a <OLED_MoveObject+0x9c>
            return; // 动画已满，无法添加
 8004f98:	bf00      	nop
}
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <OLED_UpdateAnimationManager>:

// 更新manager里面的所有动画!
void OLED_UpdateAnimationManager(AnimationManager_t *manager) //! 这里需要使用OLED_UpdateDisplayVSync()来更新显示
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 8004fa8:	f000 fca8 	bl	80058fc <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

    for (uint8_t i = 0; i < manager->count; i++)
 8004fae:	2300      	movs	r3, #0
 8004fb0:	75fb      	strb	r3, [r7, #23]
 8004fb2:	e03a      	b.n	800502a <OLED_UpdateAnimationManager+0x8a>
    {
        TaggedAnimation_t *anim = &manager->taggedAnimations[i];
 8004fb4:	7dfb      	ldrb	r3, [r7, #23]
 8004fb6:	224c      	movs	r2, #76	@ 0x4c
 8004fb8:	fb02 f303 	mul.w	r3, r2, r3
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]
        if (!anim->isActive)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d02a      	beq.n	8005022 <OLED_UpdateAnimationManager+0x82>
            continue;

        uint8_t activeX = OLED_UpdateAnimation(&anim->xAnimation, currentTime);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	3310      	adds	r3, #16
 8004fd0:	6939      	ldr	r1, [r7, #16]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff feca 	bl	8004d6c <OLED_UpdateAnimation>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	72fb      	strb	r3, [r7, #11]
        uint8_t activeY = OLED_UpdateAnimation(&anim->yAnimation, currentTime);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3328      	adds	r3, #40	@ 0x28
 8004fe0:	6939      	ldr	r1, [r7, #16]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff fec2 	bl	8004d6c <OLED_UpdateAnimation>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	72bb      	strb	r3, [r7, #10]

        anim->currentX = OLED_GetAnimationValue(&anim->xAnimation);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	3310      	adds	r3, #16
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff ff18 	bl	8004e26 <OLED_GetAnimationValue>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = OLED_GetAnimationValue(&anim->yAnimation);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	3328      	adds	r3, #40	@ 0x28
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff ff10 	bl	8004e26 <OLED_GetAnimationValue>
 8005006:	4602      	mov	r2, r0
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	649a      	str	r2, [r3, #72]	@ 0x48

        // 如果两个动画都结束，则标记该对象动画为非活跃
        if (!activeX && !activeY)
 800500c:	7afb      	ldrb	r3, [r7, #11]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d108      	bne.n	8005024 <OLED_UpdateAnimationManager+0x84>
 8005012:	7abb      	ldrb	r3, [r7, #10]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d105      	bne.n	8005024 <OLED_UpdateAnimationManager+0x84>
            anim->isActive = 0;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005020:	e000      	b.n	8005024 <OLED_UpdateAnimationManager+0x84>
            continue;
 8005022:	bf00      	nop
    for (uint8_t i = 0; i < manager->count; i++)
 8005024:	7dfb      	ldrb	r3, [r7, #23]
 8005026:	3301      	adds	r3, #1
 8005028:	75fb      	strb	r3, [r7, #23]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8005030:	7dfa      	ldrb	r2, [r7, #23]
 8005032:	429a      	cmp	r2, r3
 8005034:	d3be      	bcc.n	8004fb4 <OLED_UpdateAnimationManager+0x14>
    }
}
 8005036:	bf00      	nop
 8005038:	bf00      	nop
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <OLED_GetAnimationStates>:

uint8_t OLED_GetAnimationStates(AnimationManager_t *manager, const char *tag) // 返回值是1表示活跃，0表示非活跃
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 800504a:	6839      	ldr	r1, [r7, #0]
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7ff ff08 	bl	8004e62 <OLED_FindTaggedAnimation>
 8005052:	60f8      	str	r0, [r7, #12]
    if (anim)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <OLED_GetAnimationStates+0x22>
    {
        return anim->isActive;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005060:	e000      	b.n	8005064 <OLED_GetAnimationStates+0x24>
    }
    return 0; // 如果没有找到，返回0表示非活跃
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <OLED_DoTweenObject>:

// 移动指定标签的对象到目标坐标。
// 如果对象已在向同一目标动画且动画处于活动状态，则不执行任何操作。
// 否则，它会中断当前动画（如果活动）并从当前位置开始新的动画。
void OLED_DoTweenObject(AnimationManager_t *manager, const char *tag, float targetX, float targetY, uint32_t duration, EaseType_t easeType)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08a      	sub	sp, #40	@ 0x28
 8005070:	af04      	add	r7, sp, #16
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
 8005078:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 800507a:	68b9      	ldr	r1, [r7, #8]
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f7ff fef0 	bl	8004e62 <OLED_FindTaggedAnimation>
 8005082:	6178      	str	r0, [r7, #20]

    if (anim == NULL)
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d029      	beq.n	80050de <OLED_DoTweenObject+0x72>
        // 但这需要为新对象定义 initialX, initialY。
        return;
    }

    // 检查动画是否已处于活动状态并且已经朝向相同的目标
    if (anim->isActive &&
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	d011      	beq.n	80050b8 <OLED_DoTweenObject+0x4c>
        anim->xAnimation.endValue == targetX &&
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	69db      	ldr	r3, [r3, #28]
    if (anim->isActive &&
 8005098:	4619      	mov	r1, r3
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fb fb0a 	bl	80006b4 <__aeabi_fcmpeq>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d008      	beq.n	80050b8 <OLED_DoTweenObject+0x4c>
        anim->yAnimation.endValue == targetY)
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        anim->xAnimation.endValue == targetX &&
 80050aa:	4619      	mov	r1, r3
 80050ac:	6838      	ldr	r0, [r7, #0]
 80050ae:	f7fb fb01 	bl	80006b4 <__aeabi_fcmpeq>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d114      	bne.n	80050e2 <OLED_DoTweenObject+0x76>
        return;
    }

    // 否则，（重新）启动动画到新目标
    // OLED_MoveObject 将从 anim->currentX, anim->currentY 开始动画
    OLED_MoveObject(manager, tag, anim->currentX, anim->currentY, targetX, targetY, duration, easeType);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80050c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80050c4:	9303      	str	r3, [sp, #12]
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	9302      	str	r3, [sp, #8]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	9301      	str	r3, [sp, #4]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	460b      	mov	r3, r1
 80050d4:	68b9      	ldr	r1, [r7, #8]
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f7ff ff11 	bl	8004efe <OLED_MoveObject>
 80050dc:	e002      	b.n	80050e4 <OLED_DoTweenObject+0x78>
        return;
 80050de:	bf00      	nop
 80050e0:	e000      	b.n	80050e4 <OLED_DoTweenObject+0x78>
        return;
 80050e2:	bf00      	nop
}
 80050e4:	3718      	adds	r7, #24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <OLED_DrawTitleBar>:

#pragma region OLED_EPICFUL_UI

// 绘制UI标题栏
void OLED_DrawTitleBar(char *title) // 确保标题长度不超过22个字符 //! UPDATEDISPLAY REQUIRED
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b086      	sub	sp, #24
 80050ee:	af02      	add	r7, sp, #8
 80050f0:	6078      	str	r0, [r7, #4]
    unsigned char titleLength = strlen(title) * 6;
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fb f834 	bl	8000160 <strlen>
 80050f8:	4603      	mov	r3, r0
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	461a      	mov	r2, r3
 80050fe:	0052      	lsls	r2, r2, #1
 8005100:	4413      	add	r3, r2
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	73fb      	strb	r3, [r7, #15]

    // 绘制标题栏背景 (白色填充)
    OLED_DrawFilledRectangle(0, 0, OLED_WIDTH, 8, 1);
 8005106:	2301      	movs	r3, #1
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	2308      	movs	r3, #8
 800510c:	2280      	movs	r2, #128	@ 0x80
 800510e:	2100      	movs	r1, #0
 8005110:	2000      	movs	r0, #0
 8005112:	f000 f810 	bl	8005136 <OLED_DrawFilledRectangle>

    // 显示标题 (黑底白字，反色效果)
    OLED_DisplayStringInverted((OLED_WIDTH - titleLength) / 2, 0, title, 1);
 8005116:	7bfb      	ldrb	r3, [r7, #15]
 8005118:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800511c:	0fda      	lsrs	r2, r3, #31
 800511e:	4413      	add	r3, r2
 8005120:	105b      	asrs	r3, r3, #1
 8005122:	b218      	sxth	r0, r3
 8005124:	2301      	movs	r3, #1
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	2100      	movs	r1, #0
 800512a:	f7fd fa10 	bl	800254e <OLED_DisplayStringInverted>
}
 800512e:	bf00      	nop
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <OLED_DrawFilledRectangle>:
    }
}

// 绘制填充矩形
void OLED_DrawFilledRectangle(int16_t x, int16_t y, uint8_t width, uint8_t height, uint8_t color) //! UPDATEDISPLAY REQUIRED
{
 8005136:	b590      	push	{r4, r7, lr}
 8005138:	b087      	sub	sp, #28
 800513a:	af00      	add	r7, sp, #0
 800513c:	4604      	mov	r4, r0
 800513e:	4608      	mov	r0, r1
 8005140:	4611      	mov	r1, r2
 8005142:	461a      	mov	r2, r3
 8005144:	4623      	mov	r3, r4
 8005146:	80fb      	strh	r3, [r7, #6]
 8005148:	4603      	mov	r3, r0
 800514a:	80bb      	strh	r3, [r7, #4]
 800514c:	460b      	mov	r3, r1
 800514e:	70fb      	strb	r3, [r7, #3]
 8005150:	4613      	mov	r3, r2
 8005152:	70bb      	strb	r3, [r7, #2]
    // Initial check for zero dimensions
    if (width == 0 || height == 0)
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d07e      	beq.n	8005258 <OLED_DrawFilledRectangle+0x122>
 800515a:	78bb      	ldrb	r3, [r7, #2]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d07b      	beq.n	8005258 <OLED_DrawFilledRectangle+0x122>
    {
        return;
    }

    // Use int16_t for width and height internally for clipping calculations
    int16_t current_width = width;
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	82fb      	strh	r3, [r7, #22]
    int16_t current_height = height;
 8005164:	78bb      	ldrb	r3, [r7, #2]
 8005166:	82bb      	strh	r3, [r7, #20]

    // Clip left edge: if x is negative, adjust width and set x to 0
    if (x < 0)
 8005168:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800516c:	2b00      	cmp	r3, #0
 800516e:	da06      	bge.n	800517e <OLED_DrawFilledRectangle+0x48>
    {
        current_width += x; // x is negative, so this reduces width
 8005170:	8afa      	ldrh	r2, [r7, #22]
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	4413      	add	r3, r2
 8005176:	b29b      	uxth	r3, r3
 8005178:	82fb      	strh	r3, [r7, #22]
        x = 0;
 800517a:	2300      	movs	r3, #0
 800517c:	80fb      	strh	r3, [r7, #6]
    }

    // Clip top edge: if y is negative, adjust height and set y to 0
    if (y < 0)
 800517e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	da06      	bge.n	8005194 <OLED_DrawFilledRectangle+0x5e>
    {
        current_height += y; // y is negative, so this reduces height
 8005186:	8aba      	ldrh	r2, [r7, #20]
 8005188:	88bb      	ldrh	r3, [r7, #4]
 800518a:	4413      	add	r3, r2
 800518c:	b29b      	uxth	r3, r3
 800518e:	82bb      	strh	r3, [r7, #20]
        y = 0;
 8005190:	2300      	movs	r3, #0
 8005192:	80bb      	strh	r3, [r7, #4]
    }

    // If width or height became non-positive after left/top clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 8005194:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005198:	2b00      	cmp	r3, #0
 800519a:	dd5f      	ble.n	800525c <OLED_DrawFilledRectangle+0x126>
 800519c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	dd5b      	ble.n	800525c <OLED_DrawFilledRectangle+0x126>
        return;
    }

    // Check if the adjusted rectangle is entirely off-screen to the right or bottom
    // At this point, x and y are >= 0.
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT)
 80051a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80051aa:	dc59      	bgt.n	8005260 <OLED_DrawFilledRectangle+0x12a>
 80051ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80051b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80051b2:	dc55      	bgt.n	8005260 <OLED_DrawFilledRectangle+0x12a>
    {
        return;
    }

    // Clip right edge: if x + current_width extends beyond OLED_WIDTH
    if (x + current_width > OLED_WIDTH)
 80051b4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80051b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80051bc:	4413      	add	r3, r2
 80051be:	2b80      	cmp	r3, #128	@ 0x80
 80051c0:	dd04      	ble.n	80051cc <OLED_DrawFilledRectangle+0x96>
    {
        current_width = OLED_WIDTH - x;
 80051c2:	88fb      	ldrh	r3, [r7, #6]
 80051c4:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	82fb      	strh	r3, [r7, #22]
    }

    // Clip bottom edge: if y + current_height extends beyond OLED_HEIGHT
    if (y + current_height > OLED_HEIGHT)
 80051cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80051d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80051d4:	4413      	add	r3, r2
 80051d6:	2b40      	cmp	r3, #64	@ 0x40
 80051d8:	dd04      	ble.n	80051e4 <OLED_DrawFilledRectangle+0xae>
    {
        current_height = OLED_HEIGHT - y;
 80051da:	88bb      	ldrh	r3, [r7, #4]
 80051dc:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	82bb      	strh	r3, [r7, #20]
    }

    // If width or height became non-positive after right/bottom clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 80051e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	dd3b      	ble.n	8005264 <OLED_DrawFilledRectangle+0x12e>
 80051ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	dd37      	ble.n	8005264 <OLED_DrawFilledRectangle+0x12e>
    {
        return;
    }

    // Cast coordinates and dimensions to uint8_t for drawing
    uint8_t final_x = (uint8_t)x;
 80051f4:	88fb      	ldrh	r3, [r7, #6]
 80051f6:	747b      	strb	r3, [r7, #17]
    uint8_t final_y = (uint8_t)y;
 80051f8:	88bb      	ldrh	r3, [r7, #4]
 80051fa:	743b      	strb	r3, [r7, #16]
    uint8_t final_width = (uint8_t)current_width;
 80051fc:	8afb      	ldrh	r3, [r7, #22]
 80051fe:	73fb      	strb	r3, [r7, #15]
    uint8_t final_height = (uint8_t)current_height;
 8005200:	8abb      	ldrh	r3, [r7, #20]
 8005202:	73bb      	strb	r3, [r7, #14]

    uint8_t x2 = final_x + final_width - 1;
 8005204:	7c7a      	ldrb	r2, [r7, #17]
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	4413      	add	r3, r2
 800520a:	b2db      	uxtb	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	737b      	strb	r3, [r7, #13]
    uint8_t y2 = final_y + final_height - 1;
 8005210:	7c3a      	ldrb	r2, [r7, #16]
 8005212:	7bbb      	ldrb	r3, [r7, #14]
 8005214:	4413      	add	r3, r2
 8005216:	b2db      	uxtb	r3, r3
 8005218:	3b01      	subs	r3, #1
 800521a:	733b      	strb	r3, [r7, #12]

    // 逐像素填充
    for (uint8_t j = final_y; j <= y2; j++)
 800521c:	7c3b      	ldrb	r3, [r7, #16]
 800521e:	74fb      	strb	r3, [r7, #19]
 8005220:	e015      	b.n	800524e <OLED_DrawFilledRectangle+0x118>
    {
        for (uint8_t i = final_x; i <= x2; i++)
 8005222:	7c7b      	ldrb	r3, [r7, #17]
 8005224:	74bb      	strb	r3, [r7, #18]
 8005226:	e00b      	b.n	8005240 <OLED_DrawFilledRectangle+0x10a>
        {
            OLED_WritePixel(i, j, color);
 8005228:	7cbb      	ldrb	r3, [r7, #18]
 800522a:	b21b      	sxth	r3, r3
 800522c:	7cfa      	ldrb	r2, [r7, #19]
 800522e:	b211      	sxth	r1, r2
 8005230:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005234:	4618      	mov	r0, r3
 8005236:	f7fc fe1d 	bl	8001e74 <OLED_WritePixel>
        for (uint8_t i = final_x; i <= x2; i++)
 800523a:	7cbb      	ldrb	r3, [r7, #18]
 800523c:	3301      	adds	r3, #1
 800523e:	74bb      	strb	r3, [r7, #18]
 8005240:	7cba      	ldrb	r2, [r7, #18]
 8005242:	7b7b      	ldrb	r3, [r7, #13]
 8005244:	429a      	cmp	r2, r3
 8005246:	d9ef      	bls.n	8005228 <OLED_DrawFilledRectangle+0xf2>
    for (uint8_t j = final_y; j <= y2; j++)
 8005248:	7cfb      	ldrb	r3, [r7, #19]
 800524a:	3301      	adds	r3, #1
 800524c:	74fb      	strb	r3, [r7, #19]
 800524e:	7cfa      	ldrb	r2, [r7, #19]
 8005250:	7b3b      	ldrb	r3, [r7, #12]
 8005252:	429a      	cmp	r2, r3
 8005254:	d9e5      	bls.n	8005222 <OLED_DrawFilledRectangle+0xec>
 8005256:	e006      	b.n	8005266 <OLED_DrawFilledRectangle+0x130>
        return;
 8005258:	bf00      	nop
 800525a:	e004      	b.n	8005266 <OLED_DrawFilledRectangle+0x130>
        return;
 800525c:	bf00      	nop
 800525e:	e002      	b.n	8005266 <OLED_DrawFilledRectangle+0x130>
        return;
 8005260:	bf00      	nop
 8005262:	e000      	b.n	8005266 <OLED_DrawFilledRectangle+0x130>
        return;
 8005264:	bf00      	nop
        }
    }
}
 8005266:	371c      	adds	r7, #28
 8005268:	46bd      	mov	sp, r7
 800526a:	bd90      	pop	{r4, r7, pc}

0800526c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005272:	4b15      	ldr	r3, [pc, #84]	@ (80052c8 <HAL_MspInit+0x5c>)
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	4a14      	ldr	r2, [pc, #80]	@ (80052c8 <HAL_MspInit+0x5c>)
 8005278:	f043 0301 	orr.w	r3, r3, #1
 800527c:	6193      	str	r3, [r2, #24]
 800527e:	4b12      	ldr	r3, [pc, #72]	@ (80052c8 <HAL_MspInit+0x5c>)
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	60bb      	str	r3, [r7, #8]
 8005288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800528a:	4b0f      	ldr	r3, [pc, #60]	@ (80052c8 <HAL_MspInit+0x5c>)
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	4a0e      	ldr	r2, [pc, #56]	@ (80052c8 <HAL_MspInit+0x5c>)
 8005290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005294:	61d3      	str	r3, [r2, #28]
 8005296:	4b0c      	ldr	r3, [pc, #48]	@ (80052c8 <HAL_MspInit+0x5c>)
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800529e:	607b      	str	r3, [r7, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80052a2:	4b0a      	ldr	r3, [pc, #40]	@ (80052cc <HAL_MspInit+0x60>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	4a04      	ldr	r2, [pc, #16]	@ (80052cc <HAL_MspInit+0x60>)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052be:	bf00      	nop
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr
 80052c8:	40021000 	.word	0x40021000
 80052cc:	40010000 	.word	0x40010000

080052d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80052d4:	bf00      	nop
 80052d6:	e7fd      	b.n	80052d4 <NMI_Handler+0x4>

080052d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052dc:	bf00      	nop
 80052de:	e7fd      	b.n	80052dc <HardFault_Handler+0x4>

080052e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052e4:	bf00      	nop
 80052e6:	e7fd      	b.n	80052e4 <MemManage_Handler+0x4>

080052e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052ec:	bf00      	nop
 80052ee:	e7fd      	b.n	80052ec <BusFault_Handler+0x4>

080052f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052f4:	bf00      	nop
 80052f6:	e7fd      	b.n	80052f4 <UsageFault_Handler+0x4>

080052f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80052fc:	bf00      	nop
 80052fe:	46bd      	mov	sp, r7
 8005300:	bc80      	pop	{r7}
 8005302:	4770      	bx	lr

08005304 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005308:	bf00      	nop
 800530a:	46bd      	mov	sp, r7
 800530c:	bc80      	pop	{r7}
 800530e:	4770      	bx	lr

08005310 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005310:	b480      	push	{r7}
 8005312:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005314:	bf00      	nop
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr

0800531c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005320:	f000 fada 	bl	80058d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005324:	bf00      	nop
 8005326:	bd80      	pop	{r7, pc}

08005328 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800532c:	4802      	ldr	r0, [pc, #8]	@ (8005338 <DMA1_Channel6_IRQHandler+0x10>)
 800532e:	f000 fc7b 	bl	8005c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005332:	bf00      	nop
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	20000314 	.word	0x20000314

0800533c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  return 1;
 8005340:	2301      	movs	r3, #1
}
 8005342:	4618      	mov	r0, r3
 8005344:	46bd      	mov	sp, r7
 8005346:	bc80      	pop	{r7}
 8005348:	4770      	bx	lr

0800534a <_kill>:

int _kill(int pid, int sig)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b082      	sub	sp, #8
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005354:	f003 f9d8 	bl	8008708 <__errno>
 8005358:	4603      	mov	r3, r0
 800535a:	2216      	movs	r2, #22
 800535c:	601a      	str	r2, [r3, #0]
  return -1;
 800535e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005362:	4618      	mov	r0, r3
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <_exit>:

void _exit (int status)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b082      	sub	sp, #8
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005372:	f04f 31ff 	mov.w	r1, #4294967295
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff ffe7 	bl	800534a <_kill>
  while (1) {}    /* Make sure we hang here */
 800537c:	bf00      	nop
 800537e:	e7fd      	b.n	800537c <_exit+0x12>

08005380 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	e00a      	b.n	80053a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005392:	f3af 8000 	nop.w
 8005396:	4601      	mov	r1, r0
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	60ba      	str	r2, [r7, #8]
 800539e:	b2ca      	uxtb	r2, r1
 80053a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	3301      	adds	r3, #1
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	dbf0      	blt.n	8005392 <_read+0x12>
  }

  return len;
 80053b0:	687b      	ldr	r3, [r7, #4]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b086      	sub	sp, #24
 80053be:	af00      	add	r7, sp, #0
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	e009      	b.n	80053e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	60ba      	str	r2, [r7, #8]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	3301      	adds	r3, #1
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	dbf1      	blt.n	80053cc <_write+0x12>
  }
  return len;
 80053e8:	687b      	ldr	r3, [r7, #4]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <_close>:

int _close(int file)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80053fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053fe:	4618      	mov	r0, r3
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr

08005408 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005418:	605a      	str	r2, [r3, #4]
  return 0;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	bc80      	pop	{r7}
 8005424:	4770      	bx	lr

08005426 <_isatty>:

int _isatty(int file)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800542e:	2301      	movs	r3, #1
}
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	bc80      	pop	{r7}
 8005438:	4770      	bx	lr

0800543a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800543a:	b480      	push	{r7}
 800543c:	b085      	sub	sp, #20
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	bc80      	pop	{r7}
 8005450:	4770      	bx	lr
	...

08005454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800545c:	4a14      	ldr	r2, [pc, #80]	@ (80054b0 <_sbrk+0x5c>)
 800545e:	4b15      	ldr	r3, [pc, #84]	@ (80054b4 <_sbrk+0x60>)
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005468:	4b13      	ldr	r3, [pc, #76]	@ (80054b8 <_sbrk+0x64>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d102      	bne.n	8005476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005470:	4b11      	ldr	r3, [pc, #68]	@ (80054b8 <_sbrk+0x64>)
 8005472:	4a12      	ldr	r2, [pc, #72]	@ (80054bc <_sbrk+0x68>)
 8005474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005476:	4b10      	ldr	r3, [pc, #64]	@ (80054b8 <_sbrk+0x64>)
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4413      	add	r3, r2
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	429a      	cmp	r2, r3
 8005482:	d207      	bcs.n	8005494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005484:	f003 f940 	bl	8008708 <__errno>
 8005488:	4603      	mov	r3, r0
 800548a:	220c      	movs	r2, #12
 800548c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800548e:	f04f 33ff 	mov.w	r3, #4294967295
 8005492:	e009      	b.n	80054a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005494:	4b08      	ldr	r3, [pc, #32]	@ (80054b8 <_sbrk+0x64>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800549a:	4b07      	ldr	r3, [pc, #28]	@ (80054b8 <_sbrk+0x64>)
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4413      	add	r3, r2
 80054a2:	4a05      	ldr	r2, [pc, #20]	@ (80054b8 <_sbrk+0x64>)
 80054a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80054a6:	68fb      	ldr	r3, [r7, #12]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	20005000 	.word	0x20005000
 80054b4:	00000400 	.word	0x00000400
 80054b8:	20003f20 	.word	0x20003f20
 80054bc:	20004108 	.word	0x20004108

080054c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80054c4:	bf00      	nop
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr

080054cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b096      	sub	sp, #88	@ 0x58
 80054d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054d2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	605a      	str	r2, [r3, #4]
 80054dc:	609a      	str	r2, [r3, #8]
 80054de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80054ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	605a      	str	r2, [r3, #4]
 80054f4:	609a      	str	r2, [r3, #8]
 80054f6:	60da      	str	r2, [r3, #12]
 80054f8:	611a      	str	r2, [r3, #16]
 80054fa:	615a      	str	r2, [r3, #20]
 80054fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80054fe:	1d3b      	adds	r3, r7, #4
 8005500:	2220      	movs	r2, #32
 8005502:	2100      	movs	r1, #0
 8005504:	4618      	mov	r0, r3
 8005506:	f003 f89d 	bl	8008644 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800550a:	4b3f      	ldr	r3, [pc, #252]	@ (8005608 <MX_TIM1_Init+0x13c>)
 800550c:	4a3f      	ldr	r2, [pc, #252]	@ (800560c <MX_TIM1_Init+0x140>)
 800550e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720-1;
 8005510:	4b3d      	ldr	r3, [pc, #244]	@ (8005608 <MX_TIM1_Init+0x13c>)
 8005512:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8005516:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005518:	4b3b      	ldr	r3, [pc, #236]	@ (8005608 <MX_TIM1_Init+0x13c>)
 800551a:	2200      	movs	r2, #0
 800551c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 800551e:	4b3a      	ldr	r3, [pc, #232]	@ (8005608 <MX_TIM1_Init+0x13c>)
 8005520:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8005524:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005526:	4b38      	ldr	r3, [pc, #224]	@ (8005608 <MX_TIM1_Init+0x13c>)
 8005528:	2200      	movs	r2, #0
 800552a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800552c:	4b36      	ldr	r3, [pc, #216]	@ (8005608 <MX_TIM1_Init+0x13c>)
 800552e:	2200      	movs	r2, #0
 8005530:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005532:	4b35      	ldr	r3, [pc, #212]	@ (8005608 <MX_TIM1_Init+0x13c>)
 8005534:	2200      	movs	r2, #0
 8005536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005538:	4833      	ldr	r0, [pc, #204]	@ (8005608 <MX_TIM1_Init+0x13c>)
 800553a:	f001 fec7 	bl	80072cc <HAL_TIM_Base_Init>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005544:	f7fc fb43 	bl	8001bce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005548:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800554c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800554e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005552:	4619      	mov	r1, r3
 8005554:	482c      	ldr	r0, [pc, #176]	@ (8005608 <MX_TIM1_Init+0x13c>)
 8005556:	f002 f9f5 	bl	8007944 <HAL_TIM_ConfigClockSource>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005560:	f7fc fb35 	bl	8001bce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005564:	4828      	ldr	r0, [pc, #160]	@ (8005608 <MX_TIM1_Init+0x13c>)
 8005566:	f001 ff00 	bl	800736a <HAL_TIM_PWM_Init>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005570:	f7fc fb2d 	bl	8001bce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005574:	2300      	movs	r3, #0
 8005576:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005578:	2300      	movs	r3, #0
 800557a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800557c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005580:	4619      	mov	r1, r3
 8005582:	4821      	ldr	r0, [pc, #132]	@ (8005608 <MX_TIM1_Init+0x13c>)
 8005584:	f002 fd56 	bl	8008034 <HAL_TIMEx_MasterConfigSynchronization>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800558e:	f7fc fb1e 	bl	8001bce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005592:	2360      	movs	r3, #96	@ 0x60
 8005594:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8005596:	2300      	movs	r3, #0
 8005598:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800559a:	2300      	movs	r3, #0
 800559c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800559e:	2300      	movs	r3, #0
 80055a0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80055a2:	2300      	movs	r3, #0
 80055a4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80055a6:	2300      	movs	r3, #0
 80055a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80055aa:	2300      	movs	r3, #0
 80055ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80055ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055b2:	2204      	movs	r2, #4
 80055b4:	4619      	mov	r1, r3
 80055b6:	4814      	ldr	r0, [pc, #80]	@ (8005608 <MX_TIM1_Init+0x13c>)
 80055b8:	f002 f902 	bl	80077c0 <HAL_TIM_PWM_ConfigChannel>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80055c2:	f7fc fb04 	bl	8001bce <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80055c6:	2300      	movs	r3, #0
 80055c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80055d6:	2300      	movs	r3, #0
 80055d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80055da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80055de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80055e0:	2300      	movs	r3, #0
 80055e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80055e4:	1d3b      	adds	r3, r7, #4
 80055e6:	4619      	mov	r1, r3
 80055e8:	4807      	ldr	r0, [pc, #28]	@ (8005608 <MX_TIM1_Init+0x13c>)
 80055ea:	f002 fd81 	bl	80080f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80055f4:	f7fc faeb 	bl	8001bce <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80055f8:	4803      	ldr	r0, [pc, #12]	@ (8005608 <MX_TIM1_Init+0x13c>)
 80055fa:	f000 f8cd 	bl	8005798 <HAL_TIM_MspPostInit>

}
 80055fe:	bf00      	nop
 8005600:	3758      	adds	r7, #88	@ 0x58
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20003f24 	.word	0x20003f24
 800560c:	40012c00 	.word	0x40012c00

08005610 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b08c      	sub	sp, #48	@ 0x30
 8005614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005616:	f107 030c 	add.w	r3, r7, #12
 800561a:	2224      	movs	r2, #36	@ 0x24
 800561c:	2100      	movs	r1, #0
 800561e:	4618      	mov	r0, r3
 8005620:	f003 f810 	bl	8008644 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005624:	1d3b      	adds	r3, r7, #4
 8005626:	2200      	movs	r2, #0
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800562c:	4b20      	ldr	r3, [pc, #128]	@ (80056b0 <MX_TIM3_Init+0xa0>)
 800562e:	4a21      	ldr	r2, [pc, #132]	@ (80056b4 <MX_TIM3_Init+0xa4>)
 8005630:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005632:	4b1f      	ldr	r3, [pc, #124]	@ (80056b0 <MX_TIM3_Init+0xa0>)
 8005634:	2200      	movs	r2, #0
 8005636:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005638:	4b1d      	ldr	r3, [pc, #116]	@ (80056b0 <MX_TIM3_Init+0xa0>)
 800563a:	2200      	movs	r2, #0
 800563c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800563e:	4b1c      	ldr	r3, [pc, #112]	@ (80056b0 <MX_TIM3_Init+0xa0>)
 8005640:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005644:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005646:	4b1a      	ldr	r3, [pc, #104]	@ (80056b0 <MX_TIM3_Init+0xa0>)
 8005648:	2200      	movs	r2, #0
 800564a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800564c:	4b18      	ldr	r3, [pc, #96]	@ (80056b0 <MX_TIM3_Init+0xa0>)
 800564e:	2200      	movs	r2, #0
 8005650:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005652:	2301      	movs	r3, #1
 8005654:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005656:	2300      	movs	r3, #0
 8005658:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800565a:	2301      	movs	r3, #1
 800565c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800565e:	2300      	movs	r3, #0
 8005660:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005662:	2300      	movs	r3, #0
 8005664:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005666:	2300      	movs	r3, #0
 8005668:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800566a:	2301      	movs	r3, #1
 800566c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800566e:	2300      	movs	r3, #0
 8005670:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005672:	2300      	movs	r3, #0
 8005674:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005676:	f107 030c 	add.w	r3, r7, #12
 800567a:	4619      	mov	r1, r3
 800567c:	480c      	ldr	r0, [pc, #48]	@ (80056b0 <MX_TIM3_Init+0xa0>)
 800567e:	f001 ff6f 	bl	8007560 <HAL_TIM_Encoder_Init>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8005688:	f7fc faa1 	bl	8001bce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800568c:	2300      	movs	r3, #0
 800568e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005690:	2300      	movs	r3, #0
 8005692:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005694:	1d3b      	adds	r3, r7, #4
 8005696:	4619      	mov	r1, r3
 8005698:	4805      	ldr	r0, [pc, #20]	@ (80056b0 <MX_TIM3_Init+0xa0>)
 800569a:	f002 fccb 	bl	8008034 <HAL_TIMEx_MasterConfigSynchronization>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80056a4:	f7fc fa93 	bl	8001bce <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80056a8:	bf00      	nop
 80056aa:	3730      	adds	r7, #48	@ 0x30
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	20003f6c 	.word	0x20003f6c
 80056b4:	40000400 	.word	0x40000400

080056b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a09      	ldr	r2, [pc, #36]	@ (80056ec <HAL_TIM_Base_MspInit+0x34>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d10b      	bne.n	80056e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80056ca:	4b09      	ldr	r3, [pc, #36]	@ (80056f0 <HAL_TIM_Base_MspInit+0x38>)
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	4a08      	ldr	r2, [pc, #32]	@ (80056f0 <HAL_TIM_Base_MspInit+0x38>)
 80056d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80056d4:	6193      	str	r3, [r2, #24]
 80056d6:	4b06      	ldr	r3, [pc, #24]	@ (80056f0 <HAL_TIM_Base_MspInit+0x38>)
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80056e2:	bf00      	nop
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr
 80056ec:	40012c00 	.word	0x40012c00
 80056f0:	40021000 	.word	0x40021000

080056f4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b08a      	sub	sp, #40	@ 0x28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056fc:	f107 0314 	add.w	r3, r7, #20
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	605a      	str	r2, [r3, #4]
 8005706:	609a      	str	r2, [r3, #8]
 8005708:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a1e      	ldr	r2, [pc, #120]	@ (8005788 <HAL_TIM_Encoder_MspInit+0x94>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d135      	bne.n	8005780 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005714:	4b1d      	ldr	r3, [pc, #116]	@ (800578c <HAL_TIM_Encoder_MspInit+0x98>)
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	4a1c      	ldr	r2, [pc, #112]	@ (800578c <HAL_TIM_Encoder_MspInit+0x98>)
 800571a:	f043 0302 	orr.w	r3, r3, #2
 800571e:	61d3      	str	r3, [r2, #28]
 8005720:	4b1a      	ldr	r3, [pc, #104]	@ (800578c <HAL_TIM_Encoder_MspInit+0x98>)
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	613b      	str	r3, [r7, #16]
 800572a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800572c:	4b17      	ldr	r3, [pc, #92]	@ (800578c <HAL_TIM_Encoder_MspInit+0x98>)
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	4a16      	ldr	r2, [pc, #88]	@ (800578c <HAL_TIM_Encoder_MspInit+0x98>)
 8005732:	f043 0308 	orr.w	r3, r3, #8
 8005736:	6193      	str	r3, [r2, #24]
 8005738:	4b14      	ldr	r3, [pc, #80]	@ (800578c <HAL_TIM_Encoder_MspInit+0x98>)
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	f003 0308 	and.w	r3, r3, #8
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_CH1_Pin|Encoder_CH2_Pin;
 8005744:	2330      	movs	r3, #48	@ 0x30
 8005746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005748:	2300      	movs	r3, #0
 800574a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800574c:	2300      	movs	r3, #0
 800574e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005750:	f107 0314 	add.w	r3, r7, #20
 8005754:	4619      	mov	r1, r3
 8005756:	480e      	ldr	r0, [pc, #56]	@ (8005790 <HAL_TIM_Encoder_MspInit+0x9c>)
 8005758:	f000 fb6c 	bl	8005e34 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800575c:	4b0d      	ldr	r3, [pc, #52]	@ (8005794 <HAL_TIM_Encoder_MspInit+0xa0>)
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	627b      	str	r3, [r7, #36]	@ 0x24
 8005762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005764:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005768:	627b      	str	r3, [r7, #36]	@ 0x24
 800576a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8005770:	627b      	str	r3, [r7, #36]	@ 0x24
 8005772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005774:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005778:	627b      	str	r3, [r7, #36]	@ 0x24
 800577a:	4a06      	ldr	r2, [pc, #24]	@ (8005794 <HAL_TIM_Encoder_MspInit+0xa0>)
 800577c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005780:	bf00      	nop
 8005782:	3728      	adds	r7, #40	@ 0x28
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40000400 	.word	0x40000400
 800578c:	40021000 	.word	0x40021000
 8005790:	40010c00 	.word	0x40010c00
 8005794:	40010000 	.word	0x40010000

08005798 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b088      	sub	sp, #32
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057a0:	f107 0310 	add.w	r3, r7, #16
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	605a      	str	r2, [r3, #4]
 80057aa:	609a      	str	r2, [r3, #8]
 80057ac:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a10      	ldr	r2, [pc, #64]	@ (80057f4 <HAL_TIM_MspPostInit+0x5c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d118      	bne.n	80057ea <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057b8:	4b0f      	ldr	r3, [pc, #60]	@ (80057f8 <HAL_TIM_MspPostInit+0x60>)
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	4a0e      	ldr	r2, [pc, #56]	@ (80057f8 <HAL_TIM_MspPostInit+0x60>)
 80057be:	f043 0304 	orr.w	r3, r3, #4
 80057c2:	6193      	str	r3, [r2, #24]
 80057c4:	4b0c      	ldr	r3, [pc, #48]	@ (80057f8 <HAL_TIM_MspPostInit+0x60>)
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80057d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80057d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057d6:	2302      	movs	r3, #2
 80057d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057da:	2302      	movs	r3, #2
 80057dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057de:	f107 0310 	add.w	r3, r7, #16
 80057e2:	4619      	mov	r1, r3
 80057e4:	4805      	ldr	r0, [pc, #20]	@ (80057fc <HAL_TIM_MspPostInit+0x64>)
 80057e6:	f000 fb25 	bl	8005e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80057ea:	bf00      	nop
 80057ec:	3720      	adds	r7, #32
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	40012c00 	.word	0x40012c00
 80057f8:	40021000 	.word	0x40021000
 80057fc:	40010800 	.word	0x40010800

08005800 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005800:	f7ff fe5e 	bl	80054c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005804:	480b      	ldr	r0, [pc, #44]	@ (8005834 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005806:	490c      	ldr	r1, [pc, #48]	@ (8005838 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005808:	4a0c      	ldr	r2, [pc, #48]	@ (800583c <LoopFillZerobss+0x16>)
  movs r3, #0
 800580a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800580c:	e002      	b.n	8005814 <LoopCopyDataInit>

0800580e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800580e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005812:	3304      	adds	r3, #4

08005814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005818:	d3f9      	bcc.n	800580e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800581a:	4a09      	ldr	r2, [pc, #36]	@ (8005840 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800581c:	4c09      	ldr	r4, [pc, #36]	@ (8005844 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800581e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005820:	e001      	b.n	8005826 <LoopFillZerobss>

08005822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005824:	3204      	adds	r2, #4

08005826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005828:	d3fb      	bcc.n	8005822 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800582a:	f002 ff73 	bl	8008714 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800582e:	f7fc f8fb 	bl	8001a28 <main>
  bx lr
 8005832:	4770      	bx	lr
  ldr r0, =_sdata
 8005834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005838:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800583c:	0800b408 	.word	0x0800b408
  ldr r2, =_sbss
 8005840:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8005844:	20004104 	.word	0x20004104

08005848 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005848:	e7fe      	b.n	8005848 <ADC1_2_IRQHandler>
	...

0800584c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005850:	4b08      	ldr	r3, [pc, #32]	@ (8005874 <HAL_Init+0x28>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a07      	ldr	r2, [pc, #28]	@ (8005874 <HAL_Init+0x28>)
 8005856:	f043 0310 	orr.w	r3, r3, #16
 800585a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800585c:	2003      	movs	r0, #3
 800585e:	f000 f947 	bl	8005af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005862:	200f      	movs	r0, #15
 8005864:	f000 f808 	bl	8005878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005868:	f7ff fd00 	bl	800526c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	40022000 	.word	0x40022000

08005878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005880:	4b12      	ldr	r3, [pc, #72]	@ (80058cc <HAL_InitTick+0x54>)
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	4b12      	ldr	r3, [pc, #72]	@ (80058d0 <HAL_InitTick+0x58>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	4619      	mov	r1, r3
 800588a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800588e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005892:	fbb2 f3f3 	udiv	r3, r2, r3
 8005896:	4618      	mov	r0, r3
 8005898:	f000 f95f 	bl	8005b5a <HAL_SYSTICK_Config>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e00e      	b.n	80058c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b0f      	cmp	r3, #15
 80058aa:	d80a      	bhi.n	80058c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80058ac:	2200      	movs	r2, #0
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	f04f 30ff 	mov.w	r0, #4294967295
 80058b4:	f000 f927 	bl	8005b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80058b8:	4a06      	ldr	r2, [pc, #24]	@ (80058d4 <HAL_InitTick+0x5c>)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	e000      	b.n	80058c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	20000018 	.word	0x20000018
 80058d0:	20000020 	.word	0x20000020
 80058d4:	2000001c 	.word	0x2000001c

080058d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058d8:	b480      	push	{r7}
 80058da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80058dc:	4b05      	ldr	r3, [pc, #20]	@ (80058f4 <HAL_IncTick+0x1c>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	461a      	mov	r2, r3
 80058e2:	4b05      	ldr	r3, [pc, #20]	@ (80058f8 <HAL_IncTick+0x20>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4413      	add	r3, r2
 80058e8:	4a03      	ldr	r2, [pc, #12]	@ (80058f8 <HAL_IncTick+0x20>)
 80058ea:	6013      	str	r3, [r2, #0]
}
 80058ec:	bf00      	nop
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bc80      	pop	{r7}
 80058f2:	4770      	bx	lr
 80058f4:	20000020 	.word	0x20000020
 80058f8:	20003fb4 	.word	0x20003fb4

080058fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
  return uwTick;
 8005900:	4b02      	ldr	r3, [pc, #8]	@ (800590c <HAL_GetTick+0x10>)
 8005902:	681b      	ldr	r3, [r3, #0]
}
 8005904:	4618      	mov	r0, r3
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr
 800590c:	20003fb4 	.word	0x20003fb4

08005910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005918:	f7ff fff0 	bl	80058fc <HAL_GetTick>
 800591c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005928:	d005      	beq.n	8005936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800592a:	4b0a      	ldr	r3, [pc, #40]	@ (8005954 <HAL_Delay+0x44>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4413      	add	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005936:	bf00      	nop
 8005938:	f7ff ffe0 	bl	80058fc <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	429a      	cmp	r2, r3
 8005946:	d8f7      	bhi.n	8005938 <HAL_Delay+0x28>
  {
  }
}
 8005948:	bf00      	nop
 800594a:	bf00      	nop
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20000020 	.word	0x20000020

08005958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f003 0307 	and.w	r3, r3, #7
 8005966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005968:	4b0c      	ldr	r3, [pc, #48]	@ (800599c <__NVIC_SetPriorityGrouping+0x44>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005974:	4013      	ands	r3, r2
 8005976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005980:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800598a:	4a04      	ldr	r2, [pc, #16]	@ (800599c <__NVIC_SetPriorityGrouping+0x44>)
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	60d3      	str	r3, [r2, #12]
}
 8005990:	bf00      	nop
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	bc80      	pop	{r7}
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	e000ed00 	.word	0xe000ed00

080059a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059a4:	4b04      	ldr	r3, [pc, #16]	@ (80059b8 <__NVIC_GetPriorityGrouping+0x18>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	0a1b      	lsrs	r3, r3, #8
 80059aa:	f003 0307 	and.w	r3, r3, #7
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bc80      	pop	{r7}
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	e000ed00 	.word	0xe000ed00

080059bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	4603      	mov	r3, r0
 80059c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	db0b      	blt.n	80059e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059ce:	79fb      	ldrb	r3, [r7, #7]
 80059d0:	f003 021f 	and.w	r2, r3, #31
 80059d4:	4906      	ldr	r1, [pc, #24]	@ (80059f0 <__NVIC_EnableIRQ+0x34>)
 80059d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059da:	095b      	lsrs	r3, r3, #5
 80059dc:	2001      	movs	r0, #1
 80059de:	fa00 f202 	lsl.w	r2, r0, r2
 80059e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr
 80059f0:	e000e100 	.word	0xe000e100

080059f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	4603      	mov	r3, r0
 80059fc:	6039      	str	r1, [r7, #0]
 80059fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	db0a      	blt.n	8005a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	490c      	ldr	r1, [pc, #48]	@ (8005a40 <__NVIC_SetPriority+0x4c>)
 8005a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a12:	0112      	lsls	r2, r2, #4
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	440b      	add	r3, r1
 8005a18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a1c:	e00a      	b.n	8005a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	4908      	ldr	r1, [pc, #32]	@ (8005a44 <__NVIC_SetPriority+0x50>)
 8005a24:	79fb      	ldrb	r3, [r7, #7]
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	3b04      	subs	r3, #4
 8005a2c:	0112      	lsls	r2, r2, #4
 8005a2e:	b2d2      	uxtb	r2, r2
 8005a30:	440b      	add	r3, r1
 8005a32:	761a      	strb	r2, [r3, #24]
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bc80      	pop	{r7}
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	e000e100 	.word	0xe000e100
 8005a44:	e000ed00 	.word	0xe000ed00

08005a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b089      	sub	sp, #36	@ 0x24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f003 0307 	and.w	r3, r3, #7
 8005a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	f1c3 0307 	rsb	r3, r3, #7
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	bf28      	it	cs
 8005a66:	2304      	movcs	r3, #4
 8005a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	2b06      	cmp	r3, #6
 8005a70:	d902      	bls.n	8005a78 <NVIC_EncodePriority+0x30>
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	3b03      	subs	r3, #3
 8005a76:	e000      	b.n	8005a7a <NVIC_EncodePriority+0x32>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	fa02 f303 	lsl.w	r3, r2, r3
 8005a86:	43da      	mvns	r2, r3
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	401a      	ands	r2, r3
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a90:	f04f 31ff 	mov.w	r1, #4294967295
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9a:	43d9      	mvns	r1, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005aa0:	4313      	orrs	r3, r2
         );
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3724      	adds	r7, #36	@ 0x24
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bc80      	pop	{r7}
 8005aaa:	4770      	bx	lr

08005aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005abc:	d301      	bcc.n	8005ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e00f      	b.n	8005ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8005aec <SysTick_Config+0x40>)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005aca:	210f      	movs	r1, #15
 8005acc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad0:	f7ff ff90 	bl	80059f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ad4:	4b05      	ldr	r3, [pc, #20]	@ (8005aec <SysTick_Config+0x40>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ada:	4b04      	ldr	r3, [pc, #16]	@ (8005aec <SysTick_Config+0x40>)
 8005adc:	2207      	movs	r2, #7
 8005ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	e000e010 	.word	0xe000e010

08005af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f7ff ff2d 	bl	8005958 <__NVIC_SetPriorityGrouping>
}
 8005afe:	bf00      	nop
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b086      	sub	sp, #24
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	60b9      	str	r1, [r7, #8]
 8005b10:	607a      	str	r2, [r7, #4]
 8005b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b18:	f7ff ff42 	bl	80059a0 <__NVIC_GetPriorityGrouping>
 8005b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	68b9      	ldr	r1, [r7, #8]
 8005b22:	6978      	ldr	r0, [r7, #20]
 8005b24:	f7ff ff90 	bl	8005a48 <NVIC_EncodePriority>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b2e:	4611      	mov	r1, r2
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7ff ff5f 	bl	80059f4 <__NVIC_SetPriority>
}
 8005b36:	bf00      	nop
 8005b38:	3718      	adds	r7, #24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b082      	sub	sp, #8
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	4603      	mov	r3, r0
 8005b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7ff ff35 	bl	80059bc <__NVIC_EnableIRQ>
}
 8005b52:	bf00      	nop
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b082      	sub	sp, #8
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff ffa2 	bl	8005aac <SysTick_Config>
 8005b68:	4603      	mov	r3, r0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
	...

08005b74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e043      	b.n	8005c12 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	4b22      	ldr	r3, [pc, #136]	@ (8005c1c <HAL_DMA_Init+0xa8>)
 8005b92:	4413      	add	r3, r2
 8005b94:	4a22      	ldr	r2, [pc, #136]	@ (8005c20 <HAL_DMA_Init+0xac>)
 8005b96:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9a:	091b      	lsrs	r3, r3, #4
 8005b9c:	009a      	lsls	r2, r3, #2
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8005c24 <HAL_DMA_Init+0xb0>)
 8005ba6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005bbe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005bc2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005be4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bc80      	pop	{r7}
 8005c1a:	4770      	bx	lr
 8005c1c:	bffdfff8 	.word	0xbffdfff8
 8005c20:	cccccccd 	.word	0xcccccccd
 8005c24:	40020000 	.word	0x40020000

08005c28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c44:	2204      	movs	r2, #4
 8005c46:	409a      	lsls	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d04f      	beq.n	8005cf0 <HAL_DMA_IRQHandler+0xc8>
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f003 0304 	and.w	r3, r3, #4
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d04a      	beq.n	8005cf0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d107      	bne.n	8005c78 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0204 	bic.w	r2, r2, #4
 8005c76:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a66      	ldr	r2, [pc, #408]	@ (8005e18 <HAL_DMA_IRQHandler+0x1f0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d029      	beq.n	8005cd6 <HAL_DMA_IRQHandler+0xae>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a65      	ldr	r2, [pc, #404]	@ (8005e1c <HAL_DMA_IRQHandler+0x1f4>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d022      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0xaa>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a63      	ldr	r2, [pc, #396]	@ (8005e20 <HAL_DMA_IRQHandler+0x1f8>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d01a      	beq.n	8005ccc <HAL_DMA_IRQHandler+0xa4>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a62      	ldr	r2, [pc, #392]	@ (8005e24 <HAL_DMA_IRQHandler+0x1fc>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d012      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x9e>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a60      	ldr	r2, [pc, #384]	@ (8005e28 <HAL_DMA_IRQHandler+0x200>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00a      	beq.n	8005cc0 <HAL_DMA_IRQHandler+0x98>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a5f      	ldr	r2, [pc, #380]	@ (8005e2c <HAL_DMA_IRQHandler+0x204>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d102      	bne.n	8005cba <HAL_DMA_IRQHandler+0x92>
 8005cb4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005cb8:	e00e      	b.n	8005cd8 <HAL_DMA_IRQHandler+0xb0>
 8005cba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005cbe:	e00b      	b.n	8005cd8 <HAL_DMA_IRQHandler+0xb0>
 8005cc0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005cc4:	e008      	b.n	8005cd8 <HAL_DMA_IRQHandler+0xb0>
 8005cc6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005cca:	e005      	b.n	8005cd8 <HAL_DMA_IRQHandler+0xb0>
 8005ccc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cd0:	e002      	b.n	8005cd8 <HAL_DMA_IRQHandler+0xb0>
 8005cd2:	2340      	movs	r3, #64	@ 0x40
 8005cd4:	e000      	b.n	8005cd8 <HAL_DMA_IRQHandler+0xb0>
 8005cd6:	2304      	movs	r3, #4
 8005cd8:	4a55      	ldr	r2, [pc, #340]	@ (8005e30 <HAL_DMA_IRQHandler+0x208>)
 8005cda:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 8094 	beq.w	8005e0e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005cee:	e08e      	b.n	8005e0e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	409a      	lsls	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d056      	beq.n	8005dae <HAL_DMA_IRQHandler+0x186>
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d051      	beq.n	8005dae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0320 	and.w	r3, r3, #32
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10b      	bne.n	8005d30 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 020a 	bic.w	r2, r2, #10
 8005d26:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a38      	ldr	r2, [pc, #224]	@ (8005e18 <HAL_DMA_IRQHandler+0x1f0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d029      	beq.n	8005d8e <HAL_DMA_IRQHandler+0x166>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a37      	ldr	r2, [pc, #220]	@ (8005e1c <HAL_DMA_IRQHandler+0x1f4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d022      	beq.n	8005d8a <HAL_DMA_IRQHandler+0x162>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a35      	ldr	r2, [pc, #212]	@ (8005e20 <HAL_DMA_IRQHandler+0x1f8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d01a      	beq.n	8005d84 <HAL_DMA_IRQHandler+0x15c>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a34      	ldr	r2, [pc, #208]	@ (8005e24 <HAL_DMA_IRQHandler+0x1fc>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d012      	beq.n	8005d7e <HAL_DMA_IRQHandler+0x156>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a32      	ldr	r2, [pc, #200]	@ (8005e28 <HAL_DMA_IRQHandler+0x200>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d00a      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x150>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a31      	ldr	r2, [pc, #196]	@ (8005e2c <HAL_DMA_IRQHandler+0x204>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d102      	bne.n	8005d72 <HAL_DMA_IRQHandler+0x14a>
 8005d6c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005d70:	e00e      	b.n	8005d90 <HAL_DMA_IRQHandler+0x168>
 8005d72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d76:	e00b      	b.n	8005d90 <HAL_DMA_IRQHandler+0x168>
 8005d78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005d7c:	e008      	b.n	8005d90 <HAL_DMA_IRQHandler+0x168>
 8005d7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005d82:	e005      	b.n	8005d90 <HAL_DMA_IRQHandler+0x168>
 8005d84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d88:	e002      	b.n	8005d90 <HAL_DMA_IRQHandler+0x168>
 8005d8a:	2320      	movs	r3, #32
 8005d8c:	e000      	b.n	8005d90 <HAL_DMA_IRQHandler+0x168>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	4a27      	ldr	r2, [pc, #156]	@ (8005e30 <HAL_DMA_IRQHandler+0x208>)
 8005d92:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d034      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005dac:	e02f      	b.n	8005e0e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db2:	2208      	movs	r2, #8
 8005db4:	409a      	lsls	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4013      	ands	r3, r2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d028      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x1e8>
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f003 0308 	and.w	r3, r3, #8
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d023      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 020e 	bic.w	r2, r2, #14
 8005dd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de0:	2101      	movs	r1, #1
 8005de2:	fa01 f202 	lsl.w	r2, r1, r2
 8005de6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d004      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	4798      	blx	r3
    }
  }
  return;
 8005e0e:	bf00      	nop
 8005e10:	bf00      	nop
}
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40020008 	.word	0x40020008
 8005e1c:	4002001c 	.word	0x4002001c
 8005e20:	40020030 	.word	0x40020030
 8005e24:	40020044 	.word	0x40020044
 8005e28:	40020058 	.word	0x40020058
 8005e2c:	4002006c 	.word	0x4002006c
 8005e30:	40020000 	.word	0x40020000

08005e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b08b      	sub	sp, #44	@ 0x2c
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005e42:	2300      	movs	r3, #0
 8005e44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e46:	e169      	b.n	800611c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005e48:	2201      	movs	r2, #1
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	4013      	ands	r3, r2
 8005e5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	f040 8158 	bne.w	8006116 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	4a9a      	ldr	r2, [pc, #616]	@ (80060d4 <HAL_GPIO_Init+0x2a0>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d05e      	beq.n	8005f2e <HAL_GPIO_Init+0xfa>
 8005e70:	4a98      	ldr	r2, [pc, #608]	@ (80060d4 <HAL_GPIO_Init+0x2a0>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d875      	bhi.n	8005f62 <HAL_GPIO_Init+0x12e>
 8005e76:	4a98      	ldr	r2, [pc, #608]	@ (80060d8 <HAL_GPIO_Init+0x2a4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d058      	beq.n	8005f2e <HAL_GPIO_Init+0xfa>
 8005e7c:	4a96      	ldr	r2, [pc, #600]	@ (80060d8 <HAL_GPIO_Init+0x2a4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d86f      	bhi.n	8005f62 <HAL_GPIO_Init+0x12e>
 8005e82:	4a96      	ldr	r2, [pc, #600]	@ (80060dc <HAL_GPIO_Init+0x2a8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d052      	beq.n	8005f2e <HAL_GPIO_Init+0xfa>
 8005e88:	4a94      	ldr	r2, [pc, #592]	@ (80060dc <HAL_GPIO_Init+0x2a8>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d869      	bhi.n	8005f62 <HAL_GPIO_Init+0x12e>
 8005e8e:	4a94      	ldr	r2, [pc, #592]	@ (80060e0 <HAL_GPIO_Init+0x2ac>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d04c      	beq.n	8005f2e <HAL_GPIO_Init+0xfa>
 8005e94:	4a92      	ldr	r2, [pc, #584]	@ (80060e0 <HAL_GPIO_Init+0x2ac>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d863      	bhi.n	8005f62 <HAL_GPIO_Init+0x12e>
 8005e9a:	4a92      	ldr	r2, [pc, #584]	@ (80060e4 <HAL_GPIO_Init+0x2b0>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d046      	beq.n	8005f2e <HAL_GPIO_Init+0xfa>
 8005ea0:	4a90      	ldr	r2, [pc, #576]	@ (80060e4 <HAL_GPIO_Init+0x2b0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d85d      	bhi.n	8005f62 <HAL_GPIO_Init+0x12e>
 8005ea6:	2b12      	cmp	r3, #18
 8005ea8:	d82a      	bhi.n	8005f00 <HAL_GPIO_Init+0xcc>
 8005eaa:	2b12      	cmp	r3, #18
 8005eac:	d859      	bhi.n	8005f62 <HAL_GPIO_Init+0x12e>
 8005eae:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb4 <HAL_GPIO_Init+0x80>)
 8005eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb4:	08005f2f 	.word	0x08005f2f
 8005eb8:	08005f09 	.word	0x08005f09
 8005ebc:	08005f1b 	.word	0x08005f1b
 8005ec0:	08005f5d 	.word	0x08005f5d
 8005ec4:	08005f63 	.word	0x08005f63
 8005ec8:	08005f63 	.word	0x08005f63
 8005ecc:	08005f63 	.word	0x08005f63
 8005ed0:	08005f63 	.word	0x08005f63
 8005ed4:	08005f63 	.word	0x08005f63
 8005ed8:	08005f63 	.word	0x08005f63
 8005edc:	08005f63 	.word	0x08005f63
 8005ee0:	08005f63 	.word	0x08005f63
 8005ee4:	08005f63 	.word	0x08005f63
 8005ee8:	08005f63 	.word	0x08005f63
 8005eec:	08005f63 	.word	0x08005f63
 8005ef0:	08005f63 	.word	0x08005f63
 8005ef4:	08005f63 	.word	0x08005f63
 8005ef8:	08005f11 	.word	0x08005f11
 8005efc:	08005f25 	.word	0x08005f25
 8005f00:	4a79      	ldr	r2, [pc, #484]	@ (80060e8 <HAL_GPIO_Init+0x2b4>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d013      	beq.n	8005f2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005f06:	e02c      	b.n	8005f62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	623b      	str	r3, [r7, #32]
          break;
 8005f0e:	e029      	b.n	8005f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	3304      	adds	r3, #4
 8005f16:	623b      	str	r3, [r7, #32]
          break;
 8005f18:	e024      	b.n	8005f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	3308      	adds	r3, #8
 8005f20:	623b      	str	r3, [r7, #32]
          break;
 8005f22:	e01f      	b.n	8005f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	330c      	adds	r3, #12
 8005f2a:	623b      	str	r3, [r7, #32]
          break;
 8005f2c:	e01a      	b.n	8005f64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d102      	bne.n	8005f3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005f36:	2304      	movs	r3, #4
 8005f38:	623b      	str	r3, [r7, #32]
          break;
 8005f3a:	e013      	b.n	8005f64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d105      	bne.n	8005f50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005f44:	2308      	movs	r3, #8
 8005f46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	69fa      	ldr	r2, [r7, #28]
 8005f4c:	611a      	str	r2, [r3, #16]
          break;
 8005f4e:	e009      	b.n	8005f64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005f50:	2308      	movs	r3, #8
 8005f52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	69fa      	ldr	r2, [r7, #28]
 8005f58:	615a      	str	r2, [r3, #20]
          break;
 8005f5a:	e003      	b.n	8005f64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	623b      	str	r3, [r7, #32]
          break;
 8005f60:	e000      	b.n	8005f64 <HAL_GPIO_Init+0x130>
          break;
 8005f62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	2bff      	cmp	r3, #255	@ 0xff
 8005f68:	d801      	bhi.n	8005f6e <HAL_GPIO_Init+0x13a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	e001      	b.n	8005f72 <HAL_GPIO_Init+0x13e>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	3304      	adds	r3, #4
 8005f72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	2bff      	cmp	r3, #255	@ 0xff
 8005f78:	d802      	bhi.n	8005f80 <HAL_GPIO_Init+0x14c>
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	e002      	b.n	8005f86 <HAL_GPIO_Init+0x152>
 8005f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f82:	3b08      	subs	r3, #8
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	210f      	movs	r1, #15
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	fa01 f303 	lsl.w	r3, r1, r3
 8005f94:	43db      	mvns	r3, r3
 8005f96:	401a      	ands	r2, r3
 8005f98:	6a39      	ldr	r1, [r7, #32]
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 80b1 	beq.w	8006116 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005fb4:	4b4d      	ldr	r3, [pc, #308]	@ (80060ec <HAL_GPIO_Init+0x2b8>)
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	4a4c      	ldr	r2, [pc, #304]	@ (80060ec <HAL_GPIO_Init+0x2b8>)
 8005fba:	f043 0301 	orr.w	r3, r3, #1
 8005fbe:	6193      	str	r3, [r2, #24]
 8005fc0:	4b4a      	ldr	r3, [pc, #296]	@ (80060ec <HAL_GPIO_Init+0x2b8>)
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	60bb      	str	r3, [r7, #8]
 8005fca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005fcc:	4a48      	ldr	r2, [pc, #288]	@ (80060f0 <HAL_GPIO_Init+0x2bc>)
 8005fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd0:	089b      	lsrs	r3, r3, #2
 8005fd2:	3302      	adds	r3, #2
 8005fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fdc:	f003 0303 	and.w	r3, r3, #3
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	220f      	movs	r2, #15
 8005fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe8:	43db      	mvns	r3, r3
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4013      	ands	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a40      	ldr	r2, [pc, #256]	@ (80060f4 <HAL_GPIO_Init+0x2c0>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d013      	beq.n	8006020 <HAL_GPIO_Init+0x1ec>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a3f      	ldr	r2, [pc, #252]	@ (80060f8 <HAL_GPIO_Init+0x2c4>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d00d      	beq.n	800601c <HAL_GPIO_Init+0x1e8>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a3e      	ldr	r2, [pc, #248]	@ (80060fc <HAL_GPIO_Init+0x2c8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d007      	beq.n	8006018 <HAL_GPIO_Init+0x1e4>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a3d      	ldr	r2, [pc, #244]	@ (8006100 <HAL_GPIO_Init+0x2cc>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d101      	bne.n	8006014 <HAL_GPIO_Init+0x1e0>
 8006010:	2303      	movs	r3, #3
 8006012:	e006      	b.n	8006022 <HAL_GPIO_Init+0x1ee>
 8006014:	2304      	movs	r3, #4
 8006016:	e004      	b.n	8006022 <HAL_GPIO_Init+0x1ee>
 8006018:	2302      	movs	r3, #2
 800601a:	e002      	b.n	8006022 <HAL_GPIO_Init+0x1ee>
 800601c:	2301      	movs	r3, #1
 800601e:	e000      	b.n	8006022 <HAL_GPIO_Init+0x1ee>
 8006020:	2300      	movs	r3, #0
 8006022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006024:	f002 0203 	and.w	r2, r2, #3
 8006028:	0092      	lsls	r2, r2, #2
 800602a:	4093      	lsls	r3, r2
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006032:	492f      	ldr	r1, [pc, #188]	@ (80060f0 <HAL_GPIO_Init+0x2bc>)
 8006034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006036:	089b      	lsrs	r3, r3, #2
 8006038:	3302      	adds	r3, #2
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d006      	beq.n	800605a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800604c:	4b2d      	ldr	r3, [pc, #180]	@ (8006104 <HAL_GPIO_Init+0x2d0>)
 800604e:	689a      	ldr	r2, [r3, #8]
 8006050:	492c      	ldr	r1, [pc, #176]	@ (8006104 <HAL_GPIO_Init+0x2d0>)
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	4313      	orrs	r3, r2
 8006056:	608b      	str	r3, [r1, #8]
 8006058:	e006      	b.n	8006068 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800605a:	4b2a      	ldr	r3, [pc, #168]	@ (8006104 <HAL_GPIO_Init+0x2d0>)
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	43db      	mvns	r3, r3
 8006062:	4928      	ldr	r1, [pc, #160]	@ (8006104 <HAL_GPIO_Init+0x2d0>)
 8006064:	4013      	ands	r3, r2
 8006066:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d006      	beq.n	8006082 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006074:	4b23      	ldr	r3, [pc, #140]	@ (8006104 <HAL_GPIO_Init+0x2d0>)
 8006076:	68da      	ldr	r2, [r3, #12]
 8006078:	4922      	ldr	r1, [pc, #136]	@ (8006104 <HAL_GPIO_Init+0x2d0>)
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	4313      	orrs	r3, r2
 800607e:	60cb      	str	r3, [r1, #12]
 8006080:	e006      	b.n	8006090 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006082:	4b20      	ldr	r3, [pc, #128]	@ (8006104 <HAL_GPIO_Init+0x2d0>)
 8006084:	68da      	ldr	r2, [r3, #12]
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	43db      	mvns	r3, r3
 800608a:	491e      	ldr	r1, [pc, #120]	@ (8006104 <HAL_GPIO_Init+0x2d0>)
 800608c:	4013      	ands	r3, r2
 800608e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d006      	beq.n	80060aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800609c:	4b19      	ldr	r3, [pc, #100]	@ (8006104 <HAL_GPIO_Init+0x2d0>)
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	4918      	ldr	r1, [pc, #96]	@ (8006104 <HAL_GPIO_Init+0x2d0>)
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	604b      	str	r3, [r1, #4]
 80060a8:	e006      	b.n	80060b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80060aa:	4b16      	ldr	r3, [pc, #88]	@ (8006104 <HAL_GPIO_Init+0x2d0>)
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	43db      	mvns	r3, r3
 80060b2:	4914      	ldr	r1, [pc, #80]	@ (8006104 <HAL_GPIO_Init+0x2d0>)
 80060b4:	4013      	ands	r3, r2
 80060b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d021      	beq.n	8006108 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80060c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006104 <HAL_GPIO_Init+0x2d0>)
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	490e      	ldr	r1, [pc, #56]	@ (8006104 <HAL_GPIO_Init+0x2d0>)
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	600b      	str	r3, [r1, #0]
 80060d0:	e021      	b.n	8006116 <HAL_GPIO_Init+0x2e2>
 80060d2:	bf00      	nop
 80060d4:	10320000 	.word	0x10320000
 80060d8:	10310000 	.word	0x10310000
 80060dc:	10220000 	.word	0x10220000
 80060e0:	10210000 	.word	0x10210000
 80060e4:	10120000 	.word	0x10120000
 80060e8:	10110000 	.word	0x10110000
 80060ec:	40021000 	.word	0x40021000
 80060f0:	40010000 	.word	0x40010000
 80060f4:	40010800 	.word	0x40010800
 80060f8:	40010c00 	.word	0x40010c00
 80060fc:	40011000 	.word	0x40011000
 8006100:	40011400 	.word	0x40011400
 8006104:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006108:	4b0b      	ldr	r3, [pc, #44]	@ (8006138 <HAL_GPIO_Init+0x304>)
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	43db      	mvns	r3, r3
 8006110:	4909      	ldr	r1, [pc, #36]	@ (8006138 <HAL_GPIO_Init+0x304>)
 8006112:	4013      	ands	r3, r2
 8006114:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006118:	3301      	adds	r3, #1
 800611a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006122:	fa22 f303 	lsr.w	r3, r2, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	f47f ae8e 	bne.w	8005e48 <HAL_GPIO_Init+0x14>
  }
}
 800612c:	bf00      	nop
 800612e:	bf00      	nop
 8006130:	372c      	adds	r7, #44	@ 0x2c
 8006132:	46bd      	mov	sp, r7
 8006134:	bc80      	pop	{r7}
 8006136:	4770      	bx	lr
 8006138:	40010400 	.word	0x40010400

0800613c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	460b      	mov	r3, r1
 8006146:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	887b      	ldrh	r3, [r7, #2]
 800614e:	4013      	ands	r3, r2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006154:	2301      	movs	r3, #1
 8006156:	73fb      	strb	r3, [r7, #15]
 8006158:	e001      	b.n	800615e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800615a:	2300      	movs	r3, #0
 800615c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800615e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	bc80      	pop	{r7}
 8006168:	4770      	bx	lr

0800616a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800616a:	b480      	push	{r7}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	460b      	mov	r3, r1
 8006174:	807b      	strh	r3, [r7, #2]
 8006176:	4613      	mov	r3, r2
 8006178:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800617a:	787b      	ldrb	r3, [r7, #1]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006180:	887a      	ldrh	r2, [r7, #2]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006186:	e003      	b.n	8006190 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006188:	887b      	ldrh	r3, [r7, #2]
 800618a:	041a      	lsls	r2, r3, #16
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	611a      	str	r2, [r3, #16]
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	bc80      	pop	{r7}
 8006198:	4770      	bx	lr
	...

0800619c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e12b      	b.n	8006406 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7fb fb9a 	bl	80018fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2224      	movs	r2, #36	@ 0x24
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0201 	bic.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80061fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006200:	f001 f832 	bl	8007268 <HAL_RCC_GetPCLK1Freq>
 8006204:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	4a81      	ldr	r2, [pc, #516]	@ (8006410 <HAL_I2C_Init+0x274>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d807      	bhi.n	8006220 <HAL_I2C_Init+0x84>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4a80      	ldr	r2, [pc, #512]	@ (8006414 <HAL_I2C_Init+0x278>)
 8006214:	4293      	cmp	r3, r2
 8006216:	bf94      	ite	ls
 8006218:	2301      	movls	r3, #1
 800621a:	2300      	movhi	r3, #0
 800621c:	b2db      	uxtb	r3, r3
 800621e:	e006      	b.n	800622e <HAL_I2C_Init+0x92>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4a7d      	ldr	r2, [pc, #500]	@ (8006418 <HAL_I2C_Init+0x27c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	bf94      	ite	ls
 8006228:	2301      	movls	r3, #1
 800622a:	2300      	movhi	r3, #0
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e0e7      	b.n	8006406 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4a78      	ldr	r2, [pc, #480]	@ (800641c <HAL_I2C_Init+0x280>)
 800623a:	fba2 2303 	umull	r2, r3, r2, r3
 800623e:	0c9b      	lsrs	r3, r3, #18
 8006240:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	430a      	orrs	r2, r1
 8006254:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	4a6a      	ldr	r2, [pc, #424]	@ (8006410 <HAL_I2C_Init+0x274>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d802      	bhi.n	8006270 <HAL_I2C_Init+0xd4>
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	3301      	adds	r3, #1
 800626e:	e009      	b.n	8006284 <HAL_I2C_Init+0xe8>
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006276:	fb02 f303 	mul.w	r3, r2, r3
 800627a:	4a69      	ldr	r2, [pc, #420]	@ (8006420 <HAL_I2C_Init+0x284>)
 800627c:	fba2 2303 	umull	r2, r3, r2, r3
 8006280:	099b      	lsrs	r3, r3, #6
 8006282:	3301      	adds	r3, #1
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	6812      	ldr	r2, [r2, #0]
 8006288:	430b      	orrs	r3, r1
 800628a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006296:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	495c      	ldr	r1, [pc, #368]	@ (8006410 <HAL_I2C_Init+0x274>)
 80062a0:	428b      	cmp	r3, r1
 80062a2:	d819      	bhi.n	80062d8 <HAL_I2C_Init+0x13c>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	1e59      	subs	r1, r3, #1
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80062b2:	1c59      	adds	r1, r3, #1
 80062b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80062b8:	400b      	ands	r3, r1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <HAL_I2C_Init+0x138>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	1e59      	subs	r1, r3, #1
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80062cc:	3301      	adds	r3, #1
 80062ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062d2:	e051      	b.n	8006378 <HAL_I2C_Init+0x1dc>
 80062d4:	2304      	movs	r3, #4
 80062d6:	e04f      	b.n	8006378 <HAL_I2C_Init+0x1dc>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d111      	bne.n	8006304 <HAL_I2C_Init+0x168>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	1e58      	subs	r0, r3, #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6859      	ldr	r1, [r3, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	440b      	add	r3, r1
 80062ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80062f2:	3301      	adds	r3, #1
 80062f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	bf0c      	ite	eq
 80062fc:	2301      	moveq	r3, #1
 80062fe:	2300      	movne	r3, #0
 8006300:	b2db      	uxtb	r3, r3
 8006302:	e012      	b.n	800632a <HAL_I2C_Init+0x18e>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	1e58      	subs	r0, r3, #1
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6859      	ldr	r1, [r3, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	440b      	add	r3, r1
 8006312:	0099      	lsls	r1, r3, #2
 8006314:	440b      	add	r3, r1
 8006316:	fbb0 f3f3 	udiv	r3, r0, r3
 800631a:	3301      	adds	r3, #1
 800631c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006320:	2b00      	cmp	r3, #0
 8006322:	bf0c      	ite	eq
 8006324:	2301      	moveq	r3, #1
 8006326:	2300      	movne	r3, #0
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <HAL_I2C_Init+0x196>
 800632e:	2301      	movs	r3, #1
 8006330:	e022      	b.n	8006378 <HAL_I2C_Init+0x1dc>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10e      	bne.n	8006358 <HAL_I2C_Init+0x1bc>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	1e58      	subs	r0, r3, #1
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6859      	ldr	r1, [r3, #4]
 8006342:	460b      	mov	r3, r1
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	440b      	add	r3, r1
 8006348:	fbb0 f3f3 	udiv	r3, r0, r3
 800634c:	3301      	adds	r3, #1
 800634e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006352:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006356:	e00f      	b.n	8006378 <HAL_I2C_Init+0x1dc>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	1e58      	subs	r0, r3, #1
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6859      	ldr	r1, [r3, #4]
 8006360:	460b      	mov	r3, r1
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	440b      	add	r3, r1
 8006366:	0099      	lsls	r1, r3, #2
 8006368:	440b      	add	r3, r1
 800636a:	fbb0 f3f3 	udiv	r3, r0, r3
 800636e:	3301      	adds	r3, #1
 8006370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006374:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006378:	6879      	ldr	r1, [r7, #4]
 800637a:	6809      	ldr	r1, [r1, #0]
 800637c:	4313      	orrs	r3, r2
 800637e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	69da      	ldr	r2, [r3, #28]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80063a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	6911      	ldr	r1, [r2, #16]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	68d2      	ldr	r2, [r2, #12]
 80063b2:	4311      	orrs	r1, r2
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	6812      	ldr	r2, [r2, #0]
 80063b8:	430b      	orrs	r3, r1
 80063ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	695a      	ldr	r2, [r3, #20]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	431a      	orrs	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 0201 	orr.w	r2, r2, #1
 80063e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	000186a0 	.word	0x000186a0
 8006414:	001e847f 	.word	0x001e847f
 8006418:	003d08ff 	.word	0x003d08ff
 800641c:	431bde83 	.word	0x431bde83
 8006420:	10624dd3 	.word	0x10624dd3

08006424 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b088      	sub	sp, #32
 8006428:	af02      	add	r7, sp, #8
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	607a      	str	r2, [r7, #4]
 800642e:	461a      	mov	r2, r3
 8006430:	460b      	mov	r3, r1
 8006432:	817b      	strh	r3, [r7, #10]
 8006434:	4613      	mov	r3, r2
 8006436:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006438:	f7ff fa60 	bl	80058fc <HAL_GetTick>
 800643c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b20      	cmp	r3, #32
 8006448:	f040 80e0 	bne.w	800660c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	2319      	movs	r3, #25
 8006452:	2201      	movs	r2, #1
 8006454:	4970      	ldr	r1, [pc, #448]	@ (8006618 <HAL_I2C_Master_Transmit+0x1f4>)
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 f964 	bl	8006724 <I2C_WaitOnFlagUntilTimeout>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006462:	2302      	movs	r3, #2
 8006464:	e0d3      	b.n	800660e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800646c:	2b01      	cmp	r3, #1
 800646e:	d101      	bne.n	8006474 <HAL_I2C_Master_Transmit+0x50>
 8006470:	2302      	movs	r3, #2
 8006472:	e0cc      	b.n	800660e <HAL_I2C_Master_Transmit+0x1ea>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b01      	cmp	r3, #1
 8006488:	d007      	beq.n	800649a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f042 0201 	orr.w	r2, r2, #1
 8006498:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2221      	movs	r2, #33	@ 0x21
 80064ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2210      	movs	r2, #16
 80064b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	893a      	ldrh	r2, [r7, #8]
 80064ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4a50      	ldr	r2, [pc, #320]	@ (800661c <HAL_I2C_Master_Transmit+0x1f8>)
 80064da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80064dc:	8979      	ldrh	r1, [r7, #10]
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	6a3a      	ldr	r2, [r7, #32]
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f000 f89c 	bl	8006620 <I2C_MasterRequestWrite>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e08d      	b.n	800660e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064f2:	2300      	movs	r3, #0
 80064f4:	613b      	str	r3, [r7, #16]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	613b      	str	r3, [r7, #16]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006508:	e066      	b.n	80065d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	6a39      	ldr	r1, [r7, #32]
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 fa22 	bl	8006958 <I2C_WaitOnTXEFlagUntilTimeout>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00d      	beq.n	8006536 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651e:	2b04      	cmp	r3, #4
 8006520:	d107      	bne.n	8006532 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006530:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e06b      	b.n	800660e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800653a:	781a      	ldrb	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006546:	1c5a      	adds	r2, r3, #1
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006550:	b29b      	uxth	r3, r3
 8006552:	3b01      	subs	r3, #1
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800655e:	3b01      	subs	r3, #1
 8006560:	b29a      	uxth	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	f003 0304 	and.w	r3, r3, #4
 8006570:	2b04      	cmp	r3, #4
 8006572:	d11b      	bne.n	80065ac <HAL_I2C_Master_Transmit+0x188>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006578:	2b00      	cmp	r3, #0
 800657a:	d017      	beq.n	80065ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006580:	781a      	ldrb	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006596:	b29b      	uxth	r3, r3
 8006598:	3b01      	subs	r3, #1
 800659a:	b29a      	uxth	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	6a39      	ldr	r1, [r7, #32]
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 fa19 	bl	80069e8 <I2C_WaitOnBTFFlagUntilTimeout>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00d      	beq.n	80065d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c0:	2b04      	cmp	r3, #4
 80065c2:	d107      	bne.n	80065d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e01a      	b.n	800660e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d194      	bne.n	800650a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	e000      	b.n	800660e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800660c:	2302      	movs	r3, #2
  }
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	00100002 	.word	0x00100002
 800661c:	ffff0000 	.word	0xffff0000

08006620 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b088      	sub	sp, #32
 8006624:	af02      	add	r7, sp, #8
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	607a      	str	r2, [r7, #4]
 800662a:	603b      	str	r3, [r7, #0]
 800662c:	460b      	mov	r3, r1
 800662e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006634:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2b08      	cmp	r3, #8
 800663a:	d006      	beq.n	800664a <I2C_MasterRequestWrite+0x2a>
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d003      	beq.n	800664a <I2C_MasterRequestWrite+0x2a>
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006648:	d108      	bne.n	800665c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	e00b      	b.n	8006674 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006660:	2b12      	cmp	r3, #18
 8006662:	d107      	bne.n	8006674 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006672:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 f84f 	bl	8006724 <I2C_WaitOnFlagUntilTimeout>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00d      	beq.n	80066a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800669a:	d103      	bne.n	80066a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e035      	b.n	8006714 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066b0:	d108      	bne.n	80066c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066b2:	897b      	ldrh	r3, [r7, #10]
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	461a      	mov	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80066c0:	611a      	str	r2, [r3, #16]
 80066c2:	e01b      	b.n	80066fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80066c4:	897b      	ldrh	r3, [r7, #10]
 80066c6:	11db      	asrs	r3, r3, #7
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	f003 0306 	and.w	r3, r3, #6
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	f063 030f 	orn	r3, r3, #15
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	490e      	ldr	r1, [pc, #56]	@ (800671c <I2C_MasterRequestWrite+0xfc>)
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 f898 	bl	8006818 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e010      	b.n	8006714 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80066f2:	897b      	ldrh	r3, [r7, #10]
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	4907      	ldr	r1, [pc, #28]	@ (8006720 <I2C_MasterRequestWrite+0x100>)
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 f888 	bl	8006818 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e000      	b.n	8006714 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	00010008 	.word	0x00010008
 8006720:	00010002 	.word	0x00010002

08006724 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	4613      	mov	r3, r2
 8006732:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006734:	e048      	b.n	80067c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673c:	d044      	beq.n	80067c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800673e:	f7ff f8dd 	bl	80058fc <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	683a      	ldr	r2, [r7, #0]
 800674a:	429a      	cmp	r2, r3
 800674c:	d302      	bcc.n	8006754 <I2C_WaitOnFlagUntilTimeout+0x30>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d139      	bne.n	80067c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	0c1b      	lsrs	r3, r3, #16
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b01      	cmp	r3, #1
 800675c:	d10d      	bne.n	800677a <I2C_WaitOnFlagUntilTimeout+0x56>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	43da      	mvns	r2, r3
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	4013      	ands	r3, r2
 800676a:	b29b      	uxth	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	bf0c      	ite	eq
 8006770:	2301      	moveq	r3, #1
 8006772:	2300      	movne	r3, #0
 8006774:	b2db      	uxtb	r3, r3
 8006776:	461a      	mov	r2, r3
 8006778:	e00c      	b.n	8006794 <I2C_WaitOnFlagUntilTimeout+0x70>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	43da      	mvns	r2, r3
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	4013      	ands	r3, r2
 8006786:	b29b      	uxth	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	bf0c      	ite	eq
 800678c:	2301      	moveq	r3, #1
 800678e:	2300      	movne	r3, #0
 8006790:	b2db      	uxtb	r3, r3
 8006792:	461a      	mov	r2, r3
 8006794:	79fb      	ldrb	r3, [r7, #7]
 8006796:	429a      	cmp	r2, r3
 8006798:	d116      	bne.n	80067c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b4:	f043 0220 	orr.w	r2, r3, #32
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e023      	b.n	8006810 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	0c1b      	lsrs	r3, r3, #16
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d10d      	bne.n	80067ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	43da      	mvns	r2, r3
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	4013      	ands	r3, r2
 80067de:	b29b      	uxth	r3, r3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	bf0c      	ite	eq
 80067e4:	2301      	moveq	r3, #1
 80067e6:	2300      	movne	r3, #0
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	461a      	mov	r2, r3
 80067ec:	e00c      	b.n	8006808 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	43da      	mvns	r2, r3
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	4013      	ands	r3, r2
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	bf0c      	ite	eq
 8006800:	2301      	moveq	r3, #1
 8006802:	2300      	movne	r3, #0
 8006804:	b2db      	uxtb	r3, r3
 8006806:	461a      	mov	r2, r3
 8006808:	79fb      	ldrb	r3, [r7, #7]
 800680a:	429a      	cmp	r2, r3
 800680c:	d093      	beq.n	8006736 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006826:	e071      	b.n	800690c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006836:	d123      	bne.n	8006880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006846:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006850:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2220      	movs	r2, #32
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686c:	f043 0204 	orr.w	r2, r3, #4
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e067      	b.n	8006950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006886:	d041      	beq.n	800690c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006888:	f7ff f838 	bl	80058fc <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	429a      	cmp	r2, r3
 8006896:	d302      	bcc.n	800689e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d136      	bne.n	800690c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	0c1b      	lsrs	r3, r3, #16
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d10c      	bne.n	80068c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	43da      	mvns	r2, r3
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	4013      	ands	r3, r2
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	bf14      	ite	ne
 80068ba:	2301      	movne	r3, #1
 80068bc:	2300      	moveq	r3, #0
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	e00b      	b.n	80068da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	43da      	mvns	r2, r3
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	4013      	ands	r3, r2
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	bf14      	ite	ne
 80068d4:	2301      	movne	r3, #1
 80068d6:	2300      	moveq	r3, #0
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d016      	beq.n	800690c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f8:	f043 0220 	orr.w	r2, r3, #32
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e021      	b.n	8006950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	0c1b      	lsrs	r3, r3, #16
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b01      	cmp	r3, #1
 8006914:	d10c      	bne.n	8006930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	43da      	mvns	r2, r3
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	4013      	ands	r3, r2
 8006922:	b29b      	uxth	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	bf14      	ite	ne
 8006928:	2301      	movne	r3, #1
 800692a:	2300      	moveq	r3, #0
 800692c:	b2db      	uxtb	r3, r3
 800692e:	e00b      	b.n	8006948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	43da      	mvns	r2, r3
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	4013      	ands	r3, r2
 800693c:	b29b      	uxth	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	bf14      	ite	ne
 8006942:	2301      	movne	r3, #1
 8006944:	2300      	moveq	r3, #0
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	f47f af6d 	bne.w	8006828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006964:	e034      	b.n	80069d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 f886 	bl	8006a78 <I2C_IsAcknowledgeFailed>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e034      	b.n	80069e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697c:	d028      	beq.n	80069d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800697e:	f7fe ffbd 	bl	80058fc <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	429a      	cmp	r2, r3
 800698c:	d302      	bcc.n	8006994 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d11d      	bne.n	80069d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800699e:	2b80      	cmp	r3, #128	@ 0x80
 80069a0:	d016      	beq.n	80069d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2220      	movs	r2, #32
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069bc:	f043 0220 	orr.w	r2, r3, #32
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e007      	b.n	80069e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069da:	2b80      	cmp	r3, #128	@ 0x80
 80069dc:	d1c3      	bne.n	8006966 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069f4:	e034      	b.n	8006a60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 f83e 	bl	8006a78 <I2C_IsAcknowledgeFailed>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d001      	beq.n	8006a06 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e034      	b.n	8006a70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0c:	d028      	beq.n	8006a60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a0e:	f7fe ff75 	bl	80058fc <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d302      	bcc.n	8006a24 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d11d      	bne.n	8006a60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	f003 0304 	and.w	r3, r3, #4
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d016      	beq.n	8006a60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a4c:	f043 0220 	orr.w	r2, r3, #32
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e007      	b.n	8006a70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	f003 0304 	and.w	r3, r3, #4
 8006a6a:	2b04      	cmp	r3, #4
 8006a6c:	d1c3      	bne.n	80069f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a8e:	d11b      	bne.n	8006ac8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006a98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab4:	f043 0204 	orr.w	r2, r3, #4
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e000      	b.n	8006aca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bc80      	pop	{r7}
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e272      	b.n	8006fcc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f000 8087 	beq.w	8006c02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006af4:	4b92      	ldr	r3, [pc, #584]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f003 030c 	and.w	r3, r3, #12
 8006afc:	2b04      	cmp	r3, #4
 8006afe:	d00c      	beq.n	8006b1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006b00:	4b8f      	ldr	r3, [pc, #572]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f003 030c 	and.w	r3, r3, #12
 8006b08:	2b08      	cmp	r3, #8
 8006b0a:	d112      	bne.n	8006b32 <HAL_RCC_OscConfig+0x5e>
 8006b0c:	4b8c      	ldr	r3, [pc, #560]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b18:	d10b      	bne.n	8006b32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b1a:	4b89      	ldr	r3, [pc, #548]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d06c      	beq.n	8006c00 <HAL_RCC_OscConfig+0x12c>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d168      	bne.n	8006c00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e24c      	b.n	8006fcc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b3a:	d106      	bne.n	8006b4a <HAL_RCC_OscConfig+0x76>
 8006b3c:	4b80      	ldr	r3, [pc, #512]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a7f      	ldr	r2, [pc, #508]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006b42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b46:	6013      	str	r3, [r2, #0]
 8006b48:	e02e      	b.n	8006ba8 <HAL_RCC_OscConfig+0xd4>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10c      	bne.n	8006b6c <HAL_RCC_OscConfig+0x98>
 8006b52:	4b7b      	ldr	r3, [pc, #492]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a7a      	ldr	r2, [pc, #488]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006b58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	4b78      	ldr	r3, [pc, #480]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a77      	ldr	r2, [pc, #476]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006b64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b68:	6013      	str	r3, [r2, #0]
 8006b6a:	e01d      	b.n	8006ba8 <HAL_RCC_OscConfig+0xd4>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b74:	d10c      	bne.n	8006b90 <HAL_RCC_OscConfig+0xbc>
 8006b76:	4b72      	ldr	r3, [pc, #456]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a71      	ldr	r2, [pc, #452]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006b7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b80:	6013      	str	r3, [r2, #0]
 8006b82:	4b6f      	ldr	r3, [pc, #444]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a6e      	ldr	r2, [pc, #440]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b8c:	6013      	str	r3, [r2, #0]
 8006b8e:	e00b      	b.n	8006ba8 <HAL_RCC_OscConfig+0xd4>
 8006b90:	4b6b      	ldr	r3, [pc, #428]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a6a      	ldr	r2, [pc, #424]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b9a:	6013      	str	r3, [r2, #0]
 8006b9c:	4b68      	ldr	r3, [pc, #416]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a67      	ldr	r2, [pc, #412]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006ba2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ba6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d013      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb0:	f7fe fea4 	bl	80058fc <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bb8:	f7fe fea0 	bl	80058fc <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b64      	cmp	r3, #100	@ 0x64
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e200      	b.n	8006fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bca:	4b5d      	ldr	r3, [pc, #372]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0f0      	beq.n	8006bb8 <HAL_RCC_OscConfig+0xe4>
 8006bd6:	e014      	b.n	8006c02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bd8:	f7fe fe90 	bl	80058fc <HAL_GetTick>
 8006bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bde:	e008      	b.n	8006bf2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006be0:	f7fe fe8c 	bl	80058fc <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	2b64      	cmp	r3, #100	@ 0x64
 8006bec:	d901      	bls.n	8006bf2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e1ec      	b.n	8006fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bf2:	4b53      	ldr	r3, [pc, #332]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1f0      	bne.n	8006be0 <HAL_RCC_OscConfig+0x10c>
 8006bfe:	e000      	b.n	8006c02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d063      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c0e:	4b4c      	ldr	r3, [pc, #304]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f003 030c 	and.w	r3, r3, #12
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00b      	beq.n	8006c32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006c1a:	4b49      	ldr	r3, [pc, #292]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f003 030c 	and.w	r3, r3, #12
 8006c22:	2b08      	cmp	r3, #8
 8006c24:	d11c      	bne.n	8006c60 <HAL_RCC_OscConfig+0x18c>
 8006c26:	4b46      	ldr	r3, [pc, #280]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d116      	bne.n	8006c60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c32:	4b43      	ldr	r3, [pc, #268]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d005      	beq.n	8006c4a <HAL_RCC_OscConfig+0x176>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d001      	beq.n	8006c4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e1c0      	b.n	8006fcc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c4a:	4b3d      	ldr	r3, [pc, #244]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	4939      	ldr	r1, [pc, #228]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c5e:	e03a      	b.n	8006cd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d020      	beq.n	8006caa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c68:	4b36      	ldr	r3, [pc, #216]	@ (8006d44 <HAL_RCC_OscConfig+0x270>)
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c6e:	f7fe fe45 	bl	80058fc <HAL_GetTick>
 8006c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c74:	e008      	b.n	8006c88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c76:	f7fe fe41 	bl	80058fc <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d901      	bls.n	8006c88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e1a1      	b.n	8006fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c88:	4b2d      	ldr	r3, [pc, #180]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d0f0      	beq.n	8006c76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c94:	4b2a      	ldr	r3, [pc, #168]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	00db      	lsls	r3, r3, #3
 8006ca2:	4927      	ldr	r1, [pc, #156]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	600b      	str	r3, [r1, #0]
 8006ca8:	e015      	b.n	8006cd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006caa:	4b26      	ldr	r3, [pc, #152]	@ (8006d44 <HAL_RCC_OscConfig+0x270>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cb0:	f7fe fe24 	bl	80058fc <HAL_GetTick>
 8006cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cb6:	e008      	b.n	8006cca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cb8:	f7fe fe20 	bl	80058fc <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d901      	bls.n	8006cca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e180      	b.n	8006fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cca:	4b1d      	ldr	r3, [pc, #116]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1f0      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0308 	and.w	r3, r3, #8
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d03a      	beq.n	8006d58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d019      	beq.n	8006d1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cea:	4b17      	ldr	r3, [pc, #92]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006cec:	2201      	movs	r2, #1
 8006cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cf0:	f7fe fe04 	bl	80058fc <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cf8:	f7fe fe00 	bl	80058fc <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e160      	b.n	8006fcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d40 <HAL_RCC_OscConfig+0x26c>)
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0f0      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006d16:	2001      	movs	r0, #1
 8006d18:	f000 faba 	bl	8007290 <RCC_Delay>
 8006d1c:	e01c      	b.n	8006d58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d24:	f7fe fdea 	bl	80058fc <HAL_GetTick>
 8006d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d2a:	e00f      	b.n	8006d4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d2c:	f7fe fde6 	bl	80058fc <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d908      	bls.n	8006d4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e146      	b.n	8006fcc <HAL_RCC_OscConfig+0x4f8>
 8006d3e:	bf00      	nop
 8006d40:	40021000 	.word	0x40021000
 8006d44:	42420000 	.word	0x42420000
 8006d48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d4c:	4b92      	ldr	r3, [pc, #584]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d50:	f003 0302 	and.w	r3, r3, #2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1e9      	bne.n	8006d2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0304 	and.w	r3, r3, #4
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 80a6 	beq.w	8006eb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d66:	2300      	movs	r3, #0
 8006d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d6a:	4b8b      	ldr	r3, [pc, #556]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10d      	bne.n	8006d92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d76:	4b88      	ldr	r3, [pc, #544]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	4a87      	ldr	r2, [pc, #540]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d80:	61d3      	str	r3, [r2, #28]
 8006d82:	4b85      	ldr	r3, [pc, #532]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d8a:	60bb      	str	r3, [r7, #8]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d92:	4b82      	ldr	r3, [pc, #520]	@ (8006f9c <HAL_RCC_OscConfig+0x4c8>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d118      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d9e:	4b7f      	ldr	r3, [pc, #508]	@ (8006f9c <HAL_RCC_OscConfig+0x4c8>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a7e      	ldr	r2, [pc, #504]	@ (8006f9c <HAL_RCC_OscConfig+0x4c8>)
 8006da4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006daa:	f7fe fda7 	bl	80058fc <HAL_GetTick>
 8006dae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006db0:	e008      	b.n	8006dc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006db2:	f7fe fda3 	bl	80058fc <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	2b64      	cmp	r3, #100	@ 0x64
 8006dbe:	d901      	bls.n	8006dc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e103      	b.n	8006fcc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dc4:	4b75      	ldr	r3, [pc, #468]	@ (8006f9c <HAL_RCC_OscConfig+0x4c8>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d0f0      	beq.n	8006db2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d106      	bne.n	8006de6 <HAL_RCC_OscConfig+0x312>
 8006dd8:	4b6f      	ldr	r3, [pc, #444]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	4a6e      	ldr	r2, [pc, #440]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006dde:	f043 0301 	orr.w	r3, r3, #1
 8006de2:	6213      	str	r3, [r2, #32]
 8006de4:	e02d      	b.n	8006e42 <HAL_RCC_OscConfig+0x36e>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10c      	bne.n	8006e08 <HAL_RCC_OscConfig+0x334>
 8006dee:	4b6a      	ldr	r3, [pc, #424]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	4a69      	ldr	r2, [pc, #420]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006df4:	f023 0301 	bic.w	r3, r3, #1
 8006df8:	6213      	str	r3, [r2, #32]
 8006dfa:	4b67      	ldr	r3, [pc, #412]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	4a66      	ldr	r2, [pc, #408]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006e00:	f023 0304 	bic.w	r3, r3, #4
 8006e04:	6213      	str	r3, [r2, #32]
 8006e06:	e01c      	b.n	8006e42 <HAL_RCC_OscConfig+0x36e>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	2b05      	cmp	r3, #5
 8006e0e:	d10c      	bne.n	8006e2a <HAL_RCC_OscConfig+0x356>
 8006e10:	4b61      	ldr	r3, [pc, #388]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	4a60      	ldr	r2, [pc, #384]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006e16:	f043 0304 	orr.w	r3, r3, #4
 8006e1a:	6213      	str	r3, [r2, #32]
 8006e1c:	4b5e      	ldr	r3, [pc, #376]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	4a5d      	ldr	r2, [pc, #372]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006e22:	f043 0301 	orr.w	r3, r3, #1
 8006e26:	6213      	str	r3, [r2, #32]
 8006e28:	e00b      	b.n	8006e42 <HAL_RCC_OscConfig+0x36e>
 8006e2a:	4b5b      	ldr	r3, [pc, #364]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	4a5a      	ldr	r2, [pc, #360]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006e30:	f023 0301 	bic.w	r3, r3, #1
 8006e34:	6213      	str	r3, [r2, #32]
 8006e36:	4b58      	ldr	r3, [pc, #352]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	4a57      	ldr	r2, [pc, #348]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006e3c:	f023 0304 	bic.w	r3, r3, #4
 8006e40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d015      	beq.n	8006e76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e4a:	f7fe fd57 	bl	80058fc <HAL_GetTick>
 8006e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e50:	e00a      	b.n	8006e68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e52:	f7fe fd53 	bl	80058fc <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d901      	bls.n	8006e68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e0b1      	b.n	8006fcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e68:	4b4b      	ldr	r3, [pc, #300]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006e6a:	6a1b      	ldr	r3, [r3, #32]
 8006e6c:	f003 0302 	and.w	r3, r3, #2
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d0ee      	beq.n	8006e52 <HAL_RCC_OscConfig+0x37e>
 8006e74:	e014      	b.n	8006ea0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e76:	f7fe fd41 	bl	80058fc <HAL_GetTick>
 8006e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e7c:	e00a      	b.n	8006e94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e7e:	f7fe fd3d 	bl	80058fc <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d901      	bls.n	8006e94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e09b      	b.n	8006fcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e94:	4b40      	ldr	r3, [pc, #256]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	f003 0302 	and.w	r3, r3, #2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1ee      	bne.n	8006e7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006ea0:	7dfb      	ldrb	r3, [r7, #23]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d105      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ea6:	4b3c      	ldr	r3, [pc, #240]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	4a3b      	ldr	r2, [pc, #236]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006eac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006eb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	69db      	ldr	r3, [r3, #28]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 8087 	beq.w	8006fca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ebc:	4b36      	ldr	r3, [pc, #216]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f003 030c 	and.w	r3, r3, #12
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	d061      	beq.n	8006f8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	69db      	ldr	r3, [r3, #28]
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d146      	bne.n	8006f5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ed0:	4b33      	ldr	r3, [pc, #204]	@ (8006fa0 <HAL_RCC_OscConfig+0x4cc>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ed6:	f7fe fd11 	bl	80058fc <HAL_GetTick>
 8006eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006edc:	e008      	b.n	8006ef0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ede:	f7fe fd0d 	bl	80058fc <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d901      	bls.n	8006ef0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e06d      	b.n	8006fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ef0:	4b29      	ldr	r3, [pc, #164]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1f0      	bne.n	8006ede <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f04:	d108      	bne.n	8006f18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006f06:	4b24      	ldr	r3, [pc, #144]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	4921      	ldr	r1, [pc, #132]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f18:	4b1f      	ldr	r3, [pc, #124]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a19      	ldr	r1, [r3, #32]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f28:	430b      	orrs	r3, r1
 8006f2a:	491b      	ldr	r1, [pc, #108]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f30:	4b1b      	ldr	r3, [pc, #108]	@ (8006fa0 <HAL_RCC_OscConfig+0x4cc>)
 8006f32:	2201      	movs	r2, #1
 8006f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f36:	f7fe fce1 	bl	80058fc <HAL_GetTick>
 8006f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f3c:	e008      	b.n	8006f50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f3e:	f7fe fcdd 	bl	80058fc <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d901      	bls.n	8006f50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e03d      	b.n	8006fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f50:	4b11      	ldr	r3, [pc, #68]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d0f0      	beq.n	8006f3e <HAL_RCC_OscConfig+0x46a>
 8006f5c:	e035      	b.n	8006fca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f5e:	4b10      	ldr	r3, [pc, #64]	@ (8006fa0 <HAL_RCC_OscConfig+0x4cc>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f64:	f7fe fcca 	bl	80058fc <HAL_GetTick>
 8006f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f6a:	e008      	b.n	8006f7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f6c:	f7fe fcc6 	bl	80058fc <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e026      	b.n	8006fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f7e:	4b06      	ldr	r3, [pc, #24]	@ (8006f98 <HAL_RCC_OscConfig+0x4c4>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1f0      	bne.n	8006f6c <HAL_RCC_OscConfig+0x498>
 8006f8a:	e01e      	b.n	8006fca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	69db      	ldr	r3, [r3, #28]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d107      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e019      	b.n	8006fcc <HAL_RCC_OscConfig+0x4f8>
 8006f98:	40021000 	.word	0x40021000
 8006f9c:	40007000 	.word	0x40007000
 8006fa0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8006fd4 <HAL_RCC_OscConfig+0x500>)
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d106      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d001      	beq.n	8006fca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e000      	b.n	8006fcc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3718      	adds	r7, #24
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	40021000 	.word	0x40021000

08006fd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e0d0      	b.n	800718e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fec:	4b6a      	ldr	r3, [pc, #424]	@ (8007198 <HAL_RCC_ClockConfig+0x1c0>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0307 	and.w	r3, r3, #7
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d910      	bls.n	800701c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ffa:	4b67      	ldr	r3, [pc, #412]	@ (8007198 <HAL_RCC_ClockConfig+0x1c0>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f023 0207 	bic.w	r2, r3, #7
 8007002:	4965      	ldr	r1, [pc, #404]	@ (8007198 <HAL_RCC_ClockConfig+0x1c0>)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	4313      	orrs	r3, r2
 8007008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800700a:	4b63      	ldr	r3, [pc, #396]	@ (8007198 <HAL_RCC_ClockConfig+0x1c0>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0307 	and.w	r3, r3, #7
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	429a      	cmp	r2, r3
 8007016:	d001      	beq.n	800701c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e0b8      	b.n	800718e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0302 	and.w	r3, r3, #2
 8007024:	2b00      	cmp	r3, #0
 8007026:	d020      	beq.n	800706a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0304 	and.w	r3, r3, #4
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007034:	4b59      	ldr	r3, [pc, #356]	@ (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	4a58      	ldr	r2, [pc, #352]	@ (800719c <HAL_RCC_ClockConfig+0x1c4>)
 800703a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800703e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0308 	and.w	r3, r3, #8
 8007048:	2b00      	cmp	r3, #0
 800704a:	d005      	beq.n	8007058 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800704c:	4b53      	ldr	r3, [pc, #332]	@ (800719c <HAL_RCC_ClockConfig+0x1c4>)
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	4a52      	ldr	r2, [pc, #328]	@ (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8007052:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8007056:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007058:	4b50      	ldr	r3, [pc, #320]	@ (800719c <HAL_RCC_ClockConfig+0x1c4>)
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	494d      	ldr	r1, [pc, #308]	@ (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8007066:	4313      	orrs	r3, r2
 8007068:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d040      	beq.n	80070f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d107      	bne.n	800708e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800707e:	4b47      	ldr	r3, [pc, #284]	@ (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d115      	bne.n	80070b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e07f      	b.n	800718e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	2b02      	cmp	r3, #2
 8007094:	d107      	bne.n	80070a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007096:	4b41      	ldr	r3, [pc, #260]	@ (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d109      	bne.n	80070b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e073      	b.n	800718e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070a6:	4b3d      	ldr	r3, [pc, #244]	@ (800719c <HAL_RCC_ClockConfig+0x1c4>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e06b      	b.n	800718e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070b6:	4b39      	ldr	r3, [pc, #228]	@ (800719c <HAL_RCC_ClockConfig+0x1c4>)
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f023 0203 	bic.w	r2, r3, #3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	4936      	ldr	r1, [pc, #216]	@ (800719c <HAL_RCC_ClockConfig+0x1c4>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070c8:	f7fe fc18 	bl	80058fc <HAL_GetTick>
 80070cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ce:	e00a      	b.n	80070e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070d0:	f7fe fc14 	bl	80058fc <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070de:	4293      	cmp	r3, r2
 80070e0:	d901      	bls.n	80070e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e053      	b.n	800718e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070e6:	4b2d      	ldr	r3, [pc, #180]	@ (800719c <HAL_RCC_ClockConfig+0x1c4>)
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f003 020c 	and.w	r2, r3, #12
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d1eb      	bne.n	80070d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070f8:	4b27      	ldr	r3, [pc, #156]	@ (8007198 <HAL_RCC_ClockConfig+0x1c0>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0307 	and.w	r3, r3, #7
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	429a      	cmp	r2, r3
 8007104:	d210      	bcs.n	8007128 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007106:	4b24      	ldr	r3, [pc, #144]	@ (8007198 <HAL_RCC_ClockConfig+0x1c0>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f023 0207 	bic.w	r2, r3, #7
 800710e:	4922      	ldr	r1, [pc, #136]	@ (8007198 <HAL_RCC_ClockConfig+0x1c0>)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	4313      	orrs	r3, r2
 8007114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007116:	4b20      	ldr	r3, [pc, #128]	@ (8007198 <HAL_RCC_ClockConfig+0x1c0>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0307 	and.w	r3, r3, #7
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	429a      	cmp	r2, r3
 8007122:	d001      	beq.n	8007128 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e032      	b.n	800718e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0304 	and.w	r3, r3, #4
 8007130:	2b00      	cmp	r3, #0
 8007132:	d008      	beq.n	8007146 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007134:	4b19      	ldr	r3, [pc, #100]	@ (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	4916      	ldr	r1, [pc, #88]	@ (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8007142:	4313      	orrs	r3, r2
 8007144:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0308 	and.w	r3, r3, #8
 800714e:	2b00      	cmp	r3, #0
 8007150:	d009      	beq.n	8007166 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007152:	4b12      	ldr	r3, [pc, #72]	@ (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	490e      	ldr	r1, [pc, #56]	@ (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8007162:	4313      	orrs	r3, r2
 8007164:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007166:	f000 f821 	bl	80071ac <HAL_RCC_GetSysClockFreq>
 800716a:	4602      	mov	r2, r0
 800716c:	4b0b      	ldr	r3, [pc, #44]	@ (800719c <HAL_RCC_ClockConfig+0x1c4>)
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	091b      	lsrs	r3, r3, #4
 8007172:	f003 030f 	and.w	r3, r3, #15
 8007176:	490a      	ldr	r1, [pc, #40]	@ (80071a0 <HAL_RCC_ClockConfig+0x1c8>)
 8007178:	5ccb      	ldrb	r3, [r1, r3]
 800717a:	fa22 f303 	lsr.w	r3, r2, r3
 800717e:	4a09      	ldr	r2, [pc, #36]	@ (80071a4 <HAL_RCC_ClockConfig+0x1cc>)
 8007180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007182:	4b09      	ldr	r3, [pc, #36]	@ (80071a8 <HAL_RCC_ClockConfig+0x1d0>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe fb76 	bl	8005878 <HAL_InitTick>

  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	40022000 	.word	0x40022000
 800719c:	40021000 	.word	0x40021000
 80071a0:	0800af00 	.word	0x0800af00
 80071a4:	20000018 	.word	0x20000018
 80071a8:	2000001c 	.word	0x2000001c

080071ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	60fb      	str	r3, [r7, #12]
 80071b6:	2300      	movs	r3, #0
 80071b8:	60bb      	str	r3, [r7, #8]
 80071ba:	2300      	movs	r3, #0
 80071bc:	617b      	str	r3, [r7, #20]
 80071be:	2300      	movs	r3, #0
 80071c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80071c2:	2300      	movs	r3, #0
 80071c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80071c6:	4b1e      	ldr	r3, [pc, #120]	@ (8007240 <HAL_RCC_GetSysClockFreq+0x94>)
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f003 030c 	and.w	r3, r3, #12
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	d002      	beq.n	80071dc <HAL_RCC_GetSysClockFreq+0x30>
 80071d6:	2b08      	cmp	r3, #8
 80071d8:	d003      	beq.n	80071e2 <HAL_RCC_GetSysClockFreq+0x36>
 80071da:	e027      	b.n	800722c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80071dc:	4b19      	ldr	r3, [pc, #100]	@ (8007244 <HAL_RCC_GetSysClockFreq+0x98>)
 80071de:	613b      	str	r3, [r7, #16]
      break;
 80071e0:	e027      	b.n	8007232 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	0c9b      	lsrs	r3, r3, #18
 80071e6:	f003 030f 	and.w	r3, r3, #15
 80071ea:	4a17      	ldr	r2, [pc, #92]	@ (8007248 <HAL_RCC_GetSysClockFreq+0x9c>)
 80071ec:	5cd3      	ldrb	r3, [r2, r3]
 80071ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d010      	beq.n	800721c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80071fa:	4b11      	ldr	r3, [pc, #68]	@ (8007240 <HAL_RCC_GetSysClockFreq+0x94>)
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	0c5b      	lsrs	r3, r3, #17
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	4a11      	ldr	r2, [pc, #68]	@ (800724c <HAL_RCC_GetSysClockFreq+0xa0>)
 8007206:	5cd3      	ldrb	r3, [r2, r3]
 8007208:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a0d      	ldr	r2, [pc, #52]	@ (8007244 <HAL_RCC_GetSysClockFreq+0x98>)
 800720e:	fb03 f202 	mul.w	r2, r3, r2
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	fbb2 f3f3 	udiv	r3, r2, r3
 8007218:	617b      	str	r3, [r7, #20]
 800721a:	e004      	b.n	8007226 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a0c      	ldr	r2, [pc, #48]	@ (8007250 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007220:	fb02 f303 	mul.w	r3, r2, r3
 8007224:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	613b      	str	r3, [r7, #16]
      break;
 800722a:	e002      	b.n	8007232 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800722c:	4b05      	ldr	r3, [pc, #20]	@ (8007244 <HAL_RCC_GetSysClockFreq+0x98>)
 800722e:	613b      	str	r3, [r7, #16]
      break;
 8007230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007232:	693b      	ldr	r3, [r7, #16]
}
 8007234:	4618      	mov	r0, r3
 8007236:	371c      	adds	r7, #28
 8007238:	46bd      	mov	sp, r7
 800723a:	bc80      	pop	{r7}
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	40021000 	.word	0x40021000
 8007244:	007a1200 	.word	0x007a1200
 8007248:	0800af18 	.word	0x0800af18
 800724c:	0800af28 	.word	0x0800af28
 8007250:	003d0900 	.word	0x003d0900

08007254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007254:	b480      	push	{r7}
 8007256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007258:	4b02      	ldr	r3, [pc, #8]	@ (8007264 <HAL_RCC_GetHCLKFreq+0x10>)
 800725a:	681b      	ldr	r3, [r3, #0]
}
 800725c:	4618      	mov	r0, r3
 800725e:	46bd      	mov	sp, r7
 8007260:	bc80      	pop	{r7}
 8007262:	4770      	bx	lr
 8007264:	20000018 	.word	0x20000018

08007268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800726c:	f7ff fff2 	bl	8007254 <HAL_RCC_GetHCLKFreq>
 8007270:	4602      	mov	r2, r0
 8007272:	4b05      	ldr	r3, [pc, #20]	@ (8007288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	0a1b      	lsrs	r3, r3, #8
 8007278:	f003 0307 	and.w	r3, r3, #7
 800727c:	4903      	ldr	r1, [pc, #12]	@ (800728c <HAL_RCC_GetPCLK1Freq+0x24>)
 800727e:	5ccb      	ldrb	r3, [r1, r3]
 8007280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007284:	4618      	mov	r0, r3
 8007286:	bd80      	pop	{r7, pc}
 8007288:	40021000 	.word	0x40021000
 800728c:	0800af10 	.word	0x0800af10

08007290 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007298:	4b0a      	ldr	r3, [pc, #40]	@ (80072c4 <RCC_Delay+0x34>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a0a      	ldr	r2, [pc, #40]	@ (80072c8 <RCC_Delay+0x38>)
 800729e:	fba2 2303 	umull	r2, r3, r2, r3
 80072a2:	0a5b      	lsrs	r3, r3, #9
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	fb02 f303 	mul.w	r3, r2, r3
 80072aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80072ac:	bf00      	nop
  }
  while (Delay --);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	1e5a      	subs	r2, r3, #1
 80072b2:	60fa      	str	r2, [r7, #12]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1f9      	bne.n	80072ac <RCC_Delay+0x1c>
}
 80072b8:	bf00      	nop
 80072ba:	bf00      	nop
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	bc80      	pop	{r7}
 80072c2:	4770      	bx	lr
 80072c4:	20000018 	.word	0x20000018
 80072c8:	10624dd3 	.word	0x10624dd3

080072cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e041      	b.n	8007362 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d106      	bne.n	80072f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7fe f9e0 	bl	80056b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3304      	adds	r3, #4
 8007308:	4619      	mov	r1, r3
 800730a:	4610      	mov	r0, r2
 800730c:	f000 fbe2 	bl	8007ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b082      	sub	sp, #8
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e041      	b.n	8007400 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	d106      	bne.n	8007396 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f839 	bl	8007408 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2202      	movs	r2, #2
 800739a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	3304      	adds	r3, #4
 80073a6:	4619      	mov	r1, r3
 80073a8:	4610      	mov	r0, r2
 80073aa:	f000 fb93 	bl	8007ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	bc80      	pop	{r7}
 8007418:	4770      	bx	lr
	...

0800741c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d109      	bne.n	8007440 <HAL_TIM_PWM_Start+0x24>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b01      	cmp	r3, #1
 8007436:	bf14      	ite	ne
 8007438:	2301      	movne	r3, #1
 800743a:	2300      	moveq	r3, #0
 800743c:	b2db      	uxtb	r3, r3
 800743e:	e022      	b.n	8007486 <HAL_TIM_PWM_Start+0x6a>
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	2b04      	cmp	r3, #4
 8007444:	d109      	bne.n	800745a <HAL_TIM_PWM_Start+0x3e>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b01      	cmp	r3, #1
 8007450:	bf14      	ite	ne
 8007452:	2301      	movne	r3, #1
 8007454:	2300      	moveq	r3, #0
 8007456:	b2db      	uxtb	r3, r3
 8007458:	e015      	b.n	8007486 <HAL_TIM_PWM_Start+0x6a>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2b08      	cmp	r3, #8
 800745e:	d109      	bne.n	8007474 <HAL_TIM_PWM_Start+0x58>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2b01      	cmp	r3, #1
 800746a:	bf14      	ite	ne
 800746c:	2301      	movne	r3, #1
 800746e:	2300      	moveq	r3, #0
 8007470:	b2db      	uxtb	r3, r3
 8007472:	e008      	b.n	8007486 <HAL_TIM_PWM_Start+0x6a>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b01      	cmp	r3, #1
 800747e:	bf14      	ite	ne
 8007480:	2301      	movne	r3, #1
 8007482:	2300      	moveq	r3, #0
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e05e      	b.n	800754c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d104      	bne.n	800749e <HAL_TIM_PWM_Start+0x82>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800749c:	e013      	b.n	80074c6 <HAL_TIM_PWM_Start+0xaa>
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	2b04      	cmp	r3, #4
 80074a2:	d104      	bne.n	80074ae <HAL_TIM_PWM_Start+0x92>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2202      	movs	r2, #2
 80074a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074ac:	e00b      	b.n	80074c6 <HAL_TIM_PWM_Start+0xaa>
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	2b08      	cmp	r3, #8
 80074b2:	d104      	bne.n	80074be <HAL_TIM_PWM_Start+0xa2>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2202      	movs	r2, #2
 80074b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074bc:	e003      	b.n	80074c6 <HAL_TIM_PWM_Start+0xaa>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2202      	movs	r2, #2
 80074c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2201      	movs	r2, #1
 80074cc:	6839      	ldr	r1, [r7, #0]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 fd8c 	bl	8007fec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a1e      	ldr	r2, [pc, #120]	@ (8007554 <HAL_TIM_PWM_Start+0x138>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d107      	bne.n	80074ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a18      	ldr	r2, [pc, #96]	@ (8007554 <HAL_TIM_PWM_Start+0x138>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d00e      	beq.n	8007516 <HAL_TIM_PWM_Start+0xfa>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007500:	d009      	beq.n	8007516 <HAL_TIM_PWM_Start+0xfa>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a14      	ldr	r2, [pc, #80]	@ (8007558 <HAL_TIM_PWM_Start+0x13c>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d004      	beq.n	8007516 <HAL_TIM_PWM_Start+0xfa>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a12      	ldr	r2, [pc, #72]	@ (800755c <HAL_TIM_PWM_Start+0x140>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d111      	bne.n	800753a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f003 0307 	and.w	r3, r3, #7
 8007520:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2b06      	cmp	r3, #6
 8007526:	d010      	beq.n	800754a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f042 0201 	orr.w	r2, r2, #1
 8007536:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007538:	e007      	b.n	800754a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f042 0201 	orr.w	r2, r2, #1
 8007548:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	40012c00 	.word	0x40012c00
 8007558:	40000400 	.word	0x40000400
 800755c:	40000800 	.word	0x40000800

08007560 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e093      	b.n	800769c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2b00      	cmp	r3, #0
 800757e:	d106      	bne.n	800758e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7fe f8b3 	bl	80056f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2202      	movs	r2, #2
 8007592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	6812      	ldr	r2, [r2, #0]
 80075a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80075a4:	f023 0307 	bic.w	r3, r3, #7
 80075a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	3304      	adds	r3, #4
 80075b2:	4619      	mov	r1, r3
 80075b4:	4610      	mov	r0, r2
 80075b6:	f000 fa8d 	bl	8007ad4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6a1b      	ldr	r3, [r3, #32]
 80075d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	4313      	orrs	r3, r2
 80075da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075e2:	f023 0303 	bic.w	r3, r3, #3
 80075e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	689a      	ldr	r2, [r3, #8]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	021b      	lsls	r3, r3, #8
 80075f2:	4313      	orrs	r3, r2
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007600:	f023 030c 	bic.w	r3, r3, #12
 8007604:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800760c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007610:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	69db      	ldr	r3, [r3, #28]
 800761a:	021b      	lsls	r3, r3, #8
 800761c:	4313      	orrs	r3, r2
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	4313      	orrs	r3, r2
 8007622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	011a      	lsls	r2, r3, #4
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	031b      	lsls	r3, r3, #12
 8007630:	4313      	orrs	r3, r2
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	4313      	orrs	r3, r2
 8007636:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800763e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	685a      	ldr	r2, [r3, #4]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	011b      	lsls	r3, r3, #4
 800764a:	4313      	orrs	r3, r2
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	4313      	orrs	r3, r2
 8007650:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3718      	adds	r7, #24
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80076b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80076bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80076cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d110      	bne.n	80076f6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d102      	bne.n	80076e0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80076da:	7b7b      	ldrb	r3, [r7, #13]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d001      	beq.n	80076e4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e069      	b.n	80077b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076f4:	e031      	b.n	800775a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b04      	cmp	r3, #4
 80076fa:	d110      	bne.n	800771e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d102      	bne.n	8007708 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007702:	7b3b      	ldrb	r3, [r7, #12]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d001      	beq.n	800770c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e055      	b.n	80077b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2202      	movs	r2, #2
 8007710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2202      	movs	r2, #2
 8007718:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800771c:	e01d      	b.n	800775a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800771e:	7bfb      	ldrb	r3, [r7, #15]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d108      	bne.n	8007736 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007724:	7bbb      	ldrb	r3, [r7, #14]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d105      	bne.n	8007736 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800772a:	7b7b      	ldrb	r3, [r7, #13]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d102      	bne.n	8007736 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007730:	7b3b      	ldrb	r3, [r7, #12]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d001      	beq.n	800773a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e03e      	b.n	80077b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2202      	movs	r2, #2
 800773e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2202      	movs	r2, #2
 8007746:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2202      	movs	r2, #2
 800774e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2202      	movs	r2, #2
 8007756:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d003      	beq.n	8007768 <HAL_TIM_Encoder_Start+0xc4>
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2b04      	cmp	r3, #4
 8007764:	d008      	beq.n	8007778 <HAL_TIM_Encoder_Start+0xd4>
 8007766:	e00f      	b.n	8007788 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2201      	movs	r2, #1
 800776e:	2100      	movs	r1, #0
 8007770:	4618      	mov	r0, r3
 8007772:	f000 fc3b 	bl	8007fec <TIM_CCxChannelCmd>
      break;
 8007776:	e016      	b.n	80077a6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2201      	movs	r2, #1
 800777e:	2104      	movs	r1, #4
 8007780:	4618      	mov	r0, r3
 8007782:	f000 fc33 	bl	8007fec <TIM_CCxChannelCmd>
      break;
 8007786:	e00e      	b.n	80077a6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2201      	movs	r2, #1
 800778e:	2100      	movs	r1, #0
 8007790:	4618      	mov	r0, r3
 8007792:	f000 fc2b 	bl	8007fec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2201      	movs	r2, #1
 800779c:	2104      	movs	r1, #4
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 fc24 	bl	8007fec <TIM_CCxChannelCmd>
      break;
 80077a4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f042 0201 	orr.w	r2, r2, #1
 80077b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d101      	bne.n	80077de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80077da:	2302      	movs	r3, #2
 80077dc:	e0ae      	b.n	800793c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b0c      	cmp	r3, #12
 80077ea:	f200 809f 	bhi.w	800792c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80077ee:	a201      	add	r2, pc, #4	@ (adr r2, 80077f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f4:	08007829 	.word	0x08007829
 80077f8:	0800792d 	.word	0x0800792d
 80077fc:	0800792d 	.word	0x0800792d
 8007800:	0800792d 	.word	0x0800792d
 8007804:	08007869 	.word	0x08007869
 8007808:	0800792d 	.word	0x0800792d
 800780c:	0800792d 	.word	0x0800792d
 8007810:	0800792d 	.word	0x0800792d
 8007814:	080078ab 	.word	0x080078ab
 8007818:	0800792d 	.word	0x0800792d
 800781c:	0800792d 	.word	0x0800792d
 8007820:	0800792d 	.word	0x0800792d
 8007824:	080078eb 	.word	0x080078eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68b9      	ldr	r1, [r7, #8]
 800782e:	4618      	mov	r0, r3
 8007830:	f000 f9be 	bl	8007bb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	699a      	ldr	r2, [r3, #24]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f042 0208 	orr.w	r2, r2, #8
 8007842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	699a      	ldr	r2, [r3, #24]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 0204 	bic.w	r2, r2, #4
 8007852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6999      	ldr	r1, [r3, #24]
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	691a      	ldr	r2, [r3, #16]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	430a      	orrs	r2, r1
 8007864:	619a      	str	r2, [r3, #24]
      break;
 8007866:	e064      	b.n	8007932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68b9      	ldr	r1, [r7, #8]
 800786e:	4618      	mov	r0, r3
 8007870:	f000 fa04 	bl	8007c7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	699a      	ldr	r2, [r3, #24]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	699a      	ldr	r2, [r3, #24]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6999      	ldr	r1, [r3, #24]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	021a      	lsls	r2, r3, #8
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	619a      	str	r2, [r3, #24]
      break;
 80078a8:	e043      	b.n	8007932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68b9      	ldr	r1, [r7, #8]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 fa4d 	bl	8007d50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	69da      	ldr	r2, [r3, #28]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f042 0208 	orr.w	r2, r2, #8
 80078c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	69da      	ldr	r2, [r3, #28]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f022 0204 	bic.w	r2, r2, #4
 80078d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	69d9      	ldr	r1, [r3, #28]
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	691a      	ldr	r2, [r3, #16]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	430a      	orrs	r2, r1
 80078e6:	61da      	str	r2, [r3, #28]
      break;
 80078e8:	e023      	b.n	8007932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68b9      	ldr	r1, [r7, #8]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f000 fa97 	bl	8007e24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	69da      	ldr	r2, [r3, #28]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	69da      	ldr	r2, [r3, #28]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	69d9      	ldr	r1, [r3, #28]
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	021a      	lsls	r2, r3, #8
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	430a      	orrs	r2, r1
 8007928:	61da      	str	r2, [r3, #28]
      break;
 800792a:	e002      	b.n	8007932 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	75fb      	strb	r3, [r7, #23]
      break;
 8007930:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800793a:	7dfb      	ldrb	r3, [r7, #23]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3718      	adds	r7, #24
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007958:	2b01      	cmp	r3, #1
 800795a:	d101      	bne.n	8007960 <HAL_TIM_ConfigClockSource+0x1c>
 800795c:	2302      	movs	r3, #2
 800795e:	e0b4      	b.n	8007aca <HAL_TIM_ConfigClockSource+0x186>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800797e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007986:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007998:	d03e      	beq.n	8007a18 <HAL_TIM_ConfigClockSource+0xd4>
 800799a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800799e:	f200 8087 	bhi.w	8007ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80079a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079a6:	f000 8086 	beq.w	8007ab6 <HAL_TIM_ConfigClockSource+0x172>
 80079aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079ae:	d87f      	bhi.n	8007ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80079b0:	2b70      	cmp	r3, #112	@ 0x70
 80079b2:	d01a      	beq.n	80079ea <HAL_TIM_ConfigClockSource+0xa6>
 80079b4:	2b70      	cmp	r3, #112	@ 0x70
 80079b6:	d87b      	bhi.n	8007ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80079b8:	2b60      	cmp	r3, #96	@ 0x60
 80079ba:	d050      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x11a>
 80079bc:	2b60      	cmp	r3, #96	@ 0x60
 80079be:	d877      	bhi.n	8007ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80079c0:	2b50      	cmp	r3, #80	@ 0x50
 80079c2:	d03c      	beq.n	8007a3e <HAL_TIM_ConfigClockSource+0xfa>
 80079c4:	2b50      	cmp	r3, #80	@ 0x50
 80079c6:	d873      	bhi.n	8007ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80079c8:	2b40      	cmp	r3, #64	@ 0x40
 80079ca:	d058      	beq.n	8007a7e <HAL_TIM_ConfigClockSource+0x13a>
 80079cc:	2b40      	cmp	r3, #64	@ 0x40
 80079ce:	d86f      	bhi.n	8007ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80079d0:	2b30      	cmp	r3, #48	@ 0x30
 80079d2:	d064      	beq.n	8007a9e <HAL_TIM_ConfigClockSource+0x15a>
 80079d4:	2b30      	cmp	r3, #48	@ 0x30
 80079d6:	d86b      	bhi.n	8007ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80079d8:	2b20      	cmp	r3, #32
 80079da:	d060      	beq.n	8007a9e <HAL_TIM_ConfigClockSource+0x15a>
 80079dc:	2b20      	cmp	r3, #32
 80079de:	d867      	bhi.n	8007ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d05c      	beq.n	8007a9e <HAL_TIM_ConfigClockSource+0x15a>
 80079e4:	2b10      	cmp	r3, #16
 80079e6:	d05a      	beq.n	8007a9e <HAL_TIM_ConfigClockSource+0x15a>
 80079e8:	e062      	b.n	8007ab0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079fa:	f000 fad8 	bl	8007fae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007a0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	609a      	str	r2, [r3, #8]
      break;
 8007a16:	e04f      	b.n	8007ab8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a28:	f000 fac1 	bl	8007fae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689a      	ldr	r2, [r3, #8]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a3a:	609a      	str	r2, [r3, #8]
      break;
 8007a3c:	e03c      	b.n	8007ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	f000 fa38 	bl	8007ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2150      	movs	r1, #80	@ 0x50
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 fa8f 	bl	8007f7a <TIM_ITRx_SetConfig>
      break;
 8007a5c:	e02c      	b.n	8007ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f000 fa56 	bl	8007f1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2160      	movs	r1, #96	@ 0x60
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 fa7f 	bl	8007f7a <TIM_ITRx_SetConfig>
      break;
 8007a7c:	e01c      	b.n	8007ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	f000 fa18 	bl	8007ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2140      	movs	r1, #64	@ 0x40
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 fa6f 	bl	8007f7a <TIM_ITRx_SetConfig>
      break;
 8007a9c:	e00c      	b.n	8007ab8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	f000 fa66 	bl	8007f7a <TIM_ITRx_SetConfig>
      break;
 8007aae:	e003      	b.n	8007ab8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ab4:	e000      	b.n	8007ab8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ab6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
	...

08007ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a2f      	ldr	r2, [pc, #188]	@ (8007ba4 <TIM_Base_SetConfig+0xd0>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d00b      	beq.n	8007b04 <TIM_Base_SetConfig+0x30>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007af2:	d007      	beq.n	8007b04 <TIM_Base_SetConfig+0x30>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a2c      	ldr	r2, [pc, #176]	@ (8007ba8 <TIM_Base_SetConfig+0xd4>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d003      	beq.n	8007b04 <TIM_Base_SetConfig+0x30>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a2b      	ldr	r2, [pc, #172]	@ (8007bac <TIM_Base_SetConfig+0xd8>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d108      	bne.n	8007b16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a22      	ldr	r2, [pc, #136]	@ (8007ba4 <TIM_Base_SetConfig+0xd0>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d00b      	beq.n	8007b36 <TIM_Base_SetConfig+0x62>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b24:	d007      	beq.n	8007b36 <TIM_Base_SetConfig+0x62>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a1f      	ldr	r2, [pc, #124]	@ (8007ba8 <TIM_Base_SetConfig+0xd4>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d003      	beq.n	8007b36 <TIM_Base_SetConfig+0x62>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a1e      	ldr	r2, [pc, #120]	@ (8007bac <TIM_Base_SetConfig+0xd8>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d108      	bne.n	8007b48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	695b      	ldr	r3, [r3, #20]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	689a      	ldr	r2, [r3, #8]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a0d      	ldr	r2, [pc, #52]	@ (8007ba4 <TIM_Base_SetConfig+0xd0>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d103      	bne.n	8007b7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	691a      	ldr	r2, [r3, #16]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d005      	beq.n	8007b9a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	f023 0201 	bic.w	r2, r3, #1
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	611a      	str	r2, [r3, #16]
  }
}
 8007b9a:	bf00      	nop
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bc80      	pop	{r7}
 8007ba2:	4770      	bx	lr
 8007ba4:	40012c00 	.word	0x40012c00
 8007ba8:	40000400 	.word	0x40000400
 8007bac:	40000800 	.word	0x40000800

08007bb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b087      	sub	sp, #28
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a1b      	ldr	r3, [r3, #32]
 8007bc4:	f023 0201 	bic.w	r2, r3, #1
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f023 0303 	bic.w	r3, r3, #3
 8007be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f023 0302 	bic.w	r3, r3, #2
 8007bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a1c      	ldr	r2, [pc, #112]	@ (8007c78 <TIM_OC1_SetConfig+0xc8>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d10c      	bne.n	8007c26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	f023 0308 	bic.w	r3, r3, #8
 8007c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f023 0304 	bic.w	r3, r3, #4
 8007c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a13      	ldr	r2, [pc, #76]	@ (8007c78 <TIM_OC1_SetConfig+0xc8>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d111      	bne.n	8007c52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	621a      	str	r2, [r3, #32]
}
 8007c6c:	bf00      	nop
 8007c6e:	371c      	adds	r7, #28
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bc80      	pop	{r7}
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	40012c00 	.word	0x40012c00

08007c7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a1b      	ldr	r3, [r3, #32]
 8007c90:	f023 0210 	bic.w	r2, r3, #16
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	021b      	lsls	r3, r3, #8
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f023 0320 	bic.w	r3, r3, #32
 8007cc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	011b      	lsls	r3, r3, #4
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8007d4c <TIM_OC2_SetConfig+0xd0>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d10d      	bne.n	8007cf8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	011b      	lsls	r3, r3, #4
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cf6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a14      	ldr	r2, [pc, #80]	@ (8007d4c <TIM_OC2_SetConfig+0xd0>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d113      	bne.n	8007d28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	695b      	ldr	r3, [r3, #20]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	621a      	str	r2, [r3, #32]
}
 8007d42:	bf00      	nop
 8007d44:	371c      	adds	r7, #28
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bc80      	pop	{r7}
 8007d4a:	4770      	bx	lr
 8007d4c:	40012c00 	.word	0x40012c00

08007d50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b087      	sub	sp, #28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a1b      	ldr	r3, [r3, #32]
 8007d64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	69db      	ldr	r3, [r3, #28]
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f023 0303 	bic.w	r3, r3, #3
 8007d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	021b      	lsls	r3, r3, #8
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e20 <TIM_OC3_SetConfig+0xd0>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d10d      	bne.n	8007dca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007db4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	021b      	lsls	r3, r3, #8
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007dc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a14      	ldr	r2, [pc, #80]	@ (8007e20 <TIM_OC3_SetConfig+0xd0>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d113      	bne.n	8007dfa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	011b      	lsls	r3, r3, #4
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	011b      	lsls	r3, r3, #4
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	685a      	ldr	r2, [r3, #4]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	621a      	str	r2, [r3, #32]
}
 8007e14:	bf00      	nop
 8007e16:	371c      	adds	r7, #28
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bc80      	pop	{r7}
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	40012c00 	.word	0x40012c00

08007e24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b087      	sub	sp, #28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	69db      	ldr	r3, [r3, #28]
 8007e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	021b      	lsls	r3, r3, #8
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	031b      	lsls	r3, r3, #12
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a0f      	ldr	r2, [pc, #60]	@ (8007ebc <TIM_OC4_SetConfig+0x98>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d109      	bne.n	8007e98 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	019b      	lsls	r3, r3, #6
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	697a      	ldr	r2, [r7, #20]
 8007e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	685a      	ldr	r2, [r3, #4]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	693a      	ldr	r2, [r7, #16]
 8007eb0:	621a      	str	r2, [r3, #32]
}
 8007eb2:	bf00      	nop
 8007eb4:	371c      	adds	r7, #28
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bc80      	pop	{r7}
 8007eba:	4770      	bx	lr
 8007ebc:	40012c00 	.word	0x40012c00

08007ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b087      	sub	sp, #28
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	f023 0201 	bic.w	r2, r3, #1
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	011b      	lsls	r3, r3, #4
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	f023 030a 	bic.w	r3, r3, #10
 8007efc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	621a      	str	r2, [r3, #32]
}
 8007f12:	bf00      	nop
 8007f14:	371c      	adds	r7, #28
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bc80      	pop	{r7}
 8007f1a:	4770      	bx	lr

08007f1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b087      	sub	sp, #28
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6a1b      	ldr	r3, [r3, #32]
 8007f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	f023 0210 	bic.w	r2, r3, #16
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	031b      	lsls	r3, r3, #12
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007f58:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	011b      	lsls	r3, r3, #4
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	621a      	str	r2, [r3, #32]
}
 8007f70:	bf00      	nop
 8007f72:	371c      	adds	r7, #28
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bc80      	pop	{r7}
 8007f78:	4770      	bx	lr

08007f7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b085      	sub	sp, #20
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f92:	683a      	ldr	r2, [r7, #0]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	f043 0307 	orr.w	r3, r3, #7
 8007f9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	609a      	str	r2, [r3, #8]
}
 8007fa4:	bf00      	nop
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bc80      	pop	{r7}
 8007fac:	4770      	bx	lr

08007fae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b087      	sub	sp, #28
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	60f8      	str	r0, [r7, #12]
 8007fb6:	60b9      	str	r1, [r7, #8]
 8007fb8:	607a      	str	r2, [r7, #4]
 8007fba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fc8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	021a      	lsls	r2, r3, #8
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	431a      	orrs	r2, r3
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	609a      	str	r2, [r3, #8]
}
 8007fe2:	bf00      	nop
 8007fe4:	371c      	adds	r7, #28
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bc80      	pop	{r7}
 8007fea:	4770      	bx	lr

08007fec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	f003 031f 	and.w	r3, r3, #31
 8007ffe:	2201      	movs	r2, #1
 8008000:	fa02 f303 	lsl.w	r3, r2, r3
 8008004:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6a1a      	ldr	r2, [r3, #32]
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	43db      	mvns	r3, r3
 800800e:	401a      	ands	r2, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6a1a      	ldr	r2, [r3, #32]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	f003 031f 	and.w	r3, r3, #31
 800801e:	6879      	ldr	r1, [r7, #4]
 8008020:	fa01 f303 	lsl.w	r3, r1, r3
 8008024:	431a      	orrs	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	621a      	str	r2, [r3, #32]
}
 800802a:	bf00      	nop
 800802c:	371c      	adds	r7, #28
 800802e:	46bd      	mov	sp, r7
 8008030:	bc80      	pop	{r7}
 8008032:	4770      	bx	lr

08008034 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008044:	2b01      	cmp	r3, #1
 8008046:	d101      	bne.n	800804c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008048:	2302      	movs	r3, #2
 800804a:	e046      	b.n	80080da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2202      	movs	r2, #2
 8008058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008072:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	4313      	orrs	r3, r2
 800807c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a16      	ldr	r2, [pc, #88]	@ (80080e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d00e      	beq.n	80080ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008098:	d009      	beq.n	80080ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a12      	ldr	r2, [pc, #72]	@ (80080e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d004      	beq.n	80080ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a10      	ldr	r2, [pc, #64]	@ (80080ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d10c      	bne.n	80080c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	4313      	orrs	r3, r2
 80080be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3714      	adds	r7, #20
 80080de:	46bd      	mov	sp, r7
 80080e0:	bc80      	pop	{r7}
 80080e2:	4770      	bx	lr
 80080e4:	40012c00 	.word	0x40012c00
 80080e8:	40000400 	.word	0x40000400
 80080ec:	40000800 	.word	0x40000800

080080f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80080fa:	2300      	movs	r3, #0
 80080fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008104:	2b01      	cmp	r3, #1
 8008106:	d101      	bne.n	800810c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008108:	2302      	movs	r3, #2
 800810a:	e03d      	b.n	8008188 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	4313      	orrs	r3, r2
 8008120:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	4313      	orrs	r3, r2
 800812e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	4313      	orrs	r3, r2
 800813c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4313      	orrs	r3, r2
 800814a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	4313      	orrs	r3, r2
 8008158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	4313      	orrs	r3, r2
 8008166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	69db      	ldr	r3, [r3, #28]
 8008172:	4313      	orrs	r3, r2
 8008174:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	bc80      	pop	{r7}
 8008190:	4770      	bx	lr
	...

08008194 <rand>:
 8008194:	4b16      	ldr	r3, [pc, #88]	@ (80081f0 <rand+0x5c>)
 8008196:	b510      	push	{r4, lr}
 8008198:	681c      	ldr	r4, [r3, #0]
 800819a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800819c:	b9b3      	cbnz	r3, 80081cc <rand+0x38>
 800819e:	2018      	movs	r0, #24
 80081a0:	f000 fb54 	bl	800884c <malloc>
 80081a4:	4602      	mov	r2, r0
 80081a6:	6320      	str	r0, [r4, #48]	@ 0x30
 80081a8:	b920      	cbnz	r0, 80081b4 <rand+0x20>
 80081aa:	2152      	movs	r1, #82	@ 0x52
 80081ac:	4b11      	ldr	r3, [pc, #68]	@ (80081f4 <rand+0x60>)
 80081ae:	4812      	ldr	r0, [pc, #72]	@ (80081f8 <rand+0x64>)
 80081b0:	f000 fae6 	bl	8008780 <__assert_func>
 80081b4:	4911      	ldr	r1, [pc, #68]	@ (80081fc <rand+0x68>)
 80081b6:	4b12      	ldr	r3, [pc, #72]	@ (8008200 <rand+0x6c>)
 80081b8:	e9c0 1300 	strd	r1, r3, [r0]
 80081bc:	4b11      	ldr	r3, [pc, #68]	@ (8008204 <rand+0x70>)
 80081be:	2100      	movs	r1, #0
 80081c0:	6083      	str	r3, [r0, #8]
 80081c2:	230b      	movs	r3, #11
 80081c4:	8183      	strh	r3, [r0, #12]
 80081c6:	2001      	movs	r0, #1
 80081c8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80081cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80081ce:	480e      	ldr	r0, [pc, #56]	@ (8008208 <rand+0x74>)
 80081d0:	690b      	ldr	r3, [r1, #16]
 80081d2:	694c      	ldr	r4, [r1, #20]
 80081d4:	4358      	muls	r0, r3
 80081d6:	4a0d      	ldr	r2, [pc, #52]	@ (800820c <rand+0x78>)
 80081d8:	fb02 0004 	mla	r0, r2, r4, r0
 80081dc:	fba3 3202 	umull	r3, r2, r3, r2
 80081e0:	3301      	adds	r3, #1
 80081e2:	eb40 0002 	adc.w	r0, r0, r2
 80081e6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80081ea:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80081ee:	bd10      	pop	{r4, pc}
 80081f0:	20000030 	.word	0x20000030
 80081f4:	0800af2a 	.word	0x0800af2a
 80081f8:	0800af41 	.word	0x0800af41
 80081fc:	abcd330e 	.word	0xabcd330e
 8008200:	e66d1234 	.word	0xe66d1234
 8008204:	0005deec 	.word	0x0005deec
 8008208:	5851f42d 	.word	0x5851f42d
 800820c:	4c957f2d 	.word	0x4c957f2d

08008210 <std>:
 8008210:	2300      	movs	r3, #0
 8008212:	b510      	push	{r4, lr}
 8008214:	4604      	mov	r4, r0
 8008216:	e9c0 3300 	strd	r3, r3, [r0]
 800821a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800821e:	6083      	str	r3, [r0, #8]
 8008220:	8181      	strh	r1, [r0, #12]
 8008222:	6643      	str	r3, [r0, #100]	@ 0x64
 8008224:	81c2      	strh	r2, [r0, #14]
 8008226:	6183      	str	r3, [r0, #24]
 8008228:	4619      	mov	r1, r3
 800822a:	2208      	movs	r2, #8
 800822c:	305c      	adds	r0, #92	@ 0x5c
 800822e:	f000 fa09 	bl	8008644 <memset>
 8008232:	4b0d      	ldr	r3, [pc, #52]	@ (8008268 <std+0x58>)
 8008234:	6224      	str	r4, [r4, #32]
 8008236:	6263      	str	r3, [r4, #36]	@ 0x24
 8008238:	4b0c      	ldr	r3, [pc, #48]	@ (800826c <std+0x5c>)
 800823a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800823c:	4b0c      	ldr	r3, [pc, #48]	@ (8008270 <std+0x60>)
 800823e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008240:	4b0c      	ldr	r3, [pc, #48]	@ (8008274 <std+0x64>)
 8008242:	6323      	str	r3, [r4, #48]	@ 0x30
 8008244:	4b0c      	ldr	r3, [pc, #48]	@ (8008278 <std+0x68>)
 8008246:	429c      	cmp	r4, r3
 8008248:	d006      	beq.n	8008258 <std+0x48>
 800824a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800824e:	4294      	cmp	r4, r2
 8008250:	d002      	beq.n	8008258 <std+0x48>
 8008252:	33d0      	adds	r3, #208	@ 0xd0
 8008254:	429c      	cmp	r4, r3
 8008256:	d105      	bne.n	8008264 <std+0x54>
 8008258:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800825c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008260:	f000 ba7c 	b.w	800875c <__retarget_lock_init_recursive>
 8008264:	bd10      	pop	{r4, pc}
 8008266:	bf00      	nop
 8008268:	08008495 	.word	0x08008495
 800826c:	080084b7 	.word	0x080084b7
 8008270:	080084ef 	.word	0x080084ef
 8008274:	08008513 	.word	0x08008513
 8008278:	20003fb8 	.word	0x20003fb8

0800827c <stdio_exit_handler>:
 800827c:	4a02      	ldr	r2, [pc, #8]	@ (8008288 <stdio_exit_handler+0xc>)
 800827e:	4903      	ldr	r1, [pc, #12]	@ (800828c <stdio_exit_handler+0x10>)
 8008280:	4803      	ldr	r0, [pc, #12]	@ (8008290 <stdio_exit_handler+0x14>)
 8008282:	f000 b869 	b.w	8008358 <_fwalk_sglue>
 8008286:	bf00      	nop
 8008288:	20000024 	.word	0x20000024
 800828c:	08009089 	.word	0x08009089
 8008290:	20000034 	.word	0x20000034

08008294 <cleanup_stdio>:
 8008294:	6841      	ldr	r1, [r0, #4]
 8008296:	4b0c      	ldr	r3, [pc, #48]	@ (80082c8 <cleanup_stdio+0x34>)
 8008298:	b510      	push	{r4, lr}
 800829a:	4299      	cmp	r1, r3
 800829c:	4604      	mov	r4, r0
 800829e:	d001      	beq.n	80082a4 <cleanup_stdio+0x10>
 80082a0:	f000 fef2 	bl	8009088 <_fflush_r>
 80082a4:	68a1      	ldr	r1, [r4, #8]
 80082a6:	4b09      	ldr	r3, [pc, #36]	@ (80082cc <cleanup_stdio+0x38>)
 80082a8:	4299      	cmp	r1, r3
 80082aa:	d002      	beq.n	80082b2 <cleanup_stdio+0x1e>
 80082ac:	4620      	mov	r0, r4
 80082ae:	f000 feeb 	bl	8009088 <_fflush_r>
 80082b2:	68e1      	ldr	r1, [r4, #12]
 80082b4:	4b06      	ldr	r3, [pc, #24]	@ (80082d0 <cleanup_stdio+0x3c>)
 80082b6:	4299      	cmp	r1, r3
 80082b8:	d004      	beq.n	80082c4 <cleanup_stdio+0x30>
 80082ba:	4620      	mov	r0, r4
 80082bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082c0:	f000 bee2 	b.w	8009088 <_fflush_r>
 80082c4:	bd10      	pop	{r4, pc}
 80082c6:	bf00      	nop
 80082c8:	20003fb8 	.word	0x20003fb8
 80082cc:	20004020 	.word	0x20004020
 80082d0:	20004088 	.word	0x20004088

080082d4 <global_stdio_init.part.0>:
 80082d4:	b510      	push	{r4, lr}
 80082d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008304 <global_stdio_init.part.0+0x30>)
 80082d8:	4c0b      	ldr	r4, [pc, #44]	@ (8008308 <global_stdio_init.part.0+0x34>)
 80082da:	4a0c      	ldr	r2, [pc, #48]	@ (800830c <global_stdio_init.part.0+0x38>)
 80082dc:	4620      	mov	r0, r4
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	2104      	movs	r1, #4
 80082e2:	2200      	movs	r2, #0
 80082e4:	f7ff ff94 	bl	8008210 <std>
 80082e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80082ec:	2201      	movs	r2, #1
 80082ee:	2109      	movs	r1, #9
 80082f0:	f7ff ff8e 	bl	8008210 <std>
 80082f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80082f8:	2202      	movs	r2, #2
 80082fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082fe:	2112      	movs	r1, #18
 8008300:	f7ff bf86 	b.w	8008210 <std>
 8008304:	200040f0 	.word	0x200040f0
 8008308:	20003fb8 	.word	0x20003fb8
 800830c:	0800827d 	.word	0x0800827d

08008310 <__sfp_lock_acquire>:
 8008310:	4801      	ldr	r0, [pc, #4]	@ (8008318 <__sfp_lock_acquire+0x8>)
 8008312:	f000 ba24 	b.w	800875e <__retarget_lock_acquire_recursive>
 8008316:	bf00      	nop
 8008318:	200040f9 	.word	0x200040f9

0800831c <__sfp_lock_release>:
 800831c:	4801      	ldr	r0, [pc, #4]	@ (8008324 <__sfp_lock_release+0x8>)
 800831e:	f000 ba1f 	b.w	8008760 <__retarget_lock_release_recursive>
 8008322:	bf00      	nop
 8008324:	200040f9 	.word	0x200040f9

08008328 <__sinit>:
 8008328:	b510      	push	{r4, lr}
 800832a:	4604      	mov	r4, r0
 800832c:	f7ff fff0 	bl	8008310 <__sfp_lock_acquire>
 8008330:	6a23      	ldr	r3, [r4, #32]
 8008332:	b11b      	cbz	r3, 800833c <__sinit+0x14>
 8008334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008338:	f7ff bff0 	b.w	800831c <__sfp_lock_release>
 800833c:	4b04      	ldr	r3, [pc, #16]	@ (8008350 <__sinit+0x28>)
 800833e:	6223      	str	r3, [r4, #32]
 8008340:	4b04      	ldr	r3, [pc, #16]	@ (8008354 <__sinit+0x2c>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1f5      	bne.n	8008334 <__sinit+0xc>
 8008348:	f7ff ffc4 	bl	80082d4 <global_stdio_init.part.0>
 800834c:	e7f2      	b.n	8008334 <__sinit+0xc>
 800834e:	bf00      	nop
 8008350:	08008295 	.word	0x08008295
 8008354:	200040f0 	.word	0x200040f0

08008358 <_fwalk_sglue>:
 8008358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800835c:	4607      	mov	r7, r0
 800835e:	4688      	mov	r8, r1
 8008360:	4614      	mov	r4, r2
 8008362:	2600      	movs	r6, #0
 8008364:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008368:	f1b9 0901 	subs.w	r9, r9, #1
 800836c:	d505      	bpl.n	800837a <_fwalk_sglue+0x22>
 800836e:	6824      	ldr	r4, [r4, #0]
 8008370:	2c00      	cmp	r4, #0
 8008372:	d1f7      	bne.n	8008364 <_fwalk_sglue+0xc>
 8008374:	4630      	mov	r0, r6
 8008376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800837a:	89ab      	ldrh	r3, [r5, #12]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d907      	bls.n	8008390 <_fwalk_sglue+0x38>
 8008380:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008384:	3301      	adds	r3, #1
 8008386:	d003      	beq.n	8008390 <_fwalk_sglue+0x38>
 8008388:	4629      	mov	r1, r5
 800838a:	4638      	mov	r0, r7
 800838c:	47c0      	blx	r8
 800838e:	4306      	orrs	r6, r0
 8008390:	3568      	adds	r5, #104	@ 0x68
 8008392:	e7e9      	b.n	8008368 <_fwalk_sglue+0x10>

08008394 <_puts_r>:
 8008394:	6a03      	ldr	r3, [r0, #32]
 8008396:	b570      	push	{r4, r5, r6, lr}
 8008398:	4605      	mov	r5, r0
 800839a:	460e      	mov	r6, r1
 800839c:	6884      	ldr	r4, [r0, #8]
 800839e:	b90b      	cbnz	r3, 80083a4 <_puts_r+0x10>
 80083a0:	f7ff ffc2 	bl	8008328 <__sinit>
 80083a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083a6:	07db      	lsls	r3, r3, #31
 80083a8:	d405      	bmi.n	80083b6 <_puts_r+0x22>
 80083aa:	89a3      	ldrh	r3, [r4, #12]
 80083ac:	0598      	lsls	r0, r3, #22
 80083ae:	d402      	bmi.n	80083b6 <_puts_r+0x22>
 80083b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083b2:	f000 f9d4 	bl	800875e <__retarget_lock_acquire_recursive>
 80083b6:	89a3      	ldrh	r3, [r4, #12]
 80083b8:	0719      	lsls	r1, r3, #28
 80083ba:	d502      	bpl.n	80083c2 <_puts_r+0x2e>
 80083bc:	6923      	ldr	r3, [r4, #16]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d135      	bne.n	800842e <_puts_r+0x9a>
 80083c2:	4621      	mov	r1, r4
 80083c4:	4628      	mov	r0, r5
 80083c6:	f000 f8e7 	bl	8008598 <__swsetup_r>
 80083ca:	b380      	cbz	r0, 800842e <_puts_r+0x9a>
 80083cc:	f04f 35ff 	mov.w	r5, #4294967295
 80083d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083d2:	07da      	lsls	r2, r3, #31
 80083d4:	d405      	bmi.n	80083e2 <_puts_r+0x4e>
 80083d6:	89a3      	ldrh	r3, [r4, #12]
 80083d8:	059b      	lsls	r3, r3, #22
 80083da:	d402      	bmi.n	80083e2 <_puts_r+0x4e>
 80083dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083de:	f000 f9bf 	bl	8008760 <__retarget_lock_release_recursive>
 80083e2:	4628      	mov	r0, r5
 80083e4:	bd70      	pop	{r4, r5, r6, pc}
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	da04      	bge.n	80083f4 <_puts_r+0x60>
 80083ea:	69a2      	ldr	r2, [r4, #24]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	dc17      	bgt.n	8008420 <_puts_r+0x8c>
 80083f0:	290a      	cmp	r1, #10
 80083f2:	d015      	beq.n	8008420 <_puts_r+0x8c>
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	1c5a      	adds	r2, r3, #1
 80083f8:	6022      	str	r2, [r4, #0]
 80083fa:	7019      	strb	r1, [r3, #0]
 80083fc:	68a3      	ldr	r3, [r4, #8]
 80083fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008402:	3b01      	subs	r3, #1
 8008404:	60a3      	str	r3, [r4, #8]
 8008406:	2900      	cmp	r1, #0
 8008408:	d1ed      	bne.n	80083e6 <_puts_r+0x52>
 800840a:	2b00      	cmp	r3, #0
 800840c:	da11      	bge.n	8008432 <_puts_r+0x9e>
 800840e:	4622      	mov	r2, r4
 8008410:	210a      	movs	r1, #10
 8008412:	4628      	mov	r0, r5
 8008414:	f000 f881 	bl	800851a <__swbuf_r>
 8008418:	3001      	adds	r0, #1
 800841a:	d0d7      	beq.n	80083cc <_puts_r+0x38>
 800841c:	250a      	movs	r5, #10
 800841e:	e7d7      	b.n	80083d0 <_puts_r+0x3c>
 8008420:	4622      	mov	r2, r4
 8008422:	4628      	mov	r0, r5
 8008424:	f000 f879 	bl	800851a <__swbuf_r>
 8008428:	3001      	adds	r0, #1
 800842a:	d1e7      	bne.n	80083fc <_puts_r+0x68>
 800842c:	e7ce      	b.n	80083cc <_puts_r+0x38>
 800842e:	3e01      	subs	r6, #1
 8008430:	e7e4      	b.n	80083fc <_puts_r+0x68>
 8008432:	6823      	ldr	r3, [r4, #0]
 8008434:	1c5a      	adds	r2, r3, #1
 8008436:	6022      	str	r2, [r4, #0]
 8008438:	220a      	movs	r2, #10
 800843a:	701a      	strb	r2, [r3, #0]
 800843c:	e7ee      	b.n	800841c <_puts_r+0x88>
	...

08008440 <puts>:
 8008440:	4b02      	ldr	r3, [pc, #8]	@ (800844c <puts+0xc>)
 8008442:	4601      	mov	r1, r0
 8008444:	6818      	ldr	r0, [r3, #0]
 8008446:	f7ff bfa5 	b.w	8008394 <_puts_r>
 800844a:	bf00      	nop
 800844c:	20000030 	.word	0x20000030

08008450 <siprintf>:
 8008450:	b40e      	push	{r1, r2, r3}
 8008452:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008456:	b510      	push	{r4, lr}
 8008458:	2400      	movs	r4, #0
 800845a:	b09d      	sub	sp, #116	@ 0x74
 800845c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800845e:	9002      	str	r0, [sp, #8]
 8008460:	9006      	str	r0, [sp, #24]
 8008462:	9107      	str	r1, [sp, #28]
 8008464:	9104      	str	r1, [sp, #16]
 8008466:	4809      	ldr	r0, [pc, #36]	@ (800848c <siprintf+0x3c>)
 8008468:	4909      	ldr	r1, [pc, #36]	@ (8008490 <siprintf+0x40>)
 800846a:	f853 2b04 	ldr.w	r2, [r3], #4
 800846e:	9105      	str	r1, [sp, #20]
 8008470:	6800      	ldr	r0, [r0, #0]
 8008472:	a902      	add	r1, sp, #8
 8008474:	9301      	str	r3, [sp, #4]
 8008476:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008478:	f000 fafa 	bl	8008a70 <_svfiprintf_r>
 800847c:	9b02      	ldr	r3, [sp, #8]
 800847e:	701c      	strb	r4, [r3, #0]
 8008480:	b01d      	add	sp, #116	@ 0x74
 8008482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008486:	b003      	add	sp, #12
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	20000030 	.word	0x20000030
 8008490:	ffff0208 	.word	0xffff0208

08008494 <__sread>:
 8008494:	b510      	push	{r4, lr}
 8008496:	460c      	mov	r4, r1
 8008498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800849c:	f000 f910 	bl	80086c0 <_read_r>
 80084a0:	2800      	cmp	r0, #0
 80084a2:	bfab      	itete	ge
 80084a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80084a6:	89a3      	ldrhlt	r3, [r4, #12]
 80084a8:	181b      	addge	r3, r3, r0
 80084aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80084ae:	bfac      	ite	ge
 80084b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80084b2:	81a3      	strhlt	r3, [r4, #12]
 80084b4:	bd10      	pop	{r4, pc}

080084b6 <__swrite>:
 80084b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084ba:	461f      	mov	r7, r3
 80084bc:	898b      	ldrh	r3, [r1, #12]
 80084be:	4605      	mov	r5, r0
 80084c0:	05db      	lsls	r3, r3, #23
 80084c2:	460c      	mov	r4, r1
 80084c4:	4616      	mov	r6, r2
 80084c6:	d505      	bpl.n	80084d4 <__swrite+0x1e>
 80084c8:	2302      	movs	r3, #2
 80084ca:	2200      	movs	r2, #0
 80084cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084d0:	f000 f8e4 	bl	800869c <_lseek_r>
 80084d4:	89a3      	ldrh	r3, [r4, #12]
 80084d6:	4632      	mov	r2, r6
 80084d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084dc:	81a3      	strh	r3, [r4, #12]
 80084de:	4628      	mov	r0, r5
 80084e0:	463b      	mov	r3, r7
 80084e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084ea:	f000 b8fb 	b.w	80086e4 <_write_r>

080084ee <__sseek>:
 80084ee:	b510      	push	{r4, lr}
 80084f0:	460c      	mov	r4, r1
 80084f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084f6:	f000 f8d1 	bl	800869c <_lseek_r>
 80084fa:	1c43      	adds	r3, r0, #1
 80084fc:	89a3      	ldrh	r3, [r4, #12]
 80084fe:	bf15      	itete	ne
 8008500:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008502:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008506:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800850a:	81a3      	strheq	r3, [r4, #12]
 800850c:	bf18      	it	ne
 800850e:	81a3      	strhne	r3, [r4, #12]
 8008510:	bd10      	pop	{r4, pc}

08008512 <__sclose>:
 8008512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008516:	f000 b8b1 	b.w	800867c <_close_r>

0800851a <__swbuf_r>:
 800851a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851c:	460e      	mov	r6, r1
 800851e:	4614      	mov	r4, r2
 8008520:	4605      	mov	r5, r0
 8008522:	b118      	cbz	r0, 800852c <__swbuf_r+0x12>
 8008524:	6a03      	ldr	r3, [r0, #32]
 8008526:	b90b      	cbnz	r3, 800852c <__swbuf_r+0x12>
 8008528:	f7ff fefe 	bl	8008328 <__sinit>
 800852c:	69a3      	ldr	r3, [r4, #24]
 800852e:	60a3      	str	r3, [r4, #8]
 8008530:	89a3      	ldrh	r3, [r4, #12]
 8008532:	071a      	lsls	r2, r3, #28
 8008534:	d501      	bpl.n	800853a <__swbuf_r+0x20>
 8008536:	6923      	ldr	r3, [r4, #16]
 8008538:	b943      	cbnz	r3, 800854c <__swbuf_r+0x32>
 800853a:	4621      	mov	r1, r4
 800853c:	4628      	mov	r0, r5
 800853e:	f000 f82b 	bl	8008598 <__swsetup_r>
 8008542:	b118      	cbz	r0, 800854c <__swbuf_r+0x32>
 8008544:	f04f 37ff 	mov.w	r7, #4294967295
 8008548:	4638      	mov	r0, r7
 800854a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800854c:	6823      	ldr	r3, [r4, #0]
 800854e:	6922      	ldr	r2, [r4, #16]
 8008550:	b2f6      	uxtb	r6, r6
 8008552:	1a98      	subs	r0, r3, r2
 8008554:	6963      	ldr	r3, [r4, #20]
 8008556:	4637      	mov	r7, r6
 8008558:	4283      	cmp	r3, r0
 800855a:	dc05      	bgt.n	8008568 <__swbuf_r+0x4e>
 800855c:	4621      	mov	r1, r4
 800855e:	4628      	mov	r0, r5
 8008560:	f000 fd92 	bl	8009088 <_fflush_r>
 8008564:	2800      	cmp	r0, #0
 8008566:	d1ed      	bne.n	8008544 <__swbuf_r+0x2a>
 8008568:	68a3      	ldr	r3, [r4, #8]
 800856a:	3b01      	subs	r3, #1
 800856c:	60a3      	str	r3, [r4, #8]
 800856e:	6823      	ldr	r3, [r4, #0]
 8008570:	1c5a      	adds	r2, r3, #1
 8008572:	6022      	str	r2, [r4, #0]
 8008574:	701e      	strb	r6, [r3, #0]
 8008576:	6962      	ldr	r2, [r4, #20]
 8008578:	1c43      	adds	r3, r0, #1
 800857a:	429a      	cmp	r2, r3
 800857c:	d004      	beq.n	8008588 <__swbuf_r+0x6e>
 800857e:	89a3      	ldrh	r3, [r4, #12]
 8008580:	07db      	lsls	r3, r3, #31
 8008582:	d5e1      	bpl.n	8008548 <__swbuf_r+0x2e>
 8008584:	2e0a      	cmp	r6, #10
 8008586:	d1df      	bne.n	8008548 <__swbuf_r+0x2e>
 8008588:	4621      	mov	r1, r4
 800858a:	4628      	mov	r0, r5
 800858c:	f000 fd7c 	bl	8009088 <_fflush_r>
 8008590:	2800      	cmp	r0, #0
 8008592:	d0d9      	beq.n	8008548 <__swbuf_r+0x2e>
 8008594:	e7d6      	b.n	8008544 <__swbuf_r+0x2a>
	...

08008598 <__swsetup_r>:
 8008598:	b538      	push	{r3, r4, r5, lr}
 800859a:	4b29      	ldr	r3, [pc, #164]	@ (8008640 <__swsetup_r+0xa8>)
 800859c:	4605      	mov	r5, r0
 800859e:	6818      	ldr	r0, [r3, #0]
 80085a0:	460c      	mov	r4, r1
 80085a2:	b118      	cbz	r0, 80085ac <__swsetup_r+0x14>
 80085a4:	6a03      	ldr	r3, [r0, #32]
 80085a6:	b90b      	cbnz	r3, 80085ac <__swsetup_r+0x14>
 80085a8:	f7ff febe 	bl	8008328 <__sinit>
 80085ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085b0:	0719      	lsls	r1, r3, #28
 80085b2:	d422      	bmi.n	80085fa <__swsetup_r+0x62>
 80085b4:	06da      	lsls	r2, r3, #27
 80085b6:	d407      	bmi.n	80085c8 <__swsetup_r+0x30>
 80085b8:	2209      	movs	r2, #9
 80085ba:	602a      	str	r2, [r5, #0]
 80085bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085c0:	f04f 30ff 	mov.w	r0, #4294967295
 80085c4:	81a3      	strh	r3, [r4, #12]
 80085c6:	e033      	b.n	8008630 <__swsetup_r+0x98>
 80085c8:	0758      	lsls	r0, r3, #29
 80085ca:	d512      	bpl.n	80085f2 <__swsetup_r+0x5a>
 80085cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085ce:	b141      	cbz	r1, 80085e2 <__swsetup_r+0x4a>
 80085d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085d4:	4299      	cmp	r1, r3
 80085d6:	d002      	beq.n	80085de <__swsetup_r+0x46>
 80085d8:	4628      	mov	r0, r5
 80085da:	f000 f8ef 	bl	80087bc <_free_r>
 80085de:	2300      	movs	r3, #0
 80085e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80085e2:	89a3      	ldrh	r3, [r4, #12]
 80085e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80085e8:	81a3      	strh	r3, [r4, #12]
 80085ea:	2300      	movs	r3, #0
 80085ec:	6063      	str	r3, [r4, #4]
 80085ee:	6923      	ldr	r3, [r4, #16]
 80085f0:	6023      	str	r3, [r4, #0]
 80085f2:	89a3      	ldrh	r3, [r4, #12]
 80085f4:	f043 0308 	orr.w	r3, r3, #8
 80085f8:	81a3      	strh	r3, [r4, #12]
 80085fa:	6923      	ldr	r3, [r4, #16]
 80085fc:	b94b      	cbnz	r3, 8008612 <__swsetup_r+0x7a>
 80085fe:	89a3      	ldrh	r3, [r4, #12]
 8008600:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008608:	d003      	beq.n	8008612 <__swsetup_r+0x7a>
 800860a:	4621      	mov	r1, r4
 800860c:	4628      	mov	r0, r5
 800860e:	f000 fd9a 	bl	8009146 <__smakebuf_r>
 8008612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008616:	f013 0201 	ands.w	r2, r3, #1
 800861a:	d00a      	beq.n	8008632 <__swsetup_r+0x9a>
 800861c:	2200      	movs	r2, #0
 800861e:	60a2      	str	r2, [r4, #8]
 8008620:	6962      	ldr	r2, [r4, #20]
 8008622:	4252      	negs	r2, r2
 8008624:	61a2      	str	r2, [r4, #24]
 8008626:	6922      	ldr	r2, [r4, #16]
 8008628:	b942      	cbnz	r2, 800863c <__swsetup_r+0xa4>
 800862a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800862e:	d1c5      	bne.n	80085bc <__swsetup_r+0x24>
 8008630:	bd38      	pop	{r3, r4, r5, pc}
 8008632:	0799      	lsls	r1, r3, #30
 8008634:	bf58      	it	pl
 8008636:	6962      	ldrpl	r2, [r4, #20]
 8008638:	60a2      	str	r2, [r4, #8]
 800863a:	e7f4      	b.n	8008626 <__swsetup_r+0x8e>
 800863c:	2000      	movs	r0, #0
 800863e:	e7f7      	b.n	8008630 <__swsetup_r+0x98>
 8008640:	20000030 	.word	0x20000030

08008644 <memset>:
 8008644:	4603      	mov	r3, r0
 8008646:	4402      	add	r2, r0
 8008648:	4293      	cmp	r3, r2
 800864a:	d100      	bne.n	800864e <memset+0xa>
 800864c:	4770      	bx	lr
 800864e:	f803 1b01 	strb.w	r1, [r3], #1
 8008652:	e7f9      	b.n	8008648 <memset+0x4>

08008654 <strncpy>:
 8008654:	4603      	mov	r3, r0
 8008656:	b510      	push	{r4, lr}
 8008658:	3901      	subs	r1, #1
 800865a:	b132      	cbz	r2, 800866a <strncpy+0x16>
 800865c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008660:	3a01      	subs	r2, #1
 8008662:	f803 4b01 	strb.w	r4, [r3], #1
 8008666:	2c00      	cmp	r4, #0
 8008668:	d1f7      	bne.n	800865a <strncpy+0x6>
 800866a:	2100      	movs	r1, #0
 800866c:	441a      	add	r2, r3
 800866e:	4293      	cmp	r3, r2
 8008670:	d100      	bne.n	8008674 <strncpy+0x20>
 8008672:	bd10      	pop	{r4, pc}
 8008674:	f803 1b01 	strb.w	r1, [r3], #1
 8008678:	e7f9      	b.n	800866e <strncpy+0x1a>
	...

0800867c <_close_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	2300      	movs	r3, #0
 8008680:	4d05      	ldr	r5, [pc, #20]	@ (8008698 <_close_r+0x1c>)
 8008682:	4604      	mov	r4, r0
 8008684:	4608      	mov	r0, r1
 8008686:	602b      	str	r3, [r5, #0]
 8008688:	f7fc feb3 	bl	80053f2 <_close>
 800868c:	1c43      	adds	r3, r0, #1
 800868e:	d102      	bne.n	8008696 <_close_r+0x1a>
 8008690:	682b      	ldr	r3, [r5, #0]
 8008692:	b103      	cbz	r3, 8008696 <_close_r+0x1a>
 8008694:	6023      	str	r3, [r4, #0]
 8008696:	bd38      	pop	{r3, r4, r5, pc}
 8008698:	200040f4 	.word	0x200040f4

0800869c <_lseek_r>:
 800869c:	b538      	push	{r3, r4, r5, lr}
 800869e:	4604      	mov	r4, r0
 80086a0:	4608      	mov	r0, r1
 80086a2:	4611      	mov	r1, r2
 80086a4:	2200      	movs	r2, #0
 80086a6:	4d05      	ldr	r5, [pc, #20]	@ (80086bc <_lseek_r+0x20>)
 80086a8:	602a      	str	r2, [r5, #0]
 80086aa:	461a      	mov	r2, r3
 80086ac:	f7fc fec5 	bl	800543a <_lseek>
 80086b0:	1c43      	adds	r3, r0, #1
 80086b2:	d102      	bne.n	80086ba <_lseek_r+0x1e>
 80086b4:	682b      	ldr	r3, [r5, #0]
 80086b6:	b103      	cbz	r3, 80086ba <_lseek_r+0x1e>
 80086b8:	6023      	str	r3, [r4, #0]
 80086ba:	bd38      	pop	{r3, r4, r5, pc}
 80086bc:	200040f4 	.word	0x200040f4

080086c0 <_read_r>:
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	4604      	mov	r4, r0
 80086c4:	4608      	mov	r0, r1
 80086c6:	4611      	mov	r1, r2
 80086c8:	2200      	movs	r2, #0
 80086ca:	4d05      	ldr	r5, [pc, #20]	@ (80086e0 <_read_r+0x20>)
 80086cc:	602a      	str	r2, [r5, #0]
 80086ce:	461a      	mov	r2, r3
 80086d0:	f7fc fe56 	bl	8005380 <_read>
 80086d4:	1c43      	adds	r3, r0, #1
 80086d6:	d102      	bne.n	80086de <_read_r+0x1e>
 80086d8:	682b      	ldr	r3, [r5, #0]
 80086da:	b103      	cbz	r3, 80086de <_read_r+0x1e>
 80086dc:	6023      	str	r3, [r4, #0]
 80086de:	bd38      	pop	{r3, r4, r5, pc}
 80086e0:	200040f4 	.word	0x200040f4

080086e4 <_write_r>:
 80086e4:	b538      	push	{r3, r4, r5, lr}
 80086e6:	4604      	mov	r4, r0
 80086e8:	4608      	mov	r0, r1
 80086ea:	4611      	mov	r1, r2
 80086ec:	2200      	movs	r2, #0
 80086ee:	4d05      	ldr	r5, [pc, #20]	@ (8008704 <_write_r+0x20>)
 80086f0:	602a      	str	r2, [r5, #0]
 80086f2:	461a      	mov	r2, r3
 80086f4:	f7fc fe61 	bl	80053ba <_write>
 80086f8:	1c43      	adds	r3, r0, #1
 80086fa:	d102      	bne.n	8008702 <_write_r+0x1e>
 80086fc:	682b      	ldr	r3, [r5, #0]
 80086fe:	b103      	cbz	r3, 8008702 <_write_r+0x1e>
 8008700:	6023      	str	r3, [r4, #0]
 8008702:	bd38      	pop	{r3, r4, r5, pc}
 8008704:	200040f4 	.word	0x200040f4

08008708 <__errno>:
 8008708:	4b01      	ldr	r3, [pc, #4]	@ (8008710 <__errno+0x8>)
 800870a:	6818      	ldr	r0, [r3, #0]
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	20000030 	.word	0x20000030

08008714 <__libc_init_array>:
 8008714:	b570      	push	{r4, r5, r6, lr}
 8008716:	2600      	movs	r6, #0
 8008718:	4d0c      	ldr	r5, [pc, #48]	@ (800874c <__libc_init_array+0x38>)
 800871a:	4c0d      	ldr	r4, [pc, #52]	@ (8008750 <__libc_init_array+0x3c>)
 800871c:	1b64      	subs	r4, r4, r5
 800871e:	10a4      	asrs	r4, r4, #2
 8008720:	42a6      	cmp	r6, r4
 8008722:	d109      	bne.n	8008738 <__libc_init_array+0x24>
 8008724:	f002 f9c2 	bl	800aaac <_init>
 8008728:	2600      	movs	r6, #0
 800872a:	4d0a      	ldr	r5, [pc, #40]	@ (8008754 <__libc_init_array+0x40>)
 800872c:	4c0a      	ldr	r4, [pc, #40]	@ (8008758 <__libc_init_array+0x44>)
 800872e:	1b64      	subs	r4, r4, r5
 8008730:	10a4      	asrs	r4, r4, #2
 8008732:	42a6      	cmp	r6, r4
 8008734:	d105      	bne.n	8008742 <__libc_init_array+0x2e>
 8008736:	bd70      	pop	{r4, r5, r6, pc}
 8008738:	f855 3b04 	ldr.w	r3, [r5], #4
 800873c:	4798      	blx	r3
 800873e:	3601      	adds	r6, #1
 8008740:	e7ee      	b.n	8008720 <__libc_init_array+0xc>
 8008742:	f855 3b04 	ldr.w	r3, [r5], #4
 8008746:	4798      	blx	r3
 8008748:	3601      	adds	r6, #1
 800874a:	e7f2      	b.n	8008732 <__libc_init_array+0x1e>
 800874c:	0800b400 	.word	0x0800b400
 8008750:	0800b400 	.word	0x0800b400
 8008754:	0800b400 	.word	0x0800b400
 8008758:	0800b404 	.word	0x0800b404

0800875c <__retarget_lock_init_recursive>:
 800875c:	4770      	bx	lr

0800875e <__retarget_lock_acquire_recursive>:
 800875e:	4770      	bx	lr

08008760 <__retarget_lock_release_recursive>:
 8008760:	4770      	bx	lr

08008762 <memcpy>:
 8008762:	440a      	add	r2, r1
 8008764:	4291      	cmp	r1, r2
 8008766:	f100 33ff 	add.w	r3, r0, #4294967295
 800876a:	d100      	bne.n	800876e <memcpy+0xc>
 800876c:	4770      	bx	lr
 800876e:	b510      	push	{r4, lr}
 8008770:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008774:	4291      	cmp	r1, r2
 8008776:	f803 4f01 	strb.w	r4, [r3, #1]!
 800877a:	d1f9      	bne.n	8008770 <memcpy+0xe>
 800877c:	bd10      	pop	{r4, pc}
	...

08008780 <__assert_func>:
 8008780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008782:	4614      	mov	r4, r2
 8008784:	461a      	mov	r2, r3
 8008786:	4b09      	ldr	r3, [pc, #36]	@ (80087ac <__assert_func+0x2c>)
 8008788:	4605      	mov	r5, r0
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68d8      	ldr	r0, [r3, #12]
 800878e:	b14c      	cbz	r4, 80087a4 <__assert_func+0x24>
 8008790:	4b07      	ldr	r3, [pc, #28]	@ (80087b0 <__assert_func+0x30>)
 8008792:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008796:	9100      	str	r1, [sp, #0]
 8008798:	462b      	mov	r3, r5
 800879a:	4906      	ldr	r1, [pc, #24]	@ (80087b4 <__assert_func+0x34>)
 800879c:	f000 fc9c 	bl	80090d8 <fiprintf>
 80087a0:	f000 fd68 	bl	8009274 <abort>
 80087a4:	4b04      	ldr	r3, [pc, #16]	@ (80087b8 <__assert_func+0x38>)
 80087a6:	461c      	mov	r4, r3
 80087a8:	e7f3      	b.n	8008792 <__assert_func+0x12>
 80087aa:	bf00      	nop
 80087ac:	20000030 	.word	0x20000030
 80087b0:	0800af99 	.word	0x0800af99
 80087b4:	0800afa6 	.word	0x0800afa6
 80087b8:	0800afd4 	.word	0x0800afd4

080087bc <_free_r>:
 80087bc:	b538      	push	{r3, r4, r5, lr}
 80087be:	4605      	mov	r5, r0
 80087c0:	2900      	cmp	r1, #0
 80087c2:	d040      	beq.n	8008846 <_free_r+0x8a>
 80087c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087c8:	1f0c      	subs	r4, r1, #4
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	bfb8      	it	lt
 80087ce:	18e4      	addlt	r4, r4, r3
 80087d0:	f000 f8e6 	bl	80089a0 <__malloc_lock>
 80087d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008848 <_free_r+0x8c>)
 80087d6:	6813      	ldr	r3, [r2, #0]
 80087d8:	b933      	cbnz	r3, 80087e8 <_free_r+0x2c>
 80087da:	6063      	str	r3, [r4, #4]
 80087dc:	6014      	str	r4, [r2, #0]
 80087de:	4628      	mov	r0, r5
 80087e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087e4:	f000 b8e2 	b.w	80089ac <__malloc_unlock>
 80087e8:	42a3      	cmp	r3, r4
 80087ea:	d908      	bls.n	80087fe <_free_r+0x42>
 80087ec:	6820      	ldr	r0, [r4, #0]
 80087ee:	1821      	adds	r1, r4, r0
 80087f0:	428b      	cmp	r3, r1
 80087f2:	bf01      	itttt	eq
 80087f4:	6819      	ldreq	r1, [r3, #0]
 80087f6:	685b      	ldreq	r3, [r3, #4]
 80087f8:	1809      	addeq	r1, r1, r0
 80087fa:	6021      	streq	r1, [r4, #0]
 80087fc:	e7ed      	b.n	80087da <_free_r+0x1e>
 80087fe:	461a      	mov	r2, r3
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	b10b      	cbz	r3, 8008808 <_free_r+0x4c>
 8008804:	42a3      	cmp	r3, r4
 8008806:	d9fa      	bls.n	80087fe <_free_r+0x42>
 8008808:	6811      	ldr	r1, [r2, #0]
 800880a:	1850      	adds	r0, r2, r1
 800880c:	42a0      	cmp	r0, r4
 800880e:	d10b      	bne.n	8008828 <_free_r+0x6c>
 8008810:	6820      	ldr	r0, [r4, #0]
 8008812:	4401      	add	r1, r0
 8008814:	1850      	adds	r0, r2, r1
 8008816:	4283      	cmp	r3, r0
 8008818:	6011      	str	r1, [r2, #0]
 800881a:	d1e0      	bne.n	80087de <_free_r+0x22>
 800881c:	6818      	ldr	r0, [r3, #0]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	4408      	add	r0, r1
 8008822:	6010      	str	r0, [r2, #0]
 8008824:	6053      	str	r3, [r2, #4]
 8008826:	e7da      	b.n	80087de <_free_r+0x22>
 8008828:	d902      	bls.n	8008830 <_free_r+0x74>
 800882a:	230c      	movs	r3, #12
 800882c:	602b      	str	r3, [r5, #0]
 800882e:	e7d6      	b.n	80087de <_free_r+0x22>
 8008830:	6820      	ldr	r0, [r4, #0]
 8008832:	1821      	adds	r1, r4, r0
 8008834:	428b      	cmp	r3, r1
 8008836:	bf01      	itttt	eq
 8008838:	6819      	ldreq	r1, [r3, #0]
 800883a:	685b      	ldreq	r3, [r3, #4]
 800883c:	1809      	addeq	r1, r1, r0
 800883e:	6021      	streq	r1, [r4, #0]
 8008840:	6063      	str	r3, [r4, #4]
 8008842:	6054      	str	r4, [r2, #4]
 8008844:	e7cb      	b.n	80087de <_free_r+0x22>
 8008846:	bd38      	pop	{r3, r4, r5, pc}
 8008848:	20004100 	.word	0x20004100

0800884c <malloc>:
 800884c:	4b02      	ldr	r3, [pc, #8]	@ (8008858 <malloc+0xc>)
 800884e:	4601      	mov	r1, r0
 8008850:	6818      	ldr	r0, [r3, #0]
 8008852:	f000 b825 	b.w	80088a0 <_malloc_r>
 8008856:	bf00      	nop
 8008858:	20000030 	.word	0x20000030

0800885c <sbrk_aligned>:
 800885c:	b570      	push	{r4, r5, r6, lr}
 800885e:	4e0f      	ldr	r6, [pc, #60]	@ (800889c <sbrk_aligned+0x40>)
 8008860:	460c      	mov	r4, r1
 8008862:	6831      	ldr	r1, [r6, #0]
 8008864:	4605      	mov	r5, r0
 8008866:	b911      	cbnz	r1, 800886e <sbrk_aligned+0x12>
 8008868:	f000 fce6 	bl	8009238 <_sbrk_r>
 800886c:	6030      	str	r0, [r6, #0]
 800886e:	4621      	mov	r1, r4
 8008870:	4628      	mov	r0, r5
 8008872:	f000 fce1 	bl	8009238 <_sbrk_r>
 8008876:	1c43      	adds	r3, r0, #1
 8008878:	d103      	bne.n	8008882 <sbrk_aligned+0x26>
 800887a:	f04f 34ff 	mov.w	r4, #4294967295
 800887e:	4620      	mov	r0, r4
 8008880:	bd70      	pop	{r4, r5, r6, pc}
 8008882:	1cc4      	adds	r4, r0, #3
 8008884:	f024 0403 	bic.w	r4, r4, #3
 8008888:	42a0      	cmp	r0, r4
 800888a:	d0f8      	beq.n	800887e <sbrk_aligned+0x22>
 800888c:	1a21      	subs	r1, r4, r0
 800888e:	4628      	mov	r0, r5
 8008890:	f000 fcd2 	bl	8009238 <_sbrk_r>
 8008894:	3001      	adds	r0, #1
 8008896:	d1f2      	bne.n	800887e <sbrk_aligned+0x22>
 8008898:	e7ef      	b.n	800887a <sbrk_aligned+0x1e>
 800889a:	bf00      	nop
 800889c:	200040fc 	.word	0x200040fc

080088a0 <_malloc_r>:
 80088a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088a4:	1ccd      	adds	r5, r1, #3
 80088a6:	f025 0503 	bic.w	r5, r5, #3
 80088aa:	3508      	adds	r5, #8
 80088ac:	2d0c      	cmp	r5, #12
 80088ae:	bf38      	it	cc
 80088b0:	250c      	movcc	r5, #12
 80088b2:	2d00      	cmp	r5, #0
 80088b4:	4606      	mov	r6, r0
 80088b6:	db01      	blt.n	80088bc <_malloc_r+0x1c>
 80088b8:	42a9      	cmp	r1, r5
 80088ba:	d904      	bls.n	80088c6 <_malloc_r+0x26>
 80088bc:	230c      	movs	r3, #12
 80088be:	6033      	str	r3, [r6, #0]
 80088c0:	2000      	movs	r0, #0
 80088c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800899c <_malloc_r+0xfc>
 80088ca:	f000 f869 	bl	80089a0 <__malloc_lock>
 80088ce:	f8d8 3000 	ldr.w	r3, [r8]
 80088d2:	461c      	mov	r4, r3
 80088d4:	bb44      	cbnz	r4, 8008928 <_malloc_r+0x88>
 80088d6:	4629      	mov	r1, r5
 80088d8:	4630      	mov	r0, r6
 80088da:	f7ff ffbf 	bl	800885c <sbrk_aligned>
 80088de:	1c43      	adds	r3, r0, #1
 80088e0:	4604      	mov	r4, r0
 80088e2:	d158      	bne.n	8008996 <_malloc_r+0xf6>
 80088e4:	f8d8 4000 	ldr.w	r4, [r8]
 80088e8:	4627      	mov	r7, r4
 80088ea:	2f00      	cmp	r7, #0
 80088ec:	d143      	bne.n	8008976 <_malloc_r+0xd6>
 80088ee:	2c00      	cmp	r4, #0
 80088f0:	d04b      	beq.n	800898a <_malloc_r+0xea>
 80088f2:	6823      	ldr	r3, [r4, #0]
 80088f4:	4639      	mov	r1, r7
 80088f6:	4630      	mov	r0, r6
 80088f8:	eb04 0903 	add.w	r9, r4, r3
 80088fc:	f000 fc9c 	bl	8009238 <_sbrk_r>
 8008900:	4581      	cmp	r9, r0
 8008902:	d142      	bne.n	800898a <_malloc_r+0xea>
 8008904:	6821      	ldr	r1, [r4, #0]
 8008906:	4630      	mov	r0, r6
 8008908:	1a6d      	subs	r5, r5, r1
 800890a:	4629      	mov	r1, r5
 800890c:	f7ff ffa6 	bl	800885c <sbrk_aligned>
 8008910:	3001      	adds	r0, #1
 8008912:	d03a      	beq.n	800898a <_malloc_r+0xea>
 8008914:	6823      	ldr	r3, [r4, #0]
 8008916:	442b      	add	r3, r5
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	f8d8 3000 	ldr.w	r3, [r8]
 800891e:	685a      	ldr	r2, [r3, #4]
 8008920:	bb62      	cbnz	r2, 800897c <_malloc_r+0xdc>
 8008922:	f8c8 7000 	str.w	r7, [r8]
 8008926:	e00f      	b.n	8008948 <_malloc_r+0xa8>
 8008928:	6822      	ldr	r2, [r4, #0]
 800892a:	1b52      	subs	r2, r2, r5
 800892c:	d420      	bmi.n	8008970 <_malloc_r+0xd0>
 800892e:	2a0b      	cmp	r2, #11
 8008930:	d917      	bls.n	8008962 <_malloc_r+0xc2>
 8008932:	1961      	adds	r1, r4, r5
 8008934:	42a3      	cmp	r3, r4
 8008936:	6025      	str	r5, [r4, #0]
 8008938:	bf18      	it	ne
 800893a:	6059      	strne	r1, [r3, #4]
 800893c:	6863      	ldr	r3, [r4, #4]
 800893e:	bf08      	it	eq
 8008940:	f8c8 1000 	streq.w	r1, [r8]
 8008944:	5162      	str	r2, [r4, r5]
 8008946:	604b      	str	r3, [r1, #4]
 8008948:	4630      	mov	r0, r6
 800894a:	f000 f82f 	bl	80089ac <__malloc_unlock>
 800894e:	f104 000b 	add.w	r0, r4, #11
 8008952:	1d23      	adds	r3, r4, #4
 8008954:	f020 0007 	bic.w	r0, r0, #7
 8008958:	1ac2      	subs	r2, r0, r3
 800895a:	bf1c      	itt	ne
 800895c:	1a1b      	subne	r3, r3, r0
 800895e:	50a3      	strne	r3, [r4, r2]
 8008960:	e7af      	b.n	80088c2 <_malloc_r+0x22>
 8008962:	6862      	ldr	r2, [r4, #4]
 8008964:	42a3      	cmp	r3, r4
 8008966:	bf0c      	ite	eq
 8008968:	f8c8 2000 	streq.w	r2, [r8]
 800896c:	605a      	strne	r2, [r3, #4]
 800896e:	e7eb      	b.n	8008948 <_malloc_r+0xa8>
 8008970:	4623      	mov	r3, r4
 8008972:	6864      	ldr	r4, [r4, #4]
 8008974:	e7ae      	b.n	80088d4 <_malloc_r+0x34>
 8008976:	463c      	mov	r4, r7
 8008978:	687f      	ldr	r7, [r7, #4]
 800897a:	e7b6      	b.n	80088ea <_malloc_r+0x4a>
 800897c:	461a      	mov	r2, r3
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	42a3      	cmp	r3, r4
 8008982:	d1fb      	bne.n	800897c <_malloc_r+0xdc>
 8008984:	2300      	movs	r3, #0
 8008986:	6053      	str	r3, [r2, #4]
 8008988:	e7de      	b.n	8008948 <_malloc_r+0xa8>
 800898a:	230c      	movs	r3, #12
 800898c:	4630      	mov	r0, r6
 800898e:	6033      	str	r3, [r6, #0]
 8008990:	f000 f80c 	bl	80089ac <__malloc_unlock>
 8008994:	e794      	b.n	80088c0 <_malloc_r+0x20>
 8008996:	6005      	str	r5, [r0, #0]
 8008998:	e7d6      	b.n	8008948 <_malloc_r+0xa8>
 800899a:	bf00      	nop
 800899c:	20004100 	.word	0x20004100

080089a0 <__malloc_lock>:
 80089a0:	4801      	ldr	r0, [pc, #4]	@ (80089a8 <__malloc_lock+0x8>)
 80089a2:	f7ff bedc 	b.w	800875e <__retarget_lock_acquire_recursive>
 80089a6:	bf00      	nop
 80089a8:	200040f8 	.word	0x200040f8

080089ac <__malloc_unlock>:
 80089ac:	4801      	ldr	r0, [pc, #4]	@ (80089b4 <__malloc_unlock+0x8>)
 80089ae:	f7ff bed7 	b.w	8008760 <__retarget_lock_release_recursive>
 80089b2:	bf00      	nop
 80089b4:	200040f8 	.word	0x200040f8

080089b8 <__ssputs_r>:
 80089b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089bc:	461f      	mov	r7, r3
 80089be:	688e      	ldr	r6, [r1, #8]
 80089c0:	4682      	mov	sl, r0
 80089c2:	42be      	cmp	r6, r7
 80089c4:	460c      	mov	r4, r1
 80089c6:	4690      	mov	r8, r2
 80089c8:	680b      	ldr	r3, [r1, #0]
 80089ca:	d82d      	bhi.n	8008a28 <__ssputs_r+0x70>
 80089cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80089d4:	d026      	beq.n	8008a24 <__ssputs_r+0x6c>
 80089d6:	6965      	ldr	r5, [r4, #20]
 80089d8:	6909      	ldr	r1, [r1, #16]
 80089da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089de:	eba3 0901 	sub.w	r9, r3, r1
 80089e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089e6:	1c7b      	adds	r3, r7, #1
 80089e8:	444b      	add	r3, r9
 80089ea:	106d      	asrs	r5, r5, #1
 80089ec:	429d      	cmp	r5, r3
 80089ee:	bf38      	it	cc
 80089f0:	461d      	movcc	r5, r3
 80089f2:	0553      	lsls	r3, r2, #21
 80089f4:	d527      	bpl.n	8008a46 <__ssputs_r+0x8e>
 80089f6:	4629      	mov	r1, r5
 80089f8:	f7ff ff52 	bl	80088a0 <_malloc_r>
 80089fc:	4606      	mov	r6, r0
 80089fe:	b360      	cbz	r0, 8008a5a <__ssputs_r+0xa2>
 8008a00:	464a      	mov	r2, r9
 8008a02:	6921      	ldr	r1, [r4, #16]
 8008a04:	f7ff fead 	bl	8008762 <memcpy>
 8008a08:	89a3      	ldrh	r3, [r4, #12]
 8008a0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a12:	81a3      	strh	r3, [r4, #12]
 8008a14:	6126      	str	r6, [r4, #16]
 8008a16:	444e      	add	r6, r9
 8008a18:	6026      	str	r6, [r4, #0]
 8008a1a:	463e      	mov	r6, r7
 8008a1c:	6165      	str	r5, [r4, #20]
 8008a1e:	eba5 0509 	sub.w	r5, r5, r9
 8008a22:	60a5      	str	r5, [r4, #8]
 8008a24:	42be      	cmp	r6, r7
 8008a26:	d900      	bls.n	8008a2a <__ssputs_r+0x72>
 8008a28:	463e      	mov	r6, r7
 8008a2a:	4632      	mov	r2, r6
 8008a2c:	4641      	mov	r1, r8
 8008a2e:	6820      	ldr	r0, [r4, #0]
 8008a30:	f000 fbc5 	bl	80091be <memmove>
 8008a34:	2000      	movs	r0, #0
 8008a36:	68a3      	ldr	r3, [r4, #8]
 8008a38:	1b9b      	subs	r3, r3, r6
 8008a3a:	60a3      	str	r3, [r4, #8]
 8008a3c:	6823      	ldr	r3, [r4, #0]
 8008a3e:	4433      	add	r3, r6
 8008a40:	6023      	str	r3, [r4, #0]
 8008a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a46:	462a      	mov	r2, r5
 8008a48:	f000 fc1b 	bl	8009282 <_realloc_r>
 8008a4c:	4606      	mov	r6, r0
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d1e0      	bne.n	8008a14 <__ssputs_r+0x5c>
 8008a52:	4650      	mov	r0, sl
 8008a54:	6921      	ldr	r1, [r4, #16]
 8008a56:	f7ff feb1 	bl	80087bc <_free_r>
 8008a5a:	230c      	movs	r3, #12
 8008a5c:	f8ca 3000 	str.w	r3, [sl]
 8008a60:	89a3      	ldrh	r3, [r4, #12]
 8008a62:	f04f 30ff 	mov.w	r0, #4294967295
 8008a66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a6a:	81a3      	strh	r3, [r4, #12]
 8008a6c:	e7e9      	b.n	8008a42 <__ssputs_r+0x8a>
	...

08008a70 <_svfiprintf_r>:
 8008a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a74:	4698      	mov	r8, r3
 8008a76:	898b      	ldrh	r3, [r1, #12]
 8008a78:	4607      	mov	r7, r0
 8008a7a:	061b      	lsls	r3, r3, #24
 8008a7c:	460d      	mov	r5, r1
 8008a7e:	4614      	mov	r4, r2
 8008a80:	b09d      	sub	sp, #116	@ 0x74
 8008a82:	d510      	bpl.n	8008aa6 <_svfiprintf_r+0x36>
 8008a84:	690b      	ldr	r3, [r1, #16]
 8008a86:	b973      	cbnz	r3, 8008aa6 <_svfiprintf_r+0x36>
 8008a88:	2140      	movs	r1, #64	@ 0x40
 8008a8a:	f7ff ff09 	bl	80088a0 <_malloc_r>
 8008a8e:	6028      	str	r0, [r5, #0]
 8008a90:	6128      	str	r0, [r5, #16]
 8008a92:	b930      	cbnz	r0, 8008aa2 <_svfiprintf_r+0x32>
 8008a94:	230c      	movs	r3, #12
 8008a96:	603b      	str	r3, [r7, #0]
 8008a98:	f04f 30ff 	mov.w	r0, #4294967295
 8008a9c:	b01d      	add	sp, #116	@ 0x74
 8008a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa2:	2340      	movs	r3, #64	@ 0x40
 8008aa4:	616b      	str	r3, [r5, #20]
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aaa:	2320      	movs	r3, #32
 8008aac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ab0:	2330      	movs	r3, #48	@ 0x30
 8008ab2:	f04f 0901 	mov.w	r9, #1
 8008ab6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008aba:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008c54 <_svfiprintf_r+0x1e4>
 8008abe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ac2:	4623      	mov	r3, r4
 8008ac4:	469a      	mov	sl, r3
 8008ac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008aca:	b10a      	cbz	r2, 8008ad0 <_svfiprintf_r+0x60>
 8008acc:	2a25      	cmp	r2, #37	@ 0x25
 8008ace:	d1f9      	bne.n	8008ac4 <_svfiprintf_r+0x54>
 8008ad0:	ebba 0b04 	subs.w	fp, sl, r4
 8008ad4:	d00b      	beq.n	8008aee <_svfiprintf_r+0x7e>
 8008ad6:	465b      	mov	r3, fp
 8008ad8:	4622      	mov	r2, r4
 8008ada:	4629      	mov	r1, r5
 8008adc:	4638      	mov	r0, r7
 8008ade:	f7ff ff6b 	bl	80089b8 <__ssputs_r>
 8008ae2:	3001      	adds	r0, #1
 8008ae4:	f000 80a7 	beq.w	8008c36 <_svfiprintf_r+0x1c6>
 8008ae8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008aea:	445a      	add	r2, fp
 8008aec:	9209      	str	r2, [sp, #36]	@ 0x24
 8008aee:	f89a 3000 	ldrb.w	r3, [sl]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f000 809f 	beq.w	8008c36 <_svfiprintf_r+0x1c6>
 8008af8:	2300      	movs	r3, #0
 8008afa:	f04f 32ff 	mov.w	r2, #4294967295
 8008afe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b02:	f10a 0a01 	add.w	sl, sl, #1
 8008b06:	9304      	str	r3, [sp, #16]
 8008b08:	9307      	str	r3, [sp, #28]
 8008b0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b10:	4654      	mov	r4, sl
 8008b12:	2205      	movs	r2, #5
 8008b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b18:	484e      	ldr	r0, [pc, #312]	@ (8008c54 <_svfiprintf_r+0x1e4>)
 8008b1a:	f000 fb9d 	bl	8009258 <memchr>
 8008b1e:	9a04      	ldr	r2, [sp, #16]
 8008b20:	b9d8      	cbnz	r0, 8008b5a <_svfiprintf_r+0xea>
 8008b22:	06d0      	lsls	r0, r2, #27
 8008b24:	bf44      	itt	mi
 8008b26:	2320      	movmi	r3, #32
 8008b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b2c:	0711      	lsls	r1, r2, #28
 8008b2e:	bf44      	itt	mi
 8008b30:	232b      	movmi	r3, #43	@ 0x2b
 8008b32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b36:	f89a 3000 	ldrb.w	r3, [sl]
 8008b3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b3c:	d015      	beq.n	8008b6a <_svfiprintf_r+0xfa>
 8008b3e:	4654      	mov	r4, sl
 8008b40:	2000      	movs	r0, #0
 8008b42:	f04f 0c0a 	mov.w	ip, #10
 8008b46:	9a07      	ldr	r2, [sp, #28]
 8008b48:	4621      	mov	r1, r4
 8008b4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b4e:	3b30      	subs	r3, #48	@ 0x30
 8008b50:	2b09      	cmp	r3, #9
 8008b52:	d94b      	bls.n	8008bec <_svfiprintf_r+0x17c>
 8008b54:	b1b0      	cbz	r0, 8008b84 <_svfiprintf_r+0x114>
 8008b56:	9207      	str	r2, [sp, #28]
 8008b58:	e014      	b.n	8008b84 <_svfiprintf_r+0x114>
 8008b5a:	eba0 0308 	sub.w	r3, r0, r8
 8008b5e:	fa09 f303 	lsl.w	r3, r9, r3
 8008b62:	4313      	orrs	r3, r2
 8008b64:	46a2      	mov	sl, r4
 8008b66:	9304      	str	r3, [sp, #16]
 8008b68:	e7d2      	b.n	8008b10 <_svfiprintf_r+0xa0>
 8008b6a:	9b03      	ldr	r3, [sp, #12]
 8008b6c:	1d19      	adds	r1, r3, #4
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	9103      	str	r1, [sp, #12]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	bfbb      	ittet	lt
 8008b76:	425b      	neglt	r3, r3
 8008b78:	f042 0202 	orrlt.w	r2, r2, #2
 8008b7c:	9307      	strge	r3, [sp, #28]
 8008b7e:	9307      	strlt	r3, [sp, #28]
 8008b80:	bfb8      	it	lt
 8008b82:	9204      	strlt	r2, [sp, #16]
 8008b84:	7823      	ldrb	r3, [r4, #0]
 8008b86:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b88:	d10a      	bne.n	8008ba0 <_svfiprintf_r+0x130>
 8008b8a:	7863      	ldrb	r3, [r4, #1]
 8008b8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b8e:	d132      	bne.n	8008bf6 <_svfiprintf_r+0x186>
 8008b90:	9b03      	ldr	r3, [sp, #12]
 8008b92:	3402      	adds	r4, #2
 8008b94:	1d1a      	adds	r2, r3, #4
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	9203      	str	r2, [sp, #12]
 8008b9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b9e:	9305      	str	r3, [sp, #20]
 8008ba0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008c58 <_svfiprintf_r+0x1e8>
 8008ba4:	2203      	movs	r2, #3
 8008ba6:	4650      	mov	r0, sl
 8008ba8:	7821      	ldrb	r1, [r4, #0]
 8008baa:	f000 fb55 	bl	8009258 <memchr>
 8008bae:	b138      	cbz	r0, 8008bc0 <_svfiprintf_r+0x150>
 8008bb0:	2240      	movs	r2, #64	@ 0x40
 8008bb2:	9b04      	ldr	r3, [sp, #16]
 8008bb4:	eba0 000a 	sub.w	r0, r0, sl
 8008bb8:	4082      	lsls	r2, r0
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	3401      	adds	r4, #1
 8008bbe:	9304      	str	r3, [sp, #16]
 8008bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bc4:	2206      	movs	r2, #6
 8008bc6:	4825      	ldr	r0, [pc, #148]	@ (8008c5c <_svfiprintf_r+0x1ec>)
 8008bc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008bcc:	f000 fb44 	bl	8009258 <memchr>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	d036      	beq.n	8008c42 <_svfiprintf_r+0x1d2>
 8008bd4:	4b22      	ldr	r3, [pc, #136]	@ (8008c60 <_svfiprintf_r+0x1f0>)
 8008bd6:	bb1b      	cbnz	r3, 8008c20 <_svfiprintf_r+0x1b0>
 8008bd8:	9b03      	ldr	r3, [sp, #12]
 8008bda:	3307      	adds	r3, #7
 8008bdc:	f023 0307 	bic.w	r3, r3, #7
 8008be0:	3308      	adds	r3, #8
 8008be2:	9303      	str	r3, [sp, #12]
 8008be4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008be6:	4433      	add	r3, r6
 8008be8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bea:	e76a      	b.n	8008ac2 <_svfiprintf_r+0x52>
 8008bec:	460c      	mov	r4, r1
 8008bee:	2001      	movs	r0, #1
 8008bf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bf4:	e7a8      	b.n	8008b48 <_svfiprintf_r+0xd8>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	f04f 0c0a 	mov.w	ip, #10
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	3401      	adds	r4, #1
 8008c00:	9305      	str	r3, [sp, #20]
 8008c02:	4620      	mov	r0, r4
 8008c04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c08:	3a30      	subs	r2, #48	@ 0x30
 8008c0a:	2a09      	cmp	r2, #9
 8008c0c:	d903      	bls.n	8008c16 <_svfiprintf_r+0x1a6>
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d0c6      	beq.n	8008ba0 <_svfiprintf_r+0x130>
 8008c12:	9105      	str	r1, [sp, #20]
 8008c14:	e7c4      	b.n	8008ba0 <_svfiprintf_r+0x130>
 8008c16:	4604      	mov	r4, r0
 8008c18:	2301      	movs	r3, #1
 8008c1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c1e:	e7f0      	b.n	8008c02 <_svfiprintf_r+0x192>
 8008c20:	ab03      	add	r3, sp, #12
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	462a      	mov	r2, r5
 8008c26:	4638      	mov	r0, r7
 8008c28:	4b0e      	ldr	r3, [pc, #56]	@ (8008c64 <_svfiprintf_r+0x1f4>)
 8008c2a:	a904      	add	r1, sp, #16
 8008c2c:	f3af 8000 	nop.w
 8008c30:	1c42      	adds	r2, r0, #1
 8008c32:	4606      	mov	r6, r0
 8008c34:	d1d6      	bne.n	8008be4 <_svfiprintf_r+0x174>
 8008c36:	89ab      	ldrh	r3, [r5, #12]
 8008c38:	065b      	lsls	r3, r3, #25
 8008c3a:	f53f af2d 	bmi.w	8008a98 <_svfiprintf_r+0x28>
 8008c3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c40:	e72c      	b.n	8008a9c <_svfiprintf_r+0x2c>
 8008c42:	ab03      	add	r3, sp, #12
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	462a      	mov	r2, r5
 8008c48:	4638      	mov	r0, r7
 8008c4a:	4b06      	ldr	r3, [pc, #24]	@ (8008c64 <_svfiprintf_r+0x1f4>)
 8008c4c:	a904      	add	r1, sp, #16
 8008c4e:	f000 f87d 	bl	8008d4c <_printf_i>
 8008c52:	e7ed      	b.n	8008c30 <_svfiprintf_r+0x1c0>
 8008c54:	0800afd5 	.word	0x0800afd5
 8008c58:	0800afdb 	.word	0x0800afdb
 8008c5c:	0800afdf 	.word	0x0800afdf
 8008c60:	00000000 	.word	0x00000000
 8008c64:	080089b9 	.word	0x080089b9

08008c68 <_printf_common>:
 8008c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c6c:	4616      	mov	r6, r2
 8008c6e:	4698      	mov	r8, r3
 8008c70:	688a      	ldr	r2, [r1, #8]
 8008c72:	690b      	ldr	r3, [r1, #16]
 8008c74:	4607      	mov	r7, r0
 8008c76:	4293      	cmp	r3, r2
 8008c78:	bfb8      	it	lt
 8008c7a:	4613      	movlt	r3, r2
 8008c7c:	6033      	str	r3, [r6, #0]
 8008c7e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c82:	460c      	mov	r4, r1
 8008c84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c88:	b10a      	cbz	r2, 8008c8e <_printf_common+0x26>
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	6033      	str	r3, [r6, #0]
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	0699      	lsls	r1, r3, #26
 8008c92:	bf42      	ittt	mi
 8008c94:	6833      	ldrmi	r3, [r6, #0]
 8008c96:	3302      	addmi	r3, #2
 8008c98:	6033      	strmi	r3, [r6, #0]
 8008c9a:	6825      	ldr	r5, [r4, #0]
 8008c9c:	f015 0506 	ands.w	r5, r5, #6
 8008ca0:	d106      	bne.n	8008cb0 <_printf_common+0x48>
 8008ca2:	f104 0a19 	add.w	sl, r4, #25
 8008ca6:	68e3      	ldr	r3, [r4, #12]
 8008ca8:	6832      	ldr	r2, [r6, #0]
 8008caa:	1a9b      	subs	r3, r3, r2
 8008cac:	42ab      	cmp	r3, r5
 8008cae:	dc2b      	bgt.n	8008d08 <_printf_common+0xa0>
 8008cb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008cb4:	6822      	ldr	r2, [r4, #0]
 8008cb6:	3b00      	subs	r3, #0
 8008cb8:	bf18      	it	ne
 8008cba:	2301      	movne	r3, #1
 8008cbc:	0692      	lsls	r2, r2, #26
 8008cbe:	d430      	bmi.n	8008d22 <_printf_common+0xba>
 8008cc0:	4641      	mov	r1, r8
 8008cc2:	4638      	mov	r0, r7
 8008cc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008cc8:	47c8      	blx	r9
 8008cca:	3001      	adds	r0, #1
 8008ccc:	d023      	beq.n	8008d16 <_printf_common+0xae>
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	6922      	ldr	r2, [r4, #16]
 8008cd2:	f003 0306 	and.w	r3, r3, #6
 8008cd6:	2b04      	cmp	r3, #4
 8008cd8:	bf14      	ite	ne
 8008cda:	2500      	movne	r5, #0
 8008cdc:	6833      	ldreq	r3, [r6, #0]
 8008cde:	f04f 0600 	mov.w	r6, #0
 8008ce2:	bf08      	it	eq
 8008ce4:	68e5      	ldreq	r5, [r4, #12]
 8008ce6:	f104 041a 	add.w	r4, r4, #26
 8008cea:	bf08      	it	eq
 8008cec:	1aed      	subeq	r5, r5, r3
 8008cee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008cf2:	bf08      	it	eq
 8008cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	bfc4      	itt	gt
 8008cfc:	1a9b      	subgt	r3, r3, r2
 8008cfe:	18ed      	addgt	r5, r5, r3
 8008d00:	42b5      	cmp	r5, r6
 8008d02:	d11a      	bne.n	8008d3a <_printf_common+0xd2>
 8008d04:	2000      	movs	r0, #0
 8008d06:	e008      	b.n	8008d1a <_printf_common+0xb2>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	4652      	mov	r2, sl
 8008d0c:	4641      	mov	r1, r8
 8008d0e:	4638      	mov	r0, r7
 8008d10:	47c8      	blx	r9
 8008d12:	3001      	adds	r0, #1
 8008d14:	d103      	bne.n	8008d1e <_printf_common+0xb6>
 8008d16:	f04f 30ff 	mov.w	r0, #4294967295
 8008d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d1e:	3501      	adds	r5, #1
 8008d20:	e7c1      	b.n	8008ca6 <_printf_common+0x3e>
 8008d22:	2030      	movs	r0, #48	@ 0x30
 8008d24:	18e1      	adds	r1, r4, r3
 8008d26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d2a:	1c5a      	adds	r2, r3, #1
 8008d2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d30:	4422      	add	r2, r4
 8008d32:	3302      	adds	r3, #2
 8008d34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d38:	e7c2      	b.n	8008cc0 <_printf_common+0x58>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	4622      	mov	r2, r4
 8008d3e:	4641      	mov	r1, r8
 8008d40:	4638      	mov	r0, r7
 8008d42:	47c8      	blx	r9
 8008d44:	3001      	adds	r0, #1
 8008d46:	d0e6      	beq.n	8008d16 <_printf_common+0xae>
 8008d48:	3601      	adds	r6, #1
 8008d4a:	e7d9      	b.n	8008d00 <_printf_common+0x98>

08008d4c <_printf_i>:
 8008d4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d50:	7e0f      	ldrb	r7, [r1, #24]
 8008d52:	4691      	mov	r9, r2
 8008d54:	2f78      	cmp	r7, #120	@ 0x78
 8008d56:	4680      	mov	r8, r0
 8008d58:	460c      	mov	r4, r1
 8008d5a:	469a      	mov	sl, r3
 8008d5c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d62:	d807      	bhi.n	8008d74 <_printf_i+0x28>
 8008d64:	2f62      	cmp	r7, #98	@ 0x62
 8008d66:	d80a      	bhi.n	8008d7e <_printf_i+0x32>
 8008d68:	2f00      	cmp	r7, #0
 8008d6a:	f000 80d1 	beq.w	8008f10 <_printf_i+0x1c4>
 8008d6e:	2f58      	cmp	r7, #88	@ 0x58
 8008d70:	f000 80b8 	beq.w	8008ee4 <_printf_i+0x198>
 8008d74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d7c:	e03a      	b.n	8008df4 <_printf_i+0xa8>
 8008d7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d82:	2b15      	cmp	r3, #21
 8008d84:	d8f6      	bhi.n	8008d74 <_printf_i+0x28>
 8008d86:	a101      	add	r1, pc, #4	@ (adr r1, 8008d8c <_printf_i+0x40>)
 8008d88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d8c:	08008de5 	.word	0x08008de5
 8008d90:	08008df9 	.word	0x08008df9
 8008d94:	08008d75 	.word	0x08008d75
 8008d98:	08008d75 	.word	0x08008d75
 8008d9c:	08008d75 	.word	0x08008d75
 8008da0:	08008d75 	.word	0x08008d75
 8008da4:	08008df9 	.word	0x08008df9
 8008da8:	08008d75 	.word	0x08008d75
 8008dac:	08008d75 	.word	0x08008d75
 8008db0:	08008d75 	.word	0x08008d75
 8008db4:	08008d75 	.word	0x08008d75
 8008db8:	08008ef7 	.word	0x08008ef7
 8008dbc:	08008e23 	.word	0x08008e23
 8008dc0:	08008eb1 	.word	0x08008eb1
 8008dc4:	08008d75 	.word	0x08008d75
 8008dc8:	08008d75 	.word	0x08008d75
 8008dcc:	08008f19 	.word	0x08008f19
 8008dd0:	08008d75 	.word	0x08008d75
 8008dd4:	08008e23 	.word	0x08008e23
 8008dd8:	08008d75 	.word	0x08008d75
 8008ddc:	08008d75 	.word	0x08008d75
 8008de0:	08008eb9 	.word	0x08008eb9
 8008de4:	6833      	ldr	r3, [r6, #0]
 8008de6:	1d1a      	adds	r2, r3, #4
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	6032      	str	r2, [r6, #0]
 8008dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008df0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008df4:	2301      	movs	r3, #1
 8008df6:	e09c      	b.n	8008f32 <_printf_i+0x1e6>
 8008df8:	6833      	ldr	r3, [r6, #0]
 8008dfa:	6820      	ldr	r0, [r4, #0]
 8008dfc:	1d19      	adds	r1, r3, #4
 8008dfe:	6031      	str	r1, [r6, #0]
 8008e00:	0606      	lsls	r6, r0, #24
 8008e02:	d501      	bpl.n	8008e08 <_printf_i+0xbc>
 8008e04:	681d      	ldr	r5, [r3, #0]
 8008e06:	e003      	b.n	8008e10 <_printf_i+0xc4>
 8008e08:	0645      	lsls	r5, r0, #25
 8008e0a:	d5fb      	bpl.n	8008e04 <_printf_i+0xb8>
 8008e0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e10:	2d00      	cmp	r5, #0
 8008e12:	da03      	bge.n	8008e1c <_printf_i+0xd0>
 8008e14:	232d      	movs	r3, #45	@ 0x2d
 8008e16:	426d      	negs	r5, r5
 8008e18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e1c:	230a      	movs	r3, #10
 8008e1e:	4858      	ldr	r0, [pc, #352]	@ (8008f80 <_printf_i+0x234>)
 8008e20:	e011      	b.n	8008e46 <_printf_i+0xfa>
 8008e22:	6821      	ldr	r1, [r4, #0]
 8008e24:	6833      	ldr	r3, [r6, #0]
 8008e26:	0608      	lsls	r0, r1, #24
 8008e28:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e2c:	d402      	bmi.n	8008e34 <_printf_i+0xe8>
 8008e2e:	0649      	lsls	r1, r1, #25
 8008e30:	bf48      	it	mi
 8008e32:	b2ad      	uxthmi	r5, r5
 8008e34:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e36:	6033      	str	r3, [r6, #0]
 8008e38:	bf14      	ite	ne
 8008e3a:	230a      	movne	r3, #10
 8008e3c:	2308      	moveq	r3, #8
 8008e3e:	4850      	ldr	r0, [pc, #320]	@ (8008f80 <_printf_i+0x234>)
 8008e40:	2100      	movs	r1, #0
 8008e42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e46:	6866      	ldr	r6, [r4, #4]
 8008e48:	2e00      	cmp	r6, #0
 8008e4a:	60a6      	str	r6, [r4, #8]
 8008e4c:	db05      	blt.n	8008e5a <_printf_i+0x10e>
 8008e4e:	6821      	ldr	r1, [r4, #0]
 8008e50:	432e      	orrs	r6, r5
 8008e52:	f021 0104 	bic.w	r1, r1, #4
 8008e56:	6021      	str	r1, [r4, #0]
 8008e58:	d04b      	beq.n	8008ef2 <_printf_i+0x1a6>
 8008e5a:	4616      	mov	r6, r2
 8008e5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e60:	fb03 5711 	mls	r7, r3, r1, r5
 8008e64:	5dc7      	ldrb	r7, [r0, r7]
 8008e66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e6a:	462f      	mov	r7, r5
 8008e6c:	42bb      	cmp	r3, r7
 8008e6e:	460d      	mov	r5, r1
 8008e70:	d9f4      	bls.n	8008e5c <_printf_i+0x110>
 8008e72:	2b08      	cmp	r3, #8
 8008e74:	d10b      	bne.n	8008e8e <_printf_i+0x142>
 8008e76:	6823      	ldr	r3, [r4, #0]
 8008e78:	07df      	lsls	r7, r3, #31
 8008e7a:	d508      	bpl.n	8008e8e <_printf_i+0x142>
 8008e7c:	6923      	ldr	r3, [r4, #16]
 8008e7e:	6861      	ldr	r1, [r4, #4]
 8008e80:	4299      	cmp	r1, r3
 8008e82:	bfde      	ittt	le
 8008e84:	2330      	movle	r3, #48	@ 0x30
 8008e86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e8e:	1b92      	subs	r2, r2, r6
 8008e90:	6122      	str	r2, [r4, #16]
 8008e92:	464b      	mov	r3, r9
 8008e94:	4621      	mov	r1, r4
 8008e96:	4640      	mov	r0, r8
 8008e98:	f8cd a000 	str.w	sl, [sp]
 8008e9c:	aa03      	add	r2, sp, #12
 8008e9e:	f7ff fee3 	bl	8008c68 <_printf_common>
 8008ea2:	3001      	adds	r0, #1
 8008ea4:	d14a      	bne.n	8008f3c <_printf_i+0x1f0>
 8008ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eaa:	b004      	add	sp, #16
 8008eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	f043 0320 	orr.w	r3, r3, #32
 8008eb6:	6023      	str	r3, [r4, #0]
 8008eb8:	2778      	movs	r7, #120	@ 0x78
 8008eba:	4832      	ldr	r0, [pc, #200]	@ (8008f84 <_printf_i+0x238>)
 8008ebc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ec0:	6823      	ldr	r3, [r4, #0]
 8008ec2:	6831      	ldr	r1, [r6, #0]
 8008ec4:	061f      	lsls	r7, r3, #24
 8008ec6:	f851 5b04 	ldr.w	r5, [r1], #4
 8008eca:	d402      	bmi.n	8008ed2 <_printf_i+0x186>
 8008ecc:	065f      	lsls	r7, r3, #25
 8008ece:	bf48      	it	mi
 8008ed0:	b2ad      	uxthmi	r5, r5
 8008ed2:	6031      	str	r1, [r6, #0]
 8008ed4:	07d9      	lsls	r1, r3, #31
 8008ed6:	bf44      	itt	mi
 8008ed8:	f043 0320 	orrmi.w	r3, r3, #32
 8008edc:	6023      	strmi	r3, [r4, #0]
 8008ede:	b11d      	cbz	r5, 8008ee8 <_printf_i+0x19c>
 8008ee0:	2310      	movs	r3, #16
 8008ee2:	e7ad      	b.n	8008e40 <_printf_i+0xf4>
 8008ee4:	4826      	ldr	r0, [pc, #152]	@ (8008f80 <_printf_i+0x234>)
 8008ee6:	e7e9      	b.n	8008ebc <_printf_i+0x170>
 8008ee8:	6823      	ldr	r3, [r4, #0]
 8008eea:	f023 0320 	bic.w	r3, r3, #32
 8008eee:	6023      	str	r3, [r4, #0]
 8008ef0:	e7f6      	b.n	8008ee0 <_printf_i+0x194>
 8008ef2:	4616      	mov	r6, r2
 8008ef4:	e7bd      	b.n	8008e72 <_printf_i+0x126>
 8008ef6:	6833      	ldr	r3, [r6, #0]
 8008ef8:	6825      	ldr	r5, [r4, #0]
 8008efa:	1d18      	adds	r0, r3, #4
 8008efc:	6961      	ldr	r1, [r4, #20]
 8008efe:	6030      	str	r0, [r6, #0]
 8008f00:	062e      	lsls	r6, r5, #24
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	d501      	bpl.n	8008f0a <_printf_i+0x1be>
 8008f06:	6019      	str	r1, [r3, #0]
 8008f08:	e002      	b.n	8008f10 <_printf_i+0x1c4>
 8008f0a:	0668      	lsls	r0, r5, #25
 8008f0c:	d5fb      	bpl.n	8008f06 <_printf_i+0x1ba>
 8008f0e:	8019      	strh	r1, [r3, #0]
 8008f10:	2300      	movs	r3, #0
 8008f12:	4616      	mov	r6, r2
 8008f14:	6123      	str	r3, [r4, #16]
 8008f16:	e7bc      	b.n	8008e92 <_printf_i+0x146>
 8008f18:	6833      	ldr	r3, [r6, #0]
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	1d1a      	adds	r2, r3, #4
 8008f1e:	6032      	str	r2, [r6, #0]
 8008f20:	681e      	ldr	r6, [r3, #0]
 8008f22:	6862      	ldr	r2, [r4, #4]
 8008f24:	4630      	mov	r0, r6
 8008f26:	f000 f997 	bl	8009258 <memchr>
 8008f2a:	b108      	cbz	r0, 8008f30 <_printf_i+0x1e4>
 8008f2c:	1b80      	subs	r0, r0, r6
 8008f2e:	6060      	str	r0, [r4, #4]
 8008f30:	6863      	ldr	r3, [r4, #4]
 8008f32:	6123      	str	r3, [r4, #16]
 8008f34:	2300      	movs	r3, #0
 8008f36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f3a:	e7aa      	b.n	8008e92 <_printf_i+0x146>
 8008f3c:	4632      	mov	r2, r6
 8008f3e:	4649      	mov	r1, r9
 8008f40:	4640      	mov	r0, r8
 8008f42:	6923      	ldr	r3, [r4, #16]
 8008f44:	47d0      	blx	sl
 8008f46:	3001      	adds	r0, #1
 8008f48:	d0ad      	beq.n	8008ea6 <_printf_i+0x15a>
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	079b      	lsls	r3, r3, #30
 8008f4e:	d413      	bmi.n	8008f78 <_printf_i+0x22c>
 8008f50:	68e0      	ldr	r0, [r4, #12]
 8008f52:	9b03      	ldr	r3, [sp, #12]
 8008f54:	4298      	cmp	r0, r3
 8008f56:	bfb8      	it	lt
 8008f58:	4618      	movlt	r0, r3
 8008f5a:	e7a6      	b.n	8008eaa <_printf_i+0x15e>
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	4632      	mov	r2, r6
 8008f60:	4649      	mov	r1, r9
 8008f62:	4640      	mov	r0, r8
 8008f64:	47d0      	blx	sl
 8008f66:	3001      	adds	r0, #1
 8008f68:	d09d      	beq.n	8008ea6 <_printf_i+0x15a>
 8008f6a:	3501      	adds	r5, #1
 8008f6c:	68e3      	ldr	r3, [r4, #12]
 8008f6e:	9903      	ldr	r1, [sp, #12]
 8008f70:	1a5b      	subs	r3, r3, r1
 8008f72:	42ab      	cmp	r3, r5
 8008f74:	dcf2      	bgt.n	8008f5c <_printf_i+0x210>
 8008f76:	e7eb      	b.n	8008f50 <_printf_i+0x204>
 8008f78:	2500      	movs	r5, #0
 8008f7a:	f104 0619 	add.w	r6, r4, #25
 8008f7e:	e7f5      	b.n	8008f6c <_printf_i+0x220>
 8008f80:	0800afe6 	.word	0x0800afe6
 8008f84:	0800aff7 	.word	0x0800aff7

08008f88 <__sflush_r>:
 8008f88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8e:	0716      	lsls	r6, r2, #28
 8008f90:	4605      	mov	r5, r0
 8008f92:	460c      	mov	r4, r1
 8008f94:	d454      	bmi.n	8009040 <__sflush_r+0xb8>
 8008f96:	684b      	ldr	r3, [r1, #4]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	dc02      	bgt.n	8008fa2 <__sflush_r+0x1a>
 8008f9c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	dd48      	ble.n	8009034 <__sflush_r+0xac>
 8008fa2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fa4:	2e00      	cmp	r6, #0
 8008fa6:	d045      	beq.n	8009034 <__sflush_r+0xac>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008fae:	682f      	ldr	r7, [r5, #0]
 8008fb0:	6a21      	ldr	r1, [r4, #32]
 8008fb2:	602b      	str	r3, [r5, #0]
 8008fb4:	d030      	beq.n	8009018 <__sflush_r+0x90>
 8008fb6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008fb8:	89a3      	ldrh	r3, [r4, #12]
 8008fba:	0759      	lsls	r1, r3, #29
 8008fbc:	d505      	bpl.n	8008fca <__sflush_r+0x42>
 8008fbe:	6863      	ldr	r3, [r4, #4]
 8008fc0:	1ad2      	subs	r2, r2, r3
 8008fc2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008fc4:	b10b      	cbz	r3, 8008fca <__sflush_r+0x42>
 8008fc6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008fc8:	1ad2      	subs	r2, r2, r3
 8008fca:	2300      	movs	r3, #0
 8008fcc:	4628      	mov	r0, r5
 8008fce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fd0:	6a21      	ldr	r1, [r4, #32]
 8008fd2:	47b0      	blx	r6
 8008fd4:	1c43      	adds	r3, r0, #1
 8008fd6:	89a3      	ldrh	r3, [r4, #12]
 8008fd8:	d106      	bne.n	8008fe8 <__sflush_r+0x60>
 8008fda:	6829      	ldr	r1, [r5, #0]
 8008fdc:	291d      	cmp	r1, #29
 8008fde:	d82b      	bhi.n	8009038 <__sflush_r+0xb0>
 8008fe0:	4a28      	ldr	r2, [pc, #160]	@ (8009084 <__sflush_r+0xfc>)
 8008fe2:	40ca      	lsrs	r2, r1
 8008fe4:	07d6      	lsls	r6, r2, #31
 8008fe6:	d527      	bpl.n	8009038 <__sflush_r+0xb0>
 8008fe8:	2200      	movs	r2, #0
 8008fea:	6062      	str	r2, [r4, #4]
 8008fec:	6922      	ldr	r2, [r4, #16]
 8008fee:	04d9      	lsls	r1, r3, #19
 8008ff0:	6022      	str	r2, [r4, #0]
 8008ff2:	d504      	bpl.n	8008ffe <__sflush_r+0x76>
 8008ff4:	1c42      	adds	r2, r0, #1
 8008ff6:	d101      	bne.n	8008ffc <__sflush_r+0x74>
 8008ff8:	682b      	ldr	r3, [r5, #0]
 8008ffa:	b903      	cbnz	r3, 8008ffe <__sflush_r+0x76>
 8008ffc:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ffe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009000:	602f      	str	r7, [r5, #0]
 8009002:	b1b9      	cbz	r1, 8009034 <__sflush_r+0xac>
 8009004:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009008:	4299      	cmp	r1, r3
 800900a:	d002      	beq.n	8009012 <__sflush_r+0x8a>
 800900c:	4628      	mov	r0, r5
 800900e:	f7ff fbd5 	bl	80087bc <_free_r>
 8009012:	2300      	movs	r3, #0
 8009014:	6363      	str	r3, [r4, #52]	@ 0x34
 8009016:	e00d      	b.n	8009034 <__sflush_r+0xac>
 8009018:	2301      	movs	r3, #1
 800901a:	4628      	mov	r0, r5
 800901c:	47b0      	blx	r6
 800901e:	4602      	mov	r2, r0
 8009020:	1c50      	adds	r0, r2, #1
 8009022:	d1c9      	bne.n	8008fb8 <__sflush_r+0x30>
 8009024:	682b      	ldr	r3, [r5, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d0c6      	beq.n	8008fb8 <__sflush_r+0x30>
 800902a:	2b1d      	cmp	r3, #29
 800902c:	d001      	beq.n	8009032 <__sflush_r+0xaa>
 800902e:	2b16      	cmp	r3, #22
 8009030:	d11d      	bne.n	800906e <__sflush_r+0xe6>
 8009032:	602f      	str	r7, [r5, #0]
 8009034:	2000      	movs	r0, #0
 8009036:	e021      	b.n	800907c <__sflush_r+0xf4>
 8009038:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800903c:	b21b      	sxth	r3, r3
 800903e:	e01a      	b.n	8009076 <__sflush_r+0xee>
 8009040:	690f      	ldr	r7, [r1, #16]
 8009042:	2f00      	cmp	r7, #0
 8009044:	d0f6      	beq.n	8009034 <__sflush_r+0xac>
 8009046:	0793      	lsls	r3, r2, #30
 8009048:	bf18      	it	ne
 800904a:	2300      	movne	r3, #0
 800904c:	680e      	ldr	r6, [r1, #0]
 800904e:	bf08      	it	eq
 8009050:	694b      	ldreq	r3, [r1, #20]
 8009052:	1bf6      	subs	r6, r6, r7
 8009054:	600f      	str	r7, [r1, #0]
 8009056:	608b      	str	r3, [r1, #8]
 8009058:	2e00      	cmp	r6, #0
 800905a:	ddeb      	ble.n	8009034 <__sflush_r+0xac>
 800905c:	4633      	mov	r3, r6
 800905e:	463a      	mov	r2, r7
 8009060:	4628      	mov	r0, r5
 8009062:	6a21      	ldr	r1, [r4, #32]
 8009064:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009068:	47e0      	blx	ip
 800906a:	2800      	cmp	r0, #0
 800906c:	dc07      	bgt.n	800907e <__sflush_r+0xf6>
 800906e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009076:	f04f 30ff 	mov.w	r0, #4294967295
 800907a:	81a3      	strh	r3, [r4, #12]
 800907c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800907e:	4407      	add	r7, r0
 8009080:	1a36      	subs	r6, r6, r0
 8009082:	e7e9      	b.n	8009058 <__sflush_r+0xd0>
 8009084:	20400001 	.word	0x20400001

08009088 <_fflush_r>:
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	690b      	ldr	r3, [r1, #16]
 800908c:	4605      	mov	r5, r0
 800908e:	460c      	mov	r4, r1
 8009090:	b913      	cbnz	r3, 8009098 <_fflush_r+0x10>
 8009092:	2500      	movs	r5, #0
 8009094:	4628      	mov	r0, r5
 8009096:	bd38      	pop	{r3, r4, r5, pc}
 8009098:	b118      	cbz	r0, 80090a2 <_fflush_r+0x1a>
 800909a:	6a03      	ldr	r3, [r0, #32]
 800909c:	b90b      	cbnz	r3, 80090a2 <_fflush_r+0x1a>
 800909e:	f7ff f943 	bl	8008328 <__sinit>
 80090a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d0f3      	beq.n	8009092 <_fflush_r+0xa>
 80090aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80090ac:	07d0      	lsls	r0, r2, #31
 80090ae:	d404      	bmi.n	80090ba <_fflush_r+0x32>
 80090b0:	0599      	lsls	r1, r3, #22
 80090b2:	d402      	bmi.n	80090ba <_fflush_r+0x32>
 80090b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090b6:	f7ff fb52 	bl	800875e <__retarget_lock_acquire_recursive>
 80090ba:	4628      	mov	r0, r5
 80090bc:	4621      	mov	r1, r4
 80090be:	f7ff ff63 	bl	8008f88 <__sflush_r>
 80090c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80090c4:	4605      	mov	r5, r0
 80090c6:	07da      	lsls	r2, r3, #31
 80090c8:	d4e4      	bmi.n	8009094 <_fflush_r+0xc>
 80090ca:	89a3      	ldrh	r3, [r4, #12]
 80090cc:	059b      	lsls	r3, r3, #22
 80090ce:	d4e1      	bmi.n	8009094 <_fflush_r+0xc>
 80090d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090d2:	f7ff fb45 	bl	8008760 <__retarget_lock_release_recursive>
 80090d6:	e7dd      	b.n	8009094 <_fflush_r+0xc>

080090d8 <fiprintf>:
 80090d8:	b40e      	push	{r1, r2, r3}
 80090da:	b503      	push	{r0, r1, lr}
 80090dc:	4601      	mov	r1, r0
 80090de:	ab03      	add	r3, sp, #12
 80090e0:	4805      	ldr	r0, [pc, #20]	@ (80090f8 <fiprintf+0x20>)
 80090e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090e6:	6800      	ldr	r0, [r0, #0]
 80090e8:	9301      	str	r3, [sp, #4]
 80090ea:	f000 f91f 	bl	800932c <_vfiprintf_r>
 80090ee:	b002      	add	sp, #8
 80090f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80090f4:	b003      	add	sp, #12
 80090f6:	4770      	bx	lr
 80090f8:	20000030 	.word	0x20000030

080090fc <__swhatbuf_r>:
 80090fc:	b570      	push	{r4, r5, r6, lr}
 80090fe:	460c      	mov	r4, r1
 8009100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009104:	4615      	mov	r5, r2
 8009106:	2900      	cmp	r1, #0
 8009108:	461e      	mov	r6, r3
 800910a:	b096      	sub	sp, #88	@ 0x58
 800910c:	da0c      	bge.n	8009128 <__swhatbuf_r+0x2c>
 800910e:	89a3      	ldrh	r3, [r4, #12]
 8009110:	2100      	movs	r1, #0
 8009112:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009116:	bf14      	ite	ne
 8009118:	2340      	movne	r3, #64	@ 0x40
 800911a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800911e:	2000      	movs	r0, #0
 8009120:	6031      	str	r1, [r6, #0]
 8009122:	602b      	str	r3, [r5, #0]
 8009124:	b016      	add	sp, #88	@ 0x58
 8009126:	bd70      	pop	{r4, r5, r6, pc}
 8009128:	466a      	mov	r2, sp
 800912a:	f000 f863 	bl	80091f4 <_fstat_r>
 800912e:	2800      	cmp	r0, #0
 8009130:	dbed      	blt.n	800910e <__swhatbuf_r+0x12>
 8009132:	9901      	ldr	r1, [sp, #4]
 8009134:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009138:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800913c:	4259      	negs	r1, r3
 800913e:	4159      	adcs	r1, r3
 8009140:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009144:	e7eb      	b.n	800911e <__swhatbuf_r+0x22>

08009146 <__smakebuf_r>:
 8009146:	898b      	ldrh	r3, [r1, #12]
 8009148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800914a:	079d      	lsls	r5, r3, #30
 800914c:	4606      	mov	r6, r0
 800914e:	460c      	mov	r4, r1
 8009150:	d507      	bpl.n	8009162 <__smakebuf_r+0x1c>
 8009152:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009156:	6023      	str	r3, [r4, #0]
 8009158:	6123      	str	r3, [r4, #16]
 800915a:	2301      	movs	r3, #1
 800915c:	6163      	str	r3, [r4, #20]
 800915e:	b003      	add	sp, #12
 8009160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009162:	466a      	mov	r2, sp
 8009164:	ab01      	add	r3, sp, #4
 8009166:	f7ff ffc9 	bl	80090fc <__swhatbuf_r>
 800916a:	9f00      	ldr	r7, [sp, #0]
 800916c:	4605      	mov	r5, r0
 800916e:	4639      	mov	r1, r7
 8009170:	4630      	mov	r0, r6
 8009172:	f7ff fb95 	bl	80088a0 <_malloc_r>
 8009176:	b948      	cbnz	r0, 800918c <__smakebuf_r+0x46>
 8009178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800917c:	059a      	lsls	r2, r3, #22
 800917e:	d4ee      	bmi.n	800915e <__smakebuf_r+0x18>
 8009180:	f023 0303 	bic.w	r3, r3, #3
 8009184:	f043 0302 	orr.w	r3, r3, #2
 8009188:	81a3      	strh	r3, [r4, #12]
 800918a:	e7e2      	b.n	8009152 <__smakebuf_r+0xc>
 800918c:	89a3      	ldrh	r3, [r4, #12]
 800918e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009196:	81a3      	strh	r3, [r4, #12]
 8009198:	9b01      	ldr	r3, [sp, #4]
 800919a:	6020      	str	r0, [r4, #0]
 800919c:	b15b      	cbz	r3, 80091b6 <__smakebuf_r+0x70>
 800919e:	4630      	mov	r0, r6
 80091a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091a4:	f000 f838 	bl	8009218 <_isatty_r>
 80091a8:	b128      	cbz	r0, 80091b6 <__smakebuf_r+0x70>
 80091aa:	89a3      	ldrh	r3, [r4, #12]
 80091ac:	f023 0303 	bic.w	r3, r3, #3
 80091b0:	f043 0301 	orr.w	r3, r3, #1
 80091b4:	81a3      	strh	r3, [r4, #12]
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	431d      	orrs	r5, r3
 80091ba:	81a5      	strh	r5, [r4, #12]
 80091bc:	e7cf      	b.n	800915e <__smakebuf_r+0x18>

080091be <memmove>:
 80091be:	4288      	cmp	r0, r1
 80091c0:	b510      	push	{r4, lr}
 80091c2:	eb01 0402 	add.w	r4, r1, r2
 80091c6:	d902      	bls.n	80091ce <memmove+0x10>
 80091c8:	4284      	cmp	r4, r0
 80091ca:	4623      	mov	r3, r4
 80091cc:	d807      	bhi.n	80091de <memmove+0x20>
 80091ce:	1e43      	subs	r3, r0, #1
 80091d0:	42a1      	cmp	r1, r4
 80091d2:	d008      	beq.n	80091e6 <memmove+0x28>
 80091d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091d8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091dc:	e7f8      	b.n	80091d0 <memmove+0x12>
 80091de:	4601      	mov	r1, r0
 80091e0:	4402      	add	r2, r0
 80091e2:	428a      	cmp	r2, r1
 80091e4:	d100      	bne.n	80091e8 <memmove+0x2a>
 80091e6:	bd10      	pop	{r4, pc}
 80091e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091ec:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091f0:	e7f7      	b.n	80091e2 <memmove+0x24>
	...

080091f4 <_fstat_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	2300      	movs	r3, #0
 80091f8:	4d06      	ldr	r5, [pc, #24]	@ (8009214 <_fstat_r+0x20>)
 80091fa:	4604      	mov	r4, r0
 80091fc:	4608      	mov	r0, r1
 80091fe:	4611      	mov	r1, r2
 8009200:	602b      	str	r3, [r5, #0]
 8009202:	f7fc f901 	bl	8005408 <_fstat>
 8009206:	1c43      	adds	r3, r0, #1
 8009208:	d102      	bne.n	8009210 <_fstat_r+0x1c>
 800920a:	682b      	ldr	r3, [r5, #0]
 800920c:	b103      	cbz	r3, 8009210 <_fstat_r+0x1c>
 800920e:	6023      	str	r3, [r4, #0]
 8009210:	bd38      	pop	{r3, r4, r5, pc}
 8009212:	bf00      	nop
 8009214:	200040f4 	.word	0x200040f4

08009218 <_isatty_r>:
 8009218:	b538      	push	{r3, r4, r5, lr}
 800921a:	2300      	movs	r3, #0
 800921c:	4d05      	ldr	r5, [pc, #20]	@ (8009234 <_isatty_r+0x1c>)
 800921e:	4604      	mov	r4, r0
 8009220:	4608      	mov	r0, r1
 8009222:	602b      	str	r3, [r5, #0]
 8009224:	f7fc f8ff 	bl	8005426 <_isatty>
 8009228:	1c43      	adds	r3, r0, #1
 800922a:	d102      	bne.n	8009232 <_isatty_r+0x1a>
 800922c:	682b      	ldr	r3, [r5, #0]
 800922e:	b103      	cbz	r3, 8009232 <_isatty_r+0x1a>
 8009230:	6023      	str	r3, [r4, #0]
 8009232:	bd38      	pop	{r3, r4, r5, pc}
 8009234:	200040f4 	.word	0x200040f4

08009238 <_sbrk_r>:
 8009238:	b538      	push	{r3, r4, r5, lr}
 800923a:	2300      	movs	r3, #0
 800923c:	4d05      	ldr	r5, [pc, #20]	@ (8009254 <_sbrk_r+0x1c>)
 800923e:	4604      	mov	r4, r0
 8009240:	4608      	mov	r0, r1
 8009242:	602b      	str	r3, [r5, #0]
 8009244:	f7fc f906 	bl	8005454 <_sbrk>
 8009248:	1c43      	adds	r3, r0, #1
 800924a:	d102      	bne.n	8009252 <_sbrk_r+0x1a>
 800924c:	682b      	ldr	r3, [r5, #0]
 800924e:	b103      	cbz	r3, 8009252 <_sbrk_r+0x1a>
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	bd38      	pop	{r3, r4, r5, pc}
 8009254:	200040f4 	.word	0x200040f4

08009258 <memchr>:
 8009258:	4603      	mov	r3, r0
 800925a:	b510      	push	{r4, lr}
 800925c:	b2c9      	uxtb	r1, r1
 800925e:	4402      	add	r2, r0
 8009260:	4293      	cmp	r3, r2
 8009262:	4618      	mov	r0, r3
 8009264:	d101      	bne.n	800926a <memchr+0x12>
 8009266:	2000      	movs	r0, #0
 8009268:	e003      	b.n	8009272 <memchr+0x1a>
 800926a:	7804      	ldrb	r4, [r0, #0]
 800926c:	3301      	adds	r3, #1
 800926e:	428c      	cmp	r4, r1
 8009270:	d1f6      	bne.n	8009260 <memchr+0x8>
 8009272:	bd10      	pop	{r4, pc}

08009274 <abort>:
 8009274:	2006      	movs	r0, #6
 8009276:	b508      	push	{r3, lr}
 8009278:	f000 f998 	bl	80095ac <raise>
 800927c:	2001      	movs	r0, #1
 800927e:	f7fc f874 	bl	800536a <_exit>

08009282 <_realloc_r>:
 8009282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009286:	4607      	mov	r7, r0
 8009288:	4614      	mov	r4, r2
 800928a:	460d      	mov	r5, r1
 800928c:	b921      	cbnz	r1, 8009298 <_realloc_r+0x16>
 800928e:	4611      	mov	r1, r2
 8009290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009294:	f7ff bb04 	b.w	80088a0 <_malloc_r>
 8009298:	b92a      	cbnz	r2, 80092a6 <_realloc_r+0x24>
 800929a:	f7ff fa8f 	bl	80087bc <_free_r>
 800929e:	4625      	mov	r5, r4
 80092a0:	4628      	mov	r0, r5
 80092a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092a6:	f000 f99d 	bl	80095e4 <_malloc_usable_size_r>
 80092aa:	4284      	cmp	r4, r0
 80092ac:	4606      	mov	r6, r0
 80092ae:	d802      	bhi.n	80092b6 <_realloc_r+0x34>
 80092b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80092b4:	d8f4      	bhi.n	80092a0 <_realloc_r+0x1e>
 80092b6:	4621      	mov	r1, r4
 80092b8:	4638      	mov	r0, r7
 80092ba:	f7ff faf1 	bl	80088a0 <_malloc_r>
 80092be:	4680      	mov	r8, r0
 80092c0:	b908      	cbnz	r0, 80092c6 <_realloc_r+0x44>
 80092c2:	4645      	mov	r5, r8
 80092c4:	e7ec      	b.n	80092a0 <_realloc_r+0x1e>
 80092c6:	42b4      	cmp	r4, r6
 80092c8:	4622      	mov	r2, r4
 80092ca:	4629      	mov	r1, r5
 80092cc:	bf28      	it	cs
 80092ce:	4632      	movcs	r2, r6
 80092d0:	f7ff fa47 	bl	8008762 <memcpy>
 80092d4:	4629      	mov	r1, r5
 80092d6:	4638      	mov	r0, r7
 80092d8:	f7ff fa70 	bl	80087bc <_free_r>
 80092dc:	e7f1      	b.n	80092c2 <_realloc_r+0x40>

080092de <__sfputc_r>:
 80092de:	6893      	ldr	r3, [r2, #8]
 80092e0:	b410      	push	{r4}
 80092e2:	3b01      	subs	r3, #1
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	6093      	str	r3, [r2, #8]
 80092e8:	da07      	bge.n	80092fa <__sfputc_r+0x1c>
 80092ea:	6994      	ldr	r4, [r2, #24]
 80092ec:	42a3      	cmp	r3, r4
 80092ee:	db01      	blt.n	80092f4 <__sfputc_r+0x16>
 80092f0:	290a      	cmp	r1, #10
 80092f2:	d102      	bne.n	80092fa <__sfputc_r+0x1c>
 80092f4:	bc10      	pop	{r4}
 80092f6:	f7ff b910 	b.w	800851a <__swbuf_r>
 80092fa:	6813      	ldr	r3, [r2, #0]
 80092fc:	1c58      	adds	r0, r3, #1
 80092fe:	6010      	str	r0, [r2, #0]
 8009300:	7019      	strb	r1, [r3, #0]
 8009302:	4608      	mov	r0, r1
 8009304:	bc10      	pop	{r4}
 8009306:	4770      	bx	lr

08009308 <__sfputs_r>:
 8009308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930a:	4606      	mov	r6, r0
 800930c:	460f      	mov	r7, r1
 800930e:	4614      	mov	r4, r2
 8009310:	18d5      	adds	r5, r2, r3
 8009312:	42ac      	cmp	r4, r5
 8009314:	d101      	bne.n	800931a <__sfputs_r+0x12>
 8009316:	2000      	movs	r0, #0
 8009318:	e007      	b.n	800932a <__sfputs_r+0x22>
 800931a:	463a      	mov	r2, r7
 800931c:	4630      	mov	r0, r6
 800931e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009322:	f7ff ffdc 	bl	80092de <__sfputc_r>
 8009326:	1c43      	adds	r3, r0, #1
 8009328:	d1f3      	bne.n	8009312 <__sfputs_r+0xa>
 800932a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800932c <_vfiprintf_r>:
 800932c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009330:	460d      	mov	r5, r1
 8009332:	4614      	mov	r4, r2
 8009334:	4698      	mov	r8, r3
 8009336:	4606      	mov	r6, r0
 8009338:	b09d      	sub	sp, #116	@ 0x74
 800933a:	b118      	cbz	r0, 8009344 <_vfiprintf_r+0x18>
 800933c:	6a03      	ldr	r3, [r0, #32]
 800933e:	b90b      	cbnz	r3, 8009344 <_vfiprintf_r+0x18>
 8009340:	f7fe fff2 	bl	8008328 <__sinit>
 8009344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009346:	07d9      	lsls	r1, r3, #31
 8009348:	d405      	bmi.n	8009356 <_vfiprintf_r+0x2a>
 800934a:	89ab      	ldrh	r3, [r5, #12]
 800934c:	059a      	lsls	r2, r3, #22
 800934e:	d402      	bmi.n	8009356 <_vfiprintf_r+0x2a>
 8009350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009352:	f7ff fa04 	bl	800875e <__retarget_lock_acquire_recursive>
 8009356:	89ab      	ldrh	r3, [r5, #12]
 8009358:	071b      	lsls	r3, r3, #28
 800935a:	d501      	bpl.n	8009360 <_vfiprintf_r+0x34>
 800935c:	692b      	ldr	r3, [r5, #16]
 800935e:	b99b      	cbnz	r3, 8009388 <_vfiprintf_r+0x5c>
 8009360:	4629      	mov	r1, r5
 8009362:	4630      	mov	r0, r6
 8009364:	f7ff f918 	bl	8008598 <__swsetup_r>
 8009368:	b170      	cbz	r0, 8009388 <_vfiprintf_r+0x5c>
 800936a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800936c:	07dc      	lsls	r4, r3, #31
 800936e:	d504      	bpl.n	800937a <_vfiprintf_r+0x4e>
 8009370:	f04f 30ff 	mov.w	r0, #4294967295
 8009374:	b01d      	add	sp, #116	@ 0x74
 8009376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800937a:	89ab      	ldrh	r3, [r5, #12]
 800937c:	0598      	lsls	r0, r3, #22
 800937e:	d4f7      	bmi.n	8009370 <_vfiprintf_r+0x44>
 8009380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009382:	f7ff f9ed 	bl	8008760 <__retarget_lock_release_recursive>
 8009386:	e7f3      	b.n	8009370 <_vfiprintf_r+0x44>
 8009388:	2300      	movs	r3, #0
 800938a:	9309      	str	r3, [sp, #36]	@ 0x24
 800938c:	2320      	movs	r3, #32
 800938e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009392:	2330      	movs	r3, #48	@ 0x30
 8009394:	f04f 0901 	mov.w	r9, #1
 8009398:	f8cd 800c 	str.w	r8, [sp, #12]
 800939c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009548 <_vfiprintf_r+0x21c>
 80093a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093a4:	4623      	mov	r3, r4
 80093a6:	469a      	mov	sl, r3
 80093a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093ac:	b10a      	cbz	r2, 80093b2 <_vfiprintf_r+0x86>
 80093ae:	2a25      	cmp	r2, #37	@ 0x25
 80093b0:	d1f9      	bne.n	80093a6 <_vfiprintf_r+0x7a>
 80093b2:	ebba 0b04 	subs.w	fp, sl, r4
 80093b6:	d00b      	beq.n	80093d0 <_vfiprintf_r+0xa4>
 80093b8:	465b      	mov	r3, fp
 80093ba:	4622      	mov	r2, r4
 80093bc:	4629      	mov	r1, r5
 80093be:	4630      	mov	r0, r6
 80093c0:	f7ff ffa2 	bl	8009308 <__sfputs_r>
 80093c4:	3001      	adds	r0, #1
 80093c6:	f000 80a7 	beq.w	8009518 <_vfiprintf_r+0x1ec>
 80093ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093cc:	445a      	add	r2, fp
 80093ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80093d0:	f89a 3000 	ldrb.w	r3, [sl]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f000 809f 	beq.w	8009518 <_vfiprintf_r+0x1ec>
 80093da:	2300      	movs	r3, #0
 80093dc:	f04f 32ff 	mov.w	r2, #4294967295
 80093e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093e4:	f10a 0a01 	add.w	sl, sl, #1
 80093e8:	9304      	str	r3, [sp, #16]
 80093ea:	9307      	str	r3, [sp, #28]
 80093ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80093f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80093f2:	4654      	mov	r4, sl
 80093f4:	2205      	movs	r2, #5
 80093f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093fa:	4853      	ldr	r0, [pc, #332]	@ (8009548 <_vfiprintf_r+0x21c>)
 80093fc:	f7ff ff2c 	bl	8009258 <memchr>
 8009400:	9a04      	ldr	r2, [sp, #16]
 8009402:	b9d8      	cbnz	r0, 800943c <_vfiprintf_r+0x110>
 8009404:	06d1      	lsls	r1, r2, #27
 8009406:	bf44      	itt	mi
 8009408:	2320      	movmi	r3, #32
 800940a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800940e:	0713      	lsls	r3, r2, #28
 8009410:	bf44      	itt	mi
 8009412:	232b      	movmi	r3, #43	@ 0x2b
 8009414:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009418:	f89a 3000 	ldrb.w	r3, [sl]
 800941c:	2b2a      	cmp	r3, #42	@ 0x2a
 800941e:	d015      	beq.n	800944c <_vfiprintf_r+0x120>
 8009420:	4654      	mov	r4, sl
 8009422:	2000      	movs	r0, #0
 8009424:	f04f 0c0a 	mov.w	ip, #10
 8009428:	9a07      	ldr	r2, [sp, #28]
 800942a:	4621      	mov	r1, r4
 800942c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009430:	3b30      	subs	r3, #48	@ 0x30
 8009432:	2b09      	cmp	r3, #9
 8009434:	d94b      	bls.n	80094ce <_vfiprintf_r+0x1a2>
 8009436:	b1b0      	cbz	r0, 8009466 <_vfiprintf_r+0x13a>
 8009438:	9207      	str	r2, [sp, #28]
 800943a:	e014      	b.n	8009466 <_vfiprintf_r+0x13a>
 800943c:	eba0 0308 	sub.w	r3, r0, r8
 8009440:	fa09 f303 	lsl.w	r3, r9, r3
 8009444:	4313      	orrs	r3, r2
 8009446:	46a2      	mov	sl, r4
 8009448:	9304      	str	r3, [sp, #16]
 800944a:	e7d2      	b.n	80093f2 <_vfiprintf_r+0xc6>
 800944c:	9b03      	ldr	r3, [sp, #12]
 800944e:	1d19      	adds	r1, r3, #4
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	9103      	str	r1, [sp, #12]
 8009454:	2b00      	cmp	r3, #0
 8009456:	bfbb      	ittet	lt
 8009458:	425b      	neglt	r3, r3
 800945a:	f042 0202 	orrlt.w	r2, r2, #2
 800945e:	9307      	strge	r3, [sp, #28]
 8009460:	9307      	strlt	r3, [sp, #28]
 8009462:	bfb8      	it	lt
 8009464:	9204      	strlt	r2, [sp, #16]
 8009466:	7823      	ldrb	r3, [r4, #0]
 8009468:	2b2e      	cmp	r3, #46	@ 0x2e
 800946a:	d10a      	bne.n	8009482 <_vfiprintf_r+0x156>
 800946c:	7863      	ldrb	r3, [r4, #1]
 800946e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009470:	d132      	bne.n	80094d8 <_vfiprintf_r+0x1ac>
 8009472:	9b03      	ldr	r3, [sp, #12]
 8009474:	3402      	adds	r4, #2
 8009476:	1d1a      	adds	r2, r3, #4
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	9203      	str	r2, [sp, #12]
 800947c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009480:	9305      	str	r3, [sp, #20]
 8009482:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800954c <_vfiprintf_r+0x220>
 8009486:	2203      	movs	r2, #3
 8009488:	4650      	mov	r0, sl
 800948a:	7821      	ldrb	r1, [r4, #0]
 800948c:	f7ff fee4 	bl	8009258 <memchr>
 8009490:	b138      	cbz	r0, 80094a2 <_vfiprintf_r+0x176>
 8009492:	2240      	movs	r2, #64	@ 0x40
 8009494:	9b04      	ldr	r3, [sp, #16]
 8009496:	eba0 000a 	sub.w	r0, r0, sl
 800949a:	4082      	lsls	r2, r0
 800949c:	4313      	orrs	r3, r2
 800949e:	3401      	adds	r4, #1
 80094a0:	9304      	str	r3, [sp, #16]
 80094a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094a6:	2206      	movs	r2, #6
 80094a8:	4829      	ldr	r0, [pc, #164]	@ (8009550 <_vfiprintf_r+0x224>)
 80094aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094ae:	f7ff fed3 	bl	8009258 <memchr>
 80094b2:	2800      	cmp	r0, #0
 80094b4:	d03f      	beq.n	8009536 <_vfiprintf_r+0x20a>
 80094b6:	4b27      	ldr	r3, [pc, #156]	@ (8009554 <_vfiprintf_r+0x228>)
 80094b8:	bb1b      	cbnz	r3, 8009502 <_vfiprintf_r+0x1d6>
 80094ba:	9b03      	ldr	r3, [sp, #12]
 80094bc:	3307      	adds	r3, #7
 80094be:	f023 0307 	bic.w	r3, r3, #7
 80094c2:	3308      	adds	r3, #8
 80094c4:	9303      	str	r3, [sp, #12]
 80094c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094c8:	443b      	add	r3, r7
 80094ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80094cc:	e76a      	b.n	80093a4 <_vfiprintf_r+0x78>
 80094ce:	460c      	mov	r4, r1
 80094d0:	2001      	movs	r0, #1
 80094d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80094d6:	e7a8      	b.n	800942a <_vfiprintf_r+0xfe>
 80094d8:	2300      	movs	r3, #0
 80094da:	f04f 0c0a 	mov.w	ip, #10
 80094de:	4619      	mov	r1, r3
 80094e0:	3401      	adds	r4, #1
 80094e2:	9305      	str	r3, [sp, #20]
 80094e4:	4620      	mov	r0, r4
 80094e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094ea:	3a30      	subs	r2, #48	@ 0x30
 80094ec:	2a09      	cmp	r2, #9
 80094ee:	d903      	bls.n	80094f8 <_vfiprintf_r+0x1cc>
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d0c6      	beq.n	8009482 <_vfiprintf_r+0x156>
 80094f4:	9105      	str	r1, [sp, #20]
 80094f6:	e7c4      	b.n	8009482 <_vfiprintf_r+0x156>
 80094f8:	4604      	mov	r4, r0
 80094fa:	2301      	movs	r3, #1
 80094fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009500:	e7f0      	b.n	80094e4 <_vfiprintf_r+0x1b8>
 8009502:	ab03      	add	r3, sp, #12
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	462a      	mov	r2, r5
 8009508:	4630      	mov	r0, r6
 800950a:	4b13      	ldr	r3, [pc, #76]	@ (8009558 <_vfiprintf_r+0x22c>)
 800950c:	a904      	add	r1, sp, #16
 800950e:	f3af 8000 	nop.w
 8009512:	4607      	mov	r7, r0
 8009514:	1c78      	adds	r0, r7, #1
 8009516:	d1d6      	bne.n	80094c6 <_vfiprintf_r+0x19a>
 8009518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800951a:	07d9      	lsls	r1, r3, #31
 800951c:	d405      	bmi.n	800952a <_vfiprintf_r+0x1fe>
 800951e:	89ab      	ldrh	r3, [r5, #12]
 8009520:	059a      	lsls	r2, r3, #22
 8009522:	d402      	bmi.n	800952a <_vfiprintf_r+0x1fe>
 8009524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009526:	f7ff f91b 	bl	8008760 <__retarget_lock_release_recursive>
 800952a:	89ab      	ldrh	r3, [r5, #12]
 800952c:	065b      	lsls	r3, r3, #25
 800952e:	f53f af1f 	bmi.w	8009370 <_vfiprintf_r+0x44>
 8009532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009534:	e71e      	b.n	8009374 <_vfiprintf_r+0x48>
 8009536:	ab03      	add	r3, sp, #12
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	462a      	mov	r2, r5
 800953c:	4630      	mov	r0, r6
 800953e:	4b06      	ldr	r3, [pc, #24]	@ (8009558 <_vfiprintf_r+0x22c>)
 8009540:	a904      	add	r1, sp, #16
 8009542:	f7ff fc03 	bl	8008d4c <_printf_i>
 8009546:	e7e4      	b.n	8009512 <_vfiprintf_r+0x1e6>
 8009548:	0800afd5 	.word	0x0800afd5
 800954c:	0800afdb 	.word	0x0800afdb
 8009550:	0800afdf 	.word	0x0800afdf
 8009554:	00000000 	.word	0x00000000
 8009558:	08009309 	.word	0x08009309

0800955c <_raise_r>:
 800955c:	291f      	cmp	r1, #31
 800955e:	b538      	push	{r3, r4, r5, lr}
 8009560:	4605      	mov	r5, r0
 8009562:	460c      	mov	r4, r1
 8009564:	d904      	bls.n	8009570 <_raise_r+0x14>
 8009566:	2316      	movs	r3, #22
 8009568:	6003      	str	r3, [r0, #0]
 800956a:	f04f 30ff 	mov.w	r0, #4294967295
 800956e:	bd38      	pop	{r3, r4, r5, pc}
 8009570:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009572:	b112      	cbz	r2, 800957a <_raise_r+0x1e>
 8009574:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009578:	b94b      	cbnz	r3, 800958e <_raise_r+0x32>
 800957a:	4628      	mov	r0, r5
 800957c:	f000 f830 	bl	80095e0 <_getpid_r>
 8009580:	4622      	mov	r2, r4
 8009582:	4601      	mov	r1, r0
 8009584:	4628      	mov	r0, r5
 8009586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800958a:	f000 b817 	b.w	80095bc <_kill_r>
 800958e:	2b01      	cmp	r3, #1
 8009590:	d00a      	beq.n	80095a8 <_raise_r+0x4c>
 8009592:	1c59      	adds	r1, r3, #1
 8009594:	d103      	bne.n	800959e <_raise_r+0x42>
 8009596:	2316      	movs	r3, #22
 8009598:	6003      	str	r3, [r0, #0]
 800959a:	2001      	movs	r0, #1
 800959c:	e7e7      	b.n	800956e <_raise_r+0x12>
 800959e:	2100      	movs	r1, #0
 80095a0:	4620      	mov	r0, r4
 80095a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80095a6:	4798      	blx	r3
 80095a8:	2000      	movs	r0, #0
 80095aa:	e7e0      	b.n	800956e <_raise_r+0x12>

080095ac <raise>:
 80095ac:	4b02      	ldr	r3, [pc, #8]	@ (80095b8 <raise+0xc>)
 80095ae:	4601      	mov	r1, r0
 80095b0:	6818      	ldr	r0, [r3, #0]
 80095b2:	f7ff bfd3 	b.w	800955c <_raise_r>
 80095b6:	bf00      	nop
 80095b8:	20000030 	.word	0x20000030

080095bc <_kill_r>:
 80095bc:	b538      	push	{r3, r4, r5, lr}
 80095be:	2300      	movs	r3, #0
 80095c0:	4d06      	ldr	r5, [pc, #24]	@ (80095dc <_kill_r+0x20>)
 80095c2:	4604      	mov	r4, r0
 80095c4:	4608      	mov	r0, r1
 80095c6:	4611      	mov	r1, r2
 80095c8:	602b      	str	r3, [r5, #0]
 80095ca:	f7fb febe 	bl	800534a <_kill>
 80095ce:	1c43      	adds	r3, r0, #1
 80095d0:	d102      	bne.n	80095d8 <_kill_r+0x1c>
 80095d2:	682b      	ldr	r3, [r5, #0]
 80095d4:	b103      	cbz	r3, 80095d8 <_kill_r+0x1c>
 80095d6:	6023      	str	r3, [r4, #0]
 80095d8:	bd38      	pop	{r3, r4, r5, pc}
 80095da:	bf00      	nop
 80095dc:	200040f4 	.word	0x200040f4

080095e0 <_getpid_r>:
 80095e0:	f7fb beac 	b.w	800533c <_getpid>

080095e4 <_malloc_usable_size_r>:
 80095e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095e8:	1f18      	subs	r0, r3, #4
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	bfbc      	itt	lt
 80095ee:	580b      	ldrlt	r3, [r1, r0]
 80095f0:	18c0      	addlt	r0, r0, r3
 80095f2:	4770      	bx	lr

080095f4 <powf>:
 80095f4:	b570      	push	{r4, r5, r6, lr}
 80095f6:	460c      	mov	r4, r1
 80095f8:	4606      	mov	r6, r0
 80095fa:	f000 fa43 	bl	8009a84 <__ieee754_powf>
 80095fe:	4621      	mov	r1, r4
 8009600:	4605      	mov	r5, r0
 8009602:	4620      	mov	r0, r4
 8009604:	f7f7 f888 	bl	8000718 <__aeabi_fcmpun>
 8009608:	bb68      	cbnz	r0, 8009666 <powf+0x72>
 800960a:	2100      	movs	r1, #0
 800960c:	4630      	mov	r0, r6
 800960e:	f7f7 f851 	bl	80006b4 <__aeabi_fcmpeq>
 8009612:	b190      	cbz	r0, 800963a <powf+0x46>
 8009614:	2100      	movs	r1, #0
 8009616:	4620      	mov	r0, r4
 8009618:	f7f7 f84c 	bl	80006b4 <__aeabi_fcmpeq>
 800961c:	2800      	cmp	r0, #0
 800961e:	d133      	bne.n	8009688 <powf+0x94>
 8009620:	4620      	mov	r0, r4
 8009622:	f000 f8c1 	bl	80097a8 <finitef>
 8009626:	b1f0      	cbz	r0, 8009666 <powf+0x72>
 8009628:	2100      	movs	r1, #0
 800962a:	4620      	mov	r0, r4
 800962c:	f7f7 f84c 	bl	80006c8 <__aeabi_fcmplt>
 8009630:	b1c8      	cbz	r0, 8009666 <powf+0x72>
 8009632:	f7ff f869 	bl	8008708 <__errno>
 8009636:	2322      	movs	r3, #34	@ 0x22
 8009638:	e014      	b.n	8009664 <powf+0x70>
 800963a:	4628      	mov	r0, r5
 800963c:	f000 f8b4 	bl	80097a8 <finitef>
 8009640:	b998      	cbnz	r0, 800966a <powf+0x76>
 8009642:	4630      	mov	r0, r6
 8009644:	f000 f8b0 	bl	80097a8 <finitef>
 8009648:	b178      	cbz	r0, 800966a <powf+0x76>
 800964a:	4620      	mov	r0, r4
 800964c:	f000 f8ac 	bl	80097a8 <finitef>
 8009650:	b158      	cbz	r0, 800966a <powf+0x76>
 8009652:	4629      	mov	r1, r5
 8009654:	4628      	mov	r0, r5
 8009656:	f7f7 f85f 	bl	8000718 <__aeabi_fcmpun>
 800965a:	2800      	cmp	r0, #0
 800965c:	d0e9      	beq.n	8009632 <powf+0x3e>
 800965e:	f7ff f853 	bl	8008708 <__errno>
 8009662:	2321      	movs	r3, #33	@ 0x21
 8009664:	6003      	str	r3, [r0, #0]
 8009666:	4628      	mov	r0, r5
 8009668:	bd70      	pop	{r4, r5, r6, pc}
 800966a:	2100      	movs	r1, #0
 800966c:	4628      	mov	r0, r5
 800966e:	f7f7 f821 	bl	80006b4 <__aeabi_fcmpeq>
 8009672:	2800      	cmp	r0, #0
 8009674:	d0f7      	beq.n	8009666 <powf+0x72>
 8009676:	4630      	mov	r0, r6
 8009678:	f000 f896 	bl	80097a8 <finitef>
 800967c:	2800      	cmp	r0, #0
 800967e:	d0f2      	beq.n	8009666 <powf+0x72>
 8009680:	4620      	mov	r0, r4
 8009682:	f000 f891 	bl	80097a8 <finitef>
 8009686:	e7d3      	b.n	8009630 <powf+0x3c>
 8009688:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 800968c:	e7eb      	b.n	8009666 <powf+0x72>

0800968e <sqrtf>:
 800968e:	b538      	push	{r3, r4, r5, lr}
 8009690:	4605      	mov	r5, r0
 8009692:	f000 f891 	bl	80097b8 <__ieee754_sqrtf>
 8009696:	4629      	mov	r1, r5
 8009698:	4604      	mov	r4, r0
 800969a:	4628      	mov	r0, r5
 800969c:	f7f7 f83c 	bl	8000718 <__aeabi_fcmpun>
 80096a0:	b968      	cbnz	r0, 80096be <sqrtf+0x30>
 80096a2:	2100      	movs	r1, #0
 80096a4:	4628      	mov	r0, r5
 80096a6:	f7f7 f80f 	bl	80006c8 <__aeabi_fcmplt>
 80096aa:	b140      	cbz	r0, 80096be <sqrtf+0x30>
 80096ac:	f7ff f82c 	bl	8008708 <__errno>
 80096b0:	2321      	movs	r3, #33	@ 0x21
 80096b2:	2100      	movs	r1, #0
 80096b4:	6003      	str	r3, [r0, #0]
 80096b6:	4608      	mov	r0, r1
 80096b8:	f7f6 ff1c 	bl	80004f4 <__aeabi_fdiv>
 80096bc:	4604      	mov	r4, r0
 80096be:	4620      	mov	r0, r4
 80096c0:	bd38      	pop	{r3, r4, r5, pc}
	...

080096c4 <cosf>:
 80096c4:	b507      	push	{r0, r1, r2, lr}
 80096c6:	4a1a      	ldr	r2, [pc, #104]	@ (8009730 <cosf+0x6c>)
 80096c8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80096cc:	4293      	cmp	r3, r2
 80096ce:	4601      	mov	r1, r0
 80096d0:	d805      	bhi.n	80096de <cosf+0x1a>
 80096d2:	2100      	movs	r1, #0
 80096d4:	b003      	add	sp, #12
 80096d6:	f85d eb04 	ldr.w	lr, [sp], #4
 80096da:	f000 b8dd 	b.w	8009898 <__kernel_cosf>
 80096de:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80096e2:	d304      	bcc.n	80096ee <cosf+0x2a>
 80096e4:	f7f6 fd48 	bl	8000178 <__aeabi_fsub>
 80096e8:	b003      	add	sp, #12
 80096ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80096ee:	4669      	mov	r1, sp
 80096f0:	f000 fd28 	bl	800a144 <__ieee754_rem_pio2f>
 80096f4:	f000 0203 	and.w	r2, r0, #3
 80096f8:	2a01      	cmp	r2, #1
 80096fa:	d007      	beq.n	800970c <cosf+0x48>
 80096fc:	2a02      	cmp	r2, #2
 80096fe:	d00c      	beq.n	800971a <cosf+0x56>
 8009700:	b982      	cbnz	r2, 8009724 <cosf+0x60>
 8009702:	9901      	ldr	r1, [sp, #4]
 8009704:	9800      	ldr	r0, [sp, #0]
 8009706:	f000 f8c7 	bl	8009898 <__kernel_cosf>
 800970a:	e7ed      	b.n	80096e8 <cosf+0x24>
 800970c:	9901      	ldr	r1, [sp, #4]
 800970e:	9800      	ldr	r0, [sp, #0]
 8009710:	f000 f942 	bl	8009998 <__kernel_sinf>
 8009714:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8009718:	e7e6      	b.n	80096e8 <cosf+0x24>
 800971a:	9901      	ldr	r1, [sp, #4]
 800971c:	9800      	ldr	r0, [sp, #0]
 800971e:	f000 f8bb 	bl	8009898 <__kernel_cosf>
 8009722:	e7f7      	b.n	8009714 <cosf+0x50>
 8009724:	2201      	movs	r2, #1
 8009726:	9901      	ldr	r1, [sp, #4]
 8009728:	9800      	ldr	r0, [sp, #0]
 800972a:	f000 f935 	bl	8009998 <__kernel_sinf>
 800972e:	e7db      	b.n	80096e8 <cosf+0x24>
 8009730:	3f490fd8 	.word	0x3f490fd8

08009734 <sinf>:
 8009734:	b507      	push	{r0, r1, r2, lr}
 8009736:	4a1b      	ldr	r2, [pc, #108]	@ (80097a4 <sinf+0x70>)
 8009738:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800973c:	4293      	cmp	r3, r2
 800973e:	4601      	mov	r1, r0
 8009740:	d806      	bhi.n	8009750 <sinf+0x1c>
 8009742:	2200      	movs	r2, #0
 8009744:	2100      	movs	r1, #0
 8009746:	b003      	add	sp, #12
 8009748:	f85d eb04 	ldr.w	lr, [sp], #4
 800974c:	f000 b924 	b.w	8009998 <__kernel_sinf>
 8009750:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009754:	d304      	bcc.n	8009760 <sinf+0x2c>
 8009756:	f7f6 fd0f 	bl	8000178 <__aeabi_fsub>
 800975a:	b003      	add	sp, #12
 800975c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009760:	4669      	mov	r1, sp
 8009762:	f000 fcef 	bl	800a144 <__ieee754_rem_pio2f>
 8009766:	f000 0003 	and.w	r0, r0, #3
 800976a:	2801      	cmp	r0, #1
 800976c:	d008      	beq.n	8009780 <sinf+0x4c>
 800976e:	2802      	cmp	r0, #2
 8009770:	d00b      	beq.n	800978a <sinf+0x56>
 8009772:	b990      	cbnz	r0, 800979a <sinf+0x66>
 8009774:	2201      	movs	r2, #1
 8009776:	9901      	ldr	r1, [sp, #4]
 8009778:	9800      	ldr	r0, [sp, #0]
 800977a:	f000 f90d 	bl	8009998 <__kernel_sinf>
 800977e:	e7ec      	b.n	800975a <sinf+0x26>
 8009780:	9901      	ldr	r1, [sp, #4]
 8009782:	9800      	ldr	r0, [sp, #0]
 8009784:	f000 f888 	bl	8009898 <__kernel_cosf>
 8009788:	e7e7      	b.n	800975a <sinf+0x26>
 800978a:	2201      	movs	r2, #1
 800978c:	9901      	ldr	r1, [sp, #4]
 800978e:	9800      	ldr	r0, [sp, #0]
 8009790:	f000 f902 	bl	8009998 <__kernel_sinf>
 8009794:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8009798:	e7df      	b.n	800975a <sinf+0x26>
 800979a:	9901      	ldr	r1, [sp, #4]
 800979c:	9800      	ldr	r0, [sp, #0]
 800979e:	f000 f87b 	bl	8009898 <__kernel_cosf>
 80097a2:	e7f7      	b.n	8009794 <sinf+0x60>
 80097a4:	3f490fd8 	.word	0x3f490fd8

080097a8 <finitef>:
 80097a8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80097ac:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80097b0:	bfac      	ite	ge
 80097b2:	2000      	movge	r0, #0
 80097b4:	2001      	movlt	r0, #1
 80097b6:	4770      	bx	lr

080097b8 <__ieee754_sqrtf>:
 80097b8:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80097bc:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80097c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097c4:	4603      	mov	r3, r0
 80097c6:	4604      	mov	r4, r0
 80097c8:	d30a      	bcc.n	80097e0 <__ieee754_sqrtf+0x28>
 80097ca:	4601      	mov	r1, r0
 80097cc:	f7f6 fdde 	bl	800038c <__aeabi_fmul>
 80097d0:	4601      	mov	r1, r0
 80097d2:	4620      	mov	r0, r4
 80097d4:	f7f6 fcd2 	bl	800017c <__addsf3>
 80097d8:	4604      	mov	r4, r0
 80097da:	4620      	mov	r0, r4
 80097dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097e0:	2a00      	cmp	r2, #0
 80097e2:	d0fa      	beq.n	80097da <__ieee754_sqrtf+0x22>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	da06      	bge.n	80097f6 <__ieee754_sqrtf+0x3e>
 80097e8:	4601      	mov	r1, r0
 80097ea:	f7f6 fcc5 	bl	8000178 <__aeabi_fsub>
 80097ee:	4601      	mov	r1, r0
 80097f0:	f7f6 fe80 	bl	80004f4 <__aeabi_fdiv>
 80097f4:	e7f0      	b.n	80097d8 <__ieee754_sqrtf+0x20>
 80097f6:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 80097fa:	d03c      	beq.n	8009876 <__ieee754_sqrtf+0xbe>
 80097fc:	15c2      	asrs	r2, r0, #23
 80097fe:	2400      	movs	r4, #0
 8009800:	2019      	movs	r0, #25
 8009802:	4626      	mov	r6, r4
 8009804:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8009808:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800980c:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8009810:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009814:	07d2      	lsls	r2, r2, #31
 8009816:	bf58      	it	pl
 8009818:	005b      	lslpl	r3, r3, #1
 800981a:	106d      	asrs	r5, r5, #1
 800981c:	005b      	lsls	r3, r3, #1
 800981e:	1872      	adds	r2, r6, r1
 8009820:	429a      	cmp	r2, r3
 8009822:	bfcf      	iteee	gt
 8009824:	461a      	movgt	r2, r3
 8009826:	1856      	addle	r6, r2, r1
 8009828:	1864      	addle	r4, r4, r1
 800982a:	1a9a      	suble	r2, r3, r2
 800982c:	3801      	subs	r0, #1
 800982e:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8009832:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009836:	d1f2      	bne.n	800981e <__ieee754_sqrtf+0x66>
 8009838:	b1ba      	cbz	r2, 800986a <__ieee754_sqrtf+0xb2>
 800983a:	4e15      	ldr	r6, [pc, #84]	@ (8009890 <__ieee754_sqrtf+0xd8>)
 800983c:	4f15      	ldr	r7, [pc, #84]	@ (8009894 <__ieee754_sqrtf+0xdc>)
 800983e:	6830      	ldr	r0, [r6, #0]
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	f7f6 fc99 	bl	8000178 <__aeabi_fsub>
 8009846:	f8d6 8000 	ldr.w	r8, [r6]
 800984a:	4601      	mov	r1, r0
 800984c:	4640      	mov	r0, r8
 800984e:	f7f6 ff45 	bl	80006dc <__aeabi_fcmple>
 8009852:	b150      	cbz	r0, 800986a <__ieee754_sqrtf+0xb2>
 8009854:	6830      	ldr	r0, [r6, #0]
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	f7f6 fc90 	bl	800017c <__addsf3>
 800985c:	6836      	ldr	r6, [r6, #0]
 800985e:	4601      	mov	r1, r0
 8009860:	4630      	mov	r0, r6
 8009862:	f7f6 ff31 	bl	80006c8 <__aeabi_fcmplt>
 8009866:	b170      	cbz	r0, 8009886 <__ieee754_sqrtf+0xce>
 8009868:	3402      	adds	r4, #2
 800986a:	1064      	asrs	r4, r4, #1
 800986c:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8009870:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8009874:	e7b1      	b.n	80097da <__ieee754_sqrtf+0x22>
 8009876:	005b      	lsls	r3, r3, #1
 8009878:	0218      	lsls	r0, r3, #8
 800987a:	460a      	mov	r2, r1
 800987c:	f101 0101 	add.w	r1, r1, #1
 8009880:	d5f9      	bpl.n	8009876 <__ieee754_sqrtf+0xbe>
 8009882:	4252      	negs	r2, r2
 8009884:	e7bb      	b.n	80097fe <__ieee754_sqrtf+0x46>
 8009886:	3401      	adds	r4, #1
 8009888:	f024 0401 	bic.w	r4, r4, #1
 800988c:	e7ed      	b.n	800986a <__ieee754_sqrtf+0xb2>
 800988e:	bf00      	nop
 8009890:	0800b00c 	.word	0x0800b00c
 8009894:	0800b008 	.word	0x0800b008

08009898 <__kernel_cosf>:
 8009898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800989c:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 80098a0:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 80098a4:	4606      	mov	r6, r0
 80098a6:	4688      	mov	r8, r1
 80098a8:	d203      	bcs.n	80098b2 <__kernel_cosf+0x1a>
 80098aa:	f7f6 ff4b 	bl	8000744 <__aeabi_f2iz>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d05c      	beq.n	800996c <__kernel_cosf+0xd4>
 80098b2:	4631      	mov	r1, r6
 80098b4:	4630      	mov	r0, r6
 80098b6:	f7f6 fd69 	bl	800038c <__aeabi_fmul>
 80098ba:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80098be:	4604      	mov	r4, r0
 80098c0:	f7f6 fd64 	bl	800038c <__aeabi_fmul>
 80098c4:	492b      	ldr	r1, [pc, #172]	@ (8009974 <__kernel_cosf+0xdc>)
 80098c6:	4607      	mov	r7, r0
 80098c8:	4620      	mov	r0, r4
 80098ca:	f7f6 fd5f 	bl	800038c <__aeabi_fmul>
 80098ce:	492a      	ldr	r1, [pc, #168]	@ (8009978 <__kernel_cosf+0xe0>)
 80098d0:	f7f6 fc54 	bl	800017c <__addsf3>
 80098d4:	4621      	mov	r1, r4
 80098d6:	f7f6 fd59 	bl	800038c <__aeabi_fmul>
 80098da:	4928      	ldr	r1, [pc, #160]	@ (800997c <__kernel_cosf+0xe4>)
 80098dc:	f7f6 fc4c 	bl	8000178 <__aeabi_fsub>
 80098e0:	4621      	mov	r1, r4
 80098e2:	f7f6 fd53 	bl	800038c <__aeabi_fmul>
 80098e6:	4926      	ldr	r1, [pc, #152]	@ (8009980 <__kernel_cosf+0xe8>)
 80098e8:	f7f6 fc48 	bl	800017c <__addsf3>
 80098ec:	4621      	mov	r1, r4
 80098ee:	f7f6 fd4d 	bl	800038c <__aeabi_fmul>
 80098f2:	4924      	ldr	r1, [pc, #144]	@ (8009984 <__kernel_cosf+0xec>)
 80098f4:	f7f6 fc40 	bl	8000178 <__aeabi_fsub>
 80098f8:	4621      	mov	r1, r4
 80098fa:	f7f6 fd47 	bl	800038c <__aeabi_fmul>
 80098fe:	4922      	ldr	r1, [pc, #136]	@ (8009988 <__kernel_cosf+0xf0>)
 8009900:	f7f6 fc3c 	bl	800017c <__addsf3>
 8009904:	4621      	mov	r1, r4
 8009906:	f7f6 fd41 	bl	800038c <__aeabi_fmul>
 800990a:	4621      	mov	r1, r4
 800990c:	f7f6 fd3e 	bl	800038c <__aeabi_fmul>
 8009910:	4641      	mov	r1, r8
 8009912:	4604      	mov	r4, r0
 8009914:	4630      	mov	r0, r6
 8009916:	f7f6 fd39 	bl	800038c <__aeabi_fmul>
 800991a:	4601      	mov	r1, r0
 800991c:	4620      	mov	r0, r4
 800991e:	f7f6 fc2b 	bl	8000178 <__aeabi_fsub>
 8009922:	4b1a      	ldr	r3, [pc, #104]	@ (800998c <__kernel_cosf+0xf4>)
 8009924:	4604      	mov	r4, r0
 8009926:	429d      	cmp	r5, r3
 8009928:	d80a      	bhi.n	8009940 <__kernel_cosf+0xa8>
 800992a:	4601      	mov	r1, r0
 800992c:	4638      	mov	r0, r7
 800992e:	f7f6 fc23 	bl	8000178 <__aeabi_fsub>
 8009932:	4601      	mov	r1, r0
 8009934:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009938:	f7f6 fc1e 	bl	8000178 <__aeabi_fsub>
 800993c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009940:	4b13      	ldr	r3, [pc, #76]	@ (8009990 <__kernel_cosf+0xf8>)
 8009942:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009946:	429d      	cmp	r5, r3
 8009948:	bf8c      	ite	hi
 800994a:	4d12      	ldrhi	r5, [pc, #72]	@ (8009994 <__kernel_cosf+0xfc>)
 800994c:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 8009950:	4629      	mov	r1, r5
 8009952:	f7f6 fc11 	bl	8000178 <__aeabi_fsub>
 8009956:	4629      	mov	r1, r5
 8009958:	4606      	mov	r6, r0
 800995a:	4638      	mov	r0, r7
 800995c:	f7f6 fc0c 	bl	8000178 <__aeabi_fsub>
 8009960:	4621      	mov	r1, r4
 8009962:	f7f6 fc09 	bl	8000178 <__aeabi_fsub>
 8009966:	4601      	mov	r1, r0
 8009968:	4630      	mov	r0, r6
 800996a:	e7e5      	b.n	8009938 <__kernel_cosf+0xa0>
 800996c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009970:	e7e4      	b.n	800993c <__kernel_cosf+0xa4>
 8009972:	bf00      	nop
 8009974:	ad47d74e 	.word	0xad47d74e
 8009978:	310f74f6 	.word	0x310f74f6
 800997c:	3493f27c 	.word	0x3493f27c
 8009980:	37d00d01 	.word	0x37d00d01
 8009984:	3ab60b61 	.word	0x3ab60b61
 8009988:	3d2aaaab 	.word	0x3d2aaaab
 800998c:	3e999999 	.word	0x3e999999
 8009990:	3f480000 	.word	0x3f480000
 8009994:	3e900000 	.word	0x3e900000

08009998 <__kernel_sinf>:
 8009998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800999c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80099a0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80099a4:	4604      	mov	r4, r0
 80099a6:	460f      	mov	r7, r1
 80099a8:	4691      	mov	r9, r2
 80099aa:	d203      	bcs.n	80099b4 <__kernel_sinf+0x1c>
 80099ac:	f7f6 feca 	bl	8000744 <__aeabi_f2iz>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	d035      	beq.n	8009a20 <__kernel_sinf+0x88>
 80099b4:	4621      	mov	r1, r4
 80099b6:	4620      	mov	r0, r4
 80099b8:	f7f6 fce8 	bl	800038c <__aeabi_fmul>
 80099bc:	4605      	mov	r5, r0
 80099be:	4601      	mov	r1, r0
 80099c0:	4620      	mov	r0, r4
 80099c2:	f7f6 fce3 	bl	800038c <__aeabi_fmul>
 80099c6:	4929      	ldr	r1, [pc, #164]	@ (8009a6c <__kernel_sinf+0xd4>)
 80099c8:	4606      	mov	r6, r0
 80099ca:	4628      	mov	r0, r5
 80099cc:	f7f6 fcde 	bl	800038c <__aeabi_fmul>
 80099d0:	4927      	ldr	r1, [pc, #156]	@ (8009a70 <__kernel_sinf+0xd8>)
 80099d2:	f7f6 fbd1 	bl	8000178 <__aeabi_fsub>
 80099d6:	4629      	mov	r1, r5
 80099d8:	f7f6 fcd8 	bl	800038c <__aeabi_fmul>
 80099dc:	4925      	ldr	r1, [pc, #148]	@ (8009a74 <__kernel_sinf+0xdc>)
 80099de:	f7f6 fbcd 	bl	800017c <__addsf3>
 80099e2:	4629      	mov	r1, r5
 80099e4:	f7f6 fcd2 	bl	800038c <__aeabi_fmul>
 80099e8:	4923      	ldr	r1, [pc, #140]	@ (8009a78 <__kernel_sinf+0xe0>)
 80099ea:	f7f6 fbc5 	bl	8000178 <__aeabi_fsub>
 80099ee:	4629      	mov	r1, r5
 80099f0:	f7f6 fccc 	bl	800038c <__aeabi_fmul>
 80099f4:	4921      	ldr	r1, [pc, #132]	@ (8009a7c <__kernel_sinf+0xe4>)
 80099f6:	f7f6 fbc1 	bl	800017c <__addsf3>
 80099fa:	4680      	mov	r8, r0
 80099fc:	f1b9 0f00 	cmp.w	r9, #0
 8009a00:	d111      	bne.n	8009a26 <__kernel_sinf+0x8e>
 8009a02:	4601      	mov	r1, r0
 8009a04:	4628      	mov	r0, r5
 8009a06:	f7f6 fcc1 	bl	800038c <__aeabi_fmul>
 8009a0a:	491d      	ldr	r1, [pc, #116]	@ (8009a80 <__kernel_sinf+0xe8>)
 8009a0c:	f7f6 fbb4 	bl	8000178 <__aeabi_fsub>
 8009a10:	4631      	mov	r1, r6
 8009a12:	f7f6 fcbb 	bl	800038c <__aeabi_fmul>
 8009a16:	4601      	mov	r1, r0
 8009a18:	4620      	mov	r0, r4
 8009a1a:	f7f6 fbaf 	bl	800017c <__addsf3>
 8009a1e:	4604      	mov	r4, r0
 8009a20:	4620      	mov	r0, r4
 8009a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a26:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8009a2a:	4638      	mov	r0, r7
 8009a2c:	f7f6 fcae 	bl	800038c <__aeabi_fmul>
 8009a30:	4641      	mov	r1, r8
 8009a32:	4681      	mov	r9, r0
 8009a34:	4630      	mov	r0, r6
 8009a36:	f7f6 fca9 	bl	800038c <__aeabi_fmul>
 8009a3a:	4601      	mov	r1, r0
 8009a3c:	4648      	mov	r0, r9
 8009a3e:	f7f6 fb9b 	bl	8000178 <__aeabi_fsub>
 8009a42:	4629      	mov	r1, r5
 8009a44:	f7f6 fca2 	bl	800038c <__aeabi_fmul>
 8009a48:	4639      	mov	r1, r7
 8009a4a:	f7f6 fb95 	bl	8000178 <__aeabi_fsub>
 8009a4e:	490c      	ldr	r1, [pc, #48]	@ (8009a80 <__kernel_sinf+0xe8>)
 8009a50:	4605      	mov	r5, r0
 8009a52:	4630      	mov	r0, r6
 8009a54:	f7f6 fc9a 	bl	800038c <__aeabi_fmul>
 8009a58:	4601      	mov	r1, r0
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	f7f6 fb8e 	bl	800017c <__addsf3>
 8009a60:	4601      	mov	r1, r0
 8009a62:	4620      	mov	r0, r4
 8009a64:	f7f6 fb88 	bl	8000178 <__aeabi_fsub>
 8009a68:	e7d9      	b.n	8009a1e <__kernel_sinf+0x86>
 8009a6a:	bf00      	nop
 8009a6c:	2f2ec9d3 	.word	0x2f2ec9d3
 8009a70:	32d72f34 	.word	0x32d72f34
 8009a74:	3638ef1b 	.word	0x3638ef1b
 8009a78:	39500d01 	.word	0x39500d01
 8009a7c:	3c088889 	.word	0x3c088889
 8009a80:	3e2aaaab 	.word	0x3e2aaaab

08009a84 <__ieee754_powf>:
 8009a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a88:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 8009a8c:	4681      	mov	r9, r0
 8009a8e:	460f      	mov	r7, r1
 8009a90:	4606      	mov	r6, r0
 8009a92:	460c      	mov	r4, r1
 8009a94:	b087      	sub	sp, #28
 8009a96:	d10c      	bne.n	8009ab2 <__ieee754_powf+0x2e>
 8009a98:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 8009a9c:	0076      	lsls	r6, r6, #1
 8009a9e:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8009aa2:	f240 8310 	bls.w	800a0c6 <__ieee754_powf+0x642>
 8009aa6:	4639      	mov	r1, r7
 8009aa8:	4648      	mov	r0, r9
 8009aaa:	f7f6 fb67 	bl	800017c <__addsf3>
 8009aae:	4601      	mov	r1, r0
 8009ab0:	e043      	b.n	8009b3a <__ieee754_powf+0xb6>
 8009ab2:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8009ab6:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8009aba:	d802      	bhi.n	8009ac2 <__ieee754_powf+0x3e>
 8009abc:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8009ac0:	d908      	bls.n	8009ad4 <__ieee754_powf+0x50>
 8009ac2:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8009ac6:	d1ee      	bne.n	8009aa6 <__ieee754_powf+0x22>
 8009ac8:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8009acc:	0064      	lsls	r4, r4, #1
 8009ace:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8009ad2:	e7e6      	b.n	8009aa2 <__ieee754_powf+0x1e>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	da1f      	bge.n	8009b18 <__ieee754_powf+0x94>
 8009ad8:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 8009adc:	f080 82f8 	bcs.w	800a0d0 <__ieee754_powf+0x64c>
 8009ae0:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8009ae4:	d32f      	bcc.n	8009b46 <__ieee754_powf+0xc2>
 8009ae6:	ea4f 53eb 	mov.w	r3, fp, asr #23
 8009aea:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8009aee:	fa4b f503 	asr.w	r5, fp, r3
 8009af2:	fa05 f303 	lsl.w	r3, r5, r3
 8009af6:	455b      	cmp	r3, fp
 8009af8:	d123      	bne.n	8009b42 <__ieee754_powf+0xbe>
 8009afa:	f005 0501 	and.w	r5, r5, #1
 8009afe:	f1c5 0502 	rsb	r5, r5, #2
 8009b02:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8009b06:	d11f      	bne.n	8009b48 <__ieee754_powf+0xc4>
 8009b08:	2c00      	cmp	r4, #0
 8009b0a:	4649      	mov	r1, r9
 8009b0c:	da15      	bge.n	8009b3a <__ieee754_powf+0xb6>
 8009b0e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009b12:	f7f6 fcef 	bl	80004f4 <__aeabi_fdiv>
 8009b16:	e7ca      	b.n	8009aae <__ieee754_powf+0x2a>
 8009b18:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8009b1c:	d111      	bne.n	8009b42 <__ieee754_powf+0xbe>
 8009b1e:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8009b22:	f000 82d0 	beq.w	800a0c6 <__ieee754_powf+0x642>
 8009b26:	d904      	bls.n	8009b32 <__ieee754_powf+0xae>
 8009b28:	2c00      	cmp	r4, #0
 8009b2a:	f280 82cf 	bge.w	800a0cc <__ieee754_powf+0x648>
 8009b2e:	2100      	movs	r1, #0
 8009b30:	e003      	b.n	8009b3a <__ieee754_powf+0xb6>
 8009b32:	2c00      	cmp	r4, #0
 8009b34:	dafb      	bge.n	8009b2e <__ieee754_powf+0xaa>
 8009b36:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 8009b3a:	4608      	mov	r0, r1
 8009b3c:	b007      	add	sp, #28
 8009b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b42:	2500      	movs	r5, #0
 8009b44:	e7dd      	b.n	8009b02 <__ieee754_powf+0x7e>
 8009b46:	2500      	movs	r5, #0
 8009b48:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8009b4c:	d104      	bne.n	8009b58 <__ieee754_powf+0xd4>
 8009b4e:	4649      	mov	r1, r9
 8009b50:	4648      	mov	r0, r9
 8009b52:	f7f6 fc1b 	bl	800038c <__aeabi_fmul>
 8009b56:	e7aa      	b.n	8009aae <__ieee754_powf+0x2a>
 8009b58:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8009b5c:	f040 82bd 	bne.w	800a0da <__ieee754_powf+0x656>
 8009b60:	2e00      	cmp	r6, #0
 8009b62:	f2c0 82ba 	blt.w	800a0da <__ieee754_powf+0x656>
 8009b66:	4648      	mov	r0, r9
 8009b68:	b007      	add	sp, #28
 8009b6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6e:	f7ff be23 	b.w	80097b8 <__ieee754_sqrtf>
 8009b72:	2d01      	cmp	r5, #1
 8009b74:	d1e1      	bne.n	8009b3a <__ieee754_powf+0xb6>
 8009b76:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8009b7a:	e798      	b.n	8009aae <__ieee754_powf+0x2a>
 8009b7c:	0ff3      	lsrs	r3, r6, #31
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	9303      	str	r3, [sp, #12]
 8009b82:	432b      	orrs	r3, r5
 8009b84:	d101      	bne.n	8009b8a <__ieee754_powf+0x106>
 8009b86:	4649      	mov	r1, r9
 8009b88:	e2c5      	b.n	800a116 <__ieee754_powf+0x692>
 8009b8a:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 8009b8e:	f240 809b 	bls.w	8009cc8 <__ieee754_powf+0x244>
 8009b92:	4b46      	ldr	r3, [pc, #280]	@ (8009cac <__ieee754_powf+0x228>)
 8009b94:	4598      	cmp	r8, r3
 8009b96:	d807      	bhi.n	8009ba8 <__ieee754_powf+0x124>
 8009b98:	2c00      	cmp	r4, #0
 8009b9a:	da0a      	bge.n	8009bb2 <__ieee754_powf+0x12e>
 8009b9c:	2000      	movs	r0, #0
 8009b9e:	b007      	add	sp, #28
 8009ba0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba4:	f000 bc9d 	b.w	800a4e2 <__math_oflowf>
 8009ba8:	4b41      	ldr	r3, [pc, #260]	@ (8009cb0 <__ieee754_powf+0x22c>)
 8009baa:	4598      	cmp	r8, r3
 8009bac:	d907      	bls.n	8009bbe <__ieee754_powf+0x13a>
 8009bae:	2c00      	cmp	r4, #0
 8009bb0:	dcf4      	bgt.n	8009b9c <__ieee754_powf+0x118>
 8009bb2:	2000      	movs	r0, #0
 8009bb4:	b007      	add	sp, #28
 8009bb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bba:	f000 bc8e 	b.w	800a4da <__math_uflowf>
 8009bbe:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009bc2:	f7f6 fad9 	bl	8000178 <__aeabi_fsub>
 8009bc6:	493b      	ldr	r1, [pc, #236]	@ (8009cb4 <__ieee754_powf+0x230>)
 8009bc8:	4606      	mov	r6, r0
 8009bca:	f7f6 fbdf 	bl	800038c <__aeabi_fmul>
 8009bce:	493a      	ldr	r1, [pc, #232]	@ (8009cb8 <__ieee754_powf+0x234>)
 8009bd0:	4680      	mov	r8, r0
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	f7f6 fbda 	bl	800038c <__aeabi_fmul>
 8009bd8:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8009bdc:	4681      	mov	r9, r0
 8009bde:	4630      	mov	r0, r6
 8009be0:	f7f6 fbd4 	bl	800038c <__aeabi_fmul>
 8009be4:	4601      	mov	r1, r0
 8009be6:	4835      	ldr	r0, [pc, #212]	@ (8009cbc <__ieee754_powf+0x238>)
 8009be8:	f7f6 fac6 	bl	8000178 <__aeabi_fsub>
 8009bec:	4631      	mov	r1, r6
 8009bee:	f7f6 fbcd 	bl	800038c <__aeabi_fmul>
 8009bf2:	4601      	mov	r1, r0
 8009bf4:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8009bf8:	f7f6 fabe 	bl	8000178 <__aeabi_fsub>
 8009bfc:	4631      	mov	r1, r6
 8009bfe:	4682      	mov	sl, r0
 8009c00:	4630      	mov	r0, r6
 8009c02:	f7f6 fbc3 	bl	800038c <__aeabi_fmul>
 8009c06:	4601      	mov	r1, r0
 8009c08:	4650      	mov	r0, sl
 8009c0a:	f7f6 fbbf 	bl	800038c <__aeabi_fmul>
 8009c0e:	492c      	ldr	r1, [pc, #176]	@ (8009cc0 <__ieee754_powf+0x23c>)
 8009c10:	f7f6 fbbc 	bl	800038c <__aeabi_fmul>
 8009c14:	4601      	mov	r1, r0
 8009c16:	4648      	mov	r0, r9
 8009c18:	f7f6 faae 	bl	8000178 <__aeabi_fsub>
 8009c1c:	4601      	mov	r1, r0
 8009c1e:	4606      	mov	r6, r0
 8009c20:	4640      	mov	r0, r8
 8009c22:	f7f6 faab 	bl	800017c <__addsf3>
 8009c26:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8009c2a:	f02b 0b0f 	bic.w	fp, fp, #15
 8009c2e:	4641      	mov	r1, r8
 8009c30:	4658      	mov	r0, fp
 8009c32:	f7f6 faa1 	bl	8000178 <__aeabi_fsub>
 8009c36:	4601      	mov	r1, r0
 8009c38:	4630      	mov	r0, r6
 8009c3a:	f7f6 fa9d 	bl	8000178 <__aeabi_fsub>
 8009c3e:	9b03      	ldr	r3, [sp, #12]
 8009c40:	3d01      	subs	r5, #1
 8009c42:	f36f 040b 	bfc	r4, #0, #12
 8009c46:	431d      	orrs	r5, r3
 8009c48:	4606      	mov	r6, r0
 8009c4a:	4621      	mov	r1, r4
 8009c4c:	4638      	mov	r0, r7
 8009c4e:	bf14      	ite	ne
 8009c50:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 8009c54:	4d1b      	ldreq	r5, [pc, #108]	@ (8009cc4 <__ieee754_powf+0x240>)
 8009c56:	f7f6 fa8f 	bl	8000178 <__aeabi_fsub>
 8009c5a:	4659      	mov	r1, fp
 8009c5c:	f7f6 fb96 	bl	800038c <__aeabi_fmul>
 8009c60:	4639      	mov	r1, r7
 8009c62:	4680      	mov	r8, r0
 8009c64:	4630      	mov	r0, r6
 8009c66:	f7f6 fb91 	bl	800038c <__aeabi_fmul>
 8009c6a:	4601      	mov	r1, r0
 8009c6c:	4640      	mov	r0, r8
 8009c6e:	f7f6 fa85 	bl	800017c <__addsf3>
 8009c72:	4621      	mov	r1, r4
 8009c74:	4606      	mov	r6, r0
 8009c76:	4658      	mov	r0, fp
 8009c78:	f7f6 fb88 	bl	800038c <__aeabi_fmul>
 8009c7c:	4601      	mov	r1, r0
 8009c7e:	4607      	mov	r7, r0
 8009c80:	4630      	mov	r0, r6
 8009c82:	f7f6 fa7b 	bl	800017c <__addsf3>
 8009c86:	2800      	cmp	r0, #0
 8009c88:	4604      	mov	r4, r0
 8009c8a:	4680      	mov	r8, r0
 8009c8c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8009c90:	f340 813f 	ble.w	8009f12 <__ieee754_powf+0x48e>
 8009c94:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8009c98:	f240 8128 	bls.w	8009eec <__ieee754_powf+0x468>
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	f7f6 fd12 	bl	80006c8 <__aeabi_fcmplt>
 8009ca4:	3800      	subs	r0, #0
 8009ca6:	bf18      	it	ne
 8009ca8:	2001      	movne	r0, #1
 8009caa:	e778      	b.n	8009b9e <__ieee754_powf+0x11a>
 8009cac:	3f7ffff3 	.word	0x3f7ffff3
 8009cb0:	3f800007 	.word	0x3f800007
 8009cb4:	3fb8aa00 	.word	0x3fb8aa00
 8009cb8:	36eca570 	.word	0x36eca570
 8009cbc:	3eaaaaab 	.word	0x3eaaaaab
 8009cc0:	3fb8aa3b 	.word	0x3fb8aa3b
 8009cc4:	bf800000 	.word	0xbf800000
 8009cc8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8009ccc:	f040 810a 	bne.w	8009ee4 <__ieee754_powf+0x460>
 8009cd0:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8009cd4:	f7f6 fb5a 	bl	800038c <__aeabi_fmul>
 8009cd8:	f06f 0217 	mvn.w	r2, #23
 8009cdc:	4682      	mov	sl, r0
 8009cde:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8009ce2:	3b7f      	subs	r3, #127	@ 0x7f
 8009ce4:	441a      	add	r2, r3
 8009ce6:	4b95      	ldr	r3, [pc, #596]	@ (8009f3c <__ieee754_powf+0x4b8>)
 8009ce8:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 8009cec:	459a      	cmp	sl, r3
 8009cee:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 8009cf2:	dd06      	ble.n	8009d02 <__ieee754_powf+0x27e>
 8009cf4:	4b92      	ldr	r3, [pc, #584]	@ (8009f40 <__ieee754_powf+0x4bc>)
 8009cf6:	459a      	cmp	sl, r3
 8009cf8:	f340 80f6 	ble.w	8009ee8 <__ieee754_powf+0x464>
 8009cfc:	3201      	adds	r2, #1
 8009cfe:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 8009d02:	2300      	movs	r3, #0
 8009d04:	9301      	str	r3, [sp, #4]
 8009d06:	9205      	str	r2, [sp, #20]
 8009d08:	4b8e      	ldr	r3, [pc, #568]	@ (8009f44 <__ieee754_powf+0x4c0>)
 8009d0a:	9a01      	ldr	r2, [sp, #4]
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8009d12:	46b2      	mov	sl, r6
 8009d14:	4659      	mov	r1, fp
 8009d16:	f7f6 fa2f 	bl	8000178 <__aeabi_fsub>
 8009d1a:	4631      	mov	r1, r6
 8009d1c:	4681      	mov	r9, r0
 8009d1e:	4658      	mov	r0, fp
 8009d20:	f7f6 fa2c 	bl	800017c <__addsf3>
 8009d24:	4601      	mov	r1, r0
 8009d26:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009d2a:	f7f6 fbe3 	bl	80004f4 <__aeabi_fdiv>
 8009d2e:	4601      	mov	r1, r0
 8009d30:	9004      	str	r0, [sp, #16]
 8009d32:	4648      	mov	r0, r9
 8009d34:	f7f6 fb2a 	bl	800038c <__aeabi_fmul>
 8009d38:	9002      	str	r0, [sp, #8]
 8009d3a:	9b02      	ldr	r3, [sp, #8]
 8009d3c:	1076      	asrs	r6, r6, #1
 8009d3e:	f36f 030b 	bfc	r3, #0, #12
 8009d42:	4698      	mov	r8, r3
 8009d44:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 8009d48:	9b01      	ldr	r3, [sp, #4]
 8009d4a:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 8009d4e:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 8009d52:	4631      	mov	r1, r6
 8009d54:	4640      	mov	r0, r8
 8009d56:	f7f6 fb19 	bl	800038c <__aeabi_fmul>
 8009d5a:	4601      	mov	r1, r0
 8009d5c:	4648      	mov	r0, r9
 8009d5e:	f7f6 fa0b 	bl	8000178 <__aeabi_fsub>
 8009d62:	4659      	mov	r1, fp
 8009d64:	4681      	mov	r9, r0
 8009d66:	4630      	mov	r0, r6
 8009d68:	f7f6 fa06 	bl	8000178 <__aeabi_fsub>
 8009d6c:	4601      	mov	r1, r0
 8009d6e:	4650      	mov	r0, sl
 8009d70:	f7f6 fa02 	bl	8000178 <__aeabi_fsub>
 8009d74:	4641      	mov	r1, r8
 8009d76:	f7f6 fb09 	bl	800038c <__aeabi_fmul>
 8009d7a:	4601      	mov	r1, r0
 8009d7c:	4648      	mov	r0, r9
 8009d7e:	f7f6 f9fb 	bl	8000178 <__aeabi_fsub>
 8009d82:	9b04      	ldr	r3, [sp, #16]
 8009d84:	4619      	mov	r1, r3
 8009d86:	f7f6 fb01 	bl	800038c <__aeabi_fmul>
 8009d8a:	9902      	ldr	r1, [sp, #8]
 8009d8c:	4683      	mov	fp, r0
 8009d8e:	4608      	mov	r0, r1
 8009d90:	f7f6 fafc 	bl	800038c <__aeabi_fmul>
 8009d94:	4606      	mov	r6, r0
 8009d96:	496c      	ldr	r1, [pc, #432]	@ (8009f48 <__ieee754_powf+0x4c4>)
 8009d98:	f7f6 faf8 	bl	800038c <__aeabi_fmul>
 8009d9c:	496b      	ldr	r1, [pc, #428]	@ (8009f4c <__ieee754_powf+0x4c8>)
 8009d9e:	f7f6 f9ed 	bl	800017c <__addsf3>
 8009da2:	4631      	mov	r1, r6
 8009da4:	f7f6 faf2 	bl	800038c <__aeabi_fmul>
 8009da8:	4969      	ldr	r1, [pc, #420]	@ (8009f50 <__ieee754_powf+0x4cc>)
 8009daa:	f7f6 f9e7 	bl	800017c <__addsf3>
 8009dae:	4631      	mov	r1, r6
 8009db0:	f7f6 faec 	bl	800038c <__aeabi_fmul>
 8009db4:	4967      	ldr	r1, [pc, #412]	@ (8009f54 <__ieee754_powf+0x4d0>)
 8009db6:	f7f6 f9e1 	bl	800017c <__addsf3>
 8009dba:	4631      	mov	r1, r6
 8009dbc:	f7f6 fae6 	bl	800038c <__aeabi_fmul>
 8009dc0:	4965      	ldr	r1, [pc, #404]	@ (8009f58 <__ieee754_powf+0x4d4>)
 8009dc2:	f7f6 f9db 	bl	800017c <__addsf3>
 8009dc6:	4631      	mov	r1, r6
 8009dc8:	f7f6 fae0 	bl	800038c <__aeabi_fmul>
 8009dcc:	4963      	ldr	r1, [pc, #396]	@ (8009f5c <__ieee754_powf+0x4d8>)
 8009dce:	f7f6 f9d5 	bl	800017c <__addsf3>
 8009dd2:	4631      	mov	r1, r6
 8009dd4:	4681      	mov	r9, r0
 8009dd6:	4630      	mov	r0, r6
 8009dd8:	f7f6 fad8 	bl	800038c <__aeabi_fmul>
 8009ddc:	4601      	mov	r1, r0
 8009dde:	4648      	mov	r0, r9
 8009de0:	f7f6 fad4 	bl	800038c <__aeabi_fmul>
 8009de4:	4606      	mov	r6, r0
 8009de6:	4641      	mov	r1, r8
 8009de8:	9802      	ldr	r0, [sp, #8]
 8009dea:	f7f6 f9c7 	bl	800017c <__addsf3>
 8009dee:	4659      	mov	r1, fp
 8009df0:	f7f6 facc 	bl	800038c <__aeabi_fmul>
 8009df4:	4631      	mov	r1, r6
 8009df6:	f7f6 f9c1 	bl	800017c <__addsf3>
 8009dfa:	4641      	mov	r1, r8
 8009dfc:	4681      	mov	r9, r0
 8009dfe:	4640      	mov	r0, r8
 8009e00:	f7f6 fac4 	bl	800038c <__aeabi_fmul>
 8009e04:	4956      	ldr	r1, [pc, #344]	@ (8009f60 <__ieee754_powf+0x4dc>)
 8009e06:	4682      	mov	sl, r0
 8009e08:	f7f6 f9b8 	bl	800017c <__addsf3>
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	f7f6 f9b5 	bl	800017c <__addsf3>
 8009e12:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8009e16:	f026 060f 	bic.w	r6, r6, #15
 8009e1a:	4631      	mov	r1, r6
 8009e1c:	4640      	mov	r0, r8
 8009e1e:	f7f6 fab5 	bl	800038c <__aeabi_fmul>
 8009e22:	494f      	ldr	r1, [pc, #316]	@ (8009f60 <__ieee754_powf+0x4dc>)
 8009e24:	4680      	mov	r8, r0
 8009e26:	4630      	mov	r0, r6
 8009e28:	f7f6 f9a6 	bl	8000178 <__aeabi_fsub>
 8009e2c:	4651      	mov	r1, sl
 8009e2e:	f7f6 f9a3 	bl	8000178 <__aeabi_fsub>
 8009e32:	4601      	mov	r1, r0
 8009e34:	4648      	mov	r0, r9
 8009e36:	f7f6 f99f 	bl	8000178 <__aeabi_fsub>
 8009e3a:	9902      	ldr	r1, [sp, #8]
 8009e3c:	f7f6 faa6 	bl	800038c <__aeabi_fmul>
 8009e40:	4631      	mov	r1, r6
 8009e42:	4681      	mov	r9, r0
 8009e44:	4658      	mov	r0, fp
 8009e46:	f7f6 faa1 	bl	800038c <__aeabi_fmul>
 8009e4a:	4601      	mov	r1, r0
 8009e4c:	4648      	mov	r0, r9
 8009e4e:	f7f6 f995 	bl	800017c <__addsf3>
 8009e52:	4682      	mov	sl, r0
 8009e54:	4601      	mov	r1, r0
 8009e56:	4640      	mov	r0, r8
 8009e58:	f7f6 f990 	bl	800017c <__addsf3>
 8009e5c:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8009e60:	f026 060f 	bic.w	r6, r6, #15
 8009e64:	4630      	mov	r0, r6
 8009e66:	493f      	ldr	r1, [pc, #252]	@ (8009f64 <__ieee754_powf+0x4e0>)
 8009e68:	f7f6 fa90 	bl	800038c <__aeabi_fmul>
 8009e6c:	4641      	mov	r1, r8
 8009e6e:	4681      	mov	r9, r0
 8009e70:	4630      	mov	r0, r6
 8009e72:	f7f6 f981 	bl	8000178 <__aeabi_fsub>
 8009e76:	4601      	mov	r1, r0
 8009e78:	4650      	mov	r0, sl
 8009e7a:	f7f6 f97d 	bl	8000178 <__aeabi_fsub>
 8009e7e:	493a      	ldr	r1, [pc, #232]	@ (8009f68 <__ieee754_powf+0x4e4>)
 8009e80:	f7f6 fa84 	bl	800038c <__aeabi_fmul>
 8009e84:	4939      	ldr	r1, [pc, #228]	@ (8009f6c <__ieee754_powf+0x4e8>)
 8009e86:	4680      	mov	r8, r0
 8009e88:	4630      	mov	r0, r6
 8009e8a:	f7f6 fa7f 	bl	800038c <__aeabi_fmul>
 8009e8e:	4601      	mov	r1, r0
 8009e90:	4640      	mov	r0, r8
 8009e92:	f7f6 f973 	bl	800017c <__addsf3>
 8009e96:	4b36      	ldr	r3, [pc, #216]	@ (8009f70 <__ieee754_powf+0x4ec>)
 8009e98:	9a01      	ldr	r2, [sp, #4]
 8009e9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e9e:	f7f6 f96d 	bl	800017c <__addsf3>
 8009ea2:	9a05      	ldr	r2, [sp, #20]
 8009ea4:	4606      	mov	r6, r0
 8009ea6:	4610      	mov	r0, r2
 8009ea8:	f7f6 fa1c 	bl	80002e4 <__aeabi_i2f>
 8009eac:	4680      	mov	r8, r0
 8009eae:	4b31      	ldr	r3, [pc, #196]	@ (8009f74 <__ieee754_powf+0x4f0>)
 8009eb0:	9a01      	ldr	r2, [sp, #4]
 8009eb2:	4631      	mov	r1, r6
 8009eb4:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8009eb8:	4648      	mov	r0, r9
 8009eba:	f7f6 f95f 	bl	800017c <__addsf3>
 8009ebe:	4651      	mov	r1, sl
 8009ec0:	f7f6 f95c 	bl	800017c <__addsf3>
 8009ec4:	4641      	mov	r1, r8
 8009ec6:	f7f6 f959 	bl	800017c <__addsf3>
 8009eca:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8009ece:	f02b 0b0f 	bic.w	fp, fp, #15
 8009ed2:	4641      	mov	r1, r8
 8009ed4:	4658      	mov	r0, fp
 8009ed6:	f7f6 f94f 	bl	8000178 <__aeabi_fsub>
 8009eda:	4651      	mov	r1, sl
 8009edc:	f7f6 f94c 	bl	8000178 <__aeabi_fsub>
 8009ee0:	4649      	mov	r1, r9
 8009ee2:	e6a6      	b.n	8009c32 <__ieee754_powf+0x1ae>
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	e6fa      	b.n	8009cde <__ieee754_powf+0x25a>
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e70b      	b.n	8009d04 <__ieee754_powf+0x280>
 8009eec:	d148      	bne.n	8009f80 <__ieee754_powf+0x4fc>
 8009eee:	4922      	ldr	r1, [pc, #136]	@ (8009f78 <__ieee754_powf+0x4f4>)
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	f7f6 f943 	bl	800017c <__addsf3>
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	4681      	mov	r9, r0
 8009efa:	4620      	mov	r0, r4
 8009efc:	f7f6 f93c 	bl	8000178 <__aeabi_fsub>
 8009f00:	4601      	mov	r1, r0
 8009f02:	4648      	mov	r0, r9
 8009f04:	f7f6 fbfe 	bl	8000704 <__aeabi_fcmpgt>
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	f47f aec7 	bne.w	8009c9c <__ieee754_powf+0x218>
 8009f0e:	2386      	movs	r3, #134	@ 0x86
 8009f10:	e03b      	b.n	8009f8a <__ieee754_powf+0x506>
 8009f12:	4a1a      	ldr	r2, [pc, #104]	@ (8009f7c <__ieee754_powf+0x4f8>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d907      	bls.n	8009f28 <__ieee754_powf+0x4a4>
 8009f18:	2100      	movs	r1, #0
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	f7f6 fbd4 	bl	80006c8 <__aeabi_fcmplt>
 8009f20:	3800      	subs	r0, #0
 8009f22:	bf18      	it	ne
 8009f24:	2001      	movne	r0, #1
 8009f26:	e645      	b.n	8009bb4 <__ieee754_powf+0x130>
 8009f28:	d12a      	bne.n	8009f80 <__ieee754_powf+0x4fc>
 8009f2a:	4639      	mov	r1, r7
 8009f2c:	f7f6 f924 	bl	8000178 <__aeabi_fsub>
 8009f30:	4631      	mov	r1, r6
 8009f32:	f7f6 fbdd 	bl	80006f0 <__aeabi_fcmpge>
 8009f36:	2800      	cmp	r0, #0
 8009f38:	d0e9      	beq.n	8009f0e <__ieee754_powf+0x48a>
 8009f3a:	e7ed      	b.n	8009f18 <__ieee754_powf+0x494>
 8009f3c:	001cc471 	.word	0x001cc471
 8009f40:	005db3d6 	.word	0x005db3d6
 8009f44:	0800b020 	.word	0x0800b020
 8009f48:	3e53f142 	.word	0x3e53f142
 8009f4c:	3e6c3255 	.word	0x3e6c3255
 8009f50:	3e8ba305 	.word	0x3e8ba305
 8009f54:	3eaaaaab 	.word	0x3eaaaaab
 8009f58:	3edb6db7 	.word	0x3edb6db7
 8009f5c:	3f19999a 	.word	0x3f19999a
 8009f60:	40400000 	.word	0x40400000
 8009f64:	3f763800 	.word	0x3f763800
 8009f68:	3f76384f 	.word	0x3f76384f
 8009f6c:	369dc3a0 	.word	0x369dc3a0
 8009f70:	0800b010 	.word	0x0800b010
 8009f74:	0800b018 	.word	0x0800b018
 8009f78:	3338aa3c 	.word	0x3338aa3c
 8009f7c:	43160000 	.word	0x43160000
 8009f80:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8009f84:	f240 809b 	bls.w	800a0be <__ieee754_powf+0x63a>
 8009f88:	15db      	asrs	r3, r3, #23
 8009f8a:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 8009f8e:	3b7e      	subs	r3, #126	@ 0x7e
 8009f90:	411c      	asrs	r4, r3
 8009f92:	4444      	add	r4, r8
 8009f94:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8009f98:	4961      	ldr	r1, [pc, #388]	@ (800a120 <__ieee754_powf+0x69c>)
 8009f9a:	3b7f      	subs	r3, #127	@ 0x7f
 8009f9c:	4119      	asrs	r1, r3
 8009f9e:	4021      	ands	r1, r4
 8009fa0:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8009fa4:	f1c3 0317 	rsb	r3, r3, #23
 8009fa8:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 8009fac:	4638      	mov	r0, r7
 8009fae:	411c      	asrs	r4, r3
 8009fb0:	f1b8 0f00 	cmp.w	r8, #0
 8009fb4:	bfb8      	it	lt
 8009fb6:	4264      	neglt	r4, r4
 8009fb8:	f7f6 f8de 	bl	8000178 <__aeabi_fsub>
 8009fbc:	4607      	mov	r7, r0
 8009fbe:	4631      	mov	r1, r6
 8009fc0:	4638      	mov	r0, r7
 8009fc2:	f7f6 f8db 	bl	800017c <__addsf3>
 8009fc6:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 8009fca:	f028 080f 	bic.w	r8, r8, #15
 8009fce:	4640      	mov	r0, r8
 8009fd0:	4954      	ldr	r1, [pc, #336]	@ (800a124 <__ieee754_powf+0x6a0>)
 8009fd2:	f7f6 f9db 	bl	800038c <__aeabi_fmul>
 8009fd6:	4639      	mov	r1, r7
 8009fd8:	4681      	mov	r9, r0
 8009fda:	4640      	mov	r0, r8
 8009fdc:	f7f6 f8cc 	bl	8000178 <__aeabi_fsub>
 8009fe0:	4601      	mov	r1, r0
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f7f6 f8c8 	bl	8000178 <__aeabi_fsub>
 8009fe8:	494f      	ldr	r1, [pc, #316]	@ (800a128 <__ieee754_powf+0x6a4>)
 8009fea:	f7f6 f9cf 	bl	800038c <__aeabi_fmul>
 8009fee:	494f      	ldr	r1, [pc, #316]	@ (800a12c <__ieee754_powf+0x6a8>)
 8009ff0:	4606      	mov	r6, r0
 8009ff2:	4640      	mov	r0, r8
 8009ff4:	f7f6 f9ca 	bl	800038c <__aeabi_fmul>
 8009ff8:	4601      	mov	r1, r0
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	f7f6 f8be 	bl	800017c <__addsf3>
 800a000:	4607      	mov	r7, r0
 800a002:	4601      	mov	r1, r0
 800a004:	4648      	mov	r0, r9
 800a006:	f7f6 f8b9 	bl	800017c <__addsf3>
 800a00a:	4649      	mov	r1, r9
 800a00c:	4606      	mov	r6, r0
 800a00e:	f7f6 f8b3 	bl	8000178 <__aeabi_fsub>
 800a012:	4601      	mov	r1, r0
 800a014:	4638      	mov	r0, r7
 800a016:	f7f6 f8af 	bl	8000178 <__aeabi_fsub>
 800a01a:	4631      	mov	r1, r6
 800a01c:	4680      	mov	r8, r0
 800a01e:	4630      	mov	r0, r6
 800a020:	f7f6 f9b4 	bl	800038c <__aeabi_fmul>
 800a024:	4607      	mov	r7, r0
 800a026:	4942      	ldr	r1, [pc, #264]	@ (800a130 <__ieee754_powf+0x6ac>)
 800a028:	f7f6 f9b0 	bl	800038c <__aeabi_fmul>
 800a02c:	4941      	ldr	r1, [pc, #260]	@ (800a134 <__ieee754_powf+0x6b0>)
 800a02e:	f7f6 f8a3 	bl	8000178 <__aeabi_fsub>
 800a032:	4639      	mov	r1, r7
 800a034:	f7f6 f9aa 	bl	800038c <__aeabi_fmul>
 800a038:	493f      	ldr	r1, [pc, #252]	@ (800a138 <__ieee754_powf+0x6b4>)
 800a03a:	f7f6 f89f 	bl	800017c <__addsf3>
 800a03e:	4639      	mov	r1, r7
 800a040:	f7f6 f9a4 	bl	800038c <__aeabi_fmul>
 800a044:	493d      	ldr	r1, [pc, #244]	@ (800a13c <__ieee754_powf+0x6b8>)
 800a046:	f7f6 f897 	bl	8000178 <__aeabi_fsub>
 800a04a:	4639      	mov	r1, r7
 800a04c:	f7f6 f99e 	bl	800038c <__aeabi_fmul>
 800a050:	493b      	ldr	r1, [pc, #236]	@ (800a140 <__ieee754_powf+0x6bc>)
 800a052:	f7f6 f893 	bl	800017c <__addsf3>
 800a056:	4639      	mov	r1, r7
 800a058:	f7f6 f998 	bl	800038c <__aeabi_fmul>
 800a05c:	4601      	mov	r1, r0
 800a05e:	4630      	mov	r0, r6
 800a060:	f7f6 f88a 	bl	8000178 <__aeabi_fsub>
 800a064:	4607      	mov	r7, r0
 800a066:	4601      	mov	r1, r0
 800a068:	4630      	mov	r0, r6
 800a06a:	f7f6 f98f 	bl	800038c <__aeabi_fmul>
 800a06e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800a072:	4681      	mov	r9, r0
 800a074:	4638      	mov	r0, r7
 800a076:	f7f6 f87f 	bl	8000178 <__aeabi_fsub>
 800a07a:	4601      	mov	r1, r0
 800a07c:	4648      	mov	r0, r9
 800a07e:	f7f6 fa39 	bl	80004f4 <__aeabi_fdiv>
 800a082:	4641      	mov	r1, r8
 800a084:	4607      	mov	r7, r0
 800a086:	4630      	mov	r0, r6
 800a088:	f7f6 f980 	bl	800038c <__aeabi_fmul>
 800a08c:	4641      	mov	r1, r8
 800a08e:	f7f6 f875 	bl	800017c <__addsf3>
 800a092:	4601      	mov	r1, r0
 800a094:	4638      	mov	r0, r7
 800a096:	f7f6 f86f 	bl	8000178 <__aeabi_fsub>
 800a09a:	4631      	mov	r1, r6
 800a09c:	f7f6 f86c 	bl	8000178 <__aeabi_fsub>
 800a0a0:	4601      	mov	r1, r0
 800a0a2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a0a6:	f7f6 f867 	bl	8000178 <__aeabi_fsub>
 800a0aa:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800a0ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a0b2:	da06      	bge.n	800a0c2 <__ieee754_powf+0x63e>
 800a0b4:	4621      	mov	r1, r4
 800a0b6:	f000 f9af 	bl	800a418 <scalbnf>
 800a0ba:	4629      	mov	r1, r5
 800a0bc:	e549      	b.n	8009b52 <__ieee754_powf+0xce>
 800a0be:	2400      	movs	r4, #0
 800a0c0:	e77d      	b.n	8009fbe <__ieee754_powf+0x53a>
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	e7f9      	b.n	800a0ba <__ieee754_powf+0x636>
 800a0c6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800a0ca:	e536      	b.n	8009b3a <__ieee754_powf+0xb6>
 800a0cc:	4639      	mov	r1, r7
 800a0ce:	e534      	b.n	8009b3a <__ieee754_powf+0xb6>
 800a0d0:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800a0d4:	f43f ad23 	beq.w	8009b1e <__ieee754_powf+0x9a>
 800a0d8:	2502      	movs	r5, #2
 800a0da:	4648      	mov	r0, r9
 800a0dc:	f000 f998 	bl	800a410 <fabsf>
 800a0e0:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800a0e4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800a0e8:	46c2      	mov	sl, r8
 800a0ea:	4601      	mov	r1, r0
 800a0ec:	d003      	beq.n	800a0f6 <__ieee754_powf+0x672>
 800a0ee:	f1b8 0f00 	cmp.w	r8, #0
 800a0f2:	f47f ad43 	bne.w	8009b7c <__ieee754_powf+0xf8>
 800a0f6:	2c00      	cmp	r4, #0
 800a0f8:	da04      	bge.n	800a104 <__ieee754_powf+0x680>
 800a0fa:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a0fe:	f7f6 f9f9 	bl	80004f4 <__aeabi_fdiv>
 800a102:	4601      	mov	r1, r0
 800a104:	2e00      	cmp	r6, #0
 800a106:	f6bf ad18 	bge.w	8009b3a <__ieee754_powf+0xb6>
 800a10a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800a10e:	ea58 0805 	orrs.w	r8, r8, r5
 800a112:	f47f ad2e 	bne.w	8009b72 <__ieee754_powf+0xee>
 800a116:	4608      	mov	r0, r1
 800a118:	f7f6 f82e 	bl	8000178 <__aeabi_fsub>
 800a11c:	4601      	mov	r1, r0
 800a11e:	e4f8      	b.n	8009b12 <__ieee754_powf+0x8e>
 800a120:	ff800000 	.word	0xff800000
 800a124:	3f317200 	.word	0x3f317200
 800a128:	3f317218 	.word	0x3f317218
 800a12c:	35bfbe8c 	.word	0x35bfbe8c
 800a130:	3331bb4c 	.word	0x3331bb4c
 800a134:	35ddea0e 	.word	0x35ddea0e
 800a138:	388ab355 	.word	0x388ab355
 800a13c:	3b360b61 	.word	0x3b360b61
 800a140:	3e2aaaab 	.word	0x3e2aaaab

0800a144 <__ieee754_rem_pio2f>:
 800a144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a148:	4aa4      	ldr	r2, [pc, #656]	@ (800a3dc <__ieee754_rem_pio2f+0x298>)
 800a14a:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800a14e:	4590      	cmp	r8, r2
 800a150:	460c      	mov	r4, r1
 800a152:	4682      	mov	sl, r0
 800a154:	b087      	sub	sp, #28
 800a156:	d804      	bhi.n	800a162 <__ieee754_rem_pio2f+0x1e>
 800a158:	2300      	movs	r3, #0
 800a15a:	6008      	str	r0, [r1, #0]
 800a15c:	604b      	str	r3, [r1, #4]
 800a15e:	2500      	movs	r5, #0
 800a160:	e01d      	b.n	800a19e <__ieee754_rem_pio2f+0x5a>
 800a162:	4a9f      	ldr	r2, [pc, #636]	@ (800a3e0 <__ieee754_rem_pio2f+0x29c>)
 800a164:	4590      	cmp	r8, r2
 800a166:	d84f      	bhi.n	800a208 <__ieee754_rem_pio2f+0xc4>
 800a168:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800a16c:	2800      	cmp	r0, #0
 800a16e:	499d      	ldr	r1, [pc, #628]	@ (800a3e4 <__ieee754_rem_pio2f+0x2a0>)
 800a170:	4f9d      	ldr	r7, [pc, #628]	@ (800a3e8 <__ieee754_rem_pio2f+0x2a4>)
 800a172:	f025 050f 	bic.w	r5, r5, #15
 800a176:	dd24      	ble.n	800a1c2 <__ieee754_rem_pio2f+0x7e>
 800a178:	f7f5 fffe 	bl	8000178 <__aeabi_fsub>
 800a17c:	42bd      	cmp	r5, r7
 800a17e:	4606      	mov	r6, r0
 800a180:	d011      	beq.n	800a1a6 <__ieee754_rem_pio2f+0x62>
 800a182:	499a      	ldr	r1, [pc, #616]	@ (800a3ec <__ieee754_rem_pio2f+0x2a8>)
 800a184:	f7f5 fff8 	bl	8000178 <__aeabi_fsub>
 800a188:	4601      	mov	r1, r0
 800a18a:	4605      	mov	r5, r0
 800a18c:	4630      	mov	r0, r6
 800a18e:	f7f5 fff3 	bl	8000178 <__aeabi_fsub>
 800a192:	4996      	ldr	r1, [pc, #600]	@ (800a3ec <__ieee754_rem_pio2f+0x2a8>)
 800a194:	f7f5 fff0 	bl	8000178 <__aeabi_fsub>
 800a198:	6025      	str	r5, [r4, #0]
 800a19a:	2501      	movs	r5, #1
 800a19c:	6060      	str	r0, [r4, #4]
 800a19e:	4628      	mov	r0, r5
 800a1a0:	b007      	add	sp, #28
 800a1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a6:	4992      	ldr	r1, [pc, #584]	@ (800a3f0 <__ieee754_rem_pio2f+0x2ac>)
 800a1a8:	f7f5 ffe6 	bl	8000178 <__aeabi_fsub>
 800a1ac:	4991      	ldr	r1, [pc, #580]	@ (800a3f4 <__ieee754_rem_pio2f+0x2b0>)
 800a1ae:	4606      	mov	r6, r0
 800a1b0:	f7f5 ffe2 	bl	8000178 <__aeabi_fsub>
 800a1b4:	4601      	mov	r1, r0
 800a1b6:	4605      	mov	r5, r0
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	f7f5 ffdd 	bl	8000178 <__aeabi_fsub>
 800a1be:	498d      	ldr	r1, [pc, #564]	@ (800a3f4 <__ieee754_rem_pio2f+0x2b0>)
 800a1c0:	e7e8      	b.n	800a194 <__ieee754_rem_pio2f+0x50>
 800a1c2:	f7f5 ffdb 	bl	800017c <__addsf3>
 800a1c6:	42bd      	cmp	r5, r7
 800a1c8:	4606      	mov	r6, r0
 800a1ca:	d00f      	beq.n	800a1ec <__ieee754_rem_pio2f+0xa8>
 800a1cc:	4987      	ldr	r1, [pc, #540]	@ (800a3ec <__ieee754_rem_pio2f+0x2a8>)
 800a1ce:	f7f5 ffd5 	bl	800017c <__addsf3>
 800a1d2:	4601      	mov	r1, r0
 800a1d4:	4605      	mov	r5, r0
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	f7f5 ffce 	bl	8000178 <__aeabi_fsub>
 800a1dc:	4983      	ldr	r1, [pc, #524]	@ (800a3ec <__ieee754_rem_pio2f+0x2a8>)
 800a1de:	f7f5 ffcd 	bl	800017c <__addsf3>
 800a1e2:	6025      	str	r5, [r4, #0]
 800a1e4:	6060      	str	r0, [r4, #4]
 800a1e6:	f04f 35ff 	mov.w	r5, #4294967295
 800a1ea:	e7d8      	b.n	800a19e <__ieee754_rem_pio2f+0x5a>
 800a1ec:	4980      	ldr	r1, [pc, #512]	@ (800a3f0 <__ieee754_rem_pio2f+0x2ac>)
 800a1ee:	f7f5 ffc5 	bl	800017c <__addsf3>
 800a1f2:	4980      	ldr	r1, [pc, #512]	@ (800a3f4 <__ieee754_rem_pio2f+0x2b0>)
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	f7f5 ffc1 	bl	800017c <__addsf3>
 800a1fa:	4601      	mov	r1, r0
 800a1fc:	4605      	mov	r5, r0
 800a1fe:	4630      	mov	r0, r6
 800a200:	f7f5 ffba 	bl	8000178 <__aeabi_fsub>
 800a204:	497b      	ldr	r1, [pc, #492]	@ (800a3f4 <__ieee754_rem_pio2f+0x2b0>)
 800a206:	e7ea      	b.n	800a1de <__ieee754_rem_pio2f+0x9a>
 800a208:	4a7b      	ldr	r2, [pc, #492]	@ (800a3f8 <__ieee754_rem_pio2f+0x2b4>)
 800a20a:	4590      	cmp	r8, r2
 800a20c:	f200 8095 	bhi.w	800a33a <__ieee754_rem_pio2f+0x1f6>
 800a210:	f000 f8fe 	bl	800a410 <fabsf>
 800a214:	4979      	ldr	r1, [pc, #484]	@ (800a3fc <__ieee754_rem_pio2f+0x2b8>)
 800a216:	4606      	mov	r6, r0
 800a218:	f7f6 f8b8 	bl	800038c <__aeabi_fmul>
 800a21c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800a220:	f7f5 ffac 	bl	800017c <__addsf3>
 800a224:	f7f6 fa8e 	bl	8000744 <__aeabi_f2iz>
 800a228:	4605      	mov	r5, r0
 800a22a:	f7f6 f85b 	bl	80002e4 <__aeabi_i2f>
 800a22e:	496d      	ldr	r1, [pc, #436]	@ (800a3e4 <__ieee754_rem_pio2f+0x2a0>)
 800a230:	4681      	mov	r9, r0
 800a232:	f7f6 f8ab 	bl	800038c <__aeabi_fmul>
 800a236:	4601      	mov	r1, r0
 800a238:	4630      	mov	r0, r6
 800a23a:	f7f5 ff9d 	bl	8000178 <__aeabi_fsub>
 800a23e:	496b      	ldr	r1, [pc, #428]	@ (800a3ec <__ieee754_rem_pio2f+0x2a8>)
 800a240:	4607      	mov	r7, r0
 800a242:	4648      	mov	r0, r9
 800a244:	f7f6 f8a2 	bl	800038c <__aeabi_fmul>
 800a248:	2d1f      	cmp	r5, #31
 800a24a:	4606      	mov	r6, r0
 800a24c:	dc0e      	bgt.n	800a26c <__ieee754_rem_pio2f+0x128>
 800a24e:	4a6c      	ldr	r2, [pc, #432]	@ (800a400 <__ieee754_rem_pio2f+0x2bc>)
 800a250:	1e69      	subs	r1, r5, #1
 800a252:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a256:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 800a25a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a25e:	4293      	cmp	r3, r2
 800a260:	d004      	beq.n	800a26c <__ieee754_rem_pio2f+0x128>
 800a262:	4631      	mov	r1, r6
 800a264:	4638      	mov	r0, r7
 800a266:	f7f5 ff87 	bl	8000178 <__aeabi_fsub>
 800a26a:	e00b      	b.n	800a284 <__ieee754_rem_pio2f+0x140>
 800a26c:	4631      	mov	r1, r6
 800a26e:	4638      	mov	r0, r7
 800a270:	f7f5 ff82 	bl	8000178 <__aeabi_fsub>
 800a274:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a278:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 800a27c:	2b08      	cmp	r3, #8
 800a27e:	ea4f 5be8 	mov.w	fp, r8, asr #23
 800a282:	dc01      	bgt.n	800a288 <__ieee754_rem_pio2f+0x144>
 800a284:	6020      	str	r0, [r4, #0]
 800a286:	e026      	b.n	800a2d6 <__ieee754_rem_pio2f+0x192>
 800a288:	4959      	ldr	r1, [pc, #356]	@ (800a3f0 <__ieee754_rem_pio2f+0x2ac>)
 800a28a:	4648      	mov	r0, r9
 800a28c:	f7f6 f87e 	bl	800038c <__aeabi_fmul>
 800a290:	4606      	mov	r6, r0
 800a292:	4601      	mov	r1, r0
 800a294:	4638      	mov	r0, r7
 800a296:	f7f5 ff6f 	bl	8000178 <__aeabi_fsub>
 800a29a:	4601      	mov	r1, r0
 800a29c:	4680      	mov	r8, r0
 800a29e:	4638      	mov	r0, r7
 800a2a0:	f7f5 ff6a 	bl	8000178 <__aeabi_fsub>
 800a2a4:	4631      	mov	r1, r6
 800a2a6:	f7f5 ff67 	bl	8000178 <__aeabi_fsub>
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	4951      	ldr	r1, [pc, #324]	@ (800a3f4 <__ieee754_rem_pio2f+0x2b0>)
 800a2ae:	4648      	mov	r0, r9
 800a2b0:	f7f6 f86c 	bl	800038c <__aeabi_fmul>
 800a2b4:	4631      	mov	r1, r6
 800a2b6:	f7f5 ff5f 	bl	8000178 <__aeabi_fsub>
 800a2ba:	4601      	mov	r1, r0
 800a2bc:	4606      	mov	r6, r0
 800a2be:	4640      	mov	r0, r8
 800a2c0:	f7f5 ff5a 	bl	8000178 <__aeabi_fsub>
 800a2c4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a2c8:	ebab 0b03 	sub.w	fp, fp, r3
 800a2cc:	f1bb 0f19 	cmp.w	fp, #25
 800a2d0:	dc18      	bgt.n	800a304 <__ieee754_rem_pio2f+0x1c0>
 800a2d2:	4647      	mov	r7, r8
 800a2d4:	6020      	str	r0, [r4, #0]
 800a2d6:	f8d4 8000 	ldr.w	r8, [r4]
 800a2da:	4638      	mov	r0, r7
 800a2dc:	4641      	mov	r1, r8
 800a2de:	f7f5 ff4b 	bl	8000178 <__aeabi_fsub>
 800a2e2:	4631      	mov	r1, r6
 800a2e4:	f7f5 ff48 	bl	8000178 <__aeabi_fsub>
 800a2e8:	f1ba 0f00 	cmp.w	sl, #0
 800a2ec:	6060      	str	r0, [r4, #4]
 800a2ee:	f6bf af56 	bge.w	800a19e <__ieee754_rem_pio2f+0x5a>
 800a2f2:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 800a2f6:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800a2fa:	f8c4 8000 	str.w	r8, [r4]
 800a2fe:	6060      	str	r0, [r4, #4]
 800a300:	426d      	negs	r5, r5
 800a302:	e74c      	b.n	800a19e <__ieee754_rem_pio2f+0x5a>
 800a304:	493f      	ldr	r1, [pc, #252]	@ (800a404 <__ieee754_rem_pio2f+0x2c0>)
 800a306:	4648      	mov	r0, r9
 800a308:	f7f6 f840 	bl	800038c <__aeabi_fmul>
 800a30c:	4606      	mov	r6, r0
 800a30e:	4601      	mov	r1, r0
 800a310:	4640      	mov	r0, r8
 800a312:	f7f5 ff31 	bl	8000178 <__aeabi_fsub>
 800a316:	4601      	mov	r1, r0
 800a318:	4607      	mov	r7, r0
 800a31a:	4640      	mov	r0, r8
 800a31c:	f7f5 ff2c 	bl	8000178 <__aeabi_fsub>
 800a320:	4631      	mov	r1, r6
 800a322:	f7f5 ff29 	bl	8000178 <__aeabi_fsub>
 800a326:	4606      	mov	r6, r0
 800a328:	4937      	ldr	r1, [pc, #220]	@ (800a408 <__ieee754_rem_pio2f+0x2c4>)
 800a32a:	4648      	mov	r0, r9
 800a32c:	f7f6 f82e 	bl	800038c <__aeabi_fmul>
 800a330:	4631      	mov	r1, r6
 800a332:	f7f5 ff21 	bl	8000178 <__aeabi_fsub>
 800a336:	4606      	mov	r6, r0
 800a338:	e793      	b.n	800a262 <__ieee754_rem_pio2f+0x11e>
 800a33a:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800a33e:	d305      	bcc.n	800a34c <__ieee754_rem_pio2f+0x208>
 800a340:	4601      	mov	r1, r0
 800a342:	f7f5 ff19 	bl	8000178 <__aeabi_fsub>
 800a346:	6060      	str	r0, [r4, #4]
 800a348:	6020      	str	r0, [r4, #0]
 800a34a:	e708      	b.n	800a15e <__ieee754_rem_pio2f+0x1a>
 800a34c:	ea4f 56e8 	mov.w	r6, r8, asr #23
 800a350:	3e86      	subs	r6, #134	@ 0x86
 800a352:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800a356:	4640      	mov	r0, r8
 800a358:	f7f6 f9f4 	bl	8000744 <__aeabi_f2iz>
 800a35c:	f7f5 ffc2 	bl	80002e4 <__aeabi_i2f>
 800a360:	4601      	mov	r1, r0
 800a362:	9003      	str	r0, [sp, #12]
 800a364:	4640      	mov	r0, r8
 800a366:	f7f5 ff07 	bl	8000178 <__aeabi_fsub>
 800a36a:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800a36e:	f7f6 f80d 	bl	800038c <__aeabi_fmul>
 800a372:	4607      	mov	r7, r0
 800a374:	f7f6 f9e6 	bl	8000744 <__aeabi_f2iz>
 800a378:	f7f5 ffb4 	bl	80002e4 <__aeabi_i2f>
 800a37c:	4601      	mov	r1, r0
 800a37e:	9004      	str	r0, [sp, #16]
 800a380:	4605      	mov	r5, r0
 800a382:	4638      	mov	r0, r7
 800a384:	f7f5 fef8 	bl	8000178 <__aeabi_fsub>
 800a388:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800a38c:	f7f5 fffe 	bl	800038c <__aeabi_fmul>
 800a390:	2100      	movs	r1, #0
 800a392:	9005      	str	r0, [sp, #20]
 800a394:	f7f6 f98e 	bl	80006b4 <__aeabi_fcmpeq>
 800a398:	b1f0      	cbz	r0, 800a3d8 <__ieee754_rem_pio2f+0x294>
 800a39a:	2100      	movs	r1, #0
 800a39c:	4628      	mov	r0, r5
 800a39e:	f7f6 f989 	bl	80006b4 <__aeabi_fcmpeq>
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	bf14      	ite	ne
 800a3a6:	2301      	movne	r3, #1
 800a3a8:	2302      	moveq	r3, #2
 800a3aa:	4a18      	ldr	r2, [pc, #96]	@ (800a40c <__ieee754_rem_pio2f+0x2c8>)
 800a3ac:	4621      	mov	r1, r4
 800a3ae:	9201      	str	r2, [sp, #4]
 800a3b0:	2202      	movs	r2, #2
 800a3b2:	a803      	add	r0, sp, #12
 800a3b4:	9200      	str	r2, [sp, #0]
 800a3b6:	4632      	mov	r2, r6
 800a3b8:	f000 f898 	bl	800a4ec <__kernel_rem_pio2f>
 800a3bc:	f1ba 0f00 	cmp.w	sl, #0
 800a3c0:	4605      	mov	r5, r0
 800a3c2:	f6bf aeec 	bge.w	800a19e <__ieee754_rem_pio2f+0x5a>
 800a3c6:	6823      	ldr	r3, [r4, #0]
 800a3c8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a3cc:	6023      	str	r3, [r4, #0]
 800a3ce:	6863      	ldr	r3, [r4, #4]
 800a3d0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a3d4:	6063      	str	r3, [r4, #4]
 800a3d6:	e793      	b.n	800a300 <__ieee754_rem_pio2f+0x1bc>
 800a3d8:	2303      	movs	r3, #3
 800a3da:	e7e6      	b.n	800a3aa <__ieee754_rem_pio2f+0x266>
 800a3dc:	3f490fd8 	.word	0x3f490fd8
 800a3e0:	4016cbe3 	.word	0x4016cbe3
 800a3e4:	3fc90f80 	.word	0x3fc90f80
 800a3e8:	3fc90fd0 	.word	0x3fc90fd0
 800a3ec:	37354443 	.word	0x37354443
 800a3f0:	37354400 	.word	0x37354400
 800a3f4:	2e85a308 	.word	0x2e85a308
 800a3f8:	43490f80 	.word	0x43490f80
 800a3fc:	3f22f984 	.word	0x3f22f984
 800a400:	0800b028 	.word	0x0800b028
 800a404:	2e85a300 	.word	0x2e85a300
 800a408:	248d3132 	.word	0x248d3132
 800a40c:	0800b0a8 	.word	0x0800b0a8

0800a410 <fabsf>:
 800a410:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800a414:	4770      	bx	lr
	...

0800a418 <scalbnf>:
 800a418:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800a41c:	b538      	push	{r3, r4, r5, lr}
 800a41e:	4603      	mov	r3, r0
 800a420:	460d      	mov	r5, r1
 800a422:	4604      	mov	r4, r0
 800a424:	d02e      	beq.n	800a484 <scalbnf+0x6c>
 800a426:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a42a:	d304      	bcc.n	800a436 <scalbnf+0x1e>
 800a42c:	4601      	mov	r1, r0
 800a42e:	f7f5 fea5 	bl	800017c <__addsf3>
 800a432:	4603      	mov	r3, r0
 800a434:	e026      	b.n	800a484 <scalbnf+0x6c>
 800a436:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800a43a:	d118      	bne.n	800a46e <scalbnf+0x56>
 800a43c:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800a440:	f7f5 ffa4 	bl	800038c <__aeabi_fmul>
 800a444:	4a17      	ldr	r2, [pc, #92]	@ (800a4a4 <scalbnf+0x8c>)
 800a446:	4603      	mov	r3, r0
 800a448:	4295      	cmp	r5, r2
 800a44a:	db0c      	blt.n	800a466 <scalbnf+0x4e>
 800a44c:	4604      	mov	r4, r0
 800a44e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800a452:	3a19      	subs	r2, #25
 800a454:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a458:	428d      	cmp	r5, r1
 800a45a:	dd0a      	ble.n	800a472 <scalbnf+0x5a>
 800a45c:	4912      	ldr	r1, [pc, #72]	@ (800a4a8 <scalbnf+0x90>)
 800a45e:	4618      	mov	r0, r3
 800a460:	f361 001e 	bfi	r0, r1, #0, #31
 800a464:	e000      	b.n	800a468 <scalbnf+0x50>
 800a466:	4911      	ldr	r1, [pc, #68]	@ (800a4ac <scalbnf+0x94>)
 800a468:	f7f5 ff90 	bl	800038c <__aeabi_fmul>
 800a46c:	e7e1      	b.n	800a432 <scalbnf+0x1a>
 800a46e:	0dd2      	lsrs	r2, r2, #23
 800a470:	e7f0      	b.n	800a454 <scalbnf+0x3c>
 800a472:	1951      	adds	r1, r2, r5
 800a474:	29fe      	cmp	r1, #254	@ 0xfe
 800a476:	dcf1      	bgt.n	800a45c <scalbnf+0x44>
 800a478:	2900      	cmp	r1, #0
 800a47a:	dd05      	ble.n	800a488 <scalbnf+0x70>
 800a47c:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800a480:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800a484:	4618      	mov	r0, r3
 800a486:	bd38      	pop	{r3, r4, r5, pc}
 800a488:	f111 0f16 	cmn.w	r1, #22
 800a48c:	da01      	bge.n	800a492 <scalbnf+0x7a>
 800a48e:	4907      	ldr	r1, [pc, #28]	@ (800a4ac <scalbnf+0x94>)
 800a490:	e7e5      	b.n	800a45e <scalbnf+0x46>
 800a492:	f101 0019 	add.w	r0, r1, #25
 800a496:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800a49a:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 800a49e:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800a4a2:	e7e1      	b.n	800a468 <scalbnf+0x50>
 800a4a4:	ffff3cb0 	.word	0xffff3cb0
 800a4a8:	7149f2ca 	.word	0x7149f2ca
 800a4ac:	0da24260 	.word	0x0da24260

0800a4b0 <with_errnof>:
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	4604      	mov	r4, r0
 800a4b4:	460d      	mov	r5, r1
 800a4b6:	f7fe f927 	bl	8008708 <__errno>
 800a4ba:	6005      	str	r5, [r0, #0]
 800a4bc:	4620      	mov	r0, r4
 800a4be:	bd38      	pop	{r3, r4, r5, pc}

0800a4c0 <xflowf>:
 800a4c0:	b508      	push	{r3, lr}
 800a4c2:	b140      	cbz	r0, 800a4d6 <xflowf+0x16>
 800a4c4:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800a4c8:	f7f5 ff60 	bl	800038c <__aeabi_fmul>
 800a4cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a4d0:	2122      	movs	r1, #34	@ 0x22
 800a4d2:	f7ff bfed 	b.w	800a4b0 <with_errnof>
 800a4d6:	4608      	mov	r0, r1
 800a4d8:	e7f6      	b.n	800a4c8 <xflowf+0x8>

0800a4da <__math_uflowf>:
 800a4da:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800a4de:	f7ff bfef 	b.w	800a4c0 <xflowf>

0800a4e2 <__math_oflowf>:
 800a4e2:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800a4e6:	f7ff bfeb 	b.w	800a4c0 <xflowf>
	...

0800a4ec <__kernel_rem_pio2f>:
 800a4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f0:	b0db      	sub	sp, #364	@ 0x16c
 800a4f2:	9202      	str	r2, [sp, #8]
 800a4f4:	9304      	str	r3, [sp, #16]
 800a4f6:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800a4f8:	4bac      	ldr	r3, [pc, #688]	@ (800a7ac <__kernel_rem_pio2f+0x2c0>)
 800a4fa:	9005      	str	r0, [sp, #20]
 800a4fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a500:	9100      	str	r1, [sp, #0]
 800a502:	9301      	str	r3, [sp, #4]
 800a504:	9b04      	ldr	r3, [sp, #16]
 800a506:	3b01      	subs	r3, #1
 800a508:	9303      	str	r3, [sp, #12]
 800a50a:	9b02      	ldr	r3, [sp, #8]
 800a50c:	1d1a      	adds	r2, r3, #4
 800a50e:	f2c0 8099 	blt.w	800a644 <__kernel_rem_pio2f+0x158>
 800a512:	1edc      	subs	r4, r3, #3
 800a514:	bf48      	it	mi
 800a516:	1d1c      	addmi	r4, r3, #4
 800a518:	10e4      	asrs	r4, r4, #3
 800a51a:	2500      	movs	r5, #0
 800a51c:	f04f 0b00 	mov.w	fp, #0
 800a520:	1c67      	adds	r7, r4, #1
 800a522:	00fb      	lsls	r3, r7, #3
 800a524:	9306      	str	r3, [sp, #24]
 800a526:	9b02      	ldr	r3, [sp, #8]
 800a528:	9a03      	ldr	r2, [sp, #12]
 800a52a:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800a52e:	9b01      	ldr	r3, [sp, #4]
 800a530:	eba4 0802 	sub.w	r8, r4, r2
 800a534:	eb03 0902 	add.w	r9, r3, r2
 800a538:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800a53a:	ae1e      	add	r6, sp, #120	@ 0x78
 800a53c:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 800a540:	454d      	cmp	r5, r9
 800a542:	f340 8081 	ble.w	800a648 <__kernel_rem_pio2f+0x15c>
 800a546:	9a04      	ldr	r2, [sp, #16]
 800a548:	ab1e      	add	r3, sp, #120	@ 0x78
 800a54a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800a54e:	f04f 0900 	mov.w	r9, #0
 800a552:	2300      	movs	r3, #0
 800a554:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800a558:	9a01      	ldr	r2, [sp, #4]
 800a55a:	4591      	cmp	r9, r2
 800a55c:	f340 809a 	ble.w	800a694 <__kernel_rem_pio2f+0x1a8>
 800a560:	4613      	mov	r3, r2
 800a562:	aa0a      	add	r2, sp, #40	@ 0x28
 800a564:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a568:	9308      	str	r3, [sp, #32]
 800a56a:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800a56c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a570:	9c01      	ldr	r4, [sp, #4]
 800a572:	9307      	str	r3, [sp, #28]
 800a574:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800a578:	4646      	mov	r6, r8
 800a57a:	4625      	mov	r5, r4
 800a57c:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 800a580:	ab5a      	add	r3, sp, #360	@ 0x168
 800a582:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a586:	f853 bc50 	ldr.w	fp, [r3, #-80]
 800a58a:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800a58e:	2d00      	cmp	r5, #0
 800a590:	f300 8085 	bgt.w	800a69e <__kernel_rem_pio2f+0x1b2>
 800a594:	4639      	mov	r1, r7
 800a596:	4658      	mov	r0, fp
 800a598:	f7ff ff3e 	bl	800a418 <scalbnf>
 800a59c:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 800a5a0:	4605      	mov	r5, r0
 800a5a2:	f7f5 fef3 	bl	800038c <__aeabi_fmul>
 800a5a6:	f000 fa3f 	bl	800aa28 <floorf>
 800a5aa:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800a5ae:	f7f5 feed 	bl	800038c <__aeabi_fmul>
 800a5b2:	4601      	mov	r1, r0
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	f7f5 fddf 	bl	8000178 <__aeabi_fsub>
 800a5ba:	4605      	mov	r5, r0
 800a5bc:	f7f6 f8c2 	bl	8000744 <__aeabi_f2iz>
 800a5c0:	4606      	mov	r6, r0
 800a5c2:	f7f5 fe8f 	bl	80002e4 <__aeabi_i2f>
 800a5c6:	4601      	mov	r1, r0
 800a5c8:	4628      	mov	r0, r5
 800a5ca:	f7f5 fdd5 	bl	8000178 <__aeabi_fsub>
 800a5ce:	2f00      	cmp	r7, #0
 800a5d0:	4681      	mov	r9, r0
 800a5d2:	f340 8081 	ble.w	800a6d8 <__kernel_rem_pio2f+0x1ec>
 800a5d6:	1e62      	subs	r2, r4, #1
 800a5d8:	ab0a      	add	r3, sp, #40	@ 0x28
 800a5da:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800a5de:	f1c7 0108 	rsb	r1, r7, #8
 800a5e2:	fa45 f301 	asr.w	r3, r5, r1
 800a5e6:	441e      	add	r6, r3
 800a5e8:	408b      	lsls	r3, r1
 800a5ea:	1aed      	subs	r5, r5, r3
 800a5ec:	ab0a      	add	r3, sp, #40	@ 0x28
 800a5ee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a5f2:	f1c7 0307 	rsb	r3, r7, #7
 800a5f6:	411d      	asrs	r5, r3
 800a5f8:	2d00      	cmp	r5, #0
 800a5fa:	dd7a      	ble.n	800a6f2 <__kernel_rem_pio2f+0x206>
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	4692      	mov	sl, r2
 800a600:	3601      	adds	r6, #1
 800a602:	4294      	cmp	r4, r2
 800a604:	f300 80aa 	bgt.w	800a75c <__kernel_rem_pio2f+0x270>
 800a608:	2f00      	cmp	r7, #0
 800a60a:	dd05      	ble.n	800a618 <__kernel_rem_pio2f+0x12c>
 800a60c:	2f01      	cmp	r7, #1
 800a60e:	f000 80b6 	beq.w	800a77e <__kernel_rem_pio2f+0x292>
 800a612:	2f02      	cmp	r7, #2
 800a614:	f000 80bd 	beq.w	800a792 <__kernel_rem_pio2f+0x2a6>
 800a618:	2d02      	cmp	r5, #2
 800a61a:	d16a      	bne.n	800a6f2 <__kernel_rem_pio2f+0x206>
 800a61c:	4649      	mov	r1, r9
 800a61e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a622:	f7f5 fda9 	bl	8000178 <__aeabi_fsub>
 800a626:	4681      	mov	r9, r0
 800a628:	f1ba 0f00 	cmp.w	sl, #0
 800a62c:	d061      	beq.n	800a6f2 <__kernel_rem_pio2f+0x206>
 800a62e:	4639      	mov	r1, r7
 800a630:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a634:	f7ff fef0 	bl	800a418 <scalbnf>
 800a638:	4601      	mov	r1, r0
 800a63a:	4648      	mov	r0, r9
 800a63c:	f7f5 fd9c 	bl	8000178 <__aeabi_fsub>
 800a640:	4681      	mov	r9, r0
 800a642:	e056      	b.n	800a6f2 <__kernel_rem_pio2f+0x206>
 800a644:	2400      	movs	r4, #0
 800a646:	e768      	b.n	800a51a <__kernel_rem_pio2f+0x2e>
 800a648:	eb18 0f05 	cmn.w	r8, r5
 800a64c:	d407      	bmi.n	800a65e <__kernel_rem_pio2f+0x172>
 800a64e:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800a652:	f7f5 fe47 	bl	80002e4 <__aeabi_i2f>
 800a656:	f846 0b04 	str.w	r0, [r6], #4
 800a65a:	3501      	adds	r5, #1
 800a65c:	e770      	b.n	800a540 <__kernel_rem_pio2f+0x54>
 800a65e:	4658      	mov	r0, fp
 800a660:	e7f9      	b.n	800a656 <__kernel_rem_pio2f+0x16a>
 800a662:	9307      	str	r3, [sp, #28]
 800a664:	9b05      	ldr	r3, [sp, #20]
 800a666:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 800a66a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a66e:	f7f5 fe8d 	bl	800038c <__aeabi_fmul>
 800a672:	4601      	mov	r1, r0
 800a674:	4630      	mov	r0, r6
 800a676:	f7f5 fd81 	bl	800017c <__addsf3>
 800a67a:	4606      	mov	r6, r0
 800a67c:	9b07      	ldr	r3, [sp, #28]
 800a67e:	f108 0801 	add.w	r8, r8, #1
 800a682:	9a03      	ldr	r2, [sp, #12]
 800a684:	4590      	cmp	r8, r2
 800a686:	ddec      	ble.n	800a662 <__kernel_rem_pio2f+0x176>
 800a688:	f84a 6b04 	str.w	r6, [sl], #4
 800a68c:	f109 0901 	add.w	r9, r9, #1
 800a690:	3504      	adds	r5, #4
 800a692:	e761      	b.n	800a558 <__kernel_rem_pio2f+0x6c>
 800a694:	46ab      	mov	fp, r5
 800a696:	461e      	mov	r6, r3
 800a698:	f04f 0800 	mov.w	r8, #0
 800a69c:	e7f1      	b.n	800a682 <__kernel_rem_pio2f+0x196>
 800a69e:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800a6a2:	4658      	mov	r0, fp
 800a6a4:	f7f5 fe72 	bl	800038c <__aeabi_fmul>
 800a6a8:	f7f6 f84c 	bl	8000744 <__aeabi_f2iz>
 800a6ac:	f7f5 fe1a 	bl	80002e4 <__aeabi_i2f>
 800a6b0:	4649      	mov	r1, r9
 800a6b2:	9009      	str	r0, [sp, #36]	@ 0x24
 800a6b4:	f7f5 fe6a 	bl	800038c <__aeabi_fmul>
 800a6b8:	4601      	mov	r1, r0
 800a6ba:	4658      	mov	r0, fp
 800a6bc:	f7f5 fd5c 	bl	8000178 <__aeabi_fsub>
 800a6c0:	f7f6 f840 	bl	8000744 <__aeabi_f2iz>
 800a6c4:	3d01      	subs	r5, #1
 800a6c6:	f846 0b04 	str.w	r0, [r6], #4
 800a6ca:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 800a6ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6d0:	f7f5 fd54 	bl	800017c <__addsf3>
 800a6d4:	4683      	mov	fp, r0
 800a6d6:	e75a      	b.n	800a58e <__kernel_rem_pio2f+0xa2>
 800a6d8:	d105      	bne.n	800a6e6 <__kernel_rem_pio2f+0x1fa>
 800a6da:	1e63      	subs	r3, r4, #1
 800a6dc:	aa0a      	add	r2, sp, #40	@ 0x28
 800a6de:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800a6e2:	11ed      	asrs	r5, r5, #7
 800a6e4:	e788      	b.n	800a5f8 <__kernel_rem_pio2f+0x10c>
 800a6e6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800a6ea:	f7f6 f801 	bl	80006f0 <__aeabi_fcmpge>
 800a6ee:	4605      	mov	r5, r0
 800a6f0:	bb90      	cbnz	r0, 800a758 <__kernel_rem_pio2f+0x26c>
 800a6f2:	2100      	movs	r1, #0
 800a6f4:	4648      	mov	r0, r9
 800a6f6:	f7f5 ffdd 	bl	80006b4 <__aeabi_fcmpeq>
 800a6fa:	2800      	cmp	r0, #0
 800a6fc:	f000 8090 	beq.w	800a820 <__kernel_rem_pio2f+0x334>
 800a700:	2200      	movs	r2, #0
 800a702:	1e63      	subs	r3, r4, #1
 800a704:	9901      	ldr	r1, [sp, #4]
 800a706:	428b      	cmp	r3, r1
 800a708:	da4a      	bge.n	800a7a0 <__kernel_rem_pio2f+0x2b4>
 800a70a:	2a00      	cmp	r2, #0
 800a70c:	d076      	beq.n	800a7fc <__kernel_rem_pio2f+0x310>
 800a70e:	3c01      	subs	r4, #1
 800a710:	ab0a      	add	r3, sp, #40	@ 0x28
 800a712:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a716:	3f08      	subs	r7, #8
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d0f8      	beq.n	800a70e <__kernel_rem_pio2f+0x222>
 800a71c:	4639      	mov	r1, r7
 800a71e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a722:	f7ff fe79 	bl	800a418 <scalbnf>
 800a726:	46a2      	mov	sl, r4
 800a728:	4607      	mov	r7, r0
 800a72a:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 800a72e:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 800a732:	f1ba 0f00 	cmp.w	sl, #0
 800a736:	f280 80a1 	bge.w	800a87c <__kernel_rem_pio2f+0x390>
 800a73a:	4627      	mov	r7, r4
 800a73c:	2200      	movs	r2, #0
 800a73e:	2f00      	cmp	r7, #0
 800a740:	f2c0 80cb 	blt.w	800a8da <__kernel_rem_pio2f+0x3ee>
 800a744:	a946      	add	r1, sp, #280	@ 0x118
 800a746:	4690      	mov	r8, r2
 800a748:	f04f 0a00 	mov.w	sl, #0
 800a74c:	4b18      	ldr	r3, [pc, #96]	@ (800a7b0 <__kernel_rem_pio2f+0x2c4>)
 800a74e:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800a752:	eba4 0907 	sub.w	r9, r4, r7
 800a756:	e0b4      	b.n	800a8c2 <__kernel_rem_pio2f+0x3d6>
 800a758:	2502      	movs	r5, #2
 800a75a:	e74f      	b.n	800a5fc <__kernel_rem_pio2f+0x110>
 800a75c:	f858 3b04 	ldr.w	r3, [r8], #4
 800a760:	f1ba 0f00 	cmp.w	sl, #0
 800a764:	d108      	bne.n	800a778 <__kernel_rem_pio2f+0x28c>
 800a766:	b123      	cbz	r3, 800a772 <__kernel_rem_pio2f+0x286>
 800a768:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800a76c:	f848 3c04 	str.w	r3, [r8, #-4]
 800a770:	2301      	movs	r3, #1
 800a772:	469a      	mov	sl, r3
 800a774:	3201      	adds	r2, #1
 800a776:	e744      	b.n	800a602 <__kernel_rem_pio2f+0x116>
 800a778:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800a77c:	e7f6      	b.n	800a76c <__kernel_rem_pio2f+0x280>
 800a77e:	1e62      	subs	r2, r4, #1
 800a780:	ab0a      	add	r3, sp, #40	@ 0x28
 800a782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a78a:	a90a      	add	r1, sp, #40	@ 0x28
 800a78c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a790:	e742      	b.n	800a618 <__kernel_rem_pio2f+0x12c>
 800a792:	1e62      	subs	r2, r4, #1
 800a794:	ab0a      	add	r3, sp, #40	@ 0x28
 800a796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a79a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a79e:	e7f4      	b.n	800a78a <__kernel_rem_pio2f+0x29e>
 800a7a0:	a90a      	add	r1, sp, #40	@ 0x28
 800a7a2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a7a6:	3b01      	subs	r3, #1
 800a7a8:	430a      	orrs	r2, r1
 800a7aa:	e7ab      	b.n	800a704 <__kernel_rem_pio2f+0x218>
 800a7ac:	0800b3ec 	.word	0x0800b3ec
 800a7b0:	0800b3c0 	.word	0x0800b3c0
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a7ba:	2900      	cmp	r1, #0
 800a7bc:	d0fa      	beq.n	800a7b4 <__kernel_rem_pio2f+0x2c8>
 800a7be:	9a04      	ldr	r2, [sp, #16]
 800a7c0:	a91e      	add	r1, sp, #120	@ 0x78
 800a7c2:	18a2      	adds	r2, r4, r2
 800a7c4:	1c66      	adds	r6, r4, #1
 800a7c6:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800a7ca:	441c      	add	r4, r3
 800a7cc:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 800a7d0:	42b4      	cmp	r4, r6
 800a7d2:	f6ff aecf 	blt.w	800a574 <__kernel_rem_pio2f+0x88>
 800a7d6:	9b07      	ldr	r3, [sp, #28]
 800a7d8:	46ab      	mov	fp, r5
 800a7da:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a7de:	f7f5 fd81 	bl	80002e4 <__aeabi_i2f>
 800a7e2:	f04f 0a00 	mov.w	sl, #0
 800a7e6:	f04f 0800 	mov.w	r8, #0
 800a7ea:	6028      	str	r0, [r5, #0]
 800a7ec:	9b03      	ldr	r3, [sp, #12]
 800a7ee:	459a      	cmp	sl, r3
 800a7f0:	dd07      	ble.n	800a802 <__kernel_rem_pio2f+0x316>
 800a7f2:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 800a7f6:	3504      	adds	r5, #4
 800a7f8:	3601      	adds	r6, #1
 800a7fa:	e7e9      	b.n	800a7d0 <__kernel_rem_pio2f+0x2e4>
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	9a08      	ldr	r2, [sp, #32]
 800a800:	e7d9      	b.n	800a7b6 <__kernel_rem_pio2f+0x2ca>
 800a802:	9b05      	ldr	r3, [sp, #20]
 800a804:	f85b 0904 	ldr.w	r0, [fp], #-4
 800a808:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800a80c:	f7f5 fdbe 	bl	800038c <__aeabi_fmul>
 800a810:	4601      	mov	r1, r0
 800a812:	4640      	mov	r0, r8
 800a814:	f7f5 fcb2 	bl	800017c <__addsf3>
 800a818:	f10a 0a01 	add.w	sl, sl, #1
 800a81c:	4680      	mov	r8, r0
 800a81e:	e7e5      	b.n	800a7ec <__kernel_rem_pio2f+0x300>
 800a820:	9b06      	ldr	r3, [sp, #24]
 800a822:	9a02      	ldr	r2, [sp, #8]
 800a824:	4648      	mov	r0, r9
 800a826:	1a99      	subs	r1, r3, r2
 800a828:	f7ff fdf6 	bl	800a418 <scalbnf>
 800a82c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800a830:	4680      	mov	r8, r0
 800a832:	f7f5 ff5d 	bl	80006f0 <__aeabi_fcmpge>
 800a836:	b1f8      	cbz	r0, 800a878 <__kernel_rem_pio2f+0x38c>
 800a838:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800a83c:	4640      	mov	r0, r8
 800a83e:	f7f5 fda5 	bl	800038c <__aeabi_fmul>
 800a842:	f7f5 ff7f 	bl	8000744 <__aeabi_f2iz>
 800a846:	f7f5 fd4d 	bl	80002e4 <__aeabi_i2f>
 800a84a:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800a84e:	4681      	mov	r9, r0
 800a850:	f7f5 fd9c 	bl	800038c <__aeabi_fmul>
 800a854:	4601      	mov	r1, r0
 800a856:	4640      	mov	r0, r8
 800a858:	f7f5 fc8e 	bl	8000178 <__aeabi_fsub>
 800a85c:	f7f5 ff72 	bl	8000744 <__aeabi_f2iz>
 800a860:	ab0a      	add	r3, sp, #40	@ 0x28
 800a862:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a866:	4648      	mov	r0, r9
 800a868:	3401      	adds	r4, #1
 800a86a:	3708      	adds	r7, #8
 800a86c:	f7f5 ff6a 	bl	8000744 <__aeabi_f2iz>
 800a870:	ab0a      	add	r3, sp, #40	@ 0x28
 800a872:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a876:	e751      	b.n	800a71c <__kernel_rem_pio2f+0x230>
 800a878:	4640      	mov	r0, r8
 800a87a:	e7f7      	b.n	800a86c <__kernel_rem_pio2f+0x380>
 800a87c:	ab0a      	add	r3, sp, #40	@ 0x28
 800a87e:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a882:	f7f5 fd2f 	bl	80002e4 <__aeabi_i2f>
 800a886:	4639      	mov	r1, r7
 800a888:	f7f5 fd80 	bl	800038c <__aeabi_fmul>
 800a88c:	4649      	mov	r1, r9
 800a88e:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 800a892:	4638      	mov	r0, r7
 800a894:	f7f5 fd7a 	bl	800038c <__aeabi_fmul>
 800a898:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a89c:	4607      	mov	r7, r0
 800a89e:	e748      	b.n	800a732 <__kernel_rem_pio2f+0x246>
 800a8a0:	f853 0b04 	ldr.w	r0, [r3], #4
 800a8a4:	f85b 1b04 	ldr.w	r1, [fp], #4
 800a8a8:	9203      	str	r2, [sp, #12]
 800a8aa:	9302      	str	r3, [sp, #8]
 800a8ac:	f7f5 fd6e 	bl	800038c <__aeabi_fmul>
 800a8b0:	4601      	mov	r1, r0
 800a8b2:	4640      	mov	r0, r8
 800a8b4:	f7f5 fc62 	bl	800017c <__addsf3>
 800a8b8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a8bc:	4680      	mov	r8, r0
 800a8be:	f10a 0a01 	add.w	sl, sl, #1
 800a8c2:	9901      	ldr	r1, [sp, #4]
 800a8c4:	458a      	cmp	sl, r1
 800a8c6:	dc01      	bgt.n	800a8cc <__kernel_rem_pio2f+0x3e0>
 800a8c8:	45ca      	cmp	sl, r9
 800a8ca:	dde9      	ble.n	800a8a0 <__kernel_rem_pio2f+0x3b4>
 800a8cc:	ab5a      	add	r3, sp, #360	@ 0x168
 800a8ce:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800a8d2:	f849 8ca0 	str.w	r8, [r9, #-160]
 800a8d6:	3f01      	subs	r7, #1
 800a8d8:	e731      	b.n	800a73e <__kernel_rem_pio2f+0x252>
 800a8da:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800a8dc:	2b02      	cmp	r3, #2
 800a8de:	dc07      	bgt.n	800a8f0 <__kernel_rem_pio2f+0x404>
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	dc4e      	bgt.n	800a982 <__kernel_rem_pio2f+0x496>
 800a8e4:	d02e      	beq.n	800a944 <__kernel_rem_pio2f+0x458>
 800a8e6:	f006 0007 	and.w	r0, r6, #7
 800a8ea:	b05b      	add	sp, #364	@ 0x16c
 800a8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800a8f2:	2b03      	cmp	r3, #3
 800a8f4:	d1f7      	bne.n	800a8e6 <__kernel_rem_pio2f+0x3fa>
 800a8f6:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 800a8fa:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800a8fe:	46b8      	mov	r8, r7
 800a900:	46a2      	mov	sl, r4
 800a902:	f1ba 0f00 	cmp.w	sl, #0
 800a906:	dc49      	bgt.n	800a99c <__kernel_rem_pio2f+0x4b0>
 800a908:	46a1      	mov	r9, r4
 800a90a:	f1b9 0f01 	cmp.w	r9, #1
 800a90e:	dc60      	bgt.n	800a9d2 <__kernel_rem_pio2f+0x4e6>
 800a910:	2000      	movs	r0, #0
 800a912:	2c01      	cmp	r4, #1
 800a914:	dc76      	bgt.n	800aa04 <__kernel_rem_pio2f+0x518>
 800a916:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800a918:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800a91a:	2d00      	cmp	r5, #0
 800a91c:	d178      	bne.n	800aa10 <__kernel_rem_pio2f+0x524>
 800a91e:	9900      	ldr	r1, [sp, #0]
 800a920:	600a      	str	r2, [r1, #0]
 800a922:	460a      	mov	r2, r1
 800a924:	604b      	str	r3, [r1, #4]
 800a926:	6090      	str	r0, [r2, #8]
 800a928:	e7dd      	b.n	800a8e6 <__kernel_rem_pio2f+0x3fa>
 800a92a:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800a92e:	f7f5 fc25 	bl	800017c <__addsf3>
 800a932:	3c01      	subs	r4, #1
 800a934:	2c00      	cmp	r4, #0
 800a936:	daf8      	bge.n	800a92a <__kernel_rem_pio2f+0x43e>
 800a938:	b10d      	cbz	r5, 800a93e <__kernel_rem_pio2f+0x452>
 800a93a:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800a93e:	9b00      	ldr	r3, [sp, #0]
 800a940:	6018      	str	r0, [r3, #0]
 800a942:	e7d0      	b.n	800a8e6 <__kernel_rem_pio2f+0x3fa>
 800a944:	2000      	movs	r0, #0
 800a946:	af32      	add	r7, sp, #200	@ 0xc8
 800a948:	e7f4      	b.n	800a934 <__kernel_rem_pio2f+0x448>
 800a94a:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800a94e:	f7f5 fc15 	bl	800017c <__addsf3>
 800a952:	f108 38ff 	add.w	r8, r8, #4294967295
 800a956:	f1b8 0f00 	cmp.w	r8, #0
 800a95a:	daf6      	bge.n	800a94a <__kernel_rem_pio2f+0x45e>
 800a95c:	b1ad      	cbz	r5, 800a98a <__kernel_rem_pio2f+0x49e>
 800a95e:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 800a962:	9a00      	ldr	r2, [sp, #0]
 800a964:	4601      	mov	r1, r0
 800a966:	6013      	str	r3, [r2, #0]
 800a968:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800a96a:	f7f5 fc05 	bl	8000178 <__aeabi_fsub>
 800a96e:	f04f 0801 	mov.w	r8, #1
 800a972:	4544      	cmp	r4, r8
 800a974:	da0b      	bge.n	800a98e <__kernel_rem_pio2f+0x4a2>
 800a976:	b10d      	cbz	r5, 800a97c <__kernel_rem_pio2f+0x490>
 800a978:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800a97c:	9b00      	ldr	r3, [sp, #0]
 800a97e:	6058      	str	r0, [r3, #4]
 800a980:	e7b1      	b.n	800a8e6 <__kernel_rem_pio2f+0x3fa>
 800a982:	46a0      	mov	r8, r4
 800a984:	2000      	movs	r0, #0
 800a986:	af32      	add	r7, sp, #200	@ 0xc8
 800a988:	e7e5      	b.n	800a956 <__kernel_rem_pio2f+0x46a>
 800a98a:	4603      	mov	r3, r0
 800a98c:	e7e9      	b.n	800a962 <__kernel_rem_pio2f+0x476>
 800a98e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800a992:	f7f5 fbf3 	bl	800017c <__addsf3>
 800a996:	f108 0801 	add.w	r8, r8, #1
 800a99a:	e7ea      	b.n	800a972 <__kernel_rem_pio2f+0x486>
 800a99c:	f8d8 3000 	ldr.w	r3, [r8]
 800a9a0:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	4610      	mov	r0, r2
 800a9a8:	9302      	str	r3, [sp, #8]
 800a9aa:	9201      	str	r2, [sp, #4]
 800a9ac:	f7f5 fbe6 	bl	800017c <__addsf3>
 800a9b0:	9a01      	ldr	r2, [sp, #4]
 800a9b2:	4601      	mov	r1, r0
 800a9b4:	4681      	mov	r9, r0
 800a9b6:	4610      	mov	r0, r2
 800a9b8:	f7f5 fbde 	bl	8000178 <__aeabi_fsub>
 800a9bc:	9b02      	ldr	r3, [sp, #8]
 800a9be:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	f7f5 fbda 	bl	800017c <__addsf3>
 800a9c8:	f848 0904 	str.w	r0, [r8], #-4
 800a9cc:	f8c8 9000 	str.w	r9, [r8]
 800a9d0:	e797      	b.n	800a902 <__kernel_rem_pio2f+0x416>
 800a9d2:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800a9d6:	f8d7 a000 	ldr.w	sl, [r7]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	4651      	mov	r1, sl
 800a9de:	9301      	str	r3, [sp, #4]
 800a9e0:	f7f5 fbcc 	bl	800017c <__addsf3>
 800a9e4:	9b01      	ldr	r3, [sp, #4]
 800a9e6:	4601      	mov	r1, r0
 800a9e8:	4680      	mov	r8, r0
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7f5 fbc4 	bl	8000178 <__aeabi_fsub>
 800a9f0:	4651      	mov	r1, sl
 800a9f2:	f7f5 fbc3 	bl	800017c <__addsf3>
 800a9f6:	f847 0904 	str.w	r0, [r7], #-4
 800a9fa:	f109 39ff 	add.w	r9, r9, #4294967295
 800a9fe:	f8c7 8000 	str.w	r8, [r7]
 800aa02:	e782      	b.n	800a90a <__kernel_rem_pio2f+0x41e>
 800aa04:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800aa08:	f7f5 fbb8 	bl	800017c <__addsf3>
 800aa0c:	3c01      	subs	r4, #1
 800aa0e:	e780      	b.n	800a912 <__kernel_rem_pio2f+0x426>
 800aa10:	9900      	ldr	r1, [sp, #0]
 800aa12:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800aa16:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800aa1a:	600a      	str	r2, [r1, #0]
 800aa1c:	604b      	str	r3, [r1, #4]
 800aa1e:	460a      	mov	r2, r1
 800aa20:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800aa24:	e77f      	b.n	800a926 <__kernel_rem_pio2f+0x43a>
 800aa26:	bf00      	nop

0800aa28 <floorf>:
 800aa28:	b570      	push	{r4, r5, r6, lr}
 800aa2a:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800aa2e:	3d7f      	subs	r5, #127	@ 0x7f
 800aa30:	2d16      	cmp	r5, #22
 800aa32:	4601      	mov	r1, r0
 800aa34:	4604      	mov	r4, r0
 800aa36:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800aa3a:	dc26      	bgt.n	800aa8a <floorf+0x62>
 800aa3c:	2d00      	cmp	r5, #0
 800aa3e:	da0f      	bge.n	800aa60 <floorf+0x38>
 800aa40:	4917      	ldr	r1, [pc, #92]	@ (800aaa0 <floorf+0x78>)
 800aa42:	f7f5 fb9b 	bl	800017c <__addsf3>
 800aa46:	2100      	movs	r1, #0
 800aa48:	f7f5 fe5c 	bl	8000704 <__aeabi_fcmpgt>
 800aa4c:	b130      	cbz	r0, 800aa5c <floorf+0x34>
 800aa4e:	2c00      	cmp	r4, #0
 800aa50:	da23      	bge.n	800aa9a <floorf+0x72>
 800aa52:	2e00      	cmp	r6, #0
 800aa54:	4c13      	ldr	r4, [pc, #76]	@ (800aaa4 <floorf+0x7c>)
 800aa56:	bf08      	it	eq
 800aa58:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800aa5c:	4621      	mov	r1, r4
 800aa5e:	e01a      	b.n	800aa96 <floorf+0x6e>
 800aa60:	4e11      	ldr	r6, [pc, #68]	@ (800aaa8 <floorf+0x80>)
 800aa62:	412e      	asrs	r6, r5
 800aa64:	4230      	tst	r0, r6
 800aa66:	d016      	beq.n	800aa96 <floorf+0x6e>
 800aa68:	490d      	ldr	r1, [pc, #52]	@ (800aaa0 <floorf+0x78>)
 800aa6a:	f7f5 fb87 	bl	800017c <__addsf3>
 800aa6e:	2100      	movs	r1, #0
 800aa70:	f7f5 fe48 	bl	8000704 <__aeabi_fcmpgt>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d0f1      	beq.n	800aa5c <floorf+0x34>
 800aa78:	2c00      	cmp	r4, #0
 800aa7a:	bfbe      	ittt	lt
 800aa7c:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 800aa80:	412b      	asrlt	r3, r5
 800aa82:	18e4      	addlt	r4, r4, r3
 800aa84:	ea24 0406 	bic.w	r4, r4, r6
 800aa88:	e7e8      	b.n	800aa5c <floorf+0x34>
 800aa8a:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800aa8e:	d302      	bcc.n	800aa96 <floorf+0x6e>
 800aa90:	f7f5 fb74 	bl	800017c <__addsf3>
 800aa94:	4601      	mov	r1, r0
 800aa96:	4608      	mov	r0, r1
 800aa98:	bd70      	pop	{r4, r5, r6, pc}
 800aa9a:	2400      	movs	r4, #0
 800aa9c:	e7de      	b.n	800aa5c <floorf+0x34>
 800aa9e:	bf00      	nop
 800aaa0:	7149f2ca 	.word	0x7149f2ca
 800aaa4:	bf800000 	.word	0xbf800000
 800aaa8:	007fffff 	.word	0x007fffff

0800aaac <_init>:
 800aaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaae:	bf00      	nop
 800aab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aab2:	bc08      	pop	{r3}
 800aab4:	469e      	mov	lr, r3
 800aab6:	4770      	bx	lr

0800aab8 <_fini>:
 800aab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaba:	bf00      	nop
 800aabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aabe:	bc08      	pop	{r3}
 800aac0:	469e      	mov	lr, r3
 800aac2:	4770      	bx	lr
