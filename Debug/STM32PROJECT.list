
STM32PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aec8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a6c  0800afd4  0800afd4  0000bfd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba40  0800ba40  0000d080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ba40  0800ba40  0000ca40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba48  0800ba48  0000d080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba48  0800ba48  0000ca48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ba4c  0800ba4c  0000ca4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800ba50  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004088  20000080  0800bad0  0000d080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004108  0800bad0  0000d108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001184f  00000000  00000000  0000d0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000343b  00000000  00000000  0001e8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  00021d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f10  00000000  00000000  00023058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a240  00000000  00000000  00023f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001801b  00000000  00000000  0003e1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ff29  00000000  00000000  000561c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e60ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fd4  00000000  00000000  000e6130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000ec104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	0800afbc 	.word	0x0800afbc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	0800afbc 	.word	0x0800afbc

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_fcmpun>:
 8000718:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800071c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000720:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000724:	d102      	bne.n	800072c <__aeabi_fcmpun+0x14>
 8000726:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800072a:	d108      	bne.n	800073e <__aeabi_fcmpun+0x26>
 800072c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000730:	d102      	bne.n	8000738 <__aeabi_fcmpun+0x20>
 8000732:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000736:	d102      	bne.n	800073e <__aeabi_fcmpun+0x26>
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	4770      	bx	lr
 800073e:	f04f 0001 	mov.w	r0, #1
 8000742:	4770      	bx	lr

08000744 <__aeabi_f2iz>:
 8000744:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000748:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800074c:	d30f      	bcc.n	800076e <__aeabi_f2iz+0x2a>
 800074e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000752:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000756:	d90d      	bls.n	8000774 <__aeabi_f2iz+0x30>
 8000758:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800075c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000760:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000764:	fa23 f002 	lsr.w	r0, r3, r2
 8000768:	bf18      	it	ne
 800076a:	4240      	negne	r0, r0
 800076c:	4770      	bx	lr
 800076e:	f04f 0000 	mov.w	r0, #0
 8000772:	4770      	bx	lr
 8000774:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000778:	d101      	bne.n	800077e <__aeabi_f2iz+0x3a>
 800077a:	0242      	lsls	r2, r0, #9
 800077c:	d105      	bne.n	800078a <__aeabi_f2iz+0x46>
 800077e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000782:	bf08      	it	eq
 8000784:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000788:	4770      	bx	lr
 800078a:	f04f 0000 	mov.w	r0, #0
 800078e:	4770      	bx	lr

08000790 <__aeabi_f2uiz>:
 8000790:	0042      	lsls	r2, r0, #1
 8000792:	d20e      	bcs.n	80007b2 <__aeabi_f2uiz+0x22>
 8000794:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000798:	d30b      	bcc.n	80007b2 <__aeabi_f2uiz+0x22>
 800079a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800079e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007a2:	d409      	bmi.n	80007b8 <__aeabi_f2uiz+0x28>
 80007a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ac:	fa23 f002 	lsr.w	r0, r3, r2
 80007b0:	4770      	bx	lr
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	4770      	bx	lr
 80007b8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80007bc:	d101      	bne.n	80007c2 <__aeabi_f2uiz+0x32>
 80007be:	0242      	lsls	r2, r0, #9
 80007c0:	d102      	bne.n	80007c8 <__aeabi_f2uiz+0x38>
 80007c2:	f04f 30ff 	mov.w	r0, #4294967295
 80007c6:	4770      	bx	lr
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_DMA_Init+0x38>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a0b      	ldr	r2, [pc, #44]	@ (8000808 <MX_DMA_Init+0x38>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_DMA_Init+0x38>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	2010      	movs	r0, #16
 80007f4:	f005 fbeb 	bl	8005fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007f8:	2010      	movs	r0, #16
 80007fa:	f005 fc04 	bl	8006006 <HAL_NVIC_EnableIRQ>

}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <DrawBlock>:
#define INPUT_DEBOUNCE_MS 50             // Milliseconds for switch debounce
#define INPUT_PROCESSING_COOLDOWN_MS 200 // Minimum time between processing inputs

// Helper function to draw a block on the OLED (used by Snake)
static void DrawBlock(int16_t x, int16_t y, uint8_t color)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af02      	add	r7, sp, #8
 8000812:	4603      	mov	r3, r0
 8000814:	80fb      	strh	r3, [r7, #6]
 8000816:	460b      	mov	r3, r1
 8000818:	80bb      	strh	r3, [r7, #4]
 800081a:	4613      	mov	r3, r2
 800081c:	70fb      	strb	r3, [r7, #3]
    OLED_DrawFilledRectangle(x * SNAKE_BLOCK_SIZE, y * SNAKE_BLOCK_SIZE, SNAKE_BLOCK_SIZE, SNAKE_BLOCK_SIZE, color);
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	b29b      	uxth	r3, r3
 8000824:	b218      	sxth	r0, r3
 8000826:	88bb      	ldrh	r3, [r7, #4]
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	b29b      	uxth	r3, r3
 800082c:	b219      	sxth	r1, r3
 800082e:	78fb      	ldrb	r3, [r7, #3]
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2304      	movs	r3, #4
 8000834:	2204      	movs	r2, #4
 8000836:	f004 fe60 	bl	80054fa <OLED_DrawFilledRectangle>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <Snake_GenerateFood>:

// Function to generate food at a random position (used by Snake)
static void Snake_GenerateFood()
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
    bool food_on_snake;
    do
    {
        food_on_snake = false;
 800084a:	2300      	movs	r3, #0
 800084c:	71fb      	strb	r3, [r7, #7]
        food.pos.x = rand() % GAME_AREA_WIDTH;
 800084e:	f007 ff89 	bl	8008764 <rand>
 8000852:	4603      	mov	r3, r0
 8000854:	425a      	negs	r2, r3
 8000856:	f003 031f 	and.w	r3, r3, #31
 800085a:	f002 021f 	and.w	r2, r2, #31
 800085e:	bf58      	it	pl
 8000860:	4253      	negpl	r3, r2
 8000862:	b21a      	sxth	r2, r3
 8000864:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <Snake_GenerateFood+0xa4>)
 8000866:	801a      	strh	r2, [r3, #0]
        food.pos.y = rand() % GAME_AREA_HEIGHT;
 8000868:	f007 ff7c 	bl	8008764 <rand>
 800086c:	4602      	mov	r2, r0
 800086e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <Snake_GenerateFood+0xa8>)
 8000870:	fb83 1302 	smull	r1, r3, r3, r2
 8000874:	4413      	add	r3, r2
 8000876:	10d9      	asrs	r1, r3, #3
 8000878:	17d3      	asrs	r3, r2, #31
 800087a:	1ac9      	subs	r1, r1, r3
 800087c:	460b      	mov	r3, r1
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	1a5b      	subs	r3, r3, r1
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	1ad1      	subs	r1, r2, r3
 8000886:	b20a      	sxth	r2, r1
 8000888:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <Snake_GenerateFood+0xa4>)
 800088a:	805a      	strh	r2, [r3, #2]
        for (uint16_t i = 0; i < snake.length; i++)
 800088c:	2300      	movs	r3, #0
 800088e:	80bb      	strh	r3, [r7, #4]
 8000890:	e019      	b.n	80008c6 <Snake_GenerateFood+0x82>
        {
            if (snake.body[i].x == food.pos.x && snake.body[i].y == food.pos.y)
 8000892:	88bb      	ldrh	r3, [r7, #4]
 8000894:	4a16      	ldr	r2, [pc, #88]	@ (80008f0 <Snake_GenerateFood+0xac>)
 8000896:	f932 2023 	ldrsh.w	r2, [r2, r3, lsl #2]
 800089a:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <Snake_GenerateFood+0xa4>)
 800089c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d10d      	bne.n	80008c0 <Snake_GenerateFood+0x7c>
 80008a4:	88bb      	ldrh	r3, [r7, #4]
 80008a6:	4a12      	ldr	r2, [pc, #72]	@ (80008f0 <Snake_GenerateFood+0xac>)
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4413      	add	r3, r2
 80008ac:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80008b0:	4b0d      	ldr	r3, [pc, #52]	@ (80008e8 <Snake_GenerateFood+0xa4>)
 80008b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d102      	bne.n	80008c0 <Snake_GenerateFood+0x7c>
            {
                food_on_snake = true;
 80008ba:	2301      	movs	r3, #1
 80008bc:	71fb      	strb	r3, [r7, #7]
                break;
 80008be:	e008      	b.n	80008d2 <Snake_GenerateFood+0x8e>
        for (uint16_t i = 0; i < snake.length; i++)
 80008c0:	88bb      	ldrh	r3, [r7, #4]
 80008c2:	3301      	adds	r3, #1
 80008c4:	80bb      	strh	r3, [r7, #4]
 80008c6:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <Snake_GenerateFood+0xac>)
 80008c8:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80008cc:	88ba      	ldrh	r2, [r7, #4]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d3df      	bcc.n	8000892 <Snake_GenerateFood+0x4e>
            }
        }
    } while (food_on_snake);
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d1b8      	bne.n	800084a <Snake_GenerateFood+0x6>
    food.active = true;
 80008d8:	4b03      	ldr	r3, [pc, #12]	@ (80008e8 <Snake_GenerateFood+0xa4>)
 80008da:	2201      	movs	r2, #1
 80008dc:	711a      	strb	r2, [r3, #4]
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000230 	.word	0x20000230
 80008ec:	92492493 	.word	0x92492493
 80008f0:	2000009c 	.word	0x2000009c

080008f4 <Snake_InitGame>:

void Snake_InitGame(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
    // srand(HAL_GetTick()); // Seed RNG if not done elsewhere
    gameOver = false;
 80008fa:	4b28      	ldr	r3, [pc, #160]	@ (800099c <Snake_InitGame+0xa8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
    snake.length = 3;
 8000900:	4b27      	ldr	r3, [pc, #156]	@ (80009a0 <Snake_InitGame+0xac>)
 8000902:	2203      	movs	r2, #3
 8000904:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
    snake.dir = DIR_RIGHT;
 8000908:	4b25      	ldr	r3, [pc, #148]	@ (80009a0 <Snake_InitGame+0xac>)
 800090a:	2203      	movs	r2, #3
 800090c:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192
    snake.body[0].x = GAME_AREA_WIDTH / 2;
 8000910:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <Snake_InitGame+0xac>)
 8000912:	2210      	movs	r2, #16
 8000914:	801a      	strh	r2, [r3, #0]
    snake.body[0].y = GAME_AREA_HEIGHT / 2;
 8000916:	4b22      	ldr	r3, [pc, #136]	@ (80009a0 <Snake_InitGame+0xac>)
 8000918:	2207      	movs	r2, #7
 800091a:	805a      	strh	r2, [r3, #2]
    snake.body[1].x = snake.body[0].x - 1;
 800091c:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <Snake_InitGame+0xac>)
 800091e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000922:	b29b      	uxth	r3, r3
 8000924:	3b01      	subs	r3, #1
 8000926:	b29b      	uxth	r3, r3
 8000928:	b21a      	sxth	r2, r3
 800092a:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <Snake_InitGame+0xac>)
 800092c:	809a      	strh	r2, [r3, #4]
    snake.body[1].y = snake.body[0].y;
 800092e:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <Snake_InitGame+0xac>)
 8000930:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000934:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <Snake_InitGame+0xac>)
 8000936:	80da      	strh	r2, [r3, #6]
    snake.body[2].x = snake.body[0].x - 2;
 8000938:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <Snake_InitGame+0xac>)
 800093a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800093e:	b29b      	uxth	r3, r3
 8000940:	3b02      	subs	r3, #2
 8000942:	b29b      	uxth	r3, r3
 8000944:	b21a      	sxth	r2, r3
 8000946:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <Snake_InitGame+0xac>)
 8000948:	811a      	strh	r2, [r3, #8]
    snake.body[2].y = snake.body[0].y;
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <Snake_InitGame+0xac>)
 800094c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000950:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <Snake_InitGame+0xac>)
 8000952:	815a      	strh	r2, [r3, #10]
    for (uint16_t i = snake.length; i < SNAKE_MAX_LENGTH; ++i)
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <Snake_InitGame+0xac>)
 8000956:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 800095a:	80fb      	strh	r3, [r7, #6]
 800095c:	e00f      	b.n	800097e <Snake_InitGame+0x8a>
    {
        snake.body[i].x = -1;
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	4a0f      	ldr	r2, [pc, #60]	@ (80009a0 <Snake_InitGame+0xac>)
 8000962:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000966:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
        snake.body[i].y = -1;
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	4a0c      	ldr	r2, [pc, #48]	@ (80009a0 <Snake_InitGame+0xac>)
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	4413      	add	r3, r2
 8000972:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000976:	805a      	strh	r2, [r3, #2]
    for (uint16_t i = snake.length; i < SNAKE_MAX_LENGTH; ++i)
 8000978:	88fb      	ldrh	r3, [r7, #6]
 800097a:	3301      	adds	r3, #1
 800097c:	80fb      	strh	r3, [r7, #6]
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	2b63      	cmp	r3, #99	@ 0x63
 8000982:	d9ec      	bls.n	800095e <Snake_InitGame+0x6a>
    }
    Snake_GenerateFood();
 8000984:	f7ff ff5e 	bl	8000844 <Snake_GenerateFood>
    gameTickLast = HAL_GetTick();
 8000988:	f005 fa1c 	bl	8005dc4 <HAL_GetTick>
 800098c:	4603      	mov	r3, r0
 800098e:	4a05      	ldr	r2, [pc, #20]	@ (80009a4 <Snake_InitGame+0xb0>)
 8000990:	6013      	str	r3, [r2, #0]
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000236 	.word	0x20000236
 80009a0:	2000009c 	.word	0x2000009c
 80009a4:	20000238 	.word	0x20000238

080009a8 <Snake_Draw>:

static void Snake_Draw(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
    for (uint16_t i = 0; i < snake.length; i++)
 80009ae:	2300      	movs	r3, #0
 80009b0:	80fb      	strh	r3, [r7, #6]
 80009b2:	e010      	b.n	80009d6 <Snake_Draw+0x2e>
    {
        DrawBlock(snake.body[i].x, snake.body[i].y, 1);
 80009b4:	88fb      	ldrh	r3, [r7, #6]
 80009b6:	4a1d      	ldr	r2, [pc, #116]	@ (8000a2c <Snake_Draw+0x84>)
 80009b8:	f932 0023 	ldrsh.w	r0, [r2, r3, lsl #2]
 80009bc:	88fb      	ldrh	r3, [r7, #6]
 80009be:	4a1b      	ldr	r2, [pc, #108]	@ (8000a2c <Snake_Draw+0x84>)
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	4413      	add	r3, r2
 80009c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80009c8:	2201      	movs	r2, #1
 80009ca:	4619      	mov	r1, r3
 80009cc:	f7ff ff1e 	bl	800080c <DrawBlock>
    for (uint16_t i = 0; i < snake.length; i++)
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	3301      	adds	r3, #1
 80009d4:	80fb      	strh	r3, [r7, #6]
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <Snake_Draw+0x84>)
 80009d8:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80009dc:	88fa      	ldrh	r2, [r7, #6]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d3e8      	bcc.n	80009b4 <Snake_Draw+0xc>
    }
    if (food.active)
 80009e2:	4b13      	ldr	r3, [pc, #76]	@ (8000a30 <Snake_Draw+0x88>)
 80009e4:	791b      	ldrb	r3, [r3, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d009      	beq.n	80009fe <Snake_Draw+0x56>
    {
        DrawBlock(food.pos.x, food.pos.y, 1);
 80009ea:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <Snake_Draw+0x88>)
 80009ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000a30 <Snake_Draw+0x88>)
 80009f2:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 80009f6:	2201      	movs	r2, #1
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff07 	bl	800080c <DrawBlock>
    }
    if (gameOver)
 80009fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <Snake_Draw+0x8c>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d00e      	beq.n	8000a24 <Snake_Draw+0x7c>
    {
        OLED_DisplayString(OLED_WIDTH / 2 - 3 * 6, OLED_HEIGHT / 2 - 4, "GAME");
 8000a06:	4a0c      	ldr	r2, [pc, #48]	@ (8000a38 <Snake_Draw+0x90>)
 8000a08:	211c      	movs	r1, #28
 8000a0a:	202e      	movs	r0, #46	@ 0x2e
 8000a0c:	f001 fcf2 	bl	80023f4 <OLED_DisplayString>
        OLED_DisplayString(OLED_WIDTH / 2 - 3 * 6, OLED_HEIGHT / 2 + 4, "OVER");
 8000a10:	4a0a      	ldr	r2, [pc, #40]	@ (8000a3c <Snake_Draw+0x94>)
 8000a12:	2124      	movs	r1, #36	@ 0x24
 8000a14:	202e      	movs	r0, #46	@ 0x2e
 8000a16:	f001 fced 	bl	80023f4 <OLED_DisplayString>
        OLED_DisplayString(OLED_WIDTH / 2 - 5 * 6, OLED_HEIGHT / 2 + 12, "RST BTN=RS");
 8000a1a:	4a09      	ldr	r2, [pc, #36]	@ (8000a40 <Snake_Draw+0x98>)
 8000a1c:	212c      	movs	r1, #44	@ 0x2c
 8000a1e:	2022      	movs	r0, #34	@ 0x22
 8000a20:	f001 fce8 	bl	80023f4 <OLED_DisplayString>
    }
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	2000009c 	.word	0x2000009c
 8000a30:	20000230 	.word	0x20000230
 8000a34:	20000236 	.word	0x20000236
 8000a38:	0800afd4 	.word	0x0800afd4
 8000a3c:	0800afdc 	.word	0x0800afdc
 8000a40:	0800afe4 	.word	0x0800afe4

08000a44 <Snake_Update>:

static void Snake_Update(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
    if (gameOver)
 8000a4a:	4b5a      	ldr	r3, [pc, #360]	@ (8000bb4 <Snake_Update+0x170>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f040 80ab 	bne.w	8000baa <Snake_Update+0x166>
        return;

    Point new_head = snake.body[0];
 8000a54:	4b58      	ldr	r3, [pc, #352]	@ (8000bb8 <Snake_Update+0x174>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	603b      	str	r3, [r7, #0]
    switch (snake.dir)
 8000a5a:	4b57      	ldr	r3, [pc, #348]	@ (8000bb8 <Snake_Update+0x174>)
 8000a5c:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000a60:	2b03      	cmp	r3, #3
 8000a62:	d82b      	bhi.n	8000abc <Snake_Update+0x78>
 8000a64:	a201      	add	r2, pc, #4	@ (adr r2, 8000a6c <Snake_Update+0x28>)
 8000a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6a:	bf00      	nop
 8000a6c:	08000a7d 	.word	0x08000a7d
 8000a70:	08000a8d 	.word	0x08000a8d
 8000a74:	08000a9d 	.word	0x08000a9d
 8000a78:	08000aad 	.word	0x08000aad
    {
    case DIR_UP:
        new_head.y--;
 8000a7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	3b01      	subs	r3, #1
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	807b      	strh	r3, [r7, #2]
        break;
 8000a8a:	e017      	b.n	8000abc <Snake_Update+0x78>
    case DIR_DOWN:
        new_head.y++;
 8000a8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	3301      	adds	r3, #1
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	807b      	strh	r3, [r7, #2]
        break;
 8000a9a:	e00f      	b.n	8000abc <Snake_Update+0x78>
    case DIR_LEFT:
        new_head.x--;
 8000a9c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	b21b      	sxth	r3, r3
 8000aa8:	803b      	strh	r3, [r7, #0]
        break;
 8000aaa:	e007      	b.n	8000abc <Snake_Update+0x78>
    case DIR_RIGHT:
        new_head.x++;
 8000aac:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	b21b      	sxth	r3, r3
 8000ab8:	803b      	strh	r3, [r7, #0]
        break;
 8000aba:	bf00      	nop
    }

    if (new_head.x < 0)
 8000abc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	da02      	bge.n	8000aca <Snake_Update+0x86>
        new_head.x = GAME_AREA_WIDTH - 1;
 8000ac4:	231f      	movs	r3, #31
 8000ac6:	803b      	strh	r3, [r7, #0]
 8000ac8:	e005      	b.n	8000ad6 <Snake_Update+0x92>
    else if (new_head.x >= GAME_AREA_WIDTH)
 8000aca:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ace:	2b1f      	cmp	r3, #31
 8000ad0:	dd01      	ble.n	8000ad6 <Snake_Update+0x92>
        new_head.x = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	803b      	strh	r3, [r7, #0]
    if (new_head.y < 0)
 8000ad6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	da02      	bge.n	8000ae4 <Snake_Update+0xa0>
        new_head.y = GAME_AREA_HEIGHT - 1;
 8000ade:	230d      	movs	r3, #13
 8000ae0:	807b      	strh	r3, [r7, #2]
 8000ae2:	e005      	b.n	8000af0 <Snake_Update+0xac>
    else if (new_head.y >= GAME_AREA_HEIGHT)
 8000ae4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ae8:	2b0d      	cmp	r3, #13
 8000aea:	dd01      	ble.n	8000af0 <Snake_Update+0xac>
        new_head.y = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	807b      	strh	r3, [r7, #2]

    for (uint16_t i = 0; i < snake.length - 1; i++) // Check up to length-1
 8000af0:	2300      	movs	r3, #0
 8000af2:	80fb      	strh	r3, [r7, #6]
 8000af4:	e018      	b.n	8000b28 <Snake_Update+0xe4>
    {
        if (new_head.x == snake.body[i].x && new_head.y == snake.body[i].y)
 8000af6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000afa:	88fb      	ldrh	r3, [r7, #6]
 8000afc:	492e      	ldr	r1, [pc, #184]	@ (8000bb8 <Snake_Update+0x174>)
 8000afe:	f931 3023 	ldrsh.w	r3, [r1, r3, lsl #2]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d10d      	bne.n	8000b22 <Snake_Update+0xde>
 8000b06:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	492a      	ldr	r1, [pc, #168]	@ (8000bb8 <Snake_Update+0x174>)
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	440b      	add	r3, r1
 8000b12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d103      	bne.n	8000b22 <Snake_Update+0xde>
        {
            gameOver = true;
 8000b1a:	4b26      	ldr	r3, [pc, #152]	@ (8000bb4 <Snake_Update+0x170>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	701a      	strb	r2, [r3, #0]
            return;
 8000b20:	e044      	b.n	8000bac <Snake_Update+0x168>
    for (uint16_t i = 0; i < snake.length - 1; i++) // Check up to length-1
 8000b22:	88fb      	ldrh	r3, [r7, #6]
 8000b24:	3301      	adds	r3, #1
 8000b26:	80fb      	strh	r3, [r7, #6]
 8000b28:	88fa      	ldrh	r2, [r7, #6]
 8000b2a:	4b23      	ldr	r3, [pc, #140]	@ (8000bb8 <Snake_Update+0x174>)
 8000b2c:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000b30:	3b01      	subs	r3, #1
 8000b32:	429a      	cmp	r2, r3
 8000b34:	dbdf      	blt.n	8000af6 <Snake_Update+0xb2>
        }
    }

    if (food.active && new_head.x == food.pos.x && new_head.y == food.pos.y)
 8000b36:	4b21      	ldr	r3, [pc, #132]	@ (8000bbc <Snake_Update+0x178>)
 8000b38:	791b      	ldrb	r3, [r3, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d01c      	beq.n	8000b78 <Snake_Update+0x134>
 8000b3e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b42:	4b1e      	ldr	r3, [pc, #120]	@ (8000bbc <Snake_Update+0x178>)
 8000b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d115      	bne.n	8000b78 <Snake_Update+0x134>
 8000b4c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000b50:	4b1a      	ldr	r3, [pc, #104]	@ (8000bbc <Snake_Update+0x178>)
 8000b52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d10e      	bne.n	8000b78 <Snake_Update+0x134>
    {
        if (snake.length < SNAKE_MAX_LENGTH)
 8000b5a:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <Snake_Update+0x174>)
 8000b5c:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000b60:	2b63      	cmp	r3, #99	@ 0x63
 8000b62:	d807      	bhi.n	8000b74 <Snake_Update+0x130>
            snake.length++;
 8000b64:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <Snake_Update+0x174>)
 8000b66:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <Snake_Update+0x174>)
 8000b70:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
        Snake_GenerateFood();
 8000b74:	f7ff fe66 	bl	8000844 <Snake_GenerateFood>
    }
    // No else needed for tail movement; body shift handles it.

    for (uint16_t i = snake.length - 1; i > 0; i--)
 8000b78:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <Snake_Update+0x174>)
 8000b7a:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	80bb      	strh	r3, [r7, #4]
 8000b82:	e00b      	b.n	8000b9c <Snake_Update+0x158>
    {
        snake.body[i] = snake.body[i - 1];
 8000b84:	88bb      	ldrh	r3, [r7, #4]
 8000b86:	1e5a      	subs	r2, r3, #1
 8000b88:	88bb      	ldrh	r3, [r7, #4]
 8000b8a:	490b      	ldr	r1, [pc, #44]	@ (8000bb8 <Snake_Update+0x174>)
 8000b8c:	480a      	ldr	r0, [pc, #40]	@ (8000bb8 <Snake_Update+0x174>)
 8000b8e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8000b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint16_t i = snake.length - 1; i > 0; i--)
 8000b96:	88bb      	ldrh	r3, [r7, #4]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	80bb      	strh	r3, [r7, #4]
 8000b9c:	88bb      	ldrh	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d1f0      	bne.n	8000b84 <Snake_Update+0x140>
    }
    snake.body[0] = new_head;
 8000ba2:	4a05      	ldr	r2, [pc, #20]	@ (8000bb8 <Snake_Update+0x174>)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	e000      	b.n	8000bac <Snake_Update+0x168>
        return;
 8000baa:	bf00      	nop
}
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000236 	.word	0x20000236
 8000bb8:	2000009c 	.word	0x2000009c
 8000bbc:	20000230 	.word	0x20000230

08000bc0 <Snake_HandleInput>:

void Snake_HandleInput(Direction input_dir)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
    if ((snake.dir == DIR_UP && input_dir != DIR_DOWN) ||
 8000bca:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <Snake_HandleInput+0x5c>)
 8000bcc:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <Snake_HandleInput+0x1a>
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d117      	bne.n	8000c0a <Snake_HandleInput+0x4a>
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <Snake_HandleInput+0x5c>)
 8000bdc:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
    if ((snake.dir == DIR_UP && input_dir != DIR_DOWN) ||
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d102      	bne.n	8000bea <Snake_HandleInput+0x2a>
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d10f      	bne.n	8000c0a <Snake_HandleInput+0x4a>
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <Snake_HandleInput+0x5c>)
 8000bec:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d102      	bne.n	8000bfa <Snake_HandleInput+0x3a>
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b03      	cmp	r3, #3
 8000bf8:	d107      	bne.n	8000c0a <Snake_HandleInput+0x4a>
        (snake.dir == DIR_RIGHT && input_dir != DIR_LEFT))
 8000bfa:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <Snake_HandleInput+0x5c>)
 8000bfc:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8000c00:	2b03      	cmp	r3, #3
 8000c02:	d106      	bne.n	8000c12 <Snake_HandleInput+0x52>
        (snake.dir == DIR_RIGHT && input_dir != DIR_LEFT))
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d003      	beq.n	8000c12 <Snake_HandleInput+0x52>
    {
        snake.dir = input_dir;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	@ (8000c1c <Snake_HandleInput+0x5c>)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	f882 3192 	strb.w	r3, [r2, #402]	@ 0x192
    }
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	2000009c 	.word	0x2000009c

08000c20 <Snake_GameLoop>:

void Snake_GameLoop(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
    static uint16_t LastCount;
    static bool preMutiTurn = false;

    if (FirstRun)
 8000c26:	4b60      	ldr	r3, [pc, #384]	@ (8000da8 <Snake_GameLoop+0x188>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d006      	beq.n	8000c3c <Snake_GameLoop+0x1c>
    {
        FirstRun = false;
 8000c2e:	4b5e      	ldr	r3, [pc, #376]	@ (8000da8 <Snake_GameLoop+0x188>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
        LastCount = count;
 8000c34:	4b5d      	ldr	r3, [pc, #372]	@ (8000dac <Snake_GameLoop+0x18c>)
 8000c36:	881a      	ldrh	r2, [r3, #0]
 8000c38:	4b5d      	ldr	r3, [pc, #372]	@ (8000db0 <Snake_GameLoop+0x190>)
 8000c3a:	801a      	strh	r2, [r3, #0]
    }

    if (!preMutiTurn)
 8000c3c:	4b5d      	ldr	r3, [pc, #372]	@ (8000db4 <Snake_GameLoop+0x194>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	f083 0301 	eor.w	r3, r3, #1
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d065      	beq.n	8000d16 <Snake_GameLoop+0xf6>
    {
        if (count - LastCount > 1)
 8000c4a:	4b58      	ldr	r3, [pc, #352]	@ (8000dac <Snake_GameLoop+0x18c>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b57      	ldr	r3, [pc, #348]	@ (8000db0 <Snake_GameLoop+0x190>)
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	dd2a      	ble.n	8000cb0 <Snake_GameLoop+0x90>
        {
            if (snake.dir == DIR_UP)
 8000c5a:	4b57      	ldr	r3, [pc, #348]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000c5c:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d103      	bne.n	8000c6c <Snake_GameLoop+0x4c>
                Snake_HandleInput(DIR_RIGHT);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f7ff ffab 	bl	8000bc0 <Snake_HandleInput>
 8000c6a:	e019      	b.n	8000ca0 <Snake_GameLoop+0x80>
            else if (snake.dir == DIR_DOWN)
 8000c6c:	4b52      	ldr	r3, [pc, #328]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000c6e:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d103      	bne.n	8000c7e <Snake_GameLoop+0x5e>
                Snake_HandleInput(DIR_LEFT);
 8000c76:	2002      	movs	r0, #2
 8000c78:	f7ff ffa2 	bl	8000bc0 <Snake_HandleInput>
 8000c7c:	e010      	b.n	8000ca0 <Snake_GameLoop+0x80>
            else if (snake.dir == DIR_LEFT)
 8000c7e:	4b4e      	ldr	r3, [pc, #312]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000c80:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d103      	bne.n	8000c90 <Snake_GameLoop+0x70>
                Snake_HandleInput(DIR_UP);
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff ff99 	bl	8000bc0 <Snake_HandleInput>
 8000c8e:	e007      	b.n	8000ca0 <Snake_GameLoop+0x80>
            else if (snake.dir == DIR_RIGHT)
 8000c90:	4b49      	ldr	r3, [pc, #292]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000c92:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d102      	bne.n	8000ca0 <Snake_GameLoop+0x80>
                Snake_HandleInput(DIR_DOWN);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff ff90 	bl	8000bc0 <Snake_HandleInput>

            preMutiTurn = true;
 8000ca0:	4b44      	ldr	r3, [pc, #272]	@ (8000db4 <Snake_GameLoop+0x194>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	701a      	strb	r2, [r3, #0]
            LastCount = count;
 8000ca6:	4b41      	ldr	r3, [pc, #260]	@ (8000dac <Snake_GameLoop+0x18c>)
 8000ca8:	881a      	ldrh	r2, [r3, #0]
 8000caa:	4b41      	ldr	r3, [pc, #260]	@ (8000db0 <Snake_GameLoop+0x190>)
 8000cac:	801a      	strh	r2, [r3, #0]
 8000cae:	e032      	b.n	8000d16 <Snake_GameLoop+0xf6>
        }
        else if (count - LastCount < -1)
 8000cb0:	4b3e      	ldr	r3, [pc, #248]	@ (8000dac <Snake_GameLoop+0x18c>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b3e      	ldr	r3, [pc, #248]	@ (8000db0 <Snake_GameLoop+0x190>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc0:	da29      	bge.n	8000d16 <Snake_GameLoop+0xf6>
        {
            if (snake.dir == DIR_UP)
 8000cc2:	4b3d      	ldr	r3, [pc, #244]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000cc4:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d103      	bne.n	8000cd4 <Snake_GameLoop+0xb4>
                Snake_HandleInput(DIR_LEFT);
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f7ff ff77 	bl	8000bc0 <Snake_HandleInput>
 8000cd2:	e019      	b.n	8000d08 <Snake_GameLoop+0xe8>
            else if (snake.dir == DIR_DOWN)
 8000cd4:	4b38      	ldr	r3, [pc, #224]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000cd6:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d103      	bne.n	8000ce6 <Snake_GameLoop+0xc6>
                Snake_HandleInput(DIR_RIGHT);
 8000cde:	2003      	movs	r0, #3
 8000ce0:	f7ff ff6e 	bl	8000bc0 <Snake_HandleInput>
 8000ce4:	e010      	b.n	8000d08 <Snake_GameLoop+0xe8>
            else if (snake.dir == DIR_LEFT)
 8000ce6:	4b34      	ldr	r3, [pc, #208]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000ce8:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d103      	bne.n	8000cf8 <Snake_GameLoop+0xd8>
                Snake_HandleInput(DIR_DOWN);
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f7ff ff65 	bl	8000bc0 <Snake_HandleInput>
 8000cf6:	e007      	b.n	8000d08 <Snake_GameLoop+0xe8>
            else if (snake.dir == DIR_RIGHT)
 8000cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000cfa:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	d102      	bne.n	8000d08 <Snake_GameLoop+0xe8>
                Snake_HandleInput(DIR_UP);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff ff5c 	bl	8000bc0 <Snake_HandleInput>

            preMutiTurn = true;
 8000d08:	4b2a      	ldr	r3, [pc, #168]	@ (8000db4 <Snake_GameLoop+0x194>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
            LastCount = count;
 8000d0e:	4b27      	ldr	r3, [pc, #156]	@ (8000dac <Snake_GameLoop+0x18c>)
 8000d10:	881a      	ldrh	r2, [r3, #0]
 8000d12:	4b27      	ldr	r3, [pc, #156]	@ (8000db0 <Snake_GameLoop+0x190>)
 8000d14:	801a      	strh	r2, [r3, #0]
        }
    }

    if (HAL_GetTick() - gameTickLast >= GAME_TICK_MS)
 8000d16:	f005 f855 	bl	8005dc4 <HAL_GetTick>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	4b27      	ldr	r3, [pc, #156]	@ (8000dbc <Snake_GameLoop+0x19c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b63      	cmp	r3, #99	@ 0x63
 8000d24:	d909      	bls.n	8000d3a <Snake_GameLoop+0x11a>
    {
        Snake_Update();
 8000d26:	f7ff fe8d 	bl	8000a44 <Snake_Update>
        gameTickLast = HAL_GetTick();
 8000d2a:	f005 f84b 	bl	8005dc4 <HAL_GetTick>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4a22      	ldr	r2, [pc, #136]	@ (8000dbc <Snake_GameLoop+0x19c>)
 8000d32:	6013      	str	r3, [r2, #0]
        preMutiTurn = false;
 8000d34:	4b1f      	ldr	r3, [pc, #124]	@ (8000db4 <Snake_GameLoop+0x194>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
    }
    Snake_Draw();
 8000d3a:	f7ff fe35 	bl	80009a8 <Snake_Draw>

    if (gameOver)
 8000d3e:	4b20      	ldr	r3, [pc, #128]	@ (8000dc0 <Snake_GameLoop+0x1a0>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d01d      	beq.n	8000d82 <Snake_GameLoop+0x162>
    {
        if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8000d46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d4a:	481e      	ldr	r0, [pc, #120]	@ (8000dc4 <Snake_GameLoop+0x1a4>)
 8000d4c:	f005 fc5a 	bl	8006604 <HAL_GPIO_ReadPin>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d115      	bne.n	8000d82 <Snake_GameLoop+0x162>
        {
            HAL_Delay(INPUT_DEBOUNCE_MS);
 8000d56:	2032      	movs	r0, #50	@ 0x32
 8000d58:	f005 f83e 	bl	8005dd8 <HAL_Delay>
            if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8000d5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d60:	4818      	ldr	r0, [pc, #96]	@ (8000dc4 <Snake_GameLoop+0x1a4>)
 8000d62:	f005 fc4f 	bl	8006604 <HAL_GPIO_ReadPin>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d10a      	bne.n	8000d82 <Snake_GameLoop+0x162>
            {
                Snake_InitGame();
 8000d6c:	f7ff fdc2 	bl	80008f4 <Snake_InitGame>
                while (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8000d70:	bf00      	nop
 8000d72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d76:	4813      	ldr	r0, [pc, #76]	@ (8000dc4 <Snake_GameLoop+0x1a4>)
 8000d78:	f005 fc44 	bl	8006604 <HAL_GPIO_ReadPin>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0f7      	beq.n	8000d72 <Snake_GameLoop+0x152>
                    ;
            }
        }
    }
    char score_str[20];
    sprintf(score_str, "Score: %d", snake.length - 3);
 8000d82:	4b0d      	ldr	r3, [pc, #52]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000d84:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000d88:	1eda      	subs	r2, r3, #3
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	490e      	ldr	r1, [pc, #56]	@ (8000dc8 <Snake_GameLoop+0x1a8>)
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f007 fde8 	bl	8008964 <siprintf>
    OLED_DisplayString(0, OLED_HEIGHT-8, score_str);
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	461a      	mov	r2, r3
 8000d98:	2138      	movs	r1, #56	@ 0x38
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f001 fb2a 	bl	80023f4 <OLED_DisplayString>
}
 8000da0:	bf00      	nop
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000000 	.word	0x20000000
 8000dac:	20000304 	.word	0x20000304
 8000db0:	20000264 	.word	0x20000264
 8000db4:	20000266 	.word	0x20000266
 8000db8:	2000009c 	.word	0x2000009c
 8000dbc:	20000238 	.word	0x20000238
 8000dc0:	20000236 	.word	0x20000236
 8000dc4:	40010c00 	.word	0x40010c00
 8000dc8:	0800aff0 	.word	0x0800aff0

08000dcc <Game2048_AddRandomTile>:

#pragma region 2048 Game Definitions
// --- 2048 Game Implementation ---

static void Game2048_AddRandomTile()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b092      	sub	sp, #72	@ 0x48
 8000dd0:	af00      	add	r7, sp, #0
    Point empty_tiles[GAME2048_BOARD_SIZE * GAME2048_BOARD_SIZE]; // Use GAME2048_BOARD_SIZE
    uint8_t num_empty_tiles = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8000dde:	e035      	b.n	8000e4c <Game2048_AddRandomTile+0x80>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000de0:	2300      	movs	r3, #0
 8000de2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8000de6:	e028      	b.n	8000e3a <Game2048_AddRandomTile+0x6e>
        {
            if (game2048_board[r][c].value == 0)
 8000de8:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8000dec:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000df0:	493a      	ldr	r1, [pc, #232]	@ (8000edc <Game2048_AddRandomTile+0x110>)
 8000df2:	0092      	lsls	r2, r2, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d118      	bne.n	8000e30 <Game2048_AddRandomTile+0x64>
            {
                empty_tiles[num_empty_tiles].x = c;
 8000dfe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000e02:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8000e06:	b212      	sxth	r2, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	3348      	adds	r3, #72	@ 0x48
 8000e0c:	443b      	add	r3, r7
 8000e0e:	f823 2c48 	strh.w	r2, [r3, #-72]
                empty_tiles[num_empty_tiles].y = r;
 8000e12:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000e16:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8000e1a:	b212      	sxth	r2, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	3348      	adds	r3, #72	@ 0x48
 8000e20:	443b      	add	r3, r7
 8000e22:	f823 2c46 	strh.w	r2, [r3, #-70]
                num_empty_tiles++;
 8000e26:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000e30:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000e34:	3301      	adds	r3, #1
 8000e36:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8000e3a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d9d2      	bls.n	8000de8 <Game2048_AddRandomTile+0x1c>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000e42:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000e46:	3301      	adds	r3, #1
 8000e48:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8000e4c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000e50:	2b03      	cmp	r3, #3
 8000e52:	d9c5      	bls.n	8000de0 <Game2048_AddRandomTile+0x14>
            }
        }
    }
    if (num_empty_tiles > 0)
 8000e54:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d03a      	beq.n	8000ed2 <Game2048_AddRandomTile+0x106>
    {
        uint16_t rand_index = rand() % num_empty_tiles;
 8000e5c:	f007 fc82 	bl	8008764 <rand>
 8000e60:	4602      	mov	r2, r0
 8000e62:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000e66:	fb92 f1f3 	sdiv	r1, r2, r3
 8000e6a:	fb01 f303 	mul.w	r3, r1, r3
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        uint8_t r_pos = empty_tiles[rand_index].y;
 8000e74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	3348      	adds	r3, #72	@ 0x48
 8000e7c:	443b      	add	r3, r7
 8000e7e:	f933 3c46 	ldrsh.w	r3, [r3, #-70]
 8000e82:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
        uint8_t c_pos = empty_tiles[rand_index].x;
 8000e86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	3348      	adds	r3, #72	@ 0x48
 8000e8e:	443b      	add	r3, r7
 8000e90:	f933 3c48 	ldrsh.w	r3, [r3, #-72]
 8000e94:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
        game2048_board[r_pos][c_pos].value = (rand() % 10 == 0) ? 4 : 2;
 8000e98:	f007 fc64 	bl	8008764 <rand>
 8000e9c:	4601      	mov	r1, r0
 8000e9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <Game2048_AddRandomTile+0x114>)
 8000ea0:	fb83 2301 	smull	r2, r3, r3, r1
 8000ea4:	109a      	asrs	r2, r3, #2
 8000ea6:	17cb      	asrs	r3, r1, #31
 8000ea8:	1ad2      	subs	r2, r2, r3
 8000eaa:	4613      	mov	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	1aca      	subs	r2, r1, r3
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	d101      	bne.n	8000ebc <Game2048_AddRandomTile+0xf0>
 8000eb8:	2004      	movs	r0, #4
 8000eba:	e000      	b.n	8000ebe <Game2048_AddRandomTile+0xf2>
 8000ebc:	2002      	movs	r0, #2
 8000ebe:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 8000ec2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000ec6:	4905      	ldr	r1, [pc, #20]	@ (8000edc <Game2048_AddRandomTile+0x110>)
 8000ec8:	0092      	lsls	r2, r2, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	4602      	mov	r2, r0
 8000ece:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }
}
 8000ed2:	bf00      	nop
 8000ed4:	3748      	adds	r7, #72	@ 0x48
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000023c 	.word	0x2000023c
 8000ee0:	66666667 	.word	0x66666667

08000ee4 <Game2048_Init>:

void Game2048_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000eea:	2300      	movs	r3, #0
 8000eec:	71fb      	strb	r3, [r7, #7]
 8000eee:	e013      	b.n	8000f18 <Game2048_Init+0x34>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	71bb      	strb	r3, [r7, #6]
 8000ef4:	e00a      	b.n	8000f0c <Game2048_Init+0x28>
        {
            game2048_board[r][c].value = 0;
 8000ef6:	79fa      	ldrb	r2, [r7, #7]
 8000ef8:	79bb      	ldrb	r3, [r7, #6]
 8000efa:	4914      	ldr	r1, [pc, #80]	@ (8000f4c <Game2048_Init+0x68>)
 8000efc:	0092      	lsls	r2, r2, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	2200      	movs	r2, #0
 8000f02:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000f06:	79bb      	ldrb	r3, [r7, #6]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	71bb      	strb	r3, [r7, #6]
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d9f1      	bls.n	8000ef6 <Game2048_Init+0x12>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	3301      	adds	r3, #1
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d9e8      	bls.n	8000ef0 <Game2048_Init+0xc>
        }
    }
    game2048_score = 0;
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <Game2048_Init+0x6c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
    game2048_game_over = false;
 8000f24:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <Game2048_Init+0x70>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
    game2048_game_won = false;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <Game2048_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
    game2048_move_made_this_turn = false;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <Game2048_Init+0x78>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
    FirstRun = true; // Reset the first run flag
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <Game2048_Init+0x7c>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	701a      	strb	r2, [r3, #0]
    Game2048_AddRandomTile();
 8000f3c:	f7ff ff46 	bl	8000dcc <Game2048_AddRandomTile>

    OLED_UpdateDisplayVSync(); // Update display to show the initial state
 8000f40:	f000 fe6c 	bl	8001c1c <OLED_UpdateDisplayVSync>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2000023c 	.word	0x2000023c
 8000f50:	2000025c 	.word	0x2000025c
 8000f54:	20000260 	.word	0x20000260
 8000f58:	20000261 	.word	0x20000261
 8000f5c:	20000262 	.word	0x20000262
 8000f60:	20000000 	.word	0x20000000

08000f64 <Game2048_Restart>:

void Game2048_Restart(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
    Game2048_Init();
 8000f68:	f7ff ffbc 	bl	8000ee4 <Game2048_Init>
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <Game2048_DrawBoard>:

void Game2048_DrawBoard(void)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b089      	sub	sp, #36	@ 0x24
 8000f74:	af02      	add	r7, sp, #8
    OLED_ClearBuffer();
 8000f76:	f000 fe09 	bl	8001b8c <OLED_ClearBuffer>
    char str_buffer[10];
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	75fb      	strb	r3, [r7, #23]
 8000f7e:	e068      	b.n	8001052 <Game2048_DrawBoard+0xe2>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000f80:	2300      	movs	r3, #0
 8000f82:	75bb      	strb	r3, [r7, #22]
 8000f84:	e05f      	b.n	8001046 <Game2048_DrawBoard+0xd6>
        {
            uint16_t val = game2048_board[r][c].value;
 8000f86:	7dfa      	ldrb	r2, [r7, #23]
 8000f88:	7dbb      	ldrb	r3, [r7, #22]
 8000f8a:	494d      	ldr	r1, [pc, #308]	@ (80010c0 <Game2048_DrawBoard+0x150>)
 8000f8c:	0092      	lsls	r2, r2, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f94:	82bb      	strh	r3, [r7, #20]
            uint8_t tile_x = c * GAME2048_TILE_WIDTH;
 8000f96:	7dbb      	ldrb	r3, [r7, #22]
 8000f98:	015b      	lsls	r3, r3, #5
 8000f9a:	74fb      	strb	r3, [r7, #19]
            uint8_t tile_y = r * GAME2048_TILE_HEIGHT;
 8000f9c:	7dfb      	ldrb	r3, [r7, #23]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	00d2      	lsls	r2, r2, #3
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	74bb      	strb	r3, [r7, #18]
            uint8_t tile_inner_width = GAME2048_TILE_WIDTH - 2 * GAME2048_TILE_PADDING;
 8000fa8:	231e      	movs	r3, #30
 8000faa:	747b      	strb	r3, [r7, #17]
            uint8_t tile_inner_height = GAME2048_TILE_HEIGHT - 2 * GAME2048_TILE_PADDING;
 8000fac:	230c      	movs	r3, #12
 8000fae:	743b      	strb	r3, [r7, #16]

            OLED_DrawFilledRectangle(tile_x + GAME2048_TILE_PADDING,
 8000fb0:	7cfb      	ldrb	r3, [r7, #19]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	b218      	sxth	r0, r3
                                     tile_y + GAME2048_TILE_PADDING,
 8000fba:	7cbb      	ldrb	r3, [r7, #18]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	b29b      	uxth	r3, r3
            OLED_DrawFilledRectangle(tile_x + GAME2048_TILE_PADDING,
 8000fc2:	b219      	sxth	r1, r3
 8000fc4:	8abb      	ldrh	r3, [r7, #20]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	bf14      	ite	ne
 8000fca:	2301      	movne	r3, #1
 8000fcc:	2300      	moveq	r3, #0
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	461c      	mov	r4, r3
 8000fd2:	7c3b      	ldrb	r3, [r7, #16]
 8000fd4:	7c7a      	ldrb	r2, [r7, #17]
 8000fd6:	9400      	str	r4, [sp, #0]
 8000fd8:	f004 fa8f 	bl	80054fa <OLED_DrawFilledRectangle>
                                     tile_inner_width, tile_inner_height,
                                     (val == 0) ? 0 : 1);
            if (val > 0)
 8000fdc:	8abb      	ldrh	r3, [r7, #20]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d02e      	beq.n	8001040 <Game2048_DrawBoard+0xd0>
            {
                sprintf(str_buffer, "%d", val);
 8000fe2:	8aba      	ldrh	r2, [r7, #20]
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4937      	ldr	r1, [pc, #220]	@ (80010c4 <Game2048_DrawBoard+0x154>)
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f007 fcbb 	bl	8008964 <siprintf>
                uint8_t text_width = strlen(str_buffer) * 6;
 8000fee:	463b      	mov	r3, r7
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff f8b5 	bl	8000160 <strlen>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	0052      	lsls	r2, r2, #1
 8000ffe:	4413      	add	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
                uint8_t text_height = 8;
 8001004:	2308      	movs	r3, #8
 8001006:	73bb      	strb	r3, [r7, #14]
                uint8_t text_x = tile_x + (GAME2048_TILE_WIDTH - text_width) / 2;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	f1c3 0320 	rsb	r3, r3, #32
 800100e:	0fda      	lsrs	r2, r3, #31
 8001010:	4413      	add	r3, r2
 8001012:	105b      	asrs	r3, r3, #1
 8001014:	b2da      	uxtb	r2, r3
 8001016:	7cfb      	ldrb	r3, [r7, #19]
 8001018:	4413      	add	r3, r2
 800101a:	737b      	strb	r3, [r7, #13]
                uint8_t text_y = tile_y + (GAME2048_TILE_HEIGHT - text_height) / 2;
 800101c:	7bbb      	ldrb	r3, [r7, #14]
 800101e:	f1c3 030e 	rsb	r3, r3, #14
 8001022:	0fda      	lsrs	r2, r3, #31
 8001024:	4413      	add	r3, r2
 8001026:	105b      	asrs	r3, r3, #1
 8001028:	b2da      	uxtb	r2, r3
 800102a:	7cbb      	ldrb	r3, [r7, #18]
 800102c:	4413      	add	r3, r2
 800102e:	733b      	strb	r3, [r7, #12]
                OLED_DisplayStringInverted(text_x, text_y, str_buffer, 1);
 8001030:	7b7b      	ldrb	r3, [r7, #13]
 8001032:	b218      	sxth	r0, r3
 8001034:	7b3b      	ldrb	r3, [r7, #12]
 8001036:	b219      	sxth	r1, r3
 8001038:	463a      	mov	r2, r7
 800103a:	2301      	movs	r3, #1
 800103c:	f001 fa27 	bl	800248e <OLED_DisplayStringInverted>
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001040:	7dbb      	ldrb	r3, [r7, #22]
 8001042:	3301      	adds	r3, #1
 8001044:	75bb      	strb	r3, [r7, #22]
 8001046:	7dbb      	ldrb	r3, [r7, #22]
 8001048:	2b03      	cmp	r3, #3
 800104a:	d99c      	bls.n	8000f86 <Game2048_DrawBoard+0x16>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	3301      	adds	r3, #1
 8001050:	75fb      	strb	r3, [r7, #23]
 8001052:	7dfb      	ldrb	r3, [r7, #23]
 8001054:	2b03      	cmp	r3, #3
 8001056:	d993      	bls.n	8000f80 <Game2048_DrawBoard+0x10>
            }
        }
    }
    sprintf(str_buffer, "Scores:%lu", game2048_score);
 8001058:	4b1b      	ldr	r3, [pc, #108]	@ (80010c8 <Game2048_DrawBoard+0x158>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	463b      	mov	r3, r7
 800105e:	491b      	ldr	r1, [pc, #108]	@ (80010cc <Game2048_DrawBoard+0x15c>)
 8001060:	4618      	mov	r0, r3
 8001062:	f007 fc7f 	bl	8008964 <siprintf>
    OLED_DisplayString(0, OLED_HEIGHT - 8, str_buffer);
 8001066:	463b      	mov	r3, r7
 8001068:	461a      	mov	r2, r3
 800106a:	2138      	movs	r1, #56	@ 0x38
 800106c:	2000      	movs	r0, #0
 800106e:	f001 f9c1 	bl	80023f4 <OLED_DisplayString>

    if (game2048_game_over)
 8001072:	4b17      	ldr	r3, [pc, #92]	@ (80010d0 <Game2048_DrawBoard+0x160>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d014      	beq.n	80010a4 <Game2048_DrawBoard+0x134>
    {
        OLED_DrawFilledRectangle(0, 0, OLED_WIDTH, OLED_HEIGHT-8, 1);
 800107a:	2301      	movs	r3, #1
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2338      	movs	r3, #56	@ 0x38
 8001080:	2280      	movs	r2, #128	@ 0x80
 8001082:	2100      	movs	r1, #0
 8001084:	2000      	movs	r0, #0
 8001086:	f004 fa38 	bl	80054fa <OLED_DrawFilledRectangle>
        OLED_DisplayStringInverted((OLED_WIDTH - 8 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2 - 8, "GAME OVER", 1);
 800108a:	2301      	movs	r3, #1
 800108c:	4a11      	ldr	r2, [pc, #68]	@ (80010d4 <Game2048_DrawBoard+0x164>)
 800108e:	2114      	movs	r1, #20
 8001090:	2028      	movs	r0, #40	@ 0x28
 8001092:	f001 f9fc 	bl	800248e <OLED_DisplayStringInverted>
        OLED_DisplayStringInverted((OLED_WIDTH - 10 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2, "RST BTN=RS", 1);
 8001096:	2301      	movs	r3, #1
 8001098:	4a0f      	ldr	r2, [pc, #60]	@ (80010d8 <Game2048_DrawBoard+0x168>)
 800109a:	211c      	movs	r1, #28
 800109c:	2022      	movs	r0, #34	@ 0x22
 800109e:	f001 f9f6 	bl	800248e <OLED_DisplayStringInverted>
    }
    else if (game2048_game_won)
    {
        OLED_DisplayString((OLED_WIDTH - 7 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2 - 4, "YOU WIN!");
    }
}
 80010a2:	e008      	b.n	80010b6 <Game2048_DrawBoard+0x146>
    else if (game2048_game_won)
 80010a4:	4b0d      	ldr	r3, [pc, #52]	@ (80010dc <Game2048_DrawBoard+0x16c>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d004      	beq.n	80010b6 <Game2048_DrawBoard+0x146>
        OLED_DisplayString((OLED_WIDTH - 7 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2 - 4, "YOU WIN!");
 80010ac:	4a0c      	ldr	r2, [pc, #48]	@ (80010e0 <Game2048_DrawBoard+0x170>)
 80010ae:	2118      	movs	r1, #24
 80010b0:	202b      	movs	r0, #43	@ 0x2b
 80010b2:	f001 f99f 	bl	80023f4 <OLED_DisplayString>
}
 80010b6:	bf00      	nop
 80010b8:	371c      	adds	r7, #28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd90      	pop	{r4, r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000023c 	.word	0x2000023c
 80010c4:	0800affc 	.word	0x0800affc
 80010c8:	2000025c 	.word	0x2000025c
 80010cc:	0800b000 	.word	0x0800b000
 80010d0:	20000260 	.word	0x20000260
 80010d4:	0800b00c 	.word	0x0800b00c
 80010d8:	0800afe4 	.word	0x0800afe4
 80010dc:	20000261 	.word	0x20000261
 80010e0:	0800b018 	.word	0x0800b018

080010e4 <Game2048_CompactAndMerge>:

static void Game2048_CompactAndMerge(uint8_t line_idx, Direction dir, bool is_row)
{
 80010e4:	b490      	push	{r4, r7}
 80010e6:	b08c      	sub	sp, #48	@ 0x30
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
 80010ee:	460b      	mov	r3, r1
 80010f0:	71bb      	strb	r3, [r7, #6]
 80010f2:	4613      	mov	r3, r2
 80010f4:	717b      	strb	r3, [r7, #5]
    uint8_t line_size = GAME2048_BOARD_SIZE;          // Use GAME2048_BOARD_SIZE
 80010f6:	2304      	movs	r3, #4
 80010f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint16_t temp_line[GAME2048_BOARD_SIZE] = {0};    // Use GAME2048_BOARD_SIZE
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
    uint16_t original_line_copy[GAME2048_BOARD_SIZE]; // To check if anything changed

    for (uint8_t i = 0; i < line_size; ++i)
 8001106:	2300      	movs	r3, #0
 8001108:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800110c:	e01f      	b.n	800114e <Game2048_CompactAndMerge+0x6a>
    {
        original_line_copy[i] = is_row ? game2048_board[line_idx][i].value : game2048_board[i][line_idx].value;
 800110e:	797b      	ldrb	r3, [r7, #5]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d008      	beq.n	8001126 <Game2048_CompactAndMerge+0x42>
 8001114:	79fa      	ldrb	r2, [r7, #7]
 8001116:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800111a:	49c2      	ldr	r1, [pc, #776]	@ (8001424 <Game2048_CompactAndMerge+0x340>)
 800111c:	0092      	lsls	r2, r2, #2
 800111e:	4413      	add	r3, r2
 8001120:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001124:	e007      	b.n	8001136 <Game2048_CompactAndMerge+0x52>
 8001126:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	49bd      	ldr	r1, [pc, #756]	@ (8001424 <Game2048_CompactAndMerge+0x340>)
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	4413      	add	r3, r2
 8001132:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001136:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	3330      	adds	r3, #48	@ 0x30
 800113e:	443b      	add	r3, r7
 8001140:	f823 2c24 	strh.w	r2, [r3, #-36]
    for (uint8_t i = 0; i < line_size; ++i)
 8001144:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001148:	3301      	adds	r3, #1
 800114a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800114e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001152:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001156:	429a      	cmp	r2, r3
 8001158:	d3d9      	bcc.n	800110e <Game2048_CompactAndMerge+0x2a>
    }

    int8_t write_pos = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t increment = 1;
 8001160:	2301      	movs	r3, #1
 8001162:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (dir == DIR_DOWN || dir == DIR_RIGHT)
 8001166:	79bb      	ldrb	r3, [r7, #6]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d002      	beq.n	8001172 <Game2048_CompactAndMerge+0x8e>
 800116c:	79bb      	ldrb	r3, [r7, #6]
 800116e:	2b03      	cmp	r3, #3
 8001170:	d108      	bne.n	8001184 <Game2048_CompactAndMerge+0xa0>
    {
        write_pos = line_size - 1;
 8001172:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001176:	3b01      	subs	r3, #1
 8001178:	b2db      	uxtb	r3, r3
 800117a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        increment = -1;
 800117e:	23ff      	movs	r3, #255	@ 0xff
 8001180:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    }

    int8_t compact_pos = write_pos;
 8001184:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001188:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 800118c:	2300      	movs	r3, #0
 800118e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001192:	e041      	b.n	8001218 <Game2048_CompactAndMerge+0x134>
    {
        int8_t read_pos_actual = (dir == DIR_DOWN || dir == DIR_RIGHT) ? (line_size - 1 - i) : i;
 8001194:	79bb      	ldrb	r3, [r7, #6]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d002      	beq.n	80011a0 <Game2048_CompactAndMerge+0xbc>
 800119a:	79bb      	ldrb	r3, [r7, #6]
 800119c:	2b03      	cmp	r3, #3
 800119e:	d109      	bne.n	80011b4 <Game2048_CompactAndMerge+0xd0>
 80011a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80011a4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	3b01      	subs	r3, #1
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	b25b      	sxtb	r3, r3
 80011b2:	e001      	b.n	80011b8 <Game2048_CompactAndMerge+0xd4>
 80011b4:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80011b8:	f887 3020 	strb.w	r3, [r7, #32]
        uint16_t current_tile_value = is_row ? game2048_board[line_idx][read_pos_actual].value
 80011bc:	797b      	ldrb	r3, [r7, #5]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d008      	beq.n	80011d4 <Game2048_CompactAndMerge+0xf0>
 80011c2:	79fa      	ldrb	r2, [r7, #7]
 80011c4:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80011c8:	4996      	ldr	r1, [pc, #600]	@ (8001424 <Game2048_CompactAndMerge+0x340>)
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011d2:	e007      	b.n	80011e4 <Game2048_CompactAndMerge+0x100>
                                             : game2048_board[read_pos_actual][line_idx].value;
 80011d4:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80011d8:	79fb      	ldrb	r3, [r7, #7]
        uint16_t current_tile_value = is_row ? game2048_board[line_idx][read_pos_actual].value
 80011da:	4992      	ldr	r1, [pc, #584]	@ (8001424 <Game2048_CompactAndMerge+0x340>)
 80011dc:	0092      	lsls	r2, r2, #2
 80011de:	4413      	add	r3, r2
 80011e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011e4:	83fb      	strh	r3, [r7, #30]
        if (current_tile_value != 0)
 80011e6:	8bfb      	ldrh	r3, [r7, #30]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00f      	beq.n	800120c <Game2048_CompactAndMerge+0x128>
        {
            temp_line[compact_pos] = current_tile_value;
 80011ec:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	3330      	adds	r3, #48	@ 0x30
 80011f4:	443b      	add	r3, r7
 80011f6:	8bfa      	ldrh	r2, [r7, #30]
 80011f8:	f823 2c1c 	strh.w	r2, [r3, #-28]
            compact_pos += increment;
 80011fc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001200:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001204:	4413      	add	r3, r2
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 800120c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001210:	3301      	adds	r3, #1
 8001212:	b2db      	uxtb	r3, r3
 8001214:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001218:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 800121c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001220:	429a      	cmp	r2, r3
 8001222:	dbb7      	blt.n	8001194 <Game2048_CompactAndMerge+0xb0>
        }
    }

    for (int8_t i = 0; i < line_size - 1; ++i)
 8001224:	2300      	movs	r3, #0
 8001226:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800122a:	e078      	b.n	800131e <Game2048_CompactAndMerge+0x23a>
    {
        int8_t current_idx = (dir == DIR_DOWN || dir == DIR_RIGHT) ? (line_size - 1 - i) : i;
 800122c:	79bb      	ldrb	r3, [r7, #6]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d002      	beq.n	8001238 <Game2048_CompactAndMerge+0x154>
 8001232:	79bb      	ldrb	r3, [r7, #6]
 8001234:	2b03      	cmp	r3, #3
 8001236:	d109      	bne.n	800124c <Game2048_CompactAndMerge+0x168>
 8001238:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800123c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	3b01      	subs	r3, #1
 8001246:	b2db      	uxtb	r3, r3
 8001248:	b25b      	sxtb	r3, r3
 800124a:	e001      	b.n	8001250 <Game2048_CompactAndMerge+0x16c>
 800124c:	f997 302a 	ldrsb.w	r3, [r7, #42]	@ 0x2a
 8001250:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        int8_t next_idx = current_idx + increment;
 8001254:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001258:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800125c:	4413      	add	r3, r2
 800125e:	b2db      	uxtb	r3, r3
 8001260:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        if (next_idx < 0 || next_idx >= line_size)
 8001264:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8001268:	2b00      	cmp	r3, #0
 800126a:	db51      	blt.n	8001310 <Game2048_CompactAndMerge+0x22c>
 800126c:	f997 2021 	ldrsb.w	r2, [r7, #33]	@ 0x21
 8001270:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001274:	429a      	cmp	r2, r3
 8001276:	da4b      	bge.n	8001310 <Game2048_CompactAndMerge+0x22c>
            continue;

        if (temp_line[current_idx] != 0 && temp_line[current_idx] == temp_line[next_idx])
 8001278:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	3330      	adds	r3, #48	@ 0x30
 8001280:	443b      	add	r3, r7
 8001282:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d043      	beq.n	8001312 <Game2048_CompactAndMerge+0x22e>
 800128a:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	3330      	adds	r3, #48	@ 0x30
 8001292:	443b      	add	r3, r7
 8001294:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 8001298:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	3330      	adds	r3, #48	@ 0x30
 80012a0:	443b      	add	r3, r7
 80012a2:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d133      	bne.n	8001312 <Game2048_CompactAndMerge+0x22e>
        {
            temp_line[current_idx] *= 2;
 80012aa:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	3330      	adds	r3, #48	@ 0x30
 80012b2:	443b      	add	r3, r7
 80012b4:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 80012b8:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80012bc:	0052      	lsls	r2, r2, #1
 80012be:	b292      	uxth	r2, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	3330      	adds	r3, #48	@ 0x30
 80012c4:	443b      	add	r3, r7
 80012c6:	f823 2c1c 	strh.w	r2, [r3, #-28]
            game2048_score += temp_line[current_idx];
 80012ca:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	3330      	adds	r3, #48	@ 0x30
 80012d2:	443b      	add	r3, r7
 80012d4:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b53      	ldr	r3, [pc, #332]	@ (8001428 <Game2048_CompactAndMerge+0x344>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	4a51      	ldr	r2, [pc, #324]	@ (8001428 <Game2048_CompactAndMerge+0x344>)
 80012e2:	6013      	str	r3, [r2, #0]
            temp_line[next_idx] = 0;
 80012e4:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	3330      	adds	r3, #48	@ 0x30
 80012ec:	443b      	add	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	f823 2c1c 	strh.w	r2, [r3, #-28]
            if (temp_line[current_idx] == 2048)
 80012f4:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	3330      	adds	r3, #48	@ 0x30
 80012fc:	443b      	add	r3, r7
 80012fe:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001302:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001306:	d104      	bne.n	8001312 <Game2048_CompactAndMerge+0x22e>
                game2048_game_won = true;
 8001308:	4b48      	ldr	r3, [pc, #288]	@ (800142c <Game2048_CompactAndMerge+0x348>)
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
 800130e:	e000      	b.n	8001312 <Game2048_CompactAndMerge+0x22e>
            continue;
 8001310:	bf00      	nop
    for (int8_t i = 0; i < line_size - 1; ++i)
 8001312:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001316:	3301      	adds	r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800131e:	f997 202a 	ldrsb.w	r2, [r7, #42]	@ 0x2a
 8001322:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001326:	3b01      	subs	r3, #1
 8001328:	429a      	cmp	r2, r3
 800132a:	f6ff af7f 	blt.w	800122c <Game2048_CompactAndMerge+0x148>
        }
    }

    compact_pos = write_pos;
 800132e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001332:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 8001336:	2300      	movs	r3, #0
 8001338:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800133c:	e045      	b.n	80013ca <Game2048_CompactAndMerge+0x2e6>
    {
        int8_t read_pos_temp = (dir == DIR_DOWN || dir == DIR_RIGHT) ? (line_size - 1 - i) : i;
 800133e:	79bb      	ldrb	r3, [r7, #6]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d002      	beq.n	800134a <Game2048_CompactAndMerge+0x266>
 8001344:	79bb      	ldrb	r3, [r7, #6]
 8001346:	2b03      	cmp	r3, #3
 8001348:	d109      	bne.n	800135e <Game2048_CompactAndMerge+0x27a>
 800134a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800134e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	b2db      	uxtb	r3, r3
 8001356:	3b01      	subs	r3, #1
 8001358:	b2db      	uxtb	r3, r3
 800135a:	b25b      	sxtb	r3, r3
 800135c:	e001      	b.n	8001362 <Game2048_CompactAndMerge+0x27e>
 800135e:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 8001362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        // The condition "if (temp_line[read_pos_temp] != 0)" was problematic.
        // temp_line already contains the correct values, including zeros, after compaction and merging.
        // We should always write the value from temp_line to the board and advance compact_pos.
        if (is_row)
 8001366:	797b      	ldrb	r3, [r7, #5]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d010      	beq.n	800138e <Game2048_CompactAndMerge+0x2aa>
        {
            game2048_board[line_idx][compact_pos].value = temp_line[read_pos_temp];
 800136c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8001370:	79f9      	ldrb	r1, [r7, #7]
 8001372:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	3330      	adds	r3, #48	@ 0x30
 800137a:	443b      	add	r3, r7
 800137c:	f833 4c1c 	ldrh.w	r4, [r3, #-28]
 8001380:	4828      	ldr	r0, [pc, #160]	@ (8001424 <Game2048_CompactAndMerge+0x340>)
 8001382:	008b      	lsls	r3, r1, #2
 8001384:	4413      	add	r3, r2
 8001386:	4622      	mov	r2, r4
 8001388:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800138c:	e00f      	b.n	80013ae <Game2048_CompactAndMerge+0x2ca>
        }
        else
        {
            game2048_board[compact_pos][line_idx].value = temp_line[read_pos_temp];
 800138e:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8001392:	f997 102c 	ldrsb.w	r1, [r7, #44]	@ 0x2c
 8001396:	79fa      	ldrb	r2, [r7, #7]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	3330      	adds	r3, #48	@ 0x30
 800139c:	443b      	add	r3, r7
 800139e:	f833 4c1c 	ldrh.w	r4, [r3, #-28]
 80013a2:	4820      	ldr	r0, [pc, #128]	@ (8001424 <Game2048_CompactAndMerge+0x340>)
 80013a4:	008b      	lsls	r3, r1, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	4622      	mov	r2, r4
 80013aa:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        }
        compact_pos += increment; // compact_pos should always be updated.
 80013ae:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80013b2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80013b6:	4413      	add	r3, r2
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 80013be:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80013c2:	3301      	adds	r3, #1
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80013ca:	f997 2029 	ldrsb.w	r2, [r7, #41]	@ 0x29
 80013ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013d2:	429a      	cmp	r2, r3
 80013d4:	dbb3      	blt.n	800133e <Game2048_CompactAndMerge+0x25a>
    }

    for (uint8_t i = 0; i < line_size; ++i)
 80013d6:	2300      	movs	r3, #0
 80013d8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80013dc:	e02f      	b.n	800143e <Game2048_CompactAndMerge+0x35a>
    {
        uint16_t current_val = is_row ? game2048_board[line_idx][i].value : game2048_board[i][line_idx].value;
 80013de:	797b      	ldrb	r3, [r7, #5]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d008      	beq.n	80013f6 <Game2048_CompactAndMerge+0x312>
 80013e4:	79fa      	ldrb	r2, [r7, #7]
 80013e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80013ea:	490e      	ldr	r1, [pc, #56]	@ (8001424 <Game2048_CompactAndMerge+0x340>)
 80013ec:	0092      	lsls	r2, r2, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013f4:	e007      	b.n	8001406 <Game2048_CompactAndMerge+0x322>
 80013f6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	4909      	ldr	r1, [pc, #36]	@ (8001424 <Game2048_CompactAndMerge+0x340>)
 80013fe:	0092      	lsls	r2, r2, #2
 8001400:	4413      	add	r3, r2
 8001402:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001406:	84bb      	strh	r3, [r7, #36]	@ 0x24
        if (original_line_copy[i] != current_val)
 8001408:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	3330      	adds	r3, #48	@ 0x30
 8001410:	443b      	add	r3, r7
 8001412:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001416:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001418:	429a      	cmp	r2, r3
 800141a:	d00b      	beq.n	8001434 <Game2048_CompactAndMerge+0x350>
        {
            game2048_move_made_this_turn = true;
 800141c:	4b04      	ldr	r3, [pc, #16]	@ (8001430 <Game2048_CompactAndMerge+0x34c>)
 800141e:	2201      	movs	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
            break;
 8001422:	e013      	b.n	800144c <Game2048_CompactAndMerge+0x368>
 8001424:	2000023c 	.word	0x2000023c
 8001428:	2000025c 	.word	0x2000025c
 800142c:	20000261 	.word	0x20000261
 8001430:	20000262 	.word	0x20000262
    for (uint8_t i = 0; i < line_size; ++i)
 8001434:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001438:	3301      	adds	r3, #1
 800143a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800143e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001442:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001446:	429a      	cmp	r2, r3
 8001448:	d3c9      	bcc.n	80013de <Game2048_CompactAndMerge+0x2fa>
        }
    }
}
 800144a:	bf00      	nop
 800144c:	bf00      	nop
 800144e:	3730      	adds	r7, #48	@ 0x30
 8001450:	46bd      	mov	sp, r7
 8001452:	bc90      	pop	{r4, r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop

08001458 <Game2048_MoveUp>:

static void Game2048_MoveUp()
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 800145e:	2300      	movs	r3, #0
 8001460:	71fb      	strb	r3, [r7, #7]
 8001462:	e008      	b.n	8001476 <Game2048_MoveUp+0x1e>
    {
        Game2048_CompactAndMerge(c, DIR_UP, false);
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fe3a 	bl	80010e4 <Game2048_CompactAndMerge>
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	3301      	adds	r3, #1
 8001474:	71fb      	strb	r3, [r7, #7]
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	2b03      	cmp	r3, #3
 800147a:	d9f3      	bls.n	8001464 <Game2048_MoveUp+0xc>
    }
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <Game2048_MoveDown>:

static void Game2048_MoveDown()
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 800148c:	2300      	movs	r3, #0
 800148e:	71fb      	strb	r3, [r7, #7]
 8001490:	e008      	b.n	80014a4 <Game2048_MoveDown+0x1e>
    {
        Game2048_CompactAndMerge(c, DIR_DOWN, false);
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2200      	movs	r2, #0
 8001496:	2101      	movs	r1, #1
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fe23 	bl	80010e4 <Game2048_CompactAndMerge>
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	3301      	adds	r3, #1
 80014a2:	71fb      	strb	r3, [r7, #7]
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d9f3      	bls.n	8001492 <Game2048_MoveDown+0xc>
    }
}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <Game2048_MoveLeft>:

static void Game2048_MoveLeft()
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 80014ba:	2300      	movs	r3, #0
 80014bc:	71fb      	strb	r3, [r7, #7]
 80014be:	e008      	b.n	80014d2 <Game2048_MoveLeft+0x1e>
    {
        Game2048_CompactAndMerge(r, DIR_LEFT, true);
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	2201      	movs	r2, #1
 80014c4:	2102      	movs	r1, #2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fe0c 	bl	80010e4 <Game2048_CompactAndMerge>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	3301      	adds	r3, #1
 80014d0:	71fb      	strb	r3, [r7, #7]
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d9f3      	bls.n	80014c0 <Game2048_MoveLeft+0xc>
    }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <Game2048_MoveRight>:

static void Game2048_MoveRight()
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 80014e8:	2300      	movs	r3, #0
 80014ea:	71fb      	strb	r3, [r7, #7]
 80014ec:	e008      	b.n	8001500 <Game2048_MoveRight+0x1e>
    {
        Game2048_CompactAndMerge(r, DIR_RIGHT, true);
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	2201      	movs	r2, #1
 80014f2:	2103      	movs	r1, #3
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fdf5 	bl	80010e4 <Game2048_CompactAndMerge>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	3301      	adds	r3, #1
 80014fe:	71fb      	strb	r3, [r7, #7]
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d9f3      	bls.n	80014ee <Game2048_MoveRight+0xc>
    }
}
 8001506:	bf00      	nop
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <Game2048_CanMove>:

static bool Game2048_CanMove()
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001516:	2300      	movs	r3, #0
 8001518:	71fb      	strb	r3, [r7, #7]
 800151a:	e03e      	b.n	800159a <Game2048_CanMove+0x8a>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 800151c:	2300      	movs	r3, #0
 800151e:	71bb      	strb	r3, [r7, #6]
 8001520:	e035      	b.n	800158e <Game2048_CanMove+0x7e>
        {
            if (game2048_board[r][c].value == 0)
 8001522:	79fa      	ldrb	r2, [r7, #7]
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	4921      	ldr	r1, [pc, #132]	@ (80015ac <Game2048_CanMove+0x9c>)
 8001528:	0092      	lsls	r2, r2, #2
 800152a:	4413      	add	r3, r2
 800152c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <Game2048_CanMove+0x28>
                return true;
 8001534:	2301      	movs	r3, #1
 8001536:	e034      	b.n	80015a2 <Game2048_CanMove+0x92>
            uint16_t val = game2048_board[r][c].value;
 8001538:	79fa      	ldrb	r2, [r7, #7]
 800153a:	79bb      	ldrb	r3, [r7, #6]
 800153c:	491b      	ldr	r1, [pc, #108]	@ (80015ac <Game2048_CanMove+0x9c>)
 800153e:	0092      	lsls	r2, r2, #2
 8001540:	4413      	add	r3, r2
 8001542:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001546:	80bb      	strh	r3, [r7, #4]
            if (c < GAME2048_BOARD_SIZE - 1 && game2048_board[r][c + 1].value == val) // Use GAME2048_BOARD_SIZE
 8001548:	79bb      	ldrb	r3, [r7, #6]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d80c      	bhi.n	8001568 <Game2048_CanMove+0x58>
 800154e:	79fa      	ldrb	r2, [r7, #7]
 8001550:	79bb      	ldrb	r3, [r7, #6]
 8001552:	3301      	adds	r3, #1
 8001554:	4915      	ldr	r1, [pc, #84]	@ (80015ac <Game2048_CanMove+0x9c>)
 8001556:	0092      	lsls	r2, r2, #2
 8001558:	4413      	add	r3, r2
 800155a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800155e:	88ba      	ldrh	r2, [r7, #4]
 8001560:	429a      	cmp	r2, r3
 8001562:	d101      	bne.n	8001568 <Game2048_CanMove+0x58>
                return true;
 8001564:	2301      	movs	r3, #1
 8001566:	e01c      	b.n	80015a2 <Game2048_CanMove+0x92>
            if (r < GAME2048_BOARD_SIZE - 1 && game2048_board[r + 1][c].value == val) // Use GAME2048_BOARD_SIZE
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d80c      	bhi.n	8001588 <Game2048_CanMove+0x78>
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	1c5a      	adds	r2, r3, #1
 8001572:	79bb      	ldrb	r3, [r7, #6]
 8001574:	490d      	ldr	r1, [pc, #52]	@ (80015ac <Game2048_CanMove+0x9c>)
 8001576:	0092      	lsls	r2, r2, #2
 8001578:	4413      	add	r3, r2
 800157a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800157e:	88ba      	ldrh	r2, [r7, #4]
 8001580:	429a      	cmp	r2, r3
 8001582:	d101      	bne.n	8001588 <Game2048_CanMove+0x78>
                return true;
 8001584:	2301      	movs	r3, #1
 8001586:	e00c      	b.n	80015a2 <Game2048_CanMove+0x92>
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001588:	79bb      	ldrb	r3, [r7, #6]
 800158a:	3301      	adds	r3, #1
 800158c:	71bb      	strb	r3, [r7, #6]
 800158e:	79bb      	ldrb	r3, [r7, #6]
 8001590:	2b03      	cmp	r3, #3
 8001592:	d9c6      	bls.n	8001522 <Game2048_CanMove+0x12>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	3301      	adds	r3, #1
 8001598:	71fb      	strb	r3, [r7, #7]
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	2b03      	cmp	r3, #3
 800159e:	d9bd      	bls.n	800151c <Game2048_CanMove+0xc>
        }
    }
    return false;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	2000023c 	.word	0x2000023c

080015b0 <Game2048_HandleInput>:

bool Game2048_HandleInput(Direction input_dir)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
    if (game2048_game_over || game2048_game_won)
 80015ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <Game2048_HandleInput+0x88>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d103      	bne.n	80015ca <Game2048_HandleInput+0x1a>
 80015c2:	4b1e      	ldr	r3, [pc, #120]	@ (800163c <Game2048_HandleInput+0x8c>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <Game2048_HandleInput+0x1e>
        return false;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e02f      	b.n	800162e <Game2048_HandleInput+0x7e>

    game2048_move_made_this_turn = false;
 80015ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001640 <Game2048_HandleInput+0x90>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]

    switch (input_dir)
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d816      	bhi.n	8001608 <Game2048_HandleInput+0x58>
 80015da:	a201      	add	r2, pc, #4	@ (adr r2, 80015e0 <Game2048_HandleInput+0x30>)
 80015dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e0:	080015f1 	.word	0x080015f1
 80015e4:	080015f7 	.word	0x080015f7
 80015e8:	080015fd 	.word	0x080015fd
 80015ec:	08001603 	.word	0x08001603
    {
    case DIR_UP:
        Game2048_MoveUp();
 80015f0:	f7ff ff32 	bl	8001458 <Game2048_MoveUp>
        break;
 80015f4:	e008      	b.n	8001608 <Game2048_HandleInput+0x58>
    case DIR_DOWN:
        Game2048_MoveDown();
 80015f6:	f7ff ff46 	bl	8001486 <Game2048_MoveDown>
        break;
 80015fa:	e005      	b.n	8001608 <Game2048_HandleInput+0x58>
    case DIR_LEFT:
        Game2048_MoveLeft();
 80015fc:	f7ff ff5a 	bl	80014b4 <Game2048_MoveLeft>
        break;
 8001600:	e002      	b.n	8001608 <Game2048_HandleInput+0x58>
    case DIR_RIGHT:
        Game2048_MoveRight();
 8001602:	f7ff ff6e 	bl	80014e2 <Game2048_MoveRight>
        break;
 8001606:	bf00      	nop
    }

    if (game2048_move_made_this_turn)
 8001608:	4b0d      	ldr	r3, [pc, #52]	@ (8001640 <Game2048_HandleInput+0x90>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00c      	beq.n	800162a <Game2048_HandleInput+0x7a>
    {
        Game2048_AddRandomTile();
 8001610:	f7ff fbdc 	bl	8000dcc <Game2048_AddRandomTile>
        if (!Game2048_CanMove())
 8001614:	f7ff ff7c 	bl	8001510 <Game2048_CanMove>
 8001618:	4603      	mov	r3, r0
 800161a:	f083 0301 	eor.w	r3, r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <Game2048_HandleInput+0x7a>
        {
            game2048_game_over = true;
 8001624:	4b04      	ldr	r3, [pc, #16]	@ (8001638 <Game2048_HandleInput+0x88>)
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
        }
    }
    return game2048_move_made_this_turn;
 800162a:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <Game2048_HandleInput+0x90>)
 800162c:	781b      	ldrb	r3, [r3, #0]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000260 	.word	0x20000260
 800163c:	20000261 	.word	0x20000261
 8001640:	20000262 	.word	0x20000262

08001644 <Game2048_GameLoop>:

void Game2048_GameLoop(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
    static uint16_t LastCount;

    if (FirstRun)
 8001648:	4b48      	ldr	r3, [pc, #288]	@ (800176c <Game2048_GameLoop+0x128>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d006      	beq.n	800165e <Game2048_GameLoop+0x1a>
    {
        LastCount = count;
 8001650:	4b47      	ldr	r3, [pc, #284]	@ (8001770 <Game2048_GameLoop+0x12c>)
 8001652:	881a      	ldrh	r2, [r3, #0]
 8001654:	4b47      	ldr	r3, [pc, #284]	@ (8001774 <Game2048_GameLoop+0x130>)
 8001656:	801a      	strh	r2, [r3, #0]
        FirstRun = false;
 8001658:	4b44      	ldr	r3, [pc, #272]	@ (800176c <Game2048_GameLoop+0x128>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
    }

    if (count - LastCount > 1 && HAL_GPIO_ReadPin(GAME_BUTTON_PORT, GAME_BUTTON_PIN) == GPIO_PIN_SET)
 800165e:	4b44      	ldr	r3, [pc, #272]	@ (8001770 <Game2048_GameLoop+0x12c>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	4b43      	ldr	r3, [pc, #268]	@ (8001774 <Game2048_GameLoop+0x130>)
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b01      	cmp	r3, #1
 800166c:	dd0f      	ble.n	800168e <Game2048_GameLoop+0x4a>
 800166e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001672:	4841      	ldr	r0, [pc, #260]	@ (8001778 <Game2048_GameLoop+0x134>)
 8001674:	f004 ffc6 	bl	8006604 <HAL_GPIO_ReadPin>
 8001678:	4603      	mov	r3, r0
 800167a:	2b01      	cmp	r3, #1
 800167c:	d107      	bne.n	800168e <Game2048_GameLoop+0x4a>
    {
        Game2048_HandleInput(DIR_RIGHT);
 800167e:	2003      	movs	r0, #3
 8001680:	f7ff ff96 	bl	80015b0 <Game2048_HandleInput>
        LastCount = count;
 8001684:	4b3a      	ldr	r3, [pc, #232]	@ (8001770 <Game2048_GameLoop+0x12c>)
 8001686:	881a      	ldrh	r2, [r3, #0]
 8001688:	4b3a      	ldr	r3, [pc, #232]	@ (8001774 <Game2048_GameLoop+0x130>)
 800168a:	801a      	strh	r2, [r3, #0]
 800168c:	e048      	b.n	8001720 <Game2048_GameLoop+0xdc>
    }
    else if (count - LastCount < -1 && HAL_GPIO_ReadPin(GAME_BUTTON_PORT, GAME_BUTTON_PIN) == GPIO_PIN_SET)
 800168e:	4b38      	ldr	r3, [pc, #224]	@ (8001770 <Game2048_GameLoop+0x12c>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	4b37      	ldr	r3, [pc, #220]	@ (8001774 <Game2048_GameLoop+0x130>)
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169e:	da0f      	bge.n	80016c0 <Game2048_GameLoop+0x7c>
 80016a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016a4:	4834      	ldr	r0, [pc, #208]	@ (8001778 <Game2048_GameLoop+0x134>)
 80016a6:	f004 ffad 	bl	8006604 <HAL_GPIO_ReadPin>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d107      	bne.n	80016c0 <Game2048_GameLoop+0x7c>
    {
        Game2048_HandleInput(DIR_LEFT);
 80016b0:	2002      	movs	r0, #2
 80016b2:	f7ff ff7d 	bl	80015b0 <Game2048_HandleInput>
        LastCount = count;
 80016b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001770 <Game2048_GameLoop+0x12c>)
 80016b8:	881a      	ldrh	r2, [r3, #0]
 80016ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001774 <Game2048_GameLoop+0x130>)
 80016bc:	801a      	strh	r2, [r3, #0]
 80016be:	e02f      	b.n	8001720 <Game2048_GameLoop+0xdc>
    }
    else if (count - LastCount > 1 && HAL_GPIO_ReadPin(GAME_BUTTON_PORT, GAME_BUTTON_PIN) == GPIO_PIN_RESET)
 80016c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001770 <Game2048_GameLoop+0x12c>)
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001774 <Game2048_GameLoop+0x130>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	dd0f      	ble.n	80016f0 <Game2048_GameLoop+0xac>
 80016d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016d4:	4828      	ldr	r0, [pc, #160]	@ (8001778 <Game2048_GameLoop+0x134>)
 80016d6:	f004 ff95 	bl	8006604 <HAL_GPIO_ReadPin>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d107      	bne.n	80016f0 <Game2048_GameLoop+0xac>
    {
        Game2048_HandleInput(DIR_UP);
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7ff ff65 	bl	80015b0 <Game2048_HandleInput>
        LastCount = count;
 80016e6:	4b22      	ldr	r3, [pc, #136]	@ (8001770 <Game2048_GameLoop+0x12c>)
 80016e8:	881a      	ldrh	r2, [r3, #0]
 80016ea:	4b22      	ldr	r3, [pc, #136]	@ (8001774 <Game2048_GameLoop+0x130>)
 80016ec:	801a      	strh	r2, [r3, #0]
 80016ee:	e017      	b.n	8001720 <Game2048_GameLoop+0xdc>
    }
    else if (count - LastCount < -1 && HAL_GPIO_ReadPin(GAME_BUTTON_PORT, GAME_BUTTON_PIN) == GPIO_PIN_RESET)
 80016f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001770 <Game2048_GameLoop+0x12c>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001774 <Game2048_GameLoop+0x130>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001700:	da0e      	bge.n	8001720 <Game2048_GameLoop+0xdc>
 8001702:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001706:	481c      	ldr	r0, [pc, #112]	@ (8001778 <Game2048_GameLoop+0x134>)
 8001708:	f004 ff7c 	bl	8006604 <HAL_GPIO_ReadPin>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d106      	bne.n	8001720 <Game2048_GameLoop+0xdc>
    {
        Game2048_HandleInput(DIR_DOWN);
 8001712:	2001      	movs	r0, #1
 8001714:	f7ff ff4c 	bl	80015b0 <Game2048_HandleInput>
        LastCount = count;
 8001718:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <Game2048_GameLoop+0x12c>)
 800171a:	881a      	ldrh	r2, [r3, #0]
 800171c:	4b15      	ldr	r3, [pc, #84]	@ (8001774 <Game2048_GameLoop+0x130>)
 800171e:	801a      	strh	r2, [r3, #0]
    }

    if (game2048_game_over)
 8001720:	4b16      	ldr	r3, [pc, #88]	@ (800177c <Game2048_GameLoop+0x138>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d01d      	beq.n	8001764 <Game2048_GameLoop+0x120>
    {
        if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8001728:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800172c:	4812      	ldr	r0, [pc, #72]	@ (8001778 <Game2048_GameLoop+0x134>)
 800172e:	f004 ff69 	bl	8006604 <HAL_GPIO_ReadPin>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d115      	bne.n	8001764 <Game2048_GameLoop+0x120>
        {
            HAL_Delay(INPUT_DEBOUNCE_MS);
 8001738:	2032      	movs	r0, #50	@ 0x32
 800173a:	f004 fb4d 	bl	8005dd8 <HAL_Delay>
            if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 800173e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001742:	480d      	ldr	r0, [pc, #52]	@ (8001778 <Game2048_GameLoop+0x134>)
 8001744:	f004 ff5e 	bl	8006604 <HAL_GPIO_ReadPin>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10a      	bne.n	8001764 <Game2048_GameLoop+0x120>
            {
                Game2048_Restart();
 800174e:	f7ff fc09 	bl	8000f64 <Game2048_Restart>
                while (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8001752:	bf00      	nop
 8001754:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001758:	4807      	ldr	r0, [pc, #28]	@ (8001778 <Game2048_GameLoop+0x134>)
 800175a:	f004 ff53 	bl	8006604 <HAL_GPIO_ReadPin>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f7      	beq.n	8001754 <Game2048_GameLoop+0x110>
            }
        }
    }


    Game2048_DrawBoard();
 8001764:	f7ff fc04 	bl	8000f70 <Game2048_DrawBoard>
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000000 	.word	0x20000000
 8001770:	20000304 	.word	0x20000304
 8001774:	20000268 	.word	0x20000268
 8001778:	40010c00 	.word	0x40010c00
 800177c:	20000260 	.word	0x20000260

08001780 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001786:	f107 0310 	add.w	r3, r7, #16
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001794:	4b2a      	ldr	r3, [pc, #168]	@ (8001840 <MX_GPIO_Init+0xc0>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	4a29      	ldr	r2, [pc, #164]	@ (8001840 <MX_GPIO_Init+0xc0>)
 800179a:	f043 0310 	orr.w	r3, r3, #16
 800179e:	6193      	str	r3, [r2, #24]
 80017a0:	4b27      	ldr	r3, [pc, #156]	@ (8001840 <MX_GPIO_Init+0xc0>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	f003 0310 	and.w	r3, r3, #16
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ac:	4b24      	ldr	r3, [pc, #144]	@ (8001840 <MX_GPIO_Init+0xc0>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a23      	ldr	r2, [pc, #140]	@ (8001840 <MX_GPIO_Init+0xc0>)
 80017b2:	f043 0320 	orr.w	r3, r3, #32
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b21      	ldr	r3, [pc, #132]	@ (8001840 <MX_GPIO_Init+0xc0>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f003 0320 	and.w	r3, r3, #32
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001840 <MX_GPIO_Init+0xc0>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001840 <MX_GPIO_Init+0xc0>)
 80017ca:	f043 0308 	orr.w	r3, r3, #8
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001840 <MX_GPIO_Init+0xc0>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f003 0308 	and.w	r3, r3, #8
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	4b18      	ldr	r3, [pc, #96]	@ (8001840 <MX_GPIO_Init+0xc0>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4a17      	ldr	r2, [pc, #92]	@ (8001840 <MX_GPIO_Init+0xc0>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	6193      	str	r3, [r2, #24]
 80017e8:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <MX_GPIO_Init+0xc0>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SysWork_Light_GPIO_Port, SysWork_Light_Pin, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017fa:	4812      	ldr	r0, [pc, #72]	@ (8001844 <MX_GPIO_Init+0xc4>)
 80017fc:	f004 ff19 	bl	8006632 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SysWork_Light_Pin */
  GPIO_InitStruct.Pin = SysWork_Light_Pin;
 8001800:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001804:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001806:	2301      	movs	r3, #1
 8001808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2302      	movs	r3, #2
 8001810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SysWork_Light_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 0310 	add.w	r3, r7, #16
 8001816:	4619      	mov	r1, r3
 8001818:	480a      	ldr	r0, [pc, #40]	@ (8001844 <MX_GPIO_Init+0xc4>)
 800181a:	f004 fd6f 	bl	80062fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch_Input_Pin Encoder_Input_Pin */
  GPIO_InitStruct.Pin = Switch_Input_Pin|Encoder_Input_Pin;
 800181e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001828:	2301      	movs	r3, #1
 800182a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	4619      	mov	r1, r3
 8001832:	4805      	ldr	r0, [pc, #20]	@ (8001848 <MX_GPIO_Init+0xc8>)
 8001834:	f004 fd62 	bl	80062fc <HAL_GPIO_Init>

}
 8001838:	bf00      	nop
 800183a:	3720      	adds	r7, #32
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000
 8001844:	40011000 	.word	0x40011000
 8001848:	40010c00 	.word	0x40010c00

0800184c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001850:	4b12      	ldr	r3, [pc, #72]	@ (800189c <MX_I2C1_Init+0x50>)
 8001852:	4a13      	ldr	r2, [pc, #76]	@ (80018a0 <MX_I2C1_Init+0x54>)
 8001854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001856:	4b11      	ldr	r3, [pc, #68]	@ (800189c <MX_I2C1_Init+0x50>)
 8001858:	4a12      	ldr	r2, [pc, #72]	@ (80018a4 <MX_I2C1_Init+0x58>)
 800185a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800185c:	4b0f      	ldr	r3, [pc, #60]	@ (800189c <MX_I2C1_Init+0x50>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001862:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <MX_I2C1_Init+0x50>)
 8001864:	2200      	movs	r2, #0
 8001866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001868:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <MX_I2C1_Init+0x50>)
 800186a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800186e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001870:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <MX_I2C1_Init+0x50>)
 8001872:	2200      	movs	r2, #0
 8001874:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001876:	4b09      	ldr	r3, [pc, #36]	@ (800189c <MX_I2C1_Init+0x50>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800187c:	4b07      	ldr	r3, [pc, #28]	@ (800189c <MX_I2C1_Init+0x50>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <MX_I2C1_Init+0x50>)
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001888:	4804      	ldr	r0, [pc, #16]	@ (800189c <MX_I2C1_Init+0x50>)
 800188a:	f004 feeb 	bl	8006664 <HAL_I2C_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001894:	f000 f93f 	bl	8001b16 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	2000026c 	.word	0x2000026c
 80018a0:	40005400 	.word	0x40005400
 80018a4:	00061a80 	.word	0x00061a80

080018a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0310 	add.w	r3, r7, #16
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a29      	ldr	r2, [pc, #164]	@ (8001968 <HAL_I2C_MspInit+0xc0>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d14a      	bne.n	800195e <HAL_I2C_MspInit+0xb6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c8:	4b28      	ldr	r3, [pc, #160]	@ (800196c <HAL_I2C_MspInit+0xc4>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a27      	ldr	r2, [pc, #156]	@ (800196c <HAL_I2C_MspInit+0xc4>)
 80018ce:	f043 0308 	orr.w	r3, r3, #8
 80018d2:	6193      	str	r3, [r2, #24]
 80018d4:	4b25      	ldr	r3, [pc, #148]	@ (800196c <HAL_I2C_MspInit+0xc4>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 80018e0:	23c0      	movs	r3, #192	@ 0xc0
 80018e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e4:	2312      	movs	r3, #18
 80018e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	4619      	mov	r1, r3
 80018f2:	481f      	ldr	r0, [pc, #124]	@ (8001970 <HAL_I2C_MspInit+0xc8>)
 80018f4:	f004 fd02 	bl	80062fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018f8:	4b1c      	ldr	r3, [pc, #112]	@ (800196c <HAL_I2C_MspInit+0xc4>)
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	4a1b      	ldr	r2, [pc, #108]	@ (800196c <HAL_I2C_MspInit+0xc4>)
 80018fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001902:	61d3      	str	r3, [r2, #28]
 8001904:	4b19      	ldr	r3, [pc, #100]	@ (800196c <HAL_I2C_MspInit+0xc4>)
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001910:	4b18      	ldr	r3, [pc, #96]	@ (8001974 <HAL_I2C_MspInit+0xcc>)
 8001912:	4a19      	ldr	r2, [pc, #100]	@ (8001978 <HAL_I2C_MspInit+0xd0>)
 8001914:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001916:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <HAL_I2C_MspInit+0xcc>)
 8001918:	2210      	movs	r2, #16
 800191a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800191c:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <HAL_I2C_MspInit+0xcc>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001922:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <HAL_I2C_MspInit+0xcc>)
 8001924:	2280      	movs	r2, #128	@ 0x80
 8001926:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001928:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <HAL_I2C_MspInit+0xcc>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800192e:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <HAL_I2C_MspInit+0xcc>)
 8001930:	2200      	movs	r2, #0
 8001932:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001934:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <HAL_I2C_MspInit+0xcc>)
 8001936:	2200      	movs	r2, #0
 8001938:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800193a:	4b0e      	ldr	r3, [pc, #56]	@ (8001974 <HAL_I2C_MspInit+0xcc>)
 800193c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001940:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001942:	480c      	ldr	r0, [pc, #48]	@ (8001974 <HAL_I2C_MspInit+0xcc>)
 8001944:	f004 fb7a 	bl	800603c <HAL_DMA_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 800194e:	f000 f8e2 	bl	8001b16 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a07      	ldr	r2, [pc, #28]	@ (8001974 <HAL_I2C_MspInit+0xcc>)
 8001956:	635a      	str	r2, [r3, #52]	@ 0x34
 8001958:	4a06      	ldr	r2, [pc, #24]	@ (8001974 <HAL_I2C_MspInit+0xcc>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800195e:	bf00      	nop
 8001960:	3720      	adds	r7, #32
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40005400 	.word	0x40005400
 800196c:	40021000 	.word	0x40021000
 8001970:	40010c00 	.word	0x40010c00
 8001974:	200002c0 	.word	0x200002c0
 8001978:	4002006c 	.word	0x4002006c

0800197c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001980:	f004 f9c8 	bl	8005d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001984:	f000 f882 	bl	8001a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001988:	f7ff fefa 	bl	8001780 <MX_GPIO_Init>
  MX_DMA_Init();
 800198c:	f7fe ff20 	bl	80007d0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001990:	f7ff ff5c 	bl	800184c <MX_I2C1_Init>
  MX_TIM1_Init();
 8001994:	f003 fffe 	bl	8005994 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001998:	f004 f89e 	bl	8005ad8 <MX_TIM3_Init>
  MX_SPI2_Init();
 800199c:	f003 fe48 	bl	8005630 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init(); // 初始化OLED
 80019a0:	f000 fa9c 	bl	8001edc <OLED_Init>
  OLED_InitBuffer(); // 初始化双缓冲
 80019a4:	f000 f8be 	bl	8001b24 <OLED_InitBuffer>
  OLED_ClearBuffer(); // 清空缓冲区
 80019a8:	f000 f8f0 	bl	8001b8c <OLED_ClearBuffer>
  
  OLED_EnableDiffMode(1);  // 启用差分更新
 80019ac:	2001      	movs	r0, #1
 80019ae:	f002 fc53 	bl	8004258 <OLED_EnableDiffMode>
  OLED_EnableFastUpdate(1); // 启用快速更新
 80019b2:	2001      	movs	r0, #1
 80019b4:	f002 fc6e 	bl	8004294 <OLED_EnableFastUpdate>

  
  // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // 启动PWM
 80019b8:	2104      	movs	r1, #4
 80019ba:	4829      	ldr	r0, [pc, #164]	@ (8001a60 <main+0xe4>)
 80019bc:	f006 f816 	bl	80079ec <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1); // 启动编码器
 80019c0:	2100      	movs	r1, #0
 80019c2:	4828      	ldr	r0, [pc, #160]	@ (8001a64 <main+0xe8>)
 80019c4:	f006 f956 	bl	8007c74 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2); // 启动编码器
 80019c8:	2104      	movs	r1, #4
 80019ca:	4826      	ldr	r0, [pc, #152]	@ (8001a64 <main+0xe8>)
 80019cc:	f006 f952 	bl	8007c74 <HAL_TIM_Encoder_Start>

  OLED_InitAnimationManager(&g_AnimationManager); // 初始化动画管理器
 80019d0:	4825      	ldr	r0, [pc, #148]	@ (8001a68 <main+0xec>)
 80019d2:	f003 fc3b 	bl	800524c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Menu_AnimationManager); // 初始化菜单动画管理器
 80019d6:	4825      	ldr	r0, [pc, #148]	@ (8001a6c <main+0xf0>)
 80019d8:	f003 fc38 	bl	800524c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Games_AnimationManager); // 初始化游戏动画管理器
 80019dc:	4824      	ldr	r0, [pc, #144]	@ (8001a70 <main+0xf4>)
 80019de:	f003 fc35 	bl	800524c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Tools_AnimationManager); // 初始化工具动画管理器
 80019e2:	4824      	ldr	r0, [pc, #144]	@ (8001a74 <main+0xf8>)
 80019e4:	f003 fc32 	bl	800524c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Settings_AnimationManager); // 初始化设置动画管理器
 80019e8:	4823      	ldr	r0, [pc, #140]	@ (8001a78 <main+0xfc>)
 80019ea:	f003 fc2f 	bl	800524c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&About_AnimationManager); // 初始化关于动画管理器
 80019ee:	4823      	ldr	r0, [pc, #140]	@ (8001a7c <main+0x100>)
 80019f0:	f003 fc2c 	bl	800524c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Status_AnimationManager); // 初始化状态动画管理器
 80019f4:	4822      	ldr	r0, [pc, #136]	@ (8001a80 <main+0x104>)
 80019f6:	f003 fc29 	bl	800524c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&g_Title_AnimationManager); // 初始化标题动画管理器
 80019fa:	4822      	ldr	r0, [pc, #136]	@ (8001a84 <main+0x108>)
 80019fc:	f003 fc26 	bl	800524c <OLED_InitAnimationManager>
  __HAL_TIM_SET_COUNTER(&htim3, 32767);
 8001a00:	4b18      	ldr	r3, [pc, #96]	@ (8001a64 <main+0xe8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001a08:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {    
    #pragma region OLED_UI_SETTINGS // UI设置
    OLED_ClearBuffer();
 8001a0a:	f000 f8bf 	bl	8001b8c <OLED_ClearBuffer>
    
    System_UI_Loop(); // UI循环
 8001a0e:	f000 fd8f 	bl	8002530 <System_UI_Loop>
    
    
    OLED_OptimizedDisplayFPS(80, 56); // 显示帧率
 8001a12:	2138      	movs	r1, #56	@ 0x38
 8001a14:	2050      	movs	r0, #80	@ 0x50
 8001a16:	f002 fce7 	bl	80043e8 <OLED_OptimizedDisplayFPS>
    count = __HAL_TIM_GET_COUNTER(&htim3); // 获取编码器计数值 1圈40
 8001a1a:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <main+0xe8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <main+0x10c>)
 8001a24:	801a      	strh	r2, [r3, #0]
    OLED_UpdateAnimationManager(&Menu_AnimationManager); // 更新菜单动画管理器
 8001a26:	4811      	ldr	r0, [pc, #68]	@ (8001a6c <main+0xf0>)
 8001a28:	f003 fcc2 	bl	80053b0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_AnimationManager); // 更新动画管理器
 8001a2c:	480e      	ldr	r0, [pc, #56]	@ (8001a68 <main+0xec>)
 8001a2e:	f003 fcbf 	bl	80053b0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Games_AnimationManager); // 更新游戏动画管理器
 8001a32:	480f      	ldr	r0, [pc, #60]	@ (8001a70 <main+0xf4>)
 8001a34:	f003 fcbc 	bl	80053b0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Tools_AnimationManager); // 更新工具动画管理器
 8001a38:	480e      	ldr	r0, [pc, #56]	@ (8001a74 <main+0xf8>)
 8001a3a:	f003 fcb9 	bl	80053b0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Settings_AnimationManager); // 更新设置动画管理器
 8001a3e:	480e      	ldr	r0, [pc, #56]	@ (8001a78 <main+0xfc>)
 8001a40:	f003 fcb6 	bl	80053b0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&About_AnimationManager); // 更新关于动画管理器
 8001a44:	480d      	ldr	r0, [pc, #52]	@ (8001a7c <main+0x100>)
 8001a46:	f003 fcb3 	bl	80053b0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Status_AnimationManager); // 更新状态动画管理器
 8001a4a:	480d      	ldr	r0, [pc, #52]	@ (8001a80 <main+0x104>)
 8001a4c:	f003 fcb0 	bl	80053b0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_Title_AnimationManager); // 更新标题动画管理器
 8001a50:	480c      	ldr	r0, [pc, #48]	@ (8001a84 <main+0x108>)
 8001a52:	f003 fcad 	bl	80053b0 <OLED_UpdateAnimationManager>
    OLED_SmartUpdate(); // 智能更新显示
 8001a56:	f002 fc2d 	bl	80042b4 <OLED_SmartUpdate>
    OLED_ClearBuffer();
 8001a5a:	bf00      	nop
 8001a5c:	e7d5      	b.n	8001a0a <main+0x8e>
 8001a5e:	bf00      	nop
 8001a60:	20003f28 	.word	0x20003f28
 8001a64:	20003f70 	.word	0x20003f70
 8001a68:	200038d8 	.word	0x200038d8
 8001a6c:	20000f2c 	.word	0x20000f2c
 8001a70:	20001520 	.word	0x20001520
 8001a74:	20001b14 	.word	0x20001b14
 8001a78:	20002108 	.word	0x20002108
 8001a7c:	200026fc 	.word	0x200026fc
 8001a80:	20002cf0 	.word	0x20002cf0
 8001a84:	200032e4 	.word	0x200032e4
 8001a88:	20000304 	.word	0x20000304

08001a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b090      	sub	sp, #64	@ 0x40
 8001a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a92:	f107 0318 	add.w	r3, r7, #24
 8001a96:	2228      	movs	r2, #40	@ 0x28
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f006 ffc7 	bl	8008a2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
 8001aac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ab2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ab6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001abc:	2301      	movs	r3, #1
 8001abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ac4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001aca:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad0:	f107 0318 	add.w	r3, r7, #24
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f005 fa61 	bl	8006f9c <HAL_RCC_OscConfig>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001ae0:	f000 f819 	bl	8001b16 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae4:	230f      	movs	r3, #15
 8001ae6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001af0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001af4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	2102      	movs	r1, #2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f005 fcce 	bl	80074a0 <HAL_RCC_ClockConfig>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b0a:	f000 f804 	bl	8001b16 <Error_Handler>
  }
}
 8001b0e:	bf00      	nop
 8001b10:	3740      	adds	r7, #64	@ 0x40
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b1a:	b672      	cpsid	i
}
 8001b1c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b1e:	bf00      	nop
 8001b20:	e7fd      	b.n	8001b1e <Error_Handler+0x8>
	...

08001b24 <OLED_InitBuffer>:
        0x22, 0x00, 0x07  // 页地址范围: 0-7
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8001b2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4811      	ldr	r0, [pc, #68]	@ (8001b78 <OLED_InitBuffer+0x54>)
 8001b32:	f006 ff7c 	bl	8008a2e <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 8001b36:	f240 4201 	movw	r2, #1025	@ 0x401
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	480f      	ldr	r0, [pc, #60]	@ (8001b7c <OLED_InitBuffer+0x58>)
 8001b3e:	f006 ff76 	bl	8008a2e <memset>

    // 初始化第一个字节为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8001b42:	4b0e      	ldr	r3, [pc, #56]	@ (8001b7c <OLED_InitBuffer+0x58>)
 8001b44:	2240      	movs	r2, #64	@ 0x40
 8001b46:	701a      	strb	r2, [r3, #0]

    // 初始化状态变量
    oled_update_flag = OLED_READY;
 8001b48:	4b0d      	ldr	r3, [pc, #52]	@ (8001b80 <OLED_InitBuffer+0x5c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
    oled_dma_busy = OLED_READY;
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b84 <OLED_InitBuffer+0x60>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	71fb      	strb	r3, [r7, #7]
 8001b58:	e006      	b.n	8001b68 <OLED_InitBuffer+0x44>
    {
        oled_dirty_pages[i] = 1;
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b88 <OLED_InitBuffer+0x64>)
 8001b5e:	2101      	movs	r1, #1
 8001b60:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	3301      	adds	r3, #1
 8001b66:	71fb      	strb	r3, [r7, #7]
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	2b07      	cmp	r3, #7
 8001b6c:	d9f5      	bls.n	8001b5a <OLED_InitBuffer+0x36>
    }
}
 8001b6e:	bf00      	nop
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000318 	.word	0x20000318
 8001b7c:	20000718 	.word	0x20000718
 8001b80:	2000030c 	.word	0x2000030c
 8001b84:	2000030d 	.word	0x2000030d
 8001b88:	20000310 	.word	0x20000310

08001b8c <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8001b92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b96:	2100      	movs	r1, #0
 8001b98:	480a      	ldr	r0, [pc, #40]	@ (8001bc4 <OLED_ClearBuffer+0x38>)
 8001b9a:	f006 ff48 	bl	8008a2e <memset>

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	71fb      	strb	r3, [r7, #7]
 8001ba2:	e006      	b.n	8001bb2 <OLED_ClearBuffer+0x26>
    {
        oled_dirty_pages[i] = 1;
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	4a08      	ldr	r2, [pc, #32]	@ (8001bc8 <OLED_ClearBuffer+0x3c>)
 8001ba8:	2101      	movs	r1, #1
 8001baa:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	71fb      	strb	r3, [r7, #7]
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	2b07      	cmp	r3, #7
 8001bb6:	d9f5      	bls.n	8001ba4 <OLED_ClearBuffer+0x18>
    }
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000318 	.word	0x20000318
 8001bc8:	20000310 	.word	0x20000310

08001bcc <OLED_IsBusy>:

uint8_t OLED_IsBusy(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
    // 如果标记为忙，检查是否已经过了足够时间
    if (oled_update_flag)
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c10 <OLED_IsBusy+0x44>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d007      	beq.n	8001bec <OLED_IsBusy+0x20>
    {
        // SSD1315/SSD1306 典型帧率约为60Hz，每帧约16.7ms
        // 可以根据需要调整刷新率，减小此值可以提高帧率
        uint32_t current_time = HAL_GetTick();
 8001bdc:	f004 f8f2 	bl	8005dc4 <HAL_GetTick>
 8001be0:	6078      	str	r0, [r7, #4]
        if (current_time - oled_last_update_time >= 0)
 8001be2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c14 <OLED_IsBusy+0x48>)
 8001be4:	681b      	ldr	r3, [r3, #0]
        {
            oled_update_flag = OLED_READY; // 已经过了足够时间，不再忙
 8001be6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c10 <OLED_IsBusy+0x44>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
        }
    }

    // 如果DMA传输正在进行，也视为忙
    return (oled_update_flag || oled_dma_busy);
 8001bec:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <OLED_IsBusy+0x44>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d104      	bne.n	8001c00 <OLED_IsBusy+0x34>
 8001bf6:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <OLED_IsBusy+0x4c>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <OLED_IsBusy+0x38>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <OLED_IsBusy+0x3a>
 8001c04:	2300      	movs	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	2000030c 	.word	0x2000030c
 8001c14:	20000308 	.word	0x20000308
 8001c18:	2000030d 	.word	0x2000030d

08001c1c <OLED_UpdateDisplayVSync>:

void OLED_UpdateDisplayVSync(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af02      	add	r7, sp, #8
    // 等待上一次更新完成
    while (OLED_IsBusy())
 8001c22:	bf00      	nop
 8001c24:	f7ff ffd2 	bl	8001bcc <OLED_IsBusy>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1fa      	bne.n	8001c24 <OLED_UpdateDisplayVSync+0x8>
    {
        // 可以加入短暂延时或者让出CPU，但通常不会停留很久
    }

    oled_update_flag = OLED_BUSY;
 8001c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cac <OLED_UpdateDisplayVSync+0x90>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8001c34:	f004 f8c6 	bl	8005dc4 <HAL_GetTick>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb0 <OLED_UpdateDisplayVSync+0x94>)
 8001c3c:	6013      	str	r3, [r2, #0]

    OLED_FrontBuffer[0] = 0x40;                                             // 数据控制字节：Co=0, D/C#=1 (数据)
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <OLED_UpdateDisplayVSync+0x98>)
 8001c40:	2240      	movs	r2, #64	@ 0x40
 8001c42:	701a      	strb	r2, [r3, #0]
    memcpy(OLED_FrontBuffer + 1, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES); // 复制当前缓冲区到前缓冲区
 8001c44:	4a1c      	ldr	r2, [pc, #112]	@ (8001cb8 <OLED_UpdateDisplayVSync+0x9c>)
 8001c46:	4b1d      	ldr	r3, [pc, #116]	@ (8001cbc <OLED_UpdateDisplayVSync+0xa0>)
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c50:	461a      	mov	r2, r3
 8001c52:	f006 ff7a 	bl	8008b4a <memcpy>

    // 一次性发送所有命令
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	71fb      	strb	r3, [r7, #7]
 8001c5a:	e008      	b.n	8001c6e <OLED_UpdateDisplayVSync+0x52>
    {
        OLED_SendCommand(cmds[i]);
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	4a18      	ldr	r2, [pc, #96]	@ (8001cc0 <OLED_UpdateDisplayVSync+0xa4>)
 8001c60:	5cd3      	ldrb	r3, [r2, r3]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f920 	bl	8001ea8 <OLED_SendCommand>
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	71fb      	strb	r3, [r7, #7]
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	2b07      	cmp	r3, #7
 8001c72:	d9f3      	bls.n	8001c5c <OLED_UpdateDisplayVSync+0x40>
    }


    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, OLED_WIDTH * OLED_PAGES + 1, HAL_MAX_DELAY);
 8001c74:	f04f 33ff 	mov.w	r3, #4294967295
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	f240 4301 	movw	r3, #1025	@ 0x401
 8001c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb4 <OLED_UpdateDisplayVSync+0x98>)
 8001c80:	2178      	movs	r1, #120	@ 0x78
 8001c82:	4810      	ldr	r0, [pc, #64]	@ (8001cc4 <OLED_UpdateDisplayVSync+0xa8>)
 8001c84:	f004 fe32 	bl	80068ec <HAL_I2C_Master_Transmit>

    // 重置所有脏页标记
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	71bb      	strb	r3, [r7, #6]
 8001c8c:	e006      	b.n	8001c9c <OLED_UpdateDisplayVSync+0x80>
    {
        oled_dirty_pages[i] = 0;
 8001c8e:	79bb      	ldrb	r3, [r7, #6]
 8001c90:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc8 <OLED_UpdateDisplayVSync+0xac>)
 8001c92:	2100      	movs	r1, #0
 8001c94:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001c96:	79bb      	ldrb	r3, [r7, #6]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	71bb      	strb	r3, [r7, #6]
 8001c9c:	79bb      	ldrb	r3, [r7, #6]
 8001c9e:	2b07      	cmp	r3, #7
 8001ca0:	d9f5      	bls.n	8001c8e <OLED_UpdateDisplayVSync+0x72>
    }
}
 8001ca2:	bf00      	nop
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	2000030c 	.word	0x2000030c
 8001cb0:	20000308 	.word	0x20000308
 8001cb4:	20000718 	.word	0x20000718
 8001cb8:	20000719 	.word	0x20000719
 8001cbc:	20000318 	.word	0x20000318
 8001cc0:	0800b540 	.word	0x0800b540
 8001cc4:	2000026c 	.word	0x2000026c
 8001cc8:	20000310 	.word	0x20000310

08001ccc <OLED_UpdateDisplayPartial>:
    }
}

// 局部更新显示函数
void OLED_UpdateDisplayPartial(uint8_t startPage, uint8_t endPage)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	460a      	mov	r2, r1
 8001cd6:	71fb      	strb	r3, [r7, #7]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	71bb      	strb	r3, [r7, #6]
    // 边界检查
    if (startPage >= OLED_PAGES || endPage >= OLED_PAGES || startPage > endPage)
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	2b07      	cmp	r3, #7
 8001ce0:	d85c      	bhi.n	8001d9c <OLED_UpdateDisplayPartial+0xd0>
 8001ce2:	79bb      	ldrb	r3, [r7, #6]
 8001ce4:	2b07      	cmp	r3, #7
 8001ce6:	d859      	bhi.n	8001d9c <OLED_UpdateDisplayPartial+0xd0>
 8001ce8:	79fa      	ldrb	r2, [r7, #7]
 8001cea:	79bb      	ldrb	r3, [r7, #6]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d855      	bhi.n	8001d9c <OLED_UpdateDisplayPartial+0xd0>
        return;

    // 等待上一次更新完成
    while (OLED_IsBusy())
 8001cf0:	bf00      	nop
 8001cf2:	f7ff ff6b 	bl	8001bcc <OLED_IsBusy>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1fa      	bne.n	8001cf2 <OLED_UpdateDisplayPartial+0x26>
    {
        // 可以加入短暂延时或者让出CPU
    }

    oled_update_flag = OLED_BUSY;
 8001cfc:	4b29      	ldr	r3, [pc, #164]	@ (8001da4 <OLED_UpdateDisplayPartial+0xd8>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8001d02:	f004 f85f 	bl	8005dc4 <HAL_GetTick>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4a27      	ldr	r2, [pc, #156]	@ (8001da8 <OLED_UpdateDisplayPartial+0xdc>)
 8001d0a:	6013      	str	r3, [r2, #0]

    // 设置页地址范围
    OLED_SendCommand(0x22);      // 页地址设置命令
 8001d0c:	2022      	movs	r0, #34	@ 0x22
 8001d0e:	f000 f8cb 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(startPage); // 起始页
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f000 f8c7 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(endPage);   // 结束页
 8001d1a:	79bb      	ldrb	r3, [r7, #6]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 f8c3 	bl	8001ea8 <OLED_SendCommand>

    // 设置列地址范围（总是更新整行）
    OLED_SendCommand(0x21); // 列地址设置命令
 8001d22:	2021      	movs	r0, #33	@ 0x21
 8001d24:	f000 f8c0 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 起始列
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f000 f8bd 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0x7F); // 结束列 (127)
 8001d2e:	207f      	movs	r0, #127	@ 0x7f
 8001d30:	f000 f8ba 	bl	8001ea8 <OLED_SendCommand>

    // 计算需要传输的数据长度
    uint16_t dataLen = OLED_WIDTH * (endPage - startPage + 1);
 8001d34:	79ba      	ldrb	r2, [r7, #6]
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	01db      	lsls	r3, r3, #7
 8001d40:	81bb      	strh	r3, [r7, #12]

    // 前缓冲区的第一个字节设为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8001d42:	4b1a      	ldr	r3, [pc, #104]	@ (8001dac <OLED_UpdateDisplayPartial+0xe0>)
 8001d44:	2240      	movs	r2, #64	@ 0x40
 8001d46:	701a      	strb	r2, [r3, #0]

    // 只复制需要更新的页
    for (uint8_t page = startPage; page <= endPage; page++)
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	73fb      	strb	r3, [r7, #15]
 8001d4c:	e016      	b.n	8001d7c <OLED_UpdateDisplayPartial+0xb0>
    {
        memcpy(
            OLED_FrontBuffer + 1 + (page - startPage) * OLED_WIDTH,
 8001d4e:	7bfa      	ldrb	r2, [r7, #15]
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	01db      	lsls	r3, r3, #7
 8001d56:	3301      	adds	r3, #1
        memcpy(
 8001d58:	4a14      	ldr	r2, [pc, #80]	@ (8001dac <OLED_UpdateDisplayPartial+0xe0>)
 8001d5a:	1898      	adds	r0, r3, r2
            OLED_BackBuffer + page * OLED_WIDTH,
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	01db      	lsls	r3, r3, #7
 8001d60:	461a      	mov	r2, r3
        memcpy(
 8001d62:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <OLED_UpdateDisplayPartial+0xe4>)
 8001d64:	4413      	add	r3, r2
 8001d66:	2280      	movs	r2, #128	@ 0x80
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f006 feee 	bl	8008b4a <memcpy>
            OLED_WIDTH);
        oled_dirty_pages[page] = 0; // 重置脏页标记
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	4a10      	ldr	r2, [pc, #64]	@ (8001db4 <OLED_UpdateDisplayPartial+0xe8>)
 8001d72:	2100      	movs	r1, #0
 8001d74:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = startPage; page <= endPage; page++)
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	79bb      	ldrb	r3, [r7, #6]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d9e4      	bls.n	8001d4e <OLED_UpdateDisplayPartial+0x82>
    }

    // 发送数据
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, dataLen + 1, HAL_MAX_DELAY);
 8001d84:	89bb      	ldrh	r3, [r7, #12]
 8001d86:	3301      	adds	r3, #1
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8e:	9200      	str	r2, [sp, #0]
 8001d90:	4a06      	ldr	r2, [pc, #24]	@ (8001dac <OLED_UpdateDisplayPartial+0xe0>)
 8001d92:	2178      	movs	r1, #120	@ 0x78
 8001d94:	4808      	ldr	r0, [pc, #32]	@ (8001db8 <OLED_UpdateDisplayPartial+0xec>)
 8001d96:	f004 fda9 	bl	80068ec <HAL_I2C_Master_Transmit>
 8001d9a:	e000      	b.n	8001d9e <OLED_UpdateDisplayPartial+0xd2>
        return;
 8001d9c:	bf00      	nop
}
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	2000030c 	.word	0x2000030c
 8001da8:	20000308 	.word	0x20000308
 8001dac:	20000718 	.word	0x20000718
 8001db0:	20000318 	.word	0x20000318
 8001db4:	20000310 	.word	0x20000310
 8001db8:	2000026c 	.word	0x2000026c

08001dbc <OLED_WritePixel>:

void OLED_WritePixel(int16_t x, int16_t y, uint8_t color)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	80fb      	strh	r3, [r7, #6]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	80bb      	strh	r3, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	70fb      	strb	r3, [r7, #3]
    // 边界检查
    if (x >= OLED_WIDTH || x < 0 || y >= OLED_HEIGHT || y < 0)
 8001dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8001dd4:	dc5e      	bgt.n	8001e94 <OLED_WritePixel+0xd8>
 8001dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	db5a      	blt.n	8001e94 <OLED_WritePixel+0xd8>
 8001dde:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001de2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001de4:	dc56      	bgt.n	8001e94 <OLED_WritePixel+0xd8>
 8001de6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	db52      	blt.n	8001e94 <OLED_WritePixel+0xd8>
        return;

    // 计算像素所在的字节位置
    uint16_t byte_index = x + (y / 8) * OLED_WIDTH;
 8001dee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	da00      	bge.n	8001df8 <OLED_WritePixel+0x3c>
 8001df6:	3307      	adds	r3, #7
 8001df8:	10db      	asrs	r3, r3, #3
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	01db      	lsls	r3, r3, #7
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	4413      	add	r3, r2
 8001e06:	81fb      	strh	r3, [r7, #14]
    uint8_t bit_position = y % 8;
 8001e08:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e0c:	425a      	negs	r2, r3
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	f002 0207 	and.w	r2, r2, #7
 8001e16:	bf58      	it	pl
 8001e18:	4253      	negpl	r3, r2
 8001e1a:	b21b      	sxth	r3, r3
 8001e1c:	737b      	strb	r3, [r7, #13]
    uint8_t page = y / 8; // 计算所在页
 8001e1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	da00      	bge.n	8001e28 <OLED_WritePixel+0x6c>
 8001e26:	3307      	adds	r3, #7
 8001e28:	10db      	asrs	r3, r3, #3
 8001e2a:	b21b      	sxth	r3, r3
 8001e2c:	733b      	strb	r3, [r7, #12]

    // 记录当前像素值
    uint8_t old_value = OLED_BackBuffer[byte_index];
 8001e2e:	89fb      	ldrh	r3, [r7, #14]
 8001e30:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea0 <OLED_WritePixel+0xe4>)
 8001e32:	5cd3      	ldrb	r3, [r2, r3]
 8001e34:	72fb      	strb	r3, [r7, #11]

    if (color) // 如果需要点亮像素
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00f      	beq.n	8001e5c <OLED_WritePixel+0xa0>
        OLED_BackBuffer[byte_index] |= (1 << bit_position);
 8001e3c:	89fb      	ldrh	r3, [r7, #14]
 8001e3e:	4a18      	ldr	r2, [pc, #96]	@ (8001ea0 <OLED_WritePixel+0xe4>)
 8001e40:	5cd3      	ldrb	r3, [r2, r3]
 8001e42:	b25a      	sxtb	r2, r3
 8001e44:	7b7b      	ldrb	r3, [r7, #13]
 8001e46:	2101      	movs	r1, #1
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	b25b      	sxtb	r3, r3
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	b25a      	sxtb	r2, r3
 8001e52:	89fb      	ldrh	r3, [r7, #14]
 8001e54:	b2d1      	uxtb	r1, r2
 8001e56:	4a12      	ldr	r2, [pc, #72]	@ (8001ea0 <OLED_WritePixel+0xe4>)
 8001e58:	54d1      	strb	r1, [r2, r3]
 8001e5a:	e010      	b.n	8001e7e <OLED_WritePixel+0xc2>
    else // 如果需要熄灭像素
        OLED_BackBuffer[byte_index] &= ~(1 << bit_position);
 8001e5c:	89fb      	ldrh	r3, [r7, #14]
 8001e5e:	4a10      	ldr	r2, [pc, #64]	@ (8001ea0 <OLED_WritePixel+0xe4>)
 8001e60:	5cd3      	ldrb	r3, [r2, r3]
 8001e62:	b25a      	sxtb	r2, r3
 8001e64:	7b7b      	ldrb	r3, [r7, #13]
 8001e66:	2101      	movs	r1, #1
 8001e68:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6c:	b25b      	sxtb	r3, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	b25b      	sxtb	r3, r3
 8001e72:	4013      	ands	r3, r2
 8001e74:	b25a      	sxtb	r2, r3
 8001e76:	89fb      	ldrh	r3, [r7, #14]
 8001e78:	b2d1      	uxtb	r1, r2
 8001e7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ea0 <OLED_WritePixel+0xe4>)
 8001e7c:	54d1      	strb	r1, [r2, r3]

    // 如果像素值发生变化，标记该页为脏
    if (old_value != OLED_BackBuffer[byte_index])
 8001e7e:	89fb      	ldrh	r3, [r7, #14]
 8001e80:	4a07      	ldr	r2, [pc, #28]	@ (8001ea0 <OLED_WritePixel+0xe4>)
 8001e82:	5cd3      	ldrb	r3, [r2, r3]
 8001e84:	7afa      	ldrb	r2, [r7, #11]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d005      	beq.n	8001e96 <OLED_WritePixel+0xda>
    {
        oled_dirty_pages[page] = 1;
 8001e8a:	7b3b      	ldrb	r3, [r7, #12]
 8001e8c:	4a05      	ldr	r2, [pc, #20]	@ (8001ea4 <OLED_WritePixel+0xe8>)
 8001e8e:	2101      	movs	r1, #1
 8001e90:	54d1      	strb	r1, [r2, r3]
 8001e92:	e000      	b.n	8001e96 <OLED_WritePixel+0xda>
        return;
 8001e94:	bf00      	nop
    }
}
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20000318 	.word	0x20000318
 8001ea4:	20000310 	.word	0x20000310

08001ea8 <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8001eba:	f107 020c 	add.w	r2, r7, #12
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	2178      	movs	r1, #120	@ 0x78
 8001ec8:	4803      	ldr	r0, [pc, #12]	@ (8001ed8 <OLED_SendCommand+0x30>)
 8001eca:	f004 fd0f 	bl	80068ec <HAL_I2C_Master_Transmit>
}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2000026c 	.word	0x2000026c

08001edc <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 8001ee0:	2064      	movs	r0, #100	@ 0x64
 8001ee2:	f003 ff79 	bl	8005dd8 <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 8001ee6:	20ae      	movs	r0, #174	@ 0xae
 8001ee8:	f7ff ffde 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 8001eec:	20d5      	movs	r0, #213	@ 0xd5
 8001eee:	f7ff ffdb 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 8001ef2:	2080      	movs	r0, #128	@ 0x80
 8001ef4:	f7ff ffd8 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8001ef8:	20a8      	movs	r0, #168	@ 0xa8
 8001efa:	f7ff ffd5 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 8001efe:	203f      	movs	r0, #63	@ 0x3f
 8001f00:	f7ff ffd2 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8001f04:	20d3      	movs	r0, #211	@ 0xd3
 8001f06:	f7ff ffcf 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff ffcc 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8001f10:	2040      	movs	r0, #64	@ 0x40
 8001f12:	f7ff ffc9 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 8001f16:	208d      	movs	r0, #141	@ 0x8d
 8001f18:	f7ff ffc6 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 8001f1c:	2014      	movs	r0, #20
 8001f1e:	f7ff ffc3 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 8001f22:	2020      	movs	r0, #32
 8001f24:	f7ff ffc0 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 8001f28:	2000      	movs	r0, #0
 8001f2a:	f7ff ffbd 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 8001f2e:	20a1      	movs	r0, #161	@ 0xa1
 8001f30:	f7ff ffba 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 8001f34:	20c8      	movs	r0, #200	@ 0xc8
 8001f36:	f7ff ffb7 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 8001f3a:	20da      	movs	r0, #218	@ 0xda
 8001f3c:	f7ff ffb4 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8001f40:	2012      	movs	r0, #18
 8001f42:	f7ff ffb1 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 8001f46:	2081      	movs	r0, #129	@ 0x81
 8001f48:	f7ff ffae 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 8001f4c:	20cf      	movs	r0, #207	@ 0xcf
 8001f4e:	f7ff ffab 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 8001f52:	20d9      	movs	r0, #217	@ 0xd9
 8001f54:	f7ff ffa8 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 8001f58:	20f1      	movs	r0, #241	@ 0xf1
 8001f5a:	f7ff ffa5 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 8001f5e:	20db      	movs	r0, #219	@ 0xdb
 8001f60:	f7ff ffa2 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 8001f64:	2030      	movs	r0, #48	@ 0x30
 8001f66:	f7ff ff9f 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 8001f6a:	20a4      	movs	r0, #164	@ 0xa4
 8001f6c:	f7ff ff9c 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 8001f70:	20a6      	movs	r0, #166	@ 0xa6
 8001f72:	f7ff ff99 	bl	8001ea8 <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 8001f76:	202e      	movs	r0, #46	@ 0x2e
 8001f78:	f7ff ff96 	bl	8001ea8 <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 8001f7c:	f7ff fdd2 	bl	8001b24 <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 8001f80:	f7ff fe04 	bl	8001b8c <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 8001f84:	20af      	movs	r0, #175	@ 0xaf
 8001f86:	f7ff ff8f 	bl	8001ea8 <OLED_SendCommand>
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <OLED_InvertArea>:

// 区域反色功能 - 将指定矩形区域内的像素颜色反转 //! UPDATEDISPLAY REQUIRED
void OLED_InvertArea(int16_t x, int16_t y, uint8_t width, uint8_t height)
{
 8001f90:	b490      	push	{r4, r7}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4604      	mov	r4, r0
 8001f98:	4608      	mov	r0, r1
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4623      	mov	r3, r4
 8001fa0:	80fb      	strh	r3, [r7, #6]
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	80bb      	strh	r3, [r7, #4]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	70fb      	strb	r3, [r7, #3]
 8001faa:	4613      	mov	r3, r2
 8001fac:	70bb      	strb	r3, [r7, #2]
    if (width == 0 || height == 0)
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 809d 	beq.w	80020f0 <OLED_InvertArea+0x160>
 8001fb6:	78bb      	ldrb	r3, [r7, #2]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 8099 	beq.w	80020f0 <OLED_InvertArea+0x160>
        return;

    int16_t x_start_on_screen = x;
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	83fb      	strh	r3, [r7, #30]
    int16_t y_start_on_screen = y;
 8001fc2:	88bb      	ldrh	r3, [r7, #4]
 8001fc4:	83bb      	strh	r3, [r7, #28]
    int16_t x_end_on_screen = x + width - 1;
 8001fc6:	78fb      	ldrb	r3, [r7, #3]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	4413      	add	r3, r2
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	837b      	strh	r3, [r7, #26]
    int16_t y_end_on_screen = y + height - 1;
 8001fd6:	78bb      	ldrb	r3, [r7, #2]
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	88bb      	ldrh	r3, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	833b      	strh	r3, [r7, #24]

    // Clip to screen boundaries
    if (x_start_on_screen < 0)
 8001fe6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	da01      	bge.n	8001ff2 <OLED_InvertArea+0x62>
        x_start_on_screen = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	83fb      	strh	r3, [r7, #30]
    if (y_start_on_screen < 0)
 8001ff2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	da01      	bge.n	8001ffe <OLED_InvertArea+0x6e>
        y_start_on_screen = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	83bb      	strh	r3, [r7, #28]
    if (x_end_on_screen >= OLED_WIDTH)
 8001ffe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002002:	2b7f      	cmp	r3, #127	@ 0x7f
 8002004:	dd01      	ble.n	800200a <OLED_InvertArea+0x7a>
        x_end_on_screen = OLED_WIDTH - 1;
 8002006:	237f      	movs	r3, #127	@ 0x7f
 8002008:	837b      	strh	r3, [r7, #26]
    if (y_end_on_screen >= OLED_HEIGHT)
 800200a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800200e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002010:	dd01      	ble.n	8002016 <OLED_InvertArea+0x86>
        y_end_on_screen = OLED_HEIGHT - 1;
 8002012:	233f      	movs	r3, #63	@ 0x3f
 8002014:	833b      	strh	r3, [r7, #24]

    // If clipped area is invalid (e.g., entirely off-screen after clipping)
    if (x_start_on_screen > x_end_on_screen || y_start_on_screen > y_end_on_screen)
 8002016:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800201a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800201e:	429a      	cmp	r2, r3
 8002020:	dc68      	bgt.n	80020f4 <OLED_InvertArea+0x164>
 8002022:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002026:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800202a:	429a      	cmp	r2, r3
 800202c:	dc62      	bgt.n	80020f4 <OLED_InvertArea+0x164>
        return;

    // 计算涉及的页范围
    uint8_t start_page = y_start_on_screen / 8;
 800202e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002032:	2b00      	cmp	r3, #0
 8002034:	da00      	bge.n	8002038 <OLED_InvertArea+0xa8>
 8002036:	3307      	adds	r3, #7
 8002038:	10db      	asrs	r3, r3, #3
 800203a:	b21b      	sxth	r3, r3
 800203c:	747b      	strb	r3, [r7, #17]
    uint8_t end_page = y_end_on_screen / 8;
 800203e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002042:	2b00      	cmp	r3, #0
 8002044:	da00      	bge.n	8002048 <OLED_InvertArea+0xb8>
 8002046:	3307      	adds	r3, #7
 8002048:	10db      	asrs	r3, r3, #3
 800204a:	b21b      	sxth	r3, r3
 800204c:	743b      	strb	r3, [r7, #16]

    // 标记受影响的页为脏页
    extern volatile uint8_t oled_dirty_pages[];
    for (uint8_t page = start_page; page <= end_page; page++)
 800204e:	7c7b      	ldrb	r3, [r7, #17]
 8002050:	75fb      	strb	r3, [r7, #23]
 8002052:	e006      	b.n	8002062 <OLED_InvertArea+0xd2>
    {
        oled_dirty_pages[page] = 1;
 8002054:	7dfb      	ldrb	r3, [r7, #23]
 8002056:	4a2a      	ldr	r2, [pc, #168]	@ (8002100 <OLED_InvertArea+0x170>)
 8002058:	2101      	movs	r1, #1
 800205a:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = start_page; page <= end_page; page++)
 800205c:	7dfb      	ldrb	r3, [r7, #23]
 800205e:	3301      	adds	r3, #1
 8002060:	75fb      	strb	r3, [r7, #23]
 8002062:	7dfa      	ldrb	r2, [r7, #23]
 8002064:	7c3b      	ldrb	r3, [r7, #16]
 8002066:	429a      	cmp	r2, r3
 8002068:	d9f4      	bls.n	8002054 <OLED_InvertArea+0xc4>
    }

    // 优化的像素更新逻辑 - 按行处理以提高缓存命中率
    for (int16_t j = y_start_on_screen; j <= y_end_on_screen; j++)
 800206a:	8bbb      	ldrh	r3, [r7, #28]
 800206c:	82bb      	strh	r3, [r7, #20]
 800206e:	e038      	b.n	80020e2 <OLED_InvertArea+0x152>
    {
        uint8_t page = (uint8_t)j / 8;
 8002070:	8abb      	ldrh	r3, [r7, #20]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	08db      	lsrs	r3, r3, #3
 8002076:	73fb      	strb	r3, [r7, #15]
        uint8_t bit_position = (uint8_t)j % 8;
 8002078:	8abb      	ldrh	r3, [r7, #20]
 800207a:	b2db      	uxtb	r3, r3
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	73bb      	strb	r3, [r7, #14]
        uint16_t byte_index_base = page * OLED_WIDTH;
 8002082:	7bfb      	ldrb	r3, [r7, #15]
 8002084:	b29b      	uxth	r3, r3
 8002086:	01db      	lsls	r3, r3, #7
 8002088:	81bb      	strh	r3, [r7, #12]

        // 处理当前行上的所有像素
        for (int16_t i = x_start_on_screen; i <= x_end_on_screen; i++)
 800208a:	8bfb      	ldrh	r3, [r7, #30]
 800208c:	827b      	strh	r3, [r7, #18]
 800208e:	e01c      	b.n	80020ca <OLED_InvertArea+0x13a>
        {
            uint16_t byte_index = byte_index_base + i;
 8002090:	8a7a      	ldrh	r2, [r7, #18]
 8002092:	89bb      	ldrh	r3, [r7, #12]
 8002094:	4413      	add	r3, r2
 8002096:	817b      	strh	r3, [r7, #10]

            // 反转位
            if (byte_index < sizeof(OLED_BackBuffer))
 8002098:	897b      	ldrh	r3, [r7, #10]
 800209a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800209e:	d20e      	bcs.n	80020be <OLED_InvertArea+0x12e>
            {
                OLED_BackBuffer[byte_index] ^= (1 << bit_position);
 80020a0:	897b      	ldrh	r3, [r7, #10]
 80020a2:	4a18      	ldr	r2, [pc, #96]	@ (8002104 <OLED_InvertArea+0x174>)
 80020a4:	5cd3      	ldrb	r3, [r2, r3]
 80020a6:	b25a      	sxtb	r2, r3
 80020a8:	7bbb      	ldrb	r3, [r7, #14]
 80020aa:	2101      	movs	r1, #1
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	b25b      	sxtb	r3, r3
 80020b2:	4053      	eors	r3, r2
 80020b4:	b25a      	sxtb	r2, r3
 80020b6:	897b      	ldrh	r3, [r7, #10]
 80020b8:	b2d1      	uxtb	r1, r2
 80020ba:	4a12      	ldr	r2, [pc, #72]	@ (8002104 <OLED_InvertArea+0x174>)
 80020bc:	54d1      	strb	r1, [r2, r3]
        for (int16_t i = x_start_on_screen; i <= x_end_on_screen; i++)
 80020be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	3301      	adds	r3, #1
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	827b      	strh	r3, [r7, #18]
 80020ca:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80020ce:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	dddc      	ble.n	8002090 <OLED_InvertArea+0x100>
    for (int16_t j = y_start_on_screen; j <= y_end_on_screen; j++)
 80020d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	3301      	adds	r3, #1
 80020de:	b29b      	uxth	r3, r3
 80020e0:	82bb      	strh	r3, [r7, #20]
 80020e2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80020e6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	ddc0      	ble.n	8002070 <OLED_InvertArea+0xe0>
 80020ee:	e002      	b.n	80020f6 <OLED_InvertArea+0x166>
        return;
 80020f0:	bf00      	nop
 80020f2:	e000      	b.n	80020f6 <OLED_InvertArea+0x166>
        return;
 80020f4:	bf00      	nop
            }
        }
    }
}
 80020f6:	3720      	adds	r7, #32
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc90      	pop	{r4, r7}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000310 	.word	0x20000310
 8002104:	20000318 	.word	0x20000318

08002108 <OLED_DisplayChar>:
    OLED_SendCommand(0x00 + (x & 0x0F));        // 设置低4位列地址
    OLED_SendCommand(0x10 + ((x >> 4) & 0x0F)); // 设置高4位列地址
}

void OLED_DisplayChar(int16_t x, int16_t y, char ch) //! UPDATEDISPLAY REQUIRED
{
 8002108:	b480      	push	{r7}
 800210a:	b089      	sub	sp, #36	@ 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	80fb      	strh	r3, [r7, #6]
 8002112:	460b      	mov	r3, r1
 8002114:	80bb      	strh	r3, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	70fb      	strb	r3, [r7, #3]
    const uint8_t font_width = 6;
 800211a:	2306      	movs	r3, #6
 800211c:	773b      	strb	r3, [r7, #28]
    const uint8_t font_height = 8;
 800211e:	2308      	movs	r3, #8
 8002120:	76fb      	strb	r3, [r7, #27]

    if (ch < 32)
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	2b1f      	cmp	r3, #31
 8002126:	f240 80a8 	bls.w	800227a <OLED_DisplayChar+0x172>
        return;

    uint8_t c = ch - 32;
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	3b20      	subs	r3, #32
 800212e:	76bb      	strb	r3, [r7, #26]

    uint8_t start_page = (y >= 0) ? (y / 8) : 0;
 8002130:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	db08      	blt.n	800214a <OLED_DisplayChar+0x42>
 8002138:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	da00      	bge.n	8002142 <OLED_DisplayChar+0x3a>
 8002140:	3307      	adds	r3, #7
 8002142:	10db      	asrs	r3, r3, #3
 8002144:	b21b      	sxth	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	e000      	b.n	800214c <OLED_DisplayChar+0x44>
 800214a:	2300      	movs	r3, #0
 800214c:	767b      	strb	r3, [r7, #25]
    uint8_t end_page = ((y + font_height - 1) < OLED_HEIGHT) ? ((y + font_height - 1) / 8) : (OLED_HEIGHT / 8 - 1);
 800214e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002152:	7efb      	ldrb	r3, [r7, #27]
 8002154:	4413      	add	r3, r2
 8002156:	2b40      	cmp	r3, #64	@ 0x40
 8002158:	dc0a      	bgt.n	8002170 <OLED_DisplayChar+0x68>
 800215a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800215e:	7efb      	ldrb	r3, [r7, #27]
 8002160:	4413      	add	r3, r2
 8002162:	3b01      	subs	r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	da00      	bge.n	800216a <OLED_DisplayChar+0x62>
 8002168:	3307      	adds	r3, #7
 800216a:	10db      	asrs	r3, r3, #3
 800216c:	b2db      	uxtb	r3, r3
 800216e:	e000      	b.n	8002172 <OLED_DisplayChar+0x6a>
 8002170:	2307      	movs	r3, #7
 8002172:	763b      	strb	r3, [r7, #24]

    extern volatile uint8_t oled_dirty_pages[];
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 8002174:	7e7b      	ldrb	r3, [r7, #25]
 8002176:	77fb      	strb	r3, [r7, #31]
 8002178:	e006      	b.n	8002188 <OLED_DisplayChar+0x80>
    {
        oled_dirty_pages[page] = 1;
 800217a:	7ffb      	ldrb	r3, [r7, #31]
 800217c:	4a42      	ldr	r2, [pc, #264]	@ (8002288 <OLED_DisplayChar+0x180>)
 800217e:	2101      	movs	r1, #1
 8002180:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 8002182:	7ffb      	ldrb	r3, [r7, #31]
 8002184:	3301      	adds	r3, #1
 8002186:	77fb      	strb	r3, [r7, #31]
 8002188:	7ffa      	ldrb	r2, [r7, #31]
 800218a:	7e3b      	ldrb	r3, [r7, #24]
 800218c:	429a      	cmp	r2, r3
 800218e:	d802      	bhi.n	8002196 <OLED_DisplayChar+0x8e>
 8002190:	7ffb      	ldrb	r3, [r7, #31]
 8002192:	2b07      	cmp	r3, #7
 8002194:	d9f1      	bls.n	800217a <OLED_DisplayChar+0x72>
    }
    // 按列渲染
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8002196:	2300      	movs	r3, #0
 8002198:	77bb      	strb	r3, [r7, #30]
 800219a:	e069      	b.n	8002270 <OLED_DisplayChar+0x168>
    {
        int16_t screen_x = x + char_col;
 800219c:	7fbb      	ldrb	r3, [r7, #30]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	4413      	add	r3, r2
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	82fb      	strh	r3, [r7, #22]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 80021a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	db5b      	blt.n	8002268 <OLED_DisplayChar+0x160>
 80021b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80021b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80021b6:	dc57      	bgt.n	8002268 <OLED_DisplayChar+0x160>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 80021b8:	7ebb      	ldrb	r3, [r7, #26]
 80021ba:	7f3a      	ldrb	r2, [r7, #28]
 80021bc:	fb03 f202 	mul.w	r2, r3, r2
 80021c0:	7fbb      	ldrb	r3, [r7, #30]
 80021c2:	4413      	add	r3, r2
 80021c4:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 80021c8:	d259      	bcs.n	800227e <OLED_DisplayChar+0x176>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 80021ca:	7ebb      	ldrb	r3, [r7, #26]
 80021cc:	7f3a      	ldrb	r2, [r7, #28]
 80021ce:	fb03 f202 	mul.w	r2, r3, r2
 80021d2:	7fbb      	ldrb	r3, [r7, #30]
 80021d4:	4413      	add	r3, r2
 80021d6:	4a2d      	ldr	r2, [pc, #180]	@ (800228c <OLED_DisplayChar+0x184>)
 80021d8:	5cd3      	ldrb	r3, [r2, r3]
 80021da:	757b      	strb	r3, [r7, #21]

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 80021dc:	2300      	movs	r3, #0
 80021de:	777b      	strb	r3, [r7, #29]
 80021e0:	e03d      	b.n	800225e <OLED_DisplayChar+0x156>
        {
            int16_t screen_y = y + char_row_bit;
 80021e2:	7f7b      	ldrb	r3, [r7, #29]
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	88bb      	ldrh	r3, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	827b      	strh	r3, [r7, #18]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 80021ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	db2f      	blt.n	8002256 <OLED_DisplayChar+0x14e>
 80021f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80021fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80021fc:	dc2b      	bgt.n	8002256 <OLED_DisplayChar+0x14e>
                continue;

            if ((font_data_col >> char_row_bit) & 0x01)
 80021fe:	7d7a      	ldrb	r2, [r7, #21]
 8002200:	7f7b      	ldrb	r3, [r7, #29]
 8002202:	fa42 f303 	asr.w	r3, r2, r3
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d024      	beq.n	8002258 <OLED_DisplayChar+0x150>
            {
                uint8_t page = (uint8_t)screen_y / 8;
 800220e:	8a7b      	ldrh	r3, [r7, #18]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	08db      	lsrs	r3, r3, #3
 8002214:	747b      	strb	r3, [r7, #17]
                uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 8002216:	8a7b      	ldrh	r3, [r7, #18]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	743b      	strb	r3, [r7, #16]
                uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 8002220:	7c7b      	ldrb	r3, [r7, #17]
 8002222:	b29b      	uxth	r3, r3
 8002224:	01db      	lsls	r3, r3, #7
 8002226:	b29a      	uxth	r2, r3
 8002228:	8afb      	ldrh	r3, [r7, #22]
 800222a:	4413      	add	r3, r2
 800222c:	81fb      	strh	r3, [r7, #14]

                if (buffer_index < sizeof(OLED_BackBuffer))
 800222e:	89fb      	ldrh	r3, [r7, #14]
 8002230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002234:	d210      	bcs.n	8002258 <OLED_DisplayChar+0x150>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 8002236:	89fb      	ldrh	r3, [r7, #14]
 8002238:	4a15      	ldr	r2, [pc, #84]	@ (8002290 <OLED_DisplayChar+0x188>)
 800223a:	5cd3      	ldrb	r3, [r2, r3]
 800223c:	b25a      	sxtb	r2, r3
 800223e:	7c3b      	ldrb	r3, [r7, #16]
 8002240:	2101      	movs	r1, #1
 8002242:	fa01 f303 	lsl.w	r3, r1, r3
 8002246:	b25b      	sxtb	r3, r3
 8002248:	4313      	orrs	r3, r2
 800224a:	b25a      	sxtb	r2, r3
 800224c:	89fb      	ldrh	r3, [r7, #14]
 800224e:	b2d1      	uxtb	r1, r2
 8002250:	4a0f      	ldr	r2, [pc, #60]	@ (8002290 <OLED_DisplayChar+0x188>)
 8002252:	54d1      	strb	r1, [r2, r3]
 8002254:	e000      	b.n	8002258 <OLED_DisplayChar+0x150>
                continue;
 8002256:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8002258:	7f7b      	ldrb	r3, [r7, #29]
 800225a:	3301      	adds	r3, #1
 800225c:	777b      	strb	r3, [r7, #29]
 800225e:	7f7a      	ldrb	r2, [r7, #29]
 8002260:	7efb      	ldrb	r3, [r7, #27]
 8002262:	429a      	cmp	r2, r3
 8002264:	d3bd      	bcc.n	80021e2 <OLED_DisplayChar+0xda>
 8002266:	e000      	b.n	800226a <OLED_DisplayChar+0x162>
            continue;
 8002268:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 800226a:	7fbb      	ldrb	r3, [r7, #30]
 800226c:	3301      	adds	r3, #1
 800226e:	77bb      	strb	r3, [r7, #30]
 8002270:	7fba      	ldrb	r2, [r7, #30]
 8002272:	7f3b      	ldrb	r3, [r7, #28]
 8002274:	429a      	cmp	r2, r3
 8002276:	d391      	bcc.n	800219c <OLED_DisplayChar+0x94>
 8002278:	e002      	b.n	8002280 <OLED_DisplayChar+0x178>
        return;
 800227a:	bf00      	nop
 800227c:	e000      	b.n	8002280 <OLED_DisplayChar+0x178>
            break;
 800227e:	bf00      	nop
                }
            }
        }
    }
}
 8002280:	3724      	adds	r7, #36	@ 0x24
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	20000310 	.word	0x20000310
 800228c:	0800b300 	.word	0x0800b300
 8002290:	20000318 	.word	0x20000318

08002294 <OLED_DisplayCharInverted>:

void OLED_DisplayCharInverted(int16_t x, int16_t y, char ch, uint8_t inverted) //! UPDATEDISPLAY REQUIRED
{
 8002294:	b490      	push	{r4, r7}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	4604      	mov	r4, r0
 800229c:	4608      	mov	r0, r1
 800229e:	4611      	mov	r1, r2
 80022a0:	461a      	mov	r2, r3
 80022a2:	4623      	mov	r3, r4
 80022a4:	80fb      	strh	r3, [r7, #6]
 80022a6:	4603      	mov	r3, r0
 80022a8:	80bb      	strh	r3, [r7, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	70fb      	strb	r3, [r7, #3]
 80022ae:	4613      	mov	r3, r2
 80022b0:	70bb      	strb	r3, [r7, #2]
    const uint8_t font_width = 6;
 80022b2:	2306      	movs	r3, #6
 80022b4:	753b      	strb	r3, [r7, #20]
    const uint8_t font_height = 8;
 80022b6:	2308      	movs	r3, #8
 80022b8:	74fb      	strb	r3, [r7, #19]

    if (ch < 32)
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	2b1f      	cmp	r3, #31
 80022be:	f240 808e 	bls.w	80023de <OLED_DisplayCharInverted+0x14a>
        return;

    uint8_t c = ch - 32;
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	3b20      	subs	r3, #32
 80022c6:	74bb      	strb	r3, [r7, #18]

    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 80022c8:	2300      	movs	r3, #0
 80022ca:	75fb      	strb	r3, [r7, #23]
 80022cc:	e081      	b.n	80023d2 <OLED_DisplayCharInverted+0x13e>
    {
        int16_t screen_x = x + char_col;
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	4413      	add	r3, r2
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	823b      	strh	r3, [r7, #16]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 80022da:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	db73      	blt.n	80023ca <OLED_DisplayCharInverted+0x136>
 80022e2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80022e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80022e8:	dc6f      	bgt.n	80023ca <OLED_DisplayCharInverted+0x136>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 80022ea:	7cbb      	ldrb	r3, [r7, #18]
 80022ec:	7d3a      	ldrb	r2, [r7, #20]
 80022ee:	fb03 f202 	mul.w	r2, r3, r2
 80022f2:	7dfb      	ldrb	r3, [r7, #23]
 80022f4:	4413      	add	r3, r2
 80022f6:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 80022fa:	d272      	bcs.n	80023e2 <OLED_DisplayCharInverted+0x14e>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 80022fc:	7cbb      	ldrb	r3, [r7, #18]
 80022fe:	7d3a      	ldrb	r2, [r7, #20]
 8002300:	fb03 f202 	mul.w	r2, r3, r2
 8002304:	7dfb      	ldrb	r3, [r7, #23]
 8002306:	4413      	add	r3, r2
 8002308:	4a38      	ldr	r2, [pc, #224]	@ (80023ec <OLED_DisplayCharInverted+0x158>)
 800230a:	5cd3      	ldrb	r3, [r2, r3]
 800230c:	75bb      	strb	r3, [r7, #22]

        if (inverted)
 800230e:	78bb      	ldrb	r3, [r7, #2]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <OLED_DisplayCharInverted+0x86>
        {
            font_data_col = ~font_data_col;
 8002314:	7dbb      	ldrb	r3, [r7, #22]
 8002316:	43db      	mvns	r3, r3
 8002318:	75bb      	strb	r3, [r7, #22]
        }

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 800231a:	2300      	movs	r3, #0
 800231c:	757b      	strb	r3, [r7, #21]
 800231e:	e04f      	b.n	80023c0 <OLED_DisplayCharInverted+0x12c>
        {
            int16_t screen_y = y + char_row_bit;
 8002320:	7d7b      	ldrb	r3, [r7, #21]
 8002322:	b29a      	uxth	r2, r3
 8002324:	88bb      	ldrh	r3, [r7, #4]
 8002326:	4413      	add	r3, r2
 8002328:	b29b      	uxth	r3, r3
 800232a:	81fb      	strh	r3, [r7, #14]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 800232c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002330:	2b00      	cmp	r3, #0
 8002332:	db41      	blt.n	80023b8 <OLED_DisplayCharInverted+0x124>
 8002334:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002338:	2b3f      	cmp	r3, #63	@ 0x3f
 800233a:	dc3d      	bgt.n	80023b8 <OLED_DisplayCharInverted+0x124>
                continue;

            uint8_t page = (uint8_t)screen_y / 8;
 800233c:	89fb      	ldrh	r3, [r7, #14]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	08db      	lsrs	r3, r3, #3
 8002342:	737b      	strb	r3, [r7, #13]
            uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 8002344:	89fb      	ldrh	r3, [r7, #14]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	733b      	strb	r3, [r7, #12]
            uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 800234e:	7b7b      	ldrb	r3, [r7, #13]
 8002350:	b29b      	uxth	r3, r3
 8002352:	01db      	lsls	r3, r3, #7
 8002354:	b29a      	uxth	r2, r3
 8002356:	8a3b      	ldrh	r3, [r7, #16]
 8002358:	4413      	add	r3, r2
 800235a:	817b      	strh	r3, [r7, #10]

            if (buffer_index < sizeof(OLED_BackBuffer))
 800235c:	897b      	ldrh	r3, [r7, #10]
 800235e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002362:	d22a      	bcs.n	80023ba <OLED_DisplayCharInverted+0x126>
            {
                if ((font_data_col >> char_row_bit) & 0x01)
 8002364:	7dba      	ldrb	r2, [r7, #22]
 8002366:	7d7b      	ldrb	r3, [r7, #21]
 8002368:	fa42 f303 	asr.w	r3, r2, r3
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00f      	beq.n	8002394 <OLED_DisplayCharInverted+0x100>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 8002374:	897b      	ldrh	r3, [r7, #10]
 8002376:	4a1e      	ldr	r2, [pc, #120]	@ (80023f0 <OLED_DisplayCharInverted+0x15c>)
 8002378:	5cd3      	ldrb	r3, [r2, r3]
 800237a:	b25a      	sxtb	r2, r3
 800237c:	7b3b      	ldrb	r3, [r7, #12]
 800237e:	2101      	movs	r1, #1
 8002380:	fa01 f303 	lsl.w	r3, r1, r3
 8002384:	b25b      	sxtb	r3, r3
 8002386:	4313      	orrs	r3, r2
 8002388:	b25a      	sxtb	r2, r3
 800238a:	897b      	ldrh	r3, [r7, #10]
 800238c:	b2d1      	uxtb	r1, r2
 800238e:	4a18      	ldr	r2, [pc, #96]	@ (80023f0 <OLED_DisplayCharInverted+0x15c>)
 8002390:	54d1      	strb	r1, [r2, r3]
 8002392:	e012      	b.n	80023ba <OLED_DisplayCharInverted+0x126>
                }
                else
                {
                    OLED_BackBuffer[buffer_index] &= ~(1 << bit_offset_in_page);
 8002394:	897b      	ldrh	r3, [r7, #10]
 8002396:	4a16      	ldr	r2, [pc, #88]	@ (80023f0 <OLED_DisplayCharInverted+0x15c>)
 8002398:	5cd3      	ldrb	r3, [r2, r3]
 800239a:	b25a      	sxtb	r2, r3
 800239c:	7b3b      	ldrb	r3, [r7, #12]
 800239e:	2101      	movs	r1, #1
 80023a0:	fa01 f303 	lsl.w	r3, r1, r3
 80023a4:	b25b      	sxtb	r3, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	b25b      	sxtb	r3, r3
 80023aa:	4013      	ands	r3, r2
 80023ac:	b25a      	sxtb	r2, r3
 80023ae:	897b      	ldrh	r3, [r7, #10]
 80023b0:	b2d1      	uxtb	r1, r2
 80023b2:	4a0f      	ldr	r2, [pc, #60]	@ (80023f0 <OLED_DisplayCharInverted+0x15c>)
 80023b4:	54d1      	strb	r1, [r2, r3]
 80023b6:	e000      	b.n	80023ba <OLED_DisplayCharInverted+0x126>
                continue;
 80023b8:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 80023ba:	7d7b      	ldrb	r3, [r7, #21]
 80023bc:	3301      	adds	r3, #1
 80023be:	757b      	strb	r3, [r7, #21]
 80023c0:	7d7a      	ldrb	r2, [r7, #21]
 80023c2:	7cfb      	ldrb	r3, [r7, #19]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d3ab      	bcc.n	8002320 <OLED_DisplayCharInverted+0x8c>
 80023c8:	e000      	b.n	80023cc <OLED_DisplayCharInverted+0x138>
            continue;
 80023ca:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 80023cc:	7dfb      	ldrb	r3, [r7, #23]
 80023ce:	3301      	adds	r3, #1
 80023d0:	75fb      	strb	r3, [r7, #23]
 80023d2:	7dfa      	ldrb	r2, [r7, #23]
 80023d4:	7d3b      	ldrb	r3, [r7, #20]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	f4ff af79 	bcc.w	80022ce <OLED_DisplayCharInverted+0x3a>
 80023dc:	e002      	b.n	80023e4 <OLED_DisplayCharInverted+0x150>
        return;
 80023de:	bf00      	nop
 80023e0:	e000      	b.n	80023e4 <OLED_DisplayCharInverted+0x150>
            break;
 80023e2:	bf00      	nop
                }
            }
        }
    }
}
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc90      	pop	{r4, r7}
 80023ea:	4770      	bx	lr
 80023ec:	0800b300 	.word	0x0800b300
 80023f0:	20000318 	.word	0x20000318

080023f4 <OLED_DisplayString>:

void OLED_DisplayString(int16_t x, int16_t y, char *str) //! UPDATEDISPLAY REQUIRED
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	603a      	str	r2, [r7, #0]
 80023fe:	80fb      	strh	r3, [r7, #6]
 8002400:	460b      	mov	r3, r1
 8002402:	80bb      	strh	r3, [r7, #4]
    uint8_t j = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	73fb      	strb	r3, [r7, #15]
    const uint8_t font_width = 6;
 8002408:	2306      	movs	r3, #6
 800240a:	73bb      	strb	r3, [r7, #14]
    const uint8_t font_height = 8;
 800240c:	2308      	movs	r3, #8
 800240e:	737b      	strb	r3, [r7, #13]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 8002410:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002414:	2b3f      	cmp	r3, #63	@ 0x3f
 8002416:	dc34      	bgt.n	8002482 <OLED_DisplayString+0x8e>
 8002418:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800241c:	7b7b      	ldrb	r3, [r7, #13]
 800241e:	4413      	add	r3, r2
 8002420:	2b00      	cmp	r3, #0
 8002422:	dd2e      	ble.n	8002482 <OLED_DisplayString+0x8e>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 8002424:	e026      	b.n	8002474 <OLED_DisplayString+0x80>
    {
        current_char_x = x + (j * font_width);
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	b29b      	uxth	r3, r3
 800242a:	7bba      	ldrb	r2, [r7, #14]
 800242c:	b292      	uxth	r2, r2
 800242e:	fb02 f303 	mul.w	r3, r2, r3
 8002432:	b29a      	uxth	r2, r3
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	4413      	add	r3, r2
 8002438:	b29b      	uxth	r3, r3
 800243a:	817b      	strh	r3, [r7, #10]
        if (current_char_x >= OLED_WIDTH)
 800243c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002440:	2b7f      	cmp	r3, #127	@ 0x7f
 8002442:	dc20      	bgt.n	8002486 <OLED_DisplayString+0x92>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 8002444:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002448:	7bbb      	ldrb	r3, [r7, #14]
 800244a:	4413      	add	r3, r2
 800244c:	2b00      	cmp	r3, #0
 800244e:	dc03      	bgt.n	8002458 <OLED_DisplayString+0x64>
        {
            j++;
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	3301      	adds	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
            continue;
 8002456:	e00d      	b.n	8002474 <OLED_DisplayString+0x80>
        }
        OLED_DisplayChar(current_char_x, y, str[j]);
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	4413      	add	r3, r2
 800245e:	781a      	ldrb	r2, [r3, #0]
 8002460:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002464:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fe4d 	bl	8002108 <OLED_DisplayChar>
        j++;
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	3301      	adds	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
    while (str[j] != '\0')
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	4413      	add	r3, r2
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1d2      	bne.n	8002426 <OLED_DisplayString+0x32>
 8002480:	e002      	b.n	8002488 <OLED_DisplayString+0x94>
        return;
 8002482:	bf00      	nop
 8002484:	e000      	b.n	8002488 <OLED_DisplayString+0x94>
            break;
 8002486:	bf00      	nop
    }
}
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <OLED_DisplayStringInverted>:

void OLED_DisplayStringInverted(int16_t x, int16_t y, char *str, uint8_t inverted) //! UPDATEDISPLAY REQUIRED
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b086      	sub	sp, #24
 8002492:	af00      	add	r7, sp, #0
 8002494:	60ba      	str	r2, [r7, #8]
 8002496:	461a      	mov	r2, r3
 8002498:	4603      	mov	r3, r0
 800249a:	81fb      	strh	r3, [r7, #14]
 800249c:	460b      	mov	r3, r1
 800249e:	81bb      	strh	r3, [r7, #12]
 80024a0:	4613      	mov	r3, r2
 80024a2:	71fb      	strb	r3, [r7, #7]
    uint8_t j = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	75fb      	strb	r3, [r7, #23]
    const uint8_t font_width = 6;
 80024a8:	2306      	movs	r3, #6
 80024aa:	75bb      	strb	r3, [r7, #22]
    const uint8_t font_height = 8;
 80024ac:	2308      	movs	r3, #8
 80024ae:	757b      	strb	r3, [r7, #21]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 80024b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80024b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80024b6:	dc34      	bgt.n	8002522 <OLED_DisplayStringInverted+0x94>
 80024b8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80024bc:	7d7b      	ldrb	r3, [r7, #21]
 80024be:	4413      	add	r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	dd2e      	ble.n	8002522 <OLED_DisplayStringInverted+0x94>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 80024c4:	e026      	b.n	8002514 <OLED_DisplayStringInverted+0x86>
    {
        current_char_x = x + (j * font_width);
 80024c6:	7dfb      	ldrb	r3, [r7, #23]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	7dba      	ldrb	r2, [r7, #22]
 80024cc:	b292      	uxth	r2, r2
 80024ce:	fb02 f303 	mul.w	r3, r2, r3
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	89fb      	ldrh	r3, [r7, #14]
 80024d6:	4413      	add	r3, r2
 80024d8:	b29b      	uxth	r3, r3
 80024da:	827b      	strh	r3, [r7, #18]
        if (current_char_x >= OLED_WIDTH)
 80024dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80024e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80024e2:	dc20      	bgt.n	8002526 <OLED_DisplayStringInverted+0x98>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 80024e4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80024e8:	7dbb      	ldrb	r3, [r7, #22]
 80024ea:	4413      	add	r3, r2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	dc03      	bgt.n	80024f8 <OLED_DisplayStringInverted+0x6a>
        {
            j++;
 80024f0:	7dfb      	ldrb	r3, [r7, #23]
 80024f2:	3301      	adds	r3, #1
 80024f4:	75fb      	strb	r3, [r7, #23]
            continue;
 80024f6:	e00d      	b.n	8002514 <OLED_DisplayStringInverted+0x86>
        }
        OLED_DisplayCharInverted(current_char_x, y, str[j], inverted);
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	4413      	add	r3, r2
 80024fe:	781a      	ldrb	r2, [r3, #0]
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002506:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 800250a:	f7ff fec3 	bl	8002294 <OLED_DisplayCharInverted>
        j++;
 800250e:	7dfb      	ldrb	r3, [r7, #23]
 8002510:	3301      	adds	r3, #1
 8002512:	75fb      	strb	r3, [r7, #23]
    while (str[j] != '\0')
 8002514:	7dfb      	ldrb	r3, [r7, #23]
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	4413      	add	r3, r2
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1d2      	bne.n	80024c6 <OLED_DisplayStringInverted+0x38>
 8002520:	e002      	b.n	8002528 <OLED_DisplayStringInverted+0x9a>
        return;
 8002522:	bf00      	nop
 8002524:	e000      	b.n	8002528 <OLED_DisplayStringInverted+0x9a>
            break;
 8002526:	bf00      	nop
    }
}
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <System_UI_Loop>:
#define OLED_TITLE_End_Y 0
#define StartTweenTime 2500
#define TweenStyle EASE_INOUT_ELASTIC

void System_UI_Loop()
{
 8002530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002532:	b089      	sub	sp, #36	@ 0x24
 8002534:	af04      	add	r7, sp, #16
    static bool isFirstRun = true;

    float x, y, x1, y1;
    if (!isFirstRun)
 8002536:	4b9c      	ldr	r3, [pc, #624]	@ (80027a8 <System_UI_Loop+0x278>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	f083 0301 	eor.w	r3, r3, #1
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <System_UI_Loop+0x18>
        SystemGetsSignal();
 8002544:	f001 fa82 	bl	8003a4c <SystemGetsSignal>

    if (isFirstRun) //第一次启动调用，初始化部分
 8002548:	4b97      	ldr	r3, [pc, #604]	@ (80027a8 <System_UI_Loop+0x278>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 832c 	beq.w	8002baa <System_UI_Loop+0x67a>
    {
#pragma region 标题栏
        OLED_MoveObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_End_Y, StartTweenTime, TweenStyle);
 8002552:	230f      	movs	r3, #15
 8002554:	9303      	str	r3, [sp, #12]
 8002556:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800255a:	9302      	str	r3, [sp, #8]
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	9301      	str	r3, [sp, #4]
 8002562:	4b92      	ldr	r3, [pc, #584]	@ (80027ac <System_UI_Loop+0x27c>)
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	4b92      	ldr	r3, [pc, #584]	@ (80027b0 <System_UI_Loop+0x280>)
 8002568:	4a90      	ldr	r2, [pc, #576]	@ (80027ac <System_UI_Loop+0x27c>)
 800256a:	4992      	ldr	r1, [pc, #584]	@ (80027b4 <System_UI_Loop+0x284>)
 800256c:	4892      	ldr	r0, [pc, #584]	@ (80027b8 <System_UI_Loop+0x288>)
 800256e:	f002 fece 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002572:	230f      	movs	r3, #15
 8002574:	9303      	str	r3, [sp, #12]
 8002576:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800257a:	9302      	str	r3, [sp, #8]
 800257c:	4b8c      	ldr	r3, [pc, #560]	@ (80027b0 <System_UI_Loop+0x280>)
 800257e:	9301      	str	r3, [sp, #4]
 8002580:	4b8a      	ldr	r3, [pc, #552]	@ (80027ac <System_UI_Loop+0x27c>)
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	4b8a      	ldr	r3, [pc, #552]	@ (80027b0 <System_UI_Loop+0x280>)
 8002586:	4a89      	ldr	r2, [pc, #548]	@ (80027ac <System_UI_Loop+0x27c>)
 8002588:	498c      	ldr	r1, [pc, #560]	@ (80027bc <System_UI_Loop+0x28c>)
 800258a:	488b      	ldr	r0, [pc, #556]	@ (80027b8 <System_UI_Loop+0x288>)
 800258c:	f002 febf 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002590:	230f      	movs	r3, #15
 8002592:	9303      	str	r3, [sp, #12]
 8002594:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002598:	9302      	str	r3, [sp, #8]
 800259a:	4b85      	ldr	r3, [pc, #532]	@ (80027b0 <System_UI_Loop+0x280>)
 800259c:	9301      	str	r3, [sp, #4]
 800259e:	4b88      	ldr	r3, [pc, #544]	@ (80027c0 <System_UI_Loop+0x290>)
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	4b83      	ldr	r3, [pc, #524]	@ (80027b0 <System_UI_Loop+0x280>)
 80025a4:	4a86      	ldr	r2, [pc, #536]	@ (80027c0 <System_UI_Loop+0x290>)
 80025a6:	4987      	ldr	r1, [pc, #540]	@ (80027c4 <System_UI_Loop+0x294>)
 80025a8:	4883      	ldr	r0, [pc, #524]	@ (80027b8 <System_UI_Loop+0x288>)
 80025aa:	f002 feb0 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 80025ae:	230f      	movs	r3, #15
 80025b0:	9303      	str	r3, [sp, #12]
 80025b2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80025b6:	9302      	str	r3, [sp, #8]
 80025b8:	4b7d      	ldr	r3, [pc, #500]	@ (80027b0 <System_UI_Loop+0x280>)
 80025ba:	9301      	str	r3, [sp, #4]
 80025bc:	4b82      	ldr	r3, [pc, #520]	@ (80027c8 <System_UI_Loop+0x298>)
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	4b7b      	ldr	r3, [pc, #492]	@ (80027b0 <System_UI_Loop+0x280>)
 80025c2:	4a81      	ldr	r2, [pc, #516]	@ (80027c8 <System_UI_Loop+0x298>)
 80025c4:	4981      	ldr	r1, [pc, #516]	@ (80027cc <System_UI_Loop+0x29c>)
 80025c6:	487c      	ldr	r0, [pc, #496]	@ (80027b8 <System_UI_Loop+0x288>)
 80025c8:	f002 fea1 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Developer") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 80025cc:	230f      	movs	r3, #15
 80025ce:	9303      	str	r3, [sp, #12]
 80025d0:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80025d4:	9302      	str	r3, [sp, #8]
 80025d6:	4b76      	ldr	r3, [pc, #472]	@ (80027b0 <System_UI_Loop+0x280>)
 80025d8:	9301      	str	r3, [sp, #4]
 80025da:	4b7d      	ldr	r3, [pc, #500]	@ (80027d0 <System_UI_Loop+0x2a0>)
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	4b74      	ldr	r3, [pc, #464]	@ (80027b0 <System_UI_Loop+0x280>)
 80025e0:	4a7b      	ldr	r2, [pc, #492]	@ (80027d0 <System_UI_Loop+0x2a0>)
 80025e2:	497c      	ldr	r1, [pc, #496]	@ (80027d4 <System_UI_Loop+0x2a4>)
 80025e4:	4874      	ldr	r0, [pc, #464]	@ (80027b8 <System_UI_Loop+0x288>)
 80025e6:	f002 fe92 	bl	800530e <OLED_MoveObject>

        OLED_MoveObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 80025ea:	230f      	movs	r3, #15
 80025ec:	9303      	str	r3, [sp, #12]
 80025ee:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80025f2:	9302      	str	r3, [sp, #8]
 80025f4:	4b6e      	ldr	r3, [pc, #440]	@ (80027b0 <System_UI_Loop+0x280>)
 80025f6:	9301      	str	r3, [sp, #4]
 80025f8:	4b73      	ldr	r3, [pc, #460]	@ (80027c8 <System_UI_Loop+0x298>)
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	4b6c      	ldr	r3, [pc, #432]	@ (80027b0 <System_UI_Loop+0x280>)
 80025fe:	4a72      	ldr	r2, [pc, #456]	@ (80027c8 <System_UI_Loop+0x298>)
 8002600:	4975      	ldr	r1, [pc, #468]	@ (80027d8 <System_UI_Loop+0x2a8>)
 8002602:	486d      	ldr	r0, [pc, #436]	@ (80027b8 <System_UI_Loop+0x288>)
 8002604:	f002 fe83 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002608:	230f      	movs	r3, #15
 800260a:	9303      	str	r3, [sp, #12]
 800260c:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002610:	9302      	str	r3, [sp, #8]
 8002612:	4b67      	ldr	r3, [pc, #412]	@ (80027b0 <System_UI_Loop+0x280>)
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	4b65      	ldr	r3, [pc, #404]	@ (80027ac <System_UI_Loop+0x27c>)
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	4b65      	ldr	r3, [pc, #404]	@ (80027b0 <System_UI_Loop+0x280>)
 800261c:	4a63      	ldr	r2, [pc, #396]	@ (80027ac <System_UI_Loop+0x27c>)
 800261e:	496f      	ldr	r1, [pc, #444]	@ (80027dc <System_UI_Loop+0x2ac>)
 8002620:	4865      	ldr	r0, [pc, #404]	@ (80027b8 <System_UI_Loop+0x288>)
 8002622:	f002 fe74 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002626:	230f      	movs	r3, #15
 8002628:	9303      	str	r3, [sp, #12]
 800262a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800262e:	9302      	str	r3, [sp, #8]
 8002630:	4b5f      	ldr	r3, [pc, #380]	@ (80027b0 <System_UI_Loop+0x280>)
 8002632:	9301      	str	r3, [sp, #4]
 8002634:	4b64      	ldr	r3, [pc, #400]	@ (80027c8 <System_UI_Loop+0x298>)
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	4b5d      	ldr	r3, [pc, #372]	@ (80027b0 <System_UI_Loop+0x280>)
 800263a:	4a63      	ldr	r2, [pc, #396]	@ (80027c8 <System_UI_Loop+0x298>)
 800263c:	4968      	ldr	r1, [pc, #416]	@ (80027e0 <System_UI_Loop+0x2b0>)
 800263e:	485e      	ldr	r0, [pc, #376]	@ (80027b8 <System_UI_Loop+0x288>)
 8002640:	f002 fe65 	bl	800530e <OLED_MoveObject>

        OLED_MoveObject(&g_Title_AnimationManager, "Do some CAL!", (OLED_WIDTH - strlen("Do some Cal!") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Do some Cal!") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002644:	230f      	movs	r3, #15
 8002646:	9303      	str	r3, [sp, #12]
 8002648:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800264c:	9302      	str	r3, [sp, #8]
 800264e:	4b58      	ldr	r3, [pc, #352]	@ (80027b0 <System_UI_Loop+0x280>)
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	4b5d      	ldr	r3, [pc, #372]	@ (80027c8 <System_UI_Loop+0x298>)
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	4b56      	ldr	r3, [pc, #344]	@ (80027b0 <System_UI_Loop+0x280>)
 8002658:	4a5b      	ldr	r2, [pc, #364]	@ (80027c8 <System_UI_Loop+0x298>)
 800265a:	4962      	ldr	r1, [pc, #392]	@ (80027e4 <System_UI_Loop+0x2b4>)
 800265c:	4856      	ldr	r0, [pc, #344]	@ (80027b8 <System_UI_Loop+0x288>)
 800265e:	f002 fe56 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "BAD APPLE!", (OLED_WIDTH - strlen("BAD APPLE!") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("BAD APPLE!") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002662:	230f      	movs	r3, #15
 8002664:	9303      	str	r3, [sp, #12]
 8002666:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800266a:	9302      	str	r3, [sp, #8]
 800266c:	4b50      	ldr	r3, [pc, #320]	@ (80027b0 <System_UI_Loop+0x280>)
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	4b5d      	ldr	r3, [pc, #372]	@ (80027e8 <System_UI_Loop+0x2b8>)
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	4b4e      	ldr	r3, [pc, #312]	@ (80027b0 <System_UI_Loop+0x280>)
 8002676:	4a5c      	ldr	r2, [pc, #368]	@ (80027e8 <System_UI_Loop+0x2b8>)
 8002678:	495c      	ldr	r1, [pc, #368]	@ (80027ec <System_UI_Loop+0x2bc>)
 800267a:	484f      	ldr	r0, [pc, #316]	@ (80027b8 <System_UI_Loop+0x288>)
 800267c:	f002 fe47 	bl	800530e <OLED_MoveObject>

        OLED_MoveObject(&g_Title_AnimationManager, "Show FPS?", (OLED_WIDTH - strlen("Show FPS?") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Show FPS?") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002680:	230f      	movs	r3, #15
 8002682:	9303      	str	r3, [sp, #12]
 8002684:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002688:	9302      	str	r3, [sp, #8]
 800268a:	4b49      	ldr	r3, [pc, #292]	@ (80027b0 <System_UI_Loop+0x280>)
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	4b50      	ldr	r3, [pc, #320]	@ (80027d0 <System_UI_Loop+0x2a0>)
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	4b47      	ldr	r3, [pc, #284]	@ (80027b0 <System_UI_Loop+0x280>)
 8002694:	4a4e      	ldr	r2, [pc, #312]	@ (80027d0 <System_UI_Loop+0x2a0>)
 8002696:	4956      	ldr	r1, [pc, #344]	@ (80027f0 <System_UI_Loop+0x2c0>)
 8002698:	4847      	ldr	r0, [pc, #284]	@ (80027b8 <System_UI_Loop+0x288>)
 800269a:	f002 fe38 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "Adjust Lightness", (OLED_WIDTH - strlen("Adjust Lightness") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Adjust Lightness") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 800269e:	230f      	movs	r3, #15
 80026a0:	9303      	str	r3, [sp, #12]
 80026a2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80026a6:	9302      	str	r3, [sp, #8]
 80026a8:	4b41      	ldr	r3, [pc, #260]	@ (80027b0 <System_UI_Loop+0x280>)
 80026aa:	9301      	str	r3, [sp, #4]
 80026ac:	f04f 4384 	mov.w	r3, #1107296256	@ 0x42000000
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	4b3f      	ldr	r3, [pc, #252]	@ (80027b0 <System_UI_Loop+0x280>)
 80026b4:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 80026b8:	494e      	ldr	r1, [pc, #312]	@ (80027f4 <System_UI_Loop+0x2c4>)
 80026ba:	483f      	ldr	r0, [pc, #252]	@ (80027b8 <System_UI_Loop+0x288>)
 80026bc:	f002 fe27 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "UnikoZera!", (OLED_WIDTH - strlen("UnikoZera!") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("UnikoZera!") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 80026c0:	230f      	movs	r3, #15
 80026c2:	9303      	str	r3, [sp, #12]
 80026c4:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80026c8:	9302      	str	r3, [sp, #8]
 80026ca:	4b39      	ldr	r3, [pc, #228]	@ (80027b0 <System_UI_Loop+0x280>)
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	4b46      	ldr	r3, [pc, #280]	@ (80027e8 <System_UI_Loop+0x2b8>)
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	4b37      	ldr	r3, [pc, #220]	@ (80027b0 <System_UI_Loop+0x280>)
 80026d4:	4a44      	ldr	r2, [pc, #272]	@ (80027e8 <System_UI_Loop+0x2b8>)
 80026d6:	4948      	ldr	r1, [pc, #288]	@ (80027f8 <System_UI_Loop+0x2c8>)
 80026d8:	4837      	ldr	r0, [pc, #220]	@ (80027b8 <System_UI_Loop+0x288>)
 80026da:	f002 fe18 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "https://github.com/UnikoZera", (OLED_WIDTH - strlen("https://github.com/UnikoZera") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("https://github.com/UnikoZera") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 80026de:	230f      	movs	r3, #15
 80026e0:	9303      	str	r3, [sp, #12]
 80026e2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80026e6:	9302      	str	r3, [sp, #8]
 80026e8:	4b31      	ldr	r3, [pc, #196]	@ (80027b0 <System_UI_Loop+0x280>)
 80026ea:	9301      	str	r3, [sp, #4]
 80026ec:	f04f 439f 	mov.w	r3, #1333788672	@ 0x4f800000
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	4b2f      	ldr	r3, [pc, #188]	@ (80027b0 <System_UI_Loop+0x280>)
 80026f4:	f04f 429f 	mov.w	r2, #1333788672	@ 0x4f800000
 80026f8:	4940      	ldr	r1, [pc, #256]	@ (80027fc <System_UI_Loop+0x2cc>)
 80026fa:	482f      	ldr	r0, [pc, #188]	@ (80027b8 <System_UI_Loop+0x288>)
 80026fc:	f002 fe07 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "3864437775@qq.com", (OLED_WIDTH - strlen("3864437775@qq.com") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("3864437775@qq.com") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002700:	230f      	movs	r3, #15
 8002702:	9303      	str	r3, [sp, #12]
 8002704:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002708:	9302      	str	r3, [sp, #8]
 800270a:	4b29      	ldr	r3, [pc, #164]	@ (80027b0 <System_UI_Loop+0x280>)
 800270c:	9301      	str	r3, [sp, #4]
 800270e:	4b3c      	ldr	r3, [pc, #240]	@ (8002800 <System_UI_Loop+0x2d0>)
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	4b27      	ldr	r3, [pc, #156]	@ (80027b0 <System_UI_Loop+0x280>)
 8002714:	4a3a      	ldr	r2, [pc, #232]	@ (8002800 <System_UI_Loop+0x2d0>)
 8002716:	493b      	ldr	r1, [pc, #236]	@ (8002804 <System_UI_Loop+0x2d4>)
 8002718:	4827      	ldr	r0, [pc, #156]	@ (80027b8 <System_UI_Loop+0x288>)
 800271a:	f002 fdf8 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "https://space.bilibili.com/3546696818624992", (OLED_WIDTH - strlen("https://space.bilibili.com/3546696818624992") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("https://space.bilibili.com/3546696818624992") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 800271e:	230f      	movs	r3, #15
 8002720:	9303      	str	r3, [sp, #12]
 8002722:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002726:	9302      	str	r3, [sp, #8]
 8002728:	4b21      	ldr	r3, [pc, #132]	@ (80027b0 <System_UI_Loop+0x280>)
 800272a:	9301      	str	r3, [sp, #4]
 800272c:	4b36      	ldr	r3, [pc, #216]	@ (8002808 <System_UI_Loop+0x2d8>)
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	4b1f      	ldr	r3, [pc, #124]	@ (80027b0 <System_UI_Loop+0x280>)
 8002732:	4a35      	ldr	r2, [pc, #212]	@ (8002808 <System_UI_Loop+0x2d8>)
 8002734:	4935      	ldr	r1, [pc, #212]	@ (800280c <System_UI_Loop+0x2dc>)
 8002736:	4820      	ldr	r0, [pc, #128]	@ (80027b8 <System_UI_Loop+0x288>)
 8002738:	f002 fde9 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "Let's Visit in GITHUB!", (OLED_WIDTH - strlen("Let's Visit in GITHUB!") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Let's Visit in GITHUB!") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 800273c:	230f      	movs	r3, #15
 800273e:	9303      	str	r3, [sp, #12]
 8002740:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002744:	9302      	str	r3, [sp, #8]
 8002746:	4b1a      	ldr	r3, [pc, #104]	@ (80027b0 <System_UI_Loop+0x280>)
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	f04f 439f 	mov.w	r3, #1333788672	@ 0x4f800000
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	4b17      	ldr	r3, [pc, #92]	@ (80027b0 <System_UI_Loop+0x280>)
 8002752:	f04f 429f 	mov.w	r2, #1333788672	@ 0x4f800000
 8002756:	492e      	ldr	r1, [pc, #184]	@ (8002810 <System_UI_Loop+0x2e0>)
 8002758:	4817      	ldr	r0, [pc, #92]	@ (80027b8 <System_UI_Loop+0x288>)
 800275a:	f002 fdd8 	bl	800530e <OLED_MoveObject>

#pragma endregion 标题栏

#pragma region 游戏栏
        OLED_MoveObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 800275e:	230f      	movs	r3, #15
 8002760:	9303      	str	r3, [sp, #12]
 8002762:	2301      	movs	r3, #1
 8002764:	9302      	str	r3, [sp, #8]
 8002766:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	4b29      	ldr	r3, [pc, #164]	@ (8002814 <System_UI_Loop+0x2e4>)
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002774:	4a27      	ldr	r2, [pc, #156]	@ (8002814 <System_UI_Loop+0x2e4>)
 8002776:	4928      	ldr	r1, [pc, #160]	@ (8002818 <System_UI_Loop+0x2e8>)
 8002778:	4828      	ldr	r0, [pc, #160]	@ (800281c <System_UI_Loop+0x2ec>)
 800277a:	f002 fdc8 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 800277e:	230f      	movs	r3, #15
 8002780:	9303      	str	r3, [sp, #12]
 8002782:	2301      	movs	r3, #1
 8002784:	9302      	str	r3, [sp, #8]
 8002786:	4b26      	ldr	r3, [pc, #152]	@ (8002820 <System_UI_Loop+0x2f0>)
 8002788:	9301      	str	r3, [sp, #4]
 800278a:	4b22      	ldr	r3, [pc, #136]	@ (8002814 <System_UI_Loop+0x2e4>)
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	4b24      	ldr	r3, [pc, #144]	@ (8002820 <System_UI_Loop+0x2f0>)
 8002790:	4a20      	ldr	r2, [pc, #128]	@ (8002814 <System_UI_Loop+0x2e4>)
 8002792:	4924      	ldr	r1, [pc, #144]	@ (8002824 <System_UI_Loop+0x2f4>)
 8002794:	4821      	ldr	r0, [pc, #132]	@ (800281c <System_UI_Loop+0x2ec>)
 8002796:	f002 fdba 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, TweenStyle);
 800279a:	230f      	movs	r3, #15
 800279c:	9303      	str	r3, [sp, #12]
 800279e:	2301      	movs	r3, #1
 80027a0:	9302      	str	r3, [sp, #8]
 80027a2:	4b21      	ldr	r3, [pc, #132]	@ (8002828 <System_UI_Loop+0x2f8>)
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	e041      	b.n	800282c <System_UI_Loop+0x2fc>
 80027a8:	20000003 	.word	0x20000003
 80027ac:	42480000 	.word	0x42480000
 80027b0:	c1200000 	.word	0xc1200000
 80027b4:	0800b024 	.word	0x0800b024
 80027b8:	200032e4 	.word	0x200032e4
 80027bc:	0800b030 	.word	0x0800b030
 80027c0:	42300000 	.word	0x42300000
 80027c4:	0800b03c 	.word	0x0800b03c
 80027c8:	42600000 	.word	0x42600000
 80027cc:	0800b048 	.word	0x0800b048
 80027d0:	42940000 	.word	0x42940000
 80027d4:	0800b058 	.word	0x0800b058
 80027d8:	0800b064 	.word	0x0800b064
 80027dc:	0800b070 	.word	0x0800b070
 80027e0:	0800b07c 	.word	0x0800b07c
 80027e4:	0800b088 	.word	0x0800b088
 80027e8:	42880000 	.word	0x42880000
 80027ec:	0800b098 	.word	0x0800b098
 80027f0:	0800b0a4 	.word	0x0800b0a4
 80027f4:	0800b0b0 	.word	0x0800b0b0
 80027f8:	0800b0c4 	.word	0x0800b0c4
 80027fc:	0800b0d0 	.word	0x0800b0d0
 8002800:	41d00000 	.word	0x41d00000
 8002804:	0800b0f0 	.word	0x0800b0f0
 8002808:	4f7fffff 	.word	0x4f7fffff
 800280c:	0800b104 	.word	0x0800b104
 8002810:	0800b130 	.word	0x0800b130
 8002814:	c2b40000 	.word	0xc2b40000
 8002818:	0800b148 	.word	0x0800b148
 800281c:	20001520 	.word	0x20001520
 8002820:	41e80000 	.word	0x41e80000
 8002824:	0800b150 	.word	0x0800b150
 8002828:	42280000 	.word	0x42280000
 800282c:	4ba3      	ldr	r3, [pc, #652]	@ (8002abc <System_UI_Loop+0x58c>)
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	4ba3      	ldr	r3, [pc, #652]	@ (8002ac0 <System_UI_Loop+0x590>)
 8002832:	4aa2      	ldr	r2, [pc, #648]	@ (8002abc <System_UI_Loop+0x58c>)
 8002834:	49a3      	ldr	r1, [pc, #652]	@ (8002ac4 <System_UI_Loop+0x594>)
 8002836:	48a4      	ldr	r0, [pc, #656]	@ (8002ac8 <System_UI_Loop+0x598>)
 8002838:	f002 fd69 	bl	800530e <OLED_MoveObject>
#pragma endregion 游戏栏

#pragma region 工具栏
        OLED_MoveObject(&Tools_AnimationManager, "Calculator", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 800283c:	230f      	movs	r3, #15
 800283e:	9303      	str	r3, [sp, #12]
 8002840:	2301      	movs	r3, #1
 8002842:	9302      	str	r3, [sp, #8]
 8002844:	4ba1      	ldr	r3, [pc, #644]	@ (8002acc <System_UI_Loop+0x59c>)
 8002846:	9301      	str	r3, [sp, #4]
 8002848:	4b9c      	ldr	r3, [pc, #624]	@ (8002abc <System_UI_Loop+0x58c>)
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002850:	4a9a      	ldr	r2, [pc, #616]	@ (8002abc <System_UI_Loop+0x58c>)
 8002852:	499f      	ldr	r1, [pc, #636]	@ (8002ad0 <System_UI_Loop+0x5a0>)
 8002854:	489f      	ldr	r0, [pc, #636]	@ (8002ad4 <System_UI_Loop+0x5a4>)
 8002856:	f002 fd5a 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&Tools_AnimationManager, "VideoPlayer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 800285a:	230f      	movs	r3, #15
 800285c:	9303      	str	r3, [sp, #12]
 800285e:	2301      	movs	r3, #1
 8002860:	9302      	str	r3, [sp, #8]
 8002862:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002866:	9301      	str	r3, [sp, #4]
 8002868:	4b94      	ldr	r3, [pc, #592]	@ (8002abc <System_UI_Loop+0x58c>)
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	4b97      	ldr	r3, [pc, #604]	@ (8002acc <System_UI_Loop+0x59c>)
 800286e:	4a93      	ldr	r2, [pc, #588]	@ (8002abc <System_UI_Loop+0x58c>)
 8002870:	4999      	ldr	r1, [pc, #612]	@ (8002ad8 <System_UI_Loop+0x5a8>)
 8002872:	4898      	ldr	r0, [pc, #608]	@ (8002ad4 <System_UI_Loop+0x5a4>)
 8002874:	f002 fd4b 	bl	800530e <OLED_MoveObject>

#pragma endregion 工具栏

#pragma region 状态栏 //这里我想做成一个界面就好,不要选项
        OLED_MoveObject(&Status_AnimationManager, "RunningTime", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 8002878:	230f      	movs	r3, #15
 800287a:	9303      	str	r3, [sp, #12]
 800287c:	2301      	movs	r3, #1
 800287e:	9302      	str	r3, [sp, #8]
 8002880:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	4b8d      	ldr	r3, [pc, #564]	@ (8002abc <System_UI_Loop+0x58c>)
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800288e:	4a8b      	ldr	r2, [pc, #556]	@ (8002abc <System_UI_Loop+0x58c>)
 8002890:	4992      	ldr	r1, [pc, #584]	@ (8002adc <System_UI_Loop+0x5ac>)
 8002892:	4893      	ldr	r0, [pc, #588]	@ (8002ae0 <System_UI_Loop+0x5b0>)
 8002894:	f002 fd3b 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&Status_AnimationManager, "Status", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 8002898:	230f      	movs	r3, #15
 800289a:	9303      	str	r3, [sp, #12]
 800289c:	2301      	movs	r3, #1
 800289e:	9302      	str	r3, [sp, #8]
 80028a0:	4b8a      	ldr	r3, [pc, #552]	@ (8002acc <System_UI_Loop+0x59c>)
 80028a2:	9301      	str	r3, [sp, #4]
 80028a4:	4b85      	ldr	r3, [pc, #532]	@ (8002abc <System_UI_Loop+0x58c>)
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	4b88      	ldr	r3, [pc, #544]	@ (8002acc <System_UI_Loop+0x59c>)
 80028aa:	4a84      	ldr	r2, [pc, #528]	@ (8002abc <System_UI_Loop+0x58c>)
 80028ac:	498d      	ldr	r1, [pc, #564]	@ (8002ae4 <System_UI_Loop+0x5b4>)
 80028ae:	488c      	ldr	r0, [pc, #560]	@ (8002ae0 <System_UI_Loop+0x5b0>)
 80028b0:	f002 fd2d 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&Status_AnimationManager, "UserManul", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 80028b4:	230f      	movs	r3, #15
 80028b6:	9303      	str	r3, [sp, #12]
 80028b8:	2301      	movs	r3, #1
 80028ba:	9302      	str	r3, [sp, #8]
 80028bc:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80028c0:	9301      	str	r3, [sp, #4]
 80028c2:	4b7e      	ldr	r3, [pc, #504]	@ (8002abc <System_UI_Loop+0x58c>)
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80028ca:	4a7c      	ldr	r2, [pc, #496]	@ (8002abc <System_UI_Loop+0x58c>)
 80028cc:	4986      	ldr	r1, [pc, #536]	@ (8002ae8 <System_UI_Loop+0x5b8>)
 80028ce:	4884      	ldr	r0, [pc, #528]	@ (8002ae0 <System_UI_Loop+0x5b0>)
 80028d0:	f002 fd1d 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&Status_AnimationManager, "ExitMessage", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 80028d4:	230f      	movs	r3, #15
 80028d6:	9303      	str	r3, [sp, #12]
 80028d8:	2301      	movs	r3, #1
 80028da:	9302      	str	r3, [sp, #8]
 80028dc:	4b7b      	ldr	r3, [pc, #492]	@ (8002acc <System_UI_Loop+0x59c>)
 80028de:	9301      	str	r3, [sp, #4]
 80028e0:	4b76      	ldr	r3, [pc, #472]	@ (8002abc <System_UI_Loop+0x58c>)
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	4b81      	ldr	r3, [pc, #516]	@ (8002aec <System_UI_Loop+0x5bc>)
 80028e6:	4a75      	ldr	r2, [pc, #468]	@ (8002abc <System_UI_Loop+0x58c>)
 80028e8:	4981      	ldr	r1, [pc, #516]	@ (8002af0 <System_UI_Loop+0x5c0>)
 80028ea:	487d      	ldr	r0, [pc, #500]	@ (8002ae0 <System_UI_Loop+0x5b0>)
 80028ec:	f002 fd0f 	bl	800530e <OLED_MoveObject>

#pragma endregion 状态栏

#pragma region 设置栏
        OLED_MoveObject(&Settings_AnimationManager, "ShowFPS", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 80028f0:	230f      	movs	r3, #15
 80028f2:	9303      	str	r3, [sp, #12]
 80028f4:	2301      	movs	r3, #1
 80028f6:	9302      	str	r3, [sp, #8]
 80028f8:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80028fc:	9301      	str	r3, [sp, #4]
 80028fe:	4b6f      	ldr	r3, [pc, #444]	@ (8002abc <System_UI_Loop+0x58c>)
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002906:	4a6d      	ldr	r2, [pc, #436]	@ (8002abc <System_UI_Loop+0x58c>)
 8002908:	497a      	ldr	r1, [pc, #488]	@ (8002af4 <System_UI_Loop+0x5c4>)
 800290a:	487b      	ldr	r0, [pc, #492]	@ (8002af8 <System_UI_Loop+0x5c8>)
 800290c:	f002 fcff 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&Settings_AnimationManager, "Lightness", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 8002910:	230f      	movs	r3, #15
 8002912:	9303      	str	r3, [sp, #12]
 8002914:	2301      	movs	r3, #1
 8002916:	9302      	str	r3, [sp, #8]
 8002918:	4b6c      	ldr	r3, [pc, #432]	@ (8002acc <System_UI_Loop+0x59c>)
 800291a:	9301      	str	r3, [sp, #4]
 800291c:	4b67      	ldr	r3, [pc, #412]	@ (8002abc <System_UI_Loop+0x58c>)
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	4b6a      	ldr	r3, [pc, #424]	@ (8002acc <System_UI_Loop+0x59c>)
 8002922:	4a66      	ldr	r2, [pc, #408]	@ (8002abc <System_UI_Loop+0x58c>)
 8002924:	4975      	ldr	r1, [pc, #468]	@ (8002afc <System_UI_Loop+0x5cc>)
 8002926:	4874      	ldr	r0, [pc, #464]	@ (8002af8 <System_UI_Loop+0x5c8>)
 8002928:	f002 fcf1 	bl	800530e <OLED_MoveObject>
#pragma endregion 设置栏

#pragma region 关于栏
        OLED_MoveObject(&About_AnimationManager, "Developer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 800292c:	230f      	movs	r3, #15
 800292e:	9303      	str	r3, [sp, #12]
 8002930:	2301      	movs	r3, #1
 8002932:	9302      	str	r3, [sp, #8]
 8002934:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	4b60      	ldr	r3, [pc, #384]	@ (8002abc <System_UI_Loop+0x58c>)
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002942:	4a5e      	ldr	r2, [pc, #376]	@ (8002abc <System_UI_Loop+0x58c>)
 8002944:	496e      	ldr	r1, [pc, #440]	@ (8002b00 <System_UI_Loop+0x5d0>)
 8002946:	486f      	ldr	r0, [pc, #444]	@ (8002b04 <System_UI_Loop+0x5d4>)
 8002948:	f002 fce1 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&About_AnimationManager, "Github", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 800294c:	230f      	movs	r3, #15
 800294e:	9303      	str	r3, [sp, #12]
 8002950:	2301      	movs	r3, #1
 8002952:	9302      	str	r3, [sp, #8]
 8002954:	4b5d      	ldr	r3, [pc, #372]	@ (8002acc <System_UI_Loop+0x59c>)
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	4b58      	ldr	r3, [pc, #352]	@ (8002abc <System_UI_Loop+0x58c>)
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	4b5b      	ldr	r3, [pc, #364]	@ (8002acc <System_UI_Loop+0x59c>)
 800295e:	4a57      	ldr	r2, [pc, #348]	@ (8002abc <System_UI_Loop+0x58c>)
 8002960:	4969      	ldr	r1, [pc, #420]	@ (8002b08 <System_UI_Loop+0x5d8>)
 8002962:	4868      	ldr	r0, [pc, #416]	@ (8002b04 <System_UI_Loop+0x5d4>)
 8002964:	f002 fcd3 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&About_AnimationManager, "Email", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, TweenStyle);
 8002968:	230f      	movs	r3, #15
 800296a:	9303      	str	r3, [sp, #12]
 800296c:	2301      	movs	r3, #1
 800296e:	9302      	str	r3, [sp, #8]
 8002970:	4b53      	ldr	r3, [pc, #332]	@ (8002ac0 <System_UI_Loop+0x590>)
 8002972:	9301      	str	r3, [sp, #4]
 8002974:	4b51      	ldr	r3, [pc, #324]	@ (8002abc <System_UI_Loop+0x58c>)
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	4b51      	ldr	r3, [pc, #324]	@ (8002ac0 <System_UI_Loop+0x590>)
 800297a:	4a50      	ldr	r2, [pc, #320]	@ (8002abc <System_UI_Loop+0x58c>)
 800297c:	4963      	ldr	r1, [pc, #396]	@ (8002b0c <System_UI_Loop+0x5dc>)
 800297e:	4861      	ldr	r0, [pc, #388]	@ (8002b04 <System_UI_Loop+0x5d4>)
 8002980:	f002 fcc5 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&About_AnimationManager, "Donate", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, 1, TweenStyle);
 8002984:	230f      	movs	r3, #15
 8002986:	9303      	str	r3, [sp, #12]
 8002988:	2301      	movs	r3, #1
 800298a:	9302      	str	r3, [sp, #8]
 800298c:	4b57      	ldr	r3, [pc, #348]	@ (8002aec <System_UI_Loop+0x5bc>)
 800298e:	9301      	str	r3, [sp, #4]
 8002990:	4b4a      	ldr	r3, [pc, #296]	@ (8002abc <System_UI_Loop+0x58c>)
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	4b55      	ldr	r3, [pc, #340]	@ (8002aec <System_UI_Loop+0x5bc>)
 8002996:	4a49      	ldr	r2, [pc, #292]	@ (8002abc <System_UI_Loop+0x58c>)
 8002998:	495d      	ldr	r1, [pc, #372]	@ (8002b10 <System_UI_Loop+0x5e0>)
 800299a:	485a      	ldr	r0, [pc, #360]	@ (8002b04 <System_UI_Loop+0x5d4>)
 800299c:	f002 fcb7 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&About_AnimationManager, "More", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, 1, TweenStyle);
 80029a0:	230f      	movs	r3, #15
 80029a2:	9303      	str	r3, [sp, #12]
 80029a4:	2301      	movs	r3, #1
 80029a6:	9302      	str	r3, [sp, #8]
 80029a8:	4b5a      	ldr	r3, [pc, #360]	@ (8002b14 <System_UI_Loop+0x5e4>)
 80029aa:	9301      	str	r3, [sp, #4]
 80029ac:	4b43      	ldr	r3, [pc, #268]	@ (8002abc <System_UI_Loop+0x58c>)
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	4b58      	ldr	r3, [pc, #352]	@ (8002b14 <System_UI_Loop+0x5e4>)
 80029b2:	4a42      	ldr	r2, [pc, #264]	@ (8002abc <System_UI_Loop+0x58c>)
 80029b4:	4958      	ldr	r1, [pc, #352]	@ (8002b18 <System_UI_Loop+0x5e8>)
 80029b6:	4853      	ldr	r0, [pc, #332]	@ (8002b04 <System_UI_Loop+0x5d4>)
 80029b8:	f002 fca9 	bl	800530e <OLED_MoveObject>
#pragma endregion 关于栏

#pragma region 主菜单动画
        OLED_MoveObject(&g_AnimationManager, "TitleBGScale", 0, 8, strlen("Epicful Games") * 6 + 3, 8, StartTweenTime, EASE_INOUT_CUBIC);
 80029bc:	2306      	movs	r3, #6
 80029be:	9303      	str	r3, [sp, #12]
 80029c0:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80029c4:	9302      	str	r3, [sp, #8]
 80029c6:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80029ca:	9301      	str	r3, [sp, #4]
 80029cc:	4b53      	ldr	r3, [pc, #332]	@ (8002b1c <System_UI_Loop+0x5ec>)
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	4951      	ldr	r1, [pc, #324]	@ (8002b20 <System_UI_Loop+0x5f0>)
 80029da:	483b      	ldr	r0, [pc, #236]	@ (8002ac8 <System_UI_Loop+0x598>)
 80029dc:	f002 fc97 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "Cursor", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * menuSelection, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * menuSelection, StartTweenTime, TweenStyle);
 80029e0:	4b50      	ldr	r3, [pc, #320]	@ (8002b24 <System_UI_Loop+0x5f4>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	3303      	adds	r3, #3
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fd fc76 	bl	80002e4 <__aeabi_i2f>
 80029f8:	4604      	mov	r4, r0
 80029fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002b24 <System_UI_Loop+0x5f4>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	4613      	mov	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	3303      	adds	r3, #3
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fc69 	bl	80002e4 <__aeabi_i2f>
 8002a12:	4603      	mov	r3, r0
 8002a14:	220f      	movs	r2, #15
 8002a16:	9203      	str	r2, [sp, #12]
 8002a18:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8002a1c:	9202      	str	r2, [sp, #8]
 8002a1e:	9301      	str	r3, [sp, #4]
 8002a20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	4623      	mov	r3, r4
 8002a28:	4a24      	ldr	r2, [pc, #144]	@ (8002abc <System_UI_Loop+0x58c>)
 8002a2a:	493f      	ldr	r1, [pc, #252]	@ (8002b28 <System_UI_Loop+0x5f8>)
 8002a2c:	4826      	ldr	r0, [pc, #152]	@ (8002ac8 <System_UI_Loop+0x598>)
 8002a2e:	f002 fc6e 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "CursorScale", 0, 10, strlen("Games") * 6 + 3, 10, StartTweenTime, TweenStyle);
 8002a32:	230f      	movs	r3, #15
 8002a34:	9303      	str	r3, [sp, #12]
 8002a36:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002a3a:	9302      	str	r3, [sp, #8]
 8002a3c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b2c <System_UI_Loop+0x5fc>)
 8002a3e:	9301      	str	r3, [sp, #4]
 8002a40:	4b3b      	ldr	r3, [pc, #236]	@ (8002b30 <System_UI_Loop+0x600>)
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	4b39      	ldr	r3, [pc, #228]	@ (8002b2c <System_UI_Loop+0x5fc>)
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	493a      	ldr	r1, [pc, #232]	@ (8002b34 <System_UI_Loop+0x604>)
 8002a4c:	481e      	ldr	r0, [pc, #120]	@ (8002ac8 <System_UI_Loop+0x598>)
 8002a4e:	f002 fc5e 	bl	800530e <OLED_MoveObject>
        OLED_MoveObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, StartTweenTime, TweenStyle);
 8002a52:	230f      	movs	r3, #15
 8002a54:	9303      	str	r3, [sp, #12]
 8002a56:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002a5a:	9302      	str	r3, [sp, #8]
 8002a5c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002a60:	9301      	str	r3, [sp, #4]
 8002a62:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002a6c:	4a13      	ldr	r2, [pc, #76]	@ (8002abc <System_UI_Loop+0x58c>)
 8002a6e:	4932      	ldr	r1, [pc, #200]	@ (8002b38 <System_UI_Loop+0x608>)
 8002a70:	4832      	ldr	r0, [pc, #200]	@ (8002b3c <System_UI_Loop+0x60c>)
 8002a72:	f002 fc4c 	bl	800530e <OLED_MoveObject>
        HAL_Delay(100);
 8002a76:	2064      	movs	r0, #100	@ 0x64
 8002a78:	f003 f9ae 	bl	8005dd8 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, StartTweenTime, TweenStyle);
 8002a7c:	230f      	movs	r3, #15
 8002a7e:	9303      	str	r3, [sp, #12]
 8002a80:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002a84:	9302      	str	r3, [sp, #8]
 8002a86:	4b11      	ldr	r3, [pc, #68]	@ (8002acc <System_UI_Loop+0x59c>)
 8002a88:	9301      	str	r3, [sp, #4]
 8002a8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	4b0e      	ldr	r3, [pc, #56]	@ (8002acc <System_UI_Loop+0x59c>)
 8002a92:	4a0a      	ldr	r2, [pc, #40]	@ (8002abc <System_UI_Loop+0x58c>)
 8002a94:	492a      	ldr	r1, [pc, #168]	@ (8002b40 <System_UI_Loop+0x610>)
 8002a96:	4829      	ldr	r0, [pc, #164]	@ (8002b3c <System_UI_Loop+0x60c>)
 8002a98:	f002 fc39 	bl	800530e <OLED_MoveObject>
        HAL_Delay(100);
 8002a9c:	2064      	movs	r0, #100	@ 0x64
 8002a9e:	f003 f99b 	bl	8005dd8 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, StartTweenTime, TweenStyle);
 8002aa2:	230f      	movs	r3, #15
 8002aa4:	9303      	str	r3, [sp, #12]
 8002aa6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002aaa:	9302      	str	r3, [sp, #8]
 8002aac:	4b04      	ldr	r3, [pc, #16]	@ (8002ac0 <System_UI_Loop+0x590>)
 8002aae:	9301      	str	r3, [sp, #4]
 8002ab0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	4b02      	ldr	r3, [pc, #8]	@ (8002ac0 <System_UI_Loop+0x590>)
 8002ab8:	4a00      	ldr	r2, [pc, #0]	@ (8002abc <System_UI_Loop+0x58c>)
 8002aba:	e043      	b.n	8002b44 <System_UI_Loop+0x614>
 8002abc:	c2b40000 	.word	0xc2b40000
 8002ac0:	42280000 	.word	0x42280000
 8002ac4:	0800b158 	.word	0x0800b158
 8002ac8:	200038d8 	.word	0x200038d8
 8002acc:	41e80000 	.word	0x41e80000
 8002ad0:	0800b164 	.word	0x0800b164
 8002ad4:	20001b14 	.word	0x20001b14
 8002ad8:	0800b170 	.word	0x0800b170
 8002adc:	0800b17c 	.word	0x0800b17c
 8002ae0:	20002cf0 	.word	0x20002cf0
 8002ae4:	0800b188 	.word	0x0800b188
 8002ae8:	0800b190 	.word	0x0800b190
 8002aec:	425c0000 	.word	0x425c0000
 8002af0:	0800b19c 	.word	0x0800b19c
 8002af4:	0800b1a8 	.word	0x0800b1a8
 8002af8:	20002108 	.word	0x20002108
 8002afc:	0800b1b0 	.word	0x0800b1b0
 8002b00:	0800b1bc 	.word	0x0800b1bc
 8002b04:	200026fc 	.word	0x200026fc
 8002b08:	0800b1c8 	.word	0x0800b1c8
 8002b0c:	0800b1d0 	.word	0x0800b1d0
 8002b10:	0800b1d8 	.word	0x0800b1d8
 8002b14:	42880000 	.word	0x42880000
 8002b18:	0800b1e0 	.word	0x0800b1e0
 8002b1c:	42a20000 	.word	0x42a20000
 8002b20:	0800b1e8 	.word	0x0800b1e8
 8002b24:	20000002 	.word	0x20000002
 8002b28:	0800b1f8 	.word	0x0800b1f8
 8002b2c:	41200000 	.word	0x41200000
 8002b30:	42040000 	.word	0x42040000
 8002b34:	0800b200 	.word	0x0800b200
 8002b38:	0800b20c 	.word	0x0800b20c
 8002b3c:	20000f2c 	.word	0x20000f2c
 8002b40:	0800b218 	.word	0x0800b218
 8002b44:	4980      	ldr	r1, [pc, #512]	@ (8002d48 <System_UI_Loop+0x818>)
 8002b46:	4881      	ldr	r0, [pc, #516]	@ (8002d4c <System_UI_Loop+0x81c>)
 8002b48:	f002 fbe1 	bl	800530e <OLED_MoveObject>
        HAL_Delay(100);
 8002b4c:	2064      	movs	r0, #100	@ 0x64
 8002b4e:	f003 f943 	bl	8005dd8 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, StartTweenTime, TweenStyle);
 8002b52:	230f      	movs	r3, #15
 8002b54:	9303      	str	r3, [sp, #12]
 8002b56:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002b5a:	9302      	str	r3, [sp, #8]
 8002b5c:	4b7c      	ldr	r3, [pc, #496]	@ (8002d50 <System_UI_Loop+0x820>)
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	4b7a      	ldr	r3, [pc, #488]	@ (8002d50 <System_UI_Loop+0x820>)
 8002b68:	4a7a      	ldr	r2, [pc, #488]	@ (8002d54 <System_UI_Loop+0x824>)
 8002b6a:	497b      	ldr	r1, [pc, #492]	@ (8002d58 <System_UI_Loop+0x828>)
 8002b6c:	4877      	ldr	r0, [pc, #476]	@ (8002d4c <System_UI_Loop+0x81c>)
 8002b6e:	f002 fbce 	bl	800530e <OLED_MoveObject>
        HAL_Delay(100);
 8002b72:	2064      	movs	r0, #100	@ 0x64
 8002b74:	f003 f930 	bl	8005dd8 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, StartTweenTime, TweenStyle);
 8002b78:	230f      	movs	r3, #15
 8002b7a:	9303      	str	r3, [sp, #12]
 8002b7c:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002b80:	9302      	str	r3, [sp, #8]
 8002b82:	4b76      	ldr	r3, [pc, #472]	@ (8002d5c <System_UI_Loop+0x82c>)
 8002b84:	9301      	str	r3, [sp, #4]
 8002b86:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	4b73      	ldr	r3, [pc, #460]	@ (8002d5c <System_UI_Loop+0x82c>)
 8002b8e:	4a71      	ldr	r2, [pc, #452]	@ (8002d54 <System_UI_Loop+0x824>)
 8002b90:	4973      	ldr	r1, [pc, #460]	@ (8002d60 <System_UI_Loop+0x830>)
 8002b92:	486e      	ldr	r0, [pc, #440]	@ (8002d4c <System_UI_Loop+0x81c>)
 8002b94:	f002 fbbb 	bl	800530e <OLED_MoveObject>
#pragma endregion 主菜单动画

        preMenuSelection = menuSelection;
 8002b98:	4b72      	ldr	r3, [pc, #456]	@ (8002d64 <System_UI_Loop+0x834>)
 8002b9a:	781a      	ldrb	r2, [r3, #0]
 8002b9c:	4b72      	ldr	r3, [pc, #456]	@ (8002d68 <System_UI_Loop+0x838>)
 8002b9e:	701a      	strb	r2, [r3, #0]
        isFirstRun = false;
 8002ba0:	4b72      	ldr	r3, [pc, #456]	@ (8002d6c <System_UI_Loop+0x83c>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
        OLED_UpdateDisplayVSync();
 8002ba6:	f7ff f839 	bl	8001c1c <OLED_UpdateDisplayVSync>
    }

#pragma region pager //翻页的函数

    if (menuRank == 1)
 8002baa:	4b71      	ldr	r3, [pc, #452]	@ (8002d70 <System_UI_Loop+0x840>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d178      	bne.n	8002ca4 <System_UI_Loop+0x774>
    {
        OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 200, EASE_IN_CIRC);
 8002bb2:	4b6c      	ldr	r3, [pc, #432]	@ (8002d64 <System_UI_Loop+0x834>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	f1c3 0202 	rsb	r2, r3, #2
 8002bba:	4613      	mov	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3303      	adds	r3, #3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fd fb8c 	bl	80002e4 <__aeabi_i2f>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	220a      	movs	r2, #10
 8002bd0:	9201      	str	r2, [sp, #4]
 8002bd2:	22c8      	movs	r2, #200	@ 0xc8
 8002bd4:	9200      	str	r2, [sp, #0]
 8002bd6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002bda:	4966      	ldr	r1, [pc, #408]	@ (8002d74 <System_UI_Loop+0x844>)
 8002bdc:	485b      	ldr	r0, [pc, #364]	@ (8002d4c <System_UI_Loop+0x81c>)
 8002bde:	f002 fc4d 	bl	800547c <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 200, EASE_IN_CIRC);
 8002be2:	4b60      	ldr	r3, [pc, #384]	@ (8002d64 <System_UI_Loop+0x834>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	f1c3 0203 	rsb	r2, r3, #3
 8002bea:	4613      	mov	r3, r2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4413      	add	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3303      	adds	r3, #3
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fd fb74 	bl	80002e4 <__aeabi_i2f>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	220a      	movs	r2, #10
 8002c00:	9201      	str	r2, [sp, #4]
 8002c02:	22c8      	movs	r2, #200	@ 0xc8
 8002c04:	9200      	str	r2, [sp, #0]
 8002c06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c0a:	495b      	ldr	r1, [pc, #364]	@ (8002d78 <System_UI_Loop+0x848>)
 8002c0c:	484f      	ldr	r0, [pc, #316]	@ (8002d4c <System_UI_Loop+0x81c>)
 8002c0e:	f002 fc35 	bl	800547c <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 200, EASE_IN_CIRC);
 8002c12:	4b54      	ldr	r3, [pc, #336]	@ (8002d64 <System_UI_Loop+0x834>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	f1c3 0204 	rsb	r2, r3, #4
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	3303      	adds	r3, #3
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fd fb5c 	bl	80002e4 <__aeabi_i2f>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	220a      	movs	r2, #10
 8002c30:	9201      	str	r2, [sp, #4]
 8002c32:	22c8      	movs	r2, #200	@ 0xc8
 8002c34:	9200      	str	r2, [sp, #0]
 8002c36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c3a:	4943      	ldr	r1, [pc, #268]	@ (8002d48 <System_UI_Loop+0x818>)
 8002c3c:	4843      	ldr	r0, [pc, #268]	@ (8002d4c <System_UI_Loop+0x81c>)
 8002c3e:	f002 fc1d 	bl	800547c <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), 200, EASE_IN_CIRC);
 8002c42:	4b48      	ldr	r3, [pc, #288]	@ (8002d64 <System_UI_Loop+0x834>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	f1c3 0205 	rsb	r2, r3, #5
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	3303      	adds	r3, #3
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fd fb44 	bl	80002e4 <__aeabi_i2f>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	220a      	movs	r2, #10
 8002c60:	9201      	str	r2, [sp, #4]
 8002c62:	22c8      	movs	r2, #200	@ 0xc8
 8002c64:	9200      	str	r2, [sp, #0]
 8002c66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c6a:	493b      	ldr	r1, [pc, #236]	@ (8002d58 <System_UI_Loop+0x828>)
 8002c6c:	4837      	ldr	r0, [pc, #220]	@ (8002d4c <System_UI_Loop+0x81c>)
 8002c6e:	f002 fc05 	bl	800547c <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), 200, EASE_IN_CIRC);
 8002c72:	4b3c      	ldr	r3, [pc, #240]	@ (8002d64 <System_UI_Loop+0x834>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	f1c3 0206 	rsb	r2, r3, #6
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	3303      	adds	r3, #3
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fb2c 	bl	80002e4 <__aeabi_i2f>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	220a      	movs	r2, #10
 8002c90:	9201      	str	r2, [sp, #4]
 8002c92:	22c8      	movs	r2, #200	@ 0xc8
 8002c94:	9200      	str	r2, [sp, #0]
 8002c96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c9a:	4931      	ldr	r1, [pc, #196]	@ (8002d60 <System_UI_Loop+0x830>)
 8002c9c:	482b      	ldr	r0, [pc, #172]	@ (8002d4c <System_UI_Loop+0x81c>)
 8002c9e:	f002 fbed 	bl	800547c <OLED_DoTweenObject>
 8002ca2:	e08a      	b.n	8002dba <System_UI_Loop+0x88a>
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_GAMES)
 8002ca4:	4b32      	ldr	r3, [pc, #200]	@ (8002d70 <System_UI_Loop+0x840>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	f040 8086 	bne.w	8002dba <System_UI_Loop+0x88a>
 8002cae:	4b33      	ldr	r3, [pc, #204]	@ (8002d7c <System_UI_Loop+0x84c>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b05      	cmp	r3, #5
 8002cb4:	d16e      	bne.n	8002d94 <System_UI_Loop+0x864>
    {
        OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 200, EASE_IN_CIRC);
 8002cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8002d64 <System_UI_Loop+0x834>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	f1c3 0202 	rsb	r2, r3, #2
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3303      	adds	r3, #3
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fd fb0a 	bl	80002e4 <__aeabi_i2f>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	220a      	movs	r2, #10
 8002cd4:	9201      	str	r2, [sp, #4]
 8002cd6:	22c8      	movs	r2, #200	@ 0xc8
 8002cd8:	9200      	str	r2, [sp, #0]
 8002cda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002cde:	4928      	ldr	r1, [pc, #160]	@ (8002d80 <System_UI_Loop+0x850>)
 8002ce0:	4828      	ldr	r0, [pc, #160]	@ (8002d84 <System_UI_Loop+0x854>)
 8002ce2:	f002 fbcb 	bl	800547c <OLED_DoTweenObject>
        OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 200, EASE_IN_CIRC);
 8002ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d64 <System_UI_Loop+0x834>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	f1c3 0203 	rsb	r2, r3, #3
 8002cee:	4613      	mov	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3303      	adds	r3, #3
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fd faf2 	bl	80002e4 <__aeabi_i2f>
 8002d00:	4603      	mov	r3, r0
 8002d02:	220a      	movs	r2, #10
 8002d04:	9201      	str	r2, [sp, #4]
 8002d06:	22c8      	movs	r2, #200	@ 0xc8
 8002d08:	9200      	str	r2, [sp, #0]
 8002d0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d0e:	491e      	ldr	r1, [pc, #120]	@ (8002d88 <System_UI_Loop+0x858>)
 8002d10:	481c      	ldr	r0, [pc, #112]	@ (8002d84 <System_UI_Loop+0x854>)
 8002d12:	f002 fbb3 	bl	800547c <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 200, EASE_IN_CIRC);
 8002d16:	4b13      	ldr	r3, [pc, #76]	@ (8002d64 <System_UI_Loop+0x834>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	f1c3 0204 	rsb	r2, r3, #4
 8002d1e:	4613      	mov	r3, r2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	3303      	adds	r3, #3
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fd fada 	bl	80002e4 <__aeabi_i2f>
 8002d30:	4603      	mov	r3, r0
 8002d32:	220a      	movs	r2, #10
 8002d34:	9201      	str	r2, [sp, #4]
 8002d36:	22c8      	movs	r2, #200	@ 0xc8
 8002d38:	9200      	str	r2, [sp, #0]
 8002d3a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d3e:	4913      	ldr	r1, [pc, #76]	@ (8002d8c <System_UI_Loop+0x85c>)
 8002d40:	4813      	ldr	r0, [pc, #76]	@ (8002d90 <System_UI_Loop+0x860>)
 8002d42:	f002 fb9b 	bl	800547c <OLED_DoTweenObject>
 8002d46:	e038      	b.n	8002dba <System_UI_Loop+0x88a>
 8002d48:	0800b224 	.word	0x0800b224
 8002d4c:	20000f2c 	.word	0x20000f2c
 8002d50:	425c0000 	.word	0x425c0000
 8002d54:	c2b40000 	.word	0xc2b40000
 8002d58:	0800b234 	.word	0x0800b234
 8002d5c:	42880000 	.word	0x42880000
 8002d60:	0800b244 	.word	0x0800b244
 8002d64:	20000002 	.word	0x20000002
 8002d68:	20000b1a 	.word	0x20000b1a
 8002d6c:	20000003 	.word	0x20000003
 8002d70:	20000001 	.word	0x20000001
 8002d74:	0800b20c 	.word	0x0800b20c
 8002d78:	0800b218 	.word	0x0800b218
 8002d7c:	20000b19 	.word	0x20000b19
 8002d80:	0800b148 	.word	0x0800b148
 8002d84:	20001520 	.word	0x20001520
 8002d88:	0800b150 	.word	0x0800b150
 8002d8c:	0800b158 	.word	0x0800b158
 8002d90:	200038d8 	.word	0x200038d8
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_TOOLS)
 8002d94:	4bb6      	ldr	r3, [pc, #728]	@ (8003070 <System_UI_Loop+0xb40>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d10e      	bne.n	8002dba <System_UI_Loop+0x88a>
 8002d9c:	4bb5      	ldr	r3, [pc, #724]	@ (8003074 <System_UI_Loop+0xb44>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d00a      	beq.n	8002dba <System_UI_Loop+0x88a>
    {
        
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_SETTINGS)
 8002da4:	4bb2      	ldr	r3, [pc, #712]	@ (8003070 <System_UI_Loop+0xb40>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d106      	bne.n	8002dba <System_UI_Loop+0x88a>
 8002dac:	4bb1      	ldr	r3, [pc, #708]	@ (8003074 <System_UI_Loop+0xb44>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d002      	beq.n	8002dba <System_UI_Loop+0x88a>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_ABOUT)
 8002db4:	4bae      	ldr	r3, [pc, #696]	@ (8003070 <System_UI_Loop+0xb40>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b02      	cmp	r3, #2

#pragma endregion pager

#pragma region DRAWER //画出你的UI

    OLED_GetObjectPosition(&Menu_AnimationManager, "SettingsButton", &x, &y);
 8002dba:	f107 0308 	add.w	r3, r7, #8
 8002dbe:	f107 020c 	add.w	r2, r7, #12
 8002dc2:	49ad      	ldr	r1, [pc, #692]	@ (8003078 <System_UI_Loop+0xb48>)
 8002dc4:	48ad      	ldr	r0, [pc, #692]	@ (800307c <System_UI_Loop+0xb4c>)
 8002dc6:	f002 fa7e 	bl	80052c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Settings");
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fd fcb9 	bl	8000744 <__aeabi_f2iz>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	b21c      	sxth	r4, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fd fcb3 	bl	8000744 <__aeabi_f2iz>
 8002dde:	4603      	mov	r3, r0
 8002de0:	b21b      	sxth	r3, r3
 8002de2:	4aa7      	ldr	r2, [pc, #668]	@ (8003080 <System_UI_Loop+0xb50>)
 8002de4:	4619      	mov	r1, r3
 8002de6:	4620      	mov	r0, r4
 8002de8:	f7ff fb04 	bl	80023f4 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "StatusButton", &x, &y);
 8002dec:	f107 0308 	add.w	r3, r7, #8
 8002df0:	f107 020c 	add.w	r2, r7, #12
 8002df4:	49a3      	ldr	r1, [pc, #652]	@ (8003084 <System_UI_Loop+0xb54>)
 8002df6:	48a1      	ldr	r0, [pc, #644]	@ (800307c <System_UI_Loop+0xb4c>)
 8002df8:	f002 fa65 	bl	80052c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Status");
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd fca0 	bl	8000744 <__aeabi_f2iz>
 8002e04:	4603      	mov	r3, r0
 8002e06:	b21c      	sxth	r4, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fd fc9a 	bl	8000744 <__aeabi_f2iz>
 8002e10:	4603      	mov	r3, r0
 8002e12:	b21b      	sxth	r3, r3
 8002e14:	4a9c      	ldr	r2, [pc, #624]	@ (8003088 <System_UI_Loop+0xb58>)
 8002e16:	4619      	mov	r1, r3
 8002e18:	4620      	mov	r0, r4
 8002e1a:	f7ff faeb 	bl	80023f4 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "GamesButton", &x, &y);
 8002e1e:	f107 0308 	add.w	r3, r7, #8
 8002e22:	f107 020c 	add.w	r2, r7, #12
 8002e26:	4999      	ldr	r1, [pc, #612]	@ (800308c <System_UI_Loop+0xb5c>)
 8002e28:	4894      	ldr	r0, [pc, #592]	@ (800307c <System_UI_Loop+0xb4c>)
 8002e2a:	f002 fa4c 	bl	80052c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Games");
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd fc87 	bl	8000744 <__aeabi_f2iz>
 8002e36:	4603      	mov	r3, r0
 8002e38:	b21c      	sxth	r4, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fd fc81 	bl	8000744 <__aeabi_f2iz>
 8002e42:	4603      	mov	r3, r0
 8002e44:	b21b      	sxth	r3, r3
 8002e46:	4a92      	ldr	r2, [pc, #584]	@ (8003090 <System_UI_Loop+0xb60>)
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	f7ff fad2 	bl	80023f4 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "AboutButton", &x, &y);
 8002e50:	f107 0308 	add.w	r3, r7, #8
 8002e54:	f107 020c 	add.w	r2, r7, #12
 8002e58:	498e      	ldr	r1, [pc, #568]	@ (8003094 <System_UI_Loop+0xb64>)
 8002e5a:	4888      	ldr	r0, [pc, #544]	@ (800307c <System_UI_Loop+0xb4c>)
 8002e5c:	f002 fa33 	bl	80052c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "About");
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fd fc6e 	bl	8000744 <__aeabi_f2iz>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	b21c      	sxth	r4, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fd fc68 	bl	8000744 <__aeabi_f2iz>
 8002e74:	4603      	mov	r3, r0
 8002e76:	b21b      	sxth	r3, r3
 8002e78:	4a87      	ldr	r2, [pc, #540]	@ (8003098 <System_UI_Loop+0xb68>)
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	f7ff fab9 	bl	80023f4 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "ToolsButton", &x, &y);
 8002e82:	f107 0308 	add.w	r3, r7, #8
 8002e86:	f107 020c 	add.w	r2, r7, #12
 8002e8a:	4984      	ldr	r1, [pc, #528]	@ (800309c <System_UI_Loop+0xb6c>)
 8002e8c:	487b      	ldr	r0, [pc, #492]	@ (800307c <System_UI_Loop+0xb4c>)
 8002e8e:	f002 fa1a 	bl	80052c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Tools");
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fd fc55 	bl	8000744 <__aeabi_f2iz>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	b21c      	sxth	r4, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fd fc4f 	bl	8000744 <__aeabi_f2iz>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	b21b      	sxth	r3, r3
 8002eaa:	4a7d      	ldr	r2, [pc, #500]	@ (80030a0 <System_UI_Loop+0xb70>)
 8002eac:	4619      	mov	r1, r3
 8002eae:	4620      	mov	r0, r4
 8002eb0:	f7ff faa0 	bl	80023f4 <OLED_DisplayString>
    OLED_GetObjectPosition(&Games_AnimationManager, "Snake", &x, &y);
 8002eb4:	f107 0308 	add.w	r3, r7, #8
 8002eb8:	f107 020c 	add.w	r2, r7, #12
 8002ebc:	4979      	ldr	r1, [pc, #484]	@ (80030a4 <System_UI_Loop+0xb74>)
 8002ebe:	487a      	ldr	r0, [pc, #488]	@ (80030a8 <System_UI_Loop+0xb78>)
 8002ec0:	f002 fa01 	bl	80052c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Snake");
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd fc3c 	bl	8000744 <__aeabi_f2iz>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	b21c      	sxth	r4, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fd fc36 	bl	8000744 <__aeabi_f2iz>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	b21b      	sxth	r3, r3
 8002edc:	4a71      	ldr	r2, [pc, #452]	@ (80030a4 <System_UI_Loop+0xb74>)
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	f7ff fa87 	bl	80023f4 <OLED_DisplayString>
    OLED_GetObjectPosition(&Games_AnimationManager, "2048", &x, &y);
 8002ee6:	f107 0308 	add.w	r3, r7, #8
 8002eea:	f107 020c 	add.w	r2, r7, #12
 8002eee:	496f      	ldr	r1, [pc, #444]	@ (80030ac <System_UI_Loop+0xb7c>)
 8002ef0:	486d      	ldr	r0, [pc, #436]	@ (80030a8 <System_UI_Loop+0xb78>)
 8002ef2:	f002 f9e8 	bl	80052c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "2048");
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fd fc23 	bl	8000744 <__aeabi_f2iz>
 8002efe:	4603      	mov	r3, r0
 8002f00:	b21c      	sxth	r4, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fd fc1d 	bl	8000744 <__aeabi_f2iz>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	b21b      	sxth	r3, r3
 8002f0e:	4a67      	ldr	r2, [pc, #412]	@ (80030ac <System_UI_Loop+0xb7c>)
 8002f10:	4619      	mov	r1, r3
 8002f12:	4620      	mov	r0, r4
 8002f14:	f7ff fa6e 	bl	80023f4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_AnimationManager, "BackButton", &x, &y);
 8002f18:	f107 0308 	add.w	r3, r7, #8
 8002f1c:	f107 020c 	add.w	r2, r7, #12
 8002f20:	4963      	ldr	r1, [pc, #396]	@ (80030b0 <System_UI_Loop+0xb80>)
 8002f22:	4864      	ldr	r0, [pc, #400]	@ (80030b4 <System_UI_Loop+0xb84>)
 8002f24:	f002 f9cf 	bl	80052c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Back");
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fd fc0a 	bl	8000744 <__aeabi_f2iz>
 8002f30:	4603      	mov	r3, r0
 8002f32:	b21c      	sxth	r4, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fd fc04 	bl	8000744 <__aeabi_f2iz>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	b21b      	sxth	r3, r3
 8002f40:	4a5d      	ldr	r2, [pc, #372]	@ (80030b8 <System_UI_Loop+0xb88>)
 8002f42:	4619      	mov	r1, r3
 8002f44:	4620      	mov	r0, r4
 8002f46:	f7ff fa55 	bl	80023f4 <OLED_DisplayString>

    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleGames", &x, &y);
 8002f4a:	f107 0308 	add.w	r3, r7, #8
 8002f4e:	f107 020c 	add.w	r2, r7, #12
 8002f52:	495a      	ldr	r1, [pc, #360]	@ (80030bc <System_UI_Loop+0xb8c>)
 8002f54:	485a      	ldr	r0, [pc, #360]	@ (80030c0 <System_UI_Loop+0xb90>)
 8002f56:	f002 f9b6 	bl	80052c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Epicful Games");
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fd fbf1 	bl	8000744 <__aeabi_f2iz>
 8002f62:	4603      	mov	r3, r0
 8002f64:	b21c      	sxth	r4, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fd fbeb 	bl	8000744 <__aeabi_f2iz>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	b21b      	sxth	r3, r3
 8002f72:	4a54      	ldr	r2, [pc, #336]	@ (80030c4 <System_UI_Loop+0xb94>)
 8002f74:	4619      	mov	r1, r3
 8002f76:	4620      	mov	r0, r4
 8002f78:	f7ff fa3c 	bl	80023f4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleTools", &x, &y);
 8002f7c:	f107 0308 	add.w	r3, r7, #8
 8002f80:	f107 020c 	add.w	r2, r7, #12
 8002f84:	4950      	ldr	r1, [pc, #320]	@ (80030c8 <System_UI_Loop+0xb98>)
 8002f86:	484e      	ldr	r0, [pc, #312]	@ (80030c0 <System_UI_Loop+0xb90>)
 8002f88:	f002 f99d 	bl	80052c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Tools For You");
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fd fbd8 	bl	8000744 <__aeabi_f2iz>
 8002f94:	4603      	mov	r3, r0
 8002f96:	b21c      	sxth	r4, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd fbd2 	bl	8000744 <__aeabi_f2iz>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	b21b      	sxth	r3, r3
 8002fa4:	4a49      	ldr	r2, [pc, #292]	@ (80030cc <System_UI_Loop+0xb9c>)
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4620      	mov	r0, r4
 8002faa:	f7ff fa23 	bl	80023f4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleStatus", &x, &y);
 8002fae:	f107 0308 	add.w	r3, r7, #8
 8002fb2:	f107 020c 	add.w	r2, r7, #12
 8002fb6:	4946      	ldr	r1, [pc, #280]	@ (80030d0 <System_UI_Loop+0xba0>)
 8002fb8:	4841      	ldr	r0, [pc, #260]	@ (80030c0 <System_UI_Loop+0xb90>)
 8002fba:	f002 f984 	bl	80052c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Machine States");
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fd fbbf 	bl	8000744 <__aeabi_f2iz>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	b21c      	sxth	r4, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fd fbb9 	bl	8000744 <__aeabi_f2iz>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	b21b      	sxth	r3, r3
 8002fd6:	4a3f      	ldr	r2, [pc, #252]	@ (80030d4 <System_UI_Loop+0xba4>)
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4620      	mov	r0, r4
 8002fdc:	f7ff fa0a 	bl	80023f4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleSettings", &x, &y);
 8002fe0:	f107 0308 	add.w	r3, r7, #8
 8002fe4:	f107 020c 	add.w	r2, r7, #12
 8002fe8:	493b      	ldr	r1, [pc, #236]	@ (80030d8 <System_UI_Loop+0xba8>)
 8002fea:	4835      	ldr	r0, [pc, #212]	@ (80030c0 <System_UI_Loop+0xb90>)
 8002fec:	f002 f96b 	bl	80052c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "STM Settings");
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fd fba6 	bl	8000744 <__aeabi_f2iz>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	b21c      	sxth	r4, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd fba0 	bl	8000744 <__aeabi_f2iz>
 8003004:	4603      	mov	r3, r0
 8003006:	b21b      	sxth	r3, r3
 8003008:	4a34      	ldr	r2, [pc, #208]	@ (80030dc <System_UI_Loop+0xbac>)
 800300a:	4619      	mov	r1, r3
 800300c:	4620      	mov	r0, r4
 800300e:	f7ff f9f1 	bl	80023f4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleAbout", &x, &y);
 8003012:	f107 0308 	add.w	r3, r7, #8
 8003016:	f107 020c 	add.w	r2, r7, #12
 800301a:	4931      	ldr	r1, [pc, #196]	@ (80030e0 <System_UI_Loop+0xbb0>)
 800301c:	4828      	ldr	r0, [pc, #160]	@ (80030c0 <System_UI_Loop+0xb90>)
 800301e:	f002 f952 	bl	80052c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Developer!");
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4618      	mov	r0, r3
 8003026:	f7fd fb8d 	bl	8000744 <__aeabi_f2iz>
 800302a:	4603      	mov	r3, r0
 800302c:	b21c      	sxth	r4, r3
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd fb87 	bl	8000744 <__aeabi_f2iz>
 8003036:	4603      	mov	r3, r0
 8003038:	b21b      	sxth	r3, r3
 800303a:	4a2a      	ldr	r2, [pc, #168]	@ (80030e4 <System_UI_Loop+0xbb4>)
 800303c:	4619      	mov	r1, r3
 800303e:	4620      	mov	r0, r4
 8003040:	f7ff f9d8 	bl	80023f4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleSnake", &x, &y);
 8003044:	f107 0308 	add.w	r3, r7, #8
 8003048:	f107 020c 	add.w	r2, r7, #12
 800304c:	4926      	ldr	r1, [pc, #152]	@ (80030e8 <System_UI_Loop+0xbb8>)
 800304e:	481c      	ldr	r0, [pc, #112]	@ (80030c0 <System_UI_Loop+0xb90>)
 8003050:	f002 f939 	bl	80052c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Greedy Snake");
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fd fb74 	bl	8000744 <__aeabi_f2iz>
 800305c:	4603      	mov	r3, r0
 800305e:	b21c      	sxth	r4, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd fb6e 	bl	8000744 <__aeabi_f2iz>
 8003068:	4603      	mov	r3, r0
 800306a:	b21b      	sxth	r3, r3
 800306c:	e03e      	b.n	80030ec <System_UI_Loop+0xbbc>
 800306e:	bf00      	nop
 8003070:	20000001 	.word	0x20000001
 8003074:	20000b19 	.word	0x20000b19
 8003078:	0800b234 	.word	0x0800b234
 800307c:	20000f2c 	.word	0x20000f2c
 8003080:	0800b250 	.word	0x0800b250
 8003084:	0800b224 	.word	0x0800b224
 8003088:	0800b188 	.word	0x0800b188
 800308c:	0800b20c 	.word	0x0800b20c
 8003090:	0800b25c 	.word	0x0800b25c
 8003094:	0800b244 	.word	0x0800b244
 8003098:	0800b264 	.word	0x0800b264
 800309c:	0800b218 	.word	0x0800b218
 80030a0:	0800b26c 	.word	0x0800b26c
 80030a4:	0800b148 	.word	0x0800b148
 80030a8:	20001520 	.word	0x20001520
 80030ac:	0800b150 	.word	0x0800b150
 80030b0:	0800b158 	.word	0x0800b158
 80030b4:	200038d8 	.word	0x200038d8
 80030b8:	0800b274 	.word	0x0800b274
 80030bc:	0800b024 	.word	0x0800b024
 80030c0:	200032e4 	.word	0x200032e4
 80030c4:	0800b27c 	.word	0x0800b27c
 80030c8:	0800b030 	.word	0x0800b030
 80030cc:	0800b28c 	.word	0x0800b28c
 80030d0:	0800b03c 	.word	0x0800b03c
 80030d4:	0800b29c 	.word	0x0800b29c
 80030d8:	0800b048 	.word	0x0800b048
 80030dc:	0800b2ac 	.word	0x0800b2ac
 80030e0:	0800b058 	.word	0x0800b058
 80030e4:	0800b2bc 	.word	0x0800b2bc
 80030e8:	0800b064 	.word	0x0800b064
 80030ec:	4aa8      	ldr	r2, [pc, #672]	@ (8003390 <System_UI_Loop+0xe60>)
 80030ee:	4619      	mov	r1, r3
 80030f0:	4620      	mov	r0, r4
 80030f2:	f7ff f97f 	bl	80023f4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "Title2048", &x, &y);
 80030f6:	f107 0308 	add.w	r3, r7, #8
 80030fa:	f107 020c 	add.w	r2, r7, #12
 80030fe:	49a5      	ldr	r1, [pc, #660]	@ (8003394 <System_UI_Loop+0xe64>)
 8003100:	48a5      	ldr	r0, [pc, #660]	@ (8003398 <System_UI_Loop+0xe68>)
 8003102:	f002 f8e0 	bl	80052c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Here is 2048!");
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4618      	mov	r0, r3
 800310a:	f7fd fb1b 	bl	8000744 <__aeabi_f2iz>
 800310e:	4603      	mov	r3, r0
 8003110:	b21c      	sxth	r4, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	4618      	mov	r0, r3
 8003116:	f7fd fb15 	bl	8000744 <__aeabi_f2iz>
 800311a:	4603      	mov	r3, r0
 800311c:	b21b      	sxth	r3, r3
 800311e:	4a9f      	ldr	r2, [pc, #636]	@ (800339c <System_UI_Loop+0xe6c>)
 8003120:	4619      	mov	r1, r3
 8003122:	4620      	mov	r0, r4
 8003124:	f7ff f966 	bl	80023f4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleBack", &x, &y);
 8003128:	f107 0308 	add.w	r3, r7, #8
 800312c:	f107 020c 	add.w	r2, r7, #12
 8003130:	499b      	ldr	r1, [pc, #620]	@ (80033a0 <System_UI_Loop+0xe70>)
 8003132:	4899      	ldr	r0, [pc, #612]	@ (8003398 <System_UI_Loop+0xe68>)
 8003134:	f002 f8c7 	bl	80052c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Back To Menu");
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd fb02 	bl	8000744 <__aeabi_f2iz>
 8003140:	4603      	mov	r3, r0
 8003142:	b21c      	sxth	r4, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd fafc 	bl	8000744 <__aeabi_f2iz>
 800314c:	4603      	mov	r3, r0
 800314e:	b21b      	sxth	r3, r3
 8003150:	4a94      	ldr	r2, [pc, #592]	@ (80033a4 <System_UI_Loop+0xe74>)
 8003152:	4619      	mov	r1, r3
 8003154:	4620      	mov	r0, r4
 8003156:	f7ff f94d 	bl	80023f4 <OLED_DisplayString>

    OLED_GetObjectPosition(&g_AnimationManager, "TitleBGScale", &x, &y);
 800315a:	f107 0308 	add.w	r3, r7, #8
 800315e:	f107 020c 	add.w	r2, r7, #12
 8003162:	4991      	ldr	r1, [pc, #580]	@ (80033a8 <System_UI_Loop+0xe78>)
 8003164:	4891      	ldr	r0, [pc, #580]	@ (80033ac <System_UI_Loop+0xe7c>)
 8003166:	f002 f8ae 	bl	80052c6 <OLED_GetObjectPosition>
    OLED_InvertArea(OLED_WIDTH - x, 0, x, y);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4619      	mov	r1, r3
 800316e:	f04f 4086 	mov.w	r0, #1124073472	@ 0x43000000
 8003172:	f7fd f801 	bl	8000178 <__aeabi_fsub>
 8003176:	4603      	mov	r3, r0
 8003178:	4618      	mov	r0, r3
 800317a:	f7fd fae3 	bl	8000744 <__aeabi_f2iz>
 800317e:	4603      	mov	r3, r0
 8003180:	b21c      	sxth	r4, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4618      	mov	r0, r3
 8003186:	f7fd fb03 	bl	8000790 <__aeabi_f2uiz>
 800318a:	4603      	mov	r3, r0
 800318c:	b2dd      	uxtb	r5, r3
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd fafd 	bl	8000790 <__aeabi_f2uiz>
 8003196:	4603      	mov	r3, r0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	462a      	mov	r2, r5
 800319c:	2100      	movs	r1, #0
 800319e:	4620      	mov	r0, r4
 80031a0:	f7fe fef6 	bl	8001f90 <OLED_InvertArea>

    OLED_GetObjectPosition(&g_AnimationManager, "Cursor", &x, &y);
 80031a4:	f107 0308 	add.w	r3, r7, #8
 80031a8:	f107 020c 	add.w	r2, r7, #12
 80031ac:	4980      	ldr	r1, [pc, #512]	@ (80033b0 <System_UI_Loop+0xe80>)
 80031ae:	487f      	ldr	r0, [pc, #508]	@ (80033ac <System_UI_Loop+0xe7c>)
 80031b0:	f002 f889 	bl	80052c6 <OLED_GetObjectPosition>
    OLED_GetObjectPosition(&g_AnimationManager, "CursorScale", &x1, &y1);
 80031b4:	463b      	mov	r3, r7
 80031b6:	1d3a      	adds	r2, r7, #4
 80031b8:	497e      	ldr	r1, [pc, #504]	@ (80033b4 <System_UI_Loop+0xe84>)
 80031ba:	487c      	ldr	r0, [pc, #496]	@ (80033ac <System_UI_Loop+0xe7c>)
 80031bc:	f002 f883 	bl	80052c6 <OLED_GetObjectPosition>
    OLED_InvertArea(x - 2, y - 2, x1, y1); // 绘制光标
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fc ffd6 	bl	8000178 <__aeabi_fsub>
 80031cc:	4603      	mov	r3, r0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fd fab8 	bl	8000744 <__aeabi_f2iz>
 80031d4:	4603      	mov	r3, r0
 80031d6:	b21c      	sxth	r4, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fc ffca 	bl	8000178 <__aeabi_fsub>
 80031e4:	4603      	mov	r3, r0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fd faac 	bl	8000744 <__aeabi_f2iz>
 80031ec:	4603      	mov	r3, r0
 80031ee:	b21d      	sxth	r5, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fd facc 	bl	8000790 <__aeabi_f2uiz>
 80031f8:	4603      	mov	r3, r0
 80031fa:	b2de      	uxtb	r6, r3
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fd fac6 	bl	8000790 <__aeabi_f2uiz>
 8003204:	4603      	mov	r3, r0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	4632      	mov	r2, r6
 800320a:	4629      	mov	r1, r5
 800320c:	4620      	mov	r0, r4
 800320e:	f7fe febf 	bl	8001f90 <OLED_InvertArea>
#pragma endregion DRAWER

#pragma region PlayerSelection //选择某个选项时候的详细内容
    if (menuRank == 1)
 8003212:	4b69      	ldr	r3, [pc, #420]	@ (80033b8 <System_UI_Loop+0xe88>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b01      	cmp	r3, #1
 8003218:	f040 81d3 	bne.w	80035c2 <System_UI_Loop+0x1092>
    {
        switch (menuSelection)
 800321c:	4b67      	ldr	r3, [pc, #412]	@ (80033bc <System_UI_Loop+0xe8c>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	3b01      	subs	r3, #1
 8003222:	2b04      	cmp	r3, #4
 8003224:	f200 838e 	bhi.w	8003944 <System_UI_Loop+0x1414>
 8003228:	a201      	add	r2, pc, #4	@ (adr r2, 8003230 <System_UI_Loop+0xd00>)
 800322a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322e:	bf00      	nop
 8003230:	08003245 	.word	0x08003245
 8003234:	080032f5 	.word	0x080032f5
 8003238:	080033f5 	.word	0x080033f5
 800323c:	0800348f 	.word	0x0800348f
 8003240:	08003529 	.word	0x08003529
        {
        case 1:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, TweenStyle);
 8003244:	230f      	movs	r3, #15
 8003246:	9301      	str	r3, [sp, #4]
 8003248:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	4b5c      	ldr	r3, [pc, #368]	@ (80033c0 <System_UI_Loop+0xe90>)
 8003250:	4a5c      	ldr	r2, [pc, #368]	@ (80033c4 <System_UI_Loop+0xe94>)
 8003252:	4953      	ldr	r1, [pc, #332]	@ (80033a0 <System_UI_Loop+0xe70>)
 8003254:	4850      	ldr	r0, [pc, #320]	@ (8003398 <System_UI_Loop+0xe68>)
 8003256:	f002 f911 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", OLED_WIDTH - strlen("Machine States") * 6, OLED_TITLE_Start_Y, 1, TweenStyle);
 800325a:	230f      	movs	r3, #15
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	2301      	movs	r3, #1
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	4b57      	ldr	r3, [pc, #348]	@ (80033c0 <System_UI_Loop+0xe90>)
 8003264:	4a58      	ldr	r2, [pc, #352]	@ (80033c8 <System_UI_Loop+0xe98>)
 8003266:	4959      	ldr	r1, [pc, #356]	@ (80033cc <System_UI_Loop+0xe9c>)
 8003268:	484b      	ldr	r0, [pc, #300]	@ (8003398 <System_UI_Loop+0xe68>)
 800326a:	f002 f907 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", OLED_WIDTH - strlen("STM Settings") * 6, OLED_TITLE_Start_Y, 1, TweenStyle);
 800326e:	230f      	movs	r3, #15
 8003270:	9301      	str	r3, [sp, #4]
 8003272:	2301      	movs	r3, #1
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	4b52      	ldr	r3, [pc, #328]	@ (80033c0 <System_UI_Loop+0xe90>)
 8003278:	4a52      	ldr	r2, [pc, #328]	@ (80033c4 <System_UI_Loop+0xe94>)
 800327a:	4955      	ldr	r1, [pc, #340]	@ (80033d0 <System_UI_Loop+0xea0>)
 800327c:	4846      	ldr	r0, [pc, #280]	@ (8003398 <System_UI_Loop+0xe68>)
 800327e:	f002 f8fd 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003282:	2304      	movs	r3, #4
 8003284:	9301      	str	r3, [sp, #4]
 8003286:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	4b4c      	ldr	r3, [pc, #304]	@ (80033c0 <System_UI_Loop+0xe90>)
 800328e:	4a51      	ldr	r2, [pc, #324]	@ (80033d4 <System_UI_Loop+0xea4>)
 8003290:	4951      	ldr	r1, [pc, #324]	@ (80033d8 <System_UI_Loop+0xea8>)
 8003292:	4841      	ldr	r0, [pc, #260]	@ (8003398 <System_UI_Loop+0xe68>)
 8003294:	f002 f8f2 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003298:	2304      	movs	r3, #4
 800329a:	9301      	str	r3, [sp, #4]
 800329c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	4b47      	ldr	r3, [pc, #284]	@ (80033c0 <System_UI_Loop+0xe90>)
 80032a4:	4a4d      	ldr	r2, [pc, #308]	@ (80033dc <System_UI_Loop+0xeac>)
 80032a6:	494e      	ldr	r1, [pc, #312]	@ (80033e0 <System_UI_Loop+0xeb0>)
 80032a8:	483b      	ldr	r0, [pc, #236]	@ (8003398 <System_UI_Loop+0xe68>)
 80032aa:	f002 f8e7 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 80032ae:	2304      	movs	r3, #4
 80032b0:	9301      	str	r3, [sp, #4]
 80032b2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	f04f 0300 	mov.w	r3, #0
 80032bc:	4a47      	ldr	r2, [pc, #284]	@ (80033dc <System_UI_Loop+0xeac>)
 80032be:	4949      	ldr	r1, [pc, #292]	@ (80033e4 <System_UI_Loop+0xeb4>)
 80032c0:	4835      	ldr	r0, [pc, #212]	@ (8003398 <System_UI_Loop+0xe68>)
 80032c2:	f002 f8db 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Epicful Games") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 80032c6:	2304      	movs	r3, #4
 80032c8:	9301      	str	r3, [sp, #4]
 80032ca:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80032d4:	4a44      	ldr	r2, [pc, #272]	@ (80033e8 <System_UI_Loop+0xeb8>)
 80032d6:	4934      	ldr	r1, [pc, #208]	@ (80033a8 <System_UI_Loop+0xe78>)
 80032d8:	4834      	ldr	r0, [pc, #208]	@ (80033ac <System_UI_Loop+0xe7c>)
 80032da:	f002 f8cf 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Games") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 80032de:	230c      	movs	r3, #12
 80032e0:	9301      	str	r3, [sp, #4]
 80032e2:	2364      	movs	r3, #100	@ 0x64
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	4b41      	ldr	r3, [pc, #260]	@ (80033ec <System_UI_Loop+0xebc>)
 80032e8:	4a41      	ldr	r2, [pc, #260]	@ (80033f0 <System_UI_Loop+0xec0>)
 80032ea:	4932      	ldr	r1, [pc, #200]	@ (80033b4 <System_UI_Loop+0xe84>)
 80032ec:	482f      	ldr	r0, [pc, #188]	@ (80033ac <System_UI_Loop+0xe7c>)
 80032ee:	f002 f8c5 	bl	800547c <OLED_DoTweenObject>
            break;
 80032f2:	e328      	b.n	8003946 <System_UI_Loop+0x1416>
        case 2:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80032f4:	2304      	movs	r3, #4
 80032f6:	9301      	str	r3, [sp, #4]
 80032f8:	2301      	movs	r3, #1
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	4b30      	ldr	r3, [pc, #192]	@ (80033c0 <System_UI_Loop+0xe90>)
 80032fe:	4a31      	ldr	r2, [pc, #196]	@ (80033c4 <System_UI_Loop+0xe94>)
 8003300:	4933      	ldr	r1, [pc, #204]	@ (80033d0 <System_UI_Loop+0xea0>)
 8003302:	4825      	ldr	r0, [pc, #148]	@ (8003398 <System_UI_Loop+0xe68>)
 8003304:	f002 f8ba 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8003308:	2304      	movs	r3, #4
 800330a:	9301      	str	r3, [sp, #4]
 800330c:	2301      	movs	r3, #1
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	4b2b      	ldr	r3, [pc, #172]	@ (80033c0 <System_UI_Loop+0xe90>)
 8003312:	4a30      	ldr	r2, [pc, #192]	@ (80033d4 <System_UI_Loop+0xea4>)
 8003314:	4930      	ldr	r1, [pc, #192]	@ (80033d8 <System_UI_Loop+0xea8>)
 8003316:	4820      	ldr	r0, [pc, #128]	@ (8003398 <System_UI_Loop+0xe68>)
 8003318:	f002 f8b0 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 800331c:	2304      	movs	r3, #4
 800331e:	9301      	str	r3, [sp, #4]
 8003320:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	4b26      	ldr	r3, [pc, #152]	@ (80033c0 <System_UI_Loop+0xe90>)
 8003328:	4a27      	ldr	r2, [pc, #156]	@ (80033c8 <System_UI_Loop+0xe98>)
 800332a:	4928      	ldr	r1, [pc, #160]	@ (80033cc <System_UI_Loop+0xe9c>)
 800332c:	481a      	ldr	r0, [pc, #104]	@ (8003398 <System_UI_Loop+0xe68>)
 800332e:	f002 f8a5 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003332:	2304      	movs	r3, #4
 8003334:	9301      	str	r3, [sp, #4]
 8003336:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	4b20      	ldr	r3, [pc, #128]	@ (80033c0 <System_UI_Loop+0xe90>)
 800333e:	4a27      	ldr	r2, [pc, #156]	@ (80033dc <System_UI_Loop+0xeac>)
 8003340:	4928      	ldr	r1, [pc, #160]	@ (80033e4 <System_UI_Loop+0xeb4>)
 8003342:	4815      	ldr	r0, [pc, #84]	@ (8003398 <System_UI_Loop+0xe68>)
 8003344:	f002 f89a 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8003348:	2304      	movs	r3, #4
 800334a:	9301      	str	r3, [sp, #4]
 800334c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	4a21      	ldr	r2, [pc, #132]	@ (80033dc <System_UI_Loop+0xeac>)
 8003358:	4921      	ldr	r1, [pc, #132]	@ (80033e0 <System_UI_Loop+0xeb0>)
 800335a:	480f      	ldr	r0, [pc, #60]	@ (8003398 <System_UI_Loop+0xe68>)
 800335c:	f002 f88e 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Tools for you") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8003360:	2304      	movs	r3, #4
 8003362:	9301      	str	r3, [sp, #4]
 8003364:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800336e:	4a1e      	ldr	r2, [pc, #120]	@ (80033e8 <System_UI_Loop+0xeb8>)
 8003370:	490d      	ldr	r1, [pc, #52]	@ (80033a8 <System_UI_Loop+0xe78>)
 8003372:	480e      	ldr	r0, [pc, #56]	@ (80033ac <System_UI_Loop+0xe7c>)
 8003374:	f002 f882 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Tools") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 8003378:	230c      	movs	r3, #12
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	2364      	movs	r3, #100	@ 0x64
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	4b1a      	ldr	r3, [pc, #104]	@ (80033ec <System_UI_Loop+0xebc>)
 8003382:	4a1b      	ldr	r2, [pc, #108]	@ (80033f0 <System_UI_Loop+0xec0>)
 8003384:	490b      	ldr	r1, [pc, #44]	@ (80033b4 <System_UI_Loop+0xe84>)
 8003386:	4809      	ldr	r0, [pc, #36]	@ (80033ac <System_UI_Loop+0xe7c>)
 8003388:	f002 f878 	bl	800547c <OLED_DoTweenObject>
            break;
 800338c:	e2db      	b.n	8003946 <System_UI_Loop+0x1416>
 800338e:	bf00      	nop
 8003390:	0800b2c8 	.word	0x0800b2c8
 8003394:	0800b070 	.word	0x0800b070
 8003398:	200032e4 	.word	0x200032e4
 800339c:	0800b2d8 	.word	0x0800b2d8
 80033a0:	0800b07c 	.word	0x0800b07c
 80033a4:	0800b2e8 	.word	0x0800b2e8
 80033a8:	0800b1e8 	.word	0x0800b1e8
 80033ac:	200038d8 	.word	0x200038d8
 80033b0:	0800b1f8 	.word	0x0800b1f8
 80033b4:	0800b200 	.word	0x0800b200
 80033b8:	20000001 	.word	0x20000001
 80033bc:	20000002 	.word	0x20000002
 80033c0:	c1200000 	.word	0xc1200000
 80033c4:	42600000 	.word	0x42600000
 80033c8:	42300000 	.word	0x42300000
 80033cc:	0800b03c 	.word	0x0800b03c
 80033d0:	0800b048 	.word	0x0800b048
 80033d4:	42880000 	.word	0x42880000
 80033d8:	0800b058 	.word	0x0800b058
 80033dc:	42480000 	.word	0x42480000
 80033e0:	0800b030 	.word	0x0800b030
 80033e4:	0800b024 	.word	0x0800b024
 80033e8:	42a20000 	.word	0x42a20000
 80033ec:	41200000 	.word	0x41200000
 80033f0:	42040000 	.word	0x42040000
        case 3:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80033f4:	2304      	movs	r3, #4
 80033f6:	9301      	str	r3, [sp, #4]
 80033f8:	2301      	movs	r3, #1
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	4b9b      	ldr	r3, [pc, #620]	@ (800366c <System_UI_Loop+0x113c>)
 80033fe:	4a9c      	ldr	r2, [pc, #624]	@ (8003670 <System_UI_Loop+0x1140>)
 8003400:	499c      	ldr	r1, [pc, #624]	@ (8003674 <System_UI_Loop+0x1144>)
 8003402:	489d      	ldr	r0, [pc, #628]	@ (8003678 <System_UI_Loop+0x1148>)
 8003404:	f002 f83a 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8003408:	2304      	movs	r3, #4
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	2301      	movs	r3, #1
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	4b96      	ldr	r3, [pc, #600]	@ (800366c <System_UI_Loop+0x113c>)
 8003412:	4a9a      	ldr	r2, [pc, #616]	@ (800367c <System_UI_Loop+0x114c>)
 8003414:	499a      	ldr	r1, [pc, #616]	@ (8003680 <System_UI_Loop+0x1150>)
 8003416:	4898      	ldr	r0, [pc, #608]	@ (8003678 <System_UI_Loop+0x1148>)
 8003418:	f002 f830 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 800341c:	2304      	movs	r3, #4
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	4b91      	ldr	r3, [pc, #580]	@ (800366c <System_UI_Loop+0x113c>)
 8003428:	4a96      	ldr	r2, [pc, #600]	@ (8003684 <System_UI_Loop+0x1154>)
 800342a:	4997      	ldr	r1, [pc, #604]	@ (8003688 <System_UI_Loop+0x1158>)
 800342c:	4892      	ldr	r0, [pc, #584]	@ (8003678 <System_UI_Loop+0x1148>)
 800342e:	f002 f825 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003432:	2304      	movs	r3, #4
 8003434:	9301      	str	r3, [sp, #4]
 8003436:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	4b8b      	ldr	r3, [pc, #556]	@ (800366c <System_UI_Loop+0x113c>)
 800343e:	4a8c      	ldr	r2, [pc, #560]	@ (8003670 <System_UI_Loop+0x1140>)
 8003440:	4992      	ldr	r1, [pc, #584]	@ (800368c <System_UI_Loop+0x115c>)
 8003442:	488d      	ldr	r0, [pc, #564]	@ (8003678 <System_UI_Loop+0x1148>)
 8003444:	f002 f81a 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8003448:	2304      	movs	r3, #4
 800344a:	9301      	str	r3, [sp, #4]
 800344c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	4a8e      	ldr	r2, [pc, #568]	@ (8003690 <System_UI_Loop+0x1160>)
 8003458:	498e      	ldr	r1, [pc, #568]	@ (8003694 <System_UI_Loop+0x1164>)
 800345a:	4887      	ldr	r0, [pc, #540]	@ (8003678 <System_UI_Loop+0x1148>)
 800345c:	f002 f80e 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Machine States") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8003460:	2304      	movs	r3, #4
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800346e:	4a8a      	ldr	r2, [pc, #552]	@ (8003698 <System_UI_Loop+0x1168>)
 8003470:	498a      	ldr	r1, [pc, #552]	@ (800369c <System_UI_Loop+0x116c>)
 8003472:	488b      	ldr	r0, [pc, #556]	@ (80036a0 <System_UI_Loop+0x1170>)
 8003474:	f002 f802 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("States") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 8003478:	230c      	movs	r3, #12
 800347a:	9301      	str	r3, [sp, #4]
 800347c:	2364      	movs	r3, #100	@ 0x64
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	4b88      	ldr	r3, [pc, #544]	@ (80036a4 <System_UI_Loop+0x1174>)
 8003482:	4a89      	ldr	r2, [pc, #548]	@ (80036a8 <System_UI_Loop+0x1178>)
 8003484:	4989      	ldr	r1, [pc, #548]	@ (80036ac <System_UI_Loop+0x117c>)
 8003486:	4886      	ldr	r0, [pc, #536]	@ (80036a0 <System_UI_Loop+0x1170>)
 8003488:	f001 fff8 	bl	800547c <OLED_DoTweenObject>
            break;
 800348c:	e25b      	b.n	8003946 <System_UI_Loop+0x1416>
        case 4:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 800348e:	2304      	movs	r3, #4
 8003490:	9301      	str	r3, [sp, #4]
 8003492:	2301      	movs	r3, #1
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	4b75      	ldr	r3, [pc, #468]	@ (800366c <System_UI_Loop+0x113c>)
 8003498:	4a75      	ldr	r2, [pc, #468]	@ (8003670 <System_UI_Loop+0x1140>)
 800349a:	4976      	ldr	r1, [pc, #472]	@ (8003674 <System_UI_Loop+0x1144>)
 800349c:	4876      	ldr	r0, [pc, #472]	@ (8003678 <System_UI_Loop+0x1148>)
 800349e:	f001 ffed 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80034a2:	2304      	movs	r3, #4
 80034a4:	9301      	str	r3, [sp, #4]
 80034a6:	2301      	movs	r3, #1
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	4b70      	ldr	r3, [pc, #448]	@ (800366c <System_UI_Loop+0x113c>)
 80034ac:	4a70      	ldr	r2, [pc, #448]	@ (8003670 <System_UI_Loop+0x1140>)
 80034ae:	4977      	ldr	r1, [pc, #476]	@ (800368c <System_UI_Loop+0x115c>)
 80034b0:	4871      	ldr	r0, [pc, #452]	@ (8003678 <System_UI_Loop+0x1148>)
 80034b2:	f001 ffe3 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80034b6:	2304      	movs	r3, #4
 80034b8:	9301      	str	r3, [sp, #4]
 80034ba:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	4b6a      	ldr	r3, [pc, #424]	@ (800366c <System_UI_Loop+0x113c>)
 80034c2:	4a73      	ldr	r2, [pc, #460]	@ (8003690 <System_UI_Loop+0x1160>)
 80034c4:	4973      	ldr	r1, [pc, #460]	@ (8003694 <System_UI_Loop+0x1164>)
 80034c6:	486c      	ldr	r0, [pc, #432]	@ (8003678 <System_UI_Loop+0x1148>)
 80034c8:	f001 ffd8 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80034cc:	2304      	movs	r3, #4
 80034ce:	9301      	str	r3, [sp, #4]
 80034d0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	4b65      	ldr	r3, [pc, #404]	@ (800366c <System_UI_Loop+0x113c>)
 80034d8:	4a68      	ldr	r2, [pc, #416]	@ (800367c <System_UI_Loop+0x114c>)
 80034da:	4969      	ldr	r1, [pc, #420]	@ (8003680 <System_UI_Loop+0x1150>)
 80034dc:	4866      	ldr	r0, [pc, #408]	@ (8003678 <System_UI_Loop+0x1148>)
 80034de:	f001 ffcd 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 80034e2:	2304      	movs	r3, #4
 80034e4:	9301      	str	r3, [sp, #4]
 80034e6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	4a64      	ldr	r2, [pc, #400]	@ (8003684 <System_UI_Loop+0x1154>)
 80034f2:	4965      	ldr	r1, [pc, #404]	@ (8003688 <System_UI_Loop+0x1158>)
 80034f4:	4860      	ldr	r0, [pc, #384]	@ (8003678 <System_UI_Loop+0x1148>)
 80034f6:	f001 ffc1 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("STM Settings") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 80034fa:	2304      	movs	r3, #4
 80034fc:	9301      	str	r3, [sp, #4]
 80034fe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003508:	4a69      	ldr	r2, [pc, #420]	@ (80036b0 <System_UI_Loop+0x1180>)
 800350a:	4964      	ldr	r1, [pc, #400]	@ (800369c <System_UI_Loop+0x116c>)
 800350c:	4864      	ldr	r0, [pc, #400]	@ (80036a0 <System_UI_Loop+0x1170>)
 800350e:	f001 ffb5 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Settings") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 8003512:	230c      	movs	r3, #12
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	2364      	movs	r3, #100	@ 0x64
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	4b62      	ldr	r3, [pc, #392]	@ (80036a4 <System_UI_Loop+0x1174>)
 800351c:	4a65      	ldr	r2, [pc, #404]	@ (80036b4 <System_UI_Loop+0x1184>)
 800351e:	4963      	ldr	r1, [pc, #396]	@ (80036ac <System_UI_Loop+0x117c>)
 8003520:	485f      	ldr	r0, [pc, #380]	@ (80036a0 <System_UI_Loop+0x1170>)
 8003522:	f001 ffab 	bl	800547c <OLED_DoTweenObject>
            break;
 8003526:	e20e      	b.n	8003946 <System_UI_Loop+0x1416>
        case 5:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8003528:	2304      	movs	r3, #4
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	2301      	movs	r3, #1
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	4b4e      	ldr	r3, [pc, #312]	@ (800366c <System_UI_Loop+0x113c>)
 8003532:	4a4f      	ldr	r2, [pc, #316]	@ (8003670 <System_UI_Loop+0x1140>)
 8003534:	4955      	ldr	r1, [pc, #340]	@ (800368c <System_UI_Loop+0x115c>)
 8003536:	4850      	ldr	r0, [pc, #320]	@ (8003678 <System_UI_Loop+0x1148>)
 8003538:	f001 ffa0 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 800353c:	2304      	movs	r3, #4
 800353e:	9301      	str	r3, [sp, #4]
 8003540:	2301      	movs	r3, #1
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	4b49      	ldr	r3, [pc, #292]	@ (800366c <System_UI_Loop+0x113c>)
 8003546:	4a52      	ldr	r2, [pc, #328]	@ (8003690 <System_UI_Loop+0x1160>)
 8003548:	4952      	ldr	r1, [pc, #328]	@ (8003694 <System_UI_Loop+0x1164>)
 800354a:	484b      	ldr	r0, [pc, #300]	@ (8003678 <System_UI_Loop+0x1148>)
 800354c:	f001 ff96 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003550:	2304      	movs	r3, #4
 8003552:	9301      	str	r3, [sp, #4]
 8003554:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	4b44      	ldr	r3, [pc, #272]	@ (800366c <System_UI_Loop+0x113c>)
 800355c:	4a49      	ldr	r2, [pc, #292]	@ (8003684 <System_UI_Loop+0x1154>)
 800355e:	494a      	ldr	r1, [pc, #296]	@ (8003688 <System_UI_Loop+0x1158>)
 8003560:	4845      	ldr	r0, [pc, #276]	@ (8003678 <System_UI_Loop+0x1148>)
 8003562:	f001 ff8b 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003566:	2304      	movs	r3, #4
 8003568:	9301      	str	r3, [sp, #4]
 800356a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	4b3e      	ldr	r3, [pc, #248]	@ (800366c <System_UI_Loop+0x113c>)
 8003572:	4a3f      	ldr	r2, [pc, #252]	@ (8003670 <System_UI_Loop+0x1140>)
 8003574:	493f      	ldr	r1, [pc, #252]	@ (8003674 <System_UI_Loop+0x1144>)
 8003576:	4840      	ldr	r0, [pc, #256]	@ (8003678 <System_UI_Loop+0x1148>)
 8003578:	f001 ff80 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 800357c:	2304      	movs	r3, #4
 800357e:	9301      	str	r3, [sp, #4]
 8003580:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	4a3c      	ldr	r2, [pc, #240]	@ (800367c <System_UI_Loop+0x114c>)
 800358c:	493c      	ldr	r1, [pc, #240]	@ (8003680 <System_UI_Loop+0x1150>)
 800358e:	483a      	ldr	r0, [pc, #232]	@ (8003678 <System_UI_Loop+0x1148>)
 8003590:	f001 ff74 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Developer!") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8003594:	2304      	movs	r3, #4
 8003596:	9301      	str	r3, [sp, #4]
 8003598:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80035a2:	4a45      	ldr	r2, [pc, #276]	@ (80036b8 <System_UI_Loop+0x1188>)
 80035a4:	493d      	ldr	r1, [pc, #244]	@ (800369c <System_UI_Loop+0x116c>)
 80035a6:	483e      	ldr	r0, [pc, #248]	@ (80036a0 <System_UI_Loop+0x1170>)
 80035a8:	f001 ff68 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("About") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 80035ac:	230c      	movs	r3, #12
 80035ae:	9301      	str	r3, [sp, #4]
 80035b0:	2364      	movs	r3, #100	@ 0x64
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	4b3b      	ldr	r3, [pc, #236]	@ (80036a4 <System_UI_Loop+0x1174>)
 80035b6:	4a41      	ldr	r2, [pc, #260]	@ (80036bc <System_UI_Loop+0x118c>)
 80035b8:	493c      	ldr	r1, [pc, #240]	@ (80036ac <System_UI_Loop+0x117c>)
 80035ba:	4839      	ldr	r0, [pc, #228]	@ (80036a0 <System_UI_Loop+0x1170>)
 80035bc:	f001 ff5e 	bl	800547c <OLED_DoTweenObject>
            break;
 80035c0:	e1c1      	b.n	8003946 <System_UI_Loop+0x1416>
        default:
            break;
        }
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_SETTINGS)
 80035c2:	4b3f      	ldr	r3, [pc, #252]	@ (80036c0 <System_UI_Loop+0x1190>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d116      	bne.n	80035f8 <System_UI_Loop+0x10c8>
 80035ca:	4b3e      	ldr	r3, [pc, #248]	@ (80036c4 <System_UI_Loop+0x1194>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d112      	bne.n	80035f8 <System_UI_Loop+0x10c8>
    {
        switch (menuSelection)
 80035d2:	4b3d      	ldr	r3, [pc, #244]	@ (80036c8 <System_UI_Loop+0x1198>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d006      	beq.n	80035e8 <System_UI_Loop+0x10b8>
 80035da:	2b03      	cmp	r3, #3
 80035dc:	dc06      	bgt.n	80035ec <System_UI_Loop+0x10bc>
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d006      	beq.n	80035f0 <System_UI_Loop+0x10c0>
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d006      	beq.n	80035f4 <System_UI_Loop+0x10c4>
            break;
        case 3:
            /* code */
            break;
        default:
            break;
 80035e6:	e001      	b.n	80035ec <System_UI_Loop+0x10bc>
            break;
 80035e8:	bf00      	nop
 80035ea:	e1ac      	b.n	8003946 <System_UI_Loop+0x1416>
            break;
 80035ec:	bf00      	nop
 80035ee:	e1aa      	b.n	8003946 <System_UI_Loop+0x1416>
            break;
 80035f0:	bf00      	nop
 80035f2:	e1a8      	b.n	8003946 <System_UI_Loop+0x1416>
            break;
 80035f4:	bf00      	nop
        switch (menuSelection)
 80035f6:	e1a6      	b.n	8003946 <System_UI_Loop+0x1416>
        }
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_ABOUT)
 80035f8:	4b31      	ldr	r3, [pc, #196]	@ (80036c0 <System_UI_Loop+0x1190>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d119      	bne.n	8003634 <System_UI_Loop+0x1104>
 8003600:	4b30      	ldr	r3, [pc, #192]	@ (80036c4 <System_UI_Loop+0x1194>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d115      	bne.n	8003634 <System_UI_Loop+0x1104>
    {
        switch (menuSelection)
 8003608:	4b2f      	ldr	r3, [pc, #188]	@ (80036c8 <System_UI_Loop+0x1198>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	3b01      	subs	r3, #1
 800360e:	2b05      	cmp	r3, #5
 8003610:	d80e      	bhi.n	8003630 <System_UI_Loop+0x1100>
 8003612:	a201      	add	r2, pc, #4	@ (adr r2, 8003618 <System_UI_Loop+0x10e8>)
 8003614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003618:	08003631 	.word	0x08003631
 800361c:	08003631 	.word	0x08003631
 8003620:	08003631 	.word	0x08003631
 8003624:	08003631 	.word	0x08003631
 8003628:	08003631 	.word	0x08003631
 800362c:	08003631 	.word	0x08003631
            break;
        case 6:
            /* code */
            break;
        default:
            break;
 8003630:	bf00      	nop
        switch (menuSelection)
 8003632:	e188      	b.n	8003946 <System_UI_Loop+0x1416>
        }
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_TOOLS)
 8003634:	4b22      	ldr	r3, [pc, #136]	@ (80036c0 <System_UI_Loop+0x1190>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d147      	bne.n	80036cc <System_UI_Loop+0x119c>
 800363c:	4b21      	ldr	r3, [pc, #132]	@ (80036c4 <System_UI_Loop+0x1194>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b04      	cmp	r3, #4
 8003642:	d143      	bne.n	80036cc <System_UI_Loop+0x119c>
    {
        switch (menuSelection)
 8003644:	4b20      	ldr	r3, [pc, #128]	@ (80036c8 <System_UI_Loop+0x1198>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b03      	cmp	r3, #3
 800364a:	d006      	beq.n	800365a <System_UI_Loop+0x112a>
 800364c:	2b03      	cmp	r3, #3
 800364e:	dc06      	bgt.n	800365e <System_UI_Loop+0x112e>
 8003650:	2b01      	cmp	r3, #1
 8003652:	d006      	beq.n	8003662 <System_UI_Loop+0x1132>
 8003654:	2b02      	cmp	r3, #2
 8003656:	d006      	beq.n	8003666 <System_UI_Loop+0x1136>
        case 2:
            break;
        case 3:
            break;
        default:
            break;
 8003658:	e001      	b.n	800365e <System_UI_Loop+0x112e>
            break;
 800365a:	bf00      	nop
 800365c:	e173      	b.n	8003946 <System_UI_Loop+0x1416>
            break;
 800365e:	bf00      	nop
 8003660:	e171      	b.n	8003946 <System_UI_Loop+0x1416>
            break;
 8003662:	bf00      	nop
 8003664:	e16f      	b.n	8003946 <System_UI_Loop+0x1416>
            break;
 8003666:	bf00      	nop
        switch (menuSelection)
 8003668:	e16d      	b.n	8003946 <System_UI_Loop+0x1416>
 800366a:	bf00      	nop
 800366c:	c1200000 	.word	0xc1200000
 8003670:	42480000 	.word	0x42480000
 8003674:	0800b024 	.word	0x0800b024
 8003678:	200032e4 	.word	0x200032e4
 800367c:	42880000 	.word	0x42880000
 8003680:	0800b058 	.word	0x0800b058
 8003684:	42600000 	.word	0x42600000
 8003688:	0800b048 	.word	0x0800b048
 800368c:	0800b030 	.word	0x0800b030
 8003690:	42300000 	.word	0x42300000
 8003694:	0800b03c 	.word	0x0800b03c
 8003698:	42ae0000 	.word	0x42ae0000
 800369c:	0800b1e8 	.word	0x0800b1e8
 80036a0:	200038d8 	.word	0x200038d8
 80036a4:	41200000 	.word	0x41200000
 80036a8:	421c0000 	.word	0x421c0000
 80036ac:	0800b200 	.word	0x0800b200
 80036b0:	42960000 	.word	0x42960000
 80036b4:	424c0000 	.word	0x424c0000
 80036b8:	427c0000 	.word	0x427c0000
 80036bc:	42040000 	.word	0x42040000
 80036c0:	20000001 	.word	0x20000001
 80036c4:	20000b19 	.word	0x20000b19
 80036c8:	20000002 	.word	0x20000002
        }
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_GAMES)
 80036cc:	4b89      	ldr	r3, [pc, #548]	@ (80038f4 <System_UI_Loop+0x13c4>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	f040 80ca 	bne.w	800386a <System_UI_Loop+0x133a>
 80036d6:	4b88      	ldr	r3, [pc, #544]	@ (80038f8 <System_UI_Loop+0x13c8>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b05      	cmp	r3, #5
 80036dc:	f040 80c5 	bne.w	800386a <System_UI_Loop+0x133a>
    {
        switch (menuSelection)
 80036e0:	4b86      	ldr	r3, [pc, #536]	@ (80038fc <System_UI_Loop+0x13cc>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	f000 8085 	beq.w	80037f4 <System_UI_Loop+0x12c4>
 80036ea:	2b03      	cmp	r3, #3
 80036ec:	f300 80bb 	bgt.w	8003866 <System_UI_Loop+0x1336>
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d002      	beq.n	80036fa <System_UI_Loop+0x11ca>
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d044      	beq.n	8003782 <System_UI_Loop+0x1252>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, 500, EASE_IN_CUBIC);
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
            break;
        default:
            break;
 80036f8:	e0b5      	b.n	8003866 <System_UI_Loop+0x1336>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80036fa:	2304      	movs	r3, #4
 80036fc:	9301      	str	r3, [sp, #4]
 80036fe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	4b7e      	ldr	r3, [pc, #504]	@ (8003900 <System_UI_Loop+0x13d0>)
 8003706:	4a7f      	ldr	r2, [pc, #508]	@ (8003904 <System_UI_Loop+0x13d4>)
 8003708:	497f      	ldr	r1, [pc, #508]	@ (8003908 <System_UI_Loop+0x13d8>)
 800370a:	4880      	ldr	r0, [pc, #512]	@ (800390c <System_UI_Loop+0x13dc>)
 800370c:	f001 feb6 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8003710:	2304      	movs	r3, #4
 8003712:	9301      	str	r3, [sp, #4]
 8003714:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	4a7c      	ldr	r2, [pc, #496]	@ (8003910 <System_UI_Loop+0x13e0>)
 8003720:	497c      	ldr	r1, [pc, #496]	@ (8003914 <System_UI_Loop+0x13e4>)
 8003722:	487a      	ldr	r0, [pc, #488]	@ (800390c <System_UI_Loop+0x13dc>)
 8003724:	f001 feaa 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003728:	2304      	movs	r3, #4
 800372a:	9301      	str	r3, [sp, #4]
 800372c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	4b73      	ldr	r3, [pc, #460]	@ (8003900 <System_UI_Loop+0x13d0>)
 8003734:	4a73      	ldr	r2, [pc, #460]	@ (8003904 <System_UI_Loop+0x13d4>)
 8003736:	4978      	ldr	r1, [pc, #480]	@ (8003918 <System_UI_Loop+0x13e8>)
 8003738:	4874      	ldr	r0, [pc, #464]	@ (800390c <System_UI_Loop+0x13dc>)
 800373a:	f001 fe9f 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 800373e:	2304      	movs	r3, #4
 8003740:	9301      	str	r3, [sp, #4]
 8003742:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	4b6d      	ldr	r3, [pc, #436]	@ (8003900 <System_UI_Loop+0x13d0>)
 800374a:	4a71      	ldr	r2, [pc, #452]	@ (8003910 <System_UI_Loop+0x13e0>)
 800374c:	4973      	ldr	r1, [pc, #460]	@ (800391c <System_UI_Loop+0x13ec>)
 800374e:	486f      	ldr	r0, [pc, #444]	@ (800390c <System_UI_Loop+0x13dc>)
 8003750:	f001 fe94 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Greedy Snake") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8003754:	2304      	movs	r3, #4
 8003756:	9301      	str	r3, [sp, #4]
 8003758:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003762:	4a6f      	ldr	r2, [pc, #444]	@ (8003920 <System_UI_Loop+0x13f0>)
 8003764:	496f      	ldr	r1, [pc, #444]	@ (8003924 <System_UI_Loop+0x13f4>)
 8003766:	4870      	ldr	r0, [pc, #448]	@ (8003928 <System_UI_Loop+0x13f8>)
 8003768:	f001 fe88 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Snake") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 800376c:	230c      	movs	r3, #12
 800376e:	9301      	str	r3, [sp, #4]
 8003770:	2364      	movs	r3, #100	@ 0x64
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	4b6d      	ldr	r3, [pc, #436]	@ (800392c <System_UI_Loop+0x13fc>)
 8003776:	4a6e      	ldr	r2, [pc, #440]	@ (8003930 <System_UI_Loop+0x1400>)
 8003778:	496e      	ldr	r1, [pc, #440]	@ (8003934 <System_UI_Loop+0x1404>)
 800377a:	486b      	ldr	r0, [pc, #428]	@ (8003928 <System_UI_Loop+0x13f8>)
 800377c:	f001 fe7e 	bl	800547c <OLED_DoTweenObject>
            break;
 8003780:	e072      	b.n	8003868 <System_UI_Loop+0x1338>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8003782:	2304      	movs	r3, #4
 8003784:	9301      	str	r3, [sp, #4]
 8003786:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	4a5c      	ldr	r2, [pc, #368]	@ (8003904 <System_UI_Loop+0x13d4>)
 8003792:	4961      	ldr	r1, [pc, #388]	@ (8003918 <System_UI_Loop+0x13e8>)
 8003794:	485d      	ldr	r0, [pc, #372]	@ (800390c <System_UI_Loop+0x13dc>)
 8003796:	f001 fe71 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 800379a:	2304      	movs	r3, #4
 800379c:	9301      	str	r3, [sp, #4]
 800379e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	4b56      	ldr	r3, [pc, #344]	@ (8003900 <System_UI_Loop+0x13d0>)
 80037a6:	4a5a      	ldr	r2, [pc, #360]	@ (8003910 <System_UI_Loop+0x13e0>)
 80037a8:	495a      	ldr	r1, [pc, #360]	@ (8003914 <System_UI_Loop+0x13e4>)
 80037aa:	4858      	ldr	r0, [pc, #352]	@ (800390c <System_UI_Loop+0x13dc>)
 80037ac:	f001 fe66 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80037b0:	2304      	movs	r3, #4
 80037b2:	9301      	str	r3, [sp, #4]
 80037b4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	4b51      	ldr	r3, [pc, #324]	@ (8003900 <System_UI_Loop+0x13d0>)
 80037bc:	4a54      	ldr	r2, [pc, #336]	@ (8003910 <System_UI_Loop+0x13e0>)
 80037be:	4957      	ldr	r1, [pc, #348]	@ (800391c <System_UI_Loop+0x13ec>)
 80037c0:	4852      	ldr	r0, [pc, #328]	@ (800390c <System_UI_Loop+0x13dc>)
 80037c2:	f001 fe5b 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Here is 2048!") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 80037c6:	2304      	movs	r3, #4
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80037d4:	4a58      	ldr	r2, [pc, #352]	@ (8003938 <System_UI_Loop+0x1408>)
 80037d6:	4953      	ldr	r1, [pc, #332]	@ (8003924 <System_UI_Loop+0x13f4>)
 80037d8:	4853      	ldr	r0, [pc, #332]	@ (8003928 <System_UI_Loop+0x13f8>)
 80037da:	f001 fe4f 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("2048") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 80037de:	230c      	movs	r3, #12
 80037e0:	9301      	str	r3, [sp, #4]
 80037e2:	2364      	movs	r3, #100	@ 0x64
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	4b51      	ldr	r3, [pc, #324]	@ (800392c <System_UI_Loop+0x13fc>)
 80037e8:	4a54      	ldr	r2, [pc, #336]	@ (800393c <System_UI_Loop+0x140c>)
 80037ea:	4952      	ldr	r1, [pc, #328]	@ (8003934 <System_UI_Loop+0x1404>)
 80037ec:	484e      	ldr	r0, [pc, #312]	@ (8003928 <System_UI_Loop+0x13f8>)
 80037ee:	f001 fe45 	bl	800547c <OLED_DoTweenObject>
            break;
 80037f2:	e039      	b.n	8003868 <System_UI_Loop+0x1338>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 80037f4:	2304      	movs	r3, #4
 80037f6:	9301      	str	r3, [sp, #4]
 80037f8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	4a43      	ldr	r2, [pc, #268]	@ (8003910 <System_UI_Loop+0x13e0>)
 8003804:	4945      	ldr	r1, [pc, #276]	@ (800391c <System_UI_Loop+0x13ec>)
 8003806:	4841      	ldr	r0, [pc, #260]	@ (800390c <System_UI_Loop+0x13dc>)
 8003808:	f001 fe38 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 800380c:	2304      	movs	r3, #4
 800380e:	9301      	str	r3, [sp, #4]
 8003810:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	4b3a      	ldr	r3, [pc, #232]	@ (8003900 <System_UI_Loop+0x13d0>)
 8003818:	4a3d      	ldr	r2, [pc, #244]	@ (8003910 <System_UI_Loop+0x13e0>)
 800381a:	493e      	ldr	r1, [pc, #248]	@ (8003914 <System_UI_Loop+0x13e4>)
 800381c:	483b      	ldr	r0, [pc, #236]	@ (800390c <System_UI_Loop+0x13dc>)
 800381e:	f001 fe2d 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003822:	2304      	movs	r3, #4
 8003824:	9301      	str	r3, [sp, #4]
 8003826:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	4b34      	ldr	r3, [pc, #208]	@ (8003900 <System_UI_Loop+0x13d0>)
 800382e:	4a35      	ldr	r2, [pc, #212]	@ (8003904 <System_UI_Loop+0x13d4>)
 8003830:	4939      	ldr	r1, [pc, #228]	@ (8003918 <System_UI_Loop+0x13e8>)
 8003832:	4836      	ldr	r0, [pc, #216]	@ (800390c <System_UI_Loop+0x13dc>)
 8003834:	f001 fe22 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8003838:	2304      	movs	r3, #4
 800383a:	9301      	str	r3, [sp, #4]
 800383c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003846:	4a36      	ldr	r2, [pc, #216]	@ (8003920 <System_UI_Loop+0x13f0>)
 8003848:	4936      	ldr	r1, [pc, #216]	@ (8003924 <System_UI_Loop+0x13f4>)
 800384a:	4837      	ldr	r0, [pc, #220]	@ (8003928 <System_UI_Loop+0x13f8>)
 800384c:	f001 fe16 	bl	800547c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 8003850:	230c      	movs	r3, #12
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	2364      	movs	r3, #100	@ 0x64
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	4b34      	ldr	r3, [pc, #208]	@ (800392c <System_UI_Loop+0x13fc>)
 800385a:	4a38      	ldr	r2, [pc, #224]	@ (800393c <System_UI_Loop+0x140c>)
 800385c:	4935      	ldr	r1, [pc, #212]	@ (8003934 <System_UI_Loop+0x1404>)
 800385e:	4832      	ldr	r0, [pc, #200]	@ (8003928 <System_UI_Loop+0x13f8>)
 8003860:	f001 fe0c 	bl	800547c <OLED_DoTweenObject>
            break;
 8003864:	e000      	b.n	8003868 <System_UI_Loop+0x1338>
            break;
 8003866:	bf00      	nop
        switch (menuSelection)
 8003868:	e06d      	b.n	8003946 <System_UI_Loop+0x1416>
        }
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_GAMES && menuSelection == 1)
 800386a:	4b22      	ldr	r3, [pc, #136]	@ (80038f4 <System_UI_Loop+0x13c4>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b03      	cmp	r3, #3
 8003870:	d10d      	bne.n	800388e <System_UI_Loop+0x135e>
 8003872:	4b21      	ldr	r3, [pc, #132]	@ (80038f8 <System_UI_Loop+0x13c8>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b05      	cmp	r3, #5
 8003878:	d109      	bne.n	800388e <System_UI_Loop+0x135e>
 800387a:	4b20      	ldr	r3, [pc, #128]	@ (80038fc <System_UI_Loop+0x13cc>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d105      	bne.n	800388e <System_UI_Loop+0x135e>
    {
        cancelSelection = true;
 8003882:	4b2f      	ldr	r3, [pc, #188]	@ (8003940 <System_UI_Loop+0x1410>)
 8003884:	2201      	movs	r2, #1
 8003886:	701a      	strb	r2, [r3, #0]
        Snake_GameLoop();
 8003888:	f7fd f9ca 	bl	8000c20 <Snake_GameLoop>
 800388c:	e05b      	b.n	8003946 <System_UI_Loop+0x1416>
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_GAMES && menuSelection == 2)
 800388e:	4b19      	ldr	r3, [pc, #100]	@ (80038f4 <System_UI_Loop+0x13c4>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b03      	cmp	r3, #3
 8003894:	d10d      	bne.n	80038b2 <System_UI_Loop+0x1382>
 8003896:	4b18      	ldr	r3, [pc, #96]	@ (80038f8 <System_UI_Loop+0x13c8>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b05      	cmp	r3, #5
 800389c:	d109      	bne.n	80038b2 <System_UI_Loop+0x1382>
 800389e:	4b17      	ldr	r3, [pc, #92]	@ (80038fc <System_UI_Loop+0x13cc>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d105      	bne.n	80038b2 <System_UI_Loop+0x1382>
    {
        cancelSelection = true;
 80038a6:	4b26      	ldr	r3, [pc, #152]	@ (8003940 <System_UI_Loop+0x1410>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]
        Game2048_GameLoop();
 80038ac:	f7fd feca 	bl	8001644 <Game2048_GameLoop>
 80038b0:	e049      	b.n	8003946 <System_UI_Loop+0x1416>
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_TOOLS && menuSelection == 1)
 80038b2:	4b10      	ldr	r3, [pc, #64]	@ (80038f4 <System_UI_Loop+0x13c4>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d10b      	bne.n	80038d2 <System_UI_Loop+0x13a2>
 80038ba:	4b0f      	ldr	r3, [pc, #60]	@ (80038f8 <System_UI_Loop+0x13c8>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d107      	bne.n	80038d2 <System_UI_Loop+0x13a2>
 80038c2:	4b0e      	ldr	r3, [pc, #56]	@ (80038fc <System_UI_Loop+0x13cc>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d103      	bne.n	80038d2 <System_UI_Loop+0x13a2>
    {
        cancelSelection = true;
 80038ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003940 <System_UI_Loop+0x1410>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	701a      	strb	r2, [r3, #0]
 80038d0:	e039      	b.n	8003946 <System_UI_Loop+0x1416>
        // Calculator();
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_TOOLS && menuSelection == 2)
 80038d2:	4b08      	ldr	r3, [pc, #32]	@ (80038f4 <System_UI_Loop+0x13c4>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d135      	bne.n	8003946 <System_UI_Loop+0x1416>
 80038da:	4b07      	ldr	r3, [pc, #28]	@ (80038f8 <System_UI_Loop+0x13c8>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b04      	cmp	r3, #4
 80038e0:	d131      	bne.n	8003946 <System_UI_Loop+0x1416>
 80038e2:	4b06      	ldr	r3, [pc, #24]	@ (80038fc <System_UI_Loop+0x13cc>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d12d      	bne.n	8003946 <System_UI_Loop+0x1416>
    {
        cancelSelection = true;
 80038ea:	4b15      	ldr	r3, [pc, #84]	@ (8003940 <System_UI_Loop+0x1410>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	701a      	strb	r2, [r3, #0]
 80038f0:	e029      	b.n	8003946 <System_UI_Loop+0x1416>
 80038f2:	bf00      	nop
 80038f4:	20000001 	.word	0x20000001
 80038f8:	20000b19 	.word	0x20000b19
 80038fc:	20000002 	.word	0x20000002
 8003900:	c1200000 	.word	0xc1200000
 8003904:	42480000 	.word	0x42480000
 8003908:	0800b024 	.word	0x0800b024
 800390c:	200032e4 	.word	0x200032e4
 8003910:	42600000 	.word	0x42600000
 8003914:	0800b064 	.word	0x0800b064
 8003918:	0800b070 	.word	0x0800b070
 800391c:	0800b07c 	.word	0x0800b07c
 8003920:	42960000 	.word	0x42960000
 8003924:	0800b1e8 	.word	0x0800b1e8
 8003928:	200038d8 	.word	0x200038d8
 800392c:	41200000 	.word	0x41200000
 8003930:	42040000 	.word	0x42040000
 8003934:	0800b200 	.word	0x0800b200
 8003938:	42a20000 	.word	0x42a20000
 800393c:	41d80000 	.word	0x41d80000
 8003940:	20000b1b 	.word	0x20000b1b
            break;
 8003944:	bf00      	nop
    
    
#pragma endregion PlayerSelection

#pragma region ResetAnimation //完成换级时候让动画复位
    if (menuRank == 1 && (OLED_GetAnimationStates(&Games_AnimationManager, "Snake") == 0))
 8003946:	4b2e      	ldr	r3, [pc, #184]	@ (8003a00 <System_UI_Loop+0x14d0>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d126      	bne.n	800399c <System_UI_Loop+0x146c>
 800394e:	492d      	ldr	r1, [pc, #180]	@ (8003a04 <System_UI_Loop+0x14d4>)
 8003950:	482d      	ldr	r0, [pc, #180]	@ (8003a08 <System_UI_Loop+0x14d8>)
 8003952:	f001 fd7d 	bl	8005450 <OLED_GetAnimationStates>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d11f      	bne.n	800399c <System_UI_Loop+0x146c>
    {
        OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, EASE_IN_CIRC);
 800395c:	230a      	movs	r3, #10
 800395e:	9301      	str	r3, [sp, #4]
 8003960:	2301      	movs	r3, #1
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003968:	4a28      	ldr	r2, [pc, #160]	@ (8003a0c <System_UI_Loop+0x14dc>)
 800396a:	4926      	ldr	r1, [pc, #152]	@ (8003a04 <System_UI_Loop+0x14d4>)
 800396c:	4826      	ldr	r0, [pc, #152]	@ (8003a08 <System_UI_Loop+0x14d8>)
 800396e:	f001 fd85 	bl	800547c <OLED_DoTweenObject>
        OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, EASE_IN_CIRC);
 8003972:	230a      	movs	r3, #10
 8003974:	9301      	str	r3, [sp, #4]
 8003976:	2301      	movs	r3, #1
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	4b25      	ldr	r3, [pc, #148]	@ (8003a10 <System_UI_Loop+0x14e0>)
 800397c:	4a23      	ldr	r2, [pc, #140]	@ (8003a0c <System_UI_Loop+0x14dc>)
 800397e:	4925      	ldr	r1, [pc, #148]	@ (8003a14 <System_UI_Loop+0x14e4>)
 8003980:	4821      	ldr	r0, [pc, #132]	@ (8003a08 <System_UI_Loop+0x14d8>)
 8003982:	f001 fd7b 	bl	800547c <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, EASE_IN_CIRC);
 8003986:	230a      	movs	r3, #10
 8003988:	9301      	str	r3, [sp, #4]
 800398a:	2301      	movs	r3, #1
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	4b22      	ldr	r3, [pc, #136]	@ (8003a18 <System_UI_Loop+0x14e8>)
 8003990:	4a1e      	ldr	r2, [pc, #120]	@ (8003a0c <System_UI_Loop+0x14dc>)
 8003992:	4922      	ldr	r1, [pc, #136]	@ (8003a1c <System_UI_Loop+0x14ec>)
 8003994:	4822      	ldr	r0, [pc, #136]	@ (8003a20 <System_UI_Loop+0x14f0>)
 8003996:	f001 fd71 	bl	800547c <OLED_DoTweenObject>
 800399a:	e028      	b.n	80039ee <System_UI_Loop+0x14be>

    }
    else if (menuRank == 1 && OLED_GetAnimationStates(&Tools_AnimationManager, "Calculator") == 0)
 800399c:	4b18      	ldr	r3, [pc, #96]	@ (8003a00 <System_UI_Loop+0x14d0>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d106      	bne.n	80039b2 <System_UI_Loop+0x1482>
 80039a4:	491f      	ldr	r1, [pc, #124]	@ (8003a24 <System_UI_Loop+0x14f4>)
 80039a6:	4820      	ldr	r0, [pc, #128]	@ (8003a28 <System_UI_Loop+0x14f8>)
 80039a8:	f001 fd52 	bl	8005450 <OLED_GetAnimationStates>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d01d      	beq.n	80039ee <System_UI_Loop+0x14be>
    {

    }
    else if (menuRank == 1 && OLED_GetAnimationStates(&Status_AnimationManager,  "RunningTime") == 0)
 80039b2:	4b13      	ldr	r3, [pc, #76]	@ (8003a00 <System_UI_Loop+0x14d0>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d106      	bne.n	80039c8 <System_UI_Loop+0x1498>
 80039ba:	491c      	ldr	r1, [pc, #112]	@ (8003a2c <System_UI_Loop+0x14fc>)
 80039bc:	481c      	ldr	r0, [pc, #112]	@ (8003a30 <System_UI_Loop+0x1500>)
 80039be:	f001 fd47 	bl	8005450 <OLED_GetAnimationStates>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d012      	beq.n	80039ee <System_UI_Loop+0x14be>
    {

    }
    else if (menuRank == 1 && OLED_GetAnimationStates(&Settings_AnimationManager, "ShowFPS"))
 80039c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003a00 <System_UI_Loop+0x14d0>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d106      	bne.n	80039de <System_UI_Loop+0x14ae>
 80039d0:	4918      	ldr	r1, [pc, #96]	@ (8003a34 <System_UI_Loop+0x1504>)
 80039d2:	4819      	ldr	r0, [pc, #100]	@ (8003a38 <System_UI_Loop+0x1508>)
 80039d4:	f001 fd3c 	bl	8005450 <OLED_GetAnimationStates>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d107      	bne.n	80039ee <System_UI_Loop+0x14be>
    {
        /* code */
    }
    else if (menuRank == 1 && OLED_GetAnimationStates(&About_AnimationManager, "Developer"))
 80039de:	4b08      	ldr	r3, [pc, #32]	@ (8003a00 <System_UI_Loop+0x14d0>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d103      	bne.n	80039ee <System_UI_Loop+0x14be>
 80039e6:	4915      	ldr	r1, [pc, #84]	@ (8003a3c <System_UI_Loop+0x150c>)
 80039e8:	4815      	ldr	r0, [pc, #84]	@ (8003a40 <System_UI_Loop+0x1510>)
 80039ea:	f001 fd31 	bl	8005450 <OLED_GetAnimationStates>
    
    

#pragma endregion ResetAnimation

    preMenuSelection = menuSelection;
 80039ee:	4b15      	ldr	r3, [pc, #84]	@ (8003a44 <System_UI_Loop+0x1514>)
 80039f0:	781a      	ldrb	r2, [r3, #0]
 80039f2:	4b15      	ldr	r3, [pc, #84]	@ (8003a48 <System_UI_Loop+0x1518>)
 80039f4:	701a      	strb	r2, [r3, #0]
}
 80039f6:	bf00      	nop
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000001 	.word	0x20000001
 8003a04:	0800b148 	.word	0x0800b148
 8003a08:	20001520 	.word	0x20001520
 8003a0c:	c2b40000 	.word	0xc2b40000
 8003a10:	41e80000 	.word	0x41e80000
 8003a14:	0800b150 	.word	0x0800b150
 8003a18:	42280000 	.word	0x42280000
 8003a1c:	0800b158 	.word	0x0800b158
 8003a20:	200038d8 	.word	0x200038d8
 8003a24:	0800b164 	.word	0x0800b164
 8003a28:	20001b14 	.word	0x20001b14
 8003a2c:	0800b17c 	.word	0x0800b17c
 8003a30:	20002cf0 	.word	0x20002cf0
 8003a34:	0800b1a8 	.word	0x0800b1a8
 8003a38:	20002108 	.word	0x20002108
 8003a3c:	0800b1bc 	.word	0x0800b1bc
 8003a40:	200026fc 	.word	0x200026fc
 8003a44:	20000002 	.word	0x20000002
 8003a48:	20000b1a 	.word	0x20000b1a

08003a4c <SystemGetsSignal>:

void SystemGetsSignal() // 这里是旋钮数据的获取
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af02      	add	r7, sp, #8
#pragma region 管理翻页
    static uint16_t preCount = 32767;
    uint16_t pageCount;
    if (currentPage == UI_PAGE_MENU)
 8003a52:	4ba2      	ldr	r3, [pc, #648]	@ (8003cdc <SystemGetsSignal+0x290>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d102      	bne.n	8003a60 <SystemGetsSignal+0x14>
    {
        pageCount = MainMenuItemCount;
 8003a5a:	2305      	movs	r3, #5
 8003a5c:	80fb      	strh	r3, [r7, #6]
 8003a5e:	e01a      	b.n	8003a96 <SystemGetsSignal+0x4a>
    }
    else if (currentPage == UI_PAGE_SETTINGS)
 8003a60:	4b9e      	ldr	r3, [pc, #632]	@ (8003cdc <SystemGetsSignal+0x290>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d102      	bne.n	8003a6e <SystemGetsSignal+0x22>
    {
        pageCount = SettingsItemCount;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	80fb      	strh	r3, [r7, #6]
 8003a6c:	e013      	b.n	8003a96 <SystemGetsSignal+0x4a>
    }
    else if (currentPage == UI_PAGE_ABOUT)
 8003a6e:	4b9b      	ldr	r3, [pc, #620]	@ (8003cdc <SystemGetsSignal+0x290>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d102      	bne.n	8003a7c <SystemGetsSignal+0x30>
    {
        pageCount = AboutItemCount;
 8003a76:	2306      	movs	r3, #6
 8003a78:	80fb      	strh	r3, [r7, #6]
 8003a7a:	e00c      	b.n	8003a96 <SystemGetsSignal+0x4a>
    }
    else if (currentPage == UI_PAGE_TOOLS)
 8003a7c:	4b97      	ldr	r3, [pc, #604]	@ (8003cdc <SystemGetsSignal+0x290>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d102      	bne.n	8003a8a <SystemGetsSignal+0x3e>
    {
        pageCount = ToolsItemCount;
 8003a84:	2303      	movs	r3, #3
 8003a86:	80fb      	strh	r3, [r7, #6]
 8003a88:	e005      	b.n	8003a96 <SystemGetsSignal+0x4a>
    }
    else if (currentPage == UI_PAGE_GAMES)
 8003a8a:	4b94      	ldr	r3, [pc, #592]	@ (8003cdc <SystemGetsSignal+0x290>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b05      	cmp	r3, #5
 8003a90:	d101      	bne.n	8003a96 <SystemGetsSignal+0x4a>
    {
        pageCount = GamesItemCount;
 8003a92:	2303      	movs	r3, #3
 8003a94:	80fb      	strh	r3, [r7, #6]
    }

    if (!cancelSelection)
 8003a96:	4b92      	ldr	r3, [pc, #584]	@ (8003ce0 <SystemGetsSignal+0x294>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	f083 0301 	eor.w	r3, r3, #1
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d039      	beq.n	8003b18 <SystemGetsSignal+0xcc>
    {
        if (count - preCount > 1)
 8003aa4:	4b8f      	ldr	r3, [pc, #572]	@ (8003ce4 <SystemGetsSignal+0x298>)
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4b8f      	ldr	r3, [pc, #572]	@ (8003ce8 <SystemGetsSignal+0x29c>)
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	dd14      	ble.n	8003ade <SystemGetsSignal+0x92>
        {
            if (menuSelection < pageCount)
 8003ab4:	4b8d      	ldr	r3, [pc, #564]	@ (8003cec <SystemGetsSignal+0x2a0>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	88fb      	ldrh	r3, [r7, #6]
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d906      	bls.n	8003ace <SystemGetsSignal+0x82>
            {
                menuSelection++;
 8003ac0:	4b8a      	ldr	r3, [pc, #552]	@ (8003cec <SystemGetsSignal+0x2a0>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	4b88      	ldr	r3, [pc, #544]	@ (8003cec <SystemGetsSignal+0x2a0>)
 8003aca:	701a      	strb	r2, [r3, #0]
 8003acc:	e002      	b.n	8003ad4 <SystemGetsSignal+0x88>
            }
            else
            {
                menuSelection = 1;
 8003ace:	4b87      	ldr	r3, [pc, #540]	@ (8003cec <SystemGetsSignal+0x2a0>)
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	701a      	strb	r2, [r3, #0]
            }

            preCount = count;
 8003ad4:	4b83      	ldr	r3, [pc, #524]	@ (8003ce4 <SystemGetsSignal+0x298>)
 8003ad6:	881a      	ldrh	r2, [r3, #0]
 8003ad8:	4b83      	ldr	r3, [pc, #524]	@ (8003ce8 <SystemGetsSignal+0x29c>)
 8003ada:	801a      	strh	r2, [r3, #0]
 8003adc:	e020      	b.n	8003b20 <SystemGetsSignal+0xd4>
        }
        else if (count - preCount < -1)
 8003ade:	4b81      	ldr	r3, [pc, #516]	@ (8003ce4 <SystemGetsSignal+0x298>)
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	4b80      	ldr	r3, [pc, #512]	@ (8003ce8 <SystemGetsSignal+0x29c>)
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aee:	da17      	bge.n	8003b20 <SystemGetsSignal+0xd4>
        {

            if (menuSelection > 1)
 8003af0:	4b7e      	ldr	r3, [pc, #504]	@ (8003cec <SystemGetsSignal+0x2a0>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d906      	bls.n	8003b06 <SystemGetsSignal+0xba>
            {
                menuSelection--;
 8003af8:	4b7c      	ldr	r3, [pc, #496]	@ (8003cec <SystemGetsSignal+0x2a0>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	4b7a      	ldr	r3, [pc, #488]	@ (8003cec <SystemGetsSignal+0x2a0>)
 8003b02:	701a      	strb	r2, [r3, #0]
 8003b04:	e003      	b.n	8003b0e <SystemGetsSignal+0xc2>
            }
            else
            {
                menuSelection = pageCount;
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	4b78      	ldr	r3, [pc, #480]	@ (8003cec <SystemGetsSignal+0x2a0>)
 8003b0c:	701a      	strb	r2, [r3, #0]
            }

            preCount = count;
 8003b0e:	4b75      	ldr	r3, [pc, #468]	@ (8003ce4 <SystemGetsSignal+0x298>)
 8003b10:	881a      	ldrh	r2, [r3, #0]
 8003b12:	4b75      	ldr	r3, [pc, #468]	@ (8003ce8 <SystemGetsSignal+0x29c>)
 8003b14:	801a      	strh	r2, [r3, #0]
 8003b16:	e003      	b.n	8003b20 <SystemGetsSignal+0xd4>
        }
    }
    else
        preCount = count;
 8003b18:	4b72      	ldr	r3, [pc, #456]	@ (8003ce4 <SystemGetsSignal+0x298>)
 8003b1a:	881a      	ldrh	r2, [r3, #0]
 8003b1c:	4b72      	ldr	r3, [pc, #456]	@ (8003ce8 <SystemGetsSignal+0x29c>)
 8003b1e:	801a      	strh	r2, [r3, #0]

#pragma endregion 管理翻页

    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8003b20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b24:	4872      	ldr	r0, [pc, #456]	@ (8003cf0 <SystemGetsSignal+0x2a4>)
 8003b26:	f002 fd6d 	bl	8006604 <HAL_GPIO_ReadPin>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f040 835f 	bne.w	80041f0 <SystemGetsSignal+0x7a4>
    {
        HAL_Delay(50); // 防抖动延时
 8003b32:	2032      	movs	r0, #50	@ 0x32
 8003b34:	f002 f950 	bl	8005dd8 <HAL_Delay>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && !gameOver)
 8003b38:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b3c:	486c      	ldr	r0, [pc, #432]	@ (8003cf0 <SystemGetsSignal+0x2a4>)
 8003b3e:	f002 fd61 	bl	8006604 <HAL_GPIO_ReadPin>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f040 8353 	bne.w	80041f0 <SystemGetsSignal+0x7a4>
 8003b4a:	4b6a      	ldr	r3, [pc, #424]	@ (8003cf4 <SystemGetsSignal+0x2a8>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	f083 0301 	eor.w	r3, r3, #1
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 834b 	beq.w	80041f0 <SystemGetsSignal+0x7a4>
        {
            if (menuRank == 1 && menuSelection == 1)
 8003b5a:	4b67      	ldr	r3, [pc, #412]	@ (8003cf8 <SystemGetsSignal+0x2ac>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	f040 80e8 	bne.w	8003d34 <SystemGetsSignal+0x2e8>
 8003b64:	4b61      	ldr	r3, [pc, #388]	@ (8003cec <SystemGetsSignal+0x2a0>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	f040 80e3 	bne.w	8003d34 <SystemGetsSignal+0x2e8>
            {
                menuRank = 2;
 8003b6e:	4b62      	ldr	r3, [pc, #392]	@ (8003cf8 <SystemGetsSignal+0x2ac>)
 8003b70:	2202      	movs	r2, #2
 8003b72:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8003b74:	4b59      	ldr	r3, [pc, #356]	@ (8003cdc <SystemGetsSignal+0x290>)
 8003b76:	2205      	movs	r2, #5
 8003b78:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 1000, EASE_IN_CIRC);
 8003b7a:	4b5c      	ldr	r3, [pc, #368]	@ (8003cec <SystemGetsSignal+0x2a0>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	f1c3 0202 	rsb	r2, r3, #2
 8003b82:	4613      	mov	r3, r2
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3303      	adds	r3, #3
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fc fba8 	bl	80002e4 <__aeabi_i2f>
 8003b94:	4603      	mov	r3, r0
 8003b96:	220a      	movs	r2, #10
 8003b98:	9201      	str	r2, [sp, #4]
 8003b9a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b9e:	9200      	str	r2, [sp, #0]
 8003ba0:	4a56      	ldr	r2, [pc, #344]	@ (8003cfc <SystemGetsSignal+0x2b0>)
 8003ba2:	4957      	ldr	r1, [pc, #348]	@ (8003d00 <SystemGetsSignal+0x2b4>)
 8003ba4:	4857      	ldr	r0, [pc, #348]	@ (8003d04 <SystemGetsSignal+0x2b8>)
 8003ba6:	f001 fc69 	bl	800547c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003baa:	2064      	movs	r0, #100	@ 0x64
 8003bac:	f002 f914 	bl	8005dd8 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 1000, EASE_IN_CIRC);
 8003bb0:	4b4e      	ldr	r3, [pc, #312]	@ (8003cec <SystemGetsSignal+0x2a0>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	f1c3 0203 	rsb	r2, r3, #3
 8003bb8:	4613      	mov	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	3303      	adds	r3, #3
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fc fb8d 	bl	80002e4 <__aeabi_i2f>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	220a      	movs	r2, #10
 8003bce:	9201      	str	r2, [sp, #4]
 8003bd0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003bd4:	9200      	str	r2, [sp, #0]
 8003bd6:	4a49      	ldr	r2, [pc, #292]	@ (8003cfc <SystemGetsSignal+0x2b0>)
 8003bd8:	494b      	ldr	r1, [pc, #300]	@ (8003d08 <SystemGetsSignal+0x2bc>)
 8003bda:	484a      	ldr	r0, [pc, #296]	@ (8003d04 <SystemGetsSignal+0x2b8>)
 8003bdc:	f001 fc4e 	bl	800547c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003be0:	2064      	movs	r0, #100	@ 0x64
 8003be2:	f002 f8f9 	bl	8005dd8 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 1000, EASE_IN_CIRC);
 8003be6:	4b41      	ldr	r3, [pc, #260]	@ (8003cec <SystemGetsSignal+0x2a0>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	f1c3 0204 	rsb	r2, r3, #4
 8003bee:	4613      	mov	r3, r2
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3303      	adds	r3, #3
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fc fb72 	bl	80002e4 <__aeabi_i2f>
 8003c00:	4603      	mov	r3, r0
 8003c02:	220a      	movs	r2, #10
 8003c04:	9201      	str	r2, [sp, #4]
 8003c06:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c0a:	9200      	str	r2, [sp, #0]
 8003c0c:	4a3b      	ldr	r2, [pc, #236]	@ (8003cfc <SystemGetsSignal+0x2b0>)
 8003c0e:	493f      	ldr	r1, [pc, #252]	@ (8003d0c <SystemGetsSignal+0x2c0>)
 8003c10:	483c      	ldr	r0, [pc, #240]	@ (8003d04 <SystemGetsSignal+0x2b8>)
 8003c12:	f001 fc33 	bl	800547c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003c16:	2064      	movs	r0, #100	@ 0x64
 8003c18:	f002 f8de 	bl	8005dd8 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), 1000, EASE_IN_CIRC);
 8003c1c:	4b33      	ldr	r3, [pc, #204]	@ (8003cec <SystemGetsSignal+0x2a0>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	f1c3 0205 	rsb	r2, r3, #5
 8003c24:	4613      	mov	r3, r2
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3303      	adds	r3, #3
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fc fb57 	bl	80002e4 <__aeabi_i2f>
 8003c36:	4603      	mov	r3, r0
 8003c38:	220a      	movs	r2, #10
 8003c3a:	9201      	str	r2, [sp, #4]
 8003c3c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c40:	9200      	str	r2, [sp, #0]
 8003c42:	4a2e      	ldr	r2, [pc, #184]	@ (8003cfc <SystemGetsSignal+0x2b0>)
 8003c44:	4932      	ldr	r1, [pc, #200]	@ (8003d10 <SystemGetsSignal+0x2c4>)
 8003c46:	482f      	ldr	r0, [pc, #188]	@ (8003d04 <SystemGetsSignal+0x2b8>)
 8003c48:	f001 fc18 	bl	800547c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003c4c:	2064      	movs	r0, #100	@ 0x64
 8003c4e:	f002 f8c3 	bl	8005dd8 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), 1000, EASE_IN_CIRC);
 8003c52:	4b26      	ldr	r3, [pc, #152]	@ (8003cec <SystemGetsSignal+0x2a0>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	f1c3 0206 	rsb	r2, r3, #6
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	3303      	adds	r3, #3
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fc fb3c 	bl	80002e4 <__aeabi_i2f>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	220a      	movs	r2, #10
 8003c70:	9201      	str	r2, [sp, #4]
 8003c72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c76:	9200      	str	r2, [sp, #0]
 8003c78:	4a20      	ldr	r2, [pc, #128]	@ (8003cfc <SystemGetsSignal+0x2b0>)
 8003c7a:	4926      	ldr	r1, [pc, #152]	@ (8003d14 <SystemGetsSignal+0x2c8>)
 8003c7c:	4821      	ldr	r0, [pc, #132]	@ (8003d04 <SystemGetsSignal+0x2b8>)
 8003c7e:	f001 fbfd 	bl	800547c <OLED_DoTweenObject>

                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003c82:	230a      	movs	r3, #10
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003c90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003c94:	4920      	ldr	r1, [pc, #128]	@ (8003d18 <SystemGetsSignal+0x2cc>)
 8003c96:	4821      	ldr	r0, [pc, #132]	@ (8003d1c <SystemGetsSignal+0x2d0>)
 8003c98:	f001 fbf0 	bl	800547c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003c9c:	2064      	movs	r0, #100	@ 0x64
 8003c9e:	f002 f89b 	bl	8005dd8 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8003ca2:	230a      	movs	r3, #10
 8003ca4:	9301      	str	r3, [sp, #4]
 8003ca6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	4b1c      	ldr	r3, [pc, #112]	@ (8003d20 <SystemGetsSignal+0x2d4>)
 8003cae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003cb2:	491c      	ldr	r1, [pc, #112]	@ (8003d24 <SystemGetsSignal+0x2d8>)
 8003cb4:	4819      	ldr	r0, [pc, #100]	@ (8003d1c <SystemGetsSignal+0x2d0>)
 8003cb6:	f001 fbe1 	bl	800547c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003cba:	2064      	movs	r0, #100	@ 0x64
 8003cbc:	f002 f88c 	bl	8005dd8 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 8003cc0:	230a      	movs	r3, #10
 8003cc2:	9301      	str	r3, [sp, #4]
 8003cc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	4b17      	ldr	r3, [pc, #92]	@ (8003d28 <SystemGetsSignal+0x2dc>)
 8003ccc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003cd0:	4916      	ldr	r1, [pc, #88]	@ (8003d2c <SystemGetsSignal+0x2e0>)
 8003cd2:	4817      	ldr	r0, [pc, #92]	@ (8003d30 <SystemGetsSignal+0x2e4>)
 8003cd4:	f001 fbd2 	bl	800547c <OLED_DoTweenObject>
 8003cd8:	e281      	b.n	80041de <SystemGetsSignal+0x792>
 8003cda:	bf00      	nop
 8003cdc:	20000b19 	.word	0x20000b19
 8003ce0:	20000b1b 	.word	0x20000b1b
 8003ce4:	20000304 	.word	0x20000304
 8003ce8:	20000004 	.word	0x20000004
 8003cec:	20000002 	.word	0x20000002
 8003cf0:	40010c00 	.word	0x40010c00
 8003cf4:	20000236 	.word	0x20000236
 8003cf8:	20000001 	.word	0x20000001
 8003cfc:	c2b40000 	.word	0xc2b40000
 8003d00:	0800b20c 	.word	0x0800b20c
 8003d04:	20000f2c 	.word	0x20000f2c
 8003d08:	0800b218 	.word	0x0800b218
 8003d0c:	0800b224 	.word	0x0800b224
 8003d10:	0800b234 	.word	0x0800b234
 8003d14:	0800b244 	.word	0x0800b244
 8003d18:	0800b148 	.word	0x0800b148
 8003d1c:	20001520 	.word	0x20001520
 8003d20:	41e80000 	.word	0x41e80000
 8003d24:	0800b150 	.word	0x0800b150
 8003d28:	42280000 	.word	0x42280000
 8003d2c:	0800b158 	.word	0x0800b158
 8003d30:	200038d8 	.word	0x200038d8
            }
            else if (menuRank == 2 && menuSelection == 3)
 8003d34:	4ba7      	ldr	r3, [pc, #668]	@ (8003fd4 <SystemGetsSignal+0x588>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d17e      	bne.n	8003e3a <SystemGetsSignal+0x3ee>
 8003d3c:	4ba6      	ldr	r3, [pc, #664]	@ (8003fd8 <SystemGetsSignal+0x58c>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d17a      	bne.n	8003e3a <SystemGetsSignal+0x3ee>
            {
                menuRank = 1;
 8003d44:	4ba3      	ldr	r3, [pc, #652]	@ (8003fd4 <SystemGetsSignal+0x588>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	701a      	strb	r2, [r3, #0]
                menuSelection = 1;
 8003d4a:	4ba3      	ldr	r3, [pc, #652]	@ (8003fd8 <SystemGetsSignal+0x58c>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_MENU;
 8003d50:	4ba2      	ldr	r3, [pc, #648]	@ (8003fdc <SystemGetsSignal+0x590>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, 1000, EASE_IN_CIRC);
 8003d56:	230a      	movs	r3, #10
 8003d58:	9301      	str	r3, [sp, #4]
 8003d5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	4b9f      	ldr	r3, [pc, #636]	@ (8003fe0 <SystemGetsSignal+0x594>)
 8003d62:	4aa0      	ldr	r2, [pc, #640]	@ (8003fe4 <SystemGetsSignal+0x598>)
 8003d64:	49a0      	ldr	r1, [pc, #640]	@ (8003fe8 <SystemGetsSignal+0x59c>)
 8003d66:	48a1      	ldr	r0, [pc, #644]	@ (8003fec <SystemGetsSignal+0x5a0>)
 8003d68:	f001 fb88 	bl	800547c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003d6c:	2064      	movs	r0, #100	@ 0x64
 8003d6e:	f002 f833 	bl	8005dd8 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, 1000, EASE_IN_CIRC);
 8003d72:	230a      	movs	r3, #10
 8003d74:	9301      	str	r3, [sp, #4]
 8003d76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	4b9c      	ldr	r3, [pc, #624]	@ (8003ff0 <SystemGetsSignal+0x5a4>)
 8003d7e:	4a99      	ldr	r2, [pc, #612]	@ (8003fe4 <SystemGetsSignal+0x598>)
 8003d80:	499c      	ldr	r1, [pc, #624]	@ (8003ff4 <SystemGetsSignal+0x5a8>)
 8003d82:	489a      	ldr	r0, [pc, #616]	@ (8003fec <SystemGetsSignal+0x5a0>)
 8003d84:	f001 fb7a 	bl	800547c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003d88:	2064      	movs	r0, #100	@ 0x64
 8003d8a:	f002 f825 	bl	8005dd8 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003d8e:	230a      	movs	r3, #10
 8003d90:	9301      	str	r3, [sp, #4]
 8003d92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003d9c:	4a91      	ldr	r2, [pc, #580]	@ (8003fe4 <SystemGetsSignal+0x598>)
 8003d9e:	4996      	ldr	r1, [pc, #600]	@ (8003ff8 <SystemGetsSignal+0x5ac>)
 8003da0:	4896      	ldr	r0, [pc, #600]	@ (8003ffc <SystemGetsSignal+0x5b0>)
 8003da2:	f001 fb6b 	bl	800547c <OLED_DoTweenObject>

                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003da6:	230a      	movs	r3, #10
 8003da8:	9301      	str	r3, [sp, #4]
 8003daa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003db4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003db8:	4991      	ldr	r1, [pc, #580]	@ (8004000 <SystemGetsSignal+0x5b4>)
 8003dba:	4892      	ldr	r0, [pc, #584]	@ (8004004 <SystemGetsSignal+0x5b8>)
 8003dbc:	f001 fb5e 	bl	800547c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003dc0:	2064      	movs	r0, #100	@ 0x64
 8003dc2:	f002 f809 	bl	8005dd8 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8003dc6:	230a      	movs	r3, #10
 8003dc8:	9301      	str	r3, [sp, #4]
 8003dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	4b8d      	ldr	r3, [pc, #564]	@ (8004008 <SystemGetsSignal+0x5bc>)
 8003dd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003dd6:	498d      	ldr	r1, [pc, #564]	@ (800400c <SystemGetsSignal+0x5c0>)
 8003dd8:	488a      	ldr	r0, [pc, #552]	@ (8004004 <SystemGetsSignal+0x5b8>)
 8003dda:	f001 fb4f 	bl	800547c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003dde:	2064      	movs	r0, #100	@ 0x64
 8003de0:	f001 fffa 	bl	8005dd8 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 8003de4:	230a      	movs	r3, #10
 8003de6:	9301      	str	r3, [sp, #4]
 8003de8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	4b88      	ldr	r3, [pc, #544]	@ (8004010 <SystemGetsSignal+0x5c4>)
 8003df0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003df4:	4987      	ldr	r1, [pc, #540]	@ (8004014 <SystemGetsSignal+0x5c8>)
 8003df6:	4883      	ldr	r0, [pc, #524]	@ (8004004 <SystemGetsSignal+0x5b8>)
 8003df8:	f001 fb40 	bl	800547c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003dfc:	2064      	movs	r0, #100	@ 0x64
 8003dfe:	f001 ffeb 	bl	8005dd8 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, 1000, EASE_IN_CIRC);
 8003e02:	230a      	movs	r3, #10
 8003e04:	9301      	str	r3, [sp, #4]
 8003e06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	4b82      	ldr	r3, [pc, #520]	@ (8004018 <SystemGetsSignal+0x5cc>)
 8003e0e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003e12:	4982      	ldr	r1, [pc, #520]	@ (800401c <SystemGetsSignal+0x5d0>)
 8003e14:	487b      	ldr	r0, [pc, #492]	@ (8004004 <SystemGetsSignal+0x5b8>)
 8003e16:	f001 fb31 	bl	800547c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003e1a:	2064      	movs	r0, #100	@ 0x64
 8003e1c:	f001 ffdc 	bl	8005dd8 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, 1000, EASE_IN_CIRC);
 8003e20:	230a      	movs	r3, #10
 8003e22:	9301      	str	r3, [sp, #4]
 8003e24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	4b7d      	ldr	r3, [pc, #500]	@ (8004020 <SystemGetsSignal+0x5d4>)
 8003e2c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003e30:	497c      	ldr	r1, [pc, #496]	@ (8004024 <SystemGetsSignal+0x5d8>)
 8003e32:	4874      	ldr	r0, [pc, #464]	@ (8004004 <SystemGetsSignal+0x5b8>)
 8003e34:	f001 fb22 	bl	800547c <OLED_DoTweenObject>
 8003e38:	e1d1      	b.n	80041de <SystemGetsSignal+0x792>
            }
            else if (menuRank == 2 && menuSelection == 1)
 8003e3a:	4b66      	ldr	r3, [pc, #408]	@ (8003fd4 <SystemGetsSignal+0x588>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d158      	bne.n	8003ef4 <SystemGetsSignal+0x4a8>
 8003e42:	4b65      	ldr	r3, [pc, #404]	@ (8003fd8 <SystemGetsSignal+0x58c>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d154      	bne.n	8003ef4 <SystemGetsSignal+0x4a8>
            {
                menuRank = 3;
 8003e4a:	4b62      	ldr	r3, [pc, #392]	@ (8003fd4 <SystemGetsSignal+0x588>)
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8003e50:	4b62      	ldr	r3, [pc, #392]	@ (8003fdc <SystemGetsSignal+0x590>)
 8003e52:	2205      	movs	r2, #5
 8003e54:	701a      	strb	r2, [r3, #0]
                Snake_InitGame();
 8003e56:	f7fc fd4d 	bl	80008f4 <Snake_InitGame>
                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8003e5a:	2304      	movs	r3, #4
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	2301      	movs	r3, #1
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	4b5f      	ldr	r3, [pc, #380]	@ (8003fe0 <SystemGetsSignal+0x594>)
 8003e64:	4a70      	ldr	r2, [pc, #448]	@ (8004028 <SystemGetsSignal+0x5dc>)
 8003e66:	4971      	ldr	r1, [pc, #452]	@ (800402c <SystemGetsSignal+0x5e0>)
 8003e68:	4871      	ldr	r0, [pc, #452]	@ (8004030 <SystemGetsSignal+0x5e4>)
 8003e6a:	f001 fb07 	bl	800547c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, 1000, EASE_IN_CUBIC);
 8003e6e:	2304      	movs	r3, #4
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	496c      	ldr	r1, [pc, #432]	@ (8004034 <SystemGetsSignal+0x5e8>)
 8003e82:	485e      	ldr	r0, [pc, #376]	@ (8003ffc <SystemGetsSignal+0x5b0>)
 8003e84:	f001 fafa 	bl	800547c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", 0, 8, 1000, EASE_INOUT_CIRC);
 8003e88:	230c      	movs	r3, #12
 8003e8a:	9301      	str	r3, [sp, #4]
 8003e8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	4967      	ldr	r1, [pc, #412]	@ (8004038 <SystemGetsSignal+0x5ec>)
 8003e9c:	4857      	ldr	r0, [pc, #348]	@ (8003ffc <SystemGetsSignal+0x5b0>)
 8003e9e:	f001 faed 	bl	800547c <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003ea2:	230a      	movs	r3, #10
 8003ea4:	9301      	str	r3, [sp, #4]
 8003ea6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003eb0:	4a4c      	ldr	r2, [pc, #304]	@ (8003fe4 <SystemGetsSignal+0x598>)
 8003eb2:	494d      	ldr	r1, [pc, #308]	@ (8003fe8 <SystemGetsSignal+0x59c>)
 8003eb4:	484d      	ldr	r0, [pc, #308]	@ (8003fec <SystemGetsSignal+0x5a0>)
 8003eb6:	f001 fae1 	bl	800547c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003eba:	2064      	movs	r0, #100	@ 0x64
 8003ebc:	f001 ff8c 	bl	8005dd8 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8003ec0:	230a      	movs	r3, #10
 8003ec2:	9301      	str	r3, [sp, #4]
 8003ec4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	4b4f      	ldr	r3, [pc, #316]	@ (8004008 <SystemGetsSignal+0x5bc>)
 8003ecc:	4a45      	ldr	r2, [pc, #276]	@ (8003fe4 <SystemGetsSignal+0x598>)
 8003ece:	4949      	ldr	r1, [pc, #292]	@ (8003ff4 <SystemGetsSignal+0x5a8>)
 8003ed0:	4846      	ldr	r0, [pc, #280]	@ (8003fec <SystemGetsSignal+0x5a0>)
 8003ed2:	f001 fad3 	bl	800547c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003ed6:	2064      	movs	r0, #100	@ 0x64
 8003ed8:	f001 ff7e 	bl	8005dd8 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 8003edc:	230a      	movs	r3, #10
 8003ede:	9301      	str	r3, [sp, #4]
 8003ee0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	4b4a      	ldr	r3, [pc, #296]	@ (8004010 <SystemGetsSignal+0x5c4>)
 8003ee8:	4a3e      	ldr	r2, [pc, #248]	@ (8003fe4 <SystemGetsSignal+0x598>)
 8003eea:	4943      	ldr	r1, [pc, #268]	@ (8003ff8 <SystemGetsSignal+0x5ac>)
 8003eec:	4843      	ldr	r0, [pc, #268]	@ (8003ffc <SystemGetsSignal+0x5b0>)
 8003eee:	f001 fac5 	bl	800547c <OLED_DoTweenObject>
 8003ef2:	e174      	b.n	80041de <SystemGetsSignal+0x792>
            }
            else if (menuRank == 3 && menuSelection == 1 && cancelSelection && UI_PAGE_GAMES && !gameOver)
 8003ef4:	4b37      	ldr	r3, [pc, #220]	@ (8003fd4 <SystemGetsSignal+0x588>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b03      	cmp	r3, #3
 8003efa:	f040 80a9 	bne.w	8004050 <SystemGetsSignal+0x604>
 8003efe:	4b36      	ldr	r3, [pc, #216]	@ (8003fd8 <SystemGetsSignal+0x58c>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	f040 80a4 	bne.w	8004050 <SystemGetsSignal+0x604>
 8003f08:	4b4c      	ldr	r3, [pc, #304]	@ (800403c <SystemGetsSignal+0x5f0>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 809f 	beq.w	8004050 <SystemGetsSignal+0x604>
 8003f12:	4b4b      	ldr	r3, [pc, #300]	@ (8004040 <SystemGetsSignal+0x5f4>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	f083 0301 	eor.w	r3, r3, #1
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 8097 	beq.w	8004050 <SystemGetsSignal+0x604>
            {
                menuRank = 2;
 8003f22:	4b2c      	ldr	r3, [pc, #176]	@ (8003fd4 <SystemGetsSignal+0x588>)
 8003f24:	2202      	movs	r2, #2
 8003f26:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8003f28:	4b2c      	ldr	r3, [pc, #176]	@ (8003fdc <SystemGetsSignal+0x590>)
 8003f2a:	2205      	movs	r2, #5
 8003f2c:	701a      	strb	r2, [r3, #0]
                
                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_End_Y, 1000, EASE_IN_CUBIC);
 8003f2e:	2304      	movs	r3, #4
 8003f30:	9301      	str	r3, [sp, #4]
 8003f32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	4a3a      	ldr	r2, [pc, #232]	@ (8004028 <SystemGetsSignal+0x5dc>)
 8003f3e:	493b      	ldr	r1, [pc, #236]	@ (800402c <SystemGetsSignal+0x5e0>)
 8003f40:	483b      	ldr	r0, [pc, #236]	@ (8004030 <SystemGetsSignal+0x5e4>)
 8003f42:	f001 fa9b 	bl	800547c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Greedy Snake") * 6 + 3, 8, 1000, EASE_IN_CUBIC);
 8003f46:	2304      	movs	r3, #4
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003f54:	4a3b      	ldr	r2, [pc, #236]	@ (8004044 <SystemGetsSignal+0x5f8>)
 8003f56:	4937      	ldr	r1, [pc, #220]	@ (8004034 <SystemGetsSignal+0x5e8>)
 8003f58:	4828      	ldr	r0, [pc, #160]	@ (8003ffc <SystemGetsSignal+0x5b0>)
 8003f5a:	f001 fa8f 	bl	800547c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Snake") * 6 + 3, 10, 1000, EASE_INOUT_CIRC);
 8003f5e:	230c      	movs	r3, #12
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	4b37      	ldr	r3, [pc, #220]	@ (8004048 <SystemGetsSignal+0x5fc>)
 8003f6a:	4a38      	ldr	r2, [pc, #224]	@ (800404c <SystemGetsSignal+0x600>)
 8003f6c:	4932      	ldr	r1, [pc, #200]	@ (8004038 <SystemGetsSignal+0x5ec>)
 8003f6e:	4823      	ldr	r0, [pc, #140]	@ (8003ffc <SystemGetsSignal+0x5b0>)
 8003f70:	f001 fa84 	bl	800547c <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003f74:	230a      	movs	r3, #10
 8003f76:	9301      	str	r3, [sp, #4]
 8003f78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003f82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003f86:	4918      	ldr	r1, [pc, #96]	@ (8003fe8 <SystemGetsSignal+0x59c>)
 8003f88:	4818      	ldr	r0, [pc, #96]	@ (8003fec <SystemGetsSignal+0x5a0>)
 8003f8a:	f001 fa77 	bl	800547c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003f8e:	2064      	movs	r0, #100	@ 0x64
 8003f90:	f001 ff22 	bl	8005dd8 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8003f94:	230a      	movs	r3, #10
 8003f96:	9301      	str	r3, [sp, #4]
 8003f98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8004008 <SystemGetsSignal+0x5bc>)
 8003fa0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003fa4:	4913      	ldr	r1, [pc, #76]	@ (8003ff4 <SystemGetsSignal+0x5a8>)
 8003fa6:	4811      	ldr	r0, [pc, #68]	@ (8003fec <SystemGetsSignal+0x5a0>)
 8003fa8:	f001 fa68 	bl	800547c <OLED_DoTweenObject>
                HAL_Delay(100);
 8003fac:	2064      	movs	r0, #100	@ 0x64
 8003fae:	f001 ff13 	bl	8005dd8 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 8003fb2:	230a      	movs	r3, #10
 8003fb4:	9301      	str	r3, [sp, #4]
 8003fb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	4b14      	ldr	r3, [pc, #80]	@ (8004010 <SystemGetsSignal+0x5c4>)
 8003fbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003fc2:	490d      	ldr	r1, [pc, #52]	@ (8003ff8 <SystemGetsSignal+0x5ac>)
 8003fc4:	480d      	ldr	r0, [pc, #52]	@ (8003ffc <SystemGetsSignal+0x5b0>)
 8003fc6:	f001 fa59 	bl	800547c <OLED_DoTweenObject>
                cancelSelection = false;
 8003fca:	4b1c      	ldr	r3, [pc, #112]	@ (800403c <SystemGetsSignal+0x5f0>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	701a      	strb	r2, [r3, #0]
 8003fd0:	e105      	b.n	80041de <SystemGetsSignal+0x792>
 8003fd2:	bf00      	nop
 8003fd4:	20000001 	.word	0x20000001
 8003fd8:	20000002 	.word	0x20000002
 8003fdc:	20000b19 	.word	0x20000b19
 8003fe0:	c1200000 	.word	0xc1200000
 8003fe4:	c2b40000 	.word	0xc2b40000
 8003fe8:	0800b148 	.word	0x0800b148
 8003fec:	20001520 	.word	0x20001520
 8003ff0:	40400000 	.word	0x40400000
 8003ff4:	0800b150 	.word	0x0800b150
 8003ff8:	0800b158 	.word	0x0800b158
 8003ffc:	200038d8 	.word	0x200038d8
 8004000:	0800b20c 	.word	0x0800b20c
 8004004:	20000f2c 	.word	0x20000f2c
 8004008:	41e80000 	.word	0x41e80000
 800400c:	0800b218 	.word	0x0800b218
 8004010:	42280000 	.word	0x42280000
 8004014:	0800b224 	.word	0x0800b224
 8004018:	425c0000 	.word	0x425c0000
 800401c:	0800b234 	.word	0x0800b234
 8004020:	42880000 	.word	0x42880000
 8004024:	0800b244 	.word	0x0800b244
 8004028:	42600000 	.word	0x42600000
 800402c:	0800b064 	.word	0x0800b064
 8004030:	200032e4 	.word	0x200032e4
 8004034:	0800b1e8 	.word	0x0800b1e8
 8004038:	0800b200 	.word	0x0800b200
 800403c:	20000b1b 	.word	0x20000b1b
 8004040:	20000236 	.word	0x20000236
 8004044:	42960000 	.word	0x42960000
 8004048:	41200000 	.word	0x41200000
 800404c:	42040000 	.word	0x42040000
            }
            else if (menuRank == 2 && menuSelection == 2)
 8004050:	4b69      	ldr	r3, [pc, #420]	@ (80041f8 <SystemGetsSignal+0x7ac>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d158      	bne.n	800410a <SystemGetsSignal+0x6be>
 8004058:	4b68      	ldr	r3, [pc, #416]	@ (80041fc <SystemGetsSignal+0x7b0>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d154      	bne.n	800410a <SystemGetsSignal+0x6be>
            {
                menuRank = 3;
 8004060:	4b65      	ldr	r3, [pc, #404]	@ (80041f8 <SystemGetsSignal+0x7ac>)
 8004062:	2203      	movs	r2, #3
 8004064:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8004066:	4b66      	ldr	r3, [pc, #408]	@ (8004200 <SystemGetsSignal+0x7b4>)
 8004068:	2205      	movs	r2, #5
 800406a:	701a      	strb	r2, [r3, #0]
                Game2048_Init();
 800406c:	f7fc ff3a 	bl	8000ee4 <Game2048_Init>
                OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8004070:	2304      	movs	r3, #4
 8004072:	9301      	str	r3, [sp, #4]
 8004074:	2301      	movs	r3, #1
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	4b62      	ldr	r3, [pc, #392]	@ (8004204 <SystemGetsSignal+0x7b8>)
 800407a:	4a63      	ldr	r2, [pc, #396]	@ (8004208 <SystemGetsSignal+0x7bc>)
 800407c:	4963      	ldr	r1, [pc, #396]	@ (800420c <SystemGetsSignal+0x7c0>)
 800407e:	4864      	ldr	r0, [pc, #400]	@ (8004210 <SystemGetsSignal+0x7c4>)
 8004080:	f001 f9fc 	bl	800547c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, 1000, EASE_IN_CUBIC);
 8004084:	2304      	movs	r3, #4
 8004086:	9301      	str	r3, [sp, #4]
 8004088:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	495f      	ldr	r1, [pc, #380]	@ (8004214 <SystemGetsSignal+0x7c8>)
 8004098:	485f      	ldr	r0, [pc, #380]	@ (8004218 <SystemGetsSignal+0x7cc>)
 800409a:	f001 f9ef 	bl	800547c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", 0, 8, 1000, EASE_INOUT_CIRC);
 800409e:	230c      	movs	r3, #12
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	495a      	ldr	r1, [pc, #360]	@ (800421c <SystemGetsSignal+0x7d0>)
 80040b2:	4859      	ldr	r0, [pc, #356]	@ (8004218 <SystemGetsSignal+0x7cc>)
 80040b4:	f001 f9e2 	bl	800547c <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 80040b8:	230a      	movs	r3, #10
 80040ba:	9301      	str	r3, [sp, #4]
 80040bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80040c6:	4a56      	ldr	r2, [pc, #344]	@ (8004220 <SystemGetsSignal+0x7d4>)
 80040c8:	4956      	ldr	r1, [pc, #344]	@ (8004224 <SystemGetsSignal+0x7d8>)
 80040ca:	4857      	ldr	r0, [pc, #348]	@ (8004228 <SystemGetsSignal+0x7dc>)
 80040cc:	f001 f9d6 	bl	800547c <OLED_DoTweenObject>
                HAL_Delay(100);
 80040d0:	2064      	movs	r0, #100	@ 0x64
 80040d2:	f001 fe81 	bl	8005dd8 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 80040d6:	230a      	movs	r3, #10
 80040d8:	9301      	str	r3, [sp, #4]
 80040da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	4b52      	ldr	r3, [pc, #328]	@ (800422c <SystemGetsSignal+0x7e0>)
 80040e2:	4a4f      	ldr	r2, [pc, #316]	@ (8004220 <SystemGetsSignal+0x7d4>)
 80040e4:	4952      	ldr	r1, [pc, #328]	@ (8004230 <SystemGetsSignal+0x7e4>)
 80040e6:	4850      	ldr	r0, [pc, #320]	@ (8004228 <SystemGetsSignal+0x7dc>)
 80040e8:	f001 f9c8 	bl	800547c <OLED_DoTweenObject>
                HAL_Delay(100);
 80040ec:	2064      	movs	r0, #100	@ 0x64
 80040ee:	f001 fe73 	bl	8005dd8 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 80040f2:	230a      	movs	r3, #10
 80040f4:	9301      	str	r3, [sp, #4]
 80040f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	4b4d      	ldr	r3, [pc, #308]	@ (8004234 <SystemGetsSignal+0x7e8>)
 80040fe:	4a48      	ldr	r2, [pc, #288]	@ (8004220 <SystemGetsSignal+0x7d4>)
 8004100:	494d      	ldr	r1, [pc, #308]	@ (8004238 <SystemGetsSignal+0x7ec>)
 8004102:	4845      	ldr	r0, [pc, #276]	@ (8004218 <SystemGetsSignal+0x7cc>)
 8004104:	f001 f9ba 	bl	800547c <OLED_DoTweenObject>
 8004108:	e069      	b.n	80041de <SystemGetsSignal+0x792>
            }
            else if (menuRank == 3 && menuSelection == 2 && cancelSelection && UI_PAGE_GAMES && !game2048_game_over)
 800410a:	4b3b      	ldr	r3, [pc, #236]	@ (80041f8 <SystemGetsSignal+0x7ac>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b03      	cmp	r3, #3
 8004110:	d165      	bne.n	80041de <SystemGetsSignal+0x792>
 8004112:	4b3a      	ldr	r3, [pc, #232]	@ (80041fc <SystemGetsSignal+0x7b0>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d161      	bne.n	80041de <SystemGetsSignal+0x792>
 800411a:	4b48      	ldr	r3, [pc, #288]	@ (800423c <SystemGetsSignal+0x7f0>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d05d      	beq.n	80041de <SystemGetsSignal+0x792>
 8004122:	4b47      	ldr	r3, [pc, #284]	@ (8004240 <SystemGetsSignal+0x7f4>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	f083 0301 	eor.w	r3, r3, #1
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d056      	beq.n	80041de <SystemGetsSignal+0x792>
            {
                menuRank = 2;
 8004130:	4b31      	ldr	r3, [pc, #196]	@ (80041f8 <SystemGetsSignal+0x7ac>)
 8004132:	2202      	movs	r2, #2
 8004134:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8004136:	4b32      	ldr	r3, [pc, #200]	@ (8004200 <SystemGetsSignal+0x7b4>)
 8004138:	2205      	movs	r2, #5
 800413a:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_End_Y, 1000, EASE_IN_CUBIC);
 800413c:	2304      	movs	r3, #4
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	4a2f      	ldr	r2, [pc, #188]	@ (8004208 <SystemGetsSignal+0x7bc>)
 800414c:	492f      	ldr	r1, [pc, #188]	@ (800420c <SystemGetsSignal+0x7c0>)
 800414e:	4830      	ldr	r0, [pc, #192]	@ (8004210 <SystemGetsSignal+0x7c4>)
 8004150:	f001 f994 	bl	800547c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Here is 2048!") * 6 + 3, 8, 1000, EASE_IN_CUBIC);
 8004154:	2304      	movs	r3, #4
 8004156:	9301      	str	r3, [sp, #4]
 8004158:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004162:	4a38      	ldr	r2, [pc, #224]	@ (8004244 <SystemGetsSignal+0x7f8>)
 8004164:	492b      	ldr	r1, [pc, #172]	@ (8004214 <SystemGetsSignal+0x7c8>)
 8004166:	482c      	ldr	r0, [pc, #176]	@ (8004218 <SystemGetsSignal+0x7cc>)
 8004168:	f001 f988 	bl	800547c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("2048") * 6 + 3, 10, 1000, EASE_INOUT_CIRC);
 800416c:	230c      	movs	r3, #12
 800416e:	9301      	str	r3, [sp, #4]
 8004170:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	4b34      	ldr	r3, [pc, #208]	@ (8004248 <SystemGetsSignal+0x7fc>)
 8004178:	4a34      	ldr	r2, [pc, #208]	@ (800424c <SystemGetsSignal+0x800>)
 800417a:	4928      	ldr	r1, [pc, #160]	@ (800421c <SystemGetsSignal+0x7d0>)
 800417c:	4826      	ldr	r0, [pc, #152]	@ (8004218 <SystemGetsSignal+0x7cc>)
 800417e:	f001 f97d 	bl	800547c <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, 1000, EASE_IN_CIRC);
 8004182:	230a      	movs	r3, #10
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	4b30      	ldr	r3, [pc, #192]	@ (8004250 <SystemGetsSignal+0x804>)
 800418e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004192:	4924      	ldr	r1, [pc, #144]	@ (8004224 <SystemGetsSignal+0x7d8>)
 8004194:	4824      	ldr	r0, [pc, #144]	@ (8004228 <SystemGetsSignal+0x7dc>)
 8004196:	f001 f971 	bl	800547c <OLED_DoTweenObject>
                HAL_Delay(100);
 800419a:	2064      	movs	r0, #100	@ 0x64
 800419c:	f001 fe1c 	bl	8005dd8 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 80041a0:	230a      	movs	r3, #10
 80041a2:	9301      	str	r3, [sp, #4]
 80041a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80041ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80041b2:	491f      	ldr	r1, [pc, #124]	@ (8004230 <SystemGetsSignal+0x7e4>)
 80041b4:	481c      	ldr	r0, [pc, #112]	@ (8004228 <SystemGetsSignal+0x7dc>)
 80041b6:	f001 f961 	bl	800547c <OLED_DoTweenObject>
                HAL_Delay(100);
 80041ba:	2064      	movs	r0, #100	@ 0x64
 80041bc:	f001 fe0c 	bl	8005dd8 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 80041c0:	230a      	movs	r3, #10
 80041c2:	9301      	str	r3, [sp, #4]
 80041c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	4b18      	ldr	r3, [pc, #96]	@ (800422c <SystemGetsSignal+0x7e0>)
 80041cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80041d0:	4919      	ldr	r1, [pc, #100]	@ (8004238 <SystemGetsSignal+0x7ec>)
 80041d2:	4811      	ldr	r0, [pc, #68]	@ (8004218 <SystemGetsSignal+0x7cc>)
 80041d4:	f001 f952 	bl	800547c <OLED_DoTweenObject>
                cancelSelection = false;
 80041d8:	4b18      	ldr	r3, [pc, #96]	@ (800423c <SystemGetsSignal+0x7f0>)
 80041da:	2200      	movs	r2, #0
 80041dc:	701a      	strb	r2, [r3, #0]
            }


            while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 80041de:	bf00      	nop
 80041e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80041e4:	481b      	ldr	r0, [pc, #108]	@ (8004254 <SystemGetsSignal+0x808>)
 80041e6:	f002 fa0d 	bl	8006604 <HAL_GPIO_ReadPin>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0f7      	beq.n	80041e0 <SystemGetsSignal+0x794>
            {
                // 等待按钮释放
            }
        }
    }
}
 80041f0:	bf00      	nop
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	20000001 	.word	0x20000001
 80041fc:	20000002 	.word	0x20000002
 8004200:	20000b19 	.word	0x20000b19
 8004204:	c1200000 	.word	0xc1200000
 8004208:	42480000 	.word	0x42480000
 800420c:	0800b070 	.word	0x0800b070
 8004210:	200032e4 	.word	0x200032e4
 8004214:	0800b1e8 	.word	0x0800b1e8
 8004218:	200038d8 	.word	0x200038d8
 800421c:	0800b200 	.word	0x0800b200
 8004220:	c2b40000 	.word	0xc2b40000
 8004224:	0800b148 	.word	0x0800b148
 8004228:	20001520 	.word	0x20001520
 800422c:	41e80000 	.word	0x41e80000
 8004230:	0800b150 	.word	0x0800b150
 8004234:	42280000 	.word	0x42280000
 8004238:	0800b158 	.word	0x0800b158
 800423c:	20000b1b 	.word	0x20000b1b
 8004240:	20000260 	.word	0x20000260
 8004244:	42a20000 	.word	0x42a20000
 8004248:	41200000 	.word	0x41200000
 800424c:	41d80000 	.word	0x41d80000
 8004250:	40400000 	.word	0x40400000
 8004254:	40010c00 	.word	0x40010c00

08004258 <OLED_EnableDiffMode>:
    }
}

// 启用差分更新模式
void OLED_EnableDiffMode(uint8_t enable)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	4603      	mov	r3, r0
 8004260:	71fb      	strb	r3, [r7, #7]
    diff_mode_enabled = enable;
 8004262:	4a09      	ldr	r2, [pc, #36]	@ (8004288 <OLED_EnableDiffMode+0x30>)
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	7013      	strb	r3, [r2, #0]
    if (enable)
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d008      	beq.n	8004280 <OLED_EnableDiffMode+0x28>
    {
        memcpy(OLED_PrevBuffer, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES);
 800426e:	4a07      	ldr	r2, [pc, #28]	@ (800428c <OLED_EnableDiffMode+0x34>)
 8004270:	4b07      	ldr	r3, [pc, #28]	@ (8004290 <OLED_EnableDiffMode+0x38>)
 8004272:	4610      	mov	r0, r2
 8004274:	4619      	mov	r1, r3
 8004276:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800427a:	461a      	mov	r2, r3
 800427c:	f004 fc65 	bl	8008b4a <memcpy>
    }
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20000f1c 	.word	0x20000f1c
 800428c:	20000b1c 	.word	0x20000b1c
 8004290:	20000318 	.word	0x20000318

08004294 <OLED_EnableFastUpdate>:

// 设置快速更新模式
void OLED_EnableFastUpdate(uint8_t enable)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	71fb      	strb	r3, [r7, #7]
    fast_update_enabled = enable;
 800429e:	4a04      	ldr	r2, [pc, #16]	@ (80042b0 <OLED_EnableFastUpdate+0x1c>)
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	7013      	strb	r3, [r2, #0]
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	20000006 	.word	0x20000006

080042b4 <OLED_SmartUpdate>:

// 智能更新显示
// 选择性更新脏页，以提高帧率
void OLED_SmartUpdate(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
    // 如果OLED/DMA忙，直接返回
    if (OLED_IsBusy())
 80042ba:	f7fd fc87 	bl	8001bcc <OLED_IsBusy>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f040 8082 	bne.w	80043ca <OLED_SmartUpdate+0x116>
    {
        return;
    }

    // 检查是否有脏页需要更新
    uint8_t has_dirty = 0;
 80042c6:	2300      	movs	r3, #0
 80042c8:	73fb      	strb	r3, [r7, #15]
    uint8_t first_dirty = 255;
 80042ca:	23ff      	movs	r3, #255	@ 0xff
 80042cc:	73bb      	strb	r3, [r7, #14]
    uint8_t last_dirty = 0;
 80042ce:	2300      	movs	r3, #0
 80042d0:	737b      	strb	r3, [r7, #13]

    // 如果启用了差分更新，检查哪些页已经变化
    if (diff_mode_enabled)
 80042d2:	4b40      	ldr	r3, [pc, #256]	@ (80043d4 <OLED_SmartUpdate+0x120>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d046      	beq.n	8004368 <OLED_SmartUpdate+0xb4>
    {
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 80042da:	2300      	movs	r3, #0
 80042dc:	733b      	strb	r3, [r7, #12]
 80042de:	e03f      	b.n	8004360 <OLED_SmartUpdate+0xac>
        {
            // 检查此页中是否有任何字节发生变化
            uint8_t page_changed = 0;
 80042e0:	2300      	movs	r3, #0
 80042e2:	72fb      	strb	r3, [r7, #11]
            uint16_t start_idx = page * OLED_WIDTH;
 80042e4:	7b3b      	ldrb	r3, [r7, #12]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	01db      	lsls	r3, r3, #7
 80042ea:	80bb      	strh	r3, [r7, #4]

            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 80042ec:	2300      	movs	r3, #0
 80042ee:	813b      	strh	r3, [r7, #8]
 80042f0:	e015      	b.n	800431e <OLED_SmartUpdate+0x6a>
            {
                if (OLED_BackBuffer[start_idx + i] != OLED_PrevBuffer[start_idx + i])
 80042f2:	88ba      	ldrh	r2, [r7, #4]
 80042f4:	893b      	ldrh	r3, [r7, #8]
 80042f6:	4413      	add	r3, r2
 80042f8:	4a37      	ldr	r2, [pc, #220]	@ (80043d8 <OLED_SmartUpdate+0x124>)
 80042fa:	5cd2      	ldrb	r2, [r2, r3]
 80042fc:	88b9      	ldrh	r1, [r7, #4]
 80042fe:	893b      	ldrh	r3, [r7, #8]
 8004300:	440b      	add	r3, r1
 8004302:	4936      	ldr	r1, [pc, #216]	@ (80043dc <OLED_SmartUpdate+0x128>)
 8004304:	5ccb      	ldrb	r3, [r1, r3]
 8004306:	429a      	cmp	r2, r3
 8004308:	d006      	beq.n	8004318 <OLED_SmartUpdate+0x64>
                {
                    page_changed = 1;
 800430a:	2301      	movs	r3, #1
 800430c:	72fb      	strb	r3, [r7, #11]
                    oled_dirty_pages[page] = 1;
 800430e:	7b3b      	ldrb	r3, [r7, #12]
 8004310:	4a33      	ldr	r2, [pc, #204]	@ (80043e0 <OLED_SmartUpdate+0x12c>)
 8004312:	2101      	movs	r1, #1
 8004314:	54d1      	strb	r1, [r2, r3]
                    break;
 8004316:	e005      	b.n	8004324 <OLED_SmartUpdate+0x70>
            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 8004318:	893b      	ldrh	r3, [r7, #8]
 800431a:	3301      	adds	r3, #1
 800431c:	813b      	strh	r3, [r7, #8]
 800431e:	893b      	ldrh	r3, [r7, #8]
 8004320:	2b7f      	cmp	r3, #127	@ 0x7f
 8004322:	d9e6      	bls.n	80042f2 <OLED_SmartUpdate+0x3e>
                }
            }

            if (page_changed)
 8004324:	7afb      	ldrb	r3, [r7, #11]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d017      	beq.n	800435a <OLED_SmartUpdate+0xa6>
            {
                has_dirty = 1;
 800432a:	2301      	movs	r3, #1
 800432c:	73fb      	strb	r3, [r7, #15]
                if (page < first_dirty)
 800432e:	7b3a      	ldrb	r2, [r7, #12]
 8004330:	7bbb      	ldrb	r3, [r7, #14]
 8004332:	429a      	cmp	r2, r3
 8004334:	d201      	bcs.n	800433a <OLED_SmartUpdate+0x86>
                    first_dirty = page;
 8004336:	7b3b      	ldrb	r3, [r7, #12]
 8004338:	73bb      	strb	r3, [r7, #14]
                if (page > last_dirty)
 800433a:	7b3a      	ldrb	r2, [r7, #12]
 800433c:	7b7b      	ldrb	r3, [r7, #13]
 800433e:	429a      	cmp	r2, r3
 8004340:	d901      	bls.n	8004346 <OLED_SmartUpdate+0x92>
                    last_dirty = page;
 8004342:	7b3b      	ldrb	r3, [r7, #12]
 8004344:	737b      	strb	r3, [r7, #13]

                // 更新上一帧缓存
                memcpy(
 8004346:	88bb      	ldrh	r3, [r7, #4]
 8004348:	4a24      	ldr	r2, [pc, #144]	@ (80043dc <OLED_SmartUpdate+0x128>)
 800434a:	1898      	adds	r0, r3, r2
 800434c:	88bb      	ldrh	r3, [r7, #4]
 800434e:	4a22      	ldr	r2, [pc, #136]	@ (80043d8 <OLED_SmartUpdate+0x124>)
 8004350:	4413      	add	r3, r2
 8004352:	2280      	movs	r2, #128	@ 0x80
 8004354:	4619      	mov	r1, r3
 8004356:	f004 fbf8 	bl	8008b4a <memcpy>
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 800435a:	7b3b      	ldrb	r3, [r7, #12]
 800435c:	3301      	adds	r3, #1
 800435e:	733b      	strb	r3, [r7, #12]
 8004360:	7b3b      	ldrb	r3, [r7, #12]
 8004362:	2b07      	cmp	r3, #7
 8004364:	d9bc      	bls.n	80042e0 <OLED_SmartUpdate+0x2c>
 8004366:	e01c      	b.n	80043a2 <OLED_SmartUpdate+0xee>
        }
    }
    else
    {
        // 如果未启用差分更新，使用脏页标记
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 8004368:	2300      	movs	r3, #0
 800436a:	71fb      	strb	r3, [r7, #7]
 800436c:	e016      	b.n	800439c <OLED_SmartUpdate+0xe8>
        {
            if (oled_dirty_pages[i])
 800436e:	79fb      	ldrb	r3, [r7, #7]
 8004370:	4a1b      	ldr	r2, [pc, #108]	@ (80043e0 <OLED_SmartUpdate+0x12c>)
 8004372:	5cd3      	ldrb	r3, [r2, r3]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00d      	beq.n	8004396 <OLED_SmartUpdate+0xe2>
            {
                has_dirty = 1;
 800437a:	2301      	movs	r3, #1
 800437c:	73fb      	strb	r3, [r7, #15]
                if (i < first_dirty)
 800437e:	79fa      	ldrb	r2, [r7, #7]
 8004380:	7bbb      	ldrb	r3, [r7, #14]
 8004382:	429a      	cmp	r2, r3
 8004384:	d201      	bcs.n	800438a <OLED_SmartUpdate+0xd6>
                    first_dirty = i;
 8004386:	79fb      	ldrb	r3, [r7, #7]
 8004388:	73bb      	strb	r3, [r7, #14]
                if (i > last_dirty)
 800438a:	79fa      	ldrb	r2, [r7, #7]
 800438c:	7b7b      	ldrb	r3, [r7, #13]
 800438e:	429a      	cmp	r2, r3
 8004390:	d901      	bls.n	8004396 <OLED_SmartUpdate+0xe2>
                    last_dirty = i;
 8004392:	79fb      	ldrb	r3, [r7, #7]
 8004394:	737b      	strb	r3, [r7, #13]
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	3301      	adds	r3, #1
 800439a:	71fb      	strb	r3, [r7, #7]
 800439c:	79fb      	ldrb	r3, [r7, #7]
 800439e:	2b07      	cmp	r3, #7
 80043a0:	d9e5      	bls.n	800436e <OLED_SmartUpdate+0xba>
            }
        }
    }

    // 如果有脏页，只更新这些页
    if (has_dirty && fast_update_enabled)
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00a      	beq.n	80043be <OLED_SmartUpdate+0x10a>
 80043a8:	4b0e      	ldr	r3, [pc, #56]	@ (80043e4 <OLED_SmartUpdate+0x130>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d006      	beq.n	80043be <OLED_SmartUpdate+0x10a>
    {
        OLED_UpdateDisplayPartial(first_dirty, last_dirty);
 80043b0:	7b7a      	ldrb	r2, [r7, #13]
 80043b2:	7bbb      	ldrb	r3, [r7, #14]
 80043b4:	4611      	mov	r1, r2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fd fc88 	bl	8001ccc <OLED_UpdateDisplayPartial>
 80043bc:	e006      	b.n	80043cc <OLED_SmartUpdate+0x118>
    }
    else if (has_dirty)
 80043be:	7bfb      	ldrb	r3, [r7, #15]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <OLED_SmartUpdate+0x118>
    {
        OLED_UpdateDisplayVSync();
 80043c4:	f7fd fc2a 	bl	8001c1c <OLED_UpdateDisplayVSync>
 80043c8:	e000      	b.n	80043cc <OLED_SmartUpdate+0x118>
        return;
 80043ca:	bf00      	nop
    }
}
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20000f1c 	.word	0x20000f1c
 80043d8:	20000318 	.word	0x20000318
 80043dc:	20000b1c 	.word	0x20000b1c
 80043e0:	20000310 	.word	0x20000310
 80043e4:	20000006 	.word	0x20000006

080043e8 <OLED_OptimizedDisplayFPS>:


// 显示FPS
void OLED_OptimizedDisplayFPS(int16_t x, int16_t y)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	460a      	mov	r2, r1
 80043f2:	80fb      	strh	r3, [r7, #6]
 80043f4:	4613      	mov	r3, r2
 80043f6:	80bb      	strh	r3, [r7, #4]
    static uint32_t last_time = 0;
    static uint32_t frames = 0;
    static uint32_t fps = 0;
    static char fps_str[16] = "FPS:0";

    frames++;
 80043f8:	4b15      	ldr	r3, [pc, #84]	@ (8004450 <OLED_OptimizedDisplayFPS+0x68>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3301      	adds	r3, #1
 80043fe:	4a14      	ldr	r2, [pc, #80]	@ (8004450 <OLED_OptimizedDisplayFPS+0x68>)
 8004400:	6013      	str	r3, [r2, #0]

    // 每秒更新一次FPS
    uint32_t current_time = HAL_GetTick();
 8004402:	f001 fcdf 	bl	8005dc4 <HAL_GetTick>
 8004406:	60f8      	str	r0, [r7, #12]
    if (current_time - last_time >= 1000)
 8004408:	4b12      	ldr	r3, [pc, #72]	@ (8004454 <OLED_OptimizedDisplayFPS+0x6c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004414:	d310      	bcc.n	8004438 <OLED_OptimizedDisplayFPS+0x50>
    {
        fps = frames;
 8004416:	4b0e      	ldr	r3, [pc, #56]	@ (8004450 <OLED_OptimizedDisplayFPS+0x68>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a0f      	ldr	r2, [pc, #60]	@ (8004458 <OLED_OptimizedDisplayFPS+0x70>)
 800441c:	6013      	str	r3, [r2, #0]
        sprintf(fps_str, "FPS:%d", fps);
 800441e:	4b0e      	ldr	r3, [pc, #56]	@ (8004458 <OLED_OptimizedDisplayFPS+0x70>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	490d      	ldr	r1, [pc, #52]	@ (800445c <OLED_OptimizedDisplayFPS+0x74>)
 8004426:	480e      	ldr	r0, [pc, #56]	@ (8004460 <OLED_OptimizedDisplayFPS+0x78>)
 8004428:	f004 fa9c 	bl	8008964 <siprintf>
        frames = 0;
 800442c:	4b08      	ldr	r3, [pc, #32]	@ (8004450 <OLED_OptimizedDisplayFPS+0x68>)
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
        last_time = current_time;
 8004432:	4a08      	ldr	r2, [pc, #32]	@ (8004454 <OLED_OptimizedDisplayFPS+0x6c>)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6013      	str	r3, [r2, #0]
    }

    OLED_DisplayString(x, y, fps_str);
 8004438:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800443c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004440:	4a07      	ldr	r2, [pc, #28]	@ (8004460 <OLED_OptimizedDisplayFPS+0x78>)
 8004442:	4618      	mov	r0, r3
 8004444:	f7fd ffd6 	bl	80023f4 <OLED_DisplayString>
 8004448:	bf00      	nop
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	20000f20 	.word	0x20000f20
 8004454:	20000f24 	.word	0x20000f24
 8004458:	20000f28 	.word	0x20000f28
 800445c:	0800b2f8 	.word	0x0800b2f8
 8004460:	20000008 	.word	0x20000008

08004464 <EaseLinear>:
#include "stdint.h" // 添加 stdint.h 以支持标准整数类型
#include "oled_ui.h"
#pragma region TWEENS // 动画缓动函数全部在这里定义

static float EaseLinear(float t)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
    return t;
 800446c:	687b      	ldr	r3, [r7, #4]
}
 800446e:	4618      	mov	r0, r3
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr

08004478 <EaseInQuad>:

static float EaseInQuad(float t)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
    return t * t;
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fb ff82 	bl	800038c <__aeabi_fmul>
 8004488:	4603      	mov	r3, r0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <EaseOutQuad>:

static float EaseOutQuad(float t)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
    return t * (2 - t);
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80044a0:	f7fb fe6a 	bl	8000178 <__aeabi_fsub>
 80044a4:	4603      	mov	r3, r0
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fb ff6f 	bl	800038c <__aeabi_fmul>
 80044ae:	4603      	mov	r3, r0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <EaseInOutQuad>:

static float EaseInOutQuad(float t)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 2 * t * t : -1 + (4 - 2 * t) * t;
 80044c0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7fc f8ff 	bl	80006c8 <__aeabi_fcmplt>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00b      	beq.n	80044e8 <EaseInOutQuad+0x30>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4619      	mov	r1, r3
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fb fe51 	bl	800017c <__addsf3>
 80044da:	4603      	mov	r3, r0
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fb ff54 	bl	800038c <__aeabi_fmul>
 80044e4:	4603      	mov	r3, r0
 80044e6:	e016      	b.n	8004516 <EaseInOutQuad+0x5e>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4619      	mov	r1, r3
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fb fe45 	bl	800017c <__addsf3>
 80044f2:	4603      	mov	r3, r0
 80044f4:	4619      	mov	r1, r3
 80044f6:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 80044fa:	f7fb fe3d 	bl	8000178 <__aeabi_fsub>
 80044fe:	4603      	mov	r3, r0
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	4618      	mov	r0, r3
 8004504:	f7fb ff42 	bl	800038c <__aeabi_fmul>
 8004508:	4603      	mov	r3, r0
 800450a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800450e:	4618      	mov	r0, r3
 8004510:	f7fb fe32 	bl	8000178 <__aeabi_fsub>
 8004514:	4603      	mov	r3, r0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <EaseInCubic>:

static float EaseInCubic(float t)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
    return t * t * t;
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7fb ff2f 	bl	800038c <__aeabi_fmul>
 800452e:	4603      	mov	r3, r0
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4618      	mov	r0, r3
 8004534:	f7fb ff2a 	bl	800038c <__aeabi_fmul>
 8004538:	4603      	mov	r3, r0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <EaseOutCubic>:

static float EaseOutCubic(float t)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b084      	sub	sp, #16
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
    float t1 = t - 1;
 800454a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fb fe12 	bl	8000178 <__aeabi_fsub>
 8004554:	4603      	mov	r3, r0
 8004556:	60fb      	str	r3, [r7, #12]
    return t1 * t1 * t1 + 1;
 8004558:	68f9      	ldr	r1, [r7, #12]
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f7fb ff16 	bl	800038c <__aeabi_fmul>
 8004560:	4603      	mov	r3, r0
 8004562:	68f9      	ldr	r1, [r7, #12]
 8004564:	4618      	mov	r0, r3
 8004566:	f7fb ff11 	bl	800038c <__aeabi_fmul>
 800456a:	4603      	mov	r3, r0
 800456c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004570:	4618      	mov	r0, r3
 8004572:	f7fb fe03 	bl	800017c <__addsf3>
 8004576:	4603      	mov	r3, r0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <EaseInOutCubic>:

static float EaseInOutCubic(float t)
{
 8004580:	b590      	push	{r4, r7, lr}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
 8004588:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7fc f89b 	bl	80006c8 <__aeabi_fcmplt>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d010      	beq.n	80045ba <EaseInOutCubic+0x3a>
 8004598:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7fb fef5 	bl	800038c <__aeabi_fmul>
 80045a2:	4603      	mov	r3, r0
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fb fef0 	bl	800038c <__aeabi_fmul>
 80045ac:	4603      	mov	r3, r0
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fb feeb 	bl	800038c <__aeabi_fmul>
 80045b6:	4603      	mov	r3, r0
 80045b8:	e02f      	b.n	800461a <EaseInOutCubic+0x9a>
 80045ba:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fb fdda 	bl	8000178 <__aeabi_fsub>
 80045c4:	4603      	mov	r3, r0
 80045c6:	461c      	mov	r4, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4619      	mov	r1, r3
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7fb fdd5 	bl	800017c <__addsf3>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fb fdcd 	bl	8000178 <__aeabi_fsub>
 80045de:	4603      	mov	r3, r0
 80045e0:	4619      	mov	r1, r3
 80045e2:	4620      	mov	r0, r4
 80045e4:	f7fb fed2 	bl	800038c <__aeabi_fmul>
 80045e8:	4603      	mov	r3, r0
 80045ea:	461c      	mov	r4, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4619      	mov	r1, r3
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fb fdc3 	bl	800017c <__addsf3>
 80045f6:	4603      	mov	r3, r0
 80045f8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fb fdbb 	bl	8000178 <__aeabi_fsub>
 8004602:	4603      	mov	r3, r0
 8004604:	4619      	mov	r1, r3
 8004606:	4620      	mov	r0, r4
 8004608:	f7fb fec0 	bl	800038c <__aeabi_fmul>
 800460c:	4603      	mov	r3, r0
 800460e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004612:	4618      	mov	r0, r3
 8004614:	f7fb fdb2 	bl	800017c <__addsf3>
 8004618:	4603      	mov	r3, r0
}
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	bd90      	pop	{r4, r7, pc}
	...

08004624 <EaseInExpo>:

// 在现有EaseType_t枚举中添加这些新类型
// 指数缓动
static float EaseInExpo(float t)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
    return (t == 0) ? 0 : powf(2, 10 * (t - 1));
 800462c:	f04f 0100 	mov.w	r1, #0
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7fc f83f 	bl	80006b4 <__aeabi_fcmpeq>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d111      	bne.n	8004660 <EaseInExpo+0x3c>
 800463c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7fb fd99 	bl	8000178 <__aeabi_fsub>
 8004646:	4603      	mov	r3, r0
 8004648:	4908      	ldr	r1, [pc, #32]	@ (800466c <EaseInExpo+0x48>)
 800464a:	4618      	mov	r0, r3
 800464c:	f7fb fe9e 	bl	800038c <__aeabi_fmul>
 8004650:	4603      	mov	r3, r0
 8004652:	4619      	mov	r1, r3
 8004654:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004658:	f005 fa54 	bl	8009b04 <powf>
 800465c:	4603      	mov	r3, r0
 800465e:	e001      	b.n	8004664 <EaseInExpo+0x40>
 8004660:	f04f 0300 	mov.w	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	41200000 	.word	0x41200000

08004670 <EaseOutExpo>:

static float EaseOutExpo(float t)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
    return (t == 1) ? 1 : (1 - powf(2, -10 * t));
 8004678:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7fc f819 	bl	80006b4 <__aeabi_fcmpeq>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d111      	bne.n	80046ac <EaseOutExpo+0x3c>
 8004688:	490b      	ldr	r1, [pc, #44]	@ (80046b8 <EaseOutExpo+0x48>)
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7fb fe7e 	bl	800038c <__aeabi_fmul>
 8004690:	4603      	mov	r3, r0
 8004692:	4619      	mov	r1, r3
 8004694:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004698:	f005 fa34 	bl	8009b04 <powf>
 800469c:	4603      	mov	r3, r0
 800469e:	4619      	mov	r1, r3
 80046a0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80046a4:	f7fb fd68 	bl	8000178 <__aeabi_fsub>
 80046a8:	4603      	mov	r3, r0
 80046aa:	e001      	b.n	80046b0 <EaseOutExpo+0x40>
 80046ac:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	c1200000 	.word	0xc1200000

080046bc <EaseInOutExpo>:

static float EaseInOutExpo(float t)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
    if (t == 0)
 80046c4:	f04f 0100 	mov.w	r1, #0
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7fb fff3 	bl	80006b4 <__aeabi_fcmpeq>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <EaseInOutExpo+0x1e>
        return 0;
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	e045      	b.n	8004766 <EaseInOutExpo+0xaa>
    if (t == 1)
 80046da:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7fb ffe8 	bl	80006b4 <__aeabi_fcmpeq>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <EaseInOutExpo+0x34>
        return 1;
 80046ea:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80046ee:	e03a      	b.n	8004766 <EaseInOutExpo+0xaa>
    if (t < 0.5f)
 80046f0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7fb ffe7 	bl	80006c8 <__aeabi_fcmplt>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d016      	beq.n	800472e <EaseInOutExpo+0x72>
        return powf(2, 20 * t - 10) / 2;
 8004700:	491b      	ldr	r1, [pc, #108]	@ (8004770 <EaseInOutExpo+0xb4>)
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fb fe42 	bl	800038c <__aeabi_fmul>
 8004708:	4603      	mov	r3, r0
 800470a:	491a      	ldr	r1, [pc, #104]	@ (8004774 <EaseInOutExpo+0xb8>)
 800470c:	4618      	mov	r0, r3
 800470e:	f7fb fd33 	bl	8000178 <__aeabi_fsub>
 8004712:	4603      	mov	r3, r0
 8004714:	4619      	mov	r1, r3
 8004716:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800471a:	f005 f9f3 	bl	8009b04 <powf>
 800471e:	4603      	mov	r3, r0
 8004720:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004724:	4618      	mov	r0, r3
 8004726:	f7fb fee5 	bl	80004f4 <__aeabi_fdiv>
 800472a:	4603      	mov	r3, r0
 800472c:	e01b      	b.n	8004766 <EaseInOutExpo+0xaa>
    return (2 - powf(2, -20 * t + 10)) / 2;
 800472e:	4912      	ldr	r1, [pc, #72]	@ (8004778 <EaseInOutExpo+0xbc>)
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7fb fe2b 	bl	800038c <__aeabi_fmul>
 8004736:	4603      	mov	r3, r0
 8004738:	490e      	ldr	r1, [pc, #56]	@ (8004774 <EaseInOutExpo+0xb8>)
 800473a:	4618      	mov	r0, r3
 800473c:	f7fb fd1e 	bl	800017c <__addsf3>
 8004740:	4603      	mov	r3, r0
 8004742:	4619      	mov	r1, r3
 8004744:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004748:	f005 f9dc 	bl	8009b04 <powf>
 800474c:	4603      	mov	r3, r0
 800474e:	4619      	mov	r1, r3
 8004750:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004754:	f7fb fd10 	bl	8000178 <__aeabi_fsub>
 8004758:	4603      	mov	r3, r0
 800475a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800475e:	4618      	mov	r0, r3
 8004760:	f7fb fec8 	bl	80004f4 <__aeabi_fdiv>
 8004764:	4603      	mov	r3, r0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	41a00000 	.word	0x41a00000
 8004774:	41200000 	.word	0x41200000
 8004778:	c1a00000 	.word	0xc1a00000

0800477c <EaseInCirc>:

// 圆形曲线缓动
static float EaseInCirc(float t)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
    return 1 - sqrtf(1 - t * t);
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7fb fe00 	bl	800038c <__aeabi_fmul>
 800478c:	4603      	mov	r3, r0
 800478e:	4619      	mov	r1, r3
 8004790:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004794:	f7fb fcf0 	bl	8000178 <__aeabi_fsub>
 8004798:	4603      	mov	r3, r0
 800479a:	4618      	mov	r0, r3
 800479c:	f005 f9ff 	bl	8009b9e <sqrtf>
 80047a0:	4603      	mov	r3, r0
 80047a2:	4619      	mov	r1, r3
 80047a4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80047a8:	f7fb fce6 	bl	8000178 <__aeabi_fsub>
 80047ac:	4603      	mov	r3, r0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <EaseOutCirc>:

static float EaseOutCirc(float t)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b082      	sub	sp, #8
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
    return sqrtf(1 - powf(t - 1, 2));
 80047be:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7fb fcd8 	bl	8000178 <__aeabi_fsub>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80047ce:	4618      	mov	r0, r3
 80047d0:	f005 f998 	bl	8009b04 <powf>
 80047d4:	4603      	mov	r3, r0
 80047d6:	4619      	mov	r1, r3
 80047d8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80047dc:	f7fb fccc 	bl	8000178 <__aeabi_fsub>
 80047e0:	4603      	mov	r3, r0
 80047e2:	4618      	mov	r0, r3
 80047e4:	f005 f9db 	bl	8009b9e <sqrtf>
 80047e8:	4603      	mov	r3, r0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <EaseInOutCirc>:

static float EaseInOutCirc(float t)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b082      	sub	sp, #8
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 80047fa:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fb ff62 	bl	80006c8 <__aeabi_fcmplt>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d022      	beq.n	8004850 <EaseInOutCirc+0x5e>
        return (1 - sqrtf(1 - powf(2 * t, 2))) / 2;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4619      	mov	r1, r3
 800480e:	4618      	mov	r0, r3
 8004810:	f7fb fcb4 	bl	800017c <__addsf3>
 8004814:	4603      	mov	r3, r0
 8004816:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800481a:	4618      	mov	r0, r3
 800481c:	f005 f972 	bl	8009b04 <powf>
 8004820:	4603      	mov	r3, r0
 8004822:	4619      	mov	r1, r3
 8004824:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004828:	f7fb fca6 	bl	8000178 <__aeabi_fsub>
 800482c:	4603      	mov	r3, r0
 800482e:	4618      	mov	r0, r3
 8004830:	f005 f9b5 	bl	8009b9e <sqrtf>
 8004834:	4603      	mov	r3, r0
 8004836:	4619      	mov	r1, r3
 8004838:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800483c:	f7fb fc9c 	bl	8000178 <__aeabi_fsub>
 8004840:	4603      	mov	r3, r0
 8004842:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004846:	4618      	mov	r0, r3
 8004848:	f7fb fe54 	bl	80004f4 <__aeabi_fdiv>
 800484c:	4603      	mov	r3, r0
 800484e:	e027      	b.n	80048a0 <EaseInOutCirc+0xae>
    return (sqrtf(1 - powf(-2 * t + 2, 2)) + 1) / 2;
 8004850:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7fb fd99 	bl	800038c <__aeabi_fmul>
 800485a:	4603      	mov	r3, r0
 800485c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004860:	4618      	mov	r0, r3
 8004862:	f7fb fc8b 	bl	800017c <__addsf3>
 8004866:	4603      	mov	r3, r0
 8004868:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800486c:	4618      	mov	r0, r3
 800486e:	f005 f949 	bl	8009b04 <powf>
 8004872:	4603      	mov	r3, r0
 8004874:	4619      	mov	r1, r3
 8004876:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800487a:	f7fb fc7d 	bl	8000178 <__aeabi_fsub>
 800487e:	4603      	mov	r3, r0
 8004880:	4618      	mov	r0, r3
 8004882:	f005 f98c 	bl	8009b9e <sqrtf>
 8004886:	4603      	mov	r3, r0
 8004888:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800488c:	4618      	mov	r0, r3
 800488e:	f7fb fc75 	bl	800017c <__addsf3>
 8004892:	4603      	mov	r3, r0
 8004894:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004898:	4618      	mov	r0, r3
 800489a:	f7fb fe2b 	bl	80004f4 <__aeabi_fdiv>
 800489e:	4603      	mov	r3, r0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <EaseInElastic>:

// 弹性缓动
static float EaseInElastic(float t)
{
 80048a8:	b590      	push	{r4, r7, lr}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 80048b0:	4b22      	ldr	r3, [pc, #136]	@ (800493c <EaseInElastic+0x94>)
 80048b2:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 80048b4:	f04f 0100 	mov.w	r1, #0
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7fb fefb 	bl	80006b4 <__aeabi_fcmpeq>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <EaseInElastic+0x22>
        return 0;
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	e034      	b.n	8004934 <EaseInElastic+0x8c>
    if (t == 1)
 80048ca:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fb fef0 	bl	80006b4 <__aeabi_fcmpeq>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <EaseInElastic+0x38>
        return 1;
 80048da:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80048de:	e029      	b.n	8004934 <EaseInElastic+0x8c>
    return -powf(2, 10 * t - 10) * sinf((t * 10 - 10.75f) * c4);
 80048e0:	4917      	ldr	r1, [pc, #92]	@ (8004940 <EaseInElastic+0x98>)
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fb fd52 	bl	800038c <__aeabi_fmul>
 80048e8:	4603      	mov	r3, r0
 80048ea:	4915      	ldr	r1, [pc, #84]	@ (8004940 <EaseInElastic+0x98>)
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fb fc43 	bl	8000178 <__aeabi_fsub>
 80048f2:	4603      	mov	r3, r0
 80048f4:	4619      	mov	r1, r3
 80048f6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80048fa:	f005 f903 	bl	8009b04 <powf>
 80048fe:	4603      	mov	r3, r0
 8004900:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8004904:	490e      	ldr	r1, [pc, #56]	@ (8004940 <EaseInElastic+0x98>)
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fb fd40 	bl	800038c <__aeabi_fmul>
 800490c:	4603      	mov	r3, r0
 800490e:	490d      	ldr	r1, [pc, #52]	@ (8004944 <EaseInElastic+0x9c>)
 8004910:	4618      	mov	r0, r3
 8004912:	f7fb fc31 	bl	8000178 <__aeabi_fsub>
 8004916:	4603      	mov	r3, r0
 8004918:	68f9      	ldr	r1, [r7, #12]
 800491a:	4618      	mov	r0, r3
 800491c:	f7fb fd36 	bl	800038c <__aeabi_fmul>
 8004920:	4603      	mov	r3, r0
 8004922:	4618      	mov	r0, r3
 8004924:	f005 f98e 	bl	8009c44 <sinf>
 8004928:	4603      	mov	r3, r0
 800492a:	4619      	mov	r1, r3
 800492c:	4620      	mov	r0, r4
 800492e:	f7fb fd2d 	bl	800038c <__aeabi_fmul>
 8004932:	4603      	mov	r3, r0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	bd90      	pop	{r4, r7, pc}
 800493c:	40060a8b 	.word	0x40060a8b
 8004940:	41200000 	.word	0x41200000
 8004944:	412c0000 	.word	0x412c0000

08004948 <EaseOutElastic>:

static float EaseOutElastic(float t)
{
 8004948:	b590      	push	{r4, r7, lr}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 8004950:	4b22      	ldr	r3, [pc, #136]	@ (80049dc <EaseOutElastic+0x94>)
 8004952:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8004954:	f04f 0100 	mov.w	r1, #0
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7fb feab 	bl	80006b4 <__aeabi_fcmpeq>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <EaseOutElastic+0x22>
        return 0;
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	e034      	b.n	80049d4 <EaseOutElastic+0x8c>
    if (t == 1)
 800496a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7fb fea0 	bl	80006b4 <__aeabi_fcmpeq>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <EaseOutElastic+0x38>
        return 1;
 800497a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800497e:	e029      	b.n	80049d4 <EaseOutElastic+0x8c>
    return powf(2, -10 * t) * sinf((t * 10 - 0.75f) * c4) + 1;
 8004980:	4917      	ldr	r1, [pc, #92]	@ (80049e0 <EaseOutElastic+0x98>)
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fb fd02 	bl	800038c <__aeabi_fmul>
 8004988:	4603      	mov	r3, r0
 800498a:	4619      	mov	r1, r3
 800498c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004990:	f005 f8b8 	bl	8009b04 <powf>
 8004994:	4604      	mov	r4, r0
 8004996:	4913      	ldr	r1, [pc, #76]	@ (80049e4 <EaseOutElastic+0x9c>)
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7fb fcf7 	bl	800038c <__aeabi_fmul>
 800499e:	4603      	mov	r3, r0
 80049a0:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fb fbe7 	bl	8000178 <__aeabi_fsub>
 80049aa:	4603      	mov	r3, r0
 80049ac:	68f9      	ldr	r1, [r7, #12]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fb fcec 	bl	800038c <__aeabi_fmul>
 80049b4:	4603      	mov	r3, r0
 80049b6:	4618      	mov	r0, r3
 80049b8:	f005 f944 	bl	8009c44 <sinf>
 80049bc:	4603      	mov	r3, r0
 80049be:	4619      	mov	r1, r3
 80049c0:	4620      	mov	r0, r4
 80049c2:	f7fb fce3 	bl	800038c <__aeabi_fmul>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fb fbd5 	bl	800017c <__addsf3>
 80049d2:	4603      	mov	r3, r0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd90      	pop	{r4, r7, pc}
 80049dc:	40060a8b 	.word	0x40060a8b
 80049e0:	c1200000 	.word	0xc1200000
 80049e4:	41200000 	.word	0x41200000

080049e8 <EaseInOutElastic>:

static float EaseInOutElastic(float t)
{
 80049e8:	b590      	push	{r4, r7, lr}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
    const float c5 = (2 * 3.14159f) / 4.5f;
 80049f0:	4b44      	ldr	r3, [pc, #272]	@ (8004b04 <EaseInOutElastic+0x11c>)
 80049f2:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 80049f4:	f04f 0100 	mov.w	r1, #0
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7fb fe5b 	bl	80006b4 <__aeabi_fcmpeq>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <EaseInOutElastic+0x22>
        return 0;
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	e077      	b.n	8004afa <EaseInOutElastic+0x112>
    if (t == 1)
 8004a0a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fb fe50 	bl	80006b4 <__aeabi_fcmpeq>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <EaseInOutElastic+0x38>
        return 1;
 8004a1a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004a1e:	e06c      	b.n	8004afa <EaseInOutElastic+0x112>
    if (t < 0.5f)
 8004a20:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7fb fe4f 	bl	80006c8 <__aeabi_fcmplt>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d030      	beq.n	8004a92 <EaseInOutElastic+0xaa>
        return -(powf(2, 20 * t - 10) * sinf((20 * t - 11.125f) * c5)) / 2;
 8004a30:	4935      	ldr	r1, [pc, #212]	@ (8004b08 <EaseInOutElastic+0x120>)
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fb fcaa 	bl	800038c <__aeabi_fmul>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	4934      	ldr	r1, [pc, #208]	@ (8004b0c <EaseInOutElastic+0x124>)
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fb fb9b 	bl	8000178 <__aeabi_fsub>
 8004a42:	4603      	mov	r3, r0
 8004a44:	4619      	mov	r1, r3
 8004a46:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004a4a:	f005 f85b 	bl	8009b04 <powf>
 8004a4e:	4604      	mov	r4, r0
 8004a50:	492d      	ldr	r1, [pc, #180]	@ (8004b08 <EaseInOutElastic+0x120>)
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fb fc9a 	bl	800038c <__aeabi_fmul>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	492d      	ldr	r1, [pc, #180]	@ (8004b10 <EaseInOutElastic+0x128>)
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fb fb8b 	bl	8000178 <__aeabi_fsub>
 8004a62:	4603      	mov	r3, r0
 8004a64:	68f9      	ldr	r1, [r7, #12]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fb fc90 	bl	800038c <__aeabi_fmul>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f005 f8e8 	bl	8009c44 <sinf>
 8004a74:	4603      	mov	r3, r0
 8004a76:	4619      	mov	r1, r3
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f7fb fc87 	bl	800038c <__aeabi_fmul>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004a84:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fb fd33 	bl	80004f4 <__aeabi_fdiv>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	e033      	b.n	8004afa <EaseInOutElastic+0x112>
    return (powf(2, -20 * t + 10) * sinf((20 * t - 11.125f) * c5)) / 2 + 1;
 8004a92:	4920      	ldr	r1, [pc, #128]	@ (8004b14 <EaseInOutElastic+0x12c>)
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7fb fc79 	bl	800038c <__aeabi_fmul>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	491b      	ldr	r1, [pc, #108]	@ (8004b0c <EaseInOutElastic+0x124>)
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fb fb6c 	bl	800017c <__addsf3>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004aac:	f005 f82a 	bl	8009b04 <powf>
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	4915      	ldr	r1, [pc, #84]	@ (8004b08 <EaseInOutElastic+0x120>)
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7fb fc69 	bl	800038c <__aeabi_fmul>
 8004aba:	4603      	mov	r3, r0
 8004abc:	4914      	ldr	r1, [pc, #80]	@ (8004b10 <EaseInOutElastic+0x128>)
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fb fb5a 	bl	8000178 <__aeabi_fsub>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	68f9      	ldr	r1, [r7, #12]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fb fc5f 	bl	800038c <__aeabi_fmul>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f005 f8b7 	bl	8009c44 <sinf>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4620      	mov	r0, r4
 8004adc:	f7fb fc56 	bl	800038c <__aeabi_fmul>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fb fd04 	bl	80004f4 <__aeabi_fdiv>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fb fb42 	bl	800017c <__addsf3>
 8004af8:	4603      	mov	r3, r0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd90      	pop	{r4, r7, pc}
 8004b02:	bf00      	nop
 8004b04:	3fb2b8b9 	.word	0x3fb2b8b9
 8004b08:	41a00000 	.word	0x41a00000
 8004b0c:	41200000 	.word	0x41200000
 8004b10:	41320000 	.word	0x41320000
 8004b14:	c1a00000 	.word	0xc1a00000

08004b18 <EaseOutBounce>:

static float EaseOutBounce(float t)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
    const float n1 = 7.5625f;
 8004b20:	4b45      	ldr	r3, [pc, #276]	@ (8004c38 <EaseOutBounce+0x120>)
 8004b22:	60fb      	str	r3, [r7, #12]
    const float d1 = 2.75f;
 8004b24:	4b45      	ldr	r3, [pc, #276]	@ (8004c3c <EaseOutBounce+0x124>)
 8004b26:	60bb      	str	r3, [r7, #8]

    if (t < 1 / d1)
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004b2e:	f7fb fce1 	bl	80004f4 <__aeabi_fdiv>
 8004b32:	4603      	mov	r3, r0
 8004b34:	4619      	mov	r1, r3
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fb fdc6 	bl	80006c8 <__aeabi_fcmplt>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <EaseOutBounce+0x40>
    {
        return n1 * t * t;
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f7fb fc21 	bl	800038c <__aeabi_fmul>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fb fc1c 	bl	800038c <__aeabi_fmul>
 8004b54:	4603      	mov	r3, r0
 8004b56:	e06a      	b.n	8004c2e <EaseOutBounce+0x116>
    }
    else if (t < 2 / d1)
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004b5e:	f7fb fcc9 	bl	80004f4 <__aeabi_fdiv>
 8004b62:	4603      	mov	r3, r0
 8004b64:	4619      	mov	r1, r3
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fb fdae 	bl	80006c8 <__aeabi_fcmplt>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d01c      	beq.n	8004bac <EaseOutBounce+0x94>
    {
        t -= 1.5f / d1;
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8004b78:	f7fb fcbc 	bl	80004f4 <__aeabi_fdiv>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	4619      	mov	r1, r3
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7fb faf9 	bl	8000178 <__aeabi_fsub>
 8004b86:	4603      	mov	r3, r0
 8004b88:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.75f;
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f7fb fbfd 	bl	800038c <__aeabi_fmul>
 8004b92:	4603      	mov	r3, r0
 8004b94:	6879      	ldr	r1, [r7, #4]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fb fbf8 	bl	800038c <__aeabi_fmul>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fb faea 	bl	800017c <__addsf3>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	e040      	b.n	8004c2e <EaseOutBounce+0x116>
    }
    else if (t < 2.5f / d1)
 8004bac:	68b9      	ldr	r1, [r7, #8]
 8004bae:	4824      	ldr	r0, [pc, #144]	@ (8004c40 <EaseOutBounce+0x128>)
 8004bb0:	f7fb fca0 	bl	80004f4 <__aeabi_fdiv>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7fb fd85 	bl	80006c8 <__aeabi_fcmplt>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d01a      	beq.n	8004bfa <EaseOutBounce+0xe2>
    {
        t -= 2.25f / d1;
 8004bc4:	68b9      	ldr	r1, [r7, #8]
 8004bc6:	481f      	ldr	r0, [pc, #124]	@ (8004c44 <EaseOutBounce+0x12c>)
 8004bc8:	f7fb fc94 	bl	80004f4 <__aeabi_fdiv>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7fb fad1 	bl	8000178 <__aeabi_fsub>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.9375f;
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f7fb fbd5 	bl	800038c <__aeabi_fmul>
 8004be2:	4603      	mov	r3, r0
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fb fbd0 	bl	800038c <__aeabi_fmul>
 8004bec:	4603      	mov	r3, r0
 8004bee:	4916      	ldr	r1, [pc, #88]	@ (8004c48 <EaseOutBounce+0x130>)
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fb fac3 	bl	800017c <__addsf3>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	e019      	b.n	8004c2e <EaseOutBounce+0x116>
    }
    else
    {
        t -= 2.625f / d1;
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	4813      	ldr	r0, [pc, #76]	@ (8004c4c <EaseOutBounce+0x134>)
 8004bfe:	f7fb fc79 	bl	80004f4 <__aeabi_fdiv>
 8004c02:	4603      	mov	r3, r0
 8004c04:	4619      	mov	r1, r3
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7fb fab6 	bl	8000178 <__aeabi_fsub>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.984375f;
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f7fb fbba 	bl	800038c <__aeabi_fmul>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fb fbb5 	bl	800038c <__aeabi_fmul>
 8004c22:	4603      	mov	r3, r0
 8004c24:	490a      	ldr	r1, [pc, #40]	@ (8004c50 <EaseOutBounce+0x138>)
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fb faa8 	bl	800017c <__addsf3>
 8004c2c:	4603      	mov	r3, r0
    }
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40f20000 	.word	0x40f20000
 8004c3c:	40300000 	.word	0x40300000
 8004c40:	40200000 	.word	0x40200000
 8004c44:	40100000 	.word	0x40100000
 8004c48:	3f700000 	.word	0x3f700000
 8004c4c:	40280000 	.word	0x40280000
 8004c50:	3f7c0000 	.word	0x3f7c0000

08004c54 <EaseInBounce>:

// 反弹缓动
static float EaseInBounce(float t)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
    return 1 - EaseOutBounce(1 - t);
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004c62:	f7fb fa89 	bl	8000178 <__aeabi_fsub>
 8004c66:	4603      	mov	r3, r0
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff ff55 	bl	8004b18 <EaseOutBounce>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	4619      	mov	r1, r3
 8004c72:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004c76:	f7fb fa7f 	bl	8000178 <__aeabi_fsub>
 8004c7a:	4603      	mov	r3, r0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <EaseInOutBounce>:

static float EaseInOutBounce(float t)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 8004c8c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7fb fd19 	bl	80006c8 <__aeabi_fcmplt>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d010      	beq.n	8004cbe <EaseInOutBounce+0x3a>
        return EaseInBounce(t * 2) * 0.5f;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fb fa6b 	bl	800017c <__addsf3>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7ff ffd3 	bl	8004c54 <EaseInBounce>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fb fb69 	bl	800038c <__aeabi_fmul>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	e01b      	b.n	8004cf6 <EaseInOutBounce+0x72>
    return EaseOutBounce(t * 2 - 1) * 0.5f + 0.5f;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fb fa5a 	bl	800017c <__addsf3>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fb fa52 	bl	8000178 <__aeabi_fsub>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff ff1e 	bl	8004b18 <EaseOutBounce>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fb fb52 	bl	800038c <__aeabi_fmul>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fb fa44 	bl	800017c <__addsf3>
 8004cf4:	4603      	mov	r3, r0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
	...

08004d00 <EaseInBack>:

// 背越式缓动
static float EaseInBack(float t)
{
 8004d00:	b590      	push	{r4, r7, lr}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8004d08:	4b15      	ldr	r3, [pc, #84]	@ (8004d60 <EaseInBack+0x60>)
 8004d0a:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8004d0c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f7fb fa33 	bl	800017c <__addsf3>
 8004d16:	4603      	mov	r3, r0
 8004d18:	60bb      	str	r3, [r7, #8]

    return c3 * t * t * t - c1 * t * t;
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	68b8      	ldr	r0, [r7, #8]
 8004d1e:	f7fb fb35 	bl	800038c <__aeabi_fmul>
 8004d22:	4603      	mov	r3, r0
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fb fb30 	bl	800038c <__aeabi_fmul>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fb fb2b 	bl	800038c <__aeabi_fmul>
 8004d36:	4603      	mov	r3, r0
 8004d38:	461c      	mov	r4, r3
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f7fb fb25 	bl	800038c <__aeabi_fmul>
 8004d42:	4603      	mov	r3, r0
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fb fb20 	bl	800038c <__aeabi_fmul>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4620      	mov	r0, r4
 8004d52:	f7fb fa11 	bl	8000178 <__aeabi_fsub>
 8004d56:	4603      	mov	r3, r0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd90      	pop	{r4, r7, pc}
 8004d60:	3fd9cd60 	.word	0x3fd9cd60

08004d64 <EaseOutBack>:

static float EaseOutBack(float t)
{
 8004d64:	b590      	push	{r4, r7, lr}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8004d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8004de0 <EaseOutBack+0x7c>)
 8004d6e:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8004d70:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f7fb fa01 	bl	800017c <__addsf3>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	60bb      	str	r3, [r7, #8]

    return 1 + c3 * powf(t - 1, 3) + c1 * powf(t - 1, 2);
 8004d7e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fb f9f8 	bl	8000178 <__aeabi_fsub>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	4916      	ldr	r1, [pc, #88]	@ (8004de4 <EaseOutBack+0x80>)
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f004 feb9 	bl	8009b04 <powf>
 8004d92:	4603      	mov	r3, r0
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fb faf8 	bl	800038c <__aeabi_fmul>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fb f9ea 	bl	800017c <__addsf3>
 8004da8:	4603      	mov	r3, r0
 8004daa:	461c      	mov	r4, r3
 8004dac:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7fb f9e1 	bl	8000178 <__aeabi_fsub>
 8004db6:	4603      	mov	r3, r0
 8004db8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f004 fea1 	bl	8009b04 <powf>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	68f9      	ldr	r1, [r7, #12]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fb fae0 	bl	800038c <__aeabi_fmul>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	4619      	mov	r1, r3
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	f7fb f9d3 	bl	800017c <__addsf3>
 8004dd6:	4603      	mov	r3, r0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3714      	adds	r7, #20
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd90      	pop	{r4, r7, pc}
 8004de0:	3fd9cd60 	.word	0x3fd9cd60
 8004de4:	40400000 	.word	0x40400000

08004de8 <EaseInOutBack>:

static float EaseInOutBack(float t)
{
 8004de8:	b5b0      	push	{r4, r5, r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8004df0:	4b40      	ldr	r3, [pc, #256]	@ (8004ef4 <EaseInOutBack+0x10c>)
 8004df2:	60fb      	str	r3, [r7, #12]
    const float c2 = c1 * 1.525f;
 8004df4:	4940      	ldr	r1, [pc, #256]	@ (8004ef8 <EaseInOutBack+0x110>)
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f7fb fac8 	bl	800038c <__aeabi_fmul>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	60bb      	str	r3, [r7, #8]

    if (t < 0.5f)
 8004e00:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fb fc5f 	bl	80006c8 <__aeabi_fcmplt>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d02c      	beq.n	8004e6a <EaseInOutBack+0x82>
        return (powf(2 * t, 2) * ((c2 + 1) * 2 * t - c2)) / 2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4619      	mov	r1, r3
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fb f9b1 	bl	800017c <__addsf3>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004e20:	4618      	mov	r0, r3
 8004e22:	f004 fe6f 	bl	8009b04 <powf>
 8004e26:	4604      	mov	r4, r0
 8004e28:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004e2c:	68b8      	ldr	r0, [r7, #8]
 8004e2e:	f7fb f9a5 	bl	800017c <__addsf3>
 8004e32:	4603      	mov	r3, r0
 8004e34:	4619      	mov	r1, r3
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fb f9a0 	bl	800017c <__addsf3>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fb faa3 	bl	800038c <__aeabi_fmul>
 8004e46:	4603      	mov	r3, r0
 8004e48:	68b9      	ldr	r1, [r7, #8]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fb f994 	bl	8000178 <__aeabi_fsub>
 8004e50:	4603      	mov	r3, r0
 8004e52:	4619      	mov	r1, r3
 8004e54:	4620      	mov	r0, r4
 8004e56:	f7fb fa99 	bl	800038c <__aeabi_fmul>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fb fb47 	bl	80004f4 <__aeabi_fdiv>
 8004e66:	4603      	mov	r3, r0
 8004e68:	e03f      	b.n	8004eea <EaseInOutBack+0x102>
    return (powf(2 * t - 2, 2) * ((c2 + 1) * (t * 2 - 2) + c2) + 2) / 2;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fb f984 	bl	800017c <__addsf3>
 8004e74:	4603      	mov	r3, r0
 8004e76:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fb f97c 	bl	8000178 <__aeabi_fsub>
 8004e80:	4603      	mov	r3, r0
 8004e82:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004e86:	4618      	mov	r0, r3
 8004e88:	f004 fe3c 	bl	8009b04 <powf>
 8004e8c:	4604      	mov	r4, r0
 8004e8e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004e92:	68b8      	ldr	r0, [r7, #8]
 8004e94:	f7fb f972 	bl	800017c <__addsf3>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	461d      	mov	r5, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fb f96b 	bl	800017c <__addsf3>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fb f963 	bl	8000178 <__aeabi_fsub>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	f7fb fa68 	bl	800038c <__aeabi_fmul>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fb f95b 	bl	800017c <__addsf3>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f7fb fa5e 	bl	800038c <__aeabi_fmul>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fb f950 	bl	800017c <__addsf3>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fb fb06 	bl	80004f4 <__aeabi_fdiv>
 8004ee8:	4603      	mov	r3, r0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	3fd9cd60 	.word	0x3fd9cd60
 8004ef8:	3fc33333 	.word	0x3fc33333

08004efc <EaseInSine>:

// 正弦缓动
static float EaseInSine(float t)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
    return 1 - cosf((t * 3.14159f) / 2);
 8004f04:	490c      	ldr	r1, [pc, #48]	@ (8004f38 <EaseInSine+0x3c>)
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7fb fa40 	bl	800038c <__aeabi_fmul>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fb faee 	bl	80004f4 <__aeabi_fdiv>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f004 fe5a 	bl	8009bd4 <cosf>
 8004f20:	4603      	mov	r3, r0
 8004f22:	4619      	mov	r1, r3
 8004f24:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004f28:	f7fb f926 	bl	8000178 <__aeabi_fsub>
 8004f2c:	4603      	mov	r3, r0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40490fd0 	.word	0x40490fd0

08004f3c <EaseOutSine>:

static float EaseOutSine(float t)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
    return sinf((t * 3.14159f) / 2);
 8004f44:	4909      	ldr	r1, [pc, #36]	@ (8004f6c <EaseOutSine+0x30>)
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7fb fa20 	bl	800038c <__aeabi_fmul>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fb face 	bl	80004f4 <__aeabi_fdiv>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f004 fe72 	bl	8009c44 <sinf>
 8004f60:	4603      	mov	r3, r0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	40490fd0 	.word	0x40490fd0

08004f70 <EaseInOutSine>:

static float EaseInOutSine(float t)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
    return -(cosf(3.14159f * t) - 1) / 2;
 8004f78:	490d      	ldr	r1, [pc, #52]	@ (8004fb0 <EaseInOutSine+0x40>)
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fb fa06 	bl	800038c <__aeabi_fmul>
 8004f80:	4603      	mov	r3, r0
 8004f82:	4618      	mov	r0, r3
 8004f84:	f004 fe26 	bl	8009bd4 <cosf>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fb f8f2 	bl	8000178 <__aeabi_fsub>
 8004f94:	4603      	mov	r3, r0
 8004f96:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004f9a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fb faa8 	bl	80004f4 <__aeabi_fdiv>
 8004fa4:	4603      	mov	r3, r0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	40490fd0 	.word	0x40490fd0

08004fb4 <GetEaseValue>:

static float GetEaseValue(float progress, EaseType_t easeType)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	70fb      	strb	r3, [r7, #3]
    switch (easeType)
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	2b18      	cmp	r3, #24
 8004fc4:	f200 80b3 	bhi.w	800512e <GetEaseValue+0x17a>
 8004fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8004fd0 <GetEaseValue+0x1c>)
 8004fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fce:	bf00      	nop
 8004fd0:	08005035 	.word	0x08005035
 8004fd4:	0800503f 	.word	0x0800503f
 8004fd8:	08005049 	.word	0x08005049
 8004fdc:	08005053 	.word	0x08005053
 8004fe0:	0800505d 	.word	0x0800505d
 8004fe4:	08005067 	.word	0x08005067
 8004fe8:	08005071 	.word	0x08005071
 8004fec:	0800507b 	.word	0x0800507b
 8004ff0:	08005085 	.word	0x08005085
 8004ff4:	0800508f 	.word	0x0800508f
 8004ff8:	08005099 	.word	0x08005099
 8004ffc:	080050a3 	.word	0x080050a3
 8005000:	080050ad 	.word	0x080050ad
 8005004:	080050b7 	.word	0x080050b7
 8005008:	080050c1 	.word	0x080050c1
 800500c:	080050cb 	.word	0x080050cb
 8005010:	080050d5 	.word	0x080050d5
 8005014:	080050df 	.word	0x080050df
 8005018:	080050e9 	.word	0x080050e9
 800501c:	080050f3 	.word	0x080050f3
 8005020:	080050fd 	.word	0x080050fd
 8005024:	08005107 	.word	0x08005107
 8005028:	08005111 	.word	0x08005111
 800502c:	0800511b 	.word	0x0800511b
 8005030:	08005125 	.word	0x08005125
    {
    case EASE_LINEAR:
        return EaseLinear(progress);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7ff fa15 	bl	8004464 <EaseLinear>
 800503a:	4603      	mov	r3, r0
 800503c:	e078      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_IN_QUAD:
        return EaseInQuad(progress);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7ff fa1a 	bl	8004478 <EaseInQuad>
 8005044:	4603      	mov	r3, r0
 8005046:	e073      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_OUT_QUAD:
        return EaseOutQuad(progress);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7ff fa22 	bl	8004492 <EaseOutQuad>
 800504e:	4603      	mov	r3, r0
 8005050:	e06e      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_INOUT_QUAD:
        return EaseInOutQuad(progress);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7ff fa30 	bl	80044b8 <EaseInOutQuad>
 8005058:	4603      	mov	r3, r0
 800505a:	e069      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_IN_CUBIC:
        return EaseInCubic(progress);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7ff fa5e 	bl	800451e <EaseInCubic>
 8005062:	4603      	mov	r3, r0
 8005064:	e064      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_OUT_CUBIC:
        return EaseOutCubic(progress);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7ff fa6b 	bl	8004542 <EaseOutCubic>
 800506c:	4603      	mov	r3, r0
 800506e:	e05f      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_INOUT_CUBIC:
        return EaseInOutCubic(progress);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff fa85 	bl	8004580 <EaseInOutCubic>
 8005076:	4603      	mov	r3, r0
 8005078:	e05a      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_IN_EXPO:
        return EaseInExpo(progress);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7ff fad2 	bl	8004624 <EaseInExpo>
 8005080:	4603      	mov	r3, r0
 8005082:	e055      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_OUT_EXPO:
        return EaseOutExpo(progress);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff faf3 	bl	8004670 <EaseOutExpo>
 800508a:	4603      	mov	r3, r0
 800508c:	e050      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_INOUT_EXPO:
        return EaseInOutExpo(progress);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7ff fb14 	bl	80046bc <EaseInOutExpo>
 8005094:	4603      	mov	r3, r0
 8005096:	e04b      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_IN_CIRC:
        return EaseInCirc(progress);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff fb6f 	bl	800477c <EaseInCirc>
 800509e:	4603      	mov	r3, r0
 80050a0:	e046      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_OUT_CIRC:
        return EaseOutCirc(progress);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7ff fb87 	bl	80047b6 <EaseOutCirc>
 80050a8:	4603      	mov	r3, r0
 80050aa:	e041      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_INOUT_CIRC:
        return EaseInOutCirc(progress);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7ff fba0 	bl	80047f2 <EaseInOutCirc>
 80050b2:	4603      	mov	r3, r0
 80050b4:	e03c      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_IN_ELASTIC:
        return EaseInElastic(progress);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7ff fbf6 	bl	80048a8 <EaseInElastic>
 80050bc:	4603      	mov	r3, r0
 80050be:	e037      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_OUT_ELASTIC:
        return EaseOutElastic(progress);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff fc41 	bl	8004948 <EaseOutElastic>
 80050c6:	4603      	mov	r3, r0
 80050c8:	e032      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_INOUT_ELASTIC:
        return EaseInOutElastic(progress);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7ff fc8c 	bl	80049e8 <EaseInOutElastic>
 80050d0:	4603      	mov	r3, r0
 80050d2:	e02d      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_IN_BOUNCE:
        return EaseInBounce(progress);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7ff fdbd 	bl	8004c54 <EaseInBounce>
 80050da:	4603      	mov	r3, r0
 80050dc:	e028      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_OUT_BOUNCE:
        return EaseOutBounce(progress);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7ff fd1a 	bl	8004b18 <EaseOutBounce>
 80050e4:	4603      	mov	r3, r0
 80050e6:	e023      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_INOUT_BOUNCE:
        return EaseInOutBounce(progress);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff fdcb 	bl	8004c84 <EaseInOutBounce>
 80050ee:	4603      	mov	r3, r0
 80050f0:	e01e      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_IN_BACK:
        return EaseInBack(progress);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff fe04 	bl	8004d00 <EaseInBack>
 80050f8:	4603      	mov	r3, r0
 80050fa:	e019      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_OUT_BACK:
        return EaseOutBack(progress);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff fe31 	bl	8004d64 <EaseOutBack>
 8005102:	4603      	mov	r3, r0
 8005104:	e014      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_INOUT_BACK:
        return EaseInOutBack(progress);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7ff fe6e 	bl	8004de8 <EaseInOutBack>
 800510c:	4603      	mov	r3, r0
 800510e:	e00f      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_IN_SINE:
        return EaseInSine(progress);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff fef3 	bl	8004efc <EaseInSine>
 8005116:	4603      	mov	r3, r0
 8005118:	e00a      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_OUT_SINE:
        return EaseOutSine(progress);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff ff0e 	bl	8004f3c <EaseOutSine>
 8005120:	4603      	mov	r3, r0
 8005122:	e005      	b.n	8005130 <GetEaseValue+0x17c>
    case EASE_INOUT_SINE:
        return EaseInOutSine(progress);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f7ff ff23 	bl	8004f70 <EaseInOutSine>
 800512a:	4603      	mov	r3, r0
 800512c:	e000      	b.n	8005130 <GetEaseValue+0x17c>
    default:
        return progress;
 800512e:	687b      	ldr	r3, [r7, #4]
    }
}
 8005130:	4618      	mov	r0, r3
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <OLED_InitAnimation>:

#pragma region ANIMATIONTWEENS
// 这里是底层动画实现
void OLED_InitAnimation(Animation_t *anim, float startValue, float endValue,
                        uint32_t duration, EaseType_t easeType)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
 8005144:	603b      	str	r3, [r7, #0]
    anim->startTime = HAL_GetTick();
 8005146:	f000 fe3d 	bl	8005dc4 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	601a      	str	r2, [r3, #0]
    anim->duration = duration;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	605a      	str	r2, [r3, #4]
    anim->startValue = startValue;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	609a      	str	r2, [r3, #8]
    anim->endValue = endValue;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	60da      	str	r2, [r3, #12]
    anim->currentValue = startValue;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	611a      	str	r2, [r3, #16]
    anim->isActive = 1;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2201      	movs	r2, #1
 800516c:	751a      	strb	r2, [r3, #20]
    anim->easeType = easeType;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	7e3a      	ldrb	r2, [r7, #24]
 8005172:	755a      	strb	r2, [r3, #21]
}
 8005174:	bf00      	nop
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <OLED_UpdateAnimation>:

// 更新动画状态，返回isActive的值
uint8_t OLED_UpdateAnimation(Animation_t *anim, uint32_t currentTime)
{
 800517c:	b590      	push	{r4, r7, lr}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
    if (!anim->isActive)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	7d1b      	ldrb	r3, [r3, #20]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <OLED_UpdateAnimation+0x16>
        return 0;
 800518e:	2300      	movs	r3, #0
 8005190:	e04d      	b.n	800522e <OLED_UpdateAnimation+0xb2>

    uint32_t elapsedTime = currentTime - anim->startTime;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	617b      	str	r3, [r7, #20]
    // 动画完成
    if (elapsedTime >= anim->duration || anim->currentValue == anim->endValue) // 如果我的目标在指定的点上，也关闭isActive
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d20a      	bcs.n	80051bc <OLED_UpdateAnimation+0x40>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691a      	ldr	r2, [r3, #16]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	4619      	mov	r1, r3
 80051b0:	4610      	mov	r0, r2
 80051b2:	f7fb fa7f 	bl	80006b4 <__aeabi_fcmpeq>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d008      	beq.n	80051ce <OLED_UpdateAnimation+0x52>
    {
        anim->currentValue = anim->endValue;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	611a      	str	r2, [r3, #16]
        anim->isActive = 0;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	751a      	strb	r2, [r3, #20]
        return 0;
 80051ca:	2300      	movs	r3, #0
 80051cc:	e02f      	b.n	800522e <OLED_UpdateAnimation+0xb2>
    }

    // 计算当前进度 (0.0 - 1.0)
    float progress = (float)elapsedTime / anim->duration;
 80051ce:	6978      	ldr	r0, [r7, #20]
 80051d0:	f7fb f884 	bl	80002dc <__aeabi_ui2f>
 80051d4:	4604      	mov	r4, r0
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fb f87e 	bl	80002dc <__aeabi_ui2f>
 80051e0:	4603      	mov	r3, r0
 80051e2:	4619      	mov	r1, r3
 80051e4:	4620      	mov	r0, r4
 80051e6:	f7fb f985 	bl	80004f4 <__aeabi_fdiv>
 80051ea:	4603      	mov	r3, r0
 80051ec:	613b      	str	r3, [r7, #16]

    // 应用缓动函数
    float easedProgress = GetEaseValue(progress, anim->easeType);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	7d5b      	ldrb	r3, [r3, #21]
 80051f2:	4619      	mov	r1, r3
 80051f4:	6938      	ldr	r0, [r7, #16]
 80051f6:	f7ff fedd 	bl	8004fb4 <GetEaseValue>
 80051fa:	60f8      	str	r0, [r7, #12]

    // 计算当前值
    anim->currentValue = anim->startValue + (anim->endValue - anim->startValue) * easedProgress;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689c      	ldr	r4, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	4619      	mov	r1, r3
 800520a:	4610      	mov	r0, r2
 800520c:	f7fa ffb4 	bl	8000178 <__aeabi_fsub>
 8005210:	4603      	mov	r3, r0
 8005212:	68f9      	ldr	r1, [r7, #12]
 8005214:	4618      	mov	r0, r3
 8005216:	f7fb f8b9 	bl	800038c <__aeabi_fmul>
 800521a:	4603      	mov	r3, r0
 800521c:	4619      	mov	r1, r3
 800521e:	4620      	mov	r0, r4
 8005220:	f7fa ffac 	bl	800017c <__addsf3>
 8005224:	4603      	mov	r3, r0
 8005226:	461a      	mov	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	611a      	str	r2, [r3, #16]

    return 1;
 800522c:	2301      	movs	r3, #1
}
 800522e:	4618      	mov	r0, r3
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	bd90      	pop	{r4, r7, pc}

08005236 <OLED_GetAnimationValue>:

// 获取当前动画值
float OLED_GetAnimationValue(Animation_t *anim)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
    return anim->currentValue;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
}
 8005242:	4618      	mov	r0, r3
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr

0800524c <OLED_InitAnimationManager>:
AnimationManager_t Status_AnimationManager;
AnimationManager_t g_Title_AnimationManager; // 菜单动画管理器
AnimationManager_t g_AnimationManager; // 全局动画管理器

void OLED_InitAnimationManager(AnimationManager_t *manager) // 这是初始化一个动画管理器，填入你的manager名字，在系统初始化时候调用它
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
    manager->count = 0;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 25f0 	strb.w	r2, [r3, #1520]	@ 0x5f0
    memset(manager->taggedAnimations, 0, sizeof(manager->taggedAnimations));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 8005262:	2100      	movs	r1, #0
 8005264:	4618      	mov	r0, r3
 8005266:	f003 fbe2 	bl	8008a2e <memset>
}
 800526a:	bf00      	nop
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <OLED_FindTaggedAnimation>:

TaggedAnimation_t *OLED_FindTaggedAnimation(AnimationManager_t *manager, const char *tag) // 查找对应manager的标签对应的动画tag
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < manager->count; i++)
 800527c:	2300      	movs	r3, #0
 800527e:	73fb      	strb	r3, [r7, #15]
 8005280:	e016      	b.n	80052b0 <OLED_FindTaggedAnimation+0x3e>
    {
        if (strcmp(manager->taggedAnimations[i].tag, tag) == 0)
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	224c      	movs	r2, #76	@ 0x4c
 8005286:	fb02 f303 	mul.w	r3, r2, r3
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	4413      	add	r3, r2
 800528e:	6839      	ldr	r1, [r7, #0]
 8005290:	4618      	mov	r0, r3
 8005292:	f7fa ff5b 	bl	800014c <strcmp>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d106      	bne.n	80052aa <OLED_FindTaggedAnimation+0x38>
        {
            return &manager->taggedAnimations[i];
 800529c:	7bfb      	ldrb	r3, [r7, #15]
 800529e:	224c      	movs	r2, #76	@ 0x4c
 80052a0:	fb02 f303 	mul.w	r3, r2, r3
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	4413      	add	r3, r2
 80052a8:	e009      	b.n	80052be <OLED_FindTaggedAnimation+0x4c>
    for (uint8_t i = 0; i < manager->count; i++)
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
 80052ac:	3301      	adds	r3, #1
 80052ae:	73fb      	strb	r3, [r7, #15]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 80052b6:	7bfa      	ldrb	r2, [r7, #15]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d3e2      	bcc.n	8005282 <OLED_FindTaggedAnimation+0x10>
        }
    }
    return NULL;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <OLED_GetObjectPosition>:

uint8_t OLED_GetObjectPosition(AnimationManager_t *manager, const char *tag, float *x, float *y) // 获取tag当前位置
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b086      	sub	sp, #24
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	607a      	str	r2, [r7, #4]
 80052d2:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f7ff ffcb 	bl	8005272 <OLED_FindTaggedAnimation>
 80052dc:	6178      	str	r0, [r7, #20]
    if (anim)
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00f      	beq.n	8005304 <OLED_GetObjectPosition+0x3e>
    {
        if (x)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <OLED_GetObjectPosition+0x2c>
            *x = anim->currentX;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	601a      	str	r2, [r3, #0]
        if (y)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <OLED_GetObjectPosition+0x3a>
            *y = anim->currentY;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	601a      	str	r2, [r3, #0]
        return 1;
 8005300:	2301      	movs	r3, #1
 8005302:	e000      	b.n	8005306 <OLED_GetObjectPosition+0x40>
    }
    return 0;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <OLED_MoveObject>:

// 移动指定标签的对象
void OLED_MoveObject(AnimationManager_t *manager, const char *tag,
                     float startX, float startY, float targetX, float targetY,
                     uint32_t duration, EaseType_t easeType) // 这个函数是用来移动一个对象的，tag是对象的标签，startX和startY是起始坐标，targetX和targetY是目标坐标，duration是动画持续时间，easeType是缓动类型
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b088      	sub	sp, #32
 8005312:	af02      	add	r7, sp, #8
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	607a      	str	r2, [r7, #4]
 800531a:	603b      	str	r3, [r7, #0]
    // 查找已存在的动画
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 800531c:	68b9      	ldr	r1, [r7, #8]
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f7ff ffa7 	bl	8005272 <OLED_FindTaggedAnimation>
 8005324:	6178      	str	r0, [r7, #20]

    // 如果没找到并且还有可用槽位，创建新的动画
    if (anim == NULL)
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d122      	bne.n	8005372 <OLED_MoveObject+0x64>
    {
        if (manager->count >= MAX_ANIMATIONS)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8005332:	2b13      	cmp	r3, #19
 8005334:	d838      	bhi.n	80053a8 <OLED_MoveObject+0x9a>
            return; // 动画已满，无法添加

        anim = &manager->taggedAnimations[manager->count++];
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 800533c:	1c5a      	adds	r2, r3, #1
 800533e:	b2d1      	uxtb	r1, r2
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	f882 15f0 	strb.w	r1, [r2, #1520]	@ 0x5f0
 8005346:	461a      	mov	r2, r3
 8005348:	234c      	movs	r3, #76	@ 0x4c
 800534a:	fb02 f303 	mul.w	r3, r2, r3
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4413      	add	r3, r2
 8005352:	617b      	str	r3, [r7, #20]
        strncpy(anim->tag, tag, sizeof(anim->tag) - 1);
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	220f      	movs	r2, #15
 8005358:	68b9      	ldr	r1, [r7, #8]
 800535a:	4618      	mov	r0, r3
 800535c:	f003 fb6f 	bl	8008a3e <strncpy>
        anim->tag[sizeof(anim->tag) - 1] = '\0'; // 确保字符串结束
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	2200      	movs	r2, #0
 8005364:	73da      	strb	r2, [r3, #15]
        anim->currentX = startX;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = startY;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // 初始化或更新X和Y坐标的动画
    OLED_InitAnimation(&anim->xAnimation, startX, targetX, duration, easeType);
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f103 0010 	add.w	r0, r3, #16
 8005378:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005380:	6a3a      	ldr	r2, [r7, #32]
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	f7ff fed8 	bl	8005138 <OLED_InitAnimation>
    OLED_InitAnimation(&anim->yAnimation, startY, targetY, duration, easeType);
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800538e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005398:	6839      	ldr	r1, [r7, #0]
 800539a:	f7ff fecd 	bl	8005138 <OLED_InitAnimation>
    anim->isActive = 1;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053a6:	e000      	b.n	80053aa <OLED_MoveObject+0x9c>
            return; // 动画已满，无法添加
 80053a8:	bf00      	nop
}
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <OLED_UpdateAnimationManager>:

// 更新manager里面的所有动画!
void OLED_UpdateAnimationManager(AnimationManager_t *manager) //! 这里需要使用OLED_UpdateDisplayVSync()来更新显示
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 80053b8:	f000 fd04 	bl	8005dc4 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

    for (uint8_t i = 0; i < manager->count; i++)
 80053be:	2300      	movs	r3, #0
 80053c0:	75fb      	strb	r3, [r7, #23]
 80053c2:	e03a      	b.n	800543a <OLED_UpdateAnimationManager+0x8a>
    {
        TaggedAnimation_t *anim = &manager->taggedAnimations[i];
 80053c4:	7dfb      	ldrb	r3, [r7, #23]
 80053c6:	224c      	movs	r2, #76	@ 0x4c
 80053c8:	fb02 f303 	mul.w	r3, r2, r3
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	4413      	add	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
        if (!anim->isActive)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d02a      	beq.n	8005432 <OLED_UpdateAnimationManager+0x82>
            continue;

        uint8_t activeX = OLED_UpdateAnimation(&anim->xAnimation, currentTime);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3310      	adds	r3, #16
 80053e0:	6939      	ldr	r1, [r7, #16]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff feca 	bl	800517c <OLED_UpdateAnimation>
 80053e8:	4603      	mov	r3, r0
 80053ea:	72fb      	strb	r3, [r7, #11]
        uint8_t activeY = OLED_UpdateAnimation(&anim->yAnimation, currentTime);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3328      	adds	r3, #40	@ 0x28
 80053f0:	6939      	ldr	r1, [r7, #16]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7ff fec2 	bl	800517c <OLED_UpdateAnimation>
 80053f8:	4603      	mov	r3, r0
 80053fa:	72bb      	strb	r3, [r7, #10]

        anim->currentX = OLED_GetAnimationValue(&anim->xAnimation);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	3310      	adds	r3, #16
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff ff18 	bl	8005236 <OLED_GetAnimationValue>
 8005406:	4602      	mov	r2, r0
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = OLED_GetAnimationValue(&anim->yAnimation);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3328      	adds	r3, #40	@ 0x28
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff ff10 	bl	8005236 <OLED_GetAnimationValue>
 8005416:	4602      	mov	r2, r0
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	649a      	str	r2, [r3, #72]	@ 0x48

        // 如果两个动画都结束，则标记该对象动画为非活跃
        if (!activeX && !activeY)
 800541c:	7afb      	ldrb	r3, [r7, #11]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d108      	bne.n	8005434 <OLED_UpdateAnimationManager+0x84>
 8005422:	7abb      	ldrb	r3, [r7, #10]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d105      	bne.n	8005434 <OLED_UpdateAnimationManager+0x84>
            anim->isActive = 0;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005430:	e000      	b.n	8005434 <OLED_UpdateAnimationManager+0x84>
            continue;
 8005432:	bf00      	nop
    for (uint8_t i = 0; i < manager->count; i++)
 8005434:	7dfb      	ldrb	r3, [r7, #23]
 8005436:	3301      	adds	r3, #1
 8005438:	75fb      	strb	r3, [r7, #23]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8005440:	7dfa      	ldrb	r2, [r7, #23]
 8005442:	429a      	cmp	r2, r3
 8005444:	d3be      	bcc.n	80053c4 <OLED_UpdateAnimationManager+0x14>
    }
}
 8005446:	bf00      	nop
 8005448:	bf00      	nop
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <OLED_GetAnimationStates>:

uint8_t OLED_GetAnimationStates(AnimationManager_t *manager, const char *tag) // 返回值是1表示活跃，0表示非活跃
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 800545a:	6839      	ldr	r1, [r7, #0]
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff ff08 	bl	8005272 <OLED_FindTaggedAnimation>
 8005462:	60f8      	str	r0, [r7, #12]
    if (anim)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <OLED_GetAnimationStates+0x22>
    {
        return anim->isActive;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005470:	e000      	b.n	8005474 <OLED_GetAnimationStates+0x24>
    }
    return 0; // 如果没有找到，返回0表示非活跃
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <OLED_DoTweenObject>:

// 移动指定标签的对象到目标坐标。
// 如果对象已在向同一目标动画且动画处于活动状态，则不执行任何操作。
// 否则，它会中断当前动画（如果活动）并从当前位置开始新的动画。
void OLED_DoTweenObject(AnimationManager_t *manager, const char *tag, float targetX, float targetY, uint32_t duration, EaseType_t easeType)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b08a      	sub	sp, #40	@ 0x28
 8005480:	af04      	add	r7, sp, #16
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 800548a:	68b9      	ldr	r1, [r7, #8]
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f7ff fef0 	bl	8005272 <OLED_FindTaggedAnimation>
 8005492:	6178      	str	r0, [r7, #20]

    if (anim == NULL)
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d029      	beq.n	80054ee <OLED_DoTweenObject+0x72>
        // 但这需要为新对象定义 initialX, initialY。
        return;
    }

    // 检查动画是否已处于活动状态并且已经朝向相同的目标
    if (anim->isActive &&
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d011      	beq.n	80054c8 <OLED_DoTweenObject+0x4c>
        anim->xAnimation.endValue == targetX &&
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	69db      	ldr	r3, [r3, #28]
    if (anim->isActive &&
 80054a8:	4619      	mov	r1, r3
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fb f902 	bl	80006b4 <__aeabi_fcmpeq>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d008      	beq.n	80054c8 <OLED_DoTweenObject+0x4c>
        anim->yAnimation.endValue == targetY)
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        anim->xAnimation.endValue == targetX &&
 80054ba:	4619      	mov	r1, r3
 80054bc:	6838      	ldr	r0, [r7, #0]
 80054be:	f7fb f8f9 	bl	80006b4 <__aeabi_fcmpeq>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d114      	bne.n	80054f2 <OLED_DoTweenObject+0x76>
        return;
    }

    // 否则，（重新）启动动画到新目标
    // OLED_MoveObject 将从 anim->currentX, anim->currentY 开始动画
    OLED_MoveObject(manager, tag, anim->currentX, anim->currentY, targetX, targetY, duration, easeType);
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80054d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80054d4:	9303      	str	r3, [sp, #12]
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	9302      	str	r3, [sp, #8]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	9301      	str	r3, [sp, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	460b      	mov	r3, r1
 80054e4:	68b9      	ldr	r1, [r7, #8]
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f7ff ff11 	bl	800530e <OLED_MoveObject>
 80054ec:	e002      	b.n	80054f4 <OLED_DoTweenObject+0x78>
        return;
 80054ee:	bf00      	nop
 80054f0:	e000      	b.n	80054f4 <OLED_DoTweenObject+0x78>
        return;
 80054f2:	bf00      	nop
}
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <OLED_DrawFilledRectangle>:
    }
}

// 绘制填充矩形
void OLED_DrawFilledRectangle(int16_t x, int16_t y, uint8_t width, uint8_t height, uint8_t color) //! UPDATEDISPLAY REQUIRED
{
 80054fa:	b590      	push	{r4, r7, lr}
 80054fc:	b087      	sub	sp, #28
 80054fe:	af00      	add	r7, sp, #0
 8005500:	4604      	mov	r4, r0
 8005502:	4608      	mov	r0, r1
 8005504:	4611      	mov	r1, r2
 8005506:	461a      	mov	r2, r3
 8005508:	4623      	mov	r3, r4
 800550a:	80fb      	strh	r3, [r7, #6]
 800550c:	4603      	mov	r3, r0
 800550e:	80bb      	strh	r3, [r7, #4]
 8005510:	460b      	mov	r3, r1
 8005512:	70fb      	strb	r3, [r7, #3]
 8005514:	4613      	mov	r3, r2
 8005516:	70bb      	strb	r3, [r7, #2]
    // Initial check for zero dimensions
    if (width == 0 || height == 0)
 8005518:	78fb      	ldrb	r3, [r7, #3]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d07e      	beq.n	800561c <OLED_DrawFilledRectangle+0x122>
 800551e:	78bb      	ldrb	r3, [r7, #2]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d07b      	beq.n	800561c <OLED_DrawFilledRectangle+0x122>
    {
        return;
    }

    // Use int16_t for width and height internally for clipping calculations
    int16_t current_width = width;
 8005524:	78fb      	ldrb	r3, [r7, #3]
 8005526:	82fb      	strh	r3, [r7, #22]
    int16_t current_height = height;
 8005528:	78bb      	ldrb	r3, [r7, #2]
 800552a:	82bb      	strh	r3, [r7, #20]

    // Clip left edge: if x is negative, adjust width and set x to 0
    if (x < 0)
 800552c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005530:	2b00      	cmp	r3, #0
 8005532:	da06      	bge.n	8005542 <OLED_DrawFilledRectangle+0x48>
    {
        current_width += x; // x is negative, so this reduces width
 8005534:	8afa      	ldrh	r2, [r7, #22]
 8005536:	88fb      	ldrh	r3, [r7, #6]
 8005538:	4413      	add	r3, r2
 800553a:	b29b      	uxth	r3, r3
 800553c:	82fb      	strh	r3, [r7, #22]
        x = 0;
 800553e:	2300      	movs	r3, #0
 8005540:	80fb      	strh	r3, [r7, #6]
    }

    // Clip top edge: if y is negative, adjust height and set y to 0
    if (y < 0)
 8005542:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	da06      	bge.n	8005558 <OLED_DrawFilledRectangle+0x5e>
    {
        current_height += y; // y is negative, so this reduces height
 800554a:	8aba      	ldrh	r2, [r7, #20]
 800554c:	88bb      	ldrh	r3, [r7, #4]
 800554e:	4413      	add	r3, r2
 8005550:	b29b      	uxth	r3, r3
 8005552:	82bb      	strh	r3, [r7, #20]
        y = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	80bb      	strh	r3, [r7, #4]
    }

    // If width or height became non-positive after left/top clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 8005558:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800555c:	2b00      	cmp	r3, #0
 800555e:	dd5f      	ble.n	8005620 <OLED_DrawFilledRectangle+0x126>
 8005560:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005564:	2b00      	cmp	r3, #0
 8005566:	dd5b      	ble.n	8005620 <OLED_DrawFilledRectangle+0x126>
        return;
    }

    // Check if the adjusted rectangle is entirely off-screen to the right or bottom
    // At this point, x and y are >= 0.
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT)
 8005568:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800556c:	2b7f      	cmp	r3, #127	@ 0x7f
 800556e:	dc59      	bgt.n	8005624 <OLED_DrawFilledRectangle+0x12a>
 8005570:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005574:	2b3f      	cmp	r3, #63	@ 0x3f
 8005576:	dc55      	bgt.n	8005624 <OLED_DrawFilledRectangle+0x12a>
    {
        return;
    }

    // Clip right edge: if x + current_width extends beyond OLED_WIDTH
    if (x + current_width > OLED_WIDTH)
 8005578:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800557c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005580:	4413      	add	r3, r2
 8005582:	2b80      	cmp	r3, #128	@ 0x80
 8005584:	dd04      	ble.n	8005590 <OLED_DrawFilledRectangle+0x96>
    {
        current_width = OLED_WIDTH - x;
 8005586:	88fb      	ldrh	r3, [r7, #6]
 8005588:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800558c:	b29b      	uxth	r3, r3
 800558e:	82fb      	strh	r3, [r7, #22]
    }

    // Clip bottom edge: if y + current_height extends beyond OLED_HEIGHT
    if (y + current_height > OLED_HEIGHT)
 8005590:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005594:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005598:	4413      	add	r3, r2
 800559a:	2b40      	cmp	r3, #64	@ 0x40
 800559c:	dd04      	ble.n	80055a8 <OLED_DrawFilledRectangle+0xae>
    {
        current_height = OLED_HEIGHT - y;
 800559e:	88bb      	ldrh	r3, [r7, #4]
 80055a0:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	82bb      	strh	r3, [r7, #20]
    }

    // If width or height became non-positive after right/bottom clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 80055a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	dd3b      	ble.n	8005628 <OLED_DrawFilledRectangle+0x12e>
 80055b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	dd37      	ble.n	8005628 <OLED_DrawFilledRectangle+0x12e>
    {
        return;
    }

    // Cast coordinates and dimensions to uint8_t for drawing
    uint8_t final_x = (uint8_t)x;
 80055b8:	88fb      	ldrh	r3, [r7, #6]
 80055ba:	747b      	strb	r3, [r7, #17]
    uint8_t final_y = (uint8_t)y;
 80055bc:	88bb      	ldrh	r3, [r7, #4]
 80055be:	743b      	strb	r3, [r7, #16]
    uint8_t final_width = (uint8_t)current_width;
 80055c0:	8afb      	ldrh	r3, [r7, #22]
 80055c2:	73fb      	strb	r3, [r7, #15]
    uint8_t final_height = (uint8_t)current_height;
 80055c4:	8abb      	ldrh	r3, [r7, #20]
 80055c6:	73bb      	strb	r3, [r7, #14]

    uint8_t x2 = final_x + final_width - 1;
 80055c8:	7c7a      	ldrb	r2, [r7, #17]
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
 80055cc:	4413      	add	r3, r2
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	737b      	strb	r3, [r7, #13]
    uint8_t y2 = final_y + final_height - 1;
 80055d4:	7c3a      	ldrb	r2, [r7, #16]
 80055d6:	7bbb      	ldrb	r3, [r7, #14]
 80055d8:	4413      	add	r3, r2
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	733b      	strb	r3, [r7, #12]

    // 逐像素填充
    for (uint8_t j = final_y; j <= y2; j++)
 80055e0:	7c3b      	ldrb	r3, [r7, #16]
 80055e2:	74fb      	strb	r3, [r7, #19]
 80055e4:	e015      	b.n	8005612 <OLED_DrawFilledRectangle+0x118>
    {
        for (uint8_t i = final_x; i <= x2; i++)
 80055e6:	7c7b      	ldrb	r3, [r7, #17]
 80055e8:	74bb      	strb	r3, [r7, #18]
 80055ea:	e00b      	b.n	8005604 <OLED_DrawFilledRectangle+0x10a>
        {
            OLED_WritePixel(i, j, color);
 80055ec:	7cbb      	ldrb	r3, [r7, #18]
 80055ee:	b21b      	sxth	r3, r3
 80055f0:	7cfa      	ldrb	r2, [r7, #19]
 80055f2:	b211      	sxth	r1, r2
 80055f4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fc fbdf 	bl	8001dbc <OLED_WritePixel>
        for (uint8_t i = final_x; i <= x2; i++)
 80055fe:	7cbb      	ldrb	r3, [r7, #18]
 8005600:	3301      	adds	r3, #1
 8005602:	74bb      	strb	r3, [r7, #18]
 8005604:	7cba      	ldrb	r2, [r7, #18]
 8005606:	7b7b      	ldrb	r3, [r7, #13]
 8005608:	429a      	cmp	r2, r3
 800560a:	d9ef      	bls.n	80055ec <OLED_DrawFilledRectangle+0xf2>
    for (uint8_t j = final_y; j <= y2; j++)
 800560c:	7cfb      	ldrb	r3, [r7, #19]
 800560e:	3301      	adds	r3, #1
 8005610:	74fb      	strb	r3, [r7, #19]
 8005612:	7cfa      	ldrb	r2, [r7, #19]
 8005614:	7b3b      	ldrb	r3, [r7, #12]
 8005616:	429a      	cmp	r2, r3
 8005618:	d9e5      	bls.n	80055e6 <OLED_DrawFilledRectangle+0xec>
 800561a:	e006      	b.n	800562a <OLED_DrawFilledRectangle+0x130>
        return;
 800561c:	bf00      	nop
 800561e:	e004      	b.n	800562a <OLED_DrawFilledRectangle+0x130>
        return;
 8005620:	bf00      	nop
 8005622:	e002      	b.n	800562a <OLED_DrawFilledRectangle+0x130>
        return;
 8005624:	bf00      	nop
 8005626:	e000      	b.n	800562a <OLED_DrawFilledRectangle+0x130>
        return;
 8005628:	bf00      	nop
        }
    }
}
 800562a:	371c      	adds	r7, #28
 800562c:	46bd      	mov	sp, r7
 800562e:	bd90      	pop	{r4, r7, pc}

08005630 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8005634:	4b17      	ldr	r3, [pc, #92]	@ (8005694 <MX_SPI2_Init+0x64>)
 8005636:	4a18      	ldr	r2, [pc, #96]	@ (8005698 <MX_SPI2_Init+0x68>)
 8005638:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800563a:	4b16      	ldr	r3, [pc, #88]	@ (8005694 <MX_SPI2_Init+0x64>)
 800563c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005640:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005642:	4b14      	ldr	r3, [pc, #80]	@ (8005694 <MX_SPI2_Init+0x64>)
 8005644:	2200      	movs	r2, #0
 8005646:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005648:	4b12      	ldr	r3, [pc, #72]	@ (8005694 <MX_SPI2_Init+0x64>)
 800564a:	2200      	movs	r2, #0
 800564c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800564e:	4b11      	ldr	r3, [pc, #68]	@ (8005694 <MX_SPI2_Init+0x64>)
 8005650:	2200      	movs	r2, #0
 8005652:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005654:	4b0f      	ldr	r3, [pc, #60]	@ (8005694 <MX_SPI2_Init+0x64>)
 8005656:	2200      	movs	r2, #0
 8005658:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800565a:	4b0e      	ldr	r3, [pc, #56]	@ (8005694 <MX_SPI2_Init+0x64>)
 800565c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005660:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005662:	4b0c      	ldr	r3, [pc, #48]	@ (8005694 <MX_SPI2_Init+0x64>)
 8005664:	2200      	movs	r2, #0
 8005666:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005668:	4b0a      	ldr	r3, [pc, #40]	@ (8005694 <MX_SPI2_Init+0x64>)
 800566a:	2200      	movs	r2, #0
 800566c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800566e:	4b09      	ldr	r3, [pc, #36]	@ (8005694 <MX_SPI2_Init+0x64>)
 8005670:	2200      	movs	r2, #0
 8005672:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005674:	4b07      	ldr	r3, [pc, #28]	@ (8005694 <MX_SPI2_Init+0x64>)
 8005676:	2200      	movs	r2, #0
 8005678:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800567a:	4b06      	ldr	r3, [pc, #24]	@ (8005694 <MX_SPI2_Init+0x64>)
 800567c:	220a      	movs	r2, #10
 800567e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005680:	4804      	ldr	r0, [pc, #16]	@ (8005694 <MX_SPI2_Init+0x64>)
 8005682:	f002 f887 	bl	8007794 <HAL_SPI_Init>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800568c:	f7fc fa43 	bl	8001b16 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005690:	bf00      	nop
 8005692:	bd80      	pop	{r7, pc}
 8005694:	20003ecc 	.word	0x20003ecc
 8005698:	40003800 	.word	0x40003800

0800569c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b088      	sub	sp, #32
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056a4:	f107 0310 	add.w	r3, r7, #16
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	605a      	str	r2, [r3, #4]
 80056ae:	609a      	str	r2, [r3, #8]
 80056b0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005728 <HAL_SPI_MspInit+0x8c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d131      	bne.n	8005720 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80056bc:	4b1b      	ldr	r3, [pc, #108]	@ (800572c <HAL_SPI_MspInit+0x90>)
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	4a1a      	ldr	r2, [pc, #104]	@ (800572c <HAL_SPI_MspInit+0x90>)
 80056c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80056c6:	61d3      	str	r3, [r2, #28]
 80056c8:	4b18      	ldr	r3, [pc, #96]	@ (800572c <HAL_SPI_MspInit+0x90>)
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056d4:	4b15      	ldr	r3, [pc, #84]	@ (800572c <HAL_SPI_MspInit+0x90>)
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	4a14      	ldr	r2, [pc, #80]	@ (800572c <HAL_SPI_MspInit+0x90>)
 80056da:	f043 0308 	orr.w	r3, r3, #8
 80056de:	6193      	str	r3, [r2, #24]
 80056e0:	4b12      	ldr	r3, [pc, #72]	@ (800572c <HAL_SPI_MspInit+0x90>)
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	f003 0308 	and.w	r3, r3, #8
 80056e8:	60bb      	str	r3, [r7, #8]
 80056ea:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = Flash_SCK_Pin|Flash_MOSI_Pin;
 80056ec:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80056f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056f2:	2302      	movs	r3, #2
 80056f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80056f6:	2303      	movs	r3, #3
 80056f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056fa:	f107 0310 	add.w	r3, r7, #16
 80056fe:	4619      	mov	r1, r3
 8005700:	480b      	ldr	r0, [pc, #44]	@ (8005730 <HAL_SPI_MspInit+0x94>)
 8005702:	f000 fdfb 	bl	80062fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Flash_MISO_Pin;
 8005706:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800570a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800570c:	2300      	movs	r3, #0
 800570e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005710:	2300      	movs	r3, #0
 8005712:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Flash_MISO_GPIO_Port, &GPIO_InitStruct);
 8005714:	f107 0310 	add.w	r3, r7, #16
 8005718:	4619      	mov	r1, r3
 800571a:	4805      	ldr	r0, [pc, #20]	@ (8005730 <HAL_SPI_MspInit+0x94>)
 800571c:	f000 fdee 	bl	80062fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005720:	bf00      	nop
 8005722:	3720      	adds	r7, #32
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40003800 	.word	0x40003800
 800572c:	40021000 	.word	0x40021000
 8005730:	40010c00 	.word	0x40010c00

08005734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800573a:	4b15      	ldr	r3, [pc, #84]	@ (8005790 <HAL_MspInit+0x5c>)
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	4a14      	ldr	r2, [pc, #80]	@ (8005790 <HAL_MspInit+0x5c>)
 8005740:	f043 0301 	orr.w	r3, r3, #1
 8005744:	6193      	str	r3, [r2, #24]
 8005746:	4b12      	ldr	r3, [pc, #72]	@ (8005790 <HAL_MspInit+0x5c>)
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	60bb      	str	r3, [r7, #8]
 8005750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005752:	4b0f      	ldr	r3, [pc, #60]	@ (8005790 <HAL_MspInit+0x5c>)
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	4a0e      	ldr	r2, [pc, #56]	@ (8005790 <HAL_MspInit+0x5c>)
 8005758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800575c:	61d3      	str	r3, [r2, #28]
 800575e:	4b0c      	ldr	r3, [pc, #48]	@ (8005790 <HAL_MspInit+0x5c>)
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005766:	607b      	str	r3, [r7, #4]
 8005768:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800576a:	4b0a      	ldr	r3, [pc, #40]	@ (8005794 <HAL_MspInit+0x60>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	4a04      	ldr	r2, [pc, #16]	@ (8005794 <HAL_MspInit+0x60>)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005786:	bf00      	nop
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	bc80      	pop	{r7}
 800578e:	4770      	bx	lr
 8005790:	40021000 	.word	0x40021000
 8005794:	40010000 	.word	0x40010000

08005798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800579c:	bf00      	nop
 800579e:	e7fd      	b.n	800579c <NMI_Handler+0x4>

080057a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80057a4:	bf00      	nop
 80057a6:	e7fd      	b.n	80057a4 <HardFault_Handler+0x4>

080057a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80057ac:	bf00      	nop
 80057ae:	e7fd      	b.n	80057ac <MemManage_Handler+0x4>

080057b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80057b4:	bf00      	nop
 80057b6:	e7fd      	b.n	80057b4 <BusFault_Handler+0x4>

080057b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80057bc:	bf00      	nop
 80057be:	e7fd      	b.n	80057bc <UsageFault_Handler+0x4>

080057c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80057c4:	bf00      	nop
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bc80      	pop	{r7}
 80057ca:	4770      	bx	lr

080057cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80057d0:	bf00      	nop
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr

080057d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80057dc:	bf00      	nop
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr

080057e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80057e8:	f000 fada 	bl	8005da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80057ec:	bf00      	nop
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80057f4:	4802      	ldr	r0, [pc, #8]	@ (8005800 <DMA1_Channel6_IRQHandler+0x10>)
 80057f6:	f000 fc7b 	bl	80060f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80057fa:	bf00      	nop
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	200002c0 	.word	0x200002c0

08005804 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
  return 1;
 8005808:	2301      	movs	r3, #1
}
 800580a:	4618      	mov	r0, r3
 800580c:	46bd      	mov	sp, r7
 800580e:	bc80      	pop	{r7}
 8005810:	4770      	bx	lr

08005812 <_kill>:

int _kill(int pid, int sig)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b082      	sub	sp, #8
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800581c:	f003 f968 	bl	8008af0 <__errno>
 8005820:	4603      	mov	r3, r0
 8005822:	2216      	movs	r2, #22
 8005824:	601a      	str	r2, [r3, #0]
  return -1;
 8005826:	f04f 33ff 	mov.w	r3, #4294967295
}
 800582a:	4618      	mov	r0, r3
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <_exit>:

void _exit (int status)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b082      	sub	sp, #8
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800583a:	f04f 31ff 	mov.w	r1, #4294967295
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7ff ffe7 	bl	8005812 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005844:	bf00      	nop
 8005846:	e7fd      	b.n	8005844 <_exit+0x12>

08005848 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005854:	2300      	movs	r3, #0
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	e00a      	b.n	8005870 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800585a:	f3af 8000 	nop.w
 800585e:	4601      	mov	r1, r0
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	60ba      	str	r2, [r7, #8]
 8005866:	b2ca      	uxtb	r2, r1
 8005868:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	3301      	adds	r3, #1
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	429a      	cmp	r2, r3
 8005876:	dbf0      	blt.n	800585a <_read+0x12>
  }

  return len;
 8005878:	687b      	ldr	r3, [r7, #4]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b086      	sub	sp, #24
 8005886:	af00      	add	r7, sp, #0
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	e009      	b.n	80058a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	60ba      	str	r2, [r7, #8]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	4618      	mov	r0, r3
 800589e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	3301      	adds	r3, #1
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	dbf1      	blt.n	8005894 <_write+0x12>
  }
  return len;
 80058b0:	687b      	ldr	r3, [r7, #4]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <_close>:

int _close(int file)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80058c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bc80      	pop	{r7}
 80058ce:	4770      	bx	lr

080058d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80058e0:	605a      	str	r2, [r3, #4]
  return 0;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bc80      	pop	{r7}
 80058ec:	4770      	bx	lr

080058ee <_isatty>:

int _isatty(int file)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80058f6:	2301      	movs	r3, #1
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bc80      	pop	{r7}
 8005900:	4770      	bx	lr

08005902 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005902:	b480      	push	{r7}
 8005904:	b085      	sub	sp, #20
 8005906:	af00      	add	r7, sp, #0
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	bc80      	pop	{r7}
 8005918:	4770      	bx	lr
	...

0800591c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005924:	4a14      	ldr	r2, [pc, #80]	@ (8005978 <_sbrk+0x5c>)
 8005926:	4b15      	ldr	r3, [pc, #84]	@ (800597c <_sbrk+0x60>)
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005930:	4b13      	ldr	r3, [pc, #76]	@ (8005980 <_sbrk+0x64>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d102      	bne.n	800593e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005938:	4b11      	ldr	r3, [pc, #68]	@ (8005980 <_sbrk+0x64>)
 800593a:	4a12      	ldr	r2, [pc, #72]	@ (8005984 <_sbrk+0x68>)
 800593c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800593e:	4b10      	ldr	r3, [pc, #64]	@ (8005980 <_sbrk+0x64>)
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4413      	add	r3, r2
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	429a      	cmp	r2, r3
 800594a:	d207      	bcs.n	800595c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800594c:	f003 f8d0 	bl	8008af0 <__errno>
 8005950:	4603      	mov	r3, r0
 8005952:	220c      	movs	r2, #12
 8005954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005956:	f04f 33ff 	mov.w	r3, #4294967295
 800595a:	e009      	b.n	8005970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800595c:	4b08      	ldr	r3, [pc, #32]	@ (8005980 <_sbrk+0x64>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005962:	4b07      	ldr	r3, [pc, #28]	@ (8005980 <_sbrk+0x64>)
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4413      	add	r3, r2
 800596a:	4a05      	ldr	r2, [pc, #20]	@ (8005980 <_sbrk+0x64>)
 800596c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800596e:	68fb      	ldr	r3, [r7, #12]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	20005000 	.word	0x20005000
 800597c:	00000400 	.word	0x00000400
 8005980:	20003f24 	.word	0x20003f24
 8005984:	20004108 	.word	0x20004108

08005988 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800598c:	bf00      	nop
 800598e:	46bd      	mov	sp, r7
 8005990:	bc80      	pop	{r7}
 8005992:	4770      	bx	lr

08005994 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b096      	sub	sp, #88	@ 0x58
 8005998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800599a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800599e:	2200      	movs	r2, #0
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	605a      	str	r2, [r3, #4]
 80059a4:	609a      	str	r2, [r3, #8]
 80059a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059a8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80059b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059b6:	2200      	movs	r2, #0
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	605a      	str	r2, [r3, #4]
 80059bc:	609a      	str	r2, [r3, #8]
 80059be:	60da      	str	r2, [r3, #12]
 80059c0:	611a      	str	r2, [r3, #16]
 80059c2:	615a      	str	r2, [r3, #20]
 80059c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80059c6:	1d3b      	adds	r3, r7, #4
 80059c8:	2220      	movs	r2, #32
 80059ca:	2100      	movs	r1, #0
 80059cc:	4618      	mov	r0, r3
 80059ce:	f003 f82e 	bl	8008a2e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80059d2:	4b3f      	ldr	r3, [pc, #252]	@ (8005ad0 <MX_TIM1_Init+0x13c>)
 80059d4:	4a3f      	ldr	r2, [pc, #252]	@ (8005ad4 <MX_TIM1_Init+0x140>)
 80059d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720-1;
 80059d8:	4b3d      	ldr	r3, [pc, #244]	@ (8005ad0 <MX_TIM1_Init+0x13c>)
 80059da:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80059de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059e0:	4b3b      	ldr	r3, [pc, #236]	@ (8005ad0 <MX_TIM1_Init+0x13c>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 80059e6:	4b3a      	ldr	r3, [pc, #232]	@ (8005ad0 <MX_TIM1_Init+0x13c>)
 80059e8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80059ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059ee:	4b38      	ldr	r3, [pc, #224]	@ (8005ad0 <MX_TIM1_Init+0x13c>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80059f4:	4b36      	ldr	r3, [pc, #216]	@ (8005ad0 <MX_TIM1_Init+0x13c>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059fa:	4b35      	ldr	r3, [pc, #212]	@ (8005ad0 <MX_TIM1_Init+0x13c>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005a00:	4833      	ldr	r0, [pc, #204]	@ (8005ad0 <MX_TIM1_Init+0x13c>)
 8005a02:	f001 ff4b 	bl	800789c <HAL_TIM_Base_Init>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005a0c:	f7fc f883 	bl	8001b16 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a14:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005a16:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	482c      	ldr	r0, [pc, #176]	@ (8005ad0 <MX_TIM1_Init+0x13c>)
 8005a1e:	f002 fa79 	bl	8007f14 <HAL_TIM_ConfigClockSource>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d001      	beq.n	8005a2c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005a28:	f7fc f875 	bl	8001b16 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005a2c:	4828      	ldr	r0, [pc, #160]	@ (8005ad0 <MX_TIM1_Init+0x13c>)
 8005a2e:	f001 ff84 	bl	800793a <HAL_TIM_PWM_Init>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005a38:	f7fc f86d 	bl	8001b16 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a40:	2300      	movs	r3, #0
 8005a42:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005a44:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005a48:	4619      	mov	r1, r3
 8005a4a:	4821      	ldr	r0, [pc, #132]	@ (8005ad0 <MX_TIM1_Init+0x13c>)
 8005a4c:	f002 fdda 	bl	8008604 <HAL_TIMEx_MasterConfigSynchronization>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8005a56:	f7fc f85e 	bl	8001b16 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a5a:	2360      	movs	r3, #96	@ 0x60
 8005a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a62:	2300      	movs	r3, #0
 8005a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005a66:	2300      	movs	r3, #0
 8005a68:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005a72:	2300      	movs	r3, #0
 8005a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005a76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a7a:	2204      	movs	r2, #4
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4814      	ldr	r0, [pc, #80]	@ (8005ad0 <MX_TIM1_Init+0x13c>)
 8005a80:	f002 f986 	bl	8007d90 <HAL_TIM_PWM_ConfigChannel>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8005a8a:	f7fc f844 	bl	8001b16 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005aa2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005aa6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005aac:	1d3b      	adds	r3, r7, #4
 8005aae:	4619      	mov	r1, r3
 8005ab0:	4807      	ldr	r0, [pc, #28]	@ (8005ad0 <MX_TIM1_Init+0x13c>)
 8005ab2:	f002 fe05 	bl	80086c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8005abc:	f7fc f82b 	bl	8001b16 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005ac0:	4803      	ldr	r0, [pc, #12]	@ (8005ad0 <MX_TIM1_Init+0x13c>)
 8005ac2:	f000 f8cd 	bl	8005c60 <HAL_TIM_MspPostInit>

}
 8005ac6:	bf00      	nop
 8005ac8:	3758      	adds	r7, #88	@ 0x58
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20003f28 	.word	0x20003f28
 8005ad4:	40012c00 	.word	0x40012c00

08005ad8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08c      	sub	sp, #48	@ 0x30
 8005adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005ade:	f107 030c 	add.w	r3, r7, #12
 8005ae2:	2224      	movs	r2, #36	@ 0x24
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f002 ffa1 	bl	8008a2e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005aec:	1d3b      	adds	r3, r7, #4
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005af4:	4b20      	ldr	r3, [pc, #128]	@ (8005b78 <MX_TIM3_Init+0xa0>)
 8005af6:	4a21      	ldr	r2, [pc, #132]	@ (8005b7c <MX_TIM3_Init+0xa4>)
 8005af8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005afa:	4b1f      	ldr	r3, [pc, #124]	@ (8005b78 <MX_TIM3_Init+0xa0>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b00:	4b1d      	ldr	r3, [pc, #116]	@ (8005b78 <MX_TIM3_Init+0xa0>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005b06:	4b1c      	ldr	r3, [pc, #112]	@ (8005b78 <MX_TIM3_Init+0xa0>)
 8005b08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005b0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8005b78 <MX_TIM3_Init+0xa0>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b14:	4b18      	ldr	r3, [pc, #96]	@ (8005b78 <MX_TIM3_Init+0xa0>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005b22:	2301      	movs	r3, #1
 8005b24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005b26:	2300      	movs	r3, #0
 8005b28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005b32:	2301      	movs	r3, #1
 8005b34:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005b36:	2300      	movs	r3, #0
 8005b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005b3e:	f107 030c 	add.w	r3, r7, #12
 8005b42:	4619      	mov	r1, r3
 8005b44:	480c      	ldr	r0, [pc, #48]	@ (8005b78 <MX_TIM3_Init+0xa0>)
 8005b46:	f001 fff3 	bl	8007b30 <HAL_TIM_Encoder_Init>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8005b50:	f7fb ffe1 	bl	8001b16 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b54:	2300      	movs	r3, #0
 8005b56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005b5c:	1d3b      	adds	r3, r7, #4
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4805      	ldr	r0, [pc, #20]	@ (8005b78 <MX_TIM3_Init+0xa0>)
 8005b62:	f002 fd4f 	bl	8008604 <HAL_TIMEx_MasterConfigSynchronization>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8005b6c:	f7fb ffd3 	bl	8001b16 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005b70:	bf00      	nop
 8005b72:	3730      	adds	r7, #48	@ 0x30
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	20003f70 	.word	0x20003f70
 8005b7c:	40000400 	.word	0x40000400

08005b80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a09      	ldr	r2, [pc, #36]	@ (8005bb4 <HAL_TIM_Base_MspInit+0x34>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d10b      	bne.n	8005baa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005b92:	4b09      	ldr	r3, [pc, #36]	@ (8005bb8 <HAL_TIM_Base_MspInit+0x38>)
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	4a08      	ldr	r2, [pc, #32]	@ (8005bb8 <HAL_TIM_Base_MspInit+0x38>)
 8005b98:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005b9c:	6193      	str	r3, [r2, #24]
 8005b9e:	4b06      	ldr	r3, [pc, #24]	@ (8005bb8 <HAL_TIM_Base_MspInit+0x38>)
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8005baa:	bf00      	nop
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bc80      	pop	{r7}
 8005bb2:	4770      	bx	lr
 8005bb4:	40012c00 	.word	0x40012c00
 8005bb8:	40021000 	.word	0x40021000

08005bbc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b08a      	sub	sp, #40	@ 0x28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bc4:	f107 0314 	add.w	r3, r7, #20
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	605a      	str	r2, [r3, #4]
 8005bce:	609a      	str	r2, [r3, #8]
 8005bd0:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8005c50 <HAL_TIM_Encoder_MspInit+0x94>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d135      	bne.n	8005c48 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8005c54 <HAL_TIM_Encoder_MspInit+0x98>)
 8005bde:	69db      	ldr	r3, [r3, #28]
 8005be0:	4a1c      	ldr	r2, [pc, #112]	@ (8005c54 <HAL_TIM_Encoder_MspInit+0x98>)
 8005be2:	f043 0302 	orr.w	r3, r3, #2
 8005be6:	61d3      	str	r3, [r2, #28]
 8005be8:	4b1a      	ldr	r3, [pc, #104]	@ (8005c54 <HAL_TIM_Encoder_MspInit+0x98>)
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	613b      	str	r3, [r7, #16]
 8005bf2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bf4:	4b17      	ldr	r3, [pc, #92]	@ (8005c54 <HAL_TIM_Encoder_MspInit+0x98>)
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	4a16      	ldr	r2, [pc, #88]	@ (8005c54 <HAL_TIM_Encoder_MspInit+0x98>)
 8005bfa:	f043 0308 	orr.w	r3, r3, #8
 8005bfe:	6193      	str	r3, [r2, #24]
 8005c00:	4b14      	ldr	r3, [pc, #80]	@ (8005c54 <HAL_TIM_Encoder_MspInit+0x98>)
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	f003 0308 	and.w	r3, r3, #8
 8005c08:	60fb      	str	r3, [r7, #12]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_CH1_Pin|Encoder_CH2_Pin;
 8005c0c:	2330      	movs	r3, #48	@ 0x30
 8005c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c10:	2300      	movs	r3, #0
 8005c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c14:	2300      	movs	r3, #0
 8005c16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c18:	f107 0314 	add.w	r3, r7, #20
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	480e      	ldr	r0, [pc, #56]	@ (8005c58 <HAL_TIM_Encoder_MspInit+0x9c>)
 8005c20:	f000 fb6c 	bl	80062fc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8005c24:	4b0d      	ldr	r3, [pc, #52]	@ (8005c5c <HAL_TIM_Encoder_MspInit+0xa0>)
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c34:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8005c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c42:	4a06      	ldr	r2, [pc, #24]	@ (8005c5c <HAL_TIM_Encoder_MspInit+0xa0>)
 8005c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c46:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005c48:	bf00      	nop
 8005c4a:	3728      	adds	r7, #40	@ 0x28
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	40000400 	.word	0x40000400
 8005c54:	40021000 	.word	0x40021000
 8005c58:	40010c00 	.word	0x40010c00
 8005c5c:	40010000 	.word	0x40010000

08005c60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c68:	f107 0310 	add.w	r3, r7, #16
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	605a      	str	r2, [r3, #4]
 8005c72:	609a      	str	r2, [r3, #8]
 8005c74:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a10      	ldr	r2, [pc, #64]	@ (8005cbc <HAL_TIM_MspPostInit+0x5c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d118      	bne.n	8005cb2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c80:	4b0f      	ldr	r3, [pc, #60]	@ (8005cc0 <HAL_TIM_MspPostInit+0x60>)
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	4a0e      	ldr	r2, [pc, #56]	@ (8005cc0 <HAL_TIM_MspPostInit+0x60>)
 8005c86:	f043 0304 	orr.w	r3, r3, #4
 8005c8a:	6193      	str	r3, [r2, #24]
 8005c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc0 <HAL_TIM_MspPostInit+0x60>)
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005c98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ca6:	f107 0310 	add.w	r3, r7, #16
 8005caa:	4619      	mov	r1, r3
 8005cac:	4805      	ldr	r0, [pc, #20]	@ (8005cc4 <HAL_TIM_MspPostInit+0x64>)
 8005cae:	f000 fb25 	bl	80062fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005cb2:	bf00      	nop
 8005cb4:	3720      	adds	r7, #32
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	40012c00 	.word	0x40012c00
 8005cc0:	40021000 	.word	0x40021000
 8005cc4:	40010800 	.word	0x40010800

08005cc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005cc8:	f7ff fe5e 	bl	8005988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ccc:	480b      	ldr	r0, [pc, #44]	@ (8005cfc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005cce:	490c      	ldr	r1, [pc, #48]	@ (8005d00 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005cd0:	4a0c      	ldr	r2, [pc, #48]	@ (8005d04 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005cd4:	e002      	b.n	8005cdc <LoopCopyDataInit>

08005cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005cda:	3304      	adds	r3, #4

08005cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ce0:	d3f9      	bcc.n	8005cd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ce2:	4a09      	ldr	r2, [pc, #36]	@ (8005d08 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005ce4:	4c09      	ldr	r4, [pc, #36]	@ (8005d0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ce8:	e001      	b.n	8005cee <LoopFillZerobss>

08005cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005cec:	3204      	adds	r2, #4

08005cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005cf0:	d3fb      	bcc.n	8005cea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005cf2:	f002 ff03 	bl	8008afc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005cf6:	f7fb fe41 	bl	800197c <main>
  bx lr
 8005cfa:	4770      	bx	lr
  ldr r0, =_sdata
 8005cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d00:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8005d04:	0800ba50 	.word	0x0800ba50
  ldr r2, =_sbss
 8005d08:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8005d0c:	20004108 	.word	0x20004108

08005d10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005d10:	e7fe      	b.n	8005d10 <ADC1_2_IRQHandler>
	...

08005d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d18:	4b08      	ldr	r3, [pc, #32]	@ (8005d3c <HAL_Init+0x28>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a07      	ldr	r2, [pc, #28]	@ (8005d3c <HAL_Init+0x28>)
 8005d1e:	f043 0310 	orr.w	r3, r3, #16
 8005d22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d24:	2003      	movs	r0, #3
 8005d26:	f000 f947 	bl	8005fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d2a:	200f      	movs	r0, #15
 8005d2c:	f000 f808 	bl	8005d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d30:	f7ff fd00 	bl	8005734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	40022000 	.word	0x40022000

08005d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005d48:	4b12      	ldr	r3, [pc, #72]	@ (8005d94 <HAL_InitTick+0x54>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	4b12      	ldr	r3, [pc, #72]	@ (8005d98 <HAL_InitTick+0x58>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	4619      	mov	r1, r3
 8005d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 f95f 	bl	8006022 <HAL_SYSTICK_Config>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e00e      	b.n	8005d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b0f      	cmp	r3, #15
 8005d72:	d80a      	bhi.n	8005d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d74:	2200      	movs	r2, #0
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7c:	f000 f927 	bl	8005fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d80:	4a06      	ldr	r2, [pc, #24]	@ (8005d9c <HAL_InitTick+0x5c>)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	e000      	b.n	8005d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	20000018 	.word	0x20000018
 8005d98:	20000020 	.word	0x20000020
 8005d9c:	2000001c 	.word	0x2000001c

08005da0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005da0:	b480      	push	{r7}
 8005da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005da4:	4b05      	ldr	r3, [pc, #20]	@ (8005dbc <HAL_IncTick+0x1c>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	461a      	mov	r2, r3
 8005daa:	4b05      	ldr	r3, [pc, #20]	@ (8005dc0 <HAL_IncTick+0x20>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4413      	add	r3, r2
 8005db0:	4a03      	ldr	r2, [pc, #12]	@ (8005dc0 <HAL_IncTick+0x20>)
 8005db2:	6013      	str	r3, [r2, #0]
}
 8005db4:	bf00      	nop
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bc80      	pop	{r7}
 8005dba:	4770      	bx	lr
 8005dbc:	20000020 	.word	0x20000020
 8005dc0:	20003fb8 	.word	0x20003fb8

08005dc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8005dc8:	4b02      	ldr	r3, [pc, #8]	@ (8005dd4 <HAL_GetTick+0x10>)
 8005dca:	681b      	ldr	r3, [r3, #0]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bc80      	pop	{r7}
 8005dd2:	4770      	bx	lr
 8005dd4:	20003fb8 	.word	0x20003fb8

08005dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005de0:	f7ff fff0 	bl	8005dc4 <HAL_GetTick>
 8005de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df0:	d005      	beq.n	8005dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005df2:	4b0a      	ldr	r3, [pc, #40]	@ (8005e1c <HAL_Delay+0x44>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	461a      	mov	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005dfe:	bf00      	nop
 8005e00:	f7ff ffe0 	bl	8005dc4 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d8f7      	bhi.n	8005e00 <HAL_Delay+0x28>
  {
  }
}
 8005e10:	bf00      	nop
 8005e12:	bf00      	nop
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000020 	.word	0x20000020

08005e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e30:	4b0c      	ldr	r3, [pc, #48]	@ (8005e64 <__NVIC_SetPriorityGrouping+0x44>)
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e52:	4a04      	ldr	r2, [pc, #16]	@ (8005e64 <__NVIC_SetPriorityGrouping+0x44>)
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	60d3      	str	r3, [r2, #12]
}
 8005e58:	bf00      	nop
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bc80      	pop	{r7}
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	e000ed00 	.word	0xe000ed00

08005e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e6c:	4b04      	ldr	r3, [pc, #16]	@ (8005e80 <__NVIC_GetPriorityGrouping+0x18>)
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	0a1b      	lsrs	r3, r3, #8
 8005e72:	f003 0307 	and.w	r3, r3, #7
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bc80      	pop	{r7}
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	e000ed00 	.word	0xe000ed00

08005e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	db0b      	blt.n	8005eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e96:	79fb      	ldrb	r3, [r7, #7]
 8005e98:	f003 021f 	and.w	r2, r3, #31
 8005e9c:	4906      	ldr	r1, [pc, #24]	@ (8005eb8 <__NVIC_EnableIRQ+0x34>)
 8005e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ea2:	095b      	lsrs	r3, r3, #5
 8005ea4:	2001      	movs	r0, #1
 8005ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8005eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bc80      	pop	{r7}
 8005eb6:	4770      	bx	lr
 8005eb8:	e000e100 	.word	0xe000e100

08005ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	6039      	str	r1, [r7, #0]
 8005ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	db0a      	blt.n	8005ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	490c      	ldr	r1, [pc, #48]	@ (8005f08 <__NVIC_SetPriority+0x4c>)
 8005ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eda:	0112      	lsls	r2, r2, #4
 8005edc:	b2d2      	uxtb	r2, r2
 8005ede:	440b      	add	r3, r1
 8005ee0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ee4:	e00a      	b.n	8005efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	4908      	ldr	r1, [pc, #32]	@ (8005f0c <__NVIC_SetPriority+0x50>)
 8005eec:	79fb      	ldrb	r3, [r7, #7]
 8005eee:	f003 030f 	and.w	r3, r3, #15
 8005ef2:	3b04      	subs	r3, #4
 8005ef4:	0112      	lsls	r2, r2, #4
 8005ef6:	b2d2      	uxtb	r2, r2
 8005ef8:	440b      	add	r3, r1
 8005efa:	761a      	strb	r2, [r3, #24]
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bc80      	pop	{r7}
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	e000e100 	.word	0xe000e100
 8005f0c:	e000ed00 	.word	0xe000ed00

08005f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b089      	sub	sp, #36	@ 0x24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f003 0307 	and.w	r3, r3, #7
 8005f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	f1c3 0307 	rsb	r3, r3, #7
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	bf28      	it	cs
 8005f2e:	2304      	movcs	r3, #4
 8005f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	3304      	adds	r3, #4
 8005f36:	2b06      	cmp	r3, #6
 8005f38:	d902      	bls.n	8005f40 <NVIC_EncodePriority+0x30>
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	3b03      	subs	r3, #3
 8005f3e:	e000      	b.n	8005f42 <NVIC_EncodePriority+0x32>
 8005f40:	2300      	movs	r3, #0
 8005f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f44:	f04f 32ff 	mov.w	r2, #4294967295
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4e:	43da      	mvns	r2, r3
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	401a      	ands	r2, r3
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f58:	f04f 31ff 	mov.w	r1, #4294967295
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f62:	43d9      	mvns	r1, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f68:	4313      	orrs	r3, r2
         );
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3724      	adds	r7, #36	@ 0x24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bc80      	pop	{r7}
 8005f72:	4770      	bx	lr

08005f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f84:	d301      	bcc.n	8005f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f86:	2301      	movs	r3, #1
 8005f88:	e00f      	b.n	8005faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8005fb4 <SysTick_Config+0x40>)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f92:	210f      	movs	r1, #15
 8005f94:	f04f 30ff 	mov.w	r0, #4294967295
 8005f98:	f7ff ff90 	bl	8005ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f9c:	4b05      	ldr	r3, [pc, #20]	@ (8005fb4 <SysTick_Config+0x40>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005fa2:	4b04      	ldr	r3, [pc, #16]	@ (8005fb4 <SysTick_Config+0x40>)
 8005fa4:	2207      	movs	r2, #7
 8005fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	e000e010 	.word	0xe000e010

08005fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7ff ff2d 	bl	8005e20 <__NVIC_SetPriorityGrouping>
}
 8005fc6:	bf00      	nop
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b086      	sub	sp, #24
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	60b9      	str	r1, [r7, #8]
 8005fd8:	607a      	str	r2, [r7, #4]
 8005fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005fe0:	f7ff ff42 	bl	8005e68 <__NVIC_GetPriorityGrouping>
 8005fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	68b9      	ldr	r1, [r7, #8]
 8005fea:	6978      	ldr	r0, [r7, #20]
 8005fec:	f7ff ff90 	bl	8005f10 <NVIC_EncodePriority>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7ff ff5f 	bl	8005ebc <__NVIC_SetPriority>
}
 8005ffe:	bf00      	nop
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b082      	sub	sp, #8
 800600a:	af00      	add	r7, sp, #0
 800600c:	4603      	mov	r3, r0
 800600e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff ff35 	bl	8005e84 <__NVIC_EnableIRQ>
}
 800601a:	bf00      	nop
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b082      	sub	sp, #8
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7ff ffa2 	bl	8005f74 <SysTick_Config>
 8006030:	4603      	mov	r3, r0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e043      	b.n	80060da <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	461a      	mov	r2, r3
 8006058:	4b22      	ldr	r3, [pc, #136]	@ (80060e4 <HAL_DMA_Init+0xa8>)
 800605a:	4413      	add	r3, r2
 800605c:	4a22      	ldr	r2, [pc, #136]	@ (80060e8 <HAL_DMA_Init+0xac>)
 800605e:	fba2 2303 	umull	r2, r3, r2, r3
 8006062:	091b      	lsrs	r3, r3, #4
 8006064:	009a      	lsls	r2, r3, #2
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a1f      	ldr	r2, [pc, #124]	@ (80060ec <HAL_DMA_Init+0xb0>)
 800606e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006086:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800608a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006094:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	bc80      	pop	{r7}
 80060e2:	4770      	bx	lr
 80060e4:	bffdfff8 	.word	0xbffdfff8
 80060e8:	cccccccd 	.word	0xcccccccd
 80060ec:	40020000 	.word	0x40020000

080060f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610c:	2204      	movs	r2, #4
 800610e:	409a      	lsls	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4013      	ands	r3, r2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d04f      	beq.n	80061b8 <HAL_DMA_IRQHandler+0xc8>
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f003 0304 	and.w	r3, r3, #4
 800611e:	2b00      	cmp	r3, #0
 8006120:	d04a      	beq.n	80061b8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0320 	and.w	r3, r3, #32
 800612c:	2b00      	cmp	r3, #0
 800612e:	d107      	bne.n	8006140 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0204 	bic.w	r2, r2, #4
 800613e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a66      	ldr	r2, [pc, #408]	@ (80062e0 <HAL_DMA_IRQHandler+0x1f0>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d029      	beq.n	800619e <HAL_DMA_IRQHandler+0xae>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a65      	ldr	r2, [pc, #404]	@ (80062e4 <HAL_DMA_IRQHandler+0x1f4>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d022      	beq.n	800619a <HAL_DMA_IRQHandler+0xaa>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a63      	ldr	r2, [pc, #396]	@ (80062e8 <HAL_DMA_IRQHandler+0x1f8>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d01a      	beq.n	8006194 <HAL_DMA_IRQHandler+0xa4>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a62      	ldr	r2, [pc, #392]	@ (80062ec <HAL_DMA_IRQHandler+0x1fc>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d012      	beq.n	800618e <HAL_DMA_IRQHandler+0x9e>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a60      	ldr	r2, [pc, #384]	@ (80062f0 <HAL_DMA_IRQHandler+0x200>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d00a      	beq.n	8006188 <HAL_DMA_IRQHandler+0x98>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a5f      	ldr	r2, [pc, #380]	@ (80062f4 <HAL_DMA_IRQHandler+0x204>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d102      	bne.n	8006182 <HAL_DMA_IRQHandler+0x92>
 800617c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006180:	e00e      	b.n	80061a0 <HAL_DMA_IRQHandler+0xb0>
 8006182:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006186:	e00b      	b.n	80061a0 <HAL_DMA_IRQHandler+0xb0>
 8006188:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800618c:	e008      	b.n	80061a0 <HAL_DMA_IRQHandler+0xb0>
 800618e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006192:	e005      	b.n	80061a0 <HAL_DMA_IRQHandler+0xb0>
 8006194:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006198:	e002      	b.n	80061a0 <HAL_DMA_IRQHandler+0xb0>
 800619a:	2340      	movs	r3, #64	@ 0x40
 800619c:	e000      	b.n	80061a0 <HAL_DMA_IRQHandler+0xb0>
 800619e:	2304      	movs	r3, #4
 80061a0:	4a55      	ldr	r2, [pc, #340]	@ (80062f8 <HAL_DMA_IRQHandler+0x208>)
 80061a2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 8094 	beq.w	80062d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80061b6:	e08e      	b.n	80062d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061bc:	2202      	movs	r2, #2
 80061be:	409a      	lsls	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4013      	ands	r3, r2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d056      	beq.n	8006276 <HAL_DMA_IRQHandler+0x186>
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d051      	beq.n	8006276 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0320 	and.w	r3, r3, #32
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10b      	bne.n	80061f8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 020a 	bic.w	r2, r2, #10
 80061ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a38      	ldr	r2, [pc, #224]	@ (80062e0 <HAL_DMA_IRQHandler+0x1f0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d029      	beq.n	8006256 <HAL_DMA_IRQHandler+0x166>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a37      	ldr	r2, [pc, #220]	@ (80062e4 <HAL_DMA_IRQHandler+0x1f4>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d022      	beq.n	8006252 <HAL_DMA_IRQHandler+0x162>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a35      	ldr	r2, [pc, #212]	@ (80062e8 <HAL_DMA_IRQHandler+0x1f8>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d01a      	beq.n	800624c <HAL_DMA_IRQHandler+0x15c>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a34      	ldr	r2, [pc, #208]	@ (80062ec <HAL_DMA_IRQHandler+0x1fc>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d012      	beq.n	8006246 <HAL_DMA_IRQHandler+0x156>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a32      	ldr	r2, [pc, #200]	@ (80062f0 <HAL_DMA_IRQHandler+0x200>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d00a      	beq.n	8006240 <HAL_DMA_IRQHandler+0x150>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a31      	ldr	r2, [pc, #196]	@ (80062f4 <HAL_DMA_IRQHandler+0x204>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d102      	bne.n	800623a <HAL_DMA_IRQHandler+0x14a>
 8006234:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006238:	e00e      	b.n	8006258 <HAL_DMA_IRQHandler+0x168>
 800623a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800623e:	e00b      	b.n	8006258 <HAL_DMA_IRQHandler+0x168>
 8006240:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006244:	e008      	b.n	8006258 <HAL_DMA_IRQHandler+0x168>
 8006246:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800624a:	e005      	b.n	8006258 <HAL_DMA_IRQHandler+0x168>
 800624c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006250:	e002      	b.n	8006258 <HAL_DMA_IRQHandler+0x168>
 8006252:	2320      	movs	r3, #32
 8006254:	e000      	b.n	8006258 <HAL_DMA_IRQHandler+0x168>
 8006256:	2302      	movs	r3, #2
 8006258:	4a27      	ldr	r2, [pc, #156]	@ (80062f8 <HAL_DMA_IRQHandler+0x208>)
 800625a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006268:	2b00      	cmp	r3, #0
 800626a:	d034      	beq.n	80062d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006274:	e02f      	b.n	80062d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627a:	2208      	movs	r2, #8
 800627c:	409a      	lsls	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	4013      	ands	r3, r2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d028      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x1e8>
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b00      	cmp	r3, #0
 800628e:	d023      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 020e 	bic.w	r2, r2, #14
 800629e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a8:	2101      	movs	r1, #1
 80062aa:	fa01 f202 	lsl.w	r2, r1, r2
 80062ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d004      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	4798      	blx	r3
    }
  }
  return;
 80062d6:	bf00      	nop
 80062d8:	bf00      	nop
}
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40020008 	.word	0x40020008
 80062e4:	4002001c 	.word	0x4002001c
 80062e8:	40020030 	.word	0x40020030
 80062ec:	40020044 	.word	0x40020044
 80062f0:	40020058 	.word	0x40020058
 80062f4:	4002006c 	.word	0x4002006c
 80062f8:	40020000 	.word	0x40020000

080062fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b08b      	sub	sp, #44	@ 0x2c
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006306:	2300      	movs	r3, #0
 8006308:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800630a:	2300      	movs	r3, #0
 800630c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800630e:	e169      	b.n	80065e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006310:	2201      	movs	r2, #1
 8006312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006314:	fa02 f303 	lsl.w	r3, r2, r3
 8006318:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	69fa      	ldr	r2, [r7, #28]
 8006320:	4013      	ands	r3, r2
 8006322:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	429a      	cmp	r2, r3
 800632a:	f040 8158 	bne.w	80065de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	4a9a      	ldr	r2, [pc, #616]	@ (800659c <HAL_GPIO_Init+0x2a0>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d05e      	beq.n	80063f6 <HAL_GPIO_Init+0xfa>
 8006338:	4a98      	ldr	r2, [pc, #608]	@ (800659c <HAL_GPIO_Init+0x2a0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d875      	bhi.n	800642a <HAL_GPIO_Init+0x12e>
 800633e:	4a98      	ldr	r2, [pc, #608]	@ (80065a0 <HAL_GPIO_Init+0x2a4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d058      	beq.n	80063f6 <HAL_GPIO_Init+0xfa>
 8006344:	4a96      	ldr	r2, [pc, #600]	@ (80065a0 <HAL_GPIO_Init+0x2a4>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d86f      	bhi.n	800642a <HAL_GPIO_Init+0x12e>
 800634a:	4a96      	ldr	r2, [pc, #600]	@ (80065a4 <HAL_GPIO_Init+0x2a8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d052      	beq.n	80063f6 <HAL_GPIO_Init+0xfa>
 8006350:	4a94      	ldr	r2, [pc, #592]	@ (80065a4 <HAL_GPIO_Init+0x2a8>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d869      	bhi.n	800642a <HAL_GPIO_Init+0x12e>
 8006356:	4a94      	ldr	r2, [pc, #592]	@ (80065a8 <HAL_GPIO_Init+0x2ac>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d04c      	beq.n	80063f6 <HAL_GPIO_Init+0xfa>
 800635c:	4a92      	ldr	r2, [pc, #584]	@ (80065a8 <HAL_GPIO_Init+0x2ac>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d863      	bhi.n	800642a <HAL_GPIO_Init+0x12e>
 8006362:	4a92      	ldr	r2, [pc, #584]	@ (80065ac <HAL_GPIO_Init+0x2b0>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d046      	beq.n	80063f6 <HAL_GPIO_Init+0xfa>
 8006368:	4a90      	ldr	r2, [pc, #576]	@ (80065ac <HAL_GPIO_Init+0x2b0>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d85d      	bhi.n	800642a <HAL_GPIO_Init+0x12e>
 800636e:	2b12      	cmp	r3, #18
 8006370:	d82a      	bhi.n	80063c8 <HAL_GPIO_Init+0xcc>
 8006372:	2b12      	cmp	r3, #18
 8006374:	d859      	bhi.n	800642a <HAL_GPIO_Init+0x12e>
 8006376:	a201      	add	r2, pc, #4	@ (adr r2, 800637c <HAL_GPIO_Init+0x80>)
 8006378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637c:	080063f7 	.word	0x080063f7
 8006380:	080063d1 	.word	0x080063d1
 8006384:	080063e3 	.word	0x080063e3
 8006388:	08006425 	.word	0x08006425
 800638c:	0800642b 	.word	0x0800642b
 8006390:	0800642b 	.word	0x0800642b
 8006394:	0800642b 	.word	0x0800642b
 8006398:	0800642b 	.word	0x0800642b
 800639c:	0800642b 	.word	0x0800642b
 80063a0:	0800642b 	.word	0x0800642b
 80063a4:	0800642b 	.word	0x0800642b
 80063a8:	0800642b 	.word	0x0800642b
 80063ac:	0800642b 	.word	0x0800642b
 80063b0:	0800642b 	.word	0x0800642b
 80063b4:	0800642b 	.word	0x0800642b
 80063b8:	0800642b 	.word	0x0800642b
 80063bc:	0800642b 	.word	0x0800642b
 80063c0:	080063d9 	.word	0x080063d9
 80063c4:	080063ed 	.word	0x080063ed
 80063c8:	4a79      	ldr	r2, [pc, #484]	@ (80065b0 <HAL_GPIO_Init+0x2b4>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d013      	beq.n	80063f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80063ce:	e02c      	b.n	800642a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	623b      	str	r3, [r7, #32]
          break;
 80063d6:	e029      	b.n	800642c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	3304      	adds	r3, #4
 80063de:	623b      	str	r3, [r7, #32]
          break;
 80063e0:	e024      	b.n	800642c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	3308      	adds	r3, #8
 80063e8:	623b      	str	r3, [r7, #32]
          break;
 80063ea:	e01f      	b.n	800642c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	330c      	adds	r3, #12
 80063f2:	623b      	str	r3, [r7, #32]
          break;
 80063f4:	e01a      	b.n	800642c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d102      	bne.n	8006404 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80063fe:	2304      	movs	r3, #4
 8006400:	623b      	str	r3, [r7, #32]
          break;
 8006402:	e013      	b.n	800642c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d105      	bne.n	8006418 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800640c:	2308      	movs	r3, #8
 800640e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	69fa      	ldr	r2, [r7, #28]
 8006414:	611a      	str	r2, [r3, #16]
          break;
 8006416:	e009      	b.n	800642c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006418:	2308      	movs	r3, #8
 800641a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	615a      	str	r2, [r3, #20]
          break;
 8006422:	e003      	b.n	800642c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006424:	2300      	movs	r3, #0
 8006426:	623b      	str	r3, [r7, #32]
          break;
 8006428:	e000      	b.n	800642c <HAL_GPIO_Init+0x130>
          break;
 800642a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	2bff      	cmp	r3, #255	@ 0xff
 8006430:	d801      	bhi.n	8006436 <HAL_GPIO_Init+0x13a>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	e001      	b.n	800643a <HAL_GPIO_Init+0x13e>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	3304      	adds	r3, #4
 800643a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	2bff      	cmp	r3, #255	@ 0xff
 8006440:	d802      	bhi.n	8006448 <HAL_GPIO_Init+0x14c>
 8006442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	e002      	b.n	800644e <HAL_GPIO_Init+0x152>
 8006448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644a:	3b08      	subs	r3, #8
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	210f      	movs	r1, #15
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	fa01 f303 	lsl.w	r3, r1, r3
 800645c:	43db      	mvns	r3, r3
 800645e:	401a      	ands	r2, r3
 8006460:	6a39      	ldr	r1, [r7, #32]
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	fa01 f303 	lsl.w	r3, r1, r3
 8006468:	431a      	orrs	r2, r3
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 80b1 	beq.w	80065de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800647c:	4b4d      	ldr	r3, [pc, #308]	@ (80065b4 <HAL_GPIO_Init+0x2b8>)
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	4a4c      	ldr	r2, [pc, #304]	@ (80065b4 <HAL_GPIO_Init+0x2b8>)
 8006482:	f043 0301 	orr.w	r3, r3, #1
 8006486:	6193      	str	r3, [r2, #24]
 8006488:	4b4a      	ldr	r3, [pc, #296]	@ (80065b4 <HAL_GPIO_Init+0x2b8>)
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	60bb      	str	r3, [r7, #8]
 8006492:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006494:	4a48      	ldr	r2, [pc, #288]	@ (80065b8 <HAL_GPIO_Init+0x2bc>)
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	089b      	lsrs	r3, r3, #2
 800649a:	3302      	adds	r3, #2
 800649c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80064a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a4:	f003 0303 	and.w	r3, r3, #3
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	220f      	movs	r2, #15
 80064ac:	fa02 f303 	lsl.w	r3, r2, r3
 80064b0:	43db      	mvns	r3, r3
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	4013      	ands	r3, r2
 80064b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a40      	ldr	r2, [pc, #256]	@ (80065bc <HAL_GPIO_Init+0x2c0>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d013      	beq.n	80064e8 <HAL_GPIO_Init+0x1ec>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a3f      	ldr	r2, [pc, #252]	@ (80065c0 <HAL_GPIO_Init+0x2c4>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d00d      	beq.n	80064e4 <HAL_GPIO_Init+0x1e8>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a3e      	ldr	r2, [pc, #248]	@ (80065c4 <HAL_GPIO_Init+0x2c8>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d007      	beq.n	80064e0 <HAL_GPIO_Init+0x1e4>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a3d      	ldr	r2, [pc, #244]	@ (80065c8 <HAL_GPIO_Init+0x2cc>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d101      	bne.n	80064dc <HAL_GPIO_Init+0x1e0>
 80064d8:	2303      	movs	r3, #3
 80064da:	e006      	b.n	80064ea <HAL_GPIO_Init+0x1ee>
 80064dc:	2304      	movs	r3, #4
 80064de:	e004      	b.n	80064ea <HAL_GPIO_Init+0x1ee>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e002      	b.n	80064ea <HAL_GPIO_Init+0x1ee>
 80064e4:	2301      	movs	r3, #1
 80064e6:	e000      	b.n	80064ea <HAL_GPIO_Init+0x1ee>
 80064e8:	2300      	movs	r3, #0
 80064ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064ec:	f002 0203 	and.w	r2, r2, #3
 80064f0:	0092      	lsls	r2, r2, #2
 80064f2:	4093      	lsls	r3, r2
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80064fa:	492f      	ldr	r1, [pc, #188]	@ (80065b8 <HAL_GPIO_Init+0x2bc>)
 80064fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fe:	089b      	lsrs	r3, r3, #2
 8006500:	3302      	adds	r3, #2
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d006      	beq.n	8006522 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006514:	4b2d      	ldr	r3, [pc, #180]	@ (80065cc <HAL_GPIO_Init+0x2d0>)
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	492c      	ldr	r1, [pc, #176]	@ (80065cc <HAL_GPIO_Init+0x2d0>)
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	4313      	orrs	r3, r2
 800651e:	608b      	str	r3, [r1, #8]
 8006520:	e006      	b.n	8006530 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006522:	4b2a      	ldr	r3, [pc, #168]	@ (80065cc <HAL_GPIO_Init+0x2d0>)
 8006524:	689a      	ldr	r2, [r3, #8]
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	43db      	mvns	r3, r3
 800652a:	4928      	ldr	r1, [pc, #160]	@ (80065cc <HAL_GPIO_Init+0x2d0>)
 800652c:	4013      	ands	r3, r2
 800652e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d006      	beq.n	800654a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800653c:	4b23      	ldr	r3, [pc, #140]	@ (80065cc <HAL_GPIO_Init+0x2d0>)
 800653e:	68da      	ldr	r2, [r3, #12]
 8006540:	4922      	ldr	r1, [pc, #136]	@ (80065cc <HAL_GPIO_Init+0x2d0>)
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	4313      	orrs	r3, r2
 8006546:	60cb      	str	r3, [r1, #12]
 8006548:	e006      	b.n	8006558 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800654a:	4b20      	ldr	r3, [pc, #128]	@ (80065cc <HAL_GPIO_Init+0x2d0>)
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	43db      	mvns	r3, r3
 8006552:	491e      	ldr	r1, [pc, #120]	@ (80065cc <HAL_GPIO_Init+0x2d0>)
 8006554:	4013      	ands	r3, r2
 8006556:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d006      	beq.n	8006572 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006564:	4b19      	ldr	r3, [pc, #100]	@ (80065cc <HAL_GPIO_Init+0x2d0>)
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	4918      	ldr	r1, [pc, #96]	@ (80065cc <HAL_GPIO_Init+0x2d0>)
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	4313      	orrs	r3, r2
 800656e:	604b      	str	r3, [r1, #4]
 8006570:	e006      	b.n	8006580 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006572:	4b16      	ldr	r3, [pc, #88]	@ (80065cc <HAL_GPIO_Init+0x2d0>)
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	43db      	mvns	r3, r3
 800657a:	4914      	ldr	r1, [pc, #80]	@ (80065cc <HAL_GPIO_Init+0x2d0>)
 800657c:	4013      	ands	r3, r2
 800657e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d021      	beq.n	80065d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800658c:	4b0f      	ldr	r3, [pc, #60]	@ (80065cc <HAL_GPIO_Init+0x2d0>)
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	490e      	ldr	r1, [pc, #56]	@ (80065cc <HAL_GPIO_Init+0x2d0>)
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	4313      	orrs	r3, r2
 8006596:	600b      	str	r3, [r1, #0]
 8006598:	e021      	b.n	80065de <HAL_GPIO_Init+0x2e2>
 800659a:	bf00      	nop
 800659c:	10320000 	.word	0x10320000
 80065a0:	10310000 	.word	0x10310000
 80065a4:	10220000 	.word	0x10220000
 80065a8:	10210000 	.word	0x10210000
 80065ac:	10120000 	.word	0x10120000
 80065b0:	10110000 	.word	0x10110000
 80065b4:	40021000 	.word	0x40021000
 80065b8:	40010000 	.word	0x40010000
 80065bc:	40010800 	.word	0x40010800
 80065c0:	40010c00 	.word	0x40010c00
 80065c4:	40011000 	.word	0x40011000
 80065c8:	40011400 	.word	0x40011400
 80065cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80065d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006600 <HAL_GPIO_Init+0x304>)
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	43db      	mvns	r3, r3
 80065d8:	4909      	ldr	r1, [pc, #36]	@ (8006600 <HAL_GPIO_Init+0x304>)
 80065da:	4013      	ands	r3, r2
 80065dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80065de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e0:	3301      	adds	r3, #1
 80065e2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ea:	fa22 f303 	lsr.w	r3, r2, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f47f ae8e 	bne.w	8006310 <HAL_GPIO_Init+0x14>
  }
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop
 80065f8:	372c      	adds	r7, #44	@ 0x2c
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bc80      	pop	{r7}
 80065fe:	4770      	bx	lr
 8006600:	40010400 	.word	0x40010400

08006604 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	460b      	mov	r3, r1
 800660e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	887b      	ldrh	r3, [r7, #2]
 8006616:	4013      	ands	r3, r2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800661c:	2301      	movs	r3, #1
 800661e:	73fb      	strb	r3, [r7, #15]
 8006620:	e001      	b.n	8006626 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006622:	2300      	movs	r3, #0
 8006624:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006626:	7bfb      	ldrb	r3, [r7, #15]
}
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	bc80      	pop	{r7}
 8006630:	4770      	bx	lr

08006632 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	460b      	mov	r3, r1
 800663c:	807b      	strh	r3, [r7, #2]
 800663e:	4613      	mov	r3, r2
 8006640:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006642:	787b      	ldrb	r3, [r7, #1]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d003      	beq.n	8006650 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006648:	887a      	ldrh	r2, [r7, #2]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800664e:	e003      	b.n	8006658 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006650:	887b      	ldrh	r3, [r7, #2]
 8006652:	041a      	lsls	r2, r3, #16
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	611a      	str	r2, [r3, #16]
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	bc80      	pop	{r7}
 8006660:	4770      	bx	lr
	...

08006664 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e12b      	b.n	80068ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d106      	bne.n	8006690 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7fb f90c 	bl	80018a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2224      	movs	r2, #36	@ 0x24
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 0201 	bic.w	r2, r2, #1
 80066a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80066c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80066c8:	f001 f832 	bl	8007730 <HAL_RCC_GetPCLK1Freq>
 80066cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	4a81      	ldr	r2, [pc, #516]	@ (80068d8 <HAL_I2C_Init+0x274>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d807      	bhi.n	80066e8 <HAL_I2C_Init+0x84>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4a80      	ldr	r2, [pc, #512]	@ (80068dc <HAL_I2C_Init+0x278>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	bf94      	ite	ls
 80066e0:	2301      	movls	r3, #1
 80066e2:	2300      	movhi	r3, #0
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	e006      	b.n	80066f6 <HAL_I2C_Init+0x92>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4a7d      	ldr	r2, [pc, #500]	@ (80068e0 <HAL_I2C_Init+0x27c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	bf94      	ite	ls
 80066f0:	2301      	movls	r3, #1
 80066f2:	2300      	movhi	r3, #0
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e0e7      	b.n	80068ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	4a78      	ldr	r2, [pc, #480]	@ (80068e4 <HAL_I2C_Init+0x280>)
 8006702:	fba2 2303 	umull	r2, r3, r2, r3
 8006706:	0c9b      	lsrs	r3, r3, #18
 8006708:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	430a      	orrs	r2, r1
 800671c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	4a6a      	ldr	r2, [pc, #424]	@ (80068d8 <HAL_I2C_Init+0x274>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d802      	bhi.n	8006738 <HAL_I2C_Init+0xd4>
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	3301      	adds	r3, #1
 8006736:	e009      	b.n	800674c <HAL_I2C_Init+0xe8>
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800673e:	fb02 f303 	mul.w	r3, r2, r3
 8006742:	4a69      	ldr	r2, [pc, #420]	@ (80068e8 <HAL_I2C_Init+0x284>)
 8006744:	fba2 2303 	umull	r2, r3, r2, r3
 8006748:	099b      	lsrs	r3, r3, #6
 800674a:	3301      	adds	r3, #1
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6812      	ldr	r2, [r2, #0]
 8006750:	430b      	orrs	r3, r1
 8006752:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	69db      	ldr	r3, [r3, #28]
 800675a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800675e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	495c      	ldr	r1, [pc, #368]	@ (80068d8 <HAL_I2C_Init+0x274>)
 8006768:	428b      	cmp	r3, r1
 800676a:	d819      	bhi.n	80067a0 <HAL_I2C_Init+0x13c>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	1e59      	subs	r1, r3, #1
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	005b      	lsls	r3, r3, #1
 8006776:	fbb1 f3f3 	udiv	r3, r1, r3
 800677a:	1c59      	adds	r1, r3, #1
 800677c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006780:	400b      	ands	r3, r1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <HAL_I2C_Init+0x138>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	1e59      	subs	r1, r3, #1
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	005b      	lsls	r3, r3, #1
 8006790:	fbb1 f3f3 	udiv	r3, r1, r3
 8006794:	3301      	adds	r3, #1
 8006796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800679a:	e051      	b.n	8006840 <HAL_I2C_Init+0x1dc>
 800679c:	2304      	movs	r3, #4
 800679e:	e04f      	b.n	8006840 <HAL_I2C_Init+0x1dc>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d111      	bne.n	80067cc <HAL_I2C_Init+0x168>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	1e58      	subs	r0, r3, #1
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6859      	ldr	r1, [r3, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	440b      	add	r3, r1
 80067b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80067ba:	3301      	adds	r3, #1
 80067bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	bf0c      	ite	eq
 80067c4:	2301      	moveq	r3, #1
 80067c6:	2300      	movne	r3, #0
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	e012      	b.n	80067f2 <HAL_I2C_Init+0x18e>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	1e58      	subs	r0, r3, #1
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6859      	ldr	r1, [r3, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	440b      	add	r3, r1
 80067da:	0099      	lsls	r1, r3, #2
 80067dc:	440b      	add	r3, r1
 80067de:	fbb0 f3f3 	udiv	r3, r0, r3
 80067e2:	3301      	adds	r3, #1
 80067e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	bf0c      	ite	eq
 80067ec:	2301      	moveq	r3, #1
 80067ee:	2300      	movne	r3, #0
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <HAL_I2C_Init+0x196>
 80067f6:	2301      	movs	r3, #1
 80067f8:	e022      	b.n	8006840 <HAL_I2C_Init+0x1dc>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10e      	bne.n	8006820 <HAL_I2C_Init+0x1bc>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	1e58      	subs	r0, r3, #1
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6859      	ldr	r1, [r3, #4]
 800680a:	460b      	mov	r3, r1
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	440b      	add	r3, r1
 8006810:	fbb0 f3f3 	udiv	r3, r0, r3
 8006814:	3301      	adds	r3, #1
 8006816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800681a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800681e:	e00f      	b.n	8006840 <HAL_I2C_Init+0x1dc>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	1e58      	subs	r0, r3, #1
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6859      	ldr	r1, [r3, #4]
 8006828:	460b      	mov	r3, r1
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	440b      	add	r3, r1
 800682e:	0099      	lsls	r1, r3, #2
 8006830:	440b      	add	r3, r1
 8006832:	fbb0 f3f3 	udiv	r3, r0, r3
 8006836:	3301      	adds	r3, #1
 8006838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800683c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006840:	6879      	ldr	r1, [r7, #4]
 8006842:	6809      	ldr	r1, [r1, #0]
 8006844:	4313      	orrs	r3, r2
 8006846:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	69da      	ldr	r2, [r3, #28]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	431a      	orrs	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	430a      	orrs	r2, r1
 8006862:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800686e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	6911      	ldr	r1, [r2, #16]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	68d2      	ldr	r2, [r2, #12]
 800687a:	4311      	orrs	r1, r2
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6812      	ldr	r2, [r2, #0]
 8006880:	430b      	orrs	r3, r1
 8006882:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	695a      	ldr	r2, [r3, #20]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	431a      	orrs	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	430a      	orrs	r2, r1
 800689e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f042 0201 	orr.w	r2, r2, #1
 80068ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2220      	movs	r2, #32
 80068ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	000186a0 	.word	0x000186a0
 80068dc:	001e847f 	.word	0x001e847f
 80068e0:	003d08ff 	.word	0x003d08ff
 80068e4:	431bde83 	.word	0x431bde83
 80068e8:	10624dd3 	.word	0x10624dd3

080068ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b088      	sub	sp, #32
 80068f0:	af02      	add	r7, sp, #8
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	607a      	str	r2, [r7, #4]
 80068f6:	461a      	mov	r2, r3
 80068f8:	460b      	mov	r3, r1
 80068fa:	817b      	strh	r3, [r7, #10]
 80068fc:	4613      	mov	r3, r2
 80068fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006900:	f7ff fa60 	bl	8005dc4 <HAL_GetTick>
 8006904:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b20      	cmp	r3, #32
 8006910:	f040 80e0 	bne.w	8006ad4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	2319      	movs	r3, #25
 800691a:	2201      	movs	r2, #1
 800691c:	4970      	ldr	r1, [pc, #448]	@ (8006ae0 <HAL_I2C_Master_Transmit+0x1f4>)
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f000 f964 	bl	8006bec <I2C_WaitOnFlagUntilTimeout>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800692a:	2302      	movs	r3, #2
 800692c:	e0d3      	b.n	8006ad6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <HAL_I2C_Master_Transmit+0x50>
 8006938:	2302      	movs	r3, #2
 800693a:	e0cc      	b.n	8006ad6 <HAL_I2C_Master_Transmit+0x1ea>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b01      	cmp	r3, #1
 8006950:	d007      	beq.n	8006962 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f042 0201 	orr.w	r2, r2, #1
 8006960:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006970:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2221      	movs	r2, #33	@ 0x21
 8006976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2210      	movs	r2, #16
 800697e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	893a      	ldrh	r2, [r7, #8]
 8006992:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006998:	b29a      	uxth	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4a50      	ldr	r2, [pc, #320]	@ (8006ae4 <HAL_I2C_Master_Transmit+0x1f8>)
 80069a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80069a4:	8979      	ldrh	r1, [r7, #10]
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	6a3a      	ldr	r2, [r7, #32]
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f000 f89c 	bl	8006ae8 <I2C_MasterRequestWrite>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e08d      	b.n	8006ad6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069ba:	2300      	movs	r3, #0
 80069bc:	613b      	str	r3, [r7, #16]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	613b      	str	r3, [r7, #16]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	613b      	str	r3, [r7, #16]
 80069ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80069d0:	e066      	b.n	8006aa0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	6a39      	ldr	r1, [r7, #32]
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 fa22 	bl	8006e20 <I2C_WaitOnTXEFlagUntilTimeout>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00d      	beq.n	80069fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e6:	2b04      	cmp	r3, #4
 80069e8:	d107      	bne.n	80069fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e06b      	b.n	8006ad6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a02:	781a      	ldrb	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a26:	3b01      	subs	r3, #1
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	f003 0304 	and.w	r3, r3, #4
 8006a38:	2b04      	cmp	r3, #4
 8006a3a:	d11b      	bne.n	8006a74 <HAL_I2C_Master_Transmit+0x188>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d017      	beq.n	8006a74 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a48:	781a      	ldrb	r2, [r3, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a54:	1c5a      	adds	r2, r3, #1
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	3b01      	subs	r3, #1
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	6a39      	ldr	r1, [r7, #32]
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 fa19 	bl	8006eb0 <I2C_WaitOnBTFFlagUntilTimeout>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00d      	beq.n	8006aa0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a88:	2b04      	cmp	r3, #4
 8006a8a:	d107      	bne.n	8006a9c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a9a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e01a      	b.n	8006ad6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d194      	bne.n	80069d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ab6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2220      	movs	r2, #32
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	e000      	b.n	8006ad6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006ad4:	2302      	movs	r3, #2
  }
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	00100002 	.word	0x00100002
 8006ae4:	ffff0000 	.word	0xffff0000

08006ae8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b088      	sub	sp, #32
 8006aec:	af02      	add	r7, sp, #8
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	607a      	str	r2, [r7, #4]
 8006af2:	603b      	str	r3, [r7, #0]
 8006af4:	460b      	mov	r3, r1
 8006af6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	2b08      	cmp	r3, #8
 8006b02:	d006      	beq.n	8006b12 <I2C_MasterRequestWrite+0x2a>
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d003      	beq.n	8006b12 <I2C_MasterRequestWrite+0x2a>
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b10:	d108      	bne.n	8006b24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b20:	601a      	str	r2, [r3, #0]
 8006b22:	e00b      	b.n	8006b3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b28:	2b12      	cmp	r3, #18
 8006b2a:	d107      	bne.n	8006b3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f000 f84f 	bl	8006bec <I2C_WaitOnFlagUntilTimeout>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00d      	beq.n	8006b70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b62:	d103      	bne.n	8006b6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e035      	b.n	8006bdc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b78:	d108      	bne.n	8006b8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b7a:	897b      	ldrh	r3, [r7, #10]
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	461a      	mov	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006b88:	611a      	str	r2, [r3, #16]
 8006b8a:	e01b      	b.n	8006bc4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006b8c:	897b      	ldrh	r3, [r7, #10]
 8006b8e:	11db      	asrs	r3, r3, #7
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	f003 0306 	and.w	r3, r3, #6
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	f063 030f 	orn	r3, r3, #15
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	490e      	ldr	r1, [pc, #56]	@ (8006be4 <I2C_MasterRequestWrite+0xfc>)
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 f898 	bl	8006ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e010      	b.n	8006bdc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006bba:	897b      	ldrh	r3, [r7, #10]
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	4907      	ldr	r1, [pc, #28]	@ (8006be8 <I2C_MasterRequestWrite+0x100>)
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 f888 	bl	8006ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e000      	b.n	8006bdc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3718      	adds	r7, #24
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	00010008 	.word	0x00010008
 8006be8:	00010002 	.word	0x00010002

08006bec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	603b      	str	r3, [r7, #0]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bfc:	e048      	b.n	8006c90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c04:	d044      	beq.n	8006c90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c06:	f7ff f8dd 	bl	8005dc4 <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d302      	bcc.n	8006c1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d139      	bne.n	8006c90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	0c1b      	lsrs	r3, r3, #16
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d10d      	bne.n	8006c42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	43da      	mvns	r2, r3
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	4013      	ands	r3, r2
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	bf0c      	ite	eq
 8006c38:	2301      	moveq	r3, #1
 8006c3a:	2300      	movne	r3, #0
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	461a      	mov	r2, r3
 8006c40:	e00c      	b.n	8006c5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	43da      	mvns	r2, r3
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	bf0c      	ite	eq
 8006c54:	2301      	moveq	r3, #1
 8006c56:	2300      	movne	r3, #0
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	79fb      	ldrb	r3, [r7, #7]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d116      	bne.n	8006c90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7c:	f043 0220 	orr.w	r2, r3, #32
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e023      	b.n	8006cd8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	0c1b      	lsrs	r3, r3, #16
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d10d      	bne.n	8006cb6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	43da      	mvns	r2, r3
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	bf0c      	ite	eq
 8006cac:	2301      	moveq	r3, #1
 8006cae:	2300      	movne	r3, #0
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	e00c      	b.n	8006cd0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	43da      	mvns	r2, r3
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	bf0c      	ite	eq
 8006cc8:	2301      	moveq	r3, #1
 8006cca:	2300      	movne	r3, #0
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	461a      	mov	r2, r3
 8006cd0:	79fb      	ldrb	r3, [r7, #7]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d093      	beq.n	8006bfe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
 8006cec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006cee:	e071      	b.n	8006dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cfe:	d123      	bne.n	8006d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2220      	movs	r2, #32
 8006d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d34:	f043 0204 	orr.w	r2, r3, #4
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e067      	b.n	8006e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4e:	d041      	beq.n	8006dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d50:	f7ff f838 	bl	8005dc4 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d302      	bcc.n	8006d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d136      	bne.n	8006dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	0c1b      	lsrs	r3, r3, #16
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d10c      	bne.n	8006d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	43da      	mvns	r2, r3
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	bf14      	ite	ne
 8006d82:	2301      	movne	r3, #1
 8006d84:	2300      	moveq	r3, #0
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	e00b      	b.n	8006da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	43da      	mvns	r2, r3
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	4013      	ands	r3, r2
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	bf14      	ite	ne
 8006d9c:	2301      	movne	r3, #1
 8006d9e:	2300      	moveq	r3, #0
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d016      	beq.n	8006dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2220      	movs	r2, #32
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc0:	f043 0220 	orr.w	r2, r3, #32
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e021      	b.n	8006e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	0c1b      	lsrs	r3, r3, #16
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d10c      	bne.n	8006df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	43da      	mvns	r2, r3
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	4013      	ands	r3, r2
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	bf14      	ite	ne
 8006df0:	2301      	movne	r3, #1
 8006df2:	2300      	moveq	r3, #0
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	e00b      	b.n	8006e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	43da      	mvns	r2, r3
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	4013      	ands	r3, r2
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	bf14      	ite	ne
 8006e0a:	2301      	movne	r3, #1
 8006e0c:	2300      	moveq	r3, #0
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f47f af6d 	bne.w	8006cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e2c:	e034      	b.n	8006e98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 f886 	bl	8006f40 <I2C_IsAcknowledgeFailed>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e034      	b.n	8006ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e44:	d028      	beq.n	8006e98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e46:	f7fe ffbd 	bl	8005dc4 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d302      	bcc.n	8006e5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d11d      	bne.n	8006e98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e66:	2b80      	cmp	r3, #128	@ 0x80
 8006e68:	d016      	beq.n	8006e98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2220      	movs	r2, #32
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e84:	f043 0220 	orr.w	r2, r3, #32
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e007      	b.n	8006ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ea2:	2b80      	cmp	r3, #128	@ 0x80
 8006ea4:	d1c3      	bne.n	8006e2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ebc:	e034      	b.n	8006f28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 f83e 	bl	8006f40 <I2C_IsAcknowledgeFailed>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e034      	b.n	8006f38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed4:	d028      	beq.n	8006f28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ed6:	f7fe ff75 	bl	8005dc4 <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d302      	bcc.n	8006eec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d11d      	bne.n	8006f28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	f003 0304 	and.w	r3, r3, #4
 8006ef6:	2b04      	cmp	r3, #4
 8006ef8:	d016      	beq.n	8006f28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2220      	movs	r2, #32
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f14:	f043 0220 	orr.w	r2, r3, #32
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e007      	b.n	8006f38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	f003 0304 	and.w	r3, r3, #4
 8006f32:	2b04      	cmp	r3, #4
 8006f34:	d1c3      	bne.n	8006ebe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f56:	d11b      	bne.n	8006f90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006f60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f7c:	f043 0204 	orr.w	r2, r3, #4
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e000      	b.n	8006f92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bc80      	pop	{r7}
 8006f9a:	4770      	bx	lr

08006f9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e272      	b.n	8007494 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 8087 	beq.w	80070ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006fbc:	4b92      	ldr	r3, [pc, #584]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f003 030c 	and.w	r3, r3, #12
 8006fc4:	2b04      	cmp	r3, #4
 8006fc6:	d00c      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006fc8:	4b8f      	ldr	r3, [pc, #572]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	f003 030c 	and.w	r3, r3, #12
 8006fd0:	2b08      	cmp	r3, #8
 8006fd2:	d112      	bne.n	8006ffa <HAL_RCC_OscConfig+0x5e>
 8006fd4:	4b8c      	ldr	r3, [pc, #560]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fe0:	d10b      	bne.n	8006ffa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fe2:	4b89      	ldr	r3, [pc, #548]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d06c      	beq.n	80070c8 <HAL_RCC_OscConfig+0x12c>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d168      	bne.n	80070c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e24c      	b.n	8007494 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007002:	d106      	bne.n	8007012 <HAL_RCC_OscConfig+0x76>
 8007004:	4b80      	ldr	r3, [pc, #512]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a7f      	ldr	r2, [pc, #508]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 800700a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800700e:	6013      	str	r3, [r2, #0]
 8007010:	e02e      	b.n	8007070 <HAL_RCC_OscConfig+0xd4>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10c      	bne.n	8007034 <HAL_RCC_OscConfig+0x98>
 800701a:	4b7b      	ldr	r3, [pc, #492]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a7a      	ldr	r2, [pc, #488]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 8007020:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	4b78      	ldr	r3, [pc, #480]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a77      	ldr	r2, [pc, #476]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 800702c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	e01d      	b.n	8007070 <HAL_RCC_OscConfig+0xd4>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800703c:	d10c      	bne.n	8007058 <HAL_RCC_OscConfig+0xbc>
 800703e:	4b72      	ldr	r3, [pc, #456]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a71      	ldr	r2, [pc, #452]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 8007044:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007048:	6013      	str	r3, [r2, #0]
 800704a:	4b6f      	ldr	r3, [pc, #444]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a6e      	ldr	r2, [pc, #440]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 8007050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007054:	6013      	str	r3, [r2, #0]
 8007056:	e00b      	b.n	8007070 <HAL_RCC_OscConfig+0xd4>
 8007058:	4b6b      	ldr	r3, [pc, #428]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a6a      	ldr	r2, [pc, #424]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 800705e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007062:	6013      	str	r3, [r2, #0]
 8007064:	4b68      	ldr	r3, [pc, #416]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a67      	ldr	r2, [pc, #412]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 800706a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800706e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d013      	beq.n	80070a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007078:	f7fe fea4 	bl	8005dc4 <HAL_GetTick>
 800707c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800707e:	e008      	b.n	8007092 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007080:	f7fe fea0 	bl	8005dc4 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	2b64      	cmp	r3, #100	@ 0x64
 800708c:	d901      	bls.n	8007092 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e200      	b.n	8007494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007092:	4b5d      	ldr	r3, [pc, #372]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d0f0      	beq.n	8007080 <HAL_RCC_OscConfig+0xe4>
 800709e:	e014      	b.n	80070ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070a0:	f7fe fe90 	bl	8005dc4 <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070a8:	f7fe fe8c 	bl	8005dc4 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b64      	cmp	r3, #100	@ 0x64
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e1ec      	b.n	8007494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ba:	4b53      	ldr	r3, [pc, #332]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1f0      	bne.n	80070a8 <HAL_RCC_OscConfig+0x10c>
 80070c6:	e000      	b.n	80070ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0302 	and.w	r3, r3, #2
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d063      	beq.n	800719e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80070d6:	4b4c      	ldr	r3, [pc, #304]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f003 030c 	and.w	r3, r3, #12
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00b      	beq.n	80070fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80070e2:	4b49      	ldr	r3, [pc, #292]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f003 030c 	and.w	r3, r3, #12
 80070ea:	2b08      	cmp	r3, #8
 80070ec:	d11c      	bne.n	8007128 <HAL_RCC_OscConfig+0x18c>
 80070ee:	4b46      	ldr	r3, [pc, #280]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d116      	bne.n	8007128 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070fa:	4b43      	ldr	r3, [pc, #268]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0302 	and.w	r3, r3, #2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d005      	beq.n	8007112 <HAL_RCC_OscConfig+0x176>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d001      	beq.n	8007112 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e1c0      	b.n	8007494 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007112:	4b3d      	ldr	r3, [pc, #244]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	00db      	lsls	r3, r3, #3
 8007120:	4939      	ldr	r1, [pc, #228]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 8007122:	4313      	orrs	r3, r2
 8007124:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007126:	e03a      	b.n	800719e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d020      	beq.n	8007172 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007130:	4b36      	ldr	r3, [pc, #216]	@ (800720c <HAL_RCC_OscConfig+0x270>)
 8007132:	2201      	movs	r2, #1
 8007134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007136:	f7fe fe45 	bl	8005dc4 <HAL_GetTick>
 800713a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800713c:	e008      	b.n	8007150 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800713e:	f7fe fe41 	bl	8005dc4 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	2b02      	cmp	r3, #2
 800714a:	d901      	bls.n	8007150 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e1a1      	b.n	8007494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007150:	4b2d      	ldr	r3, [pc, #180]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0302 	and.w	r3, r3, #2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0f0      	beq.n	800713e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800715c:	4b2a      	ldr	r3, [pc, #168]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	00db      	lsls	r3, r3, #3
 800716a:	4927      	ldr	r1, [pc, #156]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 800716c:	4313      	orrs	r3, r2
 800716e:	600b      	str	r3, [r1, #0]
 8007170:	e015      	b.n	800719e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007172:	4b26      	ldr	r3, [pc, #152]	@ (800720c <HAL_RCC_OscConfig+0x270>)
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007178:	f7fe fe24 	bl	8005dc4 <HAL_GetTick>
 800717c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800717e:	e008      	b.n	8007192 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007180:	f7fe fe20 	bl	8005dc4 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b02      	cmp	r3, #2
 800718c:	d901      	bls.n	8007192 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e180      	b.n	8007494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007192:	4b1d      	ldr	r3, [pc, #116]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1f0      	bne.n	8007180 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0308 	and.w	r3, r3, #8
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d03a      	beq.n	8007220 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d019      	beq.n	80071e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071b2:	4b17      	ldr	r3, [pc, #92]	@ (8007210 <HAL_RCC_OscConfig+0x274>)
 80071b4:	2201      	movs	r2, #1
 80071b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071b8:	f7fe fe04 	bl	8005dc4 <HAL_GetTick>
 80071bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071be:	e008      	b.n	80071d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071c0:	f7fe fe00 	bl	8005dc4 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e160      	b.n	8007494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007208 <HAL_RCC_OscConfig+0x26c>)
 80071d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0f0      	beq.n	80071c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80071de:	2001      	movs	r0, #1
 80071e0:	f000 faba 	bl	8007758 <RCC_Delay>
 80071e4:	e01c      	b.n	8007220 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007210 <HAL_RCC_OscConfig+0x274>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071ec:	f7fe fdea 	bl	8005dc4 <HAL_GetTick>
 80071f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071f2:	e00f      	b.n	8007214 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071f4:	f7fe fde6 	bl	8005dc4 <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d908      	bls.n	8007214 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e146      	b.n	8007494 <HAL_RCC_OscConfig+0x4f8>
 8007206:	bf00      	nop
 8007208:	40021000 	.word	0x40021000
 800720c:	42420000 	.word	0x42420000
 8007210:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007214:	4b92      	ldr	r3, [pc, #584]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 8007216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007218:	f003 0302 	and.w	r3, r3, #2
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e9      	bne.n	80071f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0304 	and.w	r3, r3, #4
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 80a6 	beq.w	800737a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800722e:	2300      	movs	r3, #0
 8007230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007232:	4b8b      	ldr	r3, [pc, #556]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 8007234:	69db      	ldr	r3, [r3, #28]
 8007236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10d      	bne.n	800725a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800723e:	4b88      	ldr	r3, [pc, #544]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	4a87      	ldr	r2, [pc, #540]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 8007244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007248:	61d3      	str	r3, [r2, #28]
 800724a:	4b85      	ldr	r3, [pc, #532]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 800724c:	69db      	ldr	r3, [r3, #28]
 800724e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007252:	60bb      	str	r3, [r7, #8]
 8007254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007256:	2301      	movs	r3, #1
 8007258:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800725a:	4b82      	ldr	r3, [pc, #520]	@ (8007464 <HAL_RCC_OscConfig+0x4c8>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007262:	2b00      	cmp	r3, #0
 8007264:	d118      	bne.n	8007298 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007266:	4b7f      	ldr	r3, [pc, #508]	@ (8007464 <HAL_RCC_OscConfig+0x4c8>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a7e      	ldr	r2, [pc, #504]	@ (8007464 <HAL_RCC_OscConfig+0x4c8>)
 800726c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007272:	f7fe fda7 	bl	8005dc4 <HAL_GetTick>
 8007276:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007278:	e008      	b.n	800728c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800727a:	f7fe fda3 	bl	8005dc4 <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	2b64      	cmp	r3, #100	@ 0x64
 8007286:	d901      	bls.n	800728c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e103      	b.n	8007494 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800728c:	4b75      	ldr	r3, [pc, #468]	@ (8007464 <HAL_RCC_OscConfig+0x4c8>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007294:	2b00      	cmp	r3, #0
 8007296:	d0f0      	beq.n	800727a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d106      	bne.n	80072ae <HAL_RCC_OscConfig+0x312>
 80072a0:	4b6f      	ldr	r3, [pc, #444]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	4a6e      	ldr	r2, [pc, #440]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 80072a6:	f043 0301 	orr.w	r3, r3, #1
 80072aa:	6213      	str	r3, [r2, #32]
 80072ac:	e02d      	b.n	800730a <HAL_RCC_OscConfig+0x36e>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10c      	bne.n	80072d0 <HAL_RCC_OscConfig+0x334>
 80072b6:	4b6a      	ldr	r3, [pc, #424]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	4a69      	ldr	r2, [pc, #420]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 80072bc:	f023 0301 	bic.w	r3, r3, #1
 80072c0:	6213      	str	r3, [r2, #32]
 80072c2:	4b67      	ldr	r3, [pc, #412]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	4a66      	ldr	r2, [pc, #408]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 80072c8:	f023 0304 	bic.w	r3, r3, #4
 80072cc:	6213      	str	r3, [r2, #32]
 80072ce:	e01c      	b.n	800730a <HAL_RCC_OscConfig+0x36e>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	2b05      	cmp	r3, #5
 80072d6:	d10c      	bne.n	80072f2 <HAL_RCC_OscConfig+0x356>
 80072d8:	4b61      	ldr	r3, [pc, #388]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 80072da:	6a1b      	ldr	r3, [r3, #32]
 80072dc:	4a60      	ldr	r2, [pc, #384]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 80072de:	f043 0304 	orr.w	r3, r3, #4
 80072e2:	6213      	str	r3, [r2, #32]
 80072e4:	4b5e      	ldr	r3, [pc, #376]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	4a5d      	ldr	r2, [pc, #372]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 80072ea:	f043 0301 	orr.w	r3, r3, #1
 80072ee:	6213      	str	r3, [r2, #32]
 80072f0:	e00b      	b.n	800730a <HAL_RCC_OscConfig+0x36e>
 80072f2:	4b5b      	ldr	r3, [pc, #364]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	4a5a      	ldr	r2, [pc, #360]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 80072f8:	f023 0301 	bic.w	r3, r3, #1
 80072fc:	6213      	str	r3, [r2, #32]
 80072fe:	4b58      	ldr	r3, [pc, #352]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	4a57      	ldr	r2, [pc, #348]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 8007304:	f023 0304 	bic.w	r3, r3, #4
 8007308:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d015      	beq.n	800733e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007312:	f7fe fd57 	bl	8005dc4 <HAL_GetTick>
 8007316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007318:	e00a      	b.n	8007330 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800731a:	f7fe fd53 	bl	8005dc4 <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007328:	4293      	cmp	r3, r2
 800732a:	d901      	bls.n	8007330 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e0b1      	b.n	8007494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007330:	4b4b      	ldr	r3, [pc, #300]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0ee      	beq.n	800731a <HAL_RCC_OscConfig+0x37e>
 800733c:	e014      	b.n	8007368 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800733e:	f7fe fd41 	bl	8005dc4 <HAL_GetTick>
 8007342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007344:	e00a      	b.n	800735c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007346:	f7fe fd3d 	bl	8005dc4 <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007354:	4293      	cmp	r3, r2
 8007356:	d901      	bls.n	800735c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e09b      	b.n	8007494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800735c:	4b40      	ldr	r3, [pc, #256]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	f003 0302 	and.w	r3, r3, #2
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1ee      	bne.n	8007346 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007368:	7dfb      	ldrb	r3, [r7, #23]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d105      	bne.n	800737a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800736e:	4b3c      	ldr	r3, [pc, #240]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	4a3b      	ldr	r2, [pc, #236]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 8007374:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007378:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	2b00      	cmp	r3, #0
 8007380:	f000 8087 	beq.w	8007492 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007384:	4b36      	ldr	r3, [pc, #216]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f003 030c 	and.w	r3, r3, #12
 800738c:	2b08      	cmp	r3, #8
 800738e:	d061      	beq.n	8007454 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	2b02      	cmp	r3, #2
 8007396:	d146      	bne.n	8007426 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007398:	4b33      	ldr	r3, [pc, #204]	@ (8007468 <HAL_RCC_OscConfig+0x4cc>)
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800739e:	f7fe fd11 	bl	8005dc4 <HAL_GetTick>
 80073a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073a4:	e008      	b.n	80073b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073a6:	f7fe fd0d 	bl	8005dc4 <HAL_GetTick>
 80073aa:	4602      	mov	r2, r0
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d901      	bls.n	80073b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e06d      	b.n	8007494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073b8:	4b29      	ldr	r3, [pc, #164]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1f0      	bne.n	80073a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073cc:	d108      	bne.n	80073e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80073ce:	4b24      	ldr	r3, [pc, #144]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	4921      	ldr	r1, [pc, #132]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073e0:	4b1f      	ldr	r3, [pc, #124]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a19      	ldr	r1, [r3, #32]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f0:	430b      	orrs	r3, r1
 80073f2:	491b      	ldr	r1, [pc, #108]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007468 <HAL_RCC_OscConfig+0x4cc>)
 80073fa:	2201      	movs	r2, #1
 80073fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073fe:	f7fe fce1 	bl	8005dc4 <HAL_GetTick>
 8007402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007404:	e008      	b.n	8007418 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007406:	f7fe fcdd 	bl	8005dc4 <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	2b02      	cmp	r3, #2
 8007412:	d901      	bls.n	8007418 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007414:	2303      	movs	r3, #3
 8007416:	e03d      	b.n	8007494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007418:	4b11      	ldr	r3, [pc, #68]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d0f0      	beq.n	8007406 <HAL_RCC_OscConfig+0x46a>
 8007424:	e035      	b.n	8007492 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007426:	4b10      	ldr	r3, [pc, #64]	@ (8007468 <HAL_RCC_OscConfig+0x4cc>)
 8007428:	2200      	movs	r2, #0
 800742a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800742c:	f7fe fcca 	bl	8005dc4 <HAL_GetTick>
 8007430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007432:	e008      	b.n	8007446 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007434:	f7fe fcc6 	bl	8005dc4 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	2b02      	cmp	r3, #2
 8007440:	d901      	bls.n	8007446 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e026      	b.n	8007494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007446:	4b06      	ldr	r3, [pc, #24]	@ (8007460 <HAL_RCC_OscConfig+0x4c4>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1f0      	bne.n	8007434 <HAL_RCC_OscConfig+0x498>
 8007452:	e01e      	b.n	8007492 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	69db      	ldr	r3, [r3, #28]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d107      	bne.n	800746c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e019      	b.n	8007494 <HAL_RCC_OscConfig+0x4f8>
 8007460:	40021000 	.word	0x40021000
 8007464:	40007000 	.word	0x40007000
 8007468:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800746c:	4b0b      	ldr	r3, [pc, #44]	@ (800749c <HAL_RCC_OscConfig+0x500>)
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a1b      	ldr	r3, [r3, #32]
 800747c:	429a      	cmp	r2, r3
 800747e:	d106      	bne.n	800748e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800748a:	429a      	cmp	r2, r3
 800748c:	d001      	beq.n	8007492 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e000      	b.n	8007494 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3718      	adds	r7, #24
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	40021000 	.word	0x40021000

080074a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e0d0      	b.n	8007656 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074b4:	4b6a      	ldr	r3, [pc, #424]	@ (8007660 <HAL_RCC_ClockConfig+0x1c0>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0307 	and.w	r3, r3, #7
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d910      	bls.n	80074e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074c2:	4b67      	ldr	r3, [pc, #412]	@ (8007660 <HAL_RCC_ClockConfig+0x1c0>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f023 0207 	bic.w	r2, r3, #7
 80074ca:	4965      	ldr	r1, [pc, #404]	@ (8007660 <HAL_RCC_ClockConfig+0x1c0>)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074d2:	4b63      	ldr	r3, [pc, #396]	@ (8007660 <HAL_RCC_ClockConfig+0x1c0>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d001      	beq.n	80074e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e0b8      	b.n	8007656 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d020      	beq.n	8007532 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0304 	and.w	r3, r3, #4
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d005      	beq.n	8007508 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074fc:	4b59      	ldr	r3, [pc, #356]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	4a58      	ldr	r2, [pc, #352]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 8007502:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007506:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0308 	and.w	r3, r3, #8
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007514:	4b53      	ldr	r3, [pc, #332]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	4a52      	ldr	r2, [pc, #328]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 800751a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800751e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007520:	4b50      	ldr	r3, [pc, #320]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	494d      	ldr	r1, [pc, #308]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 800752e:	4313      	orrs	r3, r2
 8007530:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	d040      	beq.n	80075c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d107      	bne.n	8007556 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007546:	4b47      	ldr	r3, [pc, #284]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d115      	bne.n	800757e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e07f      	b.n	8007656 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	2b02      	cmp	r3, #2
 800755c:	d107      	bne.n	800756e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800755e:	4b41      	ldr	r3, [pc, #260]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d109      	bne.n	800757e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e073      	b.n	8007656 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800756e:	4b3d      	ldr	r3, [pc, #244]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0302 	and.w	r3, r3, #2
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e06b      	b.n	8007656 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800757e:	4b39      	ldr	r3, [pc, #228]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f023 0203 	bic.w	r2, r3, #3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	4936      	ldr	r1, [pc, #216]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 800758c:	4313      	orrs	r3, r2
 800758e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007590:	f7fe fc18 	bl	8005dc4 <HAL_GetTick>
 8007594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007596:	e00a      	b.n	80075ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007598:	f7fe fc14 	bl	8005dc4 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d901      	bls.n	80075ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e053      	b.n	8007656 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ae:	4b2d      	ldr	r3, [pc, #180]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f003 020c 	and.w	r2, r3, #12
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	429a      	cmp	r2, r3
 80075be:	d1eb      	bne.n	8007598 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075c0:	4b27      	ldr	r3, [pc, #156]	@ (8007660 <HAL_RCC_ClockConfig+0x1c0>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0307 	and.w	r3, r3, #7
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d210      	bcs.n	80075f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ce:	4b24      	ldr	r3, [pc, #144]	@ (8007660 <HAL_RCC_ClockConfig+0x1c0>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f023 0207 	bic.w	r2, r3, #7
 80075d6:	4922      	ldr	r1, [pc, #136]	@ (8007660 <HAL_RCC_ClockConfig+0x1c0>)
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	4313      	orrs	r3, r2
 80075dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075de:	4b20      	ldr	r3, [pc, #128]	@ (8007660 <HAL_RCC_ClockConfig+0x1c0>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0307 	and.w	r3, r3, #7
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d001      	beq.n	80075f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e032      	b.n	8007656 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d008      	beq.n	800760e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075fc:	4b19      	ldr	r3, [pc, #100]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	4916      	ldr	r1, [pc, #88]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 800760a:	4313      	orrs	r3, r2
 800760c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0308 	and.w	r3, r3, #8
 8007616:	2b00      	cmp	r3, #0
 8007618:	d009      	beq.n	800762e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800761a:	4b12      	ldr	r3, [pc, #72]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	00db      	lsls	r3, r3, #3
 8007628:	490e      	ldr	r1, [pc, #56]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 800762a:	4313      	orrs	r3, r2
 800762c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800762e:	f000 f821 	bl	8007674 <HAL_RCC_GetSysClockFreq>
 8007632:	4602      	mov	r2, r0
 8007634:	4b0b      	ldr	r3, [pc, #44]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	091b      	lsrs	r3, r3, #4
 800763a:	f003 030f 	and.w	r3, r3, #15
 800763e:	490a      	ldr	r1, [pc, #40]	@ (8007668 <HAL_RCC_ClockConfig+0x1c8>)
 8007640:	5ccb      	ldrb	r3, [r1, r3]
 8007642:	fa22 f303 	lsr.w	r3, r2, r3
 8007646:	4a09      	ldr	r2, [pc, #36]	@ (800766c <HAL_RCC_ClockConfig+0x1cc>)
 8007648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800764a:	4b09      	ldr	r3, [pc, #36]	@ (8007670 <HAL_RCC_ClockConfig+0x1d0>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4618      	mov	r0, r3
 8007650:	f7fe fb76 	bl	8005d40 <HAL_InitTick>

  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	40022000 	.word	0x40022000
 8007664:	40021000 	.word	0x40021000
 8007668:	0800b548 	.word	0x0800b548
 800766c:	20000018 	.word	0x20000018
 8007670:	2000001c 	.word	0x2000001c

08007674 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007674:	b480      	push	{r7}
 8007676:	b087      	sub	sp, #28
 8007678:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800767a:	2300      	movs	r3, #0
 800767c:	60fb      	str	r3, [r7, #12]
 800767e:	2300      	movs	r3, #0
 8007680:	60bb      	str	r3, [r7, #8]
 8007682:	2300      	movs	r3, #0
 8007684:	617b      	str	r3, [r7, #20]
 8007686:	2300      	movs	r3, #0
 8007688:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800768a:	2300      	movs	r3, #0
 800768c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800768e:	4b1e      	ldr	r3, [pc, #120]	@ (8007708 <HAL_RCC_GetSysClockFreq+0x94>)
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f003 030c 	and.w	r3, r3, #12
 800769a:	2b04      	cmp	r3, #4
 800769c:	d002      	beq.n	80076a4 <HAL_RCC_GetSysClockFreq+0x30>
 800769e:	2b08      	cmp	r3, #8
 80076a0:	d003      	beq.n	80076aa <HAL_RCC_GetSysClockFreq+0x36>
 80076a2:	e027      	b.n	80076f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80076a4:	4b19      	ldr	r3, [pc, #100]	@ (800770c <HAL_RCC_GetSysClockFreq+0x98>)
 80076a6:	613b      	str	r3, [r7, #16]
      break;
 80076a8:	e027      	b.n	80076fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	0c9b      	lsrs	r3, r3, #18
 80076ae:	f003 030f 	and.w	r3, r3, #15
 80076b2:	4a17      	ldr	r2, [pc, #92]	@ (8007710 <HAL_RCC_GetSysClockFreq+0x9c>)
 80076b4:	5cd3      	ldrb	r3, [r2, r3]
 80076b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d010      	beq.n	80076e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80076c2:	4b11      	ldr	r3, [pc, #68]	@ (8007708 <HAL_RCC_GetSysClockFreq+0x94>)
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	0c5b      	lsrs	r3, r3, #17
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	4a11      	ldr	r2, [pc, #68]	@ (8007714 <HAL_RCC_GetSysClockFreq+0xa0>)
 80076ce:	5cd3      	ldrb	r3, [r2, r3]
 80076d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a0d      	ldr	r2, [pc, #52]	@ (800770c <HAL_RCC_GetSysClockFreq+0x98>)
 80076d6:	fb03 f202 	mul.w	r2, r3, r2
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e0:	617b      	str	r3, [r7, #20]
 80076e2:	e004      	b.n	80076ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007718 <HAL_RCC_GetSysClockFreq+0xa4>)
 80076e8:	fb02 f303 	mul.w	r3, r2, r3
 80076ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	613b      	str	r3, [r7, #16]
      break;
 80076f2:	e002      	b.n	80076fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80076f4:	4b05      	ldr	r3, [pc, #20]	@ (800770c <HAL_RCC_GetSysClockFreq+0x98>)
 80076f6:	613b      	str	r3, [r7, #16]
      break;
 80076f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076fa:	693b      	ldr	r3, [r7, #16]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	371c      	adds	r7, #28
 8007700:	46bd      	mov	sp, r7
 8007702:	bc80      	pop	{r7}
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	40021000 	.word	0x40021000
 800770c:	007a1200 	.word	0x007a1200
 8007710:	0800b560 	.word	0x0800b560
 8007714:	0800b570 	.word	0x0800b570
 8007718:	003d0900 	.word	0x003d0900

0800771c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800771c:	b480      	push	{r7}
 800771e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007720:	4b02      	ldr	r3, [pc, #8]	@ (800772c <HAL_RCC_GetHCLKFreq+0x10>)
 8007722:	681b      	ldr	r3, [r3, #0]
}
 8007724:	4618      	mov	r0, r3
 8007726:	46bd      	mov	sp, r7
 8007728:	bc80      	pop	{r7}
 800772a:	4770      	bx	lr
 800772c:	20000018 	.word	0x20000018

08007730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007734:	f7ff fff2 	bl	800771c <HAL_RCC_GetHCLKFreq>
 8007738:	4602      	mov	r2, r0
 800773a:	4b05      	ldr	r3, [pc, #20]	@ (8007750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	0a1b      	lsrs	r3, r3, #8
 8007740:	f003 0307 	and.w	r3, r3, #7
 8007744:	4903      	ldr	r1, [pc, #12]	@ (8007754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007746:	5ccb      	ldrb	r3, [r1, r3]
 8007748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800774c:	4618      	mov	r0, r3
 800774e:	bd80      	pop	{r7, pc}
 8007750:	40021000 	.word	0x40021000
 8007754:	0800b558 	.word	0x0800b558

08007758 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007760:	4b0a      	ldr	r3, [pc, #40]	@ (800778c <RCC_Delay+0x34>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a0a      	ldr	r2, [pc, #40]	@ (8007790 <RCC_Delay+0x38>)
 8007766:	fba2 2303 	umull	r2, r3, r2, r3
 800776a:	0a5b      	lsrs	r3, r3, #9
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	fb02 f303 	mul.w	r3, r2, r3
 8007772:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007774:	bf00      	nop
  }
  while (Delay --);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	1e5a      	subs	r2, r3, #1
 800777a:	60fa      	str	r2, [r7, #12]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1f9      	bne.n	8007774 <RCC_Delay+0x1c>
}
 8007780:	bf00      	nop
 8007782:	bf00      	nop
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	bc80      	pop	{r7}
 800778a:	4770      	bx	lr
 800778c:	20000018 	.word	0x20000018
 8007790:	10624dd3 	.word	0x10624dd3

08007794 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e076      	b.n	8007894 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d108      	bne.n	80077c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077b6:	d009      	beq.n	80077cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	61da      	str	r2, [r3, #28]
 80077be:	e005      	b.n	80077cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d106      	bne.n	80077ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7fd ff58 	bl	800569c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2202      	movs	r2, #2
 80077f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007802:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007814:	431a      	orrs	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800781e:	431a      	orrs	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	f003 0302 	and.w	r3, r3, #2
 8007828:	431a      	orrs	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	431a      	orrs	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800783c:	431a      	orrs	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007846:	431a      	orrs	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a1b      	ldr	r3, [r3, #32]
 800784c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007850:	ea42 0103 	orr.w	r1, r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007858:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	430a      	orrs	r2, r1
 8007862:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	0c1a      	lsrs	r2, r3, #16
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f002 0204 	and.w	r2, r2, #4
 8007872:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	69da      	ldr	r2, [r3, #28]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007882:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d101      	bne.n	80078ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e041      	b.n	8007932 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d106      	bne.n	80078c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7fe f95c 	bl	8005b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2202      	movs	r2, #2
 80078cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	3304      	adds	r3, #4
 80078d8:	4619      	mov	r1, r3
 80078da:	4610      	mov	r0, r2
 80078dc:	f000 fbe2 	bl	80080a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b082      	sub	sp, #8
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e041      	b.n	80079d0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b00      	cmp	r3, #0
 8007956:	d106      	bne.n	8007966 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f839 	bl	80079d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2202      	movs	r2, #2
 800796a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	3304      	adds	r3, #4
 8007976:	4619      	mov	r1, r3
 8007978:	4610      	mov	r0, r2
 800797a:	f000 fb93 	bl	80080a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2201      	movs	r2, #1
 80079c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bc80      	pop	{r7}
 80079e8:	4770      	bx	lr
	...

080079ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d109      	bne.n	8007a10 <HAL_TIM_PWM_Start+0x24>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	bf14      	ite	ne
 8007a08:	2301      	movne	r3, #1
 8007a0a:	2300      	moveq	r3, #0
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	e022      	b.n	8007a56 <HAL_TIM_PWM_Start+0x6a>
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2b04      	cmp	r3, #4
 8007a14:	d109      	bne.n	8007a2a <HAL_TIM_PWM_Start+0x3e>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	bf14      	ite	ne
 8007a22:	2301      	movne	r3, #1
 8007a24:	2300      	moveq	r3, #0
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	e015      	b.n	8007a56 <HAL_TIM_PWM_Start+0x6a>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b08      	cmp	r3, #8
 8007a2e:	d109      	bne.n	8007a44 <HAL_TIM_PWM_Start+0x58>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	bf14      	ite	ne
 8007a3c:	2301      	movne	r3, #1
 8007a3e:	2300      	moveq	r3, #0
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	e008      	b.n	8007a56 <HAL_TIM_PWM_Start+0x6a>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	bf14      	ite	ne
 8007a50:	2301      	movne	r3, #1
 8007a52:	2300      	moveq	r3, #0
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e05e      	b.n	8007b1c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d104      	bne.n	8007a6e <HAL_TIM_PWM_Start+0x82>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2202      	movs	r2, #2
 8007a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a6c:	e013      	b.n	8007a96 <HAL_TIM_PWM_Start+0xaa>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b04      	cmp	r3, #4
 8007a72:	d104      	bne.n	8007a7e <HAL_TIM_PWM_Start+0x92>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2202      	movs	r2, #2
 8007a78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a7c:	e00b      	b.n	8007a96 <HAL_TIM_PWM_Start+0xaa>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b08      	cmp	r3, #8
 8007a82:	d104      	bne.n	8007a8e <HAL_TIM_PWM_Start+0xa2>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2202      	movs	r2, #2
 8007a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a8c:	e003      	b.n	8007a96 <HAL_TIM_PWM_Start+0xaa>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2202      	movs	r2, #2
 8007a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 fd8c 	bl	80085bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a1e      	ldr	r2, [pc, #120]	@ (8007b24 <HAL_TIM_PWM_Start+0x138>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d107      	bne.n	8007abe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007abc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a18      	ldr	r2, [pc, #96]	@ (8007b24 <HAL_TIM_PWM_Start+0x138>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d00e      	beq.n	8007ae6 <HAL_TIM_PWM_Start+0xfa>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ad0:	d009      	beq.n	8007ae6 <HAL_TIM_PWM_Start+0xfa>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a14      	ldr	r2, [pc, #80]	@ (8007b28 <HAL_TIM_PWM_Start+0x13c>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d004      	beq.n	8007ae6 <HAL_TIM_PWM_Start+0xfa>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a12      	ldr	r2, [pc, #72]	@ (8007b2c <HAL_TIM_PWM_Start+0x140>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d111      	bne.n	8007b0a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f003 0307 	and.w	r3, r3, #7
 8007af0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2b06      	cmp	r3, #6
 8007af6:	d010      	beq.n	8007b1a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f042 0201 	orr.w	r2, r2, #1
 8007b06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b08:	e007      	b.n	8007b1a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f042 0201 	orr.w	r2, r2, #1
 8007b18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	40012c00 	.word	0x40012c00
 8007b28:	40000400 	.word	0x40000400
 8007b2c:	40000800 	.word	0x40000800

08007b30 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d101      	bne.n	8007b44 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e093      	b.n	8007c6c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d106      	bne.n	8007b5e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7fe f82f 	bl	8005bbc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2202      	movs	r2, #2
 8007b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	6812      	ldr	r2, [r2, #0]
 8007b70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b74:	f023 0307 	bic.w	r3, r3, #7
 8007b78:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	3304      	adds	r3, #4
 8007b82:	4619      	mov	r1, r3
 8007b84:	4610      	mov	r0, r2
 8007b86:	f000 fa8d 	bl	80080a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bb2:	f023 0303 	bic.w	r3, r3, #3
 8007bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	689a      	ldr	r2, [r3, #8]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	021b      	lsls	r3, r3, #8
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007bd0:	f023 030c 	bic.w	r3, r3, #12
 8007bd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007bdc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007be0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	68da      	ldr	r2, [r3, #12]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	021b      	lsls	r3, r3, #8
 8007bec:	4313      	orrs	r3, r2
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	011a      	lsls	r2, r3, #4
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	031b      	lsls	r3, r3, #12
 8007c00:	4313      	orrs	r3, r2
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007c0e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	695b      	ldr	r3, [r3, #20]
 8007c18:	011b      	lsls	r3, r3, #4
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3718      	adds	r7, #24
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c84:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007c8c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c94:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007c9c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d110      	bne.n	8007cc6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d102      	bne.n	8007cb0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007caa:	7b7b      	ldrb	r3, [r7, #13]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d001      	beq.n	8007cb4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e069      	b.n	8007d88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cc4:	e031      	b.n	8007d2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	2b04      	cmp	r3, #4
 8007cca:	d110      	bne.n	8007cee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ccc:	7bbb      	ldrb	r3, [r7, #14]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d102      	bne.n	8007cd8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007cd2:	7b3b      	ldrb	r3, [r7, #12]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d001      	beq.n	8007cdc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e055      	b.n	8007d88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007cec:	e01d      	b.n	8007d2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d108      	bne.n	8007d06 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cf4:	7bbb      	ldrb	r3, [r7, #14]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d105      	bne.n	8007d06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cfa:	7b7b      	ldrb	r3, [r7, #13]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d102      	bne.n	8007d06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d00:	7b3b      	ldrb	r3, [r7, #12]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d001      	beq.n	8007d0a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e03e      	b.n	8007d88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2202      	movs	r2, #2
 8007d16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2202      	movs	r2, #2
 8007d1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2202      	movs	r2, #2
 8007d26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d003      	beq.n	8007d38 <HAL_TIM_Encoder_Start+0xc4>
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	2b04      	cmp	r3, #4
 8007d34:	d008      	beq.n	8007d48 <HAL_TIM_Encoder_Start+0xd4>
 8007d36:	e00f      	b.n	8007d58 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	2100      	movs	r1, #0
 8007d40:	4618      	mov	r0, r3
 8007d42:	f000 fc3b 	bl	80085bc <TIM_CCxChannelCmd>
      break;
 8007d46:	e016      	b.n	8007d76 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	2104      	movs	r1, #4
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 fc33 	bl	80085bc <TIM_CCxChannelCmd>
      break;
 8007d56:	e00e      	b.n	8007d76 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	2100      	movs	r1, #0
 8007d60:	4618      	mov	r0, r3
 8007d62:	f000 fc2b 	bl	80085bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	2104      	movs	r1, #4
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f000 fc24 	bl	80085bc <TIM_CCxChannelCmd>
      break;
 8007d74:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f042 0201 	orr.w	r2, r2, #1
 8007d84:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d101      	bne.n	8007dae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007daa:	2302      	movs	r3, #2
 8007dac:	e0ae      	b.n	8007f0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b0c      	cmp	r3, #12
 8007dba:	f200 809f 	bhi.w	8007efc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc4:	08007df9 	.word	0x08007df9
 8007dc8:	08007efd 	.word	0x08007efd
 8007dcc:	08007efd 	.word	0x08007efd
 8007dd0:	08007efd 	.word	0x08007efd
 8007dd4:	08007e39 	.word	0x08007e39
 8007dd8:	08007efd 	.word	0x08007efd
 8007ddc:	08007efd 	.word	0x08007efd
 8007de0:	08007efd 	.word	0x08007efd
 8007de4:	08007e7b 	.word	0x08007e7b
 8007de8:	08007efd 	.word	0x08007efd
 8007dec:	08007efd 	.word	0x08007efd
 8007df0:	08007efd 	.word	0x08007efd
 8007df4:	08007ebb 	.word	0x08007ebb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68b9      	ldr	r1, [r7, #8]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 f9be 	bl	8008180 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	699a      	ldr	r2, [r3, #24]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f042 0208 	orr.w	r2, r2, #8
 8007e12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	699a      	ldr	r2, [r3, #24]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f022 0204 	bic.w	r2, r2, #4
 8007e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	6999      	ldr	r1, [r3, #24]
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	691a      	ldr	r2, [r3, #16]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	430a      	orrs	r2, r1
 8007e34:	619a      	str	r2, [r3, #24]
      break;
 8007e36:	e064      	b.n	8007f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68b9      	ldr	r1, [r7, #8]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f000 fa04 	bl	800824c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	699a      	ldr	r2, [r3, #24]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	699a      	ldr	r2, [r3, #24]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6999      	ldr	r1, [r3, #24]
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	021a      	lsls	r2, r3, #8
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	430a      	orrs	r2, r1
 8007e76:	619a      	str	r2, [r3, #24]
      break;
 8007e78:	e043      	b.n	8007f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68b9      	ldr	r1, [r7, #8]
 8007e80:	4618      	mov	r0, r3
 8007e82:	f000 fa4d 	bl	8008320 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	69da      	ldr	r2, [r3, #28]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f042 0208 	orr.w	r2, r2, #8
 8007e94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	69da      	ldr	r2, [r3, #28]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f022 0204 	bic.w	r2, r2, #4
 8007ea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	69d9      	ldr	r1, [r3, #28]
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	691a      	ldr	r2, [r3, #16]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	430a      	orrs	r2, r1
 8007eb6:	61da      	str	r2, [r3, #28]
      break;
 8007eb8:	e023      	b.n	8007f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68b9      	ldr	r1, [r7, #8]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 fa97 	bl	80083f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	69da      	ldr	r2, [r3, #28]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	69da      	ldr	r2, [r3, #28]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	69d9      	ldr	r1, [r3, #28]
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	021a      	lsls	r2, r3, #8
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	430a      	orrs	r2, r1
 8007ef8:	61da      	str	r2, [r3, #28]
      break;
 8007efa:	e002      	b.n	8007f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	75fb      	strb	r3, [r7, #23]
      break;
 8007f00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3718      	adds	r7, #24
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d101      	bne.n	8007f30 <HAL_TIM_ConfigClockSource+0x1c>
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	e0b4      	b.n	800809a <HAL_TIM_ConfigClockSource+0x186>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007f4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f68:	d03e      	beq.n	8007fe8 <HAL_TIM_ConfigClockSource+0xd4>
 8007f6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f6e:	f200 8087 	bhi.w	8008080 <HAL_TIM_ConfigClockSource+0x16c>
 8007f72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f76:	f000 8086 	beq.w	8008086 <HAL_TIM_ConfigClockSource+0x172>
 8007f7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f7e:	d87f      	bhi.n	8008080 <HAL_TIM_ConfigClockSource+0x16c>
 8007f80:	2b70      	cmp	r3, #112	@ 0x70
 8007f82:	d01a      	beq.n	8007fba <HAL_TIM_ConfigClockSource+0xa6>
 8007f84:	2b70      	cmp	r3, #112	@ 0x70
 8007f86:	d87b      	bhi.n	8008080 <HAL_TIM_ConfigClockSource+0x16c>
 8007f88:	2b60      	cmp	r3, #96	@ 0x60
 8007f8a:	d050      	beq.n	800802e <HAL_TIM_ConfigClockSource+0x11a>
 8007f8c:	2b60      	cmp	r3, #96	@ 0x60
 8007f8e:	d877      	bhi.n	8008080 <HAL_TIM_ConfigClockSource+0x16c>
 8007f90:	2b50      	cmp	r3, #80	@ 0x50
 8007f92:	d03c      	beq.n	800800e <HAL_TIM_ConfigClockSource+0xfa>
 8007f94:	2b50      	cmp	r3, #80	@ 0x50
 8007f96:	d873      	bhi.n	8008080 <HAL_TIM_ConfigClockSource+0x16c>
 8007f98:	2b40      	cmp	r3, #64	@ 0x40
 8007f9a:	d058      	beq.n	800804e <HAL_TIM_ConfigClockSource+0x13a>
 8007f9c:	2b40      	cmp	r3, #64	@ 0x40
 8007f9e:	d86f      	bhi.n	8008080 <HAL_TIM_ConfigClockSource+0x16c>
 8007fa0:	2b30      	cmp	r3, #48	@ 0x30
 8007fa2:	d064      	beq.n	800806e <HAL_TIM_ConfigClockSource+0x15a>
 8007fa4:	2b30      	cmp	r3, #48	@ 0x30
 8007fa6:	d86b      	bhi.n	8008080 <HAL_TIM_ConfigClockSource+0x16c>
 8007fa8:	2b20      	cmp	r3, #32
 8007faa:	d060      	beq.n	800806e <HAL_TIM_ConfigClockSource+0x15a>
 8007fac:	2b20      	cmp	r3, #32
 8007fae:	d867      	bhi.n	8008080 <HAL_TIM_ConfigClockSource+0x16c>
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d05c      	beq.n	800806e <HAL_TIM_ConfigClockSource+0x15a>
 8007fb4:	2b10      	cmp	r3, #16
 8007fb6:	d05a      	beq.n	800806e <HAL_TIM_ConfigClockSource+0x15a>
 8007fb8:	e062      	b.n	8008080 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fca:	f000 fad8 	bl	800857e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007fdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	609a      	str	r2, [r3, #8]
      break;
 8007fe6:	e04f      	b.n	8008088 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ff8:	f000 fac1 	bl	800857e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689a      	ldr	r2, [r3, #8]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800800a:	609a      	str	r2, [r3, #8]
      break;
 800800c:	e03c      	b.n	8008088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800801a:	461a      	mov	r2, r3
 800801c:	f000 fa38 	bl	8008490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2150      	movs	r1, #80	@ 0x50
 8008026:	4618      	mov	r0, r3
 8008028:	f000 fa8f 	bl	800854a <TIM_ITRx_SetConfig>
      break;
 800802c:	e02c      	b.n	8008088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800803a:	461a      	mov	r2, r3
 800803c:	f000 fa56 	bl	80084ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2160      	movs	r1, #96	@ 0x60
 8008046:	4618      	mov	r0, r3
 8008048:	f000 fa7f 	bl	800854a <TIM_ITRx_SetConfig>
      break;
 800804c:	e01c      	b.n	8008088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800805a:	461a      	mov	r2, r3
 800805c:	f000 fa18 	bl	8008490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2140      	movs	r1, #64	@ 0x40
 8008066:	4618      	mov	r0, r3
 8008068:	f000 fa6f 	bl	800854a <TIM_ITRx_SetConfig>
      break;
 800806c:	e00c      	b.n	8008088 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4619      	mov	r1, r3
 8008078:	4610      	mov	r0, r2
 800807a:	f000 fa66 	bl	800854a <TIM_ITRx_SetConfig>
      break;
 800807e:	e003      	b.n	8008088 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	73fb      	strb	r3, [r7, #15]
      break;
 8008084:	e000      	b.n	8008088 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008086:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008098:	7bfb      	ldrb	r3, [r7, #15]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
	...

080080a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a2f      	ldr	r2, [pc, #188]	@ (8008174 <TIM_Base_SetConfig+0xd0>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d00b      	beq.n	80080d4 <TIM_Base_SetConfig+0x30>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080c2:	d007      	beq.n	80080d4 <TIM_Base_SetConfig+0x30>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a2c      	ldr	r2, [pc, #176]	@ (8008178 <TIM_Base_SetConfig+0xd4>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d003      	beq.n	80080d4 <TIM_Base_SetConfig+0x30>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a2b      	ldr	r2, [pc, #172]	@ (800817c <TIM_Base_SetConfig+0xd8>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d108      	bne.n	80080e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a22      	ldr	r2, [pc, #136]	@ (8008174 <TIM_Base_SetConfig+0xd0>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d00b      	beq.n	8008106 <TIM_Base_SetConfig+0x62>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080f4:	d007      	beq.n	8008106 <TIM_Base_SetConfig+0x62>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a1f      	ldr	r2, [pc, #124]	@ (8008178 <TIM_Base_SetConfig+0xd4>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d003      	beq.n	8008106 <TIM_Base_SetConfig+0x62>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a1e      	ldr	r2, [pc, #120]	@ (800817c <TIM_Base_SetConfig+0xd8>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d108      	bne.n	8008118 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800810c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	4313      	orrs	r3, r2
 8008116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	4313      	orrs	r3, r2
 8008124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	689a      	ldr	r2, [r3, #8]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a0d      	ldr	r2, [pc, #52]	@ (8008174 <TIM_Base_SetConfig+0xd0>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d103      	bne.n	800814c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	691a      	ldr	r2, [r3, #16]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	2b00      	cmp	r3, #0
 800815c:	d005      	beq.n	800816a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	f023 0201 	bic.w	r2, r3, #1
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	611a      	str	r2, [r3, #16]
  }
}
 800816a:	bf00      	nop
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	bc80      	pop	{r7}
 8008172:	4770      	bx	lr
 8008174:	40012c00 	.word	0x40012c00
 8008178:	40000400 	.word	0x40000400
 800817c:	40000800 	.word	0x40000800

08008180 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008180:	b480      	push	{r7}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a1b      	ldr	r3, [r3, #32]
 800818e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a1b      	ldr	r3, [r3, #32]
 8008194:	f023 0201 	bic.w	r2, r3, #1
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f023 0303 	bic.w	r3, r3, #3
 80081b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	4313      	orrs	r3, r2
 80081c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	f023 0302 	bic.w	r3, r3, #2
 80081c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	697a      	ldr	r2, [r7, #20]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a1c      	ldr	r2, [pc, #112]	@ (8008248 <TIM_OC1_SetConfig+0xc8>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d10c      	bne.n	80081f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	f023 0308 	bic.w	r3, r3, #8
 80081e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	697a      	ldr	r2, [r7, #20]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	f023 0304 	bic.w	r3, r3, #4
 80081f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a13      	ldr	r2, [pc, #76]	@ (8008248 <TIM_OC1_SetConfig+0xc8>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d111      	bne.n	8008222 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800820c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	695b      	ldr	r3, [r3, #20]
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	4313      	orrs	r3, r2
 8008216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	4313      	orrs	r3, r2
 8008220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	693a      	ldr	r2, [r7, #16]
 8008226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	621a      	str	r2, [r3, #32]
}
 800823c:	bf00      	nop
 800823e:	371c      	adds	r7, #28
 8008240:	46bd      	mov	sp, r7
 8008242:	bc80      	pop	{r7}
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	40012c00 	.word	0x40012c00

0800824c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800824c:	b480      	push	{r7}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a1b      	ldr	r3, [r3, #32]
 8008260:	f023 0210 	bic.w	r2, r3, #16
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800827a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	021b      	lsls	r3, r3, #8
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	4313      	orrs	r3, r2
 800828e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	f023 0320 	bic.w	r3, r3, #32
 8008296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	011b      	lsls	r3, r3, #4
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a1d      	ldr	r2, [pc, #116]	@ (800831c <TIM_OC2_SetConfig+0xd0>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d10d      	bne.n	80082c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	011b      	lsls	r3, r3, #4
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	4313      	orrs	r3, r2
 80082be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a14      	ldr	r2, [pc, #80]	@ (800831c <TIM_OC2_SetConfig+0xd0>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d113      	bne.n	80082f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80082d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80082de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	693a      	ldr	r2, [r7, #16]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	693a      	ldr	r2, [r7, #16]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	621a      	str	r2, [r3, #32]
}
 8008312:	bf00      	nop
 8008314:	371c      	adds	r7, #28
 8008316:	46bd      	mov	sp, r7
 8008318:	bc80      	pop	{r7}
 800831a:	4770      	bx	lr
 800831c:	40012c00 	.word	0x40012c00

08008320 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008320:	b480      	push	{r7}
 8008322:	b087      	sub	sp, #28
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a1b      	ldr	r3, [r3, #32]
 8008334:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	69db      	ldr	r3, [r3, #28]
 8008346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800834e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f023 0303 	bic.w	r3, r3, #3
 8008356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	4313      	orrs	r3, r2
 8008360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	021b      	lsls	r3, r3, #8
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	4313      	orrs	r3, r2
 8008374:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a1d      	ldr	r2, [pc, #116]	@ (80083f0 <TIM_OC3_SetConfig+0xd0>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d10d      	bne.n	800839a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008384:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	021b      	lsls	r3, r3, #8
 800838c:	697a      	ldr	r2, [r7, #20]
 800838e:	4313      	orrs	r3, r2
 8008390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a14      	ldr	r2, [pc, #80]	@ (80083f0 <TIM_OC3_SetConfig+0xd0>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d113      	bne.n	80083ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	011b      	lsls	r3, r3, #4
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	699b      	ldr	r3, [r3, #24]
 80083c2:	011b      	lsls	r3, r3, #4
 80083c4:	693a      	ldr	r2, [r7, #16]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	685a      	ldr	r2, [r3, #4]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	697a      	ldr	r2, [r7, #20]
 80083e2:	621a      	str	r2, [r3, #32]
}
 80083e4:	bf00      	nop
 80083e6:	371c      	adds	r7, #28
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bc80      	pop	{r7}
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	40012c00 	.word	0x40012c00

080083f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b087      	sub	sp, #28
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a1b      	ldr	r3, [r3, #32]
 8008408:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	69db      	ldr	r3, [r3, #28]
 800841a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800842a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	021b      	lsls	r3, r3, #8
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	4313      	orrs	r3, r2
 8008436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800843e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	031b      	lsls	r3, r3, #12
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	4313      	orrs	r3, r2
 800844a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a0f      	ldr	r2, [pc, #60]	@ (800848c <TIM_OC4_SetConfig+0x98>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d109      	bne.n	8008468 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800845a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	019b      	lsls	r3, r3, #6
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	4313      	orrs	r3, r2
 8008466:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	693a      	ldr	r2, [r7, #16]
 8008480:	621a      	str	r2, [r3, #32]
}
 8008482:	bf00      	nop
 8008484:	371c      	adds	r7, #28
 8008486:	46bd      	mov	sp, r7
 8008488:	bc80      	pop	{r7}
 800848a:	4770      	bx	lr
 800848c:	40012c00 	.word	0x40012c00

08008490 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008490:	b480      	push	{r7}
 8008492:	b087      	sub	sp, #28
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6a1b      	ldr	r3, [r3, #32]
 80084a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6a1b      	ldr	r3, [r3, #32]
 80084a6:	f023 0201 	bic.w	r2, r3, #1
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	011b      	lsls	r3, r3, #4
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	f023 030a 	bic.w	r3, r3, #10
 80084cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	697a      	ldr	r2, [r7, #20]
 80084e0:	621a      	str	r2, [r3, #32]
}
 80084e2:	bf00      	nop
 80084e4:	371c      	adds	r7, #28
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bc80      	pop	{r7}
 80084ea:	4770      	bx	lr

080084ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b087      	sub	sp, #28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	f023 0210 	bic.w	r2, r3, #16
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	031b      	lsls	r3, r3, #12
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	4313      	orrs	r3, r2
 8008520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008528:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	011b      	lsls	r3, r3, #4
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	4313      	orrs	r3, r2
 8008532:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	697a      	ldr	r2, [r7, #20]
 800853e:	621a      	str	r2, [r3, #32]
}
 8008540:	bf00      	nop
 8008542:	371c      	adds	r7, #28
 8008544:	46bd      	mov	sp, r7
 8008546:	bc80      	pop	{r7}
 8008548:	4770      	bx	lr

0800854a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800854a:	b480      	push	{r7}
 800854c:	b085      	sub	sp, #20
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008560:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	4313      	orrs	r3, r2
 8008568:	f043 0307 	orr.w	r3, r3, #7
 800856c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	609a      	str	r2, [r3, #8]
}
 8008574:	bf00      	nop
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	bc80      	pop	{r7}
 800857c:	4770      	bx	lr

0800857e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800857e:	b480      	push	{r7}
 8008580:	b087      	sub	sp, #28
 8008582:	af00      	add	r7, sp, #0
 8008584:	60f8      	str	r0, [r7, #12]
 8008586:	60b9      	str	r1, [r7, #8]
 8008588:	607a      	str	r2, [r7, #4]
 800858a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008598:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	021a      	lsls	r2, r3, #8
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	431a      	orrs	r2, r3
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	609a      	str	r2, [r3, #8]
}
 80085b2:	bf00      	nop
 80085b4:	371c      	adds	r7, #28
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bc80      	pop	{r7}
 80085ba:	4770      	bx	lr

080085bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085bc:	b480      	push	{r7}
 80085be:	b087      	sub	sp, #28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	f003 031f 	and.w	r3, r3, #31
 80085ce:	2201      	movs	r2, #1
 80085d0:	fa02 f303 	lsl.w	r3, r2, r3
 80085d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6a1a      	ldr	r2, [r3, #32]
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	43db      	mvns	r3, r3
 80085de:	401a      	ands	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6a1a      	ldr	r2, [r3, #32]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	f003 031f 	and.w	r3, r3, #31
 80085ee:	6879      	ldr	r1, [r7, #4]
 80085f0:	fa01 f303 	lsl.w	r3, r1, r3
 80085f4:	431a      	orrs	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	621a      	str	r2, [r3, #32]
}
 80085fa:	bf00      	nop
 80085fc:	371c      	adds	r7, #28
 80085fe:	46bd      	mov	sp, r7
 8008600:	bc80      	pop	{r7}
 8008602:	4770      	bx	lr

08008604 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008614:	2b01      	cmp	r3, #1
 8008616:	d101      	bne.n	800861c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008618:	2302      	movs	r3, #2
 800861a:	e046      	b.n	80086aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2202      	movs	r2, #2
 8008628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008642:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	4313      	orrs	r3, r2
 800864c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a16      	ldr	r2, [pc, #88]	@ (80086b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d00e      	beq.n	800867e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008668:	d009      	beq.n	800867e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a12      	ldr	r2, [pc, #72]	@ (80086b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d004      	beq.n	800867e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a10      	ldr	r2, [pc, #64]	@ (80086bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d10c      	bne.n	8008698 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008684:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	4313      	orrs	r3, r2
 800868e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3714      	adds	r7, #20
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bc80      	pop	{r7}
 80086b2:	4770      	bx	lr
 80086b4:	40012c00 	.word	0x40012c00
 80086b8:	40000400 	.word	0x40000400
 80086bc:	40000800 	.word	0x40000800

080086c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d101      	bne.n	80086dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80086d8:	2302      	movs	r3, #2
 80086da:	e03d      	b.n	8008758 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	4313      	orrs	r3, r2
 800870c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4313      	orrs	r3, r2
 800871a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	691b      	ldr	r3, [r3, #16]
 8008726:	4313      	orrs	r3, r2
 8008728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	4313      	orrs	r3, r2
 8008736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	69db      	ldr	r3, [r3, #28]
 8008742:	4313      	orrs	r3, r2
 8008744:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3714      	adds	r7, #20
 800875c:	46bd      	mov	sp, r7
 800875e:	bc80      	pop	{r7}
 8008760:	4770      	bx	lr
	...

08008764 <rand>:
 8008764:	4b16      	ldr	r3, [pc, #88]	@ (80087c0 <rand+0x5c>)
 8008766:	b510      	push	{r4, lr}
 8008768:	681c      	ldr	r4, [r3, #0]
 800876a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800876c:	b9b3      	cbnz	r3, 800879c <rand+0x38>
 800876e:	2018      	movs	r0, #24
 8008770:	f000 fa60 	bl	8008c34 <malloc>
 8008774:	4602      	mov	r2, r0
 8008776:	6320      	str	r0, [r4, #48]	@ 0x30
 8008778:	b920      	cbnz	r0, 8008784 <rand+0x20>
 800877a:	2152      	movs	r1, #82	@ 0x52
 800877c:	4b11      	ldr	r3, [pc, #68]	@ (80087c4 <rand+0x60>)
 800877e:	4812      	ldr	r0, [pc, #72]	@ (80087c8 <rand+0x64>)
 8008780:	f000 f9f2 	bl	8008b68 <__assert_func>
 8008784:	4911      	ldr	r1, [pc, #68]	@ (80087cc <rand+0x68>)
 8008786:	4b12      	ldr	r3, [pc, #72]	@ (80087d0 <rand+0x6c>)
 8008788:	e9c0 1300 	strd	r1, r3, [r0]
 800878c:	4b11      	ldr	r3, [pc, #68]	@ (80087d4 <rand+0x70>)
 800878e:	2100      	movs	r1, #0
 8008790:	6083      	str	r3, [r0, #8]
 8008792:	230b      	movs	r3, #11
 8008794:	8183      	strh	r3, [r0, #12]
 8008796:	2001      	movs	r0, #1
 8008798:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800879c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800879e:	480e      	ldr	r0, [pc, #56]	@ (80087d8 <rand+0x74>)
 80087a0:	690b      	ldr	r3, [r1, #16]
 80087a2:	694c      	ldr	r4, [r1, #20]
 80087a4:	4358      	muls	r0, r3
 80087a6:	4a0d      	ldr	r2, [pc, #52]	@ (80087dc <rand+0x78>)
 80087a8:	fb02 0004 	mla	r0, r2, r4, r0
 80087ac:	fba3 3202 	umull	r3, r2, r3, r2
 80087b0:	3301      	adds	r3, #1
 80087b2:	eb40 0002 	adc.w	r0, r0, r2
 80087b6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80087ba:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80087be:	bd10      	pop	{r4, pc}
 80087c0:	20000030 	.word	0x20000030
 80087c4:	0800b572 	.word	0x0800b572
 80087c8:	0800b589 	.word	0x0800b589
 80087cc:	abcd330e 	.word	0xabcd330e
 80087d0:	e66d1234 	.word	0xe66d1234
 80087d4:	0005deec 	.word	0x0005deec
 80087d8:	5851f42d 	.word	0x5851f42d
 80087dc:	4c957f2d 	.word	0x4c957f2d

080087e0 <std>:
 80087e0:	2300      	movs	r3, #0
 80087e2:	b510      	push	{r4, lr}
 80087e4:	4604      	mov	r4, r0
 80087e6:	e9c0 3300 	strd	r3, r3, [r0]
 80087ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087ee:	6083      	str	r3, [r0, #8]
 80087f0:	8181      	strh	r1, [r0, #12]
 80087f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80087f4:	81c2      	strh	r2, [r0, #14]
 80087f6:	6183      	str	r3, [r0, #24]
 80087f8:	4619      	mov	r1, r3
 80087fa:	2208      	movs	r2, #8
 80087fc:	305c      	adds	r0, #92	@ 0x5c
 80087fe:	f000 f916 	bl	8008a2e <memset>
 8008802:	4b0d      	ldr	r3, [pc, #52]	@ (8008838 <std+0x58>)
 8008804:	6224      	str	r4, [r4, #32]
 8008806:	6263      	str	r3, [r4, #36]	@ 0x24
 8008808:	4b0c      	ldr	r3, [pc, #48]	@ (800883c <std+0x5c>)
 800880a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800880c:	4b0c      	ldr	r3, [pc, #48]	@ (8008840 <std+0x60>)
 800880e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008810:	4b0c      	ldr	r3, [pc, #48]	@ (8008844 <std+0x64>)
 8008812:	6323      	str	r3, [r4, #48]	@ 0x30
 8008814:	4b0c      	ldr	r3, [pc, #48]	@ (8008848 <std+0x68>)
 8008816:	429c      	cmp	r4, r3
 8008818:	d006      	beq.n	8008828 <std+0x48>
 800881a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800881e:	4294      	cmp	r4, r2
 8008820:	d002      	beq.n	8008828 <std+0x48>
 8008822:	33d0      	adds	r3, #208	@ 0xd0
 8008824:	429c      	cmp	r4, r3
 8008826:	d105      	bne.n	8008834 <std+0x54>
 8008828:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800882c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008830:	f000 b988 	b.w	8008b44 <__retarget_lock_init_recursive>
 8008834:	bd10      	pop	{r4, pc}
 8008836:	bf00      	nop
 8008838:	080089a9 	.word	0x080089a9
 800883c:	080089cb 	.word	0x080089cb
 8008840:	08008a03 	.word	0x08008a03
 8008844:	08008a27 	.word	0x08008a27
 8008848:	20003fbc 	.word	0x20003fbc

0800884c <stdio_exit_handler>:
 800884c:	4a02      	ldr	r2, [pc, #8]	@ (8008858 <stdio_exit_handler+0xc>)
 800884e:	4903      	ldr	r1, [pc, #12]	@ (800885c <stdio_exit_handler+0x10>)
 8008850:	4803      	ldr	r0, [pc, #12]	@ (8008860 <stdio_exit_handler+0x14>)
 8008852:	f000 b869 	b.w	8008928 <_fwalk_sglue>
 8008856:	bf00      	nop
 8008858:	20000024 	.word	0x20000024
 800885c:	08009471 	.word	0x08009471
 8008860:	20000034 	.word	0x20000034

08008864 <cleanup_stdio>:
 8008864:	6841      	ldr	r1, [r0, #4]
 8008866:	4b0c      	ldr	r3, [pc, #48]	@ (8008898 <cleanup_stdio+0x34>)
 8008868:	b510      	push	{r4, lr}
 800886a:	4299      	cmp	r1, r3
 800886c:	4604      	mov	r4, r0
 800886e:	d001      	beq.n	8008874 <cleanup_stdio+0x10>
 8008870:	f000 fdfe 	bl	8009470 <_fflush_r>
 8008874:	68a1      	ldr	r1, [r4, #8]
 8008876:	4b09      	ldr	r3, [pc, #36]	@ (800889c <cleanup_stdio+0x38>)
 8008878:	4299      	cmp	r1, r3
 800887a:	d002      	beq.n	8008882 <cleanup_stdio+0x1e>
 800887c:	4620      	mov	r0, r4
 800887e:	f000 fdf7 	bl	8009470 <_fflush_r>
 8008882:	68e1      	ldr	r1, [r4, #12]
 8008884:	4b06      	ldr	r3, [pc, #24]	@ (80088a0 <cleanup_stdio+0x3c>)
 8008886:	4299      	cmp	r1, r3
 8008888:	d004      	beq.n	8008894 <cleanup_stdio+0x30>
 800888a:	4620      	mov	r0, r4
 800888c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008890:	f000 bdee 	b.w	8009470 <_fflush_r>
 8008894:	bd10      	pop	{r4, pc}
 8008896:	bf00      	nop
 8008898:	20003fbc 	.word	0x20003fbc
 800889c:	20004024 	.word	0x20004024
 80088a0:	2000408c 	.word	0x2000408c

080088a4 <global_stdio_init.part.0>:
 80088a4:	b510      	push	{r4, lr}
 80088a6:	4b0b      	ldr	r3, [pc, #44]	@ (80088d4 <global_stdio_init.part.0+0x30>)
 80088a8:	4c0b      	ldr	r4, [pc, #44]	@ (80088d8 <global_stdio_init.part.0+0x34>)
 80088aa:	4a0c      	ldr	r2, [pc, #48]	@ (80088dc <global_stdio_init.part.0+0x38>)
 80088ac:	4620      	mov	r0, r4
 80088ae:	601a      	str	r2, [r3, #0]
 80088b0:	2104      	movs	r1, #4
 80088b2:	2200      	movs	r2, #0
 80088b4:	f7ff ff94 	bl	80087e0 <std>
 80088b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80088bc:	2201      	movs	r2, #1
 80088be:	2109      	movs	r1, #9
 80088c0:	f7ff ff8e 	bl	80087e0 <std>
 80088c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80088c8:	2202      	movs	r2, #2
 80088ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088ce:	2112      	movs	r1, #18
 80088d0:	f7ff bf86 	b.w	80087e0 <std>
 80088d4:	200040f4 	.word	0x200040f4
 80088d8:	20003fbc 	.word	0x20003fbc
 80088dc:	0800884d 	.word	0x0800884d

080088e0 <__sfp_lock_acquire>:
 80088e0:	4801      	ldr	r0, [pc, #4]	@ (80088e8 <__sfp_lock_acquire+0x8>)
 80088e2:	f000 b930 	b.w	8008b46 <__retarget_lock_acquire_recursive>
 80088e6:	bf00      	nop
 80088e8:	200040fd 	.word	0x200040fd

080088ec <__sfp_lock_release>:
 80088ec:	4801      	ldr	r0, [pc, #4]	@ (80088f4 <__sfp_lock_release+0x8>)
 80088ee:	f000 b92b 	b.w	8008b48 <__retarget_lock_release_recursive>
 80088f2:	bf00      	nop
 80088f4:	200040fd 	.word	0x200040fd

080088f8 <__sinit>:
 80088f8:	b510      	push	{r4, lr}
 80088fa:	4604      	mov	r4, r0
 80088fc:	f7ff fff0 	bl	80088e0 <__sfp_lock_acquire>
 8008900:	6a23      	ldr	r3, [r4, #32]
 8008902:	b11b      	cbz	r3, 800890c <__sinit+0x14>
 8008904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008908:	f7ff bff0 	b.w	80088ec <__sfp_lock_release>
 800890c:	4b04      	ldr	r3, [pc, #16]	@ (8008920 <__sinit+0x28>)
 800890e:	6223      	str	r3, [r4, #32]
 8008910:	4b04      	ldr	r3, [pc, #16]	@ (8008924 <__sinit+0x2c>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1f5      	bne.n	8008904 <__sinit+0xc>
 8008918:	f7ff ffc4 	bl	80088a4 <global_stdio_init.part.0>
 800891c:	e7f2      	b.n	8008904 <__sinit+0xc>
 800891e:	bf00      	nop
 8008920:	08008865 	.word	0x08008865
 8008924:	200040f4 	.word	0x200040f4

08008928 <_fwalk_sglue>:
 8008928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800892c:	4607      	mov	r7, r0
 800892e:	4688      	mov	r8, r1
 8008930:	4614      	mov	r4, r2
 8008932:	2600      	movs	r6, #0
 8008934:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008938:	f1b9 0901 	subs.w	r9, r9, #1
 800893c:	d505      	bpl.n	800894a <_fwalk_sglue+0x22>
 800893e:	6824      	ldr	r4, [r4, #0]
 8008940:	2c00      	cmp	r4, #0
 8008942:	d1f7      	bne.n	8008934 <_fwalk_sglue+0xc>
 8008944:	4630      	mov	r0, r6
 8008946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800894a:	89ab      	ldrh	r3, [r5, #12]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d907      	bls.n	8008960 <_fwalk_sglue+0x38>
 8008950:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008954:	3301      	adds	r3, #1
 8008956:	d003      	beq.n	8008960 <_fwalk_sglue+0x38>
 8008958:	4629      	mov	r1, r5
 800895a:	4638      	mov	r0, r7
 800895c:	47c0      	blx	r8
 800895e:	4306      	orrs	r6, r0
 8008960:	3568      	adds	r5, #104	@ 0x68
 8008962:	e7e9      	b.n	8008938 <_fwalk_sglue+0x10>

08008964 <siprintf>:
 8008964:	b40e      	push	{r1, r2, r3}
 8008966:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800896a:	b510      	push	{r4, lr}
 800896c:	2400      	movs	r4, #0
 800896e:	b09d      	sub	sp, #116	@ 0x74
 8008970:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008972:	9002      	str	r0, [sp, #8]
 8008974:	9006      	str	r0, [sp, #24]
 8008976:	9107      	str	r1, [sp, #28]
 8008978:	9104      	str	r1, [sp, #16]
 800897a:	4809      	ldr	r0, [pc, #36]	@ (80089a0 <siprintf+0x3c>)
 800897c:	4909      	ldr	r1, [pc, #36]	@ (80089a4 <siprintf+0x40>)
 800897e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008982:	9105      	str	r1, [sp, #20]
 8008984:	6800      	ldr	r0, [r0, #0]
 8008986:	a902      	add	r1, sp, #8
 8008988:	9301      	str	r3, [sp, #4]
 800898a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800898c:	f000 fa64 	bl	8008e58 <_svfiprintf_r>
 8008990:	9b02      	ldr	r3, [sp, #8]
 8008992:	701c      	strb	r4, [r3, #0]
 8008994:	b01d      	add	sp, #116	@ 0x74
 8008996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800899a:	b003      	add	sp, #12
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	20000030 	.word	0x20000030
 80089a4:	ffff0208 	.word	0xffff0208

080089a8 <__sread>:
 80089a8:	b510      	push	{r4, lr}
 80089aa:	460c      	mov	r4, r1
 80089ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b0:	f000 f87a 	bl	8008aa8 <_read_r>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	bfab      	itete	ge
 80089b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80089ba:	89a3      	ldrhlt	r3, [r4, #12]
 80089bc:	181b      	addge	r3, r3, r0
 80089be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80089c2:	bfac      	ite	ge
 80089c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80089c6:	81a3      	strhlt	r3, [r4, #12]
 80089c8:	bd10      	pop	{r4, pc}

080089ca <__swrite>:
 80089ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ce:	461f      	mov	r7, r3
 80089d0:	898b      	ldrh	r3, [r1, #12]
 80089d2:	4605      	mov	r5, r0
 80089d4:	05db      	lsls	r3, r3, #23
 80089d6:	460c      	mov	r4, r1
 80089d8:	4616      	mov	r6, r2
 80089da:	d505      	bpl.n	80089e8 <__swrite+0x1e>
 80089dc:	2302      	movs	r3, #2
 80089de:	2200      	movs	r2, #0
 80089e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e4:	f000 f84e 	bl	8008a84 <_lseek_r>
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	4632      	mov	r2, r6
 80089ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089f0:	81a3      	strh	r3, [r4, #12]
 80089f2:	4628      	mov	r0, r5
 80089f4:	463b      	mov	r3, r7
 80089f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089fe:	f000 b865 	b.w	8008acc <_write_r>

08008a02 <__sseek>:
 8008a02:	b510      	push	{r4, lr}
 8008a04:	460c      	mov	r4, r1
 8008a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a0a:	f000 f83b 	bl	8008a84 <_lseek_r>
 8008a0e:	1c43      	adds	r3, r0, #1
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	bf15      	itete	ne
 8008a14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008a16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008a1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008a1e:	81a3      	strheq	r3, [r4, #12]
 8008a20:	bf18      	it	ne
 8008a22:	81a3      	strhne	r3, [r4, #12]
 8008a24:	bd10      	pop	{r4, pc}

08008a26 <__sclose>:
 8008a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2a:	f000 b81b 	b.w	8008a64 <_close_r>

08008a2e <memset>:
 8008a2e:	4603      	mov	r3, r0
 8008a30:	4402      	add	r2, r0
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d100      	bne.n	8008a38 <memset+0xa>
 8008a36:	4770      	bx	lr
 8008a38:	f803 1b01 	strb.w	r1, [r3], #1
 8008a3c:	e7f9      	b.n	8008a32 <memset+0x4>

08008a3e <strncpy>:
 8008a3e:	4603      	mov	r3, r0
 8008a40:	b510      	push	{r4, lr}
 8008a42:	3901      	subs	r1, #1
 8008a44:	b132      	cbz	r2, 8008a54 <strncpy+0x16>
 8008a46:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008a4a:	3a01      	subs	r2, #1
 8008a4c:	f803 4b01 	strb.w	r4, [r3], #1
 8008a50:	2c00      	cmp	r4, #0
 8008a52:	d1f7      	bne.n	8008a44 <strncpy+0x6>
 8008a54:	2100      	movs	r1, #0
 8008a56:	441a      	add	r2, r3
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d100      	bne.n	8008a5e <strncpy+0x20>
 8008a5c:	bd10      	pop	{r4, pc}
 8008a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a62:	e7f9      	b.n	8008a58 <strncpy+0x1a>

08008a64 <_close_r>:
 8008a64:	b538      	push	{r3, r4, r5, lr}
 8008a66:	2300      	movs	r3, #0
 8008a68:	4d05      	ldr	r5, [pc, #20]	@ (8008a80 <_close_r+0x1c>)
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	4608      	mov	r0, r1
 8008a6e:	602b      	str	r3, [r5, #0]
 8008a70:	f7fc ff23 	bl	80058ba <_close>
 8008a74:	1c43      	adds	r3, r0, #1
 8008a76:	d102      	bne.n	8008a7e <_close_r+0x1a>
 8008a78:	682b      	ldr	r3, [r5, #0]
 8008a7a:	b103      	cbz	r3, 8008a7e <_close_r+0x1a>
 8008a7c:	6023      	str	r3, [r4, #0]
 8008a7e:	bd38      	pop	{r3, r4, r5, pc}
 8008a80:	200040f8 	.word	0x200040f8

08008a84 <_lseek_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	4604      	mov	r4, r0
 8008a88:	4608      	mov	r0, r1
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	4d05      	ldr	r5, [pc, #20]	@ (8008aa4 <_lseek_r+0x20>)
 8008a90:	602a      	str	r2, [r5, #0]
 8008a92:	461a      	mov	r2, r3
 8008a94:	f7fc ff35 	bl	8005902 <_lseek>
 8008a98:	1c43      	adds	r3, r0, #1
 8008a9a:	d102      	bne.n	8008aa2 <_lseek_r+0x1e>
 8008a9c:	682b      	ldr	r3, [r5, #0]
 8008a9e:	b103      	cbz	r3, 8008aa2 <_lseek_r+0x1e>
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	bd38      	pop	{r3, r4, r5, pc}
 8008aa4:	200040f8 	.word	0x200040f8

08008aa8 <_read_r>:
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	4604      	mov	r4, r0
 8008aac:	4608      	mov	r0, r1
 8008aae:	4611      	mov	r1, r2
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	4d05      	ldr	r5, [pc, #20]	@ (8008ac8 <_read_r+0x20>)
 8008ab4:	602a      	str	r2, [r5, #0]
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	f7fc fec6 	bl	8005848 <_read>
 8008abc:	1c43      	adds	r3, r0, #1
 8008abe:	d102      	bne.n	8008ac6 <_read_r+0x1e>
 8008ac0:	682b      	ldr	r3, [r5, #0]
 8008ac2:	b103      	cbz	r3, 8008ac6 <_read_r+0x1e>
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	bd38      	pop	{r3, r4, r5, pc}
 8008ac8:	200040f8 	.word	0x200040f8

08008acc <_write_r>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	4604      	mov	r4, r0
 8008ad0:	4608      	mov	r0, r1
 8008ad2:	4611      	mov	r1, r2
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	4d05      	ldr	r5, [pc, #20]	@ (8008aec <_write_r+0x20>)
 8008ad8:	602a      	str	r2, [r5, #0]
 8008ada:	461a      	mov	r2, r3
 8008adc:	f7fc fed1 	bl	8005882 <_write>
 8008ae0:	1c43      	adds	r3, r0, #1
 8008ae2:	d102      	bne.n	8008aea <_write_r+0x1e>
 8008ae4:	682b      	ldr	r3, [r5, #0]
 8008ae6:	b103      	cbz	r3, 8008aea <_write_r+0x1e>
 8008ae8:	6023      	str	r3, [r4, #0]
 8008aea:	bd38      	pop	{r3, r4, r5, pc}
 8008aec:	200040f8 	.word	0x200040f8

08008af0 <__errno>:
 8008af0:	4b01      	ldr	r3, [pc, #4]	@ (8008af8 <__errno+0x8>)
 8008af2:	6818      	ldr	r0, [r3, #0]
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	20000030 	.word	0x20000030

08008afc <__libc_init_array>:
 8008afc:	b570      	push	{r4, r5, r6, lr}
 8008afe:	2600      	movs	r6, #0
 8008b00:	4d0c      	ldr	r5, [pc, #48]	@ (8008b34 <__libc_init_array+0x38>)
 8008b02:	4c0d      	ldr	r4, [pc, #52]	@ (8008b38 <__libc_init_array+0x3c>)
 8008b04:	1b64      	subs	r4, r4, r5
 8008b06:	10a4      	asrs	r4, r4, #2
 8008b08:	42a6      	cmp	r6, r4
 8008b0a:	d109      	bne.n	8008b20 <__libc_init_array+0x24>
 8008b0c:	f002 fa56 	bl	800afbc <_init>
 8008b10:	2600      	movs	r6, #0
 8008b12:	4d0a      	ldr	r5, [pc, #40]	@ (8008b3c <__libc_init_array+0x40>)
 8008b14:	4c0a      	ldr	r4, [pc, #40]	@ (8008b40 <__libc_init_array+0x44>)
 8008b16:	1b64      	subs	r4, r4, r5
 8008b18:	10a4      	asrs	r4, r4, #2
 8008b1a:	42a6      	cmp	r6, r4
 8008b1c:	d105      	bne.n	8008b2a <__libc_init_array+0x2e>
 8008b1e:	bd70      	pop	{r4, r5, r6, pc}
 8008b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b24:	4798      	blx	r3
 8008b26:	3601      	adds	r6, #1
 8008b28:	e7ee      	b.n	8008b08 <__libc_init_array+0xc>
 8008b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b2e:	4798      	blx	r3
 8008b30:	3601      	adds	r6, #1
 8008b32:	e7f2      	b.n	8008b1a <__libc_init_array+0x1e>
 8008b34:	0800ba48 	.word	0x0800ba48
 8008b38:	0800ba48 	.word	0x0800ba48
 8008b3c:	0800ba48 	.word	0x0800ba48
 8008b40:	0800ba4c 	.word	0x0800ba4c

08008b44 <__retarget_lock_init_recursive>:
 8008b44:	4770      	bx	lr

08008b46 <__retarget_lock_acquire_recursive>:
 8008b46:	4770      	bx	lr

08008b48 <__retarget_lock_release_recursive>:
 8008b48:	4770      	bx	lr

08008b4a <memcpy>:
 8008b4a:	440a      	add	r2, r1
 8008b4c:	4291      	cmp	r1, r2
 8008b4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b52:	d100      	bne.n	8008b56 <memcpy+0xc>
 8008b54:	4770      	bx	lr
 8008b56:	b510      	push	{r4, lr}
 8008b58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b5c:	4291      	cmp	r1, r2
 8008b5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b62:	d1f9      	bne.n	8008b58 <memcpy+0xe>
 8008b64:	bd10      	pop	{r4, pc}
	...

08008b68 <__assert_func>:
 8008b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b6a:	4614      	mov	r4, r2
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	4b09      	ldr	r3, [pc, #36]	@ (8008b94 <__assert_func+0x2c>)
 8008b70:	4605      	mov	r5, r0
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68d8      	ldr	r0, [r3, #12]
 8008b76:	b14c      	cbz	r4, 8008b8c <__assert_func+0x24>
 8008b78:	4b07      	ldr	r3, [pc, #28]	@ (8008b98 <__assert_func+0x30>)
 8008b7a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b7e:	9100      	str	r1, [sp, #0]
 8008b80:	462b      	mov	r3, r5
 8008b82:	4906      	ldr	r1, [pc, #24]	@ (8008b9c <__assert_func+0x34>)
 8008b84:	f000 fc9c 	bl	80094c0 <fiprintf>
 8008b88:	f000 fce4 	bl	8009554 <abort>
 8008b8c:	4b04      	ldr	r3, [pc, #16]	@ (8008ba0 <__assert_func+0x38>)
 8008b8e:	461c      	mov	r4, r3
 8008b90:	e7f3      	b.n	8008b7a <__assert_func+0x12>
 8008b92:	bf00      	nop
 8008b94:	20000030 	.word	0x20000030
 8008b98:	0800b5e1 	.word	0x0800b5e1
 8008b9c:	0800b5ee 	.word	0x0800b5ee
 8008ba0:	0800b61c 	.word	0x0800b61c

08008ba4 <_free_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	4605      	mov	r5, r0
 8008ba8:	2900      	cmp	r1, #0
 8008baa:	d040      	beq.n	8008c2e <_free_r+0x8a>
 8008bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bb0:	1f0c      	subs	r4, r1, #4
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	bfb8      	it	lt
 8008bb6:	18e4      	addlt	r4, r4, r3
 8008bb8:	f000 f8e6 	bl	8008d88 <__malloc_lock>
 8008bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8008c30 <_free_r+0x8c>)
 8008bbe:	6813      	ldr	r3, [r2, #0]
 8008bc0:	b933      	cbnz	r3, 8008bd0 <_free_r+0x2c>
 8008bc2:	6063      	str	r3, [r4, #4]
 8008bc4:	6014      	str	r4, [r2, #0]
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bcc:	f000 b8e2 	b.w	8008d94 <__malloc_unlock>
 8008bd0:	42a3      	cmp	r3, r4
 8008bd2:	d908      	bls.n	8008be6 <_free_r+0x42>
 8008bd4:	6820      	ldr	r0, [r4, #0]
 8008bd6:	1821      	adds	r1, r4, r0
 8008bd8:	428b      	cmp	r3, r1
 8008bda:	bf01      	itttt	eq
 8008bdc:	6819      	ldreq	r1, [r3, #0]
 8008bde:	685b      	ldreq	r3, [r3, #4]
 8008be0:	1809      	addeq	r1, r1, r0
 8008be2:	6021      	streq	r1, [r4, #0]
 8008be4:	e7ed      	b.n	8008bc2 <_free_r+0x1e>
 8008be6:	461a      	mov	r2, r3
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	b10b      	cbz	r3, 8008bf0 <_free_r+0x4c>
 8008bec:	42a3      	cmp	r3, r4
 8008bee:	d9fa      	bls.n	8008be6 <_free_r+0x42>
 8008bf0:	6811      	ldr	r1, [r2, #0]
 8008bf2:	1850      	adds	r0, r2, r1
 8008bf4:	42a0      	cmp	r0, r4
 8008bf6:	d10b      	bne.n	8008c10 <_free_r+0x6c>
 8008bf8:	6820      	ldr	r0, [r4, #0]
 8008bfa:	4401      	add	r1, r0
 8008bfc:	1850      	adds	r0, r2, r1
 8008bfe:	4283      	cmp	r3, r0
 8008c00:	6011      	str	r1, [r2, #0]
 8008c02:	d1e0      	bne.n	8008bc6 <_free_r+0x22>
 8008c04:	6818      	ldr	r0, [r3, #0]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	4408      	add	r0, r1
 8008c0a:	6010      	str	r0, [r2, #0]
 8008c0c:	6053      	str	r3, [r2, #4]
 8008c0e:	e7da      	b.n	8008bc6 <_free_r+0x22>
 8008c10:	d902      	bls.n	8008c18 <_free_r+0x74>
 8008c12:	230c      	movs	r3, #12
 8008c14:	602b      	str	r3, [r5, #0]
 8008c16:	e7d6      	b.n	8008bc6 <_free_r+0x22>
 8008c18:	6820      	ldr	r0, [r4, #0]
 8008c1a:	1821      	adds	r1, r4, r0
 8008c1c:	428b      	cmp	r3, r1
 8008c1e:	bf01      	itttt	eq
 8008c20:	6819      	ldreq	r1, [r3, #0]
 8008c22:	685b      	ldreq	r3, [r3, #4]
 8008c24:	1809      	addeq	r1, r1, r0
 8008c26:	6021      	streq	r1, [r4, #0]
 8008c28:	6063      	str	r3, [r4, #4]
 8008c2a:	6054      	str	r4, [r2, #4]
 8008c2c:	e7cb      	b.n	8008bc6 <_free_r+0x22>
 8008c2e:	bd38      	pop	{r3, r4, r5, pc}
 8008c30:	20004104 	.word	0x20004104

08008c34 <malloc>:
 8008c34:	4b02      	ldr	r3, [pc, #8]	@ (8008c40 <malloc+0xc>)
 8008c36:	4601      	mov	r1, r0
 8008c38:	6818      	ldr	r0, [r3, #0]
 8008c3a:	f000 b825 	b.w	8008c88 <_malloc_r>
 8008c3e:	bf00      	nop
 8008c40:	20000030 	.word	0x20000030

08008c44 <sbrk_aligned>:
 8008c44:	b570      	push	{r4, r5, r6, lr}
 8008c46:	4e0f      	ldr	r6, [pc, #60]	@ (8008c84 <sbrk_aligned+0x40>)
 8008c48:	460c      	mov	r4, r1
 8008c4a:	6831      	ldr	r1, [r6, #0]
 8008c4c:	4605      	mov	r5, r0
 8008c4e:	b911      	cbnz	r1, 8008c56 <sbrk_aligned+0x12>
 8008c50:	f000 fc62 	bl	8009518 <_sbrk_r>
 8008c54:	6030      	str	r0, [r6, #0]
 8008c56:	4621      	mov	r1, r4
 8008c58:	4628      	mov	r0, r5
 8008c5a:	f000 fc5d 	bl	8009518 <_sbrk_r>
 8008c5e:	1c43      	adds	r3, r0, #1
 8008c60:	d103      	bne.n	8008c6a <sbrk_aligned+0x26>
 8008c62:	f04f 34ff 	mov.w	r4, #4294967295
 8008c66:	4620      	mov	r0, r4
 8008c68:	bd70      	pop	{r4, r5, r6, pc}
 8008c6a:	1cc4      	adds	r4, r0, #3
 8008c6c:	f024 0403 	bic.w	r4, r4, #3
 8008c70:	42a0      	cmp	r0, r4
 8008c72:	d0f8      	beq.n	8008c66 <sbrk_aligned+0x22>
 8008c74:	1a21      	subs	r1, r4, r0
 8008c76:	4628      	mov	r0, r5
 8008c78:	f000 fc4e 	bl	8009518 <_sbrk_r>
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	d1f2      	bne.n	8008c66 <sbrk_aligned+0x22>
 8008c80:	e7ef      	b.n	8008c62 <sbrk_aligned+0x1e>
 8008c82:	bf00      	nop
 8008c84:	20004100 	.word	0x20004100

08008c88 <_malloc_r>:
 8008c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c8c:	1ccd      	adds	r5, r1, #3
 8008c8e:	f025 0503 	bic.w	r5, r5, #3
 8008c92:	3508      	adds	r5, #8
 8008c94:	2d0c      	cmp	r5, #12
 8008c96:	bf38      	it	cc
 8008c98:	250c      	movcc	r5, #12
 8008c9a:	2d00      	cmp	r5, #0
 8008c9c:	4606      	mov	r6, r0
 8008c9e:	db01      	blt.n	8008ca4 <_malloc_r+0x1c>
 8008ca0:	42a9      	cmp	r1, r5
 8008ca2:	d904      	bls.n	8008cae <_malloc_r+0x26>
 8008ca4:	230c      	movs	r3, #12
 8008ca6:	6033      	str	r3, [r6, #0]
 8008ca8:	2000      	movs	r0, #0
 8008caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d84 <_malloc_r+0xfc>
 8008cb2:	f000 f869 	bl	8008d88 <__malloc_lock>
 8008cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8008cba:	461c      	mov	r4, r3
 8008cbc:	bb44      	cbnz	r4, 8008d10 <_malloc_r+0x88>
 8008cbe:	4629      	mov	r1, r5
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	f7ff ffbf 	bl	8008c44 <sbrk_aligned>
 8008cc6:	1c43      	adds	r3, r0, #1
 8008cc8:	4604      	mov	r4, r0
 8008cca:	d158      	bne.n	8008d7e <_malloc_r+0xf6>
 8008ccc:	f8d8 4000 	ldr.w	r4, [r8]
 8008cd0:	4627      	mov	r7, r4
 8008cd2:	2f00      	cmp	r7, #0
 8008cd4:	d143      	bne.n	8008d5e <_malloc_r+0xd6>
 8008cd6:	2c00      	cmp	r4, #0
 8008cd8:	d04b      	beq.n	8008d72 <_malloc_r+0xea>
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	4639      	mov	r1, r7
 8008cde:	4630      	mov	r0, r6
 8008ce0:	eb04 0903 	add.w	r9, r4, r3
 8008ce4:	f000 fc18 	bl	8009518 <_sbrk_r>
 8008ce8:	4581      	cmp	r9, r0
 8008cea:	d142      	bne.n	8008d72 <_malloc_r+0xea>
 8008cec:	6821      	ldr	r1, [r4, #0]
 8008cee:	4630      	mov	r0, r6
 8008cf0:	1a6d      	subs	r5, r5, r1
 8008cf2:	4629      	mov	r1, r5
 8008cf4:	f7ff ffa6 	bl	8008c44 <sbrk_aligned>
 8008cf8:	3001      	adds	r0, #1
 8008cfa:	d03a      	beq.n	8008d72 <_malloc_r+0xea>
 8008cfc:	6823      	ldr	r3, [r4, #0]
 8008cfe:	442b      	add	r3, r5
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	f8d8 3000 	ldr.w	r3, [r8]
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	bb62      	cbnz	r2, 8008d64 <_malloc_r+0xdc>
 8008d0a:	f8c8 7000 	str.w	r7, [r8]
 8008d0e:	e00f      	b.n	8008d30 <_malloc_r+0xa8>
 8008d10:	6822      	ldr	r2, [r4, #0]
 8008d12:	1b52      	subs	r2, r2, r5
 8008d14:	d420      	bmi.n	8008d58 <_malloc_r+0xd0>
 8008d16:	2a0b      	cmp	r2, #11
 8008d18:	d917      	bls.n	8008d4a <_malloc_r+0xc2>
 8008d1a:	1961      	adds	r1, r4, r5
 8008d1c:	42a3      	cmp	r3, r4
 8008d1e:	6025      	str	r5, [r4, #0]
 8008d20:	bf18      	it	ne
 8008d22:	6059      	strne	r1, [r3, #4]
 8008d24:	6863      	ldr	r3, [r4, #4]
 8008d26:	bf08      	it	eq
 8008d28:	f8c8 1000 	streq.w	r1, [r8]
 8008d2c:	5162      	str	r2, [r4, r5]
 8008d2e:	604b      	str	r3, [r1, #4]
 8008d30:	4630      	mov	r0, r6
 8008d32:	f000 f82f 	bl	8008d94 <__malloc_unlock>
 8008d36:	f104 000b 	add.w	r0, r4, #11
 8008d3a:	1d23      	adds	r3, r4, #4
 8008d3c:	f020 0007 	bic.w	r0, r0, #7
 8008d40:	1ac2      	subs	r2, r0, r3
 8008d42:	bf1c      	itt	ne
 8008d44:	1a1b      	subne	r3, r3, r0
 8008d46:	50a3      	strne	r3, [r4, r2]
 8008d48:	e7af      	b.n	8008caa <_malloc_r+0x22>
 8008d4a:	6862      	ldr	r2, [r4, #4]
 8008d4c:	42a3      	cmp	r3, r4
 8008d4e:	bf0c      	ite	eq
 8008d50:	f8c8 2000 	streq.w	r2, [r8]
 8008d54:	605a      	strne	r2, [r3, #4]
 8008d56:	e7eb      	b.n	8008d30 <_malloc_r+0xa8>
 8008d58:	4623      	mov	r3, r4
 8008d5a:	6864      	ldr	r4, [r4, #4]
 8008d5c:	e7ae      	b.n	8008cbc <_malloc_r+0x34>
 8008d5e:	463c      	mov	r4, r7
 8008d60:	687f      	ldr	r7, [r7, #4]
 8008d62:	e7b6      	b.n	8008cd2 <_malloc_r+0x4a>
 8008d64:	461a      	mov	r2, r3
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	42a3      	cmp	r3, r4
 8008d6a:	d1fb      	bne.n	8008d64 <_malloc_r+0xdc>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	6053      	str	r3, [r2, #4]
 8008d70:	e7de      	b.n	8008d30 <_malloc_r+0xa8>
 8008d72:	230c      	movs	r3, #12
 8008d74:	4630      	mov	r0, r6
 8008d76:	6033      	str	r3, [r6, #0]
 8008d78:	f000 f80c 	bl	8008d94 <__malloc_unlock>
 8008d7c:	e794      	b.n	8008ca8 <_malloc_r+0x20>
 8008d7e:	6005      	str	r5, [r0, #0]
 8008d80:	e7d6      	b.n	8008d30 <_malloc_r+0xa8>
 8008d82:	bf00      	nop
 8008d84:	20004104 	.word	0x20004104

08008d88 <__malloc_lock>:
 8008d88:	4801      	ldr	r0, [pc, #4]	@ (8008d90 <__malloc_lock+0x8>)
 8008d8a:	f7ff bedc 	b.w	8008b46 <__retarget_lock_acquire_recursive>
 8008d8e:	bf00      	nop
 8008d90:	200040fc 	.word	0x200040fc

08008d94 <__malloc_unlock>:
 8008d94:	4801      	ldr	r0, [pc, #4]	@ (8008d9c <__malloc_unlock+0x8>)
 8008d96:	f7ff bed7 	b.w	8008b48 <__retarget_lock_release_recursive>
 8008d9a:	bf00      	nop
 8008d9c:	200040fc 	.word	0x200040fc

08008da0 <__ssputs_r>:
 8008da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da4:	461f      	mov	r7, r3
 8008da6:	688e      	ldr	r6, [r1, #8]
 8008da8:	4682      	mov	sl, r0
 8008daa:	42be      	cmp	r6, r7
 8008dac:	460c      	mov	r4, r1
 8008dae:	4690      	mov	r8, r2
 8008db0:	680b      	ldr	r3, [r1, #0]
 8008db2:	d82d      	bhi.n	8008e10 <__ssputs_r+0x70>
 8008db4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008db8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008dbc:	d026      	beq.n	8008e0c <__ssputs_r+0x6c>
 8008dbe:	6965      	ldr	r5, [r4, #20]
 8008dc0:	6909      	ldr	r1, [r1, #16]
 8008dc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dc6:	eba3 0901 	sub.w	r9, r3, r1
 8008dca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dce:	1c7b      	adds	r3, r7, #1
 8008dd0:	444b      	add	r3, r9
 8008dd2:	106d      	asrs	r5, r5, #1
 8008dd4:	429d      	cmp	r5, r3
 8008dd6:	bf38      	it	cc
 8008dd8:	461d      	movcc	r5, r3
 8008dda:	0553      	lsls	r3, r2, #21
 8008ddc:	d527      	bpl.n	8008e2e <__ssputs_r+0x8e>
 8008dde:	4629      	mov	r1, r5
 8008de0:	f7ff ff52 	bl	8008c88 <_malloc_r>
 8008de4:	4606      	mov	r6, r0
 8008de6:	b360      	cbz	r0, 8008e42 <__ssputs_r+0xa2>
 8008de8:	464a      	mov	r2, r9
 8008dea:	6921      	ldr	r1, [r4, #16]
 8008dec:	f7ff fead 	bl	8008b4a <memcpy>
 8008df0:	89a3      	ldrh	r3, [r4, #12]
 8008df2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dfa:	81a3      	strh	r3, [r4, #12]
 8008dfc:	6126      	str	r6, [r4, #16]
 8008dfe:	444e      	add	r6, r9
 8008e00:	6026      	str	r6, [r4, #0]
 8008e02:	463e      	mov	r6, r7
 8008e04:	6165      	str	r5, [r4, #20]
 8008e06:	eba5 0509 	sub.w	r5, r5, r9
 8008e0a:	60a5      	str	r5, [r4, #8]
 8008e0c:	42be      	cmp	r6, r7
 8008e0e:	d900      	bls.n	8008e12 <__ssputs_r+0x72>
 8008e10:	463e      	mov	r6, r7
 8008e12:	4632      	mov	r2, r6
 8008e14:	4641      	mov	r1, r8
 8008e16:	6820      	ldr	r0, [r4, #0]
 8008e18:	f000 fb64 	bl	80094e4 <memmove>
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	68a3      	ldr	r3, [r4, #8]
 8008e20:	1b9b      	subs	r3, r3, r6
 8008e22:	60a3      	str	r3, [r4, #8]
 8008e24:	6823      	ldr	r3, [r4, #0]
 8008e26:	4433      	add	r3, r6
 8008e28:	6023      	str	r3, [r4, #0]
 8008e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e2e:	462a      	mov	r2, r5
 8008e30:	f000 fb97 	bl	8009562 <_realloc_r>
 8008e34:	4606      	mov	r6, r0
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d1e0      	bne.n	8008dfc <__ssputs_r+0x5c>
 8008e3a:	4650      	mov	r0, sl
 8008e3c:	6921      	ldr	r1, [r4, #16]
 8008e3e:	f7ff feb1 	bl	8008ba4 <_free_r>
 8008e42:	230c      	movs	r3, #12
 8008e44:	f8ca 3000 	str.w	r3, [sl]
 8008e48:	89a3      	ldrh	r3, [r4, #12]
 8008e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e52:	81a3      	strh	r3, [r4, #12]
 8008e54:	e7e9      	b.n	8008e2a <__ssputs_r+0x8a>
	...

08008e58 <_svfiprintf_r>:
 8008e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e5c:	4698      	mov	r8, r3
 8008e5e:	898b      	ldrh	r3, [r1, #12]
 8008e60:	4607      	mov	r7, r0
 8008e62:	061b      	lsls	r3, r3, #24
 8008e64:	460d      	mov	r5, r1
 8008e66:	4614      	mov	r4, r2
 8008e68:	b09d      	sub	sp, #116	@ 0x74
 8008e6a:	d510      	bpl.n	8008e8e <_svfiprintf_r+0x36>
 8008e6c:	690b      	ldr	r3, [r1, #16]
 8008e6e:	b973      	cbnz	r3, 8008e8e <_svfiprintf_r+0x36>
 8008e70:	2140      	movs	r1, #64	@ 0x40
 8008e72:	f7ff ff09 	bl	8008c88 <_malloc_r>
 8008e76:	6028      	str	r0, [r5, #0]
 8008e78:	6128      	str	r0, [r5, #16]
 8008e7a:	b930      	cbnz	r0, 8008e8a <_svfiprintf_r+0x32>
 8008e7c:	230c      	movs	r3, #12
 8008e7e:	603b      	str	r3, [r7, #0]
 8008e80:	f04f 30ff 	mov.w	r0, #4294967295
 8008e84:	b01d      	add	sp, #116	@ 0x74
 8008e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e8a:	2340      	movs	r3, #64	@ 0x40
 8008e8c:	616b      	str	r3, [r5, #20]
 8008e8e:	2300      	movs	r3, #0
 8008e90:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e92:	2320      	movs	r3, #32
 8008e94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e98:	2330      	movs	r3, #48	@ 0x30
 8008e9a:	f04f 0901 	mov.w	r9, #1
 8008e9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ea2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800903c <_svfiprintf_r+0x1e4>
 8008ea6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008eaa:	4623      	mov	r3, r4
 8008eac:	469a      	mov	sl, r3
 8008eae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eb2:	b10a      	cbz	r2, 8008eb8 <_svfiprintf_r+0x60>
 8008eb4:	2a25      	cmp	r2, #37	@ 0x25
 8008eb6:	d1f9      	bne.n	8008eac <_svfiprintf_r+0x54>
 8008eb8:	ebba 0b04 	subs.w	fp, sl, r4
 8008ebc:	d00b      	beq.n	8008ed6 <_svfiprintf_r+0x7e>
 8008ebe:	465b      	mov	r3, fp
 8008ec0:	4622      	mov	r2, r4
 8008ec2:	4629      	mov	r1, r5
 8008ec4:	4638      	mov	r0, r7
 8008ec6:	f7ff ff6b 	bl	8008da0 <__ssputs_r>
 8008eca:	3001      	adds	r0, #1
 8008ecc:	f000 80a7 	beq.w	800901e <_svfiprintf_r+0x1c6>
 8008ed0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ed2:	445a      	add	r2, fp
 8008ed4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f000 809f 	beq.w	800901e <_svfiprintf_r+0x1c6>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ee6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008eea:	f10a 0a01 	add.w	sl, sl, #1
 8008eee:	9304      	str	r3, [sp, #16]
 8008ef0:	9307      	str	r3, [sp, #28]
 8008ef2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ef6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ef8:	4654      	mov	r4, sl
 8008efa:	2205      	movs	r2, #5
 8008efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f00:	484e      	ldr	r0, [pc, #312]	@ (800903c <_svfiprintf_r+0x1e4>)
 8008f02:	f000 fb19 	bl	8009538 <memchr>
 8008f06:	9a04      	ldr	r2, [sp, #16]
 8008f08:	b9d8      	cbnz	r0, 8008f42 <_svfiprintf_r+0xea>
 8008f0a:	06d0      	lsls	r0, r2, #27
 8008f0c:	bf44      	itt	mi
 8008f0e:	2320      	movmi	r3, #32
 8008f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f14:	0711      	lsls	r1, r2, #28
 8008f16:	bf44      	itt	mi
 8008f18:	232b      	movmi	r3, #43	@ 0x2b
 8008f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f22:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f24:	d015      	beq.n	8008f52 <_svfiprintf_r+0xfa>
 8008f26:	4654      	mov	r4, sl
 8008f28:	2000      	movs	r0, #0
 8008f2a:	f04f 0c0a 	mov.w	ip, #10
 8008f2e:	9a07      	ldr	r2, [sp, #28]
 8008f30:	4621      	mov	r1, r4
 8008f32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f36:	3b30      	subs	r3, #48	@ 0x30
 8008f38:	2b09      	cmp	r3, #9
 8008f3a:	d94b      	bls.n	8008fd4 <_svfiprintf_r+0x17c>
 8008f3c:	b1b0      	cbz	r0, 8008f6c <_svfiprintf_r+0x114>
 8008f3e:	9207      	str	r2, [sp, #28]
 8008f40:	e014      	b.n	8008f6c <_svfiprintf_r+0x114>
 8008f42:	eba0 0308 	sub.w	r3, r0, r8
 8008f46:	fa09 f303 	lsl.w	r3, r9, r3
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	46a2      	mov	sl, r4
 8008f4e:	9304      	str	r3, [sp, #16]
 8008f50:	e7d2      	b.n	8008ef8 <_svfiprintf_r+0xa0>
 8008f52:	9b03      	ldr	r3, [sp, #12]
 8008f54:	1d19      	adds	r1, r3, #4
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	9103      	str	r1, [sp, #12]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	bfbb      	ittet	lt
 8008f5e:	425b      	neglt	r3, r3
 8008f60:	f042 0202 	orrlt.w	r2, r2, #2
 8008f64:	9307      	strge	r3, [sp, #28]
 8008f66:	9307      	strlt	r3, [sp, #28]
 8008f68:	bfb8      	it	lt
 8008f6a:	9204      	strlt	r2, [sp, #16]
 8008f6c:	7823      	ldrb	r3, [r4, #0]
 8008f6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f70:	d10a      	bne.n	8008f88 <_svfiprintf_r+0x130>
 8008f72:	7863      	ldrb	r3, [r4, #1]
 8008f74:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f76:	d132      	bne.n	8008fde <_svfiprintf_r+0x186>
 8008f78:	9b03      	ldr	r3, [sp, #12]
 8008f7a:	3402      	adds	r4, #2
 8008f7c:	1d1a      	adds	r2, r3, #4
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	9203      	str	r2, [sp, #12]
 8008f82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f86:	9305      	str	r3, [sp, #20]
 8008f88:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009040 <_svfiprintf_r+0x1e8>
 8008f8c:	2203      	movs	r2, #3
 8008f8e:	4650      	mov	r0, sl
 8008f90:	7821      	ldrb	r1, [r4, #0]
 8008f92:	f000 fad1 	bl	8009538 <memchr>
 8008f96:	b138      	cbz	r0, 8008fa8 <_svfiprintf_r+0x150>
 8008f98:	2240      	movs	r2, #64	@ 0x40
 8008f9a:	9b04      	ldr	r3, [sp, #16]
 8008f9c:	eba0 000a 	sub.w	r0, r0, sl
 8008fa0:	4082      	lsls	r2, r0
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	3401      	adds	r4, #1
 8008fa6:	9304      	str	r3, [sp, #16]
 8008fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fac:	2206      	movs	r2, #6
 8008fae:	4825      	ldr	r0, [pc, #148]	@ (8009044 <_svfiprintf_r+0x1ec>)
 8008fb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fb4:	f000 fac0 	bl	8009538 <memchr>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	d036      	beq.n	800902a <_svfiprintf_r+0x1d2>
 8008fbc:	4b22      	ldr	r3, [pc, #136]	@ (8009048 <_svfiprintf_r+0x1f0>)
 8008fbe:	bb1b      	cbnz	r3, 8009008 <_svfiprintf_r+0x1b0>
 8008fc0:	9b03      	ldr	r3, [sp, #12]
 8008fc2:	3307      	adds	r3, #7
 8008fc4:	f023 0307 	bic.w	r3, r3, #7
 8008fc8:	3308      	adds	r3, #8
 8008fca:	9303      	str	r3, [sp, #12]
 8008fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fce:	4433      	add	r3, r6
 8008fd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fd2:	e76a      	b.n	8008eaa <_svfiprintf_r+0x52>
 8008fd4:	460c      	mov	r4, r1
 8008fd6:	2001      	movs	r0, #1
 8008fd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fdc:	e7a8      	b.n	8008f30 <_svfiprintf_r+0xd8>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	f04f 0c0a 	mov.w	ip, #10
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	3401      	adds	r4, #1
 8008fe8:	9305      	str	r3, [sp, #20]
 8008fea:	4620      	mov	r0, r4
 8008fec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ff0:	3a30      	subs	r2, #48	@ 0x30
 8008ff2:	2a09      	cmp	r2, #9
 8008ff4:	d903      	bls.n	8008ffe <_svfiprintf_r+0x1a6>
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d0c6      	beq.n	8008f88 <_svfiprintf_r+0x130>
 8008ffa:	9105      	str	r1, [sp, #20]
 8008ffc:	e7c4      	b.n	8008f88 <_svfiprintf_r+0x130>
 8008ffe:	4604      	mov	r4, r0
 8009000:	2301      	movs	r3, #1
 8009002:	fb0c 2101 	mla	r1, ip, r1, r2
 8009006:	e7f0      	b.n	8008fea <_svfiprintf_r+0x192>
 8009008:	ab03      	add	r3, sp, #12
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	462a      	mov	r2, r5
 800900e:	4638      	mov	r0, r7
 8009010:	4b0e      	ldr	r3, [pc, #56]	@ (800904c <_svfiprintf_r+0x1f4>)
 8009012:	a904      	add	r1, sp, #16
 8009014:	f3af 8000 	nop.w
 8009018:	1c42      	adds	r2, r0, #1
 800901a:	4606      	mov	r6, r0
 800901c:	d1d6      	bne.n	8008fcc <_svfiprintf_r+0x174>
 800901e:	89ab      	ldrh	r3, [r5, #12]
 8009020:	065b      	lsls	r3, r3, #25
 8009022:	f53f af2d 	bmi.w	8008e80 <_svfiprintf_r+0x28>
 8009026:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009028:	e72c      	b.n	8008e84 <_svfiprintf_r+0x2c>
 800902a:	ab03      	add	r3, sp, #12
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	462a      	mov	r2, r5
 8009030:	4638      	mov	r0, r7
 8009032:	4b06      	ldr	r3, [pc, #24]	@ (800904c <_svfiprintf_r+0x1f4>)
 8009034:	a904      	add	r1, sp, #16
 8009036:	f000 f87d 	bl	8009134 <_printf_i>
 800903a:	e7ed      	b.n	8009018 <_svfiprintf_r+0x1c0>
 800903c:	0800b61d 	.word	0x0800b61d
 8009040:	0800b623 	.word	0x0800b623
 8009044:	0800b627 	.word	0x0800b627
 8009048:	00000000 	.word	0x00000000
 800904c:	08008da1 	.word	0x08008da1

08009050 <_printf_common>:
 8009050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009054:	4616      	mov	r6, r2
 8009056:	4698      	mov	r8, r3
 8009058:	688a      	ldr	r2, [r1, #8]
 800905a:	690b      	ldr	r3, [r1, #16]
 800905c:	4607      	mov	r7, r0
 800905e:	4293      	cmp	r3, r2
 8009060:	bfb8      	it	lt
 8009062:	4613      	movlt	r3, r2
 8009064:	6033      	str	r3, [r6, #0]
 8009066:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800906a:	460c      	mov	r4, r1
 800906c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009070:	b10a      	cbz	r2, 8009076 <_printf_common+0x26>
 8009072:	3301      	adds	r3, #1
 8009074:	6033      	str	r3, [r6, #0]
 8009076:	6823      	ldr	r3, [r4, #0]
 8009078:	0699      	lsls	r1, r3, #26
 800907a:	bf42      	ittt	mi
 800907c:	6833      	ldrmi	r3, [r6, #0]
 800907e:	3302      	addmi	r3, #2
 8009080:	6033      	strmi	r3, [r6, #0]
 8009082:	6825      	ldr	r5, [r4, #0]
 8009084:	f015 0506 	ands.w	r5, r5, #6
 8009088:	d106      	bne.n	8009098 <_printf_common+0x48>
 800908a:	f104 0a19 	add.w	sl, r4, #25
 800908e:	68e3      	ldr	r3, [r4, #12]
 8009090:	6832      	ldr	r2, [r6, #0]
 8009092:	1a9b      	subs	r3, r3, r2
 8009094:	42ab      	cmp	r3, r5
 8009096:	dc2b      	bgt.n	80090f0 <_printf_common+0xa0>
 8009098:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800909c:	6822      	ldr	r2, [r4, #0]
 800909e:	3b00      	subs	r3, #0
 80090a0:	bf18      	it	ne
 80090a2:	2301      	movne	r3, #1
 80090a4:	0692      	lsls	r2, r2, #26
 80090a6:	d430      	bmi.n	800910a <_printf_common+0xba>
 80090a8:	4641      	mov	r1, r8
 80090aa:	4638      	mov	r0, r7
 80090ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80090b0:	47c8      	blx	r9
 80090b2:	3001      	adds	r0, #1
 80090b4:	d023      	beq.n	80090fe <_printf_common+0xae>
 80090b6:	6823      	ldr	r3, [r4, #0]
 80090b8:	6922      	ldr	r2, [r4, #16]
 80090ba:	f003 0306 	and.w	r3, r3, #6
 80090be:	2b04      	cmp	r3, #4
 80090c0:	bf14      	ite	ne
 80090c2:	2500      	movne	r5, #0
 80090c4:	6833      	ldreq	r3, [r6, #0]
 80090c6:	f04f 0600 	mov.w	r6, #0
 80090ca:	bf08      	it	eq
 80090cc:	68e5      	ldreq	r5, [r4, #12]
 80090ce:	f104 041a 	add.w	r4, r4, #26
 80090d2:	bf08      	it	eq
 80090d4:	1aed      	subeq	r5, r5, r3
 80090d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80090da:	bf08      	it	eq
 80090dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090e0:	4293      	cmp	r3, r2
 80090e2:	bfc4      	itt	gt
 80090e4:	1a9b      	subgt	r3, r3, r2
 80090e6:	18ed      	addgt	r5, r5, r3
 80090e8:	42b5      	cmp	r5, r6
 80090ea:	d11a      	bne.n	8009122 <_printf_common+0xd2>
 80090ec:	2000      	movs	r0, #0
 80090ee:	e008      	b.n	8009102 <_printf_common+0xb2>
 80090f0:	2301      	movs	r3, #1
 80090f2:	4652      	mov	r2, sl
 80090f4:	4641      	mov	r1, r8
 80090f6:	4638      	mov	r0, r7
 80090f8:	47c8      	blx	r9
 80090fa:	3001      	adds	r0, #1
 80090fc:	d103      	bne.n	8009106 <_printf_common+0xb6>
 80090fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009106:	3501      	adds	r5, #1
 8009108:	e7c1      	b.n	800908e <_printf_common+0x3e>
 800910a:	2030      	movs	r0, #48	@ 0x30
 800910c:	18e1      	adds	r1, r4, r3
 800910e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009112:	1c5a      	adds	r2, r3, #1
 8009114:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009118:	4422      	add	r2, r4
 800911a:	3302      	adds	r3, #2
 800911c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009120:	e7c2      	b.n	80090a8 <_printf_common+0x58>
 8009122:	2301      	movs	r3, #1
 8009124:	4622      	mov	r2, r4
 8009126:	4641      	mov	r1, r8
 8009128:	4638      	mov	r0, r7
 800912a:	47c8      	blx	r9
 800912c:	3001      	adds	r0, #1
 800912e:	d0e6      	beq.n	80090fe <_printf_common+0xae>
 8009130:	3601      	adds	r6, #1
 8009132:	e7d9      	b.n	80090e8 <_printf_common+0x98>

08009134 <_printf_i>:
 8009134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009138:	7e0f      	ldrb	r7, [r1, #24]
 800913a:	4691      	mov	r9, r2
 800913c:	2f78      	cmp	r7, #120	@ 0x78
 800913e:	4680      	mov	r8, r0
 8009140:	460c      	mov	r4, r1
 8009142:	469a      	mov	sl, r3
 8009144:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009146:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800914a:	d807      	bhi.n	800915c <_printf_i+0x28>
 800914c:	2f62      	cmp	r7, #98	@ 0x62
 800914e:	d80a      	bhi.n	8009166 <_printf_i+0x32>
 8009150:	2f00      	cmp	r7, #0
 8009152:	f000 80d1 	beq.w	80092f8 <_printf_i+0x1c4>
 8009156:	2f58      	cmp	r7, #88	@ 0x58
 8009158:	f000 80b8 	beq.w	80092cc <_printf_i+0x198>
 800915c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009160:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009164:	e03a      	b.n	80091dc <_printf_i+0xa8>
 8009166:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800916a:	2b15      	cmp	r3, #21
 800916c:	d8f6      	bhi.n	800915c <_printf_i+0x28>
 800916e:	a101      	add	r1, pc, #4	@ (adr r1, 8009174 <_printf_i+0x40>)
 8009170:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009174:	080091cd 	.word	0x080091cd
 8009178:	080091e1 	.word	0x080091e1
 800917c:	0800915d 	.word	0x0800915d
 8009180:	0800915d 	.word	0x0800915d
 8009184:	0800915d 	.word	0x0800915d
 8009188:	0800915d 	.word	0x0800915d
 800918c:	080091e1 	.word	0x080091e1
 8009190:	0800915d 	.word	0x0800915d
 8009194:	0800915d 	.word	0x0800915d
 8009198:	0800915d 	.word	0x0800915d
 800919c:	0800915d 	.word	0x0800915d
 80091a0:	080092df 	.word	0x080092df
 80091a4:	0800920b 	.word	0x0800920b
 80091a8:	08009299 	.word	0x08009299
 80091ac:	0800915d 	.word	0x0800915d
 80091b0:	0800915d 	.word	0x0800915d
 80091b4:	08009301 	.word	0x08009301
 80091b8:	0800915d 	.word	0x0800915d
 80091bc:	0800920b 	.word	0x0800920b
 80091c0:	0800915d 	.word	0x0800915d
 80091c4:	0800915d 	.word	0x0800915d
 80091c8:	080092a1 	.word	0x080092a1
 80091cc:	6833      	ldr	r3, [r6, #0]
 80091ce:	1d1a      	adds	r2, r3, #4
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	6032      	str	r2, [r6, #0]
 80091d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80091dc:	2301      	movs	r3, #1
 80091de:	e09c      	b.n	800931a <_printf_i+0x1e6>
 80091e0:	6833      	ldr	r3, [r6, #0]
 80091e2:	6820      	ldr	r0, [r4, #0]
 80091e4:	1d19      	adds	r1, r3, #4
 80091e6:	6031      	str	r1, [r6, #0]
 80091e8:	0606      	lsls	r6, r0, #24
 80091ea:	d501      	bpl.n	80091f0 <_printf_i+0xbc>
 80091ec:	681d      	ldr	r5, [r3, #0]
 80091ee:	e003      	b.n	80091f8 <_printf_i+0xc4>
 80091f0:	0645      	lsls	r5, r0, #25
 80091f2:	d5fb      	bpl.n	80091ec <_printf_i+0xb8>
 80091f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80091f8:	2d00      	cmp	r5, #0
 80091fa:	da03      	bge.n	8009204 <_printf_i+0xd0>
 80091fc:	232d      	movs	r3, #45	@ 0x2d
 80091fe:	426d      	negs	r5, r5
 8009200:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009204:	230a      	movs	r3, #10
 8009206:	4858      	ldr	r0, [pc, #352]	@ (8009368 <_printf_i+0x234>)
 8009208:	e011      	b.n	800922e <_printf_i+0xfa>
 800920a:	6821      	ldr	r1, [r4, #0]
 800920c:	6833      	ldr	r3, [r6, #0]
 800920e:	0608      	lsls	r0, r1, #24
 8009210:	f853 5b04 	ldr.w	r5, [r3], #4
 8009214:	d402      	bmi.n	800921c <_printf_i+0xe8>
 8009216:	0649      	lsls	r1, r1, #25
 8009218:	bf48      	it	mi
 800921a:	b2ad      	uxthmi	r5, r5
 800921c:	2f6f      	cmp	r7, #111	@ 0x6f
 800921e:	6033      	str	r3, [r6, #0]
 8009220:	bf14      	ite	ne
 8009222:	230a      	movne	r3, #10
 8009224:	2308      	moveq	r3, #8
 8009226:	4850      	ldr	r0, [pc, #320]	@ (8009368 <_printf_i+0x234>)
 8009228:	2100      	movs	r1, #0
 800922a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800922e:	6866      	ldr	r6, [r4, #4]
 8009230:	2e00      	cmp	r6, #0
 8009232:	60a6      	str	r6, [r4, #8]
 8009234:	db05      	blt.n	8009242 <_printf_i+0x10e>
 8009236:	6821      	ldr	r1, [r4, #0]
 8009238:	432e      	orrs	r6, r5
 800923a:	f021 0104 	bic.w	r1, r1, #4
 800923e:	6021      	str	r1, [r4, #0]
 8009240:	d04b      	beq.n	80092da <_printf_i+0x1a6>
 8009242:	4616      	mov	r6, r2
 8009244:	fbb5 f1f3 	udiv	r1, r5, r3
 8009248:	fb03 5711 	mls	r7, r3, r1, r5
 800924c:	5dc7      	ldrb	r7, [r0, r7]
 800924e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009252:	462f      	mov	r7, r5
 8009254:	42bb      	cmp	r3, r7
 8009256:	460d      	mov	r5, r1
 8009258:	d9f4      	bls.n	8009244 <_printf_i+0x110>
 800925a:	2b08      	cmp	r3, #8
 800925c:	d10b      	bne.n	8009276 <_printf_i+0x142>
 800925e:	6823      	ldr	r3, [r4, #0]
 8009260:	07df      	lsls	r7, r3, #31
 8009262:	d508      	bpl.n	8009276 <_printf_i+0x142>
 8009264:	6923      	ldr	r3, [r4, #16]
 8009266:	6861      	ldr	r1, [r4, #4]
 8009268:	4299      	cmp	r1, r3
 800926a:	bfde      	ittt	le
 800926c:	2330      	movle	r3, #48	@ 0x30
 800926e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009272:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009276:	1b92      	subs	r2, r2, r6
 8009278:	6122      	str	r2, [r4, #16]
 800927a:	464b      	mov	r3, r9
 800927c:	4621      	mov	r1, r4
 800927e:	4640      	mov	r0, r8
 8009280:	f8cd a000 	str.w	sl, [sp]
 8009284:	aa03      	add	r2, sp, #12
 8009286:	f7ff fee3 	bl	8009050 <_printf_common>
 800928a:	3001      	adds	r0, #1
 800928c:	d14a      	bne.n	8009324 <_printf_i+0x1f0>
 800928e:	f04f 30ff 	mov.w	r0, #4294967295
 8009292:	b004      	add	sp, #16
 8009294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009298:	6823      	ldr	r3, [r4, #0]
 800929a:	f043 0320 	orr.w	r3, r3, #32
 800929e:	6023      	str	r3, [r4, #0]
 80092a0:	2778      	movs	r7, #120	@ 0x78
 80092a2:	4832      	ldr	r0, [pc, #200]	@ (800936c <_printf_i+0x238>)
 80092a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80092a8:	6823      	ldr	r3, [r4, #0]
 80092aa:	6831      	ldr	r1, [r6, #0]
 80092ac:	061f      	lsls	r7, r3, #24
 80092ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80092b2:	d402      	bmi.n	80092ba <_printf_i+0x186>
 80092b4:	065f      	lsls	r7, r3, #25
 80092b6:	bf48      	it	mi
 80092b8:	b2ad      	uxthmi	r5, r5
 80092ba:	6031      	str	r1, [r6, #0]
 80092bc:	07d9      	lsls	r1, r3, #31
 80092be:	bf44      	itt	mi
 80092c0:	f043 0320 	orrmi.w	r3, r3, #32
 80092c4:	6023      	strmi	r3, [r4, #0]
 80092c6:	b11d      	cbz	r5, 80092d0 <_printf_i+0x19c>
 80092c8:	2310      	movs	r3, #16
 80092ca:	e7ad      	b.n	8009228 <_printf_i+0xf4>
 80092cc:	4826      	ldr	r0, [pc, #152]	@ (8009368 <_printf_i+0x234>)
 80092ce:	e7e9      	b.n	80092a4 <_printf_i+0x170>
 80092d0:	6823      	ldr	r3, [r4, #0]
 80092d2:	f023 0320 	bic.w	r3, r3, #32
 80092d6:	6023      	str	r3, [r4, #0]
 80092d8:	e7f6      	b.n	80092c8 <_printf_i+0x194>
 80092da:	4616      	mov	r6, r2
 80092dc:	e7bd      	b.n	800925a <_printf_i+0x126>
 80092de:	6833      	ldr	r3, [r6, #0]
 80092e0:	6825      	ldr	r5, [r4, #0]
 80092e2:	1d18      	adds	r0, r3, #4
 80092e4:	6961      	ldr	r1, [r4, #20]
 80092e6:	6030      	str	r0, [r6, #0]
 80092e8:	062e      	lsls	r6, r5, #24
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	d501      	bpl.n	80092f2 <_printf_i+0x1be>
 80092ee:	6019      	str	r1, [r3, #0]
 80092f0:	e002      	b.n	80092f8 <_printf_i+0x1c4>
 80092f2:	0668      	lsls	r0, r5, #25
 80092f4:	d5fb      	bpl.n	80092ee <_printf_i+0x1ba>
 80092f6:	8019      	strh	r1, [r3, #0]
 80092f8:	2300      	movs	r3, #0
 80092fa:	4616      	mov	r6, r2
 80092fc:	6123      	str	r3, [r4, #16]
 80092fe:	e7bc      	b.n	800927a <_printf_i+0x146>
 8009300:	6833      	ldr	r3, [r6, #0]
 8009302:	2100      	movs	r1, #0
 8009304:	1d1a      	adds	r2, r3, #4
 8009306:	6032      	str	r2, [r6, #0]
 8009308:	681e      	ldr	r6, [r3, #0]
 800930a:	6862      	ldr	r2, [r4, #4]
 800930c:	4630      	mov	r0, r6
 800930e:	f000 f913 	bl	8009538 <memchr>
 8009312:	b108      	cbz	r0, 8009318 <_printf_i+0x1e4>
 8009314:	1b80      	subs	r0, r0, r6
 8009316:	6060      	str	r0, [r4, #4]
 8009318:	6863      	ldr	r3, [r4, #4]
 800931a:	6123      	str	r3, [r4, #16]
 800931c:	2300      	movs	r3, #0
 800931e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009322:	e7aa      	b.n	800927a <_printf_i+0x146>
 8009324:	4632      	mov	r2, r6
 8009326:	4649      	mov	r1, r9
 8009328:	4640      	mov	r0, r8
 800932a:	6923      	ldr	r3, [r4, #16]
 800932c:	47d0      	blx	sl
 800932e:	3001      	adds	r0, #1
 8009330:	d0ad      	beq.n	800928e <_printf_i+0x15a>
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	079b      	lsls	r3, r3, #30
 8009336:	d413      	bmi.n	8009360 <_printf_i+0x22c>
 8009338:	68e0      	ldr	r0, [r4, #12]
 800933a:	9b03      	ldr	r3, [sp, #12]
 800933c:	4298      	cmp	r0, r3
 800933e:	bfb8      	it	lt
 8009340:	4618      	movlt	r0, r3
 8009342:	e7a6      	b.n	8009292 <_printf_i+0x15e>
 8009344:	2301      	movs	r3, #1
 8009346:	4632      	mov	r2, r6
 8009348:	4649      	mov	r1, r9
 800934a:	4640      	mov	r0, r8
 800934c:	47d0      	blx	sl
 800934e:	3001      	adds	r0, #1
 8009350:	d09d      	beq.n	800928e <_printf_i+0x15a>
 8009352:	3501      	adds	r5, #1
 8009354:	68e3      	ldr	r3, [r4, #12]
 8009356:	9903      	ldr	r1, [sp, #12]
 8009358:	1a5b      	subs	r3, r3, r1
 800935a:	42ab      	cmp	r3, r5
 800935c:	dcf2      	bgt.n	8009344 <_printf_i+0x210>
 800935e:	e7eb      	b.n	8009338 <_printf_i+0x204>
 8009360:	2500      	movs	r5, #0
 8009362:	f104 0619 	add.w	r6, r4, #25
 8009366:	e7f5      	b.n	8009354 <_printf_i+0x220>
 8009368:	0800b62e 	.word	0x0800b62e
 800936c:	0800b63f 	.word	0x0800b63f

08009370 <__sflush_r>:
 8009370:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009376:	0716      	lsls	r6, r2, #28
 8009378:	4605      	mov	r5, r0
 800937a:	460c      	mov	r4, r1
 800937c:	d454      	bmi.n	8009428 <__sflush_r+0xb8>
 800937e:	684b      	ldr	r3, [r1, #4]
 8009380:	2b00      	cmp	r3, #0
 8009382:	dc02      	bgt.n	800938a <__sflush_r+0x1a>
 8009384:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009386:	2b00      	cmp	r3, #0
 8009388:	dd48      	ble.n	800941c <__sflush_r+0xac>
 800938a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800938c:	2e00      	cmp	r6, #0
 800938e:	d045      	beq.n	800941c <__sflush_r+0xac>
 8009390:	2300      	movs	r3, #0
 8009392:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009396:	682f      	ldr	r7, [r5, #0]
 8009398:	6a21      	ldr	r1, [r4, #32]
 800939a:	602b      	str	r3, [r5, #0]
 800939c:	d030      	beq.n	8009400 <__sflush_r+0x90>
 800939e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80093a0:	89a3      	ldrh	r3, [r4, #12]
 80093a2:	0759      	lsls	r1, r3, #29
 80093a4:	d505      	bpl.n	80093b2 <__sflush_r+0x42>
 80093a6:	6863      	ldr	r3, [r4, #4]
 80093a8:	1ad2      	subs	r2, r2, r3
 80093aa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80093ac:	b10b      	cbz	r3, 80093b2 <__sflush_r+0x42>
 80093ae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80093b0:	1ad2      	subs	r2, r2, r3
 80093b2:	2300      	movs	r3, #0
 80093b4:	4628      	mov	r0, r5
 80093b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093b8:	6a21      	ldr	r1, [r4, #32]
 80093ba:	47b0      	blx	r6
 80093bc:	1c43      	adds	r3, r0, #1
 80093be:	89a3      	ldrh	r3, [r4, #12]
 80093c0:	d106      	bne.n	80093d0 <__sflush_r+0x60>
 80093c2:	6829      	ldr	r1, [r5, #0]
 80093c4:	291d      	cmp	r1, #29
 80093c6:	d82b      	bhi.n	8009420 <__sflush_r+0xb0>
 80093c8:	4a28      	ldr	r2, [pc, #160]	@ (800946c <__sflush_r+0xfc>)
 80093ca:	40ca      	lsrs	r2, r1
 80093cc:	07d6      	lsls	r6, r2, #31
 80093ce:	d527      	bpl.n	8009420 <__sflush_r+0xb0>
 80093d0:	2200      	movs	r2, #0
 80093d2:	6062      	str	r2, [r4, #4]
 80093d4:	6922      	ldr	r2, [r4, #16]
 80093d6:	04d9      	lsls	r1, r3, #19
 80093d8:	6022      	str	r2, [r4, #0]
 80093da:	d504      	bpl.n	80093e6 <__sflush_r+0x76>
 80093dc:	1c42      	adds	r2, r0, #1
 80093de:	d101      	bne.n	80093e4 <__sflush_r+0x74>
 80093e0:	682b      	ldr	r3, [r5, #0]
 80093e2:	b903      	cbnz	r3, 80093e6 <__sflush_r+0x76>
 80093e4:	6560      	str	r0, [r4, #84]	@ 0x54
 80093e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093e8:	602f      	str	r7, [r5, #0]
 80093ea:	b1b9      	cbz	r1, 800941c <__sflush_r+0xac>
 80093ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093f0:	4299      	cmp	r1, r3
 80093f2:	d002      	beq.n	80093fa <__sflush_r+0x8a>
 80093f4:	4628      	mov	r0, r5
 80093f6:	f7ff fbd5 	bl	8008ba4 <_free_r>
 80093fa:	2300      	movs	r3, #0
 80093fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80093fe:	e00d      	b.n	800941c <__sflush_r+0xac>
 8009400:	2301      	movs	r3, #1
 8009402:	4628      	mov	r0, r5
 8009404:	47b0      	blx	r6
 8009406:	4602      	mov	r2, r0
 8009408:	1c50      	adds	r0, r2, #1
 800940a:	d1c9      	bne.n	80093a0 <__sflush_r+0x30>
 800940c:	682b      	ldr	r3, [r5, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d0c6      	beq.n	80093a0 <__sflush_r+0x30>
 8009412:	2b1d      	cmp	r3, #29
 8009414:	d001      	beq.n	800941a <__sflush_r+0xaa>
 8009416:	2b16      	cmp	r3, #22
 8009418:	d11d      	bne.n	8009456 <__sflush_r+0xe6>
 800941a:	602f      	str	r7, [r5, #0]
 800941c:	2000      	movs	r0, #0
 800941e:	e021      	b.n	8009464 <__sflush_r+0xf4>
 8009420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009424:	b21b      	sxth	r3, r3
 8009426:	e01a      	b.n	800945e <__sflush_r+0xee>
 8009428:	690f      	ldr	r7, [r1, #16]
 800942a:	2f00      	cmp	r7, #0
 800942c:	d0f6      	beq.n	800941c <__sflush_r+0xac>
 800942e:	0793      	lsls	r3, r2, #30
 8009430:	bf18      	it	ne
 8009432:	2300      	movne	r3, #0
 8009434:	680e      	ldr	r6, [r1, #0]
 8009436:	bf08      	it	eq
 8009438:	694b      	ldreq	r3, [r1, #20]
 800943a:	1bf6      	subs	r6, r6, r7
 800943c:	600f      	str	r7, [r1, #0]
 800943e:	608b      	str	r3, [r1, #8]
 8009440:	2e00      	cmp	r6, #0
 8009442:	ddeb      	ble.n	800941c <__sflush_r+0xac>
 8009444:	4633      	mov	r3, r6
 8009446:	463a      	mov	r2, r7
 8009448:	4628      	mov	r0, r5
 800944a:	6a21      	ldr	r1, [r4, #32]
 800944c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009450:	47e0      	blx	ip
 8009452:	2800      	cmp	r0, #0
 8009454:	dc07      	bgt.n	8009466 <__sflush_r+0xf6>
 8009456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800945a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800945e:	f04f 30ff 	mov.w	r0, #4294967295
 8009462:	81a3      	strh	r3, [r4, #12]
 8009464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009466:	4407      	add	r7, r0
 8009468:	1a36      	subs	r6, r6, r0
 800946a:	e7e9      	b.n	8009440 <__sflush_r+0xd0>
 800946c:	20400001 	.word	0x20400001

08009470 <_fflush_r>:
 8009470:	b538      	push	{r3, r4, r5, lr}
 8009472:	690b      	ldr	r3, [r1, #16]
 8009474:	4605      	mov	r5, r0
 8009476:	460c      	mov	r4, r1
 8009478:	b913      	cbnz	r3, 8009480 <_fflush_r+0x10>
 800947a:	2500      	movs	r5, #0
 800947c:	4628      	mov	r0, r5
 800947e:	bd38      	pop	{r3, r4, r5, pc}
 8009480:	b118      	cbz	r0, 800948a <_fflush_r+0x1a>
 8009482:	6a03      	ldr	r3, [r0, #32]
 8009484:	b90b      	cbnz	r3, 800948a <_fflush_r+0x1a>
 8009486:	f7ff fa37 	bl	80088f8 <__sinit>
 800948a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d0f3      	beq.n	800947a <_fflush_r+0xa>
 8009492:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009494:	07d0      	lsls	r0, r2, #31
 8009496:	d404      	bmi.n	80094a2 <_fflush_r+0x32>
 8009498:	0599      	lsls	r1, r3, #22
 800949a:	d402      	bmi.n	80094a2 <_fflush_r+0x32>
 800949c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800949e:	f7ff fb52 	bl	8008b46 <__retarget_lock_acquire_recursive>
 80094a2:	4628      	mov	r0, r5
 80094a4:	4621      	mov	r1, r4
 80094a6:	f7ff ff63 	bl	8009370 <__sflush_r>
 80094aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80094ac:	4605      	mov	r5, r0
 80094ae:	07da      	lsls	r2, r3, #31
 80094b0:	d4e4      	bmi.n	800947c <_fflush_r+0xc>
 80094b2:	89a3      	ldrh	r3, [r4, #12]
 80094b4:	059b      	lsls	r3, r3, #22
 80094b6:	d4e1      	bmi.n	800947c <_fflush_r+0xc>
 80094b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094ba:	f7ff fb45 	bl	8008b48 <__retarget_lock_release_recursive>
 80094be:	e7dd      	b.n	800947c <_fflush_r+0xc>

080094c0 <fiprintf>:
 80094c0:	b40e      	push	{r1, r2, r3}
 80094c2:	b503      	push	{r0, r1, lr}
 80094c4:	4601      	mov	r1, r0
 80094c6:	ab03      	add	r3, sp, #12
 80094c8:	4805      	ldr	r0, [pc, #20]	@ (80094e0 <fiprintf+0x20>)
 80094ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80094ce:	6800      	ldr	r0, [r0, #0]
 80094d0:	9301      	str	r3, [sp, #4]
 80094d2:	f000 f89b 	bl	800960c <_vfiprintf_r>
 80094d6:	b002      	add	sp, #8
 80094d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80094dc:	b003      	add	sp, #12
 80094de:	4770      	bx	lr
 80094e0:	20000030 	.word	0x20000030

080094e4 <memmove>:
 80094e4:	4288      	cmp	r0, r1
 80094e6:	b510      	push	{r4, lr}
 80094e8:	eb01 0402 	add.w	r4, r1, r2
 80094ec:	d902      	bls.n	80094f4 <memmove+0x10>
 80094ee:	4284      	cmp	r4, r0
 80094f0:	4623      	mov	r3, r4
 80094f2:	d807      	bhi.n	8009504 <memmove+0x20>
 80094f4:	1e43      	subs	r3, r0, #1
 80094f6:	42a1      	cmp	r1, r4
 80094f8:	d008      	beq.n	800950c <memmove+0x28>
 80094fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009502:	e7f8      	b.n	80094f6 <memmove+0x12>
 8009504:	4601      	mov	r1, r0
 8009506:	4402      	add	r2, r0
 8009508:	428a      	cmp	r2, r1
 800950a:	d100      	bne.n	800950e <memmove+0x2a>
 800950c:	bd10      	pop	{r4, pc}
 800950e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009512:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009516:	e7f7      	b.n	8009508 <memmove+0x24>

08009518 <_sbrk_r>:
 8009518:	b538      	push	{r3, r4, r5, lr}
 800951a:	2300      	movs	r3, #0
 800951c:	4d05      	ldr	r5, [pc, #20]	@ (8009534 <_sbrk_r+0x1c>)
 800951e:	4604      	mov	r4, r0
 8009520:	4608      	mov	r0, r1
 8009522:	602b      	str	r3, [r5, #0]
 8009524:	f7fc f9fa 	bl	800591c <_sbrk>
 8009528:	1c43      	adds	r3, r0, #1
 800952a:	d102      	bne.n	8009532 <_sbrk_r+0x1a>
 800952c:	682b      	ldr	r3, [r5, #0]
 800952e:	b103      	cbz	r3, 8009532 <_sbrk_r+0x1a>
 8009530:	6023      	str	r3, [r4, #0]
 8009532:	bd38      	pop	{r3, r4, r5, pc}
 8009534:	200040f8 	.word	0x200040f8

08009538 <memchr>:
 8009538:	4603      	mov	r3, r0
 800953a:	b510      	push	{r4, lr}
 800953c:	b2c9      	uxtb	r1, r1
 800953e:	4402      	add	r2, r0
 8009540:	4293      	cmp	r3, r2
 8009542:	4618      	mov	r0, r3
 8009544:	d101      	bne.n	800954a <memchr+0x12>
 8009546:	2000      	movs	r0, #0
 8009548:	e003      	b.n	8009552 <memchr+0x1a>
 800954a:	7804      	ldrb	r4, [r0, #0]
 800954c:	3301      	adds	r3, #1
 800954e:	428c      	cmp	r4, r1
 8009550:	d1f6      	bne.n	8009540 <memchr+0x8>
 8009552:	bd10      	pop	{r4, pc}

08009554 <abort>:
 8009554:	2006      	movs	r0, #6
 8009556:	b508      	push	{r3, lr}
 8009558:	f000 fa2c 	bl	80099b4 <raise>
 800955c:	2001      	movs	r0, #1
 800955e:	f7fc f968 	bl	8005832 <_exit>

08009562 <_realloc_r>:
 8009562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009566:	4607      	mov	r7, r0
 8009568:	4614      	mov	r4, r2
 800956a:	460d      	mov	r5, r1
 800956c:	b921      	cbnz	r1, 8009578 <_realloc_r+0x16>
 800956e:	4611      	mov	r1, r2
 8009570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009574:	f7ff bb88 	b.w	8008c88 <_malloc_r>
 8009578:	b92a      	cbnz	r2, 8009586 <_realloc_r+0x24>
 800957a:	f7ff fb13 	bl	8008ba4 <_free_r>
 800957e:	4625      	mov	r5, r4
 8009580:	4628      	mov	r0, r5
 8009582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009586:	f000 fa31 	bl	80099ec <_malloc_usable_size_r>
 800958a:	4284      	cmp	r4, r0
 800958c:	4606      	mov	r6, r0
 800958e:	d802      	bhi.n	8009596 <_realloc_r+0x34>
 8009590:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009594:	d8f4      	bhi.n	8009580 <_realloc_r+0x1e>
 8009596:	4621      	mov	r1, r4
 8009598:	4638      	mov	r0, r7
 800959a:	f7ff fb75 	bl	8008c88 <_malloc_r>
 800959e:	4680      	mov	r8, r0
 80095a0:	b908      	cbnz	r0, 80095a6 <_realloc_r+0x44>
 80095a2:	4645      	mov	r5, r8
 80095a4:	e7ec      	b.n	8009580 <_realloc_r+0x1e>
 80095a6:	42b4      	cmp	r4, r6
 80095a8:	4622      	mov	r2, r4
 80095aa:	4629      	mov	r1, r5
 80095ac:	bf28      	it	cs
 80095ae:	4632      	movcs	r2, r6
 80095b0:	f7ff facb 	bl	8008b4a <memcpy>
 80095b4:	4629      	mov	r1, r5
 80095b6:	4638      	mov	r0, r7
 80095b8:	f7ff faf4 	bl	8008ba4 <_free_r>
 80095bc:	e7f1      	b.n	80095a2 <_realloc_r+0x40>

080095be <__sfputc_r>:
 80095be:	6893      	ldr	r3, [r2, #8]
 80095c0:	b410      	push	{r4}
 80095c2:	3b01      	subs	r3, #1
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	6093      	str	r3, [r2, #8]
 80095c8:	da07      	bge.n	80095da <__sfputc_r+0x1c>
 80095ca:	6994      	ldr	r4, [r2, #24]
 80095cc:	42a3      	cmp	r3, r4
 80095ce:	db01      	blt.n	80095d4 <__sfputc_r+0x16>
 80095d0:	290a      	cmp	r1, #10
 80095d2:	d102      	bne.n	80095da <__sfputc_r+0x1c>
 80095d4:	bc10      	pop	{r4}
 80095d6:	f000 b931 	b.w	800983c <__swbuf_r>
 80095da:	6813      	ldr	r3, [r2, #0]
 80095dc:	1c58      	adds	r0, r3, #1
 80095de:	6010      	str	r0, [r2, #0]
 80095e0:	7019      	strb	r1, [r3, #0]
 80095e2:	4608      	mov	r0, r1
 80095e4:	bc10      	pop	{r4}
 80095e6:	4770      	bx	lr

080095e8 <__sfputs_r>:
 80095e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ea:	4606      	mov	r6, r0
 80095ec:	460f      	mov	r7, r1
 80095ee:	4614      	mov	r4, r2
 80095f0:	18d5      	adds	r5, r2, r3
 80095f2:	42ac      	cmp	r4, r5
 80095f4:	d101      	bne.n	80095fa <__sfputs_r+0x12>
 80095f6:	2000      	movs	r0, #0
 80095f8:	e007      	b.n	800960a <__sfputs_r+0x22>
 80095fa:	463a      	mov	r2, r7
 80095fc:	4630      	mov	r0, r6
 80095fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009602:	f7ff ffdc 	bl	80095be <__sfputc_r>
 8009606:	1c43      	adds	r3, r0, #1
 8009608:	d1f3      	bne.n	80095f2 <__sfputs_r+0xa>
 800960a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800960c <_vfiprintf_r>:
 800960c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009610:	460d      	mov	r5, r1
 8009612:	4614      	mov	r4, r2
 8009614:	4698      	mov	r8, r3
 8009616:	4606      	mov	r6, r0
 8009618:	b09d      	sub	sp, #116	@ 0x74
 800961a:	b118      	cbz	r0, 8009624 <_vfiprintf_r+0x18>
 800961c:	6a03      	ldr	r3, [r0, #32]
 800961e:	b90b      	cbnz	r3, 8009624 <_vfiprintf_r+0x18>
 8009620:	f7ff f96a 	bl	80088f8 <__sinit>
 8009624:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009626:	07d9      	lsls	r1, r3, #31
 8009628:	d405      	bmi.n	8009636 <_vfiprintf_r+0x2a>
 800962a:	89ab      	ldrh	r3, [r5, #12]
 800962c:	059a      	lsls	r2, r3, #22
 800962e:	d402      	bmi.n	8009636 <_vfiprintf_r+0x2a>
 8009630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009632:	f7ff fa88 	bl	8008b46 <__retarget_lock_acquire_recursive>
 8009636:	89ab      	ldrh	r3, [r5, #12]
 8009638:	071b      	lsls	r3, r3, #28
 800963a:	d501      	bpl.n	8009640 <_vfiprintf_r+0x34>
 800963c:	692b      	ldr	r3, [r5, #16]
 800963e:	b99b      	cbnz	r3, 8009668 <_vfiprintf_r+0x5c>
 8009640:	4629      	mov	r1, r5
 8009642:	4630      	mov	r0, r6
 8009644:	f000 f938 	bl	80098b8 <__swsetup_r>
 8009648:	b170      	cbz	r0, 8009668 <_vfiprintf_r+0x5c>
 800964a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800964c:	07dc      	lsls	r4, r3, #31
 800964e:	d504      	bpl.n	800965a <_vfiprintf_r+0x4e>
 8009650:	f04f 30ff 	mov.w	r0, #4294967295
 8009654:	b01d      	add	sp, #116	@ 0x74
 8009656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800965a:	89ab      	ldrh	r3, [r5, #12]
 800965c:	0598      	lsls	r0, r3, #22
 800965e:	d4f7      	bmi.n	8009650 <_vfiprintf_r+0x44>
 8009660:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009662:	f7ff fa71 	bl	8008b48 <__retarget_lock_release_recursive>
 8009666:	e7f3      	b.n	8009650 <_vfiprintf_r+0x44>
 8009668:	2300      	movs	r3, #0
 800966a:	9309      	str	r3, [sp, #36]	@ 0x24
 800966c:	2320      	movs	r3, #32
 800966e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009672:	2330      	movs	r3, #48	@ 0x30
 8009674:	f04f 0901 	mov.w	r9, #1
 8009678:	f8cd 800c 	str.w	r8, [sp, #12]
 800967c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009828 <_vfiprintf_r+0x21c>
 8009680:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009684:	4623      	mov	r3, r4
 8009686:	469a      	mov	sl, r3
 8009688:	f813 2b01 	ldrb.w	r2, [r3], #1
 800968c:	b10a      	cbz	r2, 8009692 <_vfiprintf_r+0x86>
 800968e:	2a25      	cmp	r2, #37	@ 0x25
 8009690:	d1f9      	bne.n	8009686 <_vfiprintf_r+0x7a>
 8009692:	ebba 0b04 	subs.w	fp, sl, r4
 8009696:	d00b      	beq.n	80096b0 <_vfiprintf_r+0xa4>
 8009698:	465b      	mov	r3, fp
 800969a:	4622      	mov	r2, r4
 800969c:	4629      	mov	r1, r5
 800969e:	4630      	mov	r0, r6
 80096a0:	f7ff ffa2 	bl	80095e8 <__sfputs_r>
 80096a4:	3001      	adds	r0, #1
 80096a6:	f000 80a7 	beq.w	80097f8 <_vfiprintf_r+0x1ec>
 80096aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096ac:	445a      	add	r2, fp
 80096ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80096b0:	f89a 3000 	ldrb.w	r3, [sl]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f000 809f 	beq.w	80097f8 <_vfiprintf_r+0x1ec>
 80096ba:	2300      	movs	r3, #0
 80096bc:	f04f 32ff 	mov.w	r2, #4294967295
 80096c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096c4:	f10a 0a01 	add.w	sl, sl, #1
 80096c8:	9304      	str	r3, [sp, #16]
 80096ca:	9307      	str	r3, [sp, #28]
 80096cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80096d2:	4654      	mov	r4, sl
 80096d4:	2205      	movs	r2, #5
 80096d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096da:	4853      	ldr	r0, [pc, #332]	@ (8009828 <_vfiprintf_r+0x21c>)
 80096dc:	f7ff ff2c 	bl	8009538 <memchr>
 80096e0:	9a04      	ldr	r2, [sp, #16]
 80096e2:	b9d8      	cbnz	r0, 800971c <_vfiprintf_r+0x110>
 80096e4:	06d1      	lsls	r1, r2, #27
 80096e6:	bf44      	itt	mi
 80096e8:	2320      	movmi	r3, #32
 80096ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096ee:	0713      	lsls	r3, r2, #28
 80096f0:	bf44      	itt	mi
 80096f2:	232b      	movmi	r3, #43	@ 0x2b
 80096f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096f8:	f89a 3000 	ldrb.w	r3, [sl]
 80096fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80096fe:	d015      	beq.n	800972c <_vfiprintf_r+0x120>
 8009700:	4654      	mov	r4, sl
 8009702:	2000      	movs	r0, #0
 8009704:	f04f 0c0a 	mov.w	ip, #10
 8009708:	9a07      	ldr	r2, [sp, #28]
 800970a:	4621      	mov	r1, r4
 800970c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009710:	3b30      	subs	r3, #48	@ 0x30
 8009712:	2b09      	cmp	r3, #9
 8009714:	d94b      	bls.n	80097ae <_vfiprintf_r+0x1a2>
 8009716:	b1b0      	cbz	r0, 8009746 <_vfiprintf_r+0x13a>
 8009718:	9207      	str	r2, [sp, #28]
 800971a:	e014      	b.n	8009746 <_vfiprintf_r+0x13a>
 800971c:	eba0 0308 	sub.w	r3, r0, r8
 8009720:	fa09 f303 	lsl.w	r3, r9, r3
 8009724:	4313      	orrs	r3, r2
 8009726:	46a2      	mov	sl, r4
 8009728:	9304      	str	r3, [sp, #16]
 800972a:	e7d2      	b.n	80096d2 <_vfiprintf_r+0xc6>
 800972c:	9b03      	ldr	r3, [sp, #12]
 800972e:	1d19      	adds	r1, r3, #4
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	9103      	str	r1, [sp, #12]
 8009734:	2b00      	cmp	r3, #0
 8009736:	bfbb      	ittet	lt
 8009738:	425b      	neglt	r3, r3
 800973a:	f042 0202 	orrlt.w	r2, r2, #2
 800973e:	9307      	strge	r3, [sp, #28]
 8009740:	9307      	strlt	r3, [sp, #28]
 8009742:	bfb8      	it	lt
 8009744:	9204      	strlt	r2, [sp, #16]
 8009746:	7823      	ldrb	r3, [r4, #0]
 8009748:	2b2e      	cmp	r3, #46	@ 0x2e
 800974a:	d10a      	bne.n	8009762 <_vfiprintf_r+0x156>
 800974c:	7863      	ldrb	r3, [r4, #1]
 800974e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009750:	d132      	bne.n	80097b8 <_vfiprintf_r+0x1ac>
 8009752:	9b03      	ldr	r3, [sp, #12]
 8009754:	3402      	adds	r4, #2
 8009756:	1d1a      	adds	r2, r3, #4
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	9203      	str	r2, [sp, #12]
 800975c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009760:	9305      	str	r3, [sp, #20]
 8009762:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800982c <_vfiprintf_r+0x220>
 8009766:	2203      	movs	r2, #3
 8009768:	4650      	mov	r0, sl
 800976a:	7821      	ldrb	r1, [r4, #0]
 800976c:	f7ff fee4 	bl	8009538 <memchr>
 8009770:	b138      	cbz	r0, 8009782 <_vfiprintf_r+0x176>
 8009772:	2240      	movs	r2, #64	@ 0x40
 8009774:	9b04      	ldr	r3, [sp, #16]
 8009776:	eba0 000a 	sub.w	r0, r0, sl
 800977a:	4082      	lsls	r2, r0
 800977c:	4313      	orrs	r3, r2
 800977e:	3401      	adds	r4, #1
 8009780:	9304      	str	r3, [sp, #16]
 8009782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009786:	2206      	movs	r2, #6
 8009788:	4829      	ldr	r0, [pc, #164]	@ (8009830 <_vfiprintf_r+0x224>)
 800978a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800978e:	f7ff fed3 	bl	8009538 <memchr>
 8009792:	2800      	cmp	r0, #0
 8009794:	d03f      	beq.n	8009816 <_vfiprintf_r+0x20a>
 8009796:	4b27      	ldr	r3, [pc, #156]	@ (8009834 <_vfiprintf_r+0x228>)
 8009798:	bb1b      	cbnz	r3, 80097e2 <_vfiprintf_r+0x1d6>
 800979a:	9b03      	ldr	r3, [sp, #12]
 800979c:	3307      	adds	r3, #7
 800979e:	f023 0307 	bic.w	r3, r3, #7
 80097a2:	3308      	adds	r3, #8
 80097a4:	9303      	str	r3, [sp, #12]
 80097a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097a8:	443b      	add	r3, r7
 80097aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80097ac:	e76a      	b.n	8009684 <_vfiprintf_r+0x78>
 80097ae:	460c      	mov	r4, r1
 80097b0:	2001      	movs	r0, #1
 80097b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80097b6:	e7a8      	b.n	800970a <_vfiprintf_r+0xfe>
 80097b8:	2300      	movs	r3, #0
 80097ba:	f04f 0c0a 	mov.w	ip, #10
 80097be:	4619      	mov	r1, r3
 80097c0:	3401      	adds	r4, #1
 80097c2:	9305      	str	r3, [sp, #20]
 80097c4:	4620      	mov	r0, r4
 80097c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097ca:	3a30      	subs	r2, #48	@ 0x30
 80097cc:	2a09      	cmp	r2, #9
 80097ce:	d903      	bls.n	80097d8 <_vfiprintf_r+0x1cc>
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d0c6      	beq.n	8009762 <_vfiprintf_r+0x156>
 80097d4:	9105      	str	r1, [sp, #20]
 80097d6:	e7c4      	b.n	8009762 <_vfiprintf_r+0x156>
 80097d8:	4604      	mov	r4, r0
 80097da:	2301      	movs	r3, #1
 80097dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80097e0:	e7f0      	b.n	80097c4 <_vfiprintf_r+0x1b8>
 80097e2:	ab03      	add	r3, sp, #12
 80097e4:	9300      	str	r3, [sp, #0]
 80097e6:	462a      	mov	r2, r5
 80097e8:	4630      	mov	r0, r6
 80097ea:	4b13      	ldr	r3, [pc, #76]	@ (8009838 <_vfiprintf_r+0x22c>)
 80097ec:	a904      	add	r1, sp, #16
 80097ee:	f3af 8000 	nop.w
 80097f2:	4607      	mov	r7, r0
 80097f4:	1c78      	adds	r0, r7, #1
 80097f6:	d1d6      	bne.n	80097a6 <_vfiprintf_r+0x19a>
 80097f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097fa:	07d9      	lsls	r1, r3, #31
 80097fc:	d405      	bmi.n	800980a <_vfiprintf_r+0x1fe>
 80097fe:	89ab      	ldrh	r3, [r5, #12]
 8009800:	059a      	lsls	r2, r3, #22
 8009802:	d402      	bmi.n	800980a <_vfiprintf_r+0x1fe>
 8009804:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009806:	f7ff f99f 	bl	8008b48 <__retarget_lock_release_recursive>
 800980a:	89ab      	ldrh	r3, [r5, #12]
 800980c:	065b      	lsls	r3, r3, #25
 800980e:	f53f af1f 	bmi.w	8009650 <_vfiprintf_r+0x44>
 8009812:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009814:	e71e      	b.n	8009654 <_vfiprintf_r+0x48>
 8009816:	ab03      	add	r3, sp, #12
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	462a      	mov	r2, r5
 800981c:	4630      	mov	r0, r6
 800981e:	4b06      	ldr	r3, [pc, #24]	@ (8009838 <_vfiprintf_r+0x22c>)
 8009820:	a904      	add	r1, sp, #16
 8009822:	f7ff fc87 	bl	8009134 <_printf_i>
 8009826:	e7e4      	b.n	80097f2 <_vfiprintf_r+0x1e6>
 8009828:	0800b61d 	.word	0x0800b61d
 800982c:	0800b623 	.word	0x0800b623
 8009830:	0800b627 	.word	0x0800b627
 8009834:	00000000 	.word	0x00000000
 8009838:	080095e9 	.word	0x080095e9

0800983c <__swbuf_r>:
 800983c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983e:	460e      	mov	r6, r1
 8009840:	4614      	mov	r4, r2
 8009842:	4605      	mov	r5, r0
 8009844:	b118      	cbz	r0, 800984e <__swbuf_r+0x12>
 8009846:	6a03      	ldr	r3, [r0, #32]
 8009848:	b90b      	cbnz	r3, 800984e <__swbuf_r+0x12>
 800984a:	f7ff f855 	bl	80088f8 <__sinit>
 800984e:	69a3      	ldr	r3, [r4, #24]
 8009850:	60a3      	str	r3, [r4, #8]
 8009852:	89a3      	ldrh	r3, [r4, #12]
 8009854:	071a      	lsls	r2, r3, #28
 8009856:	d501      	bpl.n	800985c <__swbuf_r+0x20>
 8009858:	6923      	ldr	r3, [r4, #16]
 800985a:	b943      	cbnz	r3, 800986e <__swbuf_r+0x32>
 800985c:	4621      	mov	r1, r4
 800985e:	4628      	mov	r0, r5
 8009860:	f000 f82a 	bl	80098b8 <__swsetup_r>
 8009864:	b118      	cbz	r0, 800986e <__swbuf_r+0x32>
 8009866:	f04f 37ff 	mov.w	r7, #4294967295
 800986a:	4638      	mov	r0, r7
 800986c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800986e:	6823      	ldr	r3, [r4, #0]
 8009870:	6922      	ldr	r2, [r4, #16]
 8009872:	b2f6      	uxtb	r6, r6
 8009874:	1a98      	subs	r0, r3, r2
 8009876:	6963      	ldr	r3, [r4, #20]
 8009878:	4637      	mov	r7, r6
 800987a:	4283      	cmp	r3, r0
 800987c:	dc05      	bgt.n	800988a <__swbuf_r+0x4e>
 800987e:	4621      	mov	r1, r4
 8009880:	4628      	mov	r0, r5
 8009882:	f7ff fdf5 	bl	8009470 <_fflush_r>
 8009886:	2800      	cmp	r0, #0
 8009888:	d1ed      	bne.n	8009866 <__swbuf_r+0x2a>
 800988a:	68a3      	ldr	r3, [r4, #8]
 800988c:	3b01      	subs	r3, #1
 800988e:	60a3      	str	r3, [r4, #8]
 8009890:	6823      	ldr	r3, [r4, #0]
 8009892:	1c5a      	adds	r2, r3, #1
 8009894:	6022      	str	r2, [r4, #0]
 8009896:	701e      	strb	r6, [r3, #0]
 8009898:	6962      	ldr	r2, [r4, #20]
 800989a:	1c43      	adds	r3, r0, #1
 800989c:	429a      	cmp	r2, r3
 800989e:	d004      	beq.n	80098aa <__swbuf_r+0x6e>
 80098a0:	89a3      	ldrh	r3, [r4, #12]
 80098a2:	07db      	lsls	r3, r3, #31
 80098a4:	d5e1      	bpl.n	800986a <__swbuf_r+0x2e>
 80098a6:	2e0a      	cmp	r6, #10
 80098a8:	d1df      	bne.n	800986a <__swbuf_r+0x2e>
 80098aa:	4621      	mov	r1, r4
 80098ac:	4628      	mov	r0, r5
 80098ae:	f7ff fddf 	bl	8009470 <_fflush_r>
 80098b2:	2800      	cmp	r0, #0
 80098b4:	d0d9      	beq.n	800986a <__swbuf_r+0x2e>
 80098b6:	e7d6      	b.n	8009866 <__swbuf_r+0x2a>

080098b8 <__swsetup_r>:
 80098b8:	b538      	push	{r3, r4, r5, lr}
 80098ba:	4b29      	ldr	r3, [pc, #164]	@ (8009960 <__swsetup_r+0xa8>)
 80098bc:	4605      	mov	r5, r0
 80098be:	6818      	ldr	r0, [r3, #0]
 80098c0:	460c      	mov	r4, r1
 80098c2:	b118      	cbz	r0, 80098cc <__swsetup_r+0x14>
 80098c4:	6a03      	ldr	r3, [r0, #32]
 80098c6:	b90b      	cbnz	r3, 80098cc <__swsetup_r+0x14>
 80098c8:	f7ff f816 	bl	80088f8 <__sinit>
 80098cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098d0:	0719      	lsls	r1, r3, #28
 80098d2:	d422      	bmi.n	800991a <__swsetup_r+0x62>
 80098d4:	06da      	lsls	r2, r3, #27
 80098d6:	d407      	bmi.n	80098e8 <__swsetup_r+0x30>
 80098d8:	2209      	movs	r2, #9
 80098da:	602a      	str	r2, [r5, #0]
 80098dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098e0:	f04f 30ff 	mov.w	r0, #4294967295
 80098e4:	81a3      	strh	r3, [r4, #12]
 80098e6:	e033      	b.n	8009950 <__swsetup_r+0x98>
 80098e8:	0758      	lsls	r0, r3, #29
 80098ea:	d512      	bpl.n	8009912 <__swsetup_r+0x5a>
 80098ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098ee:	b141      	cbz	r1, 8009902 <__swsetup_r+0x4a>
 80098f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098f4:	4299      	cmp	r1, r3
 80098f6:	d002      	beq.n	80098fe <__swsetup_r+0x46>
 80098f8:	4628      	mov	r0, r5
 80098fa:	f7ff f953 	bl	8008ba4 <_free_r>
 80098fe:	2300      	movs	r3, #0
 8009900:	6363      	str	r3, [r4, #52]	@ 0x34
 8009902:	89a3      	ldrh	r3, [r4, #12]
 8009904:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009908:	81a3      	strh	r3, [r4, #12]
 800990a:	2300      	movs	r3, #0
 800990c:	6063      	str	r3, [r4, #4]
 800990e:	6923      	ldr	r3, [r4, #16]
 8009910:	6023      	str	r3, [r4, #0]
 8009912:	89a3      	ldrh	r3, [r4, #12]
 8009914:	f043 0308 	orr.w	r3, r3, #8
 8009918:	81a3      	strh	r3, [r4, #12]
 800991a:	6923      	ldr	r3, [r4, #16]
 800991c:	b94b      	cbnz	r3, 8009932 <__swsetup_r+0x7a>
 800991e:	89a3      	ldrh	r3, [r4, #12]
 8009920:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009928:	d003      	beq.n	8009932 <__swsetup_r+0x7a>
 800992a:	4621      	mov	r1, r4
 800992c:	4628      	mov	r0, r5
 800992e:	f000 f88a 	bl	8009a46 <__smakebuf_r>
 8009932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009936:	f013 0201 	ands.w	r2, r3, #1
 800993a:	d00a      	beq.n	8009952 <__swsetup_r+0x9a>
 800993c:	2200      	movs	r2, #0
 800993e:	60a2      	str	r2, [r4, #8]
 8009940:	6962      	ldr	r2, [r4, #20]
 8009942:	4252      	negs	r2, r2
 8009944:	61a2      	str	r2, [r4, #24]
 8009946:	6922      	ldr	r2, [r4, #16]
 8009948:	b942      	cbnz	r2, 800995c <__swsetup_r+0xa4>
 800994a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800994e:	d1c5      	bne.n	80098dc <__swsetup_r+0x24>
 8009950:	bd38      	pop	{r3, r4, r5, pc}
 8009952:	0799      	lsls	r1, r3, #30
 8009954:	bf58      	it	pl
 8009956:	6962      	ldrpl	r2, [r4, #20]
 8009958:	60a2      	str	r2, [r4, #8]
 800995a:	e7f4      	b.n	8009946 <__swsetup_r+0x8e>
 800995c:	2000      	movs	r0, #0
 800995e:	e7f7      	b.n	8009950 <__swsetup_r+0x98>
 8009960:	20000030 	.word	0x20000030

08009964 <_raise_r>:
 8009964:	291f      	cmp	r1, #31
 8009966:	b538      	push	{r3, r4, r5, lr}
 8009968:	4605      	mov	r5, r0
 800996a:	460c      	mov	r4, r1
 800996c:	d904      	bls.n	8009978 <_raise_r+0x14>
 800996e:	2316      	movs	r3, #22
 8009970:	6003      	str	r3, [r0, #0]
 8009972:	f04f 30ff 	mov.w	r0, #4294967295
 8009976:	bd38      	pop	{r3, r4, r5, pc}
 8009978:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800997a:	b112      	cbz	r2, 8009982 <_raise_r+0x1e>
 800997c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009980:	b94b      	cbnz	r3, 8009996 <_raise_r+0x32>
 8009982:	4628      	mov	r0, r5
 8009984:	f000 f830 	bl	80099e8 <_getpid_r>
 8009988:	4622      	mov	r2, r4
 800998a:	4601      	mov	r1, r0
 800998c:	4628      	mov	r0, r5
 800998e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009992:	f000 b817 	b.w	80099c4 <_kill_r>
 8009996:	2b01      	cmp	r3, #1
 8009998:	d00a      	beq.n	80099b0 <_raise_r+0x4c>
 800999a:	1c59      	adds	r1, r3, #1
 800999c:	d103      	bne.n	80099a6 <_raise_r+0x42>
 800999e:	2316      	movs	r3, #22
 80099a0:	6003      	str	r3, [r0, #0]
 80099a2:	2001      	movs	r0, #1
 80099a4:	e7e7      	b.n	8009976 <_raise_r+0x12>
 80099a6:	2100      	movs	r1, #0
 80099a8:	4620      	mov	r0, r4
 80099aa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80099ae:	4798      	blx	r3
 80099b0:	2000      	movs	r0, #0
 80099b2:	e7e0      	b.n	8009976 <_raise_r+0x12>

080099b4 <raise>:
 80099b4:	4b02      	ldr	r3, [pc, #8]	@ (80099c0 <raise+0xc>)
 80099b6:	4601      	mov	r1, r0
 80099b8:	6818      	ldr	r0, [r3, #0]
 80099ba:	f7ff bfd3 	b.w	8009964 <_raise_r>
 80099be:	bf00      	nop
 80099c0:	20000030 	.word	0x20000030

080099c4 <_kill_r>:
 80099c4:	b538      	push	{r3, r4, r5, lr}
 80099c6:	2300      	movs	r3, #0
 80099c8:	4d06      	ldr	r5, [pc, #24]	@ (80099e4 <_kill_r+0x20>)
 80099ca:	4604      	mov	r4, r0
 80099cc:	4608      	mov	r0, r1
 80099ce:	4611      	mov	r1, r2
 80099d0:	602b      	str	r3, [r5, #0]
 80099d2:	f7fb ff1e 	bl	8005812 <_kill>
 80099d6:	1c43      	adds	r3, r0, #1
 80099d8:	d102      	bne.n	80099e0 <_kill_r+0x1c>
 80099da:	682b      	ldr	r3, [r5, #0]
 80099dc:	b103      	cbz	r3, 80099e0 <_kill_r+0x1c>
 80099de:	6023      	str	r3, [r4, #0]
 80099e0:	bd38      	pop	{r3, r4, r5, pc}
 80099e2:	bf00      	nop
 80099e4:	200040f8 	.word	0x200040f8

080099e8 <_getpid_r>:
 80099e8:	f7fb bf0c 	b.w	8005804 <_getpid>

080099ec <_malloc_usable_size_r>:
 80099ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099f0:	1f18      	subs	r0, r3, #4
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	bfbc      	itt	lt
 80099f6:	580b      	ldrlt	r3, [r1, r0]
 80099f8:	18c0      	addlt	r0, r0, r3
 80099fa:	4770      	bx	lr

080099fc <__swhatbuf_r>:
 80099fc:	b570      	push	{r4, r5, r6, lr}
 80099fe:	460c      	mov	r4, r1
 8009a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a04:	4615      	mov	r5, r2
 8009a06:	2900      	cmp	r1, #0
 8009a08:	461e      	mov	r6, r3
 8009a0a:	b096      	sub	sp, #88	@ 0x58
 8009a0c:	da0c      	bge.n	8009a28 <__swhatbuf_r+0x2c>
 8009a0e:	89a3      	ldrh	r3, [r4, #12]
 8009a10:	2100      	movs	r1, #0
 8009a12:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a16:	bf14      	ite	ne
 8009a18:	2340      	movne	r3, #64	@ 0x40
 8009a1a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a1e:	2000      	movs	r0, #0
 8009a20:	6031      	str	r1, [r6, #0]
 8009a22:	602b      	str	r3, [r5, #0]
 8009a24:	b016      	add	sp, #88	@ 0x58
 8009a26:	bd70      	pop	{r4, r5, r6, pc}
 8009a28:	466a      	mov	r2, sp
 8009a2a:	f000 f849 	bl	8009ac0 <_fstat_r>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	dbed      	blt.n	8009a0e <__swhatbuf_r+0x12>
 8009a32:	9901      	ldr	r1, [sp, #4]
 8009a34:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009a38:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009a3c:	4259      	negs	r1, r3
 8009a3e:	4159      	adcs	r1, r3
 8009a40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a44:	e7eb      	b.n	8009a1e <__swhatbuf_r+0x22>

08009a46 <__smakebuf_r>:
 8009a46:	898b      	ldrh	r3, [r1, #12]
 8009a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a4a:	079d      	lsls	r5, r3, #30
 8009a4c:	4606      	mov	r6, r0
 8009a4e:	460c      	mov	r4, r1
 8009a50:	d507      	bpl.n	8009a62 <__smakebuf_r+0x1c>
 8009a52:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a56:	6023      	str	r3, [r4, #0]
 8009a58:	6123      	str	r3, [r4, #16]
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	6163      	str	r3, [r4, #20]
 8009a5e:	b003      	add	sp, #12
 8009a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a62:	466a      	mov	r2, sp
 8009a64:	ab01      	add	r3, sp, #4
 8009a66:	f7ff ffc9 	bl	80099fc <__swhatbuf_r>
 8009a6a:	9f00      	ldr	r7, [sp, #0]
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	4639      	mov	r1, r7
 8009a70:	4630      	mov	r0, r6
 8009a72:	f7ff f909 	bl	8008c88 <_malloc_r>
 8009a76:	b948      	cbnz	r0, 8009a8c <__smakebuf_r+0x46>
 8009a78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a7c:	059a      	lsls	r2, r3, #22
 8009a7e:	d4ee      	bmi.n	8009a5e <__smakebuf_r+0x18>
 8009a80:	f023 0303 	bic.w	r3, r3, #3
 8009a84:	f043 0302 	orr.w	r3, r3, #2
 8009a88:	81a3      	strh	r3, [r4, #12]
 8009a8a:	e7e2      	b.n	8009a52 <__smakebuf_r+0xc>
 8009a8c:	89a3      	ldrh	r3, [r4, #12]
 8009a8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a96:	81a3      	strh	r3, [r4, #12]
 8009a98:	9b01      	ldr	r3, [sp, #4]
 8009a9a:	6020      	str	r0, [r4, #0]
 8009a9c:	b15b      	cbz	r3, 8009ab6 <__smakebuf_r+0x70>
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009aa4:	f000 f81e 	bl	8009ae4 <_isatty_r>
 8009aa8:	b128      	cbz	r0, 8009ab6 <__smakebuf_r+0x70>
 8009aaa:	89a3      	ldrh	r3, [r4, #12]
 8009aac:	f023 0303 	bic.w	r3, r3, #3
 8009ab0:	f043 0301 	orr.w	r3, r3, #1
 8009ab4:	81a3      	strh	r3, [r4, #12]
 8009ab6:	89a3      	ldrh	r3, [r4, #12]
 8009ab8:	431d      	orrs	r5, r3
 8009aba:	81a5      	strh	r5, [r4, #12]
 8009abc:	e7cf      	b.n	8009a5e <__smakebuf_r+0x18>
	...

08009ac0 <_fstat_r>:
 8009ac0:	b538      	push	{r3, r4, r5, lr}
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	4d06      	ldr	r5, [pc, #24]	@ (8009ae0 <_fstat_r+0x20>)
 8009ac6:	4604      	mov	r4, r0
 8009ac8:	4608      	mov	r0, r1
 8009aca:	4611      	mov	r1, r2
 8009acc:	602b      	str	r3, [r5, #0]
 8009ace:	f7fb feff 	bl	80058d0 <_fstat>
 8009ad2:	1c43      	adds	r3, r0, #1
 8009ad4:	d102      	bne.n	8009adc <_fstat_r+0x1c>
 8009ad6:	682b      	ldr	r3, [r5, #0]
 8009ad8:	b103      	cbz	r3, 8009adc <_fstat_r+0x1c>
 8009ada:	6023      	str	r3, [r4, #0]
 8009adc:	bd38      	pop	{r3, r4, r5, pc}
 8009ade:	bf00      	nop
 8009ae0:	200040f8 	.word	0x200040f8

08009ae4 <_isatty_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	4d05      	ldr	r5, [pc, #20]	@ (8009b00 <_isatty_r+0x1c>)
 8009aea:	4604      	mov	r4, r0
 8009aec:	4608      	mov	r0, r1
 8009aee:	602b      	str	r3, [r5, #0]
 8009af0:	f7fb fefd 	bl	80058ee <_isatty>
 8009af4:	1c43      	adds	r3, r0, #1
 8009af6:	d102      	bne.n	8009afe <_isatty_r+0x1a>
 8009af8:	682b      	ldr	r3, [r5, #0]
 8009afa:	b103      	cbz	r3, 8009afe <_isatty_r+0x1a>
 8009afc:	6023      	str	r3, [r4, #0]
 8009afe:	bd38      	pop	{r3, r4, r5, pc}
 8009b00:	200040f8 	.word	0x200040f8

08009b04 <powf>:
 8009b04:	b570      	push	{r4, r5, r6, lr}
 8009b06:	460c      	mov	r4, r1
 8009b08:	4606      	mov	r6, r0
 8009b0a:	f000 fa43 	bl	8009f94 <__ieee754_powf>
 8009b0e:	4621      	mov	r1, r4
 8009b10:	4605      	mov	r5, r0
 8009b12:	4620      	mov	r0, r4
 8009b14:	f7f6 fe00 	bl	8000718 <__aeabi_fcmpun>
 8009b18:	bb68      	cbnz	r0, 8009b76 <powf+0x72>
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	f7f6 fdc9 	bl	80006b4 <__aeabi_fcmpeq>
 8009b22:	b190      	cbz	r0, 8009b4a <powf+0x46>
 8009b24:	2100      	movs	r1, #0
 8009b26:	4620      	mov	r0, r4
 8009b28:	f7f6 fdc4 	bl	80006b4 <__aeabi_fcmpeq>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d133      	bne.n	8009b98 <powf+0x94>
 8009b30:	4620      	mov	r0, r4
 8009b32:	f000 f8c1 	bl	8009cb8 <finitef>
 8009b36:	b1f0      	cbz	r0, 8009b76 <powf+0x72>
 8009b38:	2100      	movs	r1, #0
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f7f6 fdc4 	bl	80006c8 <__aeabi_fcmplt>
 8009b40:	b1c8      	cbz	r0, 8009b76 <powf+0x72>
 8009b42:	f7fe ffd5 	bl	8008af0 <__errno>
 8009b46:	2322      	movs	r3, #34	@ 0x22
 8009b48:	e014      	b.n	8009b74 <powf+0x70>
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	f000 f8b4 	bl	8009cb8 <finitef>
 8009b50:	b998      	cbnz	r0, 8009b7a <powf+0x76>
 8009b52:	4630      	mov	r0, r6
 8009b54:	f000 f8b0 	bl	8009cb8 <finitef>
 8009b58:	b178      	cbz	r0, 8009b7a <powf+0x76>
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	f000 f8ac 	bl	8009cb8 <finitef>
 8009b60:	b158      	cbz	r0, 8009b7a <powf+0x76>
 8009b62:	4629      	mov	r1, r5
 8009b64:	4628      	mov	r0, r5
 8009b66:	f7f6 fdd7 	bl	8000718 <__aeabi_fcmpun>
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	d0e9      	beq.n	8009b42 <powf+0x3e>
 8009b6e:	f7fe ffbf 	bl	8008af0 <__errno>
 8009b72:	2321      	movs	r3, #33	@ 0x21
 8009b74:	6003      	str	r3, [r0, #0]
 8009b76:	4628      	mov	r0, r5
 8009b78:	bd70      	pop	{r4, r5, r6, pc}
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	f7f6 fd99 	bl	80006b4 <__aeabi_fcmpeq>
 8009b82:	2800      	cmp	r0, #0
 8009b84:	d0f7      	beq.n	8009b76 <powf+0x72>
 8009b86:	4630      	mov	r0, r6
 8009b88:	f000 f896 	bl	8009cb8 <finitef>
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	d0f2      	beq.n	8009b76 <powf+0x72>
 8009b90:	4620      	mov	r0, r4
 8009b92:	f000 f891 	bl	8009cb8 <finitef>
 8009b96:	e7d3      	b.n	8009b40 <powf+0x3c>
 8009b98:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8009b9c:	e7eb      	b.n	8009b76 <powf+0x72>

08009b9e <sqrtf>:
 8009b9e:	b538      	push	{r3, r4, r5, lr}
 8009ba0:	4605      	mov	r5, r0
 8009ba2:	f000 f891 	bl	8009cc8 <__ieee754_sqrtf>
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	4604      	mov	r4, r0
 8009baa:	4628      	mov	r0, r5
 8009bac:	f7f6 fdb4 	bl	8000718 <__aeabi_fcmpun>
 8009bb0:	b968      	cbnz	r0, 8009bce <sqrtf+0x30>
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	f7f6 fd87 	bl	80006c8 <__aeabi_fcmplt>
 8009bba:	b140      	cbz	r0, 8009bce <sqrtf+0x30>
 8009bbc:	f7fe ff98 	bl	8008af0 <__errno>
 8009bc0:	2321      	movs	r3, #33	@ 0x21
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	6003      	str	r3, [r0, #0]
 8009bc6:	4608      	mov	r0, r1
 8009bc8:	f7f6 fc94 	bl	80004f4 <__aeabi_fdiv>
 8009bcc:	4604      	mov	r4, r0
 8009bce:	4620      	mov	r0, r4
 8009bd0:	bd38      	pop	{r3, r4, r5, pc}
	...

08009bd4 <cosf>:
 8009bd4:	b507      	push	{r0, r1, r2, lr}
 8009bd6:	4a1a      	ldr	r2, [pc, #104]	@ (8009c40 <cosf+0x6c>)
 8009bd8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	4601      	mov	r1, r0
 8009be0:	d805      	bhi.n	8009bee <cosf+0x1a>
 8009be2:	2100      	movs	r1, #0
 8009be4:	b003      	add	sp, #12
 8009be6:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bea:	f000 b8dd 	b.w	8009da8 <__kernel_cosf>
 8009bee:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009bf2:	d304      	bcc.n	8009bfe <cosf+0x2a>
 8009bf4:	f7f6 fac0 	bl	8000178 <__aeabi_fsub>
 8009bf8:	b003      	add	sp, #12
 8009bfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8009bfe:	4669      	mov	r1, sp
 8009c00:	f000 fd28 	bl	800a654 <__ieee754_rem_pio2f>
 8009c04:	f000 0203 	and.w	r2, r0, #3
 8009c08:	2a01      	cmp	r2, #1
 8009c0a:	d007      	beq.n	8009c1c <cosf+0x48>
 8009c0c:	2a02      	cmp	r2, #2
 8009c0e:	d00c      	beq.n	8009c2a <cosf+0x56>
 8009c10:	b982      	cbnz	r2, 8009c34 <cosf+0x60>
 8009c12:	9901      	ldr	r1, [sp, #4]
 8009c14:	9800      	ldr	r0, [sp, #0]
 8009c16:	f000 f8c7 	bl	8009da8 <__kernel_cosf>
 8009c1a:	e7ed      	b.n	8009bf8 <cosf+0x24>
 8009c1c:	9901      	ldr	r1, [sp, #4]
 8009c1e:	9800      	ldr	r0, [sp, #0]
 8009c20:	f000 f942 	bl	8009ea8 <__kernel_sinf>
 8009c24:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8009c28:	e7e6      	b.n	8009bf8 <cosf+0x24>
 8009c2a:	9901      	ldr	r1, [sp, #4]
 8009c2c:	9800      	ldr	r0, [sp, #0]
 8009c2e:	f000 f8bb 	bl	8009da8 <__kernel_cosf>
 8009c32:	e7f7      	b.n	8009c24 <cosf+0x50>
 8009c34:	2201      	movs	r2, #1
 8009c36:	9901      	ldr	r1, [sp, #4]
 8009c38:	9800      	ldr	r0, [sp, #0]
 8009c3a:	f000 f935 	bl	8009ea8 <__kernel_sinf>
 8009c3e:	e7db      	b.n	8009bf8 <cosf+0x24>
 8009c40:	3f490fd8 	.word	0x3f490fd8

08009c44 <sinf>:
 8009c44:	b507      	push	{r0, r1, r2, lr}
 8009c46:	4a1b      	ldr	r2, [pc, #108]	@ (8009cb4 <sinf+0x70>)
 8009c48:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	4601      	mov	r1, r0
 8009c50:	d806      	bhi.n	8009c60 <sinf+0x1c>
 8009c52:	2200      	movs	r2, #0
 8009c54:	2100      	movs	r1, #0
 8009c56:	b003      	add	sp, #12
 8009c58:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c5c:	f000 b924 	b.w	8009ea8 <__kernel_sinf>
 8009c60:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009c64:	d304      	bcc.n	8009c70 <sinf+0x2c>
 8009c66:	f7f6 fa87 	bl	8000178 <__aeabi_fsub>
 8009c6a:	b003      	add	sp, #12
 8009c6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c70:	4669      	mov	r1, sp
 8009c72:	f000 fcef 	bl	800a654 <__ieee754_rem_pio2f>
 8009c76:	f000 0003 	and.w	r0, r0, #3
 8009c7a:	2801      	cmp	r0, #1
 8009c7c:	d008      	beq.n	8009c90 <sinf+0x4c>
 8009c7e:	2802      	cmp	r0, #2
 8009c80:	d00b      	beq.n	8009c9a <sinf+0x56>
 8009c82:	b990      	cbnz	r0, 8009caa <sinf+0x66>
 8009c84:	2201      	movs	r2, #1
 8009c86:	9901      	ldr	r1, [sp, #4]
 8009c88:	9800      	ldr	r0, [sp, #0]
 8009c8a:	f000 f90d 	bl	8009ea8 <__kernel_sinf>
 8009c8e:	e7ec      	b.n	8009c6a <sinf+0x26>
 8009c90:	9901      	ldr	r1, [sp, #4]
 8009c92:	9800      	ldr	r0, [sp, #0]
 8009c94:	f000 f888 	bl	8009da8 <__kernel_cosf>
 8009c98:	e7e7      	b.n	8009c6a <sinf+0x26>
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	9901      	ldr	r1, [sp, #4]
 8009c9e:	9800      	ldr	r0, [sp, #0]
 8009ca0:	f000 f902 	bl	8009ea8 <__kernel_sinf>
 8009ca4:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8009ca8:	e7df      	b.n	8009c6a <sinf+0x26>
 8009caa:	9901      	ldr	r1, [sp, #4]
 8009cac:	9800      	ldr	r0, [sp, #0]
 8009cae:	f000 f87b 	bl	8009da8 <__kernel_cosf>
 8009cb2:	e7f7      	b.n	8009ca4 <sinf+0x60>
 8009cb4:	3f490fd8 	.word	0x3f490fd8

08009cb8 <finitef>:
 8009cb8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8009cbc:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8009cc0:	bfac      	ite	ge
 8009cc2:	2000      	movge	r0, #0
 8009cc4:	2001      	movlt	r0, #1
 8009cc6:	4770      	bx	lr

08009cc8 <__ieee754_sqrtf>:
 8009cc8:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8009ccc:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	d30a      	bcc.n	8009cf0 <__ieee754_sqrtf+0x28>
 8009cda:	4601      	mov	r1, r0
 8009cdc:	f7f6 fb56 	bl	800038c <__aeabi_fmul>
 8009ce0:	4601      	mov	r1, r0
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f7f6 fa4a 	bl	800017c <__addsf3>
 8009ce8:	4604      	mov	r4, r0
 8009cea:	4620      	mov	r0, r4
 8009cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cf0:	2a00      	cmp	r2, #0
 8009cf2:	d0fa      	beq.n	8009cea <__ieee754_sqrtf+0x22>
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	da06      	bge.n	8009d06 <__ieee754_sqrtf+0x3e>
 8009cf8:	4601      	mov	r1, r0
 8009cfa:	f7f6 fa3d 	bl	8000178 <__aeabi_fsub>
 8009cfe:	4601      	mov	r1, r0
 8009d00:	f7f6 fbf8 	bl	80004f4 <__aeabi_fdiv>
 8009d04:	e7f0      	b.n	8009ce8 <__ieee754_sqrtf+0x20>
 8009d06:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8009d0a:	d03c      	beq.n	8009d86 <__ieee754_sqrtf+0xbe>
 8009d0c:	15c2      	asrs	r2, r0, #23
 8009d0e:	2400      	movs	r4, #0
 8009d10:	2019      	movs	r0, #25
 8009d12:	4626      	mov	r6, r4
 8009d14:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8009d18:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009d1c:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8009d20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009d24:	07d2      	lsls	r2, r2, #31
 8009d26:	bf58      	it	pl
 8009d28:	005b      	lslpl	r3, r3, #1
 8009d2a:	106d      	asrs	r5, r5, #1
 8009d2c:	005b      	lsls	r3, r3, #1
 8009d2e:	1872      	adds	r2, r6, r1
 8009d30:	429a      	cmp	r2, r3
 8009d32:	bfcf      	iteee	gt
 8009d34:	461a      	movgt	r2, r3
 8009d36:	1856      	addle	r6, r2, r1
 8009d38:	1864      	addle	r4, r4, r1
 8009d3a:	1a9a      	suble	r2, r3, r2
 8009d3c:	3801      	subs	r0, #1
 8009d3e:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8009d42:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009d46:	d1f2      	bne.n	8009d2e <__ieee754_sqrtf+0x66>
 8009d48:	b1ba      	cbz	r2, 8009d7a <__ieee754_sqrtf+0xb2>
 8009d4a:	4e15      	ldr	r6, [pc, #84]	@ (8009da0 <__ieee754_sqrtf+0xd8>)
 8009d4c:	4f15      	ldr	r7, [pc, #84]	@ (8009da4 <__ieee754_sqrtf+0xdc>)
 8009d4e:	6830      	ldr	r0, [r6, #0]
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	f7f6 fa11 	bl	8000178 <__aeabi_fsub>
 8009d56:	f8d6 8000 	ldr.w	r8, [r6]
 8009d5a:	4601      	mov	r1, r0
 8009d5c:	4640      	mov	r0, r8
 8009d5e:	f7f6 fcbd 	bl	80006dc <__aeabi_fcmple>
 8009d62:	b150      	cbz	r0, 8009d7a <__ieee754_sqrtf+0xb2>
 8009d64:	6830      	ldr	r0, [r6, #0]
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	f7f6 fa08 	bl	800017c <__addsf3>
 8009d6c:	6836      	ldr	r6, [r6, #0]
 8009d6e:	4601      	mov	r1, r0
 8009d70:	4630      	mov	r0, r6
 8009d72:	f7f6 fca9 	bl	80006c8 <__aeabi_fcmplt>
 8009d76:	b170      	cbz	r0, 8009d96 <__ieee754_sqrtf+0xce>
 8009d78:	3402      	adds	r4, #2
 8009d7a:	1064      	asrs	r4, r4, #1
 8009d7c:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8009d80:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8009d84:	e7b1      	b.n	8009cea <__ieee754_sqrtf+0x22>
 8009d86:	005b      	lsls	r3, r3, #1
 8009d88:	0218      	lsls	r0, r3, #8
 8009d8a:	460a      	mov	r2, r1
 8009d8c:	f101 0101 	add.w	r1, r1, #1
 8009d90:	d5f9      	bpl.n	8009d86 <__ieee754_sqrtf+0xbe>
 8009d92:	4252      	negs	r2, r2
 8009d94:	e7bb      	b.n	8009d0e <__ieee754_sqrtf+0x46>
 8009d96:	3401      	adds	r4, #1
 8009d98:	f024 0401 	bic.w	r4, r4, #1
 8009d9c:	e7ed      	b.n	8009d7a <__ieee754_sqrtf+0xb2>
 8009d9e:	bf00      	nop
 8009da0:	0800b654 	.word	0x0800b654
 8009da4:	0800b650 	.word	0x0800b650

08009da8 <__kernel_cosf>:
 8009da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dac:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8009db0:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 8009db4:	4606      	mov	r6, r0
 8009db6:	4688      	mov	r8, r1
 8009db8:	d203      	bcs.n	8009dc2 <__kernel_cosf+0x1a>
 8009dba:	f7f6 fcc3 	bl	8000744 <__aeabi_f2iz>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	d05c      	beq.n	8009e7c <__kernel_cosf+0xd4>
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	4630      	mov	r0, r6
 8009dc6:	f7f6 fae1 	bl	800038c <__aeabi_fmul>
 8009dca:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8009dce:	4604      	mov	r4, r0
 8009dd0:	f7f6 fadc 	bl	800038c <__aeabi_fmul>
 8009dd4:	492b      	ldr	r1, [pc, #172]	@ (8009e84 <__kernel_cosf+0xdc>)
 8009dd6:	4607      	mov	r7, r0
 8009dd8:	4620      	mov	r0, r4
 8009dda:	f7f6 fad7 	bl	800038c <__aeabi_fmul>
 8009dde:	492a      	ldr	r1, [pc, #168]	@ (8009e88 <__kernel_cosf+0xe0>)
 8009de0:	f7f6 f9cc 	bl	800017c <__addsf3>
 8009de4:	4621      	mov	r1, r4
 8009de6:	f7f6 fad1 	bl	800038c <__aeabi_fmul>
 8009dea:	4928      	ldr	r1, [pc, #160]	@ (8009e8c <__kernel_cosf+0xe4>)
 8009dec:	f7f6 f9c4 	bl	8000178 <__aeabi_fsub>
 8009df0:	4621      	mov	r1, r4
 8009df2:	f7f6 facb 	bl	800038c <__aeabi_fmul>
 8009df6:	4926      	ldr	r1, [pc, #152]	@ (8009e90 <__kernel_cosf+0xe8>)
 8009df8:	f7f6 f9c0 	bl	800017c <__addsf3>
 8009dfc:	4621      	mov	r1, r4
 8009dfe:	f7f6 fac5 	bl	800038c <__aeabi_fmul>
 8009e02:	4924      	ldr	r1, [pc, #144]	@ (8009e94 <__kernel_cosf+0xec>)
 8009e04:	f7f6 f9b8 	bl	8000178 <__aeabi_fsub>
 8009e08:	4621      	mov	r1, r4
 8009e0a:	f7f6 fabf 	bl	800038c <__aeabi_fmul>
 8009e0e:	4922      	ldr	r1, [pc, #136]	@ (8009e98 <__kernel_cosf+0xf0>)
 8009e10:	f7f6 f9b4 	bl	800017c <__addsf3>
 8009e14:	4621      	mov	r1, r4
 8009e16:	f7f6 fab9 	bl	800038c <__aeabi_fmul>
 8009e1a:	4621      	mov	r1, r4
 8009e1c:	f7f6 fab6 	bl	800038c <__aeabi_fmul>
 8009e20:	4641      	mov	r1, r8
 8009e22:	4604      	mov	r4, r0
 8009e24:	4630      	mov	r0, r6
 8009e26:	f7f6 fab1 	bl	800038c <__aeabi_fmul>
 8009e2a:	4601      	mov	r1, r0
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f7f6 f9a3 	bl	8000178 <__aeabi_fsub>
 8009e32:	4b1a      	ldr	r3, [pc, #104]	@ (8009e9c <__kernel_cosf+0xf4>)
 8009e34:	4604      	mov	r4, r0
 8009e36:	429d      	cmp	r5, r3
 8009e38:	d80a      	bhi.n	8009e50 <__kernel_cosf+0xa8>
 8009e3a:	4601      	mov	r1, r0
 8009e3c:	4638      	mov	r0, r7
 8009e3e:	f7f6 f99b 	bl	8000178 <__aeabi_fsub>
 8009e42:	4601      	mov	r1, r0
 8009e44:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009e48:	f7f6 f996 	bl	8000178 <__aeabi_fsub>
 8009e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e50:	4b13      	ldr	r3, [pc, #76]	@ (8009ea0 <__kernel_cosf+0xf8>)
 8009e52:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009e56:	429d      	cmp	r5, r3
 8009e58:	bf8c      	ite	hi
 8009e5a:	4d12      	ldrhi	r5, [pc, #72]	@ (8009ea4 <__kernel_cosf+0xfc>)
 8009e5c:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 8009e60:	4629      	mov	r1, r5
 8009e62:	f7f6 f989 	bl	8000178 <__aeabi_fsub>
 8009e66:	4629      	mov	r1, r5
 8009e68:	4606      	mov	r6, r0
 8009e6a:	4638      	mov	r0, r7
 8009e6c:	f7f6 f984 	bl	8000178 <__aeabi_fsub>
 8009e70:	4621      	mov	r1, r4
 8009e72:	f7f6 f981 	bl	8000178 <__aeabi_fsub>
 8009e76:	4601      	mov	r1, r0
 8009e78:	4630      	mov	r0, r6
 8009e7a:	e7e5      	b.n	8009e48 <__kernel_cosf+0xa0>
 8009e7c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009e80:	e7e4      	b.n	8009e4c <__kernel_cosf+0xa4>
 8009e82:	bf00      	nop
 8009e84:	ad47d74e 	.word	0xad47d74e
 8009e88:	310f74f6 	.word	0x310f74f6
 8009e8c:	3493f27c 	.word	0x3493f27c
 8009e90:	37d00d01 	.word	0x37d00d01
 8009e94:	3ab60b61 	.word	0x3ab60b61
 8009e98:	3d2aaaab 	.word	0x3d2aaaab
 8009e9c:	3e999999 	.word	0x3e999999
 8009ea0:	3f480000 	.word	0x3f480000
 8009ea4:	3e900000 	.word	0x3e900000

08009ea8 <__kernel_sinf>:
 8009ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009eac:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8009eb0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8009eb4:	4604      	mov	r4, r0
 8009eb6:	460f      	mov	r7, r1
 8009eb8:	4691      	mov	r9, r2
 8009eba:	d203      	bcs.n	8009ec4 <__kernel_sinf+0x1c>
 8009ebc:	f7f6 fc42 	bl	8000744 <__aeabi_f2iz>
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	d035      	beq.n	8009f30 <__kernel_sinf+0x88>
 8009ec4:	4621      	mov	r1, r4
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f7f6 fa60 	bl	800038c <__aeabi_fmul>
 8009ecc:	4605      	mov	r5, r0
 8009ece:	4601      	mov	r1, r0
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f7f6 fa5b 	bl	800038c <__aeabi_fmul>
 8009ed6:	4929      	ldr	r1, [pc, #164]	@ (8009f7c <__kernel_sinf+0xd4>)
 8009ed8:	4606      	mov	r6, r0
 8009eda:	4628      	mov	r0, r5
 8009edc:	f7f6 fa56 	bl	800038c <__aeabi_fmul>
 8009ee0:	4927      	ldr	r1, [pc, #156]	@ (8009f80 <__kernel_sinf+0xd8>)
 8009ee2:	f7f6 f949 	bl	8000178 <__aeabi_fsub>
 8009ee6:	4629      	mov	r1, r5
 8009ee8:	f7f6 fa50 	bl	800038c <__aeabi_fmul>
 8009eec:	4925      	ldr	r1, [pc, #148]	@ (8009f84 <__kernel_sinf+0xdc>)
 8009eee:	f7f6 f945 	bl	800017c <__addsf3>
 8009ef2:	4629      	mov	r1, r5
 8009ef4:	f7f6 fa4a 	bl	800038c <__aeabi_fmul>
 8009ef8:	4923      	ldr	r1, [pc, #140]	@ (8009f88 <__kernel_sinf+0xe0>)
 8009efa:	f7f6 f93d 	bl	8000178 <__aeabi_fsub>
 8009efe:	4629      	mov	r1, r5
 8009f00:	f7f6 fa44 	bl	800038c <__aeabi_fmul>
 8009f04:	4921      	ldr	r1, [pc, #132]	@ (8009f8c <__kernel_sinf+0xe4>)
 8009f06:	f7f6 f939 	bl	800017c <__addsf3>
 8009f0a:	4680      	mov	r8, r0
 8009f0c:	f1b9 0f00 	cmp.w	r9, #0
 8009f10:	d111      	bne.n	8009f36 <__kernel_sinf+0x8e>
 8009f12:	4601      	mov	r1, r0
 8009f14:	4628      	mov	r0, r5
 8009f16:	f7f6 fa39 	bl	800038c <__aeabi_fmul>
 8009f1a:	491d      	ldr	r1, [pc, #116]	@ (8009f90 <__kernel_sinf+0xe8>)
 8009f1c:	f7f6 f92c 	bl	8000178 <__aeabi_fsub>
 8009f20:	4631      	mov	r1, r6
 8009f22:	f7f6 fa33 	bl	800038c <__aeabi_fmul>
 8009f26:	4601      	mov	r1, r0
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f7f6 f927 	bl	800017c <__addsf3>
 8009f2e:	4604      	mov	r4, r0
 8009f30:	4620      	mov	r0, r4
 8009f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f36:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8009f3a:	4638      	mov	r0, r7
 8009f3c:	f7f6 fa26 	bl	800038c <__aeabi_fmul>
 8009f40:	4641      	mov	r1, r8
 8009f42:	4681      	mov	r9, r0
 8009f44:	4630      	mov	r0, r6
 8009f46:	f7f6 fa21 	bl	800038c <__aeabi_fmul>
 8009f4a:	4601      	mov	r1, r0
 8009f4c:	4648      	mov	r0, r9
 8009f4e:	f7f6 f913 	bl	8000178 <__aeabi_fsub>
 8009f52:	4629      	mov	r1, r5
 8009f54:	f7f6 fa1a 	bl	800038c <__aeabi_fmul>
 8009f58:	4639      	mov	r1, r7
 8009f5a:	f7f6 f90d 	bl	8000178 <__aeabi_fsub>
 8009f5e:	490c      	ldr	r1, [pc, #48]	@ (8009f90 <__kernel_sinf+0xe8>)
 8009f60:	4605      	mov	r5, r0
 8009f62:	4630      	mov	r0, r6
 8009f64:	f7f6 fa12 	bl	800038c <__aeabi_fmul>
 8009f68:	4601      	mov	r1, r0
 8009f6a:	4628      	mov	r0, r5
 8009f6c:	f7f6 f906 	bl	800017c <__addsf3>
 8009f70:	4601      	mov	r1, r0
 8009f72:	4620      	mov	r0, r4
 8009f74:	f7f6 f900 	bl	8000178 <__aeabi_fsub>
 8009f78:	e7d9      	b.n	8009f2e <__kernel_sinf+0x86>
 8009f7a:	bf00      	nop
 8009f7c:	2f2ec9d3 	.word	0x2f2ec9d3
 8009f80:	32d72f34 	.word	0x32d72f34
 8009f84:	3638ef1b 	.word	0x3638ef1b
 8009f88:	39500d01 	.word	0x39500d01
 8009f8c:	3c088889 	.word	0x3c088889
 8009f90:	3e2aaaab 	.word	0x3e2aaaab

08009f94 <__ieee754_powf>:
 8009f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f98:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 8009f9c:	4681      	mov	r9, r0
 8009f9e:	460f      	mov	r7, r1
 8009fa0:	4606      	mov	r6, r0
 8009fa2:	460c      	mov	r4, r1
 8009fa4:	b087      	sub	sp, #28
 8009fa6:	d10c      	bne.n	8009fc2 <__ieee754_powf+0x2e>
 8009fa8:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 8009fac:	0076      	lsls	r6, r6, #1
 8009fae:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8009fb2:	f240 8310 	bls.w	800a5d6 <__ieee754_powf+0x642>
 8009fb6:	4639      	mov	r1, r7
 8009fb8:	4648      	mov	r0, r9
 8009fba:	f7f6 f8df 	bl	800017c <__addsf3>
 8009fbe:	4601      	mov	r1, r0
 8009fc0:	e043      	b.n	800a04a <__ieee754_powf+0xb6>
 8009fc2:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8009fc6:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8009fca:	d802      	bhi.n	8009fd2 <__ieee754_powf+0x3e>
 8009fcc:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8009fd0:	d908      	bls.n	8009fe4 <__ieee754_powf+0x50>
 8009fd2:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8009fd6:	d1ee      	bne.n	8009fb6 <__ieee754_powf+0x22>
 8009fd8:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8009fdc:	0064      	lsls	r4, r4, #1
 8009fde:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8009fe2:	e7e6      	b.n	8009fb2 <__ieee754_powf+0x1e>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	da1f      	bge.n	800a028 <__ieee754_powf+0x94>
 8009fe8:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 8009fec:	f080 82f8 	bcs.w	800a5e0 <__ieee754_powf+0x64c>
 8009ff0:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8009ff4:	d32f      	bcc.n	800a056 <__ieee754_powf+0xc2>
 8009ff6:	ea4f 53eb 	mov.w	r3, fp, asr #23
 8009ffa:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8009ffe:	fa4b f503 	asr.w	r5, fp, r3
 800a002:	fa05 f303 	lsl.w	r3, r5, r3
 800a006:	455b      	cmp	r3, fp
 800a008:	d123      	bne.n	800a052 <__ieee754_powf+0xbe>
 800a00a:	f005 0501 	and.w	r5, r5, #1
 800a00e:	f1c5 0502 	rsb	r5, r5, #2
 800a012:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800a016:	d11f      	bne.n	800a058 <__ieee754_powf+0xc4>
 800a018:	2c00      	cmp	r4, #0
 800a01a:	4649      	mov	r1, r9
 800a01c:	da15      	bge.n	800a04a <__ieee754_powf+0xb6>
 800a01e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a022:	f7f6 fa67 	bl	80004f4 <__aeabi_fdiv>
 800a026:	e7ca      	b.n	8009fbe <__ieee754_powf+0x2a>
 800a028:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800a02c:	d111      	bne.n	800a052 <__ieee754_powf+0xbe>
 800a02e:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800a032:	f000 82d0 	beq.w	800a5d6 <__ieee754_powf+0x642>
 800a036:	d904      	bls.n	800a042 <__ieee754_powf+0xae>
 800a038:	2c00      	cmp	r4, #0
 800a03a:	f280 82cf 	bge.w	800a5dc <__ieee754_powf+0x648>
 800a03e:	2100      	movs	r1, #0
 800a040:	e003      	b.n	800a04a <__ieee754_powf+0xb6>
 800a042:	2c00      	cmp	r4, #0
 800a044:	dafb      	bge.n	800a03e <__ieee754_powf+0xaa>
 800a046:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800a04a:	4608      	mov	r0, r1
 800a04c:	b007      	add	sp, #28
 800a04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a052:	2500      	movs	r5, #0
 800a054:	e7dd      	b.n	800a012 <__ieee754_powf+0x7e>
 800a056:	2500      	movs	r5, #0
 800a058:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800a05c:	d104      	bne.n	800a068 <__ieee754_powf+0xd4>
 800a05e:	4649      	mov	r1, r9
 800a060:	4648      	mov	r0, r9
 800a062:	f7f6 f993 	bl	800038c <__aeabi_fmul>
 800a066:	e7aa      	b.n	8009fbe <__ieee754_powf+0x2a>
 800a068:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800a06c:	f040 82bd 	bne.w	800a5ea <__ieee754_powf+0x656>
 800a070:	2e00      	cmp	r6, #0
 800a072:	f2c0 82ba 	blt.w	800a5ea <__ieee754_powf+0x656>
 800a076:	4648      	mov	r0, r9
 800a078:	b007      	add	sp, #28
 800a07a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a07e:	f7ff be23 	b.w	8009cc8 <__ieee754_sqrtf>
 800a082:	2d01      	cmp	r5, #1
 800a084:	d1e1      	bne.n	800a04a <__ieee754_powf+0xb6>
 800a086:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800a08a:	e798      	b.n	8009fbe <__ieee754_powf+0x2a>
 800a08c:	0ff3      	lsrs	r3, r6, #31
 800a08e:	3b01      	subs	r3, #1
 800a090:	9303      	str	r3, [sp, #12]
 800a092:	432b      	orrs	r3, r5
 800a094:	d101      	bne.n	800a09a <__ieee754_powf+0x106>
 800a096:	4649      	mov	r1, r9
 800a098:	e2c5      	b.n	800a626 <__ieee754_powf+0x692>
 800a09a:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 800a09e:	f240 809b 	bls.w	800a1d8 <__ieee754_powf+0x244>
 800a0a2:	4b46      	ldr	r3, [pc, #280]	@ (800a1bc <__ieee754_powf+0x228>)
 800a0a4:	4598      	cmp	r8, r3
 800a0a6:	d807      	bhi.n	800a0b8 <__ieee754_powf+0x124>
 800a0a8:	2c00      	cmp	r4, #0
 800a0aa:	da0a      	bge.n	800a0c2 <__ieee754_powf+0x12e>
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	b007      	add	sp, #28
 800a0b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b4:	f000 bc9d 	b.w	800a9f2 <__math_oflowf>
 800a0b8:	4b41      	ldr	r3, [pc, #260]	@ (800a1c0 <__ieee754_powf+0x22c>)
 800a0ba:	4598      	cmp	r8, r3
 800a0bc:	d907      	bls.n	800a0ce <__ieee754_powf+0x13a>
 800a0be:	2c00      	cmp	r4, #0
 800a0c0:	dcf4      	bgt.n	800a0ac <__ieee754_powf+0x118>
 800a0c2:	2000      	movs	r0, #0
 800a0c4:	b007      	add	sp, #28
 800a0c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ca:	f000 bc8e 	b.w	800a9ea <__math_uflowf>
 800a0ce:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800a0d2:	f7f6 f851 	bl	8000178 <__aeabi_fsub>
 800a0d6:	493b      	ldr	r1, [pc, #236]	@ (800a1c4 <__ieee754_powf+0x230>)
 800a0d8:	4606      	mov	r6, r0
 800a0da:	f7f6 f957 	bl	800038c <__aeabi_fmul>
 800a0de:	493a      	ldr	r1, [pc, #232]	@ (800a1c8 <__ieee754_powf+0x234>)
 800a0e0:	4680      	mov	r8, r0
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	f7f6 f952 	bl	800038c <__aeabi_fmul>
 800a0e8:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800a0ec:	4681      	mov	r9, r0
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	f7f6 f94c 	bl	800038c <__aeabi_fmul>
 800a0f4:	4601      	mov	r1, r0
 800a0f6:	4835      	ldr	r0, [pc, #212]	@ (800a1cc <__ieee754_powf+0x238>)
 800a0f8:	f7f6 f83e 	bl	8000178 <__aeabi_fsub>
 800a0fc:	4631      	mov	r1, r6
 800a0fe:	f7f6 f945 	bl	800038c <__aeabi_fmul>
 800a102:	4601      	mov	r1, r0
 800a104:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800a108:	f7f6 f836 	bl	8000178 <__aeabi_fsub>
 800a10c:	4631      	mov	r1, r6
 800a10e:	4682      	mov	sl, r0
 800a110:	4630      	mov	r0, r6
 800a112:	f7f6 f93b 	bl	800038c <__aeabi_fmul>
 800a116:	4601      	mov	r1, r0
 800a118:	4650      	mov	r0, sl
 800a11a:	f7f6 f937 	bl	800038c <__aeabi_fmul>
 800a11e:	492c      	ldr	r1, [pc, #176]	@ (800a1d0 <__ieee754_powf+0x23c>)
 800a120:	f7f6 f934 	bl	800038c <__aeabi_fmul>
 800a124:	4601      	mov	r1, r0
 800a126:	4648      	mov	r0, r9
 800a128:	f7f6 f826 	bl	8000178 <__aeabi_fsub>
 800a12c:	4601      	mov	r1, r0
 800a12e:	4606      	mov	r6, r0
 800a130:	4640      	mov	r0, r8
 800a132:	f7f6 f823 	bl	800017c <__addsf3>
 800a136:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800a13a:	f02b 0b0f 	bic.w	fp, fp, #15
 800a13e:	4641      	mov	r1, r8
 800a140:	4658      	mov	r0, fp
 800a142:	f7f6 f819 	bl	8000178 <__aeabi_fsub>
 800a146:	4601      	mov	r1, r0
 800a148:	4630      	mov	r0, r6
 800a14a:	f7f6 f815 	bl	8000178 <__aeabi_fsub>
 800a14e:	9b03      	ldr	r3, [sp, #12]
 800a150:	3d01      	subs	r5, #1
 800a152:	f36f 040b 	bfc	r4, #0, #12
 800a156:	431d      	orrs	r5, r3
 800a158:	4606      	mov	r6, r0
 800a15a:	4621      	mov	r1, r4
 800a15c:	4638      	mov	r0, r7
 800a15e:	bf14      	ite	ne
 800a160:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 800a164:	4d1b      	ldreq	r5, [pc, #108]	@ (800a1d4 <__ieee754_powf+0x240>)
 800a166:	f7f6 f807 	bl	8000178 <__aeabi_fsub>
 800a16a:	4659      	mov	r1, fp
 800a16c:	f7f6 f90e 	bl	800038c <__aeabi_fmul>
 800a170:	4639      	mov	r1, r7
 800a172:	4680      	mov	r8, r0
 800a174:	4630      	mov	r0, r6
 800a176:	f7f6 f909 	bl	800038c <__aeabi_fmul>
 800a17a:	4601      	mov	r1, r0
 800a17c:	4640      	mov	r0, r8
 800a17e:	f7f5 fffd 	bl	800017c <__addsf3>
 800a182:	4621      	mov	r1, r4
 800a184:	4606      	mov	r6, r0
 800a186:	4658      	mov	r0, fp
 800a188:	f7f6 f900 	bl	800038c <__aeabi_fmul>
 800a18c:	4601      	mov	r1, r0
 800a18e:	4607      	mov	r7, r0
 800a190:	4630      	mov	r0, r6
 800a192:	f7f5 fff3 	bl	800017c <__addsf3>
 800a196:	2800      	cmp	r0, #0
 800a198:	4604      	mov	r4, r0
 800a19a:	4680      	mov	r8, r0
 800a19c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800a1a0:	f340 813f 	ble.w	800a422 <__ieee754_powf+0x48e>
 800a1a4:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800a1a8:	f240 8128 	bls.w	800a3fc <__ieee754_powf+0x468>
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	f7f6 fa8a 	bl	80006c8 <__aeabi_fcmplt>
 800a1b4:	3800      	subs	r0, #0
 800a1b6:	bf18      	it	ne
 800a1b8:	2001      	movne	r0, #1
 800a1ba:	e778      	b.n	800a0ae <__ieee754_powf+0x11a>
 800a1bc:	3f7ffff3 	.word	0x3f7ffff3
 800a1c0:	3f800007 	.word	0x3f800007
 800a1c4:	3fb8aa00 	.word	0x3fb8aa00
 800a1c8:	36eca570 	.word	0x36eca570
 800a1cc:	3eaaaaab 	.word	0x3eaaaaab
 800a1d0:	3fb8aa3b 	.word	0x3fb8aa3b
 800a1d4:	bf800000 	.word	0xbf800000
 800a1d8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800a1dc:	f040 810a 	bne.w	800a3f4 <__ieee754_powf+0x460>
 800a1e0:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 800a1e4:	f7f6 f8d2 	bl	800038c <__aeabi_fmul>
 800a1e8:	f06f 0217 	mvn.w	r2, #23
 800a1ec:	4682      	mov	sl, r0
 800a1ee:	ea4f 53ea 	mov.w	r3, sl, asr #23
 800a1f2:	3b7f      	subs	r3, #127	@ 0x7f
 800a1f4:	441a      	add	r2, r3
 800a1f6:	4b95      	ldr	r3, [pc, #596]	@ (800a44c <__ieee754_powf+0x4b8>)
 800a1f8:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 800a1fc:	459a      	cmp	sl, r3
 800a1fe:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 800a202:	dd06      	ble.n	800a212 <__ieee754_powf+0x27e>
 800a204:	4b92      	ldr	r3, [pc, #584]	@ (800a450 <__ieee754_powf+0x4bc>)
 800a206:	459a      	cmp	sl, r3
 800a208:	f340 80f6 	ble.w	800a3f8 <__ieee754_powf+0x464>
 800a20c:	3201      	adds	r2, #1
 800a20e:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 800a212:	2300      	movs	r3, #0
 800a214:	9301      	str	r3, [sp, #4]
 800a216:	9205      	str	r2, [sp, #20]
 800a218:	4b8e      	ldr	r3, [pc, #568]	@ (800a454 <__ieee754_powf+0x4c0>)
 800a21a:	9a01      	ldr	r2, [sp, #4]
 800a21c:	4630      	mov	r0, r6
 800a21e:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 800a222:	46b2      	mov	sl, r6
 800a224:	4659      	mov	r1, fp
 800a226:	f7f5 ffa7 	bl	8000178 <__aeabi_fsub>
 800a22a:	4631      	mov	r1, r6
 800a22c:	4681      	mov	r9, r0
 800a22e:	4658      	mov	r0, fp
 800a230:	f7f5 ffa4 	bl	800017c <__addsf3>
 800a234:	4601      	mov	r1, r0
 800a236:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a23a:	f7f6 f95b 	bl	80004f4 <__aeabi_fdiv>
 800a23e:	4601      	mov	r1, r0
 800a240:	9004      	str	r0, [sp, #16]
 800a242:	4648      	mov	r0, r9
 800a244:	f7f6 f8a2 	bl	800038c <__aeabi_fmul>
 800a248:	9002      	str	r0, [sp, #8]
 800a24a:	9b02      	ldr	r3, [sp, #8]
 800a24c:	1076      	asrs	r6, r6, #1
 800a24e:	f36f 030b 	bfc	r3, #0, #12
 800a252:	4698      	mov	r8, r3
 800a254:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 800a258:	9b01      	ldr	r3, [sp, #4]
 800a25a:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 800a25e:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 800a262:	4631      	mov	r1, r6
 800a264:	4640      	mov	r0, r8
 800a266:	f7f6 f891 	bl	800038c <__aeabi_fmul>
 800a26a:	4601      	mov	r1, r0
 800a26c:	4648      	mov	r0, r9
 800a26e:	f7f5 ff83 	bl	8000178 <__aeabi_fsub>
 800a272:	4659      	mov	r1, fp
 800a274:	4681      	mov	r9, r0
 800a276:	4630      	mov	r0, r6
 800a278:	f7f5 ff7e 	bl	8000178 <__aeabi_fsub>
 800a27c:	4601      	mov	r1, r0
 800a27e:	4650      	mov	r0, sl
 800a280:	f7f5 ff7a 	bl	8000178 <__aeabi_fsub>
 800a284:	4641      	mov	r1, r8
 800a286:	f7f6 f881 	bl	800038c <__aeabi_fmul>
 800a28a:	4601      	mov	r1, r0
 800a28c:	4648      	mov	r0, r9
 800a28e:	f7f5 ff73 	bl	8000178 <__aeabi_fsub>
 800a292:	9b04      	ldr	r3, [sp, #16]
 800a294:	4619      	mov	r1, r3
 800a296:	f7f6 f879 	bl	800038c <__aeabi_fmul>
 800a29a:	9902      	ldr	r1, [sp, #8]
 800a29c:	4683      	mov	fp, r0
 800a29e:	4608      	mov	r0, r1
 800a2a0:	f7f6 f874 	bl	800038c <__aeabi_fmul>
 800a2a4:	4606      	mov	r6, r0
 800a2a6:	496c      	ldr	r1, [pc, #432]	@ (800a458 <__ieee754_powf+0x4c4>)
 800a2a8:	f7f6 f870 	bl	800038c <__aeabi_fmul>
 800a2ac:	496b      	ldr	r1, [pc, #428]	@ (800a45c <__ieee754_powf+0x4c8>)
 800a2ae:	f7f5 ff65 	bl	800017c <__addsf3>
 800a2b2:	4631      	mov	r1, r6
 800a2b4:	f7f6 f86a 	bl	800038c <__aeabi_fmul>
 800a2b8:	4969      	ldr	r1, [pc, #420]	@ (800a460 <__ieee754_powf+0x4cc>)
 800a2ba:	f7f5 ff5f 	bl	800017c <__addsf3>
 800a2be:	4631      	mov	r1, r6
 800a2c0:	f7f6 f864 	bl	800038c <__aeabi_fmul>
 800a2c4:	4967      	ldr	r1, [pc, #412]	@ (800a464 <__ieee754_powf+0x4d0>)
 800a2c6:	f7f5 ff59 	bl	800017c <__addsf3>
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	f7f6 f85e 	bl	800038c <__aeabi_fmul>
 800a2d0:	4965      	ldr	r1, [pc, #404]	@ (800a468 <__ieee754_powf+0x4d4>)
 800a2d2:	f7f5 ff53 	bl	800017c <__addsf3>
 800a2d6:	4631      	mov	r1, r6
 800a2d8:	f7f6 f858 	bl	800038c <__aeabi_fmul>
 800a2dc:	4963      	ldr	r1, [pc, #396]	@ (800a46c <__ieee754_powf+0x4d8>)
 800a2de:	f7f5 ff4d 	bl	800017c <__addsf3>
 800a2e2:	4631      	mov	r1, r6
 800a2e4:	4681      	mov	r9, r0
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	f7f6 f850 	bl	800038c <__aeabi_fmul>
 800a2ec:	4601      	mov	r1, r0
 800a2ee:	4648      	mov	r0, r9
 800a2f0:	f7f6 f84c 	bl	800038c <__aeabi_fmul>
 800a2f4:	4606      	mov	r6, r0
 800a2f6:	4641      	mov	r1, r8
 800a2f8:	9802      	ldr	r0, [sp, #8]
 800a2fa:	f7f5 ff3f 	bl	800017c <__addsf3>
 800a2fe:	4659      	mov	r1, fp
 800a300:	f7f6 f844 	bl	800038c <__aeabi_fmul>
 800a304:	4631      	mov	r1, r6
 800a306:	f7f5 ff39 	bl	800017c <__addsf3>
 800a30a:	4641      	mov	r1, r8
 800a30c:	4681      	mov	r9, r0
 800a30e:	4640      	mov	r0, r8
 800a310:	f7f6 f83c 	bl	800038c <__aeabi_fmul>
 800a314:	4956      	ldr	r1, [pc, #344]	@ (800a470 <__ieee754_powf+0x4dc>)
 800a316:	4682      	mov	sl, r0
 800a318:	f7f5 ff30 	bl	800017c <__addsf3>
 800a31c:	4649      	mov	r1, r9
 800a31e:	f7f5 ff2d 	bl	800017c <__addsf3>
 800a322:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800a326:	f026 060f 	bic.w	r6, r6, #15
 800a32a:	4631      	mov	r1, r6
 800a32c:	4640      	mov	r0, r8
 800a32e:	f7f6 f82d 	bl	800038c <__aeabi_fmul>
 800a332:	494f      	ldr	r1, [pc, #316]	@ (800a470 <__ieee754_powf+0x4dc>)
 800a334:	4680      	mov	r8, r0
 800a336:	4630      	mov	r0, r6
 800a338:	f7f5 ff1e 	bl	8000178 <__aeabi_fsub>
 800a33c:	4651      	mov	r1, sl
 800a33e:	f7f5 ff1b 	bl	8000178 <__aeabi_fsub>
 800a342:	4601      	mov	r1, r0
 800a344:	4648      	mov	r0, r9
 800a346:	f7f5 ff17 	bl	8000178 <__aeabi_fsub>
 800a34a:	9902      	ldr	r1, [sp, #8]
 800a34c:	f7f6 f81e 	bl	800038c <__aeabi_fmul>
 800a350:	4631      	mov	r1, r6
 800a352:	4681      	mov	r9, r0
 800a354:	4658      	mov	r0, fp
 800a356:	f7f6 f819 	bl	800038c <__aeabi_fmul>
 800a35a:	4601      	mov	r1, r0
 800a35c:	4648      	mov	r0, r9
 800a35e:	f7f5 ff0d 	bl	800017c <__addsf3>
 800a362:	4682      	mov	sl, r0
 800a364:	4601      	mov	r1, r0
 800a366:	4640      	mov	r0, r8
 800a368:	f7f5 ff08 	bl	800017c <__addsf3>
 800a36c:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800a370:	f026 060f 	bic.w	r6, r6, #15
 800a374:	4630      	mov	r0, r6
 800a376:	493f      	ldr	r1, [pc, #252]	@ (800a474 <__ieee754_powf+0x4e0>)
 800a378:	f7f6 f808 	bl	800038c <__aeabi_fmul>
 800a37c:	4641      	mov	r1, r8
 800a37e:	4681      	mov	r9, r0
 800a380:	4630      	mov	r0, r6
 800a382:	f7f5 fef9 	bl	8000178 <__aeabi_fsub>
 800a386:	4601      	mov	r1, r0
 800a388:	4650      	mov	r0, sl
 800a38a:	f7f5 fef5 	bl	8000178 <__aeabi_fsub>
 800a38e:	493a      	ldr	r1, [pc, #232]	@ (800a478 <__ieee754_powf+0x4e4>)
 800a390:	f7f5 fffc 	bl	800038c <__aeabi_fmul>
 800a394:	4939      	ldr	r1, [pc, #228]	@ (800a47c <__ieee754_powf+0x4e8>)
 800a396:	4680      	mov	r8, r0
 800a398:	4630      	mov	r0, r6
 800a39a:	f7f5 fff7 	bl	800038c <__aeabi_fmul>
 800a39e:	4601      	mov	r1, r0
 800a3a0:	4640      	mov	r0, r8
 800a3a2:	f7f5 feeb 	bl	800017c <__addsf3>
 800a3a6:	4b36      	ldr	r3, [pc, #216]	@ (800a480 <__ieee754_powf+0x4ec>)
 800a3a8:	9a01      	ldr	r2, [sp, #4]
 800a3aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3ae:	f7f5 fee5 	bl	800017c <__addsf3>
 800a3b2:	9a05      	ldr	r2, [sp, #20]
 800a3b4:	4606      	mov	r6, r0
 800a3b6:	4610      	mov	r0, r2
 800a3b8:	f7f5 ff94 	bl	80002e4 <__aeabi_i2f>
 800a3bc:	4680      	mov	r8, r0
 800a3be:	4b31      	ldr	r3, [pc, #196]	@ (800a484 <__ieee754_powf+0x4f0>)
 800a3c0:	9a01      	ldr	r2, [sp, #4]
 800a3c2:	4631      	mov	r1, r6
 800a3c4:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 800a3c8:	4648      	mov	r0, r9
 800a3ca:	f7f5 fed7 	bl	800017c <__addsf3>
 800a3ce:	4651      	mov	r1, sl
 800a3d0:	f7f5 fed4 	bl	800017c <__addsf3>
 800a3d4:	4641      	mov	r1, r8
 800a3d6:	f7f5 fed1 	bl	800017c <__addsf3>
 800a3da:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800a3de:	f02b 0b0f 	bic.w	fp, fp, #15
 800a3e2:	4641      	mov	r1, r8
 800a3e4:	4658      	mov	r0, fp
 800a3e6:	f7f5 fec7 	bl	8000178 <__aeabi_fsub>
 800a3ea:	4651      	mov	r1, sl
 800a3ec:	f7f5 fec4 	bl	8000178 <__aeabi_fsub>
 800a3f0:	4649      	mov	r1, r9
 800a3f2:	e6a6      	b.n	800a142 <__ieee754_powf+0x1ae>
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	e6fa      	b.n	800a1ee <__ieee754_powf+0x25a>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e70b      	b.n	800a214 <__ieee754_powf+0x280>
 800a3fc:	d148      	bne.n	800a490 <__ieee754_powf+0x4fc>
 800a3fe:	4922      	ldr	r1, [pc, #136]	@ (800a488 <__ieee754_powf+0x4f4>)
 800a400:	4630      	mov	r0, r6
 800a402:	f7f5 febb 	bl	800017c <__addsf3>
 800a406:	4639      	mov	r1, r7
 800a408:	4681      	mov	r9, r0
 800a40a:	4620      	mov	r0, r4
 800a40c:	f7f5 feb4 	bl	8000178 <__aeabi_fsub>
 800a410:	4601      	mov	r1, r0
 800a412:	4648      	mov	r0, r9
 800a414:	f7f6 f976 	bl	8000704 <__aeabi_fcmpgt>
 800a418:	2800      	cmp	r0, #0
 800a41a:	f47f aec7 	bne.w	800a1ac <__ieee754_powf+0x218>
 800a41e:	2386      	movs	r3, #134	@ 0x86
 800a420:	e03b      	b.n	800a49a <__ieee754_powf+0x506>
 800a422:	4a1a      	ldr	r2, [pc, #104]	@ (800a48c <__ieee754_powf+0x4f8>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d907      	bls.n	800a438 <__ieee754_powf+0x4a4>
 800a428:	2100      	movs	r1, #0
 800a42a:	4628      	mov	r0, r5
 800a42c:	f7f6 f94c 	bl	80006c8 <__aeabi_fcmplt>
 800a430:	3800      	subs	r0, #0
 800a432:	bf18      	it	ne
 800a434:	2001      	movne	r0, #1
 800a436:	e645      	b.n	800a0c4 <__ieee754_powf+0x130>
 800a438:	d12a      	bne.n	800a490 <__ieee754_powf+0x4fc>
 800a43a:	4639      	mov	r1, r7
 800a43c:	f7f5 fe9c 	bl	8000178 <__aeabi_fsub>
 800a440:	4631      	mov	r1, r6
 800a442:	f7f6 f955 	bl	80006f0 <__aeabi_fcmpge>
 800a446:	2800      	cmp	r0, #0
 800a448:	d0e9      	beq.n	800a41e <__ieee754_powf+0x48a>
 800a44a:	e7ed      	b.n	800a428 <__ieee754_powf+0x494>
 800a44c:	001cc471 	.word	0x001cc471
 800a450:	005db3d6 	.word	0x005db3d6
 800a454:	0800b668 	.word	0x0800b668
 800a458:	3e53f142 	.word	0x3e53f142
 800a45c:	3e6c3255 	.word	0x3e6c3255
 800a460:	3e8ba305 	.word	0x3e8ba305
 800a464:	3eaaaaab 	.word	0x3eaaaaab
 800a468:	3edb6db7 	.word	0x3edb6db7
 800a46c:	3f19999a 	.word	0x3f19999a
 800a470:	40400000 	.word	0x40400000
 800a474:	3f763800 	.word	0x3f763800
 800a478:	3f76384f 	.word	0x3f76384f
 800a47c:	369dc3a0 	.word	0x369dc3a0
 800a480:	0800b658 	.word	0x0800b658
 800a484:	0800b660 	.word	0x0800b660
 800a488:	3338aa3c 	.word	0x3338aa3c
 800a48c:	43160000 	.word	0x43160000
 800a490:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800a494:	f240 809b 	bls.w	800a5ce <__ieee754_powf+0x63a>
 800a498:	15db      	asrs	r3, r3, #23
 800a49a:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 800a49e:	3b7e      	subs	r3, #126	@ 0x7e
 800a4a0:	411c      	asrs	r4, r3
 800a4a2:	4444      	add	r4, r8
 800a4a4:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 800a4a8:	4961      	ldr	r1, [pc, #388]	@ (800a630 <__ieee754_powf+0x69c>)
 800a4aa:	3b7f      	subs	r3, #127	@ 0x7f
 800a4ac:	4119      	asrs	r1, r3
 800a4ae:	4021      	ands	r1, r4
 800a4b0:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800a4b4:	f1c3 0317 	rsb	r3, r3, #23
 800a4b8:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 800a4bc:	4638      	mov	r0, r7
 800a4be:	411c      	asrs	r4, r3
 800a4c0:	f1b8 0f00 	cmp.w	r8, #0
 800a4c4:	bfb8      	it	lt
 800a4c6:	4264      	neglt	r4, r4
 800a4c8:	f7f5 fe56 	bl	8000178 <__aeabi_fsub>
 800a4cc:	4607      	mov	r7, r0
 800a4ce:	4631      	mov	r1, r6
 800a4d0:	4638      	mov	r0, r7
 800a4d2:	f7f5 fe53 	bl	800017c <__addsf3>
 800a4d6:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 800a4da:	f028 080f 	bic.w	r8, r8, #15
 800a4de:	4640      	mov	r0, r8
 800a4e0:	4954      	ldr	r1, [pc, #336]	@ (800a634 <__ieee754_powf+0x6a0>)
 800a4e2:	f7f5 ff53 	bl	800038c <__aeabi_fmul>
 800a4e6:	4639      	mov	r1, r7
 800a4e8:	4681      	mov	r9, r0
 800a4ea:	4640      	mov	r0, r8
 800a4ec:	f7f5 fe44 	bl	8000178 <__aeabi_fsub>
 800a4f0:	4601      	mov	r1, r0
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	f7f5 fe40 	bl	8000178 <__aeabi_fsub>
 800a4f8:	494f      	ldr	r1, [pc, #316]	@ (800a638 <__ieee754_powf+0x6a4>)
 800a4fa:	f7f5 ff47 	bl	800038c <__aeabi_fmul>
 800a4fe:	494f      	ldr	r1, [pc, #316]	@ (800a63c <__ieee754_powf+0x6a8>)
 800a500:	4606      	mov	r6, r0
 800a502:	4640      	mov	r0, r8
 800a504:	f7f5 ff42 	bl	800038c <__aeabi_fmul>
 800a508:	4601      	mov	r1, r0
 800a50a:	4630      	mov	r0, r6
 800a50c:	f7f5 fe36 	bl	800017c <__addsf3>
 800a510:	4607      	mov	r7, r0
 800a512:	4601      	mov	r1, r0
 800a514:	4648      	mov	r0, r9
 800a516:	f7f5 fe31 	bl	800017c <__addsf3>
 800a51a:	4649      	mov	r1, r9
 800a51c:	4606      	mov	r6, r0
 800a51e:	f7f5 fe2b 	bl	8000178 <__aeabi_fsub>
 800a522:	4601      	mov	r1, r0
 800a524:	4638      	mov	r0, r7
 800a526:	f7f5 fe27 	bl	8000178 <__aeabi_fsub>
 800a52a:	4631      	mov	r1, r6
 800a52c:	4680      	mov	r8, r0
 800a52e:	4630      	mov	r0, r6
 800a530:	f7f5 ff2c 	bl	800038c <__aeabi_fmul>
 800a534:	4607      	mov	r7, r0
 800a536:	4942      	ldr	r1, [pc, #264]	@ (800a640 <__ieee754_powf+0x6ac>)
 800a538:	f7f5 ff28 	bl	800038c <__aeabi_fmul>
 800a53c:	4941      	ldr	r1, [pc, #260]	@ (800a644 <__ieee754_powf+0x6b0>)
 800a53e:	f7f5 fe1b 	bl	8000178 <__aeabi_fsub>
 800a542:	4639      	mov	r1, r7
 800a544:	f7f5 ff22 	bl	800038c <__aeabi_fmul>
 800a548:	493f      	ldr	r1, [pc, #252]	@ (800a648 <__ieee754_powf+0x6b4>)
 800a54a:	f7f5 fe17 	bl	800017c <__addsf3>
 800a54e:	4639      	mov	r1, r7
 800a550:	f7f5 ff1c 	bl	800038c <__aeabi_fmul>
 800a554:	493d      	ldr	r1, [pc, #244]	@ (800a64c <__ieee754_powf+0x6b8>)
 800a556:	f7f5 fe0f 	bl	8000178 <__aeabi_fsub>
 800a55a:	4639      	mov	r1, r7
 800a55c:	f7f5 ff16 	bl	800038c <__aeabi_fmul>
 800a560:	493b      	ldr	r1, [pc, #236]	@ (800a650 <__ieee754_powf+0x6bc>)
 800a562:	f7f5 fe0b 	bl	800017c <__addsf3>
 800a566:	4639      	mov	r1, r7
 800a568:	f7f5 ff10 	bl	800038c <__aeabi_fmul>
 800a56c:	4601      	mov	r1, r0
 800a56e:	4630      	mov	r0, r6
 800a570:	f7f5 fe02 	bl	8000178 <__aeabi_fsub>
 800a574:	4607      	mov	r7, r0
 800a576:	4601      	mov	r1, r0
 800a578:	4630      	mov	r0, r6
 800a57a:	f7f5 ff07 	bl	800038c <__aeabi_fmul>
 800a57e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800a582:	4681      	mov	r9, r0
 800a584:	4638      	mov	r0, r7
 800a586:	f7f5 fdf7 	bl	8000178 <__aeabi_fsub>
 800a58a:	4601      	mov	r1, r0
 800a58c:	4648      	mov	r0, r9
 800a58e:	f7f5 ffb1 	bl	80004f4 <__aeabi_fdiv>
 800a592:	4641      	mov	r1, r8
 800a594:	4607      	mov	r7, r0
 800a596:	4630      	mov	r0, r6
 800a598:	f7f5 fef8 	bl	800038c <__aeabi_fmul>
 800a59c:	4641      	mov	r1, r8
 800a59e:	f7f5 fded 	bl	800017c <__addsf3>
 800a5a2:	4601      	mov	r1, r0
 800a5a4:	4638      	mov	r0, r7
 800a5a6:	f7f5 fde7 	bl	8000178 <__aeabi_fsub>
 800a5aa:	4631      	mov	r1, r6
 800a5ac:	f7f5 fde4 	bl	8000178 <__aeabi_fsub>
 800a5b0:	4601      	mov	r1, r0
 800a5b2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a5b6:	f7f5 fddf 	bl	8000178 <__aeabi_fsub>
 800a5ba:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800a5be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a5c2:	da06      	bge.n	800a5d2 <__ieee754_powf+0x63e>
 800a5c4:	4621      	mov	r1, r4
 800a5c6:	f000 f9af 	bl	800a928 <scalbnf>
 800a5ca:	4629      	mov	r1, r5
 800a5cc:	e549      	b.n	800a062 <__ieee754_powf+0xce>
 800a5ce:	2400      	movs	r4, #0
 800a5d0:	e77d      	b.n	800a4ce <__ieee754_powf+0x53a>
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	e7f9      	b.n	800a5ca <__ieee754_powf+0x636>
 800a5d6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800a5da:	e536      	b.n	800a04a <__ieee754_powf+0xb6>
 800a5dc:	4639      	mov	r1, r7
 800a5de:	e534      	b.n	800a04a <__ieee754_powf+0xb6>
 800a5e0:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800a5e4:	f43f ad23 	beq.w	800a02e <__ieee754_powf+0x9a>
 800a5e8:	2502      	movs	r5, #2
 800a5ea:	4648      	mov	r0, r9
 800a5ec:	f000 f998 	bl	800a920 <fabsf>
 800a5f0:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800a5f4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800a5f8:	46c2      	mov	sl, r8
 800a5fa:	4601      	mov	r1, r0
 800a5fc:	d003      	beq.n	800a606 <__ieee754_powf+0x672>
 800a5fe:	f1b8 0f00 	cmp.w	r8, #0
 800a602:	f47f ad43 	bne.w	800a08c <__ieee754_powf+0xf8>
 800a606:	2c00      	cmp	r4, #0
 800a608:	da04      	bge.n	800a614 <__ieee754_powf+0x680>
 800a60a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a60e:	f7f5 ff71 	bl	80004f4 <__aeabi_fdiv>
 800a612:	4601      	mov	r1, r0
 800a614:	2e00      	cmp	r6, #0
 800a616:	f6bf ad18 	bge.w	800a04a <__ieee754_powf+0xb6>
 800a61a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800a61e:	ea58 0805 	orrs.w	r8, r8, r5
 800a622:	f47f ad2e 	bne.w	800a082 <__ieee754_powf+0xee>
 800a626:	4608      	mov	r0, r1
 800a628:	f7f5 fda6 	bl	8000178 <__aeabi_fsub>
 800a62c:	4601      	mov	r1, r0
 800a62e:	e4f8      	b.n	800a022 <__ieee754_powf+0x8e>
 800a630:	ff800000 	.word	0xff800000
 800a634:	3f317200 	.word	0x3f317200
 800a638:	3f317218 	.word	0x3f317218
 800a63c:	35bfbe8c 	.word	0x35bfbe8c
 800a640:	3331bb4c 	.word	0x3331bb4c
 800a644:	35ddea0e 	.word	0x35ddea0e
 800a648:	388ab355 	.word	0x388ab355
 800a64c:	3b360b61 	.word	0x3b360b61
 800a650:	3e2aaaab 	.word	0x3e2aaaab

0800a654 <__ieee754_rem_pio2f>:
 800a654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a658:	4aa4      	ldr	r2, [pc, #656]	@ (800a8ec <__ieee754_rem_pio2f+0x298>)
 800a65a:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800a65e:	4590      	cmp	r8, r2
 800a660:	460c      	mov	r4, r1
 800a662:	4682      	mov	sl, r0
 800a664:	b087      	sub	sp, #28
 800a666:	d804      	bhi.n	800a672 <__ieee754_rem_pio2f+0x1e>
 800a668:	2300      	movs	r3, #0
 800a66a:	6008      	str	r0, [r1, #0]
 800a66c:	604b      	str	r3, [r1, #4]
 800a66e:	2500      	movs	r5, #0
 800a670:	e01d      	b.n	800a6ae <__ieee754_rem_pio2f+0x5a>
 800a672:	4a9f      	ldr	r2, [pc, #636]	@ (800a8f0 <__ieee754_rem_pio2f+0x29c>)
 800a674:	4590      	cmp	r8, r2
 800a676:	d84f      	bhi.n	800a718 <__ieee754_rem_pio2f+0xc4>
 800a678:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800a67c:	2800      	cmp	r0, #0
 800a67e:	499d      	ldr	r1, [pc, #628]	@ (800a8f4 <__ieee754_rem_pio2f+0x2a0>)
 800a680:	4f9d      	ldr	r7, [pc, #628]	@ (800a8f8 <__ieee754_rem_pio2f+0x2a4>)
 800a682:	f025 050f 	bic.w	r5, r5, #15
 800a686:	dd24      	ble.n	800a6d2 <__ieee754_rem_pio2f+0x7e>
 800a688:	f7f5 fd76 	bl	8000178 <__aeabi_fsub>
 800a68c:	42bd      	cmp	r5, r7
 800a68e:	4606      	mov	r6, r0
 800a690:	d011      	beq.n	800a6b6 <__ieee754_rem_pio2f+0x62>
 800a692:	499a      	ldr	r1, [pc, #616]	@ (800a8fc <__ieee754_rem_pio2f+0x2a8>)
 800a694:	f7f5 fd70 	bl	8000178 <__aeabi_fsub>
 800a698:	4601      	mov	r1, r0
 800a69a:	4605      	mov	r5, r0
 800a69c:	4630      	mov	r0, r6
 800a69e:	f7f5 fd6b 	bl	8000178 <__aeabi_fsub>
 800a6a2:	4996      	ldr	r1, [pc, #600]	@ (800a8fc <__ieee754_rem_pio2f+0x2a8>)
 800a6a4:	f7f5 fd68 	bl	8000178 <__aeabi_fsub>
 800a6a8:	6025      	str	r5, [r4, #0]
 800a6aa:	2501      	movs	r5, #1
 800a6ac:	6060      	str	r0, [r4, #4]
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	b007      	add	sp, #28
 800a6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b6:	4992      	ldr	r1, [pc, #584]	@ (800a900 <__ieee754_rem_pio2f+0x2ac>)
 800a6b8:	f7f5 fd5e 	bl	8000178 <__aeabi_fsub>
 800a6bc:	4991      	ldr	r1, [pc, #580]	@ (800a904 <__ieee754_rem_pio2f+0x2b0>)
 800a6be:	4606      	mov	r6, r0
 800a6c0:	f7f5 fd5a 	bl	8000178 <__aeabi_fsub>
 800a6c4:	4601      	mov	r1, r0
 800a6c6:	4605      	mov	r5, r0
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f7f5 fd55 	bl	8000178 <__aeabi_fsub>
 800a6ce:	498d      	ldr	r1, [pc, #564]	@ (800a904 <__ieee754_rem_pio2f+0x2b0>)
 800a6d0:	e7e8      	b.n	800a6a4 <__ieee754_rem_pio2f+0x50>
 800a6d2:	f7f5 fd53 	bl	800017c <__addsf3>
 800a6d6:	42bd      	cmp	r5, r7
 800a6d8:	4606      	mov	r6, r0
 800a6da:	d00f      	beq.n	800a6fc <__ieee754_rem_pio2f+0xa8>
 800a6dc:	4987      	ldr	r1, [pc, #540]	@ (800a8fc <__ieee754_rem_pio2f+0x2a8>)
 800a6de:	f7f5 fd4d 	bl	800017c <__addsf3>
 800a6e2:	4601      	mov	r1, r0
 800a6e4:	4605      	mov	r5, r0
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	f7f5 fd46 	bl	8000178 <__aeabi_fsub>
 800a6ec:	4983      	ldr	r1, [pc, #524]	@ (800a8fc <__ieee754_rem_pio2f+0x2a8>)
 800a6ee:	f7f5 fd45 	bl	800017c <__addsf3>
 800a6f2:	6025      	str	r5, [r4, #0]
 800a6f4:	6060      	str	r0, [r4, #4]
 800a6f6:	f04f 35ff 	mov.w	r5, #4294967295
 800a6fa:	e7d8      	b.n	800a6ae <__ieee754_rem_pio2f+0x5a>
 800a6fc:	4980      	ldr	r1, [pc, #512]	@ (800a900 <__ieee754_rem_pio2f+0x2ac>)
 800a6fe:	f7f5 fd3d 	bl	800017c <__addsf3>
 800a702:	4980      	ldr	r1, [pc, #512]	@ (800a904 <__ieee754_rem_pio2f+0x2b0>)
 800a704:	4606      	mov	r6, r0
 800a706:	f7f5 fd39 	bl	800017c <__addsf3>
 800a70a:	4601      	mov	r1, r0
 800a70c:	4605      	mov	r5, r0
 800a70e:	4630      	mov	r0, r6
 800a710:	f7f5 fd32 	bl	8000178 <__aeabi_fsub>
 800a714:	497b      	ldr	r1, [pc, #492]	@ (800a904 <__ieee754_rem_pio2f+0x2b0>)
 800a716:	e7ea      	b.n	800a6ee <__ieee754_rem_pio2f+0x9a>
 800a718:	4a7b      	ldr	r2, [pc, #492]	@ (800a908 <__ieee754_rem_pio2f+0x2b4>)
 800a71a:	4590      	cmp	r8, r2
 800a71c:	f200 8095 	bhi.w	800a84a <__ieee754_rem_pio2f+0x1f6>
 800a720:	f000 f8fe 	bl	800a920 <fabsf>
 800a724:	4979      	ldr	r1, [pc, #484]	@ (800a90c <__ieee754_rem_pio2f+0x2b8>)
 800a726:	4606      	mov	r6, r0
 800a728:	f7f5 fe30 	bl	800038c <__aeabi_fmul>
 800a72c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800a730:	f7f5 fd24 	bl	800017c <__addsf3>
 800a734:	f7f6 f806 	bl	8000744 <__aeabi_f2iz>
 800a738:	4605      	mov	r5, r0
 800a73a:	f7f5 fdd3 	bl	80002e4 <__aeabi_i2f>
 800a73e:	496d      	ldr	r1, [pc, #436]	@ (800a8f4 <__ieee754_rem_pio2f+0x2a0>)
 800a740:	4681      	mov	r9, r0
 800a742:	f7f5 fe23 	bl	800038c <__aeabi_fmul>
 800a746:	4601      	mov	r1, r0
 800a748:	4630      	mov	r0, r6
 800a74a:	f7f5 fd15 	bl	8000178 <__aeabi_fsub>
 800a74e:	496b      	ldr	r1, [pc, #428]	@ (800a8fc <__ieee754_rem_pio2f+0x2a8>)
 800a750:	4607      	mov	r7, r0
 800a752:	4648      	mov	r0, r9
 800a754:	f7f5 fe1a 	bl	800038c <__aeabi_fmul>
 800a758:	2d1f      	cmp	r5, #31
 800a75a:	4606      	mov	r6, r0
 800a75c:	dc0e      	bgt.n	800a77c <__ieee754_rem_pio2f+0x128>
 800a75e:	4a6c      	ldr	r2, [pc, #432]	@ (800a910 <__ieee754_rem_pio2f+0x2bc>)
 800a760:	1e69      	subs	r1, r5, #1
 800a762:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a766:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 800a76a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a76e:	4293      	cmp	r3, r2
 800a770:	d004      	beq.n	800a77c <__ieee754_rem_pio2f+0x128>
 800a772:	4631      	mov	r1, r6
 800a774:	4638      	mov	r0, r7
 800a776:	f7f5 fcff 	bl	8000178 <__aeabi_fsub>
 800a77a:	e00b      	b.n	800a794 <__ieee754_rem_pio2f+0x140>
 800a77c:	4631      	mov	r1, r6
 800a77e:	4638      	mov	r0, r7
 800a780:	f7f5 fcfa 	bl	8000178 <__aeabi_fsub>
 800a784:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a788:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 800a78c:	2b08      	cmp	r3, #8
 800a78e:	ea4f 5be8 	mov.w	fp, r8, asr #23
 800a792:	dc01      	bgt.n	800a798 <__ieee754_rem_pio2f+0x144>
 800a794:	6020      	str	r0, [r4, #0]
 800a796:	e026      	b.n	800a7e6 <__ieee754_rem_pio2f+0x192>
 800a798:	4959      	ldr	r1, [pc, #356]	@ (800a900 <__ieee754_rem_pio2f+0x2ac>)
 800a79a:	4648      	mov	r0, r9
 800a79c:	f7f5 fdf6 	bl	800038c <__aeabi_fmul>
 800a7a0:	4606      	mov	r6, r0
 800a7a2:	4601      	mov	r1, r0
 800a7a4:	4638      	mov	r0, r7
 800a7a6:	f7f5 fce7 	bl	8000178 <__aeabi_fsub>
 800a7aa:	4601      	mov	r1, r0
 800a7ac:	4680      	mov	r8, r0
 800a7ae:	4638      	mov	r0, r7
 800a7b0:	f7f5 fce2 	bl	8000178 <__aeabi_fsub>
 800a7b4:	4631      	mov	r1, r6
 800a7b6:	f7f5 fcdf 	bl	8000178 <__aeabi_fsub>
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	4951      	ldr	r1, [pc, #324]	@ (800a904 <__ieee754_rem_pio2f+0x2b0>)
 800a7be:	4648      	mov	r0, r9
 800a7c0:	f7f5 fde4 	bl	800038c <__aeabi_fmul>
 800a7c4:	4631      	mov	r1, r6
 800a7c6:	f7f5 fcd7 	bl	8000178 <__aeabi_fsub>
 800a7ca:	4601      	mov	r1, r0
 800a7cc:	4606      	mov	r6, r0
 800a7ce:	4640      	mov	r0, r8
 800a7d0:	f7f5 fcd2 	bl	8000178 <__aeabi_fsub>
 800a7d4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a7d8:	ebab 0b03 	sub.w	fp, fp, r3
 800a7dc:	f1bb 0f19 	cmp.w	fp, #25
 800a7e0:	dc18      	bgt.n	800a814 <__ieee754_rem_pio2f+0x1c0>
 800a7e2:	4647      	mov	r7, r8
 800a7e4:	6020      	str	r0, [r4, #0]
 800a7e6:	f8d4 8000 	ldr.w	r8, [r4]
 800a7ea:	4638      	mov	r0, r7
 800a7ec:	4641      	mov	r1, r8
 800a7ee:	f7f5 fcc3 	bl	8000178 <__aeabi_fsub>
 800a7f2:	4631      	mov	r1, r6
 800a7f4:	f7f5 fcc0 	bl	8000178 <__aeabi_fsub>
 800a7f8:	f1ba 0f00 	cmp.w	sl, #0
 800a7fc:	6060      	str	r0, [r4, #4]
 800a7fe:	f6bf af56 	bge.w	800a6ae <__ieee754_rem_pio2f+0x5a>
 800a802:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 800a806:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800a80a:	f8c4 8000 	str.w	r8, [r4]
 800a80e:	6060      	str	r0, [r4, #4]
 800a810:	426d      	negs	r5, r5
 800a812:	e74c      	b.n	800a6ae <__ieee754_rem_pio2f+0x5a>
 800a814:	493f      	ldr	r1, [pc, #252]	@ (800a914 <__ieee754_rem_pio2f+0x2c0>)
 800a816:	4648      	mov	r0, r9
 800a818:	f7f5 fdb8 	bl	800038c <__aeabi_fmul>
 800a81c:	4606      	mov	r6, r0
 800a81e:	4601      	mov	r1, r0
 800a820:	4640      	mov	r0, r8
 800a822:	f7f5 fca9 	bl	8000178 <__aeabi_fsub>
 800a826:	4601      	mov	r1, r0
 800a828:	4607      	mov	r7, r0
 800a82a:	4640      	mov	r0, r8
 800a82c:	f7f5 fca4 	bl	8000178 <__aeabi_fsub>
 800a830:	4631      	mov	r1, r6
 800a832:	f7f5 fca1 	bl	8000178 <__aeabi_fsub>
 800a836:	4606      	mov	r6, r0
 800a838:	4937      	ldr	r1, [pc, #220]	@ (800a918 <__ieee754_rem_pio2f+0x2c4>)
 800a83a:	4648      	mov	r0, r9
 800a83c:	f7f5 fda6 	bl	800038c <__aeabi_fmul>
 800a840:	4631      	mov	r1, r6
 800a842:	f7f5 fc99 	bl	8000178 <__aeabi_fsub>
 800a846:	4606      	mov	r6, r0
 800a848:	e793      	b.n	800a772 <__ieee754_rem_pio2f+0x11e>
 800a84a:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800a84e:	d305      	bcc.n	800a85c <__ieee754_rem_pio2f+0x208>
 800a850:	4601      	mov	r1, r0
 800a852:	f7f5 fc91 	bl	8000178 <__aeabi_fsub>
 800a856:	6060      	str	r0, [r4, #4]
 800a858:	6020      	str	r0, [r4, #0]
 800a85a:	e708      	b.n	800a66e <__ieee754_rem_pio2f+0x1a>
 800a85c:	ea4f 56e8 	mov.w	r6, r8, asr #23
 800a860:	3e86      	subs	r6, #134	@ 0x86
 800a862:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800a866:	4640      	mov	r0, r8
 800a868:	f7f5 ff6c 	bl	8000744 <__aeabi_f2iz>
 800a86c:	f7f5 fd3a 	bl	80002e4 <__aeabi_i2f>
 800a870:	4601      	mov	r1, r0
 800a872:	9003      	str	r0, [sp, #12]
 800a874:	4640      	mov	r0, r8
 800a876:	f7f5 fc7f 	bl	8000178 <__aeabi_fsub>
 800a87a:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800a87e:	f7f5 fd85 	bl	800038c <__aeabi_fmul>
 800a882:	4607      	mov	r7, r0
 800a884:	f7f5 ff5e 	bl	8000744 <__aeabi_f2iz>
 800a888:	f7f5 fd2c 	bl	80002e4 <__aeabi_i2f>
 800a88c:	4601      	mov	r1, r0
 800a88e:	9004      	str	r0, [sp, #16]
 800a890:	4605      	mov	r5, r0
 800a892:	4638      	mov	r0, r7
 800a894:	f7f5 fc70 	bl	8000178 <__aeabi_fsub>
 800a898:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800a89c:	f7f5 fd76 	bl	800038c <__aeabi_fmul>
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	9005      	str	r0, [sp, #20]
 800a8a4:	f7f5 ff06 	bl	80006b4 <__aeabi_fcmpeq>
 800a8a8:	b1f0      	cbz	r0, 800a8e8 <__ieee754_rem_pio2f+0x294>
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	4628      	mov	r0, r5
 800a8ae:	f7f5 ff01 	bl	80006b4 <__aeabi_fcmpeq>
 800a8b2:	2800      	cmp	r0, #0
 800a8b4:	bf14      	ite	ne
 800a8b6:	2301      	movne	r3, #1
 800a8b8:	2302      	moveq	r3, #2
 800a8ba:	4a18      	ldr	r2, [pc, #96]	@ (800a91c <__ieee754_rem_pio2f+0x2c8>)
 800a8bc:	4621      	mov	r1, r4
 800a8be:	9201      	str	r2, [sp, #4]
 800a8c0:	2202      	movs	r2, #2
 800a8c2:	a803      	add	r0, sp, #12
 800a8c4:	9200      	str	r2, [sp, #0]
 800a8c6:	4632      	mov	r2, r6
 800a8c8:	f000 f898 	bl	800a9fc <__kernel_rem_pio2f>
 800a8cc:	f1ba 0f00 	cmp.w	sl, #0
 800a8d0:	4605      	mov	r5, r0
 800a8d2:	f6bf aeec 	bge.w	800a6ae <__ieee754_rem_pio2f+0x5a>
 800a8d6:	6823      	ldr	r3, [r4, #0]
 800a8d8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a8dc:	6023      	str	r3, [r4, #0]
 800a8de:	6863      	ldr	r3, [r4, #4]
 800a8e0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a8e4:	6063      	str	r3, [r4, #4]
 800a8e6:	e793      	b.n	800a810 <__ieee754_rem_pio2f+0x1bc>
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	e7e6      	b.n	800a8ba <__ieee754_rem_pio2f+0x266>
 800a8ec:	3f490fd8 	.word	0x3f490fd8
 800a8f0:	4016cbe3 	.word	0x4016cbe3
 800a8f4:	3fc90f80 	.word	0x3fc90f80
 800a8f8:	3fc90fd0 	.word	0x3fc90fd0
 800a8fc:	37354443 	.word	0x37354443
 800a900:	37354400 	.word	0x37354400
 800a904:	2e85a308 	.word	0x2e85a308
 800a908:	43490f80 	.word	0x43490f80
 800a90c:	3f22f984 	.word	0x3f22f984
 800a910:	0800b670 	.word	0x0800b670
 800a914:	2e85a300 	.word	0x2e85a300
 800a918:	248d3132 	.word	0x248d3132
 800a91c:	0800b6f0 	.word	0x0800b6f0

0800a920 <fabsf>:
 800a920:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800a924:	4770      	bx	lr
	...

0800a928 <scalbnf>:
 800a928:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800a92c:	b538      	push	{r3, r4, r5, lr}
 800a92e:	4603      	mov	r3, r0
 800a930:	460d      	mov	r5, r1
 800a932:	4604      	mov	r4, r0
 800a934:	d02e      	beq.n	800a994 <scalbnf+0x6c>
 800a936:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a93a:	d304      	bcc.n	800a946 <scalbnf+0x1e>
 800a93c:	4601      	mov	r1, r0
 800a93e:	f7f5 fc1d 	bl	800017c <__addsf3>
 800a942:	4603      	mov	r3, r0
 800a944:	e026      	b.n	800a994 <scalbnf+0x6c>
 800a946:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800a94a:	d118      	bne.n	800a97e <scalbnf+0x56>
 800a94c:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800a950:	f7f5 fd1c 	bl	800038c <__aeabi_fmul>
 800a954:	4a17      	ldr	r2, [pc, #92]	@ (800a9b4 <scalbnf+0x8c>)
 800a956:	4603      	mov	r3, r0
 800a958:	4295      	cmp	r5, r2
 800a95a:	db0c      	blt.n	800a976 <scalbnf+0x4e>
 800a95c:	4604      	mov	r4, r0
 800a95e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800a962:	3a19      	subs	r2, #25
 800a964:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a968:	428d      	cmp	r5, r1
 800a96a:	dd0a      	ble.n	800a982 <scalbnf+0x5a>
 800a96c:	4912      	ldr	r1, [pc, #72]	@ (800a9b8 <scalbnf+0x90>)
 800a96e:	4618      	mov	r0, r3
 800a970:	f361 001e 	bfi	r0, r1, #0, #31
 800a974:	e000      	b.n	800a978 <scalbnf+0x50>
 800a976:	4911      	ldr	r1, [pc, #68]	@ (800a9bc <scalbnf+0x94>)
 800a978:	f7f5 fd08 	bl	800038c <__aeabi_fmul>
 800a97c:	e7e1      	b.n	800a942 <scalbnf+0x1a>
 800a97e:	0dd2      	lsrs	r2, r2, #23
 800a980:	e7f0      	b.n	800a964 <scalbnf+0x3c>
 800a982:	1951      	adds	r1, r2, r5
 800a984:	29fe      	cmp	r1, #254	@ 0xfe
 800a986:	dcf1      	bgt.n	800a96c <scalbnf+0x44>
 800a988:	2900      	cmp	r1, #0
 800a98a:	dd05      	ble.n	800a998 <scalbnf+0x70>
 800a98c:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800a990:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800a994:	4618      	mov	r0, r3
 800a996:	bd38      	pop	{r3, r4, r5, pc}
 800a998:	f111 0f16 	cmn.w	r1, #22
 800a99c:	da01      	bge.n	800a9a2 <scalbnf+0x7a>
 800a99e:	4907      	ldr	r1, [pc, #28]	@ (800a9bc <scalbnf+0x94>)
 800a9a0:	e7e5      	b.n	800a96e <scalbnf+0x46>
 800a9a2:	f101 0019 	add.w	r0, r1, #25
 800a9a6:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800a9aa:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 800a9ae:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800a9b2:	e7e1      	b.n	800a978 <scalbnf+0x50>
 800a9b4:	ffff3cb0 	.word	0xffff3cb0
 800a9b8:	7149f2ca 	.word	0x7149f2ca
 800a9bc:	0da24260 	.word	0x0da24260

0800a9c0 <with_errnof>:
 800a9c0:	b538      	push	{r3, r4, r5, lr}
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	460d      	mov	r5, r1
 800a9c6:	f7fe f893 	bl	8008af0 <__errno>
 800a9ca:	6005      	str	r5, [r0, #0]
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	bd38      	pop	{r3, r4, r5, pc}

0800a9d0 <xflowf>:
 800a9d0:	b508      	push	{r3, lr}
 800a9d2:	b140      	cbz	r0, 800a9e6 <xflowf+0x16>
 800a9d4:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800a9d8:	f7f5 fcd8 	bl	800038c <__aeabi_fmul>
 800a9dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a9e0:	2122      	movs	r1, #34	@ 0x22
 800a9e2:	f7ff bfed 	b.w	800a9c0 <with_errnof>
 800a9e6:	4608      	mov	r0, r1
 800a9e8:	e7f6      	b.n	800a9d8 <xflowf+0x8>

0800a9ea <__math_uflowf>:
 800a9ea:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800a9ee:	f7ff bfef 	b.w	800a9d0 <xflowf>

0800a9f2 <__math_oflowf>:
 800a9f2:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800a9f6:	f7ff bfeb 	b.w	800a9d0 <xflowf>
	...

0800a9fc <__kernel_rem_pio2f>:
 800a9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa00:	b0db      	sub	sp, #364	@ 0x16c
 800aa02:	9202      	str	r2, [sp, #8]
 800aa04:	9304      	str	r3, [sp, #16]
 800aa06:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800aa08:	4bac      	ldr	r3, [pc, #688]	@ (800acbc <__kernel_rem_pio2f+0x2c0>)
 800aa0a:	9005      	str	r0, [sp, #20]
 800aa0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa10:	9100      	str	r1, [sp, #0]
 800aa12:	9301      	str	r3, [sp, #4]
 800aa14:	9b04      	ldr	r3, [sp, #16]
 800aa16:	3b01      	subs	r3, #1
 800aa18:	9303      	str	r3, [sp, #12]
 800aa1a:	9b02      	ldr	r3, [sp, #8]
 800aa1c:	1d1a      	adds	r2, r3, #4
 800aa1e:	f2c0 8099 	blt.w	800ab54 <__kernel_rem_pio2f+0x158>
 800aa22:	1edc      	subs	r4, r3, #3
 800aa24:	bf48      	it	mi
 800aa26:	1d1c      	addmi	r4, r3, #4
 800aa28:	10e4      	asrs	r4, r4, #3
 800aa2a:	2500      	movs	r5, #0
 800aa2c:	f04f 0b00 	mov.w	fp, #0
 800aa30:	1c67      	adds	r7, r4, #1
 800aa32:	00fb      	lsls	r3, r7, #3
 800aa34:	9306      	str	r3, [sp, #24]
 800aa36:	9b02      	ldr	r3, [sp, #8]
 800aa38:	9a03      	ldr	r2, [sp, #12]
 800aa3a:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800aa3e:	9b01      	ldr	r3, [sp, #4]
 800aa40:	eba4 0802 	sub.w	r8, r4, r2
 800aa44:	eb03 0902 	add.w	r9, r3, r2
 800aa48:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800aa4a:	ae1e      	add	r6, sp, #120	@ 0x78
 800aa4c:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 800aa50:	454d      	cmp	r5, r9
 800aa52:	f340 8081 	ble.w	800ab58 <__kernel_rem_pio2f+0x15c>
 800aa56:	9a04      	ldr	r2, [sp, #16]
 800aa58:	ab1e      	add	r3, sp, #120	@ 0x78
 800aa5a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800aa5e:	f04f 0900 	mov.w	r9, #0
 800aa62:	2300      	movs	r3, #0
 800aa64:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800aa68:	9a01      	ldr	r2, [sp, #4]
 800aa6a:	4591      	cmp	r9, r2
 800aa6c:	f340 809a 	ble.w	800aba4 <__kernel_rem_pio2f+0x1a8>
 800aa70:	4613      	mov	r3, r2
 800aa72:	aa0a      	add	r2, sp, #40	@ 0x28
 800aa74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa78:	9308      	str	r3, [sp, #32]
 800aa7a:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800aa7c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800aa80:	9c01      	ldr	r4, [sp, #4]
 800aa82:	9307      	str	r3, [sp, #28]
 800aa84:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800aa88:	4646      	mov	r6, r8
 800aa8a:	4625      	mov	r5, r4
 800aa8c:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 800aa90:	ab5a      	add	r3, sp, #360	@ 0x168
 800aa92:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800aa96:	f853 bc50 	ldr.w	fp, [r3, #-80]
 800aa9a:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800aa9e:	2d00      	cmp	r5, #0
 800aaa0:	f300 8085 	bgt.w	800abae <__kernel_rem_pio2f+0x1b2>
 800aaa4:	4639      	mov	r1, r7
 800aaa6:	4658      	mov	r0, fp
 800aaa8:	f7ff ff3e 	bl	800a928 <scalbnf>
 800aaac:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 800aab0:	4605      	mov	r5, r0
 800aab2:	f7f5 fc6b 	bl	800038c <__aeabi_fmul>
 800aab6:	f000 fa3f 	bl	800af38 <floorf>
 800aaba:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800aabe:	f7f5 fc65 	bl	800038c <__aeabi_fmul>
 800aac2:	4601      	mov	r1, r0
 800aac4:	4628      	mov	r0, r5
 800aac6:	f7f5 fb57 	bl	8000178 <__aeabi_fsub>
 800aaca:	4605      	mov	r5, r0
 800aacc:	f7f5 fe3a 	bl	8000744 <__aeabi_f2iz>
 800aad0:	4606      	mov	r6, r0
 800aad2:	f7f5 fc07 	bl	80002e4 <__aeabi_i2f>
 800aad6:	4601      	mov	r1, r0
 800aad8:	4628      	mov	r0, r5
 800aada:	f7f5 fb4d 	bl	8000178 <__aeabi_fsub>
 800aade:	2f00      	cmp	r7, #0
 800aae0:	4681      	mov	r9, r0
 800aae2:	f340 8081 	ble.w	800abe8 <__kernel_rem_pio2f+0x1ec>
 800aae6:	1e62      	subs	r2, r4, #1
 800aae8:	ab0a      	add	r3, sp, #40	@ 0x28
 800aaea:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800aaee:	f1c7 0108 	rsb	r1, r7, #8
 800aaf2:	fa45 f301 	asr.w	r3, r5, r1
 800aaf6:	441e      	add	r6, r3
 800aaf8:	408b      	lsls	r3, r1
 800aafa:	1aed      	subs	r5, r5, r3
 800aafc:	ab0a      	add	r3, sp, #40	@ 0x28
 800aafe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ab02:	f1c7 0307 	rsb	r3, r7, #7
 800ab06:	411d      	asrs	r5, r3
 800ab08:	2d00      	cmp	r5, #0
 800ab0a:	dd7a      	ble.n	800ac02 <__kernel_rem_pio2f+0x206>
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	4692      	mov	sl, r2
 800ab10:	3601      	adds	r6, #1
 800ab12:	4294      	cmp	r4, r2
 800ab14:	f300 80aa 	bgt.w	800ac6c <__kernel_rem_pio2f+0x270>
 800ab18:	2f00      	cmp	r7, #0
 800ab1a:	dd05      	ble.n	800ab28 <__kernel_rem_pio2f+0x12c>
 800ab1c:	2f01      	cmp	r7, #1
 800ab1e:	f000 80b6 	beq.w	800ac8e <__kernel_rem_pio2f+0x292>
 800ab22:	2f02      	cmp	r7, #2
 800ab24:	f000 80bd 	beq.w	800aca2 <__kernel_rem_pio2f+0x2a6>
 800ab28:	2d02      	cmp	r5, #2
 800ab2a:	d16a      	bne.n	800ac02 <__kernel_rem_pio2f+0x206>
 800ab2c:	4649      	mov	r1, r9
 800ab2e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800ab32:	f7f5 fb21 	bl	8000178 <__aeabi_fsub>
 800ab36:	4681      	mov	r9, r0
 800ab38:	f1ba 0f00 	cmp.w	sl, #0
 800ab3c:	d061      	beq.n	800ac02 <__kernel_rem_pio2f+0x206>
 800ab3e:	4639      	mov	r1, r7
 800ab40:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800ab44:	f7ff fef0 	bl	800a928 <scalbnf>
 800ab48:	4601      	mov	r1, r0
 800ab4a:	4648      	mov	r0, r9
 800ab4c:	f7f5 fb14 	bl	8000178 <__aeabi_fsub>
 800ab50:	4681      	mov	r9, r0
 800ab52:	e056      	b.n	800ac02 <__kernel_rem_pio2f+0x206>
 800ab54:	2400      	movs	r4, #0
 800ab56:	e768      	b.n	800aa2a <__kernel_rem_pio2f+0x2e>
 800ab58:	eb18 0f05 	cmn.w	r8, r5
 800ab5c:	d407      	bmi.n	800ab6e <__kernel_rem_pio2f+0x172>
 800ab5e:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800ab62:	f7f5 fbbf 	bl	80002e4 <__aeabi_i2f>
 800ab66:	f846 0b04 	str.w	r0, [r6], #4
 800ab6a:	3501      	adds	r5, #1
 800ab6c:	e770      	b.n	800aa50 <__kernel_rem_pio2f+0x54>
 800ab6e:	4658      	mov	r0, fp
 800ab70:	e7f9      	b.n	800ab66 <__kernel_rem_pio2f+0x16a>
 800ab72:	9307      	str	r3, [sp, #28]
 800ab74:	9b05      	ldr	r3, [sp, #20]
 800ab76:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 800ab7a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ab7e:	f7f5 fc05 	bl	800038c <__aeabi_fmul>
 800ab82:	4601      	mov	r1, r0
 800ab84:	4630      	mov	r0, r6
 800ab86:	f7f5 faf9 	bl	800017c <__addsf3>
 800ab8a:	4606      	mov	r6, r0
 800ab8c:	9b07      	ldr	r3, [sp, #28]
 800ab8e:	f108 0801 	add.w	r8, r8, #1
 800ab92:	9a03      	ldr	r2, [sp, #12]
 800ab94:	4590      	cmp	r8, r2
 800ab96:	ddec      	ble.n	800ab72 <__kernel_rem_pio2f+0x176>
 800ab98:	f84a 6b04 	str.w	r6, [sl], #4
 800ab9c:	f109 0901 	add.w	r9, r9, #1
 800aba0:	3504      	adds	r5, #4
 800aba2:	e761      	b.n	800aa68 <__kernel_rem_pio2f+0x6c>
 800aba4:	46ab      	mov	fp, r5
 800aba6:	461e      	mov	r6, r3
 800aba8:	f04f 0800 	mov.w	r8, #0
 800abac:	e7f1      	b.n	800ab92 <__kernel_rem_pio2f+0x196>
 800abae:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800abb2:	4658      	mov	r0, fp
 800abb4:	f7f5 fbea 	bl	800038c <__aeabi_fmul>
 800abb8:	f7f5 fdc4 	bl	8000744 <__aeabi_f2iz>
 800abbc:	f7f5 fb92 	bl	80002e4 <__aeabi_i2f>
 800abc0:	4649      	mov	r1, r9
 800abc2:	9009      	str	r0, [sp, #36]	@ 0x24
 800abc4:	f7f5 fbe2 	bl	800038c <__aeabi_fmul>
 800abc8:	4601      	mov	r1, r0
 800abca:	4658      	mov	r0, fp
 800abcc:	f7f5 fad4 	bl	8000178 <__aeabi_fsub>
 800abd0:	f7f5 fdb8 	bl	8000744 <__aeabi_f2iz>
 800abd4:	3d01      	subs	r5, #1
 800abd6:	f846 0b04 	str.w	r0, [r6], #4
 800abda:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 800abde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abe0:	f7f5 facc 	bl	800017c <__addsf3>
 800abe4:	4683      	mov	fp, r0
 800abe6:	e75a      	b.n	800aa9e <__kernel_rem_pio2f+0xa2>
 800abe8:	d105      	bne.n	800abf6 <__kernel_rem_pio2f+0x1fa>
 800abea:	1e63      	subs	r3, r4, #1
 800abec:	aa0a      	add	r2, sp, #40	@ 0x28
 800abee:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800abf2:	11ed      	asrs	r5, r5, #7
 800abf4:	e788      	b.n	800ab08 <__kernel_rem_pio2f+0x10c>
 800abf6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800abfa:	f7f5 fd79 	bl	80006f0 <__aeabi_fcmpge>
 800abfe:	4605      	mov	r5, r0
 800ac00:	bb90      	cbnz	r0, 800ac68 <__kernel_rem_pio2f+0x26c>
 800ac02:	2100      	movs	r1, #0
 800ac04:	4648      	mov	r0, r9
 800ac06:	f7f5 fd55 	bl	80006b4 <__aeabi_fcmpeq>
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	f000 8090 	beq.w	800ad30 <__kernel_rem_pio2f+0x334>
 800ac10:	2200      	movs	r2, #0
 800ac12:	1e63      	subs	r3, r4, #1
 800ac14:	9901      	ldr	r1, [sp, #4]
 800ac16:	428b      	cmp	r3, r1
 800ac18:	da4a      	bge.n	800acb0 <__kernel_rem_pio2f+0x2b4>
 800ac1a:	2a00      	cmp	r2, #0
 800ac1c:	d076      	beq.n	800ad0c <__kernel_rem_pio2f+0x310>
 800ac1e:	3c01      	subs	r4, #1
 800ac20:	ab0a      	add	r3, sp, #40	@ 0x28
 800ac22:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ac26:	3f08      	subs	r7, #8
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d0f8      	beq.n	800ac1e <__kernel_rem_pio2f+0x222>
 800ac2c:	4639      	mov	r1, r7
 800ac2e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800ac32:	f7ff fe79 	bl	800a928 <scalbnf>
 800ac36:	46a2      	mov	sl, r4
 800ac38:	4607      	mov	r7, r0
 800ac3a:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 800ac3e:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 800ac42:	f1ba 0f00 	cmp.w	sl, #0
 800ac46:	f280 80a1 	bge.w	800ad8c <__kernel_rem_pio2f+0x390>
 800ac4a:	4627      	mov	r7, r4
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	2f00      	cmp	r7, #0
 800ac50:	f2c0 80cb 	blt.w	800adea <__kernel_rem_pio2f+0x3ee>
 800ac54:	a946      	add	r1, sp, #280	@ 0x118
 800ac56:	4690      	mov	r8, r2
 800ac58:	f04f 0a00 	mov.w	sl, #0
 800ac5c:	4b18      	ldr	r3, [pc, #96]	@ (800acc0 <__kernel_rem_pio2f+0x2c4>)
 800ac5e:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800ac62:	eba4 0907 	sub.w	r9, r4, r7
 800ac66:	e0b4      	b.n	800add2 <__kernel_rem_pio2f+0x3d6>
 800ac68:	2502      	movs	r5, #2
 800ac6a:	e74f      	b.n	800ab0c <__kernel_rem_pio2f+0x110>
 800ac6c:	f858 3b04 	ldr.w	r3, [r8], #4
 800ac70:	f1ba 0f00 	cmp.w	sl, #0
 800ac74:	d108      	bne.n	800ac88 <__kernel_rem_pio2f+0x28c>
 800ac76:	b123      	cbz	r3, 800ac82 <__kernel_rem_pio2f+0x286>
 800ac78:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800ac7c:	f848 3c04 	str.w	r3, [r8, #-4]
 800ac80:	2301      	movs	r3, #1
 800ac82:	469a      	mov	sl, r3
 800ac84:	3201      	adds	r2, #1
 800ac86:	e744      	b.n	800ab12 <__kernel_rem_pio2f+0x116>
 800ac88:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800ac8c:	e7f6      	b.n	800ac7c <__kernel_rem_pio2f+0x280>
 800ac8e:	1e62      	subs	r2, r4, #1
 800ac90:	ab0a      	add	r3, sp, #40	@ 0x28
 800ac92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac9a:	a90a      	add	r1, sp, #40	@ 0x28
 800ac9c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800aca0:	e742      	b.n	800ab28 <__kernel_rem_pio2f+0x12c>
 800aca2:	1e62      	subs	r2, r4, #1
 800aca4:	ab0a      	add	r3, sp, #40	@ 0x28
 800aca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acaa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800acae:	e7f4      	b.n	800ac9a <__kernel_rem_pio2f+0x29e>
 800acb0:	a90a      	add	r1, sp, #40	@ 0x28
 800acb2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800acb6:	3b01      	subs	r3, #1
 800acb8:	430a      	orrs	r2, r1
 800acba:	e7ab      	b.n	800ac14 <__kernel_rem_pio2f+0x218>
 800acbc:	0800ba34 	.word	0x0800ba34
 800acc0:	0800ba08 	.word	0x0800ba08
 800acc4:	3301      	adds	r3, #1
 800acc6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800acca:	2900      	cmp	r1, #0
 800accc:	d0fa      	beq.n	800acc4 <__kernel_rem_pio2f+0x2c8>
 800acce:	9a04      	ldr	r2, [sp, #16]
 800acd0:	a91e      	add	r1, sp, #120	@ 0x78
 800acd2:	18a2      	adds	r2, r4, r2
 800acd4:	1c66      	adds	r6, r4, #1
 800acd6:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800acda:	441c      	add	r4, r3
 800acdc:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 800ace0:	42b4      	cmp	r4, r6
 800ace2:	f6ff aecf 	blt.w	800aa84 <__kernel_rem_pio2f+0x88>
 800ace6:	9b07      	ldr	r3, [sp, #28]
 800ace8:	46ab      	mov	fp, r5
 800acea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800acee:	f7f5 faf9 	bl	80002e4 <__aeabi_i2f>
 800acf2:	f04f 0a00 	mov.w	sl, #0
 800acf6:	f04f 0800 	mov.w	r8, #0
 800acfa:	6028      	str	r0, [r5, #0]
 800acfc:	9b03      	ldr	r3, [sp, #12]
 800acfe:	459a      	cmp	sl, r3
 800ad00:	dd07      	ble.n	800ad12 <__kernel_rem_pio2f+0x316>
 800ad02:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 800ad06:	3504      	adds	r5, #4
 800ad08:	3601      	adds	r6, #1
 800ad0a:	e7e9      	b.n	800ace0 <__kernel_rem_pio2f+0x2e4>
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	9a08      	ldr	r2, [sp, #32]
 800ad10:	e7d9      	b.n	800acc6 <__kernel_rem_pio2f+0x2ca>
 800ad12:	9b05      	ldr	r3, [sp, #20]
 800ad14:	f85b 0904 	ldr.w	r0, [fp], #-4
 800ad18:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800ad1c:	f7f5 fb36 	bl	800038c <__aeabi_fmul>
 800ad20:	4601      	mov	r1, r0
 800ad22:	4640      	mov	r0, r8
 800ad24:	f7f5 fa2a 	bl	800017c <__addsf3>
 800ad28:	f10a 0a01 	add.w	sl, sl, #1
 800ad2c:	4680      	mov	r8, r0
 800ad2e:	e7e5      	b.n	800acfc <__kernel_rem_pio2f+0x300>
 800ad30:	9b06      	ldr	r3, [sp, #24]
 800ad32:	9a02      	ldr	r2, [sp, #8]
 800ad34:	4648      	mov	r0, r9
 800ad36:	1a99      	subs	r1, r3, r2
 800ad38:	f7ff fdf6 	bl	800a928 <scalbnf>
 800ad3c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800ad40:	4680      	mov	r8, r0
 800ad42:	f7f5 fcd5 	bl	80006f0 <__aeabi_fcmpge>
 800ad46:	b1f8      	cbz	r0, 800ad88 <__kernel_rem_pio2f+0x38c>
 800ad48:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800ad4c:	4640      	mov	r0, r8
 800ad4e:	f7f5 fb1d 	bl	800038c <__aeabi_fmul>
 800ad52:	f7f5 fcf7 	bl	8000744 <__aeabi_f2iz>
 800ad56:	f7f5 fac5 	bl	80002e4 <__aeabi_i2f>
 800ad5a:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800ad5e:	4681      	mov	r9, r0
 800ad60:	f7f5 fb14 	bl	800038c <__aeabi_fmul>
 800ad64:	4601      	mov	r1, r0
 800ad66:	4640      	mov	r0, r8
 800ad68:	f7f5 fa06 	bl	8000178 <__aeabi_fsub>
 800ad6c:	f7f5 fcea 	bl	8000744 <__aeabi_f2iz>
 800ad70:	ab0a      	add	r3, sp, #40	@ 0x28
 800ad72:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ad76:	4648      	mov	r0, r9
 800ad78:	3401      	adds	r4, #1
 800ad7a:	3708      	adds	r7, #8
 800ad7c:	f7f5 fce2 	bl	8000744 <__aeabi_f2iz>
 800ad80:	ab0a      	add	r3, sp, #40	@ 0x28
 800ad82:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ad86:	e751      	b.n	800ac2c <__kernel_rem_pio2f+0x230>
 800ad88:	4640      	mov	r0, r8
 800ad8a:	e7f7      	b.n	800ad7c <__kernel_rem_pio2f+0x380>
 800ad8c:	ab0a      	add	r3, sp, #40	@ 0x28
 800ad8e:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ad92:	f7f5 faa7 	bl	80002e4 <__aeabi_i2f>
 800ad96:	4639      	mov	r1, r7
 800ad98:	f7f5 faf8 	bl	800038c <__aeabi_fmul>
 800ad9c:	4649      	mov	r1, r9
 800ad9e:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 800ada2:	4638      	mov	r0, r7
 800ada4:	f7f5 faf2 	bl	800038c <__aeabi_fmul>
 800ada8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800adac:	4607      	mov	r7, r0
 800adae:	e748      	b.n	800ac42 <__kernel_rem_pio2f+0x246>
 800adb0:	f853 0b04 	ldr.w	r0, [r3], #4
 800adb4:	f85b 1b04 	ldr.w	r1, [fp], #4
 800adb8:	9203      	str	r2, [sp, #12]
 800adba:	9302      	str	r3, [sp, #8]
 800adbc:	f7f5 fae6 	bl	800038c <__aeabi_fmul>
 800adc0:	4601      	mov	r1, r0
 800adc2:	4640      	mov	r0, r8
 800adc4:	f7f5 f9da 	bl	800017c <__addsf3>
 800adc8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800adcc:	4680      	mov	r8, r0
 800adce:	f10a 0a01 	add.w	sl, sl, #1
 800add2:	9901      	ldr	r1, [sp, #4]
 800add4:	458a      	cmp	sl, r1
 800add6:	dc01      	bgt.n	800addc <__kernel_rem_pio2f+0x3e0>
 800add8:	45ca      	cmp	sl, r9
 800adda:	dde9      	ble.n	800adb0 <__kernel_rem_pio2f+0x3b4>
 800addc:	ab5a      	add	r3, sp, #360	@ 0x168
 800adde:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800ade2:	f849 8ca0 	str.w	r8, [r9, #-160]
 800ade6:	3f01      	subs	r7, #1
 800ade8:	e731      	b.n	800ac4e <__kernel_rem_pio2f+0x252>
 800adea:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800adec:	2b02      	cmp	r3, #2
 800adee:	dc07      	bgt.n	800ae00 <__kernel_rem_pio2f+0x404>
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	dc4e      	bgt.n	800ae92 <__kernel_rem_pio2f+0x496>
 800adf4:	d02e      	beq.n	800ae54 <__kernel_rem_pio2f+0x458>
 800adf6:	f006 0007 	and.w	r0, r6, #7
 800adfa:	b05b      	add	sp, #364	@ 0x16c
 800adfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae00:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800ae02:	2b03      	cmp	r3, #3
 800ae04:	d1f7      	bne.n	800adf6 <__kernel_rem_pio2f+0x3fa>
 800ae06:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 800ae0a:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800ae0e:	46b8      	mov	r8, r7
 800ae10:	46a2      	mov	sl, r4
 800ae12:	f1ba 0f00 	cmp.w	sl, #0
 800ae16:	dc49      	bgt.n	800aeac <__kernel_rem_pio2f+0x4b0>
 800ae18:	46a1      	mov	r9, r4
 800ae1a:	f1b9 0f01 	cmp.w	r9, #1
 800ae1e:	dc60      	bgt.n	800aee2 <__kernel_rem_pio2f+0x4e6>
 800ae20:	2000      	movs	r0, #0
 800ae22:	2c01      	cmp	r4, #1
 800ae24:	dc76      	bgt.n	800af14 <__kernel_rem_pio2f+0x518>
 800ae26:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800ae28:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800ae2a:	2d00      	cmp	r5, #0
 800ae2c:	d178      	bne.n	800af20 <__kernel_rem_pio2f+0x524>
 800ae2e:	9900      	ldr	r1, [sp, #0]
 800ae30:	600a      	str	r2, [r1, #0]
 800ae32:	460a      	mov	r2, r1
 800ae34:	604b      	str	r3, [r1, #4]
 800ae36:	6090      	str	r0, [r2, #8]
 800ae38:	e7dd      	b.n	800adf6 <__kernel_rem_pio2f+0x3fa>
 800ae3a:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800ae3e:	f7f5 f99d 	bl	800017c <__addsf3>
 800ae42:	3c01      	subs	r4, #1
 800ae44:	2c00      	cmp	r4, #0
 800ae46:	daf8      	bge.n	800ae3a <__kernel_rem_pio2f+0x43e>
 800ae48:	b10d      	cbz	r5, 800ae4e <__kernel_rem_pio2f+0x452>
 800ae4a:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800ae4e:	9b00      	ldr	r3, [sp, #0]
 800ae50:	6018      	str	r0, [r3, #0]
 800ae52:	e7d0      	b.n	800adf6 <__kernel_rem_pio2f+0x3fa>
 800ae54:	2000      	movs	r0, #0
 800ae56:	af32      	add	r7, sp, #200	@ 0xc8
 800ae58:	e7f4      	b.n	800ae44 <__kernel_rem_pio2f+0x448>
 800ae5a:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800ae5e:	f7f5 f98d 	bl	800017c <__addsf3>
 800ae62:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae66:	f1b8 0f00 	cmp.w	r8, #0
 800ae6a:	daf6      	bge.n	800ae5a <__kernel_rem_pio2f+0x45e>
 800ae6c:	b1ad      	cbz	r5, 800ae9a <__kernel_rem_pio2f+0x49e>
 800ae6e:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 800ae72:	9a00      	ldr	r2, [sp, #0]
 800ae74:	4601      	mov	r1, r0
 800ae76:	6013      	str	r3, [r2, #0]
 800ae78:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800ae7a:	f7f5 f97d 	bl	8000178 <__aeabi_fsub>
 800ae7e:	f04f 0801 	mov.w	r8, #1
 800ae82:	4544      	cmp	r4, r8
 800ae84:	da0b      	bge.n	800ae9e <__kernel_rem_pio2f+0x4a2>
 800ae86:	b10d      	cbz	r5, 800ae8c <__kernel_rem_pio2f+0x490>
 800ae88:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800ae8c:	9b00      	ldr	r3, [sp, #0]
 800ae8e:	6058      	str	r0, [r3, #4]
 800ae90:	e7b1      	b.n	800adf6 <__kernel_rem_pio2f+0x3fa>
 800ae92:	46a0      	mov	r8, r4
 800ae94:	2000      	movs	r0, #0
 800ae96:	af32      	add	r7, sp, #200	@ 0xc8
 800ae98:	e7e5      	b.n	800ae66 <__kernel_rem_pio2f+0x46a>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	e7e9      	b.n	800ae72 <__kernel_rem_pio2f+0x476>
 800ae9e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800aea2:	f7f5 f96b 	bl	800017c <__addsf3>
 800aea6:	f108 0801 	add.w	r8, r8, #1
 800aeaa:	e7ea      	b.n	800ae82 <__kernel_rem_pio2f+0x486>
 800aeac:	f8d8 3000 	ldr.w	r3, [r8]
 800aeb0:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	4610      	mov	r0, r2
 800aeb8:	9302      	str	r3, [sp, #8]
 800aeba:	9201      	str	r2, [sp, #4]
 800aebc:	f7f5 f95e 	bl	800017c <__addsf3>
 800aec0:	9a01      	ldr	r2, [sp, #4]
 800aec2:	4601      	mov	r1, r0
 800aec4:	4681      	mov	r9, r0
 800aec6:	4610      	mov	r0, r2
 800aec8:	f7f5 f956 	bl	8000178 <__aeabi_fsub>
 800aecc:	9b02      	ldr	r3, [sp, #8]
 800aece:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aed2:	4619      	mov	r1, r3
 800aed4:	f7f5 f952 	bl	800017c <__addsf3>
 800aed8:	f848 0904 	str.w	r0, [r8], #-4
 800aedc:	f8c8 9000 	str.w	r9, [r8]
 800aee0:	e797      	b.n	800ae12 <__kernel_rem_pio2f+0x416>
 800aee2:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800aee6:	f8d7 a000 	ldr.w	sl, [r7]
 800aeea:	4618      	mov	r0, r3
 800aeec:	4651      	mov	r1, sl
 800aeee:	9301      	str	r3, [sp, #4]
 800aef0:	f7f5 f944 	bl	800017c <__addsf3>
 800aef4:	9b01      	ldr	r3, [sp, #4]
 800aef6:	4601      	mov	r1, r0
 800aef8:	4680      	mov	r8, r0
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7f5 f93c 	bl	8000178 <__aeabi_fsub>
 800af00:	4651      	mov	r1, sl
 800af02:	f7f5 f93b 	bl	800017c <__addsf3>
 800af06:	f847 0904 	str.w	r0, [r7], #-4
 800af0a:	f109 39ff 	add.w	r9, r9, #4294967295
 800af0e:	f8c7 8000 	str.w	r8, [r7]
 800af12:	e782      	b.n	800ae1a <__kernel_rem_pio2f+0x41e>
 800af14:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800af18:	f7f5 f930 	bl	800017c <__addsf3>
 800af1c:	3c01      	subs	r4, #1
 800af1e:	e780      	b.n	800ae22 <__kernel_rem_pio2f+0x426>
 800af20:	9900      	ldr	r1, [sp, #0]
 800af22:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800af26:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800af2a:	600a      	str	r2, [r1, #0]
 800af2c:	604b      	str	r3, [r1, #4]
 800af2e:	460a      	mov	r2, r1
 800af30:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800af34:	e77f      	b.n	800ae36 <__kernel_rem_pio2f+0x43a>
 800af36:	bf00      	nop

0800af38 <floorf>:
 800af38:	b570      	push	{r4, r5, r6, lr}
 800af3a:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800af3e:	3d7f      	subs	r5, #127	@ 0x7f
 800af40:	2d16      	cmp	r5, #22
 800af42:	4601      	mov	r1, r0
 800af44:	4604      	mov	r4, r0
 800af46:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800af4a:	dc26      	bgt.n	800af9a <floorf+0x62>
 800af4c:	2d00      	cmp	r5, #0
 800af4e:	da0f      	bge.n	800af70 <floorf+0x38>
 800af50:	4917      	ldr	r1, [pc, #92]	@ (800afb0 <floorf+0x78>)
 800af52:	f7f5 f913 	bl	800017c <__addsf3>
 800af56:	2100      	movs	r1, #0
 800af58:	f7f5 fbd4 	bl	8000704 <__aeabi_fcmpgt>
 800af5c:	b130      	cbz	r0, 800af6c <floorf+0x34>
 800af5e:	2c00      	cmp	r4, #0
 800af60:	da23      	bge.n	800afaa <floorf+0x72>
 800af62:	2e00      	cmp	r6, #0
 800af64:	4c13      	ldr	r4, [pc, #76]	@ (800afb4 <floorf+0x7c>)
 800af66:	bf08      	it	eq
 800af68:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800af6c:	4621      	mov	r1, r4
 800af6e:	e01a      	b.n	800afa6 <floorf+0x6e>
 800af70:	4e11      	ldr	r6, [pc, #68]	@ (800afb8 <floorf+0x80>)
 800af72:	412e      	asrs	r6, r5
 800af74:	4230      	tst	r0, r6
 800af76:	d016      	beq.n	800afa6 <floorf+0x6e>
 800af78:	490d      	ldr	r1, [pc, #52]	@ (800afb0 <floorf+0x78>)
 800af7a:	f7f5 f8ff 	bl	800017c <__addsf3>
 800af7e:	2100      	movs	r1, #0
 800af80:	f7f5 fbc0 	bl	8000704 <__aeabi_fcmpgt>
 800af84:	2800      	cmp	r0, #0
 800af86:	d0f1      	beq.n	800af6c <floorf+0x34>
 800af88:	2c00      	cmp	r4, #0
 800af8a:	bfbe      	ittt	lt
 800af8c:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 800af90:	412b      	asrlt	r3, r5
 800af92:	18e4      	addlt	r4, r4, r3
 800af94:	ea24 0406 	bic.w	r4, r4, r6
 800af98:	e7e8      	b.n	800af6c <floorf+0x34>
 800af9a:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800af9e:	d302      	bcc.n	800afa6 <floorf+0x6e>
 800afa0:	f7f5 f8ec 	bl	800017c <__addsf3>
 800afa4:	4601      	mov	r1, r0
 800afa6:	4608      	mov	r0, r1
 800afa8:	bd70      	pop	{r4, r5, r6, pc}
 800afaa:	2400      	movs	r4, #0
 800afac:	e7de      	b.n	800af6c <floorf+0x34>
 800afae:	bf00      	nop
 800afb0:	7149f2ca 	.word	0x7149f2ca
 800afb4:	bf800000 	.word	0xbf800000
 800afb8:	007fffff 	.word	0x007fffff

0800afbc <_init>:
 800afbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afbe:	bf00      	nop
 800afc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afc2:	bc08      	pop	{r3}
 800afc4:	469e      	mov	lr, r3
 800afc6:	4770      	bx	lr

0800afc8 <_fini>:
 800afc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afca:	bf00      	nop
 800afcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afce:	bc08      	pop	{r3}
 800afd0:	469e      	mov	lr, r3
 800afd2:	4770      	bx	lr
