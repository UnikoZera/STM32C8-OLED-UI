
STM32PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aef8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a6c  0800b004  0800b004  0000c004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba70  0800ba70  0000d080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ba70  0800ba70  0000ca70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba78  0800ba78  0000d080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba78  0800ba78  0000ca78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ba7c  0800ba7c  0000ca7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800ba80  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004088  20000080  0800bb00  0000d080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004108  0800bb00  0000d108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001183f  00000000  00000000  0000d0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003460  00000000  00000000  0001e8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  00021d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f10  00000000  00000000  00023068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001969b  00000000  00000000  00023f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018052  00000000  00000000  0003d613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ff7d  00000000  00000000  00055665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e55e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fd4  00000000  00000000  000e5628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000eb5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	0800afec 	.word	0x0800afec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	0800afec 	.word	0x0800afec

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_fcmpun>:
 8000718:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800071c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000720:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000724:	d102      	bne.n	800072c <__aeabi_fcmpun+0x14>
 8000726:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800072a:	d108      	bne.n	800073e <__aeabi_fcmpun+0x26>
 800072c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000730:	d102      	bne.n	8000738 <__aeabi_fcmpun+0x20>
 8000732:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000736:	d102      	bne.n	800073e <__aeabi_fcmpun+0x26>
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	4770      	bx	lr
 800073e:	f04f 0001 	mov.w	r0, #1
 8000742:	4770      	bx	lr

08000744 <__aeabi_f2iz>:
 8000744:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000748:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800074c:	d30f      	bcc.n	800076e <__aeabi_f2iz+0x2a>
 800074e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000752:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000756:	d90d      	bls.n	8000774 <__aeabi_f2iz+0x30>
 8000758:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800075c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000760:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000764:	fa23 f002 	lsr.w	r0, r3, r2
 8000768:	bf18      	it	ne
 800076a:	4240      	negne	r0, r0
 800076c:	4770      	bx	lr
 800076e:	f04f 0000 	mov.w	r0, #0
 8000772:	4770      	bx	lr
 8000774:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000778:	d101      	bne.n	800077e <__aeabi_f2iz+0x3a>
 800077a:	0242      	lsls	r2, r0, #9
 800077c:	d105      	bne.n	800078a <__aeabi_f2iz+0x46>
 800077e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000782:	bf08      	it	eq
 8000784:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000788:	4770      	bx	lr
 800078a:	f04f 0000 	mov.w	r0, #0
 800078e:	4770      	bx	lr

08000790 <__aeabi_f2uiz>:
 8000790:	0042      	lsls	r2, r0, #1
 8000792:	d20e      	bcs.n	80007b2 <__aeabi_f2uiz+0x22>
 8000794:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000798:	d30b      	bcc.n	80007b2 <__aeabi_f2uiz+0x22>
 800079a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800079e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007a2:	d409      	bmi.n	80007b8 <__aeabi_f2uiz+0x28>
 80007a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ac:	fa23 f002 	lsr.w	r0, r3, r2
 80007b0:	4770      	bx	lr
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	4770      	bx	lr
 80007b8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80007bc:	d101      	bne.n	80007c2 <__aeabi_f2uiz+0x32>
 80007be:	0242      	lsls	r2, r0, #9
 80007c0:	d102      	bne.n	80007c8 <__aeabi_f2uiz+0x38>
 80007c2:	f04f 30ff 	mov.w	r0, #4294967295
 80007c6:	4770      	bx	lr
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_DMA_Init+0x38>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a0b      	ldr	r2, [pc, #44]	@ (8000808 <MX_DMA_Init+0x38>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_DMA_Init+0x38>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	2010      	movs	r0, #16
 80007f4:	f005 fc03 	bl	8005ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007f8:	2010      	movs	r0, #16
 80007fa:	f005 fc1c 	bl	8006036 <HAL_NVIC_EnableIRQ>

}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <DrawBlock>:
#define INPUT_DEBOUNCE_MS 50             // Milliseconds for switch debounce
#define INPUT_PROCESSING_COOLDOWN_MS 200 // Minimum time between processing inputs

// Helper function to draw a block on the OLED (used by Snake)
static void DrawBlock(int16_t x, int16_t y, uint8_t color)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af02      	add	r7, sp, #8
 8000812:	4603      	mov	r3, r0
 8000814:	80fb      	strh	r3, [r7, #6]
 8000816:	460b      	mov	r3, r1
 8000818:	80bb      	strh	r3, [r7, #4]
 800081a:	4613      	mov	r3, r2
 800081c:	70fb      	strb	r3, [r7, #3]
    OLED_DrawFilledRectangle(x * SNAKE_BLOCK_SIZE, y * SNAKE_BLOCK_SIZE, SNAKE_BLOCK_SIZE, SNAKE_BLOCK_SIZE, color);
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	b29b      	uxth	r3, r3
 8000824:	b218      	sxth	r0, r3
 8000826:	88bb      	ldrh	r3, [r7, #4]
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	b29b      	uxth	r3, r3
 800082c:	b219      	sxth	r1, r3
 800082e:	78fb      	ldrb	r3, [r7, #3]
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2304      	movs	r3, #4
 8000834:	2204      	movs	r2, #4
 8000836:	f004 fe78 	bl	800552a <OLED_DrawFilledRectangle>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <Snake_GenerateFood>:

// Function to generate food at a random position (used by Snake)
static void Snake_GenerateFood()
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
    bool food_on_snake;
    do
    {
        food_on_snake = false;
 800084a:	2300      	movs	r3, #0
 800084c:	71fb      	strb	r3, [r7, #7]
        food.pos.x = rand() % GAME_AREA_WIDTH;
 800084e:	f007 ffa1 	bl	8008794 <rand>
 8000852:	4603      	mov	r3, r0
 8000854:	425a      	negs	r2, r3
 8000856:	f003 031f 	and.w	r3, r3, #31
 800085a:	f002 021f 	and.w	r2, r2, #31
 800085e:	bf58      	it	pl
 8000860:	4253      	negpl	r3, r2
 8000862:	b21a      	sxth	r2, r3
 8000864:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <Snake_GenerateFood+0xa4>)
 8000866:	801a      	strh	r2, [r3, #0]
        food.pos.y = rand() % GAME_AREA_HEIGHT;
 8000868:	f007 ff94 	bl	8008794 <rand>
 800086c:	4602      	mov	r2, r0
 800086e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <Snake_GenerateFood+0xa8>)
 8000870:	fb83 1302 	smull	r1, r3, r3, r2
 8000874:	4413      	add	r3, r2
 8000876:	10d9      	asrs	r1, r3, #3
 8000878:	17d3      	asrs	r3, r2, #31
 800087a:	1ac9      	subs	r1, r1, r3
 800087c:	460b      	mov	r3, r1
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	1a5b      	subs	r3, r3, r1
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	1ad1      	subs	r1, r2, r3
 8000886:	b20a      	sxth	r2, r1
 8000888:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <Snake_GenerateFood+0xa4>)
 800088a:	805a      	strh	r2, [r3, #2]
        for (uint16_t i = 0; i < snake.length; i++)
 800088c:	2300      	movs	r3, #0
 800088e:	80bb      	strh	r3, [r7, #4]
 8000890:	e019      	b.n	80008c6 <Snake_GenerateFood+0x82>
        {
            if (snake.body[i].x == food.pos.x && snake.body[i].y == food.pos.y)
 8000892:	88bb      	ldrh	r3, [r7, #4]
 8000894:	4a16      	ldr	r2, [pc, #88]	@ (80008f0 <Snake_GenerateFood+0xac>)
 8000896:	f932 2023 	ldrsh.w	r2, [r2, r3, lsl #2]
 800089a:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <Snake_GenerateFood+0xa4>)
 800089c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d10d      	bne.n	80008c0 <Snake_GenerateFood+0x7c>
 80008a4:	88bb      	ldrh	r3, [r7, #4]
 80008a6:	4a12      	ldr	r2, [pc, #72]	@ (80008f0 <Snake_GenerateFood+0xac>)
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4413      	add	r3, r2
 80008ac:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80008b0:	4b0d      	ldr	r3, [pc, #52]	@ (80008e8 <Snake_GenerateFood+0xa4>)
 80008b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d102      	bne.n	80008c0 <Snake_GenerateFood+0x7c>
            {
                food_on_snake = true;
 80008ba:	2301      	movs	r3, #1
 80008bc:	71fb      	strb	r3, [r7, #7]
                break;
 80008be:	e008      	b.n	80008d2 <Snake_GenerateFood+0x8e>
        for (uint16_t i = 0; i < snake.length; i++)
 80008c0:	88bb      	ldrh	r3, [r7, #4]
 80008c2:	3301      	adds	r3, #1
 80008c4:	80bb      	strh	r3, [r7, #4]
 80008c6:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <Snake_GenerateFood+0xac>)
 80008c8:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80008cc:	88ba      	ldrh	r2, [r7, #4]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d3df      	bcc.n	8000892 <Snake_GenerateFood+0x4e>
            }
        }
    } while (food_on_snake);
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d1b8      	bne.n	800084a <Snake_GenerateFood+0x6>
    food.active = true;
 80008d8:	4b03      	ldr	r3, [pc, #12]	@ (80008e8 <Snake_GenerateFood+0xa4>)
 80008da:	2201      	movs	r2, #1
 80008dc:	711a      	strb	r2, [r3, #4]
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000230 	.word	0x20000230
 80008ec:	92492493 	.word	0x92492493
 80008f0:	2000009c 	.word	0x2000009c

080008f4 <Snake_InitGame>:

void Snake_InitGame(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
    // srand(HAL_GetTick()); // Seed RNG if not done elsewhere
    gameOver = false;
 80008fa:	4b28      	ldr	r3, [pc, #160]	@ (800099c <Snake_InitGame+0xa8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
    snake.length = 3;
 8000900:	4b27      	ldr	r3, [pc, #156]	@ (80009a0 <Snake_InitGame+0xac>)
 8000902:	2203      	movs	r2, #3
 8000904:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
    snake.dir = DIR_RIGHT;
 8000908:	4b25      	ldr	r3, [pc, #148]	@ (80009a0 <Snake_InitGame+0xac>)
 800090a:	2203      	movs	r2, #3
 800090c:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192
    snake.body[0].x = GAME_AREA_WIDTH / 2;
 8000910:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <Snake_InitGame+0xac>)
 8000912:	2210      	movs	r2, #16
 8000914:	801a      	strh	r2, [r3, #0]
    snake.body[0].y = GAME_AREA_HEIGHT / 2;
 8000916:	4b22      	ldr	r3, [pc, #136]	@ (80009a0 <Snake_InitGame+0xac>)
 8000918:	2207      	movs	r2, #7
 800091a:	805a      	strh	r2, [r3, #2]
    snake.body[1].x = snake.body[0].x - 1;
 800091c:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <Snake_InitGame+0xac>)
 800091e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000922:	b29b      	uxth	r3, r3
 8000924:	3b01      	subs	r3, #1
 8000926:	b29b      	uxth	r3, r3
 8000928:	b21a      	sxth	r2, r3
 800092a:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <Snake_InitGame+0xac>)
 800092c:	809a      	strh	r2, [r3, #4]
    snake.body[1].y = snake.body[0].y;
 800092e:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <Snake_InitGame+0xac>)
 8000930:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000934:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <Snake_InitGame+0xac>)
 8000936:	80da      	strh	r2, [r3, #6]
    snake.body[2].x = snake.body[0].x - 2;
 8000938:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <Snake_InitGame+0xac>)
 800093a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800093e:	b29b      	uxth	r3, r3
 8000940:	3b02      	subs	r3, #2
 8000942:	b29b      	uxth	r3, r3
 8000944:	b21a      	sxth	r2, r3
 8000946:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <Snake_InitGame+0xac>)
 8000948:	811a      	strh	r2, [r3, #8]
    snake.body[2].y = snake.body[0].y;
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <Snake_InitGame+0xac>)
 800094c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000950:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <Snake_InitGame+0xac>)
 8000952:	815a      	strh	r2, [r3, #10]
    for (uint16_t i = snake.length; i < SNAKE_MAX_LENGTH; ++i)
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <Snake_InitGame+0xac>)
 8000956:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 800095a:	80fb      	strh	r3, [r7, #6]
 800095c:	e00f      	b.n	800097e <Snake_InitGame+0x8a>
    {
        snake.body[i].x = -1;
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	4a0f      	ldr	r2, [pc, #60]	@ (80009a0 <Snake_InitGame+0xac>)
 8000962:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000966:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
        snake.body[i].y = -1;
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	4a0c      	ldr	r2, [pc, #48]	@ (80009a0 <Snake_InitGame+0xac>)
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	4413      	add	r3, r2
 8000972:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000976:	805a      	strh	r2, [r3, #2]
    for (uint16_t i = snake.length; i < SNAKE_MAX_LENGTH; ++i)
 8000978:	88fb      	ldrh	r3, [r7, #6]
 800097a:	3301      	adds	r3, #1
 800097c:	80fb      	strh	r3, [r7, #6]
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	2b63      	cmp	r3, #99	@ 0x63
 8000982:	d9ec      	bls.n	800095e <Snake_InitGame+0x6a>
    }
    Snake_GenerateFood();
 8000984:	f7ff ff5e 	bl	8000844 <Snake_GenerateFood>
    gameTickLast = HAL_GetTick();
 8000988:	f005 fa34 	bl	8005df4 <HAL_GetTick>
 800098c:	4603      	mov	r3, r0
 800098e:	4a05      	ldr	r2, [pc, #20]	@ (80009a4 <Snake_InitGame+0xb0>)
 8000990:	6013      	str	r3, [r2, #0]
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000236 	.word	0x20000236
 80009a0:	2000009c 	.word	0x2000009c
 80009a4:	20000238 	.word	0x20000238

080009a8 <Snake_Draw>:

static void Snake_Draw(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
    for (uint16_t i = 0; i < snake.length; i++)
 80009ae:	2300      	movs	r3, #0
 80009b0:	80fb      	strh	r3, [r7, #6]
 80009b2:	e010      	b.n	80009d6 <Snake_Draw+0x2e>
    {
        DrawBlock(snake.body[i].x, snake.body[i].y, 1);
 80009b4:	88fb      	ldrh	r3, [r7, #6]
 80009b6:	4a1d      	ldr	r2, [pc, #116]	@ (8000a2c <Snake_Draw+0x84>)
 80009b8:	f932 0023 	ldrsh.w	r0, [r2, r3, lsl #2]
 80009bc:	88fb      	ldrh	r3, [r7, #6]
 80009be:	4a1b      	ldr	r2, [pc, #108]	@ (8000a2c <Snake_Draw+0x84>)
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	4413      	add	r3, r2
 80009c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80009c8:	2201      	movs	r2, #1
 80009ca:	4619      	mov	r1, r3
 80009cc:	f7ff ff1e 	bl	800080c <DrawBlock>
    for (uint16_t i = 0; i < snake.length; i++)
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	3301      	adds	r3, #1
 80009d4:	80fb      	strh	r3, [r7, #6]
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <Snake_Draw+0x84>)
 80009d8:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80009dc:	88fa      	ldrh	r2, [r7, #6]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d3e8      	bcc.n	80009b4 <Snake_Draw+0xc>
    }
    if (food.active)
 80009e2:	4b13      	ldr	r3, [pc, #76]	@ (8000a30 <Snake_Draw+0x88>)
 80009e4:	791b      	ldrb	r3, [r3, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d009      	beq.n	80009fe <Snake_Draw+0x56>
    {
        DrawBlock(food.pos.x, food.pos.y, 1);
 80009ea:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <Snake_Draw+0x88>)
 80009ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000a30 <Snake_Draw+0x88>)
 80009f2:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 80009f6:	2201      	movs	r2, #1
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff07 	bl	800080c <DrawBlock>
    }
    if (gameOver)
 80009fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <Snake_Draw+0x8c>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d00e      	beq.n	8000a24 <Snake_Draw+0x7c>
    {
        OLED_DisplayString(OLED_WIDTH / 2 - 3 * 6, OLED_HEIGHT / 2 - 4, "GAME");
 8000a06:	4a0c      	ldr	r2, [pc, #48]	@ (8000a38 <Snake_Draw+0x90>)
 8000a08:	211c      	movs	r1, #28
 8000a0a:	202e      	movs	r0, #46	@ 0x2e
 8000a0c:	f001 fd08 	bl	8002420 <OLED_DisplayString>
        OLED_DisplayString(OLED_WIDTH / 2 - 3 * 6, OLED_HEIGHT / 2 + 4, "OVER");
 8000a10:	4a0a      	ldr	r2, [pc, #40]	@ (8000a3c <Snake_Draw+0x94>)
 8000a12:	2124      	movs	r1, #36	@ 0x24
 8000a14:	202e      	movs	r0, #46	@ 0x2e
 8000a16:	f001 fd03 	bl	8002420 <OLED_DisplayString>
        OLED_DisplayString(OLED_WIDTH / 2 - 5 * 6, OLED_HEIGHT / 2 + 12, "RST BTN=RS");
 8000a1a:	4a09      	ldr	r2, [pc, #36]	@ (8000a40 <Snake_Draw+0x98>)
 8000a1c:	212c      	movs	r1, #44	@ 0x2c
 8000a1e:	2022      	movs	r0, #34	@ 0x22
 8000a20:	f001 fcfe 	bl	8002420 <OLED_DisplayString>
    }
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	2000009c 	.word	0x2000009c
 8000a30:	20000230 	.word	0x20000230
 8000a34:	20000236 	.word	0x20000236
 8000a38:	0800b004 	.word	0x0800b004
 8000a3c:	0800b00c 	.word	0x0800b00c
 8000a40:	0800b014 	.word	0x0800b014

08000a44 <Snake_Update>:

static void Snake_Update(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
    if (gameOver)
 8000a4a:	4b5a      	ldr	r3, [pc, #360]	@ (8000bb4 <Snake_Update+0x170>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f040 80ab 	bne.w	8000baa <Snake_Update+0x166>
        return;

    Point new_head = snake.body[0];
 8000a54:	4b58      	ldr	r3, [pc, #352]	@ (8000bb8 <Snake_Update+0x174>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	603b      	str	r3, [r7, #0]
    switch (snake.dir)
 8000a5a:	4b57      	ldr	r3, [pc, #348]	@ (8000bb8 <Snake_Update+0x174>)
 8000a5c:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000a60:	2b03      	cmp	r3, #3
 8000a62:	d82b      	bhi.n	8000abc <Snake_Update+0x78>
 8000a64:	a201      	add	r2, pc, #4	@ (adr r2, 8000a6c <Snake_Update+0x28>)
 8000a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6a:	bf00      	nop
 8000a6c:	08000a7d 	.word	0x08000a7d
 8000a70:	08000a8d 	.word	0x08000a8d
 8000a74:	08000a9d 	.word	0x08000a9d
 8000a78:	08000aad 	.word	0x08000aad
    {
    case DIR_UP:
        new_head.y--;
 8000a7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	3b01      	subs	r3, #1
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	807b      	strh	r3, [r7, #2]
        break;
 8000a8a:	e017      	b.n	8000abc <Snake_Update+0x78>
    case DIR_DOWN:
        new_head.y++;
 8000a8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	3301      	adds	r3, #1
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	807b      	strh	r3, [r7, #2]
        break;
 8000a9a:	e00f      	b.n	8000abc <Snake_Update+0x78>
    case DIR_LEFT:
        new_head.x--;
 8000a9c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	b21b      	sxth	r3, r3
 8000aa8:	803b      	strh	r3, [r7, #0]
        break;
 8000aaa:	e007      	b.n	8000abc <Snake_Update+0x78>
    case DIR_RIGHT:
        new_head.x++;
 8000aac:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	b21b      	sxth	r3, r3
 8000ab8:	803b      	strh	r3, [r7, #0]
        break;
 8000aba:	bf00      	nop
    }

    if (new_head.x < 0)
 8000abc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	da02      	bge.n	8000aca <Snake_Update+0x86>
        new_head.x = GAME_AREA_WIDTH - 1;
 8000ac4:	231f      	movs	r3, #31
 8000ac6:	803b      	strh	r3, [r7, #0]
 8000ac8:	e005      	b.n	8000ad6 <Snake_Update+0x92>
    else if (new_head.x >= GAME_AREA_WIDTH)
 8000aca:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ace:	2b1f      	cmp	r3, #31
 8000ad0:	dd01      	ble.n	8000ad6 <Snake_Update+0x92>
        new_head.x = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	803b      	strh	r3, [r7, #0]
    if (new_head.y < 0)
 8000ad6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	da02      	bge.n	8000ae4 <Snake_Update+0xa0>
        new_head.y = GAME_AREA_HEIGHT - 1;
 8000ade:	230d      	movs	r3, #13
 8000ae0:	807b      	strh	r3, [r7, #2]
 8000ae2:	e005      	b.n	8000af0 <Snake_Update+0xac>
    else if (new_head.y >= GAME_AREA_HEIGHT)
 8000ae4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ae8:	2b0d      	cmp	r3, #13
 8000aea:	dd01      	ble.n	8000af0 <Snake_Update+0xac>
        new_head.y = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	807b      	strh	r3, [r7, #2]

    for (uint16_t i = 0; i < snake.length - 1; i++) // Check up to length-1
 8000af0:	2300      	movs	r3, #0
 8000af2:	80fb      	strh	r3, [r7, #6]
 8000af4:	e018      	b.n	8000b28 <Snake_Update+0xe4>
    {
        if (new_head.x == snake.body[i].x && new_head.y == snake.body[i].y)
 8000af6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000afa:	88fb      	ldrh	r3, [r7, #6]
 8000afc:	492e      	ldr	r1, [pc, #184]	@ (8000bb8 <Snake_Update+0x174>)
 8000afe:	f931 3023 	ldrsh.w	r3, [r1, r3, lsl #2]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d10d      	bne.n	8000b22 <Snake_Update+0xde>
 8000b06:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	492a      	ldr	r1, [pc, #168]	@ (8000bb8 <Snake_Update+0x174>)
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	440b      	add	r3, r1
 8000b12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d103      	bne.n	8000b22 <Snake_Update+0xde>
        {
            gameOver = true;
 8000b1a:	4b26      	ldr	r3, [pc, #152]	@ (8000bb4 <Snake_Update+0x170>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	701a      	strb	r2, [r3, #0]
            return;
 8000b20:	e044      	b.n	8000bac <Snake_Update+0x168>
    for (uint16_t i = 0; i < snake.length - 1; i++) // Check up to length-1
 8000b22:	88fb      	ldrh	r3, [r7, #6]
 8000b24:	3301      	adds	r3, #1
 8000b26:	80fb      	strh	r3, [r7, #6]
 8000b28:	88fa      	ldrh	r2, [r7, #6]
 8000b2a:	4b23      	ldr	r3, [pc, #140]	@ (8000bb8 <Snake_Update+0x174>)
 8000b2c:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000b30:	3b01      	subs	r3, #1
 8000b32:	429a      	cmp	r2, r3
 8000b34:	dbdf      	blt.n	8000af6 <Snake_Update+0xb2>
        }
    }

    if (food.active && new_head.x == food.pos.x && new_head.y == food.pos.y)
 8000b36:	4b21      	ldr	r3, [pc, #132]	@ (8000bbc <Snake_Update+0x178>)
 8000b38:	791b      	ldrb	r3, [r3, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d01c      	beq.n	8000b78 <Snake_Update+0x134>
 8000b3e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b42:	4b1e      	ldr	r3, [pc, #120]	@ (8000bbc <Snake_Update+0x178>)
 8000b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d115      	bne.n	8000b78 <Snake_Update+0x134>
 8000b4c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000b50:	4b1a      	ldr	r3, [pc, #104]	@ (8000bbc <Snake_Update+0x178>)
 8000b52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d10e      	bne.n	8000b78 <Snake_Update+0x134>
    {
        if (snake.length < SNAKE_MAX_LENGTH)
 8000b5a:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <Snake_Update+0x174>)
 8000b5c:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000b60:	2b63      	cmp	r3, #99	@ 0x63
 8000b62:	d807      	bhi.n	8000b74 <Snake_Update+0x130>
            snake.length++;
 8000b64:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <Snake_Update+0x174>)
 8000b66:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <Snake_Update+0x174>)
 8000b70:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
        Snake_GenerateFood();
 8000b74:	f7ff fe66 	bl	8000844 <Snake_GenerateFood>
    }
    // No else needed for tail movement; body shift handles it.

    for (uint16_t i = snake.length - 1; i > 0; i--)
 8000b78:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <Snake_Update+0x174>)
 8000b7a:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	80bb      	strh	r3, [r7, #4]
 8000b82:	e00b      	b.n	8000b9c <Snake_Update+0x158>
    {
        snake.body[i] = snake.body[i - 1];
 8000b84:	88bb      	ldrh	r3, [r7, #4]
 8000b86:	1e5a      	subs	r2, r3, #1
 8000b88:	88bb      	ldrh	r3, [r7, #4]
 8000b8a:	490b      	ldr	r1, [pc, #44]	@ (8000bb8 <Snake_Update+0x174>)
 8000b8c:	480a      	ldr	r0, [pc, #40]	@ (8000bb8 <Snake_Update+0x174>)
 8000b8e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8000b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint16_t i = snake.length - 1; i > 0; i--)
 8000b96:	88bb      	ldrh	r3, [r7, #4]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	80bb      	strh	r3, [r7, #4]
 8000b9c:	88bb      	ldrh	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d1f0      	bne.n	8000b84 <Snake_Update+0x140>
    }
    snake.body[0] = new_head;
 8000ba2:	4a05      	ldr	r2, [pc, #20]	@ (8000bb8 <Snake_Update+0x174>)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	e000      	b.n	8000bac <Snake_Update+0x168>
        return;
 8000baa:	bf00      	nop
}
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000236 	.word	0x20000236
 8000bb8:	2000009c 	.word	0x2000009c
 8000bbc:	20000230 	.word	0x20000230

08000bc0 <Snake_HandleInput>:

void Snake_HandleInput(Direction input_dir)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
    if ((snake.dir == DIR_UP && input_dir != DIR_DOWN) ||
 8000bca:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <Snake_HandleInput+0x5c>)
 8000bcc:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <Snake_HandleInput+0x1a>
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d117      	bne.n	8000c0a <Snake_HandleInput+0x4a>
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <Snake_HandleInput+0x5c>)
 8000bdc:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
    if ((snake.dir == DIR_UP && input_dir != DIR_DOWN) ||
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d102      	bne.n	8000bea <Snake_HandleInput+0x2a>
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d10f      	bne.n	8000c0a <Snake_HandleInput+0x4a>
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <Snake_HandleInput+0x5c>)
 8000bec:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d102      	bne.n	8000bfa <Snake_HandleInput+0x3a>
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b03      	cmp	r3, #3
 8000bf8:	d107      	bne.n	8000c0a <Snake_HandleInput+0x4a>
        (snake.dir == DIR_RIGHT && input_dir != DIR_LEFT))
 8000bfa:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <Snake_HandleInput+0x5c>)
 8000bfc:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8000c00:	2b03      	cmp	r3, #3
 8000c02:	d106      	bne.n	8000c12 <Snake_HandleInput+0x52>
        (snake.dir == DIR_RIGHT && input_dir != DIR_LEFT))
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d003      	beq.n	8000c12 <Snake_HandleInput+0x52>
    {
        snake.dir = input_dir;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	@ (8000c1c <Snake_HandleInput+0x5c>)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	f882 3192 	strb.w	r3, [r2, #402]	@ 0x192
    }
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	2000009c 	.word	0x2000009c

08000c20 <Snake_GameLoop>:

void Snake_GameLoop(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
    static uint16_t LastCount;
    static bool preMutiTurn = false;

    if (FirstRun)
 8000c26:	4b60      	ldr	r3, [pc, #384]	@ (8000da8 <Snake_GameLoop+0x188>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d006      	beq.n	8000c3c <Snake_GameLoop+0x1c>
    {
        FirstRun = false;
 8000c2e:	4b5e      	ldr	r3, [pc, #376]	@ (8000da8 <Snake_GameLoop+0x188>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
        LastCount = count;
 8000c34:	4b5d      	ldr	r3, [pc, #372]	@ (8000dac <Snake_GameLoop+0x18c>)
 8000c36:	881a      	ldrh	r2, [r3, #0]
 8000c38:	4b5d      	ldr	r3, [pc, #372]	@ (8000db0 <Snake_GameLoop+0x190>)
 8000c3a:	801a      	strh	r2, [r3, #0]
    }

    if (!preMutiTurn)
 8000c3c:	4b5d      	ldr	r3, [pc, #372]	@ (8000db4 <Snake_GameLoop+0x194>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	f083 0301 	eor.w	r3, r3, #1
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d065      	beq.n	8000d16 <Snake_GameLoop+0xf6>
    {
        if (count - LastCount > 1)
 8000c4a:	4b58      	ldr	r3, [pc, #352]	@ (8000dac <Snake_GameLoop+0x18c>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b57      	ldr	r3, [pc, #348]	@ (8000db0 <Snake_GameLoop+0x190>)
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	dd2a      	ble.n	8000cb0 <Snake_GameLoop+0x90>
        {
            if (snake.dir == DIR_UP)
 8000c5a:	4b57      	ldr	r3, [pc, #348]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000c5c:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d103      	bne.n	8000c6c <Snake_GameLoop+0x4c>
                Snake_HandleInput(DIR_RIGHT);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f7ff ffab 	bl	8000bc0 <Snake_HandleInput>
 8000c6a:	e019      	b.n	8000ca0 <Snake_GameLoop+0x80>
            else if (snake.dir == DIR_DOWN)
 8000c6c:	4b52      	ldr	r3, [pc, #328]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000c6e:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d103      	bne.n	8000c7e <Snake_GameLoop+0x5e>
                Snake_HandleInput(DIR_LEFT);
 8000c76:	2002      	movs	r0, #2
 8000c78:	f7ff ffa2 	bl	8000bc0 <Snake_HandleInput>
 8000c7c:	e010      	b.n	8000ca0 <Snake_GameLoop+0x80>
            else if (snake.dir == DIR_LEFT)
 8000c7e:	4b4e      	ldr	r3, [pc, #312]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000c80:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d103      	bne.n	8000c90 <Snake_GameLoop+0x70>
                Snake_HandleInput(DIR_UP);
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff ff99 	bl	8000bc0 <Snake_HandleInput>
 8000c8e:	e007      	b.n	8000ca0 <Snake_GameLoop+0x80>
            else if (snake.dir == DIR_RIGHT)
 8000c90:	4b49      	ldr	r3, [pc, #292]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000c92:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d102      	bne.n	8000ca0 <Snake_GameLoop+0x80>
                Snake_HandleInput(DIR_DOWN);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff ff90 	bl	8000bc0 <Snake_HandleInput>

            preMutiTurn = true;
 8000ca0:	4b44      	ldr	r3, [pc, #272]	@ (8000db4 <Snake_GameLoop+0x194>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	701a      	strb	r2, [r3, #0]
            LastCount = count;
 8000ca6:	4b41      	ldr	r3, [pc, #260]	@ (8000dac <Snake_GameLoop+0x18c>)
 8000ca8:	881a      	ldrh	r2, [r3, #0]
 8000caa:	4b41      	ldr	r3, [pc, #260]	@ (8000db0 <Snake_GameLoop+0x190>)
 8000cac:	801a      	strh	r2, [r3, #0]
 8000cae:	e032      	b.n	8000d16 <Snake_GameLoop+0xf6>
        }
        else if (count - LastCount < -1)
 8000cb0:	4b3e      	ldr	r3, [pc, #248]	@ (8000dac <Snake_GameLoop+0x18c>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b3e      	ldr	r3, [pc, #248]	@ (8000db0 <Snake_GameLoop+0x190>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc0:	da29      	bge.n	8000d16 <Snake_GameLoop+0xf6>
        {
            if (snake.dir == DIR_UP)
 8000cc2:	4b3d      	ldr	r3, [pc, #244]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000cc4:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d103      	bne.n	8000cd4 <Snake_GameLoop+0xb4>
                Snake_HandleInput(DIR_LEFT);
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f7ff ff77 	bl	8000bc0 <Snake_HandleInput>
 8000cd2:	e019      	b.n	8000d08 <Snake_GameLoop+0xe8>
            else if (snake.dir == DIR_DOWN)
 8000cd4:	4b38      	ldr	r3, [pc, #224]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000cd6:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d103      	bne.n	8000ce6 <Snake_GameLoop+0xc6>
                Snake_HandleInput(DIR_RIGHT);
 8000cde:	2003      	movs	r0, #3
 8000ce0:	f7ff ff6e 	bl	8000bc0 <Snake_HandleInput>
 8000ce4:	e010      	b.n	8000d08 <Snake_GameLoop+0xe8>
            else if (snake.dir == DIR_LEFT)
 8000ce6:	4b34      	ldr	r3, [pc, #208]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000ce8:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d103      	bne.n	8000cf8 <Snake_GameLoop+0xd8>
                Snake_HandleInput(DIR_DOWN);
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f7ff ff65 	bl	8000bc0 <Snake_HandleInput>
 8000cf6:	e007      	b.n	8000d08 <Snake_GameLoop+0xe8>
            else if (snake.dir == DIR_RIGHT)
 8000cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000cfa:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	d102      	bne.n	8000d08 <Snake_GameLoop+0xe8>
                Snake_HandleInput(DIR_UP);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff ff5c 	bl	8000bc0 <Snake_HandleInput>

            preMutiTurn = true;
 8000d08:	4b2a      	ldr	r3, [pc, #168]	@ (8000db4 <Snake_GameLoop+0x194>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
            LastCount = count;
 8000d0e:	4b27      	ldr	r3, [pc, #156]	@ (8000dac <Snake_GameLoop+0x18c>)
 8000d10:	881a      	ldrh	r2, [r3, #0]
 8000d12:	4b27      	ldr	r3, [pc, #156]	@ (8000db0 <Snake_GameLoop+0x190>)
 8000d14:	801a      	strh	r2, [r3, #0]
        }
    }

    if (HAL_GetTick() - gameTickLast >= GAME_TICK_MS)
 8000d16:	f005 f86d 	bl	8005df4 <HAL_GetTick>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	4b27      	ldr	r3, [pc, #156]	@ (8000dbc <Snake_GameLoop+0x19c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b63      	cmp	r3, #99	@ 0x63
 8000d24:	d909      	bls.n	8000d3a <Snake_GameLoop+0x11a>
    {
        Snake_Update();
 8000d26:	f7ff fe8d 	bl	8000a44 <Snake_Update>
        gameTickLast = HAL_GetTick();
 8000d2a:	f005 f863 	bl	8005df4 <HAL_GetTick>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4a22      	ldr	r2, [pc, #136]	@ (8000dbc <Snake_GameLoop+0x19c>)
 8000d32:	6013      	str	r3, [r2, #0]
        preMutiTurn = false;
 8000d34:	4b1f      	ldr	r3, [pc, #124]	@ (8000db4 <Snake_GameLoop+0x194>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
    }
    Snake_Draw();
 8000d3a:	f7ff fe35 	bl	80009a8 <Snake_Draw>

    if (gameOver)
 8000d3e:	4b20      	ldr	r3, [pc, #128]	@ (8000dc0 <Snake_GameLoop+0x1a0>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d01d      	beq.n	8000d82 <Snake_GameLoop+0x162>
    {
        if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8000d46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d4a:	481e      	ldr	r0, [pc, #120]	@ (8000dc4 <Snake_GameLoop+0x1a4>)
 8000d4c:	f005 fc72 	bl	8006634 <HAL_GPIO_ReadPin>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d115      	bne.n	8000d82 <Snake_GameLoop+0x162>
        {
            HAL_Delay(INPUT_DEBOUNCE_MS);
 8000d56:	2032      	movs	r0, #50	@ 0x32
 8000d58:	f005 f856 	bl	8005e08 <HAL_Delay>
            if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8000d5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d60:	4818      	ldr	r0, [pc, #96]	@ (8000dc4 <Snake_GameLoop+0x1a4>)
 8000d62:	f005 fc67 	bl	8006634 <HAL_GPIO_ReadPin>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d10a      	bne.n	8000d82 <Snake_GameLoop+0x162>
            {
                Snake_InitGame();
 8000d6c:	f7ff fdc2 	bl	80008f4 <Snake_InitGame>
                while (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8000d70:	bf00      	nop
 8000d72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d76:	4813      	ldr	r0, [pc, #76]	@ (8000dc4 <Snake_GameLoop+0x1a4>)
 8000d78:	f005 fc5c 	bl	8006634 <HAL_GPIO_ReadPin>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0f7      	beq.n	8000d72 <Snake_GameLoop+0x152>
                    ;
            }
        }
    }
    char score_str[20];
    sprintf(score_str, "Score: %d", snake.length - 3);
 8000d82:	4b0d      	ldr	r3, [pc, #52]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000d84:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000d88:	1eda      	subs	r2, r3, #3
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	490e      	ldr	r1, [pc, #56]	@ (8000dc8 <Snake_GameLoop+0x1a8>)
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f007 fe00 	bl	8008994 <siprintf>
    OLED_DisplayString(0, OLED_HEIGHT-8, score_str);
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	461a      	mov	r2, r3
 8000d98:	2138      	movs	r1, #56	@ 0x38
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f001 fb40 	bl	8002420 <OLED_DisplayString>
}
 8000da0:	bf00      	nop
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000000 	.word	0x20000000
 8000dac:	20000304 	.word	0x20000304
 8000db0:	20000264 	.word	0x20000264
 8000db4:	20000266 	.word	0x20000266
 8000db8:	2000009c 	.word	0x2000009c
 8000dbc:	20000238 	.word	0x20000238
 8000dc0:	20000236 	.word	0x20000236
 8000dc4:	40010c00 	.word	0x40010c00
 8000dc8:	0800b020 	.word	0x0800b020

08000dcc <Game2048_AddRandomTile>:

#pragma region 2048 Game Definitions
// --- 2048 Game Implementation ---

static void Game2048_AddRandomTile()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b092      	sub	sp, #72	@ 0x48
 8000dd0:	af00      	add	r7, sp, #0
    Point empty_tiles[GAME2048_BOARD_SIZE * GAME2048_BOARD_SIZE]; // Use GAME2048_BOARD_SIZE
    uint8_t num_empty_tiles = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8000dde:	e035      	b.n	8000e4c <Game2048_AddRandomTile+0x80>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000de0:	2300      	movs	r3, #0
 8000de2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8000de6:	e028      	b.n	8000e3a <Game2048_AddRandomTile+0x6e>
        {
            if (game2048_board[r][c].value == 0)
 8000de8:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8000dec:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000df0:	493a      	ldr	r1, [pc, #232]	@ (8000edc <Game2048_AddRandomTile+0x110>)
 8000df2:	0092      	lsls	r2, r2, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d118      	bne.n	8000e30 <Game2048_AddRandomTile+0x64>
            {
                empty_tiles[num_empty_tiles].x = c;
 8000dfe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000e02:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8000e06:	b212      	sxth	r2, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	3348      	adds	r3, #72	@ 0x48
 8000e0c:	443b      	add	r3, r7
 8000e0e:	f823 2c48 	strh.w	r2, [r3, #-72]
                empty_tiles[num_empty_tiles].y = r;
 8000e12:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000e16:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8000e1a:	b212      	sxth	r2, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	3348      	adds	r3, #72	@ 0x48
 8000e20:	443b      	add	r3, r7
 8000e22:	f823 2c46 	strh.w	r2, [r3, #-70]
                num_empty_tiles++;
 8000e26:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000e30:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000e34:	3301      	adds	r3, #1
 8000e36:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8000e3a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d9d2      	bls.n	8000de8 <Game2048_AddRandomTile+0x1c>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000e42:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000e46:	3301      	adds	r3, #1
 8000e48:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8000e4c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000e50:	2b03      	cmp	r3, #3
 8000e52:	d9c5      	bls.n	8000de0 <Game2048_AddRandomTile+0x14>
            }
        }
    }
    if (num_empty_tiles > 0)
 8000e54:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d03a      	beq.n	8000ed2 <Game2048_AddRandomTile+0x106>
    {
        uint16_t rand_index = rand() % num_empty_tiles;
 8000e5c:	f007 fc9a 	bl	8008794 <rand>
 8000e60:	4602      	mov	r2, r0
 8000e62:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000e66:	fb92 f1f3 	sdiv	r1, r2, r3
 8000e6a:	fb01 f303 	mul.w	r3, r1, r3
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        uint8_t r_pos = empty_tiles[rand_index].y;
 8000e74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	3348      	adds	r3, #72	@ 0x48
 8000e7c:	443b      	add	r3, r7
 8000e7e:	f933 3c46 	ldrsh.w	r3, [r3, #-70]
 8000e82:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
        uint8_t c_pos = empty_tiles[rand_index].x;
 8000e86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	3348      	adds	r3, #72	@ 0x48
 8000e8e:	443b      	add	r3, r7
 8000e90:	f933 3c48 	ldrsh.w	r3, [r3, #-72]
 8000e94:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
        game2048_board[r_pos][c_pos].value = (rand() % 10 == 0) ? 4 : 2;
 8000e98:	f007 fc7c 	bl	8008794 <rand>
 8000e9c:	4601      	mov	r1, r0
 8000e9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <Game2048_AddRandomTile+0x114>)
 8000ea0:	fb83 2301 	smull	r2, r3, r3, r1
 8000ea4:	109a      	asrs	r2, r3, #2
 8000ea6:	17cb      	asrs	r3, r1, #31
 8000ea8:	1ad2      	subs	r2, r2, r3
 8000eaa:	4613      	mov	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	1aca      	subs	r2, r1, r3
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	d101      	bne.n	8000ebc <Game2048_AddRandomTile+0xf0>
 8000eb8:	2004      	movs	r0, #4
 8000eba:	e000      	b.n	8000ebe <Game2048_AddRandomTile+0xf2>
 8000ebc:	2002      	movs	r0, #2
 8000ebe:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 8000ec2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000ec6:	4905      	ldr	r1, [pc, #20]	@ (8000edc <Game2048_AddRandomTile+0x110>)
 8000ec8:	0092      	lsls	r2, r2, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	4602      	mov	r2, r0
 8000ece:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }
}
 8000ed2:	bf00      	nop
 8000ed4:	3748      	adds	r7, #72	@ 0x48
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000023c 	.word	0x2000023c
 8000ee0:	66666667 	.word	0x66666667

08000ee4 <Game2048_Init>:

void Game2048_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000eea:	2300      	movs	r3, #0
 8000eec:	71fb      	strb	r3, [r7, #7]
 8000eee:	e013      	b.n	8000f18 <Game2048_Init+0x34>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	71bb      	strb	r3, [r7, #6]
 8000ef4:	e00a      	b.n	8000f0c <Game2048_Init+0x28>
        {
            game2048_board[r][c].value = 0;
 8000ef6:	79fa      	ldrb	r2, [r7, #7]
 8000ef8:	79bb      	ldrb	r3, [r7, #6]
 8000efa:	4914      	ldr	r1, [pc, #80]	@ (8000f4c <Game2048_Init+0x68>)
 8000efc:	0092      	lsls	r2, r2, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	2200      	movs	r2, #0
 8000f02:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000f06:	79bb      	ldrb	r3, [r7, #6]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	71bb      	strb	r3, [r7, #6]
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d9f1      	bls.n	8000ef6 <Game2048_Init+0x12>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	3301      	adds	r3, #1
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d9e8      	bls.n	8000ef0 <Game2048_Init+0xc>
        }
    }
    game2048_score = 0;
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <Game2048_Init+0x6c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
    game2048_game_over = false;
 8000f24:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <Game2048_Init+0x70>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
    game2048_game_won = false;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <Game2048_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
    game2048_move_made_this_turn = false;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <Game2048_Init+0x78>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
    FirstRun = true; // Reset the first run flag
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <Game2048_Init+0x7c>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	701a      	strb	r2, [r3, #0]
    Game2048_AddRandomTile();
 8000f3c:	f7ff ff46 	bl	8000dcc <Game2048_AddRandomTile>

    OLED_UpdateDisplayVSync(); // Update display to show the initial state
 8000f40:	f000 fe82 	bl	8001c48 <OLED_UpdateDisplayVSync>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2000023c 	.word	0x2000023c
 8000f50:	2000025c 	.word	0x2000025c
 8000f54:	20000260 	.word	0x20000260
 8000f58:	20000261 	.word	0x20000261
 8000f5c:	20000262 	.word	0x20000262
 8000f60:	20000000 	.word	0x20000000

08000f64 <Game2048_Restart>:

void Game2048_Restart(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
    Game2048_Init();
 8000f68:	f7ff ffbc 	bl	8000ee4 <Game2048_Init>
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <Game2048_DrawBoard>:

void Game2048_DrawBoard(void)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b089      	sub	sp, #36	@ 0x24
 8000f74:	af02      	add	r7, sp, #8
    OLED_ClearBuffer();
 8000f76:	f000 fe1f 	bl	8001bb8 <OLED_ClearBuffer>
    char str_buffer[10];
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	75fb      	strb	r3, [r7, #23]
 8000f7e:	e068      	b.n	8001052 <Game2048_DrawBoard+0xe2>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000f80:	2300      	movs	r3, #0
 8000f82:	75bb      	strb	r3, [r7, #22]
 8000f84:	e05f      	b.n	8001046 <Game2048_DrawBoard+0xd6>
        {
            uint16_t val = game2048_board[r][c].value;
 8000f86:	7dfa      	ldrb	r2, [r7, #23]
 8000f88:	7dbb      	ldrb	r3, [r7, #22]
 8000f8a:	494d      	ldr	r1, [pc, #308]	@ (80010c0 <Game2048_DrawBoard+0x150>)
 8000f8c:	0092      	lsls	r2, r2, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f94:	82bb      	strh	r3, [r7, #20]
            uint8_t tile_x = c * GAME2048_TILE_WIDTH;
 8000f96:	7dbb      	ldrb	r3, [r7, #22]
 8000f98:	015b      	lsls	r3, r3, #5
 8000f9a:	74fb      	strb	r3, [r7, #19]
            uint8_t tile_y = r * GAME2048_TILE_HEIGHT;
 8000f9c:	7dfb      	ldrb	r3, [r7, #23]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	00d2      	lsls	r2, r2, #3
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	74bb      	strb	r3, [r7, #18]
            uint8_t tile_inner_width = GAME2048_TILE_WIDTH - 2 * GAME2048_TILE_PADDING;
 8000fa8:	231e      	movs	r3, #30
 8000faa:	747b      	strb	r3, [r7, #17]
            uint8_t tile_inner_height = GAME2048_TILE_HEIGHT - 2 * GAME2048_TILE_PADDING;
 8000fac:	230c      	movs	r3, #12
 8000fae:	743b      	strb	r3, [r7, #16]

            OLED_DrawFilledRectangle(tile_x + GAME2048_TILE_PADDING,
 8000fb0:	7cfb      	ldrb	r3, [r7, #19]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	b218      	sxth	r0, r3
                                     tile_y + GAME2048_TILE_PADDING,
 8000fba:	7cbb      	ldrb	r3, [r7, #18]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	b29b      	uxth	r3, r3
            OLED_DrawFilledRectangle(tile_x + GAME2048_TILE_PADDING,
 8000fc2:	b219      	sxth	r1, r3
 8000fc4:	8abb      	ldrh	r3, [r7, #20]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	bf14      	ite	ne
 8000fca:	2301      	movne	r3, #1
 8000fcc:	2300      	moveq	r3, #0
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	461c      	mov	r4, r3
 8000fd2:	7c3b      	ldrb	r3, [r7, #16]
 8000fd4:	7c7a      	ldrb	r2, [r7, #17]
 8000fd6:	9400      	str	r4, [sp, #0]
 8000fd8:	f004 faa7 	bl	800552a <OLED_DrawFilledRectangle>
                                     tile_inner_width, tile_inner_height,
                                     (val == 0) ? 0 : 1);
            if (val > 0)
 8000fdc:	8abb      	ldrh	r3, [r7, #20]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d02e      	beq.n	8001040 <Game2048_DrawBoard+0xd0>
            {
                sprintf(str_buffer, "%d", val);
 8000fe2:	8aba      	ldrh	r2, [r7, #20]
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4937      	ldr	r1, [pc, #220]	@ (80010c4 <Game2048_DrawBoard+0x154>)
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f007 fcd3 	bl	8008994 <siprintf>
                uint8_t text_width = strlen(str_buffer) * 6;
 8000fee:	463b      	mov	r3, r7
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff f8b5 	bl	8000160 <strlen>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	0052      	lsls	r2, r2, #1
 8000ffe:	4413      	add	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
                uint8_t text_height = 8;
 8001004:	2308      	movs	r3, #8
 8001006:	73bb      	strb	r3, [r7, #14]
                uint8_t text_x = tile_x + (GAME2048_TILE_WIDTH - text_width) / 2;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	f1c3 0320 	rsb	r3, r3, #32
 800100e:	0fda      	lsrs	r2, r3, #31
 8001010:	4413      	add	r3, r2
 8001012:	105b      	asrs	r3, r3, #1
 8001014:	b2da      	uxtb	r2, r3
 8001016:	7cfb      	ldrb	r3, [r7, #19]
 8001018:	4413      	add	r3, r2
 800101a:	737b      	strb	r3, [r7, #13]
                uint8_t text_y = tile_y + (GAME2048_TILE_HEIGHT - text_height) / 2;
 800101c:	7bbb      	ldrb	r3, [r7, #14]
 800101e:	f1c3 030e 	rsb	r3, r3, #14
 8001022:	0fda      	lsrs	r2, r3, #31
 8001024:	4413      	add	r3, r2
 8001026:	105b      	asrs	r3, r3, #1
 8001028:	b2da      	uxtb	r2, r3
 800102a:	7cbb      	ldrb	r3, [r7, #18]
 800102c:	4413      	add	r3, r2
 800102e:	733b      	strb	r3, [r7, #12]
                OLED_DisplayStringInverted(text_x, text_y, str_buffer, 1);
 8001030:	7b7b      	ldrb	r3, [r7, #13]
 8001032:	b218      	sxth	r0, r3
 8001034:	7b3b      	ldrb	r3, [r7, #12]
 8001036:	b219      	sxth	r1, r3
 8001038:	463a      	mov	r2, r7
 800103a:	2301      	movs	r3, #1
 800103c:	f001 fa3d 	bl	80024ba <OLED_DisplayStringInverted>
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001040:	7dbb      	ldrb	r3, [r7, #22]
 8001042:	3301      	adds	r3, #1
 8001044:	75bb      	strb	r3, [r7, #22]
 8001046:	7dbb      	ldrb	r3, [r7, #22]
 8001048:	2b03      	cmp	r3, #3
 800104a:	d99c      	bls.n	8000f86 <Game2048_DrawBoard+0x16>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	3301      	adds	r3, #1
 8001050:	75fb      	strb	r3, [r7, #23]
 8001052:	7dfb      	ldrb	r3, [r7, #23]
 8001054:	2b03      	cmp	r3, #3
 8001056:	d993      	bls.n	8000f80 <Game2048_DrawBoard+0x10>
            }
        }
    }
    sprintf(str_buffer, "Scores:%lu", game2048_score);
 8001058:	4b1b      	ldr	r3, [pc, #108]	@ (80010c8 <Game2048_DrawBoard+0x158>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	463b      	mov	r3, r7
 800105e:	491b      	ldr	r1, [pc, #108]	@ (80010cc <Game2048_DrawBoard+0x15c>)
 8001060:	4618      	mov	r0, r3
 8001062:	f007 fc97 	bl	8008994 <siprintf>
    OLED_DisplayString(0, OLED_HEIGHT - 8, str_buffer);
 8001066:	463b      	mov	r3, r7
 8001068:	461a      	mov	r2, r3
 800106a:	2138      	movs	r1, #56	@ 0x38
 800106c:	2000      	movs	r0, #0
 800106e:	f001 f9d7 	bl	8002420 <OLED_DisplayString>

    if (game2048_game_over)
 8001072:	4b17      	ldr	r3, [pc, #92]	@ (80010d0 <Game2048_DrawBoard+0x160>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d014      	beq.n	80010a4 <Game2048_DrawBoard+0x134>
    {
        OLED_DrawFilledRectangle(0, 0, OLED_WIDTH, OLED_HEIGHT-8, 1);
 800107a:	2301      	movs	r3, #1
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2338      	movs	r3, #56	@ 0x38
 8001080:	2280      	movs	r2, #128	@ 0x80
 8001082:	2100      	movs	r1, #0
 8001084:	2000      	movs	r0, #0
 8001086:	f004 fa50 	bl	800552a <OLED_DrawFilledRectangle>
        OLED_DisplayStringInverted((OLED_WIDTH - 8 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2 - 8, "GAME OVER", 1);
 800108a:	2301      	movs	r3, #1
 800108c:	4a11      	ldr	r2, [pc, #68]	@ (80010d4 <Game2048_DrawBoard+0x164>)
 800108e:	2114      	movs	r1, #20
 8001090:	2028      	movs	r0, #40	@ 0x28
 8001092:	f001 fa12 	bl	80024ba <OLED_DisplayStringInverted>
        OLED_DisplayStringInverted((OLED_WIDTH - 10 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2, "RST BTN=RS", 1);
 8001096:	2301      	movs	r3, #1
 8001098:	4a0f      	ldr	r2, [pc, #60]	@ (80010d8 <Game2048_DrawBoard+0x168>)
 800109a:	211c      	movs	r1, #28
 800109c:	2022      	movs	r0, #34	@ 0x22
 800109e:	f001 fa0c 	bl	80024ba <OLED_DisplayStringInverted>
    }
    else if (game2048_game_won)
    {
        OLED_DisplayString((OLED_WIDTH - 7 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2 - 4, "YOU WIN!");
    }
}
 80010a2:	e008      	b.n	80010b6 <Game2048_DrawBoard+0x146>
    else if (game2048_game_won)
 80010a4:	4b0d      	ldr	r3, [pc, #52]	@ (80010dc <Game2048_DrawBoard+0x16c>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d004      	beq.n	80010b6 <Game2048_DrawBoard+0x146>
        OLED_DisplayString((OLED_WIDTH - 7 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2 - 4, "YOU WIN!");
 80010ac:	4a0c      	ldr	r2, [pc, #48]	@ (80010e0 <Game2048_DrawBoard+0x170>)
 80010ae:	2118      	movs	r1, #24
 80010b0:	202b      	movs	r0, #43	@ 0x2b
 80010b2:	f001 f9b5 	bl	8002420 <OLED_DisplayString>
}
 80010b6:	bf00      	nop
 80010b8:	371c      	adds	r7, #28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd90      	pop	{r4, r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000023c 	.word	0x2000023c
 80010c4:	0800b02c 	.word	0x0800b02c
 80010c8:	2000025c 	.word	0x2000025c
 80010cc:	0800b030 	.word	0x0800b030
 80010d0:	20000260 	.word	0x20000260
 80010d4:	0800b03c 	.word	0x0800b03c
 80010d8:	0800b014 	.word	0x0800b014
 80010dc:	20000261 	.word	0x20000261
 80010e0:	0800b048 	.word	0x0800b048

080010e4 <Game2048_CompactAndMerge>:

static void Game2048_CompactAndMerge(uint8_t line_idx, Direction dir, bool is_row)
{
 80010e4:	b490      	push	{r4, r7}
 80010e6:	b08c      	sub	sp, #48	@ 0x30
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
 80010ee:	460b      	mov	r3, r1
 80010f0:	71bb      	strb	r3, [r7, #6]
 80010f2:	4613      	mov	r3, r2
 80010f4:	717b      	strb	r3, [r7, #5]
    uint8_t line_size = GAME2048_BOARD_SIZE;          // Use GAME2048_BOARD_SIZE
 80010f6:	2304      	movs	r3, #4
 80010f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint16_t temp_line[GAME2048_BOARD_SIZE] = {0};    // Use GAME2048_BOARD_SIZE
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
    uint16_t original_line_copy[GAME2048_BOARD_SIZE]; // To check if anything changed

    for (uint8_t i = 0; i < line_size; ++i)
 8001106:	2300      	movs	r3, #0
 8001108:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800110c:	e01f      	b.n	800114e <Game2048_CompactAndMerge+0x6a>
    {
        original_line_copy[i] = is_row ? game2048_board[line_idx][i].value : game2048_board[i][line_idx].value;
 800110e:	797b      	ldrb	r3, [r7, #5]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d008      	beq.n	8001126 <Game2048_CompactAndMerge+0x42>
 8001114:	79fa      	ldrb	r2, [r7, #7]
 8001116:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800111a:	49c2      	ldr	r1, [pc, #776]	@ (8001424 <Game2048_CompactAndMerge+0x340>)
 800111c:	0092      	lsls	r2, r2, #2
 800111e:	4413      	add	r3, r2
 8001120:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001124:	e007      	b.n	8001136 <Game2048_CompactAndMerge+0x52>
 8001126:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	49bd      	ldr	r1, [pc, #756]	@ (8001424 <Game2048_CompactAndMerge+0x340>)
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	4413      	add	r3, r2
 8001132:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001136:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	3330      	adds	r3, #48	@ 0x30
 800113e:	443b      	add	r3, r7
 8001140:	f823 2c24 	strh.w	r2, [r3, #-36]
    for (uint8_t i = 0; i < line_size; ++i)
 8001144:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001148:	3301      	adds	r3, #1
 800114a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800114e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001152:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001156:	429a      	cmp	r2, r3
 8001158:	d3d9      	bcc.n	800110e <Game2048_CompactAndMerge+0x2a>
    }

    int8_t write_pos = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t increment = 1;
 8001160:	2301      	movs	r3, #1
 8001162:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (dir == DIR_DOWN || dir == DIR_RIGHT)
 8001166:	79bb      	ldrb	r3, [r7, #6]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d002      	beq.n	8001172 <Game2048_CompactAndMerge+0x8e>
 800116c:	79bb      	ldrb	r3, [r7, #6]
 800116e:	2b03      	cmp	r3, #3
 8001170:	d108      	bne.n	8001184 <Game2048_CompactAndMerge+0xa0>
    {
        write_pos = line_size - 1;
 8001172:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001176:	3b01      	subs	r3, #1
 8001178:	b2db      	uxtb	r3, r3
 800117a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        increment = -1;
 800117e:	23ff      	movs	r3, #255	@ 0xff
 8001180:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    }

    int8_t compact_pos = write_pos;
 8001184:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001188:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 800118c:	2300      	movs	r3, #0
 800118e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001192:	e041      	b.n	8001218 <Game2048_CompactAndMerge+0x134>
    {
        int8_t read_pos_actual = (dir == DIR_DOWN || dir == DIR_RIGHT) ? (line_size - 1 - i) : i;
 8001194:	79bb      	ldrb	r3, [r7, #6]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d002      	beq.n	80011a0 <Game2048_CompactAndMerge+0xbc>
 800119a:	79bb      	ldrb	r3, [r7, #6]
 800119c:	2b03      	cmp	r3, #3
 800119e:	d109      	bne.n	80011b4 <Game2048_CompactAndMerge+0xd0>
 80011a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80011a4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	3b01      	subs	r3, #1
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	b25b      	sxtb	r3, r3
 80011b2:	e001      	b.n	80011b8 <Game2048_CompactAndMerge+0xd4>
 80011b4:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80011b8:	f887 3020 	strb.w	r3, [r7, #32]
        uint16_t current_tile_value = is_row ? game2048_board[line_idx][read_pos_actual].value
 80011bc:	797b      	ldrb	r3, [r7, #5]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d008      	beq.n	80011d4 <Game2048_CompactAndMerge+0xf0>
 80011c2:	79fa      	ldrb	r2, [r7, #7]
 80011c4:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80011c8:	4996      	ldr	r1, [pc, #600]	@ (8001424 <Game2048_CompactAndMerge+0x340>)
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011d2:	e007      	b.n	80011e4 <Game2048_CompactAndMerge+0x100>
                                             : game2048_board[read_pos_actual][line_idx].value;
 80011d4:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80011d8:	79fb      	ldrb	r3, [r7, #7]
        uint16_t current_tile_value = is_row ? game2048_board[line_idx][read_pos_actual].value
 80011da:	4992      	ldr	r1, [pc, #584]	@ (8001424 <Game2048_CompactAndMerge+0x340>)
 80011dc:	0092      	lsls	r2, r2, #2
 80011de:	4413      	add	r3, r2
 80011e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011e4:	83fb      	strh	r3, [r7, #30]
        if (current_tile_value != 0)
 80011e6:	8bfb      	ldrh	r3, [r7, #30]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00f      	beq.n	800120c <Game2048_CompactAndMerge+0x128>
        {
            temp_line[compact_pos] = current_tile_value;
 80011ec:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	3330      	adds	r3, #48	@ 0x30
 80011f4:	443b      	add	r3, r7
 80011f6:	8bfa      	ldrh	r2, [r7, #30]
 80011f8:	f823 2c1c 	strh.w	r2, [r3, #-28]
            compact_pos += increment;
 80011fc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001200:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001204:	4413      	add	r3, r2
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 800120c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001210:	3301      	adds	r3, #1
 8001212:	b2db      	uxtb	r3, r3
 8001214:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001218:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 800121c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001220:	429a      	cmp	r2, r3
 8001222:	dbb7      	blt.n	8001194 <Game2048_CompactAndMerge+0xb0>
        }
    }

    for (int8_t i = 0; i < line_size - 1; ++i)
 8001224:	2300      	movs	r3, #0
 8001226:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800122a:	e078      	b.n	800131e <Game2048_CompactAndMerge+0x23a>
    {
        int8_t current_idx = (dir == DIR_DOWN || dir == DIR_RIGHT) ? (line_size - 1 - i) : i;
 800122c:	79bb      	ldrb	r3, [r7, #6]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d002      	beq.n	8001238 <Game2048_CompactAndMerge+0x154>
 8001232:	79bb      	ldrb	r3, [r7, #6]
 8001234:	2b03      	cmp	r3, #3
 8001236:	d109      	bne.n	800124c <Game2048_CompactAndMerge+0x168>
 8001238:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800123c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	3b01      	subs	r3, #1
 8001246:	b2db      	uxtb	r3, r3
 8001248:	b25b      	sxtb	r3, r3
 800124a:	e001      	b.n	8001250 <Game2048_CompactAndMerge+0x16c>
 800124c:	f997 302a 	ldrsb.w	r3, [r7, #42]	@ 0x2a
 8001250:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        int8_t next_idx = current_idx + increment;
 8001254:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001258:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800125c:	4413      	add	r3, r2
 800125e:	b2db      	uxtb	r3, r3
 8001260:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        if (next_idx < 0 || next_idx >= line_size)
 8001264:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8001268:	2b00      	cmp	r3, #0
 800126a:	db51      	blt.n	8001310 <Game2048_CompactAndMerge+0x22c>
 800126c:	f997 2021 	ldrsb.w	r2, [r7, #33]	@ 0x21
 8001270:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001274:	429a      	cmp	r2, r3
 8001276:	da4b      	bge.n	8001310 <Game2048_CompactAndMerge+0x22c>
            continue;

        if (temp_line[current_idx] != 0 && temp_line[current_idx] == temp_line[next_idx])
 8001278:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	3330      	adds	r3, #48	@ 0x30
 8001280:	443b      	add	r3, r7
 8001282:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d043      	beq.n	8001312 <Game2048_CompactAndMerge+0x22e>
 800128a:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	3330      	adds	r3, #48	@ 0x30
 8001292:	443b      	add	r3, r7
 8001294:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 8001298:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	3330      	adds	r3, #48	@ 0x30
 80012a0:	443b      	add	r3, r7
 80012a2:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d133      	bne.n	8001312 <Game2048_CompactAndMerge+0x22e>
        {
            temp_line[current_idx] *= 2;
 80012aa:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	3330      	adds	r3, #48	@ 0x30
 80012b2:	443b      	add	r3, r7
 80012b4:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 80012b8:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80012bc:	0052      	lsls	r2, r2, #1
 80012be:	b292      	uxth	r2, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	3330      	adds	r3, #48	@ 0x30
 80012c4:	443b      	add	r3, r7
 80012c6:	f823 2c1c 	strh.w	r2, [r3, #-28]
            game2048_score += temp_line[current_idx];
 80012ca:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	3330      	adds	r3, #48	@ 0x30
 80012d2:	443b      	add	r3, r7
 80012d4:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b53      	ldr	r3, [pc, #332]	@ (8001428 <Game2048_CompactAndMerge+0x344>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	4a51      	ldr	r2, [pc, #324]	@ (8001428 <Game2048_CompactAndMerge+0x344>)
 80012e2:	6013      	str	r3, [r2, #0]
            temp_line[next_idx] = 0;
 80012e4:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	3330      	adds	r3, #48	@ 0x30
 80012ec:	443b      	add	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	f823 2c1c 	strh.w	r2, [r3, #-28]
            if (temp_line[current_idx] == 2048)
 80012f4:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	3330      	adds	r3, #48	@ 0x30
 80012fc:	443b      	add	r3, r7
 80012fe:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001302:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001306:	d104      	bne.n	8001312 <Game2048_CompactAndMerge+0x22e>
                game2048_game_won = true;
 8001308:	4b48      	ldr	r3, [pc, #288]	@ (800142c <Game2048_CompactAndMerge+0x348>)
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
 800130e:	e000      	b.n	8001312 <Game2048_CompactAndMerge+0x22e>
            continue;
 8001310:	bf00      	nop
    for (int8_t i = 0; i < line_size - 1; ++i)
 8001312:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001316:	3301      	adds	r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800131e:	f997 202a 	ldrsb.w	r2, [r7, #42]	@ 0x2a
 8001322:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001326:	3b01      	subs	r3, #1
 8001328:	429a      	cmp	r2, r3
 800132a:	f6ff af7f 	blt.w	800122c <Game2048_CompactAndMerge+0x148>
        }
    }

    compact_pos = write_pos;
 800132e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001332:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 8001336:	2300      	movs	r3, #0
 8001338:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800133c:	e045      	b.n	80013ca <Game2048_CompactAndMerge+0x2e6>
    {
        int8_t read_pos_temp = (dir == DIR_DOWN || dir == DIR_RIGHT) ? (line_size - 1 - i) : i;
 800133e:	79bb      	ldrb	r3, [r7, #6]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d002      	beq.n	800134a <Game2048_CompactAndMerge+0x266>
 8001344:	79bb      	ldrb	r3, [r7, #6]
 8001346:	2b03      	cmp	r3, #3
 8001348:	d109      	bne.n	800135e <Game2048_CompactAndMerge+0x27a>
 800134a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800134e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	b2db      	uxtb	r3, r3
 8001356:	3b01      	subs	r3, #1
 8001358:	b2db      	uxtb	r3, r3
 800135a:	b25b      	sxtb	r3, r3
 800135c:	e001      	b.n	8001362 <Game2048_CompactAndMerge+0x27e>
 800135e:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 8001362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        // The condition "if (temp_line[read_pos_temp] != 0)" was problematic.
        // temp_line already contains the correct values, including zeros, after compaction and merging.
        // We should always write the value from temp_line to the board and advance compact_pos.
        if (is_row)
 8001366:	797b      	ldrb	r3, [r7, #5]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d010      	beq.n	800138e <Game2048_CompactAndMerge+0x2aa>
        {
            game2048_board[line_idx][compact_pos].value = temp_line[read_pos_temp];
 800136c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8001370:	79f9      	ldrb	r1, [r7, #7]
 8001372:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	3330      	adds	r3, #48	@ 0x30
 800137a:	443b      	add	r3, r7
 800137c:	f833 4c1c 	ldrh.w	r4, [r3, #-28]
 8001380:	4828      	ldr	r0, [pc, #160]	@ (8001424 <Game2048_CompactAndMerge+0x340>)
 8001382:	008b      	lsls	r3, r1, #2
 8001384:	4413      	add	r3, r2
 8001386:	4622      	mov	r2, r4
 8001388:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800138c:	e00f      	b.n	80013ae <Game2048_CompactAndMerge+0x2ca>
        }
        else
        {
            game2048_board[compact_pos][line_idx].value = temp_line[read_pos_temp];
 800138e:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8001392:	f997 102c 	ldrsb.w	r1, [r7, #44]	@ 0x2c
 8001396:	79fa      	ldrb	r2, [r7, #7]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	3330      	adds	r3, #48	@ 0x30
 800139c:	443b      	add	r3, r7
 800139e:	f833 4c1c 	ldrh.w	r4, [r3, #-28]
 80013a2:	4820      	ldr	r0, [pc, #128]	@ (8001424 <Game2048_CompactAndMerge+0x340>)
 80013a4:	008b      	lsls	r3, r1, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	4622      	mov	r2, r4
 80013aa:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        }
        compact_pos += increment; // compact_pos should always be updated.
 80013ae:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80013b2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80013b6:	4413      	add	r3, r2
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 80013be:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80013c2:	3301      	adds	r3, #1
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80013ca:	f997 2029 	ldrsb.w	r2, [r7, #41]	@ 0x29
 80013ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013d2:	429a      	cmp	r2, r3
 80013d4:	dbb3      	blt.n	800133e <Game2048_CompactAndMerge+0x25a>
    }

    for (uint8_t i = 0; i < line_size; ++i)
 80013d6:	2300      	movs	r3, #0
 80013d8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80013dc:	e02f      	b.n	800143e <Game2048_CompactAndMerge+0x35a>
    {
        uint16_t current_val = is_row ? game2048_board[line_idx][i].value : game2048_board[i][line_idx].value;
 80013de:	797b      	ldrb	r3, [r7, #5]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d008      	beq.n	80013f6 <Game2048_CompactAndMerge+0x312>
 80013e4:	79fa      	ldrb	r2, [r7, #7]
 80013e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80013ea:	490e      	ldr	r1, [pc, #56]	@ (8001424 <Game2048_CompactAndMerge+0x340>)
 80013ec:	0092      	lsls	r2, r2, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013f4:	e007      	b.n	8001406 <Game2048_CompactAndMerge+0x322>
 80013f6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	4909      	ldr	r1, [pc, #36]	@ (8001424 <Game2048_CompactAndMerge+0x340>)
 80013fe:	0092      	lsls	r2, r2, #2
 8001400:	4413      	add	r3, r2
 8001402:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001406:	84bb      	strh	r3, [r7, #36]	@ 0x24
        if (original_line_copy[i] != current_val)
 8001408:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	3330      	adds	r3, #48	@ 0x30
 8001410:	443b      	add	r3, r7
 8001412:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001416:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001418:	429a      	cmp	r2, r3
 800141a:	d00b      	beq.n	8001434 <Game2048_CompactAndMerge+0x350>
        {
            game2048_move_made_this_turn = true;
 800141c:	4b04      	ldr	r3, [pc, #16]	@ (8001430 <Game2048_CompactAndMerge+0x34c>)
 800141e:	2201      	movs	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
            break;
 8001422:	e013      	b.n	800144c <Game2048_CompactAndMerge+0x368>
 8001424:	2000023c 	.word	0x2000023c
 8001428:	2000025c 	.word	0x2000025c
 800142c:	20000261 	.word	0x20000261
 8001430:	20000262 	.word	0x20000262
    for (uint8_t i = 0; i < line_size; ++i)
 8001434:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001438:	3301      	adds	r3, #1
 800143a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800143e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001442:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001446:	429a      	cmp	r2, r3
 8001448:	d3c9      	bcc.n	80013de <Game2048_CompactAndMerge+0x2fa>
        }
    }
}
 800144a:	bf00      	nop
 800144c:	bf00      	nop
 800144e:	3730      	adds	r7, #48	@ 0x30
 8001450:	46bd      	mov	sp, r7
 8001452:	bc90      	pop	{r4, r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop

08001458 <Game2048_MoveUp>:

static void Game2048_MoveUp()
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 800145e:	2300      	movs	r3, #0
 8001460:	71fb      	strb	r3, [r7, #7]
 8001462:	e008      	b.n	8001476 <Game2048_MoveUp+0x1e>
    {
        Game2048_CompactAndMerge(c, DIR_UP, false);
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fe3a 	bl	80010e4 <Game2048_CompactAndMerge>
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	3301      	adds	r3, #1
 8001474:	71fb      	strb	r3, [r7, #7]
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	2b03      	cmp	r3, #3
 800147a:	d9f3      	bls.n	8001464 <Game2048_MoveUp+0xc>
    }
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <Game2048_MoveDown>:

static void Game2048_MoveDown()
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 800148c:	2300      	movs	r3, #0
 800148e:	71fb      	strb	r3, [r7, #7]
 8001490:	e008      	b.n	80014a4 <Game2048_MoveDown+0x1e>
    {
        Game2048_CompactAndMerge(c, DIR_DOWN, false);
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2200      	movs	r2, #0
 8001496:	2101      	movs	r1, #1
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fe23 	bl	80010e4 <Game2048_CompactAndMerge>
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	3301      	adds	r3, #1
 80014a2:	71fb      	strb	r3, [r7, #7]
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d9f3      	bls.n	8001492 <Game2048_MoveDown+0xc>
    }
}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <Game2048_MoveLeft>:

static void Game2048_MoveLeft()
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 80014ba:	2300      	movs	r3, #0
 80014bc:	71fb      	strb	r3, [r7, #7]
 80014be:	e008      	b.n	80014d2 <Game2048_MoveLeft+0x1e>
    {
        Game2048_CompactAndMerge(r, DIR_LEFT, true);
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	2201      	movs	r2, #1
 80014c4:	2102      	movs	r1, #2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fe0c 	bl	80010e4 <Game2048_CompactAndMerge>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	3301      	adds	r3, #1
 80014d0:	71fb      	strb	r3, [r7, #7]
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d9f3      	bls.n	80014c0 <Game2048_MoveLeft+0xc>
    }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <Game2048_MoveRight>:

static void Game2048_MoveRight()
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 80014e8:	2300      	movs	r3, #0
 80014ea:	71fb      	strb	r3, [r7, #7]
 80014ec:	e008      	b.n	8001500 <Game2048_MoveRight+0x1e>
    {
        Game2048_CompactAndMerge(r, DIR_RIGHT, true);
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	2201      	movs	r2, #1
 80014f2:	2103      	movs	r1, #3
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fdf5 	bl	80010e4 <Game2048_CompactAndMerge>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	3301      	adds	r3, #1
 80014fe:	71fb      	strb	r3, [r7, #7]
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d9f3      	bls.n	80014ee <Game2048_MoveRight+0xc>
    }
}
 8001506:	bf00      	nop
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <Game2048_CanMove>:

static bool Game2048_CanMove()
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001516:	2300      	movs	r3, #0
 8001518:	71fb      	strb	r3, [r7, #7]
 800151a:	e03e      	b.n	800159a <Game2048_CanMove+0x8a>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 800151c:	2300      	movs	r3, #0
 800151e:	71bb      	strb	r3, [r7, #6]
 8001520:	e035      	b.n	800158e <Game2048_CanMove+0x7e>
        {
            if (game2048_board[r][c].value == 0)
 8001522:	79fa      	ldrb	r2, [r7, #7]
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	4921      	ldr	r1, [pc, #132]	@ (80015ac <Game2048_CanMove+0x9c>)
 8001528:	0092      	lsls	r2, r2, #2
 800152a:	4413      	add	r3, r2
 800152c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <Game2048_CanMove+0x28>
                return true;
 8001534:	2301      	movs	r3, #1
 8001536:	e034      	b.n	80015a2 <Game2048_CanMove+0x92>
            uint16_t val = game2048_board[r][c].value;
 8001538:	79fa      	ldrb	r2, [r7, #7]
 800153a:	79bb      	ldrb	r3, [r7, #6]
 800153c:	491b      	ldr	r1, [pc, #108]	@ (80015ac <Game2048_CanMove+0x9c>)
 800153e:	0092      	lsls	r2, r2, #2
 8001540:	4413      	add	r3, r2
 8001542:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001546:	80bb      	strh	r3, [r7, #4]
            if (c < GAME2048_BOARD_SIZE - 1 && game2048_board[r][c + 1].value == val) // Use GAME2048_BOARD_SIZE
 8001548:	79bb      	ldrb	r3, [r7, #6]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d80c      	bhi.n	8001568 <Game2048_CanMove+0x58>
 800154e:	79fa      	ldrb	r2, [r7, #7]
 8001550:	79bb      	ldrb	r3, [r7, #6]
 8001552:	3301      	adds	r3, #1
 8001554:	4915      	ldr	r1, [pc, #84]	@ (80015ac <Game2048_CanMove+0x9c>)
 8001556:	0092      	lsls	r2, r2, #2
 8001558:	4413      	add	r3, r2
 800155a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800155e:	88ba      	ldrh	r2, [r7, #4]
 8001560:	429a      	cmp	r2, r3
 8001562:	d101      	bne.n	8001568 <Game2048_CanMove+0x58>
                return true;
 8001564:	2301      	movs	r3, #1
 8001566:	e01c      	b.n	80015a2 <Game2048_CanMove+0x92>
            if (r < GAME2048_BOARD_SIZE - 1 && game2048_board[r + 1][c].value == val) // Use GAME2048_BOARD_SIZE
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d80c      	bhi.n	8001588 <Game2048_CanMove+0x78>
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	1c5a      	adds	r2, r3, #1
 8001572:	79bb      	ldrb	r3, [r7, #6]
 8001574:	490d      	ldr	r1, [pc, #52]	@ (80015ac <Game2048_CanMove+0x9c>)
 8001576:	0092      	lsls	r2, r2, #2
 8001578:	4413      	add	r3, r2
 800157a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800157e:	88ba      	ldrh	r2, [r7, #4]
 8001580:	429a      	cmp	r2, r3
 8001582:	d101      	bne.n	8001588 <Game2048_CanMove+0x78>
                return true;
 8001584:	2301      	movs	r3, #1
 8001586:	e00c      	b.n	80015a2 <Game2048_CanMove+0x92>
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001588:	79bb      	ldrb	r3, [r7, #6]
 800158a:	3301      	adds	r3, #1
 800158c:	71bb      	strb	r3, [r7, #6]
 800158e:	79bb      	ldrb	r3, [r7, #6]
 8001590:	2b03      	cmp	r3, #3
 8001592:	d9c6      	bls.n	8001522 <Game2048_CanMove+0x12>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	3301      	adds	r3, #1
 8001598:	71fb      	strb	r3, [r7, #7]
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	2b03      	cmp	r3, #3
 800159e:	d9bd      	bls.n	800151c <Game2048_CanMove+0xc>
        }
    }
    return false;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	2000023c 	.word	0x2000023c

080015b0 <Game2048_HandleInput>:

bool Game2048_HandleInput(Direction input_dir)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
    if (game2048_game_over || game2048_game_won)
 80015ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <Game2048_HandleInput+0x88>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d103      	bne.n	80015ca <Game2048_HandleInput+0x1a>
 80015c2:	4b1e      	ldr	r3, [pc, #120]	@ (800163c <Game2048_HandleInput+0x8c>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <Game2048_HandleInput+0x1e>
        return false;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e02f      	b.n	800162e <Game2048_HandleInput+0x7e>

    game2048_move_made_this_turn = false;
 80015ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001640 <Game2048_HandleInput+0x90>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]

    switch (input_dir)
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d816      	bhi.n	8001608 <Game2048_HandleInput+0x58>
 80015da:	a201      	add	r2, pc, #4	@ (adr r2, 80015e0 <Game2048_HandleInput+0x30>)
 80015dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e0:	080015f1 	.word	0x080015f1
 80015e4:	080015f7 	.word	0x080015f7
 80015e8:	080015fd 	.word	0x080015fd
 80015ec:	08001603 	.word	0x08001603
    {
    case DIR_UP:
        Game2048_MoveUp();
 80015f0:	f7ff ff32 	bl	8001458 <Game2048_MoveUp>
        break;
 80015f4:	e008      	b.n	8001608 <Game2048_HandleInput+0x58>
    case DIR_DOWN:
        Game2048_MoveDown();
 80015f6:	f7ff ff46 	bl	8001486 <Game2048_MoveDown>
        break;
 80015fa:	e005      	b.n	8001608 <Game2048_HandleInput+0x58>
    case DIR_LEFT:
        Game2048_MoveLeft();
 80015fc:	f7ff ff5a 	bl	80014b4 <Game2048_MoveLeft>
        break;
 8001600:	e002      	b.n	8001608 <Game2048_HandleInput+0x58>
    case DIR_RIGHT:
        Game2048_MoveRight();
 8001602:	f7ff ff6e 	bl	80014e2 <Game2048_MoveRight>
        break;
 8001606:	bf00      	nop
    }

    if (game2048_move_made_this_turn)
 8001608:	4b0d      	ldr	r3, [pc, #52]	@ (8001640 <Game2048_HandleInput+0x90>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00c      	beq.n	800162a <Game2048_HandleInput+0x7a>
    {
        Game2048_AddRandomTile();
 8001610:	f7ff fbdc 	bl	8000dcc <Game2048_AddRandomTile>
        if (!Game2048_CanMove())
 8001614:	f7ff ff7c 	bl	8001510 <Game2048_CanMove>
 8001618:	4603      	mov	r3, r0
 800161a:	f083 0301 	eor.w	r3, r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <Game2048_HandleInput+0x7a>
        {
            game2048_game_over = true;
 8001624:	4b04      	ldr	r3, [pc, #16]	@ (8001638 <Game2048_HandleInput+0x88>)
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
        }
    }
    return game2048_move_made_this_turn;
 800162a:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <Game2048_HandleInput+0x90>)
 800162c:	781b      	ldrb	r3, [r3, #0]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000260 	.word	0x20000260
 800163c:	20000261 	.word	0x20000261
 8001640:	20000262 	.word	0x20000262

08001644 <Game2048_GameLoop>:

void Game2048_GameLoop(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
    static uint16_t LastCount;

    if (FirstRun)
 8001648:	4b48      	ldr	r3, [pc, #288]	@ (800176c <Game2048_GameLoop+0x128>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d006      	beq.n	800165e <Game2048_GameLoop+0x1a>
    {
        LastCount = count;
 8001650:	4b47      	ldr	r3, [pc, #284]	@ (8001770 <Game2048_GameLoop+0x12c>)
 8001652:	881a      	ldrh	r2, [r3, #0]
 8001654:	4b47      	ldr	r3, [pc, #284]	@ (8001774 <Game2048_GameLoop+0x130>)
 8001656:	801a      	strh	r2, [r3, #0]
        FirstRun = false;
 8001658:	4b44      	ldr	r3, [pc, #272]	@ (800176c <Game2048_GameLoop+0x128>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
    }

    if (count - LastCount > 1 && HAL_GPIO_ReadPin(GAME_BUTTON_PORT, GAME_BUTTON_PIN) == GPIO_PIN_SET)
 800165e:	4b44      	ldr	r3, [pc, #272]	@ (8001770 <Game2048_GameLoop+0x12c>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	4b43      	ldr	r3, [pc, #268]	@ (8001774 <Game2048_GameLoop+0x130>)
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b01      	cmp	r3, #1
 800166c:	dd0f      	ble.n	800168e <Game2048_GameLoop+0x4a>
 800166e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001672:	4841      	ldr	r0, [pc, #260]	@ (8001778 <Game2048_GameLoop+0x134>)
 8001674:	f004 ffde 	bl	8006634 <HAL_GPIO_ReadPin>
 8001678:	4603      	mov	r3, r0
 800167a:	2b01      	cmp	r3, #1
 800167c:	d107      	bne.n	800168e <Game2048_GameLoop+0x4a>
    {
        Game2048_HandleInput(DIR_RIGHT);
 800167e:	2003      	movs	r0, #3
 8001680:	f7ff ff96 	bl	80015b0 <Game2048_HandleInput>
        LastCount = count;
 8001684:	4b3a      	ldr	r3, [pc, #232]	@ (8001770 <Game2048_GameLoop+0x12c>)
 8001686:	881a      	ldrh	r2, [r3, #0]
 8001688:	4b3a      	ldr	r3, [pc, #232]	@ (8001774 <Game2048_GameLoop+0x130>)
 800168a:	801a      	strh	r2, [r3, #0]
 800168c:	e048      	b.n	8001720 <Game2048_GameLoop+0xdc>
    }
    else if (count - LastCount < -1 && HAL_GPIO_ReadPin(GAME_BUTTON_PORT, GAME_BUTTON_PIN) == GPIO_PIN_SET)
 800168e:	4b38      	ldr	r3, [pc, #224]	@ (8001770 <Game2048_GameLoop+0x12c>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	4b37      	ldr	r3, [pc, #220]	@ (8001774 <Game2048_GameLoop+0x130>)
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169e:	da0f      	bge.n	80016c0 <Game2048_GameLoop+0x7c>
 80016a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016a4:	4834      	ldr	r0, [pc, #208]	@ (8001778 <Game2048_GameLoop+0x134>)
 80016a6:	f004 ffc5 	bl	8006634 <HAL_GPIO_ReadPin>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d107      	bne.n	80016c0 <Game2048_GameLoop+0x7c>
    {
        Game2048_HandleInput(DIR_LEFT);
 80016b0:	2002      	movs	r0, #2
 80016b2:	f7ff ff7d 	bl	80015b0 <Game2048_HandleInput>
        LastCount = count;
 80016b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001770 <Game2048_GameLoop+0x12c>)
 80016b8:	881a      	ldrh	r2, [r3, #0]
 80016ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001774 <Game2048_GameLoop+0x130>)
 80016bc:	801a      	strh	r2, [r3, #0]
 80016be:	e02f      	b.n	8001720 <Game2048_GameLoop+0xdc>
    }
    else if (count - LastCount > 1 && HAL_GPIO_ReadPin(GAME_BUTTON_PORT, GAME_BUTTON_PIN) == GPIO_PIN_RESET)
 80016c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001770 <Game2048_GameLoop+0x12c>)
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001774 <Game2048_GameLoop+0x130>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	dd0f      	ble.n	80016f0 <Game2048_GameLoop+0xac>
 80016d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016d4:	4828      	ldr	r0, [pc, #160]	@ (8001778 <Game2048_GameLoop+0x134>)
 80016d6:	f004 ffad 	bl	8006634 <HAL_GPIO_ReadPin>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d107      	bne.n	80016f0 <Game2048_GameLoop+0xac>
    {
        Game2048_HandleInput(DIR_UP);
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7ff ff65 	bl	80015b0 <Game2048_HandleInput>
        LastCount = count;
 80016e6:	4b22      	ldr	r3, [pc, #136]	@ (8001770 <Game2048_GameLoop+0x12c>)
 80016e8:	881a      	ldrh	r2, [r3, #0]
 80016ea:	4b22      	ldr	r3, [pc, #136]	@ (8001774 <Game2048_GameLoop+0x130>)
 80016ec:	801a      	strh	r2, [r3, #0]
 80016ee:	e017      	b.n	8001720 <Game2048_GameLoop+0xdc>
    }
    else if (count - LastCount < -1 && HAL_GPIO_ReadPin(GAME_BUTTON_PORT, GAME_BUTTON_PIN) == GPIO_PIN_RESET)
 80016f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001770 <Game2048_GameLoop+0x12c>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001774 <Game2048_GameLoop+0x130>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001700:	da0e      	bge.n	8001720 <Game2048_GameLoop+0xdc>
 8001702:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001706:	481c      	ldr	r0, [pc, #112]	@ (8001778 <Game2048_GameLoop+0x134>)
 8001708:	f004 ff94 	bl	8006634 <HAL_GPIO_ReadPin>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d106      	bne.n	8001720 <Game2048_GameLoop+0xdc>
    {
        Game2048_HandleInput(DIR_DOWN);
 8001712:	2001      	movs	r0, #1
 8001714:	f7ff ff4c 	bl	80015b0 <Game2048_HandleInput>
        LastCount = count;
 8001718:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <Game2048_GameLoop+0x12c>)
 800171a:	881a      	ldrh	r2, [r3, #0]
 800171c:	4b15      	ldr	r3, [pc, #84]	@ (8001774 <Game2048_GameLoop+0x130>)
 800171e:	801a      	strh	r2, [r3, #0]
    }

    if (game2048_game_over)
 8001720:	4b16      	ldr	r3, [pc, #88]	@ (800177c <Game2048_GameLoop+0x138>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d01d      	beq.n	8001764 <Game2048_GameLoop+0x120>
    {
        if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8001728:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800172c:	4812      	ldr	r0, [pc, #72]	@ (8001778 <Game2048_GameLoop+0x134>)
 800172e:	f004 ff81 	bl	8006634 <HAL_GPIO_ReadPin>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d115      	bne.n	8001764 <Game2048_GameLoop+0x120>
        {
            HAL_Delay(INPUT_DEBOUNCE_MS);
 8001738:	2032      	movs	r0, #50	@ 0x32
 800173a:	f004 fb65 	bl	8005e08 <HAL_Delay>
            if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 800173e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001742:	480d      	ldr	r0, [pc, #52]	@ (8001778 <Game2048_GameLoop+0x134>)
 8001744:	f004 ff76 	bl	8006634 <HAL_GPIO_ReadPin>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10a      	bne.n	8001764 <Game2048_GameLoop+0x120>
            {
                Game2048_Restart();
 800174e:	f7ff fc09 	bl	8000f64 <Game2048_Restart>
                while (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8001752:	bf00      	nop
 8001754:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001758:	4807      	ldr	r0, [pc, #28]	@ (8001778 <Game2048_GameLoop+0x134>)
 800175a:	f004 ff6b 	bl	8006634 <HAL_GPIO_ReadPin>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f7      	beq.n	8001754 <Game2048_GameLoop+0x110>
            }
        }
    }


    Game2048_DrawBoard();
 8001764:	f7ff fc04 	bl	8000f70 <Game2048_DrawBoard>
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000000 	.word	0x20000000
 8001770:	20000304 	.word	0x20000304
 8001774:	20000268 	.word	0x20000268
 8001778:	40010c00 	.word	0x40010c00
 800177c:	20000260 	.word	0x20000260

08001780 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001786:	f107 0310 	add.w	r3, r7, #16
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001794:	4b34      	ldr	r3, [pc, #208]	@ (8001868 <MX_GPIO_Init+0xe8>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	4a33      	ldr	r2, [pc, #204]	@ (8001868 <MX_GPIO_Init+0xe8>)
 800179a:	f043 0310 	orr.w	r3, r3, #16
 800179e:	6193      	str	r3, [r2, #24]
 80017a0:	4b31      	ldr	r3, [pc, #196]	@ (8001868 <MX_GPIO_Init+0xe8>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	f003 0310 	and.w	r3, r3, #16
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001868 <MX_GPIO_Init+0xe8>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a2d      	ldr	r2, [pc, #180]	@ (8001868 <MX_GPIO_Init+0xe8>)
 80017b2:	f043 0320 	orr.w	r3, r3, #32
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001868 <MX_GPIO_Init+0xe8>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f003 0320 	and.w	r3, r3, #32
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c4:	4b28      	ldr	r3, [pc, #160]	@ (8001868 <MX_GPIO_Init+0xe8>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a27      	ldr	r2, [pc, #156]	@ (8001868 <MX_GPIO_Init+0xe8>)
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b25      	ldr	r3, [pc, #148]	@ (8001868 <MX_GPIO_Init+0xe8>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017dc:	4b22      	ldr	r3, [pc, #136]	@ (8001868 <MX_GPIO_Init+0xe8>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4a21      	ldr	r2, [pc, #132]	@ (8001868 <MX_GPIO_Init+0xe8>)
 80017e2:	f043 0308 	orr.w	r3, r3, #8
 80017e6:	6193      	str	r3, [r2, #24]
 80017e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001868 <MX_GPIO_Init+0xe8>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SysWork_Light_GPIO_Port, SysWork_Light_Pin, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017fa:	481c      	ldr	r0, [pc, #112]	@ (800186c <MX_GPIO_Init+0xec>)
 80017fc:	f004 ff31 	bl	8006662 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET);
 8001800:	2200      	movs	r2, #0
 8001802:	2180      	movs	r1, #128	@ 0x80
 8001804:	481a      	ldr	r0, [pc, #104]	@ (8001870 <MX_GPIO_Init+0xf0>)
 8001806:	f004 ff2c 	bl	8006662 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SysWork_Light_Pin */
  GPIO_InitStruct.Pin = SysWork_Light_Pin;
 800180a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800180e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001810:	2301      	movs	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2302      	movs	r3, #2
 800181a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SysWork_Light_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	4619      	mov	r1, r3
 8001822:	4812      	ldr	r0, [pc, #72]	@ (800186c <MX_GPIO_Init+0xec>)
 8001824:	f004 fd82 	bl	800632c <HAL_GPIO_Init>

  /*Configure GPIO pin : Flash_CS_Pin */
  GPIO_InitStruct.Pin = Flash_CS_Pin;
 8001828:	2380      	movs	r3, #128	@ 0x80
 800182a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182c:	2301      	movs	r3, #1
 800182e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001830:	2301      	movs	r3, #1
 8001832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2302      	movs	r3, #2
 8001836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Flash_CS_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	4619      	mov	r1, r3
 800183e:	480c      	ldr	r0, [pc, #48]	@ (8001870 <MX_GPIO_Init+0xf0>)
 8001840:	f004 fd74 	bl	800632c <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch_Input_Pin Encoder_Input_Pin */
  GPIO_InitStruct.Pin = Switch_Input_Pin|Encoder_Input_Pin;
 8001844:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001848:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800184e:	2301      	movs	r3, #1
 8001850:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001852:	f107 0310 	add.w	r3, r7, #16
 8001856:	4619      	mov	r1, r3
 8001858:	4806      	ldr	r0, [pc, #24]	@ (8001874 <MX_GPIO_Init+0xf4>)
 800185a:	f004 fd67 	bl	800632c <HAL_GPIO_Init>

}
 800185e:	bf00      	nop
 8001860:	3720      	adds	r7, #32
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000
 800186c:	40011000 	.word	0x40011000
 8001870:	40010800 	.word	0x40010800
 8001874:	40010c00 	.word	0x40010c00

08001878 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800187c:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <MX_I2C1_Init+0x50>)
 800187e:	4a13      	ldr	r2, [pc, #76]	@ (80018cc <MX_I2C1_Init+0x54>)
 8001880:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001882:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <MX_I2C1_Init+0x50>)
 8001884:	4a12      	ldr	r2, [pc, #72]	@ (80018d0 <MX_I2C1_Init+0x58>)
 8001886:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001888:	4b0f      	ldr	r3, [pc, #60]	@ (80018c8 <MX_I2C1_Init+0x50>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800188e:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <MX_I2C1_Init+0x50>)
 8001890:	2200      	movs	r2, #0
 8001892:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001894:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <MX_I2C1_Init+0x50>)
 8001896:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800189a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800189c:	4b0a      	ldr	r3, [pc, #40]	@ (80018c8 <MX_I2C1_Init+0x50>)
 800189e:	2200      	movs	r2, #0
 80018a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018a2:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <MX_I2C1_Init+0x50>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a8:	4b07      	ldr	r3, [pc, #28]	@ (80018c8 <MX_I2C1_Init+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <MX_I2C1_Init+0x50>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018b4:	4804      	ldr	r0, [pc, #16]	@ (80018c8 <MX_I2C1_Init+0x50>)
 80018b6:	f004 feed 	bl	8006694 <HAL_I2C_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018c0:	f000 f93f 	bl	8001b42 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	2000026c 	.word	0x2000026c
 80018cc:	40005400 	.word	0x40005400
 80018d0:	00061a80 	.word	0x00061a80

080018d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0310 	add.w	r3, r7, #16
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a29      	ldr	r2, [pc, #164]	@ (8001994 <HAL_I2C_MspInit+0xc0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d14a      	bne.n	800198a <HAL_I2C_MspInit+0xb6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f4:	4b28      	ldr	r3, [pc, #160]	@ (8001998 <HAL_I2C_MspInit+0xc4>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a27      	ldr	r2, [pc, #156]	@ (8001998 <HAL_I2C_MspInit+0xc4>)
 80018fa:	f043 0308 	orr.w	r3, r3, #8
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b25      	ldr	r3, [pc, #148]	@ (8001998 <HAL_I2C_MspInit+0xc4>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 800190c:	23c0      	movs	r3, #192	@ 0xc0
 800190e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001910:	2312      	movs	r3, #18
 8001912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001914:	2303      	movs	r3, #3
 8001916:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	4619      	mov	r1, r3
 800191e:	481f      	ldr	r0, [pc, #124]	@ (800199c <HAL_I2C_MspInit+0xc8>)
 8001920:	f004 fd04 	bl	800632c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001924:	4b1c      	ldr	r3, [pc, #112]	@ (8001998 <HAL_I2C_MspInit+0xc4>)
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	4a1b      	ldr	r2, [pc, #108]	@ (8001998 <HAL_I2C_MspInit+0xc4>)
 800192a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800192e:	61d3      	str	r3, [r2, #28]
 8001930:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <HAL_I2C_MspInit+0xc4>)
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800193c:	4b18      	ldr	r3, [pc, #96]	@ (80019a0 <HAL_I2C_MspInit+0xcc>)
 800193e:	4a19      	ldr	r2, [pc, #100]	@ (80019a4 <HAL_I2C_MspInit+0xd0>)
 8001940:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001942:	4b17      	ldr	r3, [pc, #92]	@ (80019a0 <HAL_I2C_MspInit+0xcc>)
 8001944:	2210      	movs	r2, #16
 8001946:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001948:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <HAL_I2C_MspInit+0xcc>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800194e:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <HAL_I2C_MspInit+0xcc>)
 8001950:	2280      	movs	r2, #128	@ 0x80
 8001952:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001954:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <HAL_I2C_MspInit+0xcc>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800195a:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <HAL_I2C_MspInit+0xcc>)
 800195c:	2200      	movs	r2, #0
 800195e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001960:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <HAL_I2C_MspInit+0xcc>)
 8001962:	2200      	movs	r2, #0
 8001964:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001966:	4b0e      	ldr	r3, [pc, #56]	@ (80019a0 <HAL_I2C_MspInit+0xcc>)
 8001968:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800196c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800196e:	480c      	ldr	r0, [pc, #48]	@ (80019a0 <HAL_I2C_MspInit+0xcc>)
 8001970:	f004 fb7c 	bl	800606c <HAL_DMA_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 800197a:	f000 f8e2 	bl	8001b42 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a07      	ldr	r2, [pc, #28]	@ (80019a0 <HAL_I2C_MspInit+0xcc>)
 8001982:	635a      	str	r2, [r3, #52]	@ 0x34
 8001984:	4a06      	ldr	r2, [pc, #24]	@ (80019a0 <HAL_I2C_MspInit+0xcc>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800198a:	bf00      	nop
 800198c:	3720      	adds	r7, #32
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40005400 	.word	0x40005400
 8001998:	40021000 	.word	0x40021000
 800199c:	40010c00 	.word	0x40010c00
 80019a0:	200002c0 	.word	0x200002c0
 80019a4:	4002006c 	.word	0x4002006c

080019a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ac:	f004 f9ca 	bl	8005d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019b0:	f000 f882 	bl	8001ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b4:	f7ff fee4 	bl	8001780 <MX_GPIO_Init>
  MX_DMA_Init();
 80019b8:	f7fe ff0a 	bl	80007d0 <MX_DMA_Init>
  MX_I2C1_Init();
 80019bc:	f7ff ff5c 	bl	8001878 <MX_I2C1_Init>
  MX_TIM1_Init();
 80019c0:	f004 f800 	bl	80059c4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80019c4:	f004 f8a0 	bl	8005b08 <MX_TIM3_Init>
  MX_SPI2_Init();
 80019c8:	f003 fe4a 	bl	8005660 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  // W25Q64_Init(); // 初始化W25Q64
  OLED_Init(); // 初始化OLED
 80019cc:	f000 fa9c 	bl	8001f08 <OLED_Init>
  OLED_InitBuffer(); // 初始化双缓冲
 80019d0:	f000 f8be 	bl	8001b50 <OLED_InitBuffer>
  OLED_ClearBuffer(); // 清空缓冲区
 80019d4:	f000 f8f0 	bl	8001bb8 <OLED_ClearBuffer>
  
  OLED_EnableDiffMode(1);  // 启用差分更新
 80019d8:	2001      	movs	r0, #1
 80019da:	f002 fc55 	bl	8004288 <OLED_EnableDiffMode>
  OLED_EnableFastUpdate(1); // 启用快速更新
 80019de:	2001      	movs	r0, #1
 80019e0:	f002 fc70 	bl	80042c4 <OLED_EnableFastUpdate>

  
  // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // 启动PWM
 80019e4:	2104      	movs	r1, #4
 80019e6:	4829      	ldr	r0, [pc, #164]	@ (8001a8c <main+0xe4>)
 80019e8:	f006 f818 	bl	8007a1c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1); // 启动编码器
 80019ec:	2100      	movs	r1, #0
 80019ee:	4828      	ldr	r0, [pc, #160]	@ (8001a90 <main+0xe8>)
 80019f0:	f006 f958 	bl	8007ca4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2); // 启动编码器
 80019f4:	2104      	movs	r1, #4
 80019f6:	4826      	ldr	r0, [pc, #152]	@ (8001a90 <main+0xe8>)
 80019f8:	f006 f954 	bl	8007ca4 <HAL_TIM_Encoder_Start>

  OLED_InitAnimationManager(&g_AnimationManager); // 初始化动画管理器
 80019fc:	4825      	ldr	r0, [pc, #148]	@ (8001a94 <main+0xec>)
 80019fe:	f003 fc3d 	bl	800527c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Menu_AnimationManager); // 初始化菜单动画管理器
 8001a02:	4825      	ldr	r0, [pc, #148]	@ (8001a98 <main+0xf0>)
 8001a04:	f003 fc3a 	bl	800527c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Games_AnimationManager); // 初始化游戏动画管理器
 8001a08:	4824      	ldr	r0, [pc, #144]	@ (8001a9c <main+0xf4>)
 8001a0a:	f003 fc37 	bl	800527c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Tools_AnimationManager); // 初始化工具动画管理器
 8001a0e:	4824      	ldr	r0, [pc, #144]	@ (8001aa0 <main+0xf8>)
 8001a10:	f003 fc34 	bl	800527c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Settings_AnimationManager); // 初始化设置动画管理器
 8001a14:	4823      	ldr	r0, [pc, #140]	@ (8001aa4 <main+0xfc>)
 8001a16:	f003 fc31 	bl	800527c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&About_AnimationManager); // 初始化关于动画管理器
 8001a1a:	4823      	ldr	r0, [pc, #140]	@ (8001aa8 <main+0x100>)
 8001a1c:	f003 fc2e 	bl	800527c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Status_AnimationManager); // 初始化状态动画管理器
 8001a20:	4822      	ldr	r0, [pc, #136]	@ (8001aac <main+0x104>)
 8001a22:	f003 fc2b 	bl	800527c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&g_Title_AnimationManager); // 初始化标题动画管理器
 8001a26:	4822      	ldr	r0, [pc, #136]	@ (8001ab0 <main+0x108>)
 8001a28:	f003 fc28 	bl	800527c <OLED_InitAnimationManager>
  __HAL_TIM_SET_COUNTER(&htim3, 32767);
 8001a2c:	4b18      	ldr	r3, [pc, #96]	@ (8001a90 <main+0xe8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001a34:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {    
    #pragma region OLED_UI_SETTINGS // UI设置
    OLED_ClearBuffer();
 8001a36:	f000 f8bf 	bl	8001bb8 <OLED_ClearBuffer>
    
    System_UI_Loop(); // UI循环
 8001a3a:	f000 fd8f 	bl	800255c <System_UI_Loop>
    // play_video(); // 播放视频
    
    OLED_OptimizedDisplayFPS(80, 56); // 显示帧率
 8001a3e:	2138      	movs	r1, #56	@ 0x38
 8001a40:	2050      	movs	r0, #80	@ 0x50
 8001a42:	f002 fce9 	bl	8004418 <OLED_OptimizedDisplayFPS>
    count = __HAL_TIM_GET_COUNTER(&htim3); // 获取编码器计数值 1圈40
 8001a46:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <main+0xe8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	4b19      	ldr	r3, [pc, #100]	@ (8001ab4 <main+0x10c>)
 8001a50:	801a      	strh	r2, [r3, #0]
    OLED_UpdateAnimationManager(&Menu_AnimationManager); // 更新菜单动画管理器
 8001a52:	4811      	ldr	r0, [pc, #68]	@ (8001a98 <main+0xf0>)
 8001a54:	f003 fcc4 	bl	80053e0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_AnimationManager); // 更新动画管理器
 8001a58:	480e      	ldr	r0, [pc, #56]	@ (8001a94 <main+0xec>)
 8001a5a:	f003 fcc1 	bl	80053e0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Games_AnimationManager); // 更新游戏动画管理器
 8001a5e:	480f      	ldr	r0, [pc, #60]	@ (8001a9c <main+0xf4>)
 8001a60:	f003 fcbe 	bl	80053e0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Tools_AnimationManager); // 更新工具动画管理器
 8001a64:	480e      	ldr	r0, [pc, #56]	@ (8001aa0 <main+0xf8>)
 8001a66:	f003 fcbb 	bl	80053e0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Settings_AnimationManager); // 更新设置动画管理器
 8001a6a:	480e      	ldr	r0, [pc, #56]	@ (8001aa4 <main+0xfc>)
 8001a6c:	f003 fcb8 	bl	80053e0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&About_AnimationManager); // 更新关于动画管理器
 8001a70:	480d      	ldr	r0, [pc, #52]	@ (8001aa8 <main+0x100>)
 8001a72:	f003 fcb5 	bl	80053e0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Status_AnimationManager); // 更新状态动画管理器
 8001a76:	480d      	ldr	r0, [pc, #52]	@ (8001aac <main+0x104>)
 8001a78:	f003 fcb2 	bl	80053e0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_Title_AnimationManager); // 更新标题动画管理器
 8001a7c:	480c      	ldr	r0, [pc, #48]	@ (8001ab0 <main+0x108>)
 8001a7e:	f003 fcaf 	bl	80053e0 <OLED_UpdateAnimationManager>
    OLED_SmartUpdate(); // 智能更新显示
 8001a82:	f002 fc2f 	bl	80042e4 <OLED_SmartUpdate>
    OLED_ClearBuffer();
 8001a86:	bf00      	nop
 8001a88:	e7d5      	b.n	8001a36 <main+0x8e>
 8001a8a:	bf00      	nop
 8001a8c:	20003f28 	.word	0x20003f28
 8001a90:	20003f70 	.word	0x20003f70
 8001a94:	200038d8 	.word	0x200038d8
 8001a98:	20000f2c 	.word	0x20000f2c
 8001a9c:	20001520 	.word	0x20001520
 8001aa0:	20001b14 	.word	0x20001b14
 8001aa4:	20002108 	.word	0x20002108
 8001aa8:	200026fc 	.word	0x200026fc
 8001aac:	20002cf0 	.word	0x20002cf0
 8001ab0:	200032e4 	.word	0x200032e4
 8001ab4:	20000304 	.word	0x20000304

08001ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b090      	sub	sp, #64	@ 0x40
 8001abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001abe:	f107 0318 	add.w	r3, r7, #24
 8001ac2:	2228      	movs	r2, #40	@ 0x28
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f006 ffc9 	bl	8008a5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ada:	2301      	movs	r3, #1
 8001adc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ade:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ae2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aec:	2302      	movs	r3, #2
 8001aee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001af0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001af4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001af6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001afc:	f107 0318 	add.w	r3, r7, #24
 8001b00:	4618      	mov	r0, r3
 8001b02:	f005 fa63 	bl	8006fcc <HAL_RCC_OscConfig>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001b0c:	f000 f819 	bl	8001b42 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b10:	230f      	movs	r3, #15
 8001b12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b14:	2302      	movs	r3, #2
 8001b16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	2102      	movs	r1, #2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f005 fcd0 	bl	80074d0 <HAL_RCC_ClockConfig>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b36:	f000 f804 	bl	8001b42 <Error_Handler>
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	3740      	adds	r7, #64	@ 0x40
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b46:	b672      	cpsid	i
}
 8001b48:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b4a:	bf00      	nop
 8001b4c:	e7fd      	b.n	8001b4a <Error_Handler+0x8>
	...

08001b50 <OLED_InitBuffer>:
        0x22, 0x00, 0x07  // 页地址范围: 0-7
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8001b56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4811      	ldr	r0, [pc, #68]	@ (8001ba4 <OLED_InitBuffer+0x54>)
 8001b5e:	f006 ff7e 	bl	8008a5e <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 8001b62:	f240 4201 	movw	r2, #1025	@ 0x401
 8001b66:	2100      	movs	r1, #0
 8001b68:	480f      	ldr	r0, [pc, #60]	@ (8001ba8 <OLED_InitBuffer+0x58>)
 8001b6a:	f006 ff78 	bl	8008a5e <memset>

    // 初始化第一个字节为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba8 <OLED_InitBuffer+0x58>)
 8001b70:	2240      	movs	r2, #64	@ 0x40
 8001b72:	701a      	strb	r2, [r3, #0]

    // 初始化状态变量
    oled_update_flag = OLED_READY;
 8001b74:	4b0d      	ldr	r3, [pc, #52]	@ (8001bac <OLED_InitBuffer+0x5c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
    oled_dma_busy = OLED_READY;
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb0 <OLED_InitBuffer+0x60>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001b80:	2300      	movs	r3, #0
 8001b82:	71fb      	strb	r3, [r7, #7]
 8001b84:	e006      	b.n	8001b94 <OLED_InitBuffer+0x44>
    {
        oled_dirty_pages[i] = 1;
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb4 <OLED_InitBuffer+0x64>)
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	3301      	adds	r3, #1
 8001b92:	71fb      	strb	r3, [r7, #7]
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	2b07      	cmp	r3, #7
 8001b98:	d9f5      	bls.n	8001b86 <OLED_InitBuffer+0x36>
    }
}
 8001b9a:	bf00      	nop
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000318 	.word	0x20000318
 8001ba8:	20000718 	.word	0x20000718
 8001bac:	2000030c 	.word	0x2000030c
 8001bb0:	2000030d 	.word	0x2000030d
 8001bb4:	20000310 	.word	0x20000310

08001bb8 <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8001bbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	480a      	ldr	r0, [pc, #40]	@ (8001bf0 <OLED_ClearBuffer+0x38>)
 8001bc6:	f006 ff4a 	bl	8008a5e <memset>

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	71fb      	strb	r3, [r7, #7]
 8001bce:	e006      	b.n	8001bde <OLED_ClearBuffer+0x26>
    {
        oled_dirty_pages[i] = 1;
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	4a08      	ldr	r2, [pc, #32]	@ (8001bf4 <OLED_ClearBuffer+0x3c>)
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	71fb      	strb	r3, [r7, #7]
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	2b07      	cmp	r3, #7
 8001be2:	d9f5      	bls.n	8001bd0 <OLED_ClearBuffer+0x18>
    }
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000318 	.word	0x20000318
 8001bf4:	20000310 	.word	0x20000310

08001bf8 <OLED_IsBusy>:

uint8_t OLED_IsBusy(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
    // 如果标记为忙，检查是否已经过了足够时间
    if (oled_update_flag)
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <OLED_IsBusy+0x44>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d007      	beq.n	8001c18 <OLED_IsBusy+0x20>
    {
        // SSD1315/SSD1306 典型帧率约为60Hz，每帧约16.7ms
        // 可以根据需要调整刷新率，减小此值可以提高帧率
        uint32_t current_time = HAL_GetTick();
 8001c08:	f004 f8f4 	bl	8005df4 <HAL_GetTick>
 8001c0c:	6078      	str	r0, [r7, #4]
        if (current_time - oled_last_update_time >= 0)
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <OLED_IsBusy+0x48>)
 8001c10:	681b      	ldr	r3, [r3, #0]
        {
            oled_update_flag = OLED_READY; // 已经过了足够时间，不再忙
 8001c12:	4b0a      	ldr	r3, [pc, #40]	@ (8001c3c <OLED_IsBusy+0x44>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
        }
    }

    // 如果DMA传输正在进行，也视为忙
    return (oled_update_flag || oled_dma_busy);
 8001c18:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <OLED_IsBusy+0x44>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d104      	bne.n	8001c2c <OLED_IsBusy+0x34>
 8001c22:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <OLED_IsBusy+0x4c>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <OLED_IsBusy+0x38>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <OLED_IsBusy+0x3a>
 8001c30:	2300      	movs	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	2000030c 	.word	0x2000030c
 8001c40:	20000308 	.word	0x20000308
 8001c44:	2000030d 	.word	0x2000030d

08001c48 <OLED_UpdateDisplayVSync>:

void OLED_UpdateDisplayVSync(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af02      	add	r7, sp, #8
    // 等待上一次更新完成
    while (OLED_IsBusy())
 8001c4e:	bf00      	nop
 8001c50:	f7ff ffd2 	bl	8001bf8 <OLED_IsBusy>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1fa      	bne.n	8001c50 <OLED_UpdateDisplayVSync+0x8>
    {
        // 可以加入短暂延时或者让出CPU，但通常不会停留很久
    }

    oled_update_flag = OLED_BUSY;
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd8 <OLED_UpdateDisplayVSync+0x90>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8001c60:	f004 f8c8 	bl	8005df4 <HAL_GetTick>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4a1d      	ldr	r2, [pc, #116]	@ (8001cdc <OLED_UpdateDisplayVSync+0x94>)
 8001c68:	6013      	str	r3, [r2, #0]

    OLED_FrontBuffer[0] = 0x40;                                             // 数据控制字节：Co=0, D/C#=1 (数据)
 8001c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce0 <OLED_UpdateDisplayVSync+0x98>)
 8001c6c:	2240      	movs	r2, #64	@ 0x40
 8001c6e:	701a      	strb	r2, [r3, #0]
    memcpy(OLED_FrontBuffer + 1, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES); // 复制当前缓冲区到前缓冲区
 8001c70:	4a1c      	ldr	r2, [pc, #112]	@ (8001ce4 <OLED_UpdateDisplayVSync+0x9c>)
 8001c72:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce8 <OLED_UpdateDisplayVSync+0xa0>)
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	f006 ff7c 	bl	8008b7a <memcpy>

    // 一次性发送所有命令
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	71fb      	strb	r3, [r7, #7]
 8001c86:	e008      	b.n	8001c9a <OLED_UpdateDisplayVSync+0x52>
    {
        OLED_SendCommand(cmds[i]);
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	4a18      	ldr	r2, [pc, #96]	@ (8001cec <OLED_UpdateDisplayVSync+0xa4>)
 8001c8c:	5cd3      	ldrb	r3, [r2, r3]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f920 	bl	8001ed4 <OLED_SendCommand>
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	3301      	adds	r3, #1
 8001c98:	71fb      	strb	r3, [r7, #7]
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	2b07      	cmp	r3, #7
 8001c9e:	d9f3      	bls.n	8001c88 <OLED_UpdateDisplayVSync+0x40>
    }


    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, OLED_WIDTH * OLED_PAGES + 1, HAL_MAX_DELAY);
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	f240 4301 	movw	r3, #1025	@ 0x401
 8001caa:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce0 <OLED_UpdateDisplayVSync+0x98>)
 8001cac:	2178      	movs	r1, #120	@ 0x78
 8001cae:	4810      	ldr	r0, [pc, #64]	@ (8001cf0 <OLED_UpdateDisplayVSync+0xa8>)
 8001cb0:	f004 fe34 	bl	800691c <HAL_I2C_Master_Transmit>

    // 重置所有脏页标记
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	71bb      	strb	r3, [r7, #6]
 8001cb8:	e006      	b.n	8001cc8 <OLED_UpdateDisplayVSync+0x80>
    {
        oled_dirty_pages[i] = 0;
 8001cba:	79bb      	ldrb	r3, [r7, #6]
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf4 <OLED_UpdateDisplayVSync+0xac>)
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001cc2:	79bb      	ldrb	r3, [r7, #6]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	71bb      	strb	r3, [r7, #6]
 8001cc8:	79bb      	ldrb	r3, [r7, #6]
 8001cca:	2b07      	cmp	r3, #7
 8001ccc:	d9f5      	bls.n	8001cba <OLED_UpdateDisplayVSync+0x72>
    }
}
 8001cce:	bf00      	nop
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	2000030c 	.word	0x2000030c
 8001cdc:	20000308 	.word	0x20000308
 8001ce0:	20000718 	.word	0x20000718
 8001ce4:	20000719 	.word	0x20000719
 8001ce8:	20000318 	.word	0x20000318
 8001cec:	0800b570 	.word	0x0800b570
 8001cf0:	2000026c 	.word	0x2000026c
 8001cf4:	20000310 	.word	0x20000310

08001cf8 <OLED_UpdateDisplayPartial>:
    }
}

// 局部更新显示函数
void OLED_UpdateDisplayPartial(uint8_t startPage, uint8_t endPage)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af02      	add	r7, sp, #8
 8001cfe:	4603      	mov	r3, r0
 8001d00:	460a      	mov	r2, r1
 8001d02:	71fb      	strb	r3, [r7, #7]
 8001d04:	4613      	mov	r3, r2
 8001d06:	71bb      	strb	r3, [r7, #6]
    // 边界检查
    if (startPage >= OLED_PAGES || endPage >= OLED_PAGES || startPage > endPage)
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	2b07      	cmp	r3, #7
 8001d0c:	d85c      	bhi.n	8001dc8 <OLED_UpdateDisplayPartial+0xd0>
 8001d0e:	79bb      	ldrb	r3, [r7, #6]
 8001d10:	2b07      	cmp	r3, #7
 8001d12:	d859      	bhi.n	8001dc8 <OLED_UpdateDisplayPartial+0xd0>
 8001d14:	79fa      	ldrb	r2, [r7, #7]
 8001d16:	79bb      	ldrb	r3, [r7, #6]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d855      	bhi.n	8001dc8 <OLED_UpdateDisplayPartial+0xd0>
        return;

    // 等待上一次更新完成
    while (OLED_IsBusy())
 8001d1c:	bf00      	nop
 8001d1e:	f7ff ff6b 	bl	8001bf8 <OLED_IsBusy>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1fa      	bne.n	8001d1e <OLED_UpdateDisplayPartial+0x26>
    {
        // 可以加入短暂延时或者让出CPU
    }

    oled_update_flag = OLED_BUSY;
 8001d28:	4b29      	ldr	r3, [pc, #164]	@ (8001dd0 <OLED_UpdateDisplayPartial+0xd8>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8001d2e:	f004 f861 	bl	8005df4 <HAL_GetTick>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4a27      	ldr	r2, [pc, #156]	@ (8001dd4 <OLED_UpdateDisplayPartial+0xdc>)
 8001d36:	6013      	str	r3, [r2, #0]

    // 设置页地址范围
    OLED_SendCommand(0x22);      // 页地址设置命令
 8001d38:	2022      	movs	r0, #34	@ 0x22
 8001d3a:	f000 f8cb 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(startPage); // 起始页
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 f8c7 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(endPage);   // 结束页
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 f8c3 	bl	8001ed4 <OLED_SendCommand>

    // 设置列地址范围（总是更新整行）
    OLED_SendCommand(0x21); // 列地址设置命令
 8001d4e:	2021      	movs	r0, #33	@ 0x21
 8001d50:	f000 f8c0 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 起始列
 8001d54:	2000      	movs	r0, #0
 8001d56:	f000 f8bd 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0x7F); // 结束列 (127)
 8001d5a:	207f      	movs	r0, #127	@ 0x7f
 8001d5c:	f000 f8ba 	bl	8001ed4 <OLED_SendCommand>

    // 计算需要传输的数据长度
    uint16_t dataLen = OLED_WIDTH * (endPage - startPage + 1);
 8001d60:	79ba      	ldrb	r2, [r7, #6]
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	3301      	adds	r3, #1
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	01db      	lsls	r3, r3, #7
 8001d6c:	81bb      	strh	r3, [r7, #12]

    // 前缓冲区的第一个字节设为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd8 <OLED_UpdateDisplayPartial+0xe0>)
 8001d70:	2240      	movs	r2, #64	@ 0x40
 8001d72:	701a      	strb	r2, [r3, #0]

    // 只复制需要更新的页
    for (uint8_t page = startPage; page <= endPage; page++)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	73fb      	strb	r3, [r7, #15]
 8001d78:	e016      	b.n	8001da8 <OLED_UpdateDisplayPartial+0xb0>
    {
        memcpy(
            OLED_FrontBuffer + 1 + (page - startPage) * OLED_WIDTH,
 8001d7a:	7bfa      	ldrb	r2, [r7, #15]
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	01db      	lsls	r3, r3, #7
 8001d82:	3301      	adds	r3, #1
        memcpy(
 8001d84:	4a14      	ldr	r2, [pc, #80]	@ (8001dd8 <OLED_UpdateDisplayPartial+0xe0>)
 8001d86:	1898      	adds	r0, r3, r2
            OLED_BackBuffer + page * OLED_WIDTH,
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	01db      	lsls	r3, r3, #7
 8001d8c:	461a      	mov	r2, r3
        memcpy(
 8001d8e:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <OLED_UpdateDisplayPartial+0xe4>)
 8001d90:	4413      	add	r3, r2
 8001d92:	2280      	movs	r2, #128	@ 0x80
 8001d94:	4619      	mov	r1, r3
 8001d96:	f006 fef0 	bl	8008b7a <memcpy>
            OLED_WIDTH);
        oled_dirty_pages[page] = 0; // 重置脏页标记
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	4a10      	ldr	r2, [pc, #64]	@ (8001de0 <OLED_UpdateDisplayPartial+0xe8>)
 8001d9e:	2100      	movs	r1, #0
 8001da0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = startPage; page <= endPage; page++)
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	3301      	adds	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
 8001da8:	7bfa      	ldrb	r2, [r7, #15]
 8001daa:	79bb      	ldrb	r3, [r7, #6]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d9e4      	bls.n	8001d7a <OLED_UpdateDisplayPartial+0x82>
    }

    // 发送数据
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, dataLen + 1, HAL_MAX_DELAY);
 8001db0:	89bb      	ldrh	r3, [r7, #12]
 8001db2:	3301      	adds	r3, #1
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	f04f 32ff 	mov.w	r2, #4294967295
 8001dba:	9200      	str	r2, [sp, #0]
 8001dbc:	4a06      	ldr	r2, [pc, #24]	@ (8001dd8 <OLED_UpdateDisplayPartial+0xe0>)
 8001dbe:	2178      	movs	r1, #120	@ 0x78
 8001dc0:	4808      	ldr	r0, [pc, #32]	@ (8001de4 <OLED_UpdateDisplayPartial+0xec>)
 8001dc2:	f004 fdab 	bl	800691c <HAL_I2C_Master_Transmit>
 8001dc6:	e000      	b.n	8001dca <OLED_UpdateDisplayPartial+0xd2>
        return;
 8001dc8:	bf00      	nop
}
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	2000030c 	.word	0x2000030c
 8001dd4:	20000308 	.word	0x20000308
 8001dd8:	20000718 	.word	0x20000718
 8001ddc:	20000318 	.word	0x20000318
 8001de0:	20000310 	.word	0x20000310
 8001de4:	2000026c 	.word	0x2000026c

08001de8 <OLED_WritePixel>:

void OLED_WritePixel(int16_t x, int16_t y, uint8_t color)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	80fb      	strh	r3, [r7, #6]
 8001df2:	460b      	mov	r3, r1
 8001df4:	80bb      	strh	r3, [r7, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	70fb      	strb	r3, [r7, #3]
    // 边界检查
    if (x >= OLED_WIDTH || x < 0 || y >= OLED_HEIGHT || y < 0)
 8001dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dfe:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e00:	dc5e      	bgt.n	8001ec0 <OLED_WritePixel+0xd8>
 8001e02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	db5a      	blt.n	8001ec0 <OLED_WritePixel+0xd8>
 8001e0a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e0e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e10:	dc56      	bgt.n	8001ec0 <OLED_WritePixel+0xd8>
 8001e12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	db52      	blt.n	8001ec0 <OLED_WritePixel+0xd8>
        return;

    // 计算像素所在的字节位置
    uint16_t byte_index = x + (y / 8) * OLED_WIDTH;
 8001e1a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	da00      	bge.n	8001e24 <OLED_WritePixel+0x3c>
 8001e22:	3307      	adds	r3, #7
 8001e24:	10db      	asrs	r3, r3, #3
 8001e26:	b21b      	sxth	r3, r3
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	01db      	lsls	r3, r3, #7
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	4413      	add	r3, r2
 8001e32:	81fb      	strh	r3, [r7, #14]
    uint8_t bit_position = y % 8;
 8001e34:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e38:	425a      	negs	r2, r3
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	f002 0207 	and.w	r2, r2, #7
 8001e42:	bf58      	it	pl
 8001e44:	4253      	negpl	r3, r2
 8001e46:	b21b      	sxth	r3, r3
 8001e48:	737b      	strb	r3, [r7, #13]
    uint8_t page = y / 8; // 计算所在页
 8001e4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	da00      	bge.n	8001e54 <OLED_WritePixel+0x6c>
 8001e52:	3307      	adds	r3, #7
 8001e54:	10db      	asrs	r3, r3, #3
 8001e56:	b21b      	sxth	r3, r3
 8001e58:	733b      	strb	r3, [r7, #12]

    // 记录当前像素值
    uint8_t old_value = OLED_BackBuffer[byte_index];
 8001e5a:	89fb      	ldrh	r3, [r7, #14]
 8001e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001ecc <OLED_WritePixel+0xe4>)
 8001e5e:	5cd3      	ldrb	r3, [r2, r3]
 8001e60:	72fb      	strb	r3, [r7, #11]

    if (color) // 如果需要点亮像素
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00f      	beq.n	8001e88 <OLED_WritePixel+0xa0>
        OLED_BackBuffer[byte_index] |= (1 << bit_position);
 8001e68:	89fb      	ldrh	r3, [r7, #14]
 8001e6a:	4a18      	ldr	r2, [pc, #96]	@ (8001ecc <OLED_WritePixel+0xe4>)
 8001e6c:	5cd3      	ldrb	r3, [r2, r3]
 8001e6e:	b25a      	sxtb	r2, r3
 8001e70:	7b7b      	ldrb	r3, [r7, #13]
 8001e72:	2101      	movs	r1, #1
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	b25b      	sxtb	r3, r3
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	b25a      	sxtb	r2, r3
 8001e7e:	89fb      	ldrh	r3, [r7, #14]
 8001e80:	b2d1      	uxtb	r1, r2
 8001e82:	4a12      	ldr	r2, [pc, #72]	@ (8001ecc <OLED_WritePixel+0xe4>)
 8001e84:	54d1      	strb	r1, [r2, r3]
 8001e86:	e010      	b.n	8001eaa <OLED_WritePixel+0xc2>
    else // 如果需要熄灭像素
        OLED_BackBuffer[byte_index] &= ~(1 << bit_position);
 8001e88:	89fb      	ldrh	r3, [r7, #14]
 8001e8a:	4a10      	ldr	r2, [pc, #64]	@ (8001ecc <OLED_WritePixel+0xe4>)
 8001e8c:	5cd3      	ldrb	r3, [r2, r3]
 8001e8e:	b25a      	sxtb	r2, r3
 8001e90:	7b7b      	ldrb	r3, [r7, #13]
 8001e92:	2101      	movs	r1, #1
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	b25b      	sxtb	r3, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	b25b      	sxtb	r3, r3
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	b25a      	sxtb	r2, r3
 8001ea2:	89fb      	ldrh	r3, [r7, #14]
 8001ea4:	b2d1      	uxtb	r1, r2
 8001ea6:	4a09      	ldr	r2, [pc, #36]	@ (8001ecc <OLED_WritePixel+0xe4>)
 8001ea8:	54d1      	strb	r1, [r2, r3]

    // 如果像素值发生变化，标记该页为脏
    if (old_value != OLED_BackBuffer[byte_index])
 8001eaa:	89fb      	ldrh	r3, [r7, #14]
 8001eac:	4a07      	ldr	r2, [pc, #28]	@ (8001ecc <OLED_WritePixel+0xe4>)
 8001eae:	5cd3      	ldrb	r3, [r2, r3]
 8001eb0:	7afa      	ldrb	r2, [r7, #11]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d005      	beq.n	8001ec2 <OLED_WritePixel+0xda>
    {
        oled_dirty_pages[page] = 1;
 8001eb6:	7b3b      	ldrb	r3, [r7, #12]
 8001eb8:	4a05      	ldr	r2, [pc, #20]	@ (8001ed0 <OLED_WritePixel+0xe8>)
 8001eba:	2101      	movs	r1, #1
 8001ebc:	54d1      	strb	r1, [r2, r3]
 8001ebe:	e000      	b.n	8001ec2 <OLED_WritePixel+0xda>
        return;
 8001ec0:	bf00      	nop
    }
}
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000318 	.word	0x20000318
 8001ed0:	20000310 	.word	0x20000310

08001ed4 <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 8001ede:	2300      	movs	r3, #0
 8001ee0:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8001ee6:	f107 020c 	add.w	r2, r7, #12
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	2178      	movs	r1, #120	@ 0x78
 8001ef4:	4803      	ldr	r0, [pc, #12]	@ (8001f04 <OLED_SendCommand+0x30>)
 8001ef6:	f004 fd11 	bl	800691c <HAL_I2C_Master_Transmit>
}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000026c 	.word	0x2000026c

08001f08 <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 8001f0c:	2064      	movs	r0, #100	@ 0x64
 8001f0e:	f003 ff7b 	bl	8005e08 <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 8001f12:	20ae      	movs	r0, #174	@ 0xae
 8001f14:	f7ff ffde 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 8001f18:	20d5      	movs	r0, #213	@ 0xd5
 8001f1a:	f7ff ffdb 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 8001f1e:	2080      	movs	r0, #128	@ 0x80
 8001f20:	f7ff ffd8 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8001f24:	20a8      	movs	r0, #168	@ 0xa8
 8001f26:	f7ff ffd5 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 8001f2a:	203f      	movs	r0, #63	@ 0x3f
 8001f2c:	f7ff ffd2 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8001f30:	20d3      	movs	r0, #211	@ 0xd3
 8001f32:	f7ff ffcf 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 8001f36:	2000      	movs	r0, #0
 8001f38:	f7ff ffcc 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8001f3c:	2040      	movs	r0, #64	@ 0x40
 8001f3e:	f7ff ffc9 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 8001f42:	208d      	movs	r0, #141	@ 0x8d
 8001f44:	f7ff ffc6 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 8001f48:	2014      	movs	r0, #20
 8001f4a:	f7ff ffc3 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 8001f4e:	2020      	movs	r0, #32
 8001f50:	f7ff ffc0 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 8001f54:	2000      	movs	r0, #0
 8001f56:	f7ff ffbd 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 8001f5a:	20a1      	movs	r0, #161	@ 0xa1
 8001f5c:	f7ff ffba 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 8001f60:	20c8      	movs	r0, #200	@ 0xc8
 8001f62:	f7ff ffb7 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 8001f66:	20da      	movs	r0, #218	@ 0xda
 8001f68:	f7ff ffb4 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8001f6c:	2012      	movs	r0, #18
 8001f6e:	f7ff ffb1 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 8001f72:	2081      	movs	r0, #129	@ 0x81
 8001f74:	f7ff ffae 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 8001f78:	20cf      	movs	r0, #207	@ 0xcf
 8001f7a:	f7ff ffab 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 8001f7e:	20d9      	movs	r0, #217	@ 0xd9
 8001f80:	f7ff ffa8 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 8001f84:	20f1      	movs	r0, #241	@ 0xf1
 8001f86:	f7ff ffa5 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 8001f8a:	20db      	movs	r0, #219	@ 0xdb
 8001f8c:	f7ff ffa2 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 8001f90:	2030      	movs	r0, #48	@ 0x30
 8001f92:	f7ff ff9f 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 8001f96:	20a4      	movs	r0, #164	@ 0xa4
 8001f98:	f7ff ff9c 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 8001f9c:	20a6      	movs	r0, #166	@ 0xa6
 8001f9e:	f7ff ff99 	bl	8001ed4 <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 8001fa2:	202e      	movs	r0, #46	@ 0x2e
 8001fa4:	f7ff ff96 	bl	8001ed4 <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 8001fa8:	f7ff fdd2 	bl	8001b50 <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 8001fac:	f7ff fe04 	bl	8001bb8 <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 8001fb0:	20af      	movs	r0, #175	@ 0xaf
 8001fb2:	f7ff ff8f 	bl	8001ed4 <OLED_SendCommand>
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <OLED_InvertArea>:

// 区域反色功能 - 将指定矩形区域内的像素颜色反转 //! UPDATEDISPLAY REQUIRED
void OLED_InvertArea(int16_t x, int16_t y, uint8_t width, uint8_t height)
{
 8001fbc:	b490      	push	{r4, r7}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4604      	mov	r4, r0
 8001fc4:	4608      	mov	r0, r1
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4623      	mov	r3, r4
 8001fcc:	80fb      	strh	r3, [r7, #6]
 8001fce:	4603      	mov	r3, r0
 8001fd0:	80bb      	strh	r3, [r7, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	70fb      	strb	r3, [r7, #3]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	70bb      	strb	r3, [r7, #2]
    if (width == 0 || height == 0)
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 809d 	beq.w	800211c <OLED_InvertArea+0x160>
 8001fe2:	78bb      	ldrb	r3, [r7, #2]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8099 	beq.w	800211c <OLED_InvertArea+0x160>
        return;

    int16_t x_start_on_screen = x;
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	83fb      	strh	r3, [r7, #30]
    int16_t y_start_on_screen = y;
 8001fee:	88bb      	ldrh	r3, [r7, #4]
 8001ff0:	83bb      	strh	r3, [r7, #28]
    int16_t x_end_on_screen = x + width - 1;
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	88fb      	ldrh	r3, [r7, #6]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	837b      	strh	r3, [r7, #26]
    int16_t y_end_on_screen = y + height - 1;
 8002002:	78bb      	ldrb	r3, [r7, #2]
 8002004:	b29a      	uxth	r2, r3
 8002006:	88bb      	ldrh	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	b29b      	uxth	r3, r3
 800200c:	3b01      	subs	r3, #1
 800200e:	b29b      	uxth	r3, r3
 8002010:	833b      	strh	r3, [r7, #24]

    // Clip to screen boundaries
    if (x_start_on_screen < 0)
 8002012:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002016:	2b00      	cmp	r3, #0
 8002018:	da01      	bge.n	800201e <OLED_InvertArea+0x62>
        x_start_on_screen = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	83fb      	strh	r3, [r7, #30]
    if (y_start_on_screen < 0)
 800201e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002022:	2b00      	cmp	r3, #0
 8002024:	da01      	bge.n	800202a <OLED_InvertArea+0x6e>
        y_start_on_screen = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	83bb      	strh	r3, [r7, #28]
    if (x_end_on_screen >= OLED_WIDTH)
 800202a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800202e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002030:	dd01      	ble.n	8002036 <OLED_InvertArea+0x7a>
        x_end_on_screen = OLED_WIDTH - 1;
 8002032:	237f      	movs	r3, #127	@ 0x7f
 8002034:	837b      	strh	r3, [r7, #26]
    if (y_end_on_screen >= OLED_HEIGHT)
 8002036:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800203a:	2b3f      	cmp	r3, #63	@ 0x3f
 800203c:	dd01      	ble.n	8002042 <OLED_InvertArea+0x86>
        y_end_on_screen = OLED_HEIGHT - 1;
 800203e:	233f      	movs	r3, #63	@ 0x3f
 8002040:	833b      	strh	r3, [r7, #24]

    // If clipped area is invalid (e.g., entirely off-screen after clipping)
    if (x_start_on_screen > x_end_on_screen || y_start_on_screen > y_end_on_screen)
 8002042:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002046:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800204a:	429a      	cmp	r2, r3
 800204c:	dc68      	bgt.n	8002120 <OLED_InvertArea+0x164>
 800204e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002052:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002056:	429a      	cmp	r2, r3
 8002058:	dc62      	bgt.n	8002120 <OLED_InvertArea+0x164>
        return;

    // 计算涉及的页范围
    uint8_t start_page = y_start_on_screen / 8;
 800205a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800205e:	2b00      	cmp	r3, #0
 8002060:	da00      	bge.n	8002064 <OLED_InvertArea+0xa8>
 8002062:	3307      	adds	r3, #7
 8002064:	10db      	asrs	r3, r3, #3
 8002066:	b21b      	sxth	r3, r3
 8002068:	747b      	strb	r3, [r7, #17]
    uint8_t end_page = y_end_on_screen / 8;
 800206a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800206e:	2b00      	cmp	r3, #0
 8002070:	da00      	bge.n	8002074 <OLED_InvertArea+0xb8>
 8002072:	3307      	adds	r3, #7
 8002074:	10db      	asrs	r3, r3, #3
 8002076:	b21b      	sxth	r3, r3
 8002078:	743b      	strb	r3, [r7, #16]

    // 标记受影响的页为脏页
    extern volatile uint8_t oled_dirty_pages[];
    for (uint8_t page = start_page; page <= end_page; page++)
 800207a:	7c7b      	ldrb	r3, [r7, #17]
 800207c:	75fb      	strb	r3, [r7, #23]
 800207e:	e006      	b.n	800208e <OLED_InvertArea+0xd2>
    {
        oled_dirty_pages[page] = 1;
 8002080:	7dfb      	ldrb	r3, [r7, #23]
 8002082:	4a2a      	ldr	r2, [pc, #168]	@ (800212c <OLED_InvertArea+0x170>)
 8002084:	2101      	movs	r1, #1
 8002086:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = start_page; page <= end_page; page++)
 8002088:	7dfb      	ldrb	r3, [r7, #23]
 800208a:	3301      	adds	r3, #1
 800208c:	75fb      	strb	r3, [r7, #23]
 800208e:	7dfa      	ldrb	r2, [r7, #23]
 8002090:	7c3b      	ldrb	r3, [r7, #16]
 8002092:	429a      	cmp	r2, r3
 8002094:	d9f4      	bls.n	8002080 <OLED_InvertArea+0xc4>
    }

    // 优化的像素更新逻辑 - 按行处理以提高缓存命中率
    for (int16_t j = y_start_on_screen; j <= y_end_on_screen; j++)
 8002096:	8bbb      	ldrh	r3, [r7, #28]
 8002098:	82bb      	strh	r3, [r7, #20]
 800209a:	e038      	b.n	800210e <OLED_InvertArea+0x152>
    {
        uint8_t page = (uint8_t)j / 8;
 800209c:	8abb      	ldrh	r3, [r7, #20]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	08db      	lsrs	r3, r3, #3
 80020a2:	73fb      	strb	r3, [r7, #15]
        uint8_t bit_position = (uint8_t)j % 8;
 80020a4:	8abb      	ldrh	r3, [r7, #20]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	73bb      	strb	r3, [r7, #14]
        uint16_t byte_index_base = page * OLED_WIDTH;
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	01db      	lsls	r3, r3, #7
 80020b4:	81bb      	strh	r3, [r7, #12]

        // 处理当前行上的所有像素
        for (int16_t i = x_start_on_screen; i <= x_end_on_screen; i++)
 80020b6:	8bfb      	ldrh	r3, [r7, #30]
 80020b8:	827b      	strh	r3, [r7, #18]
 80020ba:	e01c      	b.n	80020f6 <OLED_InvertArea+0x13a>
        {
            uint16_t byte_index = byte_index_base + i;
 80020bc:	8a7a      	ldrh	r2, [r7, #18]
 80020be:	89bb      	ldrh	r3, [r7, #12]
 80020c0:	4413      	add	r3, r2
 80020c2:	817b      	strh	r3, [r7, #10]

            // 反转位
            if (byte_index < sizeof(OLED_BackBuffer))
 80020c4:	897b      	ldrh	r3, [r7, #10]
 80020c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ca:	d20e      	bcs.n	80020ea <OLED_InvertArea+0x12e>
            {
                OLED_BackBuffer[byte_index] ^= (1 << bit_position);
 80020cc:	897b      	ldrh	r3, [r7, #10]
 80020ce:	4a18      	ldr	r2, [pc, #96]	@ (8002130 <OLED_InvertArea+0x174>)
 80020d0:	5cd3      	ldrb	r3, [r2, r3]
 80020d2:	b25a      	sxtb	r2, r3
 80020d4:	7bbb      	ldrb	r3, [r7, #14]
 80020d6:	2101      	movs	r1, #1
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	b25b      	sxtb	r3, r3
 80020de:	4053      	eors	r3, r2
 80020e0:	b25a      	sxtb	r2, r3
 80020e2:	897b      	ldrh	r3, [r7, #10]
 80020e4:	b2d1      	uxtb	r1, r2
 80020e6:	4a12      	ldr	r2, [pc, #72]	@ (8002130 <OLED_InvertArea+0x174>)
 80020e8:	54d1      	strb	r1, [r2, r3]
        for (int16_t i = x_start_on_screen; i <= x_end_on_screen; i++)
 80020ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	3301      	adds	r3, #1
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	827b      	strh	r3, [r7, #18]
 80020f6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80020fa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80020fe:	429a      	cmp	r2, r3
 8002100:	dddc      	ble.n	80020bc <OLED_InvertArea+0x100>
    for (int16_t j = y_start_on_screen; j <= y_end_on_screen; j++)
 8002102:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002106:	b29b      	uxth	r3, r3
 8002108:	3301      	adds	r3, #1
 800210a:	b29b      	uxth	r3, r3
 800210c:	82bb      	strh	r3, [r7, #20]
 800210e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002112:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002116:	429a      	cmp	r2, r3
 8002118:	ddc0      	ble.n	800209c <OLED_InvertArea+0xe0>
 800211a:	e002      	b.n	8002122 <OLED_InvertArea+0x166>
        return;
 800211c:	bf00      	nop
 800211e:	e000      	b.n	8002122 <OLED_InvertArea+0x166>
        return;
 8002120:	bf00      	nop
            }
        }
    }
}
 8002122:	3720      	adds	r7, #32
 8002124:	46bd      	mov	sp, r7
 8002126:	bc90      	pop	{r4, r7}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000310 	.word	0x20000310
 8002130:	20000318 	.word	0x20000318

08002134 <OLED_DisplayChar>:
    OLED_SendCommand(0x00 + (x & 0x0F));        // 设置低4位列地址
    OLED_SendCommand(0x10 + ((x >> 4) & 0x0F)); // 设置高4位列地址
}

void OLED_DisplayChar(int16_t x, int16_t y, char ch) //! UPDATEDISPLAY REQUIRED
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	@ 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	80fb      	strh	r3, [r7, #6]
 800213e:	460b      	mov	r3, r1
 8002140:	80bb      	strh	r3, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	70fb      	strb	r3, [r7, #3]
    const uint8_t font_width = 6;
 8002146:	2306      	movs	r3, #6
 8002148:	773b      	strb	r3, [r7, #28]
    const uint8_t font_height = 8;
 800214a:	2308      	movs	r3, #8
 800214c:	76fb      	strb	r3, [r7, #27]

    if (ch < 32)
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	2b1f      	cmp	r3, #31
 8002152:	f240 80a8 	bls.w	80022a6 <OLED_DisplayChar+0x172>
        return;

    uint8_t c = ch - 32;
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	3b20      	subs	r3, #32
 800215a:	76bb      	strb	r3, [r7, #26]

    uint8_t start_page = (y >= 0) ? (y / 8) : 0;
 800215c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	db08      	blt.n	8002176 <OLED_DisplayChar+0x42>
 8002164:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	da00      	bge.n	800216e <OLED_DisplayChar+0x3a>
 800216c:	3307      	adds	r3, #7
 800216e:	10db      	asrs	r3, r3, #3
 8002170:	b21b      	sxth	r3, r3
 8002172:	b2db      	uxtb	r3, r3
 8002174:	e000      	b.n	8002178 <OLED_DisplayChar+0x44>
 8002176:	2300      	movs	r3, #0
 8002178:	767b      	strb	r3, [r7, #25]
    uint8_t end_page = ((y + font_height - 1) < OLED_HEIGHT) ? ((y + font_height - 1) / 8) : (OLED_HEIGHT / 8 - 1);
 800217a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800217e:	7efb      	ldrb	r3, [r7, #27]
 8002180:	4413      	add	r3, r2
 8002182:	2b40      	cmp	r3, #64	@ 0x40
 8002184:	dc0a      	bgt.n	800219c <OLED_DisplayChar+0x68>
 8002186:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800218a:	7efb      	ldrb	r3, [r7, #27]
 800218c:	4413      	add	r3, r2
 800218e:	3b01      	subs	r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	da00      	bge.n	8002196 <OLED_DisplayChar+0x62>
 8002194:	3307      	adds	r3, #7
 8002196:	10db      	asrs	r3, r3, #3
 8002198:	b2db      	uxtb	r3, r3
 800219a:	e000      	b.n	800219e <OLED_DisplayChar+0x6a>
 800219c:	2307      	movs	r3, #7
 800219e:	763b      	strb	r3, [r7, #24]

    extern volatile uint8_t oled_dirty_pages[];
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 80021a0:	7e7b      	ldrb	r3, [r7, #25]
 80021a2:	77fb      	strb	r3, [r7, #31]
 80021a4:	e006      	b.n	80021b4 <OLED_DisplayChar+0x80>
    {
        oled_dirty_pages[page] = 1;
 80021a6:	7ffb      	ldrb	r3, [r7, #31]
 80021a8:	4a42      	ldr	r2, [pc, #264]	@ (80022b4 <OLED_DisplayChar+0x180>)
 80021aa:	2101      	movs	r1, #1
 80021ac:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 80021ae:	7ffb      	ldrb	r3, [r7, #31]
 80021b0:	3301      	adds	r3, #1
 80021b2:	77fb      	strb	r3, [r7, #31]
 80021b4:	7ffa      	ldrb	r2, [r7, #31]
 80021b6:	7e3b      	ldrb	r3, [r7, #24]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d802      	bhi.n	80021c2 <OLED_DisplayChar+0x8e>
 80021bc:	7ffb      	ldrb	r3, [r7, #31]
 80021be:	2b07      	cmp	r3, #7
 80021c0:	d9f1      	bls.n	80021a6 <OLED_DisplayChar+0x72>
    }
    // 按列渲染
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	77bb      	strb	r3, [r7, #30]
 80021c6:	e069      	b.n	800229c <OLED_DisplayChar+0x168>
    {
        int16_t screen_x = x + char_col;
 80021c8:	7fbb      	ldrb	r3, [r7, #30]
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	4413      	add	r3, r2
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	82fb      	strh	r3, [r7, #22]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 80021d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	db5b      	blt.n	8002294 <OLED_DisplayChar+0x160>
 80021dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80021e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80021e2:	dc57      	bgt.n	8002294 <OLED_DisplayChar+0x160>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 80021e4:	7ebb      	ldrb	r3, [r7, #26]
 80021e6:	7f3a      	ldrb	r2, [r7, #28]
 80021e8:	fb03 f202 	mul.w	r2, r3, r2
 80021ec:	7fbb      	ldrb	r3, [r7, #30]
 80021ee:	4413      	add	r3, r2
 80021f0:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 80021f4:	d259      	bcs.n	80022aa <OLED_DisplayChar+0x176>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 80021f6:	7ebb      	ldrb	r3, [r7, #26]
 80021f8:	7f3a      	ldrb	r2, [r7, #28]
 80021fa:	fb03 f202 	mul.w	r2, r3, r2
 80021fe:	7fbb      	ldrb	r3, [r7, #30]
 8002200:	4413      	add	r3, r2
 8002202:	4a2d      	ldr	r2, [pc, #180]	@ (80022b8 <OLED_DisplayChar+0x184>)
 8002204:	5cd3      	ldrb	r3, [r2, r3]
 8002206:	757b      	strb	r3, [r7, #21]

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8002208:	2300      	movs	r3, #0
 800220a:	777b      	strb	r3, [r7, #29]
 800220c:	e03d      	b.n	800228a <OLED_DisplayChar+0x156>
        {
            int16_t screen_y = y + char_row_bit;
 800220e:	7f7b      	ldrb	r3, [r7, #29]
 8002210:	b29a      	uxth	r2, r3
 8002212:	88bb      	ldrh	r3, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	b29b      	uxth	r3, r3
 8002218:	827b      	strh	r3, [r7, #18]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 800221a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800221e:	2b00      	cmp	r3, #0
 8002220:	db2f      	blt.n	8002282 <OLED_DisplayChar+0x14e>
 8002222:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002226:	2b3f      	cmp	r3, #63	@ 0x3f
 8002228:	dc2b      	bgt.n	8002282 <OLED_DisplayChar+0x14e>
                continue;

            if ((font_data_col >> char_row_bit) & 0x01)
 800222a:	7d7a      	ldrb	r2, [r7, #21]
 800222c:	7f7b      	ldrb	r3, [r7, #29]
 800222e:	fa42 f303 	asr.w	r3, r2, r3
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d024      	beq.n	8002284 <OLED_DisplayChar+0x150>
            {
                uint8_t page = (uint8_t)screen_y / 8;
 800223a:	8a7b      	ldrh	r3, [r7, #18]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	08db      	lsrs	r3, r3, #3
 8002240:	747b      	strb	r3, [r7, #17]
                uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 8002242:	8a7b      	ldrh	r3, [r7, #18]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	743b      	strb	r3, [r7, #16]
                uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 800224c:	7c7b      	ldrb	r3, [r7, #17]
 800224e:	b29b      	uxth	r3, r3
 8002250:	01db      	lsls	r3, r3, #7
 8002252:	b29a      	uxth	r2, r3
 8002254:	8afb      	ldrh	r3, [r7, #22]
 8002256:	4413      	add	r3, r2
 8002258:	81fb      	strh	r3, [r7, #14]

                if (buffer_index < sizeof(OLED_BackBuffer))
 800225a:	89fb      	ldrh	r3, [r7, #14]
 800225c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002260:	d210      	bcs.n	8002284 <OLED_DisplayChar+0x150>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 8002262:	89fb      	ldrh	r3, [r7, #14]
 8002264:	4a15      	ldr	r2, [pc, #84]	@ (80022bc <OLED_DisplayChar+0x188>)
 8002266:	5cd3      	ldrb	r3, [r2, r3]
 8002268:	b25a      	sxtb	r2, r3
 800226a:	7c3b      	ldrb	r3, [r7, #16]
 800226c:	2101      	movs	r1, #1
 800226e:	fa01 f303 	lsl.w	r3, r1, r3
 8002272:	b25b      	sxtb	r3, r3
 8002274:	4313      	orrs	r3, r2
 8002276:	b25a      	sxtb	r2, r3
 8002278:	89fb      	ldrh	r3, [r7, #14]
 800227a:	b2d1      	uxtb	r1, r2
 800227c:	4a0f      	ldr	r2, [pc, #60]	@ (80022bc <OLED_DisplayChar+0x188>)
 800227e:	54d1      	strb	r1, [r2, r3]
 8002280:	e000      	b.n	8002284 <OLED_DisplayChar+0x150>
                continue;
 8002282:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8002284:	7f7b      	ldrb	r3, [r7, #29]
 8002286:	3301      	adds	r3, #1
 8002288:	777b      	strb	r3, [r7, #29]
 800228a:	7f7a      	ldrb	r2, [r7, #29]
 800228c:	7efb      	ldrb	r3, [r7, #27]
 800228e:	429a      	cmp	r2, r3
 8002290:	d3bd      	bcc.n	800220e <OLED_DisplayChar+0xda>
 8002292:	e000      	b.n	8002296 <OLED_DisplayChar+0x162>
            continue;
 8002294:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8002296:	7fbb      	ldrb	r3, [r7, #30]
 8002298:	3301      	adds	r3, #1
 800229a:	77bb      	strb	r3, [r7, #30]
 800229c:	7fba      	ldrb	r2, [r7, #30]
 800229e:	7f3b      	ldrb	r3, [r7, #28]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d391      	bcc.n	80021c8 <OLED_DisplayChar+0x94>
 80022a4:	e002      	b.n	80022ac <OLED_DisplayChar+0x178>
        return;
 80022a6:	bf00      	nop
 80022a8:	e000      	b.n	80022ac <OLED_DisplayChar+0x178>
            break;
 80022aa:	bf00      	nop
                }
            }
        }
    }
}
 80022ac:	3724      	adds	r7, #36	@ 0x24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	20000310 	.word	0x20000310
 80022b8:	0800b330 	.word	0x0800b330
 80022bc:	20000318 	.word	0x20000318

080022c0 <OLED_DisplayCharInverted>:

void OLED_DisplayCharInverted(int16_t x, int16_t y, char ch, uint8_t inverted) //! UPDATEDISPLAY REQUIRED
{
 80022c0:	b490      	push	{r4, r7}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4604      	mov	r4, r0
 80022c8:	4608      	mov	r0, r1
 80022ca:	4611      	mov	r1, r2
 80022cc:	461a      	mov	r2, r3
 80022ce:	4623      	mov	r3, r4
 80022d0:	80fb      	strh	r3, [r7, #6]
 80022d2:	4603      	mov	r3, r0
 80022d4:	80bb      	strh	r3, [r7, #4]
 80022d6:	460b      	mov	r3, r1
 80022d8:	70fb      	strb	r3, [r7, #3]
 80022da:	4613      	mov	r3, r2
 80022dc:	70bb      	strb	r3, [r7, #2]
    const uint8_t font_width = 6;
 80022de:	2306      	movs	r3, #6
 80022e0:	753b      	strb	r3, [r7, #20]
    const uint8_t font_height = 8;
 80022e2:	2308      	movs	r3, #8
 80022e4:	74fb      	strb	r3, [r7, #19]

    if (ch < 32)
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	2b1f      	cmp	r3, #31
 80022ea:	f240 808e 	bls.w	800240a <OLED_DisplayCharInverted+0x14a>
        return;

    uint8_t c = ch - 32;
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	3b20      	subs	r3, #32
 80022f2:	74bb      	strb	r3, [r7, #18]

    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 80022f4:	2300      	movs	r3, #0
 80022f6:	75fb      	strb	r3, [r7, #23]
 80022f8:	e081      	b.n	80023fe <OLED_DisplayCharInverted+0x13e>
    {
        int16_t screen_x = x + char_col;
 80022fa:	7dfb      	ldrb	r3, [r7, #23]
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	4413      	add	r3, r2
 8002302:	b29b      	uxth	r3, r3
 8002304:	823b      	strh	r3, [r7, #16]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 8002306:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800230a:	2b00      	cmp	r3, #0
 800230c:	db73      	blt.n	80023f6 <OLED_DisplayCharInverted+0x136>
 800230e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002312:	2b7f      	cmp	r3, #127	@ 0x7f
 8002314:	dc6f      	bgt.n	80023f6 <OLED_DisplayCharInverted+0x136>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 8002316:	7cbb      	ldrb	r3, [r7, #18]
 8002318:	7d3a      	ldrb	r2, [r7, #20]
 800231a:	fb03 f202 	mul.w	r2, r3, r2
 800231e:	7dfb      	ldrb	r3, [r7, #23]
 8002320:	4413      	add	r3, r2
 8002322:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8002326:	d272      	bcs.n	800240e <OLED_DisplayCharInverted+0x14e>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 8002328:	7cbb      	ldrb	r3, [r7, #18]
 800232a:	7d3a      	ldrb	r2, [r7, #20]
 800232c:	fb03 f202 	mul.w	r2, r3, r2
 8002330:	7dfb      	ldrb	r3, [r7, #23]
 8002332:	4413      	add	r3, r2
 8002334:	4a38      	ldr	r2, [pc, #224]	@ (8002418 <OLED_DisplayCharInverted+0x158>)
 8002336:	5cd3      	ldrb	r3, [r2, r3]
 8002338:	75bb      	strb	r3, [r7, #22]

        if (inverted)
 800233a:	78bb      	ldrb	r3, [r7, #2]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <OLED_DisplayCharInverted+0x86>
        {
            font_data_col = ~font_data_col;
 8002340:	7dbb      	ldrb	r3, [r7, #22]
 8002342:	43db      	mvns	r3, r3
 8002344:	75bb      	strb	r3, [r7, #22]
        }

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8002346:	2300      	movs	r3, #0
 8002348:	757b      	strb	r3, [r7, #21]
 800234a:	e04f      	b.n	80023ec <OLED_DisplayCharInverted+0x12c>
        {
            int16_t screen_y = y + char_row_bit;
 800234c:	7d7b      	ldrb	r3, [r7, #21]
 800234e:	b29a      	uxth	r2, r3
 8002350:	88bb      	ldrh	r3, [r7, #4]
 8002352:	4413      	add	r3, r2
 8002354:	b29b      	uxth	r3, r3
 8002356:	81fb      	strh	r3, [r7, #14]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 8002358:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800235c:	2b00      	cmp	r3, #0
 800235e:	db41      	blt.n	80023e4 <OLED_DisplayCharInverted+0x124>
 8002360:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002364:	2b3f      	cmp	r3, #63	@ 0x3f
 8002366:	dc3d      	bgt.n	80023e4 <OLED_DisplayCharInverted+0x124>
                continue;

            uint8_t page = (uint8_t)screen_y / 8;
 8002368:	89fb      	ldrh	r3, [r7, #14]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	08db      	lsrs	r3, r3, #3
 800236e:	737b      	strb	r3, [r7, #13]
            uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 8002370:	89fb      	ldrh	r3, [r7, #14]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	733b      	strb	r3, [r7, #12]
            uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 800237a:	7b7b      	ldrb	r3, [r7, #13]
 800237c:	b29b      	uxth	r3, r3
 800237e:	01db      	lsls	r3, r3, #7
 8002380:	b29a      	uxth	r2, r3
 8002382:	8a3b      	ldrh	r3, [r7, #16]
 8002384:	4413      	add	r3, r2
 8002386:	817b      	strh	r3, [r7, #10]

            if (buffer_index < sizeof(OLED_BackBuffer))
 8002388:	897b      	ldrh	r3, [r7, #10]
 800238a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800238e:	d22a      	bcs.n	80023e6 <OLED_DisplayCharInverted+0x126>
            {
                if ((font_data_col >> char_row_bit) & 0x01)
 8002390:	7dba      	ldrb	r2, [r7, #22]
 8002392:	7d7b      	ldrb	r3, [r7, #21]
 8002394:	fa42 f303 	asr.w	r3, r2, r3
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00f      	beq.n	80023c0 <OLED_DisplayCharInverted+0x100>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 80023a0:	897b      	ldrh	r3, [r7, #10]
 80023a2:	4a1e      	ldr	r2, [pc, #120]	@ (800241c <OLED_DisplayCharInverted+0x15c>)
 80023a4:	5cd3      	ldrb	r3, [r2, r3]
 80023a6:	b25a      	sxtb	r2, r3
 80023a8:	7b3b      	ldrb	r3, [r7, #12]
 80023aa:	2101      	movs	r1, #1
 80023ac:	fa01 f303 	lsl.w	r3, r1, r3
 80023b0:	b25b      	sxtb	r3, r3
 80023b2:	4313      	orrs	r3, r2
 80023b4:	b25a      	sxtb	r2, r3
 80023b6:	897b      	ldrh	r3, [r7, #10]
 80023b8:	b2d1      	uxtb	r1, r2
 80023ba:	4a18      	ldr	r2, [pc, #96]	@ (800241c <OLED_DisplayCharInverted+0x15c>)
 80023bc:	54d1      	strb	r1, [r2, r3]
 80023be:	e012      	b.n	80023e6 <OLED_DisplayCharInverted+0x126>
                }
                else
                {
                    OLED_BackBuffer[buffer_index] &= ~(1 << bit_offset_in_page);
 80023c0:	897b      	ldrh	r3, [r7, #10]
 80023c2:	4a16      	ldr	r2, [pc, #88]	@ (800241c <OLED_DisplayCharInverted+0x15c>)
 80023c4:	5cd3      	ldrb	r3, [r2, r3]
 80023c6:	b25a      	sxtb	r2, r3
 80023c8:	7b3b      	ldrb	r3, [r7, #12]
 80023ca:	2101      	movs	r1, #1
 80023cc:	fa01 f303 	lsl.w	r3, r1, r3
 80023d0:	b25b      	sxtb	r3, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	4013      	ands	r3, r2
 80023d8:	b25a      	sxtb	r2, r3
 80023da:	897b      	ldrh	r3, [r7, #10]
 80023dc:	b2d1      	uxtb	r1, r2
 80023de:	4a0f      	ldr	r2, [pc, #60]	@ (800241c <OLED_DisplayCharInverted+0x15c>)
 80023e0:	54d1      	strb	r1, [r2, r3]
 80023e2:	e000      	b.n	80023e6 <OLED_DisplayCharInverted+0x126>
                continue;
 80023e4:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 80023e6:	7d7b      	ldrb	r3, [r7, #21]
 80023e8:	3301      	adds	r3, #1
 80023ea:	757b      	strb	r3, [r7, #21]
 80023ec:	7d7a      	ldrb	r2, [r7, #21]
 80023ee:	7cfb      	ldrb	r3, [r7, #19]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d3ab      	bcc.n	800234c <OLED_DisplayCharInverted+0x8c>
 80023f4:	e000      	b.n	80023f8 <OLED_DisplayCharInverted+0x138>
            continue;
 80023f6:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 80023f8:	7dfb      	ldrb	r3, [r7, #23]
 80023fa:	3301      	adds	r3, #1
 80023fc:	75fb      	strb	r3, [r7, #23]
 80023fe:	7dfa      	ldrb	r2, [r7, #23]
 8002400:	7d3b      	ldrb	r3, [r7, #20]
 8002402:	429a      	cmp	r2, r3
 8002404:	f4ff af79 	bcc.w	80022fa <OLED_DisplayCharInverted+0x3a>
 8002408:	e002      	b.n	8002410 <OLED_DisplayCharInverted+0x150>
        return;
 800240a:	bf00      	nop
 800240c:	e000      	b.n	8002410 <OLED_DisplayCharInverted+0x150>
            break;
 800240e:	bf00      	nop
                }
            }
        }
    }
}
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bc90      	pop	{r4, r7}
 8002416:	4770      	bx	lr
 8002418:	0800b330 	.word	0x0800b330
 800241c:	20000318 	.word	0x20000318

08002420 <OLED_DisplayString>:

void OLED_DisplayString(int16_t x, int16_t y, char *str) //! UPDATEDISPLAY REQUIRED
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	603a      	str	r2, [r7, #0]
 800242a:	80fb      	strh	r3, [r7, #6]
 800242c:	460b      	mov	r3, r1
 800242e:	80bb      	strh	r3, [r7, #4]
    uint8_t j = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	73fb      	strb	r3, [r7, #15]
    const uint8_t font_width = 6;
 8002434:	2306      	movs	r3, #6
 8002436:	73bb      	strb	r3, [r7, #14]
    const uint8_t font_height = 8;
 8002438:	2308      	movs	r3, #8
 800243a:	737b      	strb	r3, [r7, #13]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 800243c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002440:	2b3f      	cmp	r3, #63	@ 0x3f
 8002442:	dc34      	bgt.n	80024ae <OLED_DisplayString+0x8e>
 8002444:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002448:	7b7b      	ldrb	r3, [r7, #13]
 800244a:	4413      	add	r3, r2
 800244c:	2b00      	cmp	r3, #0
 800244e:	dd2e      	ble.n	80024ae <OLED_DisplayString+0x8e>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 8002450:	e026      	b.n	80024a0 <OLED_DisplayString+0x80>
    {
        current_char_x = x + (j * font_width);
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	b29b      	uxth	r3, r3
 8002456:	7bba      	ldrb	r2, [r7, #14]
 8002458:	b292      	uxth	r2, r2
 800245a:	fb02 f303 	mul.w	r3, r2, r3
 800245e:	b29a      	uxth	r2, r3
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	4413      	add	r3, r2
 8002464:	b29b      	uxth	r3, r3
 8002466:	817b      	strh	r3, [r7, #10]
        if (current_char_x >= OLED_WIDTH)
 8002468:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800246c:	2b7f      	cmp	r3, #127	@ 0x7f
 800246e:	dc20      	bgt.n	80024b2 <OLED_DisplayString+0x92>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 8002470:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002474:	7bbb      	ldrb	r3, [r7, #14]
 8002476:	4413      	add	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	dc03      	bgt.n	8002484 <OLED_DisplayString+0x64>
        {
            j++;
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	3301      	adds	r3, #1
 8002480:	73fb      	strb	r3, [r7, #15]
            continue;
 8002482:	e00d      	b.n	80024a0 <OLED_DisplayString+0x80>
        }
        OLED_DisplayChar(current_char_x, y, str[j]);
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	4413      	add	r3, r2
 800248a:	781a      	ldrb	r2, [r3, #0]
 800248c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002490:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fe4d 	bl	8002134 <OLED_DisplayChar>
        j++;
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	3301      	adds	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
    while (str[j] != '\0')
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	4413      	add	r3, r2
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1d2      	bne.n	8002452 <OLED_DisplayString+0x32>
 80024ac:	e002      	b.n	80024b4 <OLED_DisplayString+0x94>
        return;
 80024ae:	bf00      	nop
 80024b0:	e000      	b.n	80024b4 <OLED_DisplayString+0x94>
            break;
 80024b2:	bf00      	nop
    }
}
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <OLED_DisplayStringInverted>:

void OLED_DisplayStringInverted(int16_t x, int16_t y, char *str, uint8_t inverted) //! UPDATEDISPLAY REQUIRED
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60ba      	str	r2, [r7, #8]
 80024c2:	461a      	mov	r2, r3
 80024c4:	4603      	mov	r3, r0
 80024c6:	81fb      	strh	r3, [r7, #14]
 80024c8:	460b      	mov	r3, r1
 80024ca:	81bb      	strh	r3, [r7, #12]
 80024cc:	4613      	mov	r3, r2
 80024ce:	71fb      	strb	r3, [r7, #7]
    uint8_t j = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	75fb      	strb	r3, [r7, #23]
    const uint8_t font_width = 6;
 80024d4:	2306      	movs	r3, #6
 80024d6:	75bb      	strb	r3, [r7, #22]
    const uint8_t font_height = 8;
 80024d8:	2308      	movs	r3, #8
 80024da:	757b      	strb	r3, [r7, #21]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 80024dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80024e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80024e2:	dc34      	bgt.n	800254e <OLED_DisplayStringInverted+0x94>
 80024e4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80024e8:	7d7b      	ldrb	r3, [r7, #21]
 80024ea:	4413      	add	r3, r2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	dd2e      	ble.n	800254e <OLED_DisplayStringInverted+0x94>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 80024f0:	e026      	b.n	8002540 <OLED_DisplayStringInverted+0x86>
    {
        current_char_x = x + (j * font_width);
 80024f2:	7dfb      	ldrb	r3, [r7, #23]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	7dba      	ldrb	r2, [r7, #22]
 80024f8:	b292      	uxth	r2, r2
 80024fa:	fb02 f303 	mul.w	r3, r2, r3
 80024fe:	b29a      	uxth	r2, r3
 8002500:	89fb      	ldrh	r3, [r7, #14]
 8002502:	4413      	add	r3, r2
 8002504:	b29b      	uxth	r3, r3
 8002506:	827b      	strh	r3, [r7, #18]
        if (current_char_x >= OLED_WIDTH)
 8002508:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800250c:	2b7f      	cmp	r3, #127	@ 0x7f
 800250e:	dc20      	bgt.n	8002552 <OLED_DisplayStringInverted+0x98>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 8002510:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002514:	7dbb      	ldrb	r3, [r7, #22]
 8002516:	4413      	add	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	dc03      	bgt.n	8002524 <OLED_DisplayStringInverted+0x6a>
        {
            j++;
 800251c:	7dfb      	ldrb	r3, [r7, #23]
 800251e:	3301      	adds	r3, #1
 8002520:	75fb      	strb	r3, [r7, #23]
            continue;
 8002522:	e00d      	b.n	8002540 <OLED_DisplayStringInverted+0x86>
        }
        OLED_DisplayCharInverted(current_char_x, y, str[j], inverted);
 8002524:	7dfb      	ldrb	r3, [r7, #23]
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	4413      	add	r3, r2
 800252a:	781a      	ldrb	r2, [r3, #0]
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002532:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8002536:	f7ff fec3 	bl	80022c0 <OLED_DisplayCharInverted>
        j++;
 800253a:	7dfb      	ldrb	r3, [r7, #23]
 800253c:	3301      	adds	r3, #1
 800253e:	75fb      	strb	r3, [r7, #23]
    while (str[j] != '\0')
 8002540:	7dfb      	ldrb	r3, [r7, #23]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	4413      	add	r3, r2
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1d2      	bne.n	80024f2 <OLED_DisplayStringInverted+0x38>
 800254c:	e002      	b.n	8002554 <OLED_DisplayStringInverted+0x9a>
        return;
 800254e:	bf00      	nop
 8002550:	e000      	b.n	8002554 <OLED_DisplayStringInverted+0x9a>
            break;
 8002552:	bf00      	nop
    }
}
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <System_UI_Loop>:
#define OLED_TITLE_End_Y 0
#define StartTweenTime 2500
#define TweenStyle EASE_INOUT_ELASTIC

void System_UI_Loop()
{
 800255c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255e:	b089      	sub	sp, #36	@ 0x24
 8002560:	af04      	add	r7, sp, #16
    static bool isFirstRun = true;

    float x, y, x1, y1;
    if (!isFirstRun)
 8002562:	4b9c      	ldr	r3, [pc, #624]	@ (80027d4 <System_UI_Loop+0x278>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	f083 0301 	eor.w	r3, r3, #1
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <System_UI_Loop+0x18>
        SystemGetsSignal();
 8002570:	f001 fa82 	bl	8003a78 <SystemGetsSignal>

    if (isFirstRun) //第一次启动调用，初始化部分
 8002574:	4b97      	ldr	r3, [pc, #604]	@ (80027d4 <System_UI_Loop+0x278>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 832c 	beq.w	8002bd6 <System_UI_Loop+0x67a>
    {
#pragma region 标题栏
        OLED_MoveObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_End_Y, StartTweenTime, TweenStyle);
 800257e:	230f      	movs	r3, #15
 8002580:	9303      	str	r3, [sp, #12]
 8002582:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002586:	9302      	str	r3, [sp, #8]
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	4b92      	ldr	r3, [pc, #584]	@ (80027d8 <System_UI_Loop+0x27c>)
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	4b92      	ldr	r3, [pc, #584]	@ (80027dc <System_UI_Loop+0x280>)
 8002594:	4a90      	ldr	r2, [pc, #576]	@ (80027d8 <System_UI_Loop+0x27c>)
 8002596:	4992      	ldr	r1, [pc, #584]	@ (80027e0 <System_UI_Loop+0x284>)
 8002598:	4892      	ldr	r0, [pc, #584]	@ (80027e4 <System_UI_Loop+0x288>)
 800259a:	f002 fed0 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 800259e:	230f      	movs	r3, #15
 80025a0:	9303      	str	r3, [sp, #12]
 80025a2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80025a6:	9302      	str	r3, [sp, #8]
 80025a8:	4b8c      	ldr	r3, [pc, #560]	@ (80027dc <System_UI_Loop+0x280>)
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	4b8a      	ldr	r3, [pc, #552]	@ (80027d8 <System_UI_Loop+0x27c>)
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	4b8a      	ldr	r3, [pc, #552]	@ (80027dc <System_UI_Loop+0x280>)
 80025b2:	4a89      	ldr	r2, [pc, #548]	@ (80027d8 <System_UI_Loop+0x27c>)
 80025b4:	498c      	ldr	r1, [pc, #560]	@ (80027e8 <System_UI_Loop+0x28c>)
 80025b6:	488b      	ldr	r0, [pc, #556]	@ (80027e4 <System_UI_Loop+0x288>)
 80025b8:	f002 fec1 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 80025bc:	230f      	movs	r3, #15
 80025be:	9303      	str	r3, [sp, #12]
 80025c0:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80025c4:	9302      	str	r3, [sp, #8]
 80025c6:	4b85      	ldr	r3, [pc, #532]	@ (80027dc <System_UI_Loop+0x280>)
 80025c8:	9301      	str	r3, [sp, #4]
 80025ca:	4b88      	ldr	r3, [pc, #544]	@ (80027ec <System_UI_Loop+0x290>)
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	4b83      	ldr	r3, [pc, #524]	@ (80027dc <System_UI_Loop+0x280>)
 80025d0:	4a86      	ldr	r2, [pc, #536]	@ (80027ec <System_UI_Loop+0x290>)
 80025d2:	4987      	ldr	r1, [pc, #540]	@ (80027f0 <System_UI_Loop+0x294>)
 80025d4:	4883      	ldr	r0, [pc, #524]	@ (80027e4 <System_UI_Loop+0x288>)
 80025d6:	f002 feb2 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 80025da:	230f      	movs	r3, #15
 80025dc:	9303      	str	r3, [sp, #12]
 80025de:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80025e2:	9302      	str	r3, [sp, #8]
 80025e4:	4b7d      	ldr	r3, [pc, #500]	@ (80027dc <System_UI_Loop+0x280>)
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	4b82      	ldr	r3, [pc, #520]	@ (80027f4 <System_UI_Loop+0x298>)
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	4b7b      	ldr	r3, [pc, #492]	@ (80027dc <System_UI_Loop+0x280>)
 80025ee:	4a81      	ldr	r2, [pc, #516]	@ (80027f4 <System_UI_Loop+0x298>)
 80025f0:	4981      	ldr	r1, [pc, #516]	@ (80027f8 <System_UI_Loop+0x29c>)
 80025f2:	487c      	ldr	r0, [pc, #496]	@ (80027e4 <System_UI_Loop+0x288>)
 80025f4:	f002 fea3 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Developer") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 80025f8:	230f      	movs	r3, #15
 80025fa:	9303      	str	r3, [sp, #12]
 80025fc:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002600:	9302      	str	r3, [sp, #8]
 8002602:	4b76      	ldr	r3, [pc, #472]	@ (80027dc <System_UI_Loop+0x280>)
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	4b7d      	ldr	r3, [pc, #500]	@ (80027fc <System_UI_Loop+0x2a0>)
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	4b74      	ldr	r3, [pc, #464]	@ (80027dc <System_UI_Loop+0x280>)
 800260c:	4a7b      	ldr	r2, [pc, #492]	@ (80027fc <System_UI_Loop+0x2a0>)
 800260e:	497c      	ldr	r1, [pc, #496]	@ (8002800 <System_UI_Loop+0x2a4>)
 8002610:	4874      	ldr	r0, [pc, #464]	@ (80027e4 <System_UI_Loop+0x288>)
 8002612:	f002 fe94 	bl	800533e <OLED_MoveObject>

        OLED_MoveObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002616:	230f      	movs	r3, #15
 8002618:	9303      	str	r3, [sp, #12]
 800261a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800261e:	9302      	str	r3, [sp, #8]
 8002620:	4b6e      	ldr	r3, [pc, #440]	@ (80027dc <System_UI_Loop+0x280>)
 8002622:	9301      	str	r3, [sp, #4]
 8002624:	4b73      	ldr	r3, [pc, #460]	@ (80027f4 <System_UI_Loop+0x298>)
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	4b6c      	ldr	r3, [pc, #432]	@ (80027dc <System_UI_Loop+0x280>)
 800262a:	4a72      	ldr	r2, [pc, #456]	@ (80027f4 <System_UI_Loop+0x298>)
 800262c:	4975      	ldr	r1, [pc, #468]	@ (8002804 <System_UI_Loop+0x2a8>)
 800262e:	486d      	ldr	r0, [pc, #436]	@ (80027e4 <System_UI_Loop+0x288>)
 8002630:	f002 fe85 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002634:	230f      	movs	r3, #15
 8002636:	9303      	str	r3, [sp, #12]
 8002638:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800263c:	9302      	str	r3, [sp, #8]
 800263e:	4b67      	ldr	r3, [pc, #412]	@ (80027dc <System_UI_Loop+0x280>)
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	4b65      	ldr	r3, [pc, #404]	@ (80027d8 <System_UI_Loop+0x27c>)
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	4b65      	ldr	r3, [pc, #404]	@ (80027dc <System_UI_Loop+0x280>)
 8002648:	4a63      	ldr	r2, [pc, #396]	@ (80027d8 <System_UI_Loop+0x27c>)
 800264a:	496f      	ldr	r1, [pc, #444]	@ (8002808 <System_UI_Loop+0x2ac>)
 800264c:	4865      	ldr	r0, [pc, #404]	@ (80027e4 <System_UI_Loop+0x288>)
 800264e:	f002 fe76 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002652:	230f      	movs	r3, #15
 8002654:	9303      	str	r3, [sp, #12]
 8002656:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800265a:	9302      	str	r3, [sp, #8]
 800265c:	4b5f      	ldr	r3, [pc, #380]	@ (80027dc <System_UI_Loop+0x280>)
 800265e:	9301      	str	r3, [sp, #4]
 8002660:	4b64      	ldr	r3, [pc, #400]	@ (80027f4 <System_UI_Loop+0x298>)
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	4b5d      	ldr	r3, [pc, #372]	@ (80027dc <System_UI_Loop+0x280>)
 8002666:	4a63      	ldr	r2, [pc, #396]	@ (80027f4 <System_UI_Loop+0x298>)
 8002668:	4968      	ldr	r1, [pc, #416]	@ (800280c <System_UI_Loop+0x2b0>)
 800266a:	485e      	ldr	r0, [pc, #376]	@ (80027e4 <System_UI_Loop+0x288>)
 800266c:	f002 fe67 	bl	800533e <OLED_MoveObject>

        OLED_MoveObject(&g_Title_AnimationManager, "Do some CAL!", (OLED_WIDTH - strlen("Do some Cal!") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Do some Cal!") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002670:	230f      	movs	r3, #15
 8002672:	9303      	str	r3, [sp, #12]
 8002674:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002678:	9302      	str	r3, [sp, #8]
 800267a:	4b58      	ldr	r3, [pc, #352]	@ (80027dc <System_UI_Loop+0x280>)
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	4b5d      	ldr	r3, [pc, #372]	@ (80027f4 <System_UI_Loop+0x298>)
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	4b56      	ldr	r3, [pc, #344]	@ (80027dc <System_UI_Loop+0x280>)
 8002684:	4a5b      	ldr	r2, [pc, #364]	@ (80027f4 <System_UI_Loop+0x298>)
 8002686:	4962      	ldr	r1, [pc, #392]	@ (8002810 <System_UI_Loop+0x2b4>)
 8002688:	4856      	ldr	r0, [pc, #344]	@ (80027e4 <System_UI_Loop+0x288>)
 800268a:	f002 fe58 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "BAD APPLE!", (OLED_WIDTH - strlen("BAD APPLE!") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("BAD APPLE!") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 800268e:	230f      	movs	r3, #15
 8002690:	9303      	str	r3, [sp, #12]
 8002692:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002696:	9302      	str	r3, [sp, #8]
 8002698:	4b50      	ldr	r3, [pc, #320]	@ (80027dc <System_UI_Loop+0x280>)
 800269a:	9301      	str	r3, [sp, #4]
 800269c:	4b5d      	ldr	r3, [pc, #372]	@ (8002814 <System_UI_Loop+0x2b8>)
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	4b4e      	ldr	r3, [pc, #312]	@ (80027dc <System_UI_Loop+0x280>)
 80026a2:	4a5c      	ldr	r2, [pc, #368]	@ (8002814 <System_UI_Loop+0x2b8>)
 80026a4:	495c      	ldr	r1, [pc, #368]	@ (8002818 <System_UI_Loop+0x2bc>)
 80026a6:	484f      	ldr	r0, [pc, #316]	@ (80027e4 <System_UI_Loop+0x288>)
 80026a8:	f002 fe49 	bl	800533e <OLED_MoveObject>

        OLED_MoveObject(&g_Title_AnimationManager, "Show FPS?", (OLED_WIDTH - strlen("Show FPS?") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Show FPS?") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 80026ac:	230f      	movs	r3, #15
 80026ae:	9303      	str	r3, [sp, #12]
 80026b0:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80026b4:	9302      	str	r3, [sp, #8]
 80026b6:	4b49      	ldr	r3, [pc, #292]	@ (80027dc <System_UI_Loop+0x280>)
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	4b50      	ldr	r3, [pc, #320]	@ (80027fc <System_UI_Loop+0x2a0>)
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	4b47      	ldr	r3, [pc, #284]	@ (80027dc <System_UI_Loop+0x280>)
 80026c0:	4a4e      	ldr	r2, [pc, #312]	@ (80027fc <System_UI_Loop+0x2a0>)
 80026c2:	4956      	ldr	r1, [pc, #344]	@ (800281c <System_UI_Loop+0x2c0>)
 80026c4:	4847      	ldr	r0, [pc, #284]	@ (80027e4 <System_UI_Loop+0x288>)
 80026c6:	f002 fe3a 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "Adjust Lightness", (OLED_WIDTH - strlen("Adjust Lightness") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Adjust Lightness") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 80026ca:	230f      	movs	r3, #15
 80026cc:	9303      	str	r3, [sp, #12]
 80026ce:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80026d2:	9302      	str	r3, [sp, #8]
 80026d4:	4b41      	ldr	r3, [pc, #260]	@ (80027dc <System_UI_Loop+0x280>)
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	f04f 4384 	mov.w	r3, #1107296256	@ 0x42000000
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	4b3f      	ldr	r3, [pc, #252]	@ (80027dc <System_UI_Loop+0x280>)
 80026e0:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 80026e4:	494e      	ldr	r1, [pc, #312]	@ (8002820 <System_UI_Loop+0x2c4>)
 80026e6:	483f      	ldr	r0, [pc, #252]	@ (80027e4 <System_UI_Loop+0x288>)
 80026e8:	f002 fe29 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "UnikoZera!", (OLED_WIDTH - strlen("UnikoZera!") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("UnikoZera!") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 80026ec:	230f      	movs	r3, #15
 80026ee:	9303      	str	r3, [sp, #12]
 80026f0:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80026f4:	9302      	str	r3, [sp, #8]
 80026f6:	4b39      	ldr	r3, [pc, #228]	@ (80027dc <System_UI_Loop+0x280>)
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	4b46      	ldr	r3, [pc, #280]	@ (8002814 <System_UI_Loop+0x2b8>)
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	4b37      	ldr	r3, [pc, #220]	@ (80027dc <System_UI_Loop+0x280>)
 8002700:	4a44      	ldr	r2, [pc, #272]	@ (8002814 <System_UI_Loop+0x2b8>)
 8002702:	4948      	ldr	r1, [pc, #288]	@ (8002824 <System_UI_Loop+0x2c8>)
 8002704:	4837      	ldr	r0, [pc, #220]	@ (80027e4 <System_UI_Loop+0x288>)
 8002706:	f002 fe1a 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "https://github.com/UnikoZera", (OLED_WIDTH - strlen("https://github.com/UnikoZera") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("https://github.com/UnikoZera") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 800270a:	230f      	movs	r3, #15
 800270c:	9303      	str	r3, [sp, #12]
 800270e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002712:	9302      	str	r3, [sp, #8]
 8002714:	4b31      	ldr	r3, [pc, #196]	@ (80027dc <System_UI_Loop+0x280>)
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	f04f 439f 	mov.w	r3, #1333788672	@ 0x4f800000
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	4b2f      	ldr	r3, [pc, #188]	@ (80027dc <System_UI_Loop+0x280>)
 8002720:	f04f 429f 	mov.w	r2, #1333788672	@ 0x4f800000
 8002724:	4940      	ldr	r1, [pc, #256]	@ (8002828 <System_UI_Loop+0x2cc>)
 8002726:	482f      	ldr	r0, [pc, #188]	@ (80027e4 <System_UI_Loop+0x288>)
 8002728:	f002 fe09 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "3864437775@qq.com", (OLED_WIDTH - strlen("3864437775@qq.com") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("3864437775@qq.com") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 800272c:	230f      	movs	r3, #15
 800272e:	9303      	str	r3, [sp, #12]
 8002730:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002734:	9302      	str	r3, [sp, #8]
 8002736:	4b29      	ldr	r3, [pc, #164]	@ (80027dc <System_UI_Loop+0x280>)
 8002738:	9301      	str	r3, [sp, #4]
 800273a:	4b3c      	ldr	r3, [pc, #240]	@ (800282c <System_UI_Loop+0x2d0>)
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	4b27      	ldr	r3, [pc, #156]	@ (80027dc <System_UI_Loop+0x280>)
 8002740:	4a3a      	ldr	r2, [pc, #232]	@ (800282c <System_UI_Loop+0x2d0>)
 8002742:	493b      	ldr	r1, [pc, #236]	@ (8002830 <System_UI_Loop+0x2d4>)
 8002744:	4827      	ldr	r0, [pc, #156]	@ (80027e4 <System_UI_Loop+0x288>)
 8002746:	f002 fdfa 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "https://space.bilibili.com/3546696818624992", (OLED_WIDTH - strlen("https://space.bilibili.com/3546696818624992") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("https://space.bilibili.com/3546696818624992") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 800274a:	230f      	movs	r3, #15
 800274c:	9303      	str	r3, [sp, #12]
 800274e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002752:	9302      	str	r3, [sp, #8]
 8002754:	4b21      	ldr	r3, [pc, #132]	@ (80027dc <System_UI_Loop+0x280>)
 8002756:	9301      	str	r3, [sp, #4]
 8002758:	4b36      	ldr	r3, [pc, #216]	@ (8002834 <System_UI_Loop+0x2d8>)
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	4b1f      	ldr	r3, [pc, #124]	@ (80027dc <System_UI_Loop+0x280>)
 800275e:	4a35      	ldr	r2, [pc, #212]	@ (8002834 <System_UI_Loop+0x2d8>)
 8002760:	4935      	ldr	r1, [pc, #212]	@ (8002838 <System_UI_Loop+0x2dc>)
 8002762:	4820      	ldr	r0, [pc, #128]	@ (80027e4 <System_UI_Loop+0x288>)
 8002764:	f002 fdeb 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "Let's Visit in GITHUB!", (OLED_WIDTH - strlen("Let's Visit in GITHUB!") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Let's Visit in GITHUB!") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002768:	230f      	movs	r3, #15
 800276a:	9303      	str	r3, [sp, #12]
 800276c:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002770:	9302      	str	r3, [sp, #8]
 8002772:	4b1a      	ldr	r3, [pc, #104]	@ (80027dc <System_UI_Loop+0x280>)
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	f04f 439f 	mov.w	r3, #1333788672	@ 0x4f800000
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	4b17      	ldr	r3, [pc, #92]	@ (80027dc <System_UI_Loop+0x280>)
 800277e:	f04f 429f 	mov.w	r2, #1333788672	@ 0x4f800000
 8002782:	492e      	ldr	r1, [pc, #184]	@ (800283c <System_UI_Loop+0x2e0>)
 8002784:	4817      	ldr	r0, [pc, #92]	@ (80027e4 <System_UI_Loop+0x288>)
 8002786:	f002 fdda 	bl	800533e <OLED_MoveObject>

#pragma endregion 标题栏

#pragma region 游戏栏
        OLED_MoveObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 800278a:	230f      	movs	r3, #15
 800278c:	9303      	str	r3, [sp, #12]
 800278e:	2301      	movs	r3, #1
 8002790:	9302      	str	r3, [sp, #8]
 8002792:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	4b29      	ldr	r3, [pc, #164]	@ (8002840 <System_UI_Loop+0x2e4>)
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80027a0:	4a27      	ldr	r2, [pc, #156]	@ (8002840 <System_UI_Loop+0x2e4>)
 80027a2:	4928      	ldr	r1, [pc, #160]	@ (8002844 <System_UI_Loop+0x2e8>)
 80027a4:	4828      	ldr	r0, [pc, #160]	@ (8002848 <System_UI_Loop+0x2ec>)
 80027a6:	f002 fdca 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 80027aa:	230f      	movs	r3, #15
 80027ac:	9303      	str	r3, [sp, #12]
 80027ae:	2301      	movs	r3, #1
 80027b0:	9302      	str	r3, [sp, #8]
 80027b2:	4b26      	ldr	r3, [pc, #152]	@ (800284c <System_UI_Loop+0x2f0>)
 80027b4:	9301      	str	r3, [sp, #4]
 80027b6:	4b22      	ldr	r3, [pc, #136]	@ (8002840 <System_UI_Loop+0x2e4>)
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	4b24      	ldr	r3, [pc, #144]	@ (800284c <System_UI_Loop+0x2f0>)
 80027bc:	4a20      	ldr	r2, [pc, #128]	@ (8002840 <System_UI_Loop+0x2e4>)
 80027be:	4924      	ldr	r1, [pc, #144]	@ (8002850 <System_UI_Loop+0x2f4>)
 80027c0:	4821      	ldr	r0, [pc, #132]	@ (8002848 <System_UI_Loop+0x2ec>)
 80027c2:	f002 fdbc 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, TweenStyle);
 80027c6:	230f      	movs	r3, #15
 80027c8:	9303      	str	r3, [sp, #12]
 80027ca:	2301      	movs	r3, #1
 80027cc:	9302      	str	r3, [sp, #8]
 80027ce:	4b21      	ldr	r3, [pc, #132]	@ (8002854 <System_UI_Loop+0x2f8>)
 80027d0:	9301      	str	r3, [sp, #4]
 80027d2:	e041      	b.n	8002858 <System_UI_Loop+0x2fc>
 80027d4:	20000003 	.word	0x20000003
 80027d8:	42480000 	.word	0x42480000
 80027dc:	c1200000 	.word	0xc1200000
 80027e0:	0800b054 	.word	0x0800b054
 80027e4:	200032e4 	.word	0x200032e4
 80027e8:	0800b060 	.word	0x0800b060
 80027ec:	42300000 	.word	0x42300000
 80027f0:	0800b06c 	.word	0x0800b06c
 80027f4:	42600000 	.word	0x42600000
 80027f8:	0800b078 	.word	0x0800b078
 80027fc:	42940000 	.word	0x42940000
 8002800:	0800b088 	.word	0x0800b088
 8002804:	0800b094 	.word	0x0800b094
 8002808:	0800b0a0 	.word	0x0800b0a0
 800280c:	0800b0ac 	.word	0x0800b0ac
 8002810:	0800b0b8 	.word	0x0800b0b8
 8002814:	42880000 	.word	0x42880000
 8002818:	0800b0c8 	.word	0x0800b0c8
 800281c:	0800b0d4 	.word	0x0800b0d4
 8002820:	0800b0e0 	.word	0x0800b0e0
 8002824:	0800b0f4 	.word	0x0800b0f4
 8002828:	0800b100 	.word	0x0800b100
 800282c:	41d00000 	.word	0x41d00000
 8002830:	0800b120 	.word	0x0800b120
 8002834:	4f7fffff 	.word	0x4f7fffff
 8002838:	0800b134 	.word	0x0800b134
 800283c:	0800b160 	.word	0x0800b160
 8002840:	c2b40000 	.word	0xc2b40000
 8002844:	0800b178 	.word	0x0800b178
 8002848:	20001520 	.word	0x20001520
 800284c:	41e80000 	.word	0x41e80000
 8002850:	0800b180 	.word	0x0800b180
 8002854:	42280000 	.word	0x42280000
 8002858:	4ba3      	ldr	r3, [pc, #652]	@ (8002ae8 <System_UI_Loop+0x58c>)
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	4ba3      	ldr	r3, [pc, #652]	@ (8002aec <System_UI_Loop+0x590>)
 800285e:	4aa2      	ldr	r2, [pc, #648]	@ (8002ae8 <System_UI_Loop+0x58c>)
 8002860:	49a3      	ldr	r1, [pc, #652]	@ (8002af0 <System_UI_Loop+0x594>)
 8002862:	48a4      	ldr	r0, [pc, #656]	@ (8002af4 <System_UI_Loop+0x598>)
 8002864:	f002 fd6b 	bl	800533e <OLED_MoveObject>
#pragma endregion 游戏栏

#pragma region 工具栏
        OLED_MoveObject(&Tools_AnimationManager, "Calculator", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 8002868:	230f      	movs	r3, #15
 800286a:	9303      	str	r3, [sp, #12]
 800286c:	2301      	movs	r3, #1
 800286e:	9302      	str	r3, [sp, #8]
 8002870:	4ba1      	ldr	r3, [pc, #644]	@ (8002af8 <System_UI_Loop+0x59c>)
 8002872:	9301      	str	r3, [sp, #4]
 8002874:	4b9c      	ldr	r3, [pc, #624]	@ (8002ae8 <System_UI_Loop+0x58c>)
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800287c:	4a9a      	ldr	r2, [pc, #616]	@ (8002ae8 <System_UI_Loop+0x58c>)
 800287e:	499f      	ldr	r1, [pc, #636]	@ (8002afc <System_UI_Loop+0x5a0>)
 8002880:	489f      	ldr	r0, [pc, #636]	@ (8002b00 <System_UI_Loop+0x5a4>)
 8002882:	f002 fd5c 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&Tools_AnimationManager, "VideoPlayer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 8002886:	230f      	movs	r3, #15
 8002888:	9303      	str	r3, [sp, #12]
 800288a:	2301      	movs	r3, #1
 800288c:	9302      	str	r3, [sp, #8]
 800288e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002892:	9301      	str	r3, [sp, #4]
 8002894:	4b94      	ldr	r3, [pc, #592]	@ (8002ae8 <System_UI_Loop+0x58c>)
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	4b97      	ldr	r3, [pc, #604]	@ (8002af8 <System_UI_Loop+0x59c>)
 800289a:	4a93      	ldr	r2, [pc, #588]	@ (8002ae8 <System_UI_Loop+0x58c>)
 800289c:	4999      	ldr	r1, [pc, #612]	@ (8002b04 <System_UI_Loop+0x5a8>)
 800289e:	4898      	ldr	r0, [pc, #608]	@ (8002b00 <System_UI_Loop+0x5a4>)
 80028a0:	f002 fd4d 	bl	800533e <OLED_MoveObject>

#pragma endregion 工具栏

#pragma region 状态栏 //这里我想做成一个界面就好,不要选项
        OLED_MoveObject(&Status_AnimationManager, "RunningTime", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 80028a4:	230f      	movs	r3, #15
 80028a6:	9303      	str	r3, [sp, #12]
 80028a8:	2301      	movs	r3, #1
 80028aa:	9302      	str	r3, [sp, #8]
 80028ac:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80028b0:	9301      	str	r3, [sp, #4]
 80028b2:	4b8d      	ldr	r3, [pc, #564]	@ (8002ae8 <System_UI_Loop+0x58c>)
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80028ba:	4a8b      	ldr	r2, [pc, #556]	@ (8002ae8 <System_UI_Loop+0x58c>)
 80028bc:	4992      	ldr	r1, [pc, #584]	@ (8002b08 <System_UI_Loop+0x5ac>)
 80028be:	4893      	ldr	r0, [pc, #588]	@ (8002b0c <System_UI_Loop+0x5b0>)
 80028c0:	f002 fd3d 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&Status_AnimationManager, "Status", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 80028c4:	230f      	movs	r3, #15
 80028c6:	9303      	str	r3, [sp, #12]
 80028c8:	2301      	movs	r3, #1
 80028ca:	9302      	str	r3, [sp, #8]
 80028cc:	4b8a      	ldr	r3, [pc, #552]	@ (8002af8 <System_UI_Loop+0x59c>)
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	4b85      	ldr	r3, [pc, #532]	@ (8002ae8 <System_UI_Loop+0x58c>)
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	4b88      	ldr	r3, [pc, #544]	@ (8002af8 <System_UI_Loop+0x59c>)
 80028d6:	4a84      	ldr	r2, [pc, #528]	@ (8002ae8 <System_UI_Loop+0x58c>)
 80028d8:	498d      	ldr	r1, [pc, #564]	@ (8002b10 <System_UI_Loop+0x5b4>)
 80028da:	488c      	ldr	r0, [pc, #560]	@ (8002b0c <System_UI_Loop+0x5b0>)
 80028dc:	f002 fd2f 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&Status_AnimationManager, "UserManul", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 80028e0:	230f      	movs	r3, #15
 80028e2:	9303      	str	r3, [sp, #12]
 80028e4:	2301      	movs	r3, #1
 80028e6:	9302      	str	r3, [sp, #8]
 80028e8:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	4b7e      	ldr	r3, [pc, #504]	@ (8002ae8 <System_UI_Loop+0x58c>)
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80028f6:	4a7c      	ldr	r2, [pc, #496]	@ (8002ae8 <System_UI_Loop+0x58c>)
 80028f8:	4986      	ldr	r1, [pc, #536]	@ (8002b14 <System_UI_Loop+0x5b8>)
 80028fa:	4884      	ldr	r0, [pc, #528]	@ (8002b0c <System_UI_Loop+0x5b0>)
 80028fc:	f002 fd1f 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&Status_AnimationManager, "ExitMessage", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 8002900:	230f      	movs	r3, #15
 8002902:	9303      	str	r3, [sp, #12]
 8002904:	2301      	movs	r3, #1
 8002906:	9302      	str	r3, [sp, #8]
 8002908:	4b7b      	ldr	r3, [pc, #492]	@ (8002af8 <System_UI_Loop+0x59c>)
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	4b76      	ldr	r3, [pc, #472]	@ (8002ae8 <System_UI_Loop+0x58c>)
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	4b81      	ldr	r3, [pc, #516]	@ (8002b18 <System_UI_Loop+0x5bc>)
 8002912:	4a75      	ldr	r2, [pc, #468]	@ (8002ae8 <System_UI_Loop+0x58c>)
 8002914:	4981      	ldr	r1, [pc, #516]	@ (8002b1c <System_UI_Loop+0x5c0>)
 8002916:	487d      	ldr	r0, [pc, #500]	@ (8002b0c <System_UI_Loop+0x5b0>)
 8002918:	f002 fd11 	bl	800533e <OLED_MoveObject>

#pragma endregion 状态栏

#pragma region 设置栏
        OLED_MoveObject(&Settings_AnimationManager, "ShowFPS", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 800291c:	230f      	movs	r3, #15
 800291e:	9303      	str	r3, [sp, #12]
 8002920:	2301      	movs	r3, #1
 8002922:	9302      	str	r3, [sp, #8]
 8002924:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002928:	9301      	str	r3, [sp, #4]
 800292a:	4b6f      	ldr	r3, [pc, #444]	@ (8002ae8 <System_UI_Loop+0x58c>)
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002932:	4a6d      	ldr	r2, [pc, #436]	@ (8002ae8 <System_UI_Loop+0x58c>)
 8002934:	497a      	ldr	r1, [pc, #488]	@ (8002b20 <System_UI_Loop+0x5c4>)
 8002936:	487b      	ldr	r0, [pc, #492]	@ (8002b24 <System_UI_Loop+0x5c8>)
 8002938:	f002 fd01 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&Settings_AnimationManager, "Lightness", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 800293c:	230f      	movs	r3, #15
 800293e:	9303      	str	r3, [sp, #12]
 8002940:	2301      	movs	r3, #1
 8002942:	9302      	str	r3, [sp, #8]
 8002944:	4b6c      	ldr	r3, [pc, #432]	@ (8002af8 <System_UI_Loop+0x59c>)
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	4b67      	ldr	r3, [pc, #412]	@ (8002ae8 <System_UI_Loop+0x58c>)
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	4b6a      	ldr	r3, [pc, #424]	@ (8002af8 <System_UI_Loop+0x59c>)
 800294e:	4a66      	ldr	r2, [pc, #408]	@ (8002ae8 <System_UI_Loop+0x58c>)
 8002950:	4975      	ldr	r1, [pc, #468]	@ (8002b28 <System_UI_Loop+0x5cc>)
 8002952:	4874      	ldr	r0, [pc, #464]	@ (8002b24 <System_UI_Loop+0x5c8>)
 8002954:	f002 fcf3 	bl	800533e <OLED_MoveObject>
#pragma endregion 设置栏

#pragma region 关于栏
        OLED_MoveObject(&About_AnimationManager, "Developer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 8002958:	230f      	movs	r3, #15
 800295a:	9303      	str	r3, [sp, #12]
 800295c:	2301      	movs	r3, #1
 800295e:	9302      	str	r3, [sp, #8]
 8002960:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002964:	9301      	str	r3, [sp, #4]
 8002966:	4b60      	ldr	r3, [pc, #384]	@ (8002ae8 <System_UI_Loop+0x58c>)
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800296e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ae8 <System_UI_Loop+0x58c>)
 8002970:	496e      	ldr	r1, [pc, #440]	@ (8002b2c <System_UI_Loop+0x5d0>)
 8002972:	486f      	ldr	r0, [pc, #444]	@ (8002b30 <System_UI_Loop+0x5d4>)
 8002974:	f002 fce3 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&About_AnimationManager, "Github", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 8002978:	230f      	movs	r3, #15
 800297a:	9303      	str	r3, [sp, #12]
 800297c:	2301      	movs	r3, #1
 800297e:	9302      	str	r3, [sp, #8]
 8002980:	4b5d      	ldr	r3, [pc, #372]	@ (8002af8 <System_UI_Loop+0x59c>)
 8002982:	9301      	str	r3, [sp, #4]
 8002984:	4b58      	ldr	r3, [pc, #352]	@ (8002ae8 <System_UI_Loop+0x58c>)
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	4b5b      	ldr	r3, [pc, #364]	@ (8002af8 <System_UI_Loop+0x59c>)
 800298a:	4a57      	ldr	r2, [pc, #348]	@ (8002ae8 <System_UI_Loop+0x58c>)
 800298c:	4969      	ldr	r1, [pc, #420]	@ (8002b34 <System_UI_Loop+0x5d8>)
 800298e:	4868      	ldr	r0, [pc, #416]	@ (8002b30 <System_UI_Loop+0x5d4>)
 8002990:	f002 fcd5 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&About_AnimationManager, "Email", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, TweenStyle);
 8002994:	230f      	movs	r3, #15
 8002996:	9303      	str	r3, [sp, #12]
 8002998:	2301      	movs	r3, #1
 800299a:	9302      	str	r3, [sp, #8]
 800299c:	4b53      	ldr	r3, [pc, #332]	@ (8002aec <System_UI_Loop+0x590>)
 800299e:	9301      	str	r3, [sp, #4]
 80029a0:	4b51      	ldr	r3, [pc, #324]	@ (8002ae8 <System_UI_Loop+0x58c>)
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	4b51      	ldr	r3, [pc, #324]	@ (8002aec <System_UI_Loop+0x590>)
 80029a6:	4a50      	ldr	r2, [pc, #320]	@ (8002ae8 <System_UI_Loop+0x58c>)
 80029a8:	4963      	ldr	r1, [pc, #396]	@ (8002b38 <System_UI_Loop+0x5dc>)
 80029aa:	4861      	ldr	r0, [pc, #388]	@ (8002b30 <System_UI_Loop+0x5d4>)
 80029ac:	f002 fcc7 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&About_AnimationManager, "Donate", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, 1, TweenStyle);
 80029b0:	230f      	movs	r3, #15
 80029b2:	9303      	str	r3, [sp, #12]
 80029b4:	2301      	movs	r3, #1
 80029b6:	9302      	str	r3, [sp, #8]
 80029b8:	4b57      	ldr	r3, [pc, #348]	@ (8002b18 <System_UI_Loop+0x5bc>)
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	4b4a      	ldr	r3, [pc, #296]	@ (8002ae8 <System_UI_Loop+0x58c>)
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	4b55      	ldr	r3, [pc, #340]	@ (8002b18 <System_UI_Loop+0x5bc>)
 80029c2:	4a49      	ldr	r2, [pc, #292]	@ (8002ae8 <System_UI_Loop+0x58c>)
 80029c4:	495d      	ldr	r1, [pc, #372]	@ (8002b3c <System_UI_Loop+0x5e0>)
 80029c6:	485a      	ldr	r0, [pc, #360]	@ (8002b30 <System_UI_Loop+0x5d4>)
 80029c8:	f002 fcb9 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&About_AnimationManager, "More", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, 1, TweenStyle);
 80029cc:	230f      	movs	r3, #15
 80029ce:	9303      	str	r3, [sp, #12]
 80029d0:	2301      	movs	r3, #1
 80029d2:	9302      	str	r3, [sp, #8]
 80029d4:	4b5a      	ldr	r3, [pc, #360]	@ (8002b40 <System_UI_Loop+0x5e4>)
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	4b43      	ldr	r3, [pc, #268]	@ (8002ae8 <System_UI_Loop+0x58c>)
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	4b58      	ldr	r3, [pc, #352]	@ (8002b40 <System_UI_Loop+0x5e4>)
 80029de:	4a42      	ldr	r2, [pc, #264]	@ (8002ae8 <System_UI_Loop+0x58c>)
 80029e0:	4958      	ldr	r1, [pc, #352]	@ (8002b44 <System_UI_Loop+0x5e8>)
 80029e2:	4853      	ldr	r0, [pc, #332]	@ (8002b30 <System_UI_Loop+0x5d4>)
 80029e4:	f002 fcab 	bl	800533e <OLED_MoveObject>
#pragma endregion 关于栏

#pragma region 主菜单动画
        OLED_MoveObject(&g_AnimationManager, "TitleBGScale", 0, 8, strlen("Epicful Games") * 6 + 3, 8, StartTweenTime, EASE_INOUT_CUBIC);
 80029e8:	2306      	movs	r3, #6
 80029ea:	9303      	str	r3, [sp, #12]
 80029ec:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80029f0:	9302      	str	r3, [sp, #8]
 80029f2:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80029f6:	9301      	str	r3, [sp, #4]
 80029f8:	4b53      	ldr	r3, [pc, #332]	@ (8002b48 <System_UI_Loop+0x5ec>)
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	4951      	ldr	r1, [pc, #324]	@ (8002b4c <System_UI_Loop+0x5f0>)
 8002a06:	483b      	ldr	r0, [pc, #236]	@ (8002af4 <System_UI_Loop+0x598>)
 8002a08:	f002 fc99 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "Cursor", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * menuSelection, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * menuSelection, StartTweenTime, TweenStyle);
 8002a0c:	4b50      	ldr	r3, [pc, #320]	@ (8002b50 <System_UI_Loop+0x5f4>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	4613      	mov	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3303      	adds	r3, #3
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fd fc60 	bl	80002e4 <__aeabi_i2f>
 8002a24:	4604      	mov	r4, r0
 8002a26:	4b4a      	ldr	r3, [pc, #296]	@ (8002b50 <System_UI_Loop+0x5f4>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	3303      	adds	r3, #3
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fd fc53 	bl	80002e4 <__aeabi_i2f>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	220f      	movs	r2, #15
 8002a42:	9203      	str	r2, [sp, #12]
 8002a44:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8002a48:	9202      	str	r2, [sp, #8]
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	4623      	mov	r3, r4
 8002a54:	4a24      	ldr	r2, [pc, #144]	@ (8002ae8 <System_UI_Loop+0x58c>)
 8002a56:	493f      	ldr	r1, [pc, #252]	@ (8002b54 <System_UI_Loop+0x5f8>)
 8002a58:	4826      	ldr	r0, [pc, #152]	@ (8002af4 <System_UI_Loop+0x598>)
 8002a5a:	f002 fc70 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "CursorScale", 0, 10, strlen("Games") * 6 + 3, 10, StartTweenTime, TweenStyle);
 8002a5e:	230f      	movs	r3, #15
 8002a60:	9303      	str	r3, [sp, #12]
 8002a62:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002a66:	9302      	str	r3, [sp, #8]
 8002a68:	4b3b      	ldr	r3, [pc, #236]	@ (8002b58 <System_UI_Loop+0x5fc>)
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b5c <System_UI_Loop+0x600>)
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	4b39      	ldr	r3, [pc, #228]	@ (8002b58 <System_UI_Loop+0x5fc>)
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	493a      	ldr	r1, [pc, #232]	@ (8002b60 <System_UI_Loop+0x604>)
 8002a78:	481e      	ldr	r0, [pc, #120]	@ (8002af4 <System_UI_Loop+0x598>)
 8002a7a:	f002 fc60 	bl	800533e <OLED_MoveObject>
        OLED_MoveObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, StartTweenTime, TweenStyle);
 8002a7e:	230f      	movs	r3, #15
 8002a80:	9303      	str	r3, [sp, #12]
 8002a82:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002a86:	9302      	str	r3, [sp, #8]
 8002a88:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002a8c:	9301      	str	r3, [sp, #4]
 8002a8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002a98:	4a13      	ldr	r2, [pc, #76]	@ (8002ae8 <System_UI_Loop+0x58c>)
 8002a9a:	4932      	ldr	r1, [pc, #200]	@ (8002b64 <System_UI_Loop+0x608>)
 8002a9c:	4832      	ldr	r0, [pc, #200]	@ (8002b68 <System_UI_Loop+0x60c>)
 8002a9e:	f002 fc4e 	bl	800533e <OLED_MoveObject>
        HAL_Delay(100);
 8002aa2:	2064      	movs	r0, #100	@ 0x64
 8002aa4:	f003 f9b0 	bl	8005e08 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, StartTweenTime, TweenStyle);
 8002aa8:	230f      	movs	r3, #15
 8002aaa:	9303      	str	r3, [sp, #12]
 8002aac:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002ab0:	9302      	str	r3, [sp, #8]
 8002ab2:	4b11      	ldr	r3, [pc, #68]	@ (8002af8 <System_UI_Loop+0x59c>)
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	4b0e      	ldr	r3, [pc, #56]	@ (8002af8 <System_UI_Loop+0x59c>)
 8002abe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae8 <System_UI_Loop+0x58c>)
 8002ac0:	492a      	ldr	r1, [pc, #168]	@ (8002b6c <System_UI_Loop+0x610>)
 8002ac2:	4829      	ldr	r0, [pc, #164]	@ (8002b68 <System_UI_Loop+0x60c>)
 8002ac4:	f002 fc3b 	bl	800533e <OLED_MoveObject>
        HAL_Delay(100);
 8002ac8:	2064      	movs	r0, #100	@ 0x64
 8002aca:	f003 f99d 	bl	8005e08 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, StartTweenTime, TweenStyle);
 8002ace:	230f      	movs	r3, #15
 8002ad0:	9303      	str	r3, [sp, #12]
 8002ad2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002ad6:	9302      	str	r3, [sp, #8]
 8002ad8:	4b04      	ldr	r3, [pc, #16]	@ (8002aec <System_UI_Loop+0x590>)
 8002ada:	9301      	str	r3, [sp, #4]
 8002adc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	4b02      	ldr	r3, [pc, #8]	@ (8002aec <System_UI_Loop+0x590>)
 8002ae4:	4a00      	ldr	r2, [pc, #0]	@ (8002ae8 <System_UI_Loop+0x58c>)
 8002ae6:	e043      	b.n	8002b70 <System_UI_Loop+0x614>
 8002ae8:	c2b40000 	.word	0xc2b40000
 8002aec:	42280000 	.word	0x42280000
 8002af0:	0800b188 	.word	0x0800b188
 8002af4:	200038d8 	.word	0x200038d8
 8002af8:	41e80000 	.word	0x41e80000
 8002afc:	0800b194 	.word	0x0800b194
 8002b00:	20001b14 	.word	0x20001b14
 8002b04:	0800b1a0 	.word	0x0800b1a0
 8002b08:	0800b1ac 	.word	0x0800b1ac
 8002b0c:	20002cf0 	.word	0x20002cf0
 8002b10:	0800b1b8 	.word	0x0800b1b8
 8002b14:	0800b1c0 	.word	0x0800b1c0
 8002b18:	425c0000 	.word	0x425c0000
 8002b1c:	0800b1cc 	.word	0x0800b1cc
 8002b20:	0800b1d8 	.word	0x0800b1d8
 8002b24:	20002108 	.word	0x20002108
 8002b28:	0800b1e0 	.word	0x0800b1e0
 8002b2c:	0800b1ec 	.word	0x0800b1ec
 8002b30:	200026fc 	.word	0x200026fc
 8002b34:	0800b1f8 	.word	0x0800b1f8
 8002b38:	0800b200 	.word	0x0800b200
 8002b3c:	0800b208 	.word	0x0800b208
 8002b40:	42880000 	.word	0x42880000
 8002b44:	0800b210 	.word	0x0800b210
 8002b48:	42a20000 	.word	0x42a20000
 8002b4c:	0800b218 	.word	0x0800b218
 8002b50:	20000002 	.word	0x20000002
 8002b54:	0800b228 	.word	0x0800b228
 8002b58:	41200000 	.word	0x41200000
 8002b5c:	42040000 	.word	0x42040000
 8002b60:	0800b230 	.word	0x0800b230
 8002b64:	0800b23c 	.word	0x0800b23c
 8002b68:	20000f2c 	.word	0x20000f2c
 8002b6c:	0800b248 	.word	0x0800b248
 8002b70:	4980      	ldr	r1, [pc, #512]	@ (8002d74 <System_UI_Loop+0x818>)
 8002b72:	4881      	ldr	r0, [pc, #516]	@ (8002d78 <System_UI_Loop+0x81c>)
 8002b74:	f002 fbe3 	bl	800533e <OLED_MoveObject>
        HAL_Delay(100);
 8002b78:	2064      	movs	r0, #100	@ 0x64
 8002b7a:	f003 f945 	bl	8005e08 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, StartTweenTime, TweenStyle);
 8002b7e:	230f      	movs	r3, #15
 8002b80:	9303      	str	r3, [sp, #12]
 8002b82:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002b86:	9302      	str	r3, [sp, #8]
 8002b88:	4b7c      	ldr	r3, [pc, #496]	@ (8002d7c <System_UI_Loop+0x820>)
 8002b8a:	9301      	str	r3, [sp, #4]
 8002b8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	4b7a      	ldr	r3, [pc, #488]	@ (8002d7c <System_UI_Loop+0x820>)
 8002b94:	4a7a      	ldr	r2, [pc, #488]	@ (8002d80 <System_UI_Loop+0x824>)
 8002b96:	497b      	ldr	r1, [pc, #492]	@ (8002d84 <System_UI_Loop+0x828>)
 8002b98:	4877      	ldr	r0, [pc, #476]	@ (8002d78 <System_UI_Loop+0x81c>)
 8002b9a:	f002 fbd0 	bl	800533e <OLED_MoveObject>
        HAL_Delay(100);
 8002b9e:	2064      	movs	r0, #100	@ 0x64
 8002ba0:	f003 f932 	bl	8005e08 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, StartTweenTime, TweenStyle);
 8002ba4:	230f      	movs	r3, #15
 8002ba6:	9303      	str	r3, [sp, #12]
 8002ba8:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002bac:	9302      	str	r3, [sp, #8]
 8002bae:	4b76      	ldr	r3, [pc, #472]	@ (8002d88 <System_UI_Loop+0x82c>)
 8002bb0:	9301      	str	r3, [sp, #4]
 8002bb2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	4b73      	ldr	r3, [pc, #460]	@ (8002d88 <System_UI_Loop+0x82c>)
 8002bba:	4a71      	ldr	r2, [pc, #452]	@ (8002d80 <System_UI_Loop+0x824>)
 8002bbc:	4973      	ldr	r1, [pc, #460]	@ (8002d8c <System_UI_Loop+0x830>)
 8002bbe:	486e      	ldr	r0, [pc, #440]	@ (8002d78 <System_UI_Loop+0x81c>)
 8002bc0:	f002 fbbd 	bl	800533e <OLED_MoveObject>
#pragma endregion 主菜单动画

        preMenuSelection = menuSelection;
 8002bc4:	4b72      	ldr	r3, [pc, #456]	@ (8002d90 <System_UI_Loop+0x834>)
 8002bc6:	781a      	ldrb	r2, [r3, #0]
 8002bc8:	4b72      	ldr	r3, [pc, #456]	@ (8002d94 <System_UI_Loop+0x838>)
 8002bca:	701a      	strb	r2, [r3, #0]
        isFirstRun = false;
 8002bcc:	4b72      	ldr	r3, [pc, #456]	@ (8002d98 <System_UI_Loop+0x83c>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
        OLED_UpdateDisplayVSync();
 8002bd2:	f7ff f839 	bl	8001c48 <OLED_UpdateDisplayVSync>
    }

#pragma region pager //翻页的函数

    if (menuRank == 1)
 8002bd6:	4b71      	ldr	r3, [pc, #452]	@ (8002d9c <System_UI_Loop+0x840>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d178      	bne.n	8002cd0 <System_UI_Loop+0x774>
    {
        OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 200, EASE_IN_CIRC);
 8002bde:	4b6c      	ldr	r3, [pc, #432]	@ (8002d90 <System_UI_Loop+0x834>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	f1c3 0202 	rsb	r2, r3, #2
 8002be6:	4613      	mov	r3, r2
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	4413      	add	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	3303      	adds	r3, #3
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd fb76 	bl	80002e4 <__aeabi_i2f>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	220a      	movs	r2, #10
 8002bfc:	9201      	str	r2, [sp, #4]
 8002bfe:	22c8      	movs	r2, #200	@ 0xc8
 8002c00:	9200      	str	r2, [sp, #0]
 8002c02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c06:	4966      	ldr	r1, [pc, #408]	@ (8002da0 <System_UI_Loop+0x844>)
 8002c08:	485b      	ldr	r0, [pc, #364]	@ (8002d78 <System_UI_Loop+0x81c>)
 8002c0a:	f002 fc4f 	bl	80054ac <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 200, EASE_IN_CIRC);
 8002c0e:	4b60      	ldr	r3, [pc, #384]	@ (8002d90 <System_UI_Loop+0x834>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	f1c3 0203 	rsb	r2, r3, #3
 8002c16:	4613      	mov	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	3303      	adds	r3, #3
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fd fb5e 	bl	80002e4 <__aeabi_i2f>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	220a      	movs	r2, #10
 8002c2c:	9201      	str	r2, [sp, #4]
 8002c2e:	22c8      	movs	r2, #200	@ 0xc8
 8002c30:	9200      	str	r2, [sp, #0]
 8002c32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c36:	495b      	ldr	r1, [pc, #364]	@ (8002da4 <System_UI_Loop+0x848>)
 8002c38:	484f      	ldr	r0, [pc, #316]	@ (8002d78 <System_UI_Loop+0x81c>)
 8002c3a:	f002 fc37 	bl	80054ac <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 200, EASE_IN_CIRC);
 8002c3e:	4b54      	ldr	r3, [pc, #336]	@ (8002d90 <System_UI_Loop+0x834>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	f1c3 0204 	rsb	r2, r3, #4
 8002c46:	4613      	mov	r3, r2
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	3303      	adds	r3, #3
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fd fb46 	bl	80002e4 <__aeabi_i2f>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	220a      	movs	r2, #10
 8002c5c:	9201      	str	r2, [sp, #4]
 8002c5e:	22c8      	movs	r2, #200	@ 0xc8
 8002c60:	9200      	str	r2, [sp, #0]
 8002c62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c66:	4943      	ldr	r1, [pc, #268]	@ (8002d74 <System_UI_Loop+0x818>)
 8002c68:	4843      	ldr	r0, [pc, #268]	@ (8002d78 <System_UI_Loop+0x81c>)
 8002c6a:	f002 fc1f 	bl	80054ac <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), 200, EASE_IN_CIRC);
 8002c6e:	4b48      	ldr	r3, [pc, #288]	@ (8002d90 <System_UI_Loop+0x834>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	f1c3 0205 	rsb	r2, r3, #5
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	3303      	adds	r3, #3
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fd fb2e 	bl	80002e4 <__aeabi_i2f>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	220a      	movs	r2, #10
 8002c8c:	9201      	str	r2, [sp, #4]
 8002c8e:	22c8      	movs	r2, #200	@ 0xc8
 8002c90:	9200      	str	r2, [sp, #0]
 8002c92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c96:	493b      	ldr	r1, [pc, #236]	@ (8002d84 <System_UI_Loop+0x828>)
 8002c98:	4837      	ldr	r0, [pc, #220]	@ (8002d78 <System_UI_Loop+0x81c>)
 8002c9a:	f002 fc07 	bl	80054ac <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), 200, EASE_IN_CIRC);
 8002c9e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d90 <System_UI_Loop+0x834>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	f1c3 0206 	rsb	r2, r3, #6
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	3303      	adds	r3, #3
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fb16 	bl	80002e4 <__aeabi_i2f>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	220a      	movs	r2, #10
 8002cbc:	9201      	str	r2, [sp, #4]
 8002cbe:	22c8      	movs	r2, #200	@ 0xc8
 8002cc0:	9200      	str	r2, [sp, #0]
 8002cc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002cc6:	4931      	ldr	r1, [pc, #196]	@ (8002d8c <System_UI_Loop+0x830>)
 8002cc8:	482b      	ldr	r0, [pc, #172]	@ (8002d78 <System_UI_Loop+0x81c>)
 8002cca:	f002 fbef 	bl	80054ac <OLED_DoTweenObject>
 8002cce:	e08a      	b.n	8002de6 <System_UI_Loop+0x88a>
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_GAMES)
 8002cd0:	4b32      	ldr	r3, [pc, #200]	@ (8002d9c <System_UI_Loop+0x840>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	f040 8086 	bne.w	8002de6 <System_UI_Loop+0x88a>
 8002cda:	4b33      	ldr	r3, [pc, #204]	@ (8002da8 <System_UI_Loop+0x84c>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b05      	cmp	r3, #5
 8002ce0:	d16e      	bne.n	8002dc0 <System_UI_Loop+0x864>
    {
        OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 200, EASE_IN_CIRC);
 8002ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8002d90 <System_UI_Loop+0x834>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	f1c3 0202 	rsb	r2, r3, #2
 8002cea:	4613      	mov	r3, r2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4413      	add	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3303      	adds	r3, #3
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd faf4 	bl	80002e4 <__aeabi_i2f>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	220a      	movs	r2, #10
 8002d00:	9201      	str	r2, [sp, #4]
 8002d02:	22c8      	movs	r2, #200	@ 0xc8
 8002d04:	9200      	str	r2, [sp, #0]
 8002d06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d0a:	4928      	ldr	r1, [pc, #160]	@ (8002dac <System_UI_Loop+0x850>)
 8002d0c:	4828      	ldr	r0, [pc, #160]	@ (8002db0 <System_UI_Loop+0x854>)
 8002d0e:	f002 fbcd 	bl	80054ac <OLED_DoTweenObject>
        OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 200, EASE_IN_CIRC);
 8002d12:	4b1f      	ldr	r3, [pc, #124]	@ (8002d90 <System_UI_Loop+0x834>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	f1c3 0203 	rsb	r2, r3, #3
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	3303      	adds	r3, #3
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fd fadc 	bl	80002e4 <__aeabi_i2f>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	220a      	movs	r2, #10
 8002d30:	9201      	str	r2, [sp, #4]
 8002d32:	22c8      	movs	r2, #200	@ 0xc8
 8002d34:	9200      	str	r2, [sp, #0]
 8002d36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d3a:	491e      	ldr	r1, [pc, #120]	@ (8002db4 <System_UI_Loop+0x858>)
 8002d3c:	481c      	ldr	r0, [pc, #112]	@ (8002db0 <System_UI_Loop+0x854>)
 8002d3e:	f002 fbb5 	bl	80054ac <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 200, EASE_IN_CIRC);
 8002d42:	4b13      	ldr	r3, [pc, #76]	@ (8002d90 <System_UI_Loop+0x834>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	f1c3 0204 	rsb	r2, r3, #4
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	3303      	adds	r3, #3
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fd fac4 	bl	80002e4 <__aeabi_i2f>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	220a      	movs	r2, #10
 8002d60:	9201      	str	r2, [sp, #4]
 8002d62:	22c8      	movs	r2, #200	@ 0xc8
 8002d64:	9200      	str	r2, [sp, #0]
 8002d66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d6a:	4913      	ldr	r1, [pc, #76]	@ (8002db8 <System_UI_Loop+0x85c>)
 8002d6c:	4813      	ldr	r0, [pc, #76]	@ (8002dbc <System_UI_Loop+0x860>)
 8002d6e:	f002 fb9d 	bl	80054ac <OLED_DoTweenObject>
 8002d72:	e038      	b.n	8002de6 <System_UI_Loop+0x88a>
 8002d74:	0800b254 	.word	0x0800b254
 8002d78:	20000f2c 	.word	0x20000f2c
 8002d7c:	425c0000 	.word	0x425c0000
 8002d80:	c2b40000 	.word	0xc2b40000
 8002d84:	0800b264 	.word	0x0800b264
 8002d88:	42880000 	.word	0x42880000
 8002d8c:	0800b274 	.word	0x0800b274
 8002d90:	20000002 	.word	0x20000002
 8002d94:	20000b1a 	.word	0x20000b1a
 8002d98:	20000003 	.word	0x20000003
 8002d9c:	20000001 	.word	0x20000001
 8002da0:	0800b23c 	.word	0x0800b23c
 8002da4:	0800b248 	.word	0x0800b248
 8002da8:	20000b19 	.word	0x20000b19
 8002dac:	0800b178 	.word	0x0800b178
 8002db0:	20001520 	.word	0x20001520
 8002db4:	0800b180 	.word	0x0800b180
 8002db8:	0800b188 	.word	0x0800b188
 8002dbc:	200038d8 	.word	0x200038d8
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_TOOLS)
 8002dc0:	4bb6      	ldr	r3, [pc, #728]	@ (800309c <System_UI_Loop+0xb40>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d10e      	bne.n	8002de6 <System_UI_Loop+0x88a>
 8002dc8:	4bb5      	ldr	r3, [pc, #724]	@ (80030a0 <System_UI_Loop+0xb44>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d00a      	beq.n	8002de6 <System_UI_Loop+0x88a>
    {
        
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_SETTINGS)
 8002dd0:	4bb2      	ldr	r3, [pc, #712]	@ (800309c <System_UI_Loop+0xb40>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d106      	bne.n	8002de6 <System_UI_Loop+0x88a>
 8002dd8:	4bb1      	ldr	r3, [pc, #708]	@ (80030a0 <System_UI_Loop+0xb44>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d002      	beq.n	8002de6 <System_UI_Loop+0x88a>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_ABOUT)
 8002de0:	4bae      	ldr	r3, [pc, #696]	@ (800309c <System_UI_Loop+0xb40>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b02      	cmp	r3, #2

#pragma endregion pager

#pragma region DRAWER //画出你的UI

    OLED_GetObjectPosition(&Menu_AnimationManager, "SettingsButton", &x, &y);
 8002de6:	f107 0308 	add.w	r3, r7, #8
 8002dea:	f107 020c 	add.w	r2, r7, #12
 8002dee:	49ad      	ldr	r1, [pc, #692]	@ (80030a4 <System_UI_Loop+0xb48>)
 8002df0:	48ad      	ldr	r0, [pc, #692]	@ (80030a8 <System_UI_Loop+0xb4c>)
 8002df2:	f002 fa80 	bl	80052f6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Settings");
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7fd fca3 	bl	8000744 <__aeabi_f2iz>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	b21c      	sxth	r4, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fd fc9d 	bl	8000744 <__aeabi_f2iz>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	b21b      	sxth	r3, r3
 8002e0e:	4aa7      	ldr	r2, [pc, #668]	@ (80030ac <System_UI_Loop+0xb50>)
 8002e10:	4619      	mov	r1, r3
 8002e12:	4620      	mov	r0, r4
 8002e14:	f7ff fb04 	bl	8002420 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "StatusButton", &x, &y);
 8002e18:	f107 0308 	add.w	r3, r7, #8
 8002e1c:	f107 020c 	add.w	r2, r7, #12
 8002e20:	49a3      	ldr	r1, [pc, #652]	@ (80030b0 <System_UI_Loop+0xb54>)
 8002e22:	48a1      	ldr	r0, [pc, #644]	@ (80030a8 <System_UI_Loop+0xb4c>)
 8002e24:	f002 fa67 	bl	80052f6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Status");
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fd fc8a 	bl	8000744 <__aeabi_f2iz>
 8002e30:	4603      	mov	r3, r0
 8002e32:	b21c      	sxth	r4, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fd fc84 	bl	8000744 <__aeabi_f2iz>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	b21b      	sxth	r3, r3
 8002e40:	4a9c      	ldr	r2, [pc, #624]	@ (80030b4 <System_UI_Loop+0xb58>)
 8002e42:	4619      	mov	r1, r3
 8002e44:	4620      	mov	r0, r4
 8002e46:	f7ff faeb 	bl	8002420 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "GamesButton", &x, &y);
 8002e4a:	f107 0308 	add.w	r3, r7, #8
 8002e4e:	f107 020c 	add.w	r2, r7, #12
 8002e52:	4999      	ldr	r1, [pc, #612]	@ (80030b8 <System_UI_Loop+0xb5c>)
 8002e54:	4894      	ldr	r0, [pc, #592]	@ (80030a8 <System_UI_Loop+0xb4c>)
 8002e56:	f002 fa4e 	bl	80052f6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Games");
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fd fc71 	bl	8000744 <__aeabi_f2iz>
 8002e62:	4603      	mov	r3, r0
 8002e64:	b21c      	sxth	r4, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fd fc6b 	bl	8000744 <__aeabi_f2iz>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	b21b      	sxth	r3, r3
 8002e72:	4a92      	ldr	r2, [pc, #584]	@ (80030bc <System_UI_Loop+0xb60>)
 8002e74:	4619      	mov	r1, r3
 8002e76:	4620      	mov	r0, r4
 8002e78:	f7ff fad2 	bl	8002420 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "AboutButton", &x, &y);
 8002e7c:	f107 0308 	add.w	r3, r7, #8
 8002e80:	f107 020c 	add.w	r2, r7, #12
 8002e84:	498e      	ldr	r1, [pc, #568]	@ (80030c0 <System_UI_Loop+0xb64>)
 8002e86:	4888      	ldr	r0, [pc, #544]	@ (80030a8 <System_UI_Loop+0xb4c>)
 8002e88:	f002 fa35 	bl	80052f6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "About");
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd fc58 	bl	8000744 <__aeabi_f2iz>
 8002e94:	4603      	mov	r3, r0
 8002e96:	b21c      	sxth	r4, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd fc52 	bl	8000744 <__aeabi_f2iz>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	b21b      	sxth	r3, r3
 8002ea4:	4a87      	ldr	r2, [pc, #540]	@ (80030c4 <System_UI_Loop+0xb68>)
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f7ff fab9 	bl	8002420 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "ToolsButton", &x, &y);
 8002eae:	f107 0308 	add.w	r3, r7, #8
 8002eb2:	f107 020c 	add.w	r2, r7, #12
 8002eb6:	4984      	ldr	r1, [pc, #528]	@ (80030c8 <System_UI_Loop+0xb6c>)
 8002eb8:	487b      	ldr	r0, [pc, #492]	@ (80030a8 <System_UI_Loop+0xb4c>)
 8002eba:	f002 fa1c 	bl	80052f6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Tools");
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fd fc3f 	bl	8000744 <__aeabi_f2iz>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	b21c      	sxth	r4, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fd fc39 	bl	8000744 <__aeabi_f2iz>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	b21b      	sxth	r3, r3
 8002ed6:	4a7d      	ldr	r2, [pc, #500]	@ (80030cc <System_UI_Loop+0xb70>)
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4620      	mov	r0, r4
 8002edc:	f7ff faa0 	bl	8002420 <OLED_DisplayString>
    OLED_GetObjectPosition(&Games_AnimationManager, "Snake", &x, &y);
 8002ee0:	f107 0308 	add.w	r3, r7, #8
 8002ee4:	f107 020c 	add.w	r2, r7, #12
 8002ee8:	4979      	ldr	r1, [pc, #484]	@ (80030d0 <System_UI_Loop+0xb74>)
 8002eea:	487a      	ldr	r0, [pc, #488]	@ (80030d4 <System_UI_Loop+0xb78>)
 8002eec:	f002 fa03 	bl	80052f6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Snake");
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fd fc26 	bl	8000744 <__aeabi_f2iz>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	b21c      	sxth	r4, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd fc20 	bl	8000744 <__aeabi_f2iz>
 8002f04:	4603      	mov	r3, r0
 8002f06:	b21b      	sxth	r3, r3
 8002f08:	4a71      	ldr	r2, [pc, #452]	@ (80030d0 <System_UI_Loop+0xb74>)
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	f7ff fa87 	bl	8002420 <OLED_DisplayString>
    OLED_GetObjectPosition(&Games_AnimationManager, "2048", &x, &y);
 8002f12:	f107 0308 	add.w	r3, r7, #8
 8002f16:	f107 020c 	add.w	r2, r7, #12
 8002f1a:	496f      	ldr	r1, [pc, #444]	@ (80030d8 <System_UI_Loop+0xb7c>)
 8002f1c:	486d      	ldr	r0, [pc, #436]	@ (80030d4 <System_UI_Loop+0xb78>)
 8002f1e:	f002 f9ea 	bl	80052f6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "2048");
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fd fc0d 	bl	8000744 <__aeabi_f2iz>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	b21c      	sxth	r4, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fd fc07 	bl	8000744 <__aeabi_f2iz>
 8002f36:	4603      	mov	r3, r0
 8002f38:	b21b      	sxth	r3, r3
 8002f3a:	4a67      	ldr	r2, [pc, #412]	@ (80030d8 <System_UI_Loop+0xb7c>)
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4620      	mov	r0, r4
 8002f40:	f7ff fa6e 	bl	8002420 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_AnimationManager, "BackButton", &x, &y);
 8002f44:	f107 0308 	add.w	r3, r7, #8
 8002f48:	f107 020c 	add.w	r2, r7, #12
 8002f4c:	4963      	ldr	r1, [pc, #396]	@ (80030dc <System_UI_Loop+0xb80>)
 8002f4e:	4864      	ldr	r0, [pc, #400]	@ (80030e0 <System_UI_Loop+0xb84>)
 8002f50:	f002 f9d1 	bl	80052f6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Back");
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fd fbf4 	bl	8000744 <__aeabi_f2iz>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	b21c      	sxth	r4, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fd fbee 	bl	8000744 <__aeabi_f2iz>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	b21b      	sxth	r3, r3
 8002f6c:	4a5d      	ldr	r2, [pc, #372]	@ (80030e4 <System_UI_Loop+0xb88>)
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4620      	mov	r0, r4
 8002f72:	f7ff fa55 	bl	8002420 <OLED_DisplayString>

    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleGames", &x, &y);
 8002f76:	f107 0308 	add.w	r3, r7, #8
 8002f7a:	f107 020c 	add.w	r2, r7, #12
 8002f7e:	495a      	ldr	r1, [pc, #360]	@ (80030e8 <System_UI_Loop+0xb8c>)
 8002f80:	485a      	ldr	r0, [pc, #360]	@ (80030ec <System_UI_Loop+0xb90>)
 8002f82:	f002 f9b8 	bl	80052f6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Epicful Games");
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fd fbdb 	bl	8000744 <__aeabi_f2iz>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	b21c      	sxth	r4, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fd fbd5 	bl	8000744 <__aeabi_f2iz>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	b21b      	sxth	r3, r3
 8002f9e:	4a54      	ldr	r2, [pc, #336]	@ (80030f0 <System_UI_Loop+0xb94>)
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	f7ff fa3c 	bl	8002420 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleTools", &x, &y);
 8002fa8:	f107 0308 	add.w	r3, r7, #8
 8002fac:	f107 020c 	add.w	r2, r7, #12
 8002fb0:	4950      	ldr	r1, [pc, #320]	@ (80030f4 <System_UI_Loop+0xb98>)
 8002fb2:	484e      	ldr	r0, [pc, #312]	@ (80030ec <System_UI_Loop+0xb90>)
 8002fb4:	f002 f99f 	bl	80052f6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Tools For You");
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd fbc2 	bl	8000744 <__aeabi_f2iz>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	b21c      	sxth	r4, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fd fbbc 	bl	8000744 <__aeabi_f2iz>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	b21b      	sxth	r3, r3
 8002fd0:	4a49      	ldr	r2, [pc, #292]	@ (80030f8 <System_UI_Loop+0xb9c>)
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	f7ff fa23 	bl	8002420 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleStatus", &x, &y);
 8002fda:	f107 0308 	add.w	r3, r7, #8
 8002fde:	f107 020c 	add.w	r2, r7, #12
 8002fe2:	4946      	ldr	r1, [pc, #280]	@ (80030fc <System_UI_Loop+0xba0>)
 8002fe4:	4841      	ldr	r0, [pc, #260]	@ (80030ec <System_UI_Loop+0xb90>)
 8002fe6:	f002 f986 	bl	80052f6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Machine States");
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fd fba9 	bl	8000744 <__aeabi_f2iz>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	b21c      	sxth	r4, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fd fba3 	bl	8000744 <__aeabi_f2iz>
 8002ffe:	4603      	mov	r3, r0
 8003000:	b21b      	sxth	r3, r3
 8003002:	4a3f      	ldr	r2, [pc, #252]	@ (8003100 <System_UI_Loop+0xba4>)
 8003004:	4619      	mov	r1, r3
 8003006:	4620      	mov	r0, r4
 8003008:	f7ff fa0a 	bl	8002420 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleSettings", &x, &y);
 800300c:	f107 0308 	add.w	r3, r7, #8
 8003010:	f107 020c 	add.w	r2, r7, #12
 8003014:	493b      	ldr	r1, [pc, #236]	@ (8003104 <System_UI_Loop+0xba8>)
 8003016:	4835      	ldr	r0, [pc, #212]	@ (80030ec <System_UI_Loop+0xb90>)
 8003018:	f002 f96d 	bl	80052f6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "STM Settings");
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4618      	mov	r0, r3
 8003020:	f7fd fb90 	bl	8000744 <__aeabi_f2iz>
 8003024:	4603      	mov	r3, r0
 8003026:	b21c      	sxth	r4, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fd fb8a 	bl	8000744 <__aeabi_f2iz>
 8003030:	4603      	mov	r3, r0
 8003032:	b21b      	sxth	r3, r3
 8003034:	4a34      	ldr	r2, [pc, #208]	@ (8003108 <System_UI_Loop+0xbac>)
 8003036:	4619      	mov	r1, r3
 8003038:	4620      	mov	r0, r4
 800303a:	f7ff f9f1 	bl	8002420 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleAbout", &x, &y);
 800303e:	f107 0308 	add.w	r3, r7, #8
 8003042:	f107 020c 	add.w	r2, r7, #12
 8003046:	4931      	ldr	r1, [pc, #196]	@ (800310c <System_UI_Loop+0xbb0>)
 8003048:	4828      	ldr	r0, [pc, #160]	@ (80030ec <System_UI_Loop+0xb90>)
 800304a:	f002 f954 	bl	80052f6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Developer!");
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4618      	mov	r0, r3
 8003052:	f7fd fb77 	bl	8000744 <__aeabi_f2iz>
 8003056:	4603      	mov	r3, r0
 8003058:	b21c      	sxth	r4, r3
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd fb71 	bl	8000744 <__aeabi_f2iz>
 8003062:	4603      	mov	r3, r0
 8003064:	b21b      	sxth	r3, r3
 8003066:	4a2a      	ldr	r2, [pc, #168]	@ (8003110 <System_UI_Loop+0xbb4>)
 8003068:	4619      	mov	r1, r3
 800306a:	4620      	mov	r0, r4
 800306c:	f7ff f9d8 	bl	8002420 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleSnake", &x, &y);
 8003070:	f107 0308 	add.w	r3, r7, #8
 8003074:	f107 020c 	add.w	r2, r7, #12
 8003078:	4926      	ldr	r1, [pc, #152]	@ (8003114 <System_UI_Loop+0xbb8>)
 800307a:	481c      	ldr	r0, [pc, #112]	@ (80030ec <System_UI_Loop+0xb90>)
 800307c:	f002 f93b 	bl	80052f6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Greedy Snake");
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd fb5e 	bl	8000744 <__aeabi_f2iz>
 8003088:	4603      	mov	r3, r0
 800308a:	b21c      	sxth	r4, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd fb58 	bl	8000744 <__aeabi_f2iz>
 8003094:	4603      	mov	r3, r0
 8003096:	b21b      	sxth	r3, r3
 8003098:	e03e      	b.n	8003118 <System_UI_Loop+0xbbc>
 800309a:	bf00      	nop
 800309c:	20000001 	.word	0x20000001
 80030a0:	20000b19 	.word	0x20000b19
 80030a4:	0800b264 	.word	0x0800b264
 80030a8:	20000f2c 	.word	0x20000f2c
 80030ac:	0800b280 	.word	0x0800b280
 80030b0:	0800b254 	.word	0x0800b254
 80030b4:	0800b1b8 	.word	0x0800b1b8
 80030b8:	0800b23c 	.word	0x0800b23c
 80030bc:	0800b28c 	.word	0x0800b28c
 80030c0:	0800b274 	.word	0x0800b274
 80030c4:	0800b294 	.word	0x0800b294
 80030c8:	0800b248 	.word	0x0800b248
 80030cc:	0800b29c 	.word	0x0800b29c
 80030d0:	0800b178 	.word	0x0800b178
 80030d4:	20001520 	.word	0x20001520
 80030d8:	0800b180 	.word	0x0800b180
 80030dc:	0800b188 	.word	0x0800b188
 80030e0:	200038d8 	.word	0x200038d8
 80030e4:	0800b2a4 	.word	0x0800b2a4
 80030e8:	0800b054 	.word	0x0800b054
 80030ec:	200032e4 	.word	0x200032e4
 80030f0:	0800b2ac 	.word	0x0800b2ac
 80030f4:	0800b060 	.word	0x0800b060
 80030f8:	0800b2bc 	.word	0x0800b2bc
 80030fc:	0800b06c 	.word	0x0800b06c
 8003100:	0800b2cc 	.word	0x0800b2cc
 8003104:	0800b078 	.word	0x0800b078
 8003108:	0800b2dc 	.word	0x0800b2dc
 800310c:	0800b088 	.word	0x0800b088
 8003110:	0800b2ec 	.word	0x0800b2ec
 8003114:	0800b094 	.word	0x0800b094
 8003118:	4aa8      	ldr	r2, [pc, #672]	@ (80033bc <System_UI_Loop+0xe60>)
 800311a:	4619      	mov	r1, r3
 800311c:	4620      	mov	r0, r4
 800311e:	f7ff f97f 	bl	8002420 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "Title2048", &x, &y);
 8003122:	f107 0308 	add.w	r3, r7, #8
 8003126:	f107 020c 	add.w	r2, r7, #12
 800312a:	49a5      	ldr	r1, [pc, #660]	@ (80033c0 <System_UI_Loop+0xe64>)
 800312c:	48a5      	ldr	r0, [pc, #660]	@ (80033c4 <System_UI_Loop+0xe68>)
 800312e:	f002 f8e2 	bl	80052f6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Here is 2048!");
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	4618      	mov	r0, r3
 8003136:	f7fd fb05 	bl	8000744 <__aeabi_f2iz>
 800313a:	4603      	mov	r3, r0
 800313c:	b21c      	sxth	r4, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	4618      	mov	r0, r3
 8003142:	f7fd faff 	bl	8000744 <__aeabi_f2iz>
 8003146:	4603      	mov	r3, r0
 8003148:	b21b      	sxth	r3, r3
 800314a:	4a9f      	ldr	r2, [pc, #636]	@ (80033c8 <System_UI_Loop+0xe6c>)
 800314c:	4619      	mov	r1, r3
 800314e:	4620      	mov	r0, r4
 8003150:	f7ff f966 	bl	8002420 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleBack", &x, &y);
 8003154:	f107 0308 	add.w	r3, r7, #8
 8003158:	f107 020c 	add.w	r2, r7, #12
 800315c:	499b      	ldr	r1, [pc, #620]	@ (80033cc <System_UI_Loop+0xe70>)
 800315e:	4899      	ldr	r0, [pc, #612]	@ (80033c4 <System_UI_Loop+0xe68>)
 8003160:	f002 f8c9 	bl	80052f6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Back To Menu");
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4618      	mov	r0, r3
 8003168:	f7fd faec 	bl	8000744 <__aeabi_f2iz>
 800316c:	4603      	mov	r3, r0
 800316e:	b21c      	sxth	r4, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fd fae6 	bl	8000744 <__aeabi_f2iz>
 8003178:	4603      	mov	r3, r0
 800317a:	b21b      	sxth	r3, r3
 800317c:	4a94      	ldr	r2, [pc, #592]	@ (80033d0 <System_UI_Loop+0xe74>)
 800317e:	4619      	mov	r1, r3
 8003180:	4620      	mov	r0, r4
 8003182:	f7ff f94d 	bl	8002420 <OLED_DisplayString>

    OLED_GetObjectPosition(&g_AnimationManager, "TitleBGScale", &x, &y);
 8003186:	f107 0308 	add.w	r3, r7, #8
 800318a:	f107 020c 	add.w	r2, r7, #12
 800318e:	4991      	ldr	r1, [pc, #580]	@ (80033d4 <System_UI_Loop+0xe78>)
 8003190:	4891      	ldr	r0, [pc, #580]	@ (80033d8 <System_UI_Loop+0xe7c>)
 8003192:	f002 f8b0 	bl	80052f6 <OLED_GetObjectPosition>
    OLED_InvertArea(OLED_WIDTH - x, 0, x, y);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4619      	mov	r1, r3
 800319a:	f04f 4086 	mov.w	r0, #1124073472	@ 0x43000000
 800319e:	f7fc ffeb 	bl	8000178 <__aeabi_fsub>
 80031a2:	4603      	mov	r3, r0
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fd facd 	bl	8000744 <__aeabi_f2iz>
 80031aa:	4603      	mov	r3, r0
 80031ac:	b21c      	sxth	r4, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd faed 	bl	8000790 <__aeabi_f2uiz>
 80031b6:	4603      	mov	r3, r0
 80031b8:	b2dd      	uxtb	r5, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd fae7 	bl	8000790 <__aeabi_f2uiz>
 80031c2:	4603      	mov	r3, r0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	462a      	mov	r2, r5
 80031c8:	2100      	movs	r1, #0
 80031ca:	4620      	mov	r0, r4
 80031cc:	f7fe fef6 	bl	8001fbc <OLED_InvertArea>

    OLED_GetObjectPosition(&g_AnimationManager, "Cursor", &x, &y);
 80031d0:	f107 0308 	add.w	r3, r7, #8
 80031d4:	f107 020c 	add.w	r2, r7, #12
 80031d8:	4980      	ldr	r1, [pc, #512]	@ (80033dc <System_UI_Loop+0xe80>)
 80031da:	487f      	ldr	r0, [pc, #508]	@ (80033d8 <System_UI_Loop+0xe7c>)
 80031dc:	f002 f88b 	bl	80052f6 <OLED_GetObjectPosition>
    OLED_GetObjectPosition(&g_AnimationManager, "CursorScale", &x1, &y1);
 80031e0:	463b      	mov	r3, r7
 80031e2:	1d3a      	adds	r2, r7, #4
 80031e4:	497e      	ldr	r1, [pc, #504]	@ (80033e0 <System_UI_Loop+0xe84>)
 80031e6:	487c      	ldr	r0, [pc, #496]	@ (80033d8 <System_UI_Loop+0xe7c>)
 80031e8:	f002 f885 	bl	80052f6 <OLED_GetObjectPosition>
    OLED_InvertArea(x - 2, y - 2, x1, y1); // 绘制光标
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fc ffc0 	bl	8000178 <__aeabi_fsub>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd faa2 	bl	8000744 <__aeabi_f2iz>
 8003200:	4603      	mov	r3, r0
 8003202:	b21c      	sxth	r4, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800320a:	4618      	mov	r0, r3
 800320c:	f7fc ffb4 	bl	8000178 <__aeabi_fsub>
 8003210:	4603      	mov	r3, r0
 8003212:	4618      	mov	r0, r3
 8003214:	f7fd fa96 	bl	8000744 <__aeabi_f2iz>
 8003218:	4603      	mov	r3, r0
 800321a:	b21d      	sxth	r5, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd fab6 	bl	8000790 <__aeabi_f2uiz>
 8003224:	4603      	mov	r3, r0
 8003226:	b2de      	uxtb	r6, r3
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd fab0 	bl	8000790 <__aeabi_f2uiz>
 8003230:	4603      	mov	r3, r0
 8003232:	b2db      	uxtb	r3, r3
 8003234:	4632      	mov	r2, r6
 8003236:	4629      	mov	r1, r5
 8003238:	4620      	mov	r0, r4
 800323a:	f7fe febf 	bl	8001fbc <OLED_InvertArea>
#pragma endregion DRAWER

#pragma region PlayerSelection //选择某个选项时候的详细内容
    if (menuRank == 1)
 800323e:	4b69      	ldr	r3, [pc, #420]	@ (80033e4 <System_UI_Loop+0xe88>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b01      	cmp	r3, #1
 8003244:	f040 81d3 	bne.w	80035ee <System_UI_Loop+0x1092>
    {
        switch (menuSelection)
 8003248:	4b67      	ldr	r3, [pc, #412]	@ (80033e8 <System_UI_Loop+0xe8c>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	3b01      	subs	r3, #1
 800324e:	2b04      	cmp	r3, #4
 8003250:	f200 838e 	bhi.w	8003970 <System_UI_Loop+0x1414>
 8003254:	a201      	add	r2, pc, #4	@ (adr r2, 800325c <System_UI_Loop+0xd00>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003271 	.word	0x08003271
 8003260:	08003321 	.word	0x08003321
 8003264:	08003421 	.word	0x08003421
 8003268:	080034bb 	.word	0x080034bb
 800326c:	08003555 	.word	0x08003555
        {
        case 1:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, TweenStyle);
 8003270:	230f      	movs	r3, #15
 8003272:	9301      	str	r3, [sp, #4]
 8003274:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	4b5c      	ldr	r3, [pc, #368]	@ (80033ec <System_UI_Loop+0xe90>)
 800327c:	4a5c      	ldr	r2, [pc, #368]	@ (80033f0 <System_UI_Loop+0xe94>)
 800327e:	4953      	ldr	r1, [pc, #332]	@ (80033cc <System_UI_Loop+0xe70>)
 8003280:	4850      	ldr	r0, [pc, #320]	@ (80033c4 <System_UI_Loop+0xe68>)
 8003282:	f002 f913 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", OLED_WIDTH - strlen("Machine States") * 6, OLED_TITLE_Start_Y, 1, TweenStyle);
 8003286:	230f      	movs	r3, #15
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	2301      	movs	r3, #1
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	4b57      	ldr	r3, [pc, #348]	@ (80033ec <System_UI_Loop+0xe90>)
 8003290:	4a58      	ldr	r2, [pc, #352]	@ (80033f4 <System_UI_Loop+0xe98>)
 8003292:	4959      	ldr	r1, [pc, #356]	@ (80033f8 <System_UI_Loop+0xe9c>)
 8003294:	484b      	ldr	r0, [pc, #300]	@ (80033c4 <System_UI_Loop+0xe68>)
 8003296:	f002 f909 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", OLED_WIDTH - strlen("STM Settings") * 6, OLED_TITLE_Start_Y, 1, TweenStyle);
 800329a:	230f      	movs	r3, #15
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	2301      	movs	r3, #1
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	4b52      	ldr	r3, [pc, #328]	@ (80033ec <System_UI_Loop+0xe90>)
 80032a4:	4a52      	ldr	r2, [pc, #328]	@ (80033f0 <System_UI_Loop+0xe94>)
 80032a6:	4955      	ldr	r1, [pc, #340]	@ (80033fc <System_UI_Loop+0xea0>)
 80032a8:	4846      	ldr	r0, [pc, #280]	@ (80033c4 <System_UI_Loop+0xe68>)
 80032aa:	f002 f8ff 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80032ae:	2304      	movs	r3, #4
 80032b0:	9301      	str	r3, [sp, #4]
 80032b2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	4b4c      	ldr	r3, [pc, #304]	@ (80033ec <System_UI_Loop+0xe90>)
 80032ba:	4a51      	ldr	r2, [pc, #324]	@ (8003400 <System_UI_Loop+0xea4>)
 80032bc:	4951      	ldr	r1, [pc, #324]	@ (8003404 <System_UI_Loop+0xea8>)
 80032be:	4841      	ldr	r0, [pc, #260]	@ (80033c4 <System_UI_Loop+0xe68>)
 80032c0:	f002 f8f4 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80032c4:	2304      	movs	r3, #4
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	4b47      	ldr	r3, [pc, #284]	@ (80033ec <System_UI_Loop+0xe90>)
 80032d0:	4a4d      	ldr	r2, [pc, #308]	@ (8003408 <System_UI_Loop+0xeac>)
 80032d2:	494e      	ldr	r1, [pc, #312]	@ (800340c <System_UI_Loop+0xeb0>)
 80032d4:	483b      	ldr	r0, [pc, #236]	@ (80033c4 <System_UI_Loop+0xe68>)
 80032d6:	f002 f8e9 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 80032da:	2304      	movs	r3, #4
 80032dc:	9301      	str	r3, [sp, #4]
 80032de:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	4a47      	ldr	r2, [pc, #284]	@ (8003408 <System_UI_Loop+0xeac>)
 80032ea:	4949      	ldr	r1, [pc, #292]	@ (8003410 <System_UI_Loop+0xeb4>)
 80032ec:	4835      	ldr	r0, [pc, #212]	@ (80033c4 <System_UI_Loop+0xe68>)
 80032ee:	f002 f8dd 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Epicful Games") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 80032f2:	2304      	movs	r3, #4
 80032f4:	9301      	str	r3, [sp, #4]
 80032f6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003300:	4a44      	ldr	r2, [pc, #272]	@ (8003414 <System_UI_Loop+0xeb8>)
 8003302:	4934      	ldr	r1, [pc, #208]	@ (80033d4 <System_UI_Loop+0xe78>)
 8003304:	4834      	ldr	r0, [pc, #208]	@ (80033d8 <System_UI_Loop+0xe7c>)
 8003306:	f002 f8d1 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Games") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 800330a:	230c      	movs	r3, #12
 800330c:	9301      	str	r3, [sp, #4]
 800330e:	2364      	movs	r3, #100	@ 0x64
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	4b41      	ldr	r3, [pc, #260]	@ (8003418 <System_UI_Loop+0xebc>)
 8003314:	4a41      	ldr	r2, [pc, #260]	@ (800341c <System_UI_Loop+0xec0>)
 8003316:	4932      	ldr	r1, [pc, #200]	@ (80033e0 <System_UI_Loop+0xe84>)
 8003318:	482f      	ldr	r0, [pc, #188]	@ (80033d8 <System_UI_Loop+0xe7c>)
 800331a:	f002 f8c7 	bl	80054ac <OLED_DoTweenObject>
            break;
 800331e:	e328      	b.n	8003972 <System_UI_Loop+0x1416>
        case 2:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8003320:	2304      	movs	r3, #4
 8003322:	9301      	str	r3, [sp, #4]
 8003324:	2301      	movs	r3, #1
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	4b30      	ldr	r3, [pc, #192]	@ (80033ec <System_UI_Loop+0xe90>)
 800332a:	4a31      	ldr	r2, [pc, #196]	@ (80033f0 <System_UI_Loop+0xe94>)
 800332c:	4933      	ldr	r1, [pc, #204]	@ (80033fc <System_UI_Loop+0xea0>)
 800332e:	4825      	ldr	r0, [pc, #148]	@ (80033c4 <System_UI_Loop+0xe68>)
 8003330:	f002 f8bc 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8003334:	2304      	movs	r3, #4
 8003336:	9301      	str	r3, [sp, #4]
 8003338:	2301      	movs	r3, #1
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	4b2b      	ldr	r3, [pc, #172]	@ (80033ec <System_UI_Loop+0xe90>)
 800333e:	4a30      	ldr	r2, [pc, #192]	@ (8003400 <System_UI_Loop+0xea4>)
 8003340:	4930      	ldr	r1, [pc, #192]	@ (8003404 <System_UI_Loop+0xea8>)
 8003342:	4820      	ldr	r0, [pc, #128]	@ (80033c4 <System_UI_Loop+0xe68>)
 8003344:	f002 f8b2 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003348:	2304      	movs	r3, #4
 800334a:	9301      	str	r3, [sp, #4]
 800334c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	4b26      	ldr	r3, [pc, #152]	@ (80033ec <System_UI_Loop+0xe90>)
 8003354:	4a27      	ldr	r2, [pc, #156]	@ (80033f4 <System_UI_Loop+0xe98>)
 8003356:	4928      	ldr	r1, [pc, #160]	@ (80033f8 <System_UI_Loop+0xe9c>)
 8003358:	481a      	ldr	r0, [pc, #104]	@ (80033c4 <System_UI_Loop+0xe68>)
 800335a:	f002 f8a7 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 800335e:	2304      	movs	r3, #4
 8003360:	9301      	str	r3, [sp, #4]
 8003362:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	4b20      	ldr	r3, [pc, #128]	@ (80033ec <System_UI_Loop+0xe90>)
 800336a:	4a27      	ldr	r2, [pc, #156]	@ (8003408 <System_UI_Loop+0xeac>)
 800336c:	4928      	ldr	r1, [pc, #160]	@ (8003410 <System_UI_Loop+0xeb4>)
 800336e:	4815      	ldr	r0, [pc, #84]	@ (80033c4 <System_UI_Loop+0xe68>)
 8003370:	f002 f89c 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8003374:	2304      	movs	r3, #4
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	4a21      	ldr	r2, [pc, #132]	@ (8003408 <System_UI_Loop+0xeac>)
 8003384:	4921      	ldr	r1, [pc, #132]	@ (800340c <System_UI_Loop+0xeb0>)
 8003386:	480f      	ldr	r0, [pc, #60]	@ (80033c4 <System_UI_Loop+0xe68>)
 8003388:	f002 f890 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Tools for you") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 800338c:	2304      	movs	r3, #4
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800339a:	4a1e      	ldr	r2, [pc, #120]	@ (8003414 <System_UI_Loop+0xeb8>)
 800339c:	490d      	ldr	r1, [pc, #52]	@ (80033d4 <System_UI_Loop+0xe78>)
 800339e:	480e      	ldr	r0, [pc, #56]	@ (80033d8 <System_UI_Loop+0xe7c>)
 80033a0:	f002 f884 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Tools") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 80033a4:	230c      	movs	r3, #12
 80033a6:	9301      	str	r3, [sp, #4]
 80033a8:	2364      	movs	r3, #100	@ 0x64
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003418 <System_UI_Loop+0xebc>)
 80033ae:	4a1b      	ldr	r2, [pc, #108]	@ (800341c <System_UI_Loop+0xec0>)
 80033b0:	490b      	ldr	r1, [pc, #44]	@ (80033e0 <System_UI_Loop+0xe84>)
 80033b2:	4809      	ldr	r0, [pc, #36]	@ (80033d8 <System_UI_Loop+0xe7c>)
 80033b4:	f002 f87a 	bl	80054ac <OLED_DoTweenObject>
            break;
 80033b8:	e2db      	b.n	8003972 <System_UI_Loop+0x1416>
 80033ba:	bf00      	nop
 80033bc:	0800b2f8 	.word	0x0800b2f8
 80033c0:	0800b0a0 	.word	0x0800b0a0
 80033c4:	200032e4 	.word	0x200032e4
 80033c8:	0800b308 	.word	0x0800b308
 80033cc:	0800b0ac 	.word	0x0800b0ac
 80033d0:	0800b318 	.word	0x0800b318
 80033d4:	0800b218 	.word	0x0800b218
 80033d8:	200038d8 	.word	0x200038d8
 80033dc:	0800b228 	.word	0x0800b228
 80033e0:	0800b230 	.word	0x0800b230
 80033e4:	20000001 	.word	0x20000001
 80033e8:	20000002 	.word	0x20000002
 80033ec:	c1200000 	.word	0xc1200000
 80033f0:	42600000 	.word	0x42600000
 80033f4:	42300000 	.word	0x42300000
 80033f8:	0800b06c 	.word	0x0800b06c
 80033fc:	0800b078 	.word	0x0800b078
 8003400:	42880000 	.word	0x42880000
 8003404:	0800b088 	.word	0x0800b088
 8003408:	42480000 	.word	0x42480000
 800340c:	0800b060 	.word	0x0800b060
 8003410:	0800b054 	.word	0x0800b054
 8003414:	42a20000 	.word	0x42a20000
 8003418:	41200000 	.word	0x41200000
 800341c:	42040000 	.word	0x42040000
        case 3:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8003420:	2304      	movs	r3, #4
 8003422:	9301      	str	r3, [sp, #4]
 8003424:	2301      	movs	r3, #1
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	4b9b      	ldr	r3, [pc, #620]	@ (8003698 <System_UI_Loop+0x113c>)
 800342a:	4a9c      	ldr	r2, [pc, #624]	@ (800369c <System_UI_Loop+0x1140>)
 800342c:	499c      	ldr	r1, [pc, #624]	@ (80036a0 <System_UI_Loop+0x1144>)
 800342e:	489d      	ldr	r0, [pc, #628]	@ (80036a4 <System_UI_Loop+0x1148>)
 8003430:	f002 f83c 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8003434:	2304      	movs	r3, #4
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	2301      	movs	r3, #1
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	4b96      	ldr	r3, [pc, #600]	@ (8003698 <System_UI_Loop+0x113c>)
 800343e:	4a9a      	ldr	r2, [pc, #616]	@ (80036a8 <System_UI_Loop+0x114c>)
 8003440:	499a      	ldr	r1, [pc, #616]	@ (80036ac <System_UI_Loop+0x1150>)
 8003442:	4898      	ldr	r0, [pc, #608]	@ (80036a4 <System_UI_Loop+0x1148>)
 8003444:	f002 f832 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003448:	2304      	movs	r3, #4
 800344a:	9301      	str	r3, [sp, #4]
 800344c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	4b91      	ldr	r3, [pc, #580]	@ (8003698 <System_UI_Loop+0x113c>)
 8003454:	4a96      	ldr	r2, [pc, #600]	@ (80036b0 <System_UI_Loop+0x1154>)
 8003456:	4997      	ldr	r1, [pc, #604]	@ (80036b4 <System_UI_Loop+0x1158>)
 8003458:	4892      	ldr	r0, [pc, #584]	@ (80036a4 <System_UI_Loop+0x1148>)
 800345a:	f002 f827 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 800345e:	2304      	movs	r3, #4
 8003460:	9301      	str	r3, [sp, #4]
 8003462:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	4b8b      	ldr	r3, [pc, #556]	@ (8003698 <System_UI_Loop+0x113c>)
 800346a:	4a8c      	ldr	r2, [pc, #560]	@ (800369c <System_UI_Loop+0x1140>)
 800346c:	4992      	ldr	r1, [pc, #584]	@ (80036b8 <System_UI_Loop+0x115c>)
 800346e:	488d      	ldr	r0, [pc, #564]	@ (80036a4 <System_UI_Loop+0x1148>)
 8003470:	f002 f81c 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8003474:	2304      	movs	r3, #4
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	4a8e      	ldr	r2, [pc, #568]	@ (80036bc <System_UI_Loop+0x1160>)
 8003484:	498e      	ldr	r1, [pc, #568]	@ (80036c0 <System_UI_Loop+0x1164>)
 8003486:	4887      	ldr	r0, [pc, #540]	@ (80036a4 <System_UI_Loop+0x1148>)
 8003488:	f002 f810 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Machine States") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 800348c:	2304      	movs	r3, #4
 800348e:	9301      	str	r3, [sp, #4]
 8003490:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800349a:	4a8a      	ldr	r2, [pc, #552]	@ (80036c4 <System_UI_Loop+0x1168>)
 800349c:	498a      	ldr	r1, [pc, #552]	@ (80036c8 <System_UI_Loop+0x116c>)
 800349e:	488b      	ldr	r0, [pc, #556]	@ (80036cc <System_UI_Loop+0x1170>)
 80034a0:	f002 f804 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("States") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 80034a4:	230c      	movs	r3, #12
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	2364      	movs	r3, #100	@ 0x64
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	4b88      	ldr	r3, [pc, #544]	@ (80036d0 <System_UI_Loop+0x1174>)
 80034ae:	4a89      	ldr	r2, [pc, #548]	@ (80036d4 <System_UI_Loop+0x1178>)
 80034b0:	4989      	ldr	r1, [pc, #548]	@ (80036d8 <System_UI_Loop+0x117c>)
 80034b2:	4886      	ldr	r0, [pc, #536]	@ (80036cc <System_UI_Loop+0x1170>)
 80034b4:	f001 fffa 	bl	80054ac <OLED_DoTweenObject>
            break;
 80034b8:	e25b      	b.n	8003972 <System_UI_Loop+0x1416>
        case 4:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80034ba:	2304      	movs	r3, #4
 80034bc:	9301      	str	r3, [sp, #4]
 80034be:	2301      	movs	r3, #1
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	4b75      	ldr	r3, [pc, #468]	@ (8003698 <System_UI_Loop+0x113c>)
 80034c4:	4a75      	ldr	r2, [pc, #468]	@ (800369c <System_UI_Loop+0x1140>)
 80034c6:	4976      	ldr	r1, [pc, #472]	@ (80036a0 <System_UI_Loop+0x1144>)
 80034c8:	4876      	ldr	r0, [pc, #472]	@ (80036a4 <System_UI_Loop+0x1148>)
 80034ca:	f001 ffef 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80034ce:	2304      	movs	r3, #4
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	2301      	movs	r3, #1
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	4b70      	ldr	r3, [pc, #448]	@ (8003698 <System_UI_Loop+0x113c>)
 80034d8:	4a70      	ldr	r2, [pc, #448]	@ (800369c <System_UI_Loop+0x1140>)
 80034da:	4977      	ldr	r1, [pc, #476]	@ (80036b8 <System_UI_Loop+0x115c>)
 80034dc:	4871      	ldr	r0, [pc, #452]	@ (80036a4 <System_UI_Loop+0x1148>)
 80034de:	f001 ffe5 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80034e2:	2304      	movs	r3, #4
 80034e4:	9301      	str	r3, [sp, #4]
 80034e6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003698 <System_UI_Loop+0x113c>)
 80034ee:	4a73      	ldr	r2, [pc, #460]	@ (80036bc <System_UI_Loop+0x1160>)
 80034f0:	4973      	ldr	r1, [pc, #460]	@ (80036c0 <System_UI_Loop+0x1164>)
 80034f2:	486c      	ldr	r0, [pc, #432]	@ (80036a4 <System_UI_Loop+0x1148>)
 80034f4:	f001 ffda 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80034f8:	2304      	movs	r3, #4
 80034fa:	9301      	str	r3, [sp, #4]
 80034fc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	4b65      	ldr	r3, [pc, #404]	@ (8003698 <System_UI_Loop+0x113c>)
 8003504:	4a68      	ldr	r2, [pc, #416]	@ (80036a8 <System_UI_Loop+0x114c>)
 8003506:	4969      	ldr	r1, [pc, #420]	@ (80036ac <System_UI_Loop+0x1150>)
 8003508:	4866      	ldr	r0, [pc, #408]	@ (80036a4 <System_UI_Loop+0x1148>)
 800350a:	f001 ffcf 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 800350e:	2304      	movs	r3, #4
 8003510:	9301      	str	r3, [sp, #4]
 8003512:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	4a64      	ldr	r2, [pc, #400]	@ (80036b0 <System_UI_Loop+0x1154>)
 800351e:	4965      	ldr	r1, [pc, #404]	@ (80036b4 <System_UI_Loop+0x1158>)
 8003520:	4860      	ldr	r0, [pc, #384]	@ (80036a4 <System_UI_Loop+0x1148>)
 8003522:	f001 ffc3 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("STM Settings") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8003526:	2304      	movs	r3, #4
 8003528:	9301      	str	r3, [sp, #4]
 800352a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003534:	4a69      	ldr	r2, [pc, #420]	@ (80036dc <System_UI_Loop+0x1180>)
 8003536:	4964      	ldr	r1, [pc, #400]	@ (80036c8 <System_UI_Loop+0x116c>)
 8003538:	4864      	ldr	r0, [pc, #400]	@ (80036cc <System_UI_Loop+0x1170>)
 800353a:	f001 ffb7 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Settings") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 800353e:	230c      	movs	r3, #12
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	2364      	movs	r3, #100	@ 0x64
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	4b62      	ldr	r3, [pc, #392]	@ (80036d0 <System_UI_Loop+0x1174>)
 8003548:	4a65      	ldr	r2, [pc, #404]	@ (80036e0 <System_UI_Loop+0x1184>)
 800354a:	4963      	ldr	r1, [pc, #396]	@ (80036d8 <System_UI_Loop+0x117c>)
 800354c:	485f      	ldr	r0, [pc, #380]	@ (80036cc <System_UI_Loop+0x1170>)
 800354e:	f001 ffad 	bl	80054ac <OLED_DoTweenObject>
            break;
 8003552:	e20e      	b.n	8003972 <System_UI_Loop+0x1416>
        case 5:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8003554:	2304      	movs	r3, #4
 8003556:	9301      	str	r3, [sp, #4]
 8003558:	2301      	movs	r3, #1
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	4b4e      	ldr	r3, [pc, #312]	@ (8003698 <System_UI_Loop+0x113c>)
 800355e:	4a4f      	ldr	r2, [pc, #316]	@ (800369c <System_UI_Loop+0x1140>)
 8003560:	4955      	ldr	r1, [pc, #340]	@ (80036b8 <System_UI_Loop+0x115c>)
 8003562:	4850      	ldr	r0, [pc, #320]	@ (80036a4 <System_UI_Loop+0x1148>)
 8003564:	f001 ffa2 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8003568:	2304      	movs	r3, #4
 800356a:	9301      	str	r3, [sp, #4]
 800356c:	2301      	movs	r3, #1
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	4b49      	ldr	r3, [pc, #292]	@ (8003698 <System_UI_Loop+0x113c>)
 8003572:	4a52      	ldr	r2, [pc, #328]	@ (80036bc <System_UI_Loop+0x1160>)
 8003574:	4952      	ldr	r1, [pc, #328]	@ (80036c0 <System_UI_Loop+0x1164>)
 8003576:	484b      	ldr	r0, [pc, #300]	@ (80036a4 <System_UI_Loop+0x1148>)
 8003578:	f001 ff98 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 800357c:	2304      	movs	r3, #4
 800357e:	9301      	str	r3, [sp, #4]
 8003580:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	4b44      	ldr	r3, [pc, #272]	@ (8003698 <System_UI_Loop+0x113c>)
 8003588:	4a49      	ldr	r2, [pc, #292]	@ (80036b0 <System_UI_Loop+0x1154>)
 800358a:	494a      	ldr	r1, [pc, #296]	@ (80036b4 <System_UI_Loop+0x1158>)
 800358c:	4845      	ldr	r0, [pc, #276]	@ (80036a4 <System_UI_Loop+0x1148>)
 800358e:	f001 ff8d 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003592:	2304      	movs	r3, #4
 8003594:	9301      	str	r3, [sp, #4]
 8003596:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	4b3e      	ldr	r3, [pc, #248]	@ (8003698 <System_UI_Loop+0x113c>)
 800359e:	4a3f      	ldr	r2, [pc, #252]	@ (800369c <System_UI_Loop+0x1140>)
 80035a0:	493f      	ldr	r1, [pc, #252]	@ (80036a0 <System_UI_Loop+0x1144>)
 80035a2:	4840      	ldr	r0, [pc, #256]	@ (80036a4 <System_UI_Loop+0x1148>)
 80035a4:	f001 ff82 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 80035a8:	2304      	movs	r3, #4
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	4a3c      	ldr	r2, [pc, #240]	@ (80036a8 <System_UI_Loop+0x114c>)
 80035b8:	493c      	ldr	r1, [pc, #240]	@ (80036ac <System_UI_Loop+0x1150>)
 80035ba:	483a      	ldr	r0, [pc, #232]	@ (80036a4 <System_UI_Loop+0x1148>)
 80035bc:	f001 ff76 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Developer!") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 80035c0:	2304      	movs	r3, #4
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80035ce:	4a45      	ldr	r2, [pc, #276]	@ (80036e4 <System_UI_Loop+0x1188>)
 80035d0:	493d      	ldr	r1, [pc, #244]	@ (80036c8 <System_UI_Loop+0x116c>)
 80035d2:	483e      	ldr	r0, [pc, #248]	@ (80036cc <System_UI_Loop+0x1170>)
 80035d4:	f001 ff6a 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("About") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 80035d8:	230c      	movs	r3, #12
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	2364      	movs	r3, #100	@ 0x64
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	4b3b      	ldr	r3, [pc, #236]	@ (80036d0 <System_UI_Loop+0x1174>)
 80035e2:	4a41      	ldr	r2, [pc, #260]	@ (80036e8 <System_UI_Loop+0x118c>)
 80035e4:	493c      	ldr	r1, [pc, #240]	@ (80036d8 <System_UI_Loop+0x117c>)
 80035e6:	4839      	ldr	r0, [pc, #228]	@ (80036cc <System_UI_Loop+0x1170>)
 80035e8:	f001 ff60 	bl	80054ac <OLED_DoTweenObject>
            break;
 80035ec:	e1c1      	b.n	8003972 <System_UI_Loop+0x1416>
        default:
            break;
        }
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_SETTINGS)
 80035ee:	4b3f      	ldr	r3, [pc, #252]	@ (80036ec <System_UI_Loop+0x1190>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d116      	bne.n	8003624 <System_UI_Loop+0x10c8>
 80035f6:	4b3e      	ldr	r3, [pc, #248]	@ (80036f0 <System_UI_Loop+0x1194>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d112      	bne.n	8003624 <System_UI_Loop+0x10c8>
    {
        switch (menuSelection)
 80035fe:	4b3d      	ldr	r3, [pc, #244]	@ (80036f4 <System_UI_Loop+0x1198>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b03      	cmp	r3, #3
 8003604:	d006      	beq.n	8003614 <System_UI_Loop+0x10b8>
 8003606:	2b03      	cmp	r3, #3
 8003608:	dc06      	bgt.n	8003618 <System_UI_Loop+0x10bc>
 800360a:	2b01      	cmp	r3, #1
 800360c:	d006      	beq.n	800361c <System_UI_Loop+0x10c0>
 800360e:	2b02      	cmp	r3, #2
 8003610:	d006      	beq.n	8003620 <System_UI_Loop+0x10c4>
            break;
        case 3:
            /* code */
            break;
        default:
            break;
 8003612:	e001      	b.n	8003618 <System_UI_Loop+0x10bc>
            break;
 8003614:	bf00      	nop
 8003616:	e1ac      	b.n	8003972 <System_UI_Loop+0x1416>
            break;
 8003618:	bf00      	nop
 800361a:	e1aa      	b.n	8003972 <System_UI_Loop+0x1416>
            break;
 800361c:	bf00      	nop
 800361e:	e1a8      	b.n	8003972 <System_UI_Loop+0x1416>
            break;
 8003620:	bf00      	nop
        switch (menuSelection)
 8003622:	e1a6      	b.n	8003972 <System_UI_Loop+0x1416>
        }
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_ABOUT)
 8003624:	4b31      	ldr	r3, [pc, #196]	@ (80036ec <System_UI_Loop+0x1190>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b02      	cmp	r3, #2
 800362a:	d119      	bne.n	8003660 <System_UI_Loop+0x1104>
 800362c:	4b30      	ldr	r3, [pc, #192]	@ (80036f0 <System_UI_Loop+0x1194>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b03      	cmp	r3, #3
 8003632:	d115      	bne.n	8003660 <System_UI_Loop+0x1104>
    {
        switch (menuSelection)
 8003634:	4b2f      	ldr	r3, [pc, #188]	@ (80036f4 <System_UI_Loop+0x1198>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	3b01      	subs	r3, #1
 800363a:	2b05      	cmp	r3, #5
 800363c:	d80e      	bhi.n	800365c <System_UI_Loop+0x1100>
 800363e:	a201      	add	r2, pc, #4	@ (adr r2, 8003644 <System_UI_Loop+0x10e8>)
 8003640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003644:	0800365d 	.word	0x0800365d
 8003648:	0800365d 	.word	0x0800365d
 800364c:	0800365d 	.word	0x0800365d
 8003650:	0800365d 	.word	0x0800365d
 8003654:	0800365d 	.word	0x0800365d
 8003658:	0800365d 	.word	0x0800365d
            break;
        case 6:
            /* code */
            break;
        default:
            break;
 800365c:	bf00      	nop
        switch (menuSelection)
 800365e:	e188      	b.n	8003972 <System_UI_Loop+0x1416>
        }
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_TOOLS)
 8003660:	4b22      	ldr	r3, [pc, #136]	@ (80036ec <System_UI_Loop+0x1190>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d147      	bne.n	80036f8 <System_UI_Loop+0x119c>
 8003668:	4b21      	ldr	r3, [pc, #132]	@ (80036f0 <System_UI_Loop+0x1194>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b04      	cmp	r3, #4
 800366e:	d143      	bne.n	80036f8 <System_UI_Loop+0x119c>
    {
        switch (menuSelection)
 8003670:	4b20      	ldr	r3, [pc, #128]	@ (80036f4 <System_UI_Loop+0x1198>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b03      	cmp	r3, #3
 8003676:	d006      	beq.n	8003686 <System_UI_Loop+0x112a>
 8003678:	2b03      	cmp	r3, #3
 800367a:	dc06      	bgt.n	800368a <System_UI_Loop+0x112e>
 800367c:	2b01      	cmp	r3, #1
 800367e:	d006      	beq.n	800368e <System_UI_Loop+0x1132>
 8003680:	2b02      	cmp	r3, #2
 8003682:	d006      	beq.n	8003692 <System_UI_Loop+0x1136>
        case 2:
            break;
        case 3:
            break;
        default:
            break;
 8003684:	e001      	b.n	800368a <System_UI_Loop+0x112e>
            break;
 8003686:	bf00      	nop
 8003688:	e173      	b.n	8003972 <System_UI_Loop+0x1416>
            break;
 800368a:	bf00      	nop
 800368c:	e171      	b.n	8003972 <System_UI_Loop+0x1416>
            break;
 800368e:	bf00      	nop
 8003690:	e16f      	b.n	8003972 <System_UI_Loop+0x1416>
            break;
 8003692:	bf00      	nop
        switch (menuSelection)
 8003694:	e16d      	b.n	8003972 <System_UI_Loop+0x1416>
 8003696:	bf00      	nop
 8003698:	c1200000 	.word	0xc1200000
 800369c:	42480000 	.word	0x42480000
 80036a0:	0800b054 	.word	0x0800b054
 80036a4:	200032e4 	.word	0x200032e4
 80036a8:	42880000 	.word	0x42880000
 80036ac:	0800b088 	.word	0x0800b088
 80036b0:	42600000 	.word	0x42600000
 80036b4:	0800b078 	.word	0x0800b078
 80036b8:	0800b060 	.word	0x0800b060
 80036bc:	42300000 	.word	0x42300000
 80036c0:	0800b06c 	.word	0x0800b06c
 80036c4:	42ae0000 	.word	0x42ae0000
 80036c8:	0800b218 	.word	0x0800b218
 80036cc:	200038d8 	.word	0x200038d8
 80036d0:	41200000 	.word	0x41200000
 80036d4:	421c0000 	.word	0x421c0000
 80036d8:	0800b230 	.word	0x0800b230
 80036dc:	42960000 	.word	0x42960000
 80036e0:	424c0000 	.word	0x424c0000
 80036e4:	427c0000 	.word	0x427c0000
 80036e8:	42040000 	.word	0x42040000
 80036ec:	20000001 	.word	0x20000001
 80036f0:	20000b19 	.word	0x20000b19
 80036f4:	20000002 	.word	0x20000002
        }
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_GAMES)
 80036f8:	4b89      	ldr	r3, [pc, #548]	@ (8003920 <System_UI_Loop+0x13c4>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	f040 80ca 	bne.w	8003896 <System_UI_Loop+0x133a>
 8003702:	4b88      	ldr	r3, [pc, #544]	@ (8003924 <System_UI_Loop+0x13c8>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b05      	cmp	r3, #5
 8003708:	f040 80c5 	bne.w	8003896 <System_UI_Loop+0x133a>
    {
        switch (menuSelection)
 800370c:	4b86      	ldr	r3, [pc, #536]	@ (8003928 <System_UI_Loop+0x13cc>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b03      	cmp	r3, #3
 8003712:	f000 8085 	beq.w	8003820 <System_UI_Loop+0x12c4>
 8003716:	2b03      	cmp	r3, #3
 8003718:	f300 80bb 	bgt.w	8003892 <System_UI_Loop+0x1336>
 800371c:	2b01      	cmp	r3, #1
 800371e:	d002      	beq.n	8003726 <System_UI_Loop+0x11ca>
 8003720:	2b02      	cmp	r3, #2
 8003722:	d044      	beq.n	80037ae <System_UI_Loop+0x1252>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, 500, EASE_IN_CUBIC);
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
            break;
        default:
            break;
 8003724:	e0b5      	b.n	8003892 <System_UI_Loop+0x1336>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003726:	2304      	movs	r3, #4
 8003728:	9301      	str	r3, [sp, #4]
 800372a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	4b7e      	ldr	r3, [pc, #504]	@ (800392c <System_UI_Loop+0x13d0>)
 8003732:	4a7f      	ldr	r2, [pc, #508]	@ (8003930 <System_UI_Loop+0x13d4>)
 8003734:	497f      	ldr	r1, [pc, #508]	@ (8003934 <System_UI_Loop+0x13d8>)
 8003736:	4880      	ldr	r0, [pc, #512]	@ (8003938 <System_UI_Loop+0x13dc>)
 8003738:	f001 feb8 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 800373c:	2304      	movs	r3, #4
 800373e:	9301      	str	r3, [sp, #4]
 8003740:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	4a7c      	ldr	r2, [pc, #496]	@ (800393c <System_UI_Loop+0x13e0>)
 800374c:	497c      	ldr	r1, [pc, #496]	@ (8003940 <System_UI_Loop+0x13e4>)
 800374e:	487a      	ldr	r0, [pc, #488]	@ (8003938 <System_UI_Loop+0x13dc>)
 8003750:	f001 feac 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003754:	2304      	movs	r3, #4
 8003756:	9301      	str	r3, [sp, #4]
 8003758:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	4b73      	ldr	r3, [pc, #460]	@ (800392c <System_UI_Loop+0x13d0>)
 8003760:	4a73      	ldr	r2, [pc, #460]	@ (8003930 <System_UI_Loop+0x13d4>)
 8003762:	4978      	ldr	r1, [pc, #480]	@ (8003944 <System_UI_Loop+0x13e8>)
 8003764:	4874      	ldr	r0, [pc, #464]	@ (8003938 <System_UI_Loop+0x13dc>)
 8003766:	f001 fea1 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 800376a:	2304      	movs	r3, #4
 800376c:	9301      	str	r3, [sp, #4]
 800376e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	4b6d      	ldr	r3, [pc, #436]	@ (800392c <System_UI_Loop+0x13d0>)
 8003776:	4a71      	ldr	r2, [pc, #452]	@ (800393c <System_UI_Loop+0x13e0>)
 8003778:	4973      	ldr	r1, [pc, #460]	@ (8003948 <System_UI_Loop+0x13ec>)
 800377a:	486f      	ldr	r0, [pc, #444]	@ (8003938 <System_UI_Loop+0x13dc>)
 800377c:	f001 fe96 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Greedy Snake") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8003780:	2304      	movs	r3, #4
 8003782:	9301      	str	r3, [sp, #4]
 8003784:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800378e:	4a6f      	ldr	r2, [pc, #444]	@ (800394c <System_UI_Loop+0x13f0>)
 8003790:	496f      	ldr	r1, [pc, #444]	@ (8003950 <System_UI_Loop+0x13f4>)
 8003792:	4870      	ldr	r0, [pc, #448]	@ (8003954 <System_UI_Loop+0x13f8>)
 8003794:	f001 fe8a 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Snake") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 8003798:	230c      	movs	r3, #12
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	2364      	movs	r3, #100	@ 0x64
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	4b6d      	ldr	r3, [pc, #436]	@ (8003958 <System_UI_Loop+0x13fc>)
 80037a2:	4a6e      	ldr	r2, [pc, #440]	@ (800395c <System_UI_Loop+0x1400>)
 80037a4:	496e      	ldr	r1, [pc, #440]	@ (8003960 <System_UI_Loop+0x1404>)
 80037a6:	486b      	ldr	r0, [pc, #428]	@ (8003954 <System_UI_Loop+0x13f8>)
 80037a8:	f001 fe80 	bl	80054ac <OLED_DoTweenObject>
            break;
 80037ac:	e072      	b.n	8003894 <System_UI_Loop+0x1338>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 80037ae:	2304      	movs	r3, #4
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	4a5c      	ldr	r2, [pc, #368]	@ (8003930 <System_UI_Loop+0x13d4>)
 80037be:	4961      	ldr	r1, [pc, #388]	@ (8003944 <System_UI_Loop+0x13e8>)
 80037c0:	485d      	ldr	r0, [pc, #372]	@ (8003938 <System_UI_Loop+0x13dc>)
 80037c2:	f001 fe73 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80037c6:	2304      	movs	r3, #4
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	4b56      	ldr	r3, [pc, #344]	@ (800392c <System_UI_Loop+0x13d0>)
 80037d2:	4a5a      	ldr	r2, [pc, #360]	@ (800393c <System_UI_Loop+0x13e0>)
 80037d4:	495a      	ldr	r1, [pc, #360]	@ (8003940 <System_UI_Loop+0x13e4>)
 80037d6:	4858      	ldr	r0, [pc, #352]	@ (8003938 <System_UI_Loop+0x13dc>)
 80037d8:	f001 fe68 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80037dc:	2304      	movs	r3, #4
 80037de:	9301      	str	r3, [sp, #4]
 80037e0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	4b51      	ldr	r3, [pc, #324]	@ (800392c <System_UI_Loop+0x13d0>)
 80037e8:	4a54      	ldr	r2, [pc, #336]	@ (800393c <System_UI_Loop+0x13e0>)
 80037ea:	4957      	ldr	r1, [pc, #348]	@ (8003948 <System_UI_Loop+0x13ec>)
 80037ec:	4852      	ldr	r0, [pc, #328]	@ (8003938 <System_UI_Loop+0x13dc>)
 80037ee:	f001 fe5d 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Here is 2048!") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 80037f2:	2304      	movs	r3, #4
 80037f4:	9301      	str	r3, [sp, #4]
 80037f6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003800:	4a58      	ldr	r2, [pc, #352]	@ (8003964 <System_UI_Loop+0x1408>)
 8003802:	4953      	ldr	r1, [pc, #332]	@ (8003950 <System_UI_Loop+0x13f4>)
 8003804:	4853      	ldr	r0, [pc, #332]	@ (8003954 <System_UI_Loop+0x13f8>)
 8003806:	f001 fe51 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("2048") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 800380a:	230c      	movs	r3, #12
 800380c:	9301      	str	r3, [sp, #4]
 800380e:	2364      	movs	r3, #100	@ 0x64
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	4b51      	ldr	r3, [pc, #324]	@ (8003958 <System_UI_Loop+0x13fc>)
 8003814:	4a54      	ldr	r2, [pc, #336]	@ (8003968 <System_UI_Loop+0x140c>)
 8003816:	4952      	ldr	r1, [pc, #328]	@ (8003960 <System_UI_Loop+0x1404>)
 8003818:	484e      	ldr	r0, [pc, #312]	@ (8003954 <System_UI_Loop+0x13f8>)
 800381a:	f001 fe47 	bl	80054ac <OLED_DoTweenObject>
            break;
 800381e:	e039      	b.n	8003894 <System_UI_Loop+0x1338>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8003820:	2304      	movs	r3, #4
 8003822:	9301      	str	r3, [sp, #4]
 8003824:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	4a43      	ldr	r2, [pc, #268]	@ (800393c <System_UI_Loop+0x13e0>)
 8003830:	4945      	ldr	r1, [pc, #276]	@ (8003948 <System_UI_Loop+0x13ec>)
 8003832:	4841      	ldr	r0, [pc, #260]	@ (8003938 <System_UI_Loop+0x13dc>)
 8003834:	f001 fe3a 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003838:	2304      	movs	r3, #4
 800383a:	9301      	str	r3, [sp, #4]
 800383c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	4b3a      	ldr	r3, [pc, #232]	@ (800392c <System_UI_Loop+0x13d0>)
 8003844:	4a3d      	ldr	r2, [pc, #244]	@ (800393c <System_UI_Loop+0x13e0>)
 8003846:	493e      	ldr	r1, [pc, #248]	@ (8003940 <System_UI_Loop+0x13e4>)
 8003848:	483b      	ldr	r0, [pc, #236]	@ (8003938 <System_UI_Loop+0x13dc>)
 800384a:	f001 fe2f 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 800384e:	2304      	movs	r3, #4
 8003850:	9301      	str	r3, [sp, #4]
 8003852:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	4b34      	ldr	r3, [pc, #208]	@ (800392c <System_UI_Loop+0x13d0>)
 800385a:	4a35      	ldr	r2, [pc, #212]	@ (8003930 <System_UI_Loop+0x13d4>)
 800385c:	4939      	ldr	r1, [pc, #228]	@ (8003944 <System_UI_Loop+0x13e8>)
 800385e:	4836      	ldr	r0, [pc, #216]	@ (8003938 <System_UI_Loop+0x13dc>)
 8003860:	f001 fe24 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8003864:	2304      	movs	r3, #4
 8003866:	9301      	str	r3, [sp, #4]
 8003868:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003872:	4a36      	ldr	r2, [pc, #216]	@ (800394c <System_UI_Loop+0x13f0>)
 8003874:	4936      	ldr	r1, [pc, #216]	@ (8003950 <System_UI_Loop+0x13f4>)
 8003876:	4837      	ldr	r0, [pc, #220]	@ (8003954 <System_UI_Loop+0x13f8>)
 8003878:	f001 fe18 	bl	80054ac <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 800387c:	230c      	movs	r3, #12
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	2364      	movs	r3, #100	@ 0x64
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	4b34      	ldr	r3, [pc, #208]	@ (8003958 <System_UI_Loop+0x13fc>)
 8003886:	4a38      	ldr	r2, [pc, #224]	@ (8003968 <System_UI_Loop+0x140c>)
 8003888:	4935      	ldr	r1, [pc, #212]	@ (8003960 <System_UI_Loop+0x1404>)
 800388a:	4832      	ldr	r0, [pc, #200]	@ (8003954 <System_UI_Loop+0x13f8>)
 800388c:	f001 fe0e 	bl	80054ac <OLED_DoTweenObject>
            break;
 8003890:	e000      	b.n	8003894 <System_UI_Loop+0x1338>
            break;
 8003892:	bf00      	nop
        switch (menuSelection)
 8003894:	e06d      	b.n	8003972 <System_UI_Loop+0x1416>
        }
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_GAMES && menuSelection == 1)
 8003896:	4b22      	ldr	r3, [pc, #136]	@ (8003920 <System_UI_Loop+0x13c4>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b03      	cmp	r3, #3
 800389c:	d10d      	bne.n	80038ba <System_UI_Loop+0x135e>
 800389e:	4b21      	ldr	r3, [pc, #132]	@ (8003924 <System_UI_Loop+0x13c8>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b05      	cmp	r3, #5
 80038a4:	d109      	bne.n	80038ba <System_UI_Loop+0x135e>
 80038a6:	4b20      	ldr	r3, [pc, #128]	@ (8003928 <System_UI_Loop+0x13cc>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d105      	bne.n	80038ba <System_UI_Loop+0x135e>
    {
        cancelSelection = true;
 80038ae:	4b2f      	ldr	r3, [pc, #188]	@ (800396c <System_UI_Loop+0x1410>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	701a      	strb	r2, [r3, #0]
        Snake_GameLoop();
 80038b4:	f7fd f9b4 	bl	8000c20 <Snake_GameLoop>
 80038b8:	e05b      	b.n	8003972 <System_UI_Loop+0x1416>
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_GAMES && menuSelection == 2)
 80038ba:	4b19      	ldr	r3, [pc, #100]	@ (8003920 <System_UI_Loop+0x13c4>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b03      	cmp	r3, #3
 80038c0:	d10d      	bne.n	80038de <System_UI_Loop+0x1382>
 80038c2:	4b18      	ldr	r3, [pc, #96]	@ (8003924 <System_UI_Loop+0x13c8>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b05      	cmp	r3, #5
 80038c8:	d109      	bne.n	80038de <System_UI_Loop+0x1382>
 80038ca:	4b17      	ldr	r3, [pc, #92]	@ (8003928 <System_UI_Loop+0x13cc>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d105      	bne.n	80038de <System_UI_Loop+0x1382>
    {
        cancelSelection = true;
 80038d2:	4b26      	ldr	r3, [pc, #152]	@ (800396c <System_UI_Loop+0x1410>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	701a      	strb	r2, [r3, #0]
        Game2048_GameLoop();
 80038d8:	f7fd feb4 	bl	8001644 <Game2048_GameLoop>
 80038dc:	e049      	b.n	8003972 <System_UI_Loop+0x1416>
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_TOOLS && menuSelection == 1)
 80038de:	4b10      	ldr	r3, [pc, #64]	@ (8003920 <System_UI_Loop+0x13c4>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d10b      	bne.n	80038fe <System_UI_Loop+0x13a2>
 80038e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003924 <System_UI_Loop+0x13c8>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d107      	bne.n	80038fe <System_UI_Loop+0x13a2>
 80038ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003928 <System_UI_Loop+0x13cc>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d103      	bne.n	80038fe <System_UI_Loop+0x13a2>
    {
        cancelSelection = true;
 80038f6:	4b1d      	ldr	r3, [pc, #116]	@ (800396c <System_UI_Loop+0x1410>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	701a      	strb	r2, [r3, #0]
 80038fc:	e039      	b.n	8003972 <System_UI_Loop+0x1416>
        // Calculator();
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_TOOLS && menuSelection == 2)
 80038fe:	4b08      	ldr	r3, [pc, #32]	@ (8003920 <System_UI_Loop+0x13c4>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b03      	cmp	r3, #3
 8003904:	d135      	bne.n	8003972 <System_UI_Loop+0x1416>
 8003906:	4b07      	ldr	r3, [pc, #28]	@ (8003924 <System_UI_Loop+0x13c8>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b04      	cmp	r3, #4
 800390c:	d131      	bne.n	8003972 <System_UI_Loop+0x1416>
 800390e:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <System_UI_Loop+0x13cc>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d12d      	bne.n	8003972 <System_UI_Loop+0x1416>
    {
        cancelSelection = true;
 8003916:	4b15      	ldr	r3, [pc, #84]	@ (800396c <System_UI_Loop+0x1410>)
 8003918:	2201      	movs	r2, #1
 800391a:	701a      	strb	r2, [r3, #0]
 800391c:	e029      	b.n	8003972 <System_UI_Loop+0x1416>
 800391e:	bf00      	nop
 8003920:	20000001 	.word	0x20000001
 8003924:	20000b19 	.word	0x20000b19
 8003928:	20000002 	.word	0x20000002
 800392c:	c1200000 	.word	0xc1200000
 8003930:	42480000 	.word	0x42480000
 8003934:	0800b054 	.word	0x0800b054
 8003938:	200032e4 	.word	0x200032e4
 800393c:	42600000 	.word	0x42600000
 8003940:	0800b094 	.word	0x0800b094
 8003944:	0800b0a0 	.word	0x0800b0a0
 8003948:	0800b0ac 	.word	0x0800b0ac
 800394c:	42960000 	.word	0x42960000
 8003950:	0800b218 	.word	0x0800b218
 8003954:	200038d8 	.word	0x200038d8
 8003958:	41200000 	.word	0x41200000
 800395c:	42040000 	.word	0x42040000
 8003960:	0800b230 	.word	0x0800b230
 8003964:	42a20000 	.word	0x42a20000
 8003968:	41d80000 	.word	0x41d80000
 800396c:	20000b1b 	.word	0x20000b1b
            break;
 8003970:	bf00      	nop
    
    
#pragma endregion PlayerSelection

#pragma region ResetAnimation //完成换级时候让动画复位
    if (menuRank == 1 && (OLED_GetAnimationStates(&Games_AnimationManager, "Snake") == 0))
 8003972:	4b2e      	ldr	r3, [pc, #184]	@ (8003a2c <System_UI_Loop+0x14d0>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d126      	bne.n	80039c8 <System_UI_Loop+0x146c>
 800397a:	492d      	ldr	r1, [pc, #180]	@ (8003a30 <System_UI_Loop+0x14d4>)
 800397c:	482d      	ldr	r0, [pc, #180]	@ (8003a34 <System_UI_Loop+0x14d8>)
 800397e:	f001 fd7f 	bl	8005480 <OLED_GetAnimationStates>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d11f      	bne.n	80039c8 <System_UI_Loop+0x146c>
    {
        OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, EASE_IN_CIRC);
 8003988:	230a      	movs	r3, #10
 800398a:	9301      	str	r3, [sp, #4]
 800398c:	2301      	movs	r3, #1
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003994:	4a28      	ldr	r2, [pc, #160]	@ (8003a38 <System_UI_Loop+0x14dc>)
 8003996:	4926      	ldr	r1, [pc, #152]	@ (8003a30 <System_UI_Loop+0x14d4>)
 8003998:	4826      	ldr	r0, [pc, #152]	@ (8003a34 <System_UI_Loop+0x14d8>)
 800399a:	f001 fd87 	bl	80054ac <OLED_DoTweenObject>
        OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, EASE_IN_CIRC);
 800399e:	230a      	movs	r3, #10
 80039a0:	9301      	str	r3, [sp, #4]
 80039a2:	2301      	movs	r3, #1
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	4b25      	ldr	r3, [pc, #148]	@ (8003a3c <System_UI_Loop+0x14e0>)
 80039a8:	4a23      	ldr	r2, [pc, #140]	@ (8003a38 <System_UI_Loop+0x14dc>)
 80039aa:	4925      	ldr	r1, [pc, #148]	@ (8003a40 <System_UI_Loop+0x14e4>)
 80039ac:	4821      	ldr	r0, [pc, #132]	@ (8003a34 <System_UI_Loop+0x14d8>)
 80039ae:	f001 fd7d 	bl	80054ac <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, EASE_IN_CIRC);
 80039b2:	230a      	movs	r3, #10
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	2301      	movs	r3, #1
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	4b22      	ldr	r3, [pc, #136]	@ (8003a44 <System_UI_Loop+0x14e8>)
 80039bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003a38 <System_UI_Loop+0x14dc>)
 80039be:	4922      	ldr	r1, [pc, #136]	@ (8003a48 <System_UI_Loop+0x14ec>)
 80039c0:	4822      	ldr	r0, [pc, #136]	@ (8003a4c <System_UI_Loop+0x14f0>)
 80039c2:	f001 fd73 	bl	80054ac <OLED_DoTweenObject>
 80039c6:	e028      	b.n	8003a1a <System_UI_Loop+0x14be>

    }
    else if (menuRank == 1 && OLED_GetAnimationStates(&Tools_AnimationManager, "Calculator") == 0)
 80039c8:	4b18      	ldr	r3, [pc, #96]	@ (8003a2c <System_UI_Loop+0x14d0>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d106      	bne.n	80039de <System_UI_Loop+0x1482>
 80039d0:	491f      	ldr	r1, [pc, #124]	@ (8003a50 <System_UI_Loop+0x14f4>)
 80039d2:	4820      	ldr	r0, [pc, #128]	@ (8003a54 <System_UI_Loop+0x14f8>)
 80039d4:	f001 fd54 	bl	8005480 <OLED_GetAnimationStates>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d01d      	beq.n	8003a1a <System_UI_Loop+0x14be>
    {

    }
    else if (menuRank == 1 && OLED_GetAnimationStates(&Status_AnimationManager,  "RunningTime") == 0)
 80039de:	4b13      	ldr	r3, [pc, #76]	@ (8003a2c <System_UI_Loop+0x14d0>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d106      	bne.n	80039f4 <System_UI_Loop+0x1498>
 80039e6:	491c      	ldr	r1, [pc, #112]	@ (8003a58 <System_UI_Loop+0x14fc>)
 80039e8:	481c      	ldr	r0, [pc, #112]	@ (8003a5c <System_UI_Loop+0x1500>)
 80039ea:	f001 fd49 	bl	8005480 <OLED_GetAnimationStates>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d012      	beq.n	8003a1a <System_UI_Loop+0x14be>
    {

    }
    else if (menuRank == 1 && OLED_GetAnimationStates(&Settings_AnimationManager, "ShowFPS"))
 80039f4:	4b0d      	ldr	r3, [pc, #52]	@ (8003a2c <System_UI_Loop+0x14d0>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d106      	bne.n	8003a0a <System_UI_Loop+0x14ae>
 80039fc:	4918      	ldr	r1, [pc, #96]	@ (8003a60 <System_UI_Loop+0x1504>)
 80039fe:	4819      	ldr	r0, [pc, #100]	@ (8003a64 <System_UI_Loop+0x1508>)
 8003a00:	f001 fd3e 	bl	8005480 <OLED_GetAnimationStates>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d107      	bne.n	8003a1a <System_UI_Loop+0x14be>
    {
        /* code */
    }
    else if (menuRank == 1 && OLED_GetAnimationStates(&About_AnimationManager, "Developer"))
 8003a0a:	4b08      	ldr	r3, [pc, #32]	@ (8003a2c <System_UI_Loop+0x14d0>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d103      	bne.n	8003a1a <System_UI_Loop+0x14be>
 8003a12:	4915      	ldr	r1, [pc, #84]	@ (8003a68 <System_UI_Loop+0x150c>)
 8003a14:	4815      	ldr	r0, [pc, #84]	@ (8003a6c <System_UI_Loop+0x1510>)
 8003a16:	f001 fd33 	bl	8005480 <OLED_GetAnimationStates>
    
    

#pragma endregion ResetAnimation

    preMenuSelection = menuSelection;
 8003a1a:	4b15      	ldr	r3, [pc, #84]	@ (8003a70 <System_UI_Loop+0x1514>)
 8003a1c:	781a      	ldrb	r2, [r3, #0]
 8003a1e:	4b15      	ldr	r3, [pc, #84]	@ (8003a74 <System_UI_Loop+0x1518>)
 8003a20:	701a      	strb	r2, [r3, #0]
}
 8003a22:	bf00      	nop
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20000001 	.word	0x20000001
 8003a30:	0800b178 	.word	0x0800b178
 8003a34:	20001520 	.word	0x20001520
 8003a38:	c2b40000 	.word	0xc2b40000
 8003a3c:	41e80000 	.word	0x41e80000
 8003a40:	0800b180 	.word	0x0800b180
 8003a44:	42280000 	.word	0x42280000
 8003a48:	0800b188 	.word	0x0800b188
 8003a4c:	200038d8 	.word	0x200038d8
 8003a50:	0800b194 	.word	0x0800b194
 8003a54:	20001b14 	.word	0x20001b14
 8003a58:	0800b1ac 	.word	0x0800b1ac
 8003a5c:	20002cf0 	.word	0x20002cf0
 8003a60:	0800b1d8 	.word	0x0800b1d8
 8003a64:	20002108 	.word	0x20002108
 8003a68:	0800b1ec 	.word	0x0800b1ec
 8003a6c:	200026fc 	.word	0x200026fc
 8003a70:	20000002 	.word	0x20000002
 8003a74:	20000b1a 	.word	0x20000b1a

08003a78 <SystemGetsSignal>:

void SystemGetsSignal() // 这里是旋钮数据的获取
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af02      	add	r7, sp, #8
#pragma region 管理翻页
    static uint16_t preCount = 32767;
    uint16_t pageCount;
    if (currentPage == UI_PAGE_MENU)
 8003a7e:	4ba6      	ldr	r3, [pc, #664]	@ (8003d18 <SystemGetsSignal+0x2a0>)
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d102      	bne.n	8003a8c <SystemGetsSignal+0x14>
    {
        pageCount = MainMenuItemCount;
 8003a86:	2305      	movs	r3, #5
 8003a88:	80fb      	strh	r3, [r7, #6]
 8003a8a:	e01a      	b.n	8003ac2 <SystemGetsSignal+0x4a>
    }
    else if (currentPage == UI_PAGE_SETTINGS)
 8003a8c:	4ba2      	ldr	r3, [pc, #648]	@ (8003d18 <SystemGetsSignal+0x2a0>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d102      	bne.n	8003a9a <SystemGetsSignal+0x22>
    {
        pageCount = SettingsItemCount;
 8003a94:	2303      	movs	r3, #3
 8003a96:	80fb      	strh	r3, [r7, #6]
 8003a98:	e013      	b.n	8003ac2 <SystemGetsSignal+0x4a>
    }
    else if (currentPage == UI_PAGE_ABOUT)
 8003a9a:	4b9f      	ldr	r3, [pc, #636]	@ (8003d18 <SystemGetsSignal+0x2a0>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d102      	bne.n	8003aa8 <SystemGetsSignal+0x30>
    {
        pageCount = AboutItemCount;
 8003aa2:	2306      	movs	r3, #6
 8003aa4:	80fb      	strh	r3, [r7, #6]
 8003aa6:	e00c      	b.n	8003ac2 <SystemGetsSignal+0x4a>
    }
    else if (currentPage == UI_PAGE_TOOLS)
 8003aa8:	4b9b      	ldr	r3, [pc, #620]	@ (8003d18 <SystemGetsSignal+0x2a0>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d102      	bne.n	8003ab6 <SystemGetsSignal+0x3e>
    {
        pageCount = ToolsItemCount;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	80fb      	strh	r3, [r7, #6]
 8003ab4:	e005      	b.n	8003ac2 <SystemGetsSignal+0x4a>
    }
    else if (currentPage == UI_PAGE_GAMES)
 8003ab6:	4b98      	ldr	r3, [pc, #608]	@ (8003d18 <SystemGetsSignal+0x2a0>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b05      	cmp	r3, #5
 8003abc:	d101      	bne.n	8003ac2 <SystemGetsSignal+0x4a>
    {
        pageCount = GamesItemCount;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	80fb      	strh	r3, [r7, #6]
    }

    if (!cancelSelection)
 8003ac2:	4b96      	ldr	r3, [pc, #600]	@ (8003d1c <SystemGetsSignal+0x2a4>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	f083 0301 	eor.w	r3, r3, #1
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d039      	beq.n	8003b44 <SystemGetsSignal+0xcc>
    {
        if (count - preCount > 1)
 8003ad0:	4b93      	ldr	r3, [pc, #588]	@ (8003d20 <SystemGetsSignal+0x2a8>)
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4b93      	ldr	r3, [pc, #588]	@ (8003d24 <SystemGetsSignal+0x2ac>)
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	dd14      	ble.n	8003b0a <SystemGetsSignal+0x92>
        {
            if (menuSelection < pageCount)
 8003ae0:	4b91      	ldr	r3, [pc, #580]	@ (8003d28 <SystemGetsSignal+0x2b0>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d906      	bls.n	8003afa <SystemGetsSignal+0x82>
            {
                menuSelection++;
 8003aec:	4b8e      	ldr	r3, [pc, #568]	@ (8003d28 <SystemGetsSignal+0x2b0>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	3301      	adds	r3, #1
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	4b8c      	ldr	r3, [pc, #560]	@ (8003d28 <SystemGetsSignal+0x2b0>)
 8003af6:	701a      	strb	r2, [r3, #0]
 8003af8:	e002      	b.n	8003b00 <SystemGetsSignal+0x88>
            }
            else
            {
                menuSelection = 1;
 8003afa:	4b8b      	ldr	r3, [pc, #556]	@ (8003d28 <SystemGetsSignal+0x2b0>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	701a      	strb	r2, [r3, #0]
            }

            preCount = count;
 8003b00:	4b87      	ldr	r3, [pc, #540]	@ (8003d20 <SystemGetsSignal+0x2a8>)
 8003b02:	881a      	ldrh	r2, [r3, #0]
 8003b04:	4b87      	ldr	r3, [pc, #540]	@ (8003d24 <SystemGetsSignal+0x2ac>)
 8003b06:	801a      	strh	r2, [r3, #0]
 8003b08:	e020      	b.n	8003b4c <SystemGetsSignal+0xd4>
        }
        else if (count - preCount < -1)
 8003b0a:	4b85      	ldr	r3, [pc, #532]	@ (8003d20 <SystemGetsSignal+0x2a8>)
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	4b84      	ldr	r3, [pc, #528]	@ (8003d24 <SystemGetsSignal+0x2ac>)
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1a:	da17      	bge.n	8003b4c <SystemGetsSignal+0xd4>
        {

            if (menuSelection > 1)
 8003b1c:	4b82      	ldr	r3, [pc, #520]	@ (8003d28 <SystemGetsSignal+0x2b0>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d906      	bls.n	8003b32 <SystemGetsSignal+0xba>
            {
                menuSelection--;
 8003b24:	4b80      	ldr	r3, [pc, #512]	@ (8003d28 <SystemGetsSignal+0x2b0>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	4b7e      	ldr	r3, [pc, #504]	@ (8003d28 <SystemGetsSignal+0x2b0>)
 8003b2e:	701a      	strb	r2, [r3, #0]
 8003b30:	e003      	b.n	8003b3a <SystemGetsSignal+0xc2>
            }
            else
            {
                menuSelection = pageCount;
 8003b32:	88fb      	ldrh	r3, [r7, #6]
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	4b7c      	ldr	r3, [pc, #496]	@ (8003d28 <SystemGetsSignal+0x2b0>)
 8003b38:	701a      	strb	r2, [r3, #0]
            }

            preCount = count;
 8003b3a:	4b79      	ldr	r3, [pc, #484]	@ (8003d20 <SystemGetsSignal+0x2a8>)
 8003b3c:	881a      	ldrh	r2, [r3, #0]
 8003b3e:	4b79      	ldr	r3, [pc, #484]	@ (8003d24 <SystemGetsSignal+0x2ac>)
 8003b40:	801a      	strh	r2, [r3, #0]
 8003b42:	e003      	b.n	8003b4c <SystemGetsSignal+0xd4>
        }
    }
    else
        preCount = count;
 8003b44:	4b76      	ldr	r3, [pc, #472]	@ (8003d20 <SystemGetsSignal+0x2a8>)
 8003b46:	881a      	ldrh	r2, [r3, #0]
 8003b48:	4b76      	ldr	r3, [pc, #472]	@ (8003d24 <SystemGetsSignal+0x2ac>)
 8003b4a:	801a      	strh	r2, [r3, #0]

#pragma endregion 管理翻页

    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8003b4c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b50:	4876      	ldr	r0, [pc, #472]	@ (8003d2c <SystemGetsSignal+0x2b4>)
 8003b52:	f002 fd6f 	bl	8006634 <HAL_GPIO_ReadPin>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f040 8363 	bne.w	8004224 <SystemGetsSignal+0x7ac>
    {
        HAL_Delay(50); // 防抖动延时
 8003b5e:	2032      	movs	r0, #50	@ 0x32
 8003b60:	f002 f952 	bl	8005e08 <HAL_Delay>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && !gameOver && !game2048_game_over)
 8003b64:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b68:	4870      	ldr	r0, [pc, #448]	@ (8003d2c <SystemGetsSignal+0x2b4>)
 8003b6a:	f002 fd63 	bl	8006634 <HAL_GPIO_ReadPin>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f040 8357 	bne.w	8004224 <SystemGetsSignal+0x7ac>
 8003b76:	4b6e      	ldr	r3, [pc, #440]	@ (8003d30 <SystemGetsSignal+0x2b8>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	f083 0301 	eor.w	r3, r3, #1
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 834f 	beq.w	8004224 <SystemGetsSignal+0x7ac>
 8003b86:	4b6b      	ldr	r3, [pc, #428]	@ (8003d34 <SystemGetsSignal+0x2bc>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	f083 0301 	eor.w	r3, r3, #1
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 8347 	beq.w	8004224 <SystemGetsSignal+0x7ac>
        {
            if (menuRank == 1 && menuSelection == 1)
 8003b96:	4b68      	ldr	r3, [pc, #416]	@ (8003d38 <SystemGetsSignal+0x2c0>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	f040 80ea 	bne.w	8003d74 <SystemGetsSignal+0x2fc>
 8003ba0:	4b61      	ldr	r3, [pc, #388]	@ (8003d28 <SystemGetsSignal+0x2b0>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	f040 80e5 	bne.w	8003d74 <SystemGetsSignal+0x2fc>
            {
                menuRank = 2;
 8003baa:	4b63      	ldr	r3, [pc, #396]	@ (8003d38 <SystemGetsSignal+0x2c0>)
 8003bac:	2202      	movs	r2, #2
 8003bae:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8003bb0:	4b59      	ldr	r3, [pc, #356]	@ (8003d18 <SystemGetsSignal+0x2a0>)
 8003bb2:	2205      	movs	r2, #5
 8003bb4:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 1000, EASE_IN_CIRC);
 8003bb6:	4b5c      	ldr	r3, [pc, #368]	@ (8003d28 <SystemGetsSignal+0x2b0>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	f1c3 0202 	rsb	r2, r3, #2
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3303      	adds	r3, #3
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fc fb8a 	bl	80002e4 <__aeabi_i2f>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	220a      	movs	r2, #10
 8003bd4:	9201      	str	r2, [sp, #4]
 8003bd6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003bda:	9200      	str	r2, [sp, #0]
 8003bdc:	4a57      	ldr	r2, [pc, #348]	@ (8003d3c <SystemGetsSignal+0x2c4>)
 8003bde:	4958      	ldr	r1, [pc, #352]	@ (8003d40 <SystemGetsSignal+0x2c8>)
 8003be0:	4858      	ldr	r0, [pc, #352]	@ (8003d44 <SystemGetsSignal+0x2cc>)
 8003be2:	f001 fc63 	bl	80054ac <OLED_DoTweenObject>
                HAL_Delay(100);
 8003be6:	2064      	movs	r0, #100	@ 0x64
 8003be8:	f002 f90e 	bl	8005e08 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 1000, EASE_IN_CIRC);
 8003bec:	4b4e      	ldr	r3, [pc, #312]	@ (8003d28 <SystemGetsSignal+0x2b0>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	f1c3 0203 	rsb	r2, r3, #3
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3303      	adds	r3, #3
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fc fb6f 	bl	80002e4 <__aeabi_i2f>
 8003c06:	4603      	mov	r3, r0
 8003c08:	220a      	movs	r2, #10
 8003c0a:	9201      	str	r2, [sp, #4]
 8003c0c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c10:	9200      	str	r2, [sp, #0]
 8003c12:	4a4a      	ldr	r2, [pc, #296]	@ (8003d3c <SystemGetsSignal+0x2c4>)
 8003c14:	494c      	ldr	r1, [pc, #304]	@ (8003d48 <SystemGetsSignal+0x2d0>)
 8003c16:	484b      	ldr	r0, [pc, #300]	@ (8003d44 <SystemGetsSignal+0x2cc>)
 8003c18:	f001 fc48 	bl	80054ac <OLED_DoTweenObject>
                HAL_Delay(100);
 8003c1c:	2064      	movs	r0, #100	@ 0x64
 8003c1e:	f002 f8f3 	bl	8005e08 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 1000, EASE_IN_CIRC);
 8003c22:	4b41      	ldr	r3, [pc, #260]	@ (8003d28 <SystemGetsSignal+0x2b0>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	f1c3 0204 	rsb	r2, r3, #4
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	3303      	adds	r3, #3
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fc fb54 	bl	80002e4 <__aeabi_i2f>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	220a      	movs	r2, #10
 8003c40:	9201      	str	r2, [sp, #4]
 8003c42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c46:	9200      	str	r2, [sp, #0]
 8003c48:	4a3c      	ldr	r2, [pc, #240]	@ (8003d3c <SystemGetsSignal+0x2c4>)
 8003c4a:	4940      	ldr	r1, [pc, #256]	@ (8003d4c <SystemGetsSignal+0x2d4>)
 8003c4c:	483d      	ldr	r0, [pc, #244]	@ (8003d44 <SystemGetsSignal+0x2cc>)
 8003c4e:	f001 fc2d 	bl	80054ac <OLED_DoTweenObject>
                HAL_Delay(100);
 8003c52:	2064      	movs	r0, #100	@ 0x64
 8003c54:	f002 f8d8 	bl	8005e08 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), 1000, EASE_IN_CIRC);
 8003c58:	4b33      	ldr	r3, [pc, #204]	@ (8003d28 <SystemGetsSignal+0x2b0>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	f1c3 0205 	rsb	r2, r3, #5
 8003c60:	4613      	mov	r3, r2
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	3303      	adds	r3, #3
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fc fb39 	bl	80002e4 <__aeabi_i2f>
 8003c72:	4603      	mov	r3, r0
 8003c74:	220a      	movs	r2, #10
 8003c76:	9201      	str	r2, [sp, #4]
 8003c78:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c7c:	9200      	str	r2, [sp, #0]
 8003c7e:	4a2f      	ldr	r2, [pc, #188]	@ (8003d3c <SystemGetsSignal+0x2c4>)
 8003c80:	4933      	ldr	r1, [pc, #204]	@ (8003d50 <SystemGetsSignal+0x2d8>)
 8003c82:	4830      	ldr	r0, [pc, #192]	@ (8003d44 <SystemGetsSignal+0x2cc>)
 8003c84:	f001 fc12 	bl	80054ac <OLED_DoTweenObject>
                HAL_Delay(100);
 8003c88:	2064      	movs	r0, #100	@ 0x64
 8003c8a:	f002 f8bd 	bl	8005e08 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), 1000, EASE_IN_CIRC);
 8003c8e:	4b26      	ldr	r3, [pc, #152]	@ (8003d28 <SystemGetsSignal+0x2b0>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	f1c3 0206 	rsb	r2, r3, #6
 8003c96:	4613      	mov	r3, r2
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	3303      	adds	r3, #3
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fc fb1e 	bl	80002e4 <__aeabi_i2f>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	220a      	movs	r2, #10
 8003cac:	9201      	str	r2, [sp, #4]
 8003cae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003cb2:	9200      	str	r2, [sp, #0]
 8003cb4:	4a21      	ldr	r2, [pc, #132]	@ (8003d3c <SystemGetsSignal+0x2c4>)
 8003cb6:	4927      	ldr	r1, [pc, #156]	@ (8003d54 <SystemGetsSignal+0x2dc>)
 8003cb8:	4822      	ldr	r0, [pc, #136]	@ (8003d44 <SystemGetsSignal+0x2cc>)
 8003cba:	f001 fbf7 	bl	80054ac <OLED_DoTweenObject>

                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003cbe:	230a      	movs	r3, #10
 8003cc0:	9301      	str	r3, [sp, #4]
 8003cc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003ccc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003cd0:	4921      	ldr	r1, [pc, #132]	@ (8003d58 <SystemGetsSignal+0x2e0>)
 8003cd2:	4822      	ldr	r0, [pc, #136]	@ (8003d5c <SystemGetsSignal+0x2e4>)
 8003cd4:	f001 fbea 	bl	80054ac <OLED_DoTweenObject>
                HAL_Delay(100);
 8003cd8:	2064      	movs	r0, #100	@ 0x64
 8003cda:	f002 f895 	bl	8005e08 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8003cde:	230a      	movs	r3, #10
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d60 <SystemGetsSignal+0x2e8>)
 8003cea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003cee:	491d      	ldr	r1, [pc, #116]	@ (8003d64 <SystemGetsSignal+0x2ec>)
 8003cf0:	481a      	ldr	r0, [pc, #104]	@ (8003d5c <SystemGetsSignal+0x2e4>)
 8003cf2:	f001 fbdb 	bl	80054ac <OLED_DoTweenObject>
                HAL_Delay(100);
 8003cf6:	2064      	movs	r0, #100	@ 0x64
 8003cf8:	f002 f886 	bl	8005e08 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 8003cfc:	230a      	movs	r3, #10
 8003cfe:	9301      	str	r3, [sp, #4]
 8003d00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	4b18      	ldr	r3, [pc, #96]	@ (8003d68 <SystemGetsSignal+0x2f0>)
 8003d08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003d0c:	4917      	ldr	r1, [pc, #92]	@ (8003d6c <SystemGetsSignal+0x2f4>)
 8003d0e:	4818      	ldr	r0, [pc, #96]	@ (8003d70 <SystemGetsSignal+0x2f8>)
 8003d10:	f001 fbcc 	bl	80054ac <OLED_DoTweenObject>
 8003d14:	e27d      	b.n	8004212 <SystemGetsSignal+0x79a>
 8003d16:	bf00      	nop
 8003d18:	20000b19 	.word	0x20000b19
 8003d1c:	20000b1b 	.word	0x20000b1b
 8003d20:	20000304 	.word	0x20000304
 8003d24:	20000004 	.word	0x20000004
 8003d28:	20000002 	.word	0x20000002
 8003d2c:	40010c00 	.word	0x40010c00
 8003d30:	20000236 	.word	0x20000236
 8003d34:	20000260 	.word	0x20000260
 8003d38:	20000001 	.word	0x20000001
 8003d3c:	c2b40000 	.word	0xc2b40000
 8003d40:	0800b23c 	.word	0x0800b23c
 8003d44:	20000f2c 	.word	0x20000f2c
 8003d48:	0800b248 	.word	0x0800b248
 8003d4c:	0800b254 	.word	0x0800b254
 8003d50:	0800b264 	.word	0x0800b264
 8003d54:	0800b274 	.word	0x0800b274
 8003d58:	0800b178 	.word	0x0800b178
 8003d5c:	20001520 	.word	0x20001520
 8003d60:	41e80000 	.word	0x41e80000
 8003d64:	0800b180 	.word	0x0800b180
 8003d68:	42280000 	.word	0x42280000
 8003d6c:	0800b188 	.word	0x0800b188
 8003d70:	200038d8 	.word	0x200038d8
            }
            else if (menuRank == 2 && menuSelection == 3)
 8003d74:	4ba7      	ldr	r3, [pc, #668]	@ (8004014 <SystemGetsSignal+0x59c>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d17e      	bne.n	8003e7a <SystemGetsSignal+0x402>
 8003d7c:	4ba6      	ldr	r3, [pc, #664]	@ (8004018 <SystemGetsSignal+0x5a0>)
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d17a      	bne.n	8003e7a <SystemGetsSignal+0x402>
            {
                menuRank = 1;
 8003d84:	4ba3      	ldr	r3, [pc, #652]	@ (8004014 <SystemGetsSignal+0x59c>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	701a      	strb	r2, [r3, #0]
                menuSelection = 1;
 8003d8a:	4ba3      	ldr	r3, [pc, #652]	@ (8004018 <SystemGetsSignal+0x5a0>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_MENU;
 8003d90:	4ba2      	ldr	r3, [pc, #648]	@ (800401c <SystemGetsSignal+0x5a4>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, 1000, EASE_IN_CIRC);
 8003d96:	230a      	movs	r3, #10
 8003d98:	9301      	str	r3, [sp, #4]
 8003d9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	4b9f      	ldr	r3, [pc, #636]	@ (8004020 <SystemGetsSignal+0x5a8>)
 8003da2:	4aa0      	ldr	r2, [pc, #640]	@ (8004024 <SystemGetsSignal+0x5ac>)
 8003da4:	49a0      	ldr	r1, [pc, #640]	@ (8004028 <SystemGetsSignal+0x5b0>)
 8003da6:	48a1      	ldr	r0, [pc, #644]	@ (800402c <SystemGetsSignal+0x5b4>)
 8003da8:	f001 fb80 	bl	80054ac <OLED_DoTweenObject>
                HAL_Delay(100);
 8003dac:	2064      	movs	r0, #100	@ 0x64
 8003dae:	f002 f82b 	bl	8005e08 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, 1000, EASE_IN_CIRC);
 8003db2:	230a      	movs	r3, #10
 8003db4:	9301      	str	r3, [sp, #4]
 8003db6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	4b9c      	ldr	r3, [pc, #624]	@ (8004030 <SystemGetsSignal+0x5b8>)
 8003dbe:	4a99      	ldr	r2, [pc, #612]	@ (8004024 <SystemGetsSignal+0x5ac>)
 8003dc0:	499c      	ldr	r1, [pc, #624]	@ (8004034 <SystemGetsSignal+0x5bc>)
 8003dc2:	489a      	ldr	r0, [pc, #616]	@ (800402c <SystemGetsSignal+0x5b4>)
 8003dc4:	f001 fb72 	bl	80054ac <OLED_DoTweenObject>
                HAL_Delay(100);
 8003dc8:	2064      	movs	r0, #100	@ 0x64
 8003dca:	f002 f81d 	bl	8005e08 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003dce:	230a      	movs	r3, #10
 8003dd0:	9301      	str	r3, [sp, #4]
 8003dd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003ddc:	4a91      	ldr	r2, [pc, #580]	@ (8004024 <SystemGetsSignal+0x5ac>)
 8003dde:	4996      	ldr	r1, [pc, #600]	@ (8004038 <SystemGetsSignal+0x5c0>)
 8003de0:	4896      	ldr	r0, [pc, #600]	@ (800403c <SystemGetsSignal+0x5c4>)
 8003de2:	f001 fb63 	bl	80054ac <OLED_DoTweenObject>

                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003de6:	230a      	movs	r3, #10
 8003de8:	9301      	str	r3, [sp, #4]
 8003dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003df4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003df8:	4991      	ldr	r1, [pc, #580]	@ (8004040 <SystemGetsSignal+0x5c8>)
 8003dfa:	4892      	ldr	r0, [pc, #584]	@ (8004044 <SystemGetsSignal+0x5cc>)
 8003dfc:	f001 fb56 	bl	80054ac <OLED_DoTweenObject>
                HAL_Delay(100);
 8003e00:	2064      	movs	r0, #100	@ 0x64
 8003e02:	f002 f801 	bl	8005e08 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8003e06:	230a      	movs	r3, #10
 8003e08:	9301      	str	r3, [sp, #4]
 8003e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	4b8d      	ldr	r3, [pc, #564]	@ (8004048 <SystemGetsSignal+0x5d0>)
 8003e12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003e16:	498d      	ldr	r1, [pc, #564]	@ (800404c <SystemGetsSignal+0x5d4>)
 8003e18:	488a      	ldr	r0, [pc, #552]	@ (8004044 <SystemGetsSignal+0x5cc>)
 8003e1a:	f001 fb47 	bl	80054ac <OLED_DoTweenObject>
                HAL_Delay(100);
 8003e1e:	2064      	movs	r0, #100	@ 0x64
 8003e20:	f001 fff2 	bl	8005e08 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 8003e24:	230a      	movs	r3, #10
 8003e26:	9301      	str	r3, [sp, #4]
 8003e28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	4b88      	ldr	r3, [pc, #544]	@ (8004050 <SystemGetsSignal+0x5d8>)
 8003e30:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003e34:	4987      	ldr	r1, [pc, #540]	@ (8004054 <SystemGetsSignal+0x5dc>)
 8003e36:	4883      	ldr	r0, [pc, #524]	@ (8004044 <SystemGetsSignal+0x5cc>)
 8003e38:	f001 fb38 	bl	80054ac <OLED_DoTweenObject>
                HAL_Delay(100);
 8003e3c:	2064      	movs	r0, #100	@ 0x64
 8003e3e:	f001 ffe3 	bl	8005e08 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, 1000, EASE_IN_CIRC);
 8003e42:	230a      	movs	r3, #10
 8003e44:	9301      	str	r3, [sp, #4]
 8003e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	4b82      	ldr	r3, [pc, #520]	@ (8004058 <SystemGetsSignal+0x5e0>)
 8003e4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003e52:	4982      	ldr	r1, [pc, #520]	@ (800405c <SystemGetsSignal+0x5e4>)
 8003e54:	487b      	ldr	r0, [pc, #492]	@ (8004044 <SystemGetsSignal+0x5cc>)
 8003e56:	f001 fb29 	bl	80054ac <OLED_DoTweenObject>
                HAL_Delay(100);
 8003e5a:	2064      	movs	r0, #100	@ 0x64
 8003e5c:	f001 ffd4 	bl	8005e08 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, 1000, EASE_IN_CIRC);
 8003e60:	230a      	movs	r3, #10
 8003e62:	9301      	str	r3, [sp, #4]
 8003e64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	4b7d      	ldr	r3, [pc, #500]	@ (8004060 <SystemGetsSignal+0x5e8>)
 8003e6c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003e70:	497c      	ldr	r1, [pc, #496]	@ (8004064 <SystemGetsSignal+0x5ec>)
 8003e72:	4874      	ldr	r0, [pc, #464]	@ (8004044 <SystemGetsSignal+0x5cc>)
 8003e74:	f001 fb1a 	bl	80054ac <OLED_DoTweenObject>
 8003e78:	e1cb      	b.n	8004212 <SystemGetsSignal+0x79a>
            }
            else if (menuRank == 2 && menuSelection == 1)
 8003e7a:	4b66      	ldr	r3, [pc, #408]	@ (8004014 <SystemGetsSignal+0x59c>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d158      	bne.n	8003f34 <SystemGetsSignal+0x4bc>
 8003e82:	4b65      	ldr	r3, [pc, #404]	@ (8004018 <SystemGetsSignal+0x5a0>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d154      	bne.n	8003f34 <SystemGetsSignal+0x4bc>
            {
                menuRank = 3;
 8003e8a:	4b62      	ldr	r3, [pc, #392]	@ (8004014 <SystemGetsSignal+0x59c>)
 8003e8c:	2203      	movs	r2, #3
 8003e8e:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8003e90:	4b62      	ldr	r3, [pc, #392]	@ (800401c <SystemGetsSignal+0x5a4>)
 8003e92:	2205      	movs	r2, #5
 8003e94:	701a      	strb	r2, [r3, #0]
                Snake_InitGame();
 8003e96:	f7fc fd2d 	bl	80008f4 <Snake_InitGame>
                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8003e9a:	2304      	movs	r3, #4
 8003e9c:	9301      	str	r3, [sp, #4]
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	4b5f      	ldr	r3, [pc, #380]	@ (8004020 <SystemGetsSignal+0x5a8>)
 8003ea4:	4a70      	ldr	r2, [pc, #448]	@ (8004068 <SystemGetsSignal+0x5f0>)
 8003ea6:	4971      	ldr	r1, [pc, #452]	@ (800406c <SystemGetsSignal+0x5f4>)
 8003ea8:	4871      	ldr	r0, [pc, #452]	@ (8004070 <SystemGetsSignal+0x5f8>)
 8003eaa:	f001 faff 	bl	80054ac <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, 1000, EASE_IN_CUBIC);
 8003eae:	2304      	movs	r3, #4
 8003eb0:	9301      	str	r3, [sp, #4]
 8003eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	496c      	ldr	r1, [pc, #432]	@ (8004074 <SystemGetsSignal+0x5fc>)
 8003ec2:	485e      	ldr	r0, [pc, #376]	@ (800403c <SystemGetsSignal+0x5c4>)
 8003ec4:	f001 faf2 	bl	80054ac <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", 0, 8, 1000, EASE_INOUT_CIRC);
 8003ec8:	230c      	movs	r3, #12
 8003eca:	9301      	str	r3, [sp, #4]
 8003ecc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	4967      	ldr	r1, [pc, #412]	@ (8004078 <SystemGetsSignal+0x600>)
 8003edc:	4857      	ldr	r0, [pc, #348]	@ (800403c <SystemGetsSignal+0x5c4>)
 8003ede:	f001 fae5 	bl	80054ac <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003ee2:	230a      	movs	r3, #10
 8003ee4:	9301      	str	r3, [sp, #4]
 8003ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003ef0:	4a4c      	ldr	r2, [pc, #304]	@ (8004024 <SystemGetsSignal+0x5ac>)
 8003ef2:	494d      	ldr	r1, [pc, #308]	@ (8004028 <SystemGetsSignal+0x5b0>)
 8003ef4:	484d      	ldr	r0, [pc, #308]	@ (800402c <SystemGetsSignal+0x5b4>)
 8003ef6:	f001 fad9 	bl	80054ac <OLED_DoTweenObject>
                HAL_Delay(100);
 8003efa:	2064      	movs	r0, #100	@ 0x64
 8003efc:	f001 ff84 	bl	8005e08 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8003f00:	230a      	movs	r3, #10
 8003f02:	9301      	str	r3, [sp, #4]
 8003f04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	4b4f      	ldr	r3, [pc, #316]	@ (8004048 <SystemGetsSignal+0x5d0>)
 8003f0c:	4a45      	ldr	r2, [pc, #276]	@ (8004024 <SystemGetsSignal+0x5ac>)
 8003f0e:	4949      	ldr	r1, [pc, #292]	@ (8004034 <SystemGetsSignal+0x5bc>)
 8003f10:	4846      	ldr	r0, [pc, #280]	@ (800402c <SystemGetsSignal+0x5b4>)
 8003f12:	f001 facb 	bl	80054ac <OLED_DoTweenObject>
                HAL_Delay(100);
 8003f16:	2064      	movs	r0, #100	@ 0x64
 8003f18:	f001 ff76 	bl	8005e08 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 8003f1c:	230a      	movs	r3, #10
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	4b4a      	ldr	r3, [pc, #296]	@ (8004050 <SystemGetsSignal+0x5d8>)
 8003f28:	4a3e      	ldr	r2, [pc, #248]	@ (8004024 <SystemGetsSignal+0x5ac>)
 8003f2a:	4943      	ldr	r1, [pc, #268]	@ (8004038 <SystemGetsSignal+0x5c0>)
 8003f2c:	4843      	ldr	r0, [pc, #268]	@ (800403c <SystemGetsSignal+0x5c4>)
 8003f2e:	f001 fabd 	bl	80054ac <OLED_DoTweenObject>
 8003f32:	e16e      	b.n	8004212 <SystemGetsSignal+0x79a>
            }
            else if (menuRank == 3 && menuSelection == 1 && cancelSelection && UI_PAGE_GAMES && !gameOver)
 8003f34:	4b37      	ldr	r3, [pc, #220]	@ (8004014 <SystemGetsSignal+0x59c>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b03      	cmp	r3, #3
 8003f3a:	f040 80a9 	bne.w	8004090 <SystemGetsSignal+0x618>
 8003f3e:	4b36      	ldr	r3, [pc, #216]	@ (8004018 <SystemGetsSignal+0x5a0>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	f040 80a4 	bne.w	8004090 <SystemGetsSignal+0x618>
 8003f48:	4b4c      	ldr	r3, [pc, #304]	@ (800407c <SystemGetsSignal+0x604>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 809f 	beq.w	8004090 <SystemGetsSignal+0x618>
 8003f52:	4b4b      	ldr	r3, [pc, #300]	@ (8004080 <SystemGetsSignal+0x608>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	f083 0301 	eor.w	r3, r3, #1
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 8097 	beq.w	8004090 <SystemGetsSignal+0x618>
            {
                menuRank = 2;
 8003f62:	4b2c      	ldr	r3, [pc, #176]	@ (8004014 <SystemGetsSignal+0x59c>)
 8003f64:	2202      	movs	r2, #2
 8003f66:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8003f68:	4b2c      	ldr	r3, [pc, #176]	@ (800401c <SystemGetsSignal+0x5a4>)
 8003f6a:	2205      	movs	r2, #5
 8003f6c:	701a      	strb	r2, [r3, #0]
                
                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_End_Y, 1000, EASE_IN_CUBIC);
 8003f6e:	2304      	movs	r3, #4
 8003f70:	9301      	str	r3, [sp, #4]
 8003f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	4a3a      	ldr	r2, [pc, #232]	@ (8004068 <SystemGetsSignal+0x5f0>)
 8003f7e:	493b      	ldr	r1, [pc, #236]	@ (800406c <SystemGetsSignal+0x5f4>)
 8003f80:	483b      	ldr	r0, [pc, #236]	@ (8004070 <SystemGetsSignal+0x5f8>)
 8003f82:	f001 fa93 	bl	80054ac <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Greedy Snake") * 6 + 3, 8, 1000, EASE_IN_CUBIC);
 8003f86:	2304      	movs	r3, #4
 8003f88:	9301      	str	r3, [sp, #4]
 8003f8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003f94:	4a3b      	ldr	r2, [pc, #236]	@ (8004084 <SystemGetsSignal+0x60c>)
 8003f96:	4937      	ldr	r1, [pc, #220]	@ (8004074 <SystemGetsSignal+0x5fc>)
 8003f98:	4828      	ldr	r0, [pc, #160]	@ (800403c <SystemGetsSignal+0x5c4>)
 8003f9a:	f001 fa87 	bl	80054ac <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Snake") * 6 + 3, 10, 1000, EASE_INOUT_CIRC);
 8003f9e:	230c      	movs	r3, #12
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	4b37      	ldr	r3, [pc, #220]	@ (8004088 <SystemGetsSignal+0x610>)
 8003faa:	4a38      	ldr	r2, [pc, #224]	@ (800408c <SystemGetsSignal+0x614>)
 8003fac:	4932      	ldr	r1, [pc, #200]	@ (8004078 <SystemGetsSignal+0x600>)
 8003fae:	4823      	ldr	r0, [pc, #140]	@ (800403c <SystemGetsSignal+0x5c4>)
 8003fb0:	f001 fa7c 	bl	80054ac <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003fb4:	230a      	movs	r3, #10
 8003fb6:	9301      	str	r3, [sp, #4]
 8003fb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003fc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003fc6:	4918      	ldr	r1, [pc, #96]	@ (8004028 <SystemGetsSignal+0x5b0>)
 8003fc8:	4818      	ldr	r0, [pc, #96]	@ (800402c <SystemGetsSignal+0x5b4>)
 8003fca:	f001 fa6f 	bl	80054ac <OLED_DoTweenObject>
                HAL_Delay(100);
 8003fce:	2064      	movs	r0, #100	@ 0x64
 8003fd0:	f001 ff1a 	bl	8005e08 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8003fd4:	230a      	movs	r3, #10
 8003fd6:	9301      	str	r3, [sp, #4]
 8003fd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	4b1a      	ldr	r3, [pc, #104]	@ (8004048 <SystemGetsSignal+0x5d0>)
 8003fe0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003fe4:	4913      	ldr	r1, [pc, #76]	@ (8004034 <SystemGetsSignal+0x5bc>)
 8003fe6:	4811      	ldr	r0, [pc, #68]	@ (800402c <SystemGetsSignal+0x5b4>)
 8003fe8:	f001 fa60 	bl	80054ac <OLED_DoTweenObject>
                HAL_Delay(100);
 8003fec:	2064      	movs	r0, #100	@ 0x64
 8003fee:	f001 ff0b 	bl	8005e08 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 8003ff2:	230a      	movs	r3, #10
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	4b14      	ldr	r3, [pc, #80]	@ (8004050 <SystemGetsSignal+0x5d8>)
 8003ffe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004002:	490d      	ldr	r1, [pc, #52]	@ (8004038 <SystemGetsSignal+0x5c0>)
 8004004:	480d      	ldr	r0, [pc, #52]	@ (800403c <SystemGetsSignal+0x5c4>)
 8004006:	f001 fa51 	bl	80054ac <OLED_DoTweenObject>
                cancelSelection = false;
 800400a:	4b1c      	ldr	r3, [pc, #112]	@ (800407c <SystemGetsSignal+0x604>)
 800400c:	2200      	movs	r2, #0
 800400e:	701a      	strb	r2, [r3, #0]
 8004010:	e0ff      	b.n	8004212 <SystemGetsSignal+0x79a>
 8004012:	bf00      	nop
 8004014:	20000001 	.word	0x20000001
 8004018:	20000002 	.word	0x20000002
 800401c:	20000b19 	.word	0x20000b19
 8004020:	c1200000 	.word	0xc1200000
 8004024:	c2b40000 	.word	0xc2b40000
 8004028:	0800b178 	.word	0x0800b178
 800402c:	20001520 	.word	0x20001520
 8004030:	40400000 	.word	0x40400000
 8004034:	0800b180 	.word	0x0800b180
 8004038:	0800b188 	.word	0x0800b188
 800403c:	200038d8 	.word	0x200038d8
 8004040:	0800b23c 	.word	0x0800b23c
 8004044:	20000f2c 	.word	0x20000f2c
 8004048:	41e80000 	.word	0x41e80000
 800404c:	0800b248 	.word	0x0800b248
 8004050:	42280000 	.word	0x42280000
 8004054:	0800b254 	.word	0x0800b254
 8004058:	425c0000 	.word	0x425c0000
 800405c:	0800b264 	.word	0x0800b264
 8004060:	42880000 	.word	0x42880000
 8004064:	0800b274 	.word	0x0800b274
 8004068:	42600000 	.word	0x42600000
 800406c:	0800b094 	.word	0x0800b094
 8004070:	200032e4 	.word	0x200032e4
 8004074:	0800b218 	.word	0x0800b218
 8004078:	0800b230 	.word	0x0800b230
 800407c:	20000b1b 	.word	0x20000b1b
 8004080:	20000236 	.word	0x20000236
 8004084:	42960000 	.word	0x42960000
 8004088:	41200000 	.word	0x41200000
 800408c:	42040000 	.word	0x42040000
            }
            else if (menuRank == 2 && menuSelection == 2)
 8004090:	4b66      	ldr	r3, [pc, #408]	@ (800422c <SystemGetsSignal+0x7b4>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b02      	cmp	r3, #2
 8004096:	d152      	bne.n	800413e <SystemGetsSignal+0x6c6>
 8004098:	4b65      	ldr	r3, [pc, #404]	@ (8004230 <SystemGetsSignal+0x7b8>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b02      	cmp	r3, #2
 800409e:	d14e      	bne.n	800413e <SystemGetsSignal+0x6c6>
            {
                menuRank = 3;
 80040a0:	4b62      	ldr	r3, [pc, #392]	@ (800422c <SystemGetsSignal+0x7b4>)
 80040a2:	2203      	movs	r2, #3
 80040a4:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 80040a6:	4b63      	ldr	r3, [pc, #396]	@ (8004234 <SystemGetsSignal+0x7bc>)
 80040a8:	2205      	movs	r2, #5
 80040aa:	701a      	strb	r2, [r3, #0]
                Game2048_Init();
 80040ac:	f7fc ff1a 	bl	8000ee4 <Game2048_Init>
                OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80040b0:	2304      	movs	r3, #4
 80040b2:	9301      	str	r3, [sp, #4]
 80040b4:	2301      	movs	r3, #1
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	4b5f      	ldr	r3, [pc, #380]	@ (8004238 <SystemGetsSignal+0x7c0>)
 80040ba:	4a60      	ldr	r2, [pc, #384]	@ (800423c <SystemGetsSignal+0x7c4>)
 80040bc:	4960      	ldr	r1, [pc, #384]	@ (8004240 <SystemGetsSignal+0x7c8>)
 80040be:	4861      	ldr	r0, [pc, #388]	@ (8004244 <SystemGetsSignal+0x7cc>)
 80040c0:	f001 f9f4 	bl	80054ac <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, 1000, EASE_IN_CUBIC);
 80040c4:	2304      	movs	r3, #4
 80040c6:	9301      	str	r3, [sp, #4]
 80040c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	495c      	ldr	r1, [pc, #368]	@ (8004248 <SystemGetsSignal+0x7d0>)
 80040d8:	485c      	ldr	r0, [pc, #368]	@ (800424c <SystemGetsSignal+0x7d4>)
 80040da:	f001 f9e7 	bl	80054ac <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", 0, 8, 1000, EASE_INOUT_CIRC);
 80040de:	230c      	movs	r3, #12
 80040e0:	9301      	str	r3, [sp, #4]
 80040e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	4957      	ldr	r1, [pc, #348]	@ (8004250 <SystemGetsSignal+0x7d8>)
 80040f2:	4856      	ldr	r0, [pc, #344]	@ (800424c <SystemGetsSignal+0x7d4>)
 80040f4:	f001 f9da 	bl	80054ac <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, 1000, EASE_IN_CIRC);
 80040f8:	230a      	movs	r3, #10
 80040fa:	9301      	str	r3, [sp, #4]
 80040fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	4b54      	ldr	r3, [pc, #336]	@ (8004254 <SystemGetsSignal+0x7dc>)
 8004104:	4a54      	ldr	r2, [pc, #336]	@ (8004258 <SystemGetsSignal+0x7e0>)
 8004106:	4955      	ldr	r1, [pc, #340]	@ (800425c <SystemGetsSignal+0x7e4>)
 8004108:	4855      	ldr	r0, [pc, #340]	@ (8004260 <SystemGetsSignal+0x7e8>)
 800410a:	f001 f9cf 	bl	80054ac <OLED_DoTweenObject>
                // HAL_Delay(100);
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 800410e:	230a      	movs	r3, #10
 8004110:	9301      	str	r3, [sp, #4]
 8004112:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800411c:	4a4e      	ldr	r2, [pc, #312]	@ (8004258 <SystemGetsSignal+0x7e0>)
 800411e:	4951      	ldr	r1, [pc, #324]	@ (8004264 <SystemGetsSignal+0x7ec>)
 8004120:	484f      	ldr	r0, [pc, #316]	@ (8004260 <SystemGetsSignal+0x7e8>)
 8004122:	f001 f9c3 	bl	80054ac <OLED_DoTweenObject>
                // HAL_Delay(100);
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8004126:	230a      	movs	r3, #10
 8004128:	9301      	str	r3, [sp, #4]
 800412a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	4b4d      	ldr	r3, [pc, #308]	@ (8004268 <SystemGetsSignal+0x7f0>)
 8004132:	4a49      	ldr	r2, [pc, #292]	@ (8004258 <SystemGetsSignal+0x7e0>)
 8004134:	494d      	ldr	r1, [pc, #308]	@ (800426c <SystemGetsSignal+0x7f4>)
 8004136:	4845      	ldr	r0, [pc, #276]	@ (800424c <SystemGetsSignal+0x7d4>)
 8004138:	f001 f9b8 	bl	80054ac <OLED_DoTweenObject>
 800413c:	e069      	b.n	8004212 <SystemGetsSignal+0x79a>
            }
            else if (menuRank == 3 && menuSelection == 2 && cancelSelection && UI_PAGE_GAMES && !game2048_game_over)
 800413e:	4b3b      	ldr	r3, [pc, #236]	@ (800422c <SystemGetsSignal+0x7b4>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b03      	cmp	r3, #3
 8004144:	d165      	bne.n	8004212 <SystemGetsSignal+0x79a>
 8004146:	4b3a      	ldr	r3, [pc, #232]	@ (8004230 <SystemGetsSignal+0x7b8>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d161      	bne.n	8004212 <SystemGetsSignal+0x79a>
 800414e:	4b48      	ldr	r3, [pc, #288]	@ (8004270 <SystemGetsSignal+0x7f8>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d05d      	beq.n	8004212 <SystemGetsSignal+0x79a>
 8004156:	4b47      	ldr	r3, [pc, #284]	@ (8004274 <SystemGetsSignal+0x7fc>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	f083 0301 	eor.w	r3, r3, #1
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d056      	beq.n	8004212 <SystemGetsSignal+0x79a>
            {
                menuRank = 2;
 8004164:	4b31      	ldr	r3, [pc, #196]	@ (800422c <SystemGetsSignal+0x7b4>)
 8004166:	2202      	movs	r2, #2
 8004168:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 800416a:	4b32      	ldr	r3, [pc, #200]	@ (8004234 <SystemGetsSignal+0x7bc>)
 800416c:	2205      	movs	r2, #5
 800416e:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_End_Y, 1000, EASE_IN_CUBIC);
 8004170:	2304      	movs	r3, #4
 8004172:	9301      	str	r3, [sp, #4]
 8004174:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	4a2f      	ldr	r2, [pc, #188]	@ (800423c <SystemGetsSignal+0x7c4>)
 8004180:	492f      	ldr	r1, [pc, #188]	@ (8004240 <SystemGetsSignal+0x7c8>)
 8004182:	4830      	ldr	r0, [pc, #192]	@ (8004244 <SystemGetsSignal+0x7cc>)
 8004184:	f001 f992 	bl	80054ac <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Here is 2048!") * 6 + 3, 8, 1000, EASE_IN_CUBIC);
 8004188:	2304      	movs	r3, #4
 800418a:	9301      	str	r3, [sp, #4]
 800418c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004196:	4a38      	ldr	r2, [pc, #224]	@ (8004278 <SystemGetsSignal+0x800>)
 8004198:	492b      	ldr	r1, [pc, #172]	@ (8004248 <SystemGetsSignal+0x7d0>)
 800419a:	482c      	ldr	r0, [pc, #176]	@ (800424c <SystemGetsSignal+0x7d4>)
 800419c:	f001 f986 	bl	80054ac <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("2048") * 6 + 3, 10, 1000, EASE_INOUT_CIRC);
 80041a0:	230c      	movs	r3, #12
 80041a2:	9301      	str	r3, [sp, #4]
 80041a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	4b34      	ldr	r3, [pc, #208]	@ (800427c <SystemGetsSignal+0x804>)
 80041ac:	4a34      	ldr	r2, [pc, #208]	@ (8004280 <SystemGetsSignal+0x808>)
 80041ae:	4928      	ldr	r1, [pc, #160]	@ (8004250 <SystemGetsSignal+0x7d8>)
 80041b0:	4826      	ldr	r0, [pc, #152]	@ (800424c <SystemGetsSignal+0x7d4>)
 80041b2:	f001 f97b 	bl	80054ac <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, 1000, EASE_IN_CIRC);
 80041b6:	230a      	movs	r3, #10
 80041b8:	9301      	str	r3, [sp, #4]
 80041ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	4b24      	ldr	r3, [pc, #144]	@ (8004254 <SystemGetsSignal+0x7dc>)
 80041c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80041c6:	4925      	ldr	r1, [pc, #148]	@ (800425c <SystemGetsSignal+0x7e4>)
 80041c8:	4825      	ldr	r0, [pc, #148]	@ (8004260 <SystemGetsSignal+0x7e8>)
 80041ca:	f001 f96f 	bl	80054ac <OLED_DoTweenObject>
                HAL_Delay(100);
 80041ce:	2064      	movs	r0, #100	@ 0x64
 80041d0:	f001 fe1a 	bl	8005e08 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 80041d4:	230a      	movs	r3, #10
 80041d6:	9301      	str	r3, [sp, #4]
 80041d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80041e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80041e6:	491f      	ldr	r1, [pc, #124]	@ (8004264 <SystemGetsSignal+0x7ec>)
 80041e8:	481d      	ldr	r0, [pc, #116]	@ (8004260 <SystemGetsSignal+0x7e8>)
 80041ea:	f001 f95f 	bl	80054ac <OLED_DoTweenObject>
                HAL_Delay(100);
 80041ee:	2064      	movs	r0, #100	@ 0x64
 80041f0:	f001 fe0a 	bl	8005e08 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 80041f4:	230a      	movs	r3, #10
 80041f6:	9301      	str	r3, [sp, #4]
 80041f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004268 <SystemGetsSignal+0x7f0>)
 8004200:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004204:	4919      	ldr	r1, [pc, #100]	@ (800426c <SystemGetsSignal+0x7f4>)
 8004206:	4811      	ldr	r0, [pc, #68]	@ (800424c <SystemGetsSignal+0x7d4>)
 8004208:	f001 f950 	bl	80054ac <OLED_DoTweenObject>
                cancelSelection = false;
 800420c:	4b18      	ldr	r3, [pc, #96]	@ (8004270 <SystemGetsSignal+0x7f8>)
 800420e:	2200      	movs	r2, #0
 8004210:	701a      	strb	r2, [r3, #0]
            }


            while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8004212:	bf00      	nop
 8004214:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004218:	481a      	ldr	r0, [pc, #104]	@ (8004284 <SystemGetsSignal+0x80c>)
 800421a:	f002 fa0b 	bl	8006634 <HAL_GPIO_ReadPin>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f7      	beq.n	8004214 <SystemGetsSignal+0x79c>
            {
                // 等待按钮释放
            }
        }
    }
}
 8004224:	bf00      	nop
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20000001 	.word	0x20000001
 8004230:	20000002 	.word	0x20000002
 8004234:	20000b19 	.word	0x20000b19
 8004238:	c1200000 	.word	0xc1200000
 800423c:	42480000 	.word	0x42480000
 8004240:	0800b0a0 	.word	0x0800b0a0
 8004244:	200032e4 	.word	0x200032e4
 8004248:	0800b218 	.word	0x0800b218
 800424c:	200038d8 	.word	0x200038d8
 8004250:	0800b230 	.word	0x0800b230
 8004254:	40400000 	.word	0x40400000
 8004258:	c2b40000 	.word	0xc2b40000
 800425c:	0800b178 	.word	0x0800b178
 8004260:	20001520 	.word	0x20001520
 8004264:	0800b180 	.word	0x0800b180
 8004268:	41e80000 	.word	0x41e80000
 800426c:	0800b188 	.word	0x0800b188
 8004270:	20000b1b 	.word	0x20000b1b
 8004274:	20000260 	.word	0x20000260
 8004278:	42a20000 	.word	0x42a20000
 800427c:	41200000 	.word	0x41200000
 8004280:	41d80000 	.word	0x41d80000
 8004284:	40010c00 	.word	0x40010c00

08004288 <OLED_EnableDiffMode>:
    }
}

// 启用差分更新模式
void OLED_EnableDiffMode(uint8_t enable)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	4603      	mov	r3, r0
 8004290:	71fb      	strb	r3, [r7, #7]
    diff_mode_enabled = enable;
 8004292:	4a09      	ldr	r2, [pc, #36]	@ (80042b8 <OLED_EnableDiffMode+0x30>)
 8004294:	79fb      	ldrb	r3, [r7, #7]
 8004296:	7013      	strb	r3, [r2, #0]
    if (enable)
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d008      	beq.n	80042b0 <OLED_EnableDiffMode+0x28>
    {
        memcpy(OLED_PrevBuffer, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES);
 800429e:	4a07      	ldr	r2, [pc, #28]	@ (80042bc <OLED_EnableDiffMode+0x34>)
 80042a0:	4b07      	ldr	r3, [pc, #28]	@ (80042c0 <OLED_EnableDiffMode+0x38>)
 80042a2:	4610      	mov	r0, r2
 80042a4:	4619      	mov	r1, r3
 80042a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042aa:	461a      	mov	r2, r3
 80042ac:	f004 fc65 	bl	8008b7a <memcpy>
    }
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	20000f1c 	.word	0x20000f1c
 80042bc:	20000b1c 	.word	0x20000b1c
 80042c0:	20000318 	.word	0x20000318

080042c4 <OLED_EnableFastUpdate>:

// 设置快速更新模式
void OLED_EnableFastUpdate(uint8_t enable)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	71fb      	strb	r3, [r7, #7]
    fast_update_enabled = enable;
 80042ce:	4a04      	ldr	r2, [pc, #16]	@ (80042e0 <OLED_EnableFastUpdate+0x1c>)
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	7013      	strb	r3, [r2, #0]
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	20000006 	.word	0x20000006

080042e4 <OLED_SmartUpdate>:

// 智能更新显示
// 选择性更新脏页，以提高帧率
void OLED_SmartUpdate(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
    // 如果OLED/DMA忙，直接返回
    if (OLED_IsBusy())
 80042ea:	f7fd fc85 	bl	8001bf8 <OLED_IsBusy>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f040 8082 	bne.w	80043fa <OLED_SmartUpdate+0x116>
    {
        return;
    }

    // 检查是否有脏页需要更新
    uint8_t has_dirty = 0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	73fb      	strb	r3, [r7, #15]
    uint8_t first_dirty = 255;
 80042fa:	23ff      	movs	r3, #255	@ 0xff
 80042fc:	73bb      	strb	r3, [r7, #14]
    uint8_t last_dirty = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	737b      	strb	r3, [r7, #13]

    // 如果启用了差分更新，检查哪些页已经变化
    if (diff_mode_enabled)
 8004302:	4b40      	ldr	r3, [pc, #256]	@ (8004404 <OLED_SmartUpdate+0x120>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d046      	beq.n	8004398 <OLED_SmartUpdate+0xb4>
    {
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 800430a:	2300      	movs	r3, #0
 800430c:	733b      	strb	r3, [r7, #12]
 800430e:	e03f      	b.n	8004390 <OLED_SmartUpdate+0xac>
        {
            // 检查此页中是否有任何字节发生变化
            uint8_t page_changed = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	72fb      	strb	r3, [r7, #11]
            uint16_t start_idx = page * OLED_WIDTH;
 8004314:	7b3b      	ldrb	r3, [r7, #12]
 8004316:	b29b      	uxth	r3, r3
 8004318:	01db      	lsls	r3, r3, #7
 800431a:	80bb      	strh	r3, [r7, #4]

            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 800431c:	2300      	movs	r3, #0
 800431e:	813b      	strh	r3, [r7, #8]
 8004320:	e015      	b.n	800434e <OLED_SmartUpdate+0x6a>
            {
                if (OLED_BackBuffer[start_idx + i] != OLED_PrevBuffer[start_idx + i])
 8004322:	88ba      	ldrh	r2, [r7, #4]
 8004324:	893b      	ldrh	r3, [r7, #8]
 8004326:	4413      	add	r3, r2
 8004328:	4a37      	ldr	r2, [pc, #220]	@ (8004408 <OLED_SmartUpdate+0x124>)
 800432a:	5cd2      	ldrb	r2, [r2, r3]
 800432c:	88b9      	ldrh	r1, [r7, #4]
 800432e:	893b      	ldrh	r3, [r7, #8]
 8004330:	440b      	add	r3, r1
 8004332:	4936      	ldr	r1, [pc, #216]	@ (800440c <OLED_SmartUpdate+0x128>)
 8004334:	5ccb      	ldrb	r3, [r1, r3]
 8004336:	429a      	cmp	r2, r3
 8004338:	d006      	beq.n	8004348 <OLED_SmartUpdate+0x64>
                {
                    page_changed = 1;
 800433a:	2301      	movs	r3, #1
 800433c:	72fb      	strb	r3, [r7, #11]
                    oled_dirty_pages[page] = 1;
 800433e:	7b3b      	ldrb	r3, [r7, #12]
 8004340:	4a33      	ldr	r2, [pc, #204]	@ (8004410 <OLED_SmartUpdate+0x12c>)
 8004342:	2101      	movs	r1, #1
 8004344:	54d1      	strb	r1, [r2, r3]
                    break;
 8004346:	e005      	b.n	8004354 <OLED_SmartUpdate+0x70>
            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 8004348:	893b      	ldrh	r3, [r7, #8]
 800434a:	3301      	adds	r3, #1
 800434c:	813b      	strh	r3, [r7, #8]
 800434e:	893b      	ldrh	r3, [r7, #8]
 8004350:	2b7f      	cmp	r3, #127	@ 0x7f
 8004352:	d9e6      	bls.n	8004322 <OLED_SmartUpdate+0x3e>
                }
            }

            if (page_changed)
 8004354:	7afb      	ldrb	r3, [r7, #11]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d017      	beq.n	800438a <OLED_SmartUpdate+0xa6>
            {
                has_dirty = 1;
 800435a:	2301      	movs	r3, #1
 800435c:	73fb      	strb	r3, [r7, #15]
                if (page < first_dirty)
 800435e:	7b3a      	ldrb	r2, [r7, #12]
 8004360:	7bbb      	ldrb	r3, [r7, #14]
 8004362:	429a      	cmp	r2, r3
 8004364:	d201      	bcs.n	800436a <OLED_SmartUpdate+0x86>
                    first_dirty = page;
 8004366:	7b3b      	ldrb	r3, [r7, #12]
 8004368:	73bb      	strb	r3, [r7, #14]
                if (page > last_dirty)
 800436a:	7b3a      	ldrb	r2, [r7, #12]
 800436c:	7b7b      	ldrb	r3, [r7, #13]
 800436e:	429a      	cmp	r2, r3
 8004370:	d901      	bls.n	8004376 <OLED_SmartUpdate+0x92>
                    last_dirty = page;
 8004372:	7b3b      	ldrb	r3, [r7, #12]
 8004374:	737b      	strb	r3, [r7, #13]

                // 更新上一帧缓存
                memcpy(
 8004376:	88bb      	ldrh	r3, [r7, #4]
 8004378:	4a24      	ldr	r2, [pc, #144]	@ (800440c <OLED_SmartUpdate+0x128>)
 800437a:	1898      	adds	r0, r3, r2
 800437c:	88bb      	ldrh	r3, [r7, #4]
 800437e:	4a22      	ldr	r2, [pc, #136]	@ (8004408 <OLED_SmartUpdate+0x124>)
 8004380:	4413      	add	r3, r2
 8004382:	2280      	movs	r2, #128	@ 0x80
 8004384:	4619      	mov	r1, r3
 8004386:	f004 fbf8 	bl	8008b7a <memcpy>
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 800438a:	7b3b      	ldrb	r3, [r7, #12]
 800438c:	3301      	adds	r3, #1
 800438e:	733b      	strb	r3, [r7, #12]
 8004390:	7b3b      	ldrb	r3, [r7, #12]
 8004392:	2b07      	cmp	r3, #7
 8004394:	d9bc      	bls.n	8004310 <OLED_SmartUpdate+0x2c>
 8004396:	e01c      	b.n	80043d2 <OLED_SmartUpdate+0xee>
        }
    }
    else
    {
        // 如果未启用差分更新，使用脏页标记
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 8004398:	2300      	movs	r3, #0
 800439a:	71fb      	strb	r3, [r7, #7]
 800439c:	e016      	b.n	80043cc <OLED_SmartUpdate+0xe8>
        {
            if (oled_dirty_pages[i])
 800439e:	79fb      	ldrb	r3, [r7, #7]
 80043a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004410 <OLED_SmartUpdate+0x12c>)
 80043a2:	5cd3      	ldrb	r3, [r2, r3]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00d      	beq.n	80043c6 <OLED_SmartUpdate+0xe2>
            {
                has_dirty = 1;
 80043aa:	2301      	movs	r3, #1
 80043ac:	73fb      	strb	r3, [r7, #15]
                if (i < first_dirty)
 80043ae:	79fa      	ldrb	r2, [r7, #7]
 80043b0:	7bbb      	ldrb	r3, [r7, #14]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d201      	bcs.n	80043ba <OLED_SmartUpdate+0xd6>
                    first_dirty = i;
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	73bb      	strb	r3, [r7, #14]
                if (i > last_dirty)
 80043ba:	79fa      	ldrb	r2, [r7, #7]
 80043bc:	7b7b      	ldrb	r3, [r7, #13]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d901      	bls.n	80043c6 <OLED_SmartUpdate+0xe2>
                    last_dirty = i;
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	737b      	strb	r3, [r7, #13]
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	3301      	adds	r3, #1
 80043ca:	71fb      	strb	r3, [r7, #7]
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	2b07      	cmp	r3, #7
 80043d0:	d9e5      	bls.n	800439e <OLED_SmartUpdate+0xba>
            }
        }
    }

    // 如果有脏页，只更新这些页
    if (has_dirty && fast_update_enabled)
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <OLED_SmartUpdate+0x10a>
 80043d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004414 <OLED_SmartUpdate+0x130>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d006      	beq.n	80043ee <OLED_SmartUpdate+0x10a>
    {
        OLED_UpdateDisplayPartial(first_dirty, last_dirty);
 80043e0:	7b7a      	ldrb	r2, [r7, #13]
 80043e2:	7bbb      	ldrb	r3, [r7, #14]
 80043e4:	4611      	mov	r1, r2
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fd fc86 	bl	8001cf8 <OLED_UpdateDisplayPartial>
 80043ec:	e006      	b.n	80043fc <OLED_SmartUpdate+0x118>
    }
    else if (has_dirty)
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <OLED_SmartUpdate+0x118>
    {
        OLED_UpdateDisplayVSync();
 80043f4:	f7fd fc28 	bl	8001c48 <OLED_UpdateDisplayVSync>
 80043f8:	e000      	b.n	80043fc <OLED_SmartUpdate+0x118>
        return;
 80043fa:	bf00      	nop
    }
}
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20000f1c 	.word	0x20000f1c
 8004408:	20000318 	.word	0x20000318
 800440c:	20000b1c 	.word	0x20000b1c
 8004410:	20000310 	.word	0x20000310
 8004414:	20000006 	.word	0x20000006

08004418 <OLED_OptimizedDisplayFPS>:


// 显示FPS
void OLED_OptimizedDisplayFPS(int16_t x, int16_t y)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	4603      	mov	r3, r0
 8004420:	460a      	mov	r2, r1
 8004422:	80fb      	strh	r3, [r7, #6]
 8004424:	4613      	mov	r3, r2
 8004426:	80bb      	strh	r3, [r7, #4]
    static uint32_t last_time = 0;
    static uint32_t frames = 0;
    static uint32_t fps = 0;
    static char fps_str[16] = "FPS:0";

    frames++;
 8004428:	4b15      	ldr	r3, [pc, #84]	@ (8004480 <OLED_OptimizedDisplayFPS+0x68>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3301      	adds	r3, #1
 800442e:	4a14      	ldr	r2, [pc, #80]	@ (8004480 <OLED_OptimizedDisplayFPS+0x68>)
 8004430:	6013      	str	r3, [r2, #0]

    // 每秒更新一次FPS
    uint32_t current_time = HAL_GetTick();
 8004432:	f001 fcdf 	bl	8005df4 <HAL_GetTick>
 8004436:	60f8      	str	r0, [r7, #12]
    if (current_time - last_time >= 1000)
 8004438:	4b12      	ldr	r3, [pc, #72]	@ (8004484 <OLED_OptimizedDisplayFPS+0x6c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004444:	d310      	bcc.n	8004468 <OLED_OptimizedDisplayFPS+0x50>
    {
        fps = frames;
 8004446:	4b0e      	ldr	r3, [pc, #56]	@ (8004480 <OLED_OptimizedDisplayFPS+0x68>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a0f      	ldr	r2, [pc, #60]	@ (8004488 <OLED_OptimizedDisplayFPS+0x70>)
 800444c:	6013      	str	r3, [r2, #0]
        sprintf(fps_str, "FPS:%d", fps);
 800444e:	4b0e      	ldr	r3, [pc, #56]	@ (8004488 <OLED_OptimizedDisplayFPS+0x70>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	490d      	ldr	r1, [pc, #52]	@ (800448c <OLED_OptimizedDisplayFPS+0x74>)
 8004456:	480e      	ldr	r0, [pc, #56]	@ (8004490 <OLED_OptimizedDisplayFPS+0x78>)
 8004458:	f004 fa9c 	bl	8008994 <siprintf>
        frames = 0;
 800445c:	4b08      	ldr	r3, [pc, #32]	@ (8004480 <OLED_OptimizedDisplayFPS+0x68>)
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
        last_time = current_time;
 8004462:	4a08      	ldr	r2, [pc, #32]	@ (8004484 <OLED_OptimizedDisplayFPS+0x6c>)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6013      	str	r3, [r2, #0]
    }

    OLED_DisplayString(x, y, fps_str);
 8004468:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800446c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004470:	4a07      	ldr	r2, [pc, #28]	@ (8004490 <OLED_OptimizedDisplayFPS+0x78>)
 8004472:	4618      	mov	r0, r3
 8004474:	f7fd ffd4 	bl	8002420 <OLED_DisplayString>
 8004478:	bf00      	nop
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	20000f20 	.word	0x20000f20
 8004484:	20000f24 	.word	0x20000f24
 8004488:	20000f28 	.word	0x20000f28
 800448c:	0800b328 	.word	0x0800b328
 8004490:	20000008 	.word	0x20000008

08004494 <EaseLinear>:
#include "stdint.h" // 添加 stdint.h 以支持标准整数类型
#include "oled_ui.h"
#pragma region TWEENS // 动画缓动函数全部在这里定义

static float EaseLinear(float t)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
    return t;
 800449c:	687b      	ldr	r3, [r7, #4]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr

080044a8 <EaseInQuad>:

static float EaseInQuad(float t)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
    return t * t;
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fb ff6a 	bl	800038c <__aeabi_fmul>
 80044b8:	4603      	mov	r3, r0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <EaseOutQuad>:

static float EaseOutQuad(float t)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b082      	sub	sp, #8
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
    return t * (2 - t);
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80044d0:	f7fb fe52 	bl	8000178 <__aeabi_fsub>
 80044d4:	4603      	mov	r3, r0
 80044d6:	6879      	ldr	r1, [r7, #4]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fb ff57 	bl	800038c <__aeabi_fmul>
 80044de:	4603      	mov	r3, r0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <EaseInOutQuad>:

static float EaseInOutQuad(float t)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 2 * t * t : -1 + (4 - 2 * t) * t;
 80044f0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7fc f8e7 	bl	80006c8 <__aeabi_fcmplt>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00b      	beq.n	8004518 <EaseInOutQuad+0x30>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4619      	mov	r1, r3
 8004504:	4618      	mov	r0, r3
 8004506:	f7fb fe39 	bl	800017c <__addsf3>
 800450a:	4603      	mov	r3, r0
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	4618      	mov	r0, r3
 8004510:	f7fb ff3c 	bl	800038c <__aeabi_fmul>
 8004514:	4603      	mov	r3, r0
 8004516:	e016      	b.n	8004546 <EaseInOutQuad+0x5e>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4619      	mov	r1, r3
 800451c:	4618      	mov	r0, r3
 800451e:	f7fb fe2d 	bl	800017c <__addsf3>
 8004522:	4603      	mov	r3, r0
 8004524:	4619      	mov	r1, r3
 8004526:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 800452a:	f7fb fe25 	bl	8000178 <__aeabi_fsub>
 800452e:	4603      	mov	r3, r0
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4618      	mov	r0, r3
 8004534:	f7fb ff2a 	bl	800038c <__aeabi_fmul>
 8004538:	4603      	mov	r3, r0
 800453a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800453e:	4618      	mov	r0, r3
 8004540:	f7fb fe1a 	bl	8000178 <__aeabi_fsub>
 8004544:	4603      	mov	r3, r0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <EaseInCubic>:

static float EaseInCubic(float t)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b082      	sub	sp, #8
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
    return t * t * t;
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7fb ff17 	bl	800038c <__aeabi_fmul>
 800455e:	4603      	mov	r3, r0
 8004560:	6879      	ldr	r1, [r7, #4]
 8004562:	4618      	mov	r0, r3
 8004564:	f7fb ff12 	bl	800038c <__aeabi_fmul>
 8004568:	4603      	mov	r3, r0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <EaseOutCubic>:

static float EaseOutCubic(float t)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b084      	sub	sp, #16
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
    float t1 = t - 1;
 800457a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fb fdfa 	bl	8000178 <__aeabi_fsub>
 8004584:	4603      	mov	r3, r0
 8004586:	60fb      	str	r3, [r7, #12]
    return t1 * t1 * t1 + 1;
 8004588:	68f9      	ldr	r1, [r7, #12]
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f7fb fefe 	bl	800038c <__aeabi_fmul>
 8004590:	4603      	mov	r3, r0
 8004592:	68f9      	ldr	r1, [r7, #12]
 8004594:	4618      	mov	r0, r3
 8004596:	f7fb fef9 	bl	800038c <__aeabi_fmul>
 800459a:	4603      	mov	r3, r0
 800459c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fb fdeb 	bl	800017c <__addsf3>
 80045a6:	4603      	mov	r3, r0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <EaseInOutCubic>:

static float EaseInOutCubic(float t)
{
 80045b0:	b590      	push	{r4, r7, lr}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
 80045b8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7fc f883 	bl	80006c8 <__aeabi_fcmplt>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d010      	beq.n	80045ea <EaseInOutCubic+0x3a>
 80045c8:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7fb fedd 	bl	800038c <__aeabi_fmul>
 80045d2:	4603      	mov	r3, r0
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fb fed8 	bl	800038c <__aeabi_fmul>
 80045dc:	4603      	mov	r3, r0
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fb fed3 	bl	800038c <__aeabi_fmul>
 80045e6:	4603      	mov	r3, r0
 80045e8:	e02f      	b.n	800464a <EaseInOutCubic+0x9a>
 80045ea:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7fb fdc2 	bl	8000178 <__aeabi_fsub>
 80045f4:	4603      	mov	r3, r0
 80045f6:	461c      	mov	r4, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4619      	mov	r1, r3
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fb fdbd 	bl	800017c <__addsf3>
 8004602:	4603      	mov	r3, r0
 8004604:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004608:	4618      	mov	r0, r3
 800460a:	f7fb fdb5 	bl	8000178 <__aeabi_fsub>
 800460e:	4603      	mov	r3, r0
 8004610:	4619      	mov	r1, r3
 8004612:	4620      	mov	r0, r4
 8004614:	f7fb feba 	bl	800038c <__aeabi_fmul>
 8004618:	4603      	mov	r3, r0
 800461a:	461c      	mov	r4, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4619      	mov	r1, r3
 8004620:	4618      	mov	r0, r3
 8004622:	f7fb fdab 	bl	800017c <__addsf3>
 8004626:	4603      	mov	r3, r0
 8004628:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800462c:	4618      	mov	r0, r3
 800462e:	f7fb fda3 	bl	8000178 <__aeabi_fsub>
 8004632:	4603      	mov	r3, r0
 8004634:	4619      	mov	r1, r3
 8004636:	4620      	mov	r0, r4
 8004638:	f7fb fea8 	bl	800038c <__aeabi_fmul>
 800463c:	4603      	mov	r3, r0
 800463e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004642:	4618      	mov	r0, r3
 8004644:	f7fb fd9a 	bl	800017c <__addsf3>
 8004648:	4603      	mov	r3, r0
}
 800464a:	4618      	mov	r0, r3
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	bd90      	pop	{r4, r7, pc}
	...

08004654 <EaseInExpo>:

// 在现有EaseType_t枚举中添加这些新类型
// 指数缓动
static float EaseInExpo(float t)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
    return (t == 0) ? 0 : powf(2, 10 * (t - 1));
 800465c:	f04f 0100 	mov.w	r1, #0
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7fc f827 	bl	80006b4 <__aeabi_fcmpeq>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d111      	bne.n	8004690 <EaseInExpo+0x3c>
 800466c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7fb fd81 	bl	8000178 <__aeabi_fsub>
 8004676:	4603      	mov	r3, r0
 8004678:	4908      	ldr	r1, [pc, #32]	@ (800469c <EaseInExpo+0x48>)
 800467a:	4618      	mov	r0, r3
 800467c:	f7fb fe86 	bl	800038c <__aeabi_fmul>
 8004680:	4603      	mov	r3, r0
 8004682:	4619      	mov	r1, r3
 8004684:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004688:	f005 fa54 	bl	8009b34 <powf>
 800468c:	4603      	mov	r3, r0
 800468e:	e001      	b.n	8004694 <EaseInExpo+0x40>
 8004690:	f04f 0300 	mov.w	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	41200000 	.word	0x41200000

080046a0 <EaseOutExpo>:

static float EaseOutExpo(float t)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
    return (t == 1) ? 1 : (1 - powf(2, -10 * t));
 80046a8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7fc f801 	bl	80006b4 <__aeabi_fcmpeq>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d111      	bne.n	80046dc <EaseOutExpo+0x3c>
 80046b8:	490b      	ldr	r1, [pc, #44]	@ (80046e8 <EaseOutExpo+0x48>)
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fb fe66 	bl	800038c <__aeabi_fmul>
 80046c0:	4603      	mov	r3, r0
 80046c2:	4619      	mov	r1, r3
 80046c4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80046c8:	f005 fa34 	bl	8009b34 <powf>
 80046cc:	4603      	mov	r3, r0
 80046ce:	4619      	mov	r1, r3
 80046d0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80046d4:	f7fb fd50 	bl	8000178 <__aeabi_fsub>
 80046d8:	4603      	mov	r3, r0
 80046da:	e001      	b.n	80046e0 <EaseOutExpo+0x40>
 80046dc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	c1200000 	.word	0xc1200000

080046ec <EaseInOutExpo>:

static float EaseInOutExpo(float t)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
    if (t == 0)
 80046f4:	f04f 0100 	mov.w	r1, #0
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7fb ffdb 	bl	80006b4 <__aeabi_fcmpeq>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d002      	beq.n	800470a <EaseInOutExpo+0x1e>
        return 0;
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	e045      	b.n	8004796 <EaseInOutExpo+0xaa>
    if (t == 1)
 800470a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7fb ffd0 	bl	80006b4 <__aeabi_fcmpeq>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <EaseInOutExpo+0x34>
        return 1;
 800471a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800471e:	e03a      	b.n	8004796 <EaseInOutExpo+0xaa>
    if (t < 0.5f)
 8004720:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7fb ffcf 	bl	80006c8 <__aeabi_fcmplt>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d016      	beq.n	800475e <EaseInOutExpo+0x72>
        return powf(2, 20 * t - 10) / 2;
 8004730:	491b      	ldr	r1, [pc, #108]	@ (80047a0 <EaseInOutExpo+0xb4>)
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fb fe2a 	bl	800038c <__aeabi_fmul>
 8004738:	4603      	mov	r3, r0
 800473a:	491a      	ldr	r1, [pc, #104]	@ (80047a4 <EaseInOutExpo+0xb8>)
 800473c:	4618      	mov	r0, r3
 800473e:	f7fb fd1b 	bl	8000178 <__aeabi_fsub>
 8004742:	4603      	mov	r3, r0
 8004744:	4619      	mov	r1, r3
 8004746:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800474a:	f005 f9f3 	bl	8009b34 <powf>
 800474e:	4603      	mov	r3, r0
 8004750:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004754:	4618      	mov	r0, r3
 8004756:	f7fb fecd 	bl	80004f4 <__aeabi_fdiv>
 800475a:	4603      	mov	r3, r0
 800475c:	e01b      	b.n	8004796 <EaseInOutExpo+0xaa>
    return (2 - powf(2, -20 * t + 10)) / 2;
 800475e:	4912      	ldr	r1, [pc, #72]	@ (80047a8 <EaseInOutExpo+0xbc>)
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7fb fe13 	bl	800038c <__aeabi_fmul>
 8004766:	4603      	mov	r3, r0
 8004768:	490e      	ldr	r1, [pc, #56]	@ (80047a4 <EaseInOutExpo+0xb8>)
 800476a:	4618      	mov	r0, r3
 800476c:	f7fb fd06 	bl	800017c <__addsf3>
 8004770:	4603      	mov	r3, r0
 8004772:	4619      	mov	r1, r3
 8004774:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004778:	f005 f9dc 	bl	8009b34 <powf>
 800477c:	4603      	mov	r3, r0
 800477e:	4619      	mov	r1, r3
 8004780:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004784:	f7fb fcf8 	bl	8000178 <__aeabi_fsub>
 8004788:	4603      	mov	r3, r0
 800478a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800478e:	4618      	mov	r0, r3
 8004790:	f7fb feb0 	bl	80004f4 <__aeabi_fdiv>
 8004794:	4603      	mov	r3, r0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	41a00000 	.word	0x41a00000
 80047a4:	41200000 	.word	0x41200000
 80047a8:	c1a00000 	.word	0xc1a00000

080047ac <EaseInCirc>:

// 圆形曲线缓动
static float EaseInCirc(float t)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
    return 1 - sqrtf(1 - t * t);
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7fb fde8 	bl	800038c <__aeabi_fmul>
 80047bc:	4603      	mov	r3, r0
 80047be:	4619      	mov	r1, r3
 80047c0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80047c4:	f7fb fcd8 	bl	8000178 <__aeabi_fsub>
 80047c8:	4603      	mov	r3, r0
 80047ca:	4618      	mov	r0, r3
 80047cc:	f005 f9ff 	bl	8009bce <sqrtf>
 80047d0:	4603      	mov	r3, r0
 80047d2:	4619      	mov	r1, r3
 80047d4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80047d8:	f7fb fcce 	bl	8000178 <__aeabi_fsub>
 80047dc:	4603      	mov	r3, r0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <EaseOutCirc>:

static float EaseOutCirc(float t)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
    return sqrtf(1 - powf(t - 1, 2));
 80047ee:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fb fcc0 	bl	8000178 <__aeabi_fsub>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80047fe:	4618      	mov	r0, r3
 8004800:	f005 f998 	bl	8009b34 <powf>
 8004804:	4603      	mov	r3, r0
 8004806:	4619      	mov	r1, r3
 8004808:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800480c:	f7fb fcb4 	bl	8000178 <__aeabi_fsub>
 8004810:	4603      	mov	r3, r0
 8004812:	4618      	mov	r0, r3
 8004814:	f005 f9db 	bl	8009bce <sqrtf>
 8004818:	4603      	mov	r3, r0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <EaseInOutCirc>:

static float EaseInOutCirc(float t)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 800482a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7fb ff4a 	bl	80006c8 <__aeabi_fcmplt>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d022      	beq.n	8004880 <EaseInOutCirc+0x5e>
        return (1 - sqrtf(1 - powf(2 * t, 2))) / 2;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4619      	mov	r1, r3
 800483e:	4618      	mov	r0, r3
 8004840:	f7fb fc9c 	bl	800017c <__addsf3>
 8004844:	4603      	mov	r3, r0
 8004846:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800484a:	4618      	mov	r0, r3
 800484c:	f005 f972 	bl	8009b34 <powf>
 8004850:	4603      	mov	r3, r0
 8004852:	4619      	mov	r1, r3
 8004854:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004858:	f7fb fc8e 	bl	8000178 <__aeabi_fsub>
 800485c:	4603      	mov	r3, r0
 800485e:	4618      	mov	r0, r3
 8004860:	f005 f9b5 	bl	8009bce <sqrtf>
 8004864:	4603      	mov	r3, r0
 8004866:	4619      	mov	r1, r3
 8004868:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800486c:	f7fb fc84 	bl	8000178 <__aeabi_fsub>
 8004870:	4603      	mov	r3, r0
 8004872:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004876:	4618      	mov	r0, r3
 8004878:	f7fb fe3c 	bl	80004f4 <__aeabi_fdiv>
 800487c:	4603      	mov	r3, r0
 800487e:	e027      	b.n	80048d0 <EaseInOutCirc+0xae>
    return (sqrtf(1 - powf(-2 * t + 2, 2)) + 1) / 2;
 8004880:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7fb fd81 	bl	800038c <__aeabi_fmul>
 800488a:	4603      	mov	r3, r0
 800488c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004890:	4618      	mov	r0, r3
 8004892:	f7fb fc73 	bl	800017c <__addsf3>
 8004896:	4603      	mov	r3, r0
 8004898:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800489c:	4618      	mov	r0, r3
 800489e:	f005 f949 	bl	8009b34 <powf>
 80048a2:	4603      	mov	r3, r0
 80048a4:	4619      	mov	r1, r3
 80048a6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80048aa:	f7fb fc65 	bl	8000178 <__aeabi_fsub>
 80048ae:	4603      	mov	r3, r0
 80048b0:	4618      	mov	r0, r3
 80048b2:	f005 f98c 	bl	8009bce <sqrtf>
 80048b6:	4603      	mov	r3, r0
 80048b8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fb fc5d 	bl	800017c <__addsf3>
 80048c2:	4603      	mov	r3, r0
 80048c4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7fb fe13 	bl	80004f4 <__aeabi_fdiv>
 80048ce:	4603      	mov	r3, r0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <EaseInElastic>:

// 弹性缓动
static float EaseInElastic(float t)
{
 80048d8:	b590      	push	{r4, r7, lr}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 80048e0:	4b22      	ldr	r3, [pc, #136]	@ (800496c <EaseInElastic+0x94>)
 80048e2:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 80048e4:	f04f 0100 	mov.w	r1, #0
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7fb fee3 	bl	80006b4 <__aeabi_fcmpeq>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <EaseInElastic+0x22>
        return 0;
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	e034      	b.n	8004964 <EaseInElastic+0x8c>
    if (t == 1)
 80048fa:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7fb fed8 	bl	80006b4 <__aeabi_fcmpeq>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <EaseInElastic+0x38>
        return 1;
 800490a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800490e:	e029      	b.n	8004964 <EaseInElastic+0x8c>
    return -powf(2, 10 * t - 10) * sinf((t * 10 - 10.75f) * c4);
 8004910:	4917      	ldr	r1, [pc, #92]	@ (8004970 <EaseInElastic+0x98>)
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fb fd3a 	bl	800038c <__aeabi_fmul>
 8004918:	4603      	mov	r3, r0
 800491a:	4915      	ldr	r1, [pc, #84]	@ (8004970 <EaseInElastic+0x98>)
 800491c:	4618      	mov	r0, r3
 800491e:	f7fb fc2b 	bl	8000178 <__aeabi_fsub>
 8004922:	4603      	mov	r3, r0
 8004924:	4619      	mov	r1, r3
 8004926:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800492a:	f005 f903 	bl	8009b34 <powf>
 800492e:	4603      	mov	r3, r0
 8004930:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8004934:	490e      	ldr	r1, [pc, #56]	@ (8004970 <EaseInElastic+0x98>)
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7fb fd28 	bl	800038c <__aeabi_fmul>
 800493c:	4603      	mov	r3, r0
 800493e:	490d      	ldr	r1, [pc, #52]	@ (8004974 <EaseInElastic+0x9c>)
 8004940:	4618      	mov	r0, r3
 8004942:	f7fb fc19 	bl	8000178 <__aeabi_fsub>
 8004946:	4603      	mov	r3, r0
 8004948:	68f9      	ldr	r1, [r7, #12]
 800494a:	4618      	mov	r0, r3
 800494c:	f7fb fd1e 	bl	800038c <__aeabi_fmul>
 8004950:	4603      	mov	r3, r0
 8004952:	4618      	mov	r0, r3
 8004954:	f005 f98e 	bl	8009c74 <sinf>
 8004958:	4603      	mov	r3, r0
 800495a:	4619      	mov	r1, r3
 800495c:	4620      	mov	r0, r4
 800495e:	f7fb fd15 	bl	800038c <__aeabi_fmul>
 8004962:	4603      	mov	r3, r0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	bd90      	pop	{r4, r7, pc}
 800496c:	40060a8b 	.word	0x40060a8b
 8004970:	41200000 	.word	0x41200000
 8004974:	412c0000 	.word	0x412c0000

08004978 <EaseOutElastic>:

static float EaseOutElastic(float t)
{
 8004978:	b590      	push	{r4, r7, lr}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 8004980:	4b22      	ldr	r3, [pc, #136]	@ (8004a0c <EaseOutElastic+0x94>)
 8004982:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8004984:	f04f 0100 	mov.w	r1, #0
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7fb fe93 	bl	80006b4 <__aeabi_fcmpeq>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <EaseOutElastic+0x22>
        return 0;
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	e034      	b.n	8004a04 <EaseOutElastic+0x8c>
    if (t == 1)
 800499a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7fb fe88 	bl	80006b4 <__aeabi_fcmpeq>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <EaseOutElastic+0x38>
        return 1;
 80049aa:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80049ae:	e029      	b.n	8004a04 <EaseOutElastic+0x8c>
    return powf(2, -10 * t) * sinf((t * 10 - 0.75f) * c4) + 1;
 80049b0:	4917      	ldr	r1, [pc, #92]	@ (8004a10 <EaseOutElastic+0x98>)
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7fb fcea 	bl	800038c <__aeabi_fmul>
 80049b8:	4603      	mov	r3, r0
 80049ba:	4619      	mov	r1, r3
 80049bc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80049c0:	f005 f8b8 	bl	8009b34 <powf>
 80049c4:	4604      	mov	r4, r0
 80049c6:	4913      	ldr	r1, [pc, #76]	@ (8004a14 <EaseOutElastic+0x9c>)
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7fb fcdf 	bl	800038c <__aeabi_fmul>
 80049ce:	4603      	mov	r3, r0
 80049d0:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fb fbcf 	bl	8000178 <__aeabi_fsub>
 80049da:	4603      	mov	r3, r0
 80049dc:	68f9      	ldr	r1, [r7, #12]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fb fcd4 	bl	800038c <__aeabi_fmul>
 80049e4:	4603      	mov	r3, r0
 80049e6:	4618      	mov	r0, r3
 80049e8:	f005 f944 	bl	8009c74 <sinf>
 80049ec:	4603      	mov	r3, r0
 80049ee:	4619      	mov	r1, r3
 80049f0:	4620      	mov	r0, r4
 80049f2:	f7fb fccb 	bl	800038c <__aeabi_fmul>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fb fbbd 	bl	800017c <__addsf3>
 8004a02:	4603      	mov	r3, r0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd90      	pop	{r4, r7, pc}
 8004a0c:	40060a8b 	.word	0x40060a8b
 8004a10:	c1200000 	.word	0xc1200000
 8004a14:	41200000 	.word	0x41200000

08004a18 <EaseInOutElastic>:

static float EaseInOutElastic(float t)
{
 8004a18:	b590      	push	{r4, r7, lr}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
    const float c5 = (2 * 3.14159f) / 4.5f;
 8004a20:	4b44      	ldr	r3, [pc, #272]	@ (8004b34 <EaseInOutElastic+0x11c>)
 8004a22:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8004a24:	f04f 0100 	mov.w	r1, #0
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7fb fe43 	bl	80006b4 <__aeabi_fcmpeq>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <EaseInOutElastic+0x22>
        return 0;
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	e077      	b.n	8004b2a <EaseInOutElastic+0x112>
    if (t == 1)
 8004a3a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fb fe38 	bl	80006b4 <__aeabi_fcmpeq>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <EaseInOutElastic+0x38>
        return 1;
 8004a4a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004a4e:	e06c      	b.n	8004b2a <EaseInOutElastic+0x112>
    if (t < 0.5f)
 8004a50:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7fb fe37 	bl	80006c8 <__aeabi_fcmplt>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d030      	beq.n	8004ac2 <EaseInOutElastic+0xaa>
        return -(powf(2, 20 * t - 10) * sinf((20 * t - 11.125f) * c5)) / 2;
 8004a60:	4935      	ldr	r1, [pc, #212]	@ (8004b38 <EaseInOutElastic+0x120>)
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7fb fc92 	bl	800038c <__aeabi_fmul>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	4934      	ldr	r1, [pc, #208]	@ (8004b3c <EaseInOutElastic+0x124>)
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fb fb83 	bl	8000178 <__aeabi_fsub>
 8004a72:	4603      	mov	r3, r0
 8004a74:	4619      	mov	r1, r3
 8004a76:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004a7a:	f005 f85b 	bl	8009b34 <powf>
 8004a7e:	4604      	mov	r4, r0
 8004a80:	492d      	ldr	r1, [pc, #180]	@ (8004b38 <EaseInOutElastic+0x120>)
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fb fc82 	bl	800038c <__aeabi_fmul>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	492d      	ldr	r1, [pc, #180]	@ (8004b40 <EaseInOutElastic+0x128>)
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fb fb73 	bl	8000178 <__aeabi_fsub>
 8004a92:	4603      	mov	r3, r0
 8004a94:	68f9      	ldr	r1, [r7, #12]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fb fc78 	bl	800038c <__aeabi_fmul>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f005 f8e8 	bl	8009c74 <sinf>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f7fb fc6f 	bl	800038c <__aeabi_fmul>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004ab4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fb fd1b 	bl	80004f4 <__aeabi_fdiv>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	e033      	b.n	8004b2a <EaseInOutElastic+0x112>
    return (powf(2, -20 * t + 10) * sinf((20 * t - 11.125f) * c5)) / 2 + 1;
 8004ac2:	4920      	ldr	r1, [pc, #128]	@ (8004b44 <EaseInOutElastic+0x12c>)
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7fb fc61 	bl	800038c <__aeabi_fmul>
 8004aca:	4603      	mov	r3, r0
 8004acc:	491b      	ldr	r1, [pc, #108]	@ (8004b3c <EaseInOutElastic+0x124>)
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fb fb54 	bl	800017c <__addsf3>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004adc:	f005 f82a 	bl	8009b34 <powf>
 8004ae0:	4604      	mov	r4, r0
 8004ae2:	4915      	ldr	r1, [pc, #84]	@ (8004b38 <EaseInOutElastic+0x120>)
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7fb fc51 	bl	800038c <__aeabi_fmul>
 8004aea:	4603      	mov	r3, r0
 8004aec:	4914      	ldr	r1, [pc, #80]	@ (8004b40 <EaseInOutElastic+0x128>)
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fb fb42 	bl	8000178 <__aeabi_fsub>
 8004af4:	4603      	mov	r3, r0
 8004af6:	68f9      	ldr	r1, [r7, #12]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7fb fc47 	bl	800038c <__aeabi_fmul>
 8004afe:	4603      	mov	r3, r0
 8004b00:	4618      	mov	r0, r3
 8004b02:	f005 f8b7 	bl	8009c74 <sinf>
 8004b06:	4603      	mov	r3, r0
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	f7fb fc3e 	bl	800038c <__aeabi_fmul>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fb fcec 	bl	80004f4 <__aeabi_fdiv>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fb fb2a 	bl	800017c <__addsf3>
 8004b28:	4603      	mov	r3, r0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd90      	pop	{r4, r7, pc}
 8004b32:	bf00      	nop
 8004b34:	3fb2b8b9 	.word	0x3fb2b8b9
 8004b38:	41a00000 	.word	0x41a00000
 8004b3c:	41200000 	.word	0x41200000
 8004b40:	41320000 	.word	0x41320000
 8004b44:	c1a00000 	.word	0xc1a00000

08004b48 <EaseOutBounce>:

static float EaseOutBounce(float t)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
    const float n1 = 7.5625f;
 8004b50:	4b45      	ldr	r3, [pc, #276]	@ (8004c68 <EaseOutBounce+0x120>)
 8004b52:	60fb      	str	r3, [r7, #12]
    const float d1 = 2.75f;
 8004b54:	4b45      	ldr	r3, [pc, #276]	@ (8004c6c <EaseOutBounce+0x124>)
 8004b56:	60bb      	str	r3, [r7, #8]

    if (t < 1 / d1)
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004b5e:	f7fb fcc9 	bl	80004f4 <__aeabi_fdiv>
 8004b62:	4603      	mov	r3, r0
 8004b64:	4619      	mov	r1, r3
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fb fdae 	bl	80006c8 <__aeabi_fcmplt>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <EaseOutBounce+0x40>
    {
        return n1 * t * t;
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f7fb fc09 	bl	800038c <__aeabi_fmul>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fb fc04 	bl	800038c <__aeabi_fmul>
 8004b84:	4603      	mov	r3, r0
 8004b86:	e06a      	b.n	8004c5e <EaseOutBounce+0x116>
    }
    else if (t < 2 / d1)
 8004b88:	68b9      	ldr	r1, [r7, #8]
 8004b8a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004b8e:	f7fb fcb1 	bl	80004f4 <__aeabi_fdiv>
 8004b92:	4603      	mov	r3, r0
 8004b94:	4619      	mov	r1, r3
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7fb fd96 	bl	80006c8 <__aeabi_fcmplt>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d01c      	beq.n	8004bdc <EaseOutBounce+0x94>
    {
        t -= 1.5f / d1;
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8004ba8:	f7fb fca4 	bl	80004f4 <__aeabi_fdiv>
 8004bac:	4603      	mov	r3, r0
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7fb fae1 	bl	8000178 <__aeabi_fsub>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.75f;
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f7fb fbe5 	bl	800038c <__aeabi_fmul>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fb fbe0 	bl	800038c <__aeabi_fmul>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fb fad2 	bl	800017c <__addsf3>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	e040      	b.n	8004c5e <EaseOutBounce+0x116>
    }
    else if (t < 2.5f / d1)
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	4824      	ldr	r0, [pc, #144]	@ (8004c70 <EaseOutBounce+0x128>)
 8004be0:	f7fb fc88 	bl	80004f4 <__aeabi_fdiv>
 8004be4:	4603      	mov	r3, r0
 8004be6:	4619      	mov	r1, r3
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7fb fd6d 	bl	80006c8 <__aeabi_fcmplt>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01a      	beq.n	8004c2a <EaseOutBounce+0xe2>
    {
        t -= 2.25f / d1;
 8004bf4:	68b9      	ldr	r1, [r7, #8]
 8004bf6:	481f      	ldr	r0, [pc, #124]	@ (8004c74 <EaseOutBounce+0x12c>)
 8004bf8:	f7fb fc7c 	bl	80004f4 <__aeabi_fdiv>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	4619      	mov	r1, r3
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7fb fab9 	bl	8000178 <__aeabi_fsub>
 8004c06:	4603      	mov	r3, r0
 8004c08:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.9375f;
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f7fb fbbd 	bl	800038c <__aeabi_fmul>
 8004c12:	4603      	mov	r3, r0
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fb fbb8 	bl	800038c <__aeabi_fmul>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	4916      	ldr	r1, [pc, #88]	@ (8004c78 <EaseOutBounce+0x130>)
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fb faab 	bl	800017c <__addsf3>
 8004c26:	4603      	mov	r3, r0
 8004c28:	e019      	b.n	8004c5e <EaseOutBounce+0x116>
    }
    else
    {
        t -= 2.625f / d1;
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	4813      	ldr	r0, [pc, #76]	@ (8004c7c <EaseOutBounce+0x134>)
 8004c2e:	f7fb fc61 	bl	80004f4 <__aeabi_fdiv>
 8004c32:	4603      	mov	r3, r0
 8004c34:	4619      	mov	r1, r3
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fb fa9e 	bl	8000178 <__aeabi_fsub>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.984375f;
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f7fb fba2 	bl	800038c <__aeabi_fmul>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fb fb9d 	bl	800038c <__aeabi_fmul>
 8004c52:	4603      	mov	r3, r0
 8004c54:	490a      	ldr	r1, [pc, #40]	@ (8004c80 <EaseOutBounce+0x138>)
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fb fa90 	bl	800017c <__addsf3>
 8004c5c:	4603      	mov	r3, r0
    }
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40f20000 	.word	0x40f20000
 8004c6c:	40300000 	.word	0x40300000
 8004c70:	40200000 	.word	0x40200000
 8004c74:	40100000 	.word	0x40100000
 8004c78:	3f700000 	.word	0x3f700000
 8004c7c:	40280000 	.word	0x40280000
 8004c80:	3f7c0000 	.word	0x3f7c0000

08004c84 <EaseInBounce>:

// 反弹缓动
static float EaseInBounce(float t)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
    return 1 - EaseOutBounce(1 - t);
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004c92:	f7fb fa71 	bl	8000178 <__aeabi_fsub>
 8004c96:	4603      	mov	r3, r0
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff ff55 	bl	8004b48 <EaseOutBounce>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004ca6:	f7fb fa67 	bl	8000178 <__aeabi_fsub>
 8004caa:	4603      	mov	r3, r0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <EaseInOutBounce>:

static float EaseInOutBounce(float t)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 8004cbc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7fb fd01 	bl	80006c8 <__aeabi_fcmplt>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d010      	beq.n	8004cee <EaseInOutBounce+0x3a>
        return EaseInBounce(t * 2) * 0.5f;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4619      	mov	r1, r3
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fb fa53 	bl	800017c <__addsf3>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff ffd3 	bl	8004c84 <EaseInBounce>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fb fb51 	bl	800038c <__aeabi_fmul>
 8004cea:	4603      	mov	r3, r0
 8004cec:	e01b      	b.n	8004d26 <EaseInOutBounce+0x72>
    return EaseOutBounce(t * 2 - 1) * 0.5f + 0.5f;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fb fa42 	bl	800017c <__addsf3>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fb fa3a 	bl	8000178 <__aeabi_fsub>
 8004d04:	4603      	mov	r3, r0
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff ff1e 	bl	8004b48 <EaseOutBounce>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fb fb3a 	bl	800038c <__aeabi_fmul>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fb fa2c 	bl	800017c <__addsf3>
 8004d24:	4603      	mov	r3, r0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
	...

08004d30 <EaseInBack>:

// 背越式缓动
static float EaseInBack(float t)
{
 8004d30:	b590      	push	{r4, r7, lr}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8004d38:	4b15      	ldr	r3, [pc, #84]	@ (8004d90 <EaseInBack+0x60>)
 8004d3a:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8004d3c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f7fb fa1b 	bl	800017c <__addsf3>
 8004d46:	4603      	mov	r3, r0
 8004d48:	60bb      	str	r3, [r7, #8]

    return c3 * t * t * t - c1 * t * t;
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	68b8      	ldr	r0, [r7, #8]
 8004d4e:	f7fb fb1d 	bl	800038c <__aeabi_fmul>
 8004d52:	4603      	mov	r3, r0
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fb fb18 	bl	800038c <__aeabi_fmul>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fb fb13 	bl	800038c <__aeabi_fmul>
 8004d66:	4603      	mov	r3, r0
 8004d68:	461c      	mov	r4, r3
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f7fb fb0d 	bl	800038c <__aeabi_fmul>
 8004d72:	4603      	mov	r3, r0
 8004d74:	6879      	ldr	r1, [r7, #4]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fb fb08 	bl	800038c <__aeabi_fmul>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4620      	mov	r0, r4
 8004d82:	f7fb f9f9 	bl	8000178 <__aeabi_fsub>
 8004d86:	4603      	mov	r3, r0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd90      	pop	{r4, r7, pc}
 8004d90:	3fd9cd60 	.word	0x3fd9cd60

08004d94 <EaseOutBack>:

static float EaseOutBack(float t)
{
 8004d94:	b590      	push	{r4, r7, lr}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8004d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8004e10 <EaseOutBack+0x7c>)
 8004d9e:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8004da0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f7fb f9e9 	bl	800017c <__addsf3>
 8004daa:	4603      	mov	r3, r0
 8004dac:	60bb      	str	r3, [r7, #8]

    return 1 + c3 * powf(t - 1, 3) + c1 * powf(t - 1, 2);
 8004dae:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fb f9e0 	bl	8000178 <__aeabi_fsub>
 8004db8:	4603      	mov	r3, r0
 8004dba:	4916      	ldr	r1, [pc, #88]	@ (8004e14 <EaseOutBack+0x80>)
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f004 feb9 	bl	8009b34 <powf>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	68b9      	ldr	r1, [r7, #8]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fb fae0 	bl	800038c <__aeabi_fmul>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fb f9d2 	bl	800017c <__addsf3>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	461c      	mov	r4, r3
 8004ddc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7fb f9c9 	bl	8000178 <__aeabi_fsub>
 8004de6:	4603      	mov	r3, r0
 8004de8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004dec:	4618      	mov	r0, r3
 8004dee:	f004 fea1 	bl	8009b34 <powf>
 8004df2:	4603      	mov	r3, r0
 8004df4:	68f9      	ldr	r1, [r7, #12]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fb fac8 	bl	800038c <__aeabi_fmul>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	4619      	mov	r1, r3
 8004e00:	4620      	mov	r0, r4
 8004e02:	f7fb f9bb 	bl	800017c <__addsf3>
 8004e06:	4603      	mov	r3, r0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd90      	pop	{r4, r7, pc}
 8004e10:	3fd9cd60 	.word	0x3fd9cd60
 8004e14:	40400000 	.word	0x40400000

08004e18 <EaseInOutBack>:

static float EaseInOutBack(float t)
{
 8004e18:	b5b0      	push	{r4, r5, r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8004e20:	4b40      	ldr	r3, [pc, #256]	@ (8004f24 <EaseInOutBack+0x10c>)
 8004e22:	60fb      	str	r3, [r7, #12]
    const float c2 = c1 * 1.525f;
 8004e24:	4940      	ldr	r1, [pc, #256]	@ (8004f28 <EaseInOutBack+0x110>)
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f7fb fab0 	bl	800038c <__aeabi_fmul>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	60bb      	str	r3, [r7, #8]

    if (t < 0.5f)
 8004e30:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7fb fc47 	bl	80006c8 <__aeabi_fcmplt>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d02c      	beq.n	8004e9a <EaseInOutBack+0x82>
        return (powf(2 * t, 2) * ((c2 + 1) * 2 * t - c2)) / 2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4619      	mov	r1, r3
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fb f999 	bl	800017c <__addsf3>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004e50:	4618      	mov	r0, r3
 8004e52:	f004 fe6f 	bl	8009b34 <powf>
 8004e56:	4604      	mov	r4, r0
 8004e58:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004e5c:	68b8      	ldr	r0, [r7, #8]
 8004e5e:	f7fb f98d 	bl	800017c <__addsf3>
 8004e62:	4603      	mov	r3, r0
 8004e64:	4619      	mov	r1, r3
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fb f988 	bl	800017c <__addsf3>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fb fa8b 	bl	800038c <__aeabi_fmul>
 8004e76:	4603      	mov	r3, r0
 8004e78:	68b9      	ldr	r1, [r7, #8]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fb f97c 	bl	8000178 <__aeabi_fsub>
 8004e80:	4603      	mov	r3, r0
 8004e82:	4619      	mov	r1, r3
 8004e84:	4620      	mov	r0, r4
 8004e86:	f7fb fa81 	bl	800038c <__aeabi_fmul>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fb fb2f 	bl	80004f4 <__aeabi_fdiv>
 8004e96:	4603      	mov	r3, r0
 8004e98:	e03f      	b.n	8004f1a <EaseInOutBack+0x102>
    return (powf(2 * t - 2, 2) * ((c2 + 1) * (t * 2 - 2) + c2) + 2) / 2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fb f96c 	bl	800017c <__addsf3>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fb f964 	bl	8000178 <__aeabi_fsub>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f004 fe3c 	bl	8009b34 <powf>
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004ec2:	68b8      	ldr	r0, [r7, #8]
 8004ec4:	f7fb f95a 	bl	800017c <__addsf3>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	461d      	mov	r5, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7fb f953 	bl	800017c <__addsf3>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fb f94b 	bl	8000178 <__aeabi_fsub>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	f7fb fa50 	bl	800038c <__aeabi_fmul>
 8004eec:	4603      	mov	r3, r0
 8004eee:	68b9      	ldr	r1, [r7, #8]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fb f943 	bl	800017c <__addsf3>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4620      	mov	r0, r4
 8004efc:	f7fb fa46 	bl	800038c <__aeabi_fmul>
 8004f00:	4603      	mov	r3, r0
 8004f02:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fb f938 	bl	800017c <__addsf3>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fb faee 	bl	80004f4 <__aeabi_fdiv>
 8004f18:	4603      	mov	r3, r0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bdb0      	pop	{r4, r5, r7, pc}
 8004f22:	bf00      	nop
 8004f24:	3fd9cd60 	.word	0x3fd9cd60
 8004f28:	3fc33333 	.word	0x3fc33333

08004f2c <EaseInSine>:

// 正弦缓动
static float EaseInSine(float t)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
    return 1 - cosf((t * 3.14159f) / 2);
 8004f34:	490c      	ldr	r1, [pc, #48]	@ (8004f68 <EaseInSine+0x3c>)
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7fb fa28 	bl	800038c <__aeabi_fmul>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fb fad6 	bl	80004f4 <__aeabi_fdiv>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f004 fe5a 	bl	8009c04 <cosf>
 8004f50:	4603      	mov	r3, r0
 8004f52:	4619      	mov	r1, r3
 8004f54:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004f58:	f7fb f90e 	bl	8000178 <__aeabi_fsub>
 8004f5c:	4603      	mov	r3, r0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40490fd0 	.word	0x40490fd0

08004f6c <EaseOutSine>:

static float EaseOutSine(float t)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
    return sinf((t * 3.14159f) / 2);
 8004f74:	4909      	ldr	r1, [pc, #36]	@ (8004f9c <EaseOutSine+0x30>)
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fb fa08 	bl	800038c <__aeabi_fmul>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fb fab6 	bl	80004f4 <__aeabi_fdiv>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f004 fe72 	bl	8009c74 <sinf>
 8004f90:	4603      	mov	r3, r0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40490fd0 	.word	0x40490fd0

08004fa0 <EaseInOutSine>:

static float EaseInOutSine(float t)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
    return -(cosf(3.14159f * t) - 1) / 2;
 8004fa8:	490d      	ldr	r1, [pc, #52]	@ (8004fe0 <EaseInOutSine+0x40>)
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7fb f9ee 	bl	800038c <__aeabi_fmul>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f004 fe26 	bl	8009c04 <cosf>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fb f8da 	bl	8000178 <__aeabi_fsub>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004fca:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fb fa90 	bl	80004f4 <__aeabi_fdiv>
 8004fd4:	4603      	mov	r3, r0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40490fd0 	.word	0x40490fd0

08004fe4 <GetEaseValue>:

static float GetEaseValue(float progress, EaseType_t easeType)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	460b      	mov	r3, r1
 8004fee:	70fb      	strb	r3, [r7, #3]
    switch (easeType)
 8004ff0:	78fb      	ldrb	r3, [r7, #3]
 8004ff2:	2b18      	cmp	r3, #24
 8004ff4:	f200 80b3 	bhi.w	800515e <GetEaseValue+0x17a>
 8004ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8005000 <GetEaseValue+0x1c>)
 8004ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffe:	bf00      	nop
 8005000:	08005065 	.word	0x08005065
 8005004:	0800506f 	.word	0x0800506f
 8005008:	08005079 	.word	0x08005079
 800500c:	08005083 	.word	0x08005083
 8005010:	0800508d 	.word	0x0800508d
 8005014:	08005097 	.word	0x08005097
 8005018:	080050a1 	.word	0x080050a1
 800501c:	080050ab 	.word	0x080050ab
 8005020:	080050b5 	.word	0x080050b5
 8005024:	080050bf 	.word	0x080050bf
 8005028:	080050c9 	.word	0x080050c9
 800502c:	080050d3 	.word	0x080050d3
 8005030:	080050dd 	.word	0x080050dd
 8005034:	080050e7 	.word	0x080050e7
 8005038:	080050f1 	.word	0x080050f1
 800503c:	080050fb 	.word	0x080050fb
 8005040:	08005105 	.word	0x08005105
 8005044:	0800510f 	.word	0x0800510f
 8005048:	08005119 	.word	0x08005119
 800504c:	08005123 	.word	0x08005123
 8005050:	0800512d 	.word	0x0800512d
 8005054:	08005137 	.word	0x08005137
 8005058:	08005141 	.word	0x08005141
 800505c:	0800514b 	.word	0x0800514b
 8005060:	08005155 	.word	0x08005155
    {
    case EASE_LINEAR:
        return EaseLinear(progress);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7ff fa15 	bl	8004494 <EaseLinear>
 800506a:	4603      	mov	r3, r0
 800506c:	e078      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_IN_QUAD:
        return EaseInQuad(progress);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7ff fa1a 	bl	80044a8 <EaseInQuad>
 8005074:	4603      	mov	r3, r0
 8005076:	e073      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_OUT_QUAD:
        return EaseOutQuad(progress);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7ff fa22 	bl	80044c2 <EaseOutQuad>
 800507e:	4603      	mov	r3, r0
 8005080:	e06e      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_INOUT_QUAD:
        return EaseInOutQuad(progress);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff fa30 	bl	80044e8 <EaseInOutQuad>
 8005088:	4603      	mov	r3, r0
 800508a:	e069      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_IN_CUBIC:
        return EaseInCubic(progress);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7ff fa5e 	bl	800454e <EaseInCubic>
 8005092:	4603      	mov	r3, r0
 8005094:	e064      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_OUT_CUBIC:
        return EaseOutCubic(progress);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7ff fa6b 	bl	8004572 <EaseOutCubic>
 800509c:	4603      	mov	r3, r0
 800509e:	e05f      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_INOUT_CUBIC:
        return EaseInOutCubic(progress);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff fa85 	bl	80045b0 <EaseInOutCubic>
 80050a6:	4603      	mov	r3, r0
 80050a8:	e05a      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_IN_EXPO:
        return EaseInExpo(progress);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7ff fad2 	bl	8004654 <EaseInExpo>
 80050b0:	4603      	mov	r3, r0
 80050b2:	e055      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_OUT_EXPO:
        return EaseOutExpo(progress);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7ff faf3 	bl	80046a0 <EaseOutExpo>
 80050ba:	4603      	mov	r3, r0
 80050bc:	e050      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_INOUT_EXPO:
        return EaseInOutExpo(progress);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff fb14 	bl	80046ec <EaseInOutExpo>
 80050c4:	4603      	mov	r3, r0
 80050c6:	e04b      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_IN_CIRC:
        return EaseInCirc(progress);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff fb6f 	bl	80047ac <EaseInCirc>
 80050ce:	4603      	mov	r3, r0
 80050d0:	e046      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_OUT_CIRC:
        return EaseOutCirc(progress);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7ff fb87 	bl	80047e6 <EaseOutCirc>
 80050d8:	4603      	mov	r3, r0
 80050da:	e041      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_INOUT_CIRC:
        return EaseInOutCirc(progress);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7ff fba0 	bl	8004822 <EaseInOutCirc>
 80050e2:	4603      	mov	r3, r0
 80050e4:	e03c      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_IN_ELASTIC:
        return EaseInElastic(progress);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7ff fbf6 	bl	80048d8 <EaseInElastic>
 80050ec:	4603      	mov	r3, r0
 80050ee:	e037      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_OUT_ELASTIC:
        return EaseOutElastic(progress);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7ff fc41 	bl	8004978 <EaseOutElastic>
 80050f6:	4603      	mov	r3, r0
 80050f8:	e032      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_INOUT_ELASTIC:
        return EaseInOutElastic(progress);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7ff fc8c 	bl	8004a18 <EaseInOutElastic>
 8005100:	4603      	mov	r3, r0
 8005102:	e02d      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_IN_BOUNCE:
        return EaseInBounce(progress);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff fdbd 	bl	8004c84 <EaseInBounce>
 800510a:	4603      	mov	r3, r0
 800510c:	e028      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_OUT_BOUNCE:
        return EaseOutBounce(progress);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff fd1a 	bl	8004b48 <EaseOutBounce>
 8005114:	4603      	mov	r3, r0
 8005116:	e023      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_INOUT_BOUNCE:
        return EaseInOutBounce(progress);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff fdcb 	bl	8004cb4 <EaseInOutBounce>
 800511e:	4603      	mov	r3, r0
 8005120:	e01e      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_IN_BACK:
        return EaseInBack(progress);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7ff fe04 	bl	8004d30 <EaseInBack>
 8005128:	4603      	mov	r3, r0
 800512a:	e019      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_OUT_BACK:
        return EaseOutBack(progress);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f7ff fe31 	bl	8004d94 <EaseOutBack>
 8005132:	4603      	mov	r3, r0
 8005134:	e014      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_INOUT_BACK:
        return EaseInOutBack(progress);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff fe6e 	bl	8004e18 <EaseInOutBack>
 800513c:	4603      	mov	r3, r0
 800513e:	e00f      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_IN_SINE:
        return EaseInSine(progress);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7ff fef3 	bl	8004f2c <EaseInSine>
 8005146:	4603      	mov	r3, r0
 8005148:	e00a      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_OUT_SINE:
        return EaseOutSine(progress);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7ff ff0e 	bl	8004f6c <EaseOutSine>
 8005150:	4603      	mov	r3, r0
 8005152:	e005      	b.n	8005160 <GetEaseValue+0x17c>
    case EASE_INOUT_SINE:
        return EaseInOutSine(progress);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7ff ff23 	bl	8004fa0 <EaseInOutSine>
 800515a:	4603      	mov	r3, r0
 800515c:	e000      	b.n	8005160 <GetEaseValue+0x17c>
    default:
        return progress;
 800515e:	687b      	ldr	r3, [r7, #4]
    }
}
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <OLED_InitAnimation>:

#pragma region ANIMATIONTWEENS
// 这里是底层动画实现
void OLED_InitAnimation(Animation_t *anim, float startValue, float endValue,
                        uint32_t duration, EaseType_t easeType)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
 8005174:	603b      	str	r3, [r7, #0]
    anim->startTime = HAL_GetTick();
 8005176:	f000 fe3d 	bl	8005df4 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	601a      	str	r2, [r3, #0]
    anim->duration = duration;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	605a      	str	r2, [r3, #4]
    anim->startValue = startValue;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	609a      	str	r2, [r3, #8]
    anim->endValue = endValue;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	60da      	str	r2, [r3, #12]
    anim->currentValue = startValue;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	611a      	str	r2, [r3, #16]
    anim->isActive = 1;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2201      	movs	r2, #1
 800519c:	751a      	strb	r2, [r3, #20]
    anim->easeType = easeType;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	7e3a      	ldrb	r2, [r7, #24]
 80051a2:	755a      	strb	r2, [r3, #21]
}
 80051a4:	bf00      	nop
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <OLED_UpdateAnimation>:

// 更新动画状态，返回isActive的值
uint8_t OLED_UpdateAnimation(Animation_t *anim, uint32_t currentTime)
{
 80051ac:	b590      	push	{r4, r7, lr}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
    if (!anim->isActive)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	7d1b      	ldrb	r3, [r3, #20]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <OLED_UpdateAnimation+0x16>
        return 0;
 80051be:	2300      	movs	r3, #0
 80051c0:	e04d      	b.n	800525e <OLED_UpdateAnimation+0xb2>

    uint32_t elapsedTime = currentTime - anim->startTime;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	617b      	str	r3, [r7, #20]
    // 动画完成
    if (elapsedTime >= anim->duration || anim->currentValue == anim->endValue) // 如果我的目标在指定的点上，也关闭isActive
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d20a      	bcs.n	80051ec <OLED_UpdateAnimation+0x40>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691a      	ldr	r2, [r3, #16]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	4619      	mov	r1, r3
 80051e0:	4610      	mov	r0, r2
 80051e2:	f7fb fa67 	bl	80006b4 <__aeabi_fcmpeq>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d008      	beq.n	80051fe <OLED_UpdateAnimation+0x52>
    {
        anim->currentValue = anim->endValue;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	611a      	str	r2, [r3, #16]
        anim->isActive = 0;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	751a      	strb	r2, [r3, #20]
        return 0;
 80051fa:	2300      	movs	r3, #0
 80051fc:	e02f      	b.n	800525e <OLED_UpdateAnimation+0xb2>
    }

    // 计算当前进度 (0.0 - 1.0)
    float progress = (float)elapsedTime / anim->duration;
 80051fe:	6978      	ldr	r0, [r7, #20]
 8005200:	f7fb f86c 	bl	80002dc <__aeabi_ui2f>
 8005204:	4604      	mov	r4, r0
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	4618      	mov	r0, r3
 800520c:	f7fb f866 	bl	80002dc <__aeabi_ui2f>
 8005210:	4603      	mov	r3, r0
 8005212:	4619      	mov	r1, r3
 8005214:	4620      	mov	r0, r4
 8005216:	f7fb f96d 	bl	80004f4 <__aeabi_fdiv>
 800521a:	4603      	mov	r3, r0
 800521c:	613b      	str	r3, [r7, #16]

    // 应用缓动函数
    float easedProgress = GetEaseValue(progress, anim->easeType);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	7d5b      	ldrb	r3, [r3, #21]
 8005222:	4619      	mov	r1, r3
 8005224:	6938      	ldr	r0, [r7, #16]
 8005226:	f7ff fedd 	bl	8004fe4 <GetEaseValue>
 800522a:	60f8      	str	r0, [r7, #12]

    // 计算当前值
    anim->currentValue = anim->startValue + (anim->endValue - anim->startValue) * easedProgress;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689c      	ldr	r4, [r3, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68da      	ldr	r2, [r3, #12]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	4619      	mov	r1, r3
 800523a:	4610      	mov	r0, r2
 800523c:	f7fa ff9c 	bl	8000178 <__aeabi_fsub>
 8005240:	4603      	mov	r3, r0
 8005242:	68f9      	ldr	r1, [r7, #12]
 8005244:	4618      	mov	r0, r3
 8005246:	f7fb f8a1 	bl	800038c <__aeabi_fmul>
 800524a:	4603      	mov	r3, r0
 800524c:	4619      	mov	r1, r3
 800524e:	4620      	mov	r0, r4
 8005250:	f7fa ff94 	bl	800017c <__addsf3>
 8005254:	4603      	mov	r3, r0
 8005256:	461a      	mov	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	611a      	str	r2, [r3, #16]

    return 1;
 800525c:	2301      	movs	r3, #1
}
 800525e:	4618      	mov	r0, r3
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	bd90      	pop	{r4, r7, pc}

08005266 <OLED_GetAnimationValue>:

// 获取当前动画值
float OLED_GetAnimationValue(Animation_t *anim)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
    return anim->currentValue;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
}
 8005272:	4618      	mov	r0, r3
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr

0800527c <OLED_InitAnimationManager>:
AnimationManager_t Status_AnimationManager;
AnimationManager_t g_Title_AnimationManager; // 菜单动画管理器
AnimationManager_t g_AnimationManager; // 全局动画管理器

void OLED_InitAnimationManager(AnimationManager_t *manager) // 这是初始化一个动画管理器，填入你的manager名字，在系统初始化时候调用它
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
    manager->count = 0;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 25f0 	strb.w	r2, [r3, #1520]	@ 0x5f0
    memset(manager->taggedAnimations, 0, sizeof(manager->taggedAnimations));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 8005292:	2100      	movs	r1, #0
 8005294:	4618      	mov	r0, r3
 8005296:	f003 fbe2 	bl	8008a5e <memset>
}
 800529a:	bf00      	nop
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <OLED_FindTaggedAnimation>:

TaggedAnimation_t *OLED_FindTaggedAnimation(AnimationManager_t *manager, const char *tag) // 查找对应manager的标签对应的动画tag
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b084      	sub	sp, #16
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < manager->count; i++)
 80052ac:	2300      	movs	r3, #0
 80052ae:	73fb      	strb	r3, [r7, #15]
 80052b0:	e016      	b.n	80052e0 <OLED_FindTaggedAnimation+0x3e>
    {
        if (strcmp(manager->taggedAnimations[i].tag, tag) == 0)
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
 80052b4:	224c      	movs	r2, #76	@ 0x4c
 80052b6:	fb02 f303 	mul.w	r3, r2, r3
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	4413      	add	r3, r2
 80052be:	6839      	ldr	r1, [r7, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fa ff43 	bl	800014c <strcmp>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d106      	bne.n	80052da <OLED_FindTaggedAnimation+0x38>
        {
            return &manager->taggedAnimations[i];
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	224c      	movs	r2, #76	@ 0x4c
 80052d0:	fb02 f303 	mul.w	r3, r2, r3
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	4413      	add	r3, r2
 80052d8:	e009      	b.n	80052ee <OLED_FindTaggedAnimation+0x4c>
    for (uint8_t i = 0; i < manager->count; i++)
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	3301      	adds	r3, #1
 80052de:	73fb      	strb	r3, [r7, #15]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 80052e6:	7bfa      	ldrb	r2, [r7, #15]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d3e2      	bcc.n	80052b2 <OLED_FindTaggedAnimation+0x10>
        }
    }
    return NULL;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <OLED_GetObjectPosition>:

uint8_t OLED_GetObjectPosition(AnimationManager_t *manager, const char *tag, float *x, float *y) // 获取tag当前位置
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b086      	sub	sp, #24
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	60f8      	str	r0, [r7, #12]
 80052fe:	60b9      	str	r1, [r7, #8]
 8005300:	607a      	str	r2, [r7, #4]
 8005302:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8005304:	68b9      	ldr	r1, [r7, #8]
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f7ff ffcb 	bl	80052a2 <OLED_FindTaggedAnimation>
 800530c:	6178      	str	r0, [r7, #20]
    if (anim)
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00f      	beq.n	8005334 <OLED_GetObjectPosition+0x3e>
    {
        if (x)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <OLED_GetObjectPosition+0x2c>
            *x = anim->currentX;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	601a      	str	r2, [r3, #0]
        if (y)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <OLED_GetObjectPosition+0x3a>
            *y = anim->currentY;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	601a      	str	r2, [r3, #0]
        return 1;
 8005330:	2301      	movs	r3, #1
 8005332:	e000      	b.n	8005336 <OLED_GetObjectPosition+0x40>
    }
    return 0;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <OLED_MoveObject>:

// 移动指定标签的对象
void OLED_MoveObject(AnimationManager_t *manager, const char *tag,
                     float startX, float startY, float targetX, float targetY,
                     uint32_t duration, EaseType_t easeType) // 这个函数是用来移动一个对象的，tag是对象的标签，startX和startY是起始坐标，targetX和targetY是目标坐标，duration是动画持续时间，easeType是缓动类型
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b088      	sub	sp, #32
 8005342:	af02      	add	r7, sp, #8
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	607a      	str	r2, [r7, #4]
 800534a:	603b      	str	r3, [r7, #0]
    // 查找已存在的动画
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 800534c:	68b9      	ldr	r1, [r7, #8]
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f7ff ffa7 	bl	80052a2 <OLED_FindTaggedAnimation>
 8005354:	6178      	str	r0, [r7, #20]

    // 如果没找到并且还有可用槽位，创建新的动画
    if (anim == NULL)
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d122      	bne.n	80053a2 <OLED_MoveObject+0x64>
    {
        if (manager->count >= MAX_ANIMATIONS)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8005362:	2b13      	cmp	r3, #19
 8005364:	d838      	bhi.n	80053d8 <OLED_MoveObject+0x9a>
            return; // 动画已满，无法添加

        anim = &manager->taggedAnimations[manager->count++];
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	b2d1      	uxtb	r1, r2
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	f882 15f0 	strb.w	r1, [r2, #1520]	@ 0x5f0
 8005376:	461a      	mov	r2, r3
 8005378:	234c      	movs	r3, #76	@ 0x4c
 800537a:	fb02 f303 	mul.w	r3, r2, r3
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	4413      	add	r3, r2
 8005382:	617b      	str	r3, [r7, #20]
        strncpy(anim->tag, tag, sizeof(anim->tag) - 1);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	220f      	movs	r2, #15
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	4618      	mov	r0, r3
 800538c:	f003 fb6f 	bl	8008a6e <strncpy>
        anim->tag[sizeof(anim->tag) - 1] = '\0'; // 确保字符串结束
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2200      	movs	r2, #0
 8005394:	73da      	strb	r2, [r3, #15]
        anim->currentX = startX;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = startY;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // 初始化或更新X和Y坐标的动画
    OLED_InitAnimation(&anim->xAnimation, startX, targetX, duration, easeType);
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f103 0010 	add.w	r0, r3, #16
 80053a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b0:	6a3a      	ldr	r2, [r7, #32]
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	f7ff fed8 	bl	8005168 <OLED_InitAnimation>
    OLED_InitAnimation(&anim->yAnimation, startY, targetY, duration, easeType);
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80053be:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053c8:	6839      	ldr	r1, [r7, #0]
 80053ca:	f7ff fecd 	bl	8005168 <OLED_InitAnimation>
    anim->isActive = 1;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053d6:	e000      	b.n	80053da <OLED_MoveObject+0x9c>
            return; // 动画已满，无法添加
 80053d8:	bf00      	nop
}
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <OLED_UpdateAnimationManager>:

// 更新manager里面的所有动画!
void OLED_UpdateAnimationManager(AnimationManager_t *manager) //! 这里需要使用OLED_UpdateDisplayVSync()来更新显示
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 80053e8:	f000 fd04 	bl	8005df4 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

    for (uint8_t i = 0; i < manager->count; i++)
 80053ee:	2300      	movs	r3, #0
 80053f0:	75fb      	strb	r3, [r7, #23]
 80053f2:	e03a      	b.n	800546a <OLED_UpdateAnimationManager+0x8a>
    {
        TaggedAnimation_t *anim = &manager->taggedAnimations[i];
 80053f4:	7dfb      	ldrb	r3, [r7, #23]
 80053f6:	224c      	movs	r2, #76	@ 0x4c
 80053f8:	fb02 f303 	mul.w	r3, r2, r3
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	4413      	add	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]
        if (!anim->isActive)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005408:	2b00      	cmp	r3, #0
 800540a:	d02a      	beq.n	8005462 <OLED_UpdateAnimationManager+0x82>
            continue;

        uint8_t activeX = OLED_UpdateAnimation(&anim->xAnimation, currentTime);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3310      	adds	r3, #16
 8005410:	6939      	ldr	r1, [r7, #16]
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff feca 	bl	80051ac <OLED_UpdateAnimation>
 8005418:	4603      	mov	r3, r0
 800541a:	72fb      	strb	r3, [r7, #11]
        uint8_t activeY = OLED_UpdateAnimation(&anim->yAnimation, currentTime);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3328      	adds	r3, #40	@ 0x28
 8005420:	6939      	ldr	r1, [r7, #16]
 8005422:	4618      	mov	r0, r3
 8005424:	f7ff fec2 	bl	80051ac <OLED_UpdateAnimation>
 8005428:	4603      	mov	r3, r0
 800542a:	72bb      	strb	r3, [r7, #10]

        anim->currentX = OLED_GetAnimationValue(&anim->xAnimation);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	3310      	adds	r3, #16
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff ff18 	bl	8005266 <OLED_GetAnimationValue>
 8005436:	4602      	mov	r2, r0
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = OLED_GetAnimationValue(&anim->yAnimation);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3328      	adds	r3, #40	@ 0x28
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff ff10 	bl	8005266 <OLED_GetAnimationValue>
 8005446:	4602      	mov	r2, r0
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	649a      	str	r2, [r3, #72]	@ 0x48

        // 如果两个动画都结束，则标记该对象动画为非活跃
        if (!activeX && !activeY)
 800544c:	7afb      	ldrb	r3, [r7, #11]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d108      	bne.n	8005464 <OLED_UpdateAnimationManager+0x84>
 8005452:	7abb      	ldrb	r3, [r7, #10]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d105      	bne.n	8005464 <OLED_UpdateAnimationManager+0x84>
            anim->isActive = 0;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005460:	e000      	b.n	8005464 <OLED_UpdateAnimationManager+0x84>
            continue;
 8005462:	bf00      	nop
    for (uint8_t i = 0; i < manager->count; i++)
 8005464:	7dfb      	ldrb	r3, [r7, #23]
 8005466:	3301      	adds	r3, #1
 8005468:	75fb      	strb	r3, [r7, #23]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8005470:	7dfa      	ldrb	r2, [r7, #23]
 8005472:	429a      	cmp	r2, r3
 8005474:	d3be      	bcc.n	80053f4 <OLED_UpdateAnimationManager+0x14>
    }
}
 8005476:	bf00      	nop
 8005478:	bf00      	nop
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <OLED_GetAnimationStates>:

uint8_t OLED_GetAnimationStates(AnimationManager_t *manager, const char *tag) // 返回值是1表示活跃，0表示非活跃
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 800548a:	6839      	ldr	r1, [r7, #0]
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7ff ff08 	bl	80052a2 <OLED_FindTaggedAnimation>
 8005492:	60f8      	str	r0, [r7, #12]
    if (anim)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <OLED_GetAnimationStates+0x22>
    {
        return anim->isActive;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054a0:	e000      	b.n	80054a4 <OLED_GetAnimationStates+0x24>
    }
    return 0; // 如果没有找到，返回0表示非活跃
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <OLED_DoTweenObject>:

// 移动指定标签的对象到目标坐标。
// 如果对象已在向同一目标动画且动画处于活动状态，则不执行任何操作。
// 否则，它会中断当前动画（如果活动）并从当前位置开始新的动画。
void OLED_DoTweenObject(AnimationManager_t *manager, const char *tag, float targetX, float targetY, uint32_t duration, EaseType_t easeType)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08a      	sub	sp, #40	@ 0x28
 80054b0:	af04      	add	r7, sp, #16
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
 80054b8:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 80054ba:	68b9      	ldr	r1, [r7, #8]
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f7ff fef0 	bl	80052a2 <OLED_FindTaggedAnimation>
 80054c2:	6178      	str	r0, [r7, #20]

    if (anim == NULL)
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d029      	beq.n	800551e <OLED_DoTweenObject+0x72>
        // 但这需要为新对象定义 initialX, initialY。
        return;
    }

    // 检查动画是否已处于活动状态并且已经朝向相同的目标
    if (anim->isActive &&
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d011      	beq.n	80054f8 <OLED_DoTweenObject+0x4c>
        anim->xAnimation.endValue == targetX &&
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	69db      	ldr	r3, [r3, #28]
    if (anim->isActive &&
 80054d8:	4619      	mov	r1, r3
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7fb f8ea 	bl	80006b4 <__aeabi_fcmpeq>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d008      	beq.n	80054f8 <OLED_DoTweenObject+0x4c>
        anim->yAnimation.endValue == targetY)
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        anim->xAnimation.endValue == targetX &&
 80054ea:	4619      	mov	r1, r3
 80054ec:	6838      	ldr	r0, [r7, #0]
 80054ee:	f7fb f8e1 	bl	80006b4 <__aeabi_fcmpeq>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d114      	bne.n	8005522 <OLED_DoTweenObject+0x76>
        return;
    }

    // 否则，（重新）启动动画到新目标
    // OLED_MoveObject 将从 anim->currentX, anim->currentY 开始动画
    OLED_MoveObject(manager, tag, anim->currentX, anim->currentY, targetX, targetY, duration, easeType);
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8005500:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005504:	9303      	str	r3, [sp, #12]
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	9302      	str	r3, [sp, #8]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	9301      	str	r3, [sp, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	460b      	mov	r3, r1
 8005514:	68b9      	ldr	r1, [r7, #8]
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f7ff ff11 	bl	800533e <OLED_MoveObject>
 800551c:	e002      	b.n	8005524 <OLED_DoTweenObject+0x78>
        return;
 800551e:	bf00      	nop
 8005520:	e000      	b.n	8005524 <OLED_DoTweenObject+0x78>
        return;
 8005522:	bf00      	nop
}
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <OLED_DrawFilledRectangle>:
    }
}

// 绘制填充矩形
void OLED_DrawFilledRectangle(int16_t x, int16_t y, uint8_t width, uint8_t height, uint8_t color) //! UPDATEDISPLAY REQUIRED
{
 800552a:	b590      	push	{r4, r7, lr}
 800552c:	b087      	sub	sp, #28
 800552e:	af00      	add	r7, sp, #0
 8005530:	4604      	mov	r4, r0
 8005532:	4608      	mov	r0, r1
 8005534:	4611      	mov	r1, r2
 8005536:	461a      	mov	r2, r3
 8005538:	4623      	mov	r3, r4
 800553a:	80fb      	strh	r3, [r7, #6]
 800553c:	4603      	mov	r3, r0
 800553e:	80bb      	strh	r3, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	70fb      	strb	r3, [r7, #3]
 8005544:	4613      	mov	r3, r2
 8005546:	70bb      	strb	r3, [r7, #2]
    // Initial check for zero dimensions
    if (width == 0 || height == 0)
 8005548:	78fb      	ldrb	r3, [r7, #3]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d07e      	beq.n	800564c <OLED_DrawFilledRectangle+0x122>
 800554e:	78bb      	ldrb	r3, [r7, #2]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d07b      	beq.n	800564c <OLED_DrawFilledRectangle+0x122>
    {
        return;
    }

    // Use int16_t for width and height internally for clipping calculations
    int16_t current_width = width;
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	82fb      	strh	r3, [r7, #22]
    int16_t current_height = height;
 8005558:	78bb      	ldrb	r3, [r7, #2]
 800555a:	82bb      	strh	r3, [r7, #20]

    // Clip left edge: if x is negative, adjust width and set x to 0
    if (x < 0)
 800555c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005560:	2b00      	cmp	r3, #0
 8005562:	da06      	bge.n	8005572 <OLED_DrawFilledRectangle+0x48>
    {
        current_width += x; // x is negative, so this reduces width
 8005564:	8afa      	ldrh	r2, [r7, #22]
 8005566:	88fb      	ldrh	r3, [r7, #6]
 8005568:	4413      	add	r3, r2
 800556a:	b29b      	uxth	r3, r3
 800556c:	82fb      	strh	r3, [r7, #22]
        x = 0;
 800556e:	2300      	movs	r3, #0
 8005570:	80fb      	strh	r3, [r7, #6]
    }

    // Clip top edge: if y is negative, adjust height and set y to 0
    if (y < 0)
 8005572:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	da06      	bge.n	8005588 <OLED_DrawFilledRectangle+0x5e>
    {
        current_height += y; // y is negative, so this reduces height
 800557a:	8aba      	ldrh	r2, [r7, #20]
 800557c:	88bb      	ldrh	r3, [r7, #4]
 800557e:	4413      	add	r3, r2
 8005580:	b29b      	uxth	r3, r3
 8005582:	82bb      	strh	r3, [r7, #20]
        y = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	80bb      	strh	r3, [r7, #4]
    }

    // If width or height became non-positive after left/top clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 8005588:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800558c:	2b00      	cmp	r3, #0
 800558e:	dd5f      	ble.n	8005650 <OLED_DrawFilledRectangle+0x126>
 8005590:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005594:	2b00      	cmp	r3, #0
 8005596:	dd5b      	ble.n	8005650 <OLED_DrawFilledRectangle+0x126>
        return;
    }

    // Check if the adjusted rectangle is entirely off-screen to the right or bottom
    // At this point, x and y are >= 0.
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT)
 8005598:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800559c:	2b7f      	cmp	r3, #127	@ 0x7f
 800559e:	dc59      	bgt.n	8005654 <OLED_DrawFilledRectangle+0x12a>
 80055a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80055a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80055a6:	dc55      	bgt.n	8005654 <OLED_DrawFilledRectangle+0x12a>
    {
        return;
    }

    // Clip right edge: if x + current_width extends beyond OLED_WIDTH
    if (x + current_width > OLED_WIDTH)
 80055a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80055ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80055b0:	4413      	add	r3, r2
 80055b2:	2b80      	cmp	r3, #128	@ 0x80
 80055b4:	dd04      	ble.n	80055c0 <OLED_DrawFilledRectangle+0x96>
    {
        current_width = OLED_WIDTH - x;
 80055b6:	88fb      	ldrh	r3, [r7, #6]
 80055b8:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80055bc:	b29b      	uxth	r3, r3
 80055be:	82fb      	strh	r3, [r7, #22]
    }

    // Clip bottom edge: if y + current_height extends beyond OLED_HEIGHT
    if (y + current_height > OLED_HEIGHT)
 80055c0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80055c4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80055c8:	4413      	add	r3, r2
 80055ca:	2b40      	cmp	r3, #64	@ 0x40
 80055cc:	dd04      	ble.n	80055d8 <OLED_DrawFilledRectangle+0xae>
    {
        current_height = OLED_HEIGHT - y;
 80055ce:	88bb      	ldrh	r3, [r7, #4]
 80055d0:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	82bb      	strh	r3, [r7, #20]
    }

    // If width or height became non-positive after right/bottom clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 80055d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	dd3b      	ble.n	8005658 <OLED_DrawFilledRectangle+0x12e>
 80055e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	dd37      	ble.n	8005658 <OLED_DrawFilledRectangle+0x12e>
    {
        return;
    }

    // Cast coordinates and dimensions to uint8_t for drawing
    uint8_t final_x = (uint8_t)x;
 80055e8:	88fb      	ldrh	r3, [r7, #6]
 80055ea:	747b      	strb	r3, [r7, #17]
    uint8_t final_y = (uint8_t)y;
 80055ec:	88bb      	ldrh	r3, [r7, #4]
 80055ee:	743b      	strb	r3, [r7, #16]
    uint8_t final_width = (uint8_t)current_width;
 80055f0:	8afb      	ldrh	r3, [r7, #22]
 80055f2:	73fb      	strb	r3, [r7, #15]
    uint8_t final_height = (uint8_t)current_height;
 80055f4:	8abb      	ldrh	r3, [r7, #20]
 80055f6:	73bb      	strb	r3, [r7, #14]

    uint8_t x2 = final_x + final_width - 1;
 80055f8:	7c7a      	ldrb	r2, [r7, #17]
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
 80055fc:	4413      	add	r3, r2
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	737b      	strb	r3, [r7, #13]
    uint8_t y2 = final_y + final_height - 1;
 8005604:	7c3a      	ldrb	r2, [r7, #16]
 8005606:	7bbb      	ldrb	r3, [r7, #14]
 8005608:	4413      	add	r3, r2
 800560a:	b2db      	uxtb	r3, r3
 800560c:	3b01      	subs	r3, #1
 800560e:	733b      	strb	r3, [r7, #12]

    // 逐像素填充
    for (uint8_t j = final_y; j <= y2; j++)
 8005610:	7c3b      	ldrb	r3, [r7, #16]
 8005612:	74fb      	strb	r3, [r7, #19]
 8005614:	e015      	b.n	8005642 <OLED_DrawFilledRectangle+0x118>
    {
        for (uint8_t i = final_x; i <= x2; i++)
 8005616:	7c7b      	ldrb	r3, [r7, #17]
 8005618:	74bb      	strb	r3, [r7, #18]
 800561a:	e00b      	b.n	8005634 <OLED_DrawFilledRectangle+0x10a>
        {
            OLED_WritePixel(i, j, color);
 800561c:	7cbb      	ldrb	r3, [r7, #18]
 800561e:	b21b      	sxth	r3, r3
 8005620:	7cfa      	ldrb	r2, [r7, #19]
 8005622:	b211      	sxth	r1, r2
 8005624:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005628:	4618      	mov	r0, r3
 800562a:	f7fc fbdd 	bl	8001de8 <OLED_WritePixel>
        for (uint8_t i = final_x; i <= x2; i++)
 800562e:	7cbb      	ldrb	r3, [r7, #18]
 8005630:	3301      	adds	r3, #1
 8005632:	74bb      	strb	r3, [r7, #18]
 8005634:	7cba      	ldrb	r2, [r7, #18]
 8005636:	7b7b      	ldrb	r3, [r7, #13]
 8005638:	429a      	cmp	r2, r3
 800563a:	d9ef      	bls.n	800561c <OLED_DrawFilledRectangle+0xf2>
    for (uint8_t j = final_y; j <= y2; j++)
 800563c:	7cfb      	ldrb	r3, [r7, #19]
 800563e:	3301      	adds	r3, #1
 8005640:	74fb      	strb	r3, [r7, #19]
 8005642:	7cfa      	ldrb	r2, [r7, #19]
 8005644:	7b3b      	ldrb	r3, [r7, #12]
 8005646:	429a      	cmp	r2, r3
 8005648:	d9e5      	bls.n	8005616 <OLED_DrawFilledRectangle+0xec>
 800564a:	e006      	b.n	800565a <OLED_DrawFilledRectangle+0x130>
        return;
 800564c:	bf00      	nop
 800564e:	e004      	b.n	800565a <OLED_DrawFilledRectangle+0x130>
        return;
 8005650:	bf00      	nop
 8005652:	e002      	b.n	800565a <OLED_DrawFilledRectangle+0x130>
        return;
 8005654:	bf00      	nop
 8005656:	e000      	b.n	800565a <OLED_DrawFilledRectangle+0x130>
        return;
 8005658:	bf00      	nop
        }
    }
}
 800565a:	371c      	adds	r7, #28
 800565c:	46bd      	mov	sp, r7
 800565e:	bd90      	pop	{r4, r7, pc}

08005660 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8005664:	4b17      	ldr	r3, [pc, #92]	@ (80056c4 <MX_SPI2_Init+0x64>)
 8005666:	4a18      	ldr	r2, [pc, #96]	@ (80056c8 <MX_SPI2_Init+0x68>)
 8005668:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800566a:	4b16      	ldr	r3, [pc, #88]	@ (80056c4 <MX_SPI2_Init+0x64>)
 800566c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005670:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005672:	4b14      	ldr	r3, [pc, #80]	@ (80056c4 <MX_SPI2_Init+0x64>)
 8005674:	2200      	movs	r2, #0
 8005676:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005678:	4b12      	ldr	r3, [pc, #72]	@ (80056c4 <MX_SPI2_Init+0x64>)
 800567a:	2200      	movs	r2, #0
 800567c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800567e:	4b11      	ldr	r3, [pc, #68]	@ (80056c4 <MX_SPI2_Init+0x64>)
 8005680:	2200      	movs	r2, #0
 8005682:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005684:	4b0f      	ldr	r3, [pc, #60]	@ (80056c4 <MX_SPI2_Init+0x64>)
 8005686:	2200      	movs	r2, #0
 8005688:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800568a:	4b0e      	ldr	r3, [pc, #56]	@ (80056c4 <MX_SPI2_Init+0x64>)
 800568c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005690:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005692:	4b0c      	ldr	r3, [pc, #48]	@ (80056c4 <MX_SPI2_Init+0x64>)
 8005694:	2200      	movs	r2, #0
 8005696:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005698:	4b0a      	ldr	r3, [pc, #40]	@ (80056c4 <MX_SPI2_Init+0x64>)
 800569a:	2200      	movs	r2, #0
 800569c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800569e:	4b09      	ldr	r3, [pc, #36]	@ (80056c4 <MX_SPI2_Init+0x64>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056a4:	4b07      	ldr	r3, [pc, #28]	@ (80056c4 <MX_SPI2_Init+0x64>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80056aa:	4b06      	ldr	r3, [pc, #24]	@ (80056c4 <MX_SPI2_Init+0x64>)
 80056ac:	220a      	movs	r2, #10
 80056ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80056b0:	4804      	ldr	r0, [pc, #16]	@ (80056c4 <MX_SPI2_Init+0x64>)
 80056b2:	f002 f887 	bl	80077c4 <HAL_SPI_Init>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80056bc:	f7fc fa41 	bl	8001b42 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80056c0:	bf00      	nop
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	20003ecc 	.word	0x20003ecc
 80056c8:	40003800 	.word	0x40003800

080056cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b088      	sub	sp, #32
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056d4:	f107 0310 	add.w	r3, r7, #16
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	605a      	str	r2, [r3, #4]
 80056de:	609a      	str	r2, [r3, #8]
 80056e0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005758 <HAL_SPI_MspInit+0x8c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d131      	bne.n	8005750 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80056ec:	4b1b      	ldr	r3, [pc, #108]	@ (800575c <HAL_SPI_MspInit+0x90>)
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	4a1a      	ldr	r2, [pc, #104]	@ (800575c <HAL_SPI_MspInit+0x90>)
 80056f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80056f6:	61d3      	str	r3, [r2, #28]
 80056f8:	4b18      	ldr	r3, [pc, #96]	@ (800575c <HAL_SPI_MspInit+0x90>)
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005704:	4b15      	ldr	r3, [pc, #84]	@ (800575c <HAL_SPI_MspInit+0x90>)
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	4a14      	ldr	r2, [pc, #80]	@ (800575c <HAL_SPI_MspInit+0x90>)
 800570a:	f043 0308 	orr.w	r3, r3, #8
 800570e:	6193      	str	r3, [r2, #24]
 8005710:	4b12      	ldr	r3, [pc, #72]	@ (800575c <HAL_SPI_MspInit+0x90>)
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	f003 0308 	and.w	r3, r3, #8
 8005718:	60bb      	str	r3, [r7, #8]
 800571a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = Flash_SCK_Pin|Flash_MOSI_Pin;
 800571c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8005720:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005722:	2302      	movs	r3, #2
 8005724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005726:	2303      	movs	r3, #3
 8005728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800572a:	f107 0310 	add.w	r3, r7, #16
 800572e:	4619      	mov	r1, r3
 8005730:	480b      	ldr	r0, [pc, #44]	@ (8005760 <HAL_SPI_MspInit+0x94>)
 8005732:	f000 fdfb 	bl	800632c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Flash_MISO_Pin;
 8005736:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800573a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005740:	2300      	movs	r3, #0
 8005742:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Flash_MISO_GPIO_Port, &GPIO_InitStruct);
 8005744:	f107 0310 	add.w	r3, r7, #16
 8005748:	4619      	mov	r1, r3
 800574a:	4805      	ldr	r0, [pc, #20]	@ (8005760 <HAL_SPI_MspInit+0x94>)
 800574c:	f000 fdee 	bl	800632c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005750:	bf00      	nop
 8005752:	3720      	adds	r7, #32
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	40003800 	.word	0x40003800
 800575c:	40021000 	.word	0x40021000
 8005760:	40010c00 	.word	0x40010c00

08005764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800576a:	4b15      	ldr	r3, [pc, #84]	@ (80057c0 <HAL_MspInit+0x5c>)
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	4a14      	ldr	r2, [pc, #80]	@ (80057c0 <HAL_MspInit+0x5c>)
 8005770:	f043 0301 	orr.w	r3, r3, #1
 8005774:	6193      	str	r3, [r2, #24]
 8005776:	4b12      	ldr	r3, [pc, #72]	@ (80057c0 <HAL_MspInit+0x5c>)
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	60bb      	str	r3, [r7, #8]
 8005780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005782:	4b0f      	ldr	r3, [pc, #60]	@ (80057c0 <HAL_MspInit+0x5c>)
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	4a0e      	ldr	r2, [pc, #56]	@ (80057c0 <HAL_MspInit+0x5c>)
 8005788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800578c:	61d3      	str	r3, [r2, #28]
 800578e:	4b0c      	ldr	r3, [pc, #48]	@ (80057c0 <HAL_MspInit+0x5c>)
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005796:	607b      	str	r3, [r7, #4]
 8005798:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800579a:	4b0a      	ldr	r3, [pc, #40]	@ (80057c4 <HAL_MspInit+0x60>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80057ae:	60fb      	str	r3, [r7, #12]
 80057b0:	4a04      	ldr	r2, [pc, #16]	@ (80057c4 <HAL_MspInit+0x60>)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057b6:	bf00      	nop
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr
 80057c0:	40021000 	.word	0x40021000
 80057c4:	40010000 	.word	0x40010000

080057c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80057cc:	bf00      	nop
 80057ce:	e7fd      	b.n	80057cc <NMI_Handler+0x4>

080057d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80057d0:	b480      	push	{r7}
 80057d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80057d4:	bf00      	nop
 80057d6:	e7fd      	b.n	80057d4 <HardFault_Handler+0x4>

080057d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80057dc:	bf00      	nop
 80057de:	e7fd      	b.n	80057dc <MemManage_Handler+0x4>

080057e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80057e4:	bf00      	nop
 80057e6:	e7fd      	b.n	80057e4 <BusFault_Handler+0x4>

080057e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80057ec:	bf00      	nop
 80057ee:	e7fd      	b.n	80057ec <UsageFault_Handler+0x4>

080057f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80057f4:	bf00      	nop
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr

080057fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005800:	bf00      	nop
 8005802:	46bd      	mov	sp, r7
 8005804:	bc80      	pop	{r7}
 8005806:	4770      	bx	lr

08005808 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800580c:	bf00      	nop
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr

08005814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005818:	f000 fada 	bl	8005dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800581c:	bf00      	nop
 800581e:	bd80      	pop	{r7, pc}

08005820 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005824:	4802      	ldr	r0, [pc, #8]	@ (8005830 <DMA1_Channel6_IRQHandler+0x10>)
 8005826:	f000 fc7b 	bl	8006120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800582a:	bf00      	nop
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	200002c0 	.word	0x200002c0

08005834 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
  return 1;
 8005838:	2301      	movs	r3, #1
}
 800583a:	4618      	mov	r0, r3
 800583c:	46bd      	mov	sp, r7
 800583e:	bc80      	pop	{r7}
 8005840:	4770      	bx	lr

08005842 <_kill>:

int _kill(int pid, int sig)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b082      	sub	sp, #8
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
 800584a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800584c:	f003 f968 	bl	8008b20 <__errno>
 8005850:	4603      	mov	r3, r0
 8005852:	2216      	movs	r2, #22
 8005854:	601a      	str	r2, [r3, #0]
  return -1;
 8005856:	f04f 33ff 	mov.w	r3, #4294967295
}
 800585a:	4618      	mov	r0, r3
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <_exit>:

void _exit (int status)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b082      	sub	sp, #8
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800586a:	f04f 31ff 	mov.w	r1, #4294967295
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7ff ffe7 	bl	8005842 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005874:	bf00      	nop
 8005876:	e7fd      	b.n	8005874 <_exit+0x12>

08005878 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005884:	2300      	movs	r3, #0
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	e00a      	b.n	80058a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800588a:	f3af 8000 	nop.w
 800588e:	4601      	mov	r1, r0
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	60ba      	str	r2, [r7, #8]
 8005896:	b2ca      	uxtb	r2, r1
 8005898:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	3301      	adds	r3, #1
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	dbf0      	blt.n	800588a <_read+0x12>
  }

  return len;
 80058a8:	687b      	ldr	r3, [r7, #4]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3718      	adds	r7, #24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b086      	sub	sp, #24
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	60f8      	str	r0, [r7, #12]
 80058ba:	60b9      	str	r1, [r7, #8]
 80058bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058be:	2300      	movs	r3, #0
 80058c0:	617b      	str	r3, [r7, #20]
 80058c2:	e009      	b.n	80058d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	60ba      	str	r2, [r7, #8]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	3301      	adds	r3, #1
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	429a      	cmp	r2, r3
 80058de:	dbf1      	blt.n	80058c4 <_write+0x12>
  }
  return len;
 80058e0:	687b      	ldr	r3, [r7, #4]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <_close>:

int _close(int file)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80058f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bc80      	pop	{r7}
 80058fe:	4770      	bx	lr

08005900 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005910:	605a      	str	r2, [r3, #4]
  return 0;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	bc80      	pop	{r7}
 800591c:	4770      	bx	lr

0800591e <_isatty>:

int _isatty(int file)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005926:	2301      	movs	r3, #1
}
 8005928:	4618      	mov	r0, r3
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	bc80      	pop	{r7}
 8005930:	4770      	bx	lr

08005932 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005932:	b480      	push	{r7}
 8005934:	b085      	sub	sp, #20
 8005936:	af00      	add	r7, sp, #0
 8005938:	60f8      	str	r0, [r7, #12]
 800593a:	60b9      	str	r1, [r7, #8]
 800593c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	bc80      	pop	{r7}
 8005948:	4770      	bx	lr
	...

0800594c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005954:	4a14      	ldr	r2, [pc, #80]	@ (80059a8 <_sbrk+0x5c>)
 8005956:	4b15      	ldr	r3, [pc, #84]	@ (80059ac <_sbrk+0x60>)
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005960:	4b13      	ldr	r3, [pc, #76]	@ (80059b0 <_sbrk+0x64>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d102      	bne.n	800596e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005968:	4b11      	ldr	r3, [pc, #68]	@ (80059b0 <_sbrk+0x64>)
 800596a:	4a12      	ldr	r2, [pc, #72]	@ (80059b4 <_sbrk+0x68>)
 800596c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800596e:	4b10      	ldr	r3, [pc, #64]	@ (80059b0 <_sbrk+0x64>)
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4413      	add	r3, r2
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	429a      	cmp	r2, r3
 800597a:	d207      	bcs.n	800598c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800597c:	f003 f8d0 	bl	8008b20 <__errno>
 8005980:	4603      	mov	r3, r0
 8005982:	220c      	movs	r2, #12
 8005984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005986:	f04f 33ff 	mov.w	r3, #4294967295
 800598a:	e009      	b.n	80059a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800598c:	4b08      	ldr	r3, [pc, #32]	@ (80059b0 <_sbrk+0x64>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005992:	4b07      	ldr	r3, [pc, #28]	@ (80059b0 <_sbrk+0x64>)
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4413      	add	r3, r2
 800599a:	4a05      	ldr	r2, [pc, #20]	@ (80059b0 <_sbrk+0x64>)
 800599c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800599e:	68fb      	ldr	r3, [r7, #12]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	20005000 	.word	0x20005000
 80059ac:	00000400 	.word	0x00000400
 80059b0:	20003f24 	.word	0x20003f24
 80059b4:	20004108 	.word	0x20004108

080059b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80059b8:	b480      	push	{r7}
 80059ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80059bc:	bf00      	nop
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr

080059c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b096      	sub	sp, #88	@ 0x58
 80059c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059ca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80059ce:	2200      	movs	r2, #0
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	605a      	str	r2, [r3, #4]
 80059d4:	609a      	str	r2, [r3, #8]
 80059d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059d8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80059dc:	2200      	movs	r2, #0
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80059e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059e6:	2200      	movs	r2, #0
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	605a      	str	r2, [r3, #4]
 80059ec:	609a      	str	r2, [r3, #8]
 80059ee:	60da      	str	r2, [r3, #12]
 80059f0:	611a      	str	r2, [r3, #16]
 80059f2:	615a      	str	r2, [r3, #20]
 80059f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80059f6:	1d3b      	adds	r3, r7, #4
 80059f8:	2220      	movs	r2, #32
 80059fa:	2100      	movs	r1, #0
 80059fc:	4618      	mov	r0, r3
 80059fe:	f003 f82e 	bl	8008a5e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005a02:	4b3f      	ldr	r3, [pc, #252]	@ (8005b00 <MX_TIM1_Init+0x13c>)
 8005a04:	4a3f      	ldr	r2, [pc, #252]	@ (8005b04 <MX_TIM1_Init+0x140>)
 8005a06:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720-1;
 8005a08:	4b3d      	ldr	r3, [pc, #244]	@ (8005b00 <MX_TIM1_Init+0x13c>)
 8005a0a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8005a0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a10:	4b3b      	ldr	r3, [pc, #236]	@ (8005b00 <MX_TIM1_Init+0x13c>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8005a16:	4b3a      	ldr	r3, [pc, #232]	@ (8005b00 <MX_TIM1_Init+0x13c>)
 8005a18:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8005a1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a1e:	4b38      	ldr	r3, [pc, #224]	@ (8005b00 <MX_TIM1_Init+0x13c>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005a24:	4b36      	ldr	r3, [pc, #216]	@ (8005b00 <MX_TIM1_Init+0x13c>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a2a:	4b35      	ldr	r3, [pc, #212]	@ (8005b00 <MX_TIM1_Init+0x13c>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005a30:	4833      	ldr	r0, [pc, #204]	@ (8005b00 <MX_TIM1_Init+0x13c>)
 8005a32:	f001 ff4b 	bl	80078cc <HAL_TIM_Base_Init>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005a3c:	f7fc f881 	bl	8001b42 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a44:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005a46:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	482c      	ldr	r0, [pc, #176]	@ (8005b00 <MX_TIM1_Init+0x13c>)
 8005a4e:	f002 fa79 	bl	8007f44 <HAL_TIM_ConfigClockSource>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005a58:	f7fc f873 	bl	8001b42 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005a5c:	4828      	ldr	r0, [pc, #160]	@ (8005b00 <MX_TIM1_Init+0x13c>)
 8005a5e:	f001 ff84 	bl	800796a <HAL_TIM_PWM_Init>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005a68:	f7fc f86b 	bl	8001b42 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a70:	2300      	movs	r3, #0
 8005a72:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005a74:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005a78:	4619      	mov	r1, r3
 8005a7a:	4821      	ldr	r0, [pc, #132]	@ (8005b00 <MX_TIM1_Init+0x13c>)
 8005a7c:	f002 fdda 	bl	8008634 <HAL_TIMEx_MasterConfigSynchronization>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8005a86:	f7fc f85c 	bl	8001b42 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a8a:	2360      	movs	r3, #96	@ 0x60
 8005a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a92:	2300      	movs	r3, #0
 8005a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005a96:	2300      	movs	r3, #0
 8005a98:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005aa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005aaa:	2204      	movs	r2, #4
 8005aac:	4619      	mov	r1, r3
 8005aae:	4814      	ldr	r0, [pc, #80]	@ (8005b00 <MX_TIM1_Init+0x13c>)
 8005ab0:	f002 f986 	bl	8007dc0 <HAL_TIM_PWM_ConfigChannel>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8005aba:	f7fc f842 	bl	8001b42 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005aca:	2300      	movs	r3, #0
 8005acc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005ad2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005ad6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005adc:	1d3b      	adds	r3, r7, #4
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4807      	ldr	r0, [pc, #28]	@ (8005b00 <MX_TIM1_Init+0x13c>)
 8005ae2:	f002 fe05 	bl	80086f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8005aec:	f7fc f829 	bl	8001b42 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005af0:	4803      	ldr	r0, [pc, #12]	@ (8005b00 <MX_TIM1_Init+0x13c>)
 8005af2:	f000 f8cd 	bl	8005c90 <HAL_TIM_MspPostInit>

}
 8005af6:	bf00      	nop
 8005af8:	3758      	adds	r7, #88	@ 0x58
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	20003f28 	.word	0x20003f28
 8005b04:	40012c00 	.word	0x40012c00

08005b08 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08c      	sub	sp, #48	@ 0x30
 8005b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005b0e:	f107 030c 	add.w	r3, r7, #12
 8005b12:	2224      	movs	r2, #36	@ 0x24
 8005b14:	2100      	movs	r1, #0
 8005b16:	4618      	mov	r0, r3
 8005b18:	f002 ffa1 	bl	8008a5e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b1c:	1d3b      	adds	r3, r7, #4
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005b24:	4b20      	ldr	r3, [pc, #128]	@ (8005ba8 <MX_TIM3_Init+0xa0>)
 8005b26:	4a21      	ldr	r2, [pc, #132]	@ (8005bac <MX_TIM3_Init+0xa4>)
 8005b28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ba8 <MX_TIM3_Init+0xa0>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b30:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba8 <MX_TIM3_Init+0xa0>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005b36:	4b1c      	ldr	r3, [pc, #112]	@ (8005ba8 <MX_TIM3_Init+0xa0>)
 8005b38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005b3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ba8 <MX_TIM3_Init+0xa0>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b44:	4b18      	ldr	r3, [pc, #96]	@ (8005ba8 <MX_TIM3_Init+0xa0>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005b52:	2301      	movs	r3, #1
 8005b54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005b56:	2300      	movs	r3, #0
 8005b58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005b62:	2301      	movs	r3, #1
 8005b64:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005b66:	2300      	movs	r3, #0
 8005b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005b6e:	f107 030c 	add.w	r3, r7, #12
 8005b72:	4619      	mov	r1, r3
 8005b74:	480c      	ldr	r0, [pc, #48]	@ (8005ba8 <MX_TIM3_Init+0xa0>)
 8005b76:	f001 fff3 	bl	8007b60 <HAL_TIM_Encoder_Init>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8005b80:	f7fb ffdf 	bl	8001b42 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b84:	2300      	movs	r3, #0
 8005b86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005b8c:	1d3b      	adds	r3, r7, #4
 8005b8e:	4619      	mov	r1, r3
 8005b90:	4805      	ldr	r0, [pc, #20]	@ (8005ba8 <MX_TIM3_Init+0xa0>)
 8005b92:	f002 fd4f 	bl	8008634 <HAL_TIMEx_MasterConfigSynchronization>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8005b9c:	f7fb ffd1 	bl	8001b42 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005ba0:	bf00      	nop
 8005ba2:	3730      	adds	r7, #48	@ 0x30
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	20003f70 	.word	0x20003f70
 8005bac:	40000400 	.word	0x40000400

08005bb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a09      	ldr	r2, [pc, #36]	@ (8005be4 <HAL_TIM_Base_MspInit+0x34>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d10b      	bne.n	8005bda <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005bc2:	4b09      	ldr	r3, [pc, #36]	@ (8005be8 <HAL_TIM_Base_MspInit+0x38>)
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	4a08      	ldr	r2, [pc, #32]	@ (8005be8 <HAL_TIM_Base_MspInit+0x38>)
 8005bc8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005bcc:	6193      	str	r3, [r2, #24]
 8005bce:	4b06      	ldr	r3, [pc, #24]	@ (8005be8 <HAL_TIM_Base_MspInit+0x38>)
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8005bda:	bf00      	nop
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bc80      	pop	{r7}
 8005be2:	4770      	bx	lr
 8005be4:	40012c00 	.word	0x40012c00
 8005be8:	40021000 	.word	0x40021000

08005bec <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b08a      	sub	sp, #40	@ 0x28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bf4:	f107 0314 	add.w	r3, r7, #20
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	605a      	str	r2, [r3, #4]
 8005bfe:	609a      	str	r2, [r3, #8]
 8005c00:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a1e      	ldr	r2, [pc, #120]	@ (8005c80 <HAL_TIM_Encoder_MspInit+0x94>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d135      	bne.n	8005c78 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8005c84 <HAL_TIM_Encoder_MspInit+0x98>)
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	4a1c      	ldr	r2, [pc, #112]	@ (8005c84 <HAL_TIM_Encoder_MspInit+0x98>)
 8005c12:	f043 0302 	orr.w	r3, r3, #2
 8005c16:	61d3      	str	r3, [r2, #28]
 8005c18:	4b1a      	ldr	r3, [pc, #104]	@ (8005c84 <HAL_TIM_Encoder_MspInit+0x98>)
 8005c1a:	69db      	ldr	r3, [r3, #28]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	613b      	str	r3, [r7, #16]
 8005c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c24:	4b17      	ldr	r3, [pc, #92]	@ (8005c84 <HAL_TIM_Encoder_MspInit+0x98>)
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	4a16      	ldr	r2, [pc, #88]	@ (8005c84 <HAL_TIM_Encoder_MspInit+0x98>)
 8005c2a:	f043 0308 	orr.w	r3, r3, #8
 8005c2e:	6193      	str	r3, [r2, #24]
 8005c30:	4b14      	ldr	r3, [pc, #80]	@ (8005c84 <HAL_TIM_Encoder_MspInit+0x98>)
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_CH1_Pin|Encoder_CH2_Pin;
 8005c3c:	2330      	movs	r3, #48	@ 0x30
 8005c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c44:	2300      	movs	r3, #0
 8005c46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c48:	f107 0314 	add.w	r3, r7, #20
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	480e      	ldr	r0, [pc, #56]	@ (8005c88 <HAL_TIM_Encoder_MspInit+0x9c>)
 8005c50:	f000 fb6c 	bl	800632c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8005c54:	4b0d      	ldr	r3, [pc, #52]	@ (8005c8c <HAL_TIM_Encoder_MspInit+0xa0>)
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c64:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8005c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c72:	4a06      	ldr	r2, [pc, #24]	@ (8005c8c <HAL_TIM_Encoder_MspInit+0xa0>)
 8005c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c76:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005c78:	bf00      	nop
 8005c7a:	3728      	adds	r7, #40	@ 0x28
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40000400 	.word	0x40000400
 8005c84:	40021000 	.word	0x40021000
 8005c88:	40010c00 	.word	0x40010c00
 8005c8c:	40010000 	.word	0x40010000

08005c90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b088      	sub	sp, #32
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c98:	f107 0310 	add.w	r3, r7, #16
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	605a      	str	r2, [r3, #4]
 8005ca2:	609a      	str	r2, [r3, #8]
 8005ca4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a10      	ldr	r2, [pc, #64]	@ (8005cec <HAL_TIM_MspPostInit+0x5c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d118      	bne.n	8005ce2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8005cf0 <HAL_TIM_MspPostInit+0x60>)
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	4a0e      	ldr	r2, [pc, #56]	@ (8005cf0 <HAL_TIM_MspPostInit+0x60>)
 8005cb6:	f043 0304 	orr.w	r3, r3, #4
 8005cba:	6193      	str	r3, [r2, #24]
 8005cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf0 <HAL_TIM_MspPostInit+0x60>)
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005cc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ccc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cce:	2302      	movs	r3, #2
 8005cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cd6:	f107 0310 	add.w	r3, r7, #16
 8005cda:	4619      	mov	r1, r3
 8005cdc:	4805      	ldr	r0, [pc, #20]	@ (8005cf4 <HAL_TIM_MspPostInit+0x64>)
 8005cde:	f000 fb25 	bl	800632c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005ce2:	bf00      	nop
 8005ce4:	3720      	adds	r7, #32
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	40012c00 	.word	0x40012c00
 8005cf0:	40021000 	.word	0x40021000
 8005cf4:	40010800 	.word	0x40010800

08005cf8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005cf8:	f7ff fe5e 	bl	80059b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005cfc:	480b      	ldr	r0, [pc, #44]	@ (8005d2c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005cfe:	490c      	ldr	r1, [pc, #48]	@ (8005d30 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005d00:	4a0c      	ldr	r2, [pc, #48]	@ (8005d34 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d04:	e002      	b.n	8005d0c <LoopCopyDataInit>

08005d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d0a:	3304      	adds	r3, #4

08005d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d10:	d3f9      	bcc.n	8005d06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d12:	4a09      	ldr	r2, [pc, #36]	@ (8005d38 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005d14:	4c09      	ldr	r4, [pc, #36]	@ (8005d3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d18:	e001      	b.n	8005d1e <LoopFillZerobss>

08005d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d1c:	3204      	adds	r2, #4

08005d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d20:	d3fb      	bcc.n	8005d1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005d22:	f002 ff03 	bl	8008b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005d26:	f7fb fe3f 	bl	80019a8 <main>
  bx lr
 8005d2a:	4770      	bx	lr
  ldr r0, =_sdata
 8005d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d30:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8005d34:	0800ba80 	.word	0x0800ba80
  ldr r2, =_sbss
 8005d38:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8005d3c:	20004108 	.word	0x20004108

08005d40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005d40:	e7fe      	b.n	8005d40 <ADC1_2_IRQHandler>
	...

08005d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d48:	4b08      	ldr	r3, [pc, #32]	@ (8005d6c <HAL_Init+0x28>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a07      	ldr	r2, [pc, #28]	@ (8005d6c <HAL_Init+0x28>)
 8005d4e:	f043 0310 	orr.w	r3, r3, #16
 8005d52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d54:	2003      	movs	r0, #3
 8005d56:	f000 f947 	bl	8005fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d5a:	200f      	movs	r0, #15
 8005d5c:	f000 f808 	bl	8005d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d60:	f7ff fd00 	bl	8005764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	40022000 	.word	0x40022000

08005d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005d78:	4b12      	ldr	r3, [pc, #72]	@ (8005dc4 <HAL_InitTick+0x54>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	4b12      	ldr	r3, [pc, #72]	@ (8005dc8 <HAL_InitTick+0x58>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	4619      	mov	r1, r3
 8005d82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 f95f 	bl	8006052 <HAL_SYSTICK_Config>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e00e      	b.n	8005dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b0f      	cmp	r3, #15
 8005da2:	d80a      	bhi.n	8005dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005da4:	2200      	movs	r2, #0
 8005da6:	6879      	ldr	r1, [r7, #4]
 8005da8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dac:	f000 f927 	bl	8005ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005db0:	4a06      	ldr	r2, [pc, #24]	@ (8005dcc <HAL_InitTick+0x5c>)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	e000      	b.n	8005dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	20000018 	.word	0x20000018
 8005dc8:	20000020 	.word	0x20000020
 8005dcc:	2000001c 	.word	0x2000001c

08005dd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005dd4:	4b05      	ldr	r3, [pc, #20]	@ (8005dec <HAL_IncTick+0x1c>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4b05      	ldr	r3, [pc, #20]	@ (8005df0 <HAL_IncTick+0x20>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4413      	add	r3, r2
 8005de0:	4a03      	ldr	r2, [pc, #12]	@ (8005df0 <HAL_IncTick+0x20>)
 8005de2:	6013      	str	r3, [r2, #0]
}
 8005de4:	bf00      	nop
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bc80      	pop	{r7}
 8005dea:	4770      	bx	lr
 8005dec:	20000020 	.word	0x20000020
 8005df0:	20003fb8 	.word	0x20003fb8

08005df4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005df4:	b480      	push	{r7}
 8005df6:	af00      	add	r7, sp, #0
  return uwTick;
 8005df8:	4b02      	ldr	r3, [pc, #8]	@ (8005e04 <HAL_GetTick+0x10>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bc80      	pop	{r7}
 8005e02:	4770      	bx	lr
 8005e04:	20003fb8 	.word	0x20003fb8

08005e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e10:	f7ff fff0 	bl	8005df4 <HAL_GetTick>
 8005e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e20:	d005      	beq.n	8005e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e22:	4b0a      	ldr	r3, [pc, #40]	@ (8005e4c <HAL_Delay+0x44>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	461a      	mov	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e2e:	bf00      	nop
 8005e30:	f7ff ffe0 	bl	8005df4 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d8f7      	bhi.n	8005e30 <HAL_Delay+0x28>
  {
  }
}
 8005e40:	bf00      	nop
 8005e42:	bf00      	nop
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20000020 	.word	0x20000020

08005e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e60:	4b0c      	ldr	r3, [pc, #48]	@ (8005e94 <__NVIC_SetPriorityGrouping+0x44>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005e7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e82:	4a04      	ldr	r2, [pc, #16]	@ (8005e94 <__NVIC_SetPriorityGrouping+0x44>)
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	60d3      	str	r3, [r2, #12]
}
 8005e88:	bf00      	nop
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bc80      	pop	{r7}
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	e000ed00 	.word	0xe000ed00

08005e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e9c:	4b04      	ldr	r3, [pc, #16]	@ (8005eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	0a1b      	lsrs	r3, r3, #8
 8005ea2:	f003 0307 	and.w	r3, r3, #7
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bc80      	pop	{r7}
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	e000ed00 	.word	0xe000ed00

08005eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	4603      	mov	r3, r0
 8005ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	db0b      	blt.n	8005ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ec6:	79fb      	ldrb	r3, [r7, #7]
 8005ec8:	f003 021f 	and.w	r2, r3, #31
 8005ecc:	4906      	ldr	r1, [pc, #24]	@ (8005ee8 <__NVIC_EnableIRQ+0x34>)
 8005ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	2001      	movs	r0, #1
 8005ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8005eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ede:	bf00      	nop
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bc80      	pop	{r7}
 8005ee6:	4770      	bx	lr
 8005ee8:	e000e100 	.word	0xe000e100

08005eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	6039      	str	r1, [r7, #0]
 8005ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	db0a      	blt.n	8005f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	490c      	ldr	r1, [pc, #48]	@ (8005f38 <__NVIC_SetPriority+0x4c>)
 8005f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f0a:	0112      	lsls	r2, r2, #4
 8005f0c:	b2d2      	uxtb	r2, r2
 8005f0e:	440b      	add	r3, r1
 8005f10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f14:	e00a      	b.n	8005f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	4908      	ldr	r1, [pc, #32]	@ (8005f3c <__NVIC_SetPriority+0x50>)
 8005f1c:	79fb      	ldrb	r3, [r7, #7]
 8005f1e:	f003 030f 	and.w	r3, r3, #15
 8005f22:	3b04      	subs	r3, #4
 8005f24:	0112      	lsls	r2, r2, #4
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	440b      	add	r3, r1
 8005f2a:	761a      	strb	r2, [r3, #24]
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bc80      	pop	{r7}
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	e000e100 	.word	0xe000e100
 8005f3c:	e000ed00 	.word	0xe000ed00

08005f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b089      	sub	sp, #36	@ 0x24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f003 0307 	and.w	r3, r3, #7
 8005f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	f1c3 0307 	rsb	r3, r3, #7
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	bf28      	it	cs
 8005f5e:	2304      	movcs	r3, #4
 8005f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	3304      	adds	r3, #4
 8005f66:	2b06      	cmp	r3, #6
 8005f68:	d902      	bls.n	8005f70 <NVIC_EncodePriority+0x30>
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	3b03      	subs	r3, #3
 8005f6e:	e000      	b.n	8005f72 <NVIC_EncodePriority+0x32>
 8005f70:	2300      	movs	r3, #0
 8005f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f74:	f04f 32ff 	mov.w	r2, #4294967295
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7e:	43da      	mvns	r2, r3
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	401a      	ands	r2, r3
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f88:	f04f 31ff 	mov.w	r1, #4294967295
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f92:	43d9      	mvns	r1, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f98:	4313      	orrs	r3, r2
         );
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3724      	adds	r7, #36	@ 0x24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bc80      	pop	{r7}
 8005fa2:	4770      	bx	lr

08005fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fb4:	d301      	bcc.n	8005fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e00f      	b.n	8005fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fba:	4a0a      	ldr	r2, [pc, #40]	@ (8005fe4 <SysTick_Config+0x40>)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005fc2:	210f      	movs	r1, #15
 8005fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc8:	f7ff ff90 	bl	8005eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fcc:	4b05      	ldr	r3, [pc, #20]	@ (8005fe4 <SysTick_Config+0x40>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005fd2:	4b04      	ldr	r3, [pc, #16]	@ (8005fe4 <SysTick_Config+0x40>)
 8005fd4:	2207      	movs	r2, #7
 8005fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	e000e010 	.word	0xe000e010

08005fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7ff ff2d 	bl	8005e50 <__NVIC_SetPriorityGrouping>
}
 8005ff6:	bf00      	nop
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b086      	sub	sp, #24
 8006002:	af00      	add	r7, sp, #0
 8006004:	4603      	mov	r3, r0
 8006006:	60b9      	str	r1, [r7, #8]
 8006008:	607a      	str	r2, [r7, #4]
 800600a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800600c:	2300      	movs	r3, #0
 800600e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006010:	f7ff ff42 	bl	8005e98 <__NVIC_GetPriorityGrouping>
 8006014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	68b9      	ldr	r1, [r7, #8]
 800601a:	6978      	ldr	r0, [r7, #20]
 800601c:	f7ff ff90 	bl	8005f40 <NVIC_EncodePriority>
 8006020:	4602      	mov	r2, r0
 8006022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006026:	4611      	mov	r1, r2
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff ff5f 	bl	8005eec <__NVIC_SetPriority>
}
 800602e:	bf00      	nop
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	af00      	add	r7, sp, #0
 800603c:	4603      	mov	r3, r0
 800603e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006044:	4618      	mov	r0, r3
 8006046:	f7ff ff35 	bl	8005eb4 <__NVIC_EnableIRQ>
}
 800604a:	bf00      	nop
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b082      	sub	sp, #8
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7ff ffa2 	bl	8005fa4 <SysTick_Config>
 8006060:	4603      	mov	r3, r0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e043      	b.n	800610a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	461a      	mov	r2, r3
 8006088:	4b22      	ldr	r3, [pc, #136]	@ (8006114 <HAL_DMA_Init+0xa8>)
 800608a:	4413      	add	r3, r2
 800608c:	4a22      	ldr	r2, [pc, #136]	@ (8006118 <HAL_DMA_Init+0xac>)
 800608e:	fba2 2303 	umull	r2, r3, r2, r3
 8006092:	091b      	lsrs	r3, r3, #4
 8006094:	009a      	lsls	r2, r3, #2
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a1f      	ldr	r2, [pc, #124]	@ (800611c <HAL_DMA_Init+0xb0>)
 800609e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80060b6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80060ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80060c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	bc80      	pop	{r7}
 8006112:	4770      	bx	lr
 8006114:	bffdfff8 	.word	0xbffdfff8
 8006118:	cccccccd 	.word	0xcccccccd
 800611c:	40020000 	.word	0x40020000

08006120 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613c:	2204      	movs	r2, #4
 800613e:	409a      	lsls	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4013      	ands	r3, r2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d04f      	beq.n	80061e8 <HAL_DMA_IRQHandler+0xc8>
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f003 0304 	and.w	r3, r3, #4
 800614e:	2b00      	cmp	r3, #0
 8006150:	d04a      	beq.n	80061e8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b00      	cmp	r3, #0
 800615e:	d107      	bne.n	8006170 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0204 	bic.w	r2, r2, #4
 800616e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a66      	ldr	r2, [pc, #408]	@ (8006310 <HAL_DMA_IRQHandler+0x1f0>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d029      	beq.n	80061ce <HAL_DMA_IRQHandler+0xae>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a65      	ldr	r2, [pc, #404]	@ (8006314 <HAL_DMA_IRQHandler+0x1f4>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d022      	beq.n	80061ca <HAL_DMA_IRQHandler+0xaa>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a63      	ldr	r2, [pc, #396]	@ (8006318 <HAL_DMA_IRQHandler+0x1f8>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d01a      	beq.n	80061c4 <HAL_DMA_IRQHandler+0xa4>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a62      	ldr	r2, [pc, #392]	@ (800631c <HAL_DMA_IRQHandler+0x1fc>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d012      	beq.n	80061be <HAL_DMA_IRQHandler+0x9e>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a60      	ldr	r2, [pc, #384]	@ (8006320 <HAL_DMA_IRQHandler+0x200>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d00a      	beq.n	80061b8 <HAL_DMA_IRQHandler+0x98>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a5f      	ldr	r2, [pc, #380]	@ (8006324 <HAL_DMA_IRQHandler+0x204>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d102      	bne.n	80061b2 <HAL_DMA_IRQHandler+0x92>
 80061ac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80061b0:	e00e      	b.n	80061d0 <HAL_DMA_IRQHandler+0xb0>
 80061b2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80061b6:	e00b      	b.n	80061d0 <HAL_DMA_IRQHandler+0xb0>
 80061b8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80061bc:	e008      	b.n	80061d0 <HAL_DMA_IRQHandler+0xb0>
 80061be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80061c2:	e005      	b.n	80061d0 <HAL_DMA_IRQHandler+0xb0>
 80061c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061c8:	e002      	b.n	80061d0 <HAL_DMA_IRQHandler+0xb0>
 80061ca:	2340      	movs	r3, #64	@ 0x40
 80061cc:	e000      	b.n	80061d0 <HAL_DMA_IRQHandler+0xb0>
 80061ce:	2304      	movs	r3, #4
 80061d0:	4a55      	ldr	r2, [pc, #340]	@ (8006328 <HAL_DMA_IRQHandler+0x208>)
 80061d2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 8094 	beq.w	8006306 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80061e6:	e08e      	b.n	8006306 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ec:	2202      	movs	r2, #2
 80061ee:	409a      	lsls	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4013      	ands	r3, r2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d056      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x186>
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d051      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0320 	and.w	r3, r3, #32
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10b      	bne.n	8006228 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 020a 	bic.w	r2, r2, #10
 800621e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a38      	ldr	r2, [pc, #224]	@ (8006310 <HAL_DMA_IRQHandler+0x1f0>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d029      	beq.n	8006286 <HAL_DMA_IRQHandler+0x166>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a37      	ldr	r2, [pc, #220]	@ (8006314 <HAL_DMA_IRQHandler+0x1f4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d022      	beq.n	8006282 <HAL_DMA_IRQHandler+0x162>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a35      	ldr	r2, [pc, #212]	@ (8006318 <HAL_DMA_IRQHandler+0x1f8>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d01a      	beq.n	800627c <HAL_DMA_IRQHandler+0x15c>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a34      	ldr	r2, [pc, #208]	@ (800631c <HAL_DMA_IRQHandler+0x1fc>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d012      	beq.n	8006276 <HAL_DMA_IRQHandler+0x156>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a32      	ldr	r2, [pc, #200]	@ (8006320 <HAL_DMA_IRQHandler+0x200>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d00a      	beq.n	8006270 <HAL_DMA_IRQHandler+0x150>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a31      	ldr	r2, [pc, #196]	@ (8006324 <HAL_DMA_IRQHandler+0x204>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d102      	bne.n	800626a <HAL_DMA_IRQHandler+0x14a>
 8006264:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006268:	e00e      	b.n	8006288 <HAL_DMA_IRQHandler+0x168>
 800626a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800626e:	e00b      	b.n	8006288 <HAL_DMA_IRQHandler+0x168>
 8006270:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006274:	e008      	b.n	8006288 <HAL_DMA_IRQHandler+0x168>
 8006276:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800627a:	e005      	b.n	8006288 <HAL_DMA_IRQHandler+0x168>
 800627c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006280:	e002      	b.n	8006288 <HAL_DMA_IRQHandler+0x168>
 8006282:	2320      	movs	r3, #32
 8006284:	e000      	b.n	8006288 <HAL_DMA_IRQHandler+0x168>
 8006286:	2302      	movs	r3, #2
 8006288:	4a27      	ldr	r2, [pc, #156]	@ (8006328 <HAL_DMA_IRQHandler+0x208>)
 800628a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006298:	2b00      	cmp	r3, #0
 800629a:	d034      	beq.n	8006306 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80062a4:	e02f      	b.n	8006306 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062aa:	2208      	movs	r2, #8
 80062ac:	409a      	lsls	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	4013      	ands	r3, r2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d028      	beq.n	8006308 <HAL_DMA_IRQHandler+0x1e8>
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f003 0308 	and.w	r3, r3, #8
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d023      	beq.n	8006308 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 020e 	bic.w	r2, r2, #14
 80062ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d8:	2101      	movs	r1, #1
 80062da:	fa01 f202 	lsl.w	r2, r1, r2
 80062de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d004      	beq.n	8006308 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	4798      	blx	r3
    }
  }
  return;
 8006306:	bf00      	nop
 8006308:	bf00      	nop
}
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	40020008 	.word	0x40020008
 8006314:	4002001c 	.word	0x4002001c
 8006318:	40020030 	.word	0x40020030
 800631c:	40020044 	.word	0x40020044
 8006320:	40020058 	.word	0x40020058
 8006324:	4002006c 	.word	0x4002006c
 8006328:	40020000 	.word	0x40020000

0800632c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800632c:	b480      	push	{r7}
 800632e:	b08b      	sub	sp, #44	@ 0x2c
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006336:	2300      	movs	r3, #0
 8006338:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800633a:	2300      	movs	r3, #0
 800633c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800633e:	e169      	b.n	8006614 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006340:	2201      	movs	r2, #1
 8006342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006344:	fa02 f303 	lsl.w	r3, r2, r3
 8006348:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	69fa      	ldr	r2, [r7, #28]
 8006350:	4013      	ands	r3, r2
 8006352:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	429a      	cmp	r2, r3
 800635a:	f040 8158 	bne.w	800660e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	4a9a      	ldr	r2, [pc, #616]	@ (80065cc <HAL_GPIO_Init+0x2a0>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d05e      	beq.n	8006426 <HAL_GPIO_Init+0xfa>
 8006368:	4a98      	ldr	r2, [pc, #608]	@ (80065cc <HAL_GPIO_Init+0x2a0>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d875      	bhi.n	800645a <HAL_GPIO_Init+0x12e>
 800636e:	4a98      	ldr	r2, [pc, #608]	@ (80065d0 <HAL_GPIO_Init+0x2a4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d058      	beq.n	8006426 <HAL_GPIO_Init+0xfa>
 8006374:	4a96      	ldr	r2, [pc, #600]	@ (80065d0 <HAL_GPIO_Init+0x2a4>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d86f      	bhi.n	800645a <HAL_GPIO_Init+0x12e>
 800637a:	4a96      	ldr	r2, [pc, #600]	@ (80065d4 <HAL_GPIO_Init+0x2a8>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d052      	beq.n	8006426 <HAL_GPIO_Init+0xfa>
 8006380:	4a94      	ldr	r2, [pc, #592]	@ (80065d4 <HAL_GPIO_Init+0x2a8>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d869      	bhi.n	800645a <HAL_GPIO_Init+0x12e>
 8006386:	4a94      	ldr	r2, [pc, #592]	@ (80065d8 <HAL_GPIO_Init+0x2ac>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d04c      	beq.n	8006426 <HAL_GPIO_Init+0xfa>
 800638c:	4a92      	ldr	r2, [pc, #584]	@ (80065d8 <HAL_GPIO_Init+0x2ac>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d863      	bhi.n	800645a <HAL_GPIO_Init+0x12e>
 8006392:	4a92      	ldr	r2, [pc, #584]	@ (80065dc <HAL_GPIO_Init+0x2b0>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d046      	beq.n	8006426 <HAL_GPIO_Init+0xfa>
 8006398:	4a90      	ldr	r2, [pc, #576]	@ (80065dc <HAL_GPIO_Init+0x2b0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d85d      	bhi.n	800645a <HAL_GPIO_Init+0x12e>
 800639e:	2b12      	cmp	r3, #18
 80063a0:	d82a      	bhi.n	80063f8 <HAL_GPIO_Init+0xcc>
 80063a2:	2b12      	cmp	r3, #18
 80063a4:	d859      	bhi.n	800645a <HAL_GPIO_Init+0x12e>
 80063a6:	a201      	add	r2, pc, #4	@ (adr r2, 80063ac <HAL_GPIO_Init+0x80>)
 80063a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ac:	08006427 	.word	0x08006427
 80063b0:	08006401 	.word	0x08006401
 80063b4:	08006413 	.word	0x08006413
 80063b8:	08006455 	.word	0x08006455
 80063bc:	0800645b 	.word	0x0800645b
 80063c0:	0800645b 	.word	0x0800645b
 80063c4:	0800645b 	.word	0x0800645b
 80063c8:	0800645b 	.word	0x0800645b
 80063cc:	0800645b 	.word	0x0800645b
 80063d0:	0800645b 	.word	0x0800645b
 80063d4:	0800645b 	.word	0x0800645b
 80063d8:	0800645b 	.word	0x0800645b
 80063dc:	0800645b 	.word	0x0800645b
 80063e0:	0800645b 	.word	0x0800645b
 80063e4:	0800645b 	.word	0x0800645b
 80063e8:	0800645b 	.word	0x0800645b
 80063ec:	0800645b 	.word	0x0800645b
 80063f0:	08006409 	.word	0x08006409
 80063f4:	0800641d 	.word	0x0800641d
 80063f8:	4a79      	ldr	r2, [pc, #484]	@ (80065e0 <HAL_GPIO_Init+0x2b4>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d013      	beq.n	8006426 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80063fe:	e02c      	b.n	800645a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	623b      	str	r3, [r7, #32]
          break;
 8006406:	e029      	b.n	800645c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	3304      	adds	r3, #4
 800640e:	623b      	str	r3, [r7, #32]
          break;
 8006410:	e024      	b.n	800645c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	3308      	adds	r3, #8
 8006418:	623b      	str	r3, [r7, #32]
          break;
 800641a:	e01f      	b.n	800645c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	330c      	adds	r3, #12
 8006422:	623b      	str	r3, [r7, #32]
          break;
 8006424:	e01a      	b.n	800645c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d102      	bne.n	8006434 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800642e:	2304      	movs	r3, #4
 8006430:	623b      	str	r3, [r7, #32]
          break;
 8006432:	e013      	b.n	800645c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d105      	bne.n	8006448 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800643c:	2308      	movs	r3, #8
 800643e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	69fa      	ldr	r2, [r7, #28]
 8006444:	611a      	str	r2, [r3, #16]
          break;
 8006446:	e009      	b.n	800645c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006448:	2308      	movs	r3, #8
 800644a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	615a      	str	r2, [r3, #20]
          break;
 8006452:	e003      	b.n	800645c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006454:	2300      	movs	r3, #0
 8006456:	623b      	str	r3, [r7, #32]
          break;
 8006458:	e000      	b.n	800645c <HAL_GPIO_Init+0x130>
          break;
 800645a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	2bff      	cmp	r3, #255	@ 0xff
 8006460:	d801      	bhi.n	8006466 <HAL_GPIO_Init+0x13a>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	e001      	b.n	800646a <HAL_GPIO_Init+0x13e>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	3304      	adds	r3, #4
 800646a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	2bff      	cmp	r3, #255	@ 0xff
 8006470:	d802      	bhi.n	8006478 <HAL_GPIO_Init+0x14c>
 8006472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	e002      	b.n	800647e <HAL_GPIO_Init+0x152>
 8006478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647a:	3b08      	subs	r3, #8
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	210f      	movs	r1, #15
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	fa01 f303 	lsl.w	r3, r1, r3
 800648c:	43db      	mvns	r3, r3
 800648e:	401a      	ands	r2, r3
 8006490:	6a39      	ldr	r1, [r7, #32]
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	fa01 f303 	lsl.w	r3, r1, r3
 8006498:	431a      	orrs	r2, r3
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 80b1 	beq.w	800660e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80064ac:	4b4d      	ldr	r3, [pc, #308]	@ (80065e4 <HAL_GPIO_Init+0x2b8>)
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	4a4c      	ldr	r2, [pc, #304]	@ (80065e4 <HAL_GPIO_Init+0x2b8>)
 80064b2:	f043 0301 	orr.w	r3, r3, #1
 80064b6:	6193      	str	r3, [r2, #24]
 80064b8:	4b4a      	ldr	r3, [pc, #296]	@ (80065e4 <HAL_GPIO_Init+0x2b8>)
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	60bb      	str	r3, [r7, #8]
 80064c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80064c4:	4a48      	ldr	r2, [pc, #288]	@ (80065e8 <HAL_GPIO_Init+0x2bc>)
 80064c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c8:	089b      	lsrs	r3, r3, #2
 80064ca:	3302      	adds	r3, #2
 80064cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80064d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d4:	f003 0303 	and.w	r3, r3, #3
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	220f      	movs	r2, #15
 80064dc:	fa02 f303 	lsl.w	r3, r2, r3
 80064e0:	43db      	mvns	r3, r3
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	4013      	ands	r3, r2
 80064e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a40      	ldr	r2, [pc, #256]	@ (80065ec <HAL_GPIO_Init+0x2c0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d013      	beq.n	8006518 <HAL_GPIO_Init+0x1ec>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a3f      	ldr	r2, [pc, #252]	@ (80065f0 <HAL_GPIO_Init+0x2c4>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00d      	beq.n	8006514 <HAL_GPIO_Init+0x1e8>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a3e      	ldr	r2, [pc, #248]	@ (80065f4 <HAL_GPIO_Init+0x2c8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d007      	beq.n	8006510 <HAL_GPIO_Init+0x1e4>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a3d      	ldr	r2, [pc, #244]	@ (80065f8 <HAL_GPIO_Init+0x2cc>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d101      	bne.n	800650c <HAL_GPIO_Init+0x1e0>
 8006508:	2303      	movs	r3, #3
 800650a:	e006      	b.n	800651a <HAL_GPIO_Init+0x1ee>
 800650c:	2304      	movs	r3, #4
 800650e:	e004      	b.n	800651a <HAL_GPIO_Init+0x1ee>
 8006510:	2302      	movs	r3, #2
 8006512:	e002      	b.n	800651a <HAL_GPIO_Init+0x1ee>
 8006514:	2301      	movs	r3, #1
 8006516:	e000      	b.n	800651a <HAL_GPIO_Init+0x1ee>
 8006518:	2300      	movs	r3, #0
 800651a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800651c:	f002 0203 	and.w	r2, r2, #3
 8006520:	0092      	lsls	r2, r2, #2
 8006522:	4093      	lsls	r3, r2
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	4313      	orrs	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800652a:	492f      	ldr	r1, [pc, #188]	@ (80065e8 <HAL_GPIO_Init+0x2bc>)
 800652c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652e:	089b      	lsrs	r3, r3, #2
 8006530:	3302      	adds	r3, #2
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d006      	beq.n	8006552 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006544:	4b2d      	ldr	r3, [pc, #180]	@ (80065fc <HAL_GPIO_Init+0x2d0>)
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	492c      	ldr	r1, [pc, #176]	@ (80065fc <HAL_GPIO_Init+0x2d0>)
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	4313      	orrs	r3, r2
 800654e:	608b      	str	r3, [r1, #8]
 8006550:	e006      	b.n	8006560 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006552:	4b2a      	ldr	r3, [pc, #168]	@ (80065fc <HAL_GPIO_Init+0x2d0>)
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	43db      	mvns	r3, r3
 800655a:	4928      	ldr	r1, [pc, #160]	@ (80065fc <HAL_GPIO_Init+0x2d0>)
 800655c:	4013      	ands	r3, r2
 800655e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d006      	beq.n	800657a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800656c:	4b23      	ldr	r3, [pc, #140]	@ (80065fc <HAL_GPIO_Init+0x2d0>)
 800656e:	68da      	ldr	r2, [r3, #12]
 8006570:	4922      	ldr	r1, [pc, #136]	@ (80065fc <HAL_GPIO_Init+0x2d0>)
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	4313      	orrs	r3, r2
 8006576:	60cb      	str	r3, [r1, #12]
 8006578:	e006      	b.n	8006588 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800657a:	4b20      	ldr	r3, [pc, #128]	@ (80065fc <HAL_GPIO_Init+0x2d0>)
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	43db      	mvns	r3, r3
 8006582:	491e      	ldr	r1, [pc, #120]	@ (80065fc <HAL_GPIO_Init+0x2d0>)
 8006584:	4013      	ands	r3, r2
 8006586:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d006      	beq.n	80065a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006594:	4b19      	ldr	r3, [pc, #100]	@ (80065fc <HAL_GPIO_Init+0x2d0>)
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	4918      	ldr	r1, [pc, #96]	@ (80065fc <HAL_GPIO_Init+0x2d0>)
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	4313      	orrs	r3, r2
 800659e:	604b      	str	r3, [r1, #4]
 80065a0:	e006      	b.n	80065b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80065a2:	4b16      	ldr	r3, [pc, #88]	@ (80065fc <HAL_GPIO_Init+0x2d0>)
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	43db      	mvns	r3, r3
 80065aa:	4914      	ldr	r1, [pc, #80]	@ (80065fc <HAL_GPIO_Init+0x2d0>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d021      	beq.n	8006600 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80065bc:	4b0f      	ldr	r3, [pc, #60]	@ (80065fc <HAL_GPIO_Init+0x2d0>)
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	490e      	ldr	r1, [pc, #56]	@ (80065fc <HAL_GPIO_Init+0x2d0>)
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	600b      	str	r3, [r1, #0]
 80065c8:	e021      	b.n	800660e <HAL_GPIO_Init+0x2e2>
 80065ca:	bf00      	nop
 80065cc:	10320000 	.word	0x10320000
 80065d0:	10310000 	.word	0x10310000
 80065d4:	10220000 	.word	0x10220000
 80065d8:	10210000 	.word	0x10210000
 80065dc:	10120000 	.word	0x10120000
 80065e0:	10110000 	.word	0x10110000
 80065e4:	40021000 	.word	0x40021000
 80065e8:	40010000 	.word	0x40010000
 80065ec:	40010800 	.word	0x40010800
 80065f0:	40010c00 	.word	0x40010c00
 80065f4:	40011000 	.word	0x40011000
 80065f8:	40011400 	.word	0x40011400
 80065fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006600:	4b0b      	ldr	r3, [pc, #44]	@ (8006630 <HAL_GPIO_Init+0x304>)
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	43db      	mvns	r3, r3
 8006608:	4909      	ldr	r1, [pc, #36]	@ (8006630 <HAL_GPIO_Init+0x304>)
 800660a:	4013      	ands	r3, r2
 800660c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800660e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006610:	3301      	adds	r3, #1
 8006612:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661a:	fa22 f303 	lsr.w	r3, r2, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	f47f ae8e 	bne.w	8006340 <HAL_GPIO_Init+0x14>
  }
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop
 8006628:	372c      	adds	r7, #44	@ 0x2c
 800662a:	46bd      	mov	sp, r7
 800662c:	bc80      	pop	{r7}
 800662e:	4770      	bx	lr
 8006630:	40010400 	.word	0x40010400

08006634 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	887b      	ldrh	r3, [r7, #2]
 8006646:	4013      	ands	r3, r2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800664c:	2301      	movs	r3, #1
 800664e:	73fb      	strb	r3, [r7, #15]
 8006650:	e001      	b.n	8006656 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006652:	2300      	movs	r3, #0
 8006654:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006656:	7bfb      	ldrb	r3, [r7, #15]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	bc80      	pop	{r7}
 8006660:	4770      	bx	lr

08006662 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	460b      	mov	r3, r1
 800666c:	807b      	strh	r3, [r7, #2]
 800666e:	4613      	mov	r3, r2
 8006670:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006672:	787b      	ldrb	r3, [r7, #1]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006678:	887a      	ldrh	r2, [r7, #2]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800667e:	e003      	b.n	8006688 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006680:	887b      	ldrh	r3, [r7, #2]
 8006682:	041a      	lsls	r2, r3, #16
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	611a      	str	r2, [r3, #16]
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	bc80      	pop	{r7}
 8006690:	4770      	bx	lr
	...

08006694 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e12b      	b.n	80068fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d106      	bne.n	80066c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7fb f90a 	bl	80018d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2224      	movs	r2, #36	@ 0x24
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f022 0201 	bic.w	r2, r2, #1
 80066d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80066f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80066f8:	f001 f832 	bl	8007760 <HAL_RCC_GetPCLK1Freq>
 80066fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	4a81      	ldr	r2, [pc, #516]	@ (8006908 <HAL_I2C_Init+0x274>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d807      	bhi.n	8006718 <HAL_I2C_Init+0x84>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4a80      	ldr	r2, [pc, #512]	@ (800690c <HAL_I2C_Init+0x278>)
 800670c:	4293      	cmp	r3, r2
 800670e:	bf94      	ite	ls
 8006710:	2301      	movls	r3, #1
 8006712:	2300      	movhi	r3, #0
 8006714:	b2db      	uxtb	r3, r3
 8006716:	e006      	b.n	8006726 <HAL_I2C_Init+0x92>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4a7d      	ldr	r2, [pc, #500]	@ (8006910 <HAL_I2C_Init+0x27c>)
 800671c:	4293      	cmp	r3, r2
 800671e:	bf94      	ite	ls
 8006720:	2301      	movls	r3, #1
 8006722:	2300      	movhi	r3, #0
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e0e7      	b.n	80068fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4a78      	ldr	r2, [pc, #480]	@ (8006914 <HAL_I2C_Init+0x280>)
 8006732:	fba2 2303 	umull	r2, r3, r2, r3
 8006736:	0c9b      	lsrs	r3, r3, #18
 8006738:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	430a      	orrs	r2, r1
 800674c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	4a6a      	ldr	r2, [pc, #424]	@ (8006908 <HAL_I2C_Init+0x274>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d802      	bhi.n	8006768 <HAL_I2C_Init+0xd4>
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	3301      	adds	r3, #1
 8006766:	e009      	b.n	800677c <HAL_I2C_Init+0xe8>
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800676e:	fb02 f303 	mul.w	r3, r2, r3
 8006772:	4a69      	ldr	r2, [pc, #420]	@ (8006918 <HAL_I2C_Init+0x284>)
 8006774:	fba2 2303 	umull	r2, r3, r2, r3
 8006778:	099b      	lsrs	r3, r3, #6
 800677a:	3301      	adds	r3, #1
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6812      	ldr	r2, [r2, #0]
 8006780:	430b      	orrs	r3, r1
 8006782:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800678e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	495c      	ldr	r1, [pc, #368]	@ (8006908 <HAL_I2C_Init+0x274>)
 8006798:	428b      	cmp	r3, r1
 800679a:	d819      	bhi.n	80067d0 <HAL_I2C_Init+0x13c>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	1e59      	subs	r1, r3, #1
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80067aa:	1c59      	adds	r1, r3, #1
 80067ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80067b0:	400b      	ands	r3, r1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <HAL_I2C_Init+0x138>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	1e59      	subs	r1, r3, #1
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80067c4:	3301      	adds	r3, #1
 80067c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ca:	e051      	b.n	8006870 <HAL_I2C_Init+0x1dc>
 80067cc:	2304      	movs	r3, #4
 80067ce:	e04f      	b.n	8006870 <HAL_I2C_Init+0x1dc>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d111      	bne.n	80067fc <HAL_I2C_Init+0x168>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	1e58      	subs	r0, r3, #1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6859      	ldr	r1, [r3, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	440b      	add	r3, r1
 80067e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80067ea:	3301      	adds	r3, #1
 80067ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	bf0c      	ite	eq
 80067f4:	2301      	moveq	r3, #1
 80067f6:	2300      	movne	r3, #0
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	e012      	b.n	8006822 <HAL_I2C_Init+0x18e>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	1e58      	subs	r0, r3, #1
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6859      	ldr	r1, [r3, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	440b      	add	r3, r1
 800680a:	0099      	lsls	r1, r3, #2
 800680c:	440b      	add	r3, r1
 800680e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006812:	3301      	adds	r3, #1
 8006814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006818:	2b00      	cmp	r3, #0
 800681a:	bf0c      	ite	eq
 800681c:	2301      	moveq	r3, #1
 800681e:	2300      	movne	r3, #0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <HAL_I2C_Init+0x196>
 8006826:	2301      	movs	r3, #1
 8006828:	e022      	b.n	8006870 <HAL_I2C_Init+0x1dc>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10e      	bne.n	8006850 <HAL_I2C_Init+0x1bc>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	1e58      	subs	r0, r3, #1
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6859      	ldr	r1, [r3, #4]
 800683a:	460b      	mov	r3, r1
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	440b      	add	r3, r1
 8006840:	fbb0 f3f3 	udiv	r3, r0, r3
 8006844:	3301      	adds	r3, #1
 8006846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800684a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800684e:	e00f      	b.n	8006870 <HAL_I2C_Init+0x1dc>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	1e58      	subs	r0, r3, #1
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6859      	ldr	r1, [r3, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	0099      	lsls	r1, r3, #2
 8006860:	440b      	add	r3, r1
 8006862:	fbb0 f3f3 	udiv	r3, r0, r3
 8006866:	3301      	adds	r3, #1
 8006868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800686c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	6809      	ldr	r1, [r1, #0]
 8006874:	4313      	orrs	r3, r2
 8006876:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	69da      	ldr	r2, [r3, #28]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	431a      	orrs	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800689e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	6911      	ldr	r1, [r2, #16]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	68d2      	ldr	r2, [r2, #12]
 80068aa:	4311      	orrs	r1, r2
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	6812      	ldr	r2, [r2, #0]
 80068b0:	430b      	orrs	r3, r1
 80068b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	695a      	ldr	r2, [r3, #20]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	431a      	orrs	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f042 0201 	orr.w	r2, r2, #1
 80068de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2220      	movs	r2, #32
 80068ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	000186a0 	.word	0x000186a0
 800690c:	001e847f 	.word	0x001e847f
 8006910:	003d08ff 	.word	0x003d08ff
 8006914:	431bde83 	.word	0x431bde83
 8006918:	10624dd3 	.word	0x10624dd3

0800691c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b088      	sub	sp, #32
 8006920:	af02      	add	r7, sp, #8
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	607a      	str	r2, [r7, #4]
 8006926:	461a      	mov	r2, r3
 8006928:	460b      	mov	r3, r1
 800692a:	817b      	strh	r3, [r7, #10]
 800692c:	4613      	mov	r3, r2
 800692e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006930:	f7ff fa60 	bl	8005df4 <HAL_GetTick>
 8006934:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b20      	cmp	r3, #32
 8006940:	f040 80e0 	bne.w	8006b04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	2319      	movs	r3, #25
 800694a:	2201      	movs	r2, #1
 800694c:	4970      	ldr	r1, [pc, #448]	@ (8006b10 <HAL_I2C_Master_Transmit+0x1f4>)
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 f964 	bl	8006c1c <I2C_WaitOnFlagUntilTimeout>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800695a:	2302      	movs	r3, #2
 800695c:	e0d3      	b.n	8006b06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006964:	2b01      	cmp	r3, #1
 8006966:	d101      	bne.n	800696c <HAL_I2C_Master_Transmit+0x50>
 8006968:	2302      	movs	r3, #2
 800696a:	e0cc      	b.n	8006b06 <HAL_I2C_Master_Transmit+0x1ea>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b01      	cmp	r3, #1
 8006980:	d007      	beq.n	8006992 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f042 0201 	orr.w	r2, r2, #1
 8006990:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2221      	movs	r2, #33	@ 0x21
 80069a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2210      	movs	r2, #16
 80069ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	893a      	ldrh	r2, [r7, #8]
 80069c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4a50      	ldr	r2, [pc, #320]	@ (8006b14 <HAL_I2C_Master_Transmit+0x1f8>)
 80069d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80069d4:	8979      	ldrh	r1, [r7, #10]
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	6a3a      	ldr	r2, [r7, #32]
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f000 f89c 	bl	8006b18 <I2C_MasterRequestWrite>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d001      	beq.n	80069ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e08d      	b.n	8006b06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069ea:	2300      	movs	r3, #0
 80069ec:	613b      	str	r3, [r7, #16]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	613b      	str	r3, [r7, #16]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	613b      	str	r3, [r7, #16]
 80069fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006a00:	e066      	b.n	8006ad0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	6a39      	ldr	r1, [r7, #32]
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 fa22 	bl	8006e50 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00d      	beq.n	8006a2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a16:	2b04      	cmp	r3, #4
 8006a18:	d107      	bne.n	8006a2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e06b      	b.n	8006b06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a32:	781a      	ldrb	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a56:	3b01      	subs	r3, #1
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b04      	cmp	r3, #4
 8006a6a:	d11b      	bne.n	8006aa4 <HAL_I2C_Master_Transmit+0x188>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d017      	beq.n	8006aa4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a78:	781a      	ldrb	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a84:	1c5a      	adds	r2, r3, #1
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	3b01      	subs	r3, #1
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	6a39      	ldr	r1, [r7, #32]
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 fa19 	bl	8006ee0 <I2C_WaitOnBTFFlagUntilTimeout>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00d      	beq.n	8006ad0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab8:	2b04      	cmp	r3, #4
 8006aba:	d107      	bne.n	8006acc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006aca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e01a      	b.n	8006b06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d194      	bne.n	8006a02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	e000      	b.n	8006b06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006b04:	2302      	movs	r3, #2
  }
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3718      	adds	r7, #24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	00100002 	.word	0x00100002
 8006b14:	ffff0000 	.word	0xffff0000

08006b18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b088      	sub	sp, #32
 8006b1c:	af02      	add	r7, sp, #8
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	607a      	str	r2, [r7, #4]
 8006b22:	603b      	str	r3, [r7, #0]
 8006b24:	460b      	mov	r3, r1
 8006b26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2b08      	cmp	r3, #8
 8006b32:	d006      	beq.n	8006b42 <I2C_MasterRequestWrite+0x2a>
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d003      	beq.n	8006b42 <I2C_MasterRequestWrite+0x2a>
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b40:	d108      	bne.n	8006b54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	e00b      	b.n	8006b6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b58:	2b12      	cmp	r3, #18
 8006b5a:	d107      	bne.n	8006b6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 f84f 	bl	8006c1c <I2C_WaitOnFlagUntilTimeout>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00d      	beq.n	8006ba0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b92:	d103      	bne.n	8006b9c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e035      	b.n	8006c0c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ba8:	d108      	bne.n	8006bbc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006baa:	897b      	ldrh	r3, [r7, #10]
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	461a      	mov	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006bb8:	611a      	str	r2, [r3, #16]
 8006bba:	e01b      	b.n	8006bf4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006bbc:	897b      	ldrh	r3, [r7, #10]
 8006bbe:	11db      	asrs	r3, r3, #7
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	f003 0306 	and.w	r3, r3, #6
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	f063 030f 	orn	r3, r3, #15
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	490e      	ldr	r1, [pc, #56]	@ (8006c14 <I2C_MasterRequestWrite+0xfc>)
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f000 f898 	bl	8006d10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d001      	beq.n	8006bea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e010      	b.n	8006c0c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006bea:	897b      	ldrh	r3, [r7, #10]
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	4907      	ldr	r1, [pc, #28]	@ (8006c18 <I2C_MasterRequestWrite+0x100>)
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 f888 	bl	8006d10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e000      	b.n	8006c0c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3718      	adds	r7, #24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	00010008 	.word	0x00010008
 8006c18:	00010002 	.word	0x00010002

08006c1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c2c:	e048      	b.n	8006cc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c34:	d044      	beq.n	8006cc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c36:	f7ff f8dd 	bl	8005df4 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d302      	bcc.n	8006c4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d139      	bne.n	8006cc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	0c1b      	lsrs	r3, r3, #16
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d10d      	bne.n	8006c72 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	43da      	mvns	r2, r3
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	4013      	ands	r3, r2
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	bf0c      	ite	eq
 8006c68:	2301      	moveq	r3, #1
 8006c6a:	2300      	movne	r3, #0
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	461a      	mov	r2, r3
 8006c70:	e00c      	b.n	8006c8c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	43da      	mvns	r2, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	bf0c      	ite	eq
 8006c84:	2301      	moveq	r3, #1
 8006c86:	2300      	movne	r3, #0
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d116      	bne.n	8006cc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cac:	f043 0220 	orr.w	r2, r3, #32
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e023      	b.n	8006d08 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	0c1b      	lsrs	r3, r3, #16
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d10d      	bne.n	8006ce6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	43da      	mvns	r2, r3
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	bf0c      	ite	eq
 8006cdc:	2301      	moveq	r3, #1
 8006cde:	2300      	movne	r3, #0
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	e00c      	b.n	8006d00 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	43da      	mvns	r2, r3
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	bf0c      	ite	eq
 8006cf8:	2301      	moveq	r3, #1
 8006cfa:	2300      	movne	r3, #0
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	461a      	mov	r2, r3
 8006d00:	79fb      	ldrb	r3, [r7, #7]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d093      	beq.n	8006c2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
 8006d1c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d1e:	e071      	b.n	8006e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d2e:	d123      	bne.n	8006d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d3e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2220      	movs	r2, #32
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d64:	f043 0204 	orr.w	r2, r3, #4
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e067      	b.n	8006e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7e:	d041      	beq.n	8006e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d80:	f7ff f838 	bl	8005df4 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d302      	bcc.n	8006d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d136      	bne.n	8006e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	0c1b      	lsrs	r3, r3, #16
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d10c      	bne.n	8006dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	43da      	mvns	r2, r3
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	4013      	ands	r3, r2
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	bf14      	ite	ne
 8006db2:	2301      	movne	r3, #1
 8006db4:	2300      	moveq	r3, #0
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	e00b      	b.n	8006dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	43da      	mvns	r2, r3
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	bf14      	ite	ne
 8006dcc:	2301      	movne	r3, #1
 8006dce:	2300      	moveq	r3, #0
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d016      	beq.n	8006e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2220      	movs	r2, #32
 8006de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df0:	f043 0220 	orr.w	r2, r3, #32
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e021      	b.n	8006e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	0c1b      	lsrs	r3, r3, #16
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d10c      	bne.n	8006e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	43da      	mvns	r2, r3
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	4013      	ands	r3, r2
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	bf14      	ite	ne
 8006e20:	2301      	movne	r3, #1
 8006e22:	2300      	moveq	r3, #0
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	e00b      	b.n	8006e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	43da      	mvns	r2, r3
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	4013      	ands	r3, r2
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	bf14      	ite	ne
 8006e3a:	2301      	movne	r3, #1
 8006e3c:	2300      	moveq	r3, #0
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f47f af6d 	bne.w	8006d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e5c:	e034      	b.n	8006ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f000 f886 	bl	8006f70 <I2C_IsAcknowledgeFailed>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e034      	b.n	8006ed8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e74:	d028      	beq.n	8006ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e76:	f7fe ffbd 	bl	8005df4 <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d302      	bcc.n	8006e8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d11d      	bne.n	8006ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e96:	2b80      	cmp	r3, #128	@ 0x80
 8006e98:	d016      	beq.n	8006ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb4:	f043 0220 	orr.w	r2, r3, #32
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e007      	b.n	8006ed8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ed2:	2b80      	cmp	r3, #128	@ 0x80
 8006ed4:	d1c3      	bne.n	8006e5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006eec:	e034      	b.n	8006f58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 f83e 	bl	8006f70 <I2C_IsAcknowledgeFailed>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d001      	beq.n	8006efe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e034      	b.n	8006f68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f04:	d028      	beq.n	8006f58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f06:	f7fe ff75 	bl	8005df4 <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d302      	bcc.n	8006f1c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d11d      	bne.n	8006f58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	f003 0304 	and.w	r3, r3, #4
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d016      	beq.n	8006f58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2220      	movs	r2, #32
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f44:	f043 0220 	orr.w	r2, r3, #32
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e007      	b.n	8006f68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	f003 0304 	and.w	r3, r3, #4
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	d1c3      	bne.n	8006eee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f86:	d11b      	bne.n	8006fc0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006f90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fac:	f043 0204 	orr.w	r2, r3, #4
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e000      	b.n	8006fc2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bc80      	pop	{r7}
 8006fca:	4770      	bx	lr

08006fcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e272      	b.n	80074c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f000 8087 	beq.w	80070fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006fec:	4b92      	ldr	r3, [pc, #584]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f003 030c 	and.w	r3, r3, #12
 8006ff4:	2b04      	cmp	r3, #4
 8006ff6:	d00c      	beq.n	8007012 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006ff8:	4b8f      	ldr	r3, [pc, #572]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f003 030c 	and.w	r3, r3, #12
 8007000:	2b08      	cmp	r3, #8
 8007002:	d112      	bne.n	800702a <HAL_RCC_OscConfig+0x5e>
 8007004:	4b8c      	ldr	r3, [pc, #560]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800700c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007010:	d10b      	bne.n	800702a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007012:	4b89      	ldr	r3, [pc, #548]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d06c      	beq.n	80070f8 <HAL_RCC_OscConfig+0x12c>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d168      	bne.n	80070f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e24c      	b.n	80074c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007032:	d106      	bne.n	8007042 <HAL_RCC_OscConfig+0x76>
 8007034:	4b80      	ldr	r3, [pc, #512]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a7f      	ldr	r2, [pc, #508]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 800703a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800703e:	6013      	str	r3, [r2, #0]
 8007040:	e02e      	b.n	80070a0 <HAL_RCC_OscConfig+0xd4>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10c      	bne.n	8007064 <HAL_RCC_OscConfig+0x98>
 800704a:	4b7b      	ldr	r3, [pc, #492]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a7a      	ldr	r2, [pc, #488]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 8007050:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007054:	6013      	str	r3, [r2, #0]
 8007056:	4b78      	ldr	r3, [pc, #480]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a77      	ldr	r2, [pc, #476]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 800705c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	e01d      	b.n	80070a0 <HAL_RCC_OscConfig+0xd4>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800706c:	d10c      	bne.n	8007088 <HAL_RCC_OscConfig+0xbc>
 800706e:	4b72      	ldr	r3, [pc, #456]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a71      	ldr	r2, [pc, #452]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 8007074:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007078:	6013      	str	r3, [r2, #0]
 800707a:	4b6f      	ldr	r3, [pc, #444]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a6e      	ldr	r2, [pc, #440]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 8007080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	e00b      	b.n	80070a0 <HAL_RCC_OscConfig+0xd4>
 8007088:	4b6b      	ldr	r3, [pc, #428]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a6a      	ldr	r2, [pc, #424]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 800708e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007092:	6013      	str	r3, [r2, #0]
 8007094:	4b68      	ldr	r3, [pc, #416]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a67      	ldr	r2, [pc, #412]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 800709a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800709e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d013      	beq.n	80070d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070a8:	f7fe fea4 	bl	8005df4 <HAL_GetTick>
 80070ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070ae:	e008      	b.n	80070c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070b0:	f7fe fea0 	bl	8005df4 <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	2b64      	cmp	r3, #100	@ 0x64
 80070bc:	d901      	bls.n	80070c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e200      	b.n	80074c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070c2:	4b5d      	ldr	r3, [pc, #372]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d0f0      	beq.n	80070b0 <HAL_RCC_OscConfig+0xe4>
 80070ce:	e014      	b.n	80070fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070d0:	f7fe fe90 	bl	8005df4 <HAL_GetTick>
 80070d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070d6:	e008      	b.n	80070ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070d8:	f7fe fe8c 	bl	8005df4 <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	2b64      	cmp	r3, #100	@ 0x64
 80070e4:	d901      	bls.n	80070ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e1ec      	b.n	80074c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ea:	4b53      	ldr	r3, [pc, #332]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1f0      	bne.n	80070d8 <HAL_RCC_OscConfig+0x10c>
 80070f6:	e000      	b.n	80070fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0302 	and.w	r3, r3, #2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d063      	beq.n	80071ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007106:	4b4c      	ldr	r3, [pc, #304]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f003 030c 	and.w	r3, r3, #12
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00b      	beq.n	800712a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007112:	4b49      	ldr	r3, [pc, #292]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f003 030c 	and.w	r3, r3, #12
 800711a:	2b08      	cmp	r3, #8
 800711c:	d11c      	bne.n	8007158 <HAL_RCC_OscConfig+0x18c>
 800711e:	4b46      	ldr	r3, [pc, #280]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d116      	bne.n	8007158 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800712a:	4b43      	ldr	r3, [pc, #268]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d005      	beq.n	8007142 <HAL_RCC_OscConfig+0x176>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d001      	beq.n	8007142 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e1c0      	b.n	80074c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007142:	4b3d      	ldr	r3, [pc, #244]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	00db      	lsls	r3, r3, #3
 8007150:	4939      	ldr	r1, [pc, #228]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 8007152:	4313      	orrs	r3, r2
 8007154:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007156:	e03a      	b.n	80071ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d020      	beq.n	80071a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007160:	4b36      	ldr	r3, [pc, #216]	@ (800723c <HAL_RCC_OscConfig+0x270>)
 8007162:	2201      	movs	r2, #1
 8007164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007166:	f7fe fe45 	bl	8005df4 <HAL_GetTick>
 800716a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800716c:	e008      	b.n	8007180 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800716e:	f7fe fe41 	bl	8005df4 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	2b02      	cmp	r3, #2
 800717a:	d901      	bls.n	8007180 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e1a1      	b.n	80074c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007180:	4b2d      	ldr	r3, [pc, #180]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d0f0      	beq.n	800716e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800718c:	4b2a      	ldr	r3, [pc, #168]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	00db      	lsls	r3, r3, #3
 800719a:	4927      	ldr	r1, [pc, #156]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 800719c:	4313      	orrs	r3, r2
 800719e:	600b      	str	r3, [r1, #0]
 80071a0:	e015      	b.n	80071ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071a2:	4b26      	ldr	r3, [pc, #152]	@ (800723c <HAL_RCC_OscConfig+0x270>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071a8:	f7fe fe24 	bl	8005df4 <HAL_GetTick>
 80071ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071ae:	e008      	b.n	80071c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071b0:	f7fe fe20 	bl	8005df4 <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d901      	bls.n	80071c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e180      	b.n	80074c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071c2:	4b1d      	ldr	r3, [pc, #116]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1f0      	bne.n	80071b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0308 	and.w	r3, r3, #8
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d03a      	beq.n	8007250 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d019      	beq.n	8007216 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071e2:	4b17      	ldr	r3, [pc, #92]	@ (8007240 <HAL_RCC_OscConfig+0x274>)
 80071e4:	2201      	movs	r2, #1
 80071e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071e8:	f7fe fe04 	bl	8005df4 <HAL_GetTick>
 80071ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071ee:	e008      	b.n	8007202 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071f0:	f7fe fe00 	bl	8005df4 <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d901      	bls.n	8007202 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e160      	b.n	80074c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007202:	4b0d      	ldr	r3, [pc, #52]	@ (8007238 <HAL_RCC_OscConfig+0x26c>)
 8007204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007206:	f003 0302 	and.w	r3, r3, #2
 800720a:	2b00      	cmp	r3, #0
 800720c:	d0f0      	beq.n	80071f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800720e:	2001      	movs	r0, #1
 8007210:	f000 faba 	bl	8007788 <RCC_Delay>
 8007214:	e01c      	b.n	8007250 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007216:	4b0a      	ldr	r3, [pc, #40]	@ (8007240 <HAL_RCC_OscConfig+0x274>)
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800721c:	f7fe fdea 	bl	8005df4 <HAL_GetTick>
 8007220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007222:	e00f      	b.n	8007244 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007224:	f7fe fde6 	bl	8005df4 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	2b02      	cmp	r3, #2
 8007230:	d908      	bls.n	8007244 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e146      	b.n	80074c4 <HAL_RCC_OscConfig+0x4f8>
 8007236:	bf00      	nop
 8007238:	40021000 	.word	0x40021000
 800723c:	42420000 	.word	0x42420000
 8007240:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007244:	4b92      	ldr	r3, [pc, #584]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 8007246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1e9      	bne.n	8007224 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0304 	and.w	r3, r3, #4
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 80a6 	beq.w	80073aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800725e:	2300      	movs	r3, #0
 8007260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007262:	4b8b      	ldr	r3, [pc, #556]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10d      	bne.n	800728a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800726e:	4b88      	ldr	r3, [pc, #544]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 8007270:	69db      	ldr	r3, [r3, #28]
 8007272:	4a87      	ldr	r2, [pc, #540]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 8007274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007278:	61d3      	str	r3, [r2, #28]
 800727a:	4b85      	ldr	r3, [pc, #532]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007282:	60bb      	str	r3, [r7, #8]
 8007284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007286:	2301      	movs	r3, #1
 8007288:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800728a:	4b82      	ldr	r3, [pc, #520]	@ (8007494 <HAL_RCC_OscConfig+0x4c8>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007292:	2b00      	cmp	r3, #0
 8007294:	d118      	bne.n	80072c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007296:	4b7f      	ldr	r3, [pc, #508]	@ (8007494 <HAL_RCC_OscConfig+0x4c8>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a7e      	ldr	r2, [pc, #504]	@ (8007494 <HAL_RCC_OscConfig+0x4c8>)
 800729c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072a2:	f7fe fda7 	bl	8005df4 <HAL_GetTick>
 80072a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072a8:	e008      	b.n	80072bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072aa:	f7fe fda3 	bl	8005df4 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	2b64      	cmp	r3, #100	@ 0x64
 80072b6:	d901      	bls.n	80072bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e103      	b.n	80074c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072bc:	4b75      	ldr	r3, [pc, #468]	@ (8007494 <HAL_RCC_OscConfig+0x4c8>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0f0      	beq.n	80072aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d106      	bne.n	80072de <HAL_RCC_OscConfig+0x312>
 80072d0:	4b6f      	ldr	r3, [pc, #444]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	4a6e      	ldr	r2, [pc, #440]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 80072d6:	f043 0301 	orr.w	r3, r3, #1
 80072da:	6213      	str	r3, [r2, #32]
 80072dc:	e02d      	b.n	800733a <HAL_RCC_OscConfig+0x36e>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10c      	bne.n	8007300 <HAL_RCC_OscConfig+0x334>
 80072e6:	4b6a      	ldr	r3, [pc, #424]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	4a69      	ldr	r2, [pc, #420]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 80072ec:	f023 0301 	bic.w	r3, r3, #1
 80072f0:	6213      	str	r3, [r2, #32]
 80072f2:	4b67      	ldr	r3, [pc, #412]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	4a66      	ldr	r2, [pc, #408]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 80072f8:	f023 0304 	bic.w	r3, r3, #4
 80072fc:	6213      	str	r3, [r2, #32]
 80072fe:	e01c      	b.n	800733a <HAL_RCC_OscConfig+0x36e>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	2b05      	cmp	r3, #5
 8007306:	d10c      	bne.n	8007322 <HAL_RCC_OscConfig+0x356>
 8007308:	4b61      	ldr	r3, [pc, #388]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 800730a:	6a1b      	ldr	r3, [r3, #32]
 800730c:	4a60      	ldr	r2, [pc, #384]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 800730e:	f043 0304 	orr.w	r3, r3, #4
 8007312:	6213      	str	r3, [r2, #32]
 8007314:	4b5e      	ldr	r3, [pc, #376]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	4a5d      	ldr	r2, [pc, #372]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 800731a:	f043 0301 	orr.w	r3, r3, #1
 800731e:	6213      	str	r3, [r2, #32]
 8007320:	e00b      	b.n	800733a <HAL_RCC_OscConfig+0x36e>
 8007322:	4b5b      	ldr	r3, [pc, #364]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	4a5a      	ldr	r2, [pc, #360]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 8007328:	f023 0301 	bic.w	r3, r3, #1
 800732c:	6213      	str	r3, [r2, #32]
 800732e:	4b58      	ldr	r3, [pc, #352]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	4a57      	ldr	r2, [pc, #348]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 8007334:	f023 0304 	bic.w	r3, r3, #4
 8007338:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d015      	beq.n	800736e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007342:	f7fe fd57 	bl	8005df4 <HAL_GetTick>
 8007346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007348:	e00a      	b.n	8007360 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800734a:	f7fe fd53 	bl	8005df4 <HAL_GetTick>
 800734e:	4602      	mov	r2, r0
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007358:	4293      	cmp	r3, r2
 800735a:	d901      	bls.n	8007360 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e0b1      	b.n	80074c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007360:	4b4b      	ldr	r3, [pc, #300]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	f003 0302 	and.w	r3, r3, #2
 8007368:	2b00      	cmp	r3, #0
 800736a:	d0ee      	beq.n	800734a <HAL_RCC_OscConfig+0x37e>
 800736c:	e014      	b.n	8007398 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800736e:	f7fe fd41 	bl	8005df4 <HAL_GetTick>
 8007372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007374:	e00a      	b.n	800738c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007376:	f7fe fd3d 	bl	8005df4 <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007384:	4293      	cmp	r3, r2
 8007386:	d901      	bls.n	800738c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e09b      	b.n	80074c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800738c:	4b40      	ldr	r3, [pc, #256]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	f003 0302 	and.w	r3, r3, #2
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1ee      	bne.n	8007376 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007398:	7dfb      	ldrb	r3, [r7, #23]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d105      	bne.n	80073aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800739e:	4b3c      	ldr	r3, [pc, #240]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 80073a0:	69db      	ldr	r3, [r3, #28]
 80073a2:	4a3b      	ldr	r2, [pc, #236]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 80073a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 8087 	beq.w	80074c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073b4:	4b36      	ldr	r3, [pc, #216]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f003 030c 	and.w	r3, r3, #12
 80073bc:	2b08      	cmp	r3, #8
 80073be:	d061      	beq.n	8007484 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	69db      	ldr	r3, [r3, #28]
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d146      	bne.n	8007456 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073c8:	4b33      	ldr	r3, [pc, #204]	@ (8007498 <HAL_RCC_OscConfig+0x4cc>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ce:	f7fe fd11 	bl	8005df4 <HAL_GetTick>
 80073d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073d4:	e008      	b.n	80073e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073d6:	f7fe fd0d 	bl	8005df4 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d901      	bls.n	80073e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e06d      	b.n	80074c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073e8:	4b29      	ldr	r3, [pc, #164]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1f0      	bne.n	80073d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a1b      	ldr	r3, [r3, #32]
 80073f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073fc:	d108      	bne.n	8007410 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80073fe:	4b24      	ldr	r3, [pc, #144]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	4921      	ldr	r1, [pc, #132]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 800740c:	4313      	orrs	r3, r2
 800740e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007410:	4b1f      	ldr	r3, [pc, #124]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a19      	ldr	r1, [r3, #32]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007420:	430b      	orrs	r3, r1
 8007422:	491b      	ldr	r1, [pc, #108]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 8007424:	4313      	orrs	r3, r2
 8007426:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007428:	4b1b      	ldr	r3, [pc, #108]	@ (8007498 <HAL_RCC_OscConfig+0x4cc>)
 800742a:	2201      	movs	r2, #1
 800742c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800742e:	f7fe fce1 	bl	8005df4 <HAL_GetTick>
 8007432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007434:	e008      	b.n	8007448 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007436:	f7fe fcdd 	bl	8005df4 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	2b02      	cmp	r3, #2
 8007442:	d901      	bls.n	8007448 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e03d      	b.n	80074c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007448:	4b11      	ldr	r3, [pc, #68]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d0f0      	beq.n	8007436 <HAL_RCC_OscConfig+0x46a>
 8007454:	e035      	b.n	80074c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007456:	4b10      	ldr	r3, [pc, #64]	@ (8007498 <HAL_RCC_OscConfig+0x4cc>)
 8007458:	2200      	movs	r2, #0
 800745a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800745c:	f7fe fcca 	bl	8005df4 <HAL_GetTick>
 8007460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007462:	e008      	b.n	8007476 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007464:	f7fe fcc6 	bl	8005df4 <HAL_GetTick>
 8007468:	4602      	mov	r2, r0
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	2b02      	cmp	r3, #2
 8007470:	d901      	bls.n	8007476 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e026      	b.n	80074c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007476:	4b06      	ldr	r3, [pc, #24]	@ (8007490 <HAL_RCC_OscConfig+0x4c4>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1f0      	bne.n	8007464 <HAL_RCC_OscConfig+0x498>
 8007482:	e01e      	b.n	80074c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	69db      	ldr	r3, [r3, #28]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d107      	bne.n	800749c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e019      	b.n	80074c4 <HAL_RCC_OscConfig+0x4f8>
 8007490:	40021000 	.word	0x40021000
 8007494:	40007000 	.word	0x40007000
 8007498:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800749c:	4b0b      	ldr	r3, [pc, #44]	@ (80074cc <HAL_RCC_OscConfig+0x500>)
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d106      	bne.n	80074be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d001      	beq.n	80074c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e000      	b.n	80074c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3718      	adds	r7, #24
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	40021000 	.word	0x40021000

080074d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e0d0      	b.n	8007686 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074e4:	4b6a      	ldr	r3, [pc, #424]	@ (8007690 <HAL_RCC_ClockConfig+0x1c0>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0307 	and.w	r3, r3, #7
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d910      	bls.n	8007514 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074f2:	4b67      	ldr	r3, [pc, #412]	@ (8007690 <HAL_RCC_ClockConfig+0x1c0>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f023 0207 	bic.w	r2, r3, #7
 80074fa:	4965      	ldr	r1, [pc, #404]	@ (8007690 <HAL_RCC_ClockConfig+0x1c0>)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	4313      	orrs	r3, r2
 8007500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007502:	4b63      	ldr	r3, [pc, #396]	@ (8007690 <HAL_RCC_ClockConfig+0x1c0>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0307 	and.w	r3, r3, #7
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	429a      	cmp	r2, r3
 800750e:	d001      	beq.n	8007514 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e0b8      	b.n	8007686 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0302 	and.w	r3, r3, #2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d020      	beq.n	8007562 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b00      	cmp	r3, #0
 800752a:	d005      	beq.n	8007538 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800752c:	4b59      	ldr	r3, [pc, #356]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	4a58      	ldr	r2, [pc, #352]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 8007532:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007536:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0308 	and.w	r3, r3, #8
 8007540:	2b00      	cmp	r3, #0
 8007542:	d005      	beq.n	8007550 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007544:	4b53      	ldr	r3, [pc, #332]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	4a52      	ldr	r2, [pc, #328]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 800754a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800754e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007550:	4b50      	ldr	r3, [pc, #320]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	494d      	ldr	r1, [pc, #308]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 800755e:	4313      	orrs	r3, r2
 8007560:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	d040      	beq.n	80075f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d107      	bne.n	8007586 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007576:	4b47      	ldr	r3, [pc, #284]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d115      	bne.n	80075ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e07f      	b.n	8007686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	2b02      	cmp	r3, #2
 800758c:	d107      	bne.n	800759e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800758e:	4b41      	ldr	r3, [pc, #260]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d109      	bne.n	80075ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e073      	b.n	8007686 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800759e:	4b3d      	ldr	r3, [pc, #244]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0302 	and.w	r3, r3, #2
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e06b      	b.n	8007686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075ae:	4b39      	ldr	r3, [pc, #228]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f023 0203 	bic.w	r2, r3, #3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	4936      	ldr	r1, [pc, #216]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075c0:	f7fe fc18 	bl	8005df4 <HAL_GetTick>
 80075c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075c6:	e00a      	b.n	80075de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075c8:	f7fe fc14 	bl	8005df4 <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d901      	bls.n	80075de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e053      	b.n	8007686 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075de:	4b2d      	ldr	r3, [pc, #180]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f003 020c 	and.w	r2, r3, #12
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d1eb      	bne.n	80075c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075f0:	4b27      	ldr	r3, [pc, #156]	@ (8007690 <HAL_RCC_ClockConfig+0x1c0>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0307 	and.w	r3, r3, #7
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d210      	bcs.n	8007620 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075fe:	4b24      	ldr	r3, [pc, #144]	@ (8007690 <HAL_RCC_ClockConfig+0x1c0>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f023 0207 	bic.w	r2, r3, #7
 8007606:	4922      	ldr	r1, [pc, #136]	@ (8007690 <HAL_RCC_ClockConfig+0x1c0>)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	4313      	orrs	r3, r2
 800760c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800760e:	4b20      	ldr	r3, [pc, #128]	@ (8007690 <HAL_RCC_ClockConfig+0x1c0>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0307 	and.w	r3, r3, #7
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	429a      	cmp	r2, r3
 800761a:	d001      	beq.n	8007620 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e032      	b.n	8007686 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0304 	and.w	r3, r3, #4
 8007628:	2b00      	cmp	r3, #0
 800762a:	d008      	beq.n	800763e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800762c:	4b19      	ldr	r3, [pc, #100]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	4916      	ldr	r1, [pc, #88]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 800763a:	4313      	orrs	r3, r2
 800763c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0308 	and.w	r3, r3, #8
 8007646:	2b00      	cmp	r3, #0
 8007648:	d009      	beq.n	800765e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800764a:	4b12      	ldr	r3, [pc, #72]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	00db      	lsls	r3, r3, #3
 8007658:	490e      	ldr	r1, [pc, #56]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 800765a:	4313      	orrs	r3, r2
 800765c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800765e:	f000 f821 	bl	80076a4 <HAL_RCC_GetSysClockFreq>
 8007662:	4602      	mov	r2, r0
 8007664:	4b0b      	ldr	r3, [pc, #44]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	091b      	lsrs	r3, r3, #4
 800766a:	f003 030f 	and.w	r3, r3, #15
 800766e:	490a      	ldr	r1, [pc, #40]	@ (8007698 <HAL_RCC_ClockConfig+0x1c8>)
 8007670:	5ccb      	ldrb	r3, [r1, r3]
 8007672:	fa22 f303 	lsr.w	r3, r2, r3
 8007676:	4a09      	ldr	r2, [pc, #36]	@ (800769c <HAL_RCC_ClockConfig+0x1cc>)
 8007678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800767a:	4b09      	ldr	r3, [pc, #36]	@ (80076a0 <HAL_RCC_ClockConfig+0x1d0>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe fb76 	bl	8005d70 <HAL_InitTick>

  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	40022000 	.word	0x40022000
 8007694:	40021000 	.word	0x40021000
 8007698:	0800b578 	.word	0x0800b578
 800769c:	20000018 	.word	0x20000018
 80076a0:	2000001c 	.word	0x2000001c

080076a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	60fb      	str	r3, [r7, #12]
 80076ae:	2300      	movs	r3, #0
 80076b0:	60bb      	str	r3, [r7, #8]
 80076b2:	2300      	movs	r3, #0
 80076b4:	617b      	str	r3, [r7, #20]
 80076b6:	2300      	movs	r3, #0
 80076b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80076be:	4b1e      	ldr	r3, [pc, #120]	@ (8007738 <HAL_RCC_GetSysClockFreq+0x94>)
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f003 030c 	and.w	r3, r3, #12
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	d002      	beq.n	80076d4 <HAL_RCC_GetSysClockFreq+0x30>
 80076ce:	2b08      	cmp	r3, #8
 80076d0:	d003      	beq.n	80076da <HAL_RCC_GetSysClockFreq+0x36>
 80076d2:	e027      	b.n	8007724 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80076d4:	4b19      	ldr	r3, [pc, #100]	@ (800773c <HAL_RCC_GetSysClockFreq+0x98>)
 80076d6:	613b      	str	r3, [r7, #16]
      break;
 80076d8:	e027      	b.n	800772a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	0c9b      	lsrs	r3, r3, #18
 80076de:	f003 030f 	and.w	r3, r3, #15
 80076e2:	4a17      	ldr	r2, [pc, #92]	@ (8007740 <HAL_RCC_GetSysClockFreq+0x9c>)
 80076e4:	5cd3      	ldrb	r3, [r2, r3]
 80076e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d010      	beq.n	8007714 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80076f2:	4b11      	ldr	r3, [pc, #68]	@ (8007738 <HAL_RCC_GetSysClockFreq+0x94>)
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	0c5b      	lsrs	r3, r3, #17
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	4a11      	ldr	r2, [pc, #68]	@ (8007744 <HAL_RCC_GetSysClockFreq+0xa0>)
 80076fe:	5cd3      	ldrb	r3, [r2, r3]
 8007700:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a0d      	ldr	r2, [pc, #52]	@ (800773c <HAL_RCC_GetSysClockFreq+0x98>)
 8007706:	fb03 f202 	mul.w	r2, r3, r2
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007710:	617b      	str	r3, [r7, #20]
 8007712:	e004      	b.n	800771e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a0c      	ldr	r2, [pc, #48]	@ (8007748 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007718:	fb02 f303 	mul.w	r3, r2, r3
 800771c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	613b      	str	r3, [r7, #16]
      break;
 8007722:	e002      	b.n	800772a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007724:	4b05      	ldr	r3, [pc, #20]	@ (800773c <HAL_RCC_GetSysClockFreq+0x98>)
 8007726:	613b      	str	r3, [r7, #16]
      break;
 8007728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800772a:	693b      	ldr	r3, [r7, #16]
}
 800772c:	4618      	mov	r0, r3
 800772e:	371c      	adds	r7, #28
 8007730:	46bd      	mov	sp, r7
 8007732:	bc80      	pop	{r7}
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	40021000 	.word	0x40021000
 800773c:	007a1200 	.word	0x007a1200
 8007740:	0800b590 	.word	0x0800b590
 8007744:	0800b5a0 	.word	0x0800b5a0
 8007748:	003d0900 	.word	0x003d0900

0800774c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800774c:	b480      	push	{r7}
 800774e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007750:	4b02      	ldr	r3, [pc, #8]	@ (800775c <HAL_RCC_GetHCLKFreq+0x10>)
 8007752:	681b      	ldr	r3, [r3, #0]
}
 8007754:	4618      	mov	r0, r3
 8007756:	46bd      	mov	sp, r7
 8007758:	bc80      	pop	{r7}
 800775a:	4770      	bx	lr
 800775c:	20000018 	.word	0x20000018

08007760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007764:	f7ff fff2 	bl	800774c <HAL_RCC_GetHCLKFreq>
 8007768:	4602      	mov	r2, r0
 800776a:	4b05      	ldr	r3, [pc, #20]	@ (8007780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	0a1b      	lsrs	r3, r3, #8
 8007770:	f003 0307 	and.w	r3, r3, #7
 8007774:	4903      	ldr	r1, [pc, #12]	@ (8007784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007776:	5ccb      	ldrb	r3, [r1, r3]
 8007778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800777c:	4618      	mov	r0, r3
 800777e:	bd80      	pop	{r7, pc}
 8007780:	40021000 	.word	0x40021000
 8007784:	0800b588 	.word	0x0800b588

08007788 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007790:	4b0a      	ldr	r3, [pc, #40]	@ (80077bc <RCC_Delay+0x34>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a0a      	ldr	r2, [pc, #40]	@ (80077c0 <RCC_Delay+0x38>)
 8007796:	fba2 2303 	umull	r2, r3, r2, r3
 800779a:	0a5b      	lsrs	r3, r3, #9
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	fb02 f303 	mul.w	r3, r2, r3
 80077a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80077a4:	bf00      	nop
  }
  while (Delay --);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	1e5a      	subs	r2, r3, #1
 80077aa:	60fa      	str	r2, [r7, #12]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1f9      	bne.n	80077a4 <RCC_Delay+0x1c>
}
 80077b0:	bf00      	nop
 80077b2:	bf00      	nop
 80077b4:	3714      	adds	r7, #20
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bc80      	pop	{r7}
 80077ba:	4770      	bx	lr
 80077bc:	20000018 	.word	0x20000018
 80077c0:	10624dd3 	.word	0x10624dd3

080077c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d101      	bne.n	80077d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e076      	b.n	80078c4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d108      	bne.n	80077f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077e6:	d009      	beq.n	80077fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	61da      	str	r2, [r3, #28]
 80077ee:	e005      	b.n	80077fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d106      	bne.n	800781c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7fd ff58 	bl	80056cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2202      	movs	r2, #2
 8007820:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007832:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007844:	431a      	orrs	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800784e:	431a      	orrs	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	f003 0302 	and.w	r3, r3, #2
 8007858:	431a      	orrs	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	431a      	orrs	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800786c:	431a      	orrs	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007876:	431a      	orrs	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a1b      	ldr	r3, [r3, #32]
 800787c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007880:	ea42 0103 	orr.w	r1, r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007888:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	430a      	orrs	r2, r1
 8007892:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	0c1a      	lsrs	r2, r3, #16
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f002 0204 	and.w	r2, r2, #4
 80078a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	69da      	ldr	r2, [r3, #28]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e041      	b.n	8007962 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d106      	bne.n	80078f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7fe f95c 	bl	8005bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2202      	movs	r2, #2
 80078fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	3304      	adds	r3, #4
 8007908:	4619      	mov	r1, r3
 800790a:	4610      	mov	r0, r2
 800790c:	f000 fbe2 	bl	80080d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b082      	sub	sp, #8
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d101      	bne.n	800797c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	e041      	b.n	8007a00 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b00      	cmp	r3, #0
 8007986:	d106      	bne.n	8007996 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f839 	bl	8007a08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2202      	movs	r2, #2
 800799a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	3304      	adds	r3, #4
 80079a6:	4619      	mov	r1, r3
 80079a8:	4610      	mov	r0, r2
 80079aa:	f000 fb93 	bl	80080d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2201      	movs	r2, #1
 80079c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bc80      	pop	{r7}
 8007a18:	4770      	bx	lr
	...

08007a1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d109      	bne.n	8007a40 <HAL_TIM_PWM_Start+0x24>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	bf14      	ite	ne
 8007a38:	2301      	movne	r3, #1
 8007a3a:	2300      	moveq	r3, #0
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	e022      	b.n	8007a86 <HAL_TIM_PWM_Start+0x6a>
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2b04      	cmp	r3, #4
 8007a44:	d109      	bne.n	8007a5a <HAL_TIM_PWM_Start+0x3e>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	bf14      	ite	ne
 8007a52:	2301      	movne	r3, #1
 8007a54:	2300      	moveq	r3, #0
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	e015      	b.n	8007a86 <HAL_TIM_PWM_Start+0x6a>
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	2b08      	cmp	r3, #8
 8007a5e:	d109      	bne.n	8007a74 <HAL_TIM_PWM_Start+0x58>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	bf14      	ite	ne
 8007a6c:	2301      	movne	r3, #1
 8007a6e:	2300      	moveq	r3, #0
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	e008      	b.n	8007a86 <HAL_TIM_PWM_Start+0x6a>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	bf14      	ite	ne
 8007a80:	2301      	movne	r3, #1
 8007a82:	2300      	moveq	r3, #0
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e05e      	b.n	8007b4c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d104      	bne.n	8007a9e <HAL_TIM_PWM_Start+0x82>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2202      	movs	r2, #2
 8007a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a9c:	e013      	b.n	8007ac6 <HAL_TIM_PWM_Start+0xaa>
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b04      	cmp	r3, #4
 8007aa2:	d104      	bne.n	8007aae <HAL_TIM_PWM_Start+0x92>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007aac:	e00b      	b.n	8007ac6 <HAL_TIM_PWM_Start+0xaa>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b08      	cmp	r3, #8
 8007ab2:	d104      	bne.n	8007abe <HAL_TIM_PWM_Start+0xa2>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007abc:	e003      	b.n	8007ac6 <HAL_TIM_PWM_Start+0xaa>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2202      	movs	r2, #2
 8007ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2201      	movs	r2, #1
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f000 fd8c 	bl	80085ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a1e      	ldr	r2, [pc, #120]	@ (8007b54 <HAL_TIM_PWM_Start+0x138>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d107      	bne.n	8007aee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007aec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a18      	ldr	r2, [pc, #96]	@ (8007b54 <HAL_TIM_PWM_Start+0x138>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d00e      	beq.n	8007b16 <HAL_TIM_PWM_Start+0xfa>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b00:	d009      	beq.n	8007b16 <HAL_TIM_PWM_Start+0xfa>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a14      	ldr	r2, [pc, #80]	@ (8007b58 <HAL_TIM_PWM_Start+0x13c>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d004      	beq.n	8007b16 <HAL_TIM_PWM_Start+0xfa>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a12      	ldr	r2, [pc, #72]	@ (8007b5c <HAL_TIM_PWM_Start+0x140>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d111      	bne.n	8007b3a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	f003 0307 	and.w	r3, r3, #7
 8007b20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2b06      	cmp	r3, #6
 8007b26:	d010      	beq.n	8007b4a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f042 0201 	orr.w	r2, r2, #1
 8007b36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b38:	e007      	b.n	8007b4a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f042 0201 	orr.w	r2, r2, #1
 8007b48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	40012c00 	.word	0x40012c00
 8007b58:	40000400 	.word	0x40000400
 8007b5c:	40000800 	.word	0x40000800

08007b60 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e093      	b.n	8007c9c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d106      	bne.n	8007b8e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f7fe f82f 	bl	8005bec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2202      	movs	r2, #2
 8007b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	6812      	ldr	r2, [r2, #0]
 8007ba0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ba4:	f023 0307 	bic.w	r3, r3, #7
 8007ba8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	f000 fa8d 	bl	80080d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	6a1b      	ldr	r3, [r3, #32]
 8007bd0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007be2:	f023 0303 	bic.w	r3, r3, #3
 8007be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	021b      	lsls	r3, r3, #8
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007c00:	f023 030c 	bic.w	r3, r3, #12
 8007c04:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007c0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	68da      	ldr	r2, [r3, #12]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	69db      	ldr	r3, [r3, #28]
 8007c1a:	021b      	lsls	r3, r3, #8
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	011a      	lsls	r2, r3, #4
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	031b      	lsls	r3, r3, #12
 8007c30:	4313      	orrs	r3, r2
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007c3e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	685a      	ldr	r2, [r3, #4]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	011b      	lsls	r3, r3, #4
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3718      	adds	r7, #24
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007cb4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007cbc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007cc4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007ccc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d110      	bne.n	8007cf6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d102      	bne.n	8007ce0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007cda:	7b7b      	ldrb	r3, [r7, #13]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d001      	beq.n	8007ce4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e069      	b.n	8007db8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cf4:	e031      	b.n	8007d5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2b04      	cmp	r3, #4
 8007cfa:	d110      	bne.n	8007d1e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cfc:	7bbb      	ldrb	r3, [r7, #14]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d102      	bne.n	8007d08 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d02:	7b3b      	ldrb	r3, [r7, #12]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d001      	beq.n	8007d0c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e055      	b.n	8007db8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2202      	movs	r2, #2
 8007d18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d1c:	e01d      	b.n	8007d5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d108      	bne.n	8007d36 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d24:	7bbb      	ldrb	r3, [r7, #14]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d105      	bne.n	8007d36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d2a:	7b7b      	ldrb	r3, [r7, #13]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d102      	bne.n	8007d36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d30:	7b3b      	ldrb	r3, [r7, #12]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d001      	beq.n	8007d3a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e03e      	b.n	8007db8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2202      	movs	r2, #2
 8007d46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2202      	movs	r2, #2
 8007d56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d003      	beq.n	8007d68 <HAL_TIM_Encoder_Start+0xc4>
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	2b04      	cmp	r3, #4
 8007d64:	d008      	beq.n	8007d78 <HAL_TIM_Encoder_Start+0xd4>
 8007d66:	e00f      	b.n	8007d88 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	2100      	movs	r1, #0
 8007d70:	4618      	mov	r0, r3
 8007d72:	f000 fc3b 	bl	80085ec <TIM_CCxChannelCmd>
      break;
 8007d76:	e016      	b.n	8007da6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	2104      	movs	r1, #4
 8007d80:	4618      	mov	r0, r3
 8007d82:	f000 fc33 	bl	80085ec <TIM_CCxChannelCmd>
      break;
 8007d86:	e00e      	b.n	8007da6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	2100      	movs	r1, #0
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 fc2b 	bl	80085ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	2104      	movs	r1, #4
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f000 fc24 	bl	80085ec <TIM_CCxChannelCmd>
      break;
 8007da4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f042 0201 	orr.w	r2, r2, #1
 8007db4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d101      	bne.n	8007dde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007dda:	2302      	movs	r3, #2
 8007ddc:	e0ae      	b.n	8007f3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b0c      	cmp	r3, #12
 8007dea:	f200 809f 	bhi.w	8007f2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007dee:	a201      	add	r2, pc, #4	@ (adr r2, 8007df4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df4:	08007e29 	.word	0x08007e29
 8007df8:	08007f2d 	.word	0x08007f2d
 8007dfc:	08007f2d 	.word	0x08007f2d
 8007e00:	08007f2d 	.word	0x08007f2d
 8007e04:	08007e69 	.word	0x08007e69
 8007e08:	08007f2d 	.word	0x08007f2d
 8007e0c:	08007f2d 	.word	0x08007f2d
 8007e10:	08007f2d 	.word	0x08007f2d
 8007e14:	08007eab 	.word	0x08007eab
 8007e18:	08007f2d 	.word	0x08007f2d
 8007e1c:	08007f2d 	.word	0x08007f2d
 8007e20:	08007f2d 	.word	0x08007f2d
 8007e24:	08007eeb 	.word	0x08007eeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68b9      	ldr	r1, [r7, #8]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 f9be 	bl	80081b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	699a      	ldr	r2, [r3, #24]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f042 0208 	orr.w	r2, r2, #8
 8007e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	699a      	ldr	r2, [r3, #24]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f022 0204 	bic.w	r2, r2, #4
 8007e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6999      	ldr	r1, [r3, #24]
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	691a      	ldr	r2, [r3, #16]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	430a      	orrs	r2, r1
 8007e64:	619a      	str	r2, [r3, #24]
      break;
 8007e66:	e064      	b.n	8007f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68b9      	ldr	r1, [r7, #8]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 fa04 	bl	800827c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	699a      	ldr	r2, [r3, #24]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	699a      	ldr	r2, [r3, #24]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6999      	ldr	r1, [r3, #24]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	021a      	lsls	r2, r3, #8
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	619a      	str	r2, [r3, #24]
      break;
 8007ea8:	e043      	b.n	8007f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68b9      	ldr	r1, [r7, #8]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 fa4d 	bl	8008350 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	69da      	ldr	r2, [r3, #28]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f042 0208 	orr.w	r2, r2, #8
 8007ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	69da      	ldr	r2, [r3, #28]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f022 0204 	bic.w	r2, r2, #4
 8007ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	69d9      	ldr	r1, [r3, #28]
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	691a      	ldr	r2, [r3, #16]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	61da      	str	r2, [r3, #28]
      break;
 8007ee8:	e023      	b.n	8007f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68b9      	ldr	r1, [r7, #8]
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 fa97 	bl	8008424 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	69da      	ldr	r2, [r3, #28]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	69da      	ldr	r2, [r3, #28]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	69d9      	ldr	r1, [r3, #28]
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	021a      	lsls	r2, r3, #8
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	430a      	orrs	r2, r1
 8007f28:	61da      	str	r2, [r3, #28]
      break;
 8007f2a:	e002      	b.n	8007f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3718      	adds	r7, #24
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d101      	bne.n	8007f60 <HAL_TIM_ConfigClockSource+0x1c>
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	e0b4      	b.n	80080ca <HAL_TIM_ConfigClockSource+0x186>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f98:	d03e      	beq.n	8008018 <HAL_TIM_ConfigClockSource+0xd4>
 8007f9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f9e:	f200 8087 	bhi.w	80080b0 <HAL_TIM_ConfigClockSource+0x16c>
 8007fa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fa6:	f000 8086 	beq.w	80080b6 <HAL_TIM_ConfigClockSource+0x172>
 8007faa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fae:	d87f      	bhi.n	80080b0 <HAL_TIM_ConfigClockSource+0x16c>
 8007fb0:	2b70      	cmp	r3, #112	@ 0x70
 8007fb2:	d01a      	beq.n	8007fea <HAL_TIM_ConfigClockSource+0xa6>
 8007fb4:	2b70      	cmp	r3, #112	@ 0x70
 8007fb6:	d87b      	bhi.n	80080b0 <HAL_TIM_ConfigClockSource+0x16c>
 8007fb8:	2b60      	cmp	r3, #96	@ 0x60
 8007fba:	d050      	beq.n	800805e <HAL_TIM_ConfigClockSource+0x11a>
 8007fbc:	2b60      	cmp	r3, #96	@ 0x60
 8007fbe:	d877      	bhi.n	80080b0 <HAL_TIM_ConfigClockSource+0x16c>
 8007fc0:	2b50      	cmp	r3, #80	@ 0x50
 8007fc2:	d03c      	beq.n	800803e <HAL_TIM_ConfigClockSource+0xfa>
 8007fc4:	2b50      	cmp	r3, #80	@ 0x50
 8007fc6:	d873      	bhi.n	80080b0 <HAL_TIM_ConfigClockSource+0x16c>
 8007fc8:	2b40      	cmp	r3, #64	@ 0x40
 8007fca:	d058      	beq.n	800807e <HAL_TIM_ConfigClockSource+0x13a>
 8007fcc:	2b40      	cmp	r3, #64	@ 0x40
 8007fce:	d86f      	bhi.n	80080b0 <HAL_TIM_ConfigClockSource+0x16c>
 8007fd0:	2b30      	cmp	r3, #48	@ 0x30
 8007fd2:	d064      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x15a>
 8007fd4:	2b30      	cmp	r3, #48	@ 0x30
 8007fd6:	d86b      	bhi.n	80080b0 <HAL_TIM_ConfigClockSource+0x16c>
 8007fd8:	2b20      	cmp	r3, #32
 8007fda:	d060      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x15a>
 8007fdc:	2b20      	cmp	r3, #32
 8007fde:	d867      	bhi.n	80080b0 <HAL_TIM_ConfigClockSource+0x16c>
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d05c      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x15a>
 8007fe4:	2b10      	cmp	r3, #16
 8007fe6:	d05a      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x15a>
 8007fe8:	e062      	b.n	80080b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ffa:	f000 fad8 	bl	80085ae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800800c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	609a      	str	r2, [r3, #8]
      break;
 8008016:	e04f      	b.n	80080b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008028:	f000 fac1 	bl	80085ae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	689a      	ldr	r2, [r3, #8]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800803a:	609a      	str	r2, [r3, #8]
      break;
 800803c:	e03c      	b.n	80080b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800804a:	461a      	mov	r2, r3
 800804c:	f000 fa38 	bl	80084c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2150      	movs	r1, #80	@ 0x50
 8008056:	4618      	mov	r0, r3
 8008058:	f000 fa8f 	bl	800857a <TIM_ITRx_SetConfig>
      break;
 800805c:	e02c      	b.n	80080b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800806a:	461a      	mov	r2, r3
 800806c:	f000 fa56 	bl	800851c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2160      	movs	r1, #96	@ 0x60
 8008076:	4618      	mov	r0, r3
 8008078:	f000 fa7f 	bl	800857a <TIM_ITRx_SetConfig>
      break;
 800807c:	e01c      	b.n	80080b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800808a:	461a      	mov	r2, r3
 800808c:	f000 fa18 	bl	80084c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2140      	movs	r1, #64	@ 0x40
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fa6f 	bl	800857a <TIM_ITRx_SetConfig>
      break;
 800809c:	e00c      	b.n	80080b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4619      	mov	r1, r3
 80080a8:	4610      	mov	r0, r2
 80080aa:	f000 fa66 	bl	800857a <TIM_ITRx_SetConfig>
      break;
 80080ae:	e003      	b.n	80080b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	73fb      	strb	r3, [r7, #15]
      break;
 80080b4:	e000      	b.n	80080b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80080b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
	...

080080d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a2f      	ldr	r2, [pc, #188]	@ (80081a4 <TIM_Base_SetConfig+0xd0>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d00b      	beq.n	8008104 <TIM_Base_SetConfig+0x30>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080f2:	d007      	beq.n	8008104 <TIM_Base_SetConfig+0x30>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a2c      	ldr	r2, [pc, #176]	@ (80081a8 <TIM_Base_SetConfig+0xd4>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d003      	beq.n	8008104 <TIM_Base_SetConfig+0x30>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a2b      	ldr	r2, [pc, #172]	@ (80081ac <TIM_Base_SetConfig+0xd8>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d108      	bne.n	8008116 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800810a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	4313      	orrs	r3, r2
 8008114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a22      	ldr	r2, [pc, #136]	@ (80081a4 <TIM_Base_SetConfig+0xd0>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d00b      	beq.n	8008136 <TIM_Base_SetConfig+0x62>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008124:	d007      	beq.n	8008136 <TIM_Base_SetConfig+0x62>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a1f      	ldr	r2, [pc, #124]	@ (80081a8 <TIM_Base_SetConfig+0xd4>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d003      	beq.n	8008136 <TIM_Base_SetConfig+0x62>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a1e      	ldr	r2, [pc, #120]	@ (80081ac <TIM_Base_SetConfig+0xd8>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d108      	bne.n	8008148 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800813c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	4313      	orrs	r3, r2
 8008146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	4313      	orrs	r3, r2
 8008154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	689a      	ldr	r2, [r3, #8]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a0d      	ldr	r2, [pc, #52]	@ (80081a4 <TIM_Base_SetConfig+0xd0>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d103      	bne.n	800817c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	691a      	ldr	r2, [r3, #16]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	2b00      	cmp	r3, #0
 800818c:	d005      	beq.n	800819a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	f023 0201 	bic.w	r2, r3, #1
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	611a      	str	r2, [r3, #16]
  }
}
 800819a:	bf00      	nop
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	bc80      	pop	{r7}
 80081a2:	4770      	bx	lr
 80081a4:	40012c00 	.word	0x40012c00
 80081a8:	40000400 	.word	0x40000400
 80081ac:	40000800 	.word	0x40000800

080081b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
 80081c4:	f023 0201 	bic.w	r2, r3, #1
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f023 0303 	bic.w	r3, r3, #3
 80081e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	f023 0302 	bic.w	r3, r3, #2
 80081f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	4313      	orrs	r3, r2
 8008202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a1c      	ldr	r2, [pc, #112]	@ (8008278 <TIM_OC1_SetConfig+0xc8>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d10c      	bne.n	8008226 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	f023 0308 	bic.w	r3, r3, #8
 8008212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	697a      	ldr	r2, [r7, #20]
 800821a:	4313      	orrs	r3, r2
 800821c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	f023 0304 	bic.w	r3, r3, #4
 8008224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a13      	ldr	r2, [pc, #76]	@ (8008278 <TIM_OC1_SetConfig+0xc8>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d111      	bne.n	8008252 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800823c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	4313      	orrs	r3, r2
 8008246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	4313      	orrs	r3, r2
 8008250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	697a      	ldr	r2, [r7, #20]
 800826a:	621a      	str	r2, [r3, #32]
}
 800826c:	bf00      	nop
 800826e:	371c      	adds	r7, #28
 8008270:	46bd      	mov	sp, r7
 8008272:	bc80      	pop	{r7}
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	40012c00 	.word	0x40012c00

0800827c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800827c:	b480      	push	{r7}
 800827e:	b087      	sub	sp, #28
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a1b      	ldr	r3, [r3, #32]
 8008290:	f023 0210 	bic.w	r2, r3, #16
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	021b      	lsls	r3, r3, #8
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	4313      	orrs	r3, r2
 80082be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f023 0320 	bic.w	r3, r3, #32
 80082c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	011b      	lsls	r3, r3, #4
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a1d      	ldr	r2, [pc, #116]	@ (800834c <TIM_OC2_SetConfig+0xd0>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d10d      	bne.n	80082f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	011b      	lsls	r3, r3, #4
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a14      	ldr	r2, [pc, #80]	@ (800834c <TIM_OC2_SetConfig+0xd0>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d113      	bne.n	8008328 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008306:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800830e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	4313      	orrs	r3, r2
 800831a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	4313      	orrs	r3, r2
 8008326:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	621a      	str	r2, [r3, #32]
}
 8008342:	bf00      	nop
 8008344:	371c      	adds	r7, #28
 8008346:	46bd      	mov	sp, r7
 8008348:	bc80      	pop	{r7}
 800834a:	4770      	bx	lr
 800834c:	40012c00 	.word	0x40012c00

08008350 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008350:	b480      	push	{r7}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a1b      	ldr	r3, [r3, #32]
 8008364:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800837e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f023 0303 	bic.w	r3, r3, #3
 8008386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	4313      	orrs	r3, r2
 8008390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	021b      	lsls	r3, r3, #8
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a1d      	ldr	r2, [pc, #116]	@ (8008420 <TIM_OC3_SetConfig+0xd0>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d10d      	bne.n	80083ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80083b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	021b      	lsls	r3, r3, #8
 80083bc:	697a      	ldr	r2, [r7, #20]
 80083be:	4313      	orrs	r3, r2
 80083c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80083c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a14      	ldr	r2, [pc, #80]	@ (8008420 <TIM_OC3_SetConfig+0xd0>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d113      	bne.n	80083fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	011b      	lsls	r3, r3, #4
 80083e8:	693a      	ldr	r2, [r7, #16]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	011b      	lsls	r3, r3, #4
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	685a      	ldr	r2, [r3, #4]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	697a      	ldr	r2, [r7, #20]
 8008412:	621a      	str	r2, [r3, #32]
}
 8008414:	bf00      	nop
 8008416:	371c      	adds	r7, #28
 8008418:	46bd      	mov	sp, r7
 800841a:	bc80      	pop	{r7}
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	40012c00 	.word	0x40012c00

08008424 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008424:	b480      	push	{r7}
 8008426:	b087      	sub	sp, #28
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a1b      	ldr	r3, [r3, #32]
 8008438:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800845a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	021b      	lsls	r3, r3, #8
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	4313      	orrs	r3, r2
 8008466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800846e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	031b      	lsls	r3, r3, #12
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	4313      	orrs	r3, r2
 800847a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a0f      	ldr	r2, [pc, #60]	@ (80084bc <TIM_OC4_SetConfig+0x98>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d109      	bne.n	8008498 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800848a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	695b      	ldr	r3, [r3, #20]
 8008490:	019b      	lsls	r3, r3, #6
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	4313      	orrs	r3, r2
 8008496:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	697a      	ldr	r2, [r7, #20]
 800849c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	685a      	ldr	r2, [r3, #4]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	621a      	str	r2, [r3, #32]
}
 80084b2:	bf00      	nop
 80084b4:	371c      	adds	r7, #28
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bc80      	pop	{r7}
 80084ba:	4770      	bx	lr
 80084bc:	40012c00 	.word	0x40012c00

080084c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b087      	sub	sp, #28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6a1b      	ldr	r3, [r3, #32]
 80084d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	f023 0201 	bic.w	r2, r3, #1
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	011b      	lsls	r3, r3, #4
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	f023 030a 	bic.w	r3, r3, #10
 80084fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	4313      	orrs	r3, r2
 8008504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	697a      	ldr	r2, [r7, #20]
 8008510:	621a      	str	r2, [r3, #32]
}
 8008512:	bf00      	nop
 8008514:	371c      	adds	r7, #28
 8008516:	46bd      	mov	sp, r7
 8008518:	bc80      	pop	{r7}
 800851a:	4770      	bx	lr

0800851c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800851c:	b480      	push	{r7}
 800851e:	b087      	sub	sp, #28
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6a1b      	ldr	r3, [r3, #32]
 800852c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6a1b      	ldr	r3, [r3, #32]
 8008532:	f023 0210 	bic.w	r2, r3, #16
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	699b      	ldr	r3, [r3, #24]
 800853e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	031b      	lsls	r3, r3, #12
 800854c:	693a      	ldr	r2, [r7, #16]
 800854e:	4313      	orrs	r3, r2
 8008550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008558:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	011b      	lsls	r3, r3, #4
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	4313      	orrs	r3, r2
 8008562:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	693a      	ldr	r2, [r7, #16]
 8008568:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	697a      	ldr	r2, [r7, #20]
 800856e:	621a      	str	r2, [r3, #32]
}
 8008570:	bf00      	nop
 8008572:	371c      	adds	r7, #28
 8008574:	46bd      	mov	sp, r7
 8008576:	bc80      	pop	{r7}
 8008578:	4770      	bx	lr

0800857a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800857a:	b480      	push	{r7}
 800857c:	b085      	sub	sp, #20
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008590:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	4313      	orrs	r3, r2
 8008598:	f043 0307 	orr.w	r3, r3, #7
 800859c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	609a      	str	r2, [r3, #8]
}
 80085a4:	bf00      	nop
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bc80      	pop	{r7}
 80085ac:	4770      	bx	lr

080085ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085ae:	b480      	push	{r7}
 80085b0:	b087      	sub	sp, #28
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	60f8      	str	r0, [r7, #12]
 80085b6:	60b9      	str	r1, [r7, #8]
 80085b8:	607a      	str	r2, [r7, #4]
 80085ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80085c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	021a      	lsls	r2, r3, #8
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	431a      	orrs	r2, r3
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	4313      	orrs	r3, r2
 80085da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	609a      	str	r2, [r3, #8]
}
 80085e2:	bf00      	nop
 80085e4:	371c      	adds	r7, #28
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bc80      	pop	{r7}
 80085ea:	4770      	bx	lr

080085ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b087      	sub	sp, #28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	f003 031f 	and.w	r3, r3, #31
 80085fe:	2201      	movs	r2, #1
 8008600:	fa02 f303 	lsl.w	r3, r2, r3
 8008604:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6a1a      	ldr	r2, [r3, #32]
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	43db      	mvns	r3, r3
 800860e:	401a      	ands	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6a1a      	ldr	r2, [r3, #32]
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f003 031f 	and.w	r3, r3, #31
 800861e:	6879      	ldr	r1, [r7, #4]
 8008620:	fa01 f303 	lsl.w	r3, r1, r3
 8008624:	431a      	orrs	r2, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	621a      	str	r2, [r3, #32]
}
 800862a:	bf00      	nop
 800862c:	371c      	adds	r7, #28
 800862e:	46bd      	mov	sp, r7
 8008630:	bc80      	pop	{r7}
 8008632:	4770      	bx	lr

08008634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008644:	2b01      	cmp	r3, #1
 8008646:	d101      	bne.n	800864c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008648:	2302      	movs	r3, #2
 800864a:	e046      	b.n	80086da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2202      	movs	r2, #2
 8008658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008672:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	4313      	orrs	r3, r2
 800867c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a16      	ldr	r2, [pc, #88]	@ (80086e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d00e      	beq.n	80086ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008698:	d009      	beq.n	80086ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a12      	ldr	r2, [pc, #72]	@ (80086e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d004      	beq.n	80086ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a10      	ldr	r2, [pc, #64]	@ (80086ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d10c      	bne.n	80086c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	4313      	orrs	r3, r2
 80086be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3714      	adds	r7, #20
 80086de:	46bd      	mov	sp, r7
 80086e0:	bc80      	pop	{r7}
 80086e2:	4770      	bx	lr
 80086e4:	40012c00 	.word	0x40012c00
 80086e8:	40000400 	.word	0x40000400
 80086ec:	40000800 	.word	0x40000800

080086f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80086fa:	2300      	movs	r3, #0
 80086fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008704:	2b01      	cmp	r3, #1
 8008706:	d101      	bne.n	800870c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008708:	2302      	movs	r3, #2
 800870a:	e03d      	b.n	8008788 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	4313      	orrs	r3, r2
 8008720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	4313      	orrs	r3, r2
 800872e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	4313      	orrs	r3, r2
 800873c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4313      	orrs	r3, r2
 800874a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	4313      	orrs	r3, r2
 8008758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	4313      	orrs	r3, r2
 8008766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	4313      	orrs	r3, r2
 8008774:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	bc80      	pop	{r7}
 8008790:	4770      	bx	lr
	...

08008794 <rand>:
 8008794:	4b16      	ldr	r3, [pc, #88]	@ (80087f0 <rand+0x5c>)
 8008796:	b510      	push	{r4, lr}
 8008798:	681c      	ldr	r4, [r3, #0]
 800879a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800879c:	b9b3      	cbnz	r3, 80087cc <rand+0x38>
 800879e:	2018      	movs	r0, #24
 80087a0:	f000 fa60 	bl	8008c64 <malloc>
 80087a4:	4602      	mov	r2, r0
 80087a6:	6320      	str	r0, [r4, #48]	@ 0x30
 80087a8:	b920      	cbnz	r0, 80087b4 <rand+0x20>
 80087aa:	2152      	movs	r1, #82	@ 0x52
 80087ac:	4b11      	ldr	r3, [pc, #68]	@ (80087f4 <rand+0x60>)
 80087ae:	4812      	ldr	r0, [pc, #72]	@ (80087f8 <rand+0x64>)
 80087b0:	f000 f9f2 	bl	8008b98 <__assert_func>
 80087b4:	4911      	ldr	r1, [pc, #68]	@ (80087fc <rand+0x68>)
 80087b6:	4b12      	ldr	r3, [pc, #72]	@ (8008800 <rand+0x6c>)
 80087b8:	e9c0 1300 	strd	r1, r3, [r0]
 80087bc:	4b11      	ldr	r3, [pc, #68]	@ (8008804 <rand+0x70>)
 80087be:	2100      	movs	r1, #0
 80087c0:	6083      	str	r3, [r0, #8]
 80087c2:	230b      	movs	r3, #11
 80087c4:	8183      	strh	r3, [r0, #12]
 80087c6:	2001      	movs	r0, #1
 80087c8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80087cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80087ce:	480e      	ldr	r0, [pc, #56]	@ (8008808 <rand+0x74>)
 80087d0:	690b      	ldr	r3, [r1, #16]
 80087d2:	694c      	ldr	r4, [r1, #20]
 80087d4:	4358      	muls	r0, r3
 80087d6:	4a0d      	ldr	r2, [pc, #52]	@ (800880c <rand+0x78>)
 80087d8:	fb02 0004 	mla	r0, r2, r4, r0
 80087dc:	fba3 3202 	umull	r3, r2, r3, r2
 80087e0:	3301      	adds	r3, #1
 80087e2:	eb40 0002 	adc.w	r0, r0, r2
 80087e6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80087ea:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80087ee:	bd10      	pop	{r4, pc}
 80087f0:	20000030 	.word	0x20000030
 80087f4:	0800b5a2 	.word	0x0800b5a2
 80087f8:	0800b5b9 	.word	0x0800b5b9
 80087fc:	abcd330e 	.word	0xabcd330e
 8008800:	e66d1234 	.word	0xe66d1234
 8008804:	0005deec 	.word	0x0005deec
 8008808:	5851f42d 	.word	0x5851f42d
 800880c:	4c957f2d 	.word	0x4c957f2d

08008810 <std>:
 8008810:	2300      	movs	r3, #0
 8008812:	b510      	push	{r4, lr}
 8008814:	4604      	mov	r4, r0
 8008816:	e9c0 3300 	strd	r3, r3, [r0]
 800881a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800881e:	6083      	str	r3, [r0, #8]
 8008820:	8181      	strh	r1, [r0, #12]
 8008822:	6643      	str	r3, [r0, #100]	@ 0x64
 8008824:	81c2      	strh	r2, [r0, #14]
 8008826:	6183      	str	r3, [r0, #24]
 8008828:	4619      	mov	r1, r3
 800882a:	2208      	movs	r2, #8
 800882c:	305c      	adds	r0, #92	@ 0x5c
 800882e:	f000 f916 	bl	8008a5e <memset>
 8008832:	4b0d      	ldr	r3, [pc, #52]	@ (8008868 <std+0x58>)
 8008834:	6224      	str	r4, [r4, #32]
 8008836:	6263      	str	r3, [r4, #36]	@ 0x24
 8008838:	4b0c      	ldr	r3, [pc, #48]	@ (800886c <std+0x5c>)
 800883a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800883c:	4b0c      	ldr	r3, [pc, #48]	@ (8008870 <std+0x60>)
 800883e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008840:	4b0c      	ldr	r3, [pc, #48]	@ (8008874 <std+0x64>)
 8008842:	6323      	str	r3, [r4, #48]	@ 0x30
 8008844:	4b0c      	ldr	r3, [pc, #48]	@ (8008878 <std+0x68>)
 8008846:	429c      	cmp	r4, r3
 8008848:	d006      	beq.n	8008858 <std+0x48>
 800884a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800884e:	4294      	cmp	r4, r2
 8008850:	d002      	beq.n	8008858 <std+0x48>
 8008852:	33d0      	adds	r3, #208	@ 0xd0
 8008854:	429c      	cmp	r4, r3
 8008856:	d105      	bne.n	8008864 <std+0x54>
 8008858:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800885c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008860:	f000 b988 	b.w	8008b74 <__retarget_lock_init_recursive>
 8008864:	bd10      	pop	{r4, pc}
 8008866:	bf00      	nop
 8008868:	080089d9 	.word	0x080089d9
 800886c:	080089fb 	.word	0x080089fb
 8008870:	08008a33 	.word	0x08008a33
 8008874:	08008a57 	.word	0x08008a57
 8008878:	20003fbc 	.word	0x20003fbc

0800887c <stdio_exit_handler>:
 800887c:	4a02      	ldr	r2, [pc, #8]	@ (8008888 <stdio_exit_handler+0xc>)
 800887e:	4903      	ldr	r1, [pc, #12]	@ (800888c <stdio_exit_handler+0x10>)
 8008880:	4803      	ldr	r0, [pc, #12]	@ (8008890 <stdio_exit_handler+0x14>)
 8008882:	f000 b869 	b.w	8008958 <_fwalk_sglue>
 8008886:	bf00      	nop
 8008888:	20000024 	.word	0x20000024
 800888c:	080094a1 	.word	0x080094a1
 8008890:	20000034 	.word	0x20000034

08008894 <cleanup_stdio>:
 8008894:	6841      	ldr	r1, [r0, #4]
 8008896:	4b0c      	ldr	r3, [pc, #48]	@ (80088c8 <cleanup_stdio+0x34>)
 8008898:	b510      	push	{r4, lr}
 800889a:	4299      	cmp	r1, r3
 800889c:	4604      	mov	r4, r0
 800889e:	d001      	beq.n	80088a4 <cleanup_stdio+0x10>
 80088a0:	f000 fdfe 	bl	80094a0 <_fflush_r>
 80088a4:	68a1      	ldr	r1, [r4, #8]
 80088a6:	4b09      	ldr	r3, [pc, #36]	@ (80088cc <cleanup_stdio+0x38>)
 80088a8:	4299      	cmp	r1, r3
 80088aa:	d002      	beq.n	80088b2 <cleanup_stdio+0x1e>
 80088ac:	4620      	mov	r0, r4
 80088ae:	f000 fdf7 	bl	80094a0 <_fflush_r>
 80088b2:	68e1      	ldr	r1, [r4, #12]
 80088b4:	4b06      	ldr	r3, [pc, #24]	@ (80088d0 <cleanup_stdio+0x3c>)
 80088b6:	4299      	cmp	r1, r3
 80088b8:	d004      	beq.n	80088c4 <cleanup_stdio+0x30>
 80088ba:	4620      	mov	r0, r4
 80088bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088c0:	f000 bdee 	b.w	80094a0 <_fflush_r>
 80088c4:	bd10      	pop	{r4, pc}
 80088c6:	bf00      	nop
 80088c8:	20003fbc 	.word	0x20003fbc
 80088cc:	20004024 	.word	0x20004024
 80088d0:	2000408c 	.word	0x2000408c

080088d4 <global_stdio_init.part.0>:
 80088d4:	b510      	push	{r4, lr}
 80088d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008904 <global_stdio_init.part.0+0x30>)
 80088d8:	4c0b      	ldr	r4, [pc, #44]	@ (8008908 <global_stdio_init.part.0+0x34>)
 80088da:	4a0c      	ldr	r2, [pc, #48]	@ (800890c <global_stdio_init.part.0+0x38>)
 80088dc:	4620      	mov	r0, r4
 80088de:	601a      	str	r2, [r3, #0]
 80088e0:	2104      	movs	r1, #4
 80088e2:	2200      	movs	r2, #0
 80088e4:	f7ff ff94 	bl	8008810 <std>
 80088e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80088ec:	2201      	movs	r2, #1
 80088ee:	2109      	movs	r1, #9
 80088f0:	f7ff ff8e 	bl	8008810 <std>
 80088f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80088f8:	2202      	movs	r2, #2
 80088fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088fe:	2112      	movs	r1, #18
 8008900:	f7ff bf86 	b.w	8008810 <std>
 8008904:	200040f4 	.word	0x200040f4
 8008908:	20003fbc 	.word	0x20003fbc
 800890c:	0800887d 	.word	0x0800887d

08008910 <__sfp_lock_acquire>:
 8008910:	4801      	ldr	r0, [pc, #4]	@ (8008918 <__sfp_lock_acquire+0x8>)
 8008912:	f000 b930 	b.w	8008b76 <__retarget_lock_acquire_recursive>
 8008916:	bf00      	nop
 8008918:	200040fd 	.word	0x200040fd

0800891c <__sfp_lock_release>:
 800891c:	4801      	ldr	r0, [pc, #4]	@ (8008924 <__sfp_lock_release+0x8>)
 800891e:	f000 b92b 	b.w	8008b78 <__retarget_lock_release_recursive>
 8008922:	bf00      	nop
 8008924:	200040fd 	.word	0x200040fd

08008928 <__sinit>:
 8008928:	b510      	push	{r4, lr}
 800892a:	4604      	mov	r4, r0
 800892c:	f7ff fff0 	bl	8008910 <__sfp_lock_acquire>
 8008930:	6a23      	ldr	r3, [r4, #32]
 8008932:	b11b      	cbz	r3, 800893c <__sinit+0x14>
 8008934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008938:	f7ff bff0 	b.w	800891c <__sfp_lock_release>
 800893c:	4b04      	ldr	r3, [pc, #16]	@ (8008950 <__sinit+0x28>)
 800893e:	6223      	str	r3, [r4, #32]
 8008940:	4b04      	ldr	r3, [pc, #16]	@ (8008954 <__sinit+0x2c>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1f5      	bne.n	8008934 <__sinit+0xc>
 8008948:	f7ff ffc4 	bl	80088d4 <global_stdio_init.part.0>
 800894c:	e7f2      	b.n	8008934 <__sinit+0xc>
 800894e:	bf00      	nop
 8008950:	08008895 	.word	0x08008895
 8008954:	200040f4 	.word	0x200040f4

08008958 <_fwalk_sglue>:
 8008958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800895c:	4607      	mov	r7, r0
 800895e:	4688      	mov	r8, r1
 8008960:	4614      	mov	r4, r2
 8008962:	2600      	movs	r6, #0
 8008964:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008968:	f1b9 0901 	subs.w	r9, r9, #1
 800896c:	d505      	bpl.n	800897a <_fwalk_sglue+0x22>
 800896e:	6824      	ldr	r4, [r4, #0]
 8008970:	2c00      	cmp	r4, #0
 8008972:	d1f7      	bne.n	8008964 <_fwalk_sglue+0xc>
 8008974:	4630      	mov	r0, r6
 8008976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800897a:	89ab      	ldrh	r3, [r5, #12]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d907      	bls.n	8008990 <_fwalk_sglue+0x38>
 8008980:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008984:	3301      	adds	r3, #1
 8008986:	d003      	beq.n	8008990 <_fwalk_sglue+0x38>
 8008988:	4629      	mov	r1, r5
 800898a:	4638      	mov	r0, r7
 800898c:	47c0      	blx	r8
 800898e:	4306      	orrs	r6, r0
 8008990:	3568      	adds	r5, #104	@ 0x68
 8008992:	e7e9      	b.n	8008968 <_fwalk_sglue+0x10>

08008994 <siprintf>:
 8008994:	b40e      	push	{r1, r2, r3}
 8008996:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800899a:	b510      	push	{r4, lr}
 800899c:	2400      	movs	r4, #0
 800899e:	b09d      	sub	sp, #116	@ 0x74
 80089a0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80089a2:	9002      	str	r0, [sp, #8]
 80089a4:	9006      	str	r0, [sp, #24]
 80089a6:	9107      	str	r1, [sp, #28]
 80089a8:	9104      	str	r1, [sp, #16]
 80089aa:	4809      	ldr	r0, [pc, #36]	@ (80089d0 <siprintf+0x3c>)
 80089ac:	4909      	ldr	r1, [pc, #36]	@ (80089d4 <siprintf+0x40>)
 80089ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80089b2:	9105      	str	r1, [sp, #20]
 80089b4:	6800      	ldr	r0, [r0, #0]
 80089b6:	a902      	add	r1, sp, #8
 80089b8:	9301      	str	r3, [sp, #4]
 80089ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 80089bc:	f000 fa64 	bl	8008e88 <_svfiprintf_r>
 80089c0:	9b02      	ldr	r3, [sp, #8]
 80089c2:	701c      	strb	r4, [r3, #0]
 80089c4:	b01d      	add	sp, #116	@ 0x74
 80089c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089ca:	b003      	add	sp, #12
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	20000030 	.word	0x20000030
 80089d4:	ffff0208 	.word	0xffff0208

080089d8 <__sread>:
 80089d8:	b510      	push	{r4, lr}
 80089da:	460c      	mov	r4, r1
 80089dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e0:	f000 f87a 	bl	8008ad8 <_read_r>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	bfab      	itete	ge
 80089e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80089ea:	89a3      	ldrhlt	r3, [r4, #12]
 80089ec:	181b      	addge	r3, r3, r0
 80089ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80089f2:	bfac      	ite	ge
 80089f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80089f6:	81a3      	strhlt	r3, [r4, #12]
 80089f8:	bd10      	pop	{r4, pc}

080089fa <__swrite>:
 80089fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089fe:	461f      	mov	r7, r3
 8008a00:	898b      	ldrh	r3, [r1, #12]
 8008a02:	4605      	mov	r5, r0
 8008a04:	05db      	lsls	r3, r3, #23
 8008a06:	460c      	mov	r4, r1
 8008a08:	4616      	mov	r6, r2
 8008a0a:	d505      	bpl.n	8008a18 <__swrite+0x1e>
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a14:	f000 f84e 	bl	8008ab4 <_lseek_r>
 8008a18:	89a3      	ldrh	r3, [r4, #12]
 8008a1a:	4632      	mov	r2, r6
 8008a1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a20:	81a3      	strh	r3, [r4, #12]
 8008a22:	4628      	mov	r0, r5
 8008a24:	463b      	mov	r3, r7
 8008a26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a2e:	f000 b865 	b.w	8008afc <_write_r>

08008a32 <__sseek>:
 8008a32:	b510      	push	{r4, lr}
 8008a34:	460c      	mov	r4, r1
 8008a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a3a:	f000 f83b 	bl	8008ab4 <_lseek_r>
 8008a3e:	1c43      	adds	r3, r0, #1
 8008a40:	89a3      	ldrh	r3, [r4, #12]
 8008a42:	bf15      	itete	ne
 8008a44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008a46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008a4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008a4e:	81a3      	strheq	r3, [r4, #12]
 8008a50:	bf18      	it	ne
 8008a52:	81a3      	strhne	r3, [r4, #12]
 8008a54:	bd10      	pop	{r4, pc}

08008a56 <__sclose>:
 8008a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a5a:	f000 b81b 	b.w	8008a94 <_close_r>

08008a5e <memset>:
 8008a5e:	4603      	mov	r3, r0
 8008a60:	4402      	add	r2, r0
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d100      	bne.n	8008a68 <memset+0xa>
 8008a66:	4770      	bx	lr
 8008a68:	f803 1b01 	strb.w	r1, [r3], #1
 8008a6c:	e7f9      	b.n	8008a62 <memset+0x4>

08008a6e <strncpy>:
 8008a6e:	4603      	mov	r3, r0
 8008a70:	b510      	push	{r4, lr}
 8008a72:	3901      	subs	r1, #1
 8008a74:	b132      	cbz	r2, 8008a84 <strncpy+0x16>
 8008a76:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008a7a:	3a01      	subs	r2, #1
 8008a7c:	f803 4b01 	strb.w	r4, [r3], #1
 8008a80:	2c00      	cmp	r4, #0
 8008a82:	d1f7      	bne.n	8008a74 <strncpy+0x6>
 8008a84:	2100      	movs	r1, #0
 8008a86:	441a      	add	r2, r3
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d100      	bne.n	8008a8e <strncpy+0x20>
 8008a8c:	bd10      	pop	{r4, pc}
 8008a8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a92:	e7f9      	b.n	8008a88 <strncpy+0x1a>

08008a94 <_close_r>:
 8008a94:	b538      	push	{r3, r4, r5, lr}
 8008a96:	2300      	movs	r3, #0
 8008a98:	4d05      	ldr	r5, [pc, #20]	@ (8008ab0 <_close_r+0x1c>)
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	4608      	mov	r0, r1
 8008a9e:	602b      	str	r3, [r5, #0]
 8008aa0:	f7fc ff23 	bl	80058ea <_close>
 8008aa4:	1c43      	adds	r3, r0, #1
 8008aa6:	d102      	bne.n	8008aae <_close_r+0x1a>
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	b103      	cbz	r3, 8008aae <_close_r+0x1a>
 8008aac:	6023      	str	r3, [r4, #0]
 8008aae:	bd38      	pop	{r3, r4, r5, pc}
 8008ab0:	200040f8 	.word	0x200040f8

08008ab4 <_lseek_r>:
 8008ab4:	b538      	push	{r3, r4, r5, lr}
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	4608      	mov	r0, r1
 8008aba:	4611      	mov	r1, r2
 8008abc:	2200      	movs	r2, #0
 8008abe:	4d05      	ldr	r5, [pc, #20]	@ (8008ad4 <_lseek_r+0x20>)
 8008ac0:	602a      	str	r2, [r5, #0]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	f7fc ff35 	bl	8005932 <_lseek>
 8008ac8:	1c43      	adds	r3, r0, #1
 8008aca:	d102      	bne.n	8008ad2 <_lseek_r+0x1e>
 8008acc:	682b      	ldr	r3, [r5, #0]
 8008ace:	b103      	cbz	r3, 8008ad2 <_lseek_r+0x1e>
 8008ad0:	6023      	str	r3, [r4, #0]
 8008ad2:	bd38      	pop	{r3, r4, r5, pc}
 8008ad4:	200040f8 	.word	0x200040f8

08008ad8 <_read_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	4604      	mov	r4, r0
 8008adc:	4608      	mov	r0, r1
 8008ade:	4611      	mov	r1, r2
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	4d05      	ldr	r5, [pc, #20]	@ (8008af8 <_read_r+0x20>)
 8008ae4:	602a      	str	r2, [r5, #0]
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	f7fc fec6 	bl	8005878 <_read>
 8008aec:	1c43      	adds	r3, r0, #1
 8008aee:	d102      	bne.n	8008af6 <_read_r+0x1e>
 8008af0:	682b      	ldr	r3, [r5, #0]
 8008af2:	b103      	cbz	r3, 8008af6 <_read_r+0x1e>
 8008af4:	6023      	str	r3, [r4, #0]
 8008af6:	bd38      	pop	{r3, r4, r5, pc}
 8008af8:	200040f8 	.word	0x200040f8

08008afc <_write_r>:
 8008afc:	b538      	push	{r3, r4, r5, lr}
 8008afe:	4604      	mov	r4, r0
 8008b00:	4608      	mov	r0, r1
 8008b02:	4611      	mov	r1, r2
 8008b04:	2200      	movs	r2, #0
 8008b06:	4d05      	ldr	r5, [pc, #20]	@ (8008b1c <_write_r+0x20>)
 8008b08:	602a      	str	r2, [r5, #0]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	f7fc fed1 	bl	80058b2 <_write>
 8008b10:	1c43      	adds	r3, r0, #1
 8008b12:	d102      	bne.n	8008b1a <_write_r+0x1e>
 8008b14:	682b      	ldr	r3, [r5, #0]
 8008b16:	b103      	cbz	r3, 8008b1a <_write_r+0x1e>
 8008b18:	6023      	str	r3, [r4, #0]
 8008b1a:	bd38      	pop	{r3, r4, r5, pc}
 8008b1c:	200040f8 	.word	0x200040f8

08008b20 <__errno>:
 8008b20:	4b01      	ldr	r3, [pc, #4]	@ (8008b28 <__errno+0x8>)
 8008b22:	6818      	ldr	r0, [r3, #0]
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	20000030 	.word	0x20000030

08008b2c <__libc_init_array>:
 8008b2c:	b570      	push	{r4, r5, r6, lr}
 8008b2e:	2600      	movs	r6, #0
 8008b30:	4d0c      	ldr	r5, [pc, #48]	@ (8008b64 <__libc_init_array+0x38>)
 8008b32:	4c0d      	ldr	r4, [pc, #52]	@ (8008b68 <__libc_init_array+0x3c>)
 8008b34:	1b64      	subs	r4, r4, r5
 8008b36:	10a4      	asrs	r4, r4, #2
 8008b38:	42a6      	cmp	r6, r4
 8008b3a:	d109      	bne.n	8008b50 <__libc_init_array+0x24>
 8008b3c:	f002 fa56 	bl	800afec <_init>
 8008b40:	2600      	movs	r6, #0
 8008b42:	4d0a      	ldr	r5, [pc, #40]	@ (8008b6c <__libc_init_array+0x40>)
 8008b44:	4c0a      	ldr	r4, [pc, #40]	@ (8008b70 <__libc_init_array+0x44>)
 8008b46:	1b64      	subs	r4, r4, r5
 8008b48:	10a4      	asrs	r4, r4, #2
 8008b4a:	42a6      	cmp	r6, r4
 8008b4c:	d105      	bne.n	8008b5a <__libc_init_array+0x2e>
 8008b4e:	bd70      	pop	{r4, r5, r6, pc}
 8008b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b54:	4798      	blx	r3
 8008b56:	3601      	adds	r6, #1
 8008b58:	e7ee      	b.n	8008b38 <__libc_init_array+0xc>
 8008b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b5e:	4798      	blx	r3
 8008b60:	3601      	adds	r6, #1
 8008b62:	e7f2      	b.n	8008b4a <__libc_init_array+0x1e>
 8008b64:	0800ba78 	.word	0x0800ba78
 8008b68:	0800ba78 	.word	0x0800ba78
 8008b6c:	0800ba78 	.word	0x0800ba78
 8008b70:	0800ba7c 	.word	0x0800ba7c

08008b74 <__retarget_lock_init_recursive>:
 8008b74:	4770      	bx	lr

08008b76 <__retarget_lock_acquire_recursive>:
 8008b76:	4770      	bx	lr

08008b78 <__retarget_lock_release_recursive>:
 8008b78:	4770      	bx	lr

08008b7a <memcpy>:
 8008b7a:	440a      	add	r2, r1
 8008b7c:	4291      	cmp	r1, r2
 8008b7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b82:	d100      	bne.n	8008b86 <memcpy+0xc>
 8008b84:	4770      	bx	lr
 8008b86:	b510      	push	{r4, lr}
 8008b88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b8c:	4291      	cmp	r1, r2
 8008b8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b92:	d1f9      	bne.n	8008b88 <memcpy+0xe>
 8008b94:	bd10      	pop	{r4, pc}
	...

08008b98 <__assert_func>:
 8008b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b9a:	4614      	mov	r4, r2
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	4b09      	ldr	r3, [pc, #36]	@ (8008bc4 <__assert_func+0x2c>)
 8008ba0:	4605      	mov	r5, r0
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68d8      	ldr	r0, [r3, #12]
 8008ba6:	b14c      	cbz	r4, 8008bbc <__assert_func+0x24>
 8008ba8:	4b07      	ldr	r3, [pc, #28]	@ (8008bc8 <__assert_func+0x30>)
 8008baa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bae:	9100      	str	r1, [sp, #0]
 8008bb0:	462b      	mov	r3, r5
 8008bb2:	4906      	ldr	r1, [pc, #24]	@ (8008bcc <__assert_func+0x34>)
 8008bb4:	f000 fc9c 	bl	80094f0 <fiprintf>
 8008bb8:	f000 fce4 	bl	8009584 <abort>
 8008bbc:	4b04      	ldr	r3, [pc, #16]	@ (8008bd0 <__assert_func+0x38>)
 8008bbe:	461c      	mov	r4, r3
 8008bc0:	e7f3      	b.n	8008baa <__assert_func+0x12>
 8008bc2:	bf00      	nop
 8008bc4:	20000030 	.word	0x20000030
 8008bc8:	0800b611 	.word	0x0800b611
 8008bcc:	0800b61e 	.word	0x0800b61e
 8008bd0:	0800b64c 	.word	0x0800b64c

08008bd4 <_free_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	2900      	cmp	r1, #0
 8008bda:	d040      	beq.n	8008c5e <_free_r+0x8a>
 8008bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008be0:	1f0c      	subs	r4, r1, #4
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	bfb8      	it	lt
 8008be6:	18e4      	addlt	r4, r4, r3
 8008be8:	f000 f8e6 	bl	8008db8 <__malloc_lock>
 8008bec:	4a1c      	ldr	r2, [pc, #112]	@ (8008c60 <_free_r+0x8c>)
 8008bee:	6813      	ldr	r3, [r2, #0]
 8008bf0:	b933      	cbnz	r3, 8008c00 <_free_r+0x2c>
 8008bf2:	6063      	str	r3, [r4, #4]
 8008bf4:	6014      	str	r4, [r2, #0]
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bfc:	f000 b8e2 	b.w	8008dc4 <__malloc_unlock>
 8008c00:	42a3      	cmp	r3, r4
 8008c02:	d908      	bls.n	8008c16 <_free_r+0x42>
 8008c04:	6820      	ldr	r0, [r4, #0]
 8008c06:	1821      	adds	r1, r4, r0
 8008c08:	428b      	cmp	r3, r1
 8008c0a:	bf01      	itttt	eq
 8008c0c:	6819      	ldreq	r1, [r3, #0]
 8008c0e:	685b      	ldreq	r3, [r3, #4]
 8008c10:	1809      	addeq	r1, r1, r0
 8008c12:	6021      	streq	r1, [r4, #0]
 8008c14:	e7ed      	b.n	8008bf2 <_free_r+0x1e>
 8008c16:	461a      	mov	r2, r3
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	b10b      	cbz	r3, 8008c20 <_free_r+0x4c>
 8008c1c:	42a3      	cmp	r3, r4
 8008c1e:	d9fa      	bls.n	8008c16 <_free_r+0x42>
 8008c20:	6811      	ldr	r1, [r2, #0]
 8008c22:	1850      	adds	r0, r2, r1
 8008c24:	42a0      	cmp	r0, r4
 8008c26:	d10b      	bne.n	8008c40 <_free_r+0x6c>
 8008c28:	6820      	ldr	r0, [r4, #0]
 8008c2a:	4401      	add	r1, r0
 8008c2c:	1850      	adds	r0, r2, r1
 8008c2e:	4283      	cmp	r3, r0
 8008c30:	6011      	str	r1, [r2, #0]
 8008c32:	d1e0      	bne.n	8008bf6 <_free_r+0x22>
 8008c34:	6818      	ldr	r0, [r3, #0]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	4408      	add	r0, r1
 8008c3a:	6010      	str	r0, [r2, #0]
 8008c3c:	6053      	str	r3, [r2, #4]
 8008c3e:	e7da      	b.n	8008bf6 <_free_r+0x22>
 8008c40:	d902      	bls.n	8008c48 <_free_r+0x74>
 8008c42:	230c      	movs	r3, #12
 8008c44:	602b      	str	r3, [r5, #0]
 8008c46:	e7d6      	b.n	8008bf6 <_free_r+0x22>
 8008c48:	6820      	ldr	r0, [r4, #0]
 8008c4a:	1821      	adds	r1, r4, r0
 8008c4c:	428b      	cmp	r3, r1
 8008c4e:	bf01      	itttt	eq
 8008c50:	6819      	ldreq	r1, [r3, #0]
 8008c52:	685b      	ldreq	r3, [r3, #4]
 8008c54:	1809      	addeq	r1, r1, r0
 8008c56:	6021      	streq	r1, [r4, #0]
 8008c58:	6063      	str	r3, [r4, #4]
 8008c5a:	6054      	str	r4, [r2, #4]
 8008c5c:	e7cb      	b.n	8008bf6 <_free_r+0x22>
 8008c5e:	bd38      	pop	{r3, r4, r5, pc}
 8008c60:	20004104 	.word	0x20004104

08008c64 <malloc>:
 8008c64:	4b02      	ldr	r3, [pc, #8]	@ (8008c70 <malloc+0xc>)
 8008c66:	4601      	mov	r1, r0
 8008c68:	6818      	ldr	r0, [r3, #0]
 8008c6a:	f000 b825 	b.w	8008cb8 <_malloc_r>
 8008c6e:	bf00      	nop
 8008c70:	20000030 	.word	0x20000030

08008c74 <sbrk_aligned>:
 8008c74:	b570      	push	{r4, r5, r6, lr}
 8008c76:	4e0f      	ldr	r6, [pc, #60]	@ (8008cb4 <sbrk_aligned+0x40>)
 8008c78:	460c      	mov	r4, r1
 8008c7a:	6831      	ldr	r1, [r6, #0]
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	b911      	cbnz	r1, 8008c86 <sbrk_aligned+0x12>
 8008c80:	f000 fc62 	bl	8009548 <_sbrk_r>
 8008c84:	6030      	str	r0, [r6, #0]
 8008c86:	4621      	mov	r1, r4
 8008c88:	4628      	mov	r0, r5
 8008c8a:	f000 fc5d 	bl	8009548 <_sbrk_r>
 8008c8e:	1c43      	adds	r3, r0, #1
 8008c90:	d103      	bne.n	8008c9a <sbrk_aligned+0x26>
 8008c92:	f04f 34ff 	mov.w	r4, #4294967295
 8008c96:	4620      	mov	r0, r4
 8008c98:	bd70      	pop	{r4, r5, r6, pc}
 8008c9a:	1cc4      	adds	r4, r0, #3
 8008c9c:	f024 0403 	bic.w	r4, r4, #3
 8008ca0:	42a0      	cmp	r0, r4
 8008ca2:	d0f8      	beq.n	8008c96 <sbrk_aligned+0x22>
 8008ca4:	1a21      	subs	r1, r4, r0
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	f000 fc4e 	bl	8009548 <_sbrk_r>
 8008cac:	3001      	adds	r0, #1
 8008cae:	d1f2      	bne.n	8008c96 <sbrk_aligned+0x22>
 8008cb0:	e7ef      	b.n	8008c92 <sbrk_aligned+0x1e>
 8008cb2:	bf00      	nop
 8008cb4:	20004100 	.word	0x20004100

08008cb8 <_malloc_r>:
 8008cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cbc:	1ccd      	adds	r5, r1, #3
 8008cbe:	f025 0503 	bic.w	r5, r5, #3
 8008cc2:	3508      	adds	r5, #8
 8008cc4:	2d0c      	cmp	r5, #12
 8008cc6:	bf38      	it	cc
 8008cc8:	250c      	movcc	r5, #12
 8008cca:	2d00      	cmp	r5, #0
 8008ccc:	4606      	mov	r6, r0
 8008cce:	db01      	blt.n	8008cd4 <_malloc_r+0x1c>
 8008cd0:	42a9      	cmp	r1, r5
 8008cd2:	d904      	bls.n	8008cde <_malloc_r+0x26>
 8008cd4:	230c      	movs	r3, #12
 8008cd6:	6033      	str	r3, [r6, #0]
 8008cd8:	2000      	movs	r0, #0
 8008cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008db4 <_malloc_r+0xfc>
 8008ce2:	f000 f869 	bl	8008db8 <__malloc_lock>
 8008ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8008cea:	461c      	mov	r4, r3
 8008cec:	bb44      	cbnz	r4, 8008d40 <_malloc_r+0x88>
 8008cee:	4629      	mov	r1, r5
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	f7ff ffbf 	bl	8008c74 <sbrk_aligned>
 8008cf6:	1c43      	adds	r3, r0, #1
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	d158      	bne.n	8008dae <_malloc_r+0xf6>
 8008cfc:	f8d8 4000 	ldr.w	r4, [r8]
 8008d00:	4627      	mov	r7, r4
 8008d02:	2f00      	cmp	r7, #0
 8008d04:	d143      	bne.n	8008d8e <_malloc_r+0xd6>
 8008d06:	2c00      	cmp	r4, #0
 8008d08:	d04b      	beq.n	8008da2 <_malloc_r+0xea>
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	4639      	mov	r1, r7
 8008d0e:	4630      	mov	r0, r6
 8008d10:	eb04 0903 	add.w	r9, r4, r3
 8008d14:	f000 fc18 	bl	8009548 <_sbrk_r>
 8008d18:	4581      	cmp	r9, r0
 8008d1a:	d142      	bne.n	8008da2 <_malloc_r+0xea>
 8008d1c:	6821      	ldr	r1, [r4, #0]
 8008d1e:	4630      	mov	r0, r6
 8008d20:	1a6d      	subs	r5, r5, r1
 8008d22:	4629      	mov	r1, r5
 8008d24:	f7ff ffa6 	bl	8008c74 <sbrk_aligned>
 8008d28:	3001      	adds	r0, #1
 8008d2a:	d03a      	beq.n	8008da2 <_malloc_r+0xea>
 8008d2c:	6823      	ldr	r3, [r4, #0]
 8008d2e:	442b      	add	r3, r5
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	f8d8 3000 	ldr.w	r3, [r8]
 8008d36:	685a      	ldr	r2, [r3, #4]
 8008d38:	bb62      	cbnz	r2, 8008d94 <_malloc_r+0xdc>
 8008d3a:	f8c8 7000 	str.w	r7, [r8]
 8008d3e:	e00f      	b.n	8008d60 <_malloc_r+0xa8>
 8008d40:	6822      	ldr	r2, [r4, #0]
 8008d42:	1b52      	subs	r2, r2, r5
 8008d44:	d420      	bmi.n	8008d88 <_malloc_r+0xd0>
 8008d46:	2a0b      	cmp	r2, #11
 8008d48:	d917      	bls.n	8008d7a <_malloc_r+0xc2>
 8008d4a:	1961      	adds	r1, r4, r5
 8008d4c:	42a3      	cmp	r3, r4
 8008d4e:	6025      	str	r5, [r4, #0]
 8008d50:	bf18      	it	ne
 8008d52:	6059      	strne	r1, [r3, #4]
 8008d54:	6863      	ldr	r3, [r4, #4]
 8008d56:	bf08      	it	eq
 8008d58:	f8c8 1000 	streq.w	r1, [r8]
 8008d5c:	5162      	str	r2, [r4, r5]
 8008d5e:	604b      	str	r3, [r1, #4]
 8008d60:	4630      	mov	r0, r6
 8008d62:	f000 f82f 	bl	8008dc4 <__malloc_unlock>
 8008d66:	f104 000b 	add.w	r0, r4, #11
 8008d6a:	1d23      	adds	r3, r4, #4
 8008d6c:	f020 0007 	bic.w	r0, r0, #7
 8008d70:	1ac2      	subs	r2, r0, r3
 8008d72:	bf1c      	itt	ne
 8008d74:	1a1b      	subne	r3, r3, r0
 8008d76:	50a3      	strne	r3, [r4, r2]
 8008d78:	e7af      	b.n	8008cda <_malloc_r+0x22>
 8008d7a:	6862      	ldr	r2, [r4, #4]
 8008d7c:	42a3      	cmp	r3, r4
 8008d7e:	bf0c      	ite	eq
 8008d80:	f8c8 2000 	streq.w	r2, [r8]
 8008d84:	605a      	strne	r2, [r3, #4]
 8008d86:	e7eb      	b.n	8008d60 <_malloc_r+0xa8>
 8008d88:	4623      	mov	r3, r4
 8008d8a:	6864      	ldr	r4, [r4, #4]
 8008d8c:	e7ae      	b.n	8008cec <_malloc_r+0x34>
 8008d8e:	463c      	mov	r4, r7
 8008d90:	687f      	ldr	r7, [r7, #4]
 8008d92:	e7b6      	b.n	8008d02 <_malloc_r+0x4a>
 8008d94:	461a      	mov	r2, r3
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	42a3      	cmp	r3, r4
 8008d9a:	d1fb      	bne.n	8008d94 <_malloc_r+0xdc>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	6053      	str	r3, [r2, #4]
 8008da0:	e7de      	b.n	8008d60 <_malloc_r+0xa8>
 8008da2:	230c      	movs	r3, #12
 8008da4:	4630      	mov	r0, r6
 8008da6:	6033      	str	r3, [r6, #0]
 8008da8:	f000 f80c 	bl	8008dc4 <__malloc_unlock>
 8008dac:	e794      	b.n	8008cd8 <_malloc_r+0x20>
 8008dae:	6005      	str	r5, [r0, #0]
 8008db0:	e7d6      	b.n	8008d60 <_malloc_r+0xa8>
 8008db2:	bf00      	nop
 8008db4:	20004104 	.word	0x20004104

08008db8 <__malloc_lock>:
 8008db8:	4801      	ldr	r0, [pc, #4]	@ (8008dc0 <__malloc_lock+0x8>)
 8008dba:	f7ff bedc 	b.w	8008b76 <__retarget_lock_acquire_recursive>
 8008dbe:	bf00      	nop
 8008dc0:	200040fc 	.word	0x200040fc

08008dc4 <__malloc_unlock>:
 8008dc4:	4801      	ldr	r0, [pc, #4]	@ (8008dcc <__malloc_unlock+0x8>)
 8008dc6:	f7ff bed7 	b.w	8008b78 <__retarget_lock_release_recursive>
 8008dca:	bf00      	nop
 8008dcc:	200040fc 	.word	0x200040fc

08008dd0 <__ssputs_r>:
 8008dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd4:	461f      	mov	r7, r3
 8008dd6:	688e      	ldr	r6, [r1, #8]
 8008dd8:	4682      	mov	sl, r0
 8008dda:	42be      	cmp	r6, r7
 8008ddc:	460c      	mov	r4, r1
 8008dde:	4690      	mov	r8, r2
 8008de0:	680b      	ldr	r3, [r1, #0]
 8008de2:	d82d      	bhi.n	8008e40 <__ssputs_r+0x70>
 8008de4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008de8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008dec:	d026      	beq.n	8008e3c <__ssputs_r+0x6c>
 8008dee:	6965      	ldr	r5, [r4, #20]
 8008df0:	6909      	ldr	r1, [r1, #16]
 8008df2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008df6:	eba3 0901 	sub.w	r9, r3, r1
 8008dfa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dfe:	1c7b      	adds	r3, r7, #1
 8008e00:	444b      	add	r3, r9
 8008e02:	106d      	asrs	r5, r5, #1
 8008e04:	429d      	cmp	r5, r3
 8008e06:	bf38      	it	cc
 8008e08:	461d      	movcc	r5, r3
 8008e0a:	0553      	lsls	r3, r2, #21
 8008e0c:	d527      	bpl.n	8008e5e <__ssputs_r+0x8e>
 8008e0e:	4629      	mov	r1, r5
 8008e10:	f7ff ff52 	bl	8008cb8 <_malloc_r>
 8008e14:	4606      	mov	r6, r0
 8008e16:	b360      	cbz	r0, 8008e72 <__ssputs_r+0xa2>
 8008e18:	464a      	mov	r2, r9
 8008e1a:	6921      	ldr	r1, [r4, #16]
 8008e1c:	f7ff fead 	bl	8008b7a <memcpy>
 8008e20:	89a3      	ldrh	r3, [r4, #12]
 8008e22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e2a:	81a3      	strh	r3, [r4, #12]
 8008e2c:	6126      	str	r6, [r4, #16]
 8008e2e:	444e      	add	r6, r9
 8008e30:	6026      	str	r6, [r4, #0]
 8008e32:	463e      	mov	r6, r7
 8008e34:	6165      	str	r5, [r4, #20]
 8008e36:	eba5 0509 	sub.w	r5, r5, r9
 8008e3a:	60a5      	str	r5, [r4, #8]
 8008e3c:	42be      	cmp	r6, r7
 8008e3e:	d900      	bls.n	8008e42 <__ssputs_r+0x72>
 8008e40:	463e      	mov	r6, r7
 8008e42:	4632      	mov	r2, r6
 8008e44:	4641      	mov	r1, r8
 8008e46:	6820      	ldr	r0, [r4, #0]
 8008e48:	f000 fb64 	bl	8009514 <memmove>
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	68a3      	ldr	r3, [r4, #8]
 8008e50:	1b9b      	subs	r3, r3, r6
 8008e52:	60a3      	str	r3, [r4, #8]
 8008e54:	6823      	ldr	r3, [r4, #0]
 8008e56:	4433      	add	r3, r6
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e5e:	462a      	mov	r2, r5
 8008e60:	f000 fb97 	bl	8009592 <_realloc_r>
 8008e64:	4606      	mov	r6, r0
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d1e0      	bne.n	8008e2c <__ssputs_r+0x5c>
 8008e6a:	4650      	mov	r0, sl
 8008e6c:	6921      	ldr	r1, [r4, #16]
 8008e6e:	f7ff feb1 	bl	8008bd4 <_free_r>
 8008e72:	230c      	movs	r3, #12
 8008e74:	f8ca 3000 	str.w	r3, [sl]
 8008e78:	89a3      	ldrh	r3, [r4, #12]
 8008e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e82:	81a3      	strh	r3, [r4, #12]
 8008e84:	e7e9      	b.n	8008e5a <__ssputs_r+0x8a>
	...

08008e88 <_svfiprintf_r>:
 8008e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8c:	4698      	mov	r8, r3
 8008e8e:	898b      	ldrh	r3, [r1, #12]
 8008e90:	4607      	mov	r7, r0
 8008e92:	061b      	lsls	r3, r3, #24
 8008e94:	460d      	mov	r5, r1
 8008e96:	4614      	mov	r4, r2
 8008e98:	b09d      	sub	sp, #116	@ 0x74
 8008e9a:	d510      	bpl.n	8008ebe <_svfiprintf_r+0x36>
 8008e9c:	690b      	ldr	r3, [r1, #16]
 8008e9e:	b973      	cbnz	r3, 8008ebe <_svfiprintf_r+0x36>
 8008ea0:	2140      	movs	r1, #64	@ 0x40
 8008ea2:	f7ff ff09 	bl	8008cb8 <_malloc_r>
 8008ea6:	6028      	str	r0, [r5, #0]
 8008ea8:	6128      	str	r0, [r5, #16]
 8008eaa:	b930      	cbnz	r0, 8008eba <_svfiprintf_r+0x32>
 8008eac:	230c      	movs	r3, #12
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb4:	b01d      	add	sp, #116	@ 0x74
 8008eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eba:	2340      	movs	r3, #64	@ 0x40
 8008ebc:	616b      	str	r3, [r5, #20]
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ec2:	2320      	movs	r3, #32
 8008ec4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ec8:	2330      	movs	r3, #48	@ 0x30
 8008eca:	f04f 0901 	mov.w	r9, #1
 8008ece:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ed2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800906c <_svfiprintf_r+0x1e4>
 8008ed6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008eda:	4623      	mov	r3, r4
 8008edc:	469a      	mov	sl, r3
 8008ede:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ee2:	b10a      	cbz	r2, 8008ee8 <_svfiprintf_r+0x60>
 8008ee4:	2a25      	cmp	r2, #37	@ 0x25
 8008ee6:	d1f9      	bne.n	8008edc <_svfiprintf_r+0x54>
 8008ee8:	ebba 0b04 	subs.w	fp, sl, r4
 8008eec:	d00b      	beq.n	8008f06 <_svfiprintf_r+0x7e>
 8008eee:	465b      	mov	r3, fp
 8008ef0:	4622      	mov	r2, r4
 8008ef2:	4629      	mov	r1, r5
 8008ef4:	4638      	mov	r0, r7
 8008ef6:	f7ff ff6b 	bl	8008dd0 <__ssputs_r>
 8008efa:	3001      	adds	r0, #1
 8008efc:	f000 80a7 	beq.w	800904e <_svfiprintf_r+0x1c6>
 8008f00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f02:	445a      	add	r2, fp
 8008f04:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f06:	f89a 3000 	ldrb.w	r3, [sl]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f000 809f 	beq.w	800904e <_svfiprintf_r+0x1c6>
 8008f10:	2300      	movs	r3, #0
 8008f12:	f04f 32ff 	mov.w	r2, #4294967295
 8008f16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f1a:	f10a 0a01 	add.w	sl, sl, #1
 8008f1e:	9304      	str	r3, [sp, #16]
 8008f20:	9307      	str	r3, [sp, #28]
 8008f22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f26:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f28:	4654      	mov	r4, sl
 8008f2a:	2205      	movs	r2, #5
 8008f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f30:	484e      	ldr	r0, [pc, #312]	@ (800906c <_svfiprintf_r+0x1e4>)
 8008f32:	f000 fb19 	bl	8009568 <memchr>
 8008f36:	9a04      	ldr	r2, [sp, #16]
 8008f38:	b9d8      	cbnz	r0, 8008f72 <_svfiprintf_r+0xea>
 8008f3a:	06d0      	lsls	r0, r2, #27
 8008f3c:	bf44      	itt	mi
 8008f3e:	2320      	movmi	r3, #32
 8008f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f44:	0711      	lsls	r1, r2, #28
 8008f46:	bf44      	itt	mi
 8008f48:	232b      	movmi	r3, #43	@ 0x2b
 8008f4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f4e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f52:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f54:	d015      	beq.n	8008f82 <_svfiprintf_r+0xfa>
 8008f56:	4654      	mov	r4, sl
 8008f58:	2000      	movs	r0, #0
 8008f5a:	f04f 0c0a 	mov.w	ip, #10
 8008f5e:	9a07      	ldr	r2, [sp, #28]
 8008f60:	4621      	mov	r1, r4
 8008f62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f66:	3b30      	subs	r3, #48	@ 0x30
 8008f68:	2b09      	cmp	r3, #9
 8008f6a:	d94b      	bls.n	8009004 <_svfiprintf_r+0x17c>
 8008f6c:	b1b0      	cbz	r0, 8008f9c <_svfiprintf_r+0x114>
 8008f6e:	9207      	str	r2, [sp, #28]
 8008f70:	e014      	b.n	8008f9c <_svfiprintf_r+0x114>
 8008f72:	eba0 0308 	sub.w	r3, r0, r8
 8008f76:	fa09 f303 	lsl.w	r3, r9, r3
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	46a2      	mov	sl, r4
 8008f7e:	9304      	str	r3, [sp, #16]
 8008f80:	e7d2      	b.n	8008f28 <_svfiprintf_r+0xa0>
 8008f82:	9b03      	ldr	r3, [sp, #12]
 8008f84:	1d19      	adds	r1, r3, #4
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	9103      	str	r1, [sp, #12]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	bfbb      	ittet	lt
 8008f8e:	425b      	neglt	r3, r3
 8008f90:	f042 0202 	orrlt.w	r2, r2, #2
 8008f94:	9307      	strge	r3, [sp, #28]
 8008f96:	9307      	strlt	r3, [sp, #28]
 8008f98:	bfb8      	it	lt
 8008f9a:	9204      	strlt	r2, [sp, #16]
 8008f9c:	7823      	ldrb	r3, [r4, #0]
 8008f9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fa0:	d10a      	bne.n	8008fb8 <_svfiprintf_r+0x130>
 8008fa2:	7863      	ldrb	r3, [r4, #1]
 8008fa4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fa6:	d132      	bne.n	800900e <_svfiprintf_r+0x186>
 8008fa8:	9b03      	ldr	r3, [sp, #12]
 8008faa:	3402      	adds	r4, #2
 8008fac:	1d1a      	adds	r2, r3, #4
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	9203      	str	r2, [sp, #12]
 8008fb2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fb6:	9305      	str	r3, [sp, #20]
 8008fb8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009070 <_svfiprintf_r+0x1e8>
 8008fbc:	2203      	movs	r2, #3
 8008fbe:	4650      	mov	r0, sl
 8008fc0:	7821      	ldrb	r1, [r4, #0]
 8008fc2:	f000 fad1 	bl	8009568 <memchr>
 8008fc6:	b138      	cbz	r0, 8008fd8 <_svfiprintf_r+0x150>
 8008fc8:	2240      	movs	r2, #64	@ 0x40
 8008fca:	9b04      	ldr	r3, [sp, #16]
 8008fcc:	eba0 000a 	sub.w	r0, r0, sl
 8008fd0:	4082      	lsls	r2, r0
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	3401      	adds	r4, #1
 8008fd6:	9304      	str	r3, [sp, #16]
 8008fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fdc:	2206      	movs	r2, #6
 8008fde:	4825      	ldr	r0, [pc, #148]	@ (8009074 <_svfiprintf_r+0x1ec>)
 8008fe0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fe4:	f000 fac0 	bl	8009568 <memchr>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	d036      	beq.n	800905a <_svfiprintf_r+0x1d2>
 8008fec:	4b22      	ldr	r3, [pc, #136]	@ (8009078 <_svfiprintf_r+0x1f0>)
 8008fee:	bb1b      	cbnz	r3, 8009038 <_svfiprintf_r+0x1b0>
 8008ff0:	9b03      	ldr	r3, [sp, #12]
 8008ff2:	3307      	adds	r3, #7
 8008ff4:	f023 0307 	bic.w	r3, r3, #7
 8008ff8:	3308      	adds	r3, #8
 8008ffa:	9303      	str	r3, [sp, #12]
 8008ffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ffe:	4433      	add	r3, r6
 8009000:	9309      	str	r3, [sp, #36]	@ 0x24
 8009002:	e76a      	b.n	8008eda <_svfiprintf_r+0x52>
 8009004:	460c      	mov	r4, r1
 8009006:	2001      	movs	r0, #1
 8009008:	fb0c 3202 	mla	r2, ip, r2, r3
 800900c:	e7a8      	b.n	8008f60 <_svfiprintf_r+0xd8>
 800900e:	2300      	movs	r3, #0
 8009010:	f04f 0c0a 	mov.w	ip, #10
 8009014:	4619      	mov	r1, r3
 8009016:	3401      	adds	r4, #1
 8009018:	9305      	str	r3, [sp, #20]
 800901a:	4620      	mov	r0, r4
 800901c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009020:	3a30      	subs	r2, #48	@ 0x30
 8009022:	2a09      	cmp	r2, #9
 8009024:	d903      	bls.n	800902e <_svfiprintf_r+0x1a6>
 8009026:	2b00      	cmp	r3, #0
 8009028:	d0c6      	beq.n	8008fb8 <_svfiprintf_r+0x130>
 800902a:	9105      	str	r1, [sp, #20]
 800902c:	e7c4      	b.n	8008fb8 <_svfiprintf_r+0x130>
 800902e:	4604      	mov	r4, r0
 8009030:	2301      	movs	r3, #1
 8009032:	fb0c 2101 	mla	r1, ip, r1, r2
 8009036:	e7f0      	b.n	800901a <_svfiprintf_r+0x192>
 8009038:	ab03      	add	r3, sp, #12
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	462a      	mov	r2, r5
 800903e:	4638      	mov	r0, r7
 8009040:	4b0e      	ldr	r3, [pc, #56]	@ (800907c <_svfiprintf_r+0x1f4>)
 8009042:	a904      	add	r1, sp, #16
 8009044:	f3af 8000 	nop.w
 8009048:	1c42      	adds	r2, r0, #1
 800904a:	4606      	mov	r6, r0
 800904c:	d1d6      	bne.n	8008ffc <_svfiprintf_r+0x174>
 800904e:	89ab      	ldrh	r3, [r5, #12]
 8009050:	065b      	lsls	r3, r3, #25
 8009052:	f53f af2d 	bmi.w	8008eb0 <_svfiprintf_r+0x28>
 8009056:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009058:	e72c      	b.n	8008eb4 <_svfiprintf_r+0x2c>
 800905a:	ab03      	add	r3, sp, #12
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	462a      	mov	r2, r5
 8009060:	4638      	mov	r0, r7
 8009062:	4b06      	ldr	r3, [pc, #24]	@ (800907c <_svfiprintf_r+0x1f4>)
 8009064:	a904      	add	r1, sp, #16
 8009066:	f000 f87d 	bl	8009164 <_printf_i>
 800906a:	e7ed      	b.n	8009048 <_svfiprintf_r+0x1c0>
 800906c:	0800b64d 	.word	0x0800b64d
 8009070:	0800b653 	.word	0x0800b653
 8009074:	0800b657 	.word	0x0800b657
 8009078:	00000000 	.word	0x00000000
 800907c:	08008dd1 	.word	0x08008dd1

08009080 <_printf_common>:
 8009080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009084:	4616      	mov	r6, r2
 8009086:	4698      	mov	r8, r3
 8009088:	688a      	ldr	r2, [r1, #8]
 800908a:	690b      	ldr	r3, [r1, #16]
 800908c:	4607      	mov	r7, r0
 800908e:	4293      	cmp	r3, r2
 8009090:	bfb8      	it	lt
 8009092:	4613      	movlt	r3, r2
 8009094:	6033      	str	r3, [r6, #0]
 8009096:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800909a:	460c      	mov	r4, r1
 800909c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80090a0:	b10a      	cbz	r2, 80090a6 <_printf_common+0x26>
 80090a2:	3301      	adds	r3, #1
 80090a4:	6033      	str	r3, [r6, #0]
 80090a6:	6823      	ldr	r3, [r4, #0]
 80090a8:	0699      	lsls	r1, r3, #26
 80090aa:	bf42      	ittt	mi
 80090ac:	6833      	ldrmi	r3, [r6, #0]
 80090ae:	3302      	addmi	r3, #2
 80090b0:	6033      	strmi	r3, [r6, #0]
 80090b2:	6825      	ldr	r5, [r4, #0]
 80090b4:	f015 0506 	ands.w	r5, r5, #6
 80090b8:	d106      	bne.n	80090c8 <_printf_common+0x48>
 80090ba:	f104 0a19 	add.w	sl, r4, #25
 80090be:	68e3      	ldr	r3, [r4, #12]
 80090c0:	6832      	ldr	r2, [r6, #0]
 80090c2:	1a9b      	subs	r3, r3, r2
 80090c4:	42ab      	cmp	r3, r5
 80090c6:	dc2b      	bgt.n	8009120 <_printf_common+0xa0>
 80090c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80090cc:	6822      	ldr	r2, [r4, #0]
 80090ce:	3b00      	subs	r3, #0
 80090d0:	bf18      	it	ne
 80090d2:	2301      	movne	r3, #1
 80090d4:	0692      	lsls	r2, r2, #26
 80090d6:	d430      	bmi.n	800913a <_printf_common+0xba>
 80090d8:	4641      	mov	r1, r8
 80090da:	4638      	mov	r0, r7
 80090dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80090e0:	47c8      	blx	r9
 80090e2:	3001      	adds	r0, #1
 80090e4:	d023      	beq.n	800912e <_printf_common+0xae>
 80090e6:	6823      	ldr	r3, [r4, #0]
 80090e8:	6922      	ldr	r2, [r4, #16]
 80090ea:	f003 0306 	and.w	r3, r3, #6
 80090ee:	2b04      	cmp	r3, #4
 80090f0:	bf14      	ite	ne
 80090f2:	2500      	movne	r5, #0
 80090f4:	6833      	ldreq	r3, [r6, #0]
 80090f6:	f04f 0600 	mov.w	r6, #0
 80090fa:	bf08      	it	eq
 80090fc:	68e5      	ldreq	r5, [r4, #12]
 80090fe:	f104 041a 	add.w	r4, r4, #26
 8009102:	bf08      	it	eq
 8009104:	1aed      	subeq	r5, r5, r3
 8009106:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800910a:	bf08      	it	eq
 800910c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009110:	4293      	cmp	r3, r2
 8009112:	bfc4      	itt	gt
 8009114:	1a9b      	subgt	r3, r3, r2
 8009116:	18ed      	addgt	r5, r5, r3
 8009118:	42b5      	cmp	r5, r6
 800911a:	d11a      	bne.n	8009152 <_printf_common+0xd2>
 800911c:	2000      	movs	r0, #0
 800911e:	e008      	b.n	8009132 <_printf_common+0xb2>
 8009120:	2301      	movs	r3, #1
 8009122:	4652      	mov	r2, sl
 8009124:	4641      	mov	r1, r8
 8009126:	4638      	mov	r0, r7
 8009128:	47c8      	blx	r9
 800912a:	3001      	adds	r0, #1
 800912c:	d103      	bne.n	8009136 <_printf_common+0xb6>
 800912e:	f04f 30ff 	mov.w	r0, #4294967295
 8009132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009136:	3501      	adds	r5, #1
 8009138:	e7c1      	b.n	80090be <_printf_common+0x3e>
 800913a:	2030      	movs	r0, #48	@ 0x30
 800913c:	18e1      	adds	r1, r4, r3
 800913e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009142:	1c5a      	adds	r2, r3, #1
 8009144:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009148:	4422      	add	r2, r4
 800914a:	3302      	adds	r3, #2
 800914c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009150:	e7c2      	b.n	80090d8 <_printf_common+0x58>
 8009152:	2301      	movs	r3, #1
 8009154:	4622      	mov	r2, r4
 8009156:	4641      	mov	r1, r8
 8009158:	4638      	mov	r0, r7
 800915a:	47c8      	blx	r9
 800915c:	3001      	adds	r0, #1
 800915e:	d0e6      	beq.n	800912e <_printf_common+0xae>
 8009160:	3601      	adds	r6, #1
 8009162:	e7d9      	b.n	8009118 <_printf_common+0x98>

08009164 <_printf_i>:
 8009164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009168:	7e0f      	ldrb	r7, [r1, #24]
 800916a:	4691      	mov	r9, r2
 800916c:	2f78      	cmp	r7, #120	@ 0x78
 800916e:	4680      	mov	r8, r0
 8009170:	460c      	mov	r4, r1
 8009172:	469a      	mov	sl, r3
 8009174:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009176:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800917a:	d807      	bhi.n	800918c <_printf_i+0x28>
 800917c:	2f62      	cmp	r7, #98	@ 0x62
 800917e:	d80a      	bhi.n	8009196 <_printf_i+0x32>
 8009180:	2f00      	cmp	r7, #0
 8009182:	f000 80d1 	beq.w	8009328 <_printf_i+0x1c4>
 8009186:	2f58      	cmp	r7, #88	@ 0x58
 8009188:	f000 80b8 	beq.w	80092fc <_printf_i+0x198>
 800918c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009190:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009194:	e03a      	b.n	800920c <_printf_i+0xa8>
 8009196:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800919a:	2b15      	cmp	r3, #21
 800919c:	d8f6      	bhi.n	800918c <_printf_i+0x28>
 800919e:	a101      	add	r1, pc, #4	@ (adr r1, 80091a4 <_printf_i+0x40>)
 80091a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091a4:	080091fd 	.word	0x080091fd
 80091a8:	08009211 	.word	0x08009211
 80091ac:	0800918d 	.word	0x0800918d
 80091b0:	0800918d 	.word	0x0800918d
 80091b4:	0800918d 	.word	0x0800918d
 80091b8:	0800918d 	.word	0x0800918d
 80091bc:	08009211 	.word	0x08009211
 80091c0:	0800918d 	.word	0x0800918d
 80091c4:	0800918d 	.word	0x0800918d
 80091c8:	0800918d 	.word	0x0800918d
 80091cc:	0800918d 	.word	0x0800918d
 80091d0:	0800930f 	.word	0x0800930f
 80091d4:	0800923b 	.word	0x0800923b
 80091d8:	080092c9 	.word	0x080092c9
 80091dc:	0800918d 	.word	0x0800918d
 80091e0:	0800918d 	.word	0x0800918d
 80091e4:	08009331 	.word	0x08009331
 80091e8:	0800918d 	.word	0x0800918d
 80091ec:	0800923b 	.word	0x0800923b
 80091f0:	0800918d 	.word	0x0800918d
 80091f4:	0800918d 	.word	0x0800918d
 80091f8:	080092d1 	.word	0x080092d1
 80091fc:	6833      	ldr	r3, [r6, #0]
 80091fe:	1d1a      	adds	r2, r3, #4
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	6032      	str	r2, [r6, #0]
 8009204:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009208:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800920c:	2301      	movs	r3, #1
 800920e:	e09c      	b.n	800934a <_printf_i+0x1e6>
 8009210:	6833      	ldr	r3, [r6, #0]
 8009212:	6820      	ldr	r0, [r4, #0]
 8009214:	1d19      	adds	r1, r3, #4
 8009216:	6031      	str	r1, [r6, #0]
 8009218:	0606      	lsls	r6, r0, #24
 800921a:	d501      	bpl.n	8009220 <_printf_i+0xbc>
 800921c:	681d      	ldr	r5, [r3, #0]
 800921e:	e003      	b.n	8009228 <_printf_i+0xc4>
 8009220:	0645      	lsls	r5, r0, #25
 8009222:	d5fb      	bpl.n	800921c <_printf_i+0xb8>
 8009224:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009228:	2d00      	cmp	r5, #0
 800922a:	da03      	bge.n	8009234 <_printf_i+0xd0>
 800922c:	232d      	movs	r3, #45	@ 0x2d
 800922e:	426d      	negs	r5, r5
 8009230:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009234:	230a      	movs	r3, #10
 8009236:	4858      	ldr	r0, [pc, #352]	@ (8009398 <_printf_i+0x234>)
 8009238:	e011      	b.n	800925e <_printf_i+0xfa>
 800923a:	6821      	ldr	r1, [r4, #0]
 800923c:	6833      	ldr	r3, [r6, #0]
 800923e:	0608      	lsls	r0, r1, #24
 8009240:	f853 5b04 	ldr.w	r5, [r3], #4
 8009244:	d402      	bmi.n	800924c <_printf_i+0xe8>
 8009246:	0649      	lsls	r1, r1, #25
 8009248:	bf48      	it	mi
 800924a:	b2ad      	uxthmi	r5, r5
 800924c:	2f6f      	cmp	r7, #111	@ 0x6f
 800924e:	6033      	str	r3, [r6, #0]
 8009250:	bf14      	ite	ne
 8009252:	230a      	movne	r3, #10
 8009254:	2308      	moveq	r3, #8
 8009256:	4850      	ldr	r0, [pc, #320]	@ (8009398 <_printf_i+0x234>)
 8009258:	2100      	movs	r1, #0
 800925a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800925e:	6866      	ldr	r6, [r4, #4]
 8009260:	2e00      	cmp	r6, #0
 8009262:	60a6      	str	r6, [r4, #8]
 8009264:	db05      	blt.n	8009272 <_printf_i+0x10e>
 8009266:	6821      	ldr	r1, [r4, #0]
 8009268:	432e      	orrs	r6, r5
 800926a:	f021 0104 	bic.w	r1, r1, #4
 800926e:	6021      	str	r1, [r4, #0]
 8009270:	d04b      	beq.n	800930a <_printf_i+0x1a6>
 8009272:	4616      	mov	r6, r2
 8009274:	fbb5 f1f3 	udiv	r1, r5, r3
 8009278:	fb03 5711 	mls	r7, r3, r1, r5
 800927c:	5dc7      	ldrb	r7, [r0, r7]
 800927e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009282:	462f      	mov	r7, r5
 8009284:	42bb      	cmp	r3, r7
 8009286:	460d      	mov	r5, r1
 8009288:	d9f4      	bls.n	8009274 <_printf_i+0x110>
 800928a:	2b08      	cmp	r3, #8
 800928c:	d10b      	bne.n	80092a6 <_printf_i+0x142>
 800928e:	6823      	ldr	r3, [r4, #0]
 8009290:	07df      	lsls	r7, r3, #31
 8009292:	d508      	bpl.n	80092a6 <_printf_i+0x142>
 8009294:	6923      	ldr	r3, [r4, #16]
 8009296:	6861      	ldr	r1, [r4, #4]
 8009298:	4299      	cmp	r1, r3
 800929a:	bfde      	ittt	le
 800929c:	2330      	movle	r3, #48	@ 0x30
 800929e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80092a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80092a6:	1b92      	subs	r2, r2, r6
 80092a8:	6122      	str	r2, [r4, #16]
 80092aa:	464b      	mov	r3, r9
 80092ac:	4621      	mov	r1, r4
 80092ae:	4640      	mov	r0, r8
 80092b0:	f8cd a000 	str.w	sl, [sp]
 80092b4:	aa03      	add	r2, sp, #12
 80092b6:	f7ff fee3 	bl	8009080 <_printf_common>
 80092ba:	3001      	adds	r0, #1
 80092bc:	d14a      	bne.n	8009354 <_printf_i+0x1f0>
 80092be:	f04f 30ff 	mov.w	r0, #4294967295
 80092c2:	b004      	add	sp, #16
 80092c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c8:	6823      	ldr	r3, [r4, #0]
 80092ca:	f043 0320 	orr.w	r3, r3, #32
 80092ce:	6023      	str	r3, [r4, #0]
 80092d0:	2778      	movs	r7, #120	@ 0x78
 80092d2:	4832      	ldr	r0, [pc, #200]	@ (800939c <_printf_i+0x238>)
 80092d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80092d8:	6823      	ldr	r3, [r4, #0]
 80092da:	6831      	ldr	r1, [r6, #0]
 80092dc:	061f      	lsls	r7, r3, #24
 80092de:	f851 5b04 	ldr.w	r5, [r1], #4
 80092e2:	d402      	bmi.n	80092ea <_printf_i+0x186>
 80092e4:	065f      	lsls	r7, r3, #25
 80092e6:	bf48      	it	mi
 80092e8:	b2ad      	uxthmi	r5, r5
 80092ea:	6031      	str	r1, [r6, #0]
 80092ec:	07d9      	lsls	r1, r3, #31
 80092ee:	bf44      	itt	mi
 80092f0:	f043 0320 	orrmi.w	r3, r3, #32
 80092f4:	6023      	strmi	r3, [r4, #0]
 80092f6:	b11d      	cbz	r5, 8009300 <_printf_i+0x19c>
 80092f8:	2310      	movs	r3, #16
 80092fa:	e7ad      	b.n	8009258 <_printf_i+0xf4>
 80092fc:	4826      	ldr	r0, [pc, #152]	@ (8009398 <_printf_i+0x234>)
 80092fe:	e7e9      	b.n	80092d4 <_printf_i+0x170>
 8009300:	6823      	ldr	r3, [r4, #0]
 8009302:	f023 0320 	bic.w	r3, r3, #32
 8009306:	6023      	str	r3, [r4, #0]
 8009308:	e7f6      	b.n	80092f8 <_printf_i+0x194>
 800930a:	4616      	mov	r6, r2
 800930c:	e7bd      	b.n	800928a <_printf_i+0x126>
 800930e:	6833      	ldr	r3, [r6, #0]
 8009310:	6825      	ldr	r5, [r4, #0]
 8009312:	1d18      	adds	r0, r3, #4
 8009314:	6961      	ldr	r1, [r4, #20]
 8009316:	6030      	str	r0, [r6, #0]
 8009318:	062e      	lsls	r6, r5, #24
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	d501      	bpl.n	8009322 <_printf_i+0x1be>
 800931e:	6019      	str	r1, [r3, #0]
 8009320:	e002      	b.n	8009328 <_printf_i+0x1c4>
 8009322:	0668      	lsls	r0, r5, #25
 8009324:	d5fb      	bpl.n	800931e <_printf_i+0x1ba>
 8009326:	8019      	strh	r1, [r3, #0]
 8009328:	2300      	movs	r3, #0
 800932a:	4616      	mov	r6, r2
 800932c:	6123      	str	r3, [r4, #16]
 800932e:	e7bc      	b.n	80092aa <_printf_i+0x146>
 8009330:	6833      	ldr	r3, [r6, #0]
 8009332:	2100      	movs	r1, #0
 8009334:	1d1a      	adds	r2, r3, #4
 8009336:	6032      	str	r2, [r6, #0]
 8009338:	681e      	ldr	r6, [r3, #0]
 800933a:	6862      	ldr	r2, [r4, #4]
 800933c:	4630      	mov	r0, r6
 800933e:	f000 f913 	bl	8009568 <memchr>
 8009342:	b108      	cbz	r0, 8009348 <_printf_i+0x1e4>
 8009344:	1b80      	subs	r0, r0, r6
 8009346:	6060      	str	r0, [r4, #4]
 8009348:	6863      	ldr	r3, [r4, #4]
 800934a:	6123      	str	r3, [r4, #16]
 800934c:	2300      	movs	r3, #0
 800934e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009352:	e7aa      	b.n	80092aa <_printf_i+0x146>
 8009354:	4632      	mov	r2, r6
 8009356:	4649      	mov	r1, r9
 8009358:	4640      	mov	r0, r8
 800935a:	6923      	ldr	r3, [r4, #16]
 800935c:	47d0      	blx	sl
 800935e:	3001      	adds	r0, #1
 8009360:	d0ad      	beq.n	80092be <_printf_i+0x15a>
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	079b      	lsls	r3, r3, #30
 8009366:	d413      	bmi.n	8009390 <_printf_i+0x22c>
 8009368:	68e0      	ldr	r0, [r4, #12]
 800936a:	9b03      	ldr	r3, [sp, #12]
 800936c:	4298      	cmp	r0, r3
 800936e:	bfb8      	it	lt
 8009370:	4618      	movlt	r0, r3
 8009372:	e7a6      	b.n	80092c2 <_printf_i+0x15e>
 8009374:	2301      	movs	r3, #1
 8009376:	4632      	mov	r2, r6
 8009378:	4649      	mov	r1, r9
 800937a:	4640      	mov	r0, r8
 800937c:	47d0      	blx	sl
 800937e:	3001      	adds	r0, #1
 8009380:	d09d      	beq.n	80092be <_printf_i+0x15a>
 8009382:	3501      	adds	r5, #1
 8009384:	68e3      	ldr	r3, [r4, #12]
 8009386:	9903      	ldr	r1, [sp, #12]
 8009388:	1a5b      	subs	r3, r3, r1
 800938a:	42ab      	cmp	r3, r5
 800938c:	dcf2      	bgt.n	8009374 <_printf_i+0x210>
 800938e:	e7eb      	b.n	8009368 <_printf_i+0x204>
 8009390:	2500      	movs	r5, #0
 8009392:	f104 0619 	add.w	r6, r4, #25
 8009396:	e7f5      	b.n	8009384 <_printf_i+0x220>
 8009398:	0800b65e 	.word	0x0800b65e
 800939c:	0800b66f 	.word	0x0800b66f

080093a0 <__sflush_r>:
 80093a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a6:	0716      	lsls	r6, r2, #28
 80093a8:	4605      	mov	r5, r0
 80093aa:	460c      	mov	r4, r1
 80093ac:	d454      	bmi.n	8009458 <__sflush_r+0xb8>
 80093ae:	684b      	ldr	r3, [r1, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	dc02      	bgt.n	80093ba <__sflush_r+0x1a>
 80093b4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	dd48      	ble.n	800944c <__sflush_r+0xac>
 80093ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093bc:	2e00      	cmp	r6, #0
 80093be:	d045      	beq.n	800944c <__sflush_r+0xac>
 80093c0:	2300      	movs	r3, #0
 80093c2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80093c6:	682f      	ldr	r7, [r5, #0]
 80093c8:	6a21      	ldr	r1, [r4, #32]
 80093ca:	602b      	str	r3, [r5, #0]
 80093cc:	d030      	beq.n	8009430 <__sflush_r+0x90>
 80093ce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80093d0:	89a3      	ldrh	r3, [r4, #12]
 80093d2:	0759      	lsls	r1, r3, #29
 80093d4:	d505      	bpl.n	80093e2 <__sflush_r+0x42>
 80093d6:	6863      	ldr	r3, [r4, #4]
 80093d8:	1ad2      	subs	r2, r2, r3
 80093da:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80093dc:	b10b      	cbz	r3, 80093e2 <__sflush_r+0x42>
 80093de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80093e0:	1ad2      	subs	r2, r2, r3
 80093e2:	2300      	movs	r3, #0
 80093e4:	4628      	mov	r0, r5
 80093e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093e8:	6a21      	ldr	r1, [r4, #32]
 80093ea:	47b0      	blx	r6
 80093ec:	1c43      	adds	r3, r0, #1
 80093ee:	89a3      	ldrh	r3, [r4, #12]
 80093f0:	d106      	bne.n	8009400 <__sflush_r+0x60>
 80093f2:	6829      	ldr	r1, [r5, #0]
 80093f4:	291d      	cmp	r1, #29
 80093f6:	d82b      	bhi.n	8009450 <__sflush_r+0xb0>
 80093f8:	4a28      	ldr	r2, [pc, #160]	@ (800949c <__sflush_r+0xfc>)
 80093fa:	40ca      	lsrs	r2, r1
 80093fc:	07d6      	lsls	r6, r2, #31
 80093fe:	d527      	bpl.n	8009450 <__sflush_r+0xb0>
 8009400:	2200      	movs	r2, #0
 8009402:	6062      	str	r2, [r4, #4]
 8009404:	6922      	ldr	r2, [r4, #16]
 8009406:	04d9      	lsls	r1, r3, #19
 8009408:	6022      	str	r2, [r4, #0]
 800940a:	d504      	bpl.n	8009416 <__sflush_r+0x76>
 800940c:	1c42      	adds	r2, r0, #1
 800940e:	d101      	bne.n	8009414 <__sflush_r+0x74>
 8009410:	682b      	ldr	r3, [r5, #0]
 8009412:	b903      	cbnz	r3, 8009416 <__sflush_r+0x76>
 8009414:	6560      	str	r0, [r4, #84]	@ 0x54
 8009416:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009418:	602f      	str	r7, [r5, #0]
 800941a:	b1b9      	cbz	r1, 800944c <__sflush_r+0xac>
 800941c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009420:	4299      	cmp	r1, r3
 8009422:	d002      	beq.n	800942a <__sflush_r+0x8a>
 8009424:	4628      	mov	r0, r5
 8009426:	f7ff fbd5 	bl	8008bd4 <_free_r>
 800942a:	2300      	movs	r3, #0
 800942c:	6363      	str	r3, [r4, #52]	@ 0x34
 800942e:	e00d      	b.n	800944c <__sflush_r+0xac>
 8009430:	2301      	movs	r3, #1
 8009432:	4628      	mov	r0, r5
 8009434:	47b0      	blx	r6
 8009436:	4602      	mov	r2, r0
 8009438:	1c50      	adds	r0, r2, #1
 800943a:	d1c9      	bne.n	80093d0 <__sflush_r+0x30>
 800943c:	682b      	ldr	r3, [r5, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d0c6      	beq.n	80093d0 <__sflush_r+0x30>
 8009442:	2b1d      	cmp	r3, #29
 8009444:	d001      	beq.n	800944a <__sflush_r+0xaa>
 8009446:	2b16      	cmp	r3, #22
 8009448:	d11d      	bne.n	8009486 <__sflush_r+0xe6>
 800944a:	602f      	str	r7, [r5, #0]
 800944c:	2000      	movs	r0, #0
 800944e:	e021      	b.n	8009494 <__sflush_r+0xf4>
 8009450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009454:	b21b      	sxth	r3, r3
 8009456:	e01a      	b.n	800948e <__sflush_r+0xee>
 8009458:	690f      	ldr	r7, [r1, #16]
 800945a:	2f00      	cmp	r7, #0
 800945c:	d0f6      	beq.n	800944c <__sflush_r+0xac>
 800945e:	0793      	lsls	r3, r2, #30
 8009460:	bf18      	it	ne
 8009462:	2300      	movne	r3, #0
 8009464:	680e      	ldr	r6, [r1, #0]
 8009466:	bf08      	it	eq
 8009468:	694b      	ldreq	r3, [r1, #20]
 800946a:	1bf6      	subs	r6, r6, r7
 800946c:	600f      	str	r7, [r1, #0]
 800946e:	608b      	str	r3, [r1, #8]
 8009470:	2e00      	cmp	r6, #0
 8009472:	ddeb      	ble.n	800944c <__sflush_r+0xac>
 8009474:	4633      	mov	r3, r6
 8009476:	463a      	mov	r2, r7
 8009478:	4628      	mov	r0, r5
 800947a:	6a21      	ldr	r1, [r4, #32]
 800947c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009480:	47e0      	blx	ip
 8009482:	2800      	cmp	r0, #0
 8009484:	dc07      	bgt.n	8009496 <__sflush_r+0xf6>
 8009486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800948a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800948e:	f04f 30ff 	mov.w	r0, #4294967295
 8009492:	81a3      	strh	r3, [r4, #12]
 8009494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009496:	4407      	add	r7, r0
 8009498:	1a36      	subs	r6, r6, r0
 800949a:	e7e9      	b.n	8009470 <__sflush_r+0xd0>
 800949c:	20400001 	.word	0x20400001

080094a0 <_fflush_r>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	690b      	ldr	r3, [r1, #16]
 80094a4:	4605      	mov	r5, r0
 80094a6:	460c      	mov	r4, r1
 80094a8:	b913      	cbnz	r3, 80094b0 <_fflush_r+0x10>
 80094aa:	2500      	movs	r5, #0
 80094ac:	4628      	mov	r0, r5
 80094ae:	bd38      	pop	{r3, r4, r5, pc}
 80094b0:	b118      	cbz	r0, 80094ba <_fflush_r+0x1a>
 80094b2:	6a03      	ldr	r3, [r0, #32]
 80094b4:	b90b      	cbnz	r3, 80094ba <_fflush_r+0x1a>
 80094b6:	f7ff fa37 	bl	8008928 <__sinit>
 80094ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d0f3      	beq.n	80094aa <_fflush_r+0xa>
 80094c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80094c4:	07d0      	lsls	r0, r2, #31
 80094c6:	d404      	bmi.n	80094d2 <_fflush_r+0x32>
 80094c8:	0599      	lsls	r1, r3, #22
 80094ca:	d402      	bmi.n	80094d2 <_fflush_r+0x32>
 80094cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094ce:	f7ff fb52 	bl	8008b76 <__retarget_lock_acquire_recursive>
 80094d2:	4628      	mov	r0, r5
 80094d4:	4621      	mov	r1, r4
 80094d6:	f7ff ff63 	bl	80093a0 <__sflush_r>
 80094da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80094dc:	4605      	mov	r5, r0
 80094de:	07da      	lsls	r2, r3, #31
 80094e0:	d4e4      	bmi.n	80094ac <_fflush_r+0xc>
 80094e2:	89a3      	ldrh	r3, [r4, #12]
 80094e4:	059b      	lsls	r3, r3, #22
 80094e6:	d4e1      	bmi.n	80094ac <_fflush_r+0xc>
 80094e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094ea:	f7ff fb45 	bl	8008b78 <__retarget_lock_release_recursive>
 80094ee:	e7dd      	b.n	80094ac <_fflush_r+0xc>

080094f0 <fiprintf>:
 80094f0:	b40e      	push	{r1, r2, r3}
 80094f2:	b503      	push	{r0, r1, lr}
 80094f4:	4601      	mov	r1, r0
 80094f6:	ab03      	add	r3, sp, #12
 80094f8:	4805      	ldr	r0, [pc, #20]	@ (8009510 <fiprintf+0x20>)
 80094fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80094fe:	6800      	ldr	r0, [r0, #0]
 8009500:	9301      	str	r3, [sp, #4]
 8009502:	f000 f89b 	bl	800963c <_vfiprintf_r>
 8009506:	b002      	add	sp, #8
 8009508:	f85d eb04 	ldr.w	lr, [sp], #4
 800950c:	b003      	add	sp, #12
 800950e:	4770      	bx	lr
 8009510:	20000030 	.word	0x20000030

08009514 <memmove>:
 8009514:	4288      	cmp	r0, r1
 8009516:	b510      	push	{r4, lr}
 8009518:	eb01 0402 	add.w	r4, r1, r2
 800951c:	d902      	bls.n	8009524 <memmove+0x10>
 800951e:	4284      	cmp	r4, r0
 8009520:	4623      	mov	r3, r4
 8009522:	d807      	bhi.n	8009534 <memmove+0x20>
 8009524:	1e43      	subs	r3, r0, #1
 8009526:	42a1      	cmp	r1, r4
 8009528:	d008      	beq.n	800953c <memmove+0x28>
 800952a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800952e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009532:	e7f8      	b.n	8009526 <memmove+0x12>
 8009534:	4601      	mov	r1, r0
 8009536:	4402      	add	r2, r0
 8009538:	428a      	cmp	r2, r1
 800953a:	d100      	bne.n	800953e <memmove+0x2a>
 800953c:	bd10      	pop	{r4, pc}
 800953e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009546:	e7f7      	b.n	8009538 <memmove+0x24>

08009548 <_sbrk_r>:
 8009548:	b538      	push	{r3, r4, r5, lr}
 800954a:	2300      	movs	r3, #0
 800954c:	4d05      	ldr	r5, [pc, #20]	@ (8009564 <_sbrk_r+0x1c>)
 800954e:	4604      	mov	r4, r0
 8009550:	4608      	mov	r0, r1
 8009552:	602b      	str	r3, [r5, #0]
 8009554:	f7fc f9fa 	bl	800594c <_sbrk>
 8009558:	1c43      	adds	r3, r0, #1
 800955a:	d102      	bne.n	8009562 <_sbrk_r+0x1a>
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	b103      	cbz	r3, 8009562 <_sbrk_r+0x1a>
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	bd38      	pop	{r3, r4, r5, pc}
 8009564:	200040f8 	.word	0x200040f8

08009568 <memchr>:
 8009568:	4603      	mov	r3, r0
 800956a:	b510      	push	{r4, lr}
 800956c:	b2c9      	uxtb	r1, r1
 800956e:	4402      	add	r2, r0
 8009570:	4293      	cmp	r3, r2
 8009572:	4618      	mov	r0, r3
 8009574:	d101      	bne.n	800957a <memchr+0x12>
 8009576:	2000      	movs	r0, #0
 8009578:	e003      	b.n	8009582 <memchr+0x1a>
 800957a:	7804      	ldrb	r4, [r0, #0]
 800957c:	3301      	adds	r3, #1
 800957e:	428c      	cmp	r4, r1
 8009580:	d1f6      	bne.n	8009570 <memchr+0x8>
 8009582:	bd10      	pop	{r4, pc}

08009584 <abort>:
 8009584:	2006      	movs	r0, #6
 8009586:	b508      	push	{r3, lr}
 8009588:	f000 fa2c 	bl	80099e4 <raise>
 800958c:	2001      	movs	r0, #1
 800958e:	f7fc f968 	bl	8005862 <_exit>

08009592 <_realloc_r>:
 8009592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009596:	4607      	mov	r7, r0
 8009598:	4614      	mov	r4, r2
 800959a:	460d      	mov	r5, r1
 800959c:	b921      	cbnz	r1, 80095a8 <_realloc_r+0x16>
 800959e:	4611      	mov	r1, r2
 80095a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095a4:	f7ff bb88 	b.w	8008cb8 <_malloc_r>
 80095a8:	b92a      	cbnz	r2, 80095b6 <_realloc_r+0x24>
 80095aa:	f7ff fb13 	bl	8008bd4 <_free_r>
 80095ae:	4625      	mov	r5, r4
 80095b0:	4628      	mov	r0, r5
 80095b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095b6:	f000 fa31 	bl	8009a1c <_malloc_usable_size_r>
 80095ba:	4284      	cmp	r4, r0
 80095bc:	4606      	mov	r6, r0
 80095be:	d802      	bhi.n	80095c6 <_realloc_r+0x34>
 80095c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80095c4:	d8f4      	bhi.n	80095b0 <_realloc_r+0x1e>
 80095c6:	4621      	mov	r1, r4
 80095c8:	4638      	mov	r0, r7
 80095ca:	f7ff fb75 	bl	8008cb8 <_malloc_r>
 80095ce:	4680      	mov	r8, r0
 80095d0:	b908      	cbnz	r0, 80095d6 <_realloc_r+0x44>
 80095d2:	4645      	mov	r5, r8
 80095d4:	e7ec      	b.n	80095b0 <_realloc_r+0x1e>
 80095d6:	42b4      	cmp	r4, r6
 80095d8:	4622      	mov	r2, r4
 80095da:	4629      	mov	r1, r5
 80095dc:	bf28      	it	cs
 80095de:	4632      	movcs	r2, r6
 80095e0:	f7ff facb 	bl	8008b7a <memcpy>
 80095e4:	4629      	mov	r1, r5
 80095e6:	4638      	mov	r0, r7
 80095e8:	f7ff faf4 	bl	8008bd4 <_free_r>
 80095ec:	e7f1      	b.n	80095d2 <_realloc_r+0x40>

080095ee <__sfputc_r>:
 80095ee:	6893      	ldr	r3, [r2, #8]
 80095f0:	b410      	push	{r4}
 80095f2:	3b01      	subs	r3, #1
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	6093      	str	r3, [r2, #8]
 80095f8:	da07      	bge.n	800960a <__sfputc_r+0x1c>
 80095fa:	6994      	ldr	r4, [r2, #24]
 80095fc:	42a3      	cmp	r3, r4
 80095fe:	db01      	blt.n	8009604 <__sfputc_r+0x16>
 8009600:	290a      	cmp	r1, #10
 8009602:	d102      	bne.n	800960a <__sfputc_r+0x1c>
 8009604:	bc10      	pop	{r4}
 8009606:	f000 b931 	b.w	800986c <__swbuf_r>
 800960a:	6813      	ldr	r3, [r2, #0]
 800960c:	1c58      	adds	r0, r3, #1
 800960e:	6010      	str	r0, [r2, #0]
 8009610:	7019      	strb	r1, [r3, #0]
 8009612:	4608      	mov	r0, r1
 8009614:	bc10      	pop	{r4}
 8009616:	4770      	bx	lr

08009618 <__sfputs_r>:
 8009618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961a:	4606      	mov	r6, r0
 800961c:	460f      	mov	r7, r1
 800961e:	4614      	mov	r4, r2
 8009620:	18d5      	adds	r5, r2, r3
 8009622:	42ac      	cmp	r4, r5
 8009624:	d101      	bne.n	800962a <__sfputs_r+0x12>
 8009626:	2000      	movs	r0, #0
 8009628:	e007      	b.n	800963a <__sfputs_r+0x22>
 800962a:	463a      	mov	r2, r7
 800962c:	4630      	mov	r0, r6
 800962e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009632:	f7ff ffdc 	bl	80095ee <__sfputc_r>
 8009636:	1c43      	adds	r3, r0, #1
 8009638:	d1f3      	bne.n	8009622 <__sfputs_r+0xa>
 800963a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800963c <_vfiprintf_r>:
 800963c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009640:	460d      	mov	r5, r1
 8009642:	4614      	mov	r4, r2
 8009644:	4698      	mov	r8, r3
 8009646:	4606      	mov	r6, r0
 8009648:	b09d      	sub	sp, #116	@ 0x74
 800964a:	b118      	cbz	r0, 8009654 <_vfiprintf_r+0x18>
 800964c:	6a03      	ldr	r3, [r0, #32]
 800964e:	b90b      	cbnz	r3, 8009654 <_vfiprintf_r+0x18>
 8009650:	f7ff f96a 	bl	8008928 <__sinit>
 8009654:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009656:	07d9      	lsls	r1, r3, #31
 8009658:	d405      	bmi.n	8009666 <_vfiprintf_r+0x2a>
 800965a:	89ab      	ldrh	r3, [r5, #12]
 800965c:	059a      	lsls	r2, r3, #22
 800965e:	d402      	bmi.n	8009666 <_vfiprintf_r+0x2a>
 8009660:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009662:	f7ff fa88 	bl	8008b76 <__retarget_lock_acquire_recursive>
 8009666:	89ab      	ldrh	r3, [r5, #12]
 8009668:	071b      	lsls	r3, r3, #28
 800966a:	d501      	bpl.n	8009670 <_vfiprintf_r+0x34>
 800966c:	692b      	ldr	r3, [r5, #16]
 800966e:	b99b      	cbnz	r3, 8009698 <_vfiprintf_r+0x5c>
 8009670:	4629      	mov	r1, r5
 8009672:	4630      	mov	r0, r6
 8009674:	f000 f938 	bl	80098e8 <__swsetup_r>
 8009678:	b170      	cbz	r0, 8009698 <_vfiprintf_r+0x5c>
 800967a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800967c:	07dc      	lsls	r4, r3, #31
 800967e:	d504      	bpl.n	800968a <_vfiprintf_r+0x4e>
 8009680:	f04f 30ff 	mov.w	r0, #4294967295
 8009684:	b01d      	add	sp, #116	@ 0x74
 8009686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800968a:	89ab      	ldrh	r3, [r5, #12]
 800968c:	0598      	lsls	r0, r3, #22
 800968e:	d4f7      	bmi.n	8009680 <_vfiprintf_r+0x44>
 8009690:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009692:	f7ff fa71 	bl	8008b78 <__retarget_lock_release_recursive>
 8009696:	e7f3      	b.n	8009680 <_vfiprintf_r+0x44>
 8009698:	2300      	movs	r3, #0
 800969a:	9309      	str	r3, [sp, #36]	@ 0x24
 800969c:	2320      	movs	r3, #32
 800969e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096a2:	2330      	movs	r3, #48	@ 0x30
 80096a4:	f04f 0901 	mov.w	r9, #1
 80096a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80096ac:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009858 <_vfiprintf_r+0x21c>
 80096b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096b4:	4623      	mov	r3, r4
 80096b6:	469a      	mov	sl, r3
 80096b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096bc:	b10a      	cbz	r2, 80096c2 <_vfiprintf_r+0x86>
 80096be:	2a25      	cmp	r2, #37	@ 0x25
 80096c0:	d1f9      	bne.n	80096b6 <_vfiprintf_r+0x7a>
 80096c2:	ebba 0b04 	subs.w	fp, sl, r4
 80096c6:	d00b      	beq.n	80096e0 <_vfiprintf_r+0xa4>
 80096c8:	465b      	mov	r3, fp
 80096ca:	4622      	mov	r2, r4
 80096cc:	4629      	mov	r1, r5
 80096ce:	4630      	mov	r0, r6
 80096d0:	f7ff ffa2 	bl	8009618 <__sfputs_r>
 80096d4:	3001      	adds	r0, #1
 80096d6:	f000 80a7 	beq.w	8009828 <_vfiprintf_r+0x1ec>
 80096da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096dc:	445a      	add	r2, fp
 80096de:	9209      	str	r2, [sp, #36]	@ 0x24
 80096e0:	f89a 3000 	ldrb.w	r3, [sl]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f000 809f 	beq.w	8009828 <_vfiprintf_r+0x1ec>
 80096ea:	2300      	movs	r3, #0
 80096ec:	f04f 32ff 	mov.w	r2, #4294967295
 80096f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096f4:	f10a 0a01 	add.w	sl, sl, #1
 80096f8:	9304      	str	r3, [sp, #16]
 80096fa:	9307      	str	r3, [sp, #28]
 80096fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009700:	931a      	str	r3, [sp, #104]	@ 0x68
 8009702:	4654      	mov	r4, sl
 8009704:	2205      	movs	r2, #5
 8009706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800970a:	4853      	ldr	r0, [pc, #332]	@ (8009858 <_vfiprintf_r+0x21c>)
 800970c:	f7ff ff2c 	bl	8009568 <memchr>
 8009710:	9a04      	ldr	r2, [sp, #16]
 8009712:	b9d8      	cbnz	r0, 800974c <_vfiprintf_r+0x110>
 8009714:	06d1      	lsls	r1, r2, #27
 8009716:	bf44      	itt	mi
 8009718:	2320      	movmi	r3, #32
 800971a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800971e:	0713      	lsls	r3, r2, #28
 8009720:	bf44      	itt	mi
 8009722:	232b      	movmi	r3, #43	@ 0x2b
 8009724:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009728:	f89a 3000 	ldrb.w	r3, [sl]
 800972c:	2b2a      	cmp	r3, #42	@ 0x2a
 800972e:	d015      	beq.n	800975c <_vfiprintf_r+0x120>
 8009730:	4654      	mov	r4, sl
 8009732:	2000      	movs	r0, #0
 8009734:	f04f 0c0a 	mov.w	ip, #10
 8009738:	9a07      	ldr	r2, [sp, #28]
 800973a:	4621      	mov	r1, r4
 800973c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009740:	3b30      	subs	r3, #48	@ 0x30
 8009742:	2b09      	cmp	r3, #9
 8009744:	d94b      	bls.n	80097de <_vfiprintf_r+0x1a2>
 8009746:	b1b0      	cbz	r0, 8009776 <_vfiprintf_r+0x13a>
 8009748:	9207      	str	r2, [sp, #28]
 800974a:	e014      	b.n	8009776 <_vfiprintf_r+0x13a>
 800974c:	eba0 0308 	sub.w	r3, r0, r8
 8009750:	fa09 f303 	lsl.w	r3, r9, r3
 8009754:	4313      	orrs	r3, r2
 8009756:	46a2      	mov	sl, r4
 8009758:	9304      	str	r3, [sp, #16]
 800975a:	e7d2      	b.n	8009702 <_vfiprintf_r+0xc6>
 800975c:	9b03      	ldr	r3, [sp, #12]
 800975e:	1d19      	adds	r1, r3, #4
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	9103      	str	r1, [sp, #12]
 8009764:	2b00      	cmp	r3, #0
 8009766:	bfbb      	ittet	lt
 8009768:	425b      	neglt	r3, r3
 800976a:	f042 0202 	orrlt.w	r2, r2, #2
 800976e:	9307      	strge	r3, [sp, #28]
 8009770:	9307      	strlt	r3, [sp, #28]
 8009772:	bfb8      	it	lt
 8009774:	9204      	strlt	r2, [sp, #16]
 8009776:	7823      	ldrb	r3, [r4, #0]
 8009778:	2b2e      	cmp	r3, #46	@ 0x2e
 800977a:	d10a      	bne.n	8009792 <_vfiprintf_r+0x156>
 800977c:	7863      	ldrb	r3, [r4, #1]
 800977e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009780:	d132      	bne.n	80097e8 <_vfiprintf_r+0x1ac>
 8009782:	9b03      	ldr	r3, [sp, #12]
 8009784:	3402      	adds	r4, #2
 8009786:	1d1a      	adds	r2, r3, #4
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	9203      	str	r2, [sp, #12]
 800978c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009790:	9305      	str	r3, [sp, #20]
 8009792:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800985c <_vfiprintf_r+0x220>
 8009796:	2203      	movs	r2, #3
 8009798:	4650      	mov	r0, sl
 800979a:	7821      	ldrb	r1, [r4, #0]
 800979c:	f7ff fee4 	bl	8009568 <memchr>
 80097a0:	b138      	cbz	r0, 80097b2 <_vfiprintf_r+0x176>
 80097a2:	2240      	movs	r2, #64	@ 0x40
 80097a4:	9b04      	ldr	r3, [sp, #16]
 80097a6:	eba0 000a 	sub.w	r0, r0, sl
 80097aa:	4082      	lsls	r2, r0
 80097ac:	4313      	orrs	r3, r2
 80097ae:	3401      	adds	r4, #1
 80097b0:	9304      	str	r3, [sp, #16]
 80097b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097b6:	2206      	movs	r2, #6
 80097b8:	4829      	ldr	r0, [pc, #164]	@ (8009860 <_vfiprintf_r+0x224>)
 80097ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097be:	f7ff fed3 	bl	8009568 <memchr>
 80097c2:	2800      	cmp	r0, #0
 80097c4:	d03f      	beq.n	8009846 <_vfiprintf_r+0x20a>
 80097c6:	4b27      	ldr	r3, [pc, #156]	@ (8009864 <_vfiprintf_r+0x228>)
 80097c8:	bb1b      	cbnz	r3, 8009812 <_vfiprintf_r+0x1d6>
 80097ca:	9b03      	ldr	r3, [sp, #12]
 80097cc:	3307      	adds	r3, #7
 80097ce:	f023 0307 	bic.w	r3, r3, #7
 80097d2:	3308      	adds	r3, #8
 80097d4:	9303      	str	r3, [sp, #12]
 80097d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097d8:	443b      	add	r3, r7
 80097da:	9309      	str	r3, [sp, #36]	@ 0x24
 80097dc:	e76a      	b.n	80096b4 <_vfiprintf_r+0x78>
 80097de:	460c      	mov	r4, r1
 80097e0:	2001      	movs	r0, #1
 80097e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80097e6:	e7a8      	b.n	800973a <_vfiprintf_r+0xfe>
 80097e8:	2300      	movs	r3, #0
 80097ea:	f04f 0c0a 	mov.w	ip, #10
 80097ee:	4619      	mov	r1, r3
 80097f0:	3401      	adds	r4, #1
 80097f2:	9305      	str	r3, [sp, #20]
 80097f4:	4620      	mov	r0, r4
 80097f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097fa:	3a30      	subs	r2, #48	@ 0x30
 80097fc:	2a09      	cmp	r2, #9
 80097fe:	d903      	bls.n	8009808 <_vfiprintf_r+0x1cc>
 8009800:	2b00      	cmp	r3, #0
 8009802:	d0c6      	beq.n	8009792 <_vfiprintf_r+0x156>
 8009804:	9105      	str	r1, [sp, #20]
 8009806:	e7c4      	b.n	8009792 <_vfiprintf_r+0x156>
 8009808:	4604      	mov	r4, r0
 800980a:	2301      	movs	r3, #1
 800980c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009810:	e7f0      	b.n	80097f4 <_vfiprintf_r+0x1b8>
 8009812:	ab03      	add	r3, sp, #12
 8009814:	9300      	str	r3, [sp, #0]
 8009816:	462a      	mov	r2, r5
 8009818:	4630      	mov	r0, r6
 800981a:	4b13      	ldr	r3, [pc, #76]	@ (8009868 <_vfiprintf_r+0x22c>)
 800981c:	a904      	add	r1, sp, #16
 800981e:	f3af 8000 	nop.w
 8009822:	4607      	mov	r7, r0
 8009824:	1c78      	adds	r0, r7, #1
 8009826:	d1d6      	bne.n	80097d6 <_vfiprintf_r+0x19a>
 8009828:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800982a:	07d9      	lsls	r1, r3, #31
 800982c:	d405      	bmi.n	800983a <_vfiprintf_r+0x1fe>
 800982e:	89ab      	ldrh	r3, [r5, #12]
 8009830:	059a      	lsls	r2, r3, #22
 8009832:	d402      	bmi.n	800983a <_vfiprintf_r+0x1fe>
 8009834:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009836:	f7ff f99f 	bl	8008b78 <__retarget_lock_release_recursive>
 800983a:	89ab      	ldrh	r3, [r5, #12]
 800983c:	065b      	lsls	r3, r3, #25
 800983e:	f53f af1f 	bmi.w	8009680 <_vfiprintf_r+0x44>
 8009842:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009844:	e71e      	b.n	8009684 <_vfiprintf_r+0x48>
 8009846:	ab03      	add	r3, sp, #12
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	462a      	mov	r2, r5
 800984c:	4630      	mov	r0, r6
 800984e:	4b06      	ldr	r3, [pc, #24]	@ (8009868 <_vfiprintf_r+0x22c>)
 8009850:	a904      	add	r1, sp, #16
 8009852:	f7ff fc87 	bl	8009164 <_printf_i>
 8009856:	e7e4      	b.n	8009822 <_vfiprintf_r+0x1e6>
 8009858:	0800b64d 	.word	0x0800b64d
 800985c:	0800b653 	.word	0x0800b653
 8009860:	0800b657 	.word	0x0800b657
 8009864:	00000000 	.word	0x00000000
 8009868:	08009619 	.word	0x08009619

0800986c <__swbuf_r>:
 800986c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986e:	460e      	mov	r6, r1
 8009870:	4614      	mov	r4, r2
 8009872:	4605      	mov	r5, r0
 8009874:	b118      	cbz	r0, 800987e <__swbuf_r+0x12>
 8009876:	6a03      	ldr	r3, [r0, #32]
 8009878:	b90b      	cbnz	r3, 800987e <__swbuf_r+0x12>
 800987a:	f7ff f855 	bl	8008928 <__sinit>
 800987e:	69a3      	ldr	r3, [r4, #24]
 8009880:	60a3      	str	r3, [r4, #8]
 8009882:	89a3      	ldrh	r3, [r4, #12]
 8009884:	071a      	lsls	r2, r3, #28
 8009886:	d501      	bpl.n	800988c <__swbuf_r+0x20>
 8009888:	6923      	ldr	r3, [r4, #16]
 800988a:	b943      	cbnz	r3, 800989e <__swbuf_r+0x32>
 800988c:	4621      	mov	r1, r4
 800988e:	4628      	mov	r0, r5
 8009890:	f000 f82a 	bl	80098e8 <__swsetup_r>
 8009894:	b118      	cbz	r0, 800989e <__swbuf_r+0x32>
 8009896:	f04f 37ff 	mov.w	r7, #4294967295
 800989a:	4638      	mov	r0, r7
 800989c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800989e:	6823      	ldr	r3, [r4, #0]
 80098a0:	6922      	ldr	r2, [r4, #16]
 80098a2:	b2f6      	uxtb	r6, r6
 80098a4:	1a98      	subs	r0, r3, r2
 80098a6:	6963      	ldr	r3, [r4, #20]
 80098a8:	4637      	mov	r7, r6
 80098aa:	4283      	cmp	r3, r0
 80098ac:	dc05      	bgt.n	80098ba <__swbuf_r+0x4e>
 80098ae:	4621      	mov	r1, r4
 80098b0:	4628      	mov	r0, r5
 80098b2:	f7ff fdf5 	bl	80094a0 <_fflush_r>
 80098b6:	2800      	cmp	r0, #0
 80098b8:	d1ed      	bne.n	8009896 <__swbuf_r+0x2a>
 80098ba:	68a3      	ldr	r3, [r4, #8]
 80098bc:	3b01      	subs	r3, #1
 80098be:	60a3      	str	r3, [r4, #8]
 80098c0:	6823      	ldr	r3, [r4, #0]
 80098c2:	1c5a      	adds	r2, r3, #1
 80098c4:	6022      	str	r2, [r4, #0]
 80098c6:	701e      	strb	r6, [r3, #0]
 80098c8:	6962      	ldr	r2, [r4, #20]
 80098ca:	1c43      	adds	r3, r0, #1
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d004      	beq.n	80098da <__swbuf_r+0x6e>
 80098d0:	89a3      	ldrh	r3, [r4, #12]
 80098d2:	07db      	lsls	r3, r3, #31
 80098d4:	d5e1      	bpl.n	800989a <__swbuf_r+0x2e>
 80098d6:	2e0a      	cmp	r6, #10
 80098d8:	d1df      	bne.n	800989a <__swbuf_r+0x2e>
 80098da:	4621      	mov	r1, r4
 80098dc:	4628      	mov	r0, r5
 80098de:	f7ff fddf 	bl	80094a0 <_fflush_r>
 80098e2:	2800      	cmp	r0, #0
 80098e4:	d0d9      	beq.n	800989a <__swbuf_r+0x2e>
 80098e6:	e7d6      	b.n	8009896 <__swbuf_r+0x2a>

080098e8 <__swsetup_r>:
 80098e8:	b538      	push	{r3, r4, r5, lr}
 80098ea:	4b29      	ldr	r3, [pc, #164]	@ (8009990 <__swsetup_r+0xa8>)
 80098ec:	4605      	mov	r5, r0
 80098ee:	6818      	ldr	r0, [r3, #0]
 80098f0:	460c      	mov	r4, r1
 80098f2:	b118      	cbz	r0, 80098fc <__swsetup_r+0x14>
 80098f4:	6a03      	ldr	r3, [r0, #32]
 80098f6:	b90b      	cbnz	r3, 80098fc <__swsetup_r+0x14>
 80098f8:	f7ff f816 	bl	8008928 <__sinit>
 80098fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009900:	0719      	lsls	r1, r3, #28
 8009902:	d422      	bmi.n	800994a <__swsetup_r+0x62>
 8009904:	06da      	lsls	r2, r3, #27
 8009906:	d407      	bmi.n	8009918 <__swsetup_r+0x30>
 8009908:	2209      	movs	r2, #9
 800990a:	602a      	str	r2, [r5, #0]
 800990c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009910:	f04f 30ff 	mov.w	r0, #4294967295
 8009914:	81a3      	strh	r3, [r4, #12]
 8009916:	e033      	b.n	8009980 <__swsetup_r+0x98>
 8009918:	0758      	lsls	r0, r3, #29
 800991a:	d512      	bpl.n	8009942 <__swsetup_r+0x5a>
 800991c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800991e:	b141      	cbz	r1, 8009932 <__swsetup_r+0x4a>
 8009920:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009924:	4299      	cmp	r1, r3
 8009926:	d002      	beq.n	800992e <__swsetup_r+0x46>
 8009928:	4628      	mov	r0, r5
 800992a:	f7ff f953 	bl	8008bd4 <_free_r>
 800992e:	2300      	movs	r3, #0
 8009930:	6363      	str	r3, [r4, #52]	@ 0x34
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009938:	81a3      	strh	r3, [r4, #12]
 800993a:	2300      	movs	r3, #0
 800993c:	6063      	str	r3, [r4, #4]
 800993e:	6923      	ldr	r3, [r4, #16]
 8009940:	6023      	str	r3, [r4, #0]
 8009942:	89a3      	ldrh	r3, [r4, #12]
 8009944:	f043 0308 	orr.w	r3, r3, #8
 8009948:	81a3      	strh	r3, [r4, #12]
 800994a:	6923      	ldr	r3, [r4, #16]
 800994c:	b94b      	cbnz	r3, 8009962 <__swsetup_r+0x7a>
 800994e:	89a3      	ldrh	r3, [r4, #12]
 8009950:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009954:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009958:	d003      	beq.n	8009962 <__swsetup_r+0x7a>
 800995a:	4621      	mov	r1, r4
 800995c:	4628      	mov	r0, r5
 800995e:	f000 f88a 	bl	8009a76 <__smakebuf_r>
 8009962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009966:	f013 0201 	ands.w	r2, r3, #1
 800996a:	d00a      	beq.n	8009982 <__swsetup_r+0x9a>
 800996c:	2200      	movs	r2, #0
 800996e:	60a2      	str	r2, [r4, #8]
 8009970:	6962      	ldr	r2, [r4, #20]
 8009972:	4252      	negs	r2, r2
 8009974:	61a2      	str	r2, [r4, #24]
 8009976:	6922      	ldr	r2, [r4, #16]
 8009978:	b942      	cbnz	r2, 800998c <__swsetup_r+0xa4>
 800997a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800997e:	d1c5      	bne.n	800990c <__swsetup_r+0x24>
 8009980:	bd38      	pop	{r3, r4, r5, pc}
 8009982:	0799      	lsls	r1, r3, #30
 8009984:	bf58      	it	pl
 8009986:	6962      	ldrpl	r2, [r4, #20]
 8009988:	60a2      	str	r2, [r4, #8]
 800998a:	e7f4      	b.n	8009976 <__swsetup_r+0x8e>
 800998c:	2000      	movs	r0, #0
 800998e:	e7f7      	b.n	8009980 <__swsetup_r+0x98>
 8009990:	20000030 	.word	0x20000030

08009994 <_raise_r>:
 8009994:	291f      	cmp	r1, #31
 8009996:	b538      	push	{r3, r4, r5, lr}
 8009998:	4605      	mov	r5, r0
 800999a:	460c      	mov	r4, r1
 800999c:	d904      	bls.n	80099a8 <_raise_r+0x14>
 800999e:	2316      	movs	r3, #22
 80099a0:	6003      	str	r3, [r0, #0]
 80099a2:	f04f 30ff 	mov.w	r0, #4294967295
 80099a6:	bd38      	pop	{r3, r4, r5, pc}
 80099a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80099aa:	b112      	cbz	r2, 80099b2 <_raise_r+0x1e>
 80099ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099b0:	b94b      	cbnz	r3, 80099c6 <_raise_r+0x32>
 80099b2:	4628      	mov	r0, r5
 80099b4:	f000 f830 	bl	8009a18 <_getpid_r>
 80099b8:	4622      	mov	r2, r4
 80099ba:	4601      	mov	r1, r0
 80099bc:	4628      	mov	r0, r5
 80099be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099c2:	f000 b817 	b.w	80099f4 <_kill_r>
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d00a      	beq.n	80099e0 <_raise_r+0x4c>
 80099ca:	1c59      	adds	r1, r3, #1
 80099cc:	d103      	bne.n	80099d6 <_raise_r+0x42>
 80099ce:	2316      	movs	r3, #22
 80099d0:	6003      	str	r3, [r0, #0]
 80099d2:	2001      	movs	r0, #1
 80099d4:	e7e7      	b.n	80099a6 <_raise_r+0x12>
 80099d6:	2100      	movs	r1, #0
 80099d8:	4620      	mov	r0, r4
 80099da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80099de:	4798      	blx	r3
 80099e0:	2000      	movs	r0, #0
 80099e2:	e7e0      	b.n	80099a6 <_raise_r+0x12>

080099e4 <raise>:
 80099e4:	4b02      	ldr	r3, [pc, #8]	@ (80099f0 <raise+0xc>)
 80099e6:	4601      	mov	r1, r0
 80099e8:	6818      	ldr	r0, [r3, #0]
 80099ea:	f7ff bfd3 	b.w	8009994 <_raise_r>
 80099ee:	bf00      	nop
 80099f0:	20000030 	.word	0x20000030

080099f4 <_kill_r>:
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	2300      	movs	r3, #0
 80099f8:	4d06      	ldr	r5, [pc, #24]	@ (8009a14 <_kill_r+0x20>)
 80099fa:	4604      	mov	r4, r0
 80099fc:	4608      	mov	r0, r1
 80099fe:	4611      	mov	r1, r2
 8009a00:	602b      	str	r3, [r5, #0]
 8009a02:	f7fb ff1e 	bl	8005842 <_kill>
 8009a06:	1c43      	adds	r3, r0, #1
 8009a08:	d102      	bne.n	8009a10 <_kill_r+0x1c>
 8009a0a:	682b      	ldr	r3, [r5, #0]
 8009a0c:	b103      	cbz	r3, 8009a10 <_kill_r+0x1c>
 8009a0e:	6023      	str	r3, [r4, #0]
 8009a10:	bd38      	pop	{r3, r4, r5, pc}
 8009a12:	bf00      	nop
 8009a14:	200040f8 	.word	0x200040f8

08009a18 <_getpid_r>:
 8009a18:	f7fb bf0c 	b.w	8005834 <_getpid>

08009a1c <_malloc_usable_size_r>:
 8009a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a20:	1f18      	subs	r0, r3, #4
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	bfbc      	itt	lt
 8009a26:	580b      	ldrlt	r3, [r1, r0]
 8009a28:	18c0      	addlt	r0, r0, r3
 8009a2a:	4770      	bx	lr

08009a2c <__swhatbuf_r>:
 8009a2c:	b570      	push	{r4, r5, r6, lr}
 8009a2e:	460c      	mov	r4, r1
 8009a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a34:	4615      	mov	r5, r2
 8009a36:	2900      	cmp	r1, #0
 8009a38:	461e      	mov	r6, r3
 8009a3a:	b096      	sub	sp, #88	@ 0x58
 8009a3c:	da0c      	bge.n	8009a58 <__swhatbuf_r+0x2c>
 8009a3e:	89a3      	ldrh	r3, [r4, #12]
 8009a40:	2100      	movs	r1, #0
 8009a42:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a46:	bf14      	ite	ne
 8009a48:	2340      	movne	r3, #64	@ 0x40
 8009a4a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a4e:	2000      	movs	r0, #0
 8009a50:	6031      	str	r1, [r6, #0]
 8009a52:	602b      	str	r3, [r5, #0]
 8009a54:	b016      	add	sp, #88	@ 0x58
 8009a56:	bd70      	pop	{r4, r5, r6, pc}
 8009a58:	466a      	mov	r2, sp
 8009a5a:	f000 f849 	bl	8009af0 <_fstat_r>
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	dbed      	blt.n	8009a3e <__swhatbuf_r+0x12>
 8009a62:	9901      	ldr	r1, [sp, #4]
 8009a64:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009a68:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009a6c:	4259      	negs	r1, r3
 8009a6e:	4159      	adcs	r1, r3
 8009a70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a74:	e7eb      	b.n	8009a4e <__swhatbuf_r+0x22>

08009a76 <__smakebuf_r>:
 8009a76:	898b      	ldrh	r3, [r1, #12]
 8009a78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a7a:	079d      	lsls	r5, r3, #30
 8009a7c:	4606      	mov	r6, r0
 8009a7e:	460c      	mov	r4, r1
 8009a80:	d507      	bpl.n	8009a92 <__smakebuf_r+0x1c>
 8009a82:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a86:	6023      	str	r3, [r4, #0]
 8009a88:	6123      	str	r3, [r4, #16]
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	6163      	str	r3, [r4, #20]
 8009a8e:	b003      	add	sp, #12
 8009a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a92:	466a      	mov	r2, sp
 8009a94:	ab01      	add	r3, sp, #4
 8009a96:	f7ff ffc9 	bl	8009a2c <__swhatbuf_r>
 8009a9a:	9f00      	ldr	r7, [sp, #0]
 8009a9c:	4605      	mov	r5, r0
 8009a9e:	4639      	mov	r1, r7
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	f7ff f909 	bl	8008cb8 <_malloc_r>
 8009aa6:	b948      	cbnz	r0, 8009abc <__smakebuf_r+0x46>
 8009aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aac:	059a      	lsls	r2, r3, #22
 8009aae:	d4ee      	bmi.n	8009a8e <__smakebuf_r+0x18>
 8009ab0:	f023 0303 	bic.w	r3, r3, #3
 8009ab4:	f043 0302 	orr.w	r3, r3, #2
 8009ab8:	81a3      	strh	r3, [r4, #12]
 8009aba:	e7e2      	b.n	8009a82 <__smakebuf_r+0xc>
 8009abc:	89a3      	ldrh	r3, [r4, #12]
 8009abe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ac6:	81a3      	strh	r3, [r4, #12]
 8009ac8:	9b01      	ldr	r3, [sp, #4]
 8009aca:	6020      	str	r0, [r4, #0]
 8009acc:	b15b      	cbz	r3, 8009ae6 <__smakebuf_r+0x70>
 8009ace:	4630      	mov	r0, r6
 8009ad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ad4:	f000 f81e 	bl	8009b14 <_isatty_r>
 8009ad8:	b128      	cbz	r0, 8009ae6 <__smakebuf_r+0x70>
 8009ada:	89a3      	ldrh	r3, [r4, #12]
 8009adc:	f023 0303 	bic.w	r3, r3, #3
 8009ae0:	f043 0301 	orr.w	r3, r3, #1
 8009ae4:	81a3      	strh	r3, [r4, #12]
 8009ae6:	89a3      	ldrh	r3, [r4, #12]
 8009ae8:	431d      	orrs	r5, r3
 8009aea:	81a5      	strh	r5, [r4, #12]
 8009aec:	e7cf      	b.n	8009a8e <__smakebuf_r+0x18>
	...

08009af0 <_fstat_r>:
 8009af0:	b538      	push	{r3, r4, r5, lr}
 8009af2:	2300      	movs	r3, #0
 8009af4:	4d06      	ldr	r5, [pc, #24]	@ (8009b10 <_fstat_r+0x20>)
 8009af6:	4604      	mov	r4, r0
 8009af8:	4608      	mov	r0, r1
 8009afa:	4611      	mov	r1, r2
 8009afc:	602b      	str	r3, [r5, #0]
 8009afe:	f7fb feff 	bl	8005900 <_fstat>
 8009b02:	1c43      	adds	r3, r0, #1
 8009b04:	d102      	bne.n	8009b0c <_fstat_r+0x1c>
 8009b06:	682b      	ldr	r3, [r5, #0]
 8009b08:	b103      	cbz	r3, 8009b0c <_fstat_r+0x1c>
 8009b0a:	6023      	str	r3, [r4, #0]
 8009b0c:	bd38      	pop	{r3, r4, r5, pc}
 8009b0e:	bf00      	nop
 8009b10:	200040f8 	.word	0x200040f8

08009b14 <_isatty_r>:
 8009b14:	b538      	push	{r3, r4, r5, lr}
 8009b16:	2300      	movs	r3, #0
 8009b18:	4d05      	ldr	r5, [pc, #20]	@ (8009b30 <_isatty_r+0x1c>)
 8009b1a:	4604      	mov	r4, r0
 8009b1c:	4608      	mov	r0, r1
 8009b1e:	602b      	str	r3, [r5, #0]
 8009b20:	f7fb fefd 	bl	800591e <_isatty>
 8009b24:	1c43      	adds	r3, r0, #1
 8009b26:	d102      	bne.n	8009b2e <_isatty_r+0x1a>
 8009b28:	682b      	ldr	r3, [r5, #0]
 8009b2a:	b103      	cbz	r3, 8009b2e <_isatty_r+0x1a>
 8009b2c:	6023      	str	r3, [r4, #0]
 8009b2e:	bd38      	pop	{r3, r4, r5, pc}
 8009b30:	200040f8 	.word	0x200040f8

08009b34 <powf>:
 8009b34:	b570      	push	{r4, r5, r6, lr}
 8009b36:	460c      	mov	r4, r1
 8009b38:	4606      	mov	r6, r0
 8009b3a:	f000 fa43 	bl	8009fc4 <__ieee754_powf>
 8009b3e:	4621      	mov	r1, r4
 8009b40:	4605      	mov	r5, r0
 8009b42:	4620      	mov	r0, r4
 8009b44:	f7f6 fde8 	bl	8000718 <__aeabi_fcmpun>
 8009b48:	bb68      	cbnz	r0, 8009ba6 <powf+0x72>
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	f7f6 fdb1 	bl	80006b4 <__aeabi_fcmpeq>
 8009b52:	b190      	cbz	r0, 8009b7a <powf+0x46>
 8009b54:	2100      	movs	r1, #0
 8009b56:	4620      	mov	r0, r4
 8009b58:	f7f6 fdac 	bl	80006b4 <__aeabi_fcmpeq>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	d133      	bne.n	8009bc8 <powf+0x94>
 8009b60:	4620      	mov	r0, r4
 8009b62:	f000 f8c1 	bl	8009ce8 <finitef>
 8009b66:	b1f0      	cbz	r0, 8009ba6 <powf+0x72>
 8009b68:	2100      	movs	r1, #0
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	f7f6 fdac 	bl	80006c8 <__aeabi_fcmplt>
 8009b70:	b1c8      	cbz	r0, 8009ba6 <powf+0x72>
 8009b72:	f7fe ffd5 	bl	8008b20 <__errno>
 8009b76:	2322      	movs	r3, #34	@ 0x22
 8009b78:	e014      	b.n	8009ba4 <powf+0x70>
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	f000 f8b4 	bl	8009ce8 <finitef>
 8009b80:	b998      	cbnz	r0, 8009baa <powf+0x76>
 8009b82:	4630      	mov	r0, r6
 8009b84:	f000 f8b0 	bl	8009ce8 <finitef>
 8009b88:	b178      	cbz	r0, 8009baa <powf+0x76>
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f000 f8ac 	bl	8009ce8 <finitef>
 8009b90:	b158      	cbz	r0, 8009baa <powf+0x76>
 8009b92:	4629      	mov	r1, r5
 8009b94:	4628      	mov	r0, r5
 8009b96:	f7f6 fdbf 	bl	8000718 <__aeabi_fcmpun>
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	d0e9      	beq.n	8009b72 <powf+0x3e>
 8009b9e:	f7fe ffbf 	bl	8008b20 <__errno>
 8009ba2:	2321      	movs	r3, #33	@ 0x21
 8009ba4:	6003      	str	r3, [r0, #0]
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	bd70      	pop	{r4, r5, r6, pc}
 8009baa:	2100      	movs	r1, #0
 8009bac:	4628      	mov	r0, r5
 8009bae:	f7f6 fd81 	bl	80006b4 <__aeabi_fcmpeq>
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d0f7      	beq.n	8009ba6 <powf+0x72>
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	f000 f896 	bl	8009ce8 <finitef>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	d0f2      	beq.n	8009ba6 <powf+0x72>
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	f000 f891 	bl	8009ce8 <finitef>
 8009bc6:	e7d3      	b.n	8009b70 <powf+0x3c>
 8009bc8:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8009bcc:	e7eb      	b.n	8009ba6 <powf+0x72>

08009bce <sqrtf>:
 8009bce:	b538      	push	{r3, r4, r5, lr}
 8009bd0:	4605      	mov	r5, r0
 8009bd2:	f000 f891 	bl	8009cf8 <__ieee754_sqrtf>
 8009bd6:	4629      	mov	r1, r5
 8009bd8:	4604      	mov	r4, r0
 8009bda:	4628      	mov	r0, r5
 8009bdc:	f7f6 fd9c 	bl	8000718 <__aeabi_fcmpun>
 8009be0:	b968      	cbnz	r0, 8009bfe <sqrtf+0x30>
 8009be2:	2100      	movs	r1, #0
 8009be4:	4628      	mov	r0, r5
 8009be6:	f7f6 fd6f 	bl	80006c8 <__aeabi_fcmplt>
 8009bea:	b140      	cbz	r0, 8009bfe <sqrtf+0x30>
 8009bec:	f7fe ff98 	bl	8008b20 <__errno>
 8009bf0:	2321      	movs	r3, #33	@ 0x21
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	6003      	str	r3, [r0, #0]
 8009bf6:	4608      	mov	r0, r1
 8009bf8:	f7f6 fc7c 	bl	80004f4 <__aeabi_fdiv>
 8009bfc:	4604      	mov	r4, r0
 8009bfe:	4620      	mov	r0, r4
 8009c00:	bd38      	pop	{r3, r4, r5, pc}
	...

08009c04 <cosf>:
 8009c04:	b507      	push	{r0, r1, r2, lr}
 8009c06:	4a1a      	ldr	r2, [pc, #104]	@ (8009c70 <cosf+0x6c>)
 8009c08:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	4601      	mov	r1, r0
 8009c10:	d805      	bhi.n	8009c1e <cosf+0x1a>
 8009c12:	2100      	movs	r1, #0
 8009c14:	b003      	add	sp, #12
 8009c16:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c1a:	f000 b8dd 	b.w	8009dd8 <__kernel_cosf>
 8009c1e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009c22:	d304      	bcc.n	8009c2e <cosf+0x2a>
 8009c24:	f7f6 faa8 	bl	8000178 <__aeabi_fsub>
 8009c28:	b003      	add	sp, #12
 8009c2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c2e:	4669      	mov	r1, sp
 8009c30:	f000 fd28 	bl	800a684 <__ieee754_rem_pio2f>
 8009c34:	f000 0203 	and.w	r2, r0, #3
 8009c38:	2a01      	cmp	r2, #1
 8009c3a:	d007      	beq.n	8009c4c <cosf+0x48>
 8009c3c:	2a02      	cmp	r2, #2
 8009c3e:	d00c      	beq.n	8009c5a <cosf+0x56>
 8009c40:	b982      	cbnz	r2, 8009c64 <cosf+0x60>
 8009c42:	9901      	ldr	r1, [sp, #4]
 8009c44:	9800      	ldr	r0, [sp, #0]
 8009c46:	f000 f8c7 	bl	8009dd8 <__kernel_cosf>
 8009c4a:	e7ed      	b.n	8009c28 <cosf+0x24>
 8009c4c:	9901      	ldr	r1, [sp, #4]
 8009c4e:	9800      	ldr	r0, [sp, #0]
 8009c50:	f000 f942 	bl	8009ed8 <__kernel_sinf>
 8009c54:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8009c58:	e7e6      	b.n	8009c28 <cosf+0x24>
 8009c5a:	9901      	ldr	r1, [sp, #4]
 8009c5c:	9800      	ldr	r0, [sp, #0]
 8009c5e:	f000 f8bb 	bl	8009dd8 <__kernel_cosf>
 8009c62:	e7f7      	b.n	8009c54 <cosf+0x50>
 8009c64:	2201      	movs	r2, #1
 8009c66:	9901      	ldr	r1, [sp, #4]
 8009c68:	9800      	ldr	r0, [sp, #0]
 8009c6a:	f000 f935 	bl	8009ed8 <__kernel_sinf>
 8009c6e:	e7db      	b.n	8009c28 <cosf+0x24>
 8009c70:	3f490fd8 	.word	0x3f490fd8

08009c74 <sinf>:
 8009c74:	b507      	push	{r0, r1, r2, lr}
 8009c76:	4a1b      	ldr	r2, [pc, #108]	@ (8009ce4 <sinf+0x70>)
 8009c78:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	4601      	mov	r1, r0
 8009c80:	d806      	bhi.n	8009c90 <sinf+0x1c>
 8009c82:	2200      	movs	r2, #0
 8009c84:	2100      	movs	r1, #0
 8009c86:	b003      	add	sp, #12
 8009c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c8c:	f000 b924 	b.w	8009ed8 <__kernel_sinf>
 8009c90:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009c94:	d304      	bcc.n	8009ca0 <sinf+0x2c>
 8009c96:	f7f6 fa6f 	bl	8000178 <__aeabi_fsub>
 8009c9a:	b003      	add	sp, #12
 8009c9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ca0:	4669      	mov	r1, sp
 8009ca2:	f000 fcef 	bl	800a684 <__ieee754_rem_pio2f>
 8009ca6:	f000 0003 	and.w	r0, r0, #3
 8009caa:	2801      	cmp	r0, #1
 8009cac:	d008      	beq.n	8009cc0 <sinf+0x4c>
 8009cae:	2802      	cmp	r0, #2
 8009cb0:	d00b      	beq.n	8009cca <sinf+0x56>
 8009cb2:	b990      	cbnz	r0, 8009cda <sinf+0x66>
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	9901      	ldr	r1, [sp, #4]
 8009cb8:	9800      	ldr	r0, [sp, #0]
 8009cba:	f000 f90d 	bl	8009ed8 <__kernel_sinf>
 8009cbe:	e7ec      	b.n	8009c9a <sinf+0x26>
 8009cc0:	9901      	ldr	r1, [sp, #4]
 8009cc2:	9800      	ldr	r0, [sp, #0]
 8009cc4:	f000 f888 	bl	8009dd8 <__kernel_cosf>
 8009cc8:	e7e7      	b.n	8009c9a <sinf+0x26>
 8009cca:	2201      	movs	r2, #1
 8009ccc:	9901      	ldr	r1, [sp, #4]
 8009cce:	9800      	ldr	r0, [sp, #0]
 8009cd0:	f000 f902 	bl	8009ed8 <__kernel_sinf>
 8009cd4:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8009cd8:	e7df      	b.n	8009c9a <sinf+0x26>
 8009cda:	9901      	ldr	r1, [sp, #4]
 8009cdc:	9800      	ldr	r0, [sp, #0]
 8009cde:	f000 f87b 	bl	8009dd8 <__kernel_cosf>
 8009ce2:	e7f7      	b.n	8009cd4 <sinf+0x60>
 8009ce4:	3f490fd8 	.word	0x3f490fd8

08009ce8 <finitef>:
 8009ce8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8009cec:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8009cf0:	bfac      	ite	ge
 8009cf2:	2000      	movge	r0, #0
 8009cf4:	2001      	movlt	r0, #1
 8009cf6:	4770      	bx	lr

08009cf8 <__ieee754_sqrtf>:
 8009cf8:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8009cfc:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d04:	4603      	mov	r3, r0
 8009d06:	4604      	mov	r4, r0
 8009d08:	d30a      	bcc.n	8009d20 <__ieee754_sqrtf+0x28>
 8009d0a:	4601      	mov	r1, r0
 8009d0c:	f7f6 fb3e 	bl	800038c <__aeabi_fmul>
 8009d10:	4601      	mov	r1, r0
 8009d12:	4620      	mov	r0, r4
 8009d14:	f7f6 fa32 	bl	800017c <__addsf3>
 8009d18:	4604      	mov	r4, r0
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d20:	2a00      	cmp	r2, #0
 8009d22:	d0fa      	beq.n	8009d1a <__ieee754_sqrtf+0x22>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	da06      	bge.n	8009d36 <__ieee754_sqrtf+0x3e>
 8009d28:	4601      	mov	r1, r0
 8009d2a:	f7f6 fa25 	bl	8000178 <__aeabi_fsub>
 8009d2e:	4601      	mov	r1, r0
 8009d30:	f7f6 fbe0 	bl	80004f4 <__aeabi_fdiv>
 8009d34:	e7f0      	b.n	8009d18 <__ieee754_sqrtf+0x20>
 8009d36:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8009d3a:	d03c      	beq.n	8009db6 <__ieee754_sqrtf+0xbe>
 8009d3c:	15c2      	asrs	r2, r0, #23
 8009d3e:	2400      	movs	r4, #0
 8009d40:	2019      	movs	r0, #25
 8009d42:	4626      	mov	r6, r4
 8009d44:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8009d48:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009d4c:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8009d50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009d54:	07d2      	lsls	r2, r2, #31
 8009d56:	bf58      	it	pl
 8009d58:	005b      	lslpl	r3, r3, #1
 8009d5a:	106d      	asrs	r5, r5, #1
 8009d5c:	005b      	lsls	r3, r3, #1
 8009d5e:	1872      	adds	r2, r6, r1
 8009d60:	429a      	cmp	r2, r3
 8009d62:	bfcf      	iteee	gt
 8009d64:	461a      	movgt	r2, r3
 8009d66:	1856      	addle	r6, r2, r1
 8009d68:	1864      	addle	r4, r4, r1
 8009d6a:	1a9a      	suble	r2, r3, r2
 8009d6c:	3801      	subs	r0, #1
 8009d6e:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8009d72:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009d76:	d1f2      	bne.n	8009d5e <__ieee754_sqrtf+0x66>
 8009d78:	b1ba      	cbz	r2, 8009daa <__ieee754_sqrtf+0xb2>
 8009d7a:	4e15      	ldr	r6, [pc, #84]	@ (8009dd0 <__ieee754_sqrtf+0xd8>)
 8009d7c:	4f15      	ldr	r7, [pc, #84]	@ (8009dd4 <__ieee754_sqrtf+0xdc>)
 8009d7e:	6830      	ldr	r0, [r6, #0]
 8009d80:	6839      	ldr	r1, [r7, #0]
 8009d82:	f7f6 f9f9 	bl	8000178 <__aeabi_fsub>
 8009d86:	f8d6 8000 	ldr.w	r8, [r6]
 8009d8a:	4601      	mov	r1, r0
 8009d8c:	4640      	mov	r0, r8
 8009d8e:	f7f6 fca5 	bl	80006dc <__aeabi_fcmple>
 8009d92:	b150      	cbz	r0, 8009daa <__ieee754_sqrtf+0xb2>
 8009d94:	6830      	ldr	r0, [r6, #0]
 8009d96:	6839      	ldr	r1, [r7, #0]
 8009d98:	f7f6 f9f0 	bl	800017c <__addsf3>
 8009d9c:	6836      	ldr	r6, [r6, #0]
 8009d9e:	4601      	mov	r1, r0
 8009da0:	4630      	mov	r0, r6
 8009da2:	f7f6 fc91 	bl	80006c8 <__aeabi_fcmplt>
 8009da6:	b170      	cbz	r0, 8009dc6 <__ieee754_sqrtf+0xce>
 8009da8:	3402      	adds	r4, #2
 8009daa:	1064      	asrs	r4, r4, #1
 8009dac:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8009db0:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8009db4:	e7b1      	b.n	8009d1a <__ieee754_sqrtf+0x22>
 8009db6:	005b      	lsls	r3, r3, #1
 8009db8:	0218      	lsls	r0, r3, #8
 8009dba:	460a      	mov	r2, r1
 8009dbc:	f101 0101 	add.w	r1, r1, #1
 8009dc0:	d5f9      	bpl.n	8009db6 <__ieee754_sqrtf+0xbe>
 8009dc2:	4252      	negs	r2, r2
 8009dc4:	e7bb      	b.n	8009d3e <__ieee754_sqrtf+0x46>
 8009dc6:	3401      	adds	r4, #1
 8009dc8:	f024 0401 	bic.w	r4, r4, #1
 8009dcc:	e7ed      	b.n	8009daa <__ieee754_sqrtf+0xb2>
 8009dce:	bf00      	nop
 8009dd0:	0800b684 	.word	0x0800b684
 8009dd4:	0800b680 	.word	0x0800b680

08009dd8 <__kernel_cosf>:
 8009dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ddc:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8009de0:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 8009de4:	4606      	mov	r6, r0
 8009de6:	4688      	mov	r8, r1
 8009de8:	d203      	bcs.n	8009df2 <__kernel_cosf+0x1a>
 8009dea:	f7f6 fcab 	bl	8000744 <__aeabi_f2iz>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	d05c      	beq.n	8009eac <__kernel_cosf+0xd4>
 8009df2:	4631      	mov	r1, r6
 8009df4:	4630      	mov	r0, r6
 8009df6:	f7f6 fac9 	bl	800038c <__aeabi_fmul>
 8009dfa:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8009dfe:	4604      	mov	r4, r0
 8009e00:	f7f6 fac4 	bl	800038c <__aeabi_fmul>
 8009e04:	492b      	ldr	r1, [pc, #172]	@ (8009eb4 <__kernel_cosf+0xdc>)
 8009e06:	4607      	mov	r7, r0
 8009e08:	4620      	mov	r0, r4
 8009e0a:	f7f6 fabf 	bl	800038c <__aeabi_fmul>
 8009e0e:	492a      	ldr	r1, [pc, #168]	@ (8009eb8 <__kernel_cosf+0xe0>)
 8009e10:	f7f6 f9b4 	bl	800017c <__addsf3>
 8009e14:	4621      	mov	r1, r4
 8009e16:	f7f6 fab9 	bl	800038c <__aeabi_fmul>
 8009e1a:	4928      	ldr	r1, [pc, #160]	@ (8009ebc <__kernel_cosf+0xe4>)
 8009e1c:	f7f6 f9ac 	bl	8000178 <__aeabi_fsub>
 8009e20:	4621      	mov	r1, r4
 8009e22:	f7f6 fab3 	bl	800038c <__aeabi_fmul>
 8009e26:	4926      	ldr	r1, [pc, #152]	@ (8009ec0 <__kernel_cosf+0xe8>)
 8009e28:	f7f6 f9a8 	bl	800017c <__addsf3>
 8009e2c:	4621      	mov	r1, r4
 8009e2e:	f7f6 faad 	bl	800038c <__aeabi_fmul>
 8009e32:	4924      	ldr	r1, [pc, #144]	@ (8009ec4 <__kernel_cosf+0xec>)
 8009e34:	f7f6 f9a0 	bl	8000178 <__aeabi_fsub>
 8009e38:	4621      	mov	r1, r4
 8009e3a:	f7f6 faa7 	bl	800038c <__aeabi_fmul>
 8009e3e:	4922      	ldr	r1, [pc, #136]	@ (8009ec8 <__kernel_cosf+0xf0>)
 8009e40:	f7f6 f99c 	bl	800017c <__addsf3>
 8009e44:	4621      	mov	r1, r4
 8009e46:	f7f6 faa1 	bl	800038c <__aeabi_fmul>
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	f7f6 fa9e 	bl	800038c <__aeabi_fmul>
 8009e50:	4641      	mov	r1, r8
 8009e52:	4604      	mov	r4, r0
 8009e54:	4630      	mov	r0, r6
 8009e56:	f7f6 fa99 	bl	800038c <__aeabi_fmul>
 8009e5a:	4601      	mov	r1, r0
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f7f6 f98b 	bl	8000178 <__aeabi_fsub>
 8009e62:	4b1a      	ldr	r3, [pc, #104]	@ (8009ecc <__kernel_cosf+0xf4>)
 8009e64:	4604      	mov	r4, r0
 8009e66:	429d      	cmp	r5, r3
 8009e68:	d80a      	bhi.n	8009e80 <__kernel_cosf+0xa8>
 8009e6a:	4601      	mov	r1, r0
 8009e6c:	4638      	mov	r0, r7
 8009e6e:	f7f6 f983 	bl	8000178 <__aeabi_fsub>
 8009e72:	4601      	mov	r1, r0
 8009e74:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009e78:	f7f6 f97e 	bl	8000178 <__aeabi_fsub>
 8009e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e80:	4b13      	ldr	r3, [pc, #76]	@ (8009ed0 <__kernel_cosf+0xf8>)
 8009e82:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009e86:	429d      	cmp	r5, r3
 8009e88:	bf8c      	ite	hi
 8009e8a:	4d12      	ldrhi	r5, [pc, #72]	@ (8009ed4 <__kernel_cosf+0xfc>)
 8009e8c:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 8009e90:	4629      	mov	r1, r5
 8009e92:	f7f6 f971 	bl	8000178 <__aeabi_fsub>
 8009e96:	4629      	mov	r1, r5
 8009e98:	4606      	mov	r6, r0
 8009e9a:	4638      	mov	r0, r7
 8009e9c:	f7f6 f96c 	bl	8000178 <__aeabi_fsub>
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	f7f6 f969 	bl	8000178 <__aeabi_fsub>
 8009ea6:	4601      	mov	r1, r0
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	e7e5      	b.n	8009e78 <__kernel_cosf+0xa0>
 8009eac:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009eb0:	e7e4      	b.n	8009e7c <__kernel_cosf+0xa4>
 8009eb2:	bf00      	nop
 8009eb4:	ad47d74e 	.word	0xad47d74e
 8009eb8:	310f74f6 	.word	0x310f74f6
 8009ebc:	3493f27c 	.word	0x3493f27c
 8009ec0:	37d00d01 	.word	0x37d00d01
 8009ec4:	3ab60b61 	.word	0x3ab60b61
 8009ec8:	3d2aaaab 	.word	0x3d2aaaab
 8009ecc:	3e999999 	.word	0x3e999999
 8009ed0:	3f480000 	.word	0x3f480000
 8009ed4:	3e900000 	.word	0x3e900000

08009ed8 <__kernel_sinf>:
 8009ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009edc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8009ee0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8009ee4:	4604      	mov	r4, r0
 8009ee6:	460f      	mov	r7, r1
 8009ee8:	4691      	mov	r9, r2
 8009eea:	d203      	bcs.n	8009ef4 <__kernel_sinf+0x1c>
 8009eec:	f7f6 fc2a 	bl	8000744 <__aeabi_f2iz>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d035      	beq.n	8009f60 <__kernel_sinf+0x88>
 8009ef4:	4621      	mov	r1, r4
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f7f6 fa48 	bl	800038c <__aeabi_fmul>
 8009efc:	4605      	mov	r5, r0
 8009efe:	4601      	mov	r1, r0
 8009f00:	4620      	mov	r0, r4
 8009f02:	f7f6 fa43 	bl	800038c <__aeabi_fmul>
 8009f06:	4929      	ldr	r1, [pc, #164]	@ (8009fac <__kernel_sinf+0xd4>)
 8009f08:	4606      	mov	r6, r0
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	f7f6 fa3e 	bl	800038c <__aeabi_fmul>
 8009f10:	4927      	ldr	r1, [pc, #156]	@ (8009fb0 <__kernel_sinf+0xd8>)
 8009f12:	f7f6 f931 	bl	8000178 <__aeabi_fsub>
 8009f16:	4629      	mov	r1, r5
 8009f18:	f7f6 fa38 	bl	800038c <__aeabi_fmul>
 8009f1c:	4925      	ldr	r1, [pc, #148]	@ (8009fb4 <__kernel_sinf+0xdc>)
 8009f1e:	f7f6 f92d 	bl	800017c <__addsf3>
 8009f22:	4629      	mov	r1, r5
 8009f24:	f7f6 fa32 	bl	800038c <__aeabi_fmul>
 8009f28:	4923      	ldr	r1, [pc, #140]	@ (8009fb8 <__kernel_sinf+0xe0>)
 8009f2a:	f7f6 f925 	bl	8000178 <__aeabi_fsub>
 8009f2e:	4629      	mov	r1, r5
 8009f30:	f7f6 fa2c 	bl	800038c <__aeabi_fmul>
 8009f34:	4921      	ldr	r1, [pc, #132]	@ (8009fbc <__kernel_sinf+0xe4>)
 8009f36:	f7f6 f921 	bl	800017c <__addsf3>
 8009f3a:	4680      	mov	r8, r0
 8009f3c:	f1b9 0f00 	cmp.w	r9, #0
 8009f40:	d111      	bne.n	8009f66 <__kernel_sinf+0x8e>
 8009f42:	4601      	mov	r1, r0
 8009f44:	4628      	mov	r0, r5
 8009f46:	f7f6 fa21 	bl	800038c <__aeabi_fmul>
 8009f4a:	491d      	ldr	r1, [pc, #116]	@ (8009fc0 <__kernel_sinf+0xe8>)
 8009f4c:	f7f6 f914 	bl	8000178 <__aeabi_fsub>
 8009f50:	4631      	mov	r1, r6
 8009f52:	f7f6 fa1b 	bl	800038c <__aeabi_fmul>
 8009f56:	4601      	mov	r1, r0
 8009f58:	4620      	mov	r0, r4
 8009f5a:	f7f6 f90f 	bl	800017c <__addsf3>
 8009f5e:	4604      	mov	r4, r0
 8009f60:	4620      	mov	r0, r4
 8009f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f66:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8009f6a:	4638      	mov	r0, r7
 8009f6c:	f7f6 fa0e 	bl	800038c <__aeabi_fmul>
 8009f70:	4641      	mov	r1, r8
 8009f72:	4681      	mov	r9, r0
 8009f74:	4630      	mov	r0, r6
 8009f76:	f7f6 fa09 	bl	800038c <__aeabi_fmul>
 8009f7a:	4601      	mov	r1, r0
 8009f7c:	4648      	mov	r0, r9
 8009f7e:	f7f6 f8fb 	bl	8000178 <__aeabi_fsub>
 8009f82:	4629      	mov	r1, r5
 8009f84:	f7f6 fa02 	bl	800038c <__aeabi_fmul>
 8009f88:	4639      	mov	r1, r7
 8009f8a:	f7f6 f8f5 	bl	8000178 <__aeabi_fsub>
 8009f8e:	490c      	ldr	r1, [pc, #48]	@ (8009fc0 <__kernel_sinf+0xe8>)
 8009f90:	4605      	mov	r5, r0
 8009f92:	4630      	mov	r0, r6
 8009f94:	f7f6 f9fa 	bl	800038c <__aeabi_fmul>
 8009f98:	4601      	mov	r1, r0
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	f7f6 f8ee 	bl	800017c <__addsf3>
 8009fa0:	4601      	mov	r1, r0
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f7f6 f8e8 	bl	8000178 <__aeabi_fsub>
 8009fa8:	e7d9      	b.n	8009f5e <__kernel_sinf+0x86>
 8009faa:	bf00      	nop
 8009fac:	2f2ec9d3 	.word	0x2f2ec9d3
 8009fb0:	32d72f34 	.word	0x32d72f34
 8009fb4:	3638ef1b 	.word	0x3638ef1b
 8009fb8:	39500d01 	.word	0x39500d01
 8009fbc:	3c088889 	.word	0x3c088889
 8009fc0:	3e2aaaab 	.word	0x3e2aaaab

08009fc4 <__ieee754_powf>:
 8009fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc8:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 8009fcc:	4681      	mov	r9, r0
 8009fce:	460f      	mov	r7, r1
 8009fd0:	4606      	mov	r6, r0
 8009fd2:	460c      	mov	r4, r1
 8009fd4:	b087      	sub	sp, #28
 8009fd6:	d10c      	bne.n	8009ff2 <__ieee754_powf+0x2e>
 8009fd8:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 8009fdc:	0076      	lsls	r6, r6, #1
 8009fde:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8009fe2:	f240 8310 	bls.w	800a606 <__ieee754_powf+0x642>
 8009fe6:	4639      	mov	r1, r7
 8009fe8:	4648      	mov	r0, r9
 8009fea:	f7f6 f8c7 	bl	800017c <__addsf3>
 8009fee:	4601      	mov	r1, r0
 8009ff0:	e043      	b.n	800a07a <__ieee754_powf+0xb6>
 8009ff2:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8009ff6:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8009ffa:	d802      	bhi.n	800a002 <__ieee754_powf+0x3e>
 8009ffc:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800a000:	d908      	bls.n	800a014 <__ieee754_powf+0x50>
 800a002:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800a006:	d1ee      	bne.n	8009fe6 <__ieee754_powf+0x22>
 800a008:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800a00c:	0064      	lsls	r4, r4, #1
 800a00e:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800a012:	e7e6      	b.n	8009fe2 <__ieee754_powf+0x1e>
 800a014:	2800      	cmp	r0, #0
 800a016:	da1f      	bge.n	800a058 <__ieee754_powf+0x94>
 800a018:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 800a01c:	f080 82f8 	bcs.w	800a610 <__ieee754_powf+0x64c>
 800a020:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800a024:	d32f      	bcc.n	800a086 <__ieee754_powf+0xc2>
 800a026:	ea4f 53eb 	mov.w	r3, fp, asr #23
 800a02a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800a02e:	fa4b f503 	asr.w	r5, fp, r3
 800a032:	fa05 f303 	lsl.w	r3, r5, r3
 800a036:	455b      	cmp	r3, fp
 800a038:	d123      	bne.n	800a082 <__ieee754_powf+0xbe>
 800a03a:	f005 0501 	and.w	r5, r5, #1
 800a03e:	f1c5 0502 	rsb	r5, r5, #2
 800a042:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800a046:	d11f      	bne.n	800a088 <__ieee754_powf+0xc4>
 800a048:	2c00      	cmp	r4, #0
 800a04a:	4649      	mov	r1, r9
 800a04c:	da15      	bge.n	800a07a <__ieee754_powf+0xb6>
 800a04e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a052:	f7f6 fa4f 	bl	80004f4 <__aeabi_fdiv>
 800a056:	e7ca      	b.n	8009fee <__ieee754_powf+0x2a>
 800a058:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800a05c:	d111      	bne.n	800a082 <__ieee754_powf+0xbe>
 800a05e:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800a062:	f000 82d0 	beq.w	800a606 <__ieee754_powf+0x642>
 800a066:	d904      	bls.n	800a072 <__ieee754_powf+0xae>
 800a068:	2c00      	cmp	r4, #0
 800a06a:	f280 82cf 	bge.w	800a60c <__ieee754_powf+0x648>
 800a06e:	2100      	movs	r1, #0
 800a070:	e003      	b.n	800a07a <__ieee754_powf+0xb6>
 800a072:	2c00      	cmp	r4, #0
 800a074:	dafb      	bge.n	800a06e <__ieee754_powf+0xaa>
 800a076:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800a07a:	4608      	mov	r0, r1
 800a07c:	b007      	add	sp, #28
 800a07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a082:	2500      	movs	r5, #0
 800a084:	e7dd      	b.n	800a042 <__ieee754_powf+0x7e>
 800a086:	2500      	movs	r5, #0
 800a088:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800a08c:	d104      	bne.n	800a098 <__ieee754_powf+0xd4>
 800a08e:	4649      	mov	r1, r9
 800a090:	4648      	mov	r0, r9
 800a092:	f7f6 f97b 	bl	800038c <__aeabi_fmul>
 800a096:	e7aa      	b.n	8009fee <__ieee754_powf+0x2a>
 800a098:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800a09c:	f040 82bd 	bne.w	800a61a <__ieee754_powf+0x656>
 800a0a0:	2e00      	cmp	r6, #0
 800a0a2:	f2c0 82ba 	blt.w	800a61a <__ieee754_powf+0x656>
 800a0a6:	4648      	mov	r0, r9
 800a0a8:	b007      	add	sp, #28
 800a0aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ae:	f7ff be23 	b.w	8009cf8 <__ieee754_sqrtf>
 800a0b2:	2d01      	cmp	r5, #1
 800a0b4:	d1e1      	bne.n	800a07a <__ieee754_powf+0xb6>
 800a0b6:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800a0ba:	e798      	b.n	8009fee <__ieee754_powf+0x2a>
 800a0bc:	0ff3      	lsrs	r3, r6, #31
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	9303      	str	r3, [sp, #12]
 800a0c2:	432b      	orrs	r3, r5
 800a0c4:	d101      	bne.n	800a0ca <__ieee754_powf+0x106>
 800a0c6:	4649      	mov	r1, r9
 800a0c8:	e2c5      	b.n	800a656 <__ieee754_powf+0x692>
 800a0ca:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 800a0ce:	f240 809b 	bls.w	800a208 <__ieee754_powf+0x244>
 800a0d2:	4b46      	ldr	r3, [pc, #280]	@ (800a1ec <__ieee754_powf+0x228>)
 800a0d4:	4598      	cmp	r8, r3
 800a0d6:	d807      	bhi.n	800a0e8 <__ieee754_powf+0x124>
 800a0d8:	2c00      	cmp	r4, #0
 800a0da:	da0a      	bge.n	800a0f2 <__ieee754_powf+0x12e>
 800a0dc:	2000      	movs	r0, #0
 800a0de:	b007      	add	sp, #28
 800a0e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e4:	f000 bc9d 	b.w	800aa22 <__math_oflowf>
 800a0e8:	4b41      	ldr	r3, [pc, #260]	@ (800a1f0 <__ieee754_powf+0x22c>)
 800a0ea:	4598      	cmp	r8, r3
 800a0ec:	d907      	bls.n	800a0fe <__ieee754_powf+0x13a>
 800a0ee:	2c00      	cmp	r4, #0
 800a0f0:	dcf4      	bgt.n	800a0dc <__ieee754_powf+0x118>
 800a0f2:	2000      	movs	r0, #0
 800a0f4:	b007      	add	sp, #28
 800a0f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fa:	f000 bc8e 	b.w	800aa1a <__math_uflowf>
 800a0fe:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800a102:	f7f6 f839 	bl	8000178 <__aeabi_fsub>
 800a106:	493b      	ldr	r1, [pc, #236]	@ (800a1f4 <__ieee754_powf+0x230>)
 800a108:	4606      	mov	r6, r0
 800a10a:	f7f6 f93f 	bl	800038c <__aeabi_fmul>
 800a10e:	493a      	ldr	r1, [pc, #232]	@ (800a1f8 <__ieee754_powf+0x234>)
 800a110:	4680      	mov	r8, r0
 800a112:	4630      	mov	r0, r6
 800a114:	f7f6 f93a 	bl	800038c <__aeabi_fmul>
 800a118:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800a11c:	4681      	mov	r9, r0
 800a11e:	4630      	mov	r0, r6
 800a120:	f7f6 f934 	bl	800038c <__aeabi_fmul>
 800a124:	4601      	mov	r1, r0
 800a126:	4835      	ldr	r0, [pc, #212]	@ (800a1fc <__ieee754_powf+0x238>)
 800a128:	f7f6 f826 	bl	8000178 <__aeabi_fsub>
 800a12c:	4631      	mov	r1, r6
 800a12e:	f7f6 f92d 	bl	800038c <__aeabi_fmul>
 800a132:	4601      	mov	r1, r0
 800a134:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800a138:	f7f6 f81e 	bl	8000178 <__aeabi_fsub>
 800a13c:	4631      	mov	r1, r6
 800a13e:	4682      	mov	sl, r0
 800a140:	4630      	mov	r0, r6
 800a142:	f7f6 f923 	bl	800038c <__aeabi_fmul>
 800a146:	4601      	mov	r1, r0
 800a148:	4650      	mov	r0, sl
 800a14a:	f7f6 f91f 	bl	800038c <__aeabi_fmul>
 800a14e:	492c      	ldr	r1, [pc, #176]	@ (800a200 <__ieee754_powf+0x23c>)
 800a150:	f7f6 f91c 	bl	800038c <__aeabi_fmul>
 800a154:	4601      	mov	r1, r0
 800a156:	4648      	mov	r0, r9
 800a158:	f7f6 f80e 	bl	8000178 <__aeabi_fsub>
 800a15c:	4601      	mov	r1, r0
 800a15e:	4606      	mov	r6, r0
 800a160:	4640      	mov	r0, r8
 800a162:	f7f6 f80b 	bl	800017c <__addsf3>
 800a166:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800a16a:	f02b 0b0f 	bic.w	fp, fp, #15
 800a16e:	4641      	mov	r1, r8
 800a170:	4658      	mov	r0, fp
 800a172:	f7f6 f801 	bl	8000178 <__aeabi_fsub>
 800a176:	4601      	mov	r1, r0
 800a178:	4630      	mov	r0, r6
 800a17a:	f7f5 fffd 	bl	8000178 <__aeabi_fsub>
 800a17e:	9b03      	ldr	r3, [sp, #12]
 800a180:	3d01      	subs	r5, #1
 800a182:	f36f 040b 	bfc	r4, #0, #12
 800a186:	431d      	orrs	r5, r3
 800a188:	4606      	mov	r6, r0
 800a18a:	4621      	mov	r1, r4
 800a18c:	4638      	mov	r0, r7
 800a18e:	bf14      	ite	ne
 800a190:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 800a194:	4d1b      	ldreq	r5, [pc, #108]	@ (800a204 <__ieee754_powf+0x240>)
 800a196:	f7f5 ffef 	bl	8000178 <__aeabi_fsub>
 800a19a:	4659      	mov	r1, fp
 800a19c:	f7f6 f8f6 	bl	800038c <__aeabi_fmul>
 800a1a0:	4639      	mov	r1, r7
 800a1a2:	4680      	mov	r8, r0
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	f7f6 f8f1 	bl	800038c <__aeabi_fmul>
 800a1aa:	4601      	mov	r1, r0
 800a1ac:	4640      	mov	r0, r8
 800a1ae:	f7f5 ffe5 	bl	800017c <__addsf3>
 800a1b2:	4621      	mov	r1, r4
 800a1b4:	4606      	mov	r6, r0
 800a1b6:	4658      	mov	r0, fp
 800a1b8:	f7f6 f8e8 	bl	800038c <__aeabi_fmul>
 800a1bc:	4601      	mov	r1, r0
 800a1be:	4607      	mov	r7, r0
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f7f5 ffdb 	bl	800017c <__addsf3>
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	4604      	mov	r4, r0
 800a1ca:	4680      	mov	r8, r0
 800a1cc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800a1d0:	f340 813f 	ble.w	800a452 <__ieee754_powf+0x48e>
 800a1d4:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800a1d8:	f240 8128 	bls.w	800a42c <__ieee754_powf+0x468>
 800a1dc:	2100      	movs	r1, #0
 800a1de:	4628      	mov	r0, r5
 800a1e0:	f7f6 fa72 	bl	80006c8 <__aeabi_fcmplt>
 800a1e4:	3800      	subs	r0, #0
 800a1e6:	bf18      	it	ne
 800a1e8:	2001      	movne	r0, #1
 800a1ea:	e778      	b.n	800a0de <__ieee754_powf+0x11a>
 800a1ec:	3f7ffff3 	.word	0x3f7ffff3
 800a1f0:	3f800007 	.word	0x3f800007
 800a1f4:	3fb8aa00 	.word	0x3fb8aa00
 800a1f8:	36eca570 	.word	0x36eca570
 800a1fc:	3eaaaaab 	.word	0x3eaaaaab
 800a200:	3fb8aa3b 	.word	0x3fb8aa3b
 800a204:	bf800000 	.word	0xbf800000
 800a208:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800a20c:	f040 810a 	bne.w	800a424 <__ieee754_powf+0x460>
 800a210:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 800a214:	f7f6 f8ba 	bl	800038c <__aeabi_fmul>
 800a218:	f06f 0217 	mvn.w	r2, #23
 800a21c:	4682      	mov	sl, r0
 800a21e:	ea4f 53ea 	mov.w	r3, sl, asr #23
 800a222:	3b7f      	subs	r3, #127	@ 0x7f
 800a224:	441a      	add	r2, r3
 800a226:	4b95      	ldr	r3, [pc, #596]	@ (800a47c <__ieee754_powf+0x4b8>)
 800a228:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 800a22c:	459a      	cmp	sl, r3
 800a22e:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 800a232:	dd06      	ble.n	800a242 <__ieee754_powf+0x27e>
 800a234:	4b92      	ldr	r3, [pc, #584]	@ (800a480 <__ieee754_powf+0x4bc>)
 800a236:	459a      	cmp	sl, r3
 800a238:	f340 80f6 	ble.w	800a428 <__ieee754_powf+0x464>
 800a23c:	3201      	adds	r2, #1
 800a23e:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 800a242:	2300      	movs	r3, #0
 800a244:	9301      	str	r3, [sp, #4]
 800a246:	9205      	str	r2, [sp, #20]
 800a248:	4b8e      	ldr	r3, [pc, #568]	@ (800a484 <__ieee754_powf+0x4c0>)
 800a24a:	9a01      	ldr	r2, [sp, #4]
 800a24c:	4630      	mov	r0, r6
 800a24e:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 800a252:	46b2      	mov	sl, r6
 800a254:	4659      	mov	r1, fp
 800a256:	f7f5 ff8f 	bl	8000178 <__aeabi_fsub>
 800a25a:	4631      	mov	r1, r6
 800a25c:	4681      	mov	r9, r0
 800a25e:	4658      	mov	r0, fp
 800a260:	f7f5 ff8c 	bl	800017c <__addsf3>
 800a264:	4601      	mov	r1, r0
 800a266:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a26a:	f7f6 f943 	bl	80004f4 <__aeabi_fdiv>
 800a26e:	4601      	mov	r1, r0
 800a270:	9004      	str	r0, [sp, #16]
 800a272:	4648      	mov	r0, r9
 800a274:	f7f6 f88a 	bl	800038c <__aeabi_fmul>
 800a278:	9002      	str	r0, [sp, #8]
 800a27a:	9b02      	ldr	r3, [sp, #8]
 800a27c:	1076      	asrs	r6, r6, #1
 800a27e:	f36f 030b 	bfc	r3, #0, #12
 800a282:	4698      	mov	r8, r3
 800a284:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 800a288:	9b01      	ldr	r3, [sp, #4]
 800a28a:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 800a28e:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 800a292:	4631      	mov	r1, r6
 800a294:	4640      	mov	r0, r8
 800a296:	f7f6 f879 	bl	800038c <__aeabi_fmul>
 800a29a:	4601      	mov	r1, r0
 800a29c:	4648      	mov	r0, r9
 800a29e:	f7f5 ff6b 	bl	8000178 <__aeabi_fsub>
 800a2a2:	4659      	mov	r1, fp
 800a2a4:	4681      	mov	r9, r0
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	f7f5 ff66 	bl	8000178 <__aeabi_fsub>
 800a2ac:	4601      	mov	r1, r0
 800a2ae:	4650      	mov	r0, sl
 800a2b0:	f7f5 ff62 	bl	8000178 <__aeabi_fsub>
 800a2b4:	4641      	mov	r1, r8
 800a2b6:	f7f6 f869 	bl	800038c <__aeabi_fmul>
 800a2ba:	4601      	mov	r1, r0
 800a2bc:	4648      	mov	r0, r9
 800a2be:	f7f5 ff5b 	bl	8000178 <__aeabi_fsub>
 800a2c2:	9b04      	ldr	r3, [sp, #16]
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	f7f6 f861 	bl	800038c <__aeabi_fmul>
 800a2ca:	9902      	ldr	r1, [sp, #8]
 800a2cc:	4683      	mov	fp, r0
 800a2ce:	4608      	mov	r0, r1
 800a2d0:	f7f6 f85c 	bl	800038c <__aeabi_fmul>
 800a2d4:	4606      	mov	r6, r0
 800a2d6:	496c      	ldr	r1, [pc, #432]	@ (800a488 <__ieee754_powf+0x4c4>)
 800a2d8:	f7f6 f858 	bl	800038c <__aeabi_fmul>
 800a2dc:	496b      	ldr	r1, [pc, #428]	@ (800a48c <__ieee754_powf+0x4c8>)
 800a2de:	f7f5 ff4d 	bl	800017c <__addsf3>
 800a2e2:	4631      	mov	r1, r6
 800a2e4:	f7f6 f852 	bl	800038c <__aeabi_fmul>
 800a2e8:	4969      	ldr	r1, [pc, #420]	@ (800a490 <__ieee754_powf+0x4cc>)
 800a2ea:	f7f5 ff47 	bl	800017c <__addsf3>
 800a2ee:	4631      	mov	r1, r6
 800a2f0:	f7f6 f84c 	bl	800038c <__aeabi_fmul>
 800a2f4:	4967      	ldr	r1, [pc, #412]	@ (800a494 <__ieee754_powf+0x4d0>)
 800a2f6:	f7f5 ff41 	bl	800017c <__addsf3>
 800a2fa:	4631      	mov	r1, r6
 800a2fc:	f7f6 f846 	bl	800038c <__aeabi_fmul>
 800a300:	4965      	ldr	r1, [pc, #404]	@ (800a498 <__ieee754_powf+0x4d4>)
 800a302:	f7f5 ff3b 	bl	800017c <__addsf3>
 800a306:	4631      	mov	r1, r6
 800a308:	f7f6 f840 	bl	800038c <__aeabi_fmul>
 800a30c:	4963      	ldr	r1, [pc, #396]	@ (800a49c <__ieee754_powf+0x4d8>)
 800a30e:	f7f5 ff35 	bl	800017c <__addsf3>
 800a312:	4631      	mov	r1, r6
 800a314:	4681      	mov	r9, r0
 800a316:	4630      	mov	r0, r6
 800a318:	f7f6 f838 	bl	800038c <__aeabi_fmul>
 800a31c:	4601      	mov	r1, r0
 800a31e:	4648      	mov	r0, r9
 800a320:	f7f6 f834 	bl	800038c <__aeabi_fmul>
 800a324:	4606      	mov	r6, r0
 800a326:	4641      	mov	r1, r8
 800a328:	9802      	ldr	r0, [sp, #8]
 800a32a:	f7f5 ff27 	bl	800017c <__addsf3>
 800a32e:	4659      	mov	r1, fp
 800a330:	f7f6 f82c 	bl	800038c <__aeabi_fmul>
 800a334:	4631      	mov	r1, r6
 800a336:	f7f5 ff21 	bl	800017c <__addsf3>
 800a33a:	4641      	mov	r1, r8
 800a33c:	4681      	mov	r9, r0
 800a33e:	4640      	mov	r0, r8
 800a340:	f7f6 f824 	bl	800038c <__aeabi_fmul>
 800a344:	4956      	ldr	r1, [pc, #344]	@ (800a4a0 <__ieee754_powf+0x4dc>)
 800a346:	4682      	mov	sl, r0
 800a348:	f7f5 ff18 	bl	800017c <__addsf3>
 800a34c:	4649      	mov	r1, r9
 800a34e:	f7f5 ff15 	bl	800017c <__addsf3>
 800a352:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800a356:	f026 060f 	bic.w	r6, r6, #15
 800a35a:	4631      	mov	r1, r6
 800a35c:	4640      	mov	r0, r8
 800a35e:	f7f6 f815 	bl	800038c <__aeabi_fmul>
 800a362:	494f      	ldr	r1, [pc, #316]	@ (800a4a0 <__ieee754_powf+0x4dc>)
 800a364:	4680      	mov	r8, r0
 800a366:	4630      	mov	r0, r6
 800a368:	f7f5 ff06 	bl	8000178 <__aeabi_fsub>
 800a36c:	4651      	mov	r1, sl
 800a36e:	f7f5 ff03 	bl	8000178 <__aeabi_fsub>
 800a372:	4601      	mov	r1, r0
 800a374:	4648      	mov	r0, r9
 800a376:	f7f5 feff 	bl	8000178 <__aeabi_fsub>
 800a37a:	9902      	ldr	r1, [sp, #8]
 800a37c:	f7f6 f806 	bl	800038c <__aeabi_fmul>
 800a380:	4631      	mov	r1, r6
 800a382:	4681      	mov	r9, r0
 800a384:	4658      	mov	r0, fp
 800a386:	f7f6 f801 	bl	800038c <__aeabi_fmul>
 800a38a:	4601      	mov	r1, r0
 800a38c:	4648      	mov	r0, r9
 800a38e:	f7f5 fef5 	bl	800017c <__addsf3>
 800a392:	4682      	mov	sl, r0
 800a394:	4601      	mov	r1, r0
 800a396:	4640      	mov	r0, r8
 800a398:	f7f5 fef0 	bl	800017c <__addsf3>
 800a39c:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800a3a0:	f026 060f 	bic.w	r6, r6, #15
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	493f      	ldr	r1, [pc, #252]	@ (800a4a4 <__ieee754_powf+0x4e0>)
 800a3a8:	f7f5 fff0 	bl	800038c <__aeabi_fmul>
 800a3ac:	4641      	mov	r1, r8
 800a3ae:	4681      	mov	r9, r0
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	f7f5 fee1 	bl	8000178 <__aeabi_fsub>
 800a3b6:	4601      	mov	r1, r0
 800a3b8:	4650      	mov	r0, sl
 800a3ba:	f7f5 fedd 	bl	8000178 <__aeabi_fsub>
 800a3be:	493a      	ldr	r1, [pc, #232]	@ (800a4a8 <__ieee754_powf+0x4e4>)
 800a3c0:	f7f5 ffe4 	bl	800038c <__aeabi_fmul>
 800a3c4:	4939      	ldr	r1, [pc, #228]	@ (800a4ac <__ieee754_powf+0x4e8>)
 800a3c6:	4680      	mov	r8, r0
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	f7f5 ffdf 	bl	800038c <__aeabi_fmul>
 800a3ce:	4601      	mov	r1, r0
 800a3d0:	4640      	mov	r0, r8
 800a3d2:	f7f5 fed3 	bl	800017c <__addsf3>
 800a3d6:	4b36      	ldr	r3, [pc, #216]	@ (800a4b0 <__ieee754_powf+0x4ec>)
 800a3d8:	9a01      	ldr	r2, [sp, #4]
 800a3da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3de:	f7f5 fecd 	bl	800017c <__addsf3>
 800a3e2:	9a05      	ldr	r2, [sp, #20]
 800a3e4:	4606      	mov	r6, r0
 800a3e6:	4610      	mov	r0, r2
 800a3e8:	f7f5 ff7c 	bl	80002e4 <__aeabi_i2f>
 800a3ec:	4680      	mov	r8, r0
 800a3ee:	4b31      	ldr	r3, [pc, #196]	@ (800a4b4 <__ieee754_powf+0x4f0>)
 800a3f0:	9a01      	ldr	r2, [sp, #4]
 800a3f2:	4631      	mov	r1, r6
 800a3f4:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 800a3f8:	4648      	mov	r0, r9
 800a3fa:	f7f5 febf 	bl	800017c <__addsf3>
 800a3fe:	4651      	mov	r1, sl
 800a400:	f7f5 febc 	bl	800017c <__addsf3>
 800a404:	4641      	mov	r1, r8
 800a406:	f7f5 feb9 	bl	800017c <__addsf3>
 800a40a:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800a40e:	f02b 0b0f 	bic.w	fp, fp, #15
 800a412:	4641      	mov	r1, r8
 800a414:	4658      	mov	r0, fp
 800a416:	f7f5 feaf 	bl	8000178 <__aeabi_fsub>
 800a41a:	4651      	mov	r1, sl
 800a41c:	f7f5 feac 	bl	8000178 <__aeabi_fsub>
 800a420:	4649      	mov	r1, r9
 800a422:	e6a6      	b.n	800a172 <__ieee754_powf+0x1ae>
 800a424:	2200      	movs	r2, #0
 800a426:	e6fa      	b.n	800a21e <__ieee754_powf+0x25a>
 800a428:	2301      	movs	r3, #1
 800a42a:	e70b      	b.n	800a244 <__ieee754_powf+0x280>
 800a42c:	d148      	bne.n	800a4c0 <__ieee754_powf+0x4fc>
 800a42e:	4922      	ldr	r1, [pc, #136]	@ (800a4b8 <__ieee754_powf+0x4f4>)
 800a430:	4630      	mov	r0, r6
 800a432:	f7f5 fea3 	bl	800017c <__addsf3>
 800a436:	4639      	mov	r1, r7
 800a438:	4681      	mov	r9, r0
 800a43a:	4620      	mov	r0, r4
 800a43c:	f7f5 fe9c 	bl	8000178 <__aeabi_fsub>
 800a440:	4601      	mov	r1, r0
 800a442:	4648      	mov	r0, r9
 800a444:	f7f6 f95e 	bl	8000704 <__aeabi_fcmpgt>
 800a448:	2800      	cmp	r0, #0
 800a44a:	f47f aec7 	bne.w	800a1dc <__ieee754_powf+0x218>
 800a44e:	2386      	movs	r3, #134	@ 0x86
 800a450:	e03b      	b.n	800a4ca <__ieee754_powf+0x506>
 800a452:	4a1a      	ldr	r2, [pc, #104]	@ (800a4bc <__ieee754_powf+0x4f8>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d907      	bls.n	800a468 <__ieee754_powf+0x4a4>
 800a458:	2100      	movs	r1, #0
 800a45a:	4628      	mov	r0, r5
 800a45c:	f7f6 f934 	bl	80006c8 <__aeabi_fcmplt>
 800a460:	3800      	subs	r0, #0
 800a462:	bf18      	it	ne
 800a464:	2001      	movne	r0, #1
 800a466:	e645      	b.n	800a0f4 <__ieee754_powf+0x130>
 800a468:	d12a      	bne.n	800a4c0 <__ieee754_powf+0x4fc>
 800a46a:	4639      	mov	r1, r7
 800a46c:	f7f5 fe84 	bl	8000178 <__aeabi_fsub>
 800a470:	4631      	mov	r1, r6
 800a472:	f7f6 f93d 	bl	80006f0 <__aeabi_fcmpge>
 800a476:	2800      	cmp	r0, #0
 800a478:	d0e9      	beq.n	800a44e <__ieee754_powf+0x48a>
 800a47a:	e7ed      	b.n	800a458 <__ieee754_powf+0x494>
 800a47c:	001cc471 	.word	0x001cc471
 800a480:	005db3d6 	.word	0x005db3d6
 800a484:	0800b698 	.word	0x0800b698
 800a488:	3e53f142 	.word	0x3e53f142
 800a48c:	3e6c3255 	.word	0x3e6c3255
 800a490:	3e8ba305 	.word	0x3e8ba305
 800a494:	3eaaaaab 	.word	0x3eaaaaab
 800a498:	3edb6db7 	.word	0x3edb6db7
 800a49c:	3f19999a 	.word	0x3f19999a
 800a4a0:	40400000 	.word	0x40400000
 800a4a4:	3f763800 	.word	0x3f763800
 800a4a8:	3f76384f 	.word	0x3f76384f
 800a4ac:	369dc3a0 	.word	0x369dc3a0
 800a4b0:	0800b688 	.word	0x0800b688
 800a4b4:	0800b690 	.word	0x0800b690
 800a4b8:	3338aa3c 	.word	0x3338aa3c
 800a4bc:	43160000 	.word	0x43160000
 800a4c0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800a4c4:	f240 809b 	bls.w	800a5fe <__ieee754_powf+0x63a>
 800a4c8:	15db      	asrs	r3, r3, #23
 800a4ca:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 800a4ce:	3b7e      	subs	r3, #126	@ 0x7e
 800a4d0:	411c      	asrs	r4, r3
 800a4d2:	4444      	add	r4, r8
 800a4d4:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 800a4d8:	4961      	ldr	r1, [pc, #388]	@ (800a660 <__ieee754_powf+0x69c>)
 800a4da:	3b7f      	subs	r3, #127	@ 0x7f
 800a4dc:	4119      	asrs	r1, r3
 800a4de:	4021      	ands	r1, r4
 800a4e0:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800a4e4:	f1c3 0317 	rsb	r3, r3, #23
 800a4e8:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 800a4ec:	4638      	mov	r0, r7
 800a4ee:	411c      	asrs	r4, r3
 800a4f0:	f1b8 0f00 	cmp.w	r8, #0
 800a4f4:	bfb8      	it	lt
 800a4f6:	4264      	neglt	r4, r4
 800a4f8:	f7f5 fe3e 	bl	8000178 <__aeabi_fsub>
 800a4fc:	4607      	mov	r7, r0
 800a4fe:	4631      	mov	r1, r6
 800a500:	4638      	mov	r0, r7
 800a502:	f7f5 fe3b 	bl	800017c <__addsf3>
 800a506:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 800a50a:	f028 080f 	bic.w	r8, r8, #15
 800a50e:	4640      	mov	r0, r8
 800a510:	4954      	ldr	r1, [pc, #336]	@ (800a664 <__ieee754_powf+0x6a0>)
 800a512:	f7f5 ff3b 	bl	800038c <__aeabi_fmul>
 800a516:	4639      	mov	r1, r7
 800a518:	4681      	mov	r9, r0
 800a51a:	4640      	mov	r0, r8
 800a51c:	f7f5 fe2c 	bl	8000178 <__aeabi_fsub>
 800a520:	4601      	mov	r1, r0
 800a522:	4630      	mov	r0, r6
 800a524:	f7f5 fe28 	bl	8000178 <__aeabi_fsub>
 800a528:	494f      	ldr	r1, [pc, #316]	@ (800a668 <__ieee754_powf+0x6a4>)
 800a52a:	f7f5 ff2f 	bl	800038c <__aeabi_fmul>
 800a52e:	494f      	ldr	r1, [pc, #316]	@ (800a66c <__ieee754_powf+0x6a8>)
 800a530:	4606      	mov	r6, r0
 800a532:	4640      	mov	r0, r8
 800a534:	f7f5 ff2a 	bl	800038c <__aeabi_fmul>
 800a538:	4601      	mov	r1, r0
 800a53a:	4630      	mov	r0, r6
 800a53c:	f7f5 fe1e 	bl	800017c <__addsf3>
 800a540:	4607      	mov	r7, r0
 800a542:	4601      	mov	r1, r0
 800a544:	4648      	mov	r0, r9
 800a546:	f7f5 fe19 	bl	800017c <__addsf3>
 800a54a:	4649      	mov	r1, r9
 800a54c:	4606      	mov	r6, r0
 800a54e:	f7f5 fe13 	bl	8000178 <__aeabi_fsub>
 800a552:	4601      	mov	r1, r0
 800a554:	4638      	mov	r0, r7
 800a556:	f7f5 fe0f 	bl	8000178 <__aeabi_fsub>
 800a55a:	4631      	mov	r1, r6
 800a55c:	4680      	mov	r8, r0
 800a55e:	4630      	mov	r0, r6
 800a560:	f7f5 ff14 	bl	800038c <__aeabi_fmul>
 800a564:	4607      	mov	r7, r0
 800a566:	4942      	ldr	r1, [pc, #264]	@ (800a670 <__ieee754_powf+0x6ac>)
 800a568:	f7f5 ff10 	bl	800038c <__aeabi_fmul>
 800a56c:	4941      	ldr	r1, [pc, #260]	@ (800a674 <__ieee754_powf+0x6b0>)
 800a56e:	f7f5 fe03 	bl	8000178 <__aeabi_fsub>
 800a572:	4639      	mov	r1, r7
 800a574:	f7f5 ff0a 	bl	800038c <__aeabi_fmul>
 800a578:	493f      	ldr	r1, [pc, #252]	@ (800a678 <__ieee754_powf+0x6b4>)
 800a57a:	f7f5 fdff 	bl	800017c <__addsf3>
 800a57e:	4639      	mov	r1, r7
 800a580:	f7f5 ff04 	bl	800038c <__aeabi_fmul>
 800a584:	493d      	ldr	r1, [pc, #244]	@ (800a67c <__ieee754_powf+0x6b8>)
 800a586:	f7f5 fdf7 	bl	8000178 <__aeabi_fsub>
 800a58a:	4639      	mov	r1, r7
 800a58c:	f7f5 fefe 	bl	800038c <__aeabi_fmul>
 800a590:	493b      	ldr	r1, [pc, #236]	@ (800a680 <__ieee754_powf+0x6bc>)
 800a592:	f7f5 fdf3 	bl	800017c <__addsf3>
 800a596:	4639      	mov	r1, r7
 800a598:	f7f5 fef8 	bl	800038c <__aeabi_fmul>
 800a59c:	4601      	mov	r1, r0
 800a59e:	4630      	mov	r0, r6
 800a5a0:	f7f5 fdea 	bl	8000178 <__aeabi_fsub>
 800a5a4:	4607      	mov	r7, r0
 800a5a6:	4601      	mov	r1, r0
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	f7f5 feef 	bl	800038c <__aeabi_fmul>
 800a5ae:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800a5b2:	4681      	mov	r9, r0
 800a5b4:	4638      	mov	r0, r7
 800a5b6:	f7f5 fddf 	bl	8000178 <__aeabi_fsub>
 800a5ba:	4601      	mov	r1, r0
 800a5bc:	4648      	mov	r0, r9
 800a5be:	f7f5 ff99 	bl	80004f4 <__aeabi_fdiv>
 800a5c2:	4641      	mov	r1, r8
 800a5c4:	4607      	mov	r7, r0
 800a5c6:	4630      	mov	r0, r6
 800a5c8:	f7f5 fee0 	bl	800038c <__aeabi_fmul>
 800a5cc:	4641      	mov	r1, r8
 800a5ce:	f7f5 fdd5 	bl	800017c <__addsf3>
 800a5d2:	4601      	mov	r1, r0
 800a5d4:	4638      	mov	r0, r7
 800a5d6:	f7f5 fdcf 	bl	8000178 <__aeabi_fsub>
 800a5da:	4631      	mov	r1, r6
 800a5dc:	f7f5 fdcc 	bl	8000178 <__aeabi_fsub>
 800a5e0:	4601      	mov	r1, r0
 800a5e2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a5e6:	f7f5 fdc7 	bl	8000178 <__aeabi_fsub>
 800a5ea:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800a5ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a5f2:	da06      	bge.n	800a602 <__ieee754_powf+0x63e>
 800a5f4:	4621      	mov	r1, r4
 800a5f6:	f000 f9af 	bl	800a958 <scalbnf>
 800a5fa:	4629      	mov	r1, r5
 800a5fc:	e549      	b.n	800a092 <__ieee754_powf+0xce>
 800a5fe:	2400      	movs	r4, #0
 800a600:	e77d      	b.n	800a4fe <__ieee754_powf+0x53a>
 800a602:	4618      	mov	r0, r3
 800a604:	e7f9      	b.n	800a5fa <__ieee754_powf+0x636>
 800a606:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800a60a:	e536      	b.n	800a07a <__ieee754_powf+0xb6>
 800a60c:	4639      	mov	r1, r7
 800a60e:	e534      	b.n	800a07a <__ieee754_powf+0xb6>
 800a610:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800a614:	f43f ad23 	beq.w	800a05e <__ieee754_powf+0x9a>
 800a618:	2502      	movs	r5, #2
 800a61a:	4648      	mov	r0, r9
 800a61c:	f000 f998 	bl	800a950 <fabsf>
 800a620:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800a624:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800a628:	46c2      	mov	sl, r8
 800a62a:	4601      	mov	r1, r0
 800a62c:	d003      	beq.n	800a636 <__ieee754_powf+0x672>
 800a62e:	f1b8 0f00 	cmp.w	r8, #0
 800a632:	f47f ad43 	bne.w	800a0bc <__ieee754_powf+0xf8>
 800a636:	2c00      	cmp	r4, #0
 800a638:	da04      	bge.n	800a644 <__ieee754_powf+0x680>
 800a63a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a63e:	f7f5 ff59 	bl	80004f4 <__aeabi_fdiv>
 800a642:	4601      	mov	r1, r0
 800a644:	2e00      	cmp	r6, #0
 800a646:	f6bf ad18 	bge.w	800a07a <__ieee754_powf+0xb6>
 800a64a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800a64e:	ea58 0805 	orrs.w	r8, r8, r5
 800a652:	f47f ad2e 	bne.w	800a0b2 <__ieee754_powf+0xee>
 800a656:	4608      	mov	r0, r1
 800a658:	f7f5 fd8e 	bl	8000178 <__aeabi_fsub>
 800a65c:	4601      	mov	r1, r0
 800a65e:	e4f8      	b.n	800a052 <__ieee754_powf+0x8e>
 800a660:	ff800000 	.word	0xff800000
 800a664:	3f317200 	.word	0x3f317200
 800a668:	3f317218 	.word	0x3f317218
 800a66c:	35bfbe8c 	.word	0x35bfbe8c
 800a670:	3331bb4c 	.word	0x3331bb4c
 800a674:	35ddea0e 	.word	0x35ddea0e
 800a678:	388ab355 	.word	0x388ab355
 800a67c:	3b360b61 	.word	0x3b360b61
 800a680:	3e2aaaab 	.word	0x3e2aaaab

0800a684 <__ieee754_rem_pio2f>:
 800a684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a688:	4aa4      	ldr	r2, [pc, #656]	@ (800a91c <__ieee754_rem_pio2f+0x298>)
 800a68a:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800a68e:	4590      	cmp	r8, r2
 800a690:	460c      	mov	r4, r1
 800a692:	4682      	mov	sl, r0
 800a694:	b087      	sub	sp, #28
 800a696:	d804      	bhi.n	800a6a2 <__ieee754_rem_pio2f+0x1e>
 800a698:	2300      	movs	r3, #0
 800a69a:	6008      	str	r0, [r1, #0]
 800a69c:	604b      	str	r3, [r1, #4]
 800a69e:	2500      	movs	r5, #0
 800a6a0:	e01d      	b.n	800a6de <__ieee754_rem_pio2f+0x5a>
 800a6a2:	4a9f      	ldr	r2, [pc, #636]	@ (800a920 <__ieee754_rem_pio2f+0x29c>)
 800a6a4:	4590      	cmp	r8, r2
 800a6a6:	d84f      	bhi.n	800a748 <__ieee754_rem_pio2f+0xc4>
 800a6a8:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	499d      	ldr	r1, [pc, #628]	@ (800a924 <__ieee754_rem_pio2f+0x2a0>)
 800a6b0:	4f9d      	ldr	r7, [pc, #628]	@ (800a928 <__ieee754_rem_pio2f+0x2a4>)
 800a6b2:	f025 050f 	bic.w	r5, r5, #15
 800a6b6:	dd24      	ble.n	800a702 <__ieee754_rem_pio2f+0x7e>
 800a6b8:	f7f5 fd5e 	bl	8000178 <__aeabi_fsub>
 800a6bc:	42bd      	cmp	r5, r7
 800a6be:	4606      	mov	r6, r0
 800a6c0:	d011      	beq.n	800a6e6 <__ieee754_rem_pio2f+0x62>
 800a6c2:	499a      	ldr	r1, [pc, #616]	@ (800a92c <__ieee754_rem_pio2f+0x2a8>)
 800a6c4:	f7f5 fd58 	bl	8000178 <__aeabi_fsub>
 800a6c8:	4601      	mov	r1, r0
 800a6ca:	4605      	mov	r5, r0
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	f7f5 fd53 	bl	8000178 <__aeabi_fsub>
 800a6d2:	4996      	ldr	r1, [pc, #600]	@ (800a92c <__ieee754_rem_pio2f+0x2a8>)
 800a6d4:	f7f5 fd50 	bl	8000178 <__aeabi_fsub>
 800a6d8:	6025      	str	r5, [r4, #0]
 800a6da:	2501      	movs	r5, #1
 800a6dc:	6060      	str	r0, [r4, #4]
 800a6de:	4628      	mov	r0, r5
 800a6e0:	b007      	add	sp, #28
 800a6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e6:	4992      	ldr	r1, [pc, #584]	@ (800a930 <__ieee754_rem_pio2f+0x2ac>)
 800a6e8:	f7f5 fd46 	bl	8000178 <__aeabi_fsub>
 800a6ec:	4991      	ldr	r1, [pc, #580]	@ (800a934 <__ieee754_rem_pio2f+0x2b0>)
 800a6ee:	4606      	mov	r6, r0
 800a6f0:	f7f5 fd42 	bl	8000178 <__aeabi_fsub>
 800a6f4:	4601      	mov	r1, r0
 800a6f6:	4605      	mov	r5, r0
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	f7f5 fd3d 	bl	8000178 <__aeabi_fsub>
 800a6fe:	498d      	ldr	r1, [pc, #564]	@ (800a934 <__ieee754_rem_pio2f+0x2b0>)
 800a700:	e7e8      	b.n	800a6d4 <__ieee754_rem_pio2f+0x50>
 800a702:	f7f5 fd3b 	bl	800017c <__addsf3>
 800a706:	42bd      	cmp	r5, r7
 800a708:	4606      	mov	r6, r0
 800a70a:	d00f      	beq.n	800a72c <__ieee754_rem_pio2f+0xa8>
 800a70c:	4987      	ldr	r1, [pc, #540]	@ (800a92c <__ieee754_rem_pio2f+0x2a8>)
 800a70e:	f7f5 fd35 	bl	800017c <__addsf3>
 800a712:	4601      	mov	r1, r0
 800a714:	4605      	mov	r5, r0
 800a716:	4630      	mov	r0, r6
 800a718:	f7f5 fd2e 	bl	8000178 <__aeabi_fsub>
 800a71c:	4983      	ldr	r1, [pc, #524]	@ (800a92c <__ieee754_rem_pio2f+0x2a8>)
 800a71e:	f7f5 fd2d 	bl	800017c <__addsf3>
 800a722:	6025      	str	r5, [r4, #0]
 800a724:	6060      	str	r0, [r4, #4]
 800a726:	f04f 35ff 	mov.w	r5, #4294967295
 800a72a:	e7d8      	b.n	800a6de <__ieee754_rem_pio2f+0x5a>
 800a72c:	4980      	ldr	r1, [pc, #512]	@ (800a930 <__ieee754_rem_pio2f+0x2ac>)
 800a72e:	f7f5 fd25 	bl	800017c <__addsf3>
 800a732:	4980      	ldr	r1, [pc, #512]	@ (800a934 <__ieee754_rem_pio2f+0x2b0>)
 800a734:	4606      	mov	r6, r0
 800a736:	f7f5 fd21 	bl	800017c <__addsf3>
 800a73a:	4601      	mov	r1, r0
 800a73c:	4605      	mov	r5, r0
 800a73e:	4630      	mov	r0, r6
 800a740:	f7f5 fd1a 	bl	8000178 <__aeabi_fsub>
 800a744:	497b      	ldr	r1, [pc, #492]	@ (800a934 <__ieee754_rem_pio2f+0x2b0>)
 800a746:	e7ea      	b.n	800a71e <__ieee754_rem_pio2f+0x9a>
 800a748:	4a7b      	ldr	r2, [pc, #492]	@ (800a938 <__ieee754_rem_pio2f+0x2b4>)
 800a74a:	4590      	cmp	r8, r2
 800a74c:	f200 8095 	bhi.w	800a87a <__ieee754_rem_pio2f+0x1f6>
 800a750:	f000 f8fe 	bl	800a950 <fabsf>
 800a754:	4979      	ldr	r1, [pc, #484]	@ (800a93c <__ieee754_rem_pio2f+0x2b8>)
 800a756:	4606      	mov	r6, r0
 800a758:	f7f5 fe18 	bl	800038c <__aeabi_fmul>
 800a75c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800a760:	f7f5 fd0c 	bl	800017c <__addsf3>
 800a764:	f7f5 ffee 	bl	8000744 <__aeabi_f2iz>
 800a768:	4605      	mov	r5, r0
 800a76a:	f7f5 fdbb 	bl	80002e4 <__aeabi_i2f>
 800a76e:	496d      	ldr	r1, [pc, #436]	@ (800a924 <__ieee754_rem_pio2f+0x2a0>)
 800a770:	4681      	mov	r9, r0
 800a772:	f7f5 fe0b 	bl	800038c <__aeabi_fmul>
 800a776:	4601      	mov	r1, r0
 800a778:	4630      	mov	r0, r6
 800a77a:	f7f5 fcfd 	bl	8000178 <__aeabi_fsub>
 800a77e:	496b      	ldr	r1, [pc, #428]	@ (800a92c <__ieee754_rem_pio2f+0x2a8>)
 800a780:	4607      	mov	r7, r0
 800a782:	4648      	mov	r0, r9
 800a784:	f7f5 fe02 	bl	800038c <__aeabi_fmul>
 800a788:	2d1f      	cmp	r5, #31
 800a78a:	4606      	mov	r6, r0
 800a78c:	dc0e      	bgt.n	800a7ac <__ieee754_rem_pio2f+0x128>
 800a78e:	4a6c      	ldr	r2, [pc, #432]	@ (800a940 <__ieee754_rem_pio2f+0x2bc>)
 800a790:	1e69      	subs	r1, r5, #1
 800a792:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a796:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 800a79a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d004      	beq.n	800a7ac <__ieee754_rem_pio2f+0x128>
 800a7a2:	4631      	mov	r1, r6
 800a7a4:	4638      	mov	r0, r7
 800a7a6:	f7f5 fce7 	bl	8000178 <__aeabi_fsub>
 800a7aa:	e00b      	b.n	800a7c4 <__ieee754_rem_pio2f+0x140>
 800a7ac:	4631      	mov	r1, r6
 800a7ae:	4638      	mov	r0, r7
 800a7b0:	f7f5 fce2 	bl	8000178 <__aeabi_fsub>
 800a7b4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a7b8:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 800a7bc:	2b08      	cmp	r3, #8
 800a7be:	ea4f 5be8 	mov.w	fp, r8, asr #23
 800a7c2:	dc01      	bgt.n	800a7c8 <__ieee754_rem_pio2f+0x144>
 800a7c4:	6020      	str	r0, [r4, #0]
 800a7c6:	e026      	b.n	800a816 <__ieee754_rem_pio2f+0x192>
 800a7c8:	4959      	ldr	r1, [pc, #356]	@ (800a930 <__ieee754_rem_pio2f+0x2ac>)
 800a7ca:	4648      	mov	r0, r9
 800a7cc:	f7f5 fdde 	bl	800038c <__aeabi_fmul>
 800a7d0:	4606      	mov	r6, r0
 800a7d2:	4601      	mov	r1, r0
 800a7d4:	4638      	mov	r0, r7
 800a7d6:	f7f5 fccf 	bl	8000178 <__aeabi_fsub>
 800a7da:	4601      	mov	r1, r0
 800a7dc:	4680      	mov	r8, r0
 800a7de:	4638      	mov	r0, r7
 800a7e0:	f7f5 fcca 	bl	8000178 <__aeabi_fsub>
 800a7e4:	4631      	mov	r1, r6
 800a7e6:	f7f5 fcc7 	bl	8000178 <__aeabi_fsub>
 800a7ea:	4606      	mov	r6, r0
 800a7ec:	4951      	ldr	r1, [pc, #324]	@ (800a934 <__ieee754_rem_pio2f+0x2b0>)
 800a7ee:	4648      	mov	r0, r9
 800a7f0:	f7f5 fdcc 	bl	800038c <__aeabi_fmul>
 800a7f4:	4631      	mov	r1, r6
 800a7f6:	f7f5 fcbf 	bl	8000178 <__aeabi_fsub>
 800a7fa:	4601      	mov	r1, r0
 800a7fc:	4606      	mov	r6, r0
 800a7fe:	4640      	mov	r0, r8
 800a800:	f7f5 fcba 	bl	8000178 <__aeabi_fsub>
 800a804:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a808:	ebab 0b03 	sub.w	fp, fp, r3
 800a80c:	f1bb 0f19 	cmp.w	fp, #25
 800a810:	dc18      	bgt.n	800a844 <__ieee754_rem_pio2f+0x1c0>
 800a812:	4647      	mov	r7, r8
 800a814:	6020      	str	r0, [r4, #0]
 800a816:	f8d4 8000 	ldr.w	r8, [r4]
 800a81a:	4638      	mov	r0, r7
 800a81c:	4641      	mov	r1, r8
 800a81e:	f7f5 fcab 	bl	8000178 <__aeabi_fsub>
 800a822:	4631      	mov	r1, r6
 800a824:	f7f5 fca8 	bl	8000178 <__aeabi_fsub>
 800a828:	f1ba 0f00 	cmp.w	sl, #0
 800a82c:	6060      	str	r0, [r4, #4]
 800a82e:	f6bf af56 	bge.w	800a6de <__ieee754_rem_pio2f+0x5a>
 800a832:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 800a836:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800a83a:	f8c4 8000 	str.w	r8, [r4]
 800a83e:	6060      	str	r0, [r4, #4]
 800a840:	426d      	negs	r5, r5
 800a842:	e74c      	b.n	800a6de <__ieee754_rem_pio2f+0x5a>
 800a844:	493f      	ldr	r1, [pc, #252]	@ (800a944 <__ieee754_rem_pio2f+0x2c0>)
 800a846:	4648      	mov	r0, r9
 800a848:	f7f5 fda0 	bl	800038c <__aeabi_fmul>
 800a84c:	4606      	mov	r6, r0
 800a84e:	4601      	mov	r1, r0
 800a850:	4640      	mov	r0, r8
 800a852:	f7f5 fc91 	bl	8000178 <__aeabi_fsub>
 800a856:	4601      	mov	r1, r0
 800a858:	4607      	mov	r7, r0
 800a85a:	4640      	mov	r0, r8
 800a85c:	f7f5 fc8c 	bl	8000178 <__aeabi_fsub>
 800a860:	4631      	mov	r1, r6
 800a862:	f7f5 fc89 	bl	8000178 <__aeabi_fsub>
 800a866:	4606      	mov	r6, r0
 800a868:	4937      	ldr	r1, [pc, #220]	@ (800a948 <__ieee754_rem_pio2f+0x2c4>)
 800a86a:	4648      	mov	r0, r9
 800a86c:	f7f5 fd8e 	bl	800038c <__aeabi_fmul>
 800a870:	4631      	mov	r1, r6
 800a872:	f7f5 fc81 	bl	8000178 <__aeabi_fsub>
 800a876:	4606      	mov	r6, r0
 800a878:	e793      	b.n	800a7a2 <__ieee754_rem_pio2f+0x11e>
 800a87a:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800a87e:	d305      	bcc.n	800a88c <__ieee754_rem_pio2f+0x208>
 800a880:	4601      	mov	r1, r0
 800a882:	f7f5 fc79 	bl	8000178 <__aeabi_fsub>
 800a886:	6060      	str	r0, [r4, #4]
 800a888:	6020      	str	r0, [r4, #0]
 800a88a:	e708      	b.n	800a69e <__ieee754_rem_pio2f+0x1a>
 800a88c:	ea4f 56e8 	mov.w	r6, r8, asr #23
 800a890:	3e86      	subs	r6, #134	@ 0x86
 800a892:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800a896:	4640      	mov	r0, r8
 800a898:	f7f5 ff54 	bl	8000744 <__aeabi_f2iz>
 800a89c:	f7f5 fd22 	bl	80002e4 <__aeabi_i2f>
 800a8a0:	4601      	mov	r1, r0
 800a8a2:	9003      	str	r0, [sp, #12]
 800a8a4:	4640      	mov	r0, r8
 800a8a6:	f7f5 fc67 	bl	8000178 <__aeabi_fsub>
 800a8aa:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800a8ae:	f7f5 fd6d 	bl	800038c <__aeabi_fmul>
 800a8b2:	4607      	mov	r7, r0
 800a8b4:	f7f5 ff46 	bl	8000744 <__aeabi_f2iz>
 800a8b8:	f7f5 fd14 	bl	80002e4 <__aeabi_i2f>
 800a8bc:	4601      	mov	r1, r0
 800a8be:	9004      	str	r0, [sp, #16]
 800a8c0:	4605      	mov	r5, r0
 800a8c2:	4638      	mov	r0, r7
 800a8c4:	f7f5 fc58 	bl	8000178 <__aeabi_fsub>
 800a8c8:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800a8cc:	f7f5 fd5e 	bl	800038c <__aeabi_fmul>
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	9005      	str	r0, [sp, #20]
 800a8d4:	f7f5 feee 	bl	80006b4 <__aeabi_fcmpeq>
 800a8d8:	b1f0      	cbz	r0, 800a918 <__ieee754_rem_pio2f+0x294>
 800a8da:	2100      	movs	r1, #0
 800a8dc:	4628      	mov	r0, r5
 800a8de:	f7f5 fee9 	bl	80006b4 <__aeabi_fcmpeq>
 800a8e2:	2800      	cmp	r0, #0
 800a8e4:	bf14      	ite	ne
 800a8e6:	2301      	movne	r3, #1
 800a8e8:	2302      	moveq	r3, #2
 800a8ea:	4a18      	ldr	r2, [pc, #96]	@ (800a94c <__ieee754_rem_pio2f+0x2c8>)
 800a8ec:	4621      	mov	r1, r4
 800a8ee:	9201      	str	r2, [sp, #4]
 800a8f0:	2202      	movs	r2, #2
 800a8f2:	a803      	add	r0, sp, #12
 800a8f4:	9200      	str	r2, [sp, #0]
 800a8f6:	4632      	mov	r2, r6
 800a8f8:	f000 f898 	bl	800aa2c <__kernel_rem_pio2f>
 800a8fc:	f1ba 0f00 	cmp.w	sl, #0
 800a900:	4605      	mov	r5, r0
 800a902:	f6bf aeec 	bge.w	800a6de <__ieee754_rem_pio2f+0x5a>
 800a906:	6823      	ldr	r3, [r4, #0]
 800a908:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	6863      	ldr	r3, [r4, #4]
 800a910:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a914:	6063      	str	r3, [r4, #4]
 800a916:	e793      	b.n	800a840 <__ieee754_rem_pio2f+0x1bc>
 800a918:	2303      	movs	r3, #3
 800a91a:	e7e6      	b.n	800a8ea <__ieee754_rem_pio2f+0x266>
 800a91c:	3f490fd8 	.word	0x3f490fd8
 800a920:	4016cbe3 	.word	0x4016cbe3
 800a924:	3fc90f80 	.word	0x3fc90f80
 800a928:	3fc90fd0 	.word	0x3fc90fd0
 800a92c:	37354443 	.word	0x37354443
 800a930:	37354400 	.word	0x37354400
 800a934:	2e85a308 	.word	0x2e85a308
 800a938:	43490f80 	.word	0x43490f80
 800a93c:	3f22f984 	.word	0x3f22f984
 800a940:	0800b6a0 	.word	0x0800b6a0
 800a944:	2e85a300 	.word	0x2e85a300
 800a948:	248d3132 	.word	0x248d3132
 800a94c:	0800b720 	.word	0x0800b720

0800a950 <fabsf>:
 800a950:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800a954:	4770      	bx	lr
	...

0800a958 <scalbnf>:
 800a958:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800a95c:	b538      	push	{r3, r4, r5, lr}
 800a95e:	4603      	mov	r3, r0
 800a960:	460d      	mov	r5, r1
 800a962:	4604      	mov	r4, r0
 800a964:	d02e      	beq.n	800a9c4 <scalbnf+0x6c>
 800a966:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a96a:	d304      	bcc.n	800a976 <scalbnf+0x1e>
 800a96c:	4601      	mov	r1, r0
 800a96e:	f7f5 fc05 	bl	800017c <__addsf3>
 800a972:	4603      	mov	r3, r0
 800a974:	e026      	b.n	800a9c4 <scalbnf+0x6c>
 800a976:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800a97a:	d118      	bne.n	800a9ae <scalbnf+0x56>
 800a97c:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800a980:	f7f5 fd04 	bl	800038c <__aeabi_fmul>
 800a984:	4a17      	ldr	r2, [pc, #92]	@ (800a9e4 <scalbnf+0x8c>)
 800a986:	4603      	mov	r3, r0
 800a988:	4295      	cmp	r5, r2
 800a98a:	db0c      	blt.n	800a9a6 <scalbnf+0x4e>
 800a98c:	4604      	mov	r4, r0
 800a98e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800a992:	3a19      	subs	r2, #25
 800a994:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a998:	428d      	cmp	r5, r1
 800a99a:	dd0a      	ble.n	800a9b2 <scalbnf+0x5a>
 800a99c:	4912      	ldr	r1, [pc, #72]	@ (800a9e8 <scalbnf+0x90>)
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f361 001e 	bfi	r0, r1, #0, #31
 800a9a4:	e000      	b.n	800a9a8 <scalbnf+0x50>
 800a9a6:	4911      	ldr	r1, [pc, #68]	@ (800a9ec <scalbnf+0x94>)
 800a9a8:	f7f5 fcf0 	bl	800038c <__aeabi_fmul>
 800a9ac:	e7e1      	b.n	800a972 <scalbnf+0x1a>
 800a9ae:	0dd2      	lsrs	r2, r2, #23
 800a9b0:	e7f0      	b.n	800a994 <scalbnf+0x3c>
 800a9b2:	1951      	adds	r1, r2, r5
 800a9b4:	29fe      	cmp	r1, #254	@ 0xfe
 800a9b6:	dcf1      	bgt.n	800a99c <scalbnf+0x44>
 800a9b8:	2900      	cmp	r1, #0
 800a9ba:	dd05      	ble.n	800a9c8 <scalbnf+0x70>
 800a9bc:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800a9c0:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	bd38      	pop	{r3, r4, r5, pc}
 800a9c8:	f111 0f16 	cmn.w	r1, #22
 800a9cc:	da01      	bge.n	800a9d2 <scalbnf+0x7a>
 800a9ce:	4907      	ldr	r1, [pc, #28]	@ (800a9ec <scalbnf+0x94>)
 800a9d0:	e7e5      	b.n	800a99e <scalbnf+0x46>
 800a9d2:	f101 0019 	add.w	r0, r1, #25
 800a9d6:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800a9da:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 800a9de:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800a9e2:	e7e1      	b.n	800a9a8 <scalbnf+0x50>
 800a9e4:	ffff3cb0 	.word	0xffff3cb0
 800a9e8:	7149f2ca 	.word	0x7149f2ca
 800a9ec:	0da24260 	.word	0x0da24260

0800a9f0 <with_errnof>:
 800a9f0:	b538      	push	{r3, r4, r5, lr}
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	460d      	mov	r5, r1
 800a9f6:	f7fe f893 	bl	8008b20 <__errno>
 800a9fa:	6005      	str	r5, [r0, #0]
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	bd38      	pop	{r3, r4, r5, pc}

0800aa00 <xflowf>:
 800aa00:	b508      	push	{r3, lr}
 800aa02:	b140      	cbz	r0, 800aa16 <xflowf+0x16>
 800aa04:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800aa08:	f7f5 fcc0 	bl	800038c <__aeabi_fmul>
 800aa0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800aa10:	2122      	movs	r1, #34	@ 0x22
 800aa12:	f7ff bfed 	b.w	800a9f0 <with_errnof>
 800aa16:	4608      	mov	r0, r1
 800aa18:	e7f6      	b.n	800aa08 <xflowf+0x8>

0800aa1a <__math_uflowf>:
 800aa1a:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800aa1e:	f7ff bfef 	b.w	800aa00 <xflowf>

0800aa22 <__math_oflowf>:
 800aa22:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800aa26:	f7ff bfeb 	b.w	800aa00 <xflowf>
	...

0800aa2c <__kernel_rem_pio2f>:
 800aa2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa30:	b0db      	sub	sp, #364	@ 0x16c
 800aa32:	9202      	str	r2, [sp, #8]
 800aa34:	9304      	str	r3, [sp, #16]
 800aa36:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800aa38:	4bac      	ldr	r3, [pc, #688]	@ (800acec <__kernel_rem_pio2f+0x2c0>)
 800aa3a:	9005      	str	r0, [sp, #20]
 800aa3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa40:	9100      	str	r1, [sp, #0]
 800aa42:	9301      	str	r3, [sp, #4]
 800aa44:	9b04      	ldr	r3, [sp, #16]
 800aa46:	3b01      	subs	r3, #1
 800aa48:	9303      	str	r3, [sp, #12]
 800aa4a:	9b02      	ldr	r3, [sp, #8]
 800aa4c:	1d1a      	adds	r2, r3, #4
 800aa4e:	f2c0 8099 	blt.w	800ab84 <__kernel_rem_pio2f+0x158>
 800aa52:	1edc      	subs	r4, r3, #3
 800aa54:	bf48      	it	mi
 800aa56:	1d1c      	addmi	r4, r3, #4
 800aa58:	10e4      	asrs	r4, r4, #3
 800aa5a:	2500      	movs	r5, #0
 800aa5c:	f04f 0b00 	mov.w	fp, #0
 800aa60:	1c67      	adds	r7, r4, #1
 800aa62:	00fb      	lsls	r3, r7, #3
 800aa64:	9306      	str	r3, [sp, #24]
 800aa66:	9b02      	ldr	r3, [sp, #8]
 800aa68:	9a03      	ldr	r2, [sp, #12]
 800aa6a:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800aa6e:	9b01      	ldr	r3, [sp, #4]
 800aa70:	eba4 0802 	sub.w	r8, r4, r2
 800aa74:	eb03 0902 	add.w	r9, r3, r2
 800aa78:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800aa7a:	ae1e      	add	r6, sp, #120	@ 0x78
 800aa7c:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 800aa80:	454d      	cmp	r5, r9
 800aa82:	f340 8081 	ble.w	800ab88 <__kernel_rem_pio2f+0x15c>
 800aa86:	9a04      	ldr	r2, [sp, #16]
 800aa88:	ab1e      	add	r3, sp, #120	@ 0x78
 800aa8a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800aa8e:	f04f 0900 	mov.w	r9, #0
 800aa92:	2300      	movs	r3, #0
 800aa94:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800aa98:	9a01      	ldr	r2, [sp, #4]
 800aa9a:	4591      	cmp	r9, r2
 800aa9c:	f340 809a 	ble.w	800abd4 <__kernel_rem_pio2f+0x1a8>
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	aa0a      	add	r2, sp, #40	@ 0x28
 800aaa4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aaa8:	9308      	str	r3, [sp, #32]
 800aaaa:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800aaac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800aab0:	9c01      	ldr	r4, [sp, #4]
 800aab2:	9307      	str	r3, [sp, #28]
 800aab4:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800aab8:	4646      	mov	r6, r8
 800aaba:	4625      	mov	r5, r4
 800aabc:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 800aac0:	ab5a      	add	r3, sp, #360	@ 0x168
 800aac2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800aac6:	f853 bc50 	ldr.w	fp, [r3, #-80]
 800aaca:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800aace:	2d00      	cmp	r5, #0
 800aad0:	f300 8085 	bgt.w	800abde <__kernel_rem_pio2f+0x1b2>
 800aad4:	4639      	mov	r1, r7
 800aad6:	4658      	mov	r0, fp
 800aad8:	f7ff ff3e 	bl	800a958 <scalbnf>
 800aadc:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 800aae0:	4605      	mov	r5, r0
 800aae2:	f7f5 fc53 	bl	800038c <__aeabi_fmul>
 800aae6:	f000 fa3f 	bl	800af68 <floorf>
 800aaea:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800aaee:	f7f5 fc4d 	bl	800038c <__aeabi_fmul>
 800aaf2:	4601      	mov	r1, r0
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	f7f5 fb3f 	bl	8000178 <__aeabi_fsub>
 800aafa:	4605      	mov	r5, r0
 800aafc:	f7f5 fe22 	bl	8000744 <__aeabi_f2iz>
 800ab00:	4606      	mov	r6, r0
 800ab02:	f7f5 fbef 	bl	80002e4 <__aeabi_i2f>
 800ab06:	4601      	mov	r1, r0
 800ab08:	4628      	mov	r0, r5
 800ab0a:	f7f5 fb35 	bl	8000178 <__aeabi_fsub>
 800ab0e:	2f00      	cmp	r7, #0
 800ab10:	4681      	mov	r9, r0
 800ab12:	f340 8081 	ble.w	800ac18 <__kernel_rem_pio2f+0x1ec>
 800ab16:	1e62      	subs	r2, r4, #1
 800ab18:	ab0a      	add	r3, sp, #40	@ 0x28
 800ab1a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800ab1e:	f1c7 0108 	rsb	r1, r7, #8
 800ab22:	fa45 f301 	asr.w	r3, r5, r1
 800ab26:	441e      	add	r6, r3
 800ab28:	408b      	lsls	r3, r1
 800ab2a:	1aed      	subs	r5, r5, r3
 800ab2c:	ab0a      	add	r3, sp, #40	@ 0x28
 800ab2e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ab32:	f1c7 0307 	rsb	r3, r7, #7
 800ab36:	411d      	asrs	r5, r3
 800ab38:	2d00      	cmp	r5, #0
 800ab3a:	dd7a      	ble.n	800ac32 <__kernel_rem_pio2f+0x206>
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	4692      	mov	sl, r2
 800ab40:	3601      	adds	r6, #1
 800ab42:	4294      	cmp	r4, r2
 800ab44:	f300 80aa 	bgt.w	800ac9c <__kernel_rem_pio2f+0x270>
 800ab48:	2f00      	cmp	r7, #0
 800ab4a:	dd05      	ble.n	800ab58 <__kernel_rem_pio2f+0x12c>
 800ab4c:	2f01      	cmp	r7, #1
 800ab4e:	f000 80b6 	beq.w	800acbe <__kernel_rem_pio2f+0x292>
 800ab52:	2f02      	cmp	r7, #2
 800ab54:	f000 80bd 	beq.w	800acd2 <__kernel_rem_pio2f+0x2a6>
 800ab58:	2d02      	cmp	r5, #2
 800ab5a:	d16a      	bne.n	800ac32 <__kernel_rem_pio2f+0x206>
 800ab5c:	4649      	mov	r1, r9
 800ab5e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800ab62:	f7f5 fb09 	bl	8000178 <__aeabi_fsub>
 800ab66:	4681      	mov	r9, r0
 800ab68:	f1ba 0f00 	cmp.w	sl, #0
 800ab6c:	d061      	beq.n	800ac32 <__kernel_rem_pio2f+0x206>
 800ab6e:	4639      	mov	r1, r7
 800ab70:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800ab74:	f7ff fef0 	bl	800a958 <scalbnf>
 800ab78:	4601      	mov	r1, r0
 800ab7a:	4648      	mov	r0, r9
 800ab7c:	f7f5 fafc 	bl	8000178 <__aeabi_fsub>
 800ab80:	4681      	mov	r9, r0
 800ab82:	e056      	b.n	800ac32 <__kernel_rem_pio2f+0x206>
 800ab84:	2400      	movs	r4, #0
 800ab86:	e768      	b.n	800aa5a <__kernel_rem_pio2f+0x2e>
 800ab88:	eb18 0f05 	cmn.w	r8, r5
 800ab8c:	d407      	bmi.n	800ab9e <__kernel_rem_pio2f+0x172>
 800ab8e:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800ab92:	f7f5 fba7 	bl	80002e4 <__aeabi_i2f>
 800ab96:	f846 0b04 	str.w	r0, [r6], #4
 800ab9a:	3501      	adds	r5, #1
 800ab9c:	e770      	b.n	800aa80 <__kernel_rem_pio2f+0x54>
 800ab9e:	4658      	mov	r0, fp
 800aba0:	e7f9      	b.n	800ab96 <__kernel_rem_pio2f+0x16a>
 800aba2:	9307      	str	r3, [sp, #28]
 800aba4:	9b05      	ldr	r3, [sp, #20]
 800aba6:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 800abaa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800abae:	f7f5 fbed 	bl	800038c <__aeabi_fmul>
 800abb2:	4601      	mov	r1, r0
 800abb4:	4630      	mov	r0, r6
 800abb6:	f7f5 fae1 	bl	800017c <__addsf3>
 800abba:	4606      	mov	r6, r0
 800abbc:	9b07      	ldr	r3, [sp, #28]
 800abbe:	f108 0801 	add.w	r8, r8, #1
 800abc2:	9a03      	ldr	r2, [sp, #12]
 800abc4:	4590      	cmp	r8, r2
 800abc6:	ddec      	ble.n	800aba2 <__kernel_rem_pio2f+0x176>
 800abc8:	f84a 6b04 	str.w	r6, [sl], #4
 800abcc:	f109 0901 	add.w	r9, r9, #1
 800abd0:	3504      	adds	r5, #4
 800abd2:	e761      	b.n	800aa98 <__kernel_rem_pio2f+0x6c>
 800abd4:	46ab      	mov	fp, r5
 800abd6:	461e      	mov	r6, r3
 800abd8:	f04f 0800 	mov.w	r8, #0
 800abdc:	e7f1      	b.n	800abc2 <__kernel_rem_pio2f+0x196>
 800abde:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800abe2:	4658      	mov	r0, fp
 800abe4:	f7f5 fbd2 	bl	800038c <__aeabi_fmul>
 800abe8:	f7f5 fdac 	bl	8000744 <__aeabi_f2iz>
 800abec:	f7f5 fb7a 	bl	80002e4 <__aeabi_i2f>
 800abf0:	4649      	mov	r1, r9
 800abf2:	9009      	str	r0, [sp, #36]	@ 0x24
 800abf4:	f7f5 fbca 	bl	800038c <__aeabi_fmul>
 800abf8:	4601      	mov	r1, r0
 800abfa:	4658      	mov	r0, fp
 800abfc:	f7f5 fabc 	bl	8000178 <__aeabi_fsub>
 800ac00:	f7f5 fda0 	bl	8000744 <__aeabi_f2iz>
 800ac04:	3d01      	subs	r5, #1
 800ac06:	f846 0b04 	str.w	r0, [r6], #4
 800ac0a:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 800ac0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac10:	f7f5 fab4 	bl	800017c <__addsf3>
 800ac14:	4683      	mov	fp, r0
 800ac16:	e75a      	b.n	800aace <__kernel_rem_pio2f+0xa2>
 800ac18:	d105      	bne.n	800ac26 <__kernel_rem_pio2f+0x1fa>
 800ac1a:	1e63      	subs	r3, r4, #1
 800ac1c:	aa0a      	add	r2, sp, #40	@ 0x28
 800ac1e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800ac22:	11ed      	asrs	r5, r5, #7
 800ac24:	e788      	b.n	800ab38 <__kernel_rem_pio2f+0x10c>
 800ac26:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800ac2a:	f7f5 fd61 	bl	80006f0 <__aeabi_fcmpge>
 800ac2e:	4605      	mov	r5, r0
 800ac30:	bb90      	cbnz	r0, 800ac98 <__kernel_rem_pio2f+0x26c>
 800ac32:	2100      	movs	r1, #0
 800ac34:	4648      	mov	r0, r9
 800ac36:	f7f5 fd3d 	bl	80006b4 <__aeabi_fcmpeq>
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	f000 8090 	beq.w	800ad60 <__kernel_rem_pio2f+0x334>
 800ac40:	2200      	movs	r2, #0
 800ac42:	1e63      	subs	r3, r4, #1
 800ac44:	9901      	ldr	r1, [sp, #4]
 800ac46:	428b      	cmp	r3, r1
 800ac48:	da4a      	bge.n	800ace0 <__kernel_rem_pio2f+0x2b4>
 800ac4a:	2a00      	cmp	r2, #0
 800ac4c:	d076      	beq.n	800ad3c <__kernel_rem_pio2f+0x310>
 800ac4e:	3c01      	subs	r4, #1
 800ac50:	ab0a      	add	r3, sp, #40	@ 0x28
 800ac52:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ac56:	3f08      	subs	r7, #8
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d0f8      	beq.n	800ac4e <__kernel_rem_pio2f+0x222>
 800ac5c:	4639      	mov	r1, r7
 800ac5e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800ac62:	f7ff fe79 	bl	800a958 <scalbnf>
 800ac66:	46a2      	mov	sl, r4
 800ac68:	4607      	mov	r7, r0
 800ac6a:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 800ac6e:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 800ac72:	f1ba 0f00 	cmp.w	sl, #0
 800ac76:	f280 80a1 	bge.w	800adbc <__kernel_rem_pio2f+0x390>
 800ac7a:	4627      	mov	r7, r4
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	2f00      	cmp	r7, #0
 800ac80:	f2c0 80cb 	blt.w	800ae1a <__kernel_rem_pio2f+0x3ee>
 800ac84:	a946      	add	r1, sp, #280	@ 0x118
 800ac86:	4690      	mov	r8, r2
 800ac88:	f04f 0a00 	mov.w	sl, #0
 800ac8c:	4b18      	ldr	r3, [pc, #96]	@ (800acf0 <__kernel_rem_pio2f+0x2c4>)
 800ac8e:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800ac92:	eba4 0907 	sub.w	r9, r4, r7
 800ac96:	e0b4      	b.n	800ae02 <__kernel_rem_pio2f+0x3d6>
 800ac98:	2502      	movs	r5, #2
 800ac9a:	e74f      	b.n	800ab3c <__kernel_rem_pio2f+0x110>
 800ac9c:	f858 3b04 	ldr.w	r3, [r8], #4
 800aca0:	f1ba 0f00 	cmp.w	sl, #0
 800aca4:	d108      	bne.n	800acb8 <__kernel_rem_pio2f+0x28c>
 800aca6:	b123      	cbz	r3, 800acb2 <__kernel_rem_pio2f+0x286>
 800aca8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800acac:	f848 3c04 	str.w	r3, [r8, #-4]
 800acb0:	2301      	movs	r3, #1
 800acb2:	469a      	mov	sl, r3
 800acb4:	3201      	adds	r2, #1
 800acb6:	e744      	b.n	800ab42 <__kernel_rem_pio2f+0x116>
 800acb8:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800acbc:	e7f6      	b.n	800acac <__kernel_rem_pio2f+0x280>
 800acbe:	1e62      	subs	r2, r4, #1
 800acc0:	ab0a      	add	r3, sp, #40	@ 0x28
 800acc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acca:	a90a      	add	r1, sp, #40	@ 0x28
 800accc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800acd0:	e742      	b.n	800ab58 <__kernel_rem_pio2f+0x12c>
 800acd2:	1e62      	subs	r2, r4, #1
 800acd4:	ab0a      	add	r3, sp, #40	@ 0x28
 800acd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800acde:	e7f4      	b.n	800acca <__kernel_rem_pio2f+0x29e>
 800ace0:	a90a      	add	r1, sp, #40	@ 0x28
 800ace2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ace6:	3b01      	subs	r3, #1
 800ace8:	430a      	orrs	r2, r1
 800acea:	e7ab      	b.n	800ac44 <__kernel_rem_pio2f+0x218>
 800acec:	0800ba64 	.word	0x0800ba64
 800acf0:	0800ba38 	.word	0x0800ba38
 800acf4:	3301      	adds	r3, #1
 800acf6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800acfa:	2900      	cmp	r1, #0
 800acfc:	d0fa      	beq.n	800acf4 <__kernel_rem_pio2f+0x2c8>
 800acfe:	9a04      	ldr	r2, [sp, #16]
 800ad00:	a91e      	add	r1, sp, #120	@ 0x78
 800ad02:	18a2      	adds	r2, r4, r2
 800ad04:	1c66      	adds	r6, r4, #1
 800ad06:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800ad0a:	441c      	add	r4, r3
 800ad0c:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 800ad10:	42b4      	cmp	r4, r6
 800ad12:	f6ff aecf 	blt.w	800aab4 <__kernel_rem_pio2f+0x88>
 800ad16:	9b07      	ldr	r3, [sp, #28]
 800ad18:	46ab      	mov	fp, r5
 800ad1a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ad1e:	f7f5 fae1 	bl	80002e4 <__aeabi_i2f>
 800ad22:	f04f 0a00 	mov.w	sl, #0
 800ad26:	f04f 0800 	mov.w	r8, #0
 800ad2a:	6028      	str	r0, [r5, #0]
 800ad2c:	9b03      	ldr	r3, [sp, #12]
 800ad2e:	459a      	cmp	sl, r3
 800ad30:	dd07      	ble.n	800ad42 <__kernel_rem_pio2f+0x316>
 800ad32:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 800ad36:	3504      	adds	r5, #4
 800ad38:	3601      	adds	r6, #1
 800ad3a:	e7e9      	b.n	800ad10 <__kernel_rem_pio2f+0x2e4>
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	9a08      	ldr	r2, [sp, #32]
 800ad40:	e7d9      	b.n	800acf6 <__kernel_rem_pio2f+0x2ca>
 800ad42:	9b05      	ldr	r3, [sp, #20]
 800ad44:	f85b 0904 	ldr.w	r0, [fp], #-4
 800ad48:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800ad4c:	f7f5 fb1e 	bl	800038c <__aeabi_fmul>
 800ad50:	4601      	mov	r1, r0
 800ad52:	4640      	mov	r0, r8
 800ad54:	f7f5 fa12 	bl	800017c <__addsf3>
 800ad58:	f10a 0a01 	add.w	sl, sl, #1
 800ad5c:	4680      	mov	r8, r0
 800ad5e:	e7e5      	b.n	800ad2c <__kernel_rem_pio2f+0x300>
 800ad60:	9b06      	ldr	r3, [sp, #24]
 800ad62:	9a02      	ldr	r2, [sp, #8]
 800ad64:	4648      	mov	r0, r9
 800ad66:	1a99      	subs	r1, r3, r2
 800ad68:	f7ff fdf6 	bl	800a958 <scalbnf>
 800ad6c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800ad70:	4680      	mov	r8, r0
 800ad72:	f7f5 fcbd 	bl	80006f0 <__aeabi_fcmpge>
 800ad76:	b1f8      	cbz	r0, 800adb8 <__kernel_rem_pio2f+0x38c>
 800ad78:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800ad7c:	4640      	mov	r0, r8
 800ad7e:	f7f5 fb05 	bl	800038c <__aeabi_fmul>
 800ad82:	f7f5 fcdf 	bl	8000744 <__aeabi_f2iz>
 800ad86:	f7f5 faad 	bl	80002e4 <__aeabi_i2f>
 800ad8a:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800ad8e:	4681      	mov	r9, r0
 800ad90:	f7f5 fafc 	bl	800038c <__aeabi_fmul>
 800ad94:	4601      	mov	r1, r0
 800ad96:	4640      	mov	r0, r8
 800ad98:	f7f5 f9ee 	bl	8000178 <__aeabi_fsub>
 800ad9c:	f7f5 fcd2 	bl	8000744 <__aeabi_f2iz>
 800ada0:	ab0a      	add	r3, sp, #40	@ 0x28
 800ada2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ada6:	4648      	mov	r0, r9
 800ada8:	3401      	adds	r4, #1
 800adaa:	3708      	adds	r7, #8
 800adac:	f7f5 fcca 	bl	8000744 <__aeabi_f2iz>
 800adb0:	ab0a      	add	r3, sp, #40	@ 0x28
 800adb2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800adb6:	e751      	b.n	800ac5c <__kernel_rem_pio2f+0x230>
 800adb8:	4640      	mov	r0, r8
 800adba:	e7f7      	b.n	800adac <__kernel_rem_pio2f+0x380>
 800adbc:	ab0a      	add	r3, sp, #40	@ 0x28
 800adbe:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800adc2:	f7f5 fa8f 	bl	80002e4 <__aeabi_i2f>
 800adc6:	4639      	mov	r1, r7
 800adc8:	f7f5 fae0 	bl	800038c <__aeabi_fmul>
 800adcc:	4649      	mov	r1, r9
 800adce:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 800add2:	4638      	mov	r0, r7
 800add4:	f7f5 fada 	bl	800038c <__aeabi_fmul>
 800add8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800addc:	4607      	mov	r7, r0
 800adde:	e748      	b.n	800ac72 <__kernel_rem_pio2f+0x246>
 800ade0:	f853 0b04 	ldr.w	r0, [r3], #4
 800ade4:	f85b 1b04 	ldr.w	r1, [fp], #4
 800ade8:	9203      	str	r2, [sp, #12]
 800adea:	9302      	str	r3, [sp, #8]
 800adec:	f7f5 face 	bl	800038c <__aeabi_fmul>
 800adf0:	4601      	mov	r1, r0
 800adf2:	4640      	mov	r0, r8
 800adf4:	f7f5 f9c2 	bl	800017c <__addsf3>
 800adf8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800adfc:	4680      	mov	r8, r0
 800adfe:	f10a 0a01 	add.w	sl, sl, #1
 800ae02:	9901      	ldr	r1, [sp, #4]
 800ae04:	458a      	cmp	sl, r1
 800ae06:	dc01      	bgt.n	800ae0c <__kernel_rem_pio2f+0x3e0>
 800ae08:	45ca      	cmp	sl, r9
 800ae0a:	dde9      	ble.n	800ade0 <__kernel_rem_pio2f+0x3b4>
 800ae0c:	ab5a      	add	r3, sp, #360	@ 0x168
 800ae0e:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800ae12:	f849 8ca0 	str.w	r8, [r9, #-160]
 800ae16:	3f01      	subs	r7, #1
 800ae18:	e731      	b.n	800ac7e <__kernel_rem_pio2f+0x252>
 800ae1a:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	dc07      	bgt.n	800ae30 <__kernel_rem_pio2f+0x404>
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	dc4e      	bgt.n	800aec2 <__kernel_rem_pio2f+0x496>
 800ae24:	d02e      	beq.n	800ae84 <__kernel_rem_pio2f+0x458>
 800ae26:	f006 0007 	and.w	r0, r6, #7
 800ae2a:	b05b      	add	sp, #364	@ 0x16c
 800ae2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae30:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800ae32:	2b03      	cmp	r3, #3
 800ae34:	d1f7      	bne.n	800ae26 <__kernel_rem_pio2f+0x3fa>
 800ae36:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 800ae3a:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800ae3e:	46b8      	mov	r8, r7
 800ae40:	46a2      	mov	sl, r4
 800ae42:	f1ba 0f00 	cmp.w	sl, #0
 800ae46:	dc49      	bgt.n	800aedc <__kernel_rem_pio2f+0x4b0>
 800ae48:	46a1      	mov	r9, r4
 800ae4a:	f1b9 0f01 	cmp.w	r9, #1
 800ae4e:	dc60      	bgt.n	800af12 <__kernel_rem_pio2f+0x4e6>
 800ae50:	2000      	movs	r0, #0
 800ae52:	2c01      	cmp	r4, #1
 800ae54:	dc76      	bgt.n	800af44 <__kernel_rem_pio2f+0x518>
 800ae56:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800ae58:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800ae5a:	2d00      	cmp	r5, #0
 800ae5c:	d178      	bne.n	800af50 <__kernel_rem_pio2f+0x524>
 800ae5e:	9900      	ldr	r1, [sp, #0]
 800ae60:	600a      	str	r2, [r1, #0]
 800ae62:	460a      	mov	r2, r1
 800ae64:	604b      	str	r3, [r1, #4]
 800ae66:	6090      	str	r0, [r2, #8]
 800ae68:	e7dd      	b.n	800ae26 <__kernel_rem_pio2f+0x3fa>
 800ae6a:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800ae6e:	f7f5 f985 	bl	800017c <__addsf3>
 800ae72:	3c01      	subs	r4, #1
 800ae74:	2c00      	cmp	r4, #0
 800ae76:	daf8      	bge.n	800ae6a <__kernel_rem_pio2f+0x43e>
 800ae78:	b10d      	cbz	r5, 800ae7e <__kernel_rem_pio2f+0x452>
 800ae7a:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800ae7e:	9b00      	ldr	r3, [sp, #0]
 800ae80:	6018      	str	r0, [r3, #0]
 800ae82:	e7d0      	b.n	800ae26 <__kernel_rem_pio2f+0x3fa>
 800ae84:	2000      	movs	r0, #0
 800ae86:	af32      	add	r7, sp, #200	@ 0xc8
 800ae88:	e7f4      	b.n	800ae74 <__kernel_rem_pio2f+0x448>
 800ae8a:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800ae8e:	f7f5 f975 	bl	800017c <__addsf3>
 800ae92:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae96:	f1b8 0f00 	cmp.w	r8, #0
 800ae9a:	daf6      	bge.n	800ae8a <__kernel_rem_pio2f+0x45e>
 800ae9c:	b1ad      	cbz	r5, 800aeca <__kernel_rem_pio2f+0x49e>
 800ae9e:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 800aea2:	9a00      	ldr	r2, [sp, #0]
 800aea4:	4601      	mov	r1, r0
 800aea6:	6013      	str	r3, [r2, #0]
 800aea8:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800aeaa:	f7f5 f965 	bl	8000178 <__aeabi_fsub>
 800aeae:	f04f 0801 	mov.w	r8, #1
 800aeb2:	4544      	cmp	r4, r8
 800aeb4:	da0b      	bge.n	800aece <__kernel_rem_pio2f+0x4a2>
 800aeb6:	b10d      	cbz	r5, 800aebc <__kernel_rem_pio2f+0x490>
 800aeb8:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800aebc:	9b00      	ldr	r3, [sp, #0]
 800aebe:	6058      	str	r0, [r3, #4]
 800aec0:	e7b1      	b.n	800ae26 <__kernel_rem_pio2f+0x3fa>
 800aec2:	46a0      	mov	r8, r4
 800aec4:	2000      	movs	r0, #0
 800aec6:	af32      	add	r7, sp, #200	@ 0xc8
 800aec8:	e7e5      	b.n	800ae96 <__kernel_rem_pio2f+0x46a>
 800aeca:	4603      	mov	r3, r0
 800aecc:	e7e9      	b.n	800aea2 <__kernel_rem_pio2f+0x476>
 800aece:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800aed2:	f7f5 f953 	bl	800017c <__addsf3>
 800aed6:	f108 0801 	add.w	r8, r8, #1
 800aeda:	e7ea      	b.n	800aeb2 <__kernel_rem_pio2f+0x486>
 800aedc:	f8d8 3000 	ldr.w	r3, [r8]
 800aee0:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800aee4:	4619      	mov	r1, r3
 800aee6:	4610      	mov	r0, r2
 800aee8:	9302      	str	r3, [sp, #8]
 800aeea:	9201      	str	r2, [sp, #4]
 800aeec:	f7f5 f946 	bl	800017c <__addsf3>
 800aef0:	9a01      	ldr	r2, [sp, #4]
 800aef2:	4601      	mov	r1, r0
 800aef4:	4681      	mov	r9, r0
 800aef6:	4610      	mov	r0, r2
 800aef8:	f7f5 f93e 	bl	8000178 <__aeabi_fsub>
 800aefc:	9b02      	ldr	r3, [sp, #8]
 800aefe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af02:	4619      	mov	r1, r3
 800af04:	f7f5 f93a 	bl	800017c <__addsf3>
 800af08:	f848 0904 	str.w	r0, [r8], #-4
 800af0c:	f8c8 9000 	str.w	r9, [r8]
 800af10:	e797      	b.n	800ae42 <__kernel_rem_pio2f+0x416>
 800af12:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800af16:	f8d7 a000 	ldr.w	sl, [r7]
 800af1a:	4618      	mov	r0, r3
 800af1c:	4651      	mov	r1, sl
 800af1e:	9301      	str	r3, [sp, #4]
 800af20:	f7f5 f92c 	bl	800017c <__addsf3>
 800af24:	9b01      	ldr	r3, [sp, #4]
 800af26:	4601      	mov	r1, r0
 800af28:	4680      	mov	r8, r0
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7f5 f924 	bl	8000178 <__aeabi_fsub>
 800af30:	4651      	mov	r1, sl
 800af32:	f7f5 f923 	bl	800017c <__addsf3>
 800af36:	f847 0904 	str.w	r0, [r7], #-4
 800af3a:	f109 39ff 	add.w	r9, r9, #4294967295
 800af3e:	f8c7 8000 	str.w	r8, [r7]
 800af42:	e782      	b.n	800ae4a <__kernel_rem_pio2f+0x41e>
 800af44:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800af48:	f7f5 f918 	bl	800017c <__addsf3>
 800af4c:	3c01      	subs	r4, #1
 800af4e:	e780      	b.n	800ae52 <__kernel_rem_pio2f+0x426>
 800af50:	9900      	ldr	r1, [sp, #0]
 800af52:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800af56:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800af5a:	600a      	str	r2, [r1, #0]
 800af5c:	604b      	str	r3, [r1, #4]
 800af5e:	460a      	mov	r2, r1
 800af60:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800af64:	e77f      	b.n	800ae66 <__kernel_rem_pio2f+0x43a>
 800af66:	bf00      	nop

0800af68 <floorf>:
 800af68:	b570      	push	{r4, r5, r6, lr}
 800af6a:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800af6e:	3d7f      	subs	r5, #127	@ 0x7f
 800af70:	2d16      	cmp	r5, #22
 800af72:	4601      	mov	r1, r0
 800af74:	4604      	mov	r4, r0
 800af76:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800af7a:	dc26      	bgt.n	800afca <floorf+0x62>
 800af7c:	2d00      	cmp	r5, #0
 800af7e:	da0f      	bge.n	800afa0 <floorf+0x38>
 800af80:	4917      	ldr	r1, [pc, #92]	@ (800afe0 <floorf+0x78>)
 800af82:	f7f5 f8fb 	bl	800017c <__addsf3>
 800af86:	2100      	movs	r1, #0
 800af88:	f7f5 fbbc 	bl	8000704 <__aeabi_fcmpgt>
 800af8c:	b130      	cbz	r0, 800af9c <floorf+0x34>
 800af8e:	2c00      	cmp	r4, #0
 800af90:	da23      	bge.n	800afda <floorf+0x72>
 800af92:	2e00      	cmp	r6, #0
 800af94:	4c13      	ldr	r4, [pc, #76]	@ (800afe4 <floorf+0x7c>)
 800af96:	bf08      	it	eq
 800af98:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800af9c:	4621      	mov	r1, r4
 800af9e:	e01a      	b.n	800afd6 <floorf+0x6e>
 800afa0:	4e11      	ldr	r6, [pc, #68]	@ (800afe8 <floorf+0x80>)
 800afa2:	412e      	asrs	r6, r5
 800afa4:	4230      	tst	r0, r6
 800afa6:	d016      	beq.n	800afd6 <floorf+0x6e>
 800afa8:	490d      	ldr	r1, [pc, #52]	@ (800afe0 <floorf+0x78>)
 800afaa:	f7f5 f8e7 	bl	800017c <__addsf3>
 800afae:	2100      	movs	r1, #0
 800afb0:	f7f5 fba8 	bl	8000704 <__aeabi_fcmpgt>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	d0f1      	beq.n	800af9c <floorf+0x34>
 800afb8:	2c00      	cmp	r4, #0
 800afba:	bfbe      	ittt	lt
 800afbc:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 800afc0:	412b      	asrlt	r3, r5
 800afc2:	18e4      	addlt	r4, r4, r3
 800afc4:	ea24 0406 	bic.w	r4, r4, r6
 800afc8:	e7e8      	b.n	800af9c <floorf+0x34>
 800afca:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800afce:	d302      	bcc.n	800afd6 <floorf+0x6e>
 800afd0:	f7f5 f8d4 	bl	800017c <__addsf3>
 800afd4:	4601      	mov	r1, r0
 800afd6:	4608      	mov	r0, r1
 800afd8:	bd70      	pop	{r4, r5, r6, pc}
 800afda:	2400      	movs	r4, #0
 800afdc:	e7de      	b.n	800af9c <floorf+0x34>
 800afde:	bf00      	nop
 800afe0:	7149f2ca 	.word	0x7149f2ca
 800afe4:	bf800000 	.word	0xbf800000
 800afe8:	007fffff 	.word	0x007fffff

0800afec <_init>:
 800afec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afee:	bf00      	nop
 800aff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aff2:	bc08      	pop	{r3}
 800aff4:	469e      	mov	lr, r3
 800aff6:	4770      	bx	lr

0800aff8 <_fini>:
 800aff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800affa:	bf00      	nop
 800affc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800affe:	bc08      	pop	{r3}
 800b000:	469e      	mov	lr, r3
 800b002:	4770      	bx	lr
