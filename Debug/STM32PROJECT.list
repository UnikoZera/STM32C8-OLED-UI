
STM32PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008020  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000748  0800812c  0800812c  0000912c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008874  08008874  0000a07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008874  08008874  0000a07c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008874  08008874  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008874  08008874  00009874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008878  08008878  00009878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800887c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004054  2000007c  080088f8  0000a07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040d0  080088f8  0000a0d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efb3  00000000  00000000  0000a0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d00  00000000  00000000  00019058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  0001bd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d1e  00000000  00000000  0001cdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a09b  00000000  00000000  0001db16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146da  00000000  00000000  00037bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd2c  00000000  00000000  0004c28b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9fb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054d8  00000000  00000000  000d9ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000df4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08008114 	.word	0x08008114

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08008114 	.word	0x08008114

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpun>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000700:	d102      	bne.n	8000708 <__aeabi_fcmpun+0x14>
 8000702:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000706:	d108      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000708:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800070c:	d102      	bne.n	8000714 <__aeabi_fcmpun+0x20>
 800070e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000712:	d102      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	4770      	bx	lr
 800071a:	f04f 0001 	mov.w	r0, #1
 800071e:	4770      	bx	lr

08000720 <__aeabi_f2iz>:
 8000720:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000724:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000728:	d30f      	bcc.n	800074a <__aeabi_f2iz+0x2a>
 800072a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800072e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000732:	d90d      	bls.n	8000750 <__aeabi_f2iz+0x30>
 8000734:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000738:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000740:	fa23 f002 	lsr.w	r0, r3, r2
 8000744:	bf18      	it	ne
 8000746:	4240      	negne	r0, r0
 8000748:	4770      	bx	lr
 800074a:	f04f 0000 	mov.w	r0, #0
 800074e:	4770      	bx	lr
 8000750:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000754:	d101      	bne.n	800075a <__aeabi_f2iz+0x3a>
 8000756:	0242      	lsls	r2, r0, #9
 8000758:	d105      	bne.n	8000766 <__aeabi_f2iz+0x46>
 800075a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800075e:	bf08      	it	eq
 8000760:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000772:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_DMA_Init+0x38>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	4a0b      	ldr	r2, [pc, #44]	@ (80007a4 <MX_DMA_Init+0x38>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6153      	str	r3, [r2, #20]
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_DMA_Init+0x38>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	2010      	movs	r0, #16
 8000790:	f002 fd5f 	bl	8003252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000794:	2010      	movs	r0, #16
 8000796:	f002 fd78 	bl	800328a <HAL_NVIC_EnableIRQ>

}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000

080007a8 <DrawBlock>:
static uint32_t gameTickLast; // For controlling game speed
#define GAME_TICK_MS 100      // Snake moves every 200ms, adjust for speed

// Helper function to draw a block on the OLED
static void DrawBlock(int16_t x, int16_t y, uint8_t color)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af02      	add	r7, sp, #8
 80007ae:	4603      	mov	r3, r0
 80007b0:	80fb      	strh	r3, [r7, #6]
 80007b2:	460b      	mov	r3, r1
 80007b4:	80bb      	strh	r3, [r7, #4]
 80007b6:	4613      	mov	r3, r2
 80007b8:	70fb      	strb	r3, [r7, #3]
    OLED_DrawFilledRectangle(x * SNAKE_BLOCK_SIZE, y * SNAKE_BLOCK_SIZE, SNAKE_BLOCK_SIZE, SNAKE_BLOCK_SIZE, color);
 80007ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007be:	0098      	lsls	r0, r3, #2
 80007c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007c4:	0099      	lsls	r1, r3, #2
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2304      	movs	r3, #4
 80007cc:	2204      	movs	r2, #4
 80007ce:	f002 f858 	bl	8002882 <OLED_DrawFilledRectangle>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <Snake_GenerateFood>:

// Function to generate food at a random position
static void Snake_GenerateFood()
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
    bool food_on_snake;
    do
    {
        food_on_snake = false;
 80007e2:	2300      	movs	r3, #0
 80007e4:	71fb      	strb	r3, [r7, #7]
        food.pos.x = rand() % GAME_AREA_WIDTH;
 80007e6:	f005 f87b 	bl	80058e0 <rand>
 80007ea:	4603      	mov	r3, r0
 80007ec:	425a      	negs	r2, r3
 80007ee:	f003 031f 	and.w	r3, r3, #31
 80007f2:	f002 021f 	and.w	r2, r2, #31
 80007f6:	bf58      	it	pl
 80007f8:	4253      	negpl	r3, r2
 80007fa:	b21a      	sxth	r2, r3
 80007fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000874 <Snake_GenerateFood+0x98>)
 80007fe:	801a      	strh	r2, [r3, #0]
        food.pos.y = rand() % GAME_AREA_HEIGHT;
 8000800:	f005 f86e 	bl	80058e0 <rand>
 8000804:	4603      	mov	r3, r0
 8000806:	425a      	negs	r2, r3
 8000808:	f003 030f 	and.w	r3, r3, #15
 800080c:	f002 020f 	and.w	r2, r2, #15
 8000810:	bf58      	it	pl
 8000812:	4253      	negpl	r3, r2
 8000814:	b21a      	sxth	r2, r3
 8000816:	4b17      	ldr	r3, [pc, #92]	@ (8000874 <Snake_GenerateFood+0x98>)
 8000818:	805a      	strh	r2, [r3, #2]
        // Check if food is generated on the snake
        for (uint16_t i = 0; i < snake.length; i++)
 800081a:	2300      	movs	r3, #0
 800081c:	80bb      	strh	r3, [r7, #4]
 800081e:	e019      	b.n	8000854 <Snake_GenerateFood+0x78>
        {
            if (snake.body[i].x == food.pos.x && snake.body[i].y == food.pos.y)
 8000820:	88bb      	ldrh	r3, [r7, #4]
 8000822:	4a15      	ldr	r2, [pc, #84]	@ (8000878 <Snake_GenerateFood+0x9c>)
 8000824:	f932 2023 	ldrsh.w	r2, [r2, r3, lsl #2]
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <Snake_GenerateFood+0x98>)
 800082a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800082e:	429a      	cmp	r2, r3
 8000830:	d10d      	bne.n	800084e <Snake_GenerateFood+0x72>
 8000832:	88bb      	ldrh	r3, [r7, #4]
 8000834:	4a10      	ldr	r2, [pc, #64]	@ (8000878 <Snake_GenerateFood+0x9c>)
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4413      	add	r3, r2
 800083a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800083e:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <Snake_GenerateFood+0x98>)
 8000840:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000844:	429a      	cmp	r2, r3
 8000846:	d102      	bne.n	800084e <Snake_GenerateFood+0x72>
            {
                food_on_snake = true;
 8000848:	2301      	movs	r3, #1
 800084a:	71fb      	strb	r3, [r7, #7]
                break;
 800084c:	e008      	b.n	8000860 <Snake_GenerateFood+0x84>
        for (uint16_t i = 0; i < snake.length; i++)
 800084e:	88bb      	ldrh	r3, [r7, #4]
 8000850:	3301      	adds	r3, #1
 8000852:	80bb      	strh	r3, [r7, #4]
 8000854:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <Snake_GenerateFood+0x9c>)
 8000856:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 800085a:	88ba      	ldrh	r2, [r7, #4]
 800085c:	429a      	cmp	r2, r3
 800085e:	d3df      	bcc.n	8000820 <Snake_GenerateFood+0x44>
            }
        }
    } while (food_on_snake);
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d1bd      	bne.n	80007e2 <Snake_GenerateFood+0x6>
    food.active = true;
 8000866:	4b03      	ldr	r3, [pc, #12]	@ (8000874 <Snake_GenerateFood+0x98>)
 8000868:	2201      	movs	r2, #1
 800086a:	711a      	strb	r2, [r3, #4]
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	2000022c 	.word	0x2000022c
 8000878:	20000098 	.word	0x20000098

0800087c <Snake_InitGame>:

void Snake_InitGame(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
    // Seed the random number generator (optional, but good for variety)
    // srand(HAL_GetTick()); // HAL_GetTick might not be random enough for a good seed.
    // Consider a more robust seeding mechanism if available.

    gameOver = false;
 8000882:	4b2a      	ldr	r3, [pc, #168]	@ (800092c <Snake_InitGame+0xb0>)
 8000884:	2200      	movs	r2, #0
 8000886:	701a      	strb	r2, [r3, #0]
    snake.length = 3; // Initial length
 8000888:	4b29      	ldr	r3, [pc, #164]	@ (8000930 <Snake_InitGame+0xb4>)
 800088a:	2203      	movs	r2, #3
 800088c:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
    snake.dir = DIR_RIGHT;
 8000890:	4b27      	ldr	r3, [pc, #156]	@ (8000930 <Snake_InitGame+0xb4>)
 8000892:	2203      	movs	r2, #3
 8000894:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192

    // Initial snake position (e.g., center of the game area)
    snake.body[0].x = GAME_AREA_WIDTH / 2;
 8000898:	4b25      	ldr	r3, [pc, #148]	@ (8000930 <Snake_InitGame+0xb4>)
 800089a:	2210      	movs	r2, #16
 800089c:	801a      	strh	r2, [r3, #0]
    snake.body[0].y = GAME_AREA_HEIGHT / 2;
 800089e:	4b24      	ldr	r3, [pc, #144]	@ (8000930 <Snake_InitGame+0xb4>)
 80008a0:	2208      	movs	r2, #8
 80008a2:	805a      	strh	r2, [r3, #2]
    snake.body[1].x = snake.body[0].x - 1;
 80008a4:	4b22      	ldr	r3, [pc, #136]	@ (8000930 <Snake_InitGame+0xb4>)
 80008a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	3b01      	subs	r3, #1
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	b21a      	sxth	r2, r3
 80008b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <Snake_InitGame+0xb4>)
 80008b4:	809a      	strh	r2, [r3, #4]
    snake.body[1].y = snake.body[0].y;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000930 <Snake_InitGame+0xb4>)
 80008b8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80008bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <Snake_InitGame+0xb4>)
 80008be:	80da      	strh	r2, [r3, #6]
    snake.body[2].x = snake.body[0].x - 2;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000930 <Snake_InitGame+0xb4>)
 80008c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	3b02      	subs	r3, #2
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	b21a      	sxth	r2, r3
 80008ce:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <Snake_InitGame+0xb4>)
 80008d0:	811a      	strh	r2, [r3, #8]
    snake.body[2].y = snake.body[0].y;
 80008d2:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <Snake_InitGame+0xb4>)
 80008d4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80008d8:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <Snake_InitGame+0xb4>)
 80008da:	815a      	strh	r2, [r3, #10]

    for (uint16_t i = snake.length; i < SNAKE_MAX_LENGTH; ++i)
 80008dc:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <Snake_InitGame+0xb4>)
 80008de:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80008e2:	80fb      	strh	r3, [r7, #6]
 80008e4:	e00f      	b.n	8000906 <Snake_InitGame+0x8a>
    {
        snake.body[i].x = -1; // Mark unused segments
 80008e6:	88fb      	ldrh	r3, [r7, #6]
 80008e8:	4a11      	ldr	r2, [pc, #68]	@ (8000930 <Snake_InitGame+0xb4>)
 80008ea:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80008ee:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
        snake.body[i].y = -1;
 80008f2:	88fb      	ldrh	r3, [r7, #6]
 80008f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000930 <Snake_InitGame+0xb4>)
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	4413      	add	r3, r2
 80008fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008fe:	805a      	strh	r2, [r3, #2]
    for (uint16_t i = snake.length; i < SNAKE_MAX_LENGTH; ++i)
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	3301      	adds	r3, #1
 8000904:	80fb      	strh	r3, [r7, #6]
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	2b63      	cmp	r3, #99	@ 0x63
 800090a:	d9ec      	bls.n	80008e6 <Snake_InitGame+0x6a>
    }

    Snake_GenerateFood();
 800090c:	f7ff ff66 	bl	80007dc <Snake_GenerateFood>
    gameTickLast = HAL_GetTick();
 8000910:	f002 fb9a 	bl	8003048 <HAL_GetTick>
 8000914:	4603      	mov	r3, r0
 8000916:	4a07      	ldr	r2, [pc, #28]	@ (8000934 <Snake_InitGame+0xb8>)
 8000918:	6013      	str	r3, [r2, #0]
    OLED_ClearBuffer();        // Clear display before starting
 800091a:	f000 fc5f 	bl	80011dc <OLED_ClearBuffer>
    OLED_UpdateDisplayVSync(); // Update the cleared display
 800091e:	f000 fca5 	bl	800126c <OLED_UpdateDisplayVSync>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000232 	.word	0x20000232
 8000930:	20000098 	.word	0x20000098
 8000934:	20000234 	.word	0x20000234

08000938 <Snake_Draw>:

static void Snake_Draw(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
    OLED_ClearBuffer();
 800093e:	f000 fc4d 	bl	80011dc <OLED_ClearBuffer>

    // Draw snake
    for (uint16_t i = 0; i < snake.length; i++)
 8000942:	2300      	movs	r3, #0
 8000944:	80fb      	strh	r3, [r7, #6]
 8000946:	e010      	b.n	800096a <Snake_Draw+0x32>
    {
        DrawBlock(snake.body[i].x, snake.body[i].y, 1); // 1 for white
 8000948:	88fb      	ldrh	r3, [r7, #6]
 800094a:	4a1b      	ldr	r2, [pc, #108]	@ (80009b8 <Snake_Draw+0x80>)
 800094c:	f932 0023 	ldrsh.w	r0, [r2, r3, lsl #2]
 8000950:	88fb      	ldrh	r3, [r7, #6]
 8000952:	4a19      	ldr	r2, [pc, #100]	@ (80009b8 <Snake_Draw+0x80>)
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	4413      	add	r3, r2
 8000958:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800095c:	2201      	movs	r2, #1
 800095e:	4619      	mov	r1, r3
 8000960:	f7ff ff22 	bl	80007a8 <DrawBlock>
    for (uint16_t i = 0; i < snake.length; i++)
 8000964:	88fb      	ldrh	r3, [r7, #6]
 8000966:	3301      	adds	r3, #1
 8000968:	80fb      	strh	r3, [r7, #6]
 800096a:	4b13      	ldr	r3, [pc, #76]	@ (80009b8 <Snake_Draw+0x80>)
 800096c:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000970:	88fa      	ldrh	r2, [r7, #6]
 8000972:	429a      	cmp	r2, r3
 8000974:	d3e8      	bcc.n	8000948 <Snake_Draw+0x10>
    }

    // Draw food
    if (food.active)
 8000976:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <Snake_Draw+0x84>)
 8000978:	791b      	ldrb	r3, [r3, #4]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d009      	beq.n	8000992 <Snake_Draw+0x5a>
    {
        DrawBlock(food.pos.x, food.pos.y, 1); // 1 for white
 800097e:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <Snake_Draw+0x84>)
 8000980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000984:	4a0d      	ldr	r2, [pc, #52]	@ (80009bc <Snake_Draw+0x84>)
 8000986:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800098a:	2201      	movs	r2, #1
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff0b 	bl	80007a8 <DrawBlock>
    }

    if (gameOver)
 8000992:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <Snake_Draw+0x88>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d009      	beq.n	80009ae <Snake_Draw+0x76>
    {
        OLED_DisplayString(OLED_WIDTH / 2 - 3 * 6, OLED_HEIGHT / 2 - 4, "GAME");
 800099a:	4a0a      	ldr	r2, [pc, #40]	@ (80009c4 <Snake_Draw+0x8c>)
 800099c:	211c      	movs	r1, #28
 800099e:	202e      	movs	r0, #46	@ 0x2e
 80009a0:	f000 fee6 	bl	8001770 <OLED_DisplayString>
        OLED_DisplayString(OLED_WIDTH / 2 - 3 * 6, OLED_HEIGHT / 2 + 4, "OVER");
 80009a4:	4a08      	ldr	r2, [pc, #32]	@ (80009c8 <Snake_Draw+0x90>)
 80009a6:	2124      	movs	r1, #36	@ 0x24
 80009a8:	202e      	movs	r0, #46	@ 0x2e
 80009aa:	f000 fee1 	bl	8001770 <OLED_DisplayString>
    }

}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000098 	.word	0x20000098
 80009bc:	2000022c 	.word	0x2000022c
 80009c0:	20000232 	.word	0x20000232
 80009c4:	0800812c 	.word	0x0800812c
 80009c8:	08008134 	.word	0x08008134

080009cc <Snake_Update>:

static void Snake_Update(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
    if (gameOver)
 80009d2:	4b5a      	ldr	r3, [pc, #360]	@ (8000b3c <Snake_Update+0x170>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f040 80ab 	bne.w	8000b32 <Snake_Update+0x166>
    {
        return;
    }

    Point new_head = snake.body[0];
 80009dc:	4b58      	ldr	r3, [pc, #352]	@ (8000b40 <Snake_Update+0x174>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	603b      	str	r3, [r7, #0]

    // Move head based on direction
    switch (snake.dir)
 80009e2:	4b57      	ldr	r3, [pc, #348]	@ (8000b40 <Snake_Update+0x174>)
 80009e4:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d82b      	bhi.n	8000a44 <Snake_Update+0x78>
 80009ec:	a201      	add	r2, pc, #4	@ (adr r2, 80009f4 <Snake_Update+0x28>)
 80009ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f2:	bf00      	nop
 80009f4:	08000a05 	.word	0x08000a05
 80009f8:	08000a15 	.word	0x08000a15
 80009fc:	08000a25 	.word	0x08000a25
 8000a00:	08000a35 	.word	0x08000a35
    {
    case DIR_UP:
        new_head.y--;
 8000a04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	b21b      	sxth	r3, r3
 8000a10:	807b      	strh	r3, [r7, #2]
        break;
 8000a12:	e017      	b.n	8000a44 <Snake_Update+0x78>
    case DIR_DOWN:
        new_head.y++;
 8000a14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	b21b      	sxth	r3, r3
 8000a20:	807b      	strh	r3, [r7, #2]
        break;
 8000a22:	e00f      	b.n	8000a44 <Snake_Update+0x78>
    case DIR_LEFT:
        new_head.x--;
 8000a24:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	b21b      	sxth	r3, r3
 8000a30:	803b      	strh	r3, [r7, #0]
        break;
 8000a32:	e007      	b.n	8000a44 <Snake_Update+0x78>
    case DIR_RIGHT:
        new_head.x++;
 8000a34:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	b21b      	sxth	r3, r3
 8000a40:	803b      	strh	r3, [r7, #0]
        break;
 8000a42:	bf00      	nop
    }

    // Wall collision and wrap-around logic
    if (new_head.x < 0) 
 8000a44:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	da02      	bge.n	8000a52 <Snake_Update+0x86>
    {
        new_head.x = GAME_AREA_WIDTH - 1;
 8000a4c:	231f      	movs	r3, #31
 8000a4e:	803b      	strh	r3, [r7, #0]
 8000a50:	e005      	b.n	8000a5e <Snake_Update+0x92>
    }
    else if (new_head.x >= GAME_AREA_WIDTH)
 8000a52:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a56:	2b1f      	cmp	r3, #31
 8000a58:	dd01      	ble.n	8000a5e <Snake_Update+0x92>
    {
        new_head.x = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	803b      	strh	r3, [r7, #0]
    }

    if (new_head.y < 0)
 8000a5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	da02      	bge.n	8000a6c <Snake_Update+0xa0>
    {
        new_head.y = GAME_AREA_HEIGHT - 1;
 8000a66:	230f      	movs	r3, #15
 8000a68:	807b      	strh	r3, [r7, #2]
 8000a6a:	e005      	b.n	8000a78 <Snake_Update+0xac>
    }
    else if (new_head.y >= GAME_AREA_HEIGHT)
 8000a6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a70:	2b0f      	cmp	r3, #15
 8000a72:	dd01      	ble.n	8000a78 <Snake_Update+0xac>
    {
        new_head.y = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	807b      	strh	r3, [r7, #2]
    }

    // Check for self-collision (excluding the tail that will move away)
    for (uint16_t i = 0; i < snake.length - 1; i++)
 8000a78:	2300      	movs	r3, #0
 8000a7a:	80fb      	strh	r3, [r7, #6]
 8000a7c:	e018      	b.n	8000ab0 <Snake_Update+0xe4>
    { // Check up to length-1 because the actual tail will move
        if (new_head.x == snake.body[i].x && new_head.y == snake.body[i].y)
 8000a7e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	492e      	ldr	r1, [pc, #184]	@ (8000b40 <Snake_Update+0x174>)
 8000a86:	f931 3023 	ldrsh.w	r3, [r1, r3, lsl #2]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d10d      	bne.n	8000aaa <Snake_Update+0xde>
 8000a8e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	492a      	ldr	r1, [pc, #168]	@ (8000b40 <Snake_Update+0x174>)
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	440b      	add	r3, r1
 8000a9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d103      	bne.n	8000aaa <Snake_Update+0xde>
        {
            gameOver = true;
 8000aa2:	4b26      	ldr	r3, [pc, #152]	@ (8000b3c <Snake_Update+0x170>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
            return;
 8000aa8:	e044      	b.n	8000b34 <Snake_Update+0x168>
    for (uint16_t i = 0; i < snake.length - 1; i++)
 8000aaa:	88fb      	ldrh	r3, [r7, #6]
 8000aac:	3301      	adds	r3, #1
 8000aae:	80fb      	strh	r3, [r7, #6]
 8000ab0:	88fa      	ldrh	r2, [r7, #6]
 8000ab2:	4b23      	ldr	r3, [pc, #140]	@ (8000b40 <Snake_Update+0x174>)
 8000ab4:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	429a      	cmp	r2, r3
 8000abc:	dbdf      	blt.n	8000a7e <Snake_Update+0xb2>
        }
    }

    // Check if food is eaten
    if (food.active && new_head.x == food.pos.x && new_head.y == food.pos.y)
 8000abe:	4b21      	ldr	r3, [pc, #132]	@ (8000b44 <Snake_Update+0x178>)
 8000ac0:	791b      	ldrb	r3, [r3, #4]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d01c      	beq.n	8000b00 <Snake_Update+0x134>
 8000ac6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000aca:	4b1e      	ldr	r3, [pc, #120]	@ (8000b44 <Snake_Update+0x178>)
 8000acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d115      	bne.n	8000b00 <Snake_Update+0x134>
 8000ad4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b44 <Snake_Update+0x178>)
 8000ada:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d10e      	bne.n	8000b00 <Snake_Update+0x134>
    {
        if (snake.length < SNAKE_MAX_LENGTH)
 8000ae2:	4b17      	ldr	r3, [pc, #92]	@ (8000b40 <Snake_Update+0x174>)
 8000ae4:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000ae8:	2b63      	cmp	r3, #99	@ 0x63
 8000aea:	d807      	bhi.n	8000afc <Snake_Update+0x130>
        {
            snake.length++;
 8000aec:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <Snake_Update+0x174>)
 8000aee:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000af2:	3301      	adds	r3, #1
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <Snake_Update+0x174>)
 8000af8:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
        }
        Snake_GenerateFood();
 8000afc:	f7ff fe6e 	bl	80007dc <Snake_GenerateFood>
        // No need to explicitly remove the tail, the shift below handles it.
    }

    // Move snake body
    // Shift all segments one position down, the last one is overwritten or ignored if length increased
    for (uint16_t i = snake.length - 1; i > 0; i--)
 8000b00:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <Snake_Update+0x174>)
 8000b02:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000b06:	3b01      	subs	r3, #1
 8000b08:	80bb      	strh	r3, [r7, #4]
 8000b0a:	e00b      	b.n	8000b24 <Snake_Update+0x158>
    {
        snake.body[i] = snake.body[i - 1];
 8000b0c:	88bb      	ldrh	r3, [r7, #4]
 8000b0e:	1e5a      	subs	r2, r3, #1
 8000b10:	88bb      	ldrh	r3, [r7, #4]
 8000b12:	490b      	ldr	r1, [pc, #44]	@ (8000b40 <Snake_Update+0x174>)
 8000b14:	480a      	ldr	r0, [pc, #40]	@ (8000b40 <Snake_Update+0x174>)
 8000b16:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8000b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint16_t i = snake.length - 1; i > 0; i--)
 8000b1e:	88bb      	ldrh	r3, [r7, #4]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	80bb      	strh	r3, [r7, #4]
 8000b24:	88bb      	ldrh	r3, [r7, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1f0      	bne.n	8000b0c <Snake_Update+0x140>
    }
    snake.body[0] = new_head; // New head position
 8000b2a:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <Snake_Update+0x174>)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	e000      	b.n	8000b34 <Snake_Update+0x168>
        return;
 8000b32:	bf00      	nop
}
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000232 	.word	0x20000232
 8000b40:	20000098 	.word	0x20000098
 8000b44:	2000022c 	.word	0x2000022c

08000b48 <Snake_HandleInput>:

void Snake_HandleInput(Direction input_dir)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
    if ((snake.dir == DIR_UP && input_dir != DIR_DOWN) ||
 8000b52:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <Snake_HandleInput+0x5c>)
 8000b54:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d102      	bne.n	8000b62 <Snake_HandleInput+0x1a>
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d117      	bne.n	8000b92 <Snake_HandleInput+0x4a>
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8000b62:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <Snake_HandleInput+0x5c>)
 8000b64:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
    if ((snake.dir == DIR_UP && input_dir != DIR_DOWN) ||
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d102      	bne.n	8000b72 <Snake_HandleInput+0x2a>
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d10f      	bne.n	8000b92 <Snake_HandleInput+0x4a>
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8000b72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <Snake_HandleInput+0x5c>)
 8000b74:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d102      	bne.n	8000b82 <Snake_HandleInput+0x3a>
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d107      	bne.n	8000b92 <Snake_HandleInput+0x4a>
        (snake.dir == DIR_RIGHT && input_dir != DIR_LEFT))
 8000b82:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <Snake_HandleInput+0x5c>)
 8000b84:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	d106      	bne.n	8000b9a <Snake_HandleInput+0x52>
        (snake.dir == DIR_RIGHT && input_dir != DIR_LEFT))
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d003      	beq.n	8000b9a <Snake_HandleInput+0x52>
    {
        snake.dir = input_dir;
 8000b92:	4a04      	ldr	r2, [pc, #16]	@ (8000ba4 <Snake_HandleInput+0x5c>)
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	f882 3192 	strb.w	r3, [r2, #402]	@ 0x192
    }
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	20000098 	.word	0x20000098

08000ba8 <Snake_GameLoop>:

void Snake_GameLoop(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
    // extern uint8_t get_joystick_direction(); // Placeholder for your input function
    // Direction current_input = get_joystick_direction();
    // if (current_input != NO_INPUT) { // Assuming NO_INPUT if no direction change
    //     Snake_HandleInput(current_input);
    // }
    if (count - LastCount > 1)
 8000bae:	4b53      	ldr	r3, [pc, #332]	@ (8000cfc <Snake_GameLoop+0x154>)
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	4b52      	ldr	r3, [pc, #328]	@ (8000d00 <Snake_GameLoop+0x158>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	dd27      	ble.n	8000c0e <Snake_GameLoop+0x66>
    {
        if (snake.dir == DIR_UP)
 8000bbe:	4b51      	ldr	r3, [pc, #324]	@ (8000d04 <Snake_GameLoop+0x15c>)
 8000bc0:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d103      	bne.n	8000bd0 <Snake_GameLoop+0x28>
            Snake_HandleInput(DIR_RIGHT);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f7ff ffbd 	bl	8000b48 <Snake_HandleInput>
 8000bce:	e019      	b.n	8000c04 <Snake_GameLoop+0x5c>
        else if (snake.dir == DIR_DOWN)
 8000bd0:	4b4c      	ldr	r3, [pc, #304]	@ (8000d04 <Snake_GameLoop+0x15c>)
 8000bd2:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d103      	bne.n	8000be2 <Snake_GameLoop+0x3a>
            Snake_HandleInput(DIR_LEFT);
 8000bda:	2002      	movs	r0, #2
 8000bdc:	f7ff ffb4 	bl	8000b48 <Snake_HandleInput>
 8000be0:	e010      	b.n	8000c04 <Snake_GameLoop+0x5c>
        else if (snake.dir == DIR_LEFT)
 8000be2:	4b48      	ldr	r3, [pc, #288]	@ (8000d04 <Snake_GameLoop+0x15c>)
 8000be4:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d103      	bne.n	8000bf4 <Snake_GameLoop+0x4c>
            Snake_HandleInput(DIR_UP);
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff ffab 	bl	8000b48 <Snake_HandleInput>
 8000bf2:	e007      	b.n	8000c04 <Snake_GameLoop+0x5c>
        else if (snake.dir == DIR_RIGHT)
 8000bf4:	4b43      	ldr	r3, [pc, #268]	@ (8000d04 <Snake_GameLoop+0x15c>)
 8000bf6:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d102      	bne.n	8000c04 <Snake_GameLoop+0x5c>
            Snake_HandleInput(DIR_DOWN);
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f7ff ffa2 	bl	8000b48 <Snake_HandleInput>
        LastCount = count;
 8000c04:	4b3d      	ldr	r3, [pc, #244]	@ (8000cfc <Snake_GameLoop+0x154>)
 8000c06:	881a      	ldrh	r2, [r3, #0]
 8000c08:	4b3d      	ldr	r3, [pc, #244]	@ (8000d00 <Snake_GameLoop+0x158>)
 8000c0a:	801a      	strh	r2, [r3, #0]
 8000c0c:	e02f      	b.n	8000c6e <Snake_GameLoop+0xc6>
    }
    else if (count - LastCount < -1)
 8000c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8000cfc <Snake_GameLoop+0x154>)
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b3a      	ldr	r3, [pc, #232]	@ (8000d00 <Snake_GameLoop+0x158>)
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c1e:	da26      	bge.n	8000c6e <Snake_GameLoop+0xc6>
    {
        if (snake.dir == DIR_UP)
 8000c20:	4b38      	ldr	r3, [pc, #224]	@ (8000d04 <Snake_GameLoop+0x15c>)
 8000c22:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d103      	bne.n	8000c32 <Snake_GameLoop+0x8a>
            Snake_HandleInput(DIR_LEFT);
 8000c2a:	2002      	movs	r0, #2
 8000c2c:	f7ff ff8c 	bl	8000b48 <Snake_HandleInput>
 8000c30:	e019      	b.n	8000c66 <Snake_GameLoop+0xbe>
        else if (snake.dir == DIR_DOWN)
 8000c32:	4b34      	ldr	r3, [pc, #208]	@ (8000d04 <Snake_GameLoop+0x15c>)
 8000c34:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d103      	bne.n	8000c44 <Snake_GameLoop+0x9c>
            Snake_HandleInput(DIR_RIGHT);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f7ff ff83 	bl	8000b48 <Snake_HandleInput>
 8000c42:	e010      	b.n	8000c66 <Snake_GameLoop+0xbe>
        else if (snake.dir == DIR_LEFT)
 8000c44:	4b2f      	ldr	r3, [pc, #188]	@ (8000d04 <Snake_GameLoop+0x15c>)
 8000c46:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d103      	bne.n	8000c56 <Snake_GameLoop+0xae>
            Snake_HandleInput(DIR_DOWN);
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f7ff ff7a 	bl	8000b48 <Snake_HandleInput>
 8000c54:	e007      	b.n	8000c66 <Snake_GameLoop+0xbe>
        else if (snake.dir == DIR_RIGHT)
 8000c56:	4b2b      	ldr	r3, [pc, #172]	@ (8000d04 <Snake_GameLoop+0x15c>)
 8000c58:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c5c:	2b03      	cmp	r3, #3
 8000c5e:	d102      	bne.n	8000c66 <Snake_GameLoop+0xbe>
            Snake_HandleInput(DIR_UP);
 8000c60:	2000      	movs	r0, #0
 8000c62:	f7ff ff71 	bl	8000b48 <Snake_HandleInput>
        LastCount = count;
 8000c66:	4b25      	ldr	r3, [pc, #148]	@ (8000cfc <Snake_GameLoop+0x154>)
 8000c68:	881a      	ldrh	r2, [r3, #0]
 8000c6a:	4b25      	ldr	r3, [pc, #148]	@ (8000d00 <Snake_GameLoop+0x158>)
 8000c6c:	801a      	strh	r2, [r3, #0]
    }
    

    if (HAL_GetTick() - gameTickLast >= GAME_TICK_MS)
 8000c6e:	f002 f9eb 	bl	8003048 <HAL_GetTick>
 8000c72:	4602      	mov	r2, r0
 8000c74:	4b24      	ldr	r3, [pc, #144]	@ (8000d08 <Snake_GameLoop+0x160>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	2b63      	cmp	r3, #99	@ 0x63
 8000c7c:	d906      	bls.n	8000c8c <Snake_GameLoop+0xe4>
    {
        Snake_Update();
 8000c7e:	f7ff fea5 	bl	80009cc <Snake_Update>
        gameTickLast = HAL_GetTick();
 8000c82:	f002 f9e1 	bl	8003048 <HAL_GetTick>
 8000c86:	4603      	mov	r3, r0
 8000c88:	4a1f      	ldr	r2, [pc, #124]	@ (8000d08 <Snake_GameLoop+0x160>)
 8000c8a:	6013      	str	r3, [r2, #0]
    }
    Snake_Draw(); // Draw regardless of tick, for smoother animation if needed, or only after update.
 8000c8c:	f7ff fe54 	bl	8000938 <Snake_Draw>

    // If game over, you might want to wait for an input to restart
    if (gameOver)
 8000c90:	4b1e      	ldr	r3, [pc, #120]	@ (8000d0c <Snake_GameLoop+0x164>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d01d      	beq.n	8000cd4 <Snake_GameLoop+0x12c>
    {
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8000c98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c9c:	481c      	ldr	r0, [pc, #112]	@ (8000d10 <Snake_GameLoop+0x168>)
 8000c9e:	f002 fdf3 	bl	8003888 <HAL_GPIO_ReadPin>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d115      	bne.n	8000cd4 <Snake_GameLoop+0x12c>
        {
            HAL_Delay(50); // Debounce delay
 8000ca8:	2032      	movs	r0, #50	@ 0x32
 8000caa:	f002 f9d7 	bl	800305c <HAL_Delay>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8000cae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cb2:	4817      	ldr	r0, [pc, #92]	@ (8000d10 <Snake_GameLoop+0x168>)
 8000cb4:	f002 fde8 	bl	8003888 <HAL_GPIO_ReadPin>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d101      	bne.n	8000cc2 <Snake_GameLoop+0x11a>
                Snake_InitGame(); // Or handle restart explicitly elsewhere
 8000cbe:	f7ff fddd 	bl	800087c <Snake_InitGame>
            while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET);
 8000cc2:	bf00      	nop
 8000cc4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cc8:	4811      	ldr	r0, [pc, #68]	@ (8000d10 <Snake_GameLoop+0x168>)
 8000cca:	f002 fddd 	bl	8003888 <HAL_GPIO_ReadPin>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d0f7      	beq.n	8000cc4 <Snake_GameLoop+0x11c>
        }
        // For now, it just stops updating and shows "GAME OVER"
    }

    char score[30];
    sprintf(score, "Score: %d", snake.length - 3); // Display score
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d04 <Snake_GameLoop+0x15c>)
 8000cd6:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000cda:	1eda      	subs	r2, r3, #3
 8000cdc:	463b      	mov	r3, r7
 8000cde:	490d      	ldr	r1, [pc, #52]	@ (8000d14 <Snake_GameLoop+0x16c>)
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f004 fefd 	bl	8005ae0 <siprintf>
    OLED_DisplayString(0, 0, score); // Display title or status
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	461a      	mov	r2, r3
 8000cea:	2100      	movs	r1, #0
 8000cec:	2000      	movs	r0, #0
 8000cee:	f000 fd3f 	bl	8001770 <OLED_DisplayString>
}
 8000cf2:	bf00      	nop
 8000cf4:	3720      	adds	r7, #32
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000324 	.word	0x20000324
 8000d00:	20000000 	.word	0x20000000
 8000d04:	20000098 	.word	0x20000098
 8000d08:	20000234 	.word	0x20000234
 8000d0c:	20000232 	.word	0x20000232
 8000d10:	40010c00 	.word	0x40010c00
 8000d14:	0800813c 	.word	0x0800813c

08000d18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1e:	f107 0310 	add.w	r3, r7, #16
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a29      	ldr	r2, [pc, #164]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d32:	f043 0310 	orr.w	r3, r3, #16
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b27      	ldr	r3, [pc, #156]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d44:	4b24      	ldr	r3, [pc, #144]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a23      	ldr	r2, [pc, #140]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d4a:	f043 0320 	orr.w	r3, r3, #32
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0320 	and.w	r3, r3, #32
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d62:	f043 0308 	orr.w	r3, r3, #8
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0308 	and.w	r3, r3, #8
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d74:	4b18      	ldr	r3, [pc, #96]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a17      	ldr	r2, [pc, #92]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d7a:	f043 0304 	orr.w	r3, r3, #4
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0304 	and.w	r3, r3, #4
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SysWork_Light_GPIO_Port, SysWork_Light_Pin, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d92:	4812      	ldr	r0, [pc, #72]	@ (8000ddc <MX_GPIO_Init+0xc4>)
 8000d94:	f002 fd8f 	bl	80038b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SysWork_Light_Pin */
  GPIO_InitStruct.Pin = SysWork_Light_Pin;
 8000d98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SysWork_Light_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	4619      	mov	r1, r3
 8000db0:	480a      	ldr	r0, [pc, #40]	@ (8000ddc <MX_GPIO_Init+0xc4>)
 8000db2:	f002 fbe5 	bl	8003580 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Input_Pin */
  GPIO_InitStruct.Pin = Encoder_Input_Pin;
 8000db6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Encoder_Input_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <MX_GPIO_Init+0xc8>)
 8000dcc:	f002 fbd8 	bl	8003580 <HAL_GPIO_Init>

}
 8000dd0:	bf00      	nop
 8000dd2:	3720      	adds	r7, #32
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40011000 	.word	0x40011000
 8000de0:	40010c00 	.word	0x40010c00

08000de4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000de8:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <MX_I2C1_Init+0x50>)
 8000dea:	4a13      	ldr	r2, [pc, #76]	@ (8000e38 <MX_I2C1_Init+0x54>)
 8000dec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000dee:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <MX_I2C1_Init+0x50>)
 8000df0:	4a12      	ldr	r2, [pc, #72]	@ (8000e3c <MX_I2C1_Init+0x58>)
 8000df2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <MX_I2C1_Init+0x50>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <MX_I2C1_Init+0x50>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <MX_I2C1_Init+0x50>)
 8000e02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e08:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <MX_I2C1_Init+0x50>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <MX_I2C1_Init+0x50>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e14:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <MX_I2C1_Init+0x50>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <MX_I2C1_Init+0x50>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e20:	4804      	ldr	r0, [pc, #16]	@ (8000e34 <MX_I2C1_Init+0x50>)
 8000e22:	f002 fd61 	bl	80038e8 <HAL_I2C_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e2c:	f000 f99b 	bl	8001166 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000238 	.word	0x20000238
 8000e38:	40005400 	.word	0x40005400
 8000e3c:	00061a80 	.word	0x00061a80

08000e40 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <MX_I2C2_Init+0x50>)
 8000e46:	4a13      	ldr	r2, [pc, #76]	@ (8000e94 <MX_I2C2_Init+0x54>)
 8000e48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <MX_I2C2_Init+0x50>)
 8000e4c:	4a12      	ldr	r2, [pc, #72]	@ (8000e98 <MX_I2C2_Init+0x58>)
 8000e4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <MX_I2C2_Init+0x50>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <MX_I2C2_Init+0x50>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <MX_I2C2_Init+0x50>)
 8000e5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e62:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e64:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <MX_I2C2_Init+0x50>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e6a:	4b09      	ldr	r3, [pc, #36]	@ (8000e90 <MX_I2C2_Init+0x50>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e70:	4b07      	ldr	r3, [pc, #28]	@ (8000e90 <MX_I2C2_Init+0x50>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e76:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <MX_I2C2_Init+0x50>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e7c:	4804      	ldr	r0, [pc, #16]	@ (8000e90 <MX_I2C2_Init+0x50>)
 8000e7e:	f002 fd33 	bl	80038e8 <HAL_I2C_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e88:	f000 f96d 	bl	8001166 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2000028c 	.word	0x2000028c
 8000e94:	40005800 	.word	0x40005800
 8000e98:	00061a80 	.word	0x00061a80

08000e9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	@ 0x28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0318 	add.w	r3, r7, #24
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a3e      	ldr	r2, [pc, #248]	@ (8000fb0 <HAL_I2C_MspInit+0x114>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d14b      	bne.n	8000f54 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebc:	4b3d      	ldr	r3, [pc, #244]	@ (8000fb4 <HAL_I2C_MspInit+0x118>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a3c      	ldr	r2, [pc, #240]	@ (8000fb4 <HAL_I2C_MspInit+0x118>)
 8000ec2:	f043 0308 	orr.w	r3, r3, #8
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b3a      	ldr	r3, [pc, #232]	@ (8000fb4 <HAL_I2C_MspInit+0x118>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0308 	and.w	r3, r3, #8
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8000ed4:	23c0      	movs	r3, #192	@ 0xc0
 8000ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed8:	2312      	movs	r3, #18
 8000eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000edc:	2303      	movs	r3, #3
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee0:	f107 0318 	add.w	r3, r7, #24
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4834      	ldr	r0, [pc, #208]	@ (8000fb8 <HAL_I2C_MspInit+0x11c>)
 8000ee8:	f002 fb4a 	bl	8003580 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eec:	4b31      	ldr	r3, [pc, #196]	@ (8000fb4 <HAL_I2C_MspInit+0x118>)
 8000eee:	69db      	ldr	r3, [r3, #28]
 8000ef0:	4a30      	ldr	r2, [pc, #192]	@ (8000fb4 <HAL_I2C_MspInit+0x118>)
 8000ef2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ef6:	61d3      	str	r3, [r2, #28]
 8000ef8:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb4 <HAL_I2C_MspInit+0x118>)
 8000efa:	69db      	ldr	r3, [r3, #28]
 8000efc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000f04:	4b2d      	ldr	r3, [pc, #180]	@ (8000fbc <HAL_I2C_MspInit+0x120>)
 8000f06:	4a2e      	ldr	r2, [pc, #184]	@ (8000fc0 <HAL_I2C_MspInit+0x124>)
 8000f08:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f0a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fbc <HAL_I2C_MspInit+0x120>)
 8000f0c:	2210      	movs	r2, #16
 8000f0e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f10:	4b2a      	ldr	r3, [pc, #168]	@ (8000fbc <HAL_I2C_MspInit+0x120>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f16:	4b29      	ldr	r3, [pc, #164]	@ (8000fbc <HAL_I2C_MspInit+0x120>)
 8000f18:	2280      	movs	r2, #128	@ 0x80
 8000f1a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f1c:	4b27      	ldr	r3, [pc, #156]	@ (8000fbc <HAL_I2C_MspInit+0x120>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f22:	4b26      	ldr	r3, [pc, #152]	@ (8000fbc <HAL_I2C_MspInit+0x120>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000f28:	4b24      	ldr	r3, [pc, #144]	@ (8000fbc <HAL_I2C_MspInit+0x120>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000f2e:	4b23      	ldr	r3, [pc, #140]	@ (8000fbc <HAL_I2C_MspInit+0x120>)
 8000f30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f34:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000f36:	4821      	ldr	r0, [pc, #132]	@ (8000fbc <HAL_I2C_MspInit+0x120>)
 8000f38:	f002 f9c2 	bl	80032c0 <HAL_DMA_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 8000f42:	f000 f910 	bl	8001166 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a1c      	ldr	r2, [pc, #112]	@ (8000fbc <HAL_I2C_MspInit+0x120>)
 8000f4a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fbc <HAL_I2C_MspInit+0x120>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000f52:	e029      	b.n	8000fa8 <HAL_I2C_MspInit+0x10c>
  else if(i2cHandle->Instance==I2C2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a1a      	ldr	r2, [pc, #104]	@ (8000fc4 <HAL_I2C_MspInit+0x128>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d124      	bne.n	8000fa8 <HAL_I2C_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <HAL_I2C_MspInit+0x118>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	4a14      	ldr	r2, [pc, #80]	@ (8000fb4 <HAL_I2C_MspInit+0x118>)
 8000f64:	f043 0308 	orr.w	r3, r3, #8
 8000f68:	6193      	str	r3, [r2, #24]
 8000f6a:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <HAL_I2C_MspInit+0x118>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	f003 0308 	and.w	r3, r3, #8
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GYRO_SCL_Pin|GYRO_SDA_Pin;
 8000f76:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f7c:	2312      	movs	r3, #18
 8000f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 0318 	add.w	r3, r7, #24
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480b      	ldr	r0, [pc, #44]	@ (8000fb8 <HAL_I2C_MspInit+0x11c>)
 8000f8c:	f002 faf8 	bl	8003580 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f90:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <HAL_I2C_MspInit+0x118>)
 8000f92:	69db      	ldr	r3, [r3, #28]
 8000f94:	4a07      	ldr	r2, [pc, #28]	@ (8000fb4 <HAL_I2C_MspInit+0x118>)
 8000f96:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f9a:	61d3      	str	r3, [r2, #28]
 8000f9c:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <HAL_I2C_MspInit+0x118>)
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	@ 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40005400 	.word	0x40005400
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40010c00 	.word	0x40010c00
 8000fbc:	200002e0 	.word	0x200002e0
 8000fc0:	4002006c 	.word	0x4002006c
 8000fc4:	40005800 	.word	0x40005800

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fcc:	f001 ffe4 	bl	8002f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd0:	f000 f884 	bl	80010dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd4:	f7ff fea0 	bl	8000d18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fd8:	f7ff fbc8 	bl	800076c <MX_DMA_Init>
  MX_I2C1_Init();
 8000fdc:	f7ff ff02 	bl	8000de4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000fe0:	f001 fe1a 	bl	8002c18 <MX_TIM1_Init>
  MX_I2C2_Init();
 8000fe4:	f7ff ff2c 	bl	8000e40 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000fe8:	f001 feb8 	bl	8002d5c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init(); // 初始化OLED
 8000fec:	f000 fa9e 	bl	800152c <OLED_Init>
  OLED_InitBuffer(); // 初始化双缓冲
 8000ff0:	f000 f8c0 	bl	8001174 <OLED_InitBuffer>
  OLED_ClearBuffer(); // 清空缓冲区
 8000ff4:	f000 f8f2 	bl	80011dc <OLED_ClearBuffer>
  
  OLED_EnableDiffMode(1);  // 启用差分更新
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f000 fc07 	bl	800180c <OLED_EnableDiffMode>
  OLED_EnableFastUpdate(1); // 启用快速更新
 8000ffe:	2001      	movs	r0, #1
 8001000:	f000 fc22 	bl	8001848 <OLED_EnableFastUpdate>

  
  // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // 启动PWM
 8001004:	2104      	movs	r1, #4
 8001006:	482a      	ldr	r0, [pc, #168]	@ (80010b0 <main+0xe8>)
 8001008:	f003 fdae 	bl	8004b68 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1); // 启动编码器
 800100c:	2100      	movs	r1, #0
 800100e:	4829      	ldr	r0, [pc, #164]	@ (80010b4 <main+0xec>)
 8001010:	f003 feee 	bl	8004df0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2); // 启动编码器
 8001014:	2104      	movs	r1, #4
 8001016:	4827      	ldr	r0, [pc, #156]	@ (80010b4 <main+0xec>)
 8001018:	f003 feea 	bl	8004df0 <HAL_TIM_Encoder_Start>

  OLED_InitAnimationManager(&g_AnimationManager); // 初始化动画管理器
 800101c:	4826      	ldr	r0, [pc, #152]	@ (80010b8 <main+0xf0>)
 800101e:	f001 fbcd 	bl	80027bc <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Menu_AnimationManager); // 初始化菜单动画管理器
 8001022:	4826      	ldr	r0, [pc, #152]	@ (80010bc <main+0xf4>)
 8001024:	f001 fbca 	bl	80027bc <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Games_AnimationManager); // 初始化游戏动画管理器
 8001028:	4825      	ldr	r0, [pc, #148]	@ (80010c0 <main+0xf8>)
 800102a:	f001 fbc7 	bl	80027bc <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Tools_AnimationManager); // 初始化工具动画管理器
 800102e:	4825      	ldr	r0, [pc, #148]	@ (80010c4 <main+0xfc>)
 8001030:	f001 fbc4 	bl	80027bc <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Settings_AnimationManager); // 初始化设置动画管理器
 8001034:	4824      	ldr	r0, [pc, #144]	@ (80010c8 <main+0x100>)
 8001036:	f001 fbc1 	bl	80027bc <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&About_AnimationManager); // 初始化关于动画管理器
 800103a:	4824      	ldr	r0, [pc, #144]	@ (80010cc <main+0x104>)
 800103c:	f001 fbbe 	bl	80027bc <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Status_AnimationManager); // 初始化状态动画管理器
 8001040:	4823      	ldr	r0, [pc, #140]	@ (80010d0 <main+0x108>)
 8001042:	f001 fbbb 	bl	80027bc <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&g_Title_AnimationManager); // 初始化标题动画管理器
 8001046:	4823      	ldr	r0, [pc, #140]	@ (80010d4 <main+0x10c>)
 8001048:	f001 fbb8 	bl	80027bc <OLED_InitAnimationManager>
  __HAL_TIM_SET_COUNTER(&htim3, 32767);
 800104c:	4b19      	ldr	r3, [pc, #100]	@ (80010b4 <main+0xec>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001054:	625a      	str	r2, [r3, #36]	@ 0x24

  Snake_InitGame();
 8001056:	f7ff fc11 	bl	800087c <Snake_InitGame>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {    
    #pragma region OLED_UI_SETTINGS // UI设置
    OLED_ClearBuffer();
 800105a:	f000 f8bf 	bl	80011dc <OLED_ClearBuffer>
    
    // System_UI_Loop(); // UI循环
    Snake_GameLoop();
 800105e:	f7ff fda3 	bl	8000ba8 <Snake_GameLoop>
    
    
    OLED_OptimizedDisplayFPS(80, 56); // 显示帧率
 8001062:	2138      	movs	r1, #56	@ 0x38
 8001064:	2050      	movs	r0, #80	@ 0x50
 8001066:	f000 fc99 	bl	800199c <OLED_OptimizedDisplayFPS>
    count = __HAL_TIM_GET_COUNTER(&htim3); // 获取编码器计数值 1圈40
 800106a:	4b12      	ldr	r3, [pc, #72]	@ (80010b4 <main+0xec>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001070:	b29a      	uxth	r2, r3
 8001072:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <main+0x110>)
 8001074:	801a      	strh	r2, [r3, #0]
    OLED_UpdateAnimationManager(&Menu_AnimationManager); // 更新菜单动画管理器
 8001076:	4811      	ldr	r0, [pc, #68]	@ (80010bc <main+0xf4>)
 8001078:	f001 fbb3 	bl	80027e2 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_AnimationManager); // 更新动画管理器
 800107c:	480e      	ldr	r0, [pc, #56]	@ (80010b8 <main+0xf0>)
 800107e:	f001 fbb0 	bl	80027e2 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Games_AnimationManager); // 更新游戏动画管理器
 8001082:	480f      	ldr	r0, [pc, #60]	@ (80010c0 <main+0xf8>)
 8001084:	f001 fbad 	bl	80027e2 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Tools_AnimationManager); // 更新工具动画管理器
 8001088:	480e      	ldr	r0, [pc, #56]	@ (80010c4 <main+0xfc>)
 800108a:	f001 fbaa 	bl	80027e2 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Settings_AnimationManager); // 更新设置动画管理器
 800108e:	480e      	ldr	r0, [pc, #56]	@ (80010c8 <main+0x100>)
 8001090:	f001 fba7 	bl	80027e2 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&About_AnimationManager); // 更新关于动画管理器
 8001094:	480d      	ldr	r0, [pc, #52]	@ (80010cc <main+0x104>)
 8001096:	f001 fba4 	bl	80027e2 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Status_AnimationManager); // 更新状态动画管理器
 800109a:	480d      	ldr	r0, [pc, #52]	@ (80010d0 <main+0x108>)
 800109c:	f001 fba1 	bl	80027e2 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_Title_AnimationManager); // 更新标题动画管理器
 80010a0:	480c      	ldr	r0, [pc, #48]	@ (80010d4 <main+0x10c>)
 80010a2:	f001 fb9e 	bl	80027e2 <OLED_UpdateAnimationManager>
    OLED_SmartUpdate(); // 智能更新显示
 80010a6:	f000 fbdf 	bl	8001868 <OLED_SmartUpdate>
    OLED_ClearBuffer();
 80010aa:	bf00      	nop
 80010ac:	e7d5      	b.n	800105a <main+0x92>
 80010ae:	bf00      	nop
 80010b0:	20003ef0 	.word	0x20003ef0
 80010b4:	20003f38 	.word	0x20003f38
 80010b8:	200038f8 	.word	0x200038f8
 80010bc:	20000f4c 	.word	0x20000f4c
 80010c0:	20001540 	.word	0x20001540
 80010c4:	20001b34 	.word	0x20001b34
 80010c8:	20002128 	.word	0x20002128
 80010cc:	2000271c 	.word	0x2000271c
 80010d0:	20002d10 	.word	0x20002d10
 80010d4:	20003304 	.word	0x20003304
 80010d8:	20000324 	.word	0x20000324

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b090      	sub	sp, #64	@ 0x40
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0318 	add.w	r3, r7, #24
 80010e6:	2228      	movs	r2, #40	@ 0x28
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f004 fd5d 	bl	8005baa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010fe:	2301      	movs	r3, #1
 8001100:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001102:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001106:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800110c:	2301      	movs	r3, #1
 800110e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001110:	2302      	movs	r3, #2
 8001112:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001114:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001118:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800111a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800111e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001120:	f107 0318 	add.w	r3, r7, #24
 8001124:	4618      	mov	r0, r3
 8001126:	f003 f87b 	bl	8004220 <HAL_RCC_OscConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001130:	f000 f819 	bl	8001166 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001134:	230f      	movs	r3, #15
 8001136:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001138:	2302      	movs	r3, #2
 800113a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001140:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001144:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2102      	movs	r1, #2
 800114e:	4618      	mov	r0, r3
 8001150:	f003 fae8 	bl	8004724 <HAL_RCC_ClockConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800115a:	f000 f804 	bl	8001166 <Error_Handler>
  }
}
 800115e:	bf00      	nop
 8001160:	3740      	adds	r7, #64	@ 0x40
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800116a:	b672      	cpsid	i
}
 800116c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800116e:	bf00      	nop
 8001170:	e7fd      	b.n	800116e <Error_Handler+0x8>
	...

08001174 <OLED_InitBuffer>:
        0x22, 0x00, 0x07  // 页地址范围: 0-7
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 800117a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800117e:	2100      	movs	r1, #0
 8001180:	4811      	ldr	r0, [pc, #68]	@ (80011c8 <OLED_InitBuffer+0x54>)
 8001182:	f004 fd12 	bl	8005baa <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 8001186:	f240 4201 	movw	r2, #1025	@ 0x401
 800118a:	2100      	movs	r1, #0
 800118c:	480f      	ldr	r0, [pc, #60]	@ (80011cc <OLED_InitBuffer+0x58>)
 800118e:	f004 fd0c 	bl	8005baa <memset>

    // 初始化第一个字节为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <OLED_InitBuffer+0x58>)
 8001194:	2240      	movs	r2, #64	@ 0x40
 8001196:	701a      	strb	r2, [r3, #0]

    // 初始化状态变量
    oled_update_flag = OLED_READY;
 8001198:	4b0d      	ldr	r3, [pc, #52]	@ (80011d0 <OLED_InitBuffer+0x5c>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
    oled_dma_busy = OLED_READY;
 800119e:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <OLED_InitBuffer+0x60>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 80011a4:	2300      	movs	r3, #0
 80011a6:	71fb      	strb	r3, [r7, #7]
 80011a8:	e006      	b.n	80011b8 <OLED_InitBuffer+0x44>
    {
        oled_dirty_pages[i] = 1;
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	4a0a      	ldr	r2, [pc, #40]	@ (80011d8 <OLED_InitBuffer+0x64>)
 80011ae:	2101      	movs	r1, #1
 80011b0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	3301      	adds	r3, #1
 80011b6:	71fb      	strb	r3, [r7, #7]
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	2b07      	cmp	r3, #7
 80011bc:	d9f5      	bls.n	80011aa <OLED_InitBuffer+0x36>
    }
}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000338 	.word	0x20000338
 80011cc:	20000738 	.word	0x20000738
 80011d0:	2000032c 	.word	0x2000032c
 80011d4:	2000032d 	.word	0x2000032d
 80011d8:	20000330 	.word	0x20000330

080011dc <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 80011e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011e6:	2100      	movs	r1, #0
 80011e8:	480a      	ldr	r0, [pc, #40]	@ (8001214 <OLED_ClearBuffer+0x38>)
 80011ea:	f004 fcde 	bl	8005baa <memset>

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	71fb      	strb	r3, [r7, #7]
 80011f2:	e006      	b.n	8001202 <OLED_ClearBuffer+0x26>
    {
        oled_dirty_pages[i] = 1;
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	4a08      	ldr	r2, [pc, #32]	@ (8001218 <OLED_ClearBuffer+0x3c>)
 80011f8:	2101      	movs	r1, #1
 80011fa:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	3301      	adds	r3, #1
 8001200:	71fb      	strb	r3, [r7, #7]
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b07      	cmp	r3, #7
 8001206:	d9f5      	bls.n	80011f4 <OLED_ClearBuffer+0x18>
    }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000338 	.word	0x20000338
 8001218:	20000330 	.word	0x20000330

0800121c <OLED_IsBusy>:

uint8_t OLED_IsBusy(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
    // 如果标记为忙，检查是否已经过了足够时间
    if (oled_update_flag)
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <OLED_IsBusy+0x44>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d007      	beq.n	800123c <OLED_IsBusy+0x20>
    {
        // SSD1315/SSD1306 典型帧率约为60Hz，每帧约16.7ms
        // 可以根据需要调整刷新率，减小此值可以提高帧率
        uint32_t current_time = HAL_GetTick();
 800122c:	f001 ff0c 	bl	8003048 <HAL_GetTick>
 8001230:	6078      	str	r0, [r7, #4]
        if (current_time - oled_last_update_time >= 0)
 8001232:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <OLED_IsBusy+0x48>)
 8001234:	681b      	ldr	r3, [r3, #0]
        {
            oled_update_flag = OLED_READY; // 已经过了足够时间，不再忙
 8001236:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <OLED_IsBusy+0x44>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
        }
    }

    // 如果DMA传输正在进行，也视为忙
    return (oled_update_flag || oled_dma_busy);
 800123c:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <OLED_IsBusy+0x44>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d104      	bne.n	8001250 <OLED_IsBusy+0x34>
 8001246:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <OLED_IsBusy+0x4c>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <OLED_IsBusy+0x38>
 8001250:	2301      	movs	r3, #1
 8001252:	e000      	b.n	8001256 <OLED_IsBusy+0x3a>
 8001254:	2300      	movs	r3, #0
 8001256:	b2db      	uxtb	r3, r3
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000032c 	.word	0x2000032c
 8001264:	20000328 	.word	0x20000328
 8001268:	2000032d 	.word	0x2000032d

0800126c <OLED_UpdateDisplayVSync>:

void OLED_UpdateDisplayVSync(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af02      	add	r7, sp, #8
    // 等待上一次更新完成
    while (OLED_IsBusy())
 8001272:	bf00      	nop
 8001274:	f7ff ffd2 	bl	800121c <OLED_IsBusy>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1fa      	bne.n	8001274 <OLED_UpdateDisplayVSync+0x8>
    {
        // 可以加入短暂延时或者让出CPU，但通常不会停留很久
    }

    oled_update_flag = OLED_BUSY;
 800127e:	4b1f      	ldr	r3, [pc, #124]	@ (80012fc <OLED_UpdateDisplayVSync+0x90>)
 8001280:	2201      	movs	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8001284:	f001 fee0 	bl	8003048 <HAL_GetTick>
 8001288:	4603      	mov	r3, r0
 800128a:	4a1d      	ldr	r2, [pc, #116]	@ (8001300 <OLED_UpdateDisplayVSync+0x94>)
 800128c:	6013      	str	r3, [r2, #0]

    OLED_FrontBuffer[0] = 0x40;                                             // 数据控制字节：Co=0, D/C#=1 (数据)
 800128e:	4b1d      	ldr	r3, [pc, #116]	@ (8001304 <OLED_UpdateDisplayVSync+0x98>)
 8001290:	2240      	movs	r2, #64	@ 0x40
 8001292:	701a      	strb	r2, [r3, #0]
    memcpy(OLED_FrontBuffer + 1, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES); // 复制当前缓冲区到前缓冲区
 8001294:	4a1c      	ldr	r2, [pc, #112]	@ (8001308 <OLED_UpdateDisplayVSync+0x9c>)
 8001296:	4b1d      	ldr	r3, [pc, #116]	@ (800130c <OLED_UpdateDisplayVSync+0xa0>)
 8001298:	4610      	mov	r0, r2
 800129a:	4619      	mov	r1, r3
 800129c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012a0:	461a      	mov	r2, r3
 80012a2:	f004 fcfe 	bl	8005ca2 <memcpy>

    // 一次性发送所有命令
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	71fb      	strb	r3, [r7, #7]
 80012aa:	e008      	b.n	80012be <OLED_UpdateDisplayVSync+0x52>
    {
        OLED_SendCommand(cmds[i]);
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	4a18      	ldr	r2, [pc, #96]	@ (8001310 <OLED_UpdateDisplayVSync+0xa4>)
 80012b0:	5cd3      	ldrb	r3, [r2, r3]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f920 	bl	80014f8 <OLED_SendCommand>
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	3301      	adds	r3, #1
 80012bc:	71fb      	strb	r3, [r7, #7]
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b07      	cmp	r3, #7
 80012c2:	d9f3      	bls.n	80012ac <OLED_UpdateDisplayVSync+0x40>
    }


    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, OLED_WIDTH * OLED_PAGES + 1, HAL_MAX_DELAY);
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	f240 4301 	movw	r3, #1025	@ 0x401
 80012ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001304 <OLED_UpdateDisplayVSync+0x98>)
 80012d0:	2178      	movs	r1, #120	@ 0x78
 80012d2:	4810      	ldr	r0, [pc, #64]	@ (8001314 <OLED_UpdateDisplayVSync+0xa8>)
 80012d4:	f002 fc4c 	bl	8003b70 <HAL_I2C_Master_Transmit>

    // 重置所有脏页标记
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 80012d8:	2300      	movs	r3, #0
 80012da:	71bb      	strb	r3, [r7, #6]
 80012dc:	e006      	b.n	80012ec <OLED_UpdateDisplayVSync+0x80>
    {
        oled_dirty_pages[i] = 0;
 80012de:	79bb      	ldrb	r3, [r7, #6]
 80012e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001318 <OLED_UpdateDisplayVSync+0xac>)
 80012e2:	2100      	movs	r1, #0
 80012e4:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 80012e6:	79bb      	ldrb	r3, [r7, #6]
 80012e8:	3301      	adds	r3, #1
 80012ea:	71bb      	strb	r3, [r7, #6]
 80012ec:	79bb      	ldrb	r3, [r7, #6]
 80012ee:	2b07      	cmp	r3, #7
 80012f0:	d9f5      	bls.n	80012de <OLED_UpdateDisplayVSync+0x72>
    }
}
 80012f2:	bf00      	nop
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	2000032c 	.word	0x2000032c
 8001300:	20000328 	.word	0x20000328
 8001304:	20000738 	.word	0x20000738
 8001308:	20000739 	.word	0x20000739
 800130c:	20000338 	.word	0x20000338
 8001310:	08008374 	.word	0x08008374
 8001314:	20000238 	.word	0x20000238
 8001318:	20000330 	.word	0x20000330

0800131c <OLED_UpdateDisplayPartial>:
    }
}

// 局部更新显示函数
void OLED_UpdateDisplayPartial(uint8_t startPage, uint8_t endPage)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af02      	add	r7, sp, #8
 8001322:	4603      	mov	r3, r0
 8001324:	460a      	mov	r2, r1
 8001326:	71fb      	strb	r3, [r7, #7]
 8001328:	4613      	mov	r3, r2
 800132a:	71bb      	strb	r3, [r7, #6]
    // 边界检查
    if (startPage >= OLED_PAGES || endPage >= OLED_PAGES || startPage > endPage)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	2b07      	cmp	r3, #7
 8001330:	d85c      	bhi.n	80013ec <OLED_UpdateDisplayPartial+0xd0>
 8001332:	79bb      	ldrb	r3, [r7, #6]
 8001334:	2b07      	cmp	r3, #7
 8001336:	d859      	bhi.n	80013ec <OLED_UpdateDisplayPartial+0xd0>
 8001338:	79fa      	ldrb	r2, [r7, #7]
 800133a:	79bb      	ldrb	r3, [r7, #6]
 800133c:	429a      	cmp	r2, r3
 800133e:	d855      	bhi.n	80013ec <OLED_UpdateDisplayPartial+0xd0>
        return;

    // 等待上一次更新完成
    while (OLED_IsBusy())
 8001340:	bf00      	nop
 8001342:	f7ff ff6b 	bl	800121c <OLED_IsBusy>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1fa      	bne.n	8001342 <OLED_UpdateDisplayPartial+0x26>
    {
        // 可以加入短暂延时或者让出CPU
    }

    oled_update_flag = OLED_BUSY;
 800134c:	4b29      	ldr	r3, [pc, #164]	@ (80013f4 <OLED_UpdateDisplayPartial+0xd8>)
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8001352:	f001 fe79 	bl	8003048 <HAL_GetTick>
 8001356:	4603      	mov	r3, r0
 8001358:	4a27      	ldr	r2, [pc, #156]	@ (80013f8 <OLED_UpdateDisplayPartial+0xdc>)
 800135a:	6013      	str	r3, [r2, #0]

    // 设置页地址范围
    OLED_SendCommand(0x22);      // 页地址设置命令
 800135c:	2022      	movs	r0, #34	@ 0x22
 800135e:	f000 f8cb 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(startPage); // 起始页
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	4618      	mov	r0, r3
 8001366:	f000 f8c7 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(endPage);   // 结束页
 800136a:	79bb      	ldrb	r3, [r7, #6]
 800136c:	4618      	mov	r0, r3
 800136e:	f000 f8c3 	bl	80014f8 <OLED_SendCommand>

    // 设置列地址范围（总是更新整行）
    OLED_SendCommand(0x21); // 列地址设置命令
 8001372:	2021      	movs	r0, #33	@ 0x21
 8001374:	f000 f8c0 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 起始列
 8001378:	2000      	movs	r0, #0
 800137a:	f000 f8bd 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0x7F); // 结束列 (127)
 800137e:	207f      	movs	r0, #127	@ 0x7f
 8001380:	f000 f8ba 	bl	80014f8 <OLED_SendCommand>

    // 计算需要传输的数据长度
    uint16_t dataLen = OLED_WIDTH * (endPage - startPage + 1);
 8001384:	79ba      	ldrb	r2, [r7, #6]
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	3301      	adds	r3, #1
 800138c:	b29b      	uxth	r3, r3
 800138e:	01db      	lsls	r3, r3, #7
 8001390:	81bb      	strh	r3, [r7, #12]

    // 前缓冲区的第一个字节设为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8001392:	4b1a      	ldr	r3, [pc, #104]	@ (80013fc <OLED_UpdateDisplayPartial+0xe0>)
 8001394:	2240      	movs	r2, #64	@ 0x40
 8001396:	701a      	strb	r2, [r3, #0]

    // 只复制需要更新的页
    for (uint8_t page = startPage; page <= endPage; page++)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	e016      	b.n	80013cc <OLED_UpdateDisplayPartial+0xb0>
    {
        memcpy(
            OLED_FrontBuffer + 1 + (page - startPage) * OLED_WIDTH,
 800139e:	7bfa      	ldrb	r2, [r7, #15]
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	01db      	lsls	r3, r3, #7
 80013a6:	3301      	adds	r3, #1
        memcpy(
 80013a8:	4a14      	ldr	r2, [pc, #80]	@ (80013fc <OLED_UpdateDisplayPartial+0xe0>)
 80013aa:	1898      	adds	r0, r3, r2
            OLED_BackBuffer + page * OLED_WIDTH,
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	01db      	lsls	r3, r3, #7
 80013b0:	461a      	mov	r2, r3
        memcpy(
 80013b2:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <OLED_UpdateDisplayPartial+0xe4>)
 80013b4:	4413      	add	r3, r2
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	4619      	mov	r1, r3
 80013ba:	f004 fc72 	bl	8005ca2 <memcpy>
            OLED_WIDTH);
        oled_dirty_pages[page] = 0; // 重置脏页标记
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	4a10      	ldr	r2, [pc, #64]	@ (8001404 <OLED_UpdateDisplayPartial+0xe8>)
 80013c2:	2100      	movs	r1, #0
 80013c4:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = startPage; page <= endPage; page++)
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	3301      	adds	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	79bb      	ldrb	r3, [r7, #6]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d9e4      	bls.n	800139e <OLED_UpdateDisplayPartial+0x82>
    }

    // 发送数据
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, dataLen + 1, HAL_MAX_DELAY);
 80013d4:	89bb      	ldrh	r3, [r7, #12]
 80013d6:	3301      	adds	r3, #1
 80013d8:	b29b      	uxth	r3, r3
 80013da:	f04f 32ff 	mov.w	r2, #4294967295
 80013de:	9200      	str	r2, [sp, #0]
 80013e0:	4a06      	ldr	r2, [pc, #24]	@ (80013fc <OLED_UpdateDisplayPartial+0xe0>)
 80013e2:	2178      	movs	r1, #120	@ 0x78
 80013e4:	4808      	ldr	r0, [pc, #32]	@ (8001408 <OLED_UpdateDisplayPartial+0xec>)
 80013e6:	f002 fbc3 	bl	8003b70 <HAL_I2C_Master_Transmit>
 80013ea:	e000      	b.n	80013ee <OLED_UpdateDisplayPartial+0xd2>
        return;
 80013ec:	bf00      	nop
}
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	2000032c 	.word	0x2000032c
 80013f8:	20000328 	.word	0x20000328
 80013fc:	20000738 	.word	0x20000738
 8001400:	20000338 	.word	0x20000338
 8001404:	20000330 	.word	0x20000330
 8001408:	20000238 	.word	0x20000238

0800140c <OLED_WritePixel>:

void OLED_WritePixel(int16_t x, int16_t y, uint8_t color)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
 8001416:	460b      	mov	r3, r1
 8001418:	80bb      	strh	r3, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	70fb      	strb	r3, [r7, #3]
    // 边界检查
    if (x >= OLED_WIDTH || x < 0 || y >= OLED_HEIGHT || y < 0)
 800141e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001422:	2b7f      	cmp	r3, #127	@ 0x7f
 8001424:	dc5e      	bgt.n	80014e4 <OLED_WritePixel+0xd8>
 8001426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142a:	2b00      	cmp	r3, #0
 800142c:	db5a      	blt.n	80014e4 <OLED_WritePixel+0xd8>
 800142e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001432:	2b3f      	cmp	r3, #63	@ 0x3f
 8001434:	dc56      	bgt.n	80014e4 <OLED_WritePixel+0xd8>
 8001436:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	db52      	blt.n	80014e4 <OLED_WritePixel+0xd8>
        return;

    // 计算像素所在的字节位置
    uint16_t byte_index = x + (y / 8) * OLED_WIDTH;
 800143e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	da00      	bge.n	8001448 <OLED_WritePixel+0x3c>
 8001446:	3307      	adds	r3, #7
 8001448:	10db      	asrs	r3, r3, #3
 800144a:	b21b      	sxth	r3, r3
 800144c:	b29b      	uxth	r3, r3
 800144e:	01db      	lsls	r3, r3, #7
 8001450:	b29a      	uxth	r2, r3
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	4413      	add	r3, r2
 8001456:	81fb      	strh	r3, [r7, #14]
    uint8_t bit_position = y % 8;
 8001458:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800145c:	425a      	negs	r2, r3
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	f002 0207 	and.w	r2, r2, #7
 8001466:	bf58      	it	pl
 8001468:	4253      	negpl	r3, r2
 800146a:	b21b      	sxth	r3, r3
 800146c:	737b      	strb	r3, [r7, #13]
    uint8_t page = y / 8; // 计算所在页
 800146e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	da00      	bge.n	8001478 <OLED_WritePixel+0x6c>
 8001476:	3307      	adds	r3, #7
 8001478:	10db      	asrs	r3, r3, #3
 800147a:	b21b      	sxth	r3, r3
 800147c:	733b      	strb	r3, [r7, #12]

    // 记录当前像素值
    uint8_t old_value = OLED_BackBuffer[byte_index];
 800147e:	89fb      	ldrh	r3, [r7, #14]
 8001480:	4a1b      	ldr	r2, [pc, #108]	@ (80014f0 <OLED_WritePixel+0xe4>)
 8001482:	5cd3      	ldrb	r3, [r2, r3]
 8001484:	72fb      	strb	r3, [r7, #11]

    if (color) // 如果需要点亮像素
 8001486:	78fb      	ldrb	r3, [r7, #3]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00f      	beq.n	80014ac <OLED_WritePixel+0xa0>
        OLED_BackBuffer[byte_index] |= (1 << bit_position);
 800148c:	89fb      	ldrh	r3, [r7, #14]
 800148e:	4a18      	ldr	r2, [pc, #96]	@ (80014f0 <OLED_WritePixel+0xe4>)
 8001490:	5cd3      	ldrb	r3, [r2, r3]
 8001492:	b25a      	sxtb	r2, r3
 8001494:	7b7b      	ldrb	r3, [r7, #13]
 8001496:	2101      	movs	r1, #1
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	b25b      	sxtb	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b25a      	sxtb	r2, r3
 80014a2:	89fb      	ldrh	r3, [r7, #14]
 80014a4:	b2d1      	uxtb	r1, r2
 80014a6:	4a12      	ldr	r2, [pc, #72]	@ (80014f0 <OLED_WritePixel+0xe4>)
 80014a8:	54d1      	strb	r1, [r2, r3]
 80014aa:	e010      	b.n	80014ce <OLED_WritePixel+0xc2>
    else // 如果需要熄灭像素
        OLED_BackBuffer[byte_index] &= ~(1 << bit_position);
 80014ac:	89fb      	ldrh	r3, [r7, #14]
 80014ae:	4a10      	ldr	r2, [pc, #64]	@ (80014f0 <OLED_WritePixel+0xe4>)
 80014b0:	5cd3      	ldrb	r3, [r2, r3]
 80014b2:	b25a      	sxtb	r2, r3
 80014b4:	7b7b      	ldrb	r3, [r7, #13]
 80014b6:	2101      	movs	r1, #1
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	b25b      	sxtb	r3, r3
 80014c2:	4013      	ands	r3, r2
 80014c4:	b25a      	sxtb	r2, r3
 80014c6:	89fb      	ldrh	r3, [r7, #14]
 80014c8:	b2d1      	uxtb	r1, r2
 80014ca:	4a09      	ldr	r2, [pc, #36]	@ (80014f0 <OLED_WritePixel+0xe4>)
 80014cc:	54d1      	strb	r1, [r2, r3]

    // 如果像素值发生变化，标记该页为脏
    if (old_value != OLED_BackBuffer[byte_index])
 80014ce:	89fb      	ldrh	r3, [r7, #14]
 80014d0:	4a07      	ldr	r2, [pc, #28]	@ (80014f0 <OLED_WritePixel+0xe4>)
 80014d2:	5cd3      	ldrb	r3, [r2, r3]
 80014d4:	7afa      	ldrb	r2, [r7, #11]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d005      	beq.n	80014e6 <OLED_WritePixel+0xda>
    {
        oled_dirty_pages[page] = 1;
 80014da:	7b3b      	ldrb	r3, [r7, #12]
 80014dc:	4a05      	ldr	r2, [pc, #20]	@ (80014f4 <OLED_WritePixel+0xe8>)
 80014de:	2101      	movs	r1, #1
 80014e0:	54d1      	strb	r1, [r2, r3]
 80014e2:	e000      	b.n	80014e6 <OLED_WritePixel+0xda>
        return;
 80014e4:	bf00      	nop
    }
}
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000338 	.word	0x20000338
 80014f4:	20000330 	.word	0x20000330

080014f8 <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af02      	add	r7, sp, #8
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 8001502:	2300      	movs	r3, #0
 8001504:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 800150a:	f107 020c 	add.w	r2, r7, #12
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2302      	movs	r3, #2
 8001516:	2178      	movs	r1, #120	@ 0x78
 8001518:	4803      	ldr	r0, [pc, #12]	@ (8001528 <OLED_SendCommand+0x30>)
 800151a:	f002 fb29 	bl	8003b70 <HAL_I2C_Master_Transmit>
}
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000238 	.word	0x20000238

0800152c <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 8001530:	2064      	movs	r0, #100	@ 0x64
 8001532:	f001 fd93 	bl	800305c <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 8001536:	20ae      	movs	r0, #174	@ 0xae
 8001538:	f7ff ffde 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 800153c:	20d5      	movs	r0, #213	@ 0xd5
 800153e:	f7ff ffdb 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 8001542:	2080      	movs	r0, #128	@ 0x80
 8001544:	f7ff ffd8 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8001548:	20a8      	movs	r0, #168	@ 0xa8
 800154a:	f7ff ffd5 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 800154e:	203f      	movs	r0, #63	@ 0x3f
 8001550:	f7ff ffd2 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8001554:	20d3      	movs	r0, #211	@ 0xd3
 8001556:	f7ff ffcf 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 800155a:	2000      	movs	r0, #0
 800155c:	f7ff ffcc 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8001560:	2040      	movs	r0, #64	@ 0x40
 8001562:	f7ff ffc9 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 8001566:	208d      	movs	r0, #141	@ 0x8d
 8001568:	f7ff ffc6 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 800156c:	2014      	movs	r0, #20
 800156e:	f7ff ffc3 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 8001572:	2020      	movs	r0, #32
 8001574:	f7ff ffc0 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 8001578:	2000      	movs	r0, #0
 800157a:	f7ff ffbd 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 800157e:	20a1      	movs	r0, #161	@ 0xa1
 8001580:	f7ff ffba 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 8001584:	20c8      	movs	r0, #200	@ 0xc8
 8001586:	f7ff ffb7 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 800158a:	20da      	movs	r0, #218	@ 0xda
 800158c:	f7ff ffb4 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8001590:	2012      	movs	r0, #18
 8001592:	f7ff ffb1 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 8001596:	2081      	movs	r0, #129	@ 0x81
 8001598:	f7ff ffae 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 800159c:	20cf      	movs	r0, #207	@ 0xcf
 800159e:	f7ff ffab 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 80015a2:	20d9      	movs	r0, #217	@ 0xd9
 80015a4:	f7ff ffa8 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 80015a8:	20f1      	movs	r0, #241	@ 0xf1
 80015aa:	f7ff ffa5 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 80015ae:	20db      	movs	r0, #219	@ 0xdb
 80015b0:	f7ff ffa2 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 80015b4:	2030      	movs	r0, #48	@ 0x30
 80015b6:	f7ff ff9f 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 80015ba:	20a4      	movs	r0, #164	@ 0xa4
 80015bc:	f7ff ff9c 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 80015c0:	20a6      	movs	r0, #166	@ 0xa6
 80015c2:	f7ff ff99 	bl	80014f8 <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 80015c6:	202e      	movs	r0, #46	@ 0x2e
 80015c8:	f7ff ff96 	bl	80014f8 <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 80015cc:	f7ff fdd2 	bl	8001174 <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 80015d0:	f7ff fe04 	bl	80011dc <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 80015d4:	20af      	movs	r0, #175	@ 0xaf
 80015d6:	f7ff ff8f 	bl	80014f8 <OLED_SendCommand>
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <OLED_DisplayChar>:
    OLED_SendCommand(0x00 + (x & 0x0F));        // 设置低4位列地址
    OLED_SendCommand(0x10 + ((x >> 4) & 0x0F)); // 设置高4位列地址
}

void OLED_DisplayChar(int16_t x, int16_t y, char ch) //! UPDATEDISPLAY REQUIRED
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	@ 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	80fb      	strh	r3, [r7, #6]
 80015ea:	460b      	mov	r3, r1
 80015ec:	80bb      	strh	r3, [r7, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	70fb      	strb	r3, [r7, #3]
    const uint8_t font_width = 6;
 80015f2:	2306      	movs	r3, #6
 80015f4:	773b      	strb	r3, [r7, #28]
    const uint8_t font_height = 8;
 80015f6:	2308      	movs	r3, #8
 80015f8:	76fb      	strb	r3, [r7, #27]

    if (ch < 32)
 80015fa:	78fb      	ldrb	r3, [r7, #3]
 80015fc:	2b1f      	cmp	r3, #31
 80015fe:	f240 80aa 	bls.w	8001756 <OLED_DisplayChar+0x176>
        return;

    uint8_t c = ch - 32;
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	3b20      	subs	r3, #32
 8001606:	76bb      	strb	r3, [r7, #26]

    uint8_t start_page = (y >= 0) ? (y / 8) : 0;
 8001608:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db08      	blt.n	8001622 <OLED_DisplayChar+0x42>
 8001610:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	da00      	bge.n	800161a <OLED_DisplayChar+0x3a>
 8001618:	3307      	adds	r3, #7
 800161a:	10db      	asrs	r3, r3, #3
 800161c:	b21b      	sxth	r3, r3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	e000      	b.n	8001624 <OLED_DisplayChar+0x44>
 8001622:	2300      	movs	r3, #0
 8001624:	767b      	strb	r3, [r7, #25]
    uint8_t end_page = ((y + font_height - 1) < OLED_HEIGHT) ? ((y + font_height - 1) / 8) : (OLED_HEIGHT / 8 - 1);
 8001626:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800162a:	7efb      	ldrb	r3, [r7, #27]
 800162c:	4413      	add	r3, r2
 800162e:	2b40      	cmp	r3, #64	@ 0x40
 8001630:	dc0a      	bgt.n	8001648 <OLED_DisplayChar+0x68>
 8001632:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001636:	7efb      	ldrb	r3, [r7, #27]
 8001638:	4413      	add	r3, r2
 800163a:	3b01      	subs	r3, #1
 800163c:	2b00      	cmp	r3, #0
 800163e:	da00      	bge.n	8001642 <OLED_DisplayChar+0x62>
 8001640:	3307      	adds	r3, #7
 8001642:	10db      	asrs	r3, r3, #3
 8001644:	b2db      	uxtb	r3, r3
 8001646:	e000      	b.n	800164a <OLED_DisplayChar+0x6a>
 8001648:	2307      	movs	r3, #7
 800164a:	763b      	strb	r3, [r7, #24]

    extern volatile uint8_t oled_dirty_pages[];
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 800164c:	7e7b      	ldrb	r3, [r7, #25]
 800164e:	77fb      	strb	r3, [r7, #31]
 8001650:	e006      	b.n	8001660 <OLED_DisplayChar+0x80>
    {
        oled_dirty_pages[page] = 1;
 8001652:	7ffb      	ldrb	r3, [r7, #31]
 8001654:	4a43      	ldr	r2, [pc, #268]	@ (8001764 <OLED_DisplayChar+0x184>)
 8001656:	2101      	movs	r1, #1
 8001658:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 800165a:	7ffb      	ldrb	r3, [r7, #31]
 800165c:	3301      	adds	r3, #1
 800165e:	77fb      	strb	r3, [r7, #31]
 8001660:	7ffa      	ldrb	r2, [r7, #31]
 8001662:	7e3b      	ldrb	r3, [r7, #24]
 8001664:	429a      	cmp	r2, r3
 8001666:	d802      	bhi.n	800166e <OLED_DisplayChar+0x8e>
 8001668:	7ffb      	ldrb	r3, [r7, #31]
 800166a:	2b07      	cmp	r3, #7
 800166c:	d9f1      	bls.n	8001652 <OLED_DisplayChar+0x72>
    }
    // 按列渲染
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 800166e:	2300      	movs	r3, #0
 8001670:	77bb      	strb	r3, [r7, #30]
 8001672:	e06b      	b.n	800174c <OLED_DisplayChar+0x16c>
    {
        int16_t screen_x = x + char_col;
 8001674:	7fbb      	ldrb	r3, [r7, #30]
 8001676:	b29a      	uxth	r2, r3
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	4413      	add	r3, r2
 800167c:	b29b      	uxth	r3, r3
 800167e:	82fb      	strh	r3, [r7, #22]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 8001680:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001684:	2b00      	cmp	r3, #0
 8001686:	db5d      	blt.n	8001744 <OLED_DisplayChar+0x164>
 8001688:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800168c:	2b7f      	cmp	r3, #127	@ 0x7f
 800168e:	dc59      	bgt.n	8001744 <OLED_DisplayChar+0x164>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 8001690:	7ebb      	ldrb	r3, [r7, #26]
 8001692:	7f3a      	ldrb	r2, [r7, #28]
 8001694:	fb03 f202 	mul.w	r2, r3, r2
 8001698:	7fbb      	ldrb	r3, [r7, #30]
 800169a:	4413      	add	r3, r2
 800169c:	461a      	mov	r2, r3
 800169e:	f240 2321 	movw	r3, #545	@ 0x221
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d859      	bhi.n	800175a <OLED_DisplayChar+0x17a>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 80016a6:	7ebb      	ldrb	r3, [r7, #26]
 80016a8:	7f3a      	ldrb	r2, [r7, #28]
 80016aa:	fb03 f202 	mul.w	r2, r3, r2
 80016ae:	7fbb      	ldrb	r3, [r7, #30]
 80016b0:	4413      	add	r3, r2
 80016b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001768 <OLED_DisplayChar+0x188>)
 80016b4:	5cd3      	ldrb	r3, [r2, r3]
 80016b6:	757b      	strb	r3, [r7, #21]

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 80016b8:	2300      	movs	r3, #0
 80016ba:	777b      	strb	r3, [r7, #29]
 80016bc:	e03d      	b.n	800173a <OLED_DisplayChar+0x15a>
        {
            int16_t screen_y = y + char_row_bit;
 80016be:	7f7b      	ldrb	r3, [r7, #29]
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	88bb      	ldrh	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	827b      	strh	r3, [r7, #18]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 80016ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	db2f      	blt.n	8001732 <OLED_DisplayChar+0x152>
 80016d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80016d8:	dc2b      	bgt.n	8001732 <OLED_DisplayChar+0x152>
                continue;

            if ((font_data_col >> char_row_bit) & 0x01)
 80016da:	7d7a      	ldrb	r2, [r7, #21]
 80016dc:	7f7b      	ldrb	r3, [r7, #29]
 80016de:	fa42 f303 	asr.w	r3, r2, r3
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d024      	beq.n	8001734 <OLED_DisplayChar+0x154>
            {
                uint8_t page = (uint8_t)screen_y / 8;
 80016ea:	8a7b      	ldrh	r3, [r7, #18]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	08db      	lsrs	r3, r3, #3
 80016f0:	747b      	strb	r3, [r7, #17]
                uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 80016f2:	8a7b      	ldrh	r3, [r7, #18]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	743b      	strb	r3, [r7, #16]
                uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 80016fc:	7c7b      	ldrb	r3, [r7, #17]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	01db      	lsls	r3, r3, #7
 8001702:	b29a      	uxth	r2, r3
 8001704:	8afb      	ldrh	r3, [r7, #22]
 8001706:	4413      	add	r3, r2
 8001708:	81fb      	strh	r3, [r7, #14]

                if (buffer_index < sizeof(OLED_BackBuffer))
 800170a:	89fb      	ldrh	r3, [r7, #14]
 800170c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001710:	d210      	bcs.n	8001734 <OLED_DisplayChar+0x154>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 8001712:	89fb      	ldrh	r3, [r7, #14]
 8001714:	4a15      	ldr	r2, [pc, #84]	@ (800176c <OLED_DisplayChar+0x18c>)
 8001716:	5cd3      	ldrb	r3, [r2, r3]
 8001718:	b25a      	sxtb	r2, r3
 800171a:	7c3b      	ldrb	r3, [r7, #16]
 800171c:	2101      	movs	r1, #1
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	b25b      	sxtb	r3, r3
 8001724:	4313      	orrs	r3, r2
 8001726:	b25a      	sxtb	r2, r3
 8001728:	89fb      	ldrh	r3, [r7, #14]
 800172a:	b2d1      	uxtb	r1, r2
 800172c:	4a0f      	ldr	r2, [pc, #60]	@ (800176c <OLED_DisplayChar+0x18c>)
 800172e:	54d1      	strb	r1, [r2, r3]
 8001730:	e000      	b.n	8001734 <OLED_DisplayChar+0x154>
                continue;
 8001732:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8001734:	7f7b      	ldrb	r3, [r7, #29]
 8001736:	3301      	adds	r3, #1
 8001738:	777b      	strb	r3, [r7, #29]
 800173a:	7f7a      	ldrb	r2, [r7, #29]
 800173c:	7efb      	ldrb	r3, [r7, #27]
 800173e:	429a      	cmp	r2, r3
 8001740:	d3bd      	bcc.n	80016be <OLED_DisplayChar+0xde>
 8001742:	e000      	b.n	8001746 <OLED_DisplayChar+0x166>
            continue;
 8001744:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8001746:	7fbb      	ldrb	r3, [r7, #30]
 8001748:	3301      	adds	r3, #1
 800174a:	77bb      	strb	r3, [r7, #30]
 800174c:	7fba      	ldrb	r2, [r7, #30]
 800174e:	7f3b      	ldrb	r3, [r7, #28]
 8001750:	429a      	cmp	r2, r3
 8001752:	d38f      	bcc.n	8001674 <OLED_DisplayChar+0x94>
 8001754:	e002      	b.n	800175c <OLED_DisplayChar+0x17c>
        return;
 8001756:	bf00      	nop
 8001758:	e000      	b.n	800175c <OLED_DisplayChar+0x17c>
            break;
 800175a:	bf00      	nop
                }
            }
        }
    }
}
 800175c:	3724      	adds	r7, #36	@ 0x24
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	20000330 	.word	0x20000330
 8001768:	08008150 	.word	0x08008150
 800176c:	20000338 	.word	0x20000338

08001770 <OLED_DisplayString>:
        }
    }
}

void OLED_DisplayString(int16_t x, int16_t y, char *str) //! UPDATEDISPLAY REQUIRED
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	603a      	str	r2, [r7, #0]
 800177a:	80fb      	strh	r3, [r7, #6]
 800177c:	460b      	mov	r3, r1
 800177e:	80bb      	strh	r3, [r7, #4]
    uint8_t j = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	73fb      	strb	r3, [r7, #15]
    const uint8_t font_width = 6;
 8001784:	2306      	movs	r3, #6
 8001786:	73bb      	strb	r3, [r7, #14]
    const uint8_t font_height = 8;
 8001788:	2308      	movs	r3, #8
 800178a:	737b      	strb	r3, [r7, #13]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 800178c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001790:	2b3f      	cmp	r3, #63	@ 0x3f
 8001792:	dc34      	bgt.n	80017fe <OLED_DisplayString+0x8e>
 8001794:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001798:	7b7b      	ldrb	r3, [r7, #13]
 800179a:	4413      	add	r3, r2
 800179c:	2b00      	cmp	r3, #0
 800179e:	dd2e      	ble.n	80017fe <OLED_DisplayString+0x8e>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 80017a0:	e026      	b.n	80017f0 <OLED_DisplayString+0x80>
    {
        current_char_x = x + (j * font_width);
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	7bba      	ldrb	r2, [r7, #14]
 80017a8:	b292      	uxth	r2, r2
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	4413      	add	r3, r2
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	817b      	strh	r3, [r7, #10]
        if (current_char_x >= OLED_WIDTH)
 80017b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80017be:	dc20      	bgt.n	8001802 <OLED_DisplayString+0x92>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 80017c0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80017c4:	7bbb      	ldrb	r3, [r7, #14]
 80017c6:	4413      	add	r3, r2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	dc03      	bgt.n	80017d4 <OLED_DisplayString+0x64>
        {
            j++;
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	3301      	adds	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
            continue;
 80017d2:	e00d      	b.n	80017f0 <OLED_DisplayString+0x80>
        }
        OLED_DisplayChar(current_char_x, y, str[j]);
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	4413      	add	r3, r2
 80017da:	781a      	ldrb	r2, [r3, #0]
 80017dc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80017e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fefb 	bl	80015e0 <OLED_DisplayChar>
        j++;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	3301      	adds	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
    while (str[j] != '\0')
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	4413      	add	r3, r2
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1d2      	bne.n	80017a2 <OLED_DisplayString+0x32>
 80017fc:	e002      	b.n	8001804 <OLED_DisplayString+0x94>
        return;
 80017fe:	bf00      	nop
 8001800:	e000      	b.n	8001804 <OLED_DisplayString+0x94>
            break;
 8001802:	bf00      	nop
    }
}
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <OLED_EnableDiffMode>:
    }
}

// 启用差分更新模式
void OLED_EnableDiffMode(uint8_t enable)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
    diff_mode_enabled = enable;
 8001816:	4a09      	ldr	r2, [pc, #36]	@ (800183c <OLED_EnableDiffMode+0x30>)
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	7013      	strb	r3, [r2, #0]
    if (enable)
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d008      	beq.n	8001834 <OLED_EnableDiffMode+0x28>
    {
        memcpy(OLED_PrevBuffer, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES);
 8001822:	4a07      	ldr	r2, [pc, #28]	@ (8001840 <OLED_EnableDiffMode+0x34>)
 8001824:	4b07      	ldr	r3, [pc, #28]	@ (8001844 <OLED_EnableDiffMode+0x38>)
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800182e:	461a      	mov	r2, r3
 8001830:	f004 fa37 	bl	8005ca2 <memcpy>
    }
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000f3c 	.word	0x20000f3c
 8001840:	20000b3c 	.word	0x20000b3c
 8001844:	20000338 	.word	0x20000338

08001848 <OLED_EnableFastUpdate>:

// 设置快速更新模式
void OLED_EnableFastUpdate(uint8_t enable)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
    fast_update_enabled = enable;
 8001852:	4a04      	ldr	r2, [pc, #16]	@ (8001864 <OLED_EnableFastUpdate+0x1c>)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	7013      	strb	r3, [r2, #0]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000002 	.word	0x20000002

08001868 <OLED_SmartUpdate>:

// 智能更新显示
// 选择性更新脏页，以提高帧率
void OLED_SmartUpdate(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
    // 如果OLED/DMA忙，直接返回
    if (OLED_IsBusy())
 800186e:	f7ff fcd5 	bl	800121c <OLED_IsBusy>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	f040 8082 	bne.w	800197e <OLED_SmartUpdate+0x116>
    {
        return;
    }

    // 检查是否有脏页需要更新
    uint8_t has_dirty = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	73fb      	strb	r3, [r7, #15]
    uint8_t first_dirty = 255;
 800187e:	23ff      	movs	r3, #255	@ 0xff
 8001880:	73bb      	strb	r3, [r7, #14]
    uint8_t last_dirty = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	737b      	strb	r3, [r7, #13]

    // 如果启用了差分更新，检查哪些页已经变化
    if (diff_mode_enabled)
 8001886:	4b40      	ldr	r3, [pc, #256]	@ (8001988 <OLED_SmartUpdate+0x120>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d046      	beq.n	800191c <OLED_SmartUpdate+0xb4>
    {
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 800188e:	2300      	movs	r3, #0
 8001890:	733b      	strb	r3, [r7, #12]
 8001892:	e03f      	b.n	8001914 <OLED_SmartUpdate+0xac>
        {
            // 检查此页中是否有任何字节发生变化
            uint8_t page_changed = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	72fb      	strb	r3, [r7, #11]
            uint16_t start_idx = page * OLED_WIDTH;
 8001898:	7b3b      	ldrb	r3, [r7, #12]
 800189a:	b29b      	uxth	r3, r3
 800189c:	01db      	lsls	r3, r3, #7
 800189e:	80bb      	strh	r3, [r7, #4]

            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 80018a0:	2300      	movs	r3, #0
 80018a2:	813b      	strh	r3, [r7, #8]
 80018a4:	e015      	b.n	80018d2 <OLED_SmartUpdate+0x6a>
            {
                if (OLED_BackBuffer[start_idx + i] != OLED_PrevBuffer[start_idx + i])
 80018a6:	88ba      	ldrh	r2, [r7, #4]
 80018a8:	893b      	ldrh	r3, [r7, #8]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a37      	ldr	r2, [pc, #220]	@ (800198c <OLED_SmartUpdate+0x124>)
 80018ae:	5cd2      	ldrb	r2, [r2, r3]
 80018b0:	88b9      	ldrh	r1, [r7, #4]
 80018b2:	893b      	ldrh	r3, [r7, #8]
 80018b4:	440b      	add	r3, r1
 80018b6:	4936      	ldr	r1, [pc, #216]	@ (8001990 <OLED_SmartUpdate+0x128>)
 80018b8:	5ccb      	ldrb	r3, [r1, r3]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d006      	beq.n	80018cc <OLED_SmartUpdate+0x64>
                {
                    page_changed = 1;
 80018be:	2301      	movs	r3, #1
 80018c0:	72fb      	strb	r3, [r7, #11]
                    oled_dirty_pages[page] = 1;
 80018c2:	7b3b      	ldrb	r3, [r7, #12]
 80018c4:	4a33      	ldr	r2, [pc, #204]	@ (8001994 <OLED_SmartUpdate+0x12c>)
 80018c6:	2101      	movs	r1, #1
 80018c8:	54d1      	strb	r1, [r2, r3]
                    break;
 80018ca:	e005      	b.n	80018d8 <OLED_SmartUpdate+0x70>
            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 80018cc:	893b      	ldrh	r3, [r7, #8]
 80018ce:	3301      	adds	r3, #1
 80018d0:	813b      	strh	r3, [r7, #8]
 80018d2:	893b      	ldrh	r3, [r7, #8]
 80018d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80018d6:	d9e6      	bls.n	80018a6 <OLED_SmartUpdate+0x3e>
                }
            }

            if (page_changed)
 80018d8:	7afb      	ldrb	r3, [r7, #11]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d017      	beq.n	800190e <OLED_SmartUpdate+0xa6>
            {
                has_dirty = 1;
 80018de:	2301      	movs	r3, #1
 80018e0:	73fb      	strb	r3, [r7, #15]
                if (page < first_dirty)
 80018e2:	7b3a      	ldrb	r2, [r7, #12]
 80018e4:	7bbb      	ldrb	r3, [r7, #14]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d201      	bcs.n	80018ee <OLED_SmartUpdate+0x86>
                    first_dirty = page;
 80018ea:	7b3b      	ldrb	r3, [r7, #12]
 80018ec:	73bb      	strb	r3, [r7, #14]
                if (page > last_dirty)
 80018ee:	7b3a      	ldrb	r2, [r7, #12]
 80018f0:	7b7b      	ldrb	r3, [r7, #13]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d901      	bls.n	80018fa <OLED_SmartUpdate+0x92>
                    last_dirty = page;
 80018f6:	7b3b      	ldrb	r3, [r7, #12]
 80018f8:	737b      	strb	r3, [r7, #13]

                // 更新上一帧缓存
                memcpy(
 80018fa:	88bb      	ldrh	r3, [r7, #4]
 80018fc:	4a24      	ldr	r2, [pc, #144]	@ (8001990 <OLED_SmartUpdate+0x128>)
 80018fe:	1898      	adds	r0, r3, r2
 8001900:	88bb      	ldrh	r3, [r7, #4]
 8001902:	4a22      	ldr	r2, [pc, #136]	@ (800198c <OLED_SmartUpdate+0x124>)
 8001904:	4413      	add	r3, r2
 8001906:	2280      	movs	r2, #128	@ 0x80
 8001908:	4619      	mov	r1, r3
 800190a:	f004 f9ca 	bl	8005ca2 <memcpy>
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 800190e:	7b3b      	ldrb	r3, [r7, #12]
 8001910:	3301      	adds	r3, #1
 8001912:	733b      	strb	r3, [r7, #12]
 8001914:	7b3b      	ldrb	r3, [r7, #12]
 8001916:	2b07      	cmp	r3, #7
 8001918:	d9bc      	bls.n	8001894 <OLED_SmartUpdate+0x2c>
 800191a:	e01c      	b.n	8001956 <OLED_SmartUpdate+0xee>
        }
    }
    else
    {
        // 如果未启用差分更新，使用脏页标记
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 800191c:	2300      	movs	r3, #0
 800191e:	71fb      	strb	r3, [r7, #7]
 8001920:	e016      	b.n	8001950 <OLED_SmartUpdate+0xe8>
        {
            if (oled_dirty_pages[i])
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	4a1b      	ldr	r2, [pc, #108]	@ (8001994 <OLED_SmartUpdate+0x12c>)
 8001926:	5cd3      	ldrb	r3, [r2, r3]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00d      	beq.n	800194a <OLED_SmartUpdate+0xe2>
            {
                has_dirty = 1;
 800192e:	2301      	movs	r3, #1
 8001930:	73fb      	strb	r3, [r7, #15]
                if (i < first_dirty)
 8001932:	79fa      	ldrb	r2, [r7, #7]
 8001934:	7bbb      	ldrb	r3, [r7, #14]
 8001936:	429a      	cmp	r2, r3
 8001938:	d201      	bcs.n	800193e <OLED_SmartUpdate+0xd6>
                    first_dirty = i;
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	73bb      	strb	r3, [r7, #14]
                if (i > last_dirty)
 800193e:	79fa      	ldrb	r2, [r7, #7]
 8001940:	7b7b      	ldrb	r3, [r7, #13]
 8001942:	429a      	cmp	r2, r3
 8001944:	d901      	bls.n	800194a <OLED_SmartUpdate+0xe2>
                    last_dirty = i;
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	737b      	strb	r3, [r7, #13]
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	3301      	adds	r3, #1
 800194e:	71fb      	strb	r3, [r7, #7]
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	2b07      	cmp	r3, #7
 8001954:	d9e5      	bls.n	8001922 <OLED_SmartUpdate+0xba>
            }
        }
    }

    // 如果有脏页，只更新这些页
    if (has_dirty && fast_update_enabled)
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00a      	beq.n	8001972 <OLED_SmartUpdate+0x10a>
 800195c:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <OLED_SmartUpdate+0x130>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d006      	beq.n	8001972 <OLED_SmartUpdate+0x10a>
    {
        OLED_UpdateDisplayPartial(first_dirty, last_dirty);
 8001964:	7b7a      	ldrb	r2, [r7, #13]
 8001966:	7bbb      	ldrb	r3, [r7, #14]
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fcd6 	bl	800131c <OLED_UpdateDisplayPartial>
 8001970:	e006      	b.n	8001980 <OLED_SmartUpdate+0x118>
    }
    else if (has_dirty)
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <OLED_SmartUpdate+0x118>
    {
        OLED_UpdateDisplayVSync();
 8001978:	f7ff fc78 	bl	800126c <OLED_UpdateDisplayVSync>
 800197c:	e000      	b.n	8001980 <OLED_SmartUpdate+0x118>
        return;
 800197e:	bf00      	nop
    }
}
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000f3c 	.word	0x20000f3c
 800198c:	20000338 	.word	0x20000338
 8001990:	20000b3c 	.word	0x20000b3c
 8001994:	20000330 	.word	0x20000330
 8001998:	20000002 	.word	0x20000002

0800199c <OLED_OptimizedDisplayFPS>:


// 显示FPS
void OLED_OptimizedDisplayFPS(int16_t x, int16_t y)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	460a      	mov	r2, r1
 80019a6:	80fb      	strh	r3, [r7, #6]
 80019a8:	4613      	mov	r3, r2
 80019aa:	80bb      	strh	r3, [r7, #4]
    static uint32_t last_time = 0;
    static uint32_t frames = 0;
    static uint32_t fps = 0;
    static char fps_str[16] = "FPS:0";

    frames++;
 80019ac:	4b15      	ldr	r3, [pc, #84]	@ (8001a04 <OLED_OptimizedDisplayFPS+0x68>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	3301      	adds	r3, #1
 80019b2:	4a14      	ldr	r2, [pc, #80]	@ (8001a04 <OLED_OptimizedDisplayFPS+0x68>)
 80019b4:	6013      	str	r3, [r2, #0]

    // 每秒更新一次FPS
    uint32_t current_time = HAL_GetTick();
 80019b6:	f001 fb47 	bl	8003048 <HAL_GetTick>
 80019ba:	60f8      	str	r0, [r7, #12]
    if (current_time - last_time >= 1000)
 80019bc:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <OLED_OptimizedDisplayFPS+0x6c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019c8:	d310      	bcc.n	80019ec <OLED_OptimizedDisplayFPS+0x50>
    {
        fps = frames;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <OLED_OptimizedDisplayFPS+0x68>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a0f      	ldr	r2, [pc, #60]	@ (8001a0c <OLED_OptimizedDisplayFPS+0x70>)
 80019d0:	6013      	str	r3, [r2, #0]
        sprintf(fps_str, "FPS:%d", fps);
 80019d2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a0c <OLED_OptimizedDisplayFPS+0x70>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	490d      	ldr	r1, [pc, #52]	@ (8001a10 <OLED_OptimizedDisplayFPS+0x74>)
 80019da:	480e      	ldr	r0, [pc, #56]	@ (8001a14 <OLED_OptimizedDisplayFPS+0x78>)
 80019dc:	f004 f880 	bl	8005ae0 <siprintf>
        frames = 0;
 80019e0:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <OLED_OptimizedDisplayFPS+0x68>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
        last_time = current_time;
 80019e6:	4a08      	ldr	r2, [pc, #32]	@ (8001a08 <OLED_OptimizedDisplayFPS+0x6c>)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6013      	str	r3, [r2, #0]
    }

    OLED_DisplayString(x, y, fps_str);
 80019ec:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80019f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f4:	4a07      	ldr	r2, [pc, #28]	@ (8001a14 <OLED_OptimizedDisplayFPS+0x78>)
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff feba 	bl	8001770 <OLED_DisplayString>
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000f40 	.word	0x20000f40
 8001a08:	20000f44 	.word	0x20000f44
 8001a0c:	20000f48 	.word	0x20000f48
 8001a10:	08008148 	.word	0x08008148
 8001a14:	20000004 	.word	0x20000004

08001a18 <EaseLinear>:
#include "stdint.h" // 添加 stdint.h 以支持标准整数类型
#include "oled_ui.h"
#pragma region TWEENS // 动画缓动函数全部在这里定义

static float EaseLinear(float t)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
    return t;
 8001a20:	687b      	ldr	r3, [r7, #4]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <EaseInQuad>:

static float EaseInQuad(float t)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
    return t * t;
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7fe fc96 	bl	8000368 <__aeabi_fmul>
 8001a3c:	4603      	mov	r3, r0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <EaseOutQuad>:

static float EaseOutQuad(float t)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
    return t * (2 - t);
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001a54:	f7fe fb7e 	bl	8000154 <__aeabi_fsub>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fc83 	bl	8000368 <__aeabi_fmul>
 8001a62:	4603      	mov	r3, r0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <EaseInOutQuad>:

static float EaseInOutQuad(float t)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 2 * t * t : -1 + (4 - 2 * t) * t;
 8001a74:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7fe fe13 	bl	80006a4 <__aeabi_fcmplt>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00b      	beq.n	8001a9c <EaseInOutQuad+0x30>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4619      	mov	r1, r3
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fb65 	bl	8000158 <__addsf3>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fc68 	bl	8000368 <__aeabi_fmul>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	e016      	b.n	8001aca <EaseInOutQuad+0x5e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fb59 	bl	8000158 <__addsf3>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 8001aae:	f7fe fb51 	bl	8000154 <__aeabi_fsub>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fc56 	bl	8000368 <__aeabi_fmul>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fb46 	bl	8000154 <__aeabi_fsub>
 8001ac8:	4603      	mov	r3, r0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <EaseInCubic>:

static float EaseInCubic(float t)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
    return t * t * t;
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7fe fc43 	bl	8000368 <__aeabi_fmul>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fc3e 	bl	8000368 <__aeabi_fmul>
 8001aec:	4603      	mov	r3, r0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <EaseOutCubic>:

static float EaseOutCubic(float t)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
    float t1 = t - 1;
 8001afe:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7fe fb26 	bl	8000154 <__aeabi_fsub>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	60fb      	str	r3, [r7, #12]
    return t1 * t1 * t1 + 1;
 8001b0c:	68f9      	ldr	r1, [r7, #12]
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7fe fc2a 	bl	8000368 <__aeabi_fmul>
 8001b14:	4603      	mov	r3, r0
 8001b16:	68f9      	ldr	r1, [r7, #12]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fc25 	bl	8000368 <__aeabi_fmul>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fb17 	bl	8000158 <__addsf3>
 8001b2a:	4603      	mov	r3, r0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <EaseInOutCubic>:

static float EaseInOutCubic(float t)
{
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
 8001b3c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7fe fdaf 	bl	80006a4 <__aeabi_fcmplt>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d010      	beq.n	8001b6e <EaseInOutCubic+0x3a>
 8001b4c:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7fe fc09 	bl	8000368 <__aeabi_fmul>
 8001b56:	4603      	mov	r3, r0
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fc04 	bl	8000368 <__aeabi_fmul>
 8001b60:	4603      	mov	r3, r0
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fbff 	bl	8000368 <__aeabi_fmul>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	e02f      	b.n	8001bce <EaseInOutCubic+0x9a>
 8001b6e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7fe faee 	bl	8000154 <__aeabi_fsub>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461c      	mov	r4, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fae9 	bl	8000158 <__addsf3>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fae1 	bl	8000154 <__aeabi_fsub>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4619      	mov	r1, r3
 8001b96:	4620      	mov	r0, r4
 8001b98:	f7fe fbe6 	bl	8000368 <__aeabi_fmul>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	461c      	mov	r4, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fad7 	bl	8000158 <__addsf3>
 8001baa:	4603      	mov	r3, r0
 8001bac:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe facf 	bl	8000154 <__aeabi_fsub>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f7fe fbd4 	bl	8000368 <__aeabi_fmul>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fac6 	bl	8000158 <__addsf3>
 8001bcc:	4603      	mov	r3, r0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd90      	pop	{r4, r7, pc}
	...

08001bd8 <EaseInExpo>:

// 在现有EaseType_t枚举中添加这些新类型
// 指数缓动
static float EaseInExpo(float t)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
    return (t == 0) ? 0 : powf(2, 10 * (t - 1));
 8001be0:	f04f 0100 	mov.w	r1, #0
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7fe fd53 	bl	8000690 <__aeabi_fcmpeq>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d111      	bne.n	8001c14 <EaseInExpo+0x3c>
 8001bf0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7fe faad 	bl	8000154 <__aeabi_fsub>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4908      	ldr	r1, [pc, #32]	@ (8001c20 <EaseInExpo+0x48>)
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fbb2 	bl	8000368 <__aeabi_fmul>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4619      	mov	r1, r3
 8001c08:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001c0c:	f005 f826 	bl	8006c5c <powf>
 8001c10:	4603      	mov	r3, r0
 8001c12:	e001      	b.n	8001c18 <EaseInExpo+0x40>
 8001c14:	f04f 0300 	mov.w	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	41200000 	.word	0x41200000

08001c24 <EaseOutExpo>:

static float EaseOutExpo(float t)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
    return (t == 1) ? 1 : (1 - powf(2, -10 * t));
 8001c2c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7fe fd2d 	bl	8000690 <__aeabi_fcmpeq>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d111      	bne.n	8001c60 <EaseOutExpo+0x3c>
 8001c3c:	490b      	ldr	r1, [pc, #44]	@ (8001c6c <EaseOutExpo+0x48>)
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7fe fb92 	bl	8000368 <__aeabi_fmul>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4619      	mov	r1, r3
 8001c48:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001c4c:	f005 f806 	bl	8006c5c <powf>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001c58:	f7fe fa7c 	bl	8000154 <__aeabi_fsub>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	e001      	b.n	8001c64 <EaseOutExpo+0x40>
 8001c60:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	c1200000 	.word	0xc1200000

08001c70 <EaseInOutExpo>:

static float EaseInOutExpo(float t)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
    if (t == 0)
 8001c78:	f04f 0100 	mov.w	r1, #0
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7fe fd07 	bl	8000690 <__aeabi_fcmpeq>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <EaseInOutExpo+0x1e>
        return 0;
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	e045      	b.n	8001d1a <EaseInOutExpo+0xaa>
    if (t == 1)
 8001c8e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7fe fcfc 	bl	8000690 <__aeabi_fcmpeq>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <EaseInOutExpo+0x34>
        return 1;
 8001c9e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001ca2:	e03a      	b.n	8001d1a <EaseInOutExpo+0xaa>
    if (t < 0.5f)
 8001ca4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7fe fcfb 	bl	80006a4 <__aeabi_fcmplt>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d016      	beq.n	8001ce2 <EaseInOutExpo+0x72>
        return powf(2, 20 * t - 10) / 2;
 8001cb4:	491b      	ldr	r1, [pc, #108]	@ (8001d24 <EaseInOutExpo+0xb4>)
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7fe fb56 	bl	8000368 <__aeabi_fmul>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	491a      	ldr	r1, [pc, #104]	@ (8001d28 <EaseInOutExpo+0xb8>)
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fa47 	bl	8000154 <__aeabi_fsub>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001cce:	f004 ffc5 	bl	8006c5c <powf>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fbf9 	bl	80004d0 <__aeabi_fdiv>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	e01b      	b.n	8001d1a <EaseInOutExpo+0xaa>
    return (2 - powf(2, -20 * t + 10)) / 2;
 8001ce2:	4912      	ldr	r1, [pc, #72]	@ (8001d2c <EaseInOutExpo+0xbc>)
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7fe fb3f 	bl	8000368 <__aeabi_fmul>
 8001cea:	4603      	mov	r3, r0
 8001cec:	490e      	ldr	r1, [pc, #56]	@ (8001d28 <EaseInOutExpo+0xb8>)
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fa32 	bl	8000158 <__addsf3>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001cfc:	f004 ffae 	bl	8006c5c <powf>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4619      	mov	r1, r3
 8001d04:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001d08:	f7fe fa24 	bl	8000154 <__aeabi_fsub>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fbdc 	bl	80004d0 <__aeabi_fdiv>
 8001d18:	4603      	mov	r3, r0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	41a00000 	.word	0x41a00000
 8001d28:	41200000 	.word	0x41200000
 8001d2c:	c1a00000 	.word	0xc1a00000

08001d30 <EaseInCirc>:

// 圆形曲线缓动
static float EaseInCirc(float t)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
    return 1 - sqrtf(1 - t * t);
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7fe fb14 	bl	8000368 <__aeabi_fmul>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4619      	mov	r1, r3
 8001d44:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001d48:	f7fe fa04 	bl	8000154 <__aeabi_fsub>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f004 ffd1 	bl	8006cf6 <sqrtf>
 8001d54:	4603      	mov	r3, r0
 8001d56:	4619      	mov	r1, r3
 8001d58:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001d5c:	f7fe f9fa 	bl	8000154 <__aeabi_fsub>
 8001d60:	4603      	mov	r3, r0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <EaseOutCirc>:

static float EaseOutCirc(float t)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
    return sqrtf(1 - powf(t - 1, 2));
 8001d72:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7fe f9ec 	bl	8000154 <__aeabi_fsub>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001d82:	4618      	mov	r0, r3
 8001d84:	f004 ff6a 	bl	8006c5c <powf>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001d90:	f7fe f9e0 	bl	8000154 <__aeabi_fsub>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f004 ffad 	bl	8006cf6 <sqrtf>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <EaseInOutCirc>:

static float EaseInOutCirc(float t)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 8001dae:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7fe fc76 	bl	80006a4 <__aeabi_fcmplt>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d022      	beq.n	8001e04 <EaseInOutCirc+0x5e>
        return (1 - sqrtf(1 - powf(2 * t, 2))) / 2;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe f9c8 	bl	8000158 <__addsf3>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f004 ff44 	bl	8006c5c <powf>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001ddc:	f7fe f9ba 	bl	8000154 <__aeabi_fsub>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f004 ff87 	bl	8006cf6 <sqrtf>
 8001de8:	4603      	mov	r3, r0
 8001dea:	4619      	mov	r1, r3
 8001dec:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001df0:	f7fe f9b0 	bl	8000154 <__aeabi_fsub>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fb68 	bl	80004d0 <__aeabi_fdiv>
 8001e00:	4603      	mov	r3, r0
 8001e02:	e027      	b.n	8001e54 <EaseInOutCirc+0xae>
    return (sqrtf(1 - powf(-2 * t + 2, 2)) + 1) / 2;
 8001e04:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7fe faad 	bl	8000368 <__aeabi_fmul>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe f99f 	bl	8000158 <__addsf3>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e20:	4618      	mov	r0, r3
 8001e22:	f004 ff1b 	bl	8006c5c <powf>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001e2e:	f7fe f991 	bl	8000154 <__aeabi_fsub>
 8001e32:	4603      	mov	r3, r0
 8001e34:	4618      	mov	r0, r3
 8001e36:	f004 ff5e 	bl	8006cf6 <sqrtf>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe f989 	bl	8000158 <__addsf3>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe fb3f 	bl	80004d0 <__aeabi_fdiv>
 8001e52:	4603      	mov	r3, r0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <EaseInElastic>:

// 弹性缓动
static float EaseInElastic(float t)
{
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 8001e64:	4b22      	ldr	r3, [pc, #136]	@ (8001ef0 <EaseInElastic+0x94>)
 8001e66:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8001e68:	f04f 0100 	mov.w	r1, #0
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7fe fc0f 	bl	8000690 <__aeabi_fcmpeq>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <EaseInElastic+0x22>
        return 0;
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	e034      	b.n	8001ee8 <EaseInElastic+0x8c>
    if (t == 1)
 8001e7e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7fe fc04 	bl	8000690 <__aeabi_fcmpeq>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <EaseInElastic+0x38>
        return 1;
 8001e8e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e92:	e029      	b.n	8001ee8 <EaseInElastic+0x8c>
    return -powf(2, 10 * t - 10) * sinf((t * 10 - 10.75f) * c4);
 8001e94:	4917      	ldr	r1, [pc, #92]	@ (8001ef4 <EaseInElastic+0x98>)
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7fe fa66 	bl	8000368 <__aeabi_fmul>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	4915      	ldr	r1, [pc, #84]	@ (8001ef4 <EaseInElastic+0x98>)
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe f957 	bl	8000154 <__aeabi_fsub>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001eae:	f004 fed5 	bl	8006c5c <powf>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8001eb8:	490e      	ldr	r1, [pc, #56]	@ (8001ef4 <EaseInElastic+0x98>)
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7fe fa54 	bl	8000368 <__aeabi_fmul>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	490d      	ldr	r1, [pc, #52]	@ (8001ef8 <EaseInElastic+0x9c>)
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe f945 	bl	8000154 <__aeabi_fsub>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	68f9      	ldr	r1, [r7, #12]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fa4a 	bl	8000368 <__aeabi_fmul>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f004 ff60 	bl	8006d9c <sinf>
 8001edc:	4603      	mov	r3, r0
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	f7fe fa41 	bl	8000368 <__aeabi_fmul>
 8001ee6:	4603      	mov	r3, r0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd90      	pop	{r4, r7, pc}
 8001ef0:	40060a8b 	.word	0x40060a8b
 8001ef4:	41200000 	.word	0x41200000
 8001ef8:	412c0000 	.word	0x412c0000

08001efc <EaseOutElastic>:

static float EaseOutElastic(float t)
{
 8001efc:	b590      	push	{r4, r7, lr}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 8001f04:	4b22      	ldr	r3, [pc, #136]	@ (8001f90 <EaseOutElastic+0x94>)
 8001f06:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8001f08:	f04f 0100 	mov.w	r1, #0
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7fe fbbf 	bl	8000690 <__aeabi_fcmpeq>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d002      	beq.n	8001f1e <EaseOutElastic+0x22>
        return 0;
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	e034      	b.n	8001f88 <EaseOutElastic+0x8c>
    if (t == 1)
 8001f1e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe fbb4 	bl	8000690 <__aeabi_fcmpeq>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <EaseOutElastic+0x38>
        return 1;
 8001f2e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001f32:	e029      	b.n	8001f88 <EaseOutElastic+0x8c>
    return powf(2, -10 * t) * sinf((t * 10 - 0.75f) * c4) + 1;
 8001f34:	4917      	ldr	r1, [pc, #92]	@ (8001f94 <EaseOutElastic+0x98>)
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fa16 	bl	8000368 <__aeabi_fmul>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001f44:	f004 fe8a 	bl	8006c5c <powf>
 8001f48:	4604      	mov	r4, r0
 8001f4a:	4913      	ldr	r1, [pc, #76]	@ (8001f98 <EaseOutElastic+0x9c>)
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7fe fa0b 	bl	8000368 <__aeabi_fmul>
 8001f52:	4603      	mov	r3, r0
 8001f54:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe f8fb 	bl	8000154 <__aeabi_fsub>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	68f9      	ldr	r1, [r7, #12]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fa00 	bl	8000368 <__aeabi_fmul>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f004 ff16 	bl	8006d9c <sinf>
 8001f70:	4603      	mov	r3, r0
 8001f72:	4619      	mov	r1, r3
 8001f74:	4620      	mov	r0, r4
 8001f76:	f7fe f9f7 	bl	8000368 <__aeabi_fmul>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe f8e9 	bl	8000158 <__addsf3>
 8001f86:	4603      	mov	r3, r0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd90      	pop	{r4, r7, pc}
 8001f90:	40060a8b 	.word	0x40060a8b
 8001f94:	c1200000 	.word	0xc1200000
 8001f98:	41200000 	.word	0x41200000

08001f9c <EaseInOutElastic>:

static float EaseInOutElastic(float t)
{
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
    const float c5 = (2 * 3.14159f) / 4.5f;
 8001fa4:	4b44      	ldr	r3, [pc, #272]	@ (80020b8 <EaseInOutElastic+0x11c>)
 8001fa6:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8001fa8:	f04f 0100 	mov.w	r1, #0
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7fe fb6f 	bl	8000690 <__aeabi_fcmpeq>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <EaseInOutElastic+0x22>
        return 0;
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	e077      	b.n	80020ae <EaseInOutElastic+0x112>
    if (t == 1)
 8001fbe:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7fe fb64 	bl	8000690 <__aeabi_fcmpeq>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <EaseInOutElastic+0x38>
        return 1;
 8001fce:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001fd2:	e06c      	b.n	80020ae <EaseInOutElastic+0x112>
    if (t < 0.5f)
 8001fd4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7fe fb63 	bl	80006a4 <__aeabi_fcmplt>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d030      	beq.n	8002046 <EaseInOutElastic+0xaa>
        return -(powf(2, 20 * t - 10) * sinf((20 * t - 11.125f) * c5)) / 2;
 8001fe4:	4935      	ldr	r1, [pc, #212]	@ (80020bc <EaseInOutElastic+0x120>)
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7fe f9be 	bl	8000368 <__aeabi_fmul>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4934      	ldr	r1, [pc, #208]	@ (80020c0 <EaseInOutElastic+0x124>)
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe f8af 	bl	8000154 <__aeabi_fsub>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001ffe:	f004 fe2d 	bl	8006c5c <powf>
 8002002:	4604      	mov	r4, r0
 8002004:	492d      	ldr	r1, [pc, #180]	@ (80020bc <EaseInOutElastic+0x120>)
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7fe f9ae 	bl	8000368 <__aeabi_fmul>
 800200c:	4603      	mov	r3, r0
 800200e:	492d      	ldr	r1, [pc, #180]	@ (80020c4 <EaseInOutElastic+0x128>)
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe f89f 	bl	8000154 <__aeabi_fsub>
 8002016:	4603      	mov	r3, r0
 8002018:	68f9      	ldr	r1, [r7, #12]
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe f9a4 	bl	8000368 <__aeabi_fmul>
 8002020:	4603      	mov	r3, r0
 8002022:	4618      	mov	r0, r3
 8002024:	f004 feba 	bl	8006d9c <sinf>
 8002028:	4603      	mov	r3, r0
 800202a:	4619      	mov	r1, r3
 800202c:	4620      	mov	r0, r4
 800202e:	f7fe f99b 	bl	8000368 <__aeabi_fmul>
 8002032:	4603      	mov	r3, r0
 8002034:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002038:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fa47 	bl	80004d0 <__aeabi_fdiv>
 8002042:	4603      	mov	r3, r0
 8002044:	e033      	b.n	80020ae <EaseInOutElastic+0x112>
    return (powf(2, -20 * t + 10) * sinf((20 * t - 11.125f) * c5)) / 2 + 1;
 8002046:	4920      	ldr	r1, [pc, #128]	@ (80020c8 <EaseInOutElastic+0x12c>)
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7fe f98d 	bl	8000368 <__aeabi_fmul>
 800204e:	4603      	mov	r3, r0
 8002050:	491b      	ldr	r1, [pc, #108]	@ (80020c0 <EaseInOutElastic+0x124>)
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe f880 	bl	8000158 <__addsf3>
 8002058:	4603      	mov	r3, r0
 800205a:	4619      	mov	r1, r3
 800205c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002060:	f004 fdfc 	bl	8006c5c <powf>
 8002064:	4604      	mov	r4, r0
 8002066:	4915      	ldr	r1, [pc, #84]	@ (80020bc <EaseInOutElastic+0x120>)
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7fe f97d 	bl	8000368 <__aeabi_fmul>
 800206e:	4603      	mov	r3, r0
 8002070:	4914      	ldr	r1, [pc, #80]	@ (80020c4 <EaseInOutElastic+0x128>)
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe f86e 	bl	8000154 <__aeabi_fsub>
 8002078:	4603      	mov	r3, r0
 800207a:	68f9      	ldr	r1, [r7, #12]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe f973 	bl	8000368 <__aeabi_fmul>
 8002082:	4603      	mov	r3, r0
 8002084:	4618      	mov	r0, r3
 8002086:	f004 fe89 	bl	8006d9c <sinf>
 800208a:	4603      	mov	r3, r0
 800208c:	4619      	mov	r1, r3
 800208e:	4620      	mov	r0, r4
 8002090:	f7fe f96a 	bl	8000368 <__aeabi_fmul>
 8002094:	4603      	mov	r3, r0
 8002096:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fa18 	bl	80004d0 <__aeabi_fdiv>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe f856 	bl	8000158 <__addsf3>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd90      	pop	{r4, r7, pc}
 80020b6:	bf00      	nop
 80020b8:	3fb2b8b9 	.word	0x3fb2b8b9
 80020bc:	41a00000 	.word	0x41a00000
 80020c0:	41200000 	.word	0x41200000
 80020c4:	41320000 	.word	0x41320000
 80020c8:	c1a00000 	.word	0xc1a00000

080020cc <EaseOutBounce>:

static float EaseOutBounce(float t)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
    const float n1 = 7.5625f;
 80020d4:	4b45      	ldr	r3, [pc, #276]	@ (80021ec <EaseOutBounce+0x120>)
 80020d6:	60fb      	str	r3, [r7, #12]
    const float d1 = 2.75f;
 80020d8:	4b45      	ldr	r3, [pc, #276]	@ (80021f0 <EaseOutBounce+0x124>)
 80020da:	60bb      	str	r3, [r7, #8]

    if (t < 1 / d1)
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80020e2:	f7fe f9f5 	bl	80004d0 <__aeabi_fdiv>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4619      	mov	r1, r3
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe fada 	bl	80006a4 <__aeabi_fcmplt>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <EaseOutBounce+0x40>
    {
        return n1 * t * t;
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f7fe f935 	bl	8000368 <__aeabi_fmul>
 80020fe:	4603      	mov	r3, r0
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe f930 	bl	8000368 <__aeabi_fmul>
 8002108:	4603      	mov	r3, r0
 800210a:	e06a      	b.n	80021e2 <EaseOutBounce+0x116>
    }
    else if (t < 2 / d1)
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002112:	f7fe f9dd 	bl	80004d0 <__aeabi_fdiv>
 8002116:	4603      	mov	r3, r0
 8002118:	4619      	mov	r1, r3
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe fac2 	bl	80006a4 <__aeabi_fcmplt>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d01c      	beq.n	8002160 <EaseOutBounce+0x94>
    {
        t -= 1.5f / d1;
 8002126:	68b9      	ldr	r1, [r7, #8]
 8002128:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 800212c:	f7fe f9d0 	bl	80004d0 <__aeabi_fdiv>
 8002130:	4603      	mov	r3, r0
 8002132:	4619      	mov	r1, r3
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7fe f80d 	bl	8000154 <__aeabi_fsub>
 800213a:	4603      	mov	r3, r0
 800213c:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.75f;
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f7fe f911 	bl	8000368 <__aeabi_fmul>
 8002146:	4603      	mov	r3, r0
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe f90c 	bl	8000368 <__aeabi_fmul>
 8002150:	4603      	mov	r3, r0
 8002152:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8002156:	4618      	mov	r0, r3
 8002158:	f7fd fffe 	bl	8000158 <__addsf3>
 800215c:	4603      	mov	r3, r0
 800215e:	e040      	b.n	80021e2 <EaseOutBounce+0x116>
    }
    else if (t < 2.5f / d1)
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	4824      	ldr	r0, [pc, #144]	@ (80021f4 <EaseOutBounce+0x128>)
 8002164:	f7fe f9b4 	bl	80004d0 <__aeabi_fdiv>
 8002168:	4603      	mov	r3, r0
 800216a:	4619      	mov	r1, r3
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7fe fa99 	bl	80006a4 <__aeabi_fcmplt>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d01a      	beq.n	80021ae <EaseOutBounce+0xe2>
    {
        t -= 2.25f / d1;
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	481f      	ldr	r0, [pc, #124]	@ (80021f8 <EaseOutBounce+0x12c>)
 800217c:	f7fe f9a8 	bl	80004d0 <__aeabi_fdiv>
 8002180:	4603      	mov	r3, r0
 8002182:	4619      	mov	r1, r3
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7fd ffe5 	bl	8000154 <__aeabi_fsub>
 800218a:	4603      	mov	r3, r0
 800218c:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.9375f;
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f7fe f8e9 	bl	8000368 <__aeabi_fmul>
 8002196:	4603      	mov	r3, r0
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe f8e4 	bl	8000368 <__aeabi_fmul>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4916      	ldr	r1, [pc, #88]	@ (80021fc <EaseOutBounce+0x130>)
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fd ffd7 	bl	8000158 <__addsf3>
 80021aa:	4603      	mov	r3, r0
 80021ac:	e019      	b.n	80021e2 <EaseOutBounce+0x116>
    }
    else
    {
        t -= 2.625f / d1;
 80021ae:	68b9      	ldr	r1, [r7, #8]
 80021b0:	4813      	ldr	r0, [pc, #76]	@ (8002200 <EaseOutBounce+0x134>)
 80021b2:	f7fe f98d 	bl	80004d0 <__aeabi_fdiv>
 80021b6:	4603      	mov	r3, r0
 80021b8:	4619      	mov	r1, r3
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7fd ffca 	bl	8000154 <__aeabi_fsub>
 80021c0:	4603      	mov	r3, r0
 80021c2:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.984375f;
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f7fe f8ce 	bl	8000368 <__aeabi_fmul>
 80021cc:	4603      	mov	r3, r0
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe f8c9 	bl	8000368 <__aeabi_fmul>
 80021d6:	4603      	mov	r3, r0
 80021d8:	490a      	ldr	r1, [pc, #40]	@ (8002204 <EaseOutBounce+0x138>)
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fd ffbc 	bl	8000158 <__addsf3>
 80021e0:	4603      	mov	r3, r0
    }
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40f20000 	.word	0x40f20000
 80021f0:	40300000 	.word	0x40300000
 80021f4:	40200000 	.word	0x40200000
 80021f8:	40100000 	.word	0x40100000
 80021fc:	3f700000 	.word	0x3f700000
 8002200:	40280000 	.word	0x40280000
 8002204:	3f7c0000 	.word	0x3f7c0000

08002208 <EaseInBounce>:

// 反弹缓动
static float EaseInBounce(float t)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
    return 1 - EaseOutBounce(1 - t);
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002216:	f7fd ff9d 	bl	8000154 <__aeabi_fsub>
 800221a:	4603      	mov	r3, r0
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff55 	bl	80020cc <EaseOutBounce>
 8002222:	4603      	mov	r3, r0
 8002224:	4619      	mov	r1, r3
 8002226:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800222a:	f7fd ff93 	bl	8000154 <__aeabi_fsub>
 800222e:	4603      	mov	r3, r0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <EaseInOutBounce>:

static float EaseInOutBounce(float t)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 8002240:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7fe fa2d 	bl	80006a4 <__aeabi_fcmplt>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d010      	beq.n	8002272 <EaseInOutBounce+0x3a>
        return EaseInBounce(t * 2) * 0.5f;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4619      	mov	r1, r3
 8002254:	4618      	mov	r0, r3
 8002256:	f7fd ff7f 	bl	8000158 <__addsf3>
 800225a:	4603      	mov	r3, r0
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ffd3 	bl	8002208 <EaseInBounce>
 8002262:	4603      	mov	r3, r0
 8002264:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe f87d 	bl	8000368 <__aeabi_fmul>
 800226e:	4603      	mov	r3, r0
 8002270:	e01b      	b.n	80022aa <EaseInOutBounce+0x72>
    return EaseOutBounce(t * 2 - 1) * 0.5f + 0.5f;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4619      	mov	r1, r3
 8002276:	4618      	mov	r0, r3
 8002278:	f7fd ff6e 	bl	8000158 <__addsf3>
 800227c:	4603      	mov	r3, r0
 800227e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002282:	4618      	mov	r0, r3
 8002284:	f7fd ff66 	bl	8000154 <__aeabi_fsub>
 8002288:	4603      	mov	r3, r0
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff ff1e 	bl	80020cc <EaseOutBounce>
 8002290:	4603      	mov	r3, r0
 8002292:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe f866 	bl	8000368 <__aeabi_fmul>
 800229c:	4603      	mov	r3, r0
 800229e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fd ff58 	bl	8000158 <__addsf3>
 80022a8:	4603      	mov	r3, r0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <EaseInBack>:

// 背越式缓动
static float EaseInBack(float t)
{
 80022b4:	b590      	push	{r4, r7, lr}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 80022bc:	4b15      	ldr	r3, [pc, #84]	@ (8002314 <EaseInBack+0x60>)
 80022be:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 80022c0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f7fd ff47 	bl	8000158 <__addsf3>
 80022ca:	4603      	mov	r3, r0
 80022cc:	60bb      	str	r3, [r7, #8]

    return c3 * t * t * t - c1 * t * t;
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	68b8      	ldr	r0, [r7, #8]
 80022d2:	f7fe f849 	bl	8000368 <__aeabi_fmul>
 80022d6:	4603      	mov	r3, r0
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe f844 	bl	8000368 <__aeabi_fmul>
 80022e0:	4603      	mov	r3, r0
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe f83f 	bl	8000368 <__aeabi_fmul>
 80022ea:	4603      	mov	r3, r0
 80022ec:	461c      	mov	r4, r3
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f7fe f839 	bl	8000368 <__aeabi_fmul>
 80022f6:	4603      	mov	r3, r0
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe f834 	bl	8000368 <__aeabi_fmul>
 8002300:	4603      	mov	r3, r0
 8002302:	4619      	mov	r1, r3
 8002304:	4620      	mov	r0, r4
 8002306:	f7fd ff25 	bl	8000154 <__aeabi_fsub>
 800230a:	4603      	mov	r3, r0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	bd90      	pop	{r4, r7, pc}
 8002314:	3fd9cd60 	.word	0x3fd9cd60

08002318 <EaseOutBack>:

static float EaseOutBack(float t)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8002320:	4b1c      	ldr	r3, [pc, #112]	@ (8002394 <EaseOutBack+0x7c>)
 8002322:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8002324:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f7fd ff15 	bl	8000158 <__addsf3>
 800232e:	4603      	mov	r3, r0
 8002330:	60bb      	str	r3, [r7, #8]

    return 1 + c3 * powf(t - 1, 3) + c1 * powf(t - 1, 2);
 8002332:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7fd ff0c 	bl	8000154 <__aeabi_fsub>
 800233c:	4603      	mov	r3, r0
 800233e:	4916      	ldr	r1, [pc, #88]	@ (8002398 <EaseOutBack+0x80>)
 8002340:	4618      	mov	r0, r3
 8002342:	f004 fc8b 	bl	8006c5c <powf>
 8002346:	4603      	mov	r3, r0
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe f80c 	bl	8000368 <__aeabi_fmul>
 8002350:	4603      	mov	r3, r0
 8002352:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002356:	4618      	mov	r0, r3
 8002358:	f7fd fefe 	bl	8000158 <__addsf3>
 800235c:	4603      	mov	r3, r0
 800235e:	461c      	mov	r4, r3
 8002360:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7fd fef5 	bl	8000154 <__aeabi_fsub>
 800236a:	4603      	mov	r3, r0
 800236c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002370:	4618      	mov	r0, r3
 8002372:	f004 fc73 	bl	8006c5c <powf>
 8002376:	4603      	mov	r3, r0
 8002378:	68f9      	ldr	r1, [r7, #12]
 800237a:	4618      	mov	r0, r3
 800237c:	f7fd fff4 	bl	8000368 <__aeabi_fmul>
 8002380:	4603      	mov	r3, r0
 8002382:	4619      	mov	r1, r3
 8002384:	4620      	mov	r0, r4
 8002386:	f7fd fee7 	bl	8000158 <__addsf3>
 800238a:	4603      	mov	r3, r0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	bd90      	pop	{r4, r7, pc}
 8002394:	3fd9cd60 	.word	0x3fd9cd60
 8002398:	40400000 	.word	0x40400000

0800239c <EaseInOutBack>:

static float EaseInOutBack(float t)
{
 800239c:	b5b0      	push	{r4, r5, r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 80023a4:	4b40      	ldr	r3, [pc, #256]	@ (80024a8 <EaseInOutBack+0x10c>)
 80023a6:	60fb      	str	r3, [r7, #12]
    const float c2 = c1 * 1.525f;
 80023a8:	4940      	ldr	r1, [pc, #256]	@ (80024ac <EaseInOutBack+0x110>)
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f7fd ffdc 	bl	8000368 <__aeabi_fmul>
 80023b0:	4603      	mov	r3, r0
 80023b2:	60bb      	str	r3, [r7, #8]

    if (t < 0.5f)
 80023b4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7fe f973 	bl	80006a4 <__aeabi_fcmplt>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d02c      	beq.n	800241e <EaseInOutBack+0x82>
        return (powf(2 * t, 2) * ((c2 + 1) * 2 * t - c2)) / 2;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4619      	mov	r1, r3
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fd fec5 	bl	8000158 <__addsf3>
 80023ce:	4603      	mov	r3, r0
 80023d0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80023d4:	4618      	mov	r0, r3
 80023d6:	f004 fc41 	bl	8006c5c <powf>
 80023da:	4604      	mov	r4, r0
 80023dc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80023e0:	68b8      	ldr	r0, [r7, #8]
 80023e2:	f7fd feb9 	bl	8000158 <__addsf3>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4619      	mov	r1, r3
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fd feb4 	bl	8000158 <__addsf3>
 80023f0:	4603      	mov	r3, r0
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fd ffb7 	bl	8000368 <__aeabi_fmul>
 80023fa:	4603      	mov	r3, r0
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fd fea8 	bl	8000154 <__aeabi_fsub>
 8002404:	4603      	mov	r3, r0
 8002406:	4619      	mov	r1, r3
 8002408:	4620      	mov	r0, r4
 800240a:	f7fd ffad 	bl	8000368 <__aeabi_fmul>
 800240e:	4603      	mov	r3, r0
 8002410:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe f85b 	bl	80004d0 <__aeabi_fdiv>
 800241a:	4603      	mov	r3, r0
 800241c:	e03f      	b.n	800249e <EaseInOutBack+0x102>
    return (powf(2 * t - 2, 2) * ((c2 + 1) * (t * 2 - 2) + c2) + 2) / 2;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4619      	mov	r1, r3
 8002422:	4618      	mov	r0, r3
 8002424:	f7fd fe98 	bl	8000158 <__addsf3>
 8002428:	4603      	mov	r3, r0
 800242a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800242e:	4618      	mov	r0, r3
 8002430:	f7fd fe90 	bl	8000154 <__aeabi_fsub>
 8002434:	4603      	mov	r3, r0
 8002436:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800243a:	4618      	mov	r0, r3
 800243c:	f004 fc0e 	bl	8006c5c <powf>
 8002440:	4604      	mov	r4, r0
 8002442:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002446:	68b8      	ldr	r0, [r7, #8]
 8002448:	f7fd fe86 	bl	8000158 <__addsf3>
 800244c:	4603      	mov	r3, r0
 800244e:	461d      	mov	r5, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4619      	mov	r1, r3
 8002454:	4618      	mov	r0, r3
 8002456:	f7fd fe7f 	bl	8000158 <__addsf3>
 800245a:	4603      	mov	r3, r0
 800245c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002460:	4618      	mov	r0, r3
 8002462:	f7fd fe77 	bl	8000154 <__aeabi_fsub>
 8002466:	4603      	mov	r3, r0
 8002468:	4619      	mov	r1, r3
 800246a:	4628      	mov	r0, r5
 800246c:	f7fd ff7c 	bl	8000368 <__aeabi_fmul>
 8002470:	4603      	mov	r3, r0
 8002472:	68b9      	ldr	r1, [r7, #8]
 8002474:	4618      	mov	r0, r3
 8002476:	f7fd fe6f 	bl	8000158 <__addsf3>
 800247a:	4603      	mov	r3, r0
 800247c:	4619      	mov	r1, r3
 800247e:	4620      	mov	r0, r4
 8002480:	f7fd ff72 	bl	8000368 <__aeabi_fmul>
 8002484:	4603      	mov	r3, r0
 8002486:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800248a:	4618      	mov	r0, r3
 800248c:	f7fd fe64 	bl	8000158 <__addsf3>
 8002490:	4603      	mov	r3, r0
 8002492:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe f81a 	bl	80004d0 <__aeabi_fdiv>
 800249c:	4603      	mov	r3, r0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bdb0      	pop	{r4, r5, r7, pc}
 80024a6:	bf00      	nop
 80024a8:	3fd9cd60 	.word	0x3fd9cd60
 80024ac:	3fc33333 	.word	0x3fc33333

080024b0 <EaseInSine>:

// 正弦缓动
static float EaseInSine(float t)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
    return 1 - cosf((t * 3.14159f) / 2);
 80024b8:	490c      	ldr	r1, [pc, #48]	@ (80024ec <EaseInSine+0x3c>)
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7fd ff54 	bl	8000368 <__aeabi_fmul>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe f802 	bl	80004d0 <__aeabi_fdiv>
 80024cc:	4603      	mov	r3, r0
 80024ce:	4618      	mov	r0, r3
 80024d0:	f004 fc2c 	bl	8006d2c <cosf>
 80024d4:	4603      	mov	r3, r0
 80024d6:	4619      	mov	r1, r3
 80024d8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80024dc:	f7fd fe3a 	bl	8000154 <__aeabi_fsub>
 80024e0:	4603      	mov	r3, r0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40490fd0 	.word	0x40490fd0

080024f0 <EaseOutSine>:

static float EaseOutSine(float t)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
    return sinf((t * 3.14159f) / 2);
 80024f8:	4909      	ldr	r1, [pc, #36]	@ (8002520 <EaseOutSine+0x30>)
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7fd ff34 	bl	8000368 <__aeabi_fmul>
 8002500:	4603      	mov	r3, r0
 8002502:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002506:	4618      	mov	r0, r3
 8002508:	f7fd ffe2 	bl	80004d0 <__aeabi_fdiv>
 800250c:	4603      	mov	r3, r0
 800250e:	4618      	mov	r0, r3
 8002510:	f004 fc44 	bl	8006d9c <sinf>
 8002514:	4603      	mov	r3, r0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40490fd0 	.word	0x40490fd0

08002524 <EaseInOutSine>:

static float EaseInOutSine(float t)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
    return -(cosf(3.14159f * t) - 1) / 2;
 800252c:	490d      	ldr	r1, [pc, #52]	@ (8002564 <EaseInOutSine+0x40>)
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7fd ff1a 	bl	8000368 <__aeabi_fmul>
 8002534:	4603      	mov	r3, r0
 8002536:	4618      	mov	r0, r3
 8002538:	f004 fbf8 	bl	8006d2c <cosf>
 800253c:	4603      	mov	r3, r0
 800253e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002542:	4618      	mov	r0, r3
 8002544:	f7fd fe06 	bl	8000154 <__aeabi_fsub>
 8002548:	4603      	mov	r3, r0
 800254a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800254e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002552:	4618      	mov	r0, r3
 8002554:	f7fd ffbc 	bl	80004d0 <__aeabi_fdiv>
 8002558:	4603      	mov	r3, r0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40490fd0 	.word	0x40490fd0

08002568 <GetEaseValue>:

static float GetEaseValue(float progress, EaseType_t easeType)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	70fb      	strb	r3, [r7, #3]
    switch (easeType)
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	2b18      	cmp	r3, #24
 8002578:	f200 80b3 	bhi.w	80026e2 <GetEaseValue+0x17a>
 800257c:	a201      	add	r2, pc, #4	@ (adr r2, 8002584 <GetEaseValue+0x1c>)
 800257e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002582:	bf00      	nop
 8002584:	080025e9 	.word	0x080025e9
 8002588:	080025f3 	.word	0x080025f3
 800258c:	080025fd 	.word	0x080025fd
 8002590:	08002607 	.word	0x08002607
 8002594:	08002611 	.word	0x08002611
 8002598:	0800261b 	.word	0x0800261b
 800259c:	08002625 	.word	0x08002625
 80025a0:	0800262f 	.word	0x0800262f
 80025a4:	08002639 	.word	0x08002639
 80025a8:	08002643 	.word	0x08002643
 80025ac:	0800264d 	.word	0x0800264d
 80025b0:	08002657 	.word	0x08002657
 80025b4:	08002661 	.word	0x08002661
 80025b8:	0800266b 	.word	0x0800266b
 80025bc:	08002675 	.word	0x08002675
 80025c0:	0800267f 	.word	0x0800267f
 80025c4:	08002689 	.word	0x08002689
 80025c8:	08002693 	.word	0x08002693
 80025cc:	0800269d 	.word	0x0800269d
 80025d0:	080026a7 	.word	0x080026a7
 80025d4:	080026b1 	.word	0x080026b1
 80025d8:	080026bb 	.word	0x080026bb
 80025dc:	080026c5 	.word	0x080026c5
 80025e0:	080026cf 	.word	0x080026cf
 80025e4:	080026d9 	.word	0x080026d9
    {
    case EASE_LINEAR:
        return EaseLinear(progress);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff fa15 	bl	8001a18 <EaseLinear>
 80025ee:	4603      	mov	r3, r0
 80025f0:	e078      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_IN_QUAD:
        return EaseInQuad(progress);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff fa1a 	bl	8001a2c <EaseInQuad>
 80025f8:	4603      	mov	r3, r0
 80025fa:	e073      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_OUT_QUAD:
        return EaseOutQuad(progress);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff fa22 	bl	8001a46 <EaseOutQuad>
 8002602:	4603      	mov	r3, r0
 8002604:	e06e      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_INOUT_QUAD:
        return EaseInOutQuad(progress);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff fa30 	bl	8001a6c <EaseInOutQuad>
 800260c:	4603      	mov	r3, r0
 800260e:	e069      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_IN_CUBIC:
        return EaseInCubic(progress);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff fa5e 	bl	8001ad2 <EaseInCubic>
 8002616:	4603      	mov	r3, r0
 8002618:	e064      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_OUT_CUBIC:
        return EaseOutCubic(progress);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff fa6b 	bl	8001af6 <EaseOutCubic>
 8002620:	4603      	mov	r3, r0
 8002622:	e05f      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_INOUT_CUBIC:
        return EaseInOutCubic(progress);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff fa85 	bl	8001b34 <EaseInOutCubic>
 800262a:	4603      	mov	r3, r0
 800262c:	e05a      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_IN_EXPO:
        return EaseInExpo(progress);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff fad2 	bl	8001bd8 <EaseInExpo>
 8002634:	4603      	mov	r3, r0
 8002636:	e055      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_OUT_EXPO:
        return EaseOutExpo(progress);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff faf3 	bl	8001c24 <EaseOutExpo>
 800263e:	4603      	mov	r3, r0
 8002640:	e050      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_INOUT_EXPO:
        return EaseInOutExpo(progress);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff fb14 	bl	8001c70 <EaseInOutExpo>
 8002648:	4603      	mov	r3, r0
 800264a:	e04b      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_IN_CIRC:
        return EaseInCirc(progress);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff fb6f 	bl	8001d30 <EaseInCirc>
 8002652:	4603      	mov	r3, r0
 8002654:	e046      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_OUT_CIRC:
        return EaseOutCirc(progress);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff fb87 	bl	8001d6a <EaseOutCirc>
 800265c:	4603      	mov	r3, r0
 800265e:	e041      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_INOUT_CIRC:
        return EaseInOutCirc(progress);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff fba0 	bl	8001da6 <EaseInOutCirc>
 8002666:	4603      	mov	r3, r0
 8002668:	e03c      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_IN_ELASTIC:
        return EaseInElastic(progress);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff fbf6 	bl	8001e5c <EaseInElastic>
 8002670:	4603      	mov	r3, r0
 8002672:	e037      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_OUT_ELASTIC:
        return EaseOutElastic(progress);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff fc41 	bl	8001efc <EaseOutElastic>
 800267a:	4603      	mov	r3, r0
 800267c:	e032      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_INOUT_ELASTIC:
        return EaseInOutElastic(progress);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff fc8c 	bl	8001f9c <EaseInOutElastic>
 8002684:	4603      	mov	r3, r0
 8002686:	e02d      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_IN_BOUNCE:
        return EaseInBounce(progress);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff fdbd 	bl	8002208 <EaseInBounce>
 800268e:	4603      	mov	r3, r0
 8002690:	e028      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_OUT_BOUNCE:
        return EaseOutBounce(progress);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff fd1a 	bl	80020cc <EaseOutBounce>
 8002698:	4603      	mov	r3, r0
 800269a:	e023      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_INOUT_BOUNCE:
        return EaseInOutBounce(progress);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff fdcb 	bl	8002238 <EaseInOutBounce>
 80026a2:	4603      	mov	r3, r0
 80026a4:	e01e      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_IN_BACK:
        return EaseInBack(progress);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff fe04 	bl	80022b4 <EaseInBack>
 80026ac:	4603      	mov	r3, r0
 80026ae:	e019      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_OUT_BACK:
        return EaseOutBack(progress);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff fe31 	bl	8002318 <EaseOutBack>
 80026b6:	4603      	mov	r3, r0
 80026b8:	e014      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_INOUT_BACK:
        return EaseInOutBack(progress);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff fe6e 	bl	800239c <EaseInOutBack>
 80026c0:	4603      	mov	r3, r0
 80026c2:	e00f      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_IN_SINE:
        return EaseInSine(progress);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff fef3 	bl	80024b0 <EaseInSine>
 80026ca:	4603      	mov	r3, r0
 80026cc:	e00a      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_OUT_SINE:
        return EaseOutSine(progress);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff ff0e 	bl	80024f0 <EaseOutSine>
 80026d4:	4603      	mov	r3, r0
 80026d6:	e005      	b.n	80026e4 <GetEaseValue+0x17c>
    case EASE_INOUT_SINE:
        return EaseInOutSine(progress);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff ff23 	bl	8002524 <EaseInOutSine>
 80026de:	4603      	mov	r3, r0
 80026e0:	e000      	b.n	80026e4 <GetEaseValue+0x17c>
    default:
        return progress;
 80026e2:	687b      	ldr	r3, [r7, #4]
    }
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <OLED_UpdateAnimation>:
    anim->easeType = easeType;
}

// 更新动画状态，返回isActive的值
uint8_t OLED_UpdateAnimation(Animation_t *anim, uint32_t currentTime)
{
 80026ec:	b590      	push	{r4, r7, lr}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
    if (!anim->isActive)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	7d1b      	ldrb	r3, [r3, #20]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <OLED_UpdateAnimation+0x16>
        return 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	e04d      	b.n	800279e <OLED_UpdateAnimation+0xb2>

    uint32_t elapsedTime = currentTime - anim->startTime;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	617b      	str	r3, [r7, #20]
    // 动画完成
    if (elapsedTime >= anim->duration || anim->currentValue == anim->endValue) // 如果我的目标在指定的点上，也关闭isActive
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	429a      	cmp	r2, r3
 8002714:	d20a      	bcs.n	800272c <OLED_UpdateAnimation+0x40>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	4619      	mov	r1, r3
 8002720:	4610      	mov	r0, r2
 8002722:	f7fd ffb5 	bl	8000690 <__aeabi_fcmpeq>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <OLED_UpdateAnimation+0x52>
    {
        anim->currentValue = anim->endValue;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	611a      	str	r2, [r3, #16]
        anim->isActive = 0;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	751a      	strb	r2, [r3, #20]
        return 0;
 800273a:	2300      	movs	r3, #0
 800273c:	e02f      	b.n	800279e <OLED_UpdateAnimation+0xb2>
    }

    // 计算当前进度 (0.0 - 1.0)
    float progress = (float)elapsedTime / anim->duration;
 800273e:	6978      	ldr	r0, [r7, #20]
 8002740:	f7fd fdba 	bl	80002b8 <__aeabi_ui2f>
 8002744:	4604      	mov	r4, r0
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4618      	mov	r0, r3
 800274c:	f7fd fdb4 	bl	80002b8 <__aeabi_ui2f>
 8002750:	4603      	mov	r3, r0
 8002752:	4619      	mov	r1, r3
 8002754:	4620      	mov	r0, r4
 8002756:	f7fd febb 	bl	80004d0 <__aeabi_fdiv>
 800275a:	4603      	mov	r3, r0
 800275c:	613b      	str	r3, [r7, #16]

    // 应用缓动函数
    float easedProgress = GetEaseValue(progress, anim->easeType);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	7d5b      	ldrb	r3, [r3, #21]
 8002762:	4619      	mov	r1, r3
 8002764:	6938      	ldr	r0, [r7, #16]
 8002766:	f7ff feff 	bl	8002568 <GetEaseValue>
 800276a:	60f8      	str	r0, [r7, #12]

    // 计算当前值
    anim->currentValue = anim->startValue + (anim->endValue - anim->startValue) * easedProgress;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689c      	ldr	r4, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	4619      	mov	r1, r3
 800277a:	4610      	mov	r0, r2
 800277c:	f7fd fcea 	bl	8000154 <__aeabi_fsub>
 8002780:	4603      	mov	r3, r0
 8002782:	68f9      	ldr	r1, [r7, #12]
 8002784:	4618      	mov	r0, r3
 8002786:	f7fd fdef 	bl	8000368 <__aeabi_fmul>
 800278a:	4603      	mov	r3, r0
 800278c:	4619      	mov	r1, r3
 800278e:	4620      	mov	r0, r4
 8002790:	f7fd fce2 	bl	8000158 <__addsf3>
 8002794:	4603      	mov	r3, r0
 8002796:	461a      	mov	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	611a      	str	r2, [r3, #16]

    return 1;
 800279c:	2301      	movs	r3, #1
}
 800279e:	4618      	mov	r0, r3
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd90      	pop	{r4, r7, pc}

080027a6 <OLED_GetAnimationValue>:

// 获取当前动画值
float OLED_GetAnimationValue(Animation_t *anim)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
    return anim->currentValue;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <OLED_InitAnimationManager>:
AnimationManager_t Status_AnimationManager;
AnimationManager_t g_Title_AnimationManager; // 菜单动画管理器
AnimationManager_t g_AnimationManager; // 全局动画管理器

void OLED_InitAnimationManager(AnimationManager_t *manager) // 这是初始化一个动画管理器，填入你的manager名字，在系统初始化时候调用它
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
    manager->count = 0;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 25f0 	strb.w	r2, [r3, #1520]	@ 0x5f0
    memset(manager->taggedAnimations, 0, sizeof(manager->taggedAnimations));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f003 f9e8 	bl	8005baa <memset>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <OLED_UpdateAnimationManager>:
    anim->isActive = 1;
}

// 更新manager里面的所有动画!
void OLED_UpdateAnimationManager(AnimationManager_t *manager) //! 这里需要使用OLED_UpdateDisplayVSync()来更新显示
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b086      	sub	sp, #24
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 80027ea:	f000 fc2d 	bl	8003048 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

    for (uint8_t i = 0; i < manager->count; i++)
 80027f0:	2300      	movs	r3, #0
 80027f2:	75fb      	strb	r3, [r7, #23]
 80027f4:	e03a      	b.n	800286c <OLED_UpdateAnimationManager+0x8a>
    {
        TaggedAnimation_t *anim = &manager->taggedAnimations[i];
 80027f6:	7dfb      	ldrb	r3, [r7, #23]
 80027f8:	224c      	movs	r2, #76	@ 0x4c
 80027fa:	fb02 f303 	mul.w	r3, r2, r3
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
        if (!anim->isActive)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d02a      	beq.n	8002864 <OLED_UpdateAnimationManager+0x82>
            continue;

        uint8_t activeX = OLED_UpdateAnimation(&anim->xAnimation, currentTime);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	3310      	adds	r3, #16
 8002812:	6939      	ldr	r1, [r7, #16]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff69 	bl	80026ec <OLED_UpdateAnimation>
 800281a:	4603      	mov	r3, r0
 800281c:	72fb      	strb	r3, [r7, #11]
        uint8_t activeY = OLED_UpdateAnimation(&anim->yAnimation, currentTime);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	3328      	adds	r3, #40	@ 0x28
 8002822:	6939      	ldr	r1, [r7, #16]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff61 	bl	80026ec <OLED_UpdateAnimation>
 800282a:	4603      	mov	r3, r0
 800282c:	72bb      	strb	r3, [r7, #10]

        anim->currentX = OLED_GetAnimationValue(&anim->xAnimation);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	3310      	adds	r3, #16
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff ffb7 	bl	80027a6 <OLED_GetAnimationValue>
 8002838:	4602      	mov	r2, r0
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = OLED_GetAnimationValue(&anim->yAnimation);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	3328      	adds	r3, #40	@ 0x28
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff ffaf 	bl	80027a6 <OLED_GetAnimationValue>
 8002848:	4602      	mov	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	649a      	str	r2, [r3, #72]	@ 0x48

        // 如果两个动画都结束，则标记该对象动画为非活跃
        if (!activeX && !activeY)
 800284e:	7afb      	ldrb	r3, [r7, #11]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d108      	bne.n	8002866 <OLED_UpdateAnimationManager+0x84>
 8002854:	7abb      	ldrb	r3, [r7, #10]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d105      	bne.n	8002866 <OLED_UpdateAnimationManager+0x84>
            anim->isActive = 0;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002862:	e000      	b.n	8002866 <OLED_UpdateAnimationManager+0x84>
            continue;
 8002864:	bf00      	nop
    for (uint8_t i = 0; i < manager->count; i++)
 8002866:	7dfb      	ldrb	r3, [r7, #23]
 8002868:	3301      	adds	r3, #1
 800286a:	75fb      	strb	r3, [r7, #23]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8002872:	7dfa      	ldrb	r2, [r7, #23]
 8002874:	429a      	cmp	r2, r3
 8002876:	d3be      	bcc.n	80027f6 <OLED_UpdateAnimationManager+0x14>
    }
}
 8002878:	bf00      	nop
 800287a:	bf00      	nop
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <OLED_DrawFilledRectangle>:
    }
}

// 绘制填充矩形
void OLED_DrawFilledRectangle(int16_t x, int16_t y, uint8_t width, uint8_t height, uint8_t color) //! UPDATEDISPLAY REQUIRED
{
 8002882:	b590      	push	{r4, r7, lr}
 8002884:	b087      	sub	sp, #28
 8002886:	af00      	add	r7, sp, #0
 8002888:	4604      	mov	r4, r0
 800288a:	4608      	mov	r0, r1
 800288c:	4611      	mov	r1, r2
 800288e:	461a      	mov	r2, r3
 8002890:	4623      	mov	r3, r4
 8002892:	80fb      	strh	r3, [r7, #6]
 8002894:	4603      	mov	r3, r0
 8002896:	80bb      	strh	r3, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	70fb      	strb	r3, [r7, #3]
 800289c:	4613      	mov	r3, r2
 800289e:	70bb      	strb	r3, [r7, #2]
    // Initial check for zero dimensions
    if (width == 0 || height == 0)
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d07e      	beq.n	80029a4 <OLED_DrawFilledRectangle+0x122>
 80028a6:	78bb      	ldrb	r3, [r7, #2]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d07b      	beq.n	80029a4 <OLED_DrawFilledRectangle+0x122>
    {
        return;
    }

    // Use int16_t for width and height internally for clipping calculations
    int16_t current_width = width;
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	82fb      	strh	r3, [r7, #22]
    int16_t current_height = height;
 80028b0:	78bb      	ldrb	r3, [r7, #2]
 80028b2:	82bb      	strh	r3, [r7, #20]

    // Clip left edge: if x is negative, adjust width and set x to 0
    if (x < 0)
 80028b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	da06      	bge.n	80028ca <OLED_DrawFilledRectangle+0x48>
    {
        current_width += x; // x is negative, so this reduces width
 80028bc:	8afa      	ldrh	r2, [r7, #22]
 80028be:	88fb      	ldrh	r3, [r7, #6]
 80028c0:	4413      	add	r3, r2
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	82fb      	strh	r3, [r7, #22]
        x = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	80fb      	strh	r3, [r7, #6]
    }

    // Clip top edge: if y is negative, adjust height and set y to 0
    if (y < 0)
 80028ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	da06      	bge.n	80028e0 <OLED_DrawFilledRectangle+0x5e>
    {
        current_height += y; // y is negative, so this reduces height
 80028d2:	8aba      	ldrh	r2, [r7, #20]
 80028d4:	88bb      	ldrh	r3, [r7, #4]
 80028d6:	4413      	add	r3, r2
 80028d8:	b29b      	uxth	r3, r3
 80028da:	82bb      	strh	r3, [r7, #20]
        y = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	80bb      	strh	r3, [r7, #4]
    }

    // If width or height became non-positive after left/top clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 80028e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	dd5f      	ble.n	80029a8 <OLED_DrawFilledRectangle+0x126>
 80028e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	dd5b      	ble.n	80029a8 <OLED_DrawFilledRectangle+0x126>
        return;
    }

    // Check if the adjusted rectangle is entirely off-screen to the right or bottom
    // At this point, x and y are >= 0.
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT)
 80028f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80028f6:	dc59      	bgt.n	80029ac <OLED_DrawFilledRectangle+0x12a>
 80028f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80028fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80028fe:	dc55      	bgt.n	80029ac <OLED_DrawFilledRectangle+0x12a>
    {
        return;
    }

    // Clip right edge: if x + current_width extends beyond OLED_WIDTH
    if (x + current_width > OLED_WIDTH)
 8002900:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002904:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002908:	4413      	add	r3, r2
 800290a:	2b80      	cmp	r3, #128	@ 0x80
 800290c:	dd04      	ble.n	8002918 <OLED_DrawFilledRectangle+0x96>
    {
        current_width = OLED_WIDTH - x;
 800290e:	88fb      	ldrh	r3, [r7, #6]
 8002910:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002914:	b29b      	uxth	r3, r3
 8002916:	82fb      	strh	r3, [r7, #22]
    }

    // Clip bottom edge: if y + current_height extends beyond OLED_HEIGHT
    if (y + current_height > OLED_HEIGHT)
 8002918:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800291c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002920:	4413      	add	r3, r2
 8002922:	2b40      	cmp	r3, #64	@ 0x40
 8002924:	dd04      	ble.n	8002930 <OLED_DrawFilledRectangle+0xae>
    {
        current_height = OLED_HEIGHT - y;
 8002926:	88bb      	ldrh	r3, [r7, #4]
 8002928:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800292c:	b29b      	uxth	r3, r3
 800292e:	82bb      	strh	r3, [r7, #20]
    }

    // If width or height became non-positive after right/bottom clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 8002930:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002934:	2b00      	cmp	r3, #0
 8002936:	dd3b      	ble.n	80029b0 <OLED_DrawFilledRectangle+0x12e>
 8002938:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800293c:	2b00      	cmp	r3, #0
 800293e:	dd37      	ble.n	80029b0 <OLED_DrawFilledRectangle+0x12e>
    {
        return;
    }

    // Cast coordinates and dimensions to uint8_t for drawing
    uint8_t final_x = (uint8_t)x;
 8002940:	88fb      	ldrh	r3, [r7, #6]
 8002942:	747b      	strb	r3, [r7, #17]
    uint8_t final_y = (uint8_t)y;
 8002944:	88bb      	ldrh	r3, [r7, #4]
 8002946:	743b      	strb	r3, [r7, #16]
    uint8_t final_width = (uint8_t)current_width;
 8002948:	8afb      	ldrh	r3, [r7, #22]
 800294a:	73fb      	strb	r3, [r7, #15]
    uint8_t final_height = (uint8_t)current_height;
 800294c:	8abb      	ldrh	r3, [r7, #20]
 800294e:	73bb      	strb	r3, [r7, #14]

    uint8_t x2 = final_x + final_width - 1;
 8002950:	7c7a      	ldrb	r2, [r7, #17]
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	4413      	add	r3, r2
 8002956:	b2db      	uxtb	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	737b      	strb	r3, [r7, #13]
    uint8_t y2 = final_y + final_height - 1;
 800295c:	7c3a      	ldrb	r2, [r7, #16]
 800295e:	7bbb      	ldrb	r3, [r7, #14]
 8002960:	4413      	add	r3, r2
 8002962:	b2db      	uxtb	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	733b      	strb	r3, [r7, #12]

    // 逐像素填充
    for (uint8_t j = final_y; j <= y2; j++)
 8002968:	7c3b      	ldrb	r3, [r7, #16]
 800296a:	74fb      	strb	r3, [r7, #19]
 800296c:	e015      	b.n	800299a <OLED_DrawFilledRectangle+0x118>
    {
        for (uint8_t i = final_x; i <= x2; i++)
 800296e:	7c7b      	ldrb	r3, [r7, #17]
 8002970:	74bb      	strb	r3, [r7, #18]
 8002972:	e00b      	b.n	800298c <OLED_DrawFilledRectangle+0x10a>
        {
            OLED_WritePixel(i, j, color);
 8002974:	7cbb      	ldrb	r3, [r7, #18]
 8002976:	b21b      	sxth	r3, r3
 8002978:	7cfa      	ldrb	r2, [r7, #19]
 800297a:	b211      	sxth	r1, r2
 800297c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe fd43 	bl	800140c <OLED_WritePixel>
        for (uint8_t i = final_x; i <= x2; i++)
 8002986:	7cbb      	ldrb	r3, [r7, #18]
 8002988:	3301      	adds	r3, #1
 800298a:	74bb      	strb	r3, [r7, #18]
 800298c:	7cba      	ldrb	r2, [r7, #18]
 800298e:	7b7b      	ldrb	r3, [r7, #13]
 8002990:	429a      	cmp	r2, r3
 8002992:	d9ef      	bls.n	8002974 <OLED_DrawFilledRectangle+0xf2>
    for (uint8_t j = final_y; j <= y2; j++)
 8002994:	7cfb      	ldrb	r3, [r7, #19]
 8002996:	3301      	adds	r3, #1
 8002998:	74fb      	strb	r3, [r7, #19]
 800299a:	7cfa      	ldrb	r2, [r7, #19]
 800299c:	7b3b      	ldrb	r3, [r7, #12]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d9e5      	bls.n	800296e <OLED_DrawFilledRectangle+0xec>
 80029a2:	e006      	b.n	80029b2 <OLED_DrawFilledRectangle+0x130>
        return;
 80029a4:	bf00      	nop
 80029a6:	e004      	b.n	80029b2 <OLED_DrawFilledRectangle+0x130>
        return;
 80029a8:	bf00      	nop
 80029aa:	e002      	b.n	80029b2 <OLED_DrawFilledRectangle+0x130>
        return;
 80029ac:	bf00      	nop
 80029ae:	e000      	b.n	80029b2 <OLED_DrawFilledRectangle+0x130>
        return;
 80029b0:	bf00      	nop
        }
    }
}
 80029b2:	371c      	adds	r7, #28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd90      	pop	{r4, r7, pc}

080029b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029be:	4b15      	ldr	r3, [pc, #84]	@ (8002a14 <HAL_MspInit+0x5c>)
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	4a14      	ldr	r2, [pc, #80]	@ (8002a14 <HAL_MspInit+0x5c>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	6193      	str	r3, [r2, #24]
 80029ca:	4b12      	ldr	r3, [pc, #72]	@ (8002a14 <HAL_MspInit+0x5c>)
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	60bb      	str	r3, [r7, #8]
 80029d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002a14 <HAL_MspInit+0x5c>)
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	4a0e      	ldr	r2, [pc, #56]	@ (8002a14 <HAL_MspInit+0x5c>)
 80029dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e0:	61d3      	str	r3, [r2, #28]
 80029e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002a14 <HAL_MspInit+0x5c>)
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ea:	607b      	str	r3, [r7, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002a18 <HAL_MspInit+0x60>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	4a04      	ldr	r2, [pc, #16]	@ (8002a18 <HAL_MspInit+0x60>)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40010000 	.word	0x40010000

08002a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a20:	bf00      	nop
 8002a22:	e7fd      	b.n	8002a20 <NMI_Handler+0x4>

08002a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a28:	bf00      	nop
 8002a2a:	e7fd      	b.n	8002a28 <HardFault_Handler+0x4>

08002a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a30:	bf00      	nop
 8002a32:	e7fd      	b.n	8002a30 <MemManage_Handler+0x4>

08002a34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a38:	bf00      	nop
 8002a3a:	e7fd      	b.n	8002a38 <BusFault_Handler+0x4>

08002a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <UsageFault_Handler+0x4>

08002a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr

08002a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a6c:	f000 fada 	bl	8003024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a70:	bf00      	nop
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002a78:	4802      	ldr	r0, [pc, #8]	@ (8002a84 <DMA1_Channel6_IRQHandler+0x10>)
 8002a7a:	f000 fc7b 	bl	8003374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	200002e0 	.word	0x200002e0

08002a88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return 1;
 8002a8c:	2301      	movs	r3, #1
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <_kill>:

int _kill(int pid, int sig)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002aa0:	f003 f8d2 	bl	8005c48 <__errno>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2216      	movs	r2, #22
 8002aa8:	601a      	str	r2, [r3, #0]
  return -1;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <_exit>:

void _exit (int status)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002abe:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff ffe7 	bl	8002a96 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ac8:	bf00      	nop
 8002aca:	e7fd      	b.n	8002ac8 <_exit+0x12>

08002acc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	e00a      	b.n	8002af4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ade:	f3af 8000 	nop.w
 8002ae2:	4601      	mov	r1, r0
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	60ba      	str	r2, [r7, #8]
 8002aea:	b2ca      	uxtb	r2, r1
 8002aec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	3301      	adds	r3, #1
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	dbf0      	blt.n	8002ade <_read+0x12>
  }

  return len;
 8002afc:	687b      	ldr	r3, [r7, #4]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b086      	sub	sp, #24
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	e009      	b.n	8002b2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	60ba      	str	r2, [r7, #8]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	dbf1      	blt.n	8002b18 <_write+0x12>
  }
  return len;
 8002b34:	687b      	ldr	r3, [r7, #4]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <_close>:

int _close(int file)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b64:	605a      	str	r2, [r3, #4]
  return 0;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr

08002b72 <_isatty>:

int _isatty(int file)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b7a:	2301      	movs	r3, #1
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b085      	sub	sp, #20
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr
	...

08002ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ba8:	4a14      	ldr	r2, [pc, #80]	@ (8002bfc <_sbrk+0x5c>)
 8002baa:	4b15      	ldr	r3, [pc, #84]	@ (8002c00 <_sbrk+0x60>)
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bb4:	4b13      	ldr	r3, [pc, #76]	@ (8002c04 <_sbrk+0x64>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d102      	bne.n	8002bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <_sbrk+0x64>)
 8002bbe:	4a12      	ldr	r2, [pc, #72]	@ (8002c08 <_sbrk+0x68>)
 8002bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bc2:	4b10      	ldr	r3, [pc, #64]	@ (8002c04 <_sbrk+0x64>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4413      	add	r3, r2
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d207      	bcs.n	8002be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bd0:	f003 f83a 	bl	8005c48 <__errno>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	220c      	movs	r2, #12
 8002bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bda:	f04f 33ff 	mov.w	r3, #4294967295
 8002bde:	e009      	b.n	8002bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002be0:	4b08      	ldr	r3, [pc, #32]	@ (8002c04 <_sbrk+0x64>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002be6:	4b07      	ldr	r3, [pc, #28]	@ (8002c04 <_sbrk+0x64>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	4a05      	ldr	r2, [pc, #20]	@ (8002c04 <_sbrk+0x64>)
 8002bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20005000 	.word	0x20005000
 8002c00:	00000400 	.word	0x00000400
 8002c04:	20003eec 	.word	0x20003eec
 8002c08:	200040d0 	.word	0x200040d0

08002c0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b096      	sub	sp, #88	@ 0x58
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c1e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	609a      	str	r2, [r3, #8]
 8002c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c2c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	605a      	str	r2, [r3, #4]
 8002c40:	609a      	str	r2, [r3, #8]
 8002c42:	60da      	str	r2, [r3, #12]
 8002c44:	611a      	str	r2, [r3, #16]
 8002c46:	615a      	str	r2, [r3, #20]
 8002c48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c4a:	1d3b      	adds	r3, r7, #4
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f002 ffaa 	bl	8005baa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c56:	4b3f      	ldr	r3, [pc, #252]	@ (8002d54 <MX_TIM1_Init+0x13c>)
 8002c58:	4a3f      	ldr	r2, [pc, #252]	@ (8002d58 <MX_TIM1_Init+0x140>)
 8002c5a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720-1;
 8002c5c:	4b3d      	ldr	r3, [pc, #244]	@ (8002d54 <MX_TIM1_Init+0x13c>)
 8002c5e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8002c62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c64:	4b3b      	ldr	r3, [pc, #236]	@ (8002d54 <MX_TIM1_Init+0x13c>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8002c6a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d54 <MX_TIM1_Init+0x13c>)
 8002c6c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002c70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c72:	4b38      	ldr	r3, [pc, #224]	@ (8002d54 <MX_TIM1_Init+0x13c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c78:	4b36      	ldr	r3, [pc, #216]	@ (8002d54 <MX_TIM1_Init+0x13c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c7e:	4b35      	ldr	r3, [pc, #212]	@ (8002d54 <MX_TIM1_Init+0x13c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002c84:	4833      	ldr	r0, [pc, #204]	@ (8002d54 <MX_TIM1_Init+0x13c>)
 8002c86:	f001 fec7 	bl	8004a18 <HAL_TIM_Base_Init>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002c90:	f7fe fa69 	bl	8001166 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c98:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c9a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	482c      	ldr	r0, [pc, #176]	@ (8002d54 <MX_TIM1_Init+0x13c>)
 8002ca2:	f002 f9f5 	bl	8005090 <HAL_TIM_ConfigClockSource>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002cac:	f7fe fa5b 	bl	8001166 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002cb0:	4828      	ldr	r0, [pc, #160]	@ (8002d54 <MX_TIM1_Init+0x13c>)
 8002cb2:	f001 ff00 	bl	8004ab6 <HAL_TIM_PWM_Init>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002cbc:	f7fe fa53 	bl	8001166 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002cc8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4821      	ldr	r0, [pc, #132]	@ (8002d54 <MX_TIM1_Init+0x13c>)
 8002cd0:	f002 fd56 	bl	8005780 <HAL_TIMEx_MasterConfigSynchronization>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8002cda:	f7fe fa44 	bl	8001166 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cde:	2360      	movs	r3, #96	@ 0x60
 8002ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002cea:	2300      	movs	r3, #0
 8002cec:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cfe:	2204      	movs	r2, #4
 8002d00:	4619      	mov	r1, r3
 8002d02:	4814      	ldr	r0, [pc, #80]	@ (8002d54 <MX_TIM1_Init+0x13c>)
 8002d04:	f002 f902 	bl	8004f0c <HAL_TIM_PWM_ConfigChannel>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8002d0e:	f7fe fa2a 	bl	8001166 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d2a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d30:	1d3b      	adds	r3, r7, #4
 8002d32:	4619      	mov	r1, r3
 8002d34:	4807      	ldr	r0, [pc, #28]	@ (8002d54 <MX_TIM1_Init+0x13c>)
 8002d36:	f002 fd81 	bl	800583c <HAL_TIMEx_ConfigBreakDeadTime>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8002d40:	f7fe fa11 	bl	8001166 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002d44:	4803      	ldr	r0, [pc, #12]	@ (8002d54 <MX_TIM1_Init+0x13c>)
 8002d46:	f000 f8cd 	bl	8002ee4 <HAL_TIM_MspPostInit>

}
 8002d4a:	bf00      	nop
 8002d4c:	3758      	adds	r7, #88	@ 0x58
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20003ef0 	.word	0x20003ef0
 8002d58:	40012c00 	.word	0x40012c00

08002d5c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08c      	sub	sp, #48	@ 0x30
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d62:	f107 030c 	add.w	r3, r7, #12
 8002d66:	2224      	movs	r2, #36	@ 0x24
 8002d68:	2100      	movs	r1, #0
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f002 ff1d 	bl	8005baa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d70:	1d3b      	adds	r3, r7, #4
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d78:	4b20      	ldr	r3, [pc, #128]	@ (8002dfc <MX_TIM3_Init+0xa0>)
 8002d7a:	4a21      	ldr	r2, [pc, #132]	@ (8002e00 <MX_TIM3_Init+0xa4>)
 8002d7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8002dfc <MX_TIM3_Init+0xa0>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d84:	4b1d      	ldr	r3, [pc, #116]	@ (8002dfc <MX_TIM3_Init+0xa0>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dfc <MX_TIM3_Init+0xa0>)
 8002d8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d92:	4b1a      	ldr	r3, [pc, #104]	@ (8002dfc <MX_TIM3_Init+0xa0>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d98:	4b18      	ldr	r3, [pc, #96]	@ (8002dfc <MX_TIM3_Init+0xa0>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002da6:	2301      	movs	r3, #1
 8002da8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002db2:	2300      	movs	r3, #0
 8002db4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002db6:	2301      	movs	r3, #1
 8002db8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002dc2:	f107 030c 	add.w	r3, r7, #12
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	480c      	ldr	r0, [pc, #48]	@ (8002dfc <MX_TIM3_Init+0xa0>)
 8002dca:	f001 ff6f 	bl	8004cac <HAL_TIM_Encoder_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002dd4:	f7fe f9c7 	bl	8001166 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	4619      	mov	r1, r3
 8002de4:	4805      	ldr	r0, [pc, #20]	@ (8002dfc <MX_TIM3_Init+0xa0>)
 8002de6:	f002 fccb 	bl	8005780 <HAL_TIMEx_MasterConfigSynchronization>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002df0:	f7fe f9b9 	bl	8001166 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002df4:	bf00      	nop
 8002df6:	3730      	adds	r7, #48	@ 0x30
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20003f38 	.word	0x20003f38
 8002e00:	40000400 	.word	0x40000400

08002e04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a09      	ldr	r2, [pc, #36]	@ (8002e38 <HAL_TIM_Base_MspInit+0x34>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d10b      	bne.n	8002e2e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e16:	4b09      	ldr	r3, [pc, #36]	@ (8002e3c <HAL_TIM_Base_MspInit+0x38>)
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	4a08      	ldr	r2, [pc, #32]	@ (8002e3c <HAL_TIM_Base_MspInit+0x38>)
 8002e1c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e20:	6193      	str	r3, [r2, #24]
 8002e22:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <HAL_TIM_Base_MspInit+0x38>)
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr
 8002e38:	40012c00 	.word	0x40012c00
 8002e3c:	40021000 	.word	0x40021000

08002e40 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	@ 0x28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e48:	f107 0314 	add.w	r3, r7, #20
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ed4 <HAL_TIM_Encoder_MspInit+0x94>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d135      	bne.n	8002ecc <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e60:	4b1d      	ldr	r3, [pc, #116]	@ (8002ed8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002e66:	f043 0302 	orr.w	r3, r3, #2
 8002e6a:	61d3      	str	r3, [r2, #28]
 8002e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e78:	4b17      	ldr	r3, [pc, #92]	@ (8002ed8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	4a16      	ldr	r2, [pc, #88]	@ (8002ed8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002e7e:	f043 0308 	orr.w	r3, r3, #8
 8002e82:	6193      	str	r3, [r2, #24]
 8002e84:	4b14      	ldr	r3, [pc, #80]	@ (8002ed8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_CH1_Pin|Encoder_CH2_Pin;
 8002e90:	2330      	movs	r3, #48	@ 0x30
 8002e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e9c:	f107 0314 	add.w	r3, r7, #20
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	480e      	ldr	r0, [pc, #56]	@ (8002edc <HAL_TIM_Encoder_MspInit+0x9c>)
 8002ea4:	f000 fb6c 	bl	8003580 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002ebc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec6:	4a06      	ldr	r2, [pc, #24]	@ (8002ee0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002ecc:	bf00      	nop
 8002ece:	3728      	adds	r7, #40	@ 0x28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40000400 	.word	0x40000400
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40010c00 	.word	0x40010c00
 8002ee0:	40010000 	.word	0x40010000

08002ee4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eec:	f107 0310 	add.w	r3, r7, #16
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	609a      	str	r2, [r3, #8]
 8002ef8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a10      	ldr	r2, [pc, #64]	@ (8002f40 <HAL_TIM_MspPostInit+0x5c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d118      	bne.n	8002f36 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f04:	4b0f      	ldr	r3, [pc, #60]	@ (8002f44 <HAL_TIM_MspPostInit+0x60>)
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	4a0e      	ldr	r2, [pc, #56]	@ (8002f44 <HAL_TIM_MspPostInit+0x60>)
 8002f0a:	f043 0304 	orr.w	r3, r3, #4
 8002f0e:	6193      	str	r3, [r2, #24]
 8002f10:	4b0c      	ldr	r3, [pc, #48]	@ (8002f44 <HAL_TIM_MspPostInit+0x60>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f22:	2302      	movs	r3, #2
 8002f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f26:	2302      	movs	r3, #2
 8002f28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2a:	f107 0310 	add.w	r3, r7, #16
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4805      	ldr	r0, [pc, #20]	@ (8002f48 <HAL_TIM_MspPostInit+0x64>)
 8002f32:	f000 fb25 	bl	8003580 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f36:	bf00      	nop
 8002f38:	3720      	adds	r7, #32
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40012c00 	.word	0x40012c00
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40010800 	.word	0x40010800

08002f4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f4c:	f7ff fe5e 	bl	8002c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f50:	480b      	ldr	r0, [pc, #44]	@ (8002f80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002f52:	490c      	ldr	r1, [pc, #48]	@ (8002f84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002f54:	4a0c      	ldr	r2, [pc, #48]	@ (8002f88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f58:	e002      	b.n	8002f60 <LoopCopyDataInit>

08002f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f5e:	3304      	adds	r3, #4

08002f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f64:	d3f9      	bcc.n	8002f5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f66:	4a09      	ldr	r2, [pc, #36]	@ (8002f8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002f68:	4c09      	ldr	r4, [pc, #36]	@ (8002f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f6c:	e001      	b.n	8002f72 <LoopFillZerobss>

08002f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f70:	3204      	adds	r2, #4

08002f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f74:	d3fb      	bcc.n	8002f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f76:	f002 fe6d 	bl	8005c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f7a:	f7fe f825 	bl	8000fc8 <main>
  bx lr
 8002f7e:	4770      	bx	lr
  ldr r0, =_sdata
 8002f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f84:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002f88:	0800887c 	.word	0x0800887c
  ldr r2, =_sbss
 8002f8c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002f90:	200040d0 	.word	0x200040d0

08002f94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f94:	e7fe      	b.n	8002f94 <ADC1_2_IRQHandler>
	...

08002f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f9c:	4b08      	ldr	r3, [pc, #32]	@ (8002fc0 <HAL_Init+0x28>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a07      	ldr	r2, [pc, #28]	@ (8002fc0 <HAL_Init+0x28>)
 8002fa2:	f043 0310 	orr.w	r3, r3, #16
 8002fa6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa8:	2003      	movs	r0, #3
 8002faa:	f000 f947 	bl	800323c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fae:	200f      	movs	r0, #15
 8002fb0:	f000 f808 	bl	8002fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fb4:	f7ff fd00 	bl	80029b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40022000 	.word	0x40022000

08002fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fcc:	4b12      	ldr	r3, [pc, #72]	@ (8003018 <HAL_InitTick+0x54>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b12      	ldr	r3, [pc, #72]	@ (800301c <HAL_InitTick+0x58>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 f95f 	bl	80032a6 <HAL_SYSTICK_Config>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e00e      	b.n	8003010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b0f      	cmp	r3, #15
 8002ff6:	d80a      	bhi.n	800300e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8003000:	f000 f927 	bl	8003252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003004:	4a06      	ldr	r2, [pc, #24]	@ (8003020 <HAL_InitTick+0x5c>)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	e000      	b.n	8003010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
}
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	20000014 	.word	0x20000014
 800301c:	2000001c 	.word	0x2000001c
 8003020:	20000018 	.word	0x20000018

08003024 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003028:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <HAL_IncTick+0x1c>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	4b05      	ldr	r3, [pc, #20]	@ (8003044 <HAL_IncTick+0x20>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4413      	add	r3, r2
 8003034:	4a03      	ldr	r2, [pc, #12]	@ (8003044 <HAL_IncTick+0x20>)
 8003036:	6013      	str	r3, [r2, #0]
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr
 8003040:	2000001c 	.word	0x2000001c
 8003044:	20003f80 	.word	0x20003f80

08003048 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return uwTick;
 800304c:	4b02      	ldr	r3, [pc, #8]	@ (8003058 <HAL_GetTick+0x10>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr
 8003058:	20003f80 	.word	0x20003f80

0800305c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003064:	f7ff fff0 	bl	8003048 <HAL_GetTick>
 8003068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d005      	beq.n	8003082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003076:	4b0a      	ldr	r3, [pc, #40]	@ (80030a0 <HAL_Delay+0x44>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4413      	add	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003082:	bf00      	nop
 8003084:	f7ff ffe0 	bl	8003048 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	429a      	cmp	r2, r3
 8003092:	d8f7      	bhi.n	8003084 <HAL_Delay+0x28>
  {
  }
}
 8003094:	bf00      	nop
 8003096:	bf00      	nop
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	2000001c 	.word	0x2000001c

080030a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b4:	4b0c      	ldr	r3, [pc, #48]	@ (80030e8 <__NVIC_SetPriorityGrouping+0x44>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030c0:	4013      	ands	r3, r2
 80030c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030d6:	4a04      	ldr	r2, [pc, #16]	@ (80030e8 <__NVIC_SetPriorityGrouping+0x44>)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	60d3      	str	r3, [r2, #12]
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f0:	4b04      	ldr	r3, [pc, #16]	@ (8003104 <__NVIC_GetPriorityGrouping+0x18>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	0a1b      	lsrs	r3, r3, #8
 80030f6:	f003 0307 	and.w	r3, r3, #7
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003116:	2b00      	cmp	r3, #0
 8003118:	db0b      	blt.n	8003132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	f003 021f 	and.w	r2, r3, #31
 8003120:	4906      	ldr	r1, [pc, #24]	@ (800313c <__NVIC_EnableIRQ+0x34>)
 8003122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	2001      	movs	r0, #1
 800312a:	fa00 f202 	lsl.w	r2, r0, r2
 800312e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr
 800313c:	e000e100 	.word	0xe000e100

08003140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	6039      	str	r1, [r7, #0]
 800314a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003150:	2b00      	cmp	r3, #0
 8003152:	db0a      	blt.n	800316a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	b2da      	uxtb	r2, r3
 8003158:	490c      	ldr	r1, [pc, #48]	@ (800318c <__NVIC_SetPriority+0x4c>)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	0112      	lsls	r2, r2, #4
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	440b      	add	r3, r1
 8003164:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003168:	e00a      	b.n	8003180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	b2da      	uxtb	r2, r3
 800316e:	4908      	ldr	r1, [pc, #32]	@ (8003190 <__NVIC_SetPriority+0x50>)
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	3b04      	subs	r3, #4
 8003178:	0112      	lsls	r2, r2, #4
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	440b      	add	r3, r1
 800317e:	761a      	strb	r2, [r3, #24]
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000e100 	.word	0xe000e100
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003194:	b480      	push	{r7}
 8003196:	b089      	sub	sp, #36	@ 0x24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f1c3 0307 	rsb	r3, r3, #7
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	bf28      	it	cs
 80031b2:	2304      	movcs	r3, #4
 80031b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3304      	adds	r3, #4
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d902      	bls.n	80031c4 <NVIC_EncodePriority+0x30>
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3b03      	subs	r3, #3
 80031c2:	e000      	b.n	80031c6 <NVIC_EncodePriority+0x32>
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c8:	f04f 32ff 	mov.w	r2, #4294967295
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43da      	mvns	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	401a      	ands	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031dc:	f04f 31ff 	mov.w	r1, #4294967295
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	fa01 f303 	lsl.w	r3, r1, r3
 80031e6:	43d9      	mvns	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ec:	4313      	orrs	r3, r2
         );
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3724      	adds	r7, #36	@ 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3b01      	subs	r3, #1
 8003204:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003208:	d301      	bcc.n	800320e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800320a:	2301      	movs	r3, #1
 800320c:	e00f      	b.n	800322e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800320e:	4a0a      	ldr	r2, [pc, #40]	@ (8003238 <SysTick_Config+0x40>)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3b01      	subs	r3, #1
 8003214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003216:	210f      	movs	r1, #15
 8003218:	f04f 30ff 	mov.w	r0, #4294967295
 800321c:	f7ff ff90 	bl	8003140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003220:	4b05      	ldr	r3, [pc, #20]	@ (8003238 <SysTick_Config+0x40>)
 8003222:	2200      	movs	r2, #0
 8003224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003226:	4b04      	ldr	r3, [pc, #16]	@ (8003238 <SysTick_Config+0x40>)
 8003228:	2207      	movs	r2, #7
 800322a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	e000e010 	.word	0xe000e010

0800323c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff ff2d 	bl	80030a4 <__NVIC_SetPriorityGrouping>
}
 800324a:	bf00      	nop
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003252:	b580      	push	{r7, lr}
 8003254:	b086      	sub	sp, #24
 8003256:	af00      	add	r7, sp, #0
 8003258:	4603      	mov	r3, r0
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
 800325e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003264:	f7ff ff42 	bl	80030ec <__NVIC_GetPriorityGrouping>
 8003268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	68b9      	ldr	r1, [r7, #8]
 800326e:	6978      	ldr	r0, [r7, #20]
 8003270:	f7ff ff90 	bl	8003194 <NVIC_EncodePriority>
 8003274:	4602      	mov	r2, r0
 8003276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327a:	4611      	mov	r1, r2
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff ff5f 	bl	8003140 <__NVIC_SetPriority>
}
 8003282:	bf00      	nop
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b082      	sub	sp, #8
 800328e:	af00      	add	r7, sp, #0
 8003290:	4603      	mov	r3, r0
 8003292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ff35 	bl	8003108 <__NVIC_EnableIRQ>
}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff ffa2 	bl	80031f8 <SysTick_Config>
 80032b4:	4603      	mov	r3, r0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e043      	b.n	800335e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	4b22      	ldr	r3, [pc, #136]	@ (8003368 <HAL_DMA_Init+0xa8>)
 80032de:	4413      	add	r3, r2
 80032e0:	4a22      	ldr	r2, [pc, #136]	@ (800336c <HAL_DMA_Init+0xac>)
 80032e2:	fba2 2303 	umull	r2, r3, r2, r3
 80032e6:	091b      	lsrs	r3, r3, #4
 80032e8:	009a      	lsls	r2, r3, #2
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003370 <HAL_DMA_Init+0xb0>)
 80032f2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800330a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800330e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003318:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003324:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003330:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr
 8003368:	bffdfff8 	.word	0xbffdfff8
 800336c:	cccccccd 	.word	0xcccccccd
 8003370:	40020000 	.word	0x40020000

08003374 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	2204      	movs	r2, #4
 8003392:	409a      	lsls	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4013      	ands	r3, r2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d04f      	beq.n	800343c <HAL_DMA_IRQHandler+0xc8>
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d04a      	beq.n	800343c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d107      	bne.n	80033c4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0204 	bic.w	r2, r2, #4
 80033c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a66      	ldr	r2, [pc, #408]	@ (8003564 <HAL_DMA_IRQHandler+0x1f0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d029      	beq.n	8003422 <HAL_DMA_IRQHandler+0xae>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a65      	ldr	r2, [pc, #404]	@ (8003568 <HAL_DMA_IRQHandler+0x1f4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d022      	beq.n	800341e <HAL_DMA_IRQHandler+0xaa>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a63      	ldr	r2, [pc, #396]	@ (800356c <HAL_DMA_IRQHandler+0x1f8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d01a      	beq.n	8003418 <HAL_DMA_IRQHandler+0xa4>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a62      	ldr	r2, [pc, #392]	@ (8003570 <HAL_DMA_IRQHandler+0x1fc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d012      	beq.n	8003412 <HAL_DMA_IRQHandler+0x9e>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a60      	ldr	r2, [pc, #384]	@ (8003574 <HAL_DMA_IRQHandler+0x200>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00a      	beq.n	800340c <HAL_DMA_IRQHandler+0x98>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a5f      	ldr	r2, [pc, #380]	@ (8003578 <HAL_DMA_IRQHandler+0x204>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d102      	bne.n	8003406 <HAL_DMA_IRQHandler+0x92>
 8003400:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003404:	e00e      	b.n	8003424 <HAL_DMA_IRQHandler+0xb0>
 8003406:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800340a:	e00b      	b.n	8003424 <HAL_DMA_IRQHandler+0xb0>
 800340c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003410:	e008      	b.n	8003424 <HAL_DMA_IRQHandler+0xb0>
 8003412:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003416:	e005      	b.n	8003424 <HAL_DMA_IRQHandler+0xb0>
 8003418:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800341c:	e002      	b.n	8003424 <HAL_DMA_IRQHandler+0xb0>
 800341e:	2340      	movs	r3, #64	@ 0x40
 8003420:	e000      	b.n	8003424 <HAL_DMA_IRQHandler+0xb0>
 8003422:	2304      	movs	r3, #4
 8003424:	4a55      	ldr	r2, [pc, #340]	@ (800357c <HAL_DMA_IRQHandler+0x208>)
 8003426:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 8094 	beq.w	800355a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800343a:	e08e      	b.n	800355a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003440:	2202      	movs	r2, #2
 8003442:	409a      	lsls	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4013      	ands	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d056      	beq.n	80034fa <HAL_DMA_IRQHandler+0x186>
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d051      	beq.n	80034fa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0320 	and.w	r3, r3, #32
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10b      	bne.n	800347c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 020a 	bic.w	r2, r2, #10
 8003472:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a38      	ldr	r2, [pc, #224]	@ (8003564 <HAL_DMA_IRQHandler+0x1f0>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d029      	beq.n	80034da <HAL_DMA_IRQHandler+0x166>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a37      	ldr	r2, [pc, #220]	@ (8003568 <HAL_DMA_IRQHandler+0x1f4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d022      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x162>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a35      	ldr	r2, [pc, #212]	@ (800356c <HAL_DMA_IRQHandler+0x1f8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d01a      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x15c>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a34      	ldr	r2, [pc, #208]	@ (8003570 <HAL_DMA_IRQHandler+0x1fc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d012      	beq.n	80034ca <HAL_DMA_IRQHandler+0x156>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a32      	ldr	r2, [pc, #200]	@ (8003574 <HAL_DMA_IRQHandler+0x200>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00a      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x150>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a31      	ldr	r2, [pc, #196]	@ (8003578 <HAL_DMA_IRQHandler+0x204>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d102      	bne.n	80034be <HAL_DMA_IRQHandler+0x14a>
 80034b8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80034bc:	e00e      	b.n	80034dc <HAL_DMA_IRQHandler+0x168>
 80034be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034c2:	e00b      	b.n	80034dc <HAL_DMA_IRQHandler+0x168>
 80034c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034c8:	e008      	b.n	80034dc <HAL_DMA_IRQHandler+0x168>
 80034ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034ce:	e005      	b.n	80034dc <HAL_DMA_IRQHandler+0x168>
 80034d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034d4:	e002      	b.n	80034dc <HAL_DMA_IRQHandler+0x168>
 80034d6:	2320      	movs	r3, #32
 80034d8:	e000      	b.n	80034dc <HAL_DMA_IRQHandler+0x168>
 80034da:	2302      	movs	r3, #2
 80034dc:	4a27      	ldr	r2, [pc, #156]	@ (800357c <HAL_DMA_IRQHandler+0x208>)
 80034de:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d034      	beq.n	800355a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80034f8:	e02f      	b.n	800355a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fe:	2208      	movs	r2, #8
 8003500:	409a      	lsls	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4013      	ands	r3, r2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d028      	beq.n	800355c <HAL_DMA_IRQHandler+0x1e8>
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b00      	cmp	r3, #0
 8003512:	d023      	beq.n	800355c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 020e 	bic.w	r2, r2, #14
 8003522:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352c:	2101      	movs	r1, #1
 800352e:	fa01 f202 	lsl.w	r2, r1, r2
 8003532:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354e:	2b00      	cmp	r3, #0
 8003550:	d004      	beq.n	800355c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	4798      	blx	r3
    }
  }
  return;
 800355a:	bf00      	nop
 800355c:	bf00      	nop
}
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40020008 	.word	0x40020008
 8003568:	4002001c 	.word	0x4002001c
 800356c:	40020030 	.word	0x40020030
 8003570:	40020044 	.word	0x40020044
 8003574:	40020058 	.word	0x40020058
 8003578:	4002006c 	.word	0x4002006c
 800357c:	40020000 	.word	0x40020000

08003580 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003580:	b480      	push	{r7}
 8003582:	b08b      	sub	sp, #44	@ 0x2c
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800358a:	2300      	movs	r3, #0
 800358c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800358e:	2300      	movs	r3, #0
 8003590:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003592:	e169      	b.n	8003868 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003594:	2201      	movs	r2, #1
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	f040 8158 	bne.w	8003862 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4a9a      	ldr	r2, [pc, #616]	@ (8003820 <HAL_GPIO_Init+0x2a0>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d05e      	beq.n	800367a <HAL_GPIO_Init+0xfa>
 80035bc:	4a98      	ldr	r2, [pc, #608]	@ (8003820 <HAL_GPIO_Init+0x2a0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d875      	bhi.n	80036ae <HAL_GPIO_Init+0x12e>
 80035c2:	4a98      	ldr	r2, [pc, #608]	@ (8003824 <HAL_GPIO_Init+0x2a4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d058      	beq.n	800367a <HAL_GPIO_Init+0xfa>
 80035c8:	4a96      	ldr	r2, [pc, #600]	@ (8003824 <HAL_GPIO_Init+0x2a4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d86f      	bhi.n	80036ae <HAL_GPIO_Init+0x12e>
 80035ce:	4a96      	ldr	r2, [pc, #600]	@ (8003828 <HAL_GPIO_Init+0x2a8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d052      	beq.n	800367a <HAL_GPIO_Init+0xfa>
 80035d4:	4a94      	ldr	r2, [pc, #592]	@ (8003828 <HAL_GPIO_Init+0x2a8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d869      	bhi.n	80036ae <HAL_GPIO_Init+0x12e>
 80035da:	4a94      	ldr	r2, [pc, #592]	@ (800382c <HAL_GPIO_Init+0x2ac>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d04c      	beq.n	800367a <HAL_GPIO_Init+0xfa>
 80035e0:	4a92      	ldr	r2, [pc, #584]	@ (800382c <HAL_GPIO_Init+0x2ac>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d863      	bhi.n	80036ae <HAL_GPIO_Init+0x12e>
 80035e6:	4a92      	ldr	r2, [pc, #584]	@ (8003830 <HAL_GPIO_Init+0x2b0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d046      	beq.n	800367a <HAL_GPIO_Init+0xfa>
 80035ec:	4a90      	ldr	r2, [pc, #576]	@ (8003830 <HAL_GPIO_Init+0x2b0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d85d      	bhi.n	80036ae <HAL_GPIO_Init+0x12e>
 80035f2:	2b12      	cmp	r3, #18
 80035f4:	d82a      	bhi.n	800364c <HAL_GPIO_Init+0xcc>
 80035f6:	2b12      	cmp	r3, #18
 80035f8:	d859      	bhi.n	80036ae <HAL_GPIO_Init+0x12e>
 80035fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003600 <HAL_GPIO_Init+0x80>)
 80035fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003600:	0800367b 	.word	0x0800367b
 8003604:	08003655 	.word	0x08003655
 8003608:	08003667 	.word	0x08003667
 800360c:	080036a9 	.word	0x080036a9
 8003610:	080036af 	.word	0x080036af
 8003614:	080036af 	.word	0x080036af
 8003618:	080036af 	.word	0x080036af
 800361c:	080036af 	.word	0x080036af
 8003620:	080036af 	.word	0x080036af
 8003624:	080036af 	.word	0x080036af
 8003628:	080036af 	.word	0x080036af
 800362c:	080036af 	.word	0x080036af
 8003630:	080036af 	.word	0x080036af
 8003634:	080036af 	.word	0x080036af
 8003638:	080036af 	.word	0x080036af
 800363c:	080036af 	.word	0x080036af
 8003640:	080036af 	.word	0x080036af
 8003644:	0800365d 	.word	0x0800365d
 8003648:	08003671 	.word	0x08003671
 800364c:	4a79      	ldr	r2, [pc, #484]	@ (8003834 <HAL_GPIO_Init+0x2b4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d013      	beq.n	800367a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003652:	e02c      	b.n	80036ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	623b      	str	r3, [r7, #32]
          break;
 800365a:	e029      	b.n	80036b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	3304      	adds	r3, #4
 8003662:	623b      	str	r3, [r7, #32]
          break;
 8003664:	e024      	b.n	80036b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	3308      	adds	r3, #8
 800366c:	623b      	str	r3, [r7, #32]
          break;
 800366e:	e01f      	b.n	80036b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	330c      	adds	r3, #12
 8003676:	623b      	str	r3, [r7, #32]
          break;
 8003678:	e01a      	b.n	80036b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d102      	bne.n	8003688 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003682:	2304      	movs	r3, #4
 8003684:	623b      	str	r3, [r7, #32]
          break;
 8003686:	e013      	b.n	80036b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d105      	bne.n	800369c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003690:	2308      	movs	r3, #8
 8003692:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69fa      	ldr	r2, [r7, #28]
 8003698:	611a      	str	r2, [r3, #16]
          break;
 800369a:	e009      	b.n	80036b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800369c:	2308      	movs	r3, #8
 800369e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69fa      	ldr	r2, [r7, #28]
 80036a4:	615a      	str	r2, [r3, #20]
          break;
 80036a6:	e003      	b.n	80036b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036a8:	2300      	movs	r3, #0
 80036aa:	623b      	str	r3, [r7, #32]
          break;
 80036ac:	e000      	b.n	80036b0 <HAL_GPIO_Init+0x130>
          break;
 80036ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2bff      	cmp	r3, #255	@ 0xff
 80036b4:	d801      	bhi.n	80036ba <HAL_GPIO_Init+0x13a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	e001      	b.n	80036be <HAL_GPIO_Init+0x13e>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3304      	adds	r3, #4
 80036be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2bff      	cmp	r3, #255	@ 0xff
 80036c4:	d802      	bhi.n	80036cc <HAL_GPIO_Init+0x14c>
 80036c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	e002      	b.n	80036d2 <HAL_GPIO_Init+0x152>
 80036cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ce:	3b08      	subs	r3, #8
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	210f      	movs	r1, #15
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	fa01 f303 	lsl.w	r3, r1, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	401a      	ands	r2, r3
 80036e4:	6a39      	ldr	r1, [r7, #32]
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ec:	431a      	orrs	r2, r3
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 80b1 	beq.w	8003862 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003700:	4b4d      	ldr	r3, [pc, #308]	@ (8003838 <HAL_GPIO_Init+0x2b8>)
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	4a4c      	ldr	r2, [pc, #304]	@ (8003838 <HAL_GPIO_Init+0x2b8>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	6193      	str	r3, [r2, #24]
 800370c:	4b4a      	ldr	r3, [pc, #296]	@ (8003838 <HAL_GPIO_Init+0x2b8>)
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003718:	4a48      	ldr	r2, [pc, #288]	@ (800383c <HAL_GPIO_Init+0x2bc>)
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	089b      	lsrs	r3, r3, #2
 800371e:	3302      	adds	r3, #2
 8003720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003724:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	220f      	movs	r2, #15
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4013      	ands	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a40      	ldr	r2, [pc, #256]	@ (8003840 <HAL_GPIO_Init+0x2c0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d013      	beq.n	800376c <HAL_GPIO_Init+0x1ec>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a3f      	ldr	r2, [pc, #252]	@ (8003844 <HAL_GPIO_Init+0x2c4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00d      	beq.n	8003768 <HAL_GPIO_Init+0x1e8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a3e      	ldr	r2, [pc, #248]	@ (8003848 <HAL_GPIO_Init+0x2c8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d007      	beq.n	8003764 <HAL_GPIO_Init+0x1e4>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a3d      	ldr	r2, [pc, #244]	@ (800384c <HAL_GPIO_Init+0x2cc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d101      	bne.n	8003760 <HAL_GPIO_Init+0x1e0>
 800375c:	2303      	movs	r3, #3
 800375e:	e006      	b.n	800376e <HAL_GPIO_Init+0x1ee>
 8003760:	2304      	movs	r3, #4
 8003762:	e004      	b.n	800376e <HAL_GPIO_Init+0x1ee>
 8003764:	2302      	movs	r3, #2
 8003766:	e002      	b.n	800376e <HAL_GPIO_Init+0x1ee>
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <HAL_GPIO_Init+0x1ee>
 800376c:	2300      	movs	r3, #0
 800376e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003770:	f002 0203 	and.w	r2, r2, #3
 8003774:	0092      	lsls	r2, r2, #2
 8003776:	4093      	lsls	r3, r2
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800377e:	492f      	ldr	r1, [pc, #188]	@ (800383c <HAL_GPIO_Init+0x2bc>)
 8003780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003782:	089b      	lsrs	r3, r3, #2
 8003784:	3302      	adds	r3, #2
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d006      	beq.n	80037a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003798:	4b2d      	ldr	r3, [pc, #180]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	492c      	ldr	r1, [pc, #176]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	608b      	str	r3, [r1, #8]
 80037a4:	e006      	b.n	80037b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	4928      	ldr	r1, [pc, #160]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d006      	beq.n	80037ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037c0:	4b23      	ldr	r3, [pc, #140]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	4922      	ldr	r1, [pc, #136]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60cb      	str	r3, [r1, #12]
 80037cc:	e006      	b.n	80037dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037ce:	4b20      	ldr	r3, [pc, #128]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	43db      	mvns	r3, r3
 80037d6:	491e      	ldr	r1, [pc, #120]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037d8:	4013      	ands	r3, r2
 80037da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d006      	beq.n	80037f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80037e8:	4b19      	ldr	r3, [pc, #100]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	4918      	ldr	r1, [pc, #96]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	604b      	str	r3, [r1, #4]
 80037f4:	e006      	b.n	8003804 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037f6:	4b16      	ldr	r3, [pc, #88]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	43db      	mvns	r3, r3
 80037fe:	4914      	ldr	r1, [pc, #80]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 8003800:	4013      	ands	r3, r2
 8003802:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d021      	beq.n	8003854 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003810:	4b0f      	ldr	r3, [pc, #60]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	490e      	ldr	r1, [pc, #56]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	4313      	orrs	r3, r2
 800381a:	600b      	str	r3, [r1, #0]
 800381c:	e021      	b.n	8003862 <HAL_GPIO_Init+0x2e2>
 800381e:	bf00      	nop
 8003820:	10320000 	.word	0x10320000
 8003824:	10310000 	.word	0x10310000
 8003828:	10220000 	.word	0x10220000
 800382c:	10210000 	.word	0x10210000
 8003830:	10120000 	.word	0x10120000
 8003834:	10110000 	.word	0x10110000
 8003838:	40021000 	.word	0x40021000
 800383c:	40010000 	.word	0x40010000
 8003840:	40010800 	.word	0x40010800
 8003844:	40010c00 	.word	0x40010c00
 8003848:	40011000 	.word	0x40011000
 800384c:	40011400 	.word	0x40011400
 8003850:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003854:	4b0b      	ldr	r3, [pc, #44]	@ (8003884 <HAL_GPIO_Init+0x304>)
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	43db      	mvns	r3, r3
 800385c:	4909      	ldr	r1, [pc, #36]	@ (8003884 <HAL_GPIO_Init+0x304>)
 800385e:	4013      	ands	r3, r2
 8003860:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003864:	3301      	adds	r3, #1
 8003866:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386e:	fa22 f303 	lsr.w	r3, r2, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	f47f ae8e 	bne.w	8003594 <HAL_GPIO_Init+0x14>
  }
}
 8003878:	bf00      	nop
 800387a:	bf00      	nop
 800387c:	372c      	adds	r7, #44	@ 0x2c
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr
 8003884:	40010400 	.word	0x40010400

08003888 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	887b      	ldrh	r3, [r7, #2]
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
 80038a4:	e001      	b.n	80038aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038a6:	2300      	movs	r3, #0
 80038a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr

080038b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	460b      	mov	r3, r1
 80038c0:	807b      	strh	r3, [r7, #2]
 80038c2:	4613      	mov	r3, r2
 80038c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038c6:	787b      	ldrb	r3, [r7, #1]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038cc:	887a      	ldrh	r2, [r7, #2]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038d2:	e003      	b.n	80038dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038d4:	887b      	ldrh	r3, [r7, #2]
 80038d6:	041a      	lsls	r2, r3, #16
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	611a      	str	r2, [r3, #16]
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e12b      	b.n	8003b52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fd fac4 	bl	8000e9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2224      	movs	r2, #36	@ 0x24
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0201 	bic.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800393a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800394a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800394c:	f001 f832 	bl	80049b4 <HAL_RCC_GetPCLK1Freq>
 8003950:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	4a81      	ldr	r2, [pc, #516]	@ (8003b5c <HAL_I2C_Init+0x274>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d807      	bhi.n	800396c <HAL_I2C_Init+0x84>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4a80      	ldr	r2, [pc, #512]	@ (8003b60 <HAL_I2C_Init+0x278>)
 8003960:	4293      	cmp	r3, r2
 8003962:	bf94      	ite	ls
 8003964:	2301      	movls	r3, #1
 8003966:	2300      	movhi	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e006      	b.n	800397a <HAL_I2C_Init+0x92>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4a7d      	ldr	r2, [pc, #500]	@ (8003b64 <HAL_I2C_Init+0x27c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	bf94      	ite	ls
 8003974:	2301      	movls	r3, #1
 8003976:	2300      	movhi	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e0e7      	b.n	8003b52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4a78      	ldr	r2, [pc, #480]	@ (8003b68 <HAL_I2C_Init+0x280>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	0c9b      	lsrs	r3, r3, #18
 800398c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4a6a      	ldr	r2, [pc, #424]	@ (8003b5c <HAL_I2C_Init+0x274>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d802      	bhi.n	80039bc <HAL_I2C_Init+0xd4>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	3301      	adds	r3, #1
 80039ba:	e009      	b.n	80039d0 <HAL_I2C_Init+0xe8>
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039c2:	fb02 f303 	mul.w	r3, r2, r3
 80039c6:	4a69      	ldr	r2, [pc, #420]	@ (8003b6c <HAL_I2C_Init+0x284>)
 80039c8:	fba2 2303 	umull	r2, r3, r2, r3
 80039cc:	099b      	lsrs	r3, r3, #6
 80039ce:	3301      	adds	r3, #1
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	430b      	orrs	r3, r1
 80039d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	495c      	ldr	r1, [pc, #368]	@ (8003b5c <HAL_I2C_Init+0x274>)
 80039ec:	428b      	cmp	r3, r1
 80039ee:	d819      	bhi.n	8003a24 <HAL_I2C_Init+0x13c>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	1e59      	subs	r1, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80039fe:	1c59      	adds	r1, r3, #1
 8003a00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a04:	400b      	ands	r3, r1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_I2C_Init+0x138>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1e59      	subs	r1, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a18:	3301      	adds	r3, #1
 8003a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1e:	e051      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003a20:	2304      	movs	r3, #4
 8003a22:	e04f      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d111      	bne.n	8003a50 <HAL_I2C_Init+0x168>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1e58      	subs	r0, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6859      	ldr	r1, [r3, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	440b      	add	r3, r1
 8003a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e012      	b.n	8003a76 <HAL_I2C_Init+0x18e>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	1e58      	subs	r0, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6859      	ldr	r1, [r3, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	0099      	lsls	r1, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a66:	3301      	adds	r3, #1
 8003a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf0c      	ite	eq
 8003a70:	2301      	moveq	r3, #1
 8003a72:	2300      	movne	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_I2C_Init+0x196>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e022      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10e      	bne.n	8003aa4 <HAL_I2C_Init+0x1bc>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1e58      	subs	r0, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6859      	ldr	r1, [r3, #4]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	440b      	add	r3, r1
 8003a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aa2:	e00f      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1e58      	subs	r0, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	0099      	lsls	r1, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aba:	3301      	adds	r3, #1
 8003abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	6809      	ldr	r1, [r1, #0]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69da      	ldr	r2, [r3, #28]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003af2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6911      	ldr	r1, [r2, #16]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	68d2      	ldr	r2, [r2, #12]
 8003afe:	4311      	orrs	r1, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6812      	ldr	r2, [r2, #0]
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695a      	ldr	r2, [r3, #20]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	000186a0 	.word	0x000186a0
 8003b60:	001e847f 	.word	0x001e847f
 8003b64:	003d08ff 	.word	0x003d08ff
 8003b68:	431bde83 	.word	0x431bde83
 8003b6c:	10624dd3 	.word	0x10624dd3

08003b70 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	817b      	strh	r3, [r7, #10]
 8003b80:	4613      	mov	r3, r2
 8003b82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b84:	f7ff fa60 	bl	8003048 <HAL_GetTick>
 8003b88:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b20      	cmp	r3, #32
 8003b94:	f040 80e0 	bne.w	8003d58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	2319      	movs	r3, #25
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	4970      	ldr	r1, [pc, #448]	@ (8003d64 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 f964 	bl	8003e70 <I2C_WaitOnFlagUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e0d3      	b.n	8003d5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d101      	bne.n	8003bc0 <HAL_I2C_Master_Transmit+0x50>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	e0cc      	b.n	8003d5a <HAL_I2C_Master_Transmit+0x1ea>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d007      	beq.n	8003be6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f042 0201 	orr.w	r2, r2, #1
 8003be4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bf4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2221      	movs	r2, #33	@ 0x21
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2210      	movs	r2, #16
 8003c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	893a      	ldrh	r2, [r7, #8]
 8003c16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4a50      	ldr	r2, [pc, #320]	@ (8003d68 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c28:	8979      	ldrh	r1, [r7, #10]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	6a3a      	ldr	r2, [r7, #32]
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f89c 	bl	8003d6c <I2C_MasterRequestWrite>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e08d      	b.n	8003d5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c3e:	2300      	movs	r3, #0
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c54:	e066      	b.n	8003d24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	6a39      	ldr	r1, [r7, #32]
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 fa22 	bl	80040a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00d      	beq.n	8003c82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d107      	bne.n	8003c7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e06b      	b.n	8003d5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	781a      	ldrb	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d11b      	bne.n	8003cf8 <HAL_I2C_Master_Transmit+0x188>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d017      	beq.n	8003cf8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	781a      	ldrb	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	6a39      	ldr	r1, [r7, #32]
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 fa19 	bl	8004134 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00d      	beq.n	8003d24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d107      	bne.n	8003d20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e01a      	b.n	8003d5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d194      	bne.n	8003c56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	e000      	b.n	8003d5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d58:	2302      	movs	r3, #2
  }
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	00100002 	.word	0x00100002
 8003d68:	ffff0000 	.word	0xffff0000

08003d6c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af02      	add	r7, sp, #8
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	607a      	str	r2, [r7, #4]
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d80:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d006      	beq.n	8003d96 <I2C_MasterRequestWrite+0x2a>
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d003      	beq.n	8003d96 <I2C_MasterRequestWrite+0x2a>
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d94:	d108      	bne.n	8003da8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	e00b      	b.n	8003dc0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dac:	2b12      	cmp	r3, #18
 8003dae:	d107      	bne.n	8003dc0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dbe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 f84f 	bl	8003e70 <I2C_WaitOnFlagUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00d      	beq.n	8003df4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003de6:	d103      	bne.n	8003df0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e035      	b.n	8003e60 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dfc:	d108      	bne.n	8003e10 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dfe:	897b      	ldrh	r3, [r7, #10]
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	461a      	mov	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e0c:	611a      	str	r2, [r3, #16]
 8003e0e:	e01b      	b.n	8003e48 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e10:	897b      	ldrh	r3, [r7, #10]
 8003e12:	11db      	asrs	r3, r3, #7
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	f003 0306 	and.w	r3, r3, #6
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f063 030f 	orn	r3, r3, #15
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	490e      	ldr	r1, [pc, #56]	@ (8003e68 <I2C_MasterRequestWrite+0xfc>)
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f898 	bl	8003f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e010      	b.n	8003e60 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e3e:	897b      	ldrh	r3, [r7, #10]
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	4907      	ldr	r1, [pc, #28]	@ (8003e6c <I2C_MasterRequestWrite+0x100>)
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 f888 	bl	8003f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	00010008 	.word	0x00010008
 8003e6c:	00010002 	.word	0x00010002

08003e70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e80:	e048      	b.n	8003f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e88:	d044      	beq.n	8003f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8a:	f7ff f8dd 	bl	8003048 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d302      	bcc.n	8003ea0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d139      	bne.n	8003f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	0c1b      	lsrs	r3, r3, #16
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d10d      	bne.n	8003ec6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	43da      	mvns	r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	bf0c      	ite	eq
 8003ebc:	2301      	moveq	r3, #1
 8003ebe:	2300      	movne	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	e00c      	b.n	8003ee0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	43da      	mvns	r2, r3
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	bf0c      	ite	eq
 8003ed8:	2301      	moveq	r3, #1
 8003eda:	2300      	movne	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d116      	bne.n	8003f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f00:	f043 0220 	orr.w	r2, r3, #32
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e023      	b.n	8003f5c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	0c1b      	lsrs	r3, r3, #16
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d10d      	bne.n	8003f3a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	43da      	mvns	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	e00c      	b.n	8003f54 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	43da      	mvns	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	4013      	ands	r3, r2
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	bf0c      	ite	eq
 8003f4c:	2301      	moveq	r3, #1
 8003f4e:	2300      	movne	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d093      	beq.n	8003e82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f72:	e071      	b.n	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f82:	d123      	bne.n	8003fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f92:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb8:	f043 0204 	orr.w	r2, r3, #4
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e067      	b.n	800409c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd2:	d041      	beq.n	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd4:	f7ff f838 	bl	8003048 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d302      	bcc.n	8003fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d136      	bne.n	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	0c1b      	lsrs	r3, r3, #16
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d10c      	bne.n	800400e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	43da      	mvns	r2, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4013      	ands	r3, r2
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	bf14      	ite	ne
 8004006:	2301      	movne	r3, #1
 8004008:	2300      	moveq	r3, #0
 800400a:	b2db      	uxtb	r3, r3
 800400c:	e00b      	b.n	8004026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	43da      	mvns	r2, r3
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	4013      	ands	r3, r2
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	bf14      	ite	ne
 8004020:	2301      	movne	r3, #1
 8004022:	2300      	moveq	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d016      	beq.n	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004044:	f043 0220 	orr.w	r2, r3, #32
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e021      	b.n	800409c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	0c1b      	lsrs	r3, r3, #16
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b01      	cmp	r3, #1
 8004060:	d10c      	bne.n	800407c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	43da      	mvns	r2, r3
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	4013      	ands	r3, r2
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	bf14      	ite	ne
 8004074:	2301      	movne	r3, #1
 8004076:	2300      	moveq	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	e00b      	b.n	8004094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	43da      	mvns	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4013      	ands	r3, r2
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	bf14      	ite	ne
 800408e:	2301      	movne	r3, #1
 8004090:	2300      	moveq	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	f47f af6d 	bne.w	8003f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040b0:	e034      	b.n	800411c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f886 	bl	80041c4 <I2C_IsAcknowledgeFailed>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e034      	b.n	800412c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c8:	d028      	beq.n	800411c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ca:	f7fe ffbd 	bl	8003048 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d302      	bcc.n	80040e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d11d      	bne.n	800411c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ea:	2b80      	cmp	r3, #128	@ 0x80
 80040ec:	d016      	beq.n	800411c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004108:	f043 0220 	orr.w	r2, r3, #32
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e007      	b.n	800412c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004126:	2b80      	cmp	r3, #128	@ 0x80
 8004128:	d1c3      	bne.n	80040b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004140:	e034      	b.n	80041ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f83e 	bl	80041c4 <I2C_IsAcknowledgeFailed>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e034      	b.n	80041bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004158:	d028      	beq.n	80041ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415a:	f7fe ff75 	bl	8003048 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	429a      	cmp	r2, r3
 8004168:	d302      	bcc.n	8004170 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d11d      	bne.n	80041ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b04      	cmp	r3, #4
 800417c:	d016      	beq.n	80041ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004198:	f043 0220 	orr.w	r2, r3, #32
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e007      	b.n	80041bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d1c3      	bne.n	8004142 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041da:	d11b      	bne.n	8004214 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004200:	f043 0204 	orr.w	r2, r3, #4
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e000      	b.n	8004216 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr

08004220 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e272      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 8087 	beq.w	800434e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004240:	4b92      	ldr	r3, [pc, #584]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 030c 	and.w	r3, r3, #12
 8004248:	2b04      	cmp	r3, #4
 800424a:	d00c      	beq.n	8004266 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800424c:	4b8f      	ldr	r3, [pc, #572]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 030c 	and.w	r3, r3, #12
 8004254:	2b08      	cmp	r3, #8
 8004256:	d112      	bne.n	800427e <HAL_RCC_OscConfig+0x5e>
 8004258:	4b8c      	ldr	r3, [pc, #560]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004264:	d10b      	bne.n	800427e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004266:	4b89      	ldr	r3, [pc, #548]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d06c      	beq.n	800434c <HAL_RCC_OscConfig+0x12c>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d168      	bne.n	800434c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e24c      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004286:	d106      	bne.n	8004296 <HAL_RCC_OscConfig+0x76>
 8004288:	4b80      	ldr	r3, [pc, #512]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a7f      	ldr	r2, [pc, #508]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 800428e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	e02e      	b.n	80042f4 <HAL_RCC_OscConfig+0xd4>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10c      	bne.n	80042b8 <HAL_RCC_OscConfig+0x98>
 800429e:	4b7b      	ldr	r3, [pc, #492]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a7a      	ldr	r2, [pc, #488]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	4b78      	ldr	r3, [pc, #480]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a77      	ldr	r2, [pc, #476]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	e01d      	b.n	80042f4 <HAL_RCC_OscConfig+0xd4>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042c0:	d10c      	bne.n	80042dc <HAL_RCC_OscConfig+0xbc>
 80042c2:	4b72      	ldr	r3, [pc, #456]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a71      	ldr	r2, [pc, #452]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	4b6f      	ldr	r3, [pc, #444]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a6e      	ldr	r2, [pc, #440]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	e00b      	b.n	80042f4 <HAL_RCC_OscConfig+0xd4>
 80042dc:	4b6b      	ldr	r3, [pc, #428]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a6a      	ldr	r2, [pc, #424]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	4b68      	ldr	r3, [pc, #416]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a67      	ldr	r2, [pc, #412]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d013      	beq.n	8004324 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fc:	f7fe fea4 	bl	8003048 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004304:	f7fe fea0 	bl	8003048 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b64      	cmp	r3, #100	@ 0x64
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e200      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004316:	4b5d      	ldr	r3, [pc, #372]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0f0      	beq.n	8004304 <HAL_RCC_OscConfig+0xe4>
 8004322:	e014      	b.n	800434e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004324:	f7fe fe90 	bl	8003048 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800432c:	f7fe fe8c 	bl	8003048 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b64      	cmp	r3, #100	@ 0x64
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e1ec      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433e:	4b53      	ldr	r3, [pc, #332]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x10c>
 800434a:	e000      	b.n	800434e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d063      	beq.n	8004422 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800435a:	4b4c      	ldr	r3, [pc, #304]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00b      	beq.n	800437e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004366:	4b49      	ldr	r3, [pc, #292]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b08      	cmp	r3, #8
 8004370:	d11c      	bne.n	80043ac <HAL_RCC_OscConfig+0x18c>
 8004372:	4b46      	ldr	r3, [pc, #280]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d116      	bne.n	80043ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437e:	4b43      	ldr	r3, [pc, #268]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <HAL_RCC_OscConfig+0x176>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d001      	beq.n	8004396 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e1c0      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004396:	4b3d      	ldr	r3, [pc, #244]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	4939      	ldr	r1, [pc, #228]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043aa:	e03a      	b.n	8004422 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d020      	beq.n	80043f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b4:	4b36      	ldr	r3, [pc, #216]	@ (8004490 <HAL_RCC_OscConfig+0x270>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ba:	f7fe fe45 	bl	8003048 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c2:	f7fe fe41 	bl	8003048 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e1a1      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d4:	4b2d      	ldr	r3, [pc, #180]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e0:	4b2a      	ldr	r3, [pc, #168]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4927      	ldr	r1, [pc, #156]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	600b      	str	r3, [r1, #0]
 80043f4:	e015      	b.n	8004422 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043f6:	4b26      	ldr	r3, [pc, #152]	@ (8004490 <HAL_RCC_OscConfig+0x270>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fc:	f7fe fe24 	bl	8003048 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004404:	f7fe fe20 	bl	8003048 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e180      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004416:	4b1d      	ldr	r3, [pc, #116]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d03a      	beq.n	80044a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d019      	beq.n	800446a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004436:	4b17      	ldr	r3, [pc, #92]	@ (8004494 <HAL_RCC_OscConfig+0x274>)
 8004438:	2201      	movs	r2, #1
 800443a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800443c:	f7fe fe04 	bl	8003048 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004444:	f7fe fe00 	bl	8003048 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e160      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004456:	4b0d      	ldr	r3, [pc, #52]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 8004458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004462:	2001      	movs	r0, #1
 8004464:	f000 faba 	bl	80049dc <RCC_Delay>
 8004468:	e01c      	b.n	80044a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800446a:	4b0a      	ldr	r3, [pc, #40]	@ (8004494 <HAL_RCC_OscConfig+0x274>)
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004470:	f7fe fdea 	bl	8003048 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004476:	e00f      	b.n	8004498 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004478:	f7fe fde6 	bl	8003048 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d908      	bls.n	8004498 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e146      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000
 8004490:	42420000 	.word	0x42420000
 8004494:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004498:	4b92      	ldr	r3, [pc, #584]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 800449a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e9      	bne.n	8004478 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 80a6 	beq.w	80045fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b2:	2300      	movs	r3, #0
 80044b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b6:	4b8b      	ldr	r3, [pc, #556]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10d      	bne.n	80044de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c2:	4b88      	ldr	r3, [pc, #544]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	4a87      	ldr	r2, [pc, #540]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 80044c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044cc:	61d3      	str	r3, [r2, #28]
 80044ce:	4b85      	ldr	r3, [pc, #532]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d6:	60bb      	str	r3, [r7, #8]
 80044d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044da:	2301      	movs	r3, #1
 80044dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044de:	4b82      	ldr	r3, [pc, #520]	@ (80046e8 <HAL_RCC_OscConfig+0x4c8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d118      	bne.n	800451c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ea:	4b7f      	ldr	r3, [pc, #508]	@ (80046e8 <HAL_RCC_OscConfig+0x4c8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a7e      	ldr	r2, [pc, #504]	@ (80046e8 <HAL_RCC_OscConfig+0x4c8>)
 80044f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044f6:	f7fe fda7 	bl	8003048 <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044fe:	f7fe fda3 	bl	8003048 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b64      	cmp	r3, #100	@ 0x64
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e103      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004510:	4b75      	ldr	r3, [pc, #468]	@ (80046e8 <HAL_RCC_OscConfig+0x4c8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0f0      	beq.n	80044fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d106      	bne.n	8004532 <HAL_RCC_OscConfig+0x312>
 8004524:	4b6f      	ldr	r3, [pc, #444]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	4a6e      	ldr	r2, [pc, #440]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	6213      	str	r3, [r2, #32]
 8004530:	e02d      	b.n	800458e <HAL_RCC_OscConfig+0x36e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10c      	bne.n	8004554 <HAL_RCC_OscConfig+0x334>
 800453a:	4b6a      	ldr	r3, [pc, #424]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	4a69      	ldr	r2, [pc, #420]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004540:	f023 0301 	bic.w	r3, r3, #1
 8004544:	6213      	str	r3, [r2, #32]
 8004546:	4b67      	ldr	r3, [pc, #412]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	4a66      	ldr	r2, [pc, #408]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 800454c:	f023 0304 	bic.w	r3, r3, #4
 8004550:	6213      	str	r3, [r2, #32]
 8004552:	e01c      	b.n	800458e <HAL_RCC_OscConfig+0x36e>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	2b05      	cmp	r3, #5
 800455a:	d10c      	bne.n	8004576 <HAL_RCC_OscConfig+0x356>
 800455c:	4b61      	ldr	r3, [pc, #388]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	4a60      	ldr	r2, [pc, #384]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004562:	f043 0304 	orr.w	r3, r3, #4
 8004566:	6213      	str	r3, [r2, #32]
 8004568:	4b5e      	ldr	r3, [pc, #376]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	4a5d      	ldr	r2, [pc, #372]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	6213      	str	r3, [r2, #32]
 8004574:	e00b      	b.n	800458e <HAL_RCC_OscConfig+0x36e>
 8004576:	4b5b      	ldr	r3, [pc, #364]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	4a5a      	ldr	r2, [pc, #360]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 800457c:	f023 0301 	bic.w	r3, r3, #1
 8004580:	6213      	str	r3, [r2, #32]
 8004582:	4b58      	ldr	r3, [pc, #352]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	4a57      	ldr	r2, [pc, #348]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004588:	f023 0304 	bic.w	r3, r3, #4
 800458c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d015      	beq.n	80045c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004596:	f7fe fd57 	bl	8003048 <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459c:	e00a      	b.n	80045b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800459e:	f7fe fd53 	bl	8003048 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e0b1      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b4:	4b4b      	ldr	r3, [pc, #300]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0ee      	beq.n	800459e <HAL_RCC_OscConfig+0x37e>
 80045c0:	e014      	b.n	80045ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c2:	f7fe fd41 	bl	8003048 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c8:	e00a      	b.n	80045e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ca:	f7fe fd3d 	bl	8003048 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d8:	4293      	cmp	r3, r2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e09b      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e0:	4b40      	ldr	r3, [pc, #256]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1ee      	bne.n	80045ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045ec:	7dfb      	ldrb	r3, [r7, #23]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d105      	bne.n	80045fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f2:	4b3c      	ldr	r3, [pc, #240]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	4a3b      	ldr	r2, [pc, #236]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 80045f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 8087 	beq.w	8004716 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004608:	4b36      	ldr	r3, [pc, #216]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f003 030c 	and.w	r3, r3, #12
 8004610:	2b08      	cmp	r3, #8
 8004612:	d061      	beq.n	80046d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	2b02      	cmp	r3, #2
 800461a:	d146      	bne.n	80046aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461c:	4b33      	ldr	r3, [pc, #204]	@ (80046ec <HAL_RCC_OscConfig+0x4cc>)
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004622:	f7fe fd11 	bl	8003048 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800462a:	f7fe fd0d 	bl	8003048 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e06d      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800463c:	4b29      	ldr	r3, [pc, #164]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1f0      	bne.n	800462a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004650:	d108      	bne.n	8004664 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004652:	4b24      	ldr	r3, [pc, #144]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	4921      	ldr	r1, [pc, #132]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004660:	4313      	orrs	r3, r2
 8004662:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004664:	4b1f      	ldr	r3, [pc, #124]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a19      	ldr	r1, [r3, #32]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	430b      	orrs	r3, r1
 8004676:	491b      	ldr	r1, [pc, #108]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004678:	4313      	orrs	r3, r2
 800467a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800467c:	4b1b      	ldr	r3, [pc, #108]	@ (80046ec <HAL_RCC_OscConfig+0x4cc>)
 800467e:	2201      	movs	r2, #1
 8004680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004682:	f7fe fce1 	bl	8003048 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468a:	f7fe fcdd 	bl	8003048 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e03d      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800469c:	4b11      	ldr	r3, [pc, #68]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0f0      	beq.n	800468a <HAL_RCC_OscConfig+0x46a>
 80046a8:	e035      	b.n	8004716 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046aa:	4b10      	ldr	r3, [pc, #64]	@ (80046ec <HAL_RCC_OscConfig+0x4cc>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b0:	f7fe fcca 	bl	8003048 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b8:	f7fe fcc6 	bl	8003048 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e026      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046ca:	4b06      	ldr	r3, [pc, #24]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f0      	bne.n	80046b8 <HAL_RCC_OscConfig+0x498>
 80046d6:	e01e      	b.n	8004716 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d107      	bne.n	80046f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e019      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
 80046e4:	40021000 	.word	0x40021000
 80046e8:	40007000 	.word	0x40007000
 80046ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004720 <HAL_RCC_OscConfig+0x500>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	429a      	cmp	r2, r3
 8004702:	d106      	bne.n	8004712 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800470e:	429a      	cmp	r2, r3
 8004710:	d001      	beq.n	8004716 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40021000 	.word	0x40021000

08004724 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0d0      	b.n	80048da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004738:	4b6a      	ldr	r3, [pc, #424]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d910      	bls.n	8004768 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004746:	4b67      	ldr	r3, [pc, #412]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f023 0207 	bic.w	r2, r3, #7
 800474e:	4965      	ldr	r1, [pc, #404]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	4313      	orrs	r3, r2
 8004754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004756:	4b63      	ldr	r3, [pc, #396]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d001      	beq.n	8004768 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e0b8      	b.n	80048da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d020      	beq.n	80047b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004780:	4b59      	ldr	r3, [pc, #356]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	4a58      	ldr	r2, [pc, #352]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004786:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800478a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0308 	and.w	r3, r3, #8
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004798:	4b53      	ldr	r3, [pc, #332]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	4a52      	ldr	r2, [pc, #328]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 800479e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80047a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047a4:	4b50      	ldr	r3, [pc, #320]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	494d      	ldr	r1, [pc, #308]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d040      	beq.n	8004844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d107      	bne.n	80047da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ca:	4b47      	ldr	r3, [pc, #284]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d115      	bne.n	8004802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e07f      	b.n	80048da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d107      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e2:	4b41      	ldr	r3, [pc, #260]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d109      	bne.n	8004802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e073      	b.n	80048da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f2:	4b3d      	ldr	r3, [pc, #244]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e06b      	b.n	80048da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004802:	4b39      	ldr	r3, [pc, #228]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f023 0203 	bic.w	r2, r3, #3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	4936      	ldr	r1, [pc, #216]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	4313      	orrs	r3, r2
 8004812:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004814:	f7fe fc18 	bl	8003048 <HAL_GetTick>
 8004818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481a:	e00a      	b.n	8004832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800481c:	f7fe fc14 	bl	8003048 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e053      	b.n	80048da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004832:	4b2d      	ldr	r3, [pc, #180]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f003 020c 	and.w	r2, r3, #12
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	429a      	cmp	r2, r3
 8004842:	d1eb      	bne.n	800481c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004844:	4b27      	ldr	r3, [pc, #156]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d210      	bcs.n	8004874 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004852:	4b24      	ldr	r3, [pc, #144]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f023 0207 	bic.w	r2, r3, #7
 800485a:	4922      	ldr	r1, [pc, #136]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	4313      	orrs	r3, r2
 8004860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004862:	4b20      	ldr	r3, [pc, #128]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	429a      	cmp	r2, r3
 800486e:	d001      	beq.n	8004874 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e032      	b.n	80048da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d008      	beq.n	8004892 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004880:	4b19      	ldr	r3, [pc, #100]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	4916      	ldr	r1, [pc, #88]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 800488e:	4313      	orrs	r3, r2
 8004890:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b00      	cmp	r3, #0
 800489c:	d009      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800489e:	4b12      	ldr	r3, [pc, #72]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	490e      	ldr	r1, [pc, #56]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048b2:	f000 f821 	bl	80048f8 <HAL_RCC_GetSysClockFreq>
 80048b6:	4602      	mov	r2, r0
 80048b8:	4b0b      	ldr	r3, [pc, #44]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	091b      	lsrs	r3, r3, #4
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	490a      	ldr	r1, [pc, #40]	@ (80048ec <HAL_RCC_ClockConfig+0x1c8>)
 80048c4:	5ccb      	ldrb	r3, [r1, r3]
 80048c6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ca:	4a09      	ldr	r2, [pc, #36]	@ (80048f0 <HAL_RCC_ClockConfig+0x1cc>)
 80048cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048ce:	4b09      	ldr	r3, [pc, #36]	@ (80048f4 <HAL_RCC_ClockConfig+0x1d0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fe fb76 	bl	8002fc4 <HAL_InitTick>

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	40022000 	.word	0x40022000
 80048e8:	40021000 	.word	0x40021000
 80048ec:	0800837c 	.word	0x0800837c
 80048f0:	20000014 	.word	0x20000014
 80048f4:	20000018 	.word	0x20000018

080048f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	2300      	movs	r3, #0
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	2300      	movs	r3, #0
 800490c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800490e:	2300      	movs	r3, #0
 8004910:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004912:	4b1e      	ldr	r3, [pc, #120]	@ (800498c <HAL_RCC_GetSysClockFreq+0x94>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f003 030c 	and.w	r3, r3, #12
 800491e:	2b04      	cmp	r3, #4
 8004920:	d002      	beq.n	8004928 <HAL_RCC_GetSysClockFreq+0x30>
 8004922:	2b08      	cmp	r3, #8
 8004924:	d003      	beq.n	800492e <HAL_RCC_GetSysClockFreq+0x36>
 8004926:	e027      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004928:	4b19      	ldr	r3, [pc, #100]	@ (8004990 <HAL_RCC_GetSysClockFreq+0x98>)
 800492a:	613b      	str	r3, [r7, #16]
      break;
 800492c:	e027      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	0c9b      	lsrs	r3, r3, #18
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	4a17      	ldr	r2, [pc, #92]	@ (8004994 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004938:	5cd3      	ldrb	r3, [r2, r3]
 800493a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d010      	beq.n	8004968 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004946:	4b11      	ldr	r3, [pc, #68]	@ (800498c <HAL_RCC_GetSysClockFreq+0x94>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	0c5b      	lsrs	r3, r3, #17
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	4a11      	ldr	r2, [pc, #68]	@ (8004998 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004952:	5cd3      	ldrb	r3, [r2, r3]
 8004954:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a0d      	ldr	r2, [pc, #52]	@ (8004990 <HAL_RCC_GetSysClockFreq+0x98>)
 800495a:	fb03 f202 	mul.w	r2, r3, r2
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	fbb2 f3f3 	udiv	r3, r2, r3
 8004964:	617b      	str	r3, [r7, #20]
 8004966:	e004      	b.n	8004972 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a0c      	ldr	r2, [pc, #48]	@ (800499c <HAL_RCC_GetSysClockFreq+0xa4>)
 800496c:	fb02 f303 	mul.w	r3, r2, r3
 8004970:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	613b      	str	r3, [r7, #16]
      break;
 8004976:	e002      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004978:	4b05      	ldr	r3, [pc, #20]	@ (8004990 <HAL_RCC_GetSysClockFreq+0x98>)
 800497a:	613b      	str	r3, [r7, #16]
      break;
 800497c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800497e:	693b      	ldr	r3, [r7, #16]
}
 8004980:	4618      	mov	r0, r3
 8004982:	371c      	adds	r7, #28
 8004984:	46bd      	mov	sp, r7
 8004986:	bc80      	pop	{r7}
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	40021000 	.word	0x40021000
 8004990:	007a1200 	.word	0x007a1200
 8004994:	08008394 	.word	0x08008394
 8004998:	080083a4 	.word	0x080083a4
 800499c:	003d0900 	.word	0x003d0900

080049a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049a4:	4b02      	ldr	r3, [pc, #8]	@ (80049b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80049a6:	681b      	ldr	r3, [r3, #0]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr
 80049b0:	20000014 	.word	0x20000014

080049b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049b8:	f7ff fff2 	bl	80049a0 <HAL_RCC_GetHCLKFreq>
 80049bc:	4602      	mov	r2, r0
 80049be:	4b05      	ldr	r3, [pc, #20]	@ (80049d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	0a1b      	lsrs	r3, r3, #8
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	4903      	ldr	r1, [pc, #12]	@ (80049d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049ca:	5ccb      	ldrb	r3, [r1, r3]
 80049cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40021000 	.word	0x40021000
 80049d8:	0800838c 	.word	0x0800838c

080049dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004a10 <RCC_Delay+0x34>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a0a      	ldr	r2, [pc, #40]	@ (8004a14 <RCC_Delay+0x38>)
 80049ea:	fba2 2303 	umull	r2, r3, r2, r3
 80049ee:	0a5b      	lsrs	r3, r3, #9
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	fb02 f303 	mul.w	r3, r2, r3
 80049f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80049f8:	bf00      	nop
  }
  while (Delay --);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	1e5a      	subs	r2, r3, #1
 80049fe:	60fa      	str	r2, [r7, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1f9      	bne.n	80049f8 <RCC_Delay+0x1c>
}
 8004a04:	bf00      	nop
 8004a06:	bf00      	nop
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr
 8004a10:	20000014 	.word	0x20000014
 8004a14:	10624dd3 	.word	0x10624dd3

08004a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e041      	b.n	8004aae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fe f9e0 	bl	8002e04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3304      	adds	r3, #4
 8004a54:	4619      	mov	r1, r3
 8004a56:	4610      	mov	r0, r2
 8004a58:	f000 fbe2 	bl	8005220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b082      	sub	sp, #8
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e041      	b.n	8004b4c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d106      	bne.n	8004ae2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f839 	bl	8004b54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3304      	adds	r3, #4
 8004af2:	4619      	mov	r1, r3
 8004af4:	4610      	mov	r0, r2
 8004af6:	f000 fb93 	bl	8005220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr
	...

08004b68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <HAL_TIM_PWM_Start+0x24>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	e022      	b.n	8004bd2 <HAL_TIM_PWM_Start+0x6a>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d109      	bne.n	8004ba6 <HAL_TIM_PWM_Start+0x3e>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	bf14      	ite	ne
 8004b9e:	2301      	movne	r3, #1
 8004ba0:	2300      	moveq	r3, #0
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	e015      	b.n	8004bd2 <HAL_TIM_PWM_Start+0x6a>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d109      	bne.n	8004bc0 <HAL_TIM_PWM_Start+0x58>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	bf14      	ite	ne
 8004bb8:	2301      	movne	r3, #1
 8004bba:	2300      	moveq	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	e008      	b.n	8004bd2 <HAL_TIM_PWM_Start+0x6a>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	bf14      	ite	ne
 8004bcc:	2301      	movne	r3, #1
 8004bce:	2300      	moveq	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e05e      	b.n	8004c98 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d104      	bne.n	8004bea <HAL_TIM_PWM_Start+0x82>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004be8:	e013      	b.n	8004c12 <HAL_TIM_PWM_Start+0xaa>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d104      	bne.n	8004bfa <HAL_TIM_PWM_Start+0x92>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bf8:	e00b      	b.n	8004c12 <HAL_TIM_PWM_Start+0xaa>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d104      	bne.n	8004c0a <HAL_TIM_PWM_Start+0xa2>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c08:	e003      	b.n	8004c12 <HAL_TIM_PWM_Start+0xaa>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2201      	movs	r2, #1
 8004c18:	6839      	ldr	r1, [r7, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fd8c 	bl	8005738 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a1e      	ldr	r2, [pc, #120]	@ (8004ca0 <HAL_TIM_PWM_Start+0x138>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d107      	bne.n	8004c3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a18      	ldr	r2, [pc, #96]	@ (8004ca0 <HAL_TIM_PWM_Start+0x138>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00e      	beq.n	8004c62 <HAL_TIM_PWM_Start+0xfa>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c4c:	d009      	beq.n	8004c62 <HAL_TIM_PWM_Start+0xfa>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a14      	ldr	r2, [pc, #80]	@ (8004ca4 <HAL_TIM_PWM_Start+0x13c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d004      	beq.n	8004c62 <HAL_TIM_PWM_Start+0xfa>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a12      	ldr	r2, [pc, #72]	@ (8004ca8 <HAL_TIM_PWM_Start+0x140>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d111      	bne.n	8004c86 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2b06      	cmp	r3, #6
 8004c72:	d010      	beq.n	8004c96 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c84:	e007      	b.n	8004c96 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 0201 	orr.w	r2, r2, #1
 8004c94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	40012c00 	.word	0x40012c00
 8004ca4:	40000400 	.word	0x40000400
 8004ca8:	40000800 	.word	0x40000800

08004cac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e093      	b.n	8004de8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d106      	bne.n	8004cda <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7fe f8b3 	bl	8002e40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2202      	movs	r2, #2
 8004cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6812      	ldr	r2, [r2, #0]
 8004cec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cf0:	f023 0307 	bic.w	r3, r3, #7
 8004cf4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4610      	mov	r0, r2
 8004d02:	f000 fa8d 	bl	8005220 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d2e:	f023 0303 	bic.w	r3, r3, #3
 8004d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	021b      	lsls	r3, r3, #8
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004d4c:	f023 030c 	bic.w	r3, r3, #12
 8004d50:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	021b      	lsls	r3, r3, #8
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	011a      	lsls	r2, r3, #4
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	031b      	lsls	r3, r3, #12
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004d8a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	4313      	orrs	r3, r2
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e00:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e08:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e10:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004e18:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d110      	bne.n	8004e42 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d102      	bne.n	8004e2c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e26:	7b7b      	ldrb	r3, [r7, #13]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d001      	beq.n	8004e30 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e069      	b.n	8004f04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e40:	e031      	b.n	8004ea6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d110      	bne.n	8004e6a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e48:	7bbb      	ldrb	r3, [r7, #14]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d102      	bne.n	8004e54 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e4e:	7b3b      	ldrb	r3, [r7, #12]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d001      	beq.n	8004e58 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e055      	b.n	8004f04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e68:	e01d      	b.n	8004ea6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e6a:	7bfb      	ldrb	r3, [r7, #15]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d108      	bne.n	8004e82 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e70:	7bbb      	ldrb	r3, [r7, #14]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d105      	bne.n	8004e82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e76:	7b7b      	ldrb	r3, [r7, #13]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d102      	bne.n	8004e82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e7c:	7b3b      	ldrb	r3, [r7, #12]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d001      	beq.n	8004e86 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e03e      	b.n	8004f04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2202      	movs	r2, #2
 8004e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2202      	movs	r2, #2
 8004e92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <HAL_TIM_Encoder_Start+0xc4>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d008      	beq.n	8004ec4 <HAL_TIM_Encoder_Start+0xd4>
 8004eb2:	e00f      	b.n	8004ed4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	2100      	movs	r1, #0
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 fc3b 	bl	8005738 <TIM_CCxChannelCmd>
      break;
 8004ec2:	e016      	b.n	8004ef2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	2104      	movs	r1, #4
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 fc33 	bl	8005738 <TIM_CCxChannelCmd>
      break;
 8004ed2:	e00e      	b.n	8004ef2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	2100      	movs	r1, #0
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 fc2b 	bl	8005738 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	2104      	movs	r1, #4
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fc24 	bl	8005738 <TIM_CCxChannelCmd>
      break;
 8004ef0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f042 0201 	orr.w	r2, r2, #1
 8004f00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f26:	2302      	movs	r3, #2
 8004f28:	e0ae      	b.n	8005088 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b0c      	cmp	r3, #12
 8004f36:	f200 809f 	bhi.w	8005078 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004f75 	.word	0x08004f75
 8004f44:	08005079 	.word	0x08005079
 8004f48:	08005079 	.word	0x08005079
 8004f4c:	08005079 	.word	0x08005079
 8004f50:	08004fb5 	.word	0x08004fb5
 8004f54:	08005079 	.word	0x08005079
 8004f58:	08005079 	.word	0x08005079
 8004f5c:	08005079 	.word	0x08005079
 8004f60:	08004ff7 	.word	0x08004ff7
 8004f64:	08005079 	.word	0x08005079
 8004f68:	08005079 	.word	0x08005079
 8004f6c:	08005079 	.word	0x08005079
 8004f70:	08005037 	.word	0x08005037
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68b9      	ldr	r1, [r7, #8]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 f9be 	bl	80052fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0208 	orr.w	r2, r2, #8
 8004f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0204 	bic.w	r2, r2, #4
 8004f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6999      	ldr	r1, [r3, #24]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	619a      	str	r2, [r3, #24]
      break;
 8004fb2:	e064      	b.n	800507e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68b9      	ldr	r1, [r7, #8]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fa04 	bl	80053c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6999      	ldr	r1, [r3, #24]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	021a      	lsls	r2, r3, #8
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	619a      	str	r2, [r3, #24]
      break;
 8004ff4:	e043      	b.n	800507e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68b9      	ldr	r1, [r7, #8]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 fa4d 	bl	800549c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0208 	orr.w	r2, r2, #8
 8005010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69da      	ldr	r2, [r3, #28]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0204 	bic.w	r2, r2, #4
 8005020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69d9      	ldr	r1, [r3, #28]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	61da      	str	r2, [r3, #28]
      break;
 8005034:	e023      	b.n	800507e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	4618      	mov	r0, r3
 800503e:	f000 fa97 	bl	8005570 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69da      	ldr	r2, [r3, #28]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69d9      	ldr	r1, [r3, #28]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	021a      	lsls	r2, r3, #8
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	61da      	str	r2, [r3, #28]
      break;
 8005076:	e002      	b.n	800507e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	75fb      	strb	r3, [r7, #23]
      break;
 800507c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005086:	7dfb      	ldrb	r3, [r7, #23]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d101      	bne.n	80050ac <HAL_TIM_ConfigClockSource+0x1c>
 80050a8:	2302      	movs	r3, #2
 80050aa:	e0b4      	b.n	8005216 <HAL_TIM_ConfigClockSource+0x186>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80050ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050e4:	d03e      	beq.n	8005164 <HAL_TIM_ConfigClockSource+0xd4>
 80050e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050ea:	f200 8087 	bhi.w	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 80050ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050f2:	f000 8086 	beq.w	8005202 <HAL_TIM_ConfigClockSource+0x172>
 80050f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050fa:	d87f      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 80050fc:	2b70      	cmp	r3, #112	@ 0x70
 80050fe:	d01a      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0xa6>
 8005100:	2b70      	cmp	r3, #112	@ 0x70
 8005102:	d87b      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 8005104:	2b60      	cmp	r3, #96	@ 0x60
 8005106:	d050      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x11a>
 8005108:	2b60      	cmp	r3, #96	@ 0x60
 800510a:	d877      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 800510c:	2b50      	cmp	r3, #80	@ 0x50
 800510e:	d03c      	beq.n	800518a <HAL_TIM_ConfigClockSource+0xfa>
 8005110:	2b50      	cmp	r3, #80	@ 0x50
 8005112:	d873      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 8005114:	2b40      	cmp	r3, #64	@ 0x40
 8005116:	d058      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0x13a>
 8005118:	2b40      	cmp	r3, #64	@ 0x40
 800511a:	d86f      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 800511c:	2b30      	cmp	r3, #48	@ 0x30
 800511e:	d064      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x15a>
 8005120:	2b30      	cmp	r3, #48	@ 0x30
 8005122:	d86b      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 8005124:	2b20      	cmp	r3, #32
 8005126:	d060      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x15a>
 8005128:	2b20      	cmp	r3, #32
 800512a:	d867      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 800512c:	2b00      	cmp	r3, #0
 800512e:	d05c      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x15a>
 8005130:	2b10      	cmp	r3, #16
 8005132:	d05a      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x15a>
 8005134:	e062      	b.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005146:	f000 fad8 	bl	80056fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005158:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	609a      	str	r2, [r3, #8]
      break;
 8005162:	e04f      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005174:	f000 fac1 	bl	80056fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005186:	609a      	str	r2, [r3, #8]
      break;
 8005188:	e03c      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005196:	461a      	mov	r2, r3
 8005198:	f000 fa38 	bl	800560c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2150      	movs	r1, #80	@ 0x50
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fa8f 	bl	80056c6 <TIM_ITRx_SetConfig>
      break;
 80051a8:	e02c      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051b6:	461a      	mov	r2, r3
 80051b8:	f000 fa56 	bl	8005668 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2160      	movs	r1, #96	@ 0x60
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fa7f 	bl	80056c6 <TIM_ITRx_SetConfig>
      break;
 80051c8:	e01c      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051d6:	461a      	mov	r2, r3
 80051d8:	f000 fa18 	bl	800560c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2140      	movs	r1, #64	@ 0x40
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fa6f 	bl	80056c6 <TIM_ITRx_SetConfig>
      break;
 80051e8:	e00c      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4619      	mov	r1, r3
 80051f4:	4610      	mov	r0, r2
 80051f6:	f000 fa66 	bl	80056c6 <TIM_ITRx_SetConfig>
      break;
 80051fa:	e003      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005200:	e000      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005202:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005214:	7bfb      	ldrb	r3, [r7, #15]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a2f      	ldr	r2, [pc, #188]	@ (80052f0 <TIM_Base_SetConfig+0xd0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00b      	beq.n	8005250 <TIM_Base_SetConfig+0x30>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800523e:	d007      	beq.n	8005250 <TIM_Base_SetConfig+0x30>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a2c      	ldr	r2, [pc, #176]	@ (80052f4 <TIM_Base_SetConfig+0xd4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d003      	beq.n	8005250 <TIM_Base_SetConfig+0x30>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a2b      	ldr	r2, [pc, #172]	@ (80052f8 <TIM_Base_SetConfig+0xd8>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d108      	bne.n	8005262 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a22      	ldr	r2, [pc, #136]	@ (80052f0 <TIM_Base_SetConfig+0xd0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00b      	beq.n	8005282 <TIM_Base_SetConfig+0x62>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005270:	d007      	beq.n	8005282 <TIM_Base_SetConfig+0x62>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a1f      	ldr	r2, [pc, #124]	@ (80052f4 <TIM_Base_SetConfig+0xd4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d003      	beq.n	8005282 <TIM_Base_SetConfig+0x62>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a1e      	ldr	r2, [pc, #120]	@ (80052f8 <TIM_Base_SetConfig+0xd8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d108      	bne.n	8005294 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a0d      	ldr	r2, [pc, #52]	@ (80052f0 <TIM_Base_SetConfig+0xd0>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d103      	bne.n	80052c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d005      	beq.n	80052e6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f023 0201 	bic.w	r2, r3, #1
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	611a      	str	r2, [r3, #16]
  }
}
 80052e6:	bf00      	nop
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bc80      	pop	{r7}
 80052ee:	4770      	bx	lr
 80052f0:	40012c00 	.word	0x40012c00
 80052f4:	40000400 	.word	0x40000400
 80052f8:	40000800 	.word	0x40000800

080052fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	f023 0201 	bic.w	r2, r3, #1
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800532a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0303 	bic.w	r3, r3, #3
 8005332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f023 0302 	bic.w	r3, r3, #2
 8005344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a1c      	ldr	r2, [pc, #112]	@ (80053c4 <TIM_OC1_SetConfig+0xc8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d10c      	bne.n	8005372 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f023 0308 	bic.w	r3, r3, #8
 800535e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f023 0304 	bic.w	r3, r3, #4
 8005370:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a13      	ldr	r2, [pc, #76]	@ (80053c4 <TIM_OC1_SetConfig+0xc8>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d111      	bne.n	800539e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	4313      	orrs	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	621a      	str	r2, [r3, #32]
}
 80053b8:	bf00      	nop
 80053ba:	371c      	adds	r7, #28
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40012c00 	.word	0x40012c00

080053c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	f023 0210 	bic.w	r2, r3, #16
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	021b      	lsls	r3, r3, #8
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4313      	orrs	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f023 0320 	bic.w	r3, r3, #32
 8005412:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	011b      	lsls	r3, r3, #4
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a1d      	ldr	r2, [pc, #116]	@ (8005498 <TIM_OC2_SetConfig+0xd0>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d10d      	bne.n	8005444 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800542e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	4313      	orrs	r3, r2
 800543a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005442:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a14      	ldr	r2, [pc, #80]	@ (8005498 <TIM_OC2_SetConfig+0xd0>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d113      	bne.n	8005474 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005452:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800545a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	4313      	orrs	r3, r2
 8005466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	4313      	orrs	r3, r2
 8005472:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	621a      	str	r2, [r3, #32]
}
 800548e:	bf00      	nop
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	bc80      	pop	{r7}
 8005496:	4770      	bx	lr
 8005498:	40012c00 	.word	0x40012c00

0800549c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 0303 	bic.w	r3, r3, #3
 80054d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	021b      	lsls	r3, r3, #8
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a1d      	ldr	r2, [pc, #116]	@ (800556c <TIM_OC3_SetConfig+0xd0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d10d      	bne.n	8005516 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005500:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	021b      	lsls	r3, r3, #8
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	4313      	orrs	r3, r2
 800550c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a14      	ldr	r2, [pc, #80]	@ (800556c <TIM_OC3_SetConfig+0xd0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d113      	bne.n	8005546 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800552c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	011b      	lsls	r3, r3, #4
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	4313      	orrs	r3, r2
 8005538:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	011b      	lsls	r3, r3, #4
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	4313      	orrs	r3, r2
 8005544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	621a      	str	r2, [r3, #32]
}
 8005560:	bf00      	nop
 8005562:	371c      	adds	r7, #28
 8005564:	46bd      	mov	sp, r7
 8005566:	bc80      	pop	{r7}
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40012c00 	.word	0x40012c00

08005570 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800559e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	021b      	lsls	r3, r3, #8
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	031b      	lsls	r3, r3, #12
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a0f      	ldr	r2, [pc, #60]	@ (8005608 <TIM_OC4_SetConfig+0x98>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d109      	bne.n	80055e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	019b      	lsls	r3, r3, #6
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	621a      	str	r2, [r3, #32]
}
 80055fe:	bf00      	nop
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	bc80      	pop	{r7}
 8005606:	4770      	bx	lr
 8005608:	40012c00 	.word	0x40012c00

0800560c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	f023 0201 	bic.w	r2, r3, #1
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f023 030a 	bic.w	r3, r3, #10
 8005648:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	4313      	orrs	r3, r2
 8005650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	621a      	str	r2, [r3, #32]
}
 800565e:	bf00      	nop
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	bc80      	pop	{r7}
 8005666:	4770      	bx	lr

08005668 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	f023 0210 	bic.w	r2, r3, #16
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	031b      	lsls	r3, r3, #12
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	4313      	orrs	r3, r2
 800569c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80056a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	011b      	lsls	r3, r3, #4
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	621a      	str	r2, [r3, #32]
}
 80056bc:	bf00      	nop
 80056be:	371c      	adds	r7, #28
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bc80      	pop	{r7}
 80056c4:	4770      	bx	lr

080056c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b085      	sub	sp, #20
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	f043 0307 	orr.w	r3, r3, #7
 80056e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	609a      	str	r2, [r3, #8]
}
 80056f0:	bf00      	nop
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bc80      	pop	{r7}
 80056f8:	4770      	bx	lr

080056fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b087      	sub	sp, #28
 80056fe:	af00      	add	r7, sp, #0
 8005700:	60f8      	str	r0, [r7, #12]
 8005702:	60b9      	str	r1, [r7, #8]
 8005704:	607a      	str	r2, [r7, #4]
 8005706:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005714:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	021a      	lsls	r2, r3, #8
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	431a      	orrs	r2, r3
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	4313      	orrs	r3, r2
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	609a      	str	r2, [r3, #8]
}
 800572e:	bf00      	nop
 8005730:	371c      	adds	r7, #28
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr

08005738 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f003 031f 	and.w	r3, r3, #31
 800574a:	2201      	movs	r2, #1
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a1a      	ldr	r2, [r3, #32]
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	43db      	mvns	r3, r3
 800575a:	401a      	ands	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a1a      	ldr	r2, [r3, #32]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f003 031f 	and.w	r3, r3, #31
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	fa01 f303 	lsl.w	r3, r1, r3
 8005770:	431a      	orrs	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	621a      	str	r2, [r3, #32]
}
 8005776:	bf00      	nop
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	bc80      	pop	{r7}
 800577e:	4770      	bx	lr

08005780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005794:	2302      	movs	r3, #2
 8005796:	e046      	b.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a16      	ldr	r2, [pc, #88]	@ (8005830 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00e      	beq.n	80057fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057e4:	d009      	beq.n	80057fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a12      	ldr	r2, [pc, #72]	@ (8005834 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d004      	beq.n	80057fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a10      	ldr	r2, [pc, #64]	@ (8005838 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d10c      	bne.n	8005814 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005800:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	4313      	orrs	r3, r2
 800580a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	bc80      	pop	{r7}
 800582e:	4770      	bx	lr
 8005830:	40012c00 	.word	0x40012c00
 8005834:	40000400 	.word	0x40000400
 8005838:	40000800 	.word	0x40000800

0800583c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005850:	2b01      	cmp	r3, #1
 8005852:	d101      	bne.n	8005858 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005854:	2302      	movs	r3, #2
 8005856:	e03d      	b.n	80058d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	4313      	orrs	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	4313      	orrs	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	bc80      	pop	{r7}
 80058dc:	4770      	bx	lr
	...

080058e0 <rand>:
 80058e0:	4b16      	ldr	r3, [pc, #88]	@ (800593c <rand+0x5c>)
 80058e2:	b510      	push	{r4, lr}
 80058e4:	681c      	ldr	r4, [r3, #0]
 80058e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80058e8:	b9b3      	cbnz	r3, 8005918 <rand+0x38>
 80058ea:	2018      	movs	r0, #24
 80058ec:	f000 fa4e 	bl	8005d8c <malloc>
 80058f0:	4602      	mov	r2, r0
 80058f2:	6320      	str	r0, [r4, #48]	@ 0x30
 80058f4:	b920      	cbnz	r0, 8005900 <rand+0x20>
 80058f6:	2152      	movs	r1, #82	@ 0x52
 80058f8:	4b11      	ldr	r3, [pc, #68]	@ (8005940 <rand+0x60>)
 80058fa:	4812      	ldr	r0, [pc, #72]	@ (8005944 <rand+0x64>)
 80058fc:	f000 f9e0 	bl	8005cc0 <__assert_func>
 8005900:	4911      	ldr	r1, [pc, #68]	@ (8005948 <rand+0x68>)
 8005902:	4b12      	ldr	r3, [pc, #72]	@ (800594c <rand+0x6c>)
 8005904:	e9c0 1300 	strd	r1, r3, [r0]
 8005908:	4b11      	ldr	r3, [pc, #68]	@ (8005950 <rand+0x70>)
 800590a:	2100      	movs	r1, #0
 800590c:	6083      	str	r3, [r0, #8]
 800590e:	230b      	movs	r3, #11
 8005910:	8183      	strh	r3, [r0, #12]
 8005912:	2001      	movs	r0, #1
 8005914:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005918:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800591a:	480e      	ldr	r0, [pc, #56]	@ (8005954 <rand+0x74>)
 800591c:	690b      	ldr	r3, [r1, #16]
 800591e:	694c      	ldr	r4, [r1, #20]
 8005920:	4358      	muls	r0, r3
 8005922:	4a0d      	ldr	r2, [pc, #52]	@ (8005958 <rand+0x78>)
 8005924:	fb02 0004 	mla	r0, r2, r4, r0
 8005928:	fba3 3202 	umull	r3, r2, r3, r2
 800592c:	3301      	adds	r3, #1
 800592e:	eb40 0002 	adc.w	r0, r0, r2
 8005932:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005936:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800593a:	bd10      	pop	{r4, pc}
 800593c:	2000002c 	.word	0x2000002c
 8005940:	080083a6 	.word	0x080083a6
 8005944:	080083bd 	.word	0x080083bd
 8005948:	abcd330e 	.word	0xabcd330e
 800594c:	e66d1234 	.word	0xe66d1234
 8005950:	0005deec 	.word	0x0005deec
 8005954:	5851f42d 	.word	0x5851f42d
 8005958:	4c957f2d 	.word	0x4c957f2d

0800595c <std>:
 800595c:	2300      	movs	r3, #0
 800595e:	b510      	push	{r4, lr}
 8005960:	4604      	mov	r4, r0
 8005962:	e9c0 3300 	strd	r3, r3, [r0]
 8005966:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800596a:	6083      	str	r3, [r0, #8]
 800596c:	8181      	strh	r1, [r0, #12]
 800596e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005970:	81c2      	strh	r2, [r0, #14]
 8005972:	6183      	str	r3, [r0, #24]
 8005974:	4619      	mov	r1, r3
 8005976:	2208      	movs	r2, #8
 8005978:	305c      	adds	r0, #92	@ 0x5c
 800597a:	f000 f916 	bl	8005baa <memset>
 800597e:	4b0d      	ldr	r3, [pc, #52]	@ (80059b4 <std+0x58>)
 8005980:	6224      	str	r4, [r4, #32]
 8005982:	6263      	str	r3, [r4, #36]	@ 0x24
 8005984:	4b0c      	ldr	r3, [pc, #48]	@ (80059b8 <std+0x5c>)
 8005986:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005988:	4b0c      	ldr	r3, [pc, #48]	@ (80059bc <std+0x60>)
 800598a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800598c:	4b0c      	ldr	r3, [pc, #48]	@ (80059c0 <std+0x64>)
 800598e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005990:	4b0c      	ldr	r3, [pc, #48]	@ (80059c4 <std+0x68>)
 8005992:	429c      	cmp	r4, r3
 8005994:	d006      	beq.n	80059a4 <std+0x48>
 8005996:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800599a:	4294      	cmp	r4, r2
 800599c:	d002      	beq.n	80059a4 <std+0x48>
 800599e:	33d0      	adds	r3, #208	@ 0xd0
 80059a0:	429c      	cmp	r4, r3
 80059a2:	d105      	bne.n	80059b0 <std+0x54>
 80059a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80059a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059ac:	f000 b976 	b.w	8005c9c <__retarget_lock_init_recursive>
 80059b0:	bd10      	pop	{r4, pc}
 80059b2:	bf00      	nop
 80059b4:	08005b25 	.word	0x08005b25
 80059b8:	08005b47 	.word	0x08005b47
 80059bc:	08005b7f 	.word	0x08005b7f
 80059c0:	08005ba3 	.word	0x08005ba3
 80059c4:	20003f84 	.word	0x20003f84

080059c8 <stdio_exit_handler>:
 80059c8:	4a02      	ldr	r2, [pc, #8]	@ (80059d4 <stdio_exit_handler+0xc>)
 80059ca:	4903      	ldr	r1, [pc, #12]	@ (80059d8 <stdio_exit_handler+0x10>)
 80059cc:	4803      	ldr	r0, [pc, #12]	@ (80059dc <stdio_exit_handler+0x14>)
 80059ce:	f000 b869 	b.w	8005aa4 <_fwalk_sglue>
 80059d2:	bf00      	nop
 80059d4:	20000020 	.word	0x20000020
 80059d8:	080065c9 	.word	0x080065c9
 80059dc:	20000030 	.word	0x20000030

080059e0 <cleanup_stdio>:
 80059e0:	6841      	ldr	r1, [r0, #4]
 80059e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005a14 <cleanup_stdio+0x34>)
 80059e4:	b510      	push	{r4, lr}
 80059e6:	4299      	cmp	r1, r3
 80059e8:	4604      	mov	r4, r0
 80059ea:	d001      	beq.n	80059f0 <cleanup_stdio+0x10>
 80059ec:	f000 fdec 	bl	80065c8 <_fflush_r>
 80059f0:	68a1      	ldr	r1, [r4, #8]
 80059f2:	4b09      	ldr	r3, [pc, #36]	@ (8005a18 <cleanup_stdio+0x38>)
 80059f4:	4299      	cmp	r1, r3
 80059f6:	d002      	beq.n	80059fe <cleanup_stdio+0x1e>
 80059f8:	4620      	mov	r0, r4
 80059fa:	f000 fde5 	bl	80065c8 <_fflush_r>
 80059fe:	68e1      	ldr	r1, [r4, #12]
 8005a00:	4b06      	ldr	r3, [pc, #24]	@ (8005a1c <cleanup_stdio+0x3c>)
 8005a02:	4299      	cmp	r1, r3
 8005a04:	d004      	beq.n	8005a10 <cleanup_stdio+0x30>
 8005a06:	4620      	mov	r0, r4
 8005a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a0c:	f000 bddc 	b.w	80065c8 <_fflush_r>
 8005a10:	bd10      	pop	{r4, pc}
 8005a12:	bf00      	nop
 8005a14:	20003f84 	.word	0x20003f84
 8005a18:	20003fec 	.word	0x20003fec
 8005a1c:	20004054 	.word	0x20004054

08005a20 <global_stdio_init.part.0>:
 8005a20:	b510      	push	{r4, lr}
 8005a22:	4b0b      	ldr	r3, [pc, #44]	@ (8005a50 <global_stdio_init.part.0+0x30>)
 8005a24:	4c0b      	ldr	r4, [pc, #44]	@ (8005a54 <global_stdio_init.part.0+0x34>)
 8005a26:	4a0c      	ldr	r2, [pc, #48]	@ (8005a58 <global_stdio_init.part.0+0x38>)
 8005a28:	4620      	mov	r0, r4
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	2104      	movs	r1, #4
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f7ff ff94 	bl	800595c <std>
 8005a34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a38:	2201      	movs	r2, #1
 8005a3a:	2109      	movs	r1, #9
 8005a3c:	f7ff ff8e 	bl	800595c <std>
 8005a40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a44:	2202      	movs	r2, #2
 8005a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a4a:	2112      	movs	r1, #18
 8005a4c:	f7ff bf86 	b.w	800595c <std>
 8005a50:	200040bc 	.word	0x200040bc
 8005a54:	20003f84 	.word	0x20003f84
 8005a58:	080059c9 	.word	0x080059c9

08005a5c <__sfp_lock_acquire>:
 8005a5c:	4801      	ldr	r0, [pc, #4]	@ (8005a64 <__sfp_lock_acquire+0x8>)
 8005a5e:	f000 b91e 	b.w	8005c9e <__retarget_lock_acquire_recursive>
 8005a62:	bf00      	nop
 8005a64:	200040c5 	.word	0x200040c5

08005a68 <__sfp_lock_release>:
 8005a68:	4801      	ldr	r0, [pc, #4]	@ (8005a70 <__sfp_lock_release+0x8>)
 8005a6a:	f000 b919 	b.w	8005ca0 <__retarget_lock_release_recursive>
 8005a6e:	bf00      	nop
 8005a70:	200040c5 	.word	0x200040c5

08005a74 <__sinit>:
 8005a74:	b510      	push	{r4, lr}
 8005a76:	4604      	mov	r4, r0
 8005a78:	f7ff fff0 	bl	8005a5c <__sfp_lock_acquire>
 8005a7c:	6a23      	ldr	r3, [r4, #32]
 8005a7e:	b11b      	cbz	r3, 8005a88 <__sinit+0x14>
 8005a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a84:	f7ff bff0 	b.w	8005a68 <__sfp_lock_release>
 8005a88:	4b04      	ldr	r3, [pc, #16]	@ (8005a9c <__sinit+0x28>)
 8005a8a:	6223      	str	r3, [r4, #32]
 8005a8c:	4b04      	ldr	r3, [pc, #16]	@ (8005aa0 <__sinit+0x2c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1f5      	bne.n	8005a80 <__sinit+0xc>
 8005a94:	f7ff ffc4 	bl	8005a20 <global_stdio_init.part.0>
 8005a98:	e7f2      	b.n	8005a80 <__sinit+0xc>
 8005a9a:	bf00      	nop
 8005a9c:	080059e1 	.word	0x080059e1
 8005aa0:	200040bc 	.word	0x200040bc

08005aa4 <_fwalk_sglue>:
 8005aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aa8:	4607      	mov	r7, r0
 8005aaa:	4688      	mov	r8, r1
 8005aac:	4614      	mov	r4, r2
 8005aae:	2600      	movs	r6, #0
 8005ab0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ab4:	f1b9 0901 	subs.w	r9, r9, #1
 8005ab8:	d505      	bpl.n	8005ac6 <_fwalk_sglue+0x22>
 8005aba:	6824      	ldr	r4, [r4, #0]
 8005abc:	2c00      	cmp	r4, #0
 8005abe:	d1f7      	bne.n	8005ab0 <_fwalk_sglue+0xc>
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ac6:	89ab      	ldrh	r3, [r5, #12]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d907      	bls.n	8005adc <_fwalk_sglue+0x38>
 8005acc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	d003      	beq.n	8005adc <_fwalk_sglue+0x38>
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	47c0      	blx	r8
 8005ada:	4306      	orrs	r6, r0
 8005adc:	3568      	adds	r5, #104	@ 0x68
 8005ade:	e7e9      	b.n	8005ab4 <_fwalk_sglue+0x10>

08005ae0 <siprintf>:
 8005ae0:	b40e      	push	{r1, r2, r3}
 8005ae2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005ae6:	b510      	push	{r4, lr}
 8005ae8:	2400      	movs	r4, #0
 8005aea:	b09d      	sub	sp, #116	@ 0x74
 8005aec:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005aee:	9002      	str	r0, [sp, #8]
 8005af0:	9006      	str	r0, [sp, #24]
 8005af2:	9107      	str	r1, [sp, #28]
 8005af4:	9104      	str	r1, [sp, #16]
 8005af6:	4809      	ldr	r0, [pc, #36]	@ (8005b1c <siprintf+0x3c>)
 8005af8:	4909      	ldr	r1, [pc, #36]	@ (8005b20 <siprintf+0x40>)
 8005afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005afe:	9105      	str	r1, [sp, #20]
 8005b00:	6800      	ldr	r0, [r0, #0]
 8005b02:	a902      	add	r1, sp, #8
 8005b04:	9301      	str	r3, [sp, #4]
 8005b06:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005b08:	f000 fa52 	bl	8005fb0 <_svfiprintf_r>
 8005b0c:	9b02      	ldr	r3, [sp, #8]
 8005b0e:	701c      	strb	r4, [r3, #0]
 8005b10:	b01d      	add	sp, #116	@ 0x74
 8005b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b16:	b003      	add	sp, #12
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	2000002c 	.word	0x2000002c
 8005b20:	ffff0208 	.word	0xffff0208

08005b24 <__sread>:
 8005b24:	b510      	push	{r4, lr}
 8005b26:	460c      	mov	r4, r1
 8005b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b2c:	f000 f868 	bl	8005c00 <_read_r>
 8005b30:	2800      	cmp	r0, #0
 8005b32:	bfab      	itete	ge
 8005b34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b36:	89a3      	ldrhlt	r3, [r4, #12]
 8005b38:	181b      	addge	r3, r3, r0
 8005b3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b3e:	bfac      	ite	ge
 8005b40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b42:	81a3      	strhlt	r3, [r4, #12]
 8005b44:	bd10      	pop	{r4, pc}

08005b46 <__swrite>:
 8005b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b4a:	461f      	mov	r7, r3
 8005b4c:	898b      	ldrh	r3, [r1, #12]
 8005b4e:	4605      	mov	r5, r0
 8005b50:	05db      	lsls	r3, r3, #23
 8005b52:	460c      	mov	r4, r1
 8005b54:	4616      	mov	r6, r2
 8005b56:	d505      	bpl.n	8005b64 <__swrite+0x1e>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b60:	f000 f83c 	bl	8005bdc <_lseek_r>
 8005b64:	89a3      	ldrh	r3, [r4, #12]
 8005b66:	4632      	mov	r2, r6
 8005b68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b6c:	81a3      	strh	r3, [r4, #12]
 8005b6e:	4628      	mov	r0, r5
 8005b70:	463b      	mov	r3, r7
 8005b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b7a:	f000 b853 	b.w	8005c24 <_write_r>

08005b7e <__sseek>:
 8005b7e:	b510      	push	{r4, lr}
 8005b80:	460c      	mov	r4, r1
 8005b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b86:	f000 f829 	bl	8005bdc <_lseek_r>
 8005b8a:	1c43      	adds	r3, r0, #1
 8005b8c:	89a3      	ldrh	r3, [r4, #12]
 8005b8e:	bf15      	itete	ne
 8005b90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b9a:	81a3      	strheq	r3, [r4, #12]
 8005b9c:	bf18      	it	ne
 8005b9e:	81a3      	strhne	r3, [r4, #12]
 8005ba0:	bd10      	pop	{r4, pc}

08005ba2 <__sclose>:
 8005ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ba6:	f000 b809 	b.w	8005bbc <_close_r>

08005baa <memset>:
 8005baa:	4603      	mov	r3, r0
 8005bac:	4402      	add	r2, r0
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d100      	bne.n	8005bb4 <memset+0xa>
 8005bb2:	4770      	bx	lr
 8005bb4:	f803 1b01 	strb.w	r1, [r3], #1
 8005bb8:	e7f9      	b.n	8005bae <memset+0x4>
	...

08005bbc <_close_r>:
 8005bbc:	b538      	push	{r3, r4, r5, lr}
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	4d05      	ldr	r5, [pc, #20]	@ (8005bd8 <_close_r+0x1c>)
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	4608      	mov	r0, r1
 8005bc6:	602b      	str	r3, [r5, #0]
 8005bc8:	f7fc ffb9 	bl	8002b3e <_close>
 8005bcc:	1c43      	adds	r3, r0, #1
 8005bce:	d102      	bne.n	8005bd6 <_close_r+0x1a>
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	b103      	cbz	r3, 8005bd6 <_close_r+0x1a>
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	bd38      	pop	{r3, r4, r5, pc}
 8005bd8:	200040c0 	.word	0x200040c0

08005bdc <_lseek_r>:
 8005bdc:	b538      	push	{r3, r4, r5, lr}
 8005bde:	4604      	mov	r4, r0
 8005be0:	4608      	mov	r0, r1
 8005be2:	4611      	mov	r1, r2
 8005be4:	2200      	movs	r2, #0
 8005be6:	4d05      	ldr	r5, [pc, #20]	@ (8005bfc <_lseek_r+0x20>)
 8005be8:	602a      	str	r2, [r5, #0]
 8005bea:	461a      	mov	r2, r3
 8005bec:	f7fc ffcb 	bl	8002b86 <_lseek>
 8005bf0:	1c43      	adds	r3, r0, #1
 8005bf2:	d102      	bne.n	8005bfa <_lseek_r+0x1e>
 8005bf4:	682b      	ldr	r3, [r5, #0]
 8005bf6:	b103      	cbz	r3, 8005bfa <_lseek_r+0x1e>
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	bd38      	pop	{r3, r4, r5, pc}
 8005bfc:	200040c0 	.word	0x200040c0

08005c00 <_read_r>:
 8005c00:	b538      	push	{r3, r4, r5, lr}
 8005c02:	4604      	mov	r4, r0
 8005c04:	4608      	mov	r0, r1
 8005c06:	4611      	mov	r1, r2
 8005c08:	2200      	movs	r2, #0
 8005c0a:	4d05      	ldr	r5, [pc, #20]	@ (8005c20 <_read_r+0x20>)
 8005c0c:	602a      	str	r2, [r5, #0]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f7fc ff5c 	bl	8002acc <_read>
 8005c14:	1c43      	adds	r3, r0, #1
 8005c16:	d102      	bne.n	8005c1e <_read_r+0x1e>
 8005c18:	682b      	ldr	r3, [r5, #0]
 8005c1a:	b103      	cbz	r3, 8005c1e <_read_r+0x1e>
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	bd38      	pop	{r3, r4, r5, pc}
 8005c20:	200040c0 	.word	0x200040c0

08005c24 <_write_r>:
 8005c24:	b538      	push	{r3, r4, r5, lr}
 8005c26:	4604      	mov	r4, r0
 8005c28:	4608      	mov	r0, r1
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	4d05      	ldr	r5, [pc, #20]	@ (8005c44 <_write_r+0x20>)
 8005c30:	602a      	str	r2, [r5, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	f7fc ff67 	bl	8002b06 <_write>
 8005c38:	1c43      	adds	r3, r0, #1
 8005c3a:	d102      	bne.n	8005c42 <_write_r+0x1e>
 8005c3c:	682b      	ldr	r3, [r5, #0]
 8005c3e:	b103      	cbz	r3, 8005c42 <_write_r+0x1e>
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	bd38      	pop	{r3, r4, r5, pc}
 8005c44:	200040c0 	.word	0x200040c0

08005c48 <__errno>:
 8005c48:	4b01      	ldr	r3, [pc, #4]	@ (8005c50 <__errno+0x8>)
 8005c4a:	6818      	ldr	r0, [r3, #0]
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	2000002c 	.word	0x2000002c

08005c54 <__libc_init_array>:
 8005c54:	b570      	push	{r4, r5, r6, lr}
 8005c56:	2600      	movs	r6, #0
 8005c58:	4d0c      	ldr	r5, [pc, #48]	@ (8005c8c <__libc_init_array+0x38>)
 8005c5a:	4c0d      	ldr	r4, [pc, #52]	@ (8005c90 <__libc_init_array+0x3c>)
 8005c5c:	1b64      	subs	r4, r4, r5
 8005c5e:	10a4      	asrs	r4, r4, #2
 8005c60:	42a6      	cmp	r6, r4
 8005c62:	d109      	bne.n	8005c78 <__libc_init_array+0x24>
 8005c64:	f002 fa56 	bl	8008114 <_init>
 8005c68:	2600      	movs	r6, #0
 8005c6a:	4d0a      	ldr	r5, [pc, #40]	@ (8005c94 <__libc_init_array+0x40>)
 8005c6c:	4c0a      	ldr	r4, [pc, #40]	@ (8005c98 <__libc_init_array+0x44>)
 8005c6e:	1b64      	subs	r4, r4, r5
 8005c70:	10a4      	asrs	r4, r4, #2
 8005c72:	42a6      	cmp	r6, r4
 8005c74:	d105      	bne.n	8005c82 <__libc_init_array+0x2e>
 8005c76:	bd70      	pop	{r4, r5, r6, pc}
 8005c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c7c:	4798      	blx	r3
 8005c7e:	3601      	adds	r6, #1
 8005c80:	e7ee      	b.n	8005c60 <__libc_init_array+0xc>
 8005c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c86:	4798      	blx	r3
 8005c88:	3601      	adds	r6, #1
 8005c8a:	e7f2      	b.n	8005c72 <__libc_init_array+0x1e>
 8005c8c:	08008874 	.word	0x08008874
 8005c90:	08008874 	.word	0x08008874
 8005c94:	08008874 	.word	0x08008874
 8005c98:	08008878 	.word	0x08008878

08005c9c <__retarget_lock_init_recursive>:
 8005c9c:	4770      	bx	lr

08005c9e <__retarget_lock_acquire_recursive>:
 8005c9e:	4770      	bx	lr

08005ca0 <__retarget_lock_release_recursive>:
 8005ca0:	4770      	bx	lr

08005ca2 <memcpy>:
 8005ca2:	440a      	add	r2, r1
 8005ca4:	4291      	cmp	r1, r2
 8005ca6:	f100 33ff 	add.w	r3, r0, #4294967295
 8005caa:	d100      	bne.n	8005cae <memcpy+0xc>
 8005cac:	4770      	bx	lr
 8005cae:	b510      	push	{r4, lr}
 8005cb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cb4:	4291      	cmp	r1, r2
 8005cb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cba:	d1f9      	bne.n	8005cb0 <memcpy+0xe>
 8005cbc:	bd10      	pop	{r4, pc}
	...

08005cc0 <__assert_func>:
 8005cc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005cc2:	4614      	mov	r4, r2
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	4b09      	ldr	r3, [pc, #36]	@ (8005cec <__assert_func+0x2c>)
 8005cc8:	4605      	mov	r5, r0
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68d8      	ldr	r0, [r3, #12]
 8005cce:	b14c      	cbz	r4, 8005ce4 <__assert_func+0x24>
 8005cd0:	4b07      	ldr	r3, [pc, #28]	@ (8005cf0 <__assert_func+0x30>)
 8005cd2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005cd6:	9100      	str	r1, [sp, #0]
 8005cd8:	462b      	mov	r3, r5
 8005cda:	4906      	ldr	r1, [pc, #24]	@ (8005cf4 <__assert_func+0x34>)
 8005cdc:	f000 fc9c 	bl	8006618 <fiprintf>
 8005ce0:	f000 fce4 	bl	80066ac <abort>
 8005ce4:	4b04      	ldr	r3, [pc, #16]	@ (8005cf8 <__assert_func+0x38>)
 8005ce6:	461c      	mov	r4, r3
 8005ce8:	e7f3      	b.n	8005cd2 <__assert_func+0x12>
 8005cea:	bf00      	nop
 8005cec:	2000002c 	.word	0x2000002c
 8005cf0:	08008415 	.word	0x08008415
 8005cf4:	08008422 	.word	0x08008422
 8005cf8:	08008450 	.word	0x08008450

08005cfc <_free_r>:
 8005cfc:	b538      	push	{r3, r4, r5, lr}
 8005cfe:	4605      	mov	r5, r0
 8005d00:	2900      	cmp	r1, #0
 8005d02:	d040      	beq.n	8005d86 <_free_r+0x8a>
 8005d04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d08:	1f0c      	subs	r4, r1, #4
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	bfb8      	it	lt
 8005d0e:	18e4      	addlt	r4, r4, r3
 8005d10:	f000 f8e6 	bl	8005ee0 <__malloc_lock>
 8005d14:	4a1c      	ldr	r2, [pc, #112]	@ (8005d88 <_free_r+0x8c>)
 8005d16:	6813      	ldr	r3, [r2, #0]
 8005d18:	b933      	cbnz	r3, 8005d28 <_free_r+0x2c>
 8005d1a:	6063      	str	r3, [r4, #4]
 8005d1c:	6014      	str	r4, [r2, #0]
 8005d1e:	4628      	mov	r0, r5
 8005d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d24:	f000 b8e2 	b.w	8005eec <__malloc_unlock>
 8005d28:	42a3      	cmp	r3, r4
 8005d2a:	d908      	bls.n	8005d3e <_free_r+0x42>
 8005d2c:	6820      	ldr	r0, [r4, #0]
 8005d2e:	1821      	adds	r1, r4, r0
 8005d30:	428b      	cmp	r3, r1
 8005d32:	bf01      	itttt	eq
 8005d34:	6819      	ldreq	r1, [r3, #0]
 8005d36:	685b      	ldreq	r3, [r3, #4]
 8005d38:	1809      	addeq	r1, r1, r0
 8005d3a:	6021      	streq	r1, [r4, #0]
 8005d3c:	e7ed      	b.n	8005d1a <_free_r+0x1e>
 8005d3e:	461a      	mov	r2, r3
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	b10b      	cbz	r3, 8005d48 <_free_r+0x4c>
 8005d44:	42a3      	cmp	r3, r4
 8005d46:	d9fa      	bls.n	8005d3e <_free_r+0x42>
 8005d48:	6811      	ldr	r1, [r2, #0]
 8005d4a:	1850      	adds	r0, r2, r1
 8005d4c:	42a0      	cmp	r0, r4
 8005d4e:	d10b      	bne.n	8005d68 <_free_r+0x6c>
 8005d50:	6820      	ldr	r0, [r4, #0]
 8005d52:	4401      	add	r1, r0
 8005d54:	1850      	adds	r0, r2, r1
 8005d56:	4283      	cmp	r3, r0
 8005d58:	6011      	str	r1, [r2, #0]
 8005d5a:	d1e0      	bne.n	8005d1e <_free_r+0x22>
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	4408      	add	r0, r1
 8005d62:	6010      	str	r0, [r2, #0]
 8005d64:	6053      	str	r3, [r2, #4]
 8005d66:	e7da      	b.n	8005d1e <_free_r+0x22>
 8005d68:	d902      	bls.n	8005d70 <_free_r+0x74>
 8005d6a:	230c      	movs	r3, #12
 8005d6c:	602b      	str	r3, [r5, #0]
 8005d6e:	e7d6      	b.n	8005d1e <_free_r+0x22>
 8005d70:	6820      	ldr	r0, [r4, #0]
 8005d72:	1821      	adds	r1, r4, r0
 8005d74:	428b      	cmp	r3, r1
 8005d76:	bf01      	itttt	eq
 8005d78:	6819      	ldreq	r1, [r3, #0]
 8005d7a:	685b      	ldreq	r3, [r3, #4]
 8005d7c:	1809      	addeq	r1, r1, r0
 8005d7e:	6021      	streq	r1, [r4, #0]
 8005d80:	6063      	str	r3, [r4, #4]
 8005d82:	6054      	str	r4, [r2, #4]
 8005d84:	e7cb      	b.n	8005d1e <_free_r+0x22>
 8005d86:	bd38      	pop	{r3, r4, r5, pc}
 8005d88:	200040cc 	.word	0x200040cc

08005d8c <malloc>:
 8005d8c:	4b02      	ldr	r3, [pc, #8]	@ (8005d98 <malloc+0xc>)
 8005d8e:	4601      	mov	r1, r0
 8005d90:	6818      	ldr	r0, [r3, #0]
 8005d92:	f000 b825 	b.w	8005de0 <_malloc_r>
 8005d96:	bf00      	nop
 8005d98:	2000002c 	.word	0x2000002c

08005d9c <sbrk_aligned>:
 8005d9c:	b570      	push	{r4, r5, r6, lr}
 8005d9e:	4e0f      	ldr	r6, [pc, #60]	@ (8005ddc <sbrk_aligned+0x40>)
 8005da0:	460c      	mov	r4, r1
 8005da2:	6831      	ldr	r1, [r6, #0]
 8005da4:	4605      	mov	r5, r0
 8005da6:	b911      	cbnz	r1, 8005dae <sbrk_aligned+0x12>
 8005da8:	f000 fc62 	bl	8006670 <_sbrk_r>
 8005dac:	6030      	str	r0, [r6, #0]
 8005dae:	4621      	mov	r1, r4
 8005db0:	4628      	mov	r0, r5
 8005db2:	f000 fc5d 	bl	8006670 <_sbrk_r>
 8005db6:	1c43      	adds	r3, r0, #1
 8005db8:	d103      	bne.n	8005dc2 <sbrk_aligned+0x26>
 8005dba:	f04f 34ff 	mov.w	r4, #4294967295
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	bd70      	pop	{r4, r5, r6, pc}
 8005dc2:	1cc4      	adds	r4, r0, #3
 8005dc4:	f024 0403 	bic.w	r4, r4, #3
 8005dc8:	42a0      	cmp	r0, r4
 8005dca:	d0f8      	beq.n	8005dbe <sbrk_aligned+0x22>
 8005dcc:	1a21      	subs	r1, r4, r0
 8005dce:	4628      	mov	r0, r5
 8005dd0:	f000 fc4e 	bl	8006670 <_sbrk_r>
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	d1f2      	bne.n	8005dbe <sbrk_aligned+0x22>
 8005dd8:	e7ef      	b.n	8005dba <sbrk_aligned+0x1e>
 8005dda:	bf00      	nop
 8005ddc:	200040c8 	.word	0x200040c8

08005de0 <_malloc_r>:
 8005de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005de4:	1ccd      	adds	r5, r1, #3
 8005de6:	f025 0503 	bic.w	r5, r5, #3
 8005dea:	3508      	adds	r5, #8
 8005dec:	2d0c      	cmp	r5, #12
 8005dee:	bf38      	it	cc
 8005df0:	250c      	movcc	r5, #12
 8005df2:	2d00      	cmp	r5, #0
 8005df4:	4606      	mov	r6, r0
 8005df6:	db01      	blt.n	8005dfc <_malloc_r+0x1c>
 8005df8:	42a9      	cmp	r1, r5
 8005dfa:	d904      	bls.n	8005e06 <_malloc_r+0x26>
 8005dfc:	230c      	movs	r3, #12
 8005dfe:	6033      	str	r3, [r6, #0]
 8005e00:	2000      	movs	r0, #0
 8005e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005edc <_malloc_r+0xfc>
 8005e0a:	f000 f869 	bl	8005ee0 <__malloc_lock>
 8005e0e:	f8d8 3000 	ldr.w	r3, [r8]
 8005e12:	461c      	mov	r4, r3
 8005e14:	bb44      	cbnz	r4, 8005e68 <_malloc_r+0x88>
 8005e16:	4629      	mov	r1, r5
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f7ff ffbf 	bl	8005d9c <sbrk_aligned>
 8005e1e:	1c43      	adds	r3, r0, #1
 8005e20:	4604      	mov	r4, r0
 8005e22:	d158      	bne.n	8005ed6 <_malloc_r+0xf6>
 8005e24:	f8d8 4000 	ldr.w	r4, [r8]
 8005e28:	4627      	mov	r7, r4
 8005e2a:	2f00      	cmp	r7, #0
 8005e2c:	d143      	bne.n	8005eb6 <_malloc_r+0xd6>
 8005e2e:	2c00      	cmp	r4, #0
 8005e30:	d04b      	beq.n	8005eca <_malloc_r+0xea>
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	4639      	mov	r1, r7
 8005e36:	4630      	mov	r0, r6
 8005e38:	eb04 0903 	add.w	r9, r4, r3
 8005e3c:	f000 fc18 	bl	8006670 <_sbrk_r>
 8005e40:	4581      	cmp	r9, r0
 8005e42:	d142      	bne.n	8005eca <_malloc_r+0xea>
 8005e44:	6821      	ldr	r1, [r4, #0]
 8005e46:	4630      	mov	r0, r6
 8005e48:	1a6d      	subs	r5, r5, r1
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	f7ff ffa6 	bl	8005d9c <sbrk_aligned>
 8005e50:	3001      	adds	r0, #1
 8005e52:	d03a      	beq.n	8005eca <_malloc_r+0xea>
 8005e54:	6823      	ldr	r3, [r4, #0]
 8005e56:	442b      	add	r3, r5
 8005e58:	6023      	str	r3, [r4, #0]
 8005e5a:	f8d8 3000 	ldr.w	r3, [r8]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	bb62      	cbnz	r2, 8005ebc <_malloc_r+0xdc>
 8005e62:	f8c8 7000 	str.w	r7, [r8]
 8005e66:	e00f      	b.n	8005e88 <_malloc_r+0xa8>
 8005e68:	6822      	ldr	r2, [r4, #0]
 8005e6a:	1b52      	subs	r2, r2, r5
 8005e6c:	d420      	bmi.n	8005eb0 <_malloc_r+0xd0>
 8005e6e:	2a0b      	cmp	r2, #11
 8005e70:	d917      	bls.n	8005ea2 <_malloc_r+0xc2>
 8005e72:	1961      	adds	r1, r4, r5
 8005e74:	42a3      	cmp	r3, r4
 8005e76:	6025      	str	r5, [r4, #0]
 8005e78:	bf18      	it	ne
 8005e7a:	6059      	strne	r1, [r3, #4]
 8005e7c:	6863      	ldr	r3, [r4, #4]
 8005e7e:	bf08      	it	eq
 8005e80:	f8c8 1000 	streq.w	r1, [r8]
 8005e84:	5162      	str	r2, [r4, r5]
 8005e86:	604b      	str	r3, [r1, #4]
 8005e88:	4630      	mov	r0, r6
 8005e8a:	f000 f82f 	bl	8005eec <__malloc_unlock>
 8005e8e:	f104 000b 	add.w	r0, r4, #11
 8005e92:	1d23      	adds	r3, r4, #4
 8005e94:	f020 0007 	bic.w	r0, r0, #7
 8005e98:	1ac2      	subs	r2, r0, r3
 8005e9a:	bf1c      	itt	ne
 8005e9c:	1a1b      	subne	r3, r3, r0
 8005e9e:	50a3      	strne	r3, [r4, r2]
 8005ea0:	e7af      	b.n	8005e02 <_malloc_r+0x22>
 8005ea2:	6862      	ldr	r2, [r4, #4]
 8005ea4:	42a3      	cmp	r3, r4
 8005ea6:	bf0c      	ite	eq
 8005ea8:	f8c8 2000 	streq.w	r2, [r8]
 8005eac:	605a      	strne	r2, [r3, #4]
 8005eae:	e7eb      	b.n	8005e88 <_malloc_r+0xa8>
 8005eb0:	4623      	mov	r3, r4
 8005eb2:	6864      	ldr	r4, [r4, #4]
 8005eb4:	e7ae      	b.n	8005e14 <_malloc_r+0x34>
 8005eb6:	463c      	mov	r4, r7
 8005eb8:	687f      	ldr	r7, [r7, #4]
 8005eba:	e7b6      	b.n	8005e2a <_malloc_r+0x4a>
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	42a3      	cmp	r3, r4
 8005ec2:	d1fb      	bne.n	8005ebc <_malloc_r+0xdc>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	6053      	str	r3, [r2, #4]
 8005ec8:	e7de      	b.n	8005e88 <_malloc_r+0xa8>
 8005eca:	230c      	movs	r3, #12
 8005ecc:	4630      	mov	r0, r6
 8005ece:	6033      	str	r3, [r6, #0]
 8005ed0:	f000 f80c 	bl	8005eec <__malloc_unlock>
 8005ed4:	e794      	b.n	8005e00 <_malloc_r+0x20>
 8005ed6:	6005      	str	r5, [r0, #0]
 8005ed8:	e7d6      	b.n	8005e88 <_malloc_r+0xa8>
 8005eda:	bf00      	nop
 8005edc:	200040cc 	.word	0x200040cc

08005ee0 <__malloc_lock>:
 8005ee0:	4801      	ldr	r0, [pc, #4]	@ (8005ee8 <__malloc_lock+0x8>)
 8005ee2:	f7ff bedc 	b.w	8005c9e <__retarget_lock_acquire_recursive>
 8005ee6:	bf00      	nop
 8005ee8:	200040c4 	.word	0x200040c4

08005eec <__malloc_unlock>:
 8005eec:	4801      	ldr	r0, [pc, #4]	@ (8005ef4 <__malloc_unlock+0x8>)
 8005eee:	f7ff bed7 	b.w	8005ca0 <__retarget_lock_release_recursive>
 8005ef2:	bf00      	nop
 8005ef4:	200040c4 	.word	0x200040c4

08005ef8 <__ssputs_r>:
 8005ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005efc:	461f      	mov	r7, r3
 8005efe:	688e      	ldr	r6, [r1, #8]
 8005f00:	4682      	mov	sl, r0
 8005f02:	42be      	cmp	r6, r7
 8005f04:	460c      	mov	r4, r1
 8005f06:	4690      	mov	r8, r2
 8005f08:	680b      	ldr	r3, [r1, #0]
 8005f0a:	d82d      	bhi.n	8005f68 <__ssputs_r+0x70>
 8005f0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005f14:	d026      	beq.n	8005f64 <__ssputs_r+0x6c>
 8005f16:	6965      	ldr	r5, [r4, #20]
 8005f18:	6909      	ldr	r1, [r1, #16]
 8005f1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f1e:	eba3 0901 	sub.w	r9, r3, r1
 8005f22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f26:	1c7b      	adds	r3, r7, #1
 8005f28:	444b      	add	r3, r9
 8005f2a:	106d      	asrs	r5, r5, #1
 8005f2c:	429d      	cmp	r5, r3
 8005f2e:	bf38      	it	cc
 8005f30:	461d      	movcc	r5, r3
 8005f32:	0553      	lsls	r3, r2, #21
 8005f34:	d527      	bpl.n	8005f86 <__ssputs_r+0x8e>
 8005f36:	4629      	mov	r1, r5
 8005f38:	f7ff ff52 	bl	8005de0 <_malloc_r>
 8005f3c:	4606      	mov	r6, r0
 8005f3e:	b360      	cbz	r0, 8005f9a <__ssputs_r+0xa2>
 8005f40:	464a      	mov	r2, r9
 8005f42:	6921      	ldr	r1, [r4, #16]
 8005f44:	f7ff fead 	bl	8005ca2 <memcpy>
 8005f48:	89a3      	ldrh	r3, [r4, #12]
 8005f4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005f4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f52:	81a3      	strh	r3, [r4, #12]
 8005f54:	6126      	str	r6, [r4, #16]
 8005f56:	444e      	add	r6, r9
 8005f58:	6026      	str	r6, [r4, #0]
 8005f5a:	463e      	mov	r6, r7
 8005f5c:	6165      	str	r5, [r4, #20]
 8005f5e:	eba5 0509 	sub.w	r5, r5, r9
 8005f62:	60a5      	str	r5, [r4, #8]
 8005f64:	42be      	cmp	r6, r7
 8005f66:	d900      	bls.n	8005f6a <__ssputs_r+0x72>
 8005f68:	463e      	mov	r6, r7
 8005f6a:	4632      	mov	r2, r6
 8005f6c:	4641      	mov	r1, r8
 8005f6e:	6820      	ldr	r0, [r4, #0]
 8005f70:	f000 fb64 	bl	800663c <memmove>
 8005f74:	2000      	movs	r0, #0
 8005f76:	68a3      	ldr	r3, [r4, #8]
 8005f78:	1b9b      	subs	r3, r3, r6
 8005f7a:	60a3      	str	r3, [r4, #8]
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	4433      	add	r3, r6
 8005f80:	6023      	str	r3, [r4, #0]
 8005f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f86:	462a      	mov	r2, r5
 8005f88:	f000 fb97 	bl	80066ba <_realloc_r>
 8005f8c:	4606      	mov	r6, r0
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	d1e0      	bne.n	8005f54 <__ssputs_r+0x5c>
 8005f92:	4650      	mov	r0, sl
 8005f94:	6921      	ldr	r1, [r4, #16]
 8005f96:	f7ff feb1 	bl	8005cfc <_free_r>
 8005f9a:	230c      	movs	r3, #12
 8005f9c:	f8ca 3000 	str.w	r3, [sl]
 8005fa0:	89a3      	ldrh	r3, [r4, #12]
 8005fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005faa:	81a3      	strh	r3, [r4, #12]
 8005fac:	e7e9      	b.n	8005f82 <__ssputs_r+0x8a>
	...

08005fb0 <_svfiprintf_r>:
 8005fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb4:	4698      	mov	r8, r3
 8005fb6:	898b      	ldrh	r3, [r1, #12]
 8005fb8:	4607      	mov	r7, r0
 8005fba:	061b      	lsls	r3, r3, #24
 8005fbc:	460d      	mov	r5, r1
 8005fbe:	4614      	mov	r4, r2
 8005fc0:	b09d      	sub	sp, #116	@ 0x74
 8005fc2:	d510      	bpl.n	8005fe6 <_svfiprintf_r+0x36>
 8005fc4:	690b      	ldr	r3, [r1, #16]
 8005fc6:	b973      	cbnz	r3, 8005fe6 <_svfiprintf_r+0x36>
 8005fc8:	2140      	movs	r1, #64	@ 0x40
 8005fca:	f7ff ff09 	bl	8005de0 <_malloc_r>
 8005fce:	6028      	str	r0, [r5, #0]
 8005fd0:	6128      	str	r0, [r5, #16]
 8005fd2:	b930      	cbnz	r0, 8005fe2 <_svfiprintf_r+0x32>
 8005fd4:	230c      	movs	r3, #12
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fdc:	b01d      	add	sp, #116	@ 0x74
 8005fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe2:	2340      	movs	r3, #64	@ 0x40
 8005fe4:	616b      	str	r3, [r5, #20]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fea:	2320      	movs	r3, #32
 8005fec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ff0:	2330      	movs	r3, #48	@ 0x30
 8005ff2:	f04f 0901 	mov.w	r9, #1
 8005ff6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ffa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006194 <_svfiprintf_r+0x1e4>
 8005ffe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006002:	4623      	mov	r3, r4
 8006004:	469a      	mov	sl, r3
 8006006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800600a:	b10a      	cbz	r2, 8006010 <_svfiprintf_r+0x60>
 800600c:	2a25      	cmp	r2, #37	@ 0x25
 800600e:	d1f9      	bne.n	8006004 <_svfiprintf_r+0x54>
 8006010:	ebba 0b04 	subs.w	fp, sl, r4
 8006014:	d00b      	beq.n	800602e <_svfiprintf_r+0x7e>
 8006016:	465b      	mov	r3, fp
 8006018:	4622      	mov	r2, r4
 800601a:	4629      	mov	r1, r5
 800601c:	4638      	mov	r0, r7
 800601e:	f7ff ff6b 	bl	8005ef8 <__ssputs_r>
 8006022:	3001      	adds	r0, #1
 8006024:	f000 80a7 	beq.w	8006176 <_svfiprintf_r+0x1c6>
 8006028:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800602a:	445a      	add	r2, fp
 800602c:	9209      	str	r2, [sp, #36]	@ 0x24
 800602e:	f89a 3000 	ldrb.w	r3, [sl]
 8006032:	2b00      	cmp	r3, #0
 8006034:	f000 809f 	beq.w	8006176 <_svfiprintf_r+0x1c6>
 8006038:	2300      	movs	r3, #0
 800603a:	f04f 32ff 	mov.w	r2, #4294967295
 800603e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006042:	f10a 0a01 	add.w	sl, sl, #1
 8006046:	9304      	str	r3, [sp, #16]
 8006048:	9307      	str	r3, [sp, #28]
 800604a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800604e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006050:	4654      	mov	r4, sl
 8006052:	2205      	movs	r2, #5
 8006054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006058:	484e      	ldr	r0, [pc, #312]	@ (8006194 <_svfiprintf_r+0x1e4>)
 800605a:	f000 fb19 	bl	8006690 <memchr>
 800605e:	9a04      	ldr	r2, [sp, #16]
 8006060:	b9d8      	cbnz	r0, 800609a <_svfiprintf_r+0xea>
 8006062:	06d0      	lsls	r0, r2, #27
 8006064:	bf44      	itt	mi
 8006066:	2320      	movmi	r3, #32
 8006068:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800606c:	0711      	lsls	r1, r2, #28
 800606e:	bf44      	itt	mi
 8006070:	232b      	movmi	r3, #43	@ 0x2b
 8006072:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006076:	f89a 3000 	ldrb.w	r3, [sl]
 800607a:	2b2a      	cmp	r3, #42	@ 0x2a
 800607c:	d015      	beq.n	80060aa <_svfiprintf_r+0xfa>
 800607e:	4654      	mov	r4, sl
 8006080:	2000      	movs	r0, #0
 8006082:	f04f 0c0a 	mov.w	ip, #10
 8006086:	9a07      	ldr	r2, [sp, #28]
 8006088:	4621      	mov	r1, r4
 800608a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800608e:	3b30      	subs	r3, #48	@ 0x30
 8006090:	2b09      	cmp	r3, #9
 8006092:	d94b      	bls.n	800612c <_svfiprintf_r+0x17c>
 8006094:	b1b0      	cbz	r0, 80060c4 <_svfiprintf_r+0x114>
 8006096:	9207      	str	r2, [sp, #28]
 8006098:	e014      	b.n	80060c4 <_svfiprintf_r+0x114>
 800609a:	eba0 0308 	sub.w	r3, r0, r8
 800609e:	fa09 f303 	lsl.w	r3, r9, r3
 80060a2:	4313      	orrs	r3, r2
 80060a4:	46a2      	mov	sl, r4
 80060a6:	9304      	str	r3, [sp, #16]
 80060a8:	e7d2      	b.n	8006050 <_svfiprintf_r+0xa0>
 80060aa:	9b03      	ldr	r3, [sp, #12]
 80060ac:	1d19      	adds	r1, r3, #4
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	9103      	str	r1, [sp, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	bfbb      	ittet	lt
 80060b6:	425b      	neglt	r3, r3
 80060b8:	f042 0202 	orrlt.w	r2, r2, #2
 80060bc:	9307      	strge	r3, [sp, #28]
 80060be:	9307      	strlt	r3, [sp, #28]
 80060c0:	bfb8      	it	lt
 80060c2:	9204      	strlt	r2, [sp, #16]
 80060c4:	7823      	ldrb	r3, [r4, #0]
 80060c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80060c8:	d10a      	bne.n	80060e0 <_svfiprintf_r+0x130>
 80060ca:	7863      	ldrb	r3, [r4, #1]
 80060cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80060ce:	d132      	bne.n	8006136 <_svfiprintf_r+0x186>
 80060d0:	9b03      	ldr	r3, [sp, #12]
 80060d2:	3402      	adds	r4, #2
 80060d4:	1d1a      	adds	r2, r3, #4
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	9203      	str	r2, [sp, #12]
 80060da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060de:	9305      	str	r3, [sp, #20]
 80060e0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006198 <_svfiprintf_r+0x1e8>
 80060e4:	2203      	movs	r2, #3
 80060e6:	4650      	mov	r0, sl
 80060e8:	7821      	ldrb	r1, [r4, #0]
 80060ea:	f000 fad1 	bl	8006690 <memchr>
 80060ee:	b138      	cbz	r0, 8006100 <_svfiprintf_r+0x150>
 80060f0:	2240      	movs	r2, #64	@ 0x40
 80060f2:	9b04      	ldr	r3, [sp, #16]
 80060f4:	eba0 000a 	sub.w	r0, r0, sl
 80060f8:	4082      	lsls	r2, r0
 80060fa:	4313      	orrs	r3, r2
 80060fc:	3401      	adds	r4, #1
 80060fe:	9304      	str	r3, [sp, #16]
 8006100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006104:	2206      	movs	r2, #6
 8006106:	4825      	ldr	r0, [pc, #148]	@ (800619c <_svfiprintf_r+0x1ec>)
 8006108:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800610c:	f000 fac0 	bl	8006690 <memchr>
 8006110:	2800      	cmp	r0, #0
 8006112:	d036      	beq.n	8006182 <_svfiprintf_r+0x1d2>
 8006114:	4b22      	ldr	r3, [pc, #136]	@ (80061a0 <_svfiprintf_r+0x1f0>)
 8006116:	bb1b      	cbnz	r3, 8006160 <_svfiprintf_r+0x1b0>
 8006118:	9b03      	ldr	r3, [sp, #12]
 800611a:	3307      	adds	r3, #7
 800611c:	f023 0307 	bic.w	r3, r3, #7
 8006120:	3308      	adds	r3, #8
 8006122:	9303      	str	r3, [sp, #12]
 8006124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006126:	4433      	add	r3, r6
 8006128:	9309      	str	r3, [sp, #36]	@ 0x24
 800612a:	e76a      	b.n	8006002 <_svfiprintf_r+0x52>
 800612c:	460c      	mov	r4, r1
 800612e:	2001      	movs	r0, #1
 8006130:	fb0c 3202 	mla	r2, ip, r2, r3
 8006134:	e7a8      	b.n	8006088 <_svfiprintf_r+0xd8>
 8006136:	2300      	movs	r3, #0
 8006138:	f04f 0c0a 	mov.w	ip, #10
 800613c:	4619      	mov	r1, r3
 800613e:	3401      	adds	r4, #1
 8006140:	9305      	str	r3, [sp, #20]
 8006142:	4620      	mov	r0, r4
 8006144:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006148:	3a30      	subs	r2, #48	@ 0x30
 800614a:	2a09      	cmp	r2, #9
 800614c:	d903      	bls.n	8006156 <_svfiprintf_r+0x1a6>
 800614e:	2b00      	cmp	r3, #0
 8006150:	d0c6      	beq.n	80060e0 <_svfiprintf_r+0x130>
 8006152:	9105      	str	r1, [sp, #20]
 8006154:	e7c4      	b.n	80060e0 <_svfiprintf_r+0x130>
 8006156:	4604      	mov	r4, r0
 8006158:	2301      	movs	r3, #1
 800615a:	fb0c 2101 	mla	r1, ip, r1, r2
 800615e:	e7f0      	b.n	8006142 <_svfiprintf_r+0x192>
 8006160:	ab03      	add	r3, sp, #12
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	462a      	mov	r2, r5
 8006166:	4638      	mov	r0, r7
 8006168:	4b0e      	ldr	r3, [pc, #56]	@ (80061a4 <_svfiprintf_r+0x1f4>)
 800616a:	a904      	add	r1, sp, #16
 800616c:	f3af 8000 	nop.w
 8006170:	1c42      	adds	r2, r0, #1
 8006172:	4606      	mov	r6, r0
 8006174:	d1d6      	bne.n	8006124 <_svfiprintf_r+0x174>
 8006176:	89ab      	ldrh	r3, [r5, #12]
 8006178:	065b      	lsls	r3, r3, #25
 800617a:	f53f af2d 	bmi.w	8005fd8 <_svfiprintf_r+0x28>
 800617e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006180:	e72c      	b.n	8005fdc <_svfiprintf_r+0x2c>
 8006182:	ab03      	add	r3, sp, #12
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	462a      	mov	r2, r5
 8006188:	4638      	mov	r0, r7
 800618a:	4b06      	ldr	r3, [pc, #24]	@ (80061a4 <_svfiprintf_r+0x1f4>)
 800618c:	a904      	add	r1, sp, #16
 800618e:	f000 f87d 	bl	800628c <_printf_i>
 8006192:	e7ed      	b.n	8006170 <_svfiprintf_r+0x1c0>
 8006194:	08008451 	.word	0x08008451
 8006198:	08008457 	.word	0x08008457
 800619c:	0800845b 	.word	0x0800845b
 80061a0:	00000000 	.word	0x00000000
 80061a4:	08005ef9 	.word	0x08005ef9

080061a8 <_printf_common>:
 80061a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ac:	4616      	mov	r6, r2
 80061ae:	4698      	mov	r8, r3
 80061b0:	688a      	ldr	r2, [r1, #8]
 80061b2:	690b      	ldr	r3, [r1, #16]
 80061b4:	4607      	mov	r7, r0
 80061b6:	4293      	cmp	r3, r2
 80061b8:	bfb8      	it	lt
 80061ba:	4613      	movlt	r3, r2
 80061bc:	6033      	str	r3, [r6, #0]
 80061be:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061c2:	460c      	mov	r4, r1
 80061c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061c8:	b10a      	cbz	r2, 80061ce <_printf_common+0x26>
 80061ca:	3301      	adds	r3, #1
 80061cc:	6033      	str	r3, [r6, #0]
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	0699      	lsls	r1, r3, #26
 80061d2:	bf42      	ittt	mi
 80061d4:	6833      	ldrmi	r3, [r6, #0]
 80061d6:	3302      	addmi	r3, #2
 80061d8:	6033      	strmi	r3, [r6, #0]
 80061da:	6825      	ldr	r5, [r4, #0]
 80061dc:	f015 0506 	ands.w	r5, r5, #6
 80061e0:	d106      	bne.n	80061f0 <_printf_common+0x48>
 80061e2:	f104 0a19 	add.w	sl, r4, #25
 80061e6:	68e3      	ldr	r3, [r4, #12]
 80061e8:	6832      	ldr	r2, [r6, #0]
 80061ea:	1a9b      	subs	r3, r3, r2
 80061ec:	42ab      	cmp	r3, r5
 80061ee:	dc2b      	bgt.n	8006248 <_printf_common+0xa0>
 80061f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061f4:	6822      	ldr	r2, [r4, #0]
 80061f6:	3b00      	subs	r3, #0
 80061f8:	bf18      	it	ne
 80061fa:	2301      	movne	r3, #1
 80061fc:	0692      	lsls	r2, r2, #26
 80061fe:	d430      	bmi.n	8006262 <_printf_common+0xba>
 8006200:	4641      	mov	r1, r8
 8006202:	4638      	mov	r0, r7
 8006204:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006208:	47c8      	blx	r9
 800620a:	3001      	adds	r0, #1
 800620c:	d023      	beq.n	8006256 <_printf_common+0xae>
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	6922      	ldr	r2, [r4, #16]
 8006212:	f003 0306 	and.w	r3, r3, #6
 8006216:	2b04      	cmp	r3, #4
 8006218:	bf14      	ite	ne
 800621a:	2500      	movne	r5, #0
 800621c:	6833      	ldreq	r3, [r6, #0]
 800621e:	f04f 0600 	mov.w	r6, #0
 8006222:	bf08      	it	eq
 8006224:	68e5      	ldreq	r5, [r4, #12]
 8006226:	f104 041a 	add.w	r4, r4, #26
 800622a:	bf08      	it	eq
 800622c:	1aed      	subeq	r5, r5, r3
 800622e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006232:	bf08      	it	eq
 8006234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006238:	4293      	cmp	r3, r2
 800623a:	bfc4      	itt	gt
 800623c:	1a9b      	subgt	r3, r3, r2
 800623e:	18ed      	addgt	r5, r5, r3
 8006240:	42b5      	cmp	r5, r6
 8006242:	d11a      	bne.n	800627a <_printf_common+0xd2>
 8006244:	2000      	movs	r0, #0
 8006246:	e008      	b.n	800625a <_printf_common+0xb2>
 8006248:	2301      	movs	r3, #1
 800624a:	4652      	mov	r2, sl
 800624c:	4641      	mov	r1, r8
 800624e:	4638      	mov	r0, r7
 8006250:	47c8      	blx	r9
 8006252:	3001      	adds	r0, #1
 8006254:	d103      	bne.n	800625e <_printf_common+0xb6>
 8006256:	f04f 30ff 	mov.w	r0, #4294967295
 800625a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800625e:	3501      	adds	r5, #1
 8006260:	e7c1      	b.n	80061e6 <_printf_common+0x3e>
 8006262:	2030      	movs	r0, #48	@ 0x30
 8006264:	18e1      	adds	r1, r4, r3
 8006266:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800626a:	1c5a      	adds	r2, r3, #1
 800626c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006270:	4422      	add	r2, r4
 8006272:	3302      	adds	r3, #2
 8006274:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006278:	e7c2      	b.n	8006200 <_printf_common+0x58>
 800627a:	2301      	movs	r3, #1
 800627c:	4622      	mov	r2, r4
 800627e:	4641      	mov	r1, r8
 8006280:	4638      	mov	r0, r7
 8006282:	47c8      	blx	r9
 8006284:	3001      	adds	r0, #1
 8006286:	d0e6      	beq.n	8006256 <_printf_common+0xae>
 8006288:	3601      	adds	r6, #1
 800628a:	e7d9      	b.n	8006240 <_printf_common+0x98>

0800628c <_printf_i>:
 800628c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006290:	7e0f      	ldrb	r7, [r1, #24]
 8006292:	4691      	mov	r9, r2
 8006294:	2f78      	cmp	r7, #120	@ 0x78
 8006296:	4680      	mov	r8, r0
 8006298:	460c      	mov	r4, r1
 800629a:	469a      	mov	sl, r3
 800629c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800629e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062a2:	d807      	bhi.n	80062b4 <_printf_i+0x28>
 80062a4:	2f62      	cmp	r7, #98	@ 0x62
 80062a6:	d80a      	bhi.n	80062be <_printf_i+0x32>
 80062a8:	2f00      	cmp	r7, #0
 80062aa:	f000 80d1 	beq.w	8006450 <_printf_i+0x1c4>
 80062ae:	2f58      	cmp	r7, #88	@ 0x58
 80062b0:	f000 80b8 	beq.w	8006424 <_printf_i+0x198>
 80062b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80062bc:	e03a      	b.n	8006334 <_printf_i+0xa8>
 80062be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062c2:	2b15      	cmp	r3, #21
 80062c4:	d8f6      	bhi.n	80062b4 <_printf_i+0x28>
 80062c6:	a101      	add	r1, pc, #4	@ (adr r1, 80062cc <_printf_i+0x40>)
 80062c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062cc:	08006325 	.word	0x08006325
 80062d0:	08006339 	.word	0x08006339
 80062d4:	080062b5 	.word	0x080062b5
 80062d8:	080062b5 	.word	0x080062b5
 80062dc:	080062b5 	.word	0x080062b5
 80062e0:	080062b5 	.word	0x080062b5
 80062e4:	08006339 	.word	0x08006339
 80062e8:	080062b5 	.word	0x080062b5
 80062ec:	080062b5 	.word	0x080062b5
 80062f0:	080062b5 	.word	0x080062b5
 80062f4:	080062b5 	.word	0x080062b5
 80062f8:	08006437 	.word	0x08006437
 80062fc:	08006363 	.word	0x08006363
 8006300:	080063f1 	.word	0x080063f1
 8006304:	080062b5 	.word	0x080062b5
 8006308:	080062b5 	.word	0x080062b5
 800630c:	08006459 	.word	0x08006459
 8006310:	080062b5 	.word	0x080062b5
 8006314:	08006363 	.word	0x08006363
 8006318:	080062b5 	.word	0x080062b5
 800631c:	080062b5 	.word	0x080062b5
 8006320:	080063f9 	.word	0x080063f9
 8006324:	6833      	ldr	r3, [r6, #0]
 8006326:	1d1a      	adds	r2, r3, #4
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6032      	str	r2, [r6, #0]
 800632c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006330:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006334:	2301      	movs	r3, #1
 8006336:	e09c      	b.n	8006472 <_printf_i+0x1e6>
 8006338:	6833      	ldr	r3, [r6, #0]
 800633a:	6820      	ldr	r0, [r4, #0]
 800633c:	1d19      	adds	r1, r3, #4
 800633e:	6031      	str	r1, [r6, #0]
 8006340:	0606      	lsls	r6, r0, #24
 8006342:	d501      	bpl.n	8006348 <_printf_i+0xbc>
 8006344:	681d      	ldr	r5, [r3, #0]
 8006346:	e003      	b.n	8006350 <_printf_i+0xc4>
 8006348:	0645      	lsls	r5, r0, #25
 800634a:	d5fb      	bpl.n	8006344 <_printf_i+0xb8>
 800634c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006350:	2d00      	cmp	r5, #0
 8006352:	da03      	bge.n	800635c <_printf_i+0xd0>
 8006354:	232d      	movs	r3, #45	@ 0x2d
 8006356:	426d      	negs	r5, r5
 8006358:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800635c:	230a      	movs	r3, #10
 800635e:	4858      	ldr	r0, [pc, #352]	@ (80064c0 <_printf_i+0x234>)
 8006360:	e011      	b.n	8006386 <_printf_i+0xfa>
 8006362:	6821      	ldr	r1, [r4, #0]
 8006364:	6833      	ldr	r3, [r6, #0]
 8006366:	0608      	lsls	r0, r1, #24
 8006368:	f853 5b04 	ldr.w	r5, [r3], #4
 800636c:	d402      	bmi.n	8006374 <_printf_i+0xe8>
 800636e:	0649      	lsls	r1, r1, #25
 8006370:	bf48      	it	mi
 8006372:	b2ad      	uxthmi	r5, r5
 8006374:	2f6f      	cmp	r7, #111	@ 0x6f
 8006376:	6033      	str	r3, [r6, #0]
 8006378:	bf14      	ite	ne
 800637a:	230a      	movne	r3, #10
 800637c:	2308      	moveq	r3, #8
 800637e:	4850      	ldr	r0, [pc, #320]	@ (80064c0 <_printf_i+0x234>)
 8006380:	2100      	movs	r1, #0
 8006382:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006386:	6866      	ldr	r6, [r4, #4]
 8006388:	2e00      	cmp	r6, #0
 800638a:	60a6      	str	r6, [r4, #8]
 800638c:	db05      	blt.n	800639a <_printf_i+0x10e>
 800638e:	6821      	ldr	r1, [r4, #0]
 8006390:	432e      	orrs	r6, r5
 8006392:	f021 0104 	bic.w	r1, r1, #4
 8006396:	6021      	str	r1, [r4, #0]
 8006398:	d04b      	beq.n	8006432 <_printf_i+0x1a6>
 800639a:	4616      	mov	r6, r2
 800639c:	fbb5 f1f3 	udiv	r1, r5, r3
 80063a0:	fb03 5711 	mls	r7, r3, r1, r5
 80063a4:	5dc7      	ldrb	r7, [r0, r7]
 80063a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063aa:	462f      	mov	r7, r5
 80063ac:	42bb      	cmp	r3, r7
 80063ae:	460d      	mov	r5, r1
 80063b0:	d9f4      	bls.n	800639c <_printf_i+0x110>
 80063b2:	2b08      	cmp	r3, #8
 80063b4:	d10b      	bne.n	80063ce <_printf_i+0x142>
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	07df      	lsls	r7, r3, #31
 80063ba:	d508      	bpl.n	80063ce <_printf_i+0x142>
 80063bc:	6923      	ldr	r3, [r4, #16]
 80063be:	6861      	ldr	r1, [r4, #4]
 80063c0:	4299      	cmp	r1, r3
 80063c2:	bfde      	ittt	le
 80063c4:	2330      	movle	r3, #48	@ 0x30
 80063c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063ce:	1b92      	subs	r2, r2, r6
 80063d0:	6122      	str	r2, [r4, #16]
 80063d2:	464b      	mov	r3, r9
 80063d4:	4621      	mov	r1, r4
 80063d6:	4640      	mov	r0, r8
 80063d8:	f8cd a000 	str.w	sl, [sp]
 80063dc:	aa03      	add	r2, sp, #12
 80063de:	f7ff fee3 	bl	80061a8 <_printf_common>
 80063e2:	3001      	adds	r0, #1
 80063e4:	d14a      	bne.n	800647c <_printf_i+0x1f0>
 80063e6:	f04f 30ff 	mov.w	r0, #4294967295
 80063ea:	b004      	add	sp, #16
 80063ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	f043 0320 	orr.w	r3, r3, #32
 80063f6:	6023      	str	r3, [r4, #0]
 80063f8:	2778      	movs	r7, #120	@ 0x78
 80063fa:	4832      	ldr	r0, [pc, #200]	@ (80064c4 <_printf_i+0x238>)
 80063fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	6831      	ldr	r1, [r6, #0]
 8006404:	061f      	lsls	r7, r3, #24
 8006406:	f851 5b04 	ldr.w	r5, [r1], #4
 800640a:	d402      	bmi.n	8006412 <_printf_i+0x186>
 800640c:	065f      	lsls	r7, r3, #25
 800640e:	bf48      	it	mi
 8006410:	b2ad      	uxthmi	r5, r5
 8006412:	6031      	str	r1, [r6, #0]
 8006414:	07d9      	lsls	r1, r3, #31
 8006416:	bf44      	itt	mi
 8006418:	f043 0320 	orrmi.w	r3, r3, #32
 800641c:	6023      	strmi	r3, [r4, #0]
 800641e:	b11d      	cbz	r5, 8006428 <_printf_i+0x19c>
 8006420:	2310      	movs	r3, #16
 8006422:	e7ad      	b.n	8006380 <_printf_i+0xf4>
 8006424:	4826      	ldr	r0, [pc, #152]	@ (80064c0 <_printf_i+0x234>)
 8006426:	e7e9      	b.n	80063fc <_printf_i+0x170>
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	f023 0320 	bic.w	r3, r3, #32
 800642e:	6023      	str	r3, [r4, #0]
 8006430:	e7f6      	b.n	8006420 <_printf_i+0x194>
 8006432:	4616      	mov	r6, r2
 8006434:	e7bd      	b.n	80063b2 <_printf_i+0x126>
 8006436:	6833      	ldr	r3, [r6, #0]
 8006438:	6825      	ldr	r5, [r4, #0]
 800643a:	1d18      	adds	r0, r3, #4
 800643c:	6961      	ldr	r1, [r4, #20]
 800643e:	6030      	str	r0, [r6, #0]
 8006440:	062e      	lsls	r6, r5, #24
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	d501      	bpl.n	800644a <_printf_i+0x1be>
 8006446:	6019      	str	r1, [r3, #0]
 8006448:	e002      	b.n	8006450 <_printf_i+0x1c4>
 800644a:	0668      	lsls	r0, r5, #25
 800644c:	d5fb      	bpl.n	8006446 <_printf_i+0x1ba>
 800644e:	8019      	strh	r1, [r3, #0]
 8006450:	2300      	movs	r3, #0
 8006452:	4616      	mov	r6, r2
 8006454:	6123      	str	r3, [r4, #16]
 8006456:	e7bc      	b.n	80063d2 <_printf_i+0x146>
 8006458:	6833      	ldr	r3, [r6, #0]
 800645a:	2100      	movs	r1, #0
 800645c:	1d1a      	adds	r2, r3, #4
 800645e:	6032      	str	r2, [r6, #0]
 8006460:	681e      	ldr	r6, [r3, #0]
 8006462:	6862      	ldr	r2, [r4, #4]
 8006464:	4630      	mov	r0, r6
 8006466:	f000 f913 	bl	8006690 <memchr>
 800646a:	b108      	cbz	r0, 8006470 <_printf_i+0x1e4>
 800646c:	1b80      	subs	r0, r0, r6
 800646e:	6060      	str	r0, [r4, #4]
 8006470:	6863      	ldr	r3, [r4, #4]
 8006472:	6123      	str	r3, [r4, #16]
 8006474:	2300      	movs	r3, #0
 8006476:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800647a:	e7aa      	b.n	80063d2 <_printf_i+0x146>
 800647c:	4632      	mov	r2, r6
 800647e:	4649      	mov	r1, r9
 8006480:	4640      	mov	r0, r8
 8006482:	6923      	ldr	r3, [r4, #16]
 8006484:	47d0      	blx	sl
 8006486:	3001      	adds	r0, #1
 8006488:	d0ad      	beq.n	80063e6 <_printf_i+0x15a>
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	079b      	lsls	r3, r3, #30
 800648e:	d413      	bmi.n	80064b8 <_printf_i+0x22c>
 8006490:	68e0      	ldr	r0, [r4, #12]
 8006492:	9b03      	ldr	r3, [sp, #12]
 8006494:	4298      	cmp	r0, r3
 8006496:	bfb8      	it	lt
 8006498:	4618      	movlt	r0, r3
 800649a:	e7a6      	b.n	80063ea <_printf_i+0x15e>
 800649c:	2301      	movs	r3, #1
 800649e:	4632      	mov	r2, r6
 80064a0:	4649      	mov	r1, r9
 80064a2:	4640      	mov	r0, r8
 80064a4:	47d0      	blx	sl
 80064a6:	3001      	adds	r0, #1
 80064a8:	d09d      	beq.n	80063e6 <_printf_i+0x15a>
 80064aa:	3501      	adds	r5, #1
 80064ac:	68e3      	ldr	r3, [r4, #12]
 80064ae:	9903      	ldr	r1, [sp, #12]
 80064b0:	1a5b      	subs	r3, r3, r1
 80064b2:	42ab      	cmp	r3, r5
 80064b4:	dcf2      	bgt.n	800649c <_printf_i+0x210>
 80064b6:	e7eb      	b.n	8006490 <_printf_i+0x204>
 80064b8:	2500      	movs	r5, #0
 80064ba:	f104 0619 	add.w	r6, r4, #25
 80064be:	e7f5      	b.n	80064ac <_printf_i+0x220>
 80064c0:	08008462 	.word	0x08008462
 80064c4:	08008473 	.word	0x08008473

080064c8 <__sflush_r>:
 80064c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ce:	0716      	lsls	r6, r2, #28
 80064d0:	4605      	mov	r5, r0
 80064d2:	460c      	mov	r4, r1
 80064d4:	d454      	bmi.n	8006580 <__sflush_r+0xb8>
 80064d6:	684b      	ldr	r3, [r1, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	dc02      	bgt.n	80064e2 <__sflush_r+0x1a>
 80064dc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80064de:	2b00      	cmp	r3, #0
 80064e0:	dd48      	ble.n	8006574 <__sflush_r+0xac>
 80064e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064e4:	2e00      	cmp	r6, #0
 80064e6:	d045      	beq.n	8006574 <__sflush_r+0xac>
 80064e8:	2300      	movs	r3, #0
 80064ea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80064ee:	682f      	ldr	r7, [r5, #0]
 80064f0:	6a21      	ldr	r1, [r4, #32]
 80064f2:	602b      	str	r3, [r5, #0]
 80064f4:	d030      	beq.n	8006558 <__sflush_r+0x90>
 80064f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064f8:	89a3      	ldrh	r3, [r4, #12]
 80064fa:	0759      	lsls	r1, r3, #29
 80064fc:	d505      	bpl.n	800650a <__sflush_r+0x42>
 80064fe:	6863      	ldr	r3, [r4, #4]
 8006500:	1ad2      	subs	r2, r2, r3
 8006502:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006504:	b10b      	cbz	r3, 800650a <__sflush_r+0x42>
 8006506:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006508:	1ad2      	subs	r2, r2, r3
 800650a:	2300      	movs	r3, #0
 800650c:	4628      	mov	r0, r5
 800650e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006510:	6a21      	ldr	r1, [r4, #32]
 8006512:	47b0      	blx	r6
 8006514:	1c43      	adds	r3, r0, #1
 8006516:	89a3      	ldrh	r3, [r4, #12]
 8006518:	d106      	bne.n	8006528 <__sflush_r+0x60>
 800651a:	6829      	ldr	r1, [r5, #0]
 800651c:	291d      	cmp	r1, #29
 800651e:	d82b      	bhi.n	8006578 <__sflush_r+0xb0>
 8006520:	4a28      	ldr	r2, [pc, #160]	@ (80065c4 <__sflush_r+0xfc>)
 8006522:	40ca      	lsrs	r2, r1
 8006524:	07d6      	lsls	r6, r2, #31
 8006526:	d527      	bpl.n	8006578 <__sflush_r+0xb0>
 8006528:	2200      	movs	r2, #0
 800652a:	6062      	str	r2, [r4, #4]
 800652c:	6922      	ldr	r2, [r4, #16]
 800652e:	04d9      	lsls	r1, r3, #19
 8006530:	6022      	str	r2, [r4, #0]
 8006532:	d504      	bpl.n	800653e <__sflush_r+0x76>
 8006534:	1c42      	adds	r2, r0, #1
 8006536:	d101      	bne.n	800653c <__sflush_r+0x74>
 8006538:	682b      	ldr	r3, [r5, #0]
 800653a:	b903      	cbnz	r3, 800653e <__sflush_r+0x76>
 800653c:	6560      	str	r0, [r4, #84]	@ 0x54
 800653e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006540:	602f      	str	r7, [r5, #0]
 8006542:	b1b9      	cbz	r1, 8006574 <__sflush_r+0xac>
 8006544:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006548:	4299      	cmp	r1, r3
 800654a:	d002      	beq.n	8006552 <__sflush_r+0x8a>
 800654c:	4628      	mov	r0, r5
 800654e:	f7ff fbd5 	bl	8005cfc <_free_r>
 8006552:	2300      	movs	r3, #0
 8006554:	6363      	str	r3, [r4, #52]	@ 0x34
 8006556:	e00d      	b.n	8006574 <__sflush_r+0xac>
 8006558:	2301      	movs	r3, #1
 800655a:	4628      	mov	r0, r5
 800655c:	47b0      	blx	r6
 800655e:	4602      	mov	r2, r0
 8006560:	1c50      	adds	r0, r2, #1
 8006562:	d1c9      	bne.n	80064f8 <__sflush_r+0x30>
 8006564:	682b      	ldr	r3, [r5, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0c6      	beq.n	80064f8 <__sflush_r+0x30>
 800656a:	2b1d      	cmp	r3, #29
 800656c:	d001      	beq.n	8006572 <__sflush_r+0xaa>
 800656e:	2b16      	cmp	r3, #22
 8006570:	d11d      	bne.n	80065ae <__sflush_r+0xe6>
 8006572:	602f      	str	r7, [r5, #0]
 8006574:	2000      	movs	r0, #0
 8006576:	e021      	b.n	80065bc <__sflush_r+0xf4>
 8006578:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800657c:	b21b      	sxth	r3, r3
 800657e:	e01a      	b.n	80065b6 <__sflush_r+0xee>
 8006580:	690f      	ldr	r7, [r1, #16]
 8006582:	2f00      	cmp	r7, #0
 8006584:	d0f6      	beq.n	8006574 <__sflush_r+0xac>
 8006586:	0793      	lsls	r3, r2, #30
 8006588:	bf18      	it	ne
 800658a:	2300      	movne	r3, #0
 800658c:	680e      	ldr	r6, [r1, #0]
 800658e:	bf08      	it	eq
 8006590:	694b      	ldreq	r3, [r1, #20]
 8006592:	1bf6      	subs	r6, r6, r7
 8006594:	600f      	str	r7, [r1, #0]
 8006596:	608b      	str	r3, [r1, #8]
 8006598:	2e00      	cmp	r6, #0
 800659a:	ddeb      	ble.n	8006574 <__sflush_r+0xac>
 800659c:	4633      	mov	r3, r6
 800659e:	463a      	mov	r2, r7
 80065a0:	4628      	mov	r0, r5
 80065a2:	6a21      	ldr	r1, [r4, #32]
 80065a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80065a8:	47e0      	blx	ip
 80065aa:	2800      	cmp	r0, #0
 80065ac:	dc07      	bgt.n	80065be <__sflush_r+0xf6>
 80065ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065b6:	f04f 30ff 	mov.w	r0, #4294967295
 80065ba:	81a3      	strh	r3, [r4, #12]
 80065bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065be:	4407      	add	r7, r0
 80065c0:	1a36      	subs	r6, r6, r0
 80065c2:	e7e9      	b.n	8006598 <__sflush_r+0xd0>
 80065c4:	20400001 	.word	0x20400001

080065c8 <_fflush_r>:
 80065c8:	b538      	push	{r3, r4, r5, lr}
 80065ca:	690b      	ldr	r3, [r1, #16]
 80065cc:	4605      	mov	r5, r0
 80065ce:	460c      	mov	r4, r1
 80065d0:	b913      	cbnz	r3, 80065d8 <_fflush_r+0x10>
 80065d2:	2500      	movs	r5, #0
 80065d4:	4628      	mov	r0, r5
 80065d6:	bd38      	pop	{r3, r4, r5, pc}
 80065d8:	b118      	cbz	r0, 80065e2 <_fflush_r+0x1a>
 80065da:	6a03      	ldr	r3, [r0, #32]
 80065dc:	b90b      	cbnz	r3, 80065e2 <_fflush_r+0x1a>
 80065de:	f7ff fa49 	bl	8005a74 <__sinit>
 80065e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d0f3      	beq.n	80065d2 <_fflush_r+0xa>
 80065ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80065ec:	07d0      	lsls	r0, r2, #31
 80065ee:	d404      	bmi.n	80065fa <_fflush_r+0x32>
 80065f0:	0599      	lsls	r1, r3, #22
 80065f2:	d402      	bmi.n	80065fa <_fflush_r+0x32>
 80065f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065f6:	f7ff fb52 	bl	8005c9e <__retarget_lock_acquire_recursive>
 80065fa:	4628      	mov	r0, r5
 80065fc:	4621      	mov	r1, r4
 80065fe:	f7ff ff63 	bl	80064c8 <__sflush_r>
 8006602:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006604:	4605      	mov	r5, r0
 8006606:	07da      	lsls	r2, r3, #31
 8006608:	d4e4      	bmi.n	80065d4 <_fflush_r+0xc>
 800660a:	89a3      	ldrh	r3, [r4, #12]
 800660c:	059b      	lsls	r3, r3, #22
 800660e:	d4e1      	bmi.n	80065d4 <_fflush_r+0xc>
 8006610:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006612:	f7ff fb45 	bl	8005ca0 <__retarget_lock_release_recursive>
 8006616:	e7dd      	b.n	80065d4 <_fflush_r+0xc>

08006618 <fiprintf>:
 8006618:	b40e      	push	{r1, r2, r3}
 800661a:	b503      	push	{r0, r1, lr}
 800661c:	4601      	mov	r1, r0
 800661e:	ab03      	add	r3, sp, #12
 8006620:	4805      	ldr	r0, [pc, #20]	@ (8006638 <fiprintf+0x20>)
 8006622:	f853 2b04 	ldr.w	r2, [r3], #4
 8006626:	6800      	ldr	r0, [r0, #0]
 8006628:	9301      	str	r3, [sp, #4]
 800662a:	f000 f89b 	bl	8006764 <_vfiprintf_r>
 800662e:	b002      	add	sp, #8
 8006630:	f85d eb04 	ldr.w	lr, [sp], #4
 8006634:	b003      	add	sp, #12
 8006636:	4770      	bx	lr
 8006638:	2000002c 	.word	0x2000002c

0800663c <memmove>:
 800663c:	4288      	cmp	r0, r1
 800663e:	b510      	push	{r4, lr}
 8006640:	eb01 0402 	add.w	r4, r1, r2
 8006644:	d902      	bls.n	800664c <memmove+0x10>
 8006646:	4284      	cmp	r4, r0
 8006648:	4623      	mov	r3, r4
 800664a:	d807      	bhi.n	800665c <memmove+0x20>
 800664c:	1e43      	subs	r3, r0, #1
 800664e:	42a1      	cmp	r1, r4
 8006650:	d008      	beq.n	8006664 <memmove+0x28>
 8006652:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006656:	f803 2f01 	strb.w	r2, [r3, #1]!
 800665a:	e7f8      	b.n	800664e <memmove+0x12>
 800665c:	4601      	mov	r1, r0
 800665e:	4402      	add	r2, r0
 8006660:	428a      	cmp	r2, r1
 8006662:	d100      	bne.n	8006666 <memmove+0x2a>
 8006664:	bd10      	pop	{r4, pc}
 8006666:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800666a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800666e:	e7f7      	b.n	8006660 <memmove+0x24>

08006670 <_sbrk_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	2300      	movs	r3, #0
 8006674:	4d05      	ldr	r5, [pc, #20]	@ (800668c <_sbrk_r+0x1c>)
 8006676:	4604      	mov	r4, r0
 8006678:	4608      	mov	r0, r1
 800667a:	602b      	str	r3, [r5, #0]
 800667c:	f7fc fa90 	bl	8002ba0 <_sbrk>
 8006680:	1c43      	adds	r3, r0, #1
 8006682:	d102      	bne.n	800668a <_sbrk_r+0x1a>
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	b103      	cbz	r3, 800668a <_sbrk_r+0x1a>
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	bd38      	pop	{r3, r4, r5, pc}
 800668c:	200040c0 	.word	0x200040c0

08006690 <memchr>:
 8006690:	4603      	mov	r3, r0
 8006692:	b510      	push	{r4, lr}
 8006694:	b2c9      	uxtb	r1, r1
 8006696:	4402      	add	r2, r0
 8006698:	4293      	cmp	r3, r2
 800669a:	4618      	mov	r0, r3
 800669c:	d101      	bne.n	80066a2 <memchr+0x12>
 800669e:	2000      	movs	r0, #0
 80066a0:	e003      	b.n	80066aa <memchr+0x1a>
 80066a2:	7804      	ldrb	r4, [r0, #0]
 80066a4:	3301      	adds	r3, #1
 80066a6:	428c      	cmp	r4, r1
 80066a8:	d1f6      	bne.n	8006698 <memchr+0x8>
 80066aa:	bd10      	pop	{r4, pc}

080066ac <abort>:
 80066ac:	2006      	movs	r0, #6
 80066ae:	b508      	push	{r3, lr}
 80066b0:	f000 fa2c 	bl	8006b0c <raise>
 80066b4:	2001      	movs	r0, #1
 80066b6:	f7fc f9fe 	bl	8002ab6 <_exit>

080066ba <_realloc_r>:
 80066ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066be:	4607      	mov	r7, r0
 80066c0:	4614      	mov	r4, r2
 80066c2:	460d      	mov	r5, r1
 80066c4:	b921      	cbnz	r1, 80066d0 <_realloc_r+0x16>
 80066c6:	4611      	mov	r1, r2
 80066c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066cc:	f7ff bb88 	b.w	8005de0 <_malloc_r>
 80066d0:	b92a      	cbnz	r2, 80066de <_realloc_r+0x24>
 80066d2:	f7ff fb13 	bl	8005cfc <_free_r>
 80066d6:	4625      	mov	r5, r4
 80066d8:	4628      	mov	r0, r5
 80066da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066de:	f000 fa31 	bl	8006b44 <_malloc_usable_size_r>
 80066e2:	4284      	cmp	r4, r0
 80066e4:	4606      	mov	r6, r0
 80066e6:	d802      	bhi.n	80066ee <_realloc_r+0x34>
 80066e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80066ec:	d8f4      	bhi.n	80066d8 <_realloc_r+0x1e>
 80066ee:	4621      	mov	r1, r4
 80066f0:	4638      	mov	r0, r7
 80066f2:	f7ff fb75 	bl	8005de0 <_malloc_r>
 80066f6:	4680      	mov	r8, r0
 80066f8:	b908      	cbnz	r0, 80066fe <_realloc_r+0x44>
 80066fa:	4645      	mov	r5, r8
 80066fc:	e7ec      	b.n	80066d8 <_realloc_r+0x1e>
 80066fe:	42b4      	cmp	r4, r6
 8006700:	4622      	mov	r2, r4
 8006702:	4629      	mov	r1, r5
 8006704:	bf28      	it	cs
 8006706:	4632      	movcs	r2, r6
 8006708:	f7ff facb 	bl	8005ca2 <memcpy>
 800670c:	4629      	mov	r1, r5
 800670e:	4638      	mov	r0, r7
 8006710:	f7ff faf4 	bl	8005cfc <_free_r>
 8006714:	e7f1      	b.n	80066fa <_realloc_r+0x40>

08006716 <__sfputc_r>:
 8006716:	6893      	ldr	r3, [r2, #8]
 8006718:	b410      	push	{r4}
 800671a:	3b01      	subs	r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	6093      	str	r3, [r2, #8]
 8006720:	da07      	bge.n	8006732 <__sfputc_r+0x1c>
 8006722:	6994      	ldr	r4, [r2, #24]
 8006724:	42a3      	cmp	r3, r4
 8006726:	db01      	blt.n	800672c <__sfputc_r+0x16>
 8006728:	290a      	cmp	r1, #10
 800672a:	d102      	bne.n	8006732 <__sfputc_r+0x1c>
 800672c:	bc10      	pop	{r4}
 800672e:	f000 b931 	b.w	8006994 <__swbuf_r>
 8006732:	6813      	ldr	r3, [r2, #0]
 8006734:	1c58      	adds	r0, r3, #1
 8006736:	6010      	str	r0, [r2, #0]
 8006738:	7019      	strb	r1, [r3, #0]
 800673a:	4608      	mov	r0, r1
 800673c:	bc10      	pop	{r4}
 800673e:	4770      	bx	lr

08006740 <__sfputs_r>:
 8006740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006742:	4606      	mov	r6, r0
 8006744:	460f      	mov	r7, r1
 8006746:	4614      	mov	r4, r2
 8006748:	18d5      	adds	r5, r2, r3
 800674a:	42ac      	cmp	r4, r5
 800674c:	d101      	bne.n	8006752 <__sfputs_r+0x12>
 800674e:	2000      	movs	r0, #0
 8006750:	e007      	b.n	8006762 <__sfputs_r+0x22>
 8006752:	463a      	mov	r2, r7
 8006754:	4630      	mov	r0, r6
 8006756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800675a:	f7ff ffdc 	bl	8006716 <__sfputc_r>
 800675e:	1c43      	adds	r3, r0, #1
 8006760:	d1f3      	bne.n	800674a <__sfputs_r+0xa>
 8006762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006764 <_vfiprintf_r>:
 8006764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006768:	460d      	mov	r5, r1
 800676a:	4614      	mov	r4, r2
 800676c:	4698      	mov	r8, r3
 800676e:	4606      	mov	r6, r0
 8006770:	b09d      	sub	sp, #116	@ 0x74
 8006772:	b118      	cbz	r0, 800677c <_vfiprintf_r+0x18>
 8006774:	6a03      	ldr	r3, [r0, #32]
 8006776:	b90b      	cbnz	r3, 800677c <_vfiprintf_r+0x18>
 8006778:	f7ff f97c 	bl	8005a74 <__sinit>
 800677c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800677e:	07d9      	lsls	r1, r3, #31
 8006780:	d405      	bmi.n	800678e <_vfiprintf_r+0x2a>
 8006782:	89ab      	ldrh	r3, [r5, #12]
 8006784:	059a      	lsls	r2, r3, #22
 8006786:	d402      	bmi.n	800678e <_vfiprintf_r+0x2a>
 8006788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800678a:	f7ff fa88 	bl	8005c9e <__retarget_lock_acquire_recursive>
 800678e:	89ab      	ldrh	r3, [r5, #12]
 8006790:	071b      	lsls	r3, r3, #28
 8006792:	d501      	bpl.n	8006798 <_vfiprintf_r+0x34>
 8006794:	692b      	ldr	r3, [r5, #16]
 8006796:	b99b      	cbnz	r3, 80067c0 <_vfiprintf_r+0x5c>
 8006798:	4629      	mov	r1, r5
 800679a:	4630      	mov	r0, r6
 800679c:	f000 f938 	bl	8006a10 <__swsetup_r>
 80067a0:	b170      	cbz	r0, 80067c0 <_vfiprintf_r+0x5c>
 80067a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067a4:	07dc      	lsls	r4, r3, #31
 80067a6:	d504      	bpl.n	80067b2 <_vfiprintf_r+0x4e>
 80067a8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ac:	b01d      	add	sp, #116	@ 0x74
 80067ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b2:	89ab      	ldrh	r3, [r5, #12]
 80067b4:	0598      	lsls	r0, r3, #22
 80067b6:	d4f7      	bmi.n	80067a8 <_vfiprintf_r+0x44>
 80067b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067ba:	f7ff fa71 	bl	8005ca0 <__retarget_lock_release_recursive>
 80067be:	e7f3      	b.n	80067a8 <_vfiprintf_r+0x44>
 80067c0:	2300      	movs	r3, #0
 80067c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80067c4:	2320      	movs	r3, #32
 80067c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80067ca:	2330      	movs	r3, #48	@ 0x30
 80067cc:	f04f 0901 	mov.w	r9, #1
 80067d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80067d4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006980 <_vfiprintf_r+0x21c>
 80067d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80067dc:	4623      	mov	r3, r4
 80067de:	469a      	mov	sl, r3
 80067e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067e4:	b10a      	cbz	r2, 80067ea <_vfiprintf_r+0x86>
 80067e6:	2a25      	cmp	r2, #37	@ 0x25
 80067e8:	d1f9      	bne.n	80067de <_vfiprintf_r+0x7a>
 80067ea:	ebba 0b04 	subs.w	fp, sl, r4
 80067ee:	d00b      	beq.n	8006808 <_vfiprintf_r+0xa4>
 80067f0:	465b      	mov	r3, fp
 80067f2:	4622      	mov	r2, r4
 80067f4:	4629      	mov	r1, r5
 80067f6:	4630      	mov	r0, r6
 80067f8:	f7ff ffa2 	bl	8006740 <__sfputs_r>
 80067fc:	3001      	adds	r0, #1
 80067fe:	f000 80a7 	beq.w	8006950 <_vfiprintf_r+0x1ec>
 8006802:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006804:	445a      	add	r2, fp
 8006806:	9209      	str	r2, [sp, #36]	@ 0x24
 8006808:	f89a 3000 	ldrb.w	r3, [sl]
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 809f 	beq.w	8006950 <_vfiprintf_r+0x1ec>
 8006812:	2300      	movs	r3, #0
 8006814:	f04f 32ff 	mov.w	r2, #4294967295
 8006818:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800681c:	f10a 0a01 	add.w	sl, sl, #1
 8006820:	9304      	str	r3, [sp, #16]
 8006822:	9307      	str	r3, [sp, #28]
 8006824:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006828:	931a      	str	r3, [sp, #104]	@ 0x68
 800682a:	4654      	mov	r4, sl
 800682c:	2205      	movs	r2, #5
 800682e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006832:	4853      	ldr	r0, [pc, #332]	@ (8006980 <_vfiprintf_r+0x21c>)
 8006834:	f7ff ff2c 	bl	8006690 <memchr>
 8006838:	9a04      	ldr	r2, [sp, #16]
 800683a:	b9d8      	cbnz	r0, 8006874 <_vfiprintf_r+0x110>
 800683c:	06d1      	lsls	r1, r2, #27
 800683e:	bf44      	itt	mi
 8006840:	2320      	movmi	r3, #32
 8006842:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006846:	0713      	lsls	r3, r2, #28
 8006848:	bf44      	itt	mi
 800684a:	232b      	movmi	r3, #43	@ 0x2b
 800684c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006850:	f89a 3000 	ldrb.w	r3, [sl]
 8006854:	2b2a      	cmp	r3, #42	@ 0x2a
 8006856:	d015      	beq.n	8006884 <_vfiprintf_r+0x120>
 8006858:	4654      	mov	r4, sl
 800685a:	2000      	movs	r0, #0
 800685c:	f04f 0c0a 	mov.w	ip, #10
 8006860:	9a07      	ldr	r2, [sp, #28]
 8006862:	4621      	mov	r1, r4
 8006864:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006868:	3b30      	subs	r3, #48	@ 0x30
 800686a:	2b09      	cmp	r3, #9
 800686c:	d94b      	bls.n	8006906 <_vfiprintf_r+0x1a2>
 800686e:	b1b0      	cbz	r0, 800689e <_vfiprintf_r+0x13a>
 8006870:	9207      	str	r2, [sp, #28]
 8006872:	e014      	b.n	800689e <_vfiprintf_r+0x13a>
 8006874:	eba0 0308 	sub.w	r3, r0, r8
 8006878:	fa09 f303 	lsl.w	r3, r9, r3
 800687c:	4313      	orrs	r3, r2
 800687e:	46a2      	mov	sl, r4
 8006880:	9304      	str	r3, [sp, #16]
 8006882:	e7d2      	b.n	800682a <_vfiprintf_r+0xc6>
 8006884:	9b03      	ldr	r3, [sp, #12]
 8006886:	1d19      	adds	r1, r3, #4
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	9103      	str	r1, [sp, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	bfbb      	ittet	lt
 8006890:	425b      	neglt	r3, r3
 8006892:	f042 0202 	orrlt.w	r2, r2, #2
 8006896:	9307      	strge	r3, [sp, #28]
 8006898:	9307      	strlt	r3, [sp, #28]
 800689a:	bfb8      	it	lt
 800689c:	9204      	strlt	r2, [sp, #16]
 800689e:	7823      	ldrb	r3, [r4, #0]
 80068a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80068a2:	d10a      	bne.n	80068ba <_vfiprintf_r+0x156>
 80068a4:	7863      	ldrb	r3, [r4, #1]
 80068a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80068a8:	d132      	bne.n	8006910 <_vfiprintf_r+0x1ac>
 80068aa:	9b03      	ldr	r3, [sp, #12]
 80068ac:	3402      	adds	r4, #2
 80068ae:	1d1a      	adds	r2, r3, #4
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	9203      	str	r2, [sp, #12]
 80068b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80068b8:	9305      	str	r3, [sp, #20]
 80068ba:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006984 <_vfiprintf_r+0x220>
 80068be:	2203      	movs	r2, #3
 80068c0:	4650      	mov	r0, sl
 80068c2:	7821      	ldrb	r1, [r4, #0]
 80068c4:	f7ff fee4 	bl	8006690 <memchr>
 80068c8:	b138      	cbz	r0, 80068da <_vfiprintf_r+0x176>
 80068ca:	2240      	movs	r2, #64	@ 0x40
 80068cc:	9b04      	ldr	r3, [sp, #16]
 80068ce:	eba0 000a 	sub.w	r0, r0, sl
 80068d2:	4082      	lsls	r2, r0
 80068d4:	4313      	orrs	r3, r2
 80068d6:	3401      	adds	r4, #1
 80068d8:	9304      	str	r3, [sp, #16]
 80068da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068de:	2206      	movs	r2, #6
 80068e0:	4829      	ldr	r0, [pc, #164]	@ (8006988 <_vfiprintf_r+0x224>)
 80068e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80068e6:	f7ff fed3 	bl	8006690 <memchr>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	d03f      	beq.n	800696e <_vfiprintf_r+0x20a>
 80068ee:	4b27      	ldr	r3, [pc, #156]	@ (800698c <_vfiprintf_r+0x228>)
 80068f0:	bb1b      	cbnz	r3, 800693a <_vfiprintf_r+0x1d6>
 80068f2:	9b03      	ldr	r3, [sp, #12]
 80068f4:	3307      	adds	r3, #7
 80068f6:	f023 0307 	bic.w	r3, r3, #7
 80068fa:	3308      	adds	r3, #8
 80068fc:	9303      	str	r3, [sp, #12]
 80068fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006900:	443b      	add	r3, r7
 8006902:	9309      	str	r3, [sp, #36]	@ 0x24
 8006904:	e76a      	b.n	80067dc <_vfiprintf_r+0x78>
 8006906:	460c      	mov	r4, r1
 8006908:	2001      	movs	r0, #1
 800690a:	fb0c 3202 	mla	r2, ip, r2, r3
 800690e:	e7a8      	b.n	8006862 <_vfiprintf_r+0xfe>
 8006910:	2300      	movs	r3, #0
 8006912:	f04f 0c0a 	mov.w	ip, #10
 8006916:	4619      	mov	r1, r3
 8006918:	3401      	adds	r4, #1
 800691a:	9305      	str	r3, [sp, #20]
 800691c:	4620      	mov	r0, r4
 800691e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006922:	3a30      	subs	r2, #48	@ 0x30
 8006924:	2a09      	cmp	r2, #9
 8006926:	d903      	bls.n	8006930 <_vfiprintf_r+0x1cc>
 8006928:	2b00      	cmp	r3, #0
 800692a:	d0c6      	beq.n	80068ba <_vfiprintf_r+0x156>
 800692c:	9105      	str	r1, [sp, #20]
 800692e:	e7c4      	b.n	80068ba <_vfiprintf_r+0x156>
 8006930:	4604      	mov	r4, r0
 8006932:	2301      	movs	r3, #1
 8006934:	fb0c 2101 	mla	r1, ip, r1, r2
 8006938:	e7f0      	b.n	800691c <_vfiprintf_r+0x1b8>
 800693a:	ab03      	add	r3, sp, #12
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	462a      	mov	r2, r5
 8006940:	4630      	mov	r0, r6
 8006942:	4b13      	ldr	r3, [pc, #76]	@ (8006990 <_vfiprintf_r+0x22c>)
 8006944:	a904      	add	r1, sp, #16
 8006946:	f3af 8000 	nop.w
 800694a:	4607      	mov	r7, r0
 800694c:	1c78      	adds	r0, r7, #1
 800694e:	d1d6      	bne.n	80068fe <_vfiprintf_r+0x19a>
 8006950:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006952:	07d9      	lsls	r1, r3, #31
 8006954:	d405      	bmi.n	8006962 <_vfiprintf_r+0x1fe>
 8006956:	89ab      	ldrh	r3, [r5, #12]
 8006958:	059a      	lsls	r2, r3, #22
 800695a:	d402      	bmi.n	8006962 <_vfiprintf_r+0x1fe>
 800695c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800695e:	f7ff f99f 	bl	8005ca0 <__retarget_lock_release_recursive>
 8006962:	89ab      	ldrh	r3, [r5, #12]
 8006964:	065b      	lsls	r3, r3, #25
 8006966:	f53f af1f 	bmi.w	80067a8 <_vfiprintf_r+0x44>
 800696a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800696c:	e71e      	b.n	80067ac <_vfiprintf_r+0x48>
 800696e:	ab03      	add	r3, sp, #12
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	462a      	mov	r2, r5
 8006974:	4630      	mov	r0, r6
 8006976:	4b06      	ldr	r3, [pc, #24]	@ (8006990 <_vfiprintf_r+0x22c>)
 8006978:	a904      	add	r1, sp, #16
 800697a:	f7ff fc87 	bl	800628c <_printf_i>
 800697e:	e7e4      	b.n	800694a <_vfiprintf_r+0x1e6>
 8006980:	08008451 	.word	0x08008451
 8006984:	08008457 	.word	0x08008457
 8006988:	0800845b 	.word	0x0800845b
 800698c:	00000000 	.word	0x00000000
 8006990:	08006741 	.word	0x08006741

08006994 <__swbuf_r>:
 8006994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006996:	460e      	mov	r6, r1
 8006998:	4614      	mov	r4, r2
 800699a:	4605      	mov	r5, r0
 800699c:	b118      	cbz	r0, 80069a6 <__swbuf_r+0x12>
 800699e:	6a03      	ldr	r3, [r0, #32]
 80069a0:	b90b      	cbnz	r3, 80069a6 <__swbuf_r+0x12>
 80069a2:	f7ff f867 	bl	8005a74 <__sinit>
 80069a6:	69a3      	ldr	r3, [r4, #24]
 80069a8:	60a3      	str	r3, [r4, #8]
 80069aa:	89a3      	ldrh	r3, [r4, #12]
 80069ac:	071a      	lsls	r2, r3, #28
 80069ae:	d501      	bpl.n	80069b4 <__swbuf_r+0x20>
 80069b0:	6923      	ldr	r3, [r4, #16]
 80069b2:	b943      	cbnz	r3, 80069c6 <__swbuf_r+0x32>
 80069b4:	4621      	mov	r1, r4
 80069b6:	4628      	mov	r0, r5
 80069b8:	f000 f82a 	bl	8006a10 <__swsetup_r>
 80069bc:	b118      	cbz	r0, 80069c6 <__swbuf_r+0x32>
 80069be:	f04f 37ff 	mov.w	r7, #4294967295
 80069c2:	4638      	mov	r0, r7
 80069c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	6922      	ldr	r2, [r4, #16]
 80069ca:	b2f6      	uxtb	r6, r6
 80069cc:	1a98      	subs	r0, r3, r2
 80069ce:	6963      	ldr	r3, [r4, #20]
 80069d0:	4637      	mov	r7, r6
 80069d2:	4283      	cmp	r3, r0
 80069d4:	dc05      	bgt.n	80069e2 <__swbuf_r+0x4e>
 80069d6:	4621      	mov	r1, r4
 80069d8:	4628      	mov	r0, r5
 80069da:	f7ff fdf5 	bl	80065c8 <_fflush_r>
 80069de:	2800      	cmp	r0, #0
 80069e0:	d1ed      	bne.n	80069be <__swbuf_r+0x2a>
 80069e2:	68a3      	ldr	r3, [r4, #8]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	60a3      	str	r3, [r4, #8]
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	1c5a      	adds	r2, r3, #1
 80069ec:	6022      	str	r2, [r4, #0]
 80069ee:	701e      	strb	r6, [r3, #0]
 80069f0:	6962      	ldr	r2, [r4, #20]
 80069f2:	1c43      	adds	r3, r0, #1
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d004      	beq.n	8006a02 <__swbuf_r+0x6e>
 80069f8:	89a3      	ldrh	r3, [r4, #12]
 80069fa:	07db      	lsls	r3, r3, #31
 80069fc:	d5e1      	bpl.n	80069c2 <__swbuf_r+0x2e>
 80069fe:	2e0a      	cmp	r6, #10
 8006a00:	d1df      	bne.n	80069c2 <__swbuf_r+0x2e>
 8006a02:	4621      	mov	r1, r4
 8006a04:	4628      	mov	r0, r5
 8006a06:	f7ff fddf 	bl	80065c8 <_fflush_r>
 8006a0a:	2800      	cmp	r0, #0
 8006a0c:	d0d9      	beq.n	80069c2 <__swbuf_r+0x2e>
 8006a0e:	e7d6      	b.n	80069be <__swbuf_r+0x2a>

08006a10 <__swsetup_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	4b29      	ldr	r3, [pc, #164]	@ (8006ab8 <__swsetup_r+0xa8>)
 8006a14:	4605      	mov	r5, r0
 8006a16:	6818      	ldr	r0, [r3, #0]
 8006a18:	460c      	mov	r4, r1
 8006a1a:	b118      	cbz	r0, 8006a24 <__swsetup_r+0x14>
 8006a1c:	6a03      	ldr	r3, [r0, #32]
 8006a1e:	b90b      	cbnz	r3, 8006a24 <__swsetup_r+0x14>
 8006a20:	f7ff f828 	bl	8005a74 <__sinit>
 8006a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a28:	0719      	lsls	r1, r3, #28
 8006a2a:	d422      	bmi.n	8006a72 <__swsetup_r+0x62>
 8006a2c:	06da      	lsls	r2, r3, #27
 8006a2e:	d407      	bmi.n	8006a40 <__swsetup_r+0x30>
 8006a30:	2209      	movs	r2, #9
 8006a32:	602a      	str	r2, [r5, #0]
 8006a34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a38:	f04f 30ff 	mov.w	r0, #4294967295
 8006a3c:	81a3      	strh	r3, [r4, #12]
 8006a3e:	e033      	b.n	8006aa8 <__swsetup_r+0x98>
 8006a40:	0758      	lsls	r0, r3, #29
 8006a42:	d512      	bpl.n	8006a6a <__swsetup_r+0x5a>
 8006a44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a46:	b141      	cbz	r1, 8006a5a <__swsetup_r+0x4a>
 8006a48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a4c:	4299      	cmp	r1, r3
 8006a4e:	d002      	beq.n	8006a56 <__swsetup_r+0x46>
 8006a50:	4628      	mov	r0, r5
 8006a52:	f7ff f953 	bl	8005cfc <_free_r>
 8006a56:	2300      	movs	r3, #0
 8006a58:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a5a:	89a3      	ldrh	r3, [r4, #12]
 8006a5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a60:	81a3      	strh	r3, [r4, #12]
 8006a62:	2300      	movs	r3, #0
 8006a64:	6063      	str	r3, [r4, #4]
 8006a66:	6923      	ldr	r3, [r4, #16]
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	89a3      	ldrh	r3, [r4, #12]
 8006a6c:	f043 0308 	orr.w	r3, r3, #8
 8006a70:	81a3      	strh	r3, [r4, #12]
 8006a72:	6923      	ldr	r3, [r4, #16]
 8006a74:	b94b      	cbnz	r3, 8006a8a <__swsetup_r+0x7a>
 8006a76:	89a3      	ldrh	r3, [r4, #12]
 8006a78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a80:	d003      	beq.n	8006a8a <__swsetup_r+0x7a>
 8006a82:	4621      	mov	r1, r4
 8006a84:	4628      	mov	r0, r5
 8006a86:	f000 f88a 	bl	8006b9e <__smakebuf_r>
 8006a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a8e:	f013 0201 	ands.w	r2, r3, #1
 8006a92:	d00a      	beq.n	8006aaa <__swsetup_r+0x9a>
 8006a94:	2200      	movs	r2, #0
 8006a96:	60a2      	str	r2, [r4, #8]
 8006a98:	6962      	ldr	r2, [r4, #20]
 8006a9a:	4252      	negs	r2, r2
 8006a9c:	61a2      	str	r2, [r4, #24]
 8006a9e:	6922      	ldr	r2, [r4, #16]
 8006aa0:	b942      	cbnz	r2, 8006ab4 <__swsetup_r+0xa4>
 8006aa2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006aa6:	d1c5      	bne.n	8006a34 <__swsetup_r+0x24>
 8006aa8:	bd38      	pop	{r3, r4, r5, pc}
 8006aaa:	0799      	lsls	r1, r3, #30
 8006aac:	bf58      	it	pl
 8006aae:	6962      	ldrpl	r2, [r4, #20]
 8006ab0:	60a2      	str	r2, [r4, #8]
 8006ab2:	e7f4      	b.n	8006a9e <__swsetup_r+0x8e>
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	e7f7      	b.n	8006aa8 <__swsetup_r+0x98>
 8006ab8:	2000002c 	.word	0x2000002c

08006abc <_raise_r>:
 8006abc:	291f      	cmp	r1, #31
 8006abe:	b538      	push	{r3, r4, r5, lr}
 8006ac0:	4605      	mov	r5, r0
 8006ac2:	460c      	mov	r4, r1
 8006ac4:	d904      	bls.n	8006ad0 <_raise_r+0x14>
 8006ac6:	2316      	movs	r3, #22
 8006ac8:	6003      	str	r3, [r0, #0]
 8006aca:	f04f 30ff 	mov.w	r0, #4294967295
 8006ace:	bd38      	pop	{r3, r4, r5, pc}
 8006ad0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006ad2:	b112      	cbz	r2, 8006ada <_raise_r+0x1e>
 8006ad4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ad8:	b94b      	cbnz	r3, 8006aee <_raise_r+0x32>
 8006ada:	4628      	mov	r0, r5
 8006adc:	f000 f830 	bl	8006b40 <_getpid_r>
 8006ae0:	4622      	mov	r2, r4
 8006ae2:	4601      	mov	r1, r0
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006aea:	f000 b817 	b.w	8006b1c <_kill_r>
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d00a      	beq.n	8006b08 <_raise_r+0x4c>
 8006af2:	1c59      	adds	r1, r3, #1
 8006af4:	d103      	bne.n	8006afe <_raise_r+0x42>
 8006af6:	2316      	movs	r3, #22
 8006af8:	6003      	str	r3, [r0, #0]
 8006afa:	2001      	movs	r0, #1
 8006afc:	e7e7      	b.n	8006ace <_raise_r+0x12>
 8006afe:	2100      	movs	r1, #0
 8006b00:	4620      	mov	r0, r4
 8006b02:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006b06:	4798      	blx	r3
 8006b08:	2000      	movs	r0, #0
 8006b0a:	e7e0      	b.n	8006ace <_raise_r+0x12>

08006b0c <raise>:
 8006b0c:	4b02      	ldr	r3, [pc, #8]	@ (8006b18 <raise+0xc>)
 8006b0e:	4601      	mov	r1, r0
 8006b10:	6818      	ldr	r0, [r3, #0]
 8006b12:	f7ff bfd3 	b.w	8006abc <_raise_r>
 8006b16:	bf00      	nop
 8006b18:	2000002c 	.word	0x2000002c

08006b1c <_kill_r>:
 8006b1c:	b538      	push	{r3, r4, r5, lr}
 8006b1e:	2300      	movs	r3, #0
 8006b20:	4d06      	ldr	r5, [pc, #24]	@ (8006b3c <_kill_r+0x20>)
 8006b22:	4604      	mov	r4, r0
 8006b24:	4608      	mov	r0, r1
 8006b26:	4611      	mov	r1, r2
 8006b28:	602b      	str	r3, [r5, #0]
 8006b2a:	f7fb ffb4 	bl	8002a96 <_kill>
 8006b2e:	1c43      	adds	r3, r0, #1
 8006b30:	d102      	bne.n	8006b38 <_kill_r+0x1c>
 8006b32:	682b      	ldr	r3, [r5, #0]
 8006b34:	b103      	cbz	r3, 8006b38 <_kill_r+0x1c>
 8006b36:	6023      	str	r3, [r4, #0]
 8006b38:	bd38      	pop	{r3, r4, r5, pc}
 8006b3a:	bf00      	nop
 8006b3c:	200040c0 	.word	0x200040c0

08006b40 <_getpid_r>:
 8006b40:	f7fb bfa2 	b.w	8002a88 <_getpid>

08006b44 <_malloc_usable_size_r>:
 8006b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b48:	1f18      	subs	r0, r3, #4
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	bfbc      	itt	lt
 8006b4e:	580b      	ldrlt	r3, [r1, r0]
 8006b50:	18c0      	addlt	r0, r0, r3
 8006b52:	4770      	bx	lr

08006b54 <__swhatbuf_r>:
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	460c      	mov	r4, r1
 8006b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b5c:	4615      	mov	r5, r2
 8006b5e:	2900      	cmp	r1, #0
 8006b60:	461e      	mov	r6, r3
 8006b62:	b096      	sub	sp, #88	@ 0x58
 8006b64:	da0c      	bge.n	8006b80 <__swhatbuf_r+0x2c>
 8006b66:	89a3      	ldrh	r3, [r4, #12]
 8006b68:	2100      	movs	r1, #0
 8006b6a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b6e:	bf14      	ite	ne
 8006b70:	2340      	movne	r3, #64	@ 0x40
 8006b72:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b76:	2000      	movs	r0, #0
 8006b78:	6031      	str	r1, [r6, #0]
 8006b7a:	602b      	str	r3, [r5, #0]
 8006b7c:	b016      	add	sp, #88	@ 0x58
 8006b7e:	bd70      	pop	{r4, r5, r6, pc}
 8006b80:	466a      	mov	r2, sp
 8006b82:	f000 f849 	bl	8006c18 <_fstat_r>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	dbed      	blt.n	8006b66 <__swhatbuf_r+0x12>
 8006b8a:	9901      	ldr	r1, [sp, #4]
 8006b8c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b90:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b94:	4259      	negs	r1, r3
 8006b96:	4159      	adcs	r1, r3
 8006b98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b9c:	e7eb      	b.n	8006b76 <__swhatbuf_r+0x22>

08006b9e <__smakebuf_r>:
 8006b9e:	898b      	ldrh	r3, [r1, #12]
 8006ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ba2:	079d      	lsls	r5, r3, #30
 8006ba4:	4606      	mov	r6, r0
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	d507      	bpl.n	8006bba <__smakebuf_r+0x1c>
 8006baa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006bae:	6023      	str	r3, [r4, #0]
 8006bb0:	6123      	str	r3, [r4, #16]
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	6163      	str	r3, [r4, #20]
 8006bb6:	b003      	add	sp, #12
 8006bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bba:	466a      	mov	r2, sp
 8006bbc:	ab01      	add	r3, sp, #4
 8006bbe:	f7ff ffc9 	bl	8006b54 <__swhatbuf_r>
 8006bc2:	9f00      	ldr	r7, [sp, #0]
 8006bc4:	4605      	mov	r5, r0
 8006bc6:	4639      	mov	r1, r7
 8006bc8:	4630      	mov	r0, r6
 8006bca:	f7ff f909 	bl	8005de0 <_malloc_r>
 8006bce:	b948      	cbnz	r0, 8006be4 <__smakebuf_r+0x46>
 8006bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bd4:	059a      	lsls	r2, r3, #22
 8006bd6:	d4ee      	bmi.n	8006bb6 <__smakebuf_r+0x18>
 8006bd8:	f023 0303 	bic.w	r3, r3, #3
 8006bdc:	f043 0302 	orr.w	r3, r3, #2
 8006be0:	81a3      	strh	r3, [r4, #12]
 8006be2:	e7e2      	b.n	8006baa <__smakebuf_r+0xc>
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bee:	81a3      	strh	r3, [r4, #12]
 8006bf0:	9b01      	ldr	r3, [sp, #4]
 8006bf2:	6020      	str	r0, [r4, #0]
 8006bf4:	b15b      	cbz	r3, 8006c0e <__smakebuf_r+0x70>
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bfc:	f000 f81e 	bl	8006c3c <_isatty_r>
 8006c00:	b128      	cbz	r0, 8006c0e <__smakebuf_r+0x70>
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	f023 0303 	bic.w	r3, r3, #3
 8006c08:	f043 0301 	orr.w	r3, r3, #1
 8006c0c:	81a3      	strh	r3, [r4, #12]
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	431d      	orrs	r5, r3
 8006c12:	81a5      	strh	r5, [r4, #12]
 8006c14:	e7cf      	b.n	8006bb6 <__smakebuf_r+0x18>
	...

08006c18 <_fstat_r>:
 8006c18:	b538      	push	{r3, r4, r5, lr}
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	4d06      	ldr	r5, [pc, #24]	@ (8006c38 <_fstat_r+0x20>)
 8006c1e:	4604      	mov	r4, r0
 8006c20:	4608      	mov	r0, r1
 8006c22:	4611      	mov	r1, r2
 8006c24:	602b      	str	r3, [r5, #0]
 8006c26:	f7fb ff95 	bl	8002b54 <_fstat>
 8006c2a:	1c43      	adds	r3, r0, #1
 8006c2c:	d102      	bne.n	8006c34 <_fstat_r+0x1c>
 8006c2e:	682b      	ldr	r3, [r5, #0]
 8006c30:	b103      	cbz	r3, 8006c34 <_fstat_r+0x1c>
 8006c32:	6023      	str	r3, [r4, #0]
 8006c34:	bd38      	pop	{r3, r4, r5, pc}
 8006c36:	bf00      	nop
 8006c38:	200040c0 	.word	0x200040c0

08006c3c <_isatty_r>:
 8006c3c:	b538      	push	{r3, r4, r5, lr}
 8006c3e:	2300      	movs	r3, #0
 8006c40:	4d05      	ldr	r5, [pc, #20]	@ (8006c58 <_isatty_r+0x1c>)
 8006c42:	4604      	mov	r4, r0
 8006c44:	4608      	mov	r0, r1
 8006c46:	602b      	str	r3, [r5, #0]
 8006c48:	f7fb ff93 	bl	8002b72 <_isatty>
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	d102      	bne.n	8006c56 <_isatty_r+0x1a>
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	b103      	cbz	r3, 8006c56 <_isatty_r+0x1a>
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	bd38      	pop	{r3, r4, r5, pc}
 8006c58:	200040c0 	.word	0x200040c0

08006c5c <powf>:
 8006c5c:	b570      	push	{r4, r5, r6, lr}
 8006c5e:	460c      	mov	r4, r1
 8006c60:	4606      	mov	r6, r0
 8006c62:	f000 fa43 	bl	80070ec <__ieee754_powf>
 8006c66:	4621      	mov	r1, r4
 8006c68:	4605      	mov	r5, r0
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f7f9 fd42 	bl	80006f4 <__aeabi_fcmpun>
 8006c70:	bb68      	cbnz	r0, 8006cce <powf+0x72>
 8006c72:	2100      	movs	r1, #0
 8006c74:	4630      	mov	r0, r6
 8006c76:	f7f9 fd0b 	bl	8000690 <__aeabi_fcmpeq>
 8006c7a:	b190      	cbz	r0, 8006ca2 <powf+0x46>
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f7f9 fd06 	bl	8000690 <__aeabi_fcmpeq>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d133      	bne.n	8006cf0 <powf+0x94>
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f000 f8c1 	bl	8006e10 <finitef>
 8006c8e:	b1f0      	cbz	r0, 8006cce <powf+0x72>
 8006c90:	2100      	movs	r1, #0
 8006c92:	4620      	mov	r0, r4
 8006c94:	f7f9 fd06 	bl	80006a4 <__aeabi_fcmplt>
 8006c98:	b1c8      	cbz	r0, 8006cce <powf+0x72>
 8006c9a:	f7fe ffd5 	bl	8005c48 <__errno>
 8006c9e:	2322      	movs	r3, #34	@ 0x22
 8006ca0:	e014      	b.n	8006ccc <powf+0x70>
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	f000 f8b4 	bl	8006e10 <finitef>
 8006ca8:	b998      	cbnz	r0, 8006cd2 <powf+0x76>
 8006caa:	4630      	mov	r0, r6
 8006cac:	f000 f8b0 	bl	8006e10 <finitef>
 8006cb0:	b178      	cbz	r0, 8006cd2 <powf+0x76>
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f000 f8ac 	bl	8006e10 <finitef>
 8006cb8:	b158      	cbz	r0, 8006cd2 <powf+0x76>
 8006cba:	4629      	mov	r1, r5
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	f7f9 fd19 	bl	80006f4 <__aeabi_fcmpun>
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d0e9      	beq.n	8006c9a <powf+0x3e>
 8006cc6:	f7fe ffbf 	bl	8005c48 <__errno>
 8006cca:	2321      	movs	r3, #33	@ 0x21
 8006ccc:	6003      	str	r3, [r0, #0]
 8006cce:	4628      	mov	r0, r5
 8006cd0:	bd70      	pop	{r4, r5, r6, pc}
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	f7f9 fcdb 	bl	8000690 <__aeabi_fcmpeq>
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d0f7      	beq.n	8006cce <powf+0x72>
 8006cde:	4630      	mov	r0, r6
 8006ce0:	f000 f896 	bl	8006e10 <finitef>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	d0f2      	beq.n	8006cce <powf+0x72>
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f000 f891 	bl	8006e10 <finitef>
 8006cee:	e7d3      	b.n	8006c98 <powf+0x3c>
 8006cf0:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8006cf4:	e7eb      	b.n	8006cce <powf+0x72>

08006cf6 <sqrtf>:
 8006cf6:	b538      	push	{r3, r4, r5, lr}
 8006cf8:	4605      	mov	r5, r0
 8006cfa:	f000 f891 	bl	8006e20 <__ieee754_sqrtf>
 8006cfe:	4629      	mov	r1, r5
 8006d00:	4604      	mov	r4, r0
 8006d02:	4628      	mov	r0, r5
 8006d04:	f7f9 fcf6 	bl	80006f4 <__aeabi_fcmpun>
 8006d08:	b968      	cbnz	r0, 8006d26 <sqrtf+0x30>
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	f7f9 fcc9 	bl	80006a4 <__aeabi_fcmplt>
 8006d12:	b140      	cbz	r0, 8006d26 <sqrtf+0x30>
 8006d14:	f7fe ff98 	bl	8005c48 <__errno>
 8006d18:	2321      	movs	r3, #33	@ 0x21
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	6003      	str	r3, [r0, #0]
 8006d1e:	4608      	mov	r0, r1
 8006d20:	f7f9 fbd6 	bl	80004d0 <__aeabi_fdiv>
 8006d24:	4604      	mov	r4, r0
 8006d26:	4620      	mov	r0, r4
 8006d28:	bd38      	pop	{r3, r4, r5, pc}
	...

08006d2c <cosf>:
 8006d2c:	b507      	push	{r0, r1, r2, lr}
 8006d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8006d98 <cosf+0x6c>)
 8006d30:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8006d34:	4293      	cmp	r3, r2
 8006d36:	4601      	mov	r1, r0
 8006d38:	d805      	bhi.n	8006d46 <cosf+0x1a>
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	b003      	add	sp, #12
 8006d3e:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d42:	f000 b8dd 	b.w	8006f00 <__kernel_cosf>
 8006d46:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006d4a:	d304      	bcc.n	8006d56 <cosf+0x2a>
 8006d4c:	f7f9 fa02 	bl	8000154 <__aeabi_fsub>
 8006d50:	b003      	add	sp, #12
 8006d52:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d56:	4669      	mov	r1, sp
 8006d58:	f000 fd28 	bl	80077ac <__ieee754_rem_pio2f>
 8006d5c:	f000 0203 	and.w	r2, r0, #3
 8006d60:	2a01      	cmp	r2, #1
 8006d62:	d007      	beq.n	8006d74 <cosf+0x48>
 8006d64:	2a02      	cmp	r2, #2
 8006d66:	d00c      	beq.n	8006d82 <cosf+0x56>
 8006d68:	b982      	cbnz	r2, 8006d8c <cosf+0x60>
 8006d6a:	9901      	ldr	r1, [sp, #4]
 8006d6c:	9800      	ldr	r0, [sp, #0]
 8006d6e:	f000 f8c7 	bl	8006f00 <__kernel_cosf>
 8006d72:	e7ed      	b.n	8006d50 <cosf+0x24>
 8006d74:	9901      	ldr	r1, [sp, #4]
 8006d76:	9800      	ldr	r0, [sp, #0]
 8006d78:	f000 f942 	bl	8007000 <__kernel_sinf>
 8006d7c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8006d80:	e7e6      	b.n	8006d50 <cosf+0x24>
 8006d82:	9901      	ldr	r1, [sp, #4]
 8006d84:	9800      	ldr	r0, [sp, #0]
 8006d86:	f000 f8bb 	bl	8006f00 <__kernel_cosf>
 8006d8a:	e7f7      	b.n	8006d7c <cosf+0x50>
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	9901      	ldr	r1, [sp, #4]
 8006d90:	9800      	ldr	r0, [sp, #0]
 8006d92:	f000 f935 	bl	8007000 <__kernel_sinf>
 8006d96:	e7db      	b.n	8006d50 <cosf+0x24>
 8006d98:	3f490fd8 	.word	0x3f490fd8

08006d9c <sinf>:
 8006d9c:	b507      	push	{r0, r1, r2, lr}
 8006d9e:	4a1b      	ldr	r2, [pc, #108]	@ (8006e0c <sinf+0x70>)
 8006da0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8006da4:	4293      	cmp	r3, r2
 8006da6:	4601      	mov	r1, r0
 8006da8:	d806      	bhi.n	8006db8 <sinf+0x1c>
 8006daa:	2200      	movs	r2, #0
 8006dac:	2100      	movs	r1, #0
 8006dae:	b003      	add	sp, #12
 8006db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006db4:	f000 b924 	b.w	8007000 <__kernel_sinf>
 8006db8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006dbc:	d304      	bcc.n	8006dc8 <sinf+0x2c>
 8006dbe:	f7f9 f9c9 	bl	8000154 <__aeabi_fsub>
 8006dc2:	b003      	add	sp, #12
 8006dc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8006dc8:	4669      	mov	r1, sp
 8006dca:	f000 fcef 	bl	80077ac <__ieee754_rem_pio2f>
 8006dce:	f000 0003 	and.w	r0, r0, #3
 8006dd2:	2801      	cmp	r0, #1
 8006dd4:	d008      	beq.n	8006de8 <sinf+0x4c>
 8006dd6:	2802      	cmp	r0, #2
 8006dd8:	d00b      	beq.n	8006df2 <sinf+0x56>
 8006dda:	b990      	cbnz	r0, 8006e02 <sinf+0x66>
 8006ddc:	2201      	movs	r2, #1
 8006dde:	9901      	ldr	r1, [sp, #4]
 8006de0:	9800      	ldr	r0, [sp, #0]
 8006de2:	f000 f90d 	bl	8007000 <__kernel_sinf>
 8006de6:	e7ec      	b.n	8006dc2 <sinf+0x26>
 8006de8:	9901      	ldr	r1, [sp, #4]
 8006dea:	9800      	ldr	r0, [sp, #0]
 8006dec:	f000 f888 	bl	8006f00 <__kernel_cosf>
 8006df0:	e7e7      	b.n	8006dc2 <sinf+0x26>
 8006df2:	2201      	movs	r2, #1
 8006df4:	9901      	ldr	r1, [sp, #4]
 8006df6:	9800      	ldr	r0, [sp, #0]
 8006df8:	f000 f902 	bl	8007000 <__kernel_sinf>
 8006dfc:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8006e00:	e7df      	b.n	8006dc2 <sinf+0x26>
 8006e02:	9901      	ldr	r1, [sp, #4]
 8006e04:	9800      	ldr	r0, [sp, #0]
 8006e06:	f000 f87b 	bl	8006f00 <__kernel_cosf>
 8006e0a:	e7f7      	b.n	8006dfc <sinf+0x60>
 8006e0c:	3f490fd8 	.word	0x3f490fd8

08006e10 <finitef>:
 8006e10:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006e14:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8006e18:	bfac      	ite	ge
 8006e1a:	2000      	movge	r0, #0
 8006e1c:	2001      	movlt	r0, #1
 8006e1e:	4770      	bx	lr

08006e20 <__ieee754_sqrtf>:
 8006e20:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8006e24:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	4604      	mov	r4, r0
 8006e30:	d30a      	bcc.n	8006e48 <__ieee754_sqrtf+0x28>
 8006e32:	4601      	mov	r1, r0
 8006e34:	f7f9 fa98 	bl	8000368 <__aeabi_fmul>
 8006e38:	4601      	mov	r1, r0
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	f7f9 f98c 	bl	8000158 <__addsf3>
 8006e40:	4604      	mov	r4, r0
 8006e42:	4620      	mov	r0, r4
 8006e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e48:	2a00      	cmp	r2, #0
 8006e4a:	d0fa      	beq.n	8006e42 <__ieee754_sqrtf+0x22>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	da06      	bge.n	8006e5e <__ieee754_sqrtf+0x3e>
 8006e50:	4601      	mov	r1, r0
 8006e52:	f7f9 f97f 	bl	8000154 <__aeabi_fsub>
 8006e56:	4601      	mov	r1, r0
 8006e58:	f7f9 fb3a 	bl	80004d0 <__aeabi_fdiv>
 8006e5c:	e7f0      	b.n	8006e40 <__ieee754_sqrtf+0x20>
 8006e5e:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8006e62:	d03c      	beq.n	8006ede <__ieee754_sqrtf+0xbe>
 8006e64:	15c2      	asrs	r2, r0, #23
 8006e66:	2400      	movs	r4, #0
 8006e68:	2019      	movs	r0, #25
 8006e6a:	4626      	mov	r6, r4
 8006e6c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8006e70:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006e74:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8006e78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006e7c:	07d2      	lsls	r2, r2, #31
 8006e7e:	bf58      	it	pl
 8006e80:	005b      	lslpl	r3, r3, #1
 8006e82:	106d      	asrs	r5, r5, #1
 8006e84:	005b      	lsls	r3, r3, #1
 8006e86:	1872      	adds	r2, r6, r1
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	bfcf      	iteee	gt
 8006e8c:	461a      	movgt	r2, r3
 8006e8e:	1856      	addle	r6, r2, r1
 8006e90:	1864      	addle	r4, r4, r1
 8006e92:	1a9a      	suble	r2, r3, r2
 8006e94:	3801      	subs	r0, #1
 8006e96:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8006e9a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006e9e:	d1f2      	bne.n	8006e86 <__ieee754_sqrtf+0x66>
 8006ea0:	b1ba      	cbz	r2, 8006ed2 <__ieee754_sqrtf+0xb2>
 8006ea2:	4e15      	ldr	r6, [pc, #84]	@ (8006ef8 <__ieee754_sqrtf+0xd8>)
 8006ea4:	4f15      	ldr	r7, [pc, #84]	@ (8006efc <__ieee754_sqrtf+0xdc>)
 8006ea6:	6830      	ldr	r0, [r6, #0]
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	f7f9 f953 	bl	8000154 <__aeabi_fsub>
 8006eae:	f8d6 8000 	ldr.w	r8, [r6]
 8006eb2:	4601      	mov	r1, r0
 8006eb4:	4640      	mov	r0, r8
 8006eb6:	f7f9 fbff 	bl	80006b8 <__aeabi_fcmple>
 8006eba:	b150      	cbz	r0, 8006ed2 <__ieee754_sqrtf+0xb2>
 8006ebc:	6830      	ldr	r0, [r6, #0]
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	f7f9 f94a 	bl	8000158 <__addsf3>
 8006ec4:	6836      	ldr	r6, [r6, #0]
 8006ec6:	4601      	mov	r1, r0
 8006ec8:	4630      	mov	r0, r6
 8006eca:	f7f9 fbeb 	bl	80006a4 <__aeabi_fcmplt>
 8006ece:	b170      	cbz	r0, 8006eee <__ieee754_sqrtf+0xce>
 8006ed0:	3402      	adds	r4, #2
 8006ed2:	1064      	asrs	r4, r4, #1
 8006ed4:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8006ed8:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8006edc:	e7b1      	b.n	8006e42 <__ieee754_sqrtf+0x22>
 8006ede:	005b      	lsls	r3, r3, #1
 8006ee0:	0218      	lsls	r0, r3, #8
 8006ee2:	460a      	mov	r2, r1
 8006ee4:	f101 0101 	add.w	r1, r1, #1
 8006ee8:	d5f9      	bpl.n	8006ede <__ieee754_sqrtf+0xbe>
 8006eea:	4252      	negs	r2, r2
 8006eec:	e7bb      	b.n	8006e66 <__ieee754_sqrtf+0x46>
 8006eee:	3401      	adds	r4, #1
 8006ef0:	f024 0401 	bic.w	r4, r4, #1
 8006ef4:	e7ed      	b.n	8006ed2 <__ieee754_sqrtf+0xb2>
 8006ef6:	bf00      	nop
 8006ef8:	08008488 	.word	0x08008488
 8006efc:	08008484 	.word	0x08008484

08006f00 <__kernel_cosf>:
 8006f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f04:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8006f08:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 8006f0c:	4606      	mov	r6, r0
 8006f0e:	4688      	mov	r8, r1
 8006f10:	d203      	bcs.n	8006f1a <__kernel_cosf+0x1a>
 8006f12:	f7f9 fc05 	bl	8000720 <__aeabi_f2iz>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d05c      	beq.n	8006fd4 <__kernel_cosf+0xd4>
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	f7f9 fa23 	bl	8000368 <__aeabi_fmul>
 8006f22:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006f26:	4604      	mov	r4, r0
 8006f28:	f7f9 fa1e 	bl	8000368 <__aeabi_fmul>
 8006f2c:	492b      	ldr	r1, [pc, #172]	@ (8006fdc <__kernel_cosf+0xdc>)
 8006f2e:	4607      	mov	r7, r0
 8006f30:	4620      	mov	r0, r4
 8006f32:	f7f9 fa19 	bl	8000368 <__aeabi_fmul>
 8006f36:	492a      	ldr	r1, [pc, #168]	@ (8006fe0 <__kernel_cosf+0xe0>)
 8006f38:	f7f9 f90e 	bl	8000158 <__addsf3>
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	f7f9 fa13 	bl	8000368 <__aeabi_fmul>
 8006f42:	4928      	ldr	r1, [pc, #160]	@ (8006fe4 <__kernel_cosf+0xe4>)
 8006f44:	f7f9 f906 	bl	8000154 <__aeabi_fsub>
 8006f48:	4621      	mov	r1, r4
 8006f4a:	f7f9 fa0d 	bl	8000368 <__aeabi_fmul>
 8006f4e:	4926      	ldr	r1, [pc, #152]	@ (8006fe8 <__kernel_cosf+0xe8>)
 8006f50:	f7f9 f902 	bl	8000158 <__addsf3>
 8006f54:	4621      	mov	r1, r4
 8006f56:	f7f9 fa07 	bl	8000368 <__aeabi_fmul>
 8006f5a:	4924      	ldr	r1, [pc, #144]	@ (8006fec <__kernel_cosf+0xec>)
 8006f5c:	f7f9 f8fa 	bl	8000154 <__aeabi_fsub>
 8006f60:	4621      	mov	r1, r4
 8006f62:	f7f9 fa01 	bl	8000368 <__aeabi_fmul>
 8006f66:	4922      	ldr	r1, [pc, #136]	@ (8006ff0 <__kernel_cosf+0xf0>)
 8006f68:	f7f9 f8f6 	bl	8000158 <__addsf3>
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	f7f9 f9fb 	bl	8000368 <__aeabi_fmul>
 8006f72:	4621      	mov	r1, r4
 8006f74:	f7f9 f9f8 	bl	8000368 <__aeabi_fmul>
 8006f78:	4641      	mov	r1, r8
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	f7f9 f9f3 	bl	8000368 <__aeabi_fmul>
 8006f82:	4601      	mov	r1, r0
 8006f84:	4620      	mov	r0, r4
 8006f86:	f7f9 f8e5 	bl	8000154 <__aeabi_fsub>
 8006f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ff4 <__kernel_cosf+0xf4>)
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	429d      	cmp	r5, r3
 8006f90:	d80a      	bhi.n	8006fa8 <__kernel_cosf+0xa8>
 8006f92:	4601      	mov	r1, r0
 8006f94:	4638      	mov	r0, r7
 8006f96:	f7f9 f8dd 	bl	8000154 <__aeabi_fsub>
 8006f9a:	4601      	mov	r1, r0
 8006f9c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006fa0:	f7f9 f8d8 	bl	8000154 <__aeabi_fsub>
 8006fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fa8:	4b13      	ldr	r3, [pc, #76]	@ (8006ff8 <__kernel_cosf+0xf8>)
 8006faa:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006fae:	429d      	cmp	r5, r3
 8006fb0:	bf8c      	ite	hi
 8006fb2:	4d12      	ldrhi	r5, [pc, #72]	@ (8006ffc <__kernel_cosf+0xfc>)
 8006fb4:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 8006fb8:	4629      	mov	r1, r5
 8006fba:	f7f9 f8cb 	bl	8000154 <__aeabi_fsub>
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	4606      	mov	r6, r0
 8006fc2:	4638      	mov	r0, r7
 8006fc4:	f7f9 f8c6 	bl	8000154 <__aeabi_fsub>
 8006fc8:	4621      	mov	r1, r4
 8006fca:	f7f9 f8c3 	bl	8000154 <__aeabi_fsub>
 8006fce:	4601      	mov	r1, r0
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	e7e5      	b.n	8006fa0 <__kernel_cosf+0xa0>
 8006fd4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006fd8:	e7e4      	b.n	8006fa4 <__kernel_cosf+0xa4>
 8006fda:	bf00      	nop
 8006fdc:	ad47d74e 	.word	0xad47d74e
 8006fe0:	310f74f6 	.word	0x310f74f6
 8006fe4:	3493f27c 	.word	0x3493f27c
 8006fe8:	37d00d01 	.word	0x37d00d01
 8006fec:	3ab60b61 	.word	0x3ab60b61
 8006ff0:	3d2aaaab 	.word	0x3d2aaaab
 8006ff4:	3e999999 	.word	0x3e999999
 8006ff8:	3f480000 	.word	0x3f480000
 8006ffc:	3e900000 	.word	0x3e900000

08007000 <__kernel_sinf>:
 8007000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007004:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8007008:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800700c:	4604      	mov	r4, r0
 800700e:	460f      	mov	r7, r1
 8007010:	4691      	mov	r9, r2
 8007012:	d203      	bcs.n	800701c <__kernel_sinf+0x1c>
 8007014:	f7f9 fb84 	bl	8000720 <__aeabi_f2iz>
 8007018:	2800      	cmp	r0, #0
 800701a:	d035      	beq.n	8007088 <__kernel_sinf+0x88>
 800701c:	4621      	mov	r1, r4
 800701e:	4620      	mov	r0, r4
 8007020:	f7f9 f9a2 	bl	8000368 <__aeabi_fmul>
 8007024:	4605      	mov	r5, r0
 8007026:	4601      	mov	r1, r0
 8007028:	4620      	mov	r0, r4
 800702a:	f7f9 f99d 	bl	8000368 <__aeabi_fmul>
 800702e:	4929      	ldr	r1, [pc, #164]	@ (80070d4 <__kernel_sinf+0xd4>)
 8007030:	4606      	mov	r6, r0
 8007032:	4628      	mov	r0, r5
 8007034:	f7f9 f998 	bl	8000368 <__aeabi_fmul>
 8007038:	4927      	ldr	r1, [pc, #156]	@ (80070d8 <__kernel_sinf+0xd8>)
 800703a:	f7f9 f88b 	bl	8000154 <__aeabi_fsub>
 800703e:	4629      	mov	r1, r5
 8007040:	f7f9 f992 	bl	8000368 <__aeabi_fmul>
 8007044:	4925      	ldr	r1, [pc, #148]	@ (80070dc <__kernel_sinf+0xdc>)
 8007046:	f7f9 f887 	bl	8000158 <__addsf3>
 800704a:	4629      	mov	r1, r5
 800704c:	f7f9 f98c 	bl	8000368 <__aeabi_fmul>
 8007050:	4923      	ldr	r1, [pc, #140]	@ (80070e0 <__kernel_sinf+0xe0>)
 8007052:	f7f9 f87f 	bl	8000154 <__aeabi_fsub>
 8007056:	4629      	mov	r1, r5
 8007058:	f7f9 f986 	bl	8000368 <__aeabi_fmul>
 800705c:	4921      	ldr	r1, [pc, #132]	@ (80070e4 <__kernel_sinf+0xe4>)
 800705e:	f7f9 f87b 	bl	8000158 <__addsf3>
 8007062:	4680      	mov	r8, r0
 8007064:	f1b9 0f00 	cmp.w	r9, #0
 8007068:	d111      	bne.n	800708e <__kernel_sinf+0x8e>
 800706a:	4601      	mov	r1, r0
 800706c:	4628      	mov	r0, r5
 800706e:	f7f9 f97b 	bl	8000368 <__aeabi_fmul>
 8007072:	491d      	ldr	r1, [pc, #116]	@ (80070e8 <__kernel_sinf+0xe8>)
 8007074:	f7f9 f86e 	bl	8000154 <__aeabi_fsub>
 8007078:	4631      	mov	r1, r6
 800707a:	f7f9 f975 	bl	8000368 <__aeabi_fmul>
 800707e:	4601      	mov	r1, r0
 8007080:	4620      	mov	r0, r4
 8007082:	f7f9 f869 	bl	8000158 <__addsf3>
 8007086:	4604      	mov	r4, r0
 8007088:	4620      	mov	r0, r4
 800708a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800708e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8007092:	4638      	mov	r0, r7
 8007094:	f7f9 f968 	bl	8000368 <__aeabi_fmul>
 8007098:	4641      	mov	r1, r8
 800709a:	4681      	mov	r9, r0
 800709c:	4630      	mov	r0, r6
 800709e:	f7f9 f963 	bl	8000368 <__aeabi_fmul>
 80070a2:	4601      	mov	r1, r0
 80070a4:	4648      	mov	r0, r9
 80070a6:	f7f9 f855 	bl	8000154 <__aeabi_fsub>
 80070aa:	4629      	mov	r1, r5
 80070ac:	f7f9 f95c 	bl	8000368 <__aeabi_fmul>
 80070b0:	4639      	mov	r1, r7
 80070b2:	f7f9 f84f 	bl	8000154 <__aeabi_fsub>
 80070b6:	490c      	ldr	r1, [pc, #48]	@ (80070e8 <__kernel_sinf+0xe8>)
 80070b8:	4605      	mov	r5, r0
 80070ba:	4630      	mov	r0, r6
 80070bc:	f7f9 f954 	bl	8000368 <__aeabi_fmul>
 80070c0:	4601      	mov	r1, r0
 80070c2:	4628      	mov	r0, r5
 80070c4:	f7f9 f848 	bl	8000158 <__addsf3>
 80070c8:	4601      	mov	r1, r0
 80070ca:	4620      	mov	r0, r4
 80070cc:	f7f9 f842 	bl	8000154 <__aeabi_fsub>
 80070d0:	e7d9      	b.n	8007086 <__kernel_sinf+0x86>
 80070d2:	bf00      	nop
 80070d4:	2f2ec9d3 	.word	0x2f2ec9d3
 80070d8:	32d72f34 	.word	0x32d72f34
 80070dc:	3638ef1b 	.word	0x3638ef1b
 80070e0:	39500d01 	.word	0x39500d01
 80070e4:	3c088889 	.word	0x3c088889
 80070e8:	3e2aaaab 	.word	0x3e2aaaab

080070ec <__ieee754_powf>:
 80070ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f0:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 80070f4:	4681      	mov	r9, r0
 80070f6:	460f      	mov	r7, r1
 80070f8:	4606      	mov	r6, r0
 80070fa:	460c      	mov	r4, r1
 80070fc:	b087      	sub	sp, #28
 80070fe:	d10c      	bne.n	800711a <__ieee754_powf+0x2e>
 8007100:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 8007104:	0076      	lsls	r6, r6, #1
 8007106:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800710a:	f240 8310 	bls.w	800772e <__ieee754_powf+0x642>
 800710e:	4639      	mov	r1, r7
 8007110:	4648      	mov	r0, r9
 8007112:	f7f9 f821 	bl	8000158 <__addsf3>
 8007116:	4601      	mov	r1, r0
 8007118:	e043      	b.n	80071a2 <__ieee754_powf+0xb6>
 800711a:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800711e:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8007122:	d802      	bhi.n	800712a <__ieee754_powf+0x3e>
 8007124:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8007128:	d908      	bls.n	800713c <__ieee754_powf+0x50>
 800712a:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800712e:	d1ee      	bne.n	800710e <__ieee754_powf+0x22>
 8007130:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8007134:	0064      	lsls	r4, r4, #1
 8007136:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800713a:	e7e6      	b.n	800710a <__ieee754_powf+0x1e>
 800713c:	2800      	cmp	r0, #0
 800713e:	da1f      	bge.n	8007180 <__ieee754_powf+0x94>
 8007140:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 8007144:	f080 82f8 	bcs.w	8007738 <__ieee754_powf+0x64c>
 8007148:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800714c:	d32f      	bcc.n	80071ae <__ieee754_powf+0xc2>
 800714e:	ea4f 53eb 	mov.w	r3, fp, asr #23
 8007152:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8007156:	fa4b f503 	asr.w	r5, fp, r3
 800715a:	fa05 f303 	lsl.w	r3, r5, r3
 800715e:	455b      	cmp	r3, fp
 8007160:	d123      	bne.n	80071aa <__ieee754_powf+0xbe>
 8007162:	f005 0501 	and.w	r5, r5, #1
 8007166:	f1c5 0502 	rsb	r5, r5, #2
 800716a:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800716e:	d11f      	bne.n	80071b0 <__ieee754_powf+0xc4>
 8007170:	2c00      	cmp	r4, #0
 8007172:	4649      	mov	r1, r9
 8007174:	da15      	bge.n	80071a2 <__ieee754_powf+0xb6>
 8007176:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800717a:	f7f9 f9a9 	bl	80004d0 <__aeabi_fdiv>
 800717e:	e7ca      	b.n	8007116 <__ieee754_powf+0x2a>
 8007180:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8007184:	d111      	bne.n	80071aa <__ieee754_powf+0xbe>
 8007186:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800718a:	f000 82d0 	beq.w	800772e <__ieee754_powf+0x642>
 800718e:	d904      	bls.n	800719a <__ieee754_powf+0xae>
 8007190:	2c00      	cmp	r4, #0
 8007192:	f280 82cf 	bge.w	8007734 <__ieee754_powf+0x648>
 8007196:	2100      	movs	r1, #0
 8007198:	e003      	b.n	80071a2 <__ieee754_powf+0xb6>
 800719a:	2c00      	cmp	r4, #0
 800719c:	dafb      	bge.n	8007196 <__ieee754_powf+0xaa>
 800719e:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 80071a2:	4608      	mov	r0, r1
 80071a4:	b007      	add	sp, #28
 80071a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071aa:	2500      	movs	r5, #0
 80071ac:	e7dd      	b.n	800716a <__ieee754_powf+0x7e>
 80071ae:	2500      	movs	r5, #0
 80071b0:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80071b4:	d104      	bne.n	80071c0 <__ieee754_powf+0xd4>
 80071b6:	4649      	mov	r1, r9
 80071b8:	4648      	mov	r0, r9
 80071ba:	f7f9 f8d5 	bl	8000368 <__aeabi_fmul>
 80071be:	e7aa      	b.n	8007116 <__ieee754_powf+0x2a>
 80071c0:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80071c4:	f040 82bd 	bne.w	8007742 <__ieee754_powf+0x656>
 80071c8:	2e00      	cmp	r6, #0
 80071ca:	f2c0 82ba 	blt.w	8007742 <__ieee754_powf+0x656>
 80071ce:	4648      	mov	r0, r9
 80071d0:	b007      	add	sp, #28
 80071d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d6:	f7ff be23 	b.w	8006e20 <__ieee754_sqrtf>
 80071da:	2d01      	cmp	r5, #1
 80071dc:	d1e1      	bne.n	80071a2 <__ieee754_powf+0xb6>
 80071de:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 80071e2:	e798      	b.n	8007116 <__ieee754_powf+0x2a>
 80071e4:	0ff3      	lsrs	r3, r6, #31
 80071e6:	3b01      	subs	r3, #1
 80071e8:	9303      	str	r3, [sp, #12]
 80071ea:	432b      	orrs	r3, r5
 80071ec:	d101      	bne.n	80071f2 <__ieee754_powf+0x106>
 80071ee:	4649      	mov	r1, r9
 80071f0:	e2c5      	b.n	800777e <__ieee754_powf+0x692>
 80071f2:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 80071f6:	f240 809b 	bls.w	8007330 <__ieee754_powf+0x244>
 80071fa:	4b46      	ldr	r3, [pc, #280]	@ (8007314 <__ieee754_powf+0x228>)
 80071fc:	4598      	cmp	r8, r3
 80071fe:	d807      	bhi.n	8007210 <__ieee754_powf+0x124>
 8007200:	2c00      	cmp	r4, #0
 8007202:	da0a      	bge.n	800721a <__ieee754_powf+0x12e>
 8007204:	2000      	movs	r0, #0
 8007206:	b007      	add	sp, #28
 8007208:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720c:	f000 bc9d 	b.w	8007b4a <__math_oflowf>
 8007210:	4b41      	ldr	r3, [pc, #260]	@ (8007318 <__ieee754_powf+0x22c>)
 8007212:	4598      	cmp	r8, r3
 8007214:	d907      	bls.n	8007226 <__ieee754_powf+0x13a>
 8007216:	2c00      	cmp	r4, #0
 8007218:	dcf4      	bgt.n	8007204 <__ieee754_powf+0x118>
 800721a:	2000      	movs	r0, #0
 800721c:	b007      	add	sp, #28
 800721e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007222:	f000 bc8e 	b.w	8007b42 <__math_uflowf>
 8007226:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800722a:	f7f8 ff93 	bl	8000154 <__aeabi_fsub>
 800722e:	493b      	ldr	r1, [pc, #236]	@ (800731c <__ieee754_powf+0x230>)
 8007230:	4606      	mov	r6, r0
 8007232:	f7f9 f899 	bl	8000368 <__aeabi_fmul>
 8007236:	493a      	ldr	r1, [pc, #232]	@ (8007320 <__ieee754_powf+0x234>)
 8007238:	4680      	mov	r8, r0
 800723a:	4630      	mov	r0, r6
 800723c:	f7f9 f894 	bl	8000368 <__aeabi_fmul>
 8007240:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8007244:	4681      	mov	r9, r0
 8007246:	4630      	mov	r0, r6
 8007248:	f7f9 f88e 	bl	8000368 <__aeabi_fmul>
 800724c:	4601      	mov	r1, r0
 800724e:	4835      	ldr	r0, [pc, #212]	@ (8007324 <__ieee754_powf+0x238>)
 8007250:	f7f8 ff80 	bl	8000154 <__aeabi_fsub>
 8007254:	4631      	mov	r1, r6
 8007256:	f7f9 f887 	bl	8000368 <__aeabi_fmul>
 800725a:	4601      	mov	r1, r0
 800725c:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8007260:	f7f8 ff78 	bl	8000154 <__aeabi_fsub>
 8007264:	4631      	mov	r1, r6
 8007266:	4682      	mov	sl, r0
 8007268:	4630      	mov	r0, r6
 800726a:	f7f9 f87d 	bl	8000368 <__aeabi_fmul>
 800726e:	4601      	mov	r1, r0
 8007270:	4650      	mov	r0, sl
 8007272:	f7f9 f879 	bl	8000368 <__aeabi_fmul>
 8007276:	492c      	ldr	r1, [pc, #176]	@ (8007328 <__ieee754_powf+0x23c>)
 8007278:	f7f9 f876 	bl	8000368 <__aeabi_fmul>
 800727c:	4601      	mov	r1, r0
 800727e:	4648      	mov	r0, r9
 8007280:	f7f8 ff68 	bl	8000154 <__aeabi_fsub>
 8007284:	4601      	mov	r1, r0
 8007286:	4606      	mov	r6, r0
 8007288:	4640      	mov	r0, r8
 800728a:	f7f8 ff65 	bl	8000158 <__addsf3>
 800728e:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8007292:	f02b 0b0f 	bic.w	fp, fp, #15
 8007296:	4641      	mov	r1, r8
 8007298:	4658      	mov	r0, fp
 800729a:	f7f8 ff5b 	bl	8000154 <__aeabi_fsub>
 800729e:	4601      	mov	r1, r0
 80072a0:	4630      	mov	r0, r6
 80072a2:	f7f8 ff57 	bl	8000154 <__aeabi_fsub>
 80072a6:	9b03      	ldr	r3, [sp, #12]
 80072a8:	3d01      	subs	r5, #1
 80072aa:	f36f 040b 	bfc	r4, #0, #12
 80072ae:	431d      	orrs	r5, r3
 80072b0:	4606      	mov	r6, r0
 80072b2:	4621      	mov	r1, r4
 80072b4:	4638      	mov	r0, r7
 80072b6:	bf14      	ite	ne
 80072b8:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 80072bc:	4d1b      	ldreq	r5, [pc, #108]	@ (800732c <__ieee754_powf+0x240>)
 80072be:	f7f8 ff49 	bl	8000154 <__aeabi_fsub>
 80072c2:	4659      	mov	r1, fp
 80072c4:	f7f9 f850 	bl	8000368 <__aeabi_fmul>
 80072c8:	4639      	mov	r1, r7
 80072ca:	4680      	mov	r8, r0
 80072cc:	4630      	mov	r0, r6
 80072ce:	f7f9 f84b 	bl	8000368 <__aeabi_fmul>
 80072d2:	4601      	mov	r1, r0
 80072d4:	4640      	mov	r0, r8
 80072d6:	f7f8 ff3f 	bl	8000158 <__addsf3>
 80072da:	4621      	mov	r1, r4
 80072dc:	4606      	mov	r6, r0
 80072de:	4658      	mov	r0, fp
 80072e0:	f7f9 f842 	bl	8000368 <__aeabi_fmul>
 80072e4:	4601      	mov	r1, r0
 80072e6:	4607      	mov	r7, r0
 80072e8:	4630      	mov	r0, r6
 80072ea:	f7f8 ff35 	bl	8000158 <__addsf3>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	4604      	mov	r4, r0
 80072f2:	4680      	mov	r8, r0
 80072f4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80072f8:	f340 813f 	ble.w	800757a <__ieee754_powf+0x48e>
 80072fc:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8007300:	f240 8128 	bls.w	8007554 <__ieee754_powf+0x468>
 8007304:	2100      	movs	r1, #0
 8007306:	4628      	mov	r0, r5
 8007308:	f7f9 f9cc 	bl	80006a4 <__aeabi_fcmplt>
 800730c:	3800      	subs	r0, #0
 800730e:	bf18      	it	ne
 8007310:	2001      	movne	r0, #1
 8007312:	e778      	b.n	8007206 <__ieee754_powf+0x11a>
 8007314:	3f7ffff3 	.word	0x3f7ffff3
 8007318:	3f800007 	.word	0x3f800007
 800731c:	3fb8aa00 	.word	0x3fb8aa00
 8007320:	36eca570 	.word	0x36eca570
 8007324:	3eaaaaab 	.word	0x3eaaaaab
 8007328:	3fb8aa3b 	.word	0x3fb8aa3b
 800732c:	bf800000 	.word	0xbf800000
 8007330:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8007334:	f040 810a 	bne.w	800754c <__ieee754_powf+0x460>
 8007338:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 800733c:	f7f9 f814 	bl	8000368 <__aeabi_fmul>
 8007340:	f06f 0217 	mvn.w	r2, #23
 8007344:	4682      	mov	sl, r0
 8007346:	ea4f 53ea 	mov.w	r3, sl, asr #23
 800734a:	3b7f      	subs	r3, #127	@ 0x7f
 800734c:	441a      	add	r2, r3
 800734e:	4b95      	ldr	r3, [pc, #596]	@ (80075a4 <__ieee754_powf+0x4b8>)
 8007350:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 8007354:	459a      	cmp	sl, r3
 8007356:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 800735a:	dd06      	ble.n	800736a <__ieee754_powf+0x27e>
 800735c:	4b92      	ldr	r3, [pc, #584]	@ (80075a8 <__ieee754_powf+0x4bc>)
 800735e:	459a      	cmp	sl, r3
 8007360:	f340 80f6 	ble.w	8007550 <__ieee754_powf+0x464>
 8007364:	3201      	adds	r2, #1
 8007366:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 800736a:	2300      	movs	r3, #0
 800736c:	9301      	str	r3, [sp, #4]
 800736e:	9205      	str	r2, [sp, #20]
 8007370:	4b8e      	ldr	r3, [pc, #568]	@ (80075ac <__ieee754_powf+0x4c0>)
 8007372:	9a01      	ldr	r2, [sp, #4]
 8007374:	4630      	mov	r0, r6
 8007376:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 800737a:	46b2      	mov	sl, r6
 800737c:	4659      	mov	r1, fp
 800737e:	f7f8 fee9 	bl	8000154 <__aeabi_fsub>
 8007382:	4631      	mov	r1, r6
 8007384:	4681      	mov	r9, r0
 8007386:	4658      	mov	r0, fp
 8007388:	f7f8 fee6 	bl	8000158 <__addsf3>
 800738c:	4601      	mov	r1, r0
 800738e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007392:	f7f9 f89d 	bl	80004d0 <__aeabi_fdiv>
 8007396:	4601      	mov	r1, r0
 8007398:	9004      	str	r0, [sp, #16]
 800739a:	4648      	mov	r0, r9
 800739c:	f7f8 ffe4 	bl	8000368 <__aeabi_fmul>
 80073a0:	9002      	str	r0, [sp, #8]
 80073a2:	9b02      	ldr	r3, [sp, #8]
 80073a4:	1076      	asrs	r6, r6, #1
 80073a6:	f36f 030b 	bfc	r3, #0, #12
 80073aa:	4698      	mov	r8, r3
 80073ac:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 80073b0:	9b01      	ldr	r3, [sp, #4]
 80073b2:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 80073b6:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 80073ba:	4631      	mov	r1, r6
 80073bc:	4640      	mov	r0, r8
 80073be:	f7f8 ffd3 	bl	8000368 <__aeabi_fmul>
 80073c2:	4601      	mov	r1, r0
 80073c4:	4648      	mov	r0, r9
 80073c6:	f7f8 fec5 	bl	8000154 <__aeabi_fsub>
 80073ca:	4659      	mov	r1, fp
 80073cc:	4681      	mov	r9, r0
 80073ce:	4630      	mov	r0, r6
 80073d0:	f7f8 fec0 	bl	8000154 <__aeabi_fsub>
 80073d4:	4601      	mov	r1, r0
 80073d6:	4650      	mov	r0, sl
 80073d8:	f7f8 febc 	bl	8000154 <__aeabi_fsub>
 80073dc:	4641      	mov	r1, r8
 80073de:	f7f8 ffc3 	bl	8000368 <__aeabi_fmul>
 80073e2:	4601      	mov	r1, r0
 80073e4:	4648      	mov	r0, r9
 80073e6:	f7f8 feb5 	bl	8000154 <__aeabi_fsub>
 80073ea:	9b04      	ldr	r3, [sp, #16]
 80073ec:	4619      	mov	r1, r3
 80073ee:	f7f8 ffbb 	bl	8000368 <__aeabi_fmul>
 80073f2:	9902      	ldr	r1, [sp, #8]
 80073f4:	4683      	mov	fp, r0
 80073f6:	4608      	mov	r0, r1
 80073f8:	f7f8 ffb6 	bl	8000368 <__aeabi_fmul>
 80073fc:	4606      	mov	r6, r0
 80073fe:	496c      	ldr	r1, [pc, #432]	@ (80075b0 <__ieee754_powf+0x4c4>)
 8007400:	f7f8 ffb2 	bl	8000368 <__aeabi_fmul>
 8007404:	496b      	ldr	r1, [pc, #428]	@ (80075b4 <__ieee754_powf+0x4c8>)
 8007406:	f7f8 fea7 	bl	8000158 <__addsf3>
 800740a:	4631      	mov	r1, r6
 800740c:	f7f8 ffac 	bl	8000368 <__aeabi_fmul>
 8007410:	4969      	ldr	r1, [pc, #420]	@ (80075b8 <__ieee754_powf+0x4cc>)
 8007412:	f7f8 fea1 	bl	8000158 <__addsf3>
 8007416:	4631      	mov	r1, r6
 8007418:	f7f8 ffa6 	bl	8000368 <__aeabi_fmul>
 800741c:	4967      	ldr	r1, [pc, #412]	@ (80075bc <__ieee754_powf+0x4d0>)
 800741e:	f7f8 fe9b 	bl	8000158 <__addsf3>
 8007422:	4631      	mov	r1, r6
 8007424:	f7f8 ffa0 	bl	8000368 <__aeabi_fmul>
 8007428:	4965      	ldr	r1, [pc, #404]	@ (80075c0 <__ieee754_powf+0x4d4>)
 800742a:	f7f8 fe95 	bl	8000158 <__addsf3>
 800742e:	4631      	mov	r1, r6
 8007430:	f7f8 ff9a 	bl	8000368 <__aeabi_fmul>
 8007434:	4963      	ldr	r1, [pc, #396]	@ (80075c4 <__ieee754_powf+0x4d8>)
 8007436:	f7f8 fe8f 	bl	8000158 <__addsf3>
 800743a:	4631      	mov	r1, r6
 800743c:	4681      	mov	r9, r0
 800743e:	4630      	mov	r0, r6
 8007440:	f7f8 ff92 	bl	8000368 <__aeabi_fmul>
 8007444:	4601      	mov	r1, r0
 8007446:	4648      	mov	r0, r9
 8007448:	f7f8 ff8e 	bl	8000368 <__aeabi_fmul>
 800744c:	4606      	mov	r6, r0
 800744e:	4641      	mov	r1, r8
 8007450:	9802      	ldr	r0, [sp, #8]
 8007452:	f7f8 fe81 	bl	8000158 <__addsf3>
 8007456:	4659      	mov	r1, fp
 8007458:	f7f8 ff86 	bl	8000368 <__aeabi_fmul>
 800745c:	4631      	mov	r1, r6
 800745e:	f7f8 fe7b 	bl	8000158 <__addsf3>
 8007462:	4641      	mov	r1, r8
 8007464:	4681      	mov	r9, r0
 8007466:	4640      	mov	r0, r8
 8007468:	f7f8 ff7e 	bl	8000368 <__aeabi_fmul>
 800746c:	4956      	ldr	r1, [pc, #344]	@ (80075c8 <__ieee754_powf+0x4dc>)
 800746e:	4682      	mov	sl, r0
 8007470:	f7f8 fe72 	bl	8000158 <__addsf3>
 8007474:	4649      	mov	r1, r9
 8007476:	f7f8 fe6f 	bl	8000158 <__addsf3>
 800747a:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800747e:	f026 060f 	bic.w	r6, r6, #15
 8007482:	4631      	mov	r1, r6
 8007484:	4640      	mov	r0, r8
 8007486:	f7f8 ff6f 	bl	8000368 <__aeabi_fmul>
 800748a:	494f      	ldr	r1, [pc, #316]	@ (80075c8 <__ieee754_powf+0x4dc>)
 800748c:	4680      	mov	r8, r0
 800748e:	4630      	mov	r0, r6
 8007490:	f7f8 fe60 	bl	8000154 <__aeabi_fsub>
 8007494:	4651      	mov	r1, sl
 8007496:	f7f8 fe5d 	bl	8000154 <__aeabi_fsub>
 800749a:	4601      	mov	r1, r0
 800749c:	4648      	mov	r0, r9
 800749e:	f7f8 fe59 	bl	8000154 <__aeabi_fsub>
 80074a2:	9902      	ldr	r1, [sp, #8]
 80074a4:	f7f8 ff60 	bl	8000368 <__aeabi_fmul>
 80074a8:	4631      	mov	r1, r6
 80074aa:	4681      	mov	r9, r0
 80074ac:	4658      	mov	r0, fp
 80074ae:	f7f8 ff5b 	bl	8000368 <__aeabi_fmul>
 80074b2:	4601      	mov	r1, r0
 80074b4:	4648      	mov	r0, r9
 80074b6:	f7f8 fe4f 	bl	8000158 <__addsf3>
 80074ba:	4682      	mov	sl, r0
 80074bc:	4601      	mov	r1, r0
 80074be:	4640      	mov	r0, r8
 80074c0:	f7f8 fe4a 	bl	8000158 <__addsf3>
 80074c4:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 80074c8:	f026 060f 	bic.w	r6, r6, #15
 80074cc:	4630      	mov	r0, r6
 80074ce:	493f      	ldr	r1, [pc, #252]	@ (80075cc <__ieee754_powf+0x4e0>)
 80074d0:	f7f8 ff4a 	bl	8000368 <__aeabi_fmul>
 80074d4:	4641      	mov	r1, r8
 80074d6:	4681      	mov	r9, r0
 80074d8:	4630      	mov	r0, r6
 80074da:	f7f8 fe3b 	bl	8000154 <__aeabi_fsub>
 80074de:	4601      	mov	r1, r0
 80074e0:	4650      	mov	r0, sl
 80074e2:	f7f8 fe37 	bl	8000154 <__aeabi_fsub>
 80074e6:	493a      	ldr	r1, [pc, #232]	@ (80075d0 <__ieee754_powf+0x4e4>)
 80074e8:	f7f8 ff3e 	bl	8000368 <__aeabi_fmul>
 80074ec:	4939      	ldr	r1, [pc, #228]	@ (80075d4 <__ieee754_powf+0x4e8>)
 80074ee:	4680      	mov	r8, r0
 80074f0:	4630      	mov	r0, r6
 80074f2:	f7f8 ff39 	bl	8000368 <__aeabi_fmul>
 80074f6:	4601      	mov	r1, r0
 80074f8:	4640      	mov	r0, r8
 80074fa:	f7f8 fe2d 	bl	8000158 <__addsf3>
 80074fe:	4b36      	ldr	r3, [pc, #216]	@ (80075d8 <__ieee754_powf+0x4ec>)
 8007500:	9a01      	ldr	r2, [sp, #4]
 8007502:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007506:	f7f8 fe27 	bl	8000158 <__addsf3>
 800750a:	9a05      	ldr	r2, [sp, #20]
 800750c:	4606      	mov	r6, r0
 800750e:	4610      	mov	r0, r2
 8007510:	f7f8 fed6 	bl	80002c0 <__aeabi_i2f>
 8007514:	4680      	mov	r8, r0
 8007516:	4b31      	ldr	r3, [pc, #196]	@ (80075dc <__ieee754_powf+0x4f0>)
 8007518:	9a01      	ldr	r2, [sp, #4]
 800751a:	4631      	mov	r1, r6
 800751c:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8007520:	4648      	mov	r0, r9
 8007522:	f7f8 fe19 	bl	8000158 <__addsf3>
 8007526:	4651      	mov	r1, sl
 8007528:	f7f8 fe16 	bl	8000158 <__addsf3>
 800752c:	4641      	mov	r1, r8
 800752e:	f7f8 fe13 	bl	8000158 <__addsf3>
 8007532:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8007536:	f02b 0b0f 	bic.w	fp, fp, #15
 800753a:	4641      	mov	r1, r8
 800753c:	4658      	mov	r0, fp
 800753e:	f7f8 fe09 	bl	8000154 <__aeabi_fsub>
 8007542:	4651      	mov	r1, sl
 8007544:	f7f8 fe06 	bl	8000154 <__aeabi_fsub>
 8007548:	4649      	mov	r1, r9
 800754a:	e6a6      	b.n	800729a <__ieee754_powf+0x1ae>
 800754c:	2200      	movs	r2, #0
 800754e:	e6fa      	b.n	8007346 <__ieee754_powf+0x25a>
 8007550:	2301      	movs	r3, #1
 8007552:	e70b      	b.n	800736c <__ieee754_powf+0x280>
 8007554:	d148      	bne.n	80075e8 <__ieee754_powf+0x4fc>
 8007556:	4922      	ldr	r1, [pc, #136]	@ (80075e0 <__ieee754_powf+0x4f4>)
 8007558:	4630      	mov	r0, r6
 800755a:	f7f8 fdfd 	bl	8000158 <__addsf3>
 800755e:	4639      	mov	r1, r7
 8007560:	4681      	mov	r9, r0
 8007562:	4620      	mov	r0, r4
 8007564:	f7f8 fdf6 	bl	8000154 <__aeabi_fsub>
 8007568:	4601      	mov	r1, r0
 800756a:	4648      	mov	r0, r9
 800756c:	f7f9 f8b8 	bl	80006e0 <__aeabi_fcmpgt>
 8007570:	2800      	cmp	r0, #0
 8007572:	f47f aec7 	bne.w	8007304 <__ieee754_powf+0x218>
 8007576:	2386      	movs	r3, #134	@ 0x86
 8007578:	e03b      	b.n	80075f2 <__ieee754_powf+0x506>
 800757a:	4a1a      	ldr	r2, [pc, #104]	@ (80075e4 <__ieee754_powf+0x4f8>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d907      	bls.n	8007590 <__ieee754_powf+0x4a4>
 8007580:	2100      	movs	r1, #0
 8007582:	4628      	mov	r0, r5
 8007584:	f7f9 f88e 	bl	80006a4 <__aeabi_fcmplt>
 8007588:	3800      	subs	r0, #0
 800758a:	bf18      	it	ne
 800758c:	2001      	movne	r0, #1
 800758e:	e645      	b.n	800721c <__ieee754_powf+0x130>
 8007590:	d12a      	bne.n	80075e8 <__ieee754_powf+0x4fc>
 8007592:	4639      	mov	r1, r7
 8007594:	f7f8 fdde 	bl	8000154 <__aeabi_fsub>
 8007598:	4631      	mov	r1, r6
 800759a:	f7f9 f897 	bl	80006cc <__aeabi_fcmpge>
 800759e:	2800      	cmp	r0, #0
 80075a0:	d0e9      	beq.n	8007576 <__ieee754_powf+0x48a>
 80075a2:	e7ed      	b.n	8007580 <__ieee754_powf+0x494>
 80075a4:	001cc471 	.word	0x001cc471
 80075a8:	005db3d6 	.word	0x005db3d6
 80075ac:	0800849c 	.word	0x0800849c
 80075b0:	3e53f142 	.word	0x3e53f142
 80075b4:	3e6c3255 	.word	0x3e6c3255
 80075b8:	3e8ba305 	.word	0x3e8ba305
 80075bc:	3eaaaaab 	.word	0x3eaaaaab
 80075c0:	3edb6db7 	.word	0x3edb6db7
 80075c4:	3f19999a 	.word	0x3f19999a
 80075c8:	40400000 	.word	0x40400000
 80075cc:	3f763800 	.word	0x3f763800
 80075d0:	3f76384f 	.word	0x3f76384f
 80075d4:	369dc3a0 	.word	0x369dc3a0
 80075d8:	0800848c 	.word	0x0800848c
 80075dc:	08008494 	.word	0x08008494
 80075e0:	3338aa3c 	.word	0x3338aa3c
 80075e4:	43160000 	.word	0x43160000
 80075e8:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80075ec:	f240 809b 	bls.w	8007726 <__ieee754_powf+0x63a>
 80075f0:	15db      	asrs	r3, r3, #23
 80075f2:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 80075f6:	3b7e      	subs	r3, #126	@ 0x7e
 80075f8:	411c      	asrs	r4, r3
 80075fa:	4444      	add	r4, r8
 80075fc:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8007600:	4961      	ldr	r1, [pc, #388]	@ (8007788 <__ieee754_powf+0x69c>)
 8007602:	3b7f      	subs	r3, #127	@ 0x7f
 8007604:	4119      	asrs	r1, r3
 8007606:	4021      	ands	r1, r4
 8007608:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800760c:	f1c3 0317 	rsb	r3, r3, #23
 8007610:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 8007614:	4638      	mov	r0, r7
 8007616:	411c      	asrs	r4, r3
 8007618:	f1b8 0f00 	cmp.w	r8, #0
 800761c:	bfb8      	it	lt
 800761e:	4264      	neglt	r4, r4
 8007620:	f7f8 fd98 	bl	8000154 <__aeabi_fsub>
 8007624:	4607      	mov	r7, r0
 8007626:	4631      	mov	r1, r6
 8007628:	4638      	mov	r0, r7
 800762a:	f7f8 fd95 	bl	8000158 <__addsf3>
 800762e:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 8007632:	f028 080f 	bic.w	r8, r8, #15
 8007636:	4640      	mov	r0, r8
 8007638:	4954      	ldr	r1, [pc, #336]	@ (800778c <__ieee754_powf+0x6a0>)
 800763a:	f7f8 fe95 	bl	8000368 <__aeabi_fmul>
 800763e:	4639      	mov	r1, r7
 8007640:	4681      	mov	r9, r0
 8007642:	4640      	mov	r0, r8
 8007644:	f7f8 fd86 	bl	8000154 <__aeabi_fsub>
 8007648:	4601      	mov	r1, r0
 800764a:	4630      	mov	r0, r6
 800764c:	f7f8 fd82 	bl	8000154 <__aeabi_fsub>
 8007650:	494f      	ldr	r1, [pc, #316]	@ (8007790 <__ieee754_powf+0x6a4>)
 8007652:	f7f8 fe89 	bl	8000368 <__aeabi_fmul>
 8007656:	494f      	ldr	r1, [pc, #316]	@ (8007794 <__ieee754_powf+0x6a8>)
 8007658:	4606      	mov	r6, r0
 800765a:	4640      	mov	r0, r8
 800765c:	f7f8 fe84 	bl	8000368 <__aeabi_fmul>
 8007660:	4601      	mov	r1, r0
 8007662:	4630      	mov	r0, r6
 8007664:	f7f8 fd78 	bl	8000158 <__addsf3>
 8007668:	4607      	mov	r7, r0
 800766a:	4601      	mov	r1, r0
 800766c:	4648      	mov	r0, r9
 800766e:	f7f8 fd73 	bl	8000158 <__addsf3>
 8007672:	4649      	mov	r1, r9
 8007674:	4606      	mov	r6, r0
 8007676:	f7f8 fd6d 	bl	8000154 <__aeabi_fsub>
 800767a:	4601      	mov	r1, r0
 800767c:	4638      	mov	r0, r7
 800767e:	f7f8 fd69 	bl	8000154 <__aeabi_fsub>
 8007682:	4631      	mov	r1, r6
 8007684:	4680      	mov	r8, r0
 8007686:	4630      	mov	r0, r6
 8007688:	f7f8 fe6e 	bl	8000368 <__aeabi_fmul>
 800768c:	4607      	mov	r7, r0
 800768e:	4942      	ldr	r1, [pc, #264]	@ (8007798 <__ieee754_powf+0x6ac>)
 8007690:	f7f8 fe6a 	bl	8000368 <__aeabi_fmul>
 8007694:	4941      	ldr	r1, [pc, #260]	@ (800779c <__ieee754_powf+0x6b0>)
 8007696:	f7f8 fd5d 	bl	8000154 <__aeabi_fsub>
 800769a:	4639      	mov	r1, r7
 800769c:	f7f8 fe64 	bl	8000368 <__aeabi_fmul>
 80076a0:	493f      	ldr	r1, [pc, #252]	@ (80077a0 <__ieee754_powf+0x6b4>)
 80076a2:	f7f8 fd59 	bl	8000158 <__addsf3>
 80076a6:	4639      	mov	r1, r7
 80076a8:	f7f8 fe5e 	bl	8000368 <__aeabi_fmul>
 80076ac:	493d      	ldr	r1, [pc, #244]	@ (80077a4 <__ieee754_powf+0x6b8>)
 80076ae:	f7f8 fd51 	bl	8000154 <__aeabi_fsub>
 80076b2:	4639      	mov	r1, r7
 80076b4:	f7f8 fe58 	bl	8000368 <__aeabi_fmul>
 80076b8:	493b      	ldr	r1, [pc, #236]	@ (80077a8 <__ieee754_powf+0x6bc>)
 80076ba:	f7f8 fd4d 	bl	8000158 <__addsf3>
 80076be:	4639      	mov	r1, r7
 80076c0:	f7f8 fe52 	bl	8000368 <__aeabi_fmul>
 80076c4:	4601      	mov	r1, r0
 80076c6:	4630      	mov	r0, r6
 80076c8:	f7f8 fd44 	bl	8000154 <__aeabi_fsub>
 80076cc:	4607      	mov	r7, r0
 80076ce:	4601      	mov	r1, r0
 80076d0:	4630      	mov	r0, r6
 80076d2:	f7f8 fe49 	bl	8000368 <__aeabi_fmul>
 80076d6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80076da:	4681      	mov	r9, r0
 80076dc:	4638      	mov	r0, r7
 80076de:	f7f8 fd39 	bl	8000154 <__aeabi_fsub>
 80076e2:	4601      	mov	r1, r0
 80076e4:	4648      	mov	r0, r9
 80076e6:	f7f8 fef3 	bl	80004d0 <__aeabi_fdiv>
 80076ea:	4641      	mov	r1, r8
 80076ec:	4607      	mov	r7, r0
 80076ee:	4630      	mov	r0, r6
 80076f0:	f7f8 fe3a 	bl	8000368 <__aeabi_fmul>
 80076f4:	4641      	mov	r1, r8
 80076f6:	f7f8 fd2f 	bl	8000158 <__addsf3>
 80076fa:	4601      	mov	r1, r0
 80076fc:	4638      	mov	r0, r7
 80076fe:	f7f8 fd29 	bl	8000154 <__aeabi_fsub>
 8007702:	4631      	mov	r1, r6
 8007704:	f7f8 fd26 	bl	8000154 <__aeabi_fsub>
 8007708:	4601      	mov	r1, r0
 800770a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800770e:	f7f8 fd21 	bl	8000154 <__aeabi_fsub>
 8007712:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8007716:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800771a:	da06      	bge.n	800772a <__ieee754_powf+0x63e>
 800771c:	4621      	mov	r1, r4
 800771e:	f000 f9af 	bl	8007a80 <scalbnf>
 8007722:	4629      	mov	r1, r5
 8007724:	e549      	b.n	80071ba <__ieee754_powf+0xce>
 8007726:	2400      	movs	r4, #0
 8007728:	e77d      	b.n	8007626 <__ieee754_powf+0x53a>
 800772a:	4618      	mov	r0, r3
 800772c:	e7f9      	b.n	8007722 <__ieee754_powf+0x636>
 800772e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007732:	e536      	b.n	80071a2 <__ieee754_powf+0xb6>
 8007734:	4639      	mov	r1, r7
 8007736:	e534      	b.n	80071a2 <__ieee754_powf+0xb6>
 8007738:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800773c:	f43f ad23 	beq.w	8007186 <__ieee754_powf+0x9a>
 8007740:	2502      	movs	r5, #2
 8007742:	4648      	mov	r0, r9
 8007744:	f000 f998 	bl	8007a78 <fabsf>
 8007748:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800774c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8007750:	46c2      	mov	sl, r8
 8007752:	4601      	mov	r1, r0
 8007754:	d003      	beq.n	800775e <__ieee754_powf+0x672>
 8007756:	f1b8 0f00 	cmp.w	r8, #0
 800775a:	f47f ad43 	bne.w	80071e4 <__ieee754_powf+0xf8>
 800775e:	2c00      	cmp	r4, #0
 8007760:	da04      	bge.n	800776c <__ieee754_powf+0x680>
 8007762:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007766:	f7f8 feb3 	bl	80004d0 <__aeabi_fdiv>
 800776a:	4601      	mov	r1, r0
 800776c:	2e00      	cmp	r6, #0
 800776e:	f6bf ad18 	bge.w	80071a2 <__ieee754_powf+0xb6>
 8007772:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8007776:	ea58 0805 	orrs.w	r8, r8, r5
 800777a:	f47f ad2e 	bne.w	80071da <__ieee754_powf+0xee>
 800777e:	4608      	mov	r0, r1
 8007780:	f7f8 fce8 	bl	8000154 <__aeabi_fsub>
 8007784:	4601      	mov	r1, r0
 8007786:	e4f8      	b.n	800717a <__ieee754_powf+0x8e>
 8007788:	ff800000 	.word	0xff800000
 800778c:	3f317200 	.word	0x3f317200
 8007790:	3f317218 	.word	0x3f317218
 8007794:	35bfbe8c 	.word	0x35bfbe8c
 8007798:	3331bb4c 	.word	0x3331bb4c
 800779c:	35ddea0e 	.word	0x35ddea0e
 80077a0:	388ab355 	.word	0x388ab355
 80077a4:	3b360b61 	.word	0x3b360b61
 80077a8:	3e2aaaab 	.word	0x3e2aaaab

080077ac <__ieee754_rem_pio2f>:
 80077ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b0:	4aa4      	ldr	r2, [pc, #656]	@ (8007a44 <__ieee754_rem_pio2f+0x298>)
 80077b2:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 80077b6:	4590      	cmp	r8, r2
 80077b8:	460c      	mov	r4, r1
 80077ba:	4682      	mov	sl, r0
 80077bc:	b087      	sub	sp, #28
 80077be:	d804      	bhi.n	80077ca <__ieee754_rem_pio2f+0x1e>
 80077c0:	2300      	movs	r3, #0
 80077c2:	6008      	str	r0, [r1, #0]
 80077c4:	604b      	str	r3, [r1, #4]
 80077c6:	2500      	movs	r5, #0
 80077c8:	e01d      	b.n	8007806 <__ieee754_rem_pio2f+0x5a>
 80077ca:	4a9f      	ldr	r2, [pc, #636]	@ (8007a48 <__ieee754_rem_pio2f+0x29c>)
 80077cc:	4590      	cmp	r8, r2
 80077ce:	d84f      	bhi.n	8007870 <__ieee754_rem_pio2f+0xc4>
 80077d0:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 80077d4:	2800      	cmp	r0, #0
 80077d6:	499d      	ldr	r1, [pc, #628]	@ (8007a4c <__ieee754_rem_pio2f+0x2a0>)
 80077d8:	4f9d      	ldr	r7, [pc, #628]	@ (8007a50 <__ieee754_rem_pio2f+0x2a4>)
 80077da:	f025 050f 	bic.w	r5, r5, #15
 80077de:	dd24      	ble.n	800782a <__ieee754_rem_pio2f+0x7e>
 80077e0:	f7f8 fcb8 	bl	8000154 <__aeabi_fsub>
 80077e4:	42bd      	cmp	r5, r7
 80077e6:	4606      	mov	r6, r0
 80077e8:	d011      	beq.n	800780e <__ieee754_rem_pio2f+0x62>
 80077ea:	499a      	ldr	r1, [pc, #616]	@ (8007a54 <__ieee754_rem_pio2f+0x2a8>)
 80077ec:	f7f8 fcb2 	bl	8000154 <__aeabi_fsub>
 80077f0:	4601      	mov	r1, r0
 80077f2:	4605      	mov	r5, r0
 80077f4:	4630      	mov	r0, r6
 80077f6:	f7f8 fcad 	bl	8000154 <__aeabi_fsub>
 80077fa:	4996      	ldr	r1, [pc, #600]	@ (8007a54 <__ieee754_rem_pio2f+0x2a8>)
 80077fc:	f7f8 fcaa 	bl	8000154 <__aeabi_fsub>
 8007800:	6025      	str	r5, [r4, #0]
 8007802:	2501      	movs	r5, #1
 8007804:	6060      	str	r0, [r4, #4]
 8007806:	4628      	mov	r0, r5
 8007808:	b007      	add	sp, #28
 800780a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800780e:	4992      	ldr	r1, [pc, #584]	@ (8007a58 <__ieee754_rem_pio2f+0x2ac>)
 8007810:	f7f8 fca0 	bl	8000154 <__aeabi_fsub>
 8007814:	4991      	ldr	r1, [pc, #580]	@ (8007a5c <__ieee754_rem_pio2f+0x2b0>)
 8007816:	4606      	mov	r6, r0
 8007818:	f7f8 fc9c 	bl	8000154 <__aeabi_fsub>
 800781c:	4601      	mov	r1, r0
 800781e:	4605      	mov	r5, r0
 8007820:	4630      	mov	r0, r6
 8007822:	f7f8 fc97 	bl	8000154 <__aeabi_fsub>
 8007826:	498d      	ldr	r1, [pc, #564]	@ (8007a5c <__ieee754_rem_pio2f+0x2b0>)
 8007828:	e7e8      	b.n	80077fc <__ieee754_rem_pio2f+0x50>
 800782a:	f7f8 fc95 	bl	8000158 <__addsf3>
 800782e:	42bd      	cmp	r5, r7
 8007830:	4606      	mov	r6, r0
 8007832:	d00f      	beq.n	8007854 <__ieee754_rem_pio2f+0xa8>
 8007834:	4987      	ldr	r1, [pc, #540]	@ (8007a54 <__ieee754_rem_pio2f+0x2a8>)
 8007836:	f7f8 fc8f 	bl	8000158 <__addsf3>
 800783a:	4601      	mov	r1, r0
 800783c:	4605      	mov	r5, r0
 800783e:	4630      	mov	r0, r6
 8007840:	f7f8 fc88 	bl	8000154 <__aeabi_fsub>
 8007844:	4983      	ldr	r1, [pc, #524]	@ (8007a54 <__ieee754_rem_pio2f+0x2a8>)
 8007846:	f7f8 fc87 	bl	8000158 <__addsf3>
 800784a:	6025      	str	r5, [r4, #0]
 800784c:	6060      	str	r0, [r4, #4]
 800784e:	f04f 35ff 	mov.w	r5, #4294967295
 8007852:	e7d8      	b.n	8007806 <__ieee754_rem_pio2f+0x5a>
 8007854:	4980      	ldr	r1, [pc, #512]	@ (8007a58 <__ieee754_rem_pio2f+0x2ac>)
 8007856:	f7f8 fc7f 	bl	8000158 <__addsf3>
 800785a:	4980      	ldr	r1, [pc, #512]	@ (8007a5c <__ieee754_rem_pio2f+0x2b0>)
 800785c:	4606      	mov	r6, r0
 800785e:	f7f8 fc7b 	bl	8000158 <__addsf3>
 8007862:	4601      	mov	r1, r0
 8007864:	4605      	mov	r5, r0
 8007866:	4630      	mov	r0, r6
 8007868:	f7f8 fc74 	bl	8000154 <__aeabi_fsub>
 800786c:	497b      	ldr	r1, [pc, #492]	@ (8007a5c <__ieee754_rem_pio2f+0x2b0>)
 800786e:	e7ea      	b.n	8007846 <__ieee754_rem_pio2f+0x9a>
 8007870:	4a7b      	ldr	r2, [pc, #492]	@ (8007a60 <__ieee754_rem_pio2f+0x2b4>)
 8007872:	4590      	cmp	r8, r2
 8007874:	f200 8095 	bhi.w	80079a2 <__ieee754_rem_pio2f+0x1f6>
 8007878:	f000 f8fe 	bl	8007a78 <fabsf>
 800787c:	4979      	ldr	r1, [pc, #484]	@ (8007a64 <__ieee754_rem_pio2f+0x2b8>)
 800787e:	4606      	mov	r6, r0
 8007880:	f7f8 fd72 	bl	8000368 <__aeabi_fmul>
 8007884:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8007888:	f7f8 fc66 	bl	8000158 <__addsf3>
 800788c:	f7f8 ff48 	bl	8000720 <__aeabi_f2iz>
 8007890:	4605      	mov	r5, r0
 8007892:	f7f8 fd15 	bl	80002c0 <__aeabi_i2f>
 8007896:	496d      	ldr	r1, [pc, #436]	@ (8007a4c <__ieee754_rem_pio2f+0x2a0>)
 8007898:	4681      	mov	r9, r0
 800789a:	f7f8 fd65 	bl	8000368 <__aeabi_fmul>
 800789e:	4601      	mov	r1, r0
 80078a0:	4630      	mov	r0, r6
 80078a2:	f7f8 fc57 	bl	8000154 <__aeabi_fsub>
 80078a6:	496b      	ldr	r1, [pc, #428]	@ (8007a54 <__ieee754_rem_pio2f+0x2a8>)
 80078a8:	4607      	mov	r7, r0
 80078aa:	4648      	mov	r0, r9
 80078ac:	f7f8 fd5c 	bl	8000368 <__aeabi_fmul>
 80078b0:	2d1f      	cmp	r5, #31
 80078b2:	4606      	mov	r6, r0
 80078b4:	dc0e      	bgt.n	80078d4 <__ieee754_rem_pio2f+0x128>
 80078b6:	4a6c      	ldr	r2, [pc, #432]	@ (8007a68 <__ieee754_rem_pio2f+0x2bc>)
 80078b8:	1e69      	subs	r1, r5, #1
 80078ba:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80078be:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 80078c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d004      	beq.n	80078d4 <__ieee754_rem_pio2f+0x128>
 80078ca:	4631      	mov	r1, r6
 80078cc:	4638      	mov	r0, r7
 80078ce:	f7f8 fc41 	bl	8000154 <__aeabi_fsub>
 80078d2:	e00b      	b.n	80078ec <__ieee754_rem_pio2f+0x140>
 80078d4:	4631      	mov	r1, r6
 80078d6:	4638      	mov	r0, r7
 80078d8:	f7f8 fc3c 	bl	8000154 <__aeabi_fsub>
 80078dc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80078e0:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 80078e4:	2b08      	cmp	r3, #8
 80078e6:	ea4f 5be8 	mov.w	fp, r8, asr #23
 80078ea:	dc01      	bgt.n	80078f0 <__ieee754_rem_pio2f+0x144>
 80078ec:	6020      	str	r0, [r4, #0]
 80078ee:	e026      	b.n	800793e <__ieee754_rem_pio2f+0x192>
 80078f0:	4959      	ldr	r1, [pc, #356]	@ (8007a58 <__ieee754_rem_pio2f+0x2ac>)
 80078f2:	4648      	mov	r0, r9
 80078f4:	f7f8 fd38 	bl	8000368 <__aeabi_fmul>
 80078f8:	4606      	mov	r6, r0
 80078fa:	4601      	mov	r1, r0
 80078fc:	4638      	mov	r0, r7
 80078fe:	f7f8 fc29 	bl	8000154 <__aeabi_fsub>
 8007902:	4601      	mov	r1, r0
 8007904:	4680      	mov	r8, r0
 8007906:	4638      	mov	r0, r7
 8007908:	f7f8 fc24 	bl	8000154 <__aeabi_fsub>
 800790c:	4631      	mov	r1, r6
 800790e:	f7f8 fc21 	bl	8000154 <__aeabi_fsub>
 8007912:	4606      	mov	r6, r0
 8007914:	4951      	ldr	r1, [pc, #324]	@ (8007a5c <__ieee754_rem_pio2f+0x2b0>)
 8007916:	4648      	mov	r0, r9
 8007918:	f7f8 fd26 	bl	8000368 <__aeabi_fmul>
 800791c:	4631      	mov	r1, r6
 800791e:	f7f8 fc19 	bl	8000154 <__aeabi_fsub>
 8007922:	4601      	mov	r1, r0
 8007924:	4606      	mov	r6, r0
 8007926:	4640      	mov	r0, r8
 8007928:	f7f8 fc14 	bl	8000154 <__aeabi_fsub>
 800792c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007930:	ebab 0b03 	sub.w	fp, fp, r3
 8007934:	f1bb 0f19 	cmp.w	fp, #25
 8007938:	dc18      	bgt.n	800796c <__ieee754_rem_pio2f+0x1c0>
 800793a:	4647      	mov	r7, r8
 800793c:	6020      	str	r0, [r4, #0]
 800793e:	f8d4 8000 	ldr.w	r8, [r4]
 8007942:	4638      	mov	r0, r7
 8007944:	4641      	mov	r1, r8
 8007946:	f7f8 fc05 	bl	8000154 <__aeabi_fsub>
 800794a:	4631      	mov	r1, r6
 800794c:	f7f8 fc02 	bl	8000154 <__aeabi_fsub>
 8007950:	f1ba 0f00 	cmp.w	sl, #0
 8007954:	6060      	str	r0, [r4, #4]
 8007956:	f6bf af56 	bge.w	8007806 <__ieee754_rem_pio2f+0x5a>
 800795a:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 800795e:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8007962:	f8c4 8000 	str.w	r8, [r4]
 8007966:	6060      	str	r0, [r4, #4]
 8007968:	426d      	negs	r5, r5
 800796a:	e74c      	b.n	8007806 <__ieee754_rem_pio2f+0x5a>
 800796c:	493f      	ldr	r1, [pc, #252]	@ (8007a6c <__ieee754_rem_pio2f+0x2c0>)
 800796e:	4648      	mov	r0, r9
 8007970:	f7f8 fcfa 	bl	8000368 <__aeabi_fmul>
 8007974:	4606      	mov	r6, r0
 8007976:	4601      	mov	r1, r0
 8007978:	4640      	mov	r0, r8
 800797a:	f7f8 fbeb 	bl	8000154 <__aeabi_fsub>
 800797e:	4601      	mov	r1, r0
 8007980:	4607      	mov	r7, r0
 8007982:	4640      	mov	r0, r8
 8007984:	f7f8 fbe6 	bl	8000154 <__aeabi_fsub>
 8007988:	4631      	mov	r1, r6
 800798a:	f7f8 fbe3 	bl	8000154 <__aeabi_fsub>
 800798e:	4606      	mov	r6, r0
 8007990:	4937      	ldr	r1, [pc, #220]	@ (8007a70 <__ieee754_rem_pio2f+0x2c4>)
 8007992:	4648      	mov	r0, r9
 8007994:	f7f8 fce8 	bl	8000368 <__aeabi_fmul>
 8007998:	4631      	mov	r1, r6
 800799a:	f7f8 fbdb 	bl	8000154 <__aeabi_fsub>
 800799e:	4606      	mov	r6, r0
 80079a0:	e793      	b.n	80078ca <__ieee754_rem_pio2f+0x11e>
 80079a2:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80079a6:	d305      	bcc.n	80079b4 <__ieee754_rem_pio2f+0x208>
 80079a8:	4601      	mov	r1, r0
 80079aa:	f7f8 fbd3 	bl	8000154 <__aeabi_fsub>
 80079ae:	6060      	str	r0, [r4, #4]
 80079b0:	6020      	str	r0, [r4, #0]
 80079b2:	e708      	b.n	80077c6 <__ieee754_rem_pio2f+0x1a>
 80079b4:	ea4f 56e8 	mov.w	r6, r8, asr #23
 80079b8:	3e86      	subs	r6, #134	@ 0x86
 80079ba:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 80079be:	4640      	mov	r0, r8
 80079c0:	f7f8 feae 	bl	8000720 <__aeabi_f2iz>
 80079c4:	f7f8 fc7c 	bl	80002c0 <__aeabi_i2f>
 80079c8:	4601      	mov	r1, r0
 80079ca:	9003      	str	r0, [sp, #12]
 80079cc:	4640      	mov	r0, r8
 80079ce:	f7f8 fbc1 	bl	8000154 <__aeabi_fsub>
 80079d2:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80079d6:	f7f8 fcc7 	bl	8000368 <__aeabi_fmul>
 80079da:	4607      	mov	r7, r0
 80079dc:	f7f8 fea0 	bl	8000720 <__aeabi_f2iz>
 80079e0:	f7f8 fc6e 	bl	80002c0 <__aeabi_i2f>
 80079e4:	4601      	mov	r1, r0
 80079e6:	9004      	str	r0, [sp, #16]
 80079e8:	4605      	mov	r5, r0
 80079ea:	4638      	mov	r0, r7
 80079ec:	f7f8 fbb2 	bl	8000154 <__aeabi_fsub>
 80079f0:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80079f4:	f7f8 fcb8 	bl	8000368 <__aeabi_fmul>
 80079f8:	2100      	movs	r1, #0
 80079fa:	9005      	str	r0, [sp, #20]
 80079fc:	f7f8 fe48 	bl	8000690 <__aeabi_fcmpeq>
 8007a00:	b1f0      	cbz	r0, 8007a40 <__ieee754_rem_pio2f+0x294>
 8007a02:	2100      	movs	r1, #0
 8007a04:	4628      	mov	r0, r5
 8007a06:	f7f8 fe43 	bl	8000690 <__aeabi_fcmpeq>
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	bf14      	ite	ne
 8007a0e:	2301      	movne	r3, #1
 8007a10:	2302      	moveq	r3, #2
 8007a12:	4a18      	ldr	r2, [pc, #96]	@ (8007a74 <__ieee754_rem_pio2f+0x2c8>)
 8007a14:	4621      	mov	r1, r4
 8007a16:	9201      	str	r2, [sp, #4]
 8007a18:	2202      	movs	r2, #2
 8007a1a:	a803      	add	r0, sp, #12
 8007a1c:	9200      	str	r2, [sp, #0]
 8007a1e:	4632      	mov	r2, r6
 8007a20:	f000 f898 	bl	8007b54 <__kernel_rem_pio2f>
 8007a24:	f1ba 0f00 	cmp.w	sl, #0
 8007a28:	4605      	mov	r5, r0
 8007a2a:	f6bf aeec 	bge.w	8007806 <__ieee754_rem_pio2f+0x5a>
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007a34:	6023      	str	r3, [r4, #0]
 8007a36:	6863      	ldr	r3, [r4, #4]
 8007a38:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007a3c:	6063      	str	r3, [r4, #4]
 8007a3e:	e793      	b.n	8007968 <__ieee754_rem_pio2f+0x1bc>
 8007a40:	2303      	movs	r3, #3
 8007a42:	e7e6      	b.n	8007a12 <__ieee754_rem_pio2f+0x266>
 8007a44:	3f490fd8 	.word	0x3f490fd8
 8007a48:	4016cbe3 	.word	0x4016cbe3
 8007a4c:	3fc90f80 	.word	0x3fc90f80
 8007a50:	3fc90fd0 	.word	0x3fc90fd0
 8007a54:	37354443 	.word	0x37354443
 8007a58:	37354400 	.word	0x37354400
 8007a5c:	2e85a308 	.word	0x2e85a308
 8007a60:	43490f80 	.word	0x43490f80
 8007a64:	3f22f984 	.word	0x3f22f984
 8007a68:	080084a4 	.word	0x080084a4
 8007a6c:	2e85a300 	.word	0x2e85a300
 8007a70:	248d3132 	.word	0x248d3132
 8007a74:	08008524 	.word	0x08008524

08007a78 <fabsf>:
 8007a78:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007a7c:	4770      	bx	lr
	...

08007a80 <scalbnf>:
 8007a80:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8007a84:	b538      	push	{r3, r4, r5, lr}
 8007a86:	4603      	mov	r3, r0
 8007a88:	460d      	mov	r5, r1
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	d02e      	beq.n	8007aec <scalbnf+0x6c>
 8007a8e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007a92:	d304      	bcc.n	8007a9e <scalbnf+0x1e>
 8007a94:	4601      	mov	r1, r0
 8007a96:	f7f8 fb5f 	bl	8000158 <__addsf3>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	e026      	b.n	8007aec <scalbnf+0x6c>
 8007a9e:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8007aa2:	d118      	bne.n	8007ad6 <scalbnf+0x56>
 8007aa4:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8007aa8:	f7f8 fc5e 	bl	8000368 <__aeabi_fmul>
 8007aac:	4a17      	ldr	r2, [pc, #92]	@ (8007b0c <scalbnf+0x8c>)
 8007aae:	4603      	mov	r3, r0
 8007ab0:	4295      	cmp	r5, r2
 8007ab2:	db0c      	blt.n	8007ace <scalbnf+0x4e>
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8007aba:	3a19      	subs	r2, #25
 8007abc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8007ac0:	428d      	cmp	r5, r1
 8007ac2:	dd0a      	ble.n	8007ada <scalbnf+0x5a>
 8007ac4:	4912      	ldr	r1, [pc, #72]	@ (8007b10 <scalbnf+0x90>)
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f361 001e 	bfi	r0, r1, #0, #31
 8007acc:	e000      	b.n	8007ad0 <scalbnf+0x50>
 8007ace:	4911      	ldr	r1, [pc, #68]	@ (8007b14 <scalbnf+0x94>)
 8007ad0:	f7f8 fc4a 	bl	8000368 <__aeabi_fmul>
 8007ad4:	e7e1      	b.n	8007a9a <scalbnf+0x1a>
 8007ad6:	0dd2      	lsrs	r2, r2, #23
 8007ad8:	e7f0      	b.n	8007abc <scalbnf+0x3c>
 8007ada:	1951      	adds	r1, r2, r5
 8007adc:	29fe      	cmp	r1, #254	@ 0xfe
 8007ade:	dcf1      	bgt.n	8007ac4 <scalbnf+0x44>
 8007ae0:	2900      	cmp	r1, #0
 8007ae2:	dd05      	ble.n	8007af0 <scalbnf+0x70>
 8007ae4:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8007ae8:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8007aec:	4618      	mov	r0, r3
 8007aee:	bd38      	pop	{r3, r4, r5, pc}
 8007af0:	f111 0f16 	cmn.w	r1, #22
 8007af4:	da01      	bge.n	8007afa <scalbnf+0x7a>
 8007af6:	4907      	ldr	r1, [pc, #28]	@ (8007b14 <scalbnf+0x94>)
 8007af8:	e7e5      	b.n	8007ac6 <scalbnf+0x46>
 8007afa:	f101 0019 	add.w	r0, r1, #25
 8007afe:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8007b02:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8007b06:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8007b0a:	e7e1      	b.n	8007ad0 <scalbnf+0x50>
 8007b0c:	ffff3cb0 	.word	0xffff3cb0
 8007b10:	7149f2ca 	.word	0x7149f2ca
 8007b14:	0da24260 	.word	0x0da24260

08007b18 <with_errnof>:
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	460d      	mov	r5, r1
 8007b1e:	f7fe f893 	bl	8005c48 <__errno>
 8007b22:	6005      	str	r5, [r0, #0]
 8007b24:	4620      	mov	r0, r4
 8007b26:	bd38      	pop	{r3, r4, r5, pc}

08007b28 <xflowf>:
 8007b28:	b508      	push	{r3, lr}
 8007b2a:	b140      	cbz	r0, 8007b3e <xflowf+0x16>
 8007b2c:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8007b30:	f7f8 fc1a 	bl	8000368 <__aeabi_fmul>
 8007b34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007b38:	2122      	movs	r1, #34	@ 0x22
 8007b3a:	f7ff bfed 	b.w	8007b18 <with_errnof>
 8007b3e:	4608      	mov	r0, r1
 8007b40:	e7f6      	b.n	8007b30 <xflowf+0x8>

08007b42 <__math_uflowf>:
 8007b42:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8007b46:	f7ff bfef 	b.w	8007b28 <xflowf>

08007b4a <__math_oflowf>:
 8007b4a:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8007b4e:	f7ff bfeb 	b.w	8007b28 <xflowf>
	...

08007b54 <__kernel_rem_pio2f>:
 8007b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b58:	b0db      	sub	sp, #364	@ 0x16c
 8007b5a:	9202      	str	r2, [sp, #8]
 8007b5c:	9304      	str	r3, [sp, #16]
 8007b5e:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8007b60:	4bac      	ldr	r3, [pc, #688]	@ (8007e14 <__kernel_rem_pio2f+0x2c0>)
 8007b62:	9005      	str	r0, [sp, #20]
 8007b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b68:	9100      	str	r1, [sp, #0]
 8007b6a:	9301      	str	r3, [sp, #4]
 8007b6c:	9b04      	ldr	r3, [sp, #16]
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	9303      	str	r3, [sp, #12]
 8007b72:	9b02      	ldr	r3, [sp, #8]
 8007b74:	1d1a      	adds	r2, r3, #4
 8007b76:	f2c0 8099 	blt.w	8007cac <__kernel_rem_pio2f+0x158>
 8007b7a:	1edc      	subs	r4, r3, #3
 8007b7c:	bf48      	it	mi
 8007b7e:	1d1c      	addmi	r4, r3, #4
 8007b80:	10e4      	asrs	r4, r4, #3
 8007b82:	2500      	movs	r5, #0
 8007b84:	f04f 0b00 	mov.w	fp, #0
 8007b88:	1c67      	adds	r7, r4, #1
 8007b8a:	00fb      	lsls	r3, r7, #3
 8007b8c:	9306      	str	r3, [sp, #24]
 8007b8e:	9b02      	ldr	r3, [sp, #8]
 8007b90:	9a03      	ldr	r2, [sp, #12]
 8007b92:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8007b96:	9b01      	ldr	r3, [sp, #4]
 8007b98:	eba4 0802 	sub.w	r8, r4, r2
 8007b9c:	eb03 0902 	add.w	r9, r3, r2
 8007ba0:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8007ba2:	ae1e      	add	r6, sp, #120	@ 0x78
 8007ba4:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8007ba8:	454d      	cmp	r5, r9
 8007baa:	f340 8081 	ble.w	8007cb0 <__kernel_rem_pio2f+0x15c>
 8007bae:	9a04      	ldr	r2, [sp, #16]
 8007bb0:	ab1e      	add	r3, sp, #120	@ 0x78
 8007bb2:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8007bb6:	f04f 0900 	mov.w	r9, #0
 8007bba:	2300      	movs	r3, #0
 8007bbc:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8007bc0:	9a01      	ldr	r2, [sp, #4]
 8007bc2:	4591      	cmp	r9, r2
 8007bc4:	f340 809a 	ble.w	8007cfc <__kernel_rem_pio2f+0x1a8>
 8007bc8:	4613      	mov	r3, r2
 8007bca:	aa0a      	add	r2, sp, #40	@ 0x28
 8007bcc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007bd0:	9308      	str	r3, [sp, #32]
 8007bd2:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8007bd4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007bd8:	9c01      	ldr	r4, [sp, #4]
 8007bda:	9307      	str	r3, [sp, #28]
 8007bdc:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8007be0:	4646      	mov	r6, r8
 8007be2:	4625      	mov	r5, r4
 8007be4:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 8007be8:	ab5a      	add	r3, sp, #360	@ 0x168
 8007bea:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007bee:	f853 bc50 	ldr.w	fp, [r3, #-80]
 8007bf2:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8007bf6:	2d00      	cmp	r5, #0
 8007bf8:	f300 8085 	bgt.w	8007d06 <__kernel_rem_pio2f+0x1b2>
 8007bfc:	4639      	mov	r1, r7
 8007bfe:	4658      	mov	r0, fp
 8007c00:	f7ff ff3e 	bl	8007a80 <scalbnf>
 8007c04:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8007c08:	4605      	mov	r5, r0
 8007c0a:	f7f8 fbad 	bl	8000368 <__aeabi_fmul>
 8007c0e:	f000 fa3f 	bl	8008090 <floorf>
 8007c12:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8007c16:	f7f8 fba7 	bl	8000368 <__aeabi_fmul>
 8007c1a:	4601      	mov	r1, r0
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	f7f8 fa99 	bl	8000154 <__aeabi_fsub>
 8007c22:	4605      	mov	r5, r0
 8007c24:	f7f8 fd7c 	bl	8000720 <__aeabi_f2iz>
 8007c28:	4606      	mov	r6, r0
 8007c2a:	f7f8 fb49 	bl	80002c0 <__aeabi_i2f>
 8007c2e:	4601      	mov	r1, r0
 8007c30:	4628      	mov	r0, r5
 8007c32:	f7f8 fa8f 	bl	8000154 <__aeabi_fsub>
 8007c36:	2f00      	cmp	r7, #0
 8007c38:	4681      	mov	r9, r0
 8007c3a:	f340 8081 	ble.w	8007d40 <__kernel_rem_pio2f+0x1ec>
 8007c3e:	1e62      	subs	r2, r4, #1
 8007c40:	ab0a      	add	r3, sp, #40	@ 0x28
 8007c42:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8007c46:	f1c7 0108 	rsb	r1, r7, #8
 8007c4a:	fa45 f301 	asr.w	r3, r5, r1
 8007c4e:	441e      	add	r6, r3
 8007c50:	408b      	lsls	r3, r1
 8007c52:	1aed      	subs	r5, r5, r3
 8007c54:	ab0a      	add	r3, sp, #40	@ 0x28
 8007c56:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007c5a:	f1c7 0307 	rsb	r3, r7, #7
 8007c5e:	411d      	asrs	r5, r3
 8007c60:	2d00      	cmp	r5, #0
 8007c62:	dd7a      	ble.n	8007d5a <__kernel_rem_pio2f+0x206>
 8007c64:	2200      	movs	r2, #0
 8007c66:	4692      	mov	sl, r2
 8007c68:	3601      	adds	r6, #1
 8007c6a:	4294      	cmp	r4, r2
 8007c6c:	f300 80aa 	bgt.w	8007dc4 <__kernel_rem_pio2f+0x270>
 8007c70:	2f00      	cmp	r7, #0
 8007c72:	dd05      	ble.n	8007c80 <__kernel_rem_pio2f+0x12c>
 8007c74:	2f01      	cmp	r7, #1
 8007c76:	f000 80b6 	beq.w	8007de6 <__kernel_rem_pio2f+0x292>
 8007c7a:	2f02      	cmp	r7, #2
 8007c7c:	f000 80bd 	beq.w	8007dfa <__kernel_rem_pio2f+0x2a6>
 8007c80:	2d02      	cmp	r5, #2
 8007c82:	d16a      	bne.n	8007d5a <__kernel_rem_pio2f+0x206>
 8007c84:	4649      	mov	r1, r9
 8007c86:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007c8a:	f7f8 fa63 	bl	8000154 <__aeabi_fsub>
 8007c8e:	4681      	mov	r9, r0
 8007c90:	f1ba 0f00 	cmp.w	sl, #0
 8007c94:	d061      	beq.n	8007d5a <__kernel_rem_pio2f+0x206>
 8007c96:	4639      	mov	r1, r7
 8007c98:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007c9c:	f7ff fef0 	bl	8007a80 <scalbnf>
 8007ca0:	4601      	mov	r1, r0
 8007ca2:	4648      	mov	r0, r9
 8007ca4:	f7f8 fa56 	bl	8000154 <__aeabi_fsub>
 8007ca8:	4681      	mov	r9, r0
 8007caa:	e056      	b.n	8007d5a <__kernel_rem_pio2f+0x206>
 8007cac:	2400      	movs	r4, #0
 8007cae:	e768      	b.n	8007b82 <__kernel_rem_pio2f+0x2e>
 8007cb0:	eb18 0f05 	cmn.w	r8, r5
 8007cb4:	d407      	bmi.n	8007cc6 <__kernel_rem_pio2f+0x172>
 8007cb6:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8007cba:	f7f8 fb01 	bl	80002c0 <__aeabi_i2f>
 8007cbe:	f846 0b04 	str.w	r0, [r6], #4
 8007cc2:	3501      	adds	r5, #1
 8007cc4:	e770      	b.n	8007ba8 <__kernel_rem_pio2f+0x54>
 8007cc6:	4658      	mov	r0, fp
 8007cc8:	e7f9      	b.n	8007cbe <__kernel_rem_pio2f+0x16a>
 8007cca:	9307      	str	r3, [sp, #28]
 8007ccc:	9b05      	ldr	r3, [sp, #20]
 8007cce:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 8007cd2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007cd6:	f7f8 fb47 	bl	8000368 <__aeabi_fmul>
 8007cda:	4601      	mov	r1, r0
 8007cdc:	4630      	mov	r0, r6
 8007cde:	f7f8 fa3b 	bl	8000158 <__addsf3>
 8007ce2:	4606      	mov	r6, r0
 8007ce4:	9b07      	ldr	r3, [sp, #28]
 8007ce6:	f108 0801 	add.w	r8, r8, #1
 8007cea:	9a03      	ldr	r2, [sp, #12]
 8007cec:	4590      	cmp	r8, r2
 8007cee:	ddec      	ble.n	8007cca <__kernel_rem_pio2f+0x176>
 8007cf0:	f84a 6b04 	str.w	r6, [sl], #4
 8007cf4:	f109 0901 	add.w	r9, r9, #1
 8007cf8:	3504      	adds	r5, #4
 8007cfa:	e761      	b.n	8007bc0 <__kernel_rem_pio2f+0x6c>
 8007cfc:	46ab      	mov	fp, r5
 8007cfe:	461e      	mov	r6, r3
 8007d00:	f04f 0800 	mov.w	r8, #0
 8007d04:	e7f1      	b.n	8007cea <__kernel_rem_pio2f+0x196>
 8007d06:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8007d0a:	4658      	mov	r0, fp
 8007d0c:	f7f8 fb2c 	bl	8000368 <__aeabi_fmul>
 8007d10:	f7f8 fd06 	bl	8000720 <__aeabi_f2iz>
 8007d14:	f7f8 fad4 	bl	80002c0 <__aeabi_i2f>
 8007d18:	4649      	mov	r1, r9
 8007d1a:	9009      	str	r0, [sp, #36]	@ 0x24
 8007d1c:	f7f8 fb24 	bl	8000368 <__aeabi_fmul>
 8007d20:	4601      	mov	r1, r0
 8007d22:	4658      	mov	r0, fp
 8007d24:	f7f8 fa16 	bl	8000154 <__aeabi_fsub>
 8007d28:	f7f8 fcfa 	bl	8000720 <__aeabi_f2iz>
 8007d2c:	3d01      	subs	r5, #1
 8007d2e:	f846 0b04 	str.w	r0, [r6], #4
 8007d32:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 8007d36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d38:	f7f8 fa0e 	bl	8000158 <__addsf3>
 8007d3c:	4683      	mov	fp, r0
 8007d3e:	e75a      	b.n	8007bf6 <__kernel_rem_pio2f+0xa2>
 8007d40:	d105      	bne.n	8007d4e <__kernel_rem_pio2f+0x1fa>
 8007d42:	1e63      	subs	r3, r4, #1
 8007d44:	aa0a      	add	r2, sp, #40	@ 0x28
 8007d46:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8007d4a:	11ed      	asrs	r5, r5, #7
 8007d4c:	e788      	b.n	8007c60 <__kernel_rem_pio2f+0x10c>
 8007d4e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8007d52:	f7f8 fcbb 	bl	80006cc <__aeabi_fcmpge>
 8007d56:	4605      	mov	r5, r0
 8007d58:	bb90      	cbnz	r0, 8007dc0 <__kernel_rem_pio2f+0x26c>
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	4648      	mov	r0, r9
 8007d5e:	f7f8 fc97 	bl	8000690 <__aeabi_fcmpeq>
 8007d62:	2800      	cmp	r0, #0
 8007d64:	f000 8090 	beq.w	8007e88 <__kernel_rem_pio2f+0x334>
 8007d68:	2200      	movs	r2, #0
 8007d6a:	1e63      	subs	r3, r4, #1
 8007d6c:	9901      	ldr	r1, [sp, #4]
 8007d6e:	428b      	cmp	r3, r1
 8007d70:	da4a      	bge.n	8007e08 <__kernel_rem_pio2f+0x2b4>
 8007d72:	2a00      	cmp	r2, #0
 8007d74:	d076      	beq.n	8007e64 <__kernel_rem_pio2f+0x310>
 8007d76:	3c01      	subs	r4, #1
 8007d78:	ab0a      	add	r3, sp, #40	@ 0x28
 8007d7a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007d7e:	3f08      	subs	r7, #8
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d0f8      	beq.n	8007d76 <__kernel_rem_pio2f+0x222>
 8007d84:	4639      	mov	r1, r7
 8007d86:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007d8a:	f7ff fe79 	bl	8007a80 <scalbnf>
 8007d8e:	46a2      	mov	sl, r4
 8007d90:	4607      	mov	r7, r0
 8007d92:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 8007d96:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 8007d9a:	f1ba 0f00 	cmp.w	sl, #0
 8007d9e:	f280 80a1 	bge.w	8007ee4 <__kernel_rem_pio2f+0x390>
 8007da2:	4627      	mov	r7, r4
 8007da4:	2200      	movs	r2, #0
 8007da6:	2f00      	cmp	r7, #0
 8007da8:	f2c0 80cb 	blt.w	8007f42 <__kernel_rem_pio2f+0x3ee>
 8007dac:	a946      	add	r1, sp, #280	@ 0x118
 8007dae:	4690      	mov	r8, r2
 8007db0:	f04f 0a00 	mov.w	sl, #0
 8007db4:	4b18      	ldr	r3, [pc, #96]	@ (8007e18 <__kernel_rem_pio2f+0x2c4>)
 8007db6:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8007dba:	eba4 0907 	sub.w	r9, r4, r7
 8007dbe:	e0b4      	b.n	8007f2a <__kernel_rem_pio2f+0x3d6>
 8007dc0:	2502      	movs	r5, #2
 8007dc2:	e74f      	b.n	8007c64 <__kernel_rem_pio2f+0x110>
 8007dc4:	f858 3b04 	ldr.w	r3, [r8], #4
 8007dc8:	f1ba 0f00 	cmp.w	sl, #0
 8007dcc:	d108      	bne.n	8007de0 <__kernel_rem_pio2f+0x28c>
 8007dce:	b123      	cbz	r3, 8007dda <__kernel_rem_pio2f+0x286>
 8007dd0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8007dd4:	f848 3c04 	str.w	r3, [r8, #-4]
 8007dd8:	2301      	movs	r3, #1
 8007dda:	469a      	mov	sl, r3
 8007ddc:	3201      	adds	r2, #1
 8007dde:	e744      	b.n	8007c6a <__kernel_rem_pio2f+0x116>
 8007de0:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8007de4:	e7f6      	b.n	8007dd4 <__kernel_rem_pio2f+0x280>
 8007de6:	1e62      	subs	r2, r4, #1
 8007de8:	ab0a      	add	r3, sp, #40	@ 0x28
 8007dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007df2:	a90a      	add	r1, sp, #40	@ 0x28
 8007df4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007df8:	e742      	b.n	8007c80 <__kernel_rem_pio2f+0x12c>
 8007dfa:	1e62      	subs	r2, r4, #1
 8007dfc:	ab0a      	add	r3, sp, #40	@ 0x28
 8007dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e06:	e7f4      	b.n	8007df2 <__kernel_rem_pio2f+0x29e>
 8007e08:	a90a      	add	r1, sp, #40	@ 0x28
 8007e0a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	430a      	orrs	r2, r1
 8007e12:	e7ab      	b.n	8007d6c <__kernel_rem_pio2f+0x218>
 8007e14:	08008868 	.word	0x08008868
 8007e18:	0800883c 	.word	0x0800883c
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007e22:	2900      	cmp	r1, #0
 8007e24:	d0fa      	beq.n	8007e1c <__kernel_rem_pio2f+0x2c8>
 8007e26:	9a04      	ldr	r2, [sp, #16]
 8007e28:	a91e      	add	r1, sp, #120	@ 0x78
 8007e2a:	18a2      	adds	r2, r4, r2
 8007e2c:	1c66      	adds	r6, r4, #1
 8007e2e:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 8007e32:	441c      	add	r4, r3
 8007e34:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 8007e38:	42b4      	cmp	r4, r6
 8007e3a:	f6ff aecf 	blt.w	8007bdc <__kernel_rem_pio2f+0x88>
 8007e3e:	9b07      	ldr	r3, [sp, #28]
 8007e40:	46ab      	mov	fp, r5
 8007e42:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007e46:	f7f8 fa3b 	bl	80002c0 <__aeabi_i2f>
 8007e4a:	f04f 0a00 	mov.w	sl, #0
 8007e4e:	f04f 0800 	mov.w	r8, #0
 8007e52:	6028      	str	r0, [r5, #0]
 8007e54:	9b03      	ldr	r3, [sp, #12]
 8007e56:	459a      	cmp	sl, r3
 8007e58:	dd07      	ble.n	8007e6a <__kernel_rem_pio2f+0x316>
 8007e5a:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 8007e5e:	3504      	adds	r5, #4
 8007e60:	3601      	adds	r6, #1
 8007e62:	e7e9      	b.n	8007e38 <__kernel_rem_pio2f+0x2e4>
 8007e64:	2301      	movs	r3, #1
 8007e66:	9a08      	ldr	r2, [sp, #32]
 8007e68:	e7d9      	b.n	8007e1e <__kernel_rem_pio2f+0x2ca>
 8007e6a:	9b05      	ldr	r3, [sp, #20]
 8007e6c:	f85b 0904 	ldr.w	r0, [fp], #-4
 8007e70:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8007e74:	f7f8 fa78 	bl	8000368 <__aeabi_fmul>
 8007e78:	4601      	mov	r1, r0
 8007e7a:	4640      	mov	r0, r8
 8007e7c:	f7f8 f96c 	bl	8000158 <__addsf3>
 8007e80:	f10a 0a01 	add.w	sl, sl, #1
 8007e84:	4680      	mov	r8, r0
 8007e86:	e7e5      	b.n	8007e54 <__kernel_rem_pio2f+0x300>
 8007e88:	9b06      	ldr	r3, [sp, #24]
 8007e8a:	9a02      	ldr	r2, [sp, #8]
 8007e8c:	4648      	mov	r0, r9
 8007e8e:	1a99      	subs	r1, r3, r2
 8007e90:	f7ff fdf6 	bl	8007a80 <scalbnf>
 8007e94:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8007e98:	4680      	mov	r8, r0
 8007e9a:	f7f8 fc17 	bl	80006cc <__aeabi_fcmpge>
 8007e9e:	b1f8      	cbz	r0, 8007ee0 <__kernel_rem_pio2f+0x38c>
 8007ea0:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8007ea4:	4640      	mov	r0, r8
 8007ea6:	f7f8 fa5f 	bl	8000368 <__aeabi_fmul>
 8007eaa:	f7f8 fc39 	bl	8000720 <__aeabi_f2iz>
 8007eae:	f7f8 fa07 	bl	80002c0 <__aeabi_i2f>
 8007eb2:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8007eb6:	4681      	mov	r9, r0
 8007eb8:	f7f8 fa56 	bl	8000368 <__aeabi_fmul>
 8007ebc:	4601      	mov	r1, r0
 8007ebe:	4640      	mov	r0, r8
 8007ec0:	f7f8 f948 	bl	8000154 <__aeabi_fsub>
 8007ec4:	f7f8 fc2c 	bl	8000720 <__aeabi_f2iz>
 8007ec8:	ab0a      	add	r3, sp, #40	@ 0x28
 8007eca:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007ece:	4648      	mov	r0, r9
 8007ed0:	3401      	adds	r4, #1
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	f7f8 fc24 	bl	8000720 <__aeabi_f2iz>
 8007ed8:	ab0a      	add	r3, sp, #40	@ 0x28
 8007eda:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007ede:	e751      	b.n	8007d84 <__kernel_rem_pio2f+0x230>
 8007ee0:	4640      	mov	r0, r8
 8007ee2:	e7f7      	b.n	8007ed4 <__kernel_rem_pio2f+0x380>
 8007ee4:	ab0a      	add	r3, sp, #40	@ 0x28
 8007ee6:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007eea:	f7f8 f9e9 	bl	80002c0 <__aeabi_i2f>
 8007eee:	4639      	mov	r1, r7
 8007ef0:	f7f8 fa3a 	bl	8000368 <__aeabi_fmul>
 8007ef4:	4649      	mov	r1, r9
 8007ef6:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 8007efa:	4638      	mov	r0, r7
 8007efc:	f7f8 fa34 	bl	8000368 <__aeabi_fmul>
 8007f00:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f04:	4607      	mov	r7, r0
 8007f06:	e748      	b.n	8007d9a <__kernel_rem_pio2f+0x246>
 8007f08:	f853 0b04 	ldr.w	r0, [r3], #4
 8007f0c:	f85b 1b04 	ldr.w	r1, [fp], #4
 8007f10:	9203      	str	r2, [sp, #12]
 8007f12:	9302      	str	r3, [sp, #8]
 8007f14:	f7f8 fa28 	bl	8000368 <__aeabi_fmul>
 8007f18:	4601      	mov	r1, r0
 8007f1a:	4640      	mov	r0, r8
 8007f1c:	f7f8 f91c 	bl	8000158 <__addsf3>
 8007f20:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007f24:	4680      	mov	r8, r0
 8007f26:	f10a 0a01 	add.w	sl, sl, #1
 8007f2a:	9901      	ldr	r1, [sp, #4]
 8007f2c:	458a      	cmp	sl, r1
 8007f2e:	dc01      	bgt.n	8007f34 <__kernel_rem_pio2f+0x3e0>
 8007f30:	45ca      	cmp	sl, r9
 8007f32:	dde9      	ble.n	8007f08 <__kernel_rem_pio2f+0x3b4>
 8007f34:	ab5a      	add	r3, sp, #360	@ 0x168
 8007f36:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8007f3a:	f849 8ca0 	str.w	r8, [r9, #-160]
 8007f3e:	3f01      	subs	r7, #1
 8007f40:	e731      	b.n	8007da6 <__kernel_rem_pio2f+0x252>
 8007f42:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	dc07      	bgt.n	8007f58 <__kernel_rem_pio2f+0x404>
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	dc4e      	bgt.n	8007fea <__kernel_rem_pio2f+0x496>
 8007f4c:	d02e      	beq.n	8007fac <__kernel_rem_pio2f+0x458>
 8007f4e:	f006 0007 	and.w	r0, r6, #7
 8007f52:	b05b      	add	sp, #364	@ 0x16c
 8007f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f58:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	d1f7      	bne.n	8007f4e <__kernel_rem_pio2f+0x3fa>
 8007f5e:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 8007f62:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8007f66:	46b8      	mov	r8, r7
 8007f68:	46a2      	mov	sl, r4
 8007f6a:	f1ba 0f00 	cmp.w	sl, #0
 8007f6e:	dc49      	bgt.n	8008004 <__kernel_rem_pio2f+0x4b0>
 8007f70:	46a1      	mov	r9, r4
 8007f72:	f1b9 0f01 	cmp.w	r9, #1
 8007f76:	dc60      	bgt.n	800803a <__kernel_rem_pio2f+0x4e6>
 8007f78:	2000      	movs	r0, #0
 8007f7a:	2c01      	cmp	r4, #1
 8007f7c:	dc76      	bgt.n	800806c <__kernel_rem_pio2f+0x518>
 8007f7e:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8007f80:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8007f82:	2d00      	cmp	r5, #0
 8007f84:	d178      	bne.n	8008078 <__kernel_rem_pio2f+0x524>
 8007f86:	9900      	ldr	r1, [sp, #0]
 8007f88:	600a      	str	r2, [r1, #0]
 8007f8a:	460a      	mov	r2, r1
 8007f8c:	604b      	str	r3, [r1, #4]
 8007f8e:	6090      	str	r0, [r2, #8]
 8007f90:	e7dd      	b.n	8007f4e <__kernel_rem_pio2f+0x3fa>
 8007f92:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8007f96:	f7f8 f8df 	bl	8000158 <__addsf3>
 8007f9a:	3c01      	subs	r4, #1
 8007f9c:	2c00      	cmp	r4, #0
 8007f9e:	daf8      	bge.n	8007f92 <__kernel_rem_pio2f+0x43e>
 8007fa0:	b10d      	cbz	r5, 8007fa6 <__kernel_rem_pio2f+0x452>
 8007fa2:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8007fa6:	9b00      	ldr	r3, [sp, #0]
 8007fa8:	6018      	str	r0, [r3, #0]
 8007faa:	e7d0      	b.n	8007f4e <__kernel_rem_pio2f+0x3fa>
 8007fac:	2000      	movs	r0, #0
 8007fae:	af32      	add	r7, sp, #200	@ 0xc8
 8007fb0:	e7f4      	b.n	8007f9c <__kernel_rem_pio2f+0x448>
 8007fb2:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8007fb6:	f7f8 f8cf 	bl	8000158 <__addsf3>
 8007fba:	f108 38ff 	add.w	r8, r8, #4294967295
 8007fbe:	f1b8 0f00 	cmp.w	r8, #0
 8007fc2:	daf6      	bge.n	8007fb2 <__kernel_rem_pio2f+0x45e>
 8007fc4:	b1ad      	cbz	r5, 8007ff2 <__kernel_rem_pio2f+0x49e>
 8007fc6:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 8007fca:	9a00      	ldr	r2, [sp, #0]
 8007fcc:	4601      	mov	r1, r0
 8007fce:	6013      	str	r3, [r2, #0]
 8007fd0:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8007fd2:	f7f8 f8bf 	bl	8000154 <__aeabi_fsub>
 8007fd6:	f04f 0801 	mov.w	r8, #1
 8007fda:	4544      	cmp	r4, r8
 8007fdc:	da0b      	bge.n	8007ff6 <__kernel_rem_pio2f+0x4a2>
 8007fde:	b10d      	cbz	r5, 8007fe4 <__kernel_rem_pio2f+0x490>
 8007fe0:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8007fe4:	9b00      	ldr	r3, [sp, #0]
 8007fe6:	6058      	str	r0, [r3, #4]
 8007fe8:	e7b1      	b.n	8007f4e <__kernel_rem_pio2f+0x3fa>
 8007fea:	46a0      	mov	r8, r4
 8007fec:	2000      	movs	r0, #0
 8007fee:	af32      	add	r7, sp, #200	@ 0xc8
 8007ff0:	e7e5      	b.n	8007fbe <__kernel_rem_pio2f+0x46a>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	e7e9      	b.n	8007fca <__kernel_rem_pio2f+0x476>
 8007ff6:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8007ffa:	f7f8 f8ad 	bl	8000158 <__addsf3>
 8007ffe:	f108 0801 	add.w	r8, r8, #1
 8008002:	e7ea      	b.n	8007fda <__kernel_rem_pio2f+0x486>
 8008004:	f8d8 3000 	ldr.w	r3, [r8]
 8008008:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800800c:	4619      	mov	r1, r3
 800800e:	4610      	mov	r0, r2
 8008010:	9302      	str	r3, [sp, #8]
 8008012:	9201      	str	r2, [sp, #4]
 8008014:	f7f8 f8a0 	bl	8000158 <__addsf3>
 8008018:	9a01      	ldr	r2, [sp, #4]
 800801a:	4601      	mov	r1, r0
 800801c:	4681      	mov	r9, r0
 800801e:	4610      	mov	r0, r2
 8008020:	f7f8 f898 	bl	8000154 <__aeabi_fsub>
 8008024:	9b02      	ldr	r3, [sp, #8]
 8008026:	f10a 3aff 	add.w	sl, sl, #4294967295
 800802a:	4619      	mov	r1, r3
 800802c:	f7f8 f894 	bl	8000158 <__addsf3>
 8008030:	f848 0904 	str.w	r0, [r8], #-4
 8008034:	f8c8 9000 	str.w	r9, [r8]
 8008038:	e797      	b.n	8007f6a <__kernel_rem_pio2f+0x416>
 800803a:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800803e:	f8d7 a000 	ldr.w	sl, [r7]
 8008042:	4618      	mov	r0, r3
 8008044:	4651      	mov	r1, sl
 8008046:	9301      	str	r3, [sp, #4]
 8008048:	f7f8 f886 	bl	8000158 <__addsf3>
 800804c:	9b01      	ldr	r3, [sp, #4]
 800804e:	4601      	mov	r1, r0
 8008050:	4680      	mov	r8, r0
 8008052:	4618      	mov	r0, r3
 8008054:	f7f8 f87e 	bl	8000154 <__aeabi_fsub>
 8008058:	4651      	mov	r1, sl
 800805a:	f7f8 f87d 	bl	8000158 <__addsf3>
 800805e:	f847 0904 	str.w	r0, [r7], #-4
 8008062:	f109 39ff 	add.w	r9, r9, #4294967295
 8008066:	f8c7 8000 	str.w	r8, [r7]
 800806a:	e782      	b.n	8007f72 <__kernel_rem_pio2f+0x41e>
 800806c:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8008070:	f7f8 f872 	bl	8000158 <__addsf3>
 8008074:	3c01      	subs	r4, #1
 8008076:	e780      	b.n	8007f7a <__kernel_rem_pio2f+0x426>
 8008078:	9900      	ldr	r1, [sp, #0]
 800807a:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800807e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008082:	600a      	str	r2, [r1, #0]
 8008084:	604b      	str	r3, [r1, #4]
 8008086:	460a      	mov	r2, r1
 8008088:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800808c:	e77f      	b.n	8007f8e <__kernel_rem_pio2f+0x43a>
 800808e:	bf00      	nop

08008090 <floorf>:
 8008090:	b570      	push	{r4, r5, r6, lr}
 8008092:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8008096:	3d7f      	subs	r5, #127	@ 0x7f
 8008098:	2d16      	cmp	r5, #22
 800809a:	4601      	mov	r1, r0
 800809c:	4604      	mov	r4, r0
 800809e:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 80080a2:	dc26      	bgt.n	80080f2 <floorf+0x62>
 80080a4:	2d00      	cmp	r5, #0
 80080a6:	da0f      	bge.n	80080c8 <floorf+0x38>
 80080a8:	4917      	ldr	r1, [pc, #92]	@ (8008108 <floorf+0x78>)
 80080aa:	f7f8 f855 	bl	8000158 <__addsf3>
 80080ae:	2100      	movs	r1, #0
 80080b0:	f7f8 fb16 	bl	80006e0 <__aeabi_fcmpgt>
 80080b4:	b130      	cbz	r0, 80080c4 <floorf+0x34>
 80080b6:	2c00      	cmp	r4, #0
 80080b8:	da23      	bge.n	8008102 <floorf+0x72>
 80080ba:	2e00      	cmp	r6, #0
 80080bc:	4c13      	ldr	r4, [pc, #76]	@ (800810c <floorf+0x7c>)
 80080be:	bf08      	it	eq
 80080c0:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80080c4:	4621      	mov	r1, r4
 80080c6:	e01a      	b.n	80080fe <floorf+0x6e>
 80080c8:	4e11      	ldr	r6, [pc, #68]	@ (8008110 <floorf+0x80>)
 80080ca:	412e      	asrs	r6, r5
 80080cc:	4230      	tst	r0, r6
 80080ce:	d016      	beq.n	80080fe <floorf+0x6e>
 80080d0:	490d      	ldr	r1, [pc, #52]	@ (8008108 <floorf+0x78>)
 80080d2:	f7f8 f841 	bl	8000158 <__addsf3>
 80080d6:	2100      	movs	r1, #0
 80080d8:	f7f8 fb02 	bl	80006e0 <__aeabi_fcmpgt>
 80080dc:	2800      	cmp	r0, #0
 80080de:	d0f1      	beq.n	80080c4 <floorf+0x34>
 80080e0:	2c00      	cmp	r4, #0
 80080e2:	bfbe      	ittt	lt
 80080e4:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 80080e8:	412b      	asrlt	r3, r5
 80080ea:	18e4      	addlt	r4, r4, r3
 80080ec:	ea24 0406 	bic.w	r4, r4, r6
 80080f0:	e7e8      	b.n	80080c4 <floorf+0x34>
 80080f2:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 80080f6:	d302      	bcc.n	80080fe <floorf+0x6e>
 80080f8:	f7f8 f82e 	bl	8000158 <__addsf3>
 80080fc:	4601      	mov	r1, r0
 80080fe:	4608      	mov	r0, r1
 8008100:	bd70      	pop	{r4, r5, r6, pc}
 8008102:	2400      	movs	r4, #0
 8008104:	e7de      	b.n	80080c4 <floorf+0x34>
 8008106:	bf00      	nop
 8008108:	7149f2ca 	.word	0x7149f2ca
 800810c:	bf800000 	.word	0xbf800000
 8008110:	007fffff 	.word	0x007fffff

08008114 <_init>:
 8008114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008116:	bf00      	nop
 8008118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800811a:	bc08      	pop	{r3}
 800811c:	469e      	mov	lr, r3
 800811e:	4770      	bx	lr

08008120 <_fini>:
 8008120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008122:	bf00      	nop
 8008124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008126:	bc08      	pop	{r3}
 8008128:	469e      	mov	lr, r3
 800812a:	4770      	bx	lr
