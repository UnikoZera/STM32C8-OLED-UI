
STM32PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3f8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b58  0800e504  0800e504  0000f504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f05c  0800f05c  000114bc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f05c  0800f05c  0001005c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f064  0800f064  000114bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f064  0800f064  00010064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f068  0800f068  00010068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004bc  20000000  0800f06c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004134  200004bc  0800f528  000114bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200045f0  0800f528  000115f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000114bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001374f  00000000  00000000  000114e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b51  00000000  00000000  00024c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  00028788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000108b  00000000  00000000  00029c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0f8  00000000  00000000  0002ace3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab70  00000000  00000000  00044ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090cba  00000000  00000000  0005f94b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0605  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000661c  00000000  00000000  000f0648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000f6c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200004bc 	.word	0x200004bc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800e4ec 	.word	0x0800e4ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200004c0 	.word	0x200004c0
 8000148:	0800e4ec 	.word	0x0800e4ec

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_fcmpun>:
 8000718:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800071c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000720:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000724:	d102      	bne.n	800072c <__aeabi_fcmpun+0x14>
 8000726:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800072a:	d108      	bne.n	800073e <__aeabi_fcmpun+0x26>
 800072c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000730:	d102      	bne.n	8000738 <__aeabi_fcmpun+0x20>
 8000732:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000736:	d102      	bne.n	800073e <__aeabi_fcmpun+0x26>
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	4770      	bx	lr
 800073e:	f04f 0001 	mov.w	r0, #1
 8000742:	4770      	bx	lr

08000744 <__aeabi_f2iz>:
 8000744:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000748:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800074c:	d30f      	bcc.n	800076e <__aeabi_f2iz+0x2a>
 800074e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000752:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000756:	d90d      	bls.n	8000774 <__aeabi_f2iz+0x30>
 8000758:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800075c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000760:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000764:	fa23 f002 	lsr.w	r0, r3, r2
 8000768:	bf18      	it	ne
 800076a:	4240      	negne	r0, r0
 800076c:	4770      	bx	lr
 800076e:	f04f 0000 	mov.w	r0, #0
 8000772:	4770      	bx	lr
 8000774:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000778:	d101      	bne.n	800077e <__aeabi_f2iz+0x3a>
 800077a:	0242      	lsls	r2, r0, #9
 800077c:	d105      	bne.n	800078a <__aeabi_f2iz+0x46>
 800077e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000782:	bf08      	it	eq
 8000784:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000788:	4770      	bx	lr
 800078a:	f04f 0000 	mov.w	r0, #0
 800078e:	4770      	bx	lr

08000790 <__aeabi_f2uiz>:
 8000790:	0042      	lsls	r2, r0, #1
 8000792:	d20e      	bcs.n	80007b2 <__aeabi_f2uiz+0x22>
 8000794:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000798:	d30b      	bcc.n	80007b2 <__aeabi_f2uiz+0x22>
 800079a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800079e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007a2:	d409      	bmi.n	80007b8 <__aeabi_f2uiz+0x28>
 80007a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ac:	fa23 f002 	lsr.w	r0, r3, r2
 80007b0:	4770      	bx	lr
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	4770      	bx	lr
 80007b8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80007bc:	d101      	bne.n	80007c2 <__aeabi_f2uiz+0x32>
 80007be:	0242      	lsls	r2, r0, #9
 80007c0:	d102      	bne.n	80007c8 <__aeabi_f2uiz+0x38>
 80007c2:	f04f 30ff 	mov.w	r0, #4294967295
 80007c6:	4770      	bx	lr
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_DMA_Init+0x38>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a0b      	ldr	r2, [pc, #44]	@ (8000808 <MX_DMA_Init+0x38>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_DMA_Init+0x38>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	2010      	movs	r0, #16
 80007f4:	f008 feb5 	bl	8009562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007f8:	2010      	movs	r0, #16
 80007fa:	f008 fece 	bl	800959a <HAL_NVIC_EnableIRQ>

}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <OLED_DrawLine>:
    *y_out = (int16_t)(matrix->m[1][0] * x + matrix->m[1][1] * y + matrix->m[1][2]);
}

// 画线函数（用于绘制旋转矩形的边） //! UPDATEDISPLAY REQUIRED
void OLED_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b087      	sub	sp, #28
 8000810:	af00      	add	r7, sp, #0
 8000812:	4604      	mov	r4, r0
 8000814:	4608      	mov	r0, r1
 8000816:	4611      	mov	r1, r2
 8000818:	461a      	mov	r2, r3
 800081a:	4623      	mov	r3, r4
 800081c:	80fb      	strh	r3, [r7, #6]
 800081e:	4603      	mov	r3, r0
 8000820:	80bb      	strh	r3, [r7, #4]
 8000822:	460b      	mov	r3, r1
 8000824:	807b      	strh	r3, [r7, #2]
 8000826:	4613      	mov	r3, r2
 8000828:	803b      	strh	r3, [r7, #0]
    int16_t dx = abs(x1 - x0);
 800082a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800082e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	bfb8      	it	lt
 8000838:	425b      	neglt	r3, r3
 800083a:	82bb      	strh	r3, [r7, #20]
    int16_t dy = abs(y1 - y0);
 800083c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000840:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	bfb8      	it	lt
 800084a:	425b      	neglt	r3, r3
 800084c:	827b      	strh	r3, [r7, #18]
    int16_t sx = (x0 < x1) ? 1 : -1;
 800084e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000852:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000856:	429a      	cmp	r2, r3
 8000858:	da01      	bge.n	800085e <OLED_DrawLine+0x52>
 800085a:	2301      	movs	r3, #1
 800085c:	e001      	b.n	8000862 <OLED_DrawLine+0x56>
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
 8000862:	823b      	strh	r3, [r7, #16]
    int16_t sy = (y0 < y1) ? 1 : -1;
 8000864:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000868:	f9b7 3000 	ldrsh.w	r3, [r7]
 800086c:	429a      	cmp	r2, r3
 800086e:	da01      	bge.n	8000874 <OLED_DrawLine+0x68>
 8000870:	2301      	movs	r3, #1
 8000872:	e001      	b.n	8000878 <OLED_DrawLine+0x6c>
 8000874:	f04f 33ff 	mov.w	r3, #4294967295
 8000878:	81fb      	strh	r3, [r7, #14]
    int16_t err = dx - dy;
 800087a:	8aba      	ldrh	r2, [r7, #20]
 800087c:	8a7b      	ldrh	r3, [r7, #18]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	b29b      	uxth	r3, r3
 8000882:	82fb      	strh	r3, [r7, #22]

    while (1)
    {
        OLED_WritePixel(x0, y0, 1);
 8000884:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000888:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800088c:	2201      	movs	r2, #1
 800088e:	4618      	mov	r0, r3
 8000890:	f001 ff5a 	bl	8002748 <OLED_WritePixel>

        if (x0 == x1 && y0 == y1)
 8000894:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000898:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800089c:	429a      	cmp	r2, r3
 800089e:	d105      	bne.n	80008ac <OLED_DrawLine+0xa0>
 80008a0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80008a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d025      	beq.n	80008f8 <OLED_DrawLine+0xec>
            break;

        int16_t e2 = 2 * err;
 80008ac:	8afb      	ldrh	r3, [r7, #22]
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	81bb      	strh	r3, [r7, #12]
        if (e2 > -dy)
 80008b4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80008b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80008bc:	425b      	negs	r3, r3
 80008be:	429a      	cmp	r2, r3
 80008c0:	dd09      	ble.n	80008d6 <OLED_DrawLine+0xca>
        {
            err -= dy;
 80008c2:	8afa      	ldrh	r2, [r7, #22]
 80008c4:	8a7b      	ldrh	r3, [r7, #18]
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 80008cc:	88fa      	ldrh	r2, [r7, #6]
 80008ce:	8a3b      	ldrh	r3, [r7, #16]
 80008d0:	4413      	add	r3, r2
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	80fb      	strh	r3, [r7, #6]
        }
        if (e2 < dx)
 80008d6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80008da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80008de:	429a      	cmp	r2, r3
 80008e0:	dad0      	bge.n	8000884 <OLED_DrawLine+0x78>
        {
            err += dx;
 80008e2:	8afa      	ldrh	r2, [r7, #22]
 80008e4:	8abb      	ldrh	r3, [r7, #20]
 80008e6:	4413      	add	r3, r2
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 80008ec:	88ba      	ldrh	r2, [r7, #4]
 80008ee:	89fb      	ldrh	r3, [r7, #14]
 80008f0:	4413      	add	r3, r2
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	80bb      	strh	r3, [r7, #4]
    {
 80008f6:	e7c5      	b.n	8000884 <OLED_DrawLine+0x78>
            break;
 80008f8:	bf00      	nop
        }
    }
}
 80008fa:	bf00      	nop
 80008fc:	371c      	adds	r7, #28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd90      	pop	{r4, r7, pc}
	...

08000904 <OLED_InitCube3D>:
// 3D 立方体实现
// =============================================================================

// 初始化3D立方体
void OLED_InitCube3D(OLED_Cube3D *cube, float size, int16_t center_x, int16_t center_y)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b09e      	sub	sp, #120	@ 0x78
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	4611      	mov	r1, r2
 8000910:	461a      	mov	r2, r3
 8000912:	460b      	mov	r3, r1
 8000914:	80fb      	strh	r3, [r7, #6]
 8000916:	4613      	mov	r3, r2
 8000918:	80bb      	strh	r3, [r7, #4]
    if (!cube) return;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	2b00      	cmp	r3, #0
 800091e:	f000 80e4 	beq.w	8000aea <OLED_InitCube3D+0x1e6>
    
    cube->size = size;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	68ba      	ldr	r2, [r7, #8]
 8000926:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    float half_size = size / 2.0f;
 800092a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800092e:	68b8      	ldr	r0, [r7, #8]
 8000930:	f7ff fde0 	bl	80004f4 <__aeabi_fdiv>
 8000934:	4603      	mov	r3, r0
 8000936:	677b      	str	r3, [r7, #116]	@ 0x74
    
    // 定义立方体的8个顶点 (以原点为中心)
    cube->vertices[0] = (OLED_Point3D){-half_size, -half_size, -half_size}; // 后左下
 8000938:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800093a:	f083 4000 	eor.w	r0, r3, #2147483648	@ 0x80000000
 800093e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000940:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 8000944:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000946:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	6018      	str	r0, [r3, #0]
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	6059      	str	r1, [r3, #4]
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	609a      	str	r2, [r3, #8]
    cube->vertices[1] = (OLED_Point3D){ half_size, -half_size, -half_size}; // 后右下
 8000956:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000958:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 800095c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800095e:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000966:	60d8      	str	r0, [r3, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	6119      	str	r1, [r3, #16]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	615a      	str	r2, [r3, #20]
    cube->vertices[2] = (OLED_Point3D){ half_size,  half_size, -half_size}; // 后右上
 8000970:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000972:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800097a:	6199      	str	r1, [r3, #24]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8000980:	61d9      	str	r1, [r3, #28]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	621a      	str	r2, [r3, #32]
    cube->vertices[3] = (OLED_Point3D){-half_size,  half_size, -half_size}; // 后左上
 8000986:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000988:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 800098c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800098e:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	6259      	str	r1, [r3, #36]	@ 0x24
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800099a:	6299      	str	r1, [r3, #40]	@ 0x28
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	62da      	str	r2, [r3, #44]	@ 0x2c
    cube->vertices[4] = (OLED_Point3D){-half_size, -half_size,  half_size}; // 前左下
 80009a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80009a2:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 80009a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80009a8:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	6319      	str	r1, [r3, #48]	@ 0x30
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80009b8:	639a      	str	r2, [r3, #56]	@ 0x38
    cube->vertices[5] = (OLED_Point3D){ half_size, -half_size,  half_size}; // 前右下
 80009ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80009bc:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80009c4:	63d9      	str	r1, [r3, #60]	@ 0x3c
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80009ce:	645a      	str	r2, [r3, #68]	@ 0x44
    cube->vertices[6] = (OLED_Point3D){ half_size,  half_size,  half_size}; // 前右上
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80009d4:	649a      	str	r2, [r3, #72]	@ 0x48
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80009da:	64da      	str	r2, [r3, #76]	@ 0x4c
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80009e0:	651a      	str	r2, [r3, #80]	@ 0x50
    cube->vertices[7] = (OLED_Point3D){-half_size,  half_size,  half_size}; // 前左上
 80009e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80009e4:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	655a      	str	r2, [r3, #84]	@ 0x54
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80009f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80009f6:	65da      	str	r2, [r3, #92]	@ 0x5c
    
    // 定义立方体的12条边 (连接的顶点索引)
    // 后面的4条边
    cube->edges[0][0] = 0; cube->edges[0][1] = 1;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	2200      	movs	r2, #0
 80009fc:	661a      	str	r2, [r3, #96]	@ 0x60
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	2201      	movs	r2, #1
 8000a02:	665a      	str	r2, [r3, #100]	@ 0x64
    cube->edges[1][0] = 1; cube->edges[1][1] = 2;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	2201      	movs	r2, #1
 8000a08:	669a      	str	r2, [r3, #104]	@ 0x68
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	66da      	str	r2, [r3, #108]	@ 0x6c
    cube->edges[2][0] = 2; cube->edges[2][1] = 3;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2202      	movs	r2, #2
 8000a14:	671a      	str	r2, [r3, #112]	@ 0x70
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	2203      	movs	r2, #3
 8000a1a:	675a      	str	r2, [r3, #116]	@ 0x74
    cube->edges[3][0] = 3; cube->edges[3][1] = 0;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2203      	movs	r2, #3
 8000a20:	679a      	str	r2, [r3, #120]	@ 0x78
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	2200      	movs	r2, #0
 8000a26:	67da      	str	r2, [r3, #124]	@ 0x7c
    
    // 前面的4条边
    cube->edges[4][0] = 4; cube->edges[4][1] = 5;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2205      	movs	r2, #5
 8000a34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    cube->edges[5][0] = 5; cube->edges[5][1] = 6;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	2205      	movs	r2, #5
 8000a3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2206      	movs	r2, #6
 8000a44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    cube->edges[6][0] = 6; cube->edges[6][1] = 7;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	2206      	movs	r2, #6
 8000a4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2207      	movs	r2, #7
 8000a54:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    cube->edges[7][0] = 7; cube->edges[7][1] = 4;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2207      	movs	r2, #7
 8000a5c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2204      	movs	r2, #4
 8000a64:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    
    // 连接前后面的4条边
    cube->edges[8][0] = 0; cube->edges[8][1] = 4;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2204      	movs	r2, #4
 8000a74:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    cube->edges[9][0] = 1; cube->edges[9][1] = 5;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2205      	movs	r2, #5
 8000a84:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    cube->edges[10][0] = 2; cube->edges[10][1] = 6;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	2206      	movs	r2, #6
 8000a94:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    cube->edges[11][0] = 3; cube->edges[11][1] = 7;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	2203      	movs	r2, #3
 8000a9c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	2207      	movs	r2, #7
 8000aa4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    
    // 初始化变换参数
    cube->transform.angle_x = 0.0f;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f04f 0200 	mov.w	r2, #0
 8000aae:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    cube->transform.angle_y = 0.0f;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	f04f 0200 	mov.w	r2, #0
 8000ab8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    cube->transform.angle_z = 0.0f;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f04f 0200 	mov.w	r2, #0
 8000ac2:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    cube->transform.scale = 1.0f;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000acc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    cube->transform.center_x = center_x;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	88fa      	ldrh	r2, [r7, #6]
 8000ad4:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
    cube->transform.center_y = center_y;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	88ba      	ldrh	r2, [r7, #4]
 8000adc:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
    cube->transform.distance = 100.0f; // 观察者距离
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4a04      	ldr	r2, [pc, #16]	@ (8000af4 <OLED_InitCube3D+0x1f0>)
 8000ae4:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8000ae8:	e000      	b.n	8000aec <OLED_InitCube3D+0x1e8>
    if (!cube) return;
 8000aea:	bf00      	nop
}
 8000aec:	3778      	adds	r7, #120	@ 0x78
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	42c80000 	.word	0x42c80000

08000af8 <OLED_UpdateCubeRotation>:

// 更新立方体旋转角度
void OLED_UpdateCubeRotation(OLED_Cube3D *cube, float delta_x, float delta_y, float delta_z)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
 8000b04:	603b      	str	r3, [r7, #0]
    if (!cube) return;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	f000 80b2 	beq.w	8000c72 <OLED_UpdateCubeRotation+0x17a>
    
    cube->transform.angle_x += delta_x;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000b14:	68b9      	ldr	r1, [r7, #8]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff fb30 	bl	800017c <__addsf3>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	461a      	mov	r2, r3
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    cube->transform.angle_y += delta_y;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000b2c:	6879      	ldr	r1, [r7, #4]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fb24 	bl	800017c <__addsf3>
 8000b34:	4603      	mov	r3, r0
 8000b36:	461a      	mov	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    cube->transform.angle_z += delta_z;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000b44:	6839      	ldr	r1, [r7, #0]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fb18 	bl	800017c <__addsf3>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    
    // 保持角度在 0-2π 范围内
    while (cube->transform.angle_x >= 2 * 3.14159f) cube->transform.angle_x -= 2 * 3.14159f;
 8000b56:	e00b      	b.n	8000b70 <OLED_UpdateCubeRotation+0x78>
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000b5e:	4947      	ldr	r1, [pc, #284]	@ (8000c7c <OLED_UpdateCubeRotation+0x184>)
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fb09 	bl	8000178 <__aeabi_fsub>
 8000b66:	4603      	mov	r3, r0
 8000b68:	461a      	mov	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000b76:	4941      	ldr	r1, [pc, #260]	@ (8000c7c <OLED_UpdateCubeRotation+0x184>)
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fdb9 	bl	80006f0 <__aeabi_fcmpge>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d1e9      	bne.n	8000b58 <OLED_UpdateCubeRotation+0x60>
    while (cube->transform.angle_x < 0) cube->transform.angle_x += 2 * 3.14159f;
 8000b84:	e00b      	b.n	8000b9e <OLED_UpdateCubeRotation+0xa6>
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000b8c:	493b      	ldr	r1, [pc, #236]	@ (8000c7c <OLED_UpdateCubeRotation+0x184>)
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff faf4 	bl	800017c <__addsf3>
 8000b94:	4603      	mov	r3, r0
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000ba4:	f04f 0100 	mov.w	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fd8d 	bl	80006c8 <__aeabi_fcmplt>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1e8      	bne.n	8000b86 <OLED_UpdateCubeRotation+0x8e>
    while (cube->transform.angle_y >= 2 * 3.14159f) cube->transform.angle_y -= 2 * 3.14159f;
 8000bb4:	e00b      	b.n	8000bce <OLED_UpdateCubeRotation+0xd6>
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000bbc:	492f      	ldr	r1, [pc, #188]	@ (8000c7c <OLED_UpdateCubeRotation+0x184>)
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fada 	bl	8000178 <__aeabi_fsub>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000bd4:	4929      	ldr	r1, [pc, #164]	@ (8000c7c <OLED_UpdateCubeRotation+0x184>)
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fd8a 	bl	80006f0 <__aeabi_fcmpge>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1e9      	bne.n	8000bb6 <OLED_UpdateCubeRotation+0xbe>
    while (cube->transform.angle_y < 0) cube->transform.angle_y += 2 * 3.14159f;
 8000be2:	e00b      	b.n	8000bfc <OLED_UpdateCubeRotation+0x104>
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000bea:	4924      	ldr	r1, [pc, #144]	@ (8000c7c <OLED_UpdateCubeRotation+0x184>)
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fac5 	bl	800017c <__addsf3>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000c02:	f04f 0100 	mov.w	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fd5e 	bl	80006c8 <__aeabi_fcmplt>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d1e8      	bne.n	8000be4 <OLED_UpdateCubeRotation+0xec>
    while (cube->transform.angle_z >= 2 * 3.14159f) cube->transform.angle_z -= 2 * 3.14159f;
 8000c12:	e00b      	b.n	8000c2c <OLED_UpdateCubeRotation+0x134>
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000c1a:	4918      	ldr	r1, [pc, #96]	@ (8000c7c <OLED_UpdateCubeRotation+0x184>)
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff faab 	bl	8000178 <__aeabi_fsub>
 8000c22:	4603      	mov	r3, r0
 8000c24:	461a      	mov	r2, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000c32:	4912      	ldr	r1, [pc, #72]	@ (8000c7c <OLED_UpdateCubeRotation+0x184>)
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fd5b 	bl	80006f0 <__aeabi_fcmpge>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1e9      	bne.n	8000c14 <OLED_UpdateCubeRotation+0x11c>
    while (cube->transform.angle_z < 0) cube->transform.angle_z += 2 * 3.14159f;
 8000c40:	e00b      	b.n	8000c5a <OLED_UpdateCubeRotation+0x162>
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000c48:	490c      	ldr	r1, [pc, #48]	@ (8000c7c <OLED_UpdateCubeRotation+0x184>)
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fa96 	bl	800017c <__addsf3>
 8000c50:	4603      	mov	r3, r0
 8000c52:	461a      	mov	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000c60:	f04f 0100 	mov.w	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fd2f 	bl	80006c8 <__aeabi_fcmplt>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d1e8      	bne.n	8000c42 <OLED_UpdateCubeRotation+0x14a>
 8000c70:	e000      	b.n	8000c74 <OLED_UpdateCubeRotation+0x17c>
    if (!cube) return;
 8000c72:	bf00      	nop
}
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40c90fd0 	.word	0x40c90fd0

08000c80 <OLED_RotatePointX>:
    cube->transform.scale = scale;
}

// 绕X轴旋转点
OLED_Point3D OLED_RotatePointX(OLED_Point3D point, float angle)
{
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b08b      	sub	sp, #44	@ 0x2c
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	4638      	mov	r0, r7
 8000c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    OLED_Point3D result;
    float cos_a = cosf(angle);
 8000c8e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000c90:	f00c fa38 	bl	800d104 <cosf>
 8000c94:	6278      	str	r0, [r7, #36]	@ 0x24
    float sin_a = sinf(angle);
 8000c96:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000c98:	f00c fa6c 	bl	800d174 <sinf>
 8000c9c:	6238      	str	r0, [r7, #32]
    
    result.x = point.x;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	617b      	str	r3, [r7, #20]
    result.y = point.y * cos_a - point.z * sin_a;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fb70 	bl	800038c <__aeabi_fmul>
 8000cac:	4603      	mov	r3, r0
 8000cae:	461c      	mov	r4, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	6a39      	ldr	r1, [r7, #32]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fb69 	bl	800038c <__aeabi_fmul>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4620      	mov	r0, r4
 8000cc0:	f7ff fa5a 	bl	8000178 <__aeabi_fsub>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	61bb      	str	r3, [r7, #24]
    result.z = point.y * sin_a + point.z * cos_a;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a39      	ldr	r1, [r7, #32]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fb5d 	bl	800038c <__aeabi_fmul>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	461c      	mov	r4, r3
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fb56 	bl	800038c <__aeabi_fmul>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f7ff fa49 	bl	800017c <__addsf3>
 8000cea:	4603      	mov	r3, r0
 8000cec:	61fb      	str	r3, [r7, #28]
    
    return result;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	461c      	mov	r4, r3
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000cfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000cfe:	68f8      	ldr	r0, [r7, #12]
 8000d00:	372c      	adds	r7, #44	@ 0x2c
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd90      	pop	{r4, r7, pc}

08000d06 <OLED_RotatePointY>:

// 绕Y轴旋转点
OLED_Point3D OLED_RotatePointY(OLED_Point3D point, float angle)
{
 8000d06:	b590      	push	{r4, r7, lr}
 8000d08:	b08b      	sub	sp, #44	@ 0x2c
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	4638      	mov	r0, r7
 8000d10:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    OLED_Point3D result;
    float cos_a = cosf(angle);
 8000d14:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000d16:	f00c f9f5 	bl	800d104 <cosf>
 8000d1a:	6278      	str	r0, [r7, #36]	@ 0x24
    float sin_a = sinf(angle);
 8000d1c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000d1e:	f00c fa29 	bl	800d174 <sinf>
 8000d22:	6238      	str	r0, [r7, #32]
    
    result.x = point.x * cos_a + point.z * sin_a;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fb2f 	bl	800038c <__aeabi_fmul>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	461c      	mov	r4, r3
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	6a39      	ldr	r1, [r7, #32]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fb28 	bl	800038c <__aeabi_fmul>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4620      	mov	r0, r4
 8000d42:	f7ff fa1b 	bl	800017c <__addsf3>
 8000d46:	4603      	mov	r3, r0
 8000d48:	617b      	str	r3, [r7, #20]
    result.y = point.y;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	61bb      	str	r3, [r7, #24]
    result.z = -point.x * sin_a + point.z * cos_a;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8000d54:	6a39      	ldr	r1, [r7, #32]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fb18 	bl	800038c <__aeabi_fmul>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	461c      	mov	r4, r3
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fb11 	bl	800038c <__aeabi_fmul>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4620      	mov	r0, r4
 8000d70:	f7ff fa04 	bl	800017c <__addsf3>
 8000d74:	4603      	mov	r3, r0
 8000d76:	61fb      	str	r3, [r7, #28]
    
    return result;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	461c      	mov	r4, r3
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000d88:	68f8      	ldr	r0, [r7, #12]
 8000d8a:	372c      	adds	r7, #44	@ 0x2c
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd90      	pop	{r4, r7, pc}

08000d90 <OLED_RotatePointZ>:

// 绕Z轴旋转点
OLED_Point3D OLED_RotatePointZ(OLED_Point3D point, float angle)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b08b      	sub	sp, #44	@ 0x2c
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	4638      	mov	r0, r7
 8000d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    OLED_Point3D result;
    float cos_a = cosf(angle);
 8000d9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000da0:	f00c f9b0 	bl	800d104 <cosf>
 8000da4:	6278      	str	r0, [r7, #36]	@ 0x24
    float sin_a = sinf(angle);
 8000da6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000da8:	f00c f9e4 	bl	800d174 <sinf>
 8000dac:	6238      	str	r0, [r7, #32]
    
    result.x = point.x * cos_a - point.y * sin_a;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff faea 	bl	800038c <__aeabi_fmul>
 8000db8:	4603      	mov	r3, r0
 8000dba:	461c      	mov	r4, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a39      	ldr	r1, [r7, #32]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fae3 	bl	800038c <__aeabi_fmul>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4620      	mov	r0, r4
 8000dcc:	f7ff f9d4 	bl	8000178 <__aeabi_fsub>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	617b      	str	r3, [r7, #20]
    result.y = point.x * sin_a + point.y * cos_a;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	6a39      	ldr	r1, [r7, #32]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fad7 	bl	800038c <__aeabi_fmul>
 8000dde:	4603      	mov	r3, r0
 8000de0:	461c      	mov	r4, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fad0 	bl	800038c <__aeabi_fmul>
 8000dec:	4603      	mov	r3, r0
 8000dee:	4619      	mov	r1, r3
 8000df0:	4620      	mov	r0, r4
 8000df2:	f7ff f9c3 	bl	800017c <__addsf3>
 8000df6:	4603      	mov	r3, r0
 8000df8:	61bb      	str	r3, [r7, #24]
    result.z = point.z;
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	61fb      	str	r3, [r7, #28]
    
    return result;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	461c      	mov	r4, r3
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	372c      	adds	r7, #44	@ 0x2c
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd90      	pop	{r4, r7, pc}

08000e16 <OLED_TransformPoint3D>:

// 应用3D变换
OLED_Point3D OLED_TransformPoint3D(OLED_Point3D point, OLED_Cube3D_Transform *transform)
{
 8000e16:	b590      	push	{r4, r7, lr}
 8000e18:	b08f      	sub	sp, #60	@ 0x3c
 8000e1a:	af02      	add	r7, sp, #8
 8000e1c:	61f8      	str	r0, [r7, #28]
 8000e1e:	f107 0010 	add.w	r0, r7, #16
 8000e22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    OLED_Point3D result = point;
 8000e26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e2a:	f107 0210 	add.w	r2, r7, #16
 8000e2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    
    // 应用缩放
    result.x *= transform->scale;
 8000e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	f7ff faa5 	bl	800038c <__aeabi_fmul>
 8000e42:	4603      	mov	r3, r0
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
    result.y *= transform->scale;
 8000e46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4610      	mov	r0, r2
 8000e50:	f7ff fa9c 	bl	800038c <__aeabi_fmul>
 8000e54:	4603      	mov	r3, r0
 8000e56:	62bb      	str	r3, [r7, #40]	@ 0x28
    result.z *= transform->scale;
 8000e58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4610      	mov	r0, r2
 8000e62:	f7ff fa93 	bl	800038c <__aeabi_fmul>
 8000e66:	4603      	mov	r3, r0
 8000e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    // 应用旋转 (顺序: X -> Y -> Z)
    result = OLED_RotatePointX(result, transform->angle_x);
 8000e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e7a:	f7ff ff01 	bl	8000c80 <OLED_RotatePointX>
    result = OLED_RotatePointY(result, transform->angle_y);
 8000e7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	4638      	mov	r0, r7
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e8c:	f7ff ff3b 	bl	8000d06 <OLED_RotatePointY>
 8000e90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e94:	463a      	mov	r2, r7
 8000e96:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result = OLED_RotatePointZ(result, transform->angle_z);
 8000e9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	4638      	mov	r0, r7
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eaa:	f7ff ff71 	bl	8000d90 <OLED_RotatePointZ>
 8000eae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb2:	463a      	mov	r2, r7
 8000eb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    
    return result;
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	461c      	mov	r4, r3
 8000ebe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ec6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000eca:	69f8      	ldr	r0, [r7, #28]
 8000ecc:	3734      	adds	r7, #52	@ 0x34
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd90      	pop	{r4, r7, pc}

08000ed2 <OLED_Project3DTo2D>:

// 将3D点投影到2D屏幕坐标
void OLED_Project3DTo2D(OLED_Point3D *point3d, OLED_Cube3D_Transform *transform, int16_t *x2d, int16_t *y2d)
{
 8000ed2:	b590      	push	{r4, r7, lr}
 8000ed4:	b087      	sub	sp, #28
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	60f8      	str	r0, [r7, #12]
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	603b      	str	r3, [r7, #0]
    if (!point3d || !transform || !x2d || !y2d) return;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d04e      	beq.n	8000f84 <OLED_Project3DTo2D+0xb2>
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d04b      	beq.n	8000f84 <OLED_Project3DTo2D+0xb2>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d048      	beq.n	8000f84 <OLED_Project3DTo2D+0xb2>
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d045      	beq.n	8000f84 <OLED_Project3DTo2D+0xb2>
    
    // 透视投影
    float perspective_scale = transform->distance / (transform->distance + point3d->z);
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	695c      	ldr	r4, [r3, #20]
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	695a      	ldr	r2, [r3, #20]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	4619      	mov	r1, r3
 8000f06:	4610      	mov	r0, r2
 8000f08:	f7ff f938 	bl	800017c <__addsf3>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4620      	mov	r0, r4
 8000f12:	f7ff faef 	bl	80004f4 <__aeabi_fdiv>
 8000f16:	4603      	mov	r3, r0
 8000f18:	617b      	str	r3, [r7, #20]
    
    *x2d = (int16_t)(transform->center_x + point3d->x * perspective_scale);
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff f9df 	bl	80002e4 <__aeabi_i2f>
 8000f26:	4604      	mov	r4, r0
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6979      	ldr	r1, [r7, #20]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fa2c 	bl	800038c <__aeabi_fmul>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4619      	mov	r1, r3
 8000f38:	4620      	mov	r0, r4
 8000f3a:	f7ff f91f 	bl	800017c <__addsf3>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fbff 	bl	8000744 <__aeabi_f2iz>
 8000f46:	4603      	mov	r3, r0
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	801a      	strh	r2, [r3, #0]
    *y2d = (int16_t)(transform->center_y + point3d->y * perspective_scale);
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff f9c5 	bl	80002e4 <__aeabi_i2f>
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	6979      	ldr	r1, [r7, #20]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fa12 	bl	800038c <__aeabi_fmul>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f7ff f905 	bl	800017c <__addsf3>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fbe5 	bl	8000744 <__aeabi_f2iz>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	801a      	strh	r2, [r3, #0]
 8000f82:	e000      	b.n	8000f86 <OLED_Project3DTo2D+0xb4>
    if (!point3d || !transform || !x2d || !y2d) return;
 8000f84:	bf00      	nop
}
 8000f86:	371c      	adds	r7, #28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd90      	pop	{r4, r7, pc}

08000f8c <OLED_DrawCube3D>:

// 绘制3D立方体 //! UPDATEDISPLAY REQUIRED
void OLED_DrawCube3D(OLED_Cube3D *cube)
{
 8000f8c:	b5b0      	push	{r4, r5, r7, lr}
 8000f8e:	b0ac      	sub	sp, #176	@ 0xb0
 8000f90:	af02      	add	r7, sp, #8
 8000f92:	6178      	str	r0, [r7, #20]
    if (!cube) return;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 8086 	beq.w	80010a8 <OLED_DrawCube3D+0x11c>
    
    OLED_Point3D transformed_vertices[8];
    int16_t screen_points[8][2];
    
    // 变换所有顶点
    for (int i = 0; i < 8; i++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000fa2:	e041      	b.n	8001028 <OLED_DrawCube3D+0x9c>
    {
        transformed_vertices[i] = OLED_TransformPoint3D(cube->vertices[i], &cube->transform);
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f103 01c4 	add.w	r1, r3, #196	@ 0xc4
 8000faa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8000fae:	4613      	mov	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	4413      	add	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	33a8      	adds	r3, #168	@ 0xa8
 8000fb8:	443b      	add	r3, r7
 8000fba:	f1a3 0570 	sub.w	r5, r3, #112	@ 0x70
 8000fbe:	463c      	mov	r4, r7
 8000fc0:	6978      	ldr	r0, [r7, #20]
 8000fc2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4403      	add	r3, r0
 8000fd0:	9100      	str	r1, [sp, #0]
 8000fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	f7ff ff1e 	bl	8000e16 <OLED_TransformPoint3D>
 8000fda:	462c      	mov	r4, r5
 8000fdc:	463b      	mov	r3, r7
 8000fde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000fe2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        OLED_Project3DTo2D(&transformed_vertices[i], &cube->transform, 
 8000fe6:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000fea:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	18c8      	adds	r0, r1, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f103 01c4 	add.w	r1, r3, #196	@ 0xc4
 8000ffe:	f107 0218 	add.w	r2, r7, #24
 8001002:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	18d4      	adds	r4, r2, r3
 800100a:	f107 0218 	add.w	r2, r7, #24
 800100e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	3302      	adds	r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	4622      	mov	r2, r4
 800101a:	f7ff ff5a 	bl	8000ed2 <OLED_Project3DTo2D>
    for (int i = 0; i < 8; i++)
 800101e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001022:	3301      	adds	r3, #1
 8001024:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001028:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800102c:	2b07      	cmp	r3, #7
 800102e:	ddb9      	ble.n	8000fa4 <OLED_DrawCube3D+0x18>
                          &screen_points[i][0], &screen_points[i][1]);
    }
    
    // 绘制所有边
    for (int i = 0; i < 12; i++)
 8001030:	2300      	movs	r3, #0
 8001032:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001036:	e032      	b.n	800109e <OLED_DrawCube3D+0x112>
    {
        int v1 = cube->edges[i][0];
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800103e:	320c      	adds	r2, #12
 8001040:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001044:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        int v2 = cube->edges[i][1];
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	4413      	add	r3, r2
 8001052:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001054:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        
        OLED_DrawLine(screen_points[v1][0], screen_points[v1][1],
 8001058:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	33a8      	adds	r3, #168	@ 0xa8
 8001060:	443b      	add	r3, r7
 8001062:	f933 0c90 	ldrsh.w	r0, [r3, #-144]
 8001066:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	33a8      	adds	r3, #168	@ 0xa8
 800106e:	443b      	add	r3, r7
 8001070:	f933 1c8e 	ldrsh.w	r1, [r3, #-142]
 8001074:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	33a8      	adds	r3, #168	@ 0xa8
 800107c:	443b      	add	r3, r7
 800107e:	f933 2c90 	ldrsh.w	r2, [r3, #-144]
 8001082:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	33a8      	adds	r3, #168	@ 0xa8
 800108a:	443b      	add	r3, r7
 800108c:	f933 3c8e 	ldrsh.w	r3, [r3, #-142]
 8001090:	f7ff fbbc 	bl	800080c <OLED_DrawLine>
    for (int i = 0; i < 12; i++)
 8001094:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001098:	3301      	adds	r3, #1
 800109a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800109e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80010a2:	2b0b      	cmp	r3, #11
 80010a4:	ddc8      	ble.n	8001038 <OLED_DrawCube3D+0xac>
 80010a6:	e000      	b.n	80010aa <OLED_DrawCube3D+0x11e>
    if (!cube) return;
 80010a8:	bf00      	nop
                     screen_points[v2][0], screen_points[v2][1]);
    }
 80010aa:	37a8      	adds	r7, #168	@ 0xa8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bdb0      	pop	{r4, r5, r7, pc}

080010b0 <W25Q64_Spi_Transmit>:
    HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, W25Q64_TIMEOUT);
    return rx_data;
}

static void W25Q64_Spi_Transmit(uint8_t *pData, uint16_t Size)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi2, pData, Size, W25Q64_TIMEOUT);
 80010bc:	887a      	ldrh	r2, [r7, #2]
 80010be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	4803      	ldr	r0, [pc, #12]	@ (80010d4 <W25Q64_Spi_Transmit+0x24>)
 80010c6:	f009 feb3 	bl	800ae30 <HAL_SPI_Transmit>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200043ec 	.word	0x200043ec

080010d8 <W25Q64_Spi_Receive>:

static void W25Q64_Spi_Receive(uint8_t *pData, uint16_t Size)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi2, pData, Size, W25Q64_TIMEOUT);
 80010e4:	887a      	ldrh	r2, [r7, #2]
 80010e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	4803      	ldr	r0, [pc, #12]	@ (80010fc <W25Q64_Spi_Receive+0x24>)
 80010ee:	f009 ffe3 	bl	800b0b8 <HAL_SPI_Receive>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200043ec 	.word	0x200043ec

08001100 <W25Q64_Read>:
// 读取数据
// ReadAddr: 读取地址
// pBuffer: 数据接收缓冲区
// NumByteToRead: 读取字节数
void W25Q64_Read(uint32_t ReadAddr, uint8_t *pBuffer, uint32_t NumByteToRead)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
    W25Q64_CS_LOW();
 800110c:	2200      	movs	r2, #0
 800110e:	2180      	movs	r1, #128	@ 0x80
 8001110:	4812      	ldr	r0, [pc, #72]	@ (800115c <W25Q64_Read+0x5c>)
 8001112:	f008 fd58 	bl	8009bc6 <HAL_GPIO_WritePin>
    uint8_t cmd[4];
    cmd[0] = W25X_ReadData;
 8001116:	2303      	movs	r3, #3
 8001118:	753b      	strb	r3, [r7, #20]
    cmd[1] = (ReadAddr & 0xFF0000) >> 16;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	0c1b      	lsrs	r3, r3, #16
 800111e:	b2db      	uxtb	r3, r3
 8001120:	757b      	strb	r3, [r7, #21]
    cmd[2] = (ReadAddr & 0x00FF00) >> 8;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	b2db      	uxtb	r3, r3
 8001128:	75bb      	strb	r3, [r7, #22]
    cmd[3] = (ReadAddr & 0x0000FF);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	75fb      	strb	r3, [r7, #23]
    W25Q64_Spi_Transmit(cmd, 4);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2104      	movs	r1, #4
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ffba 	bl	80010b0 <W25Q64_Spi_Transmit>
    W25Q64_Spi_Receive(pBuffer, NumByteToRead);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	b29b      	uxth	r3, r3
 8001140:	4619      	mov	r1, r3
 8001142:	68b8      	ldr	r0, [r7, #8]
 8001144:	f7ff ffc8 	bl	80010d8 <W25Q64_Spi_Receive>
    W25Q64_CS_HIGH();
 8001148:	2201      	movs	r2, #1
 800114a:	2180      	movs	r1, #128	@ 0x80
 800114c:	4803      	ldr	r0, [pc, #12]	@ (800115c <W25Q64_Read+0x5c>)
 800114e:	f008 fd3a 	bl	8009bc6 <HAL_GPIO_WritePin>
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40010800 	.word	0x40010800

08001160 <DrawBlock>:
#define INPUT_DEBOUNCE_MS 50             // Milliseconds for switch debounce
#define INPUT_PROCESSING_COOLDOWN_MS 200 // Minimum time between processing inputs

// Helper function to draw a block on the OLED (used by Snake)
static void DrawBlock(int16_t x, int16_t y, uint8_t color)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af02      	add	r7, sp, #8
 8001166:	4603      	mov	r3, r0
 8001168:	80fb      	strh	r3, [r7, #6]
 800116a:	460b      	mov	r3, r1
 800116c:	80bb      	strh	r3, [r7, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	70fb      	strb	r3, [r7, #3]
    OLED_DrawFilledRectangle(x * SNAKE_BLOCK_SIZE, y * SNAKE_BLOCK_SIZE, SNAKE_BLOCK_SIZE, SNAKE_BLOCK_SIZE, color);
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	b29b      	uxth	r3, r3
 8001178:	b218      	sxth	r0, r3
 800117a:	88bb      	ldrh	r3, [r7, #4]
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	b29b      	uxth	r3, r3
 8001180:	b219      	sxth	r1, r3
 8001182:	78fb      	ldrb	r3, [r7, #3]
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2304      	movs	r3, #4
 8001188:	2204      	movs	r2, #4
 800118a:	f007 faaa 	bl	80086e2 <OLED_DrawFilledRectangle>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <Snake_GenerateFood>:

// Function to generate food at a random position (used by Snake)
static void Snake_GenerateFood()
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
    bool food_on_snake;
    do
    {
        food_on_snake = false;
 800119e:	2300      	movs	r3, #0
 80011a0:	71fb      	strb	r3, [r7, #7]
        food.pos.x = rand() % GAME_AREA_WIDTH;
 80011a2:	f00a fd77 	bl	800bc94 <rand>
 80011a6:	4603      	mov	r3, r0
 80011a8:	425a      	negs	r2, r3
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	f002 021f 	and.w	r2, r2, #31
 80011b2:	bf58      	it	pl
 80011b4:	4253      	negpl	r3, r2
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	4b20      	ldr	r3, [pc, #128]	@ (800123c <Snake_GenerateFood+0xa4>)
 80011ba:	801a      	strh	r2, [r3, #0]
        food.pos.y = rand() % GAME_AREA_HEIGHT;
 80011bc:	f00a fd6a 	bl	800bc94 <rand>
 80011c0:	4602      	mov	r2, r0
 80011c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <Snake_GenerateFood+0xa8>)
 80011c4:	fb83 1302 	smull	r1, r3, r3, r2
 80011c8:	4413      	add	r3, r2
 80011ca:	10d9      	asrs	r1, r3, #3
 80011cc:	17d3      	asrs	r3, r2, #31
 80011ce:	1ac9      	subs	r1, r1, r3
 80011d0:	460b      	mov	r3, r1
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	1a5b      	subs	r3, r3, r1
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	1ad1      	subs	r1, r2, r3
 80011da:	b20a      	sxth	r2, r1
 80011dc:	4b17      	ldr	r3, [pc, #92]	@ (800123c <Snake_GenerateFood+0xa4>)
 80011de:	805a      	strh	r2, [r3, #2]
        for (uint16_t i = 0; i < snake.length; i++)
 80011e0:	2300      	movs	r3, #0
 80011e2:	80bb      	strh	r3, [r7, #4]
 80011e4:	e019      	b.n	800121a <Snake_GenerateFood+0x82>
        {
            if (snake.body[i].x == food.pos.x && snake.body[i].y == food.pos.y)
 80011e6:	88bb      	ldrh	r3, [r7, #4]
 80011e8:	4a16      	ldr	r2, [pc, #88]	@ (8001244 <Snake_GenerateFood+0xac>)
 80011ea:	f932 2023 	ldrsh.w	r2, [r2, r3, lsl #2]
 80011ee:	4b13      	ldr	r3, [pc, #76]	@ (800123c <Snake_GenerateFood+0xa4>)
 80011f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d10d      	bne.n	8001214 <Snake_GenerateFood+0x7c>
 80011f8:	88bb      	ldrh	r3, [r7, #4]
 80011fa:	4a12      	ldr	r2, [pc, #72]	@ (8001244 <Snake_GenerateFood+0xac>)
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001204:	4b0d      	ldr	r3, [pc, #52]	@ (800123c <Snake_GenerateFood+0xa4>)
 8001206:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800120a:	429a      	cmp	r2, r3
 800120c:	d102      	bne.n	8001214 <Snake_GenerateFood+0x7c>
            {
                food_on_snake = true;
 800120e:	2301      	movs	r3, #1
 8001210:	71fb      	strb	r3, [r7, #7]
                break;
 8001212:	e008      	b.n	8001226 <Snake_GenerateFood+0x8e>
        for (uint16_t i = 0; i < snake.length; i++)
 8001214:	88bb      	ldrh	r3, [r7, #4]
 8001216:	3301      	adds	r3, #1
 8001218:	80bb      	strh	r3, [r7, #4]
 800121a:	4b0a      	ldr	r3, [pc, #40]	@ (8001244 <Snake_GenerateFood+0xac>)
 800121c:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8001220:	88ba      	ldrh	r2, [r7, #4]
 8001222:	429a      	cmp	r2, r3
 8001224:	d3df      	bcc.n	80011e6 <Snake_GenerateFood+0x4e>
            }
        }
    } while (food_on_snake);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1b8      	bne.n	800119e <Snake_GenerateFood+0x6>
    food.active = true;
 800122c:	4b03      	ldr	r3, [pc, #12]	@ (800123c <Snake_GenerateFood+0xa4>)
 800122e:	2201      	movs	r2, #1
 8001230:	711a      	strb	r2, [r3, #4]
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000066c 	.word	0x2000066c
 8001240:	92492493 	.word	0x92492493
 8001244:	200004d8 	.word	0x200004d8

08001248 <Snake_InitGame>:

void Snake_InitGame(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
    // srand(HAL_GetTick()); // Seed RNG if not done elsewhere
    gameOver = false;
 800124e:	4b28      	ldr	r3, [pc, #160]	@ (80012f0 <Snake_InitGame+0xa8>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
    snake.length = 3;
 8001254:	4b27      	ldr	r3, [pc, #156]	@ (80012f4 <Snake_InitGame+0xac>)
 8001256:	2203      	movs	r2, #3
 8001258:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
    snake.dir = DIR_RIGHT;
 800125c:	4b25      	ldr	r3, [pc, #148]	@ (80012f4 <Snake_InitGame+0xac>)
 800125e:	2203      	movs	r2, #3
 8001260:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192
    snake.body[0].x = GAME_AREA_WIDTH / 2;
 8001264:	4b23      	ldr	r3, [pc, #140]	@ (80012f4 <Snake_InitGame+0xac>)
 8001266:	2210      	movs	r2, #16
 8001268:	801a      	strh	r2, [r3, #0]
    snake.body[0].y = GAME_AREA_HEIGHT / 2;
 800126a:	4b22      	ldr	r3, [pc, #136]	@ (80012f4 <Snake_InitGame+0xac>)
 800126c:	2207      	movs	r2, #7
 800126e:	805a      	strh	r2, [r3, #2]
    snake.body[1].x = snake.body[0].x - 1;
 8001270:	4b20      	ldr	r3, [pc, #128]	@ (80012f4 <Snake_InitGame+0xac>)
 8001272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001276:	b29b      	uxth	r3, r3
 8001278:	3b01      	subs	r3, #1
 800127a:	b29b      	uxth	r3, r3
 800127c:	b21a      	sxth	r2, r3
 800127e:	4b1d      	ldr	r3, [pc, #116]	@ (80012f4 <Snake_InitGame+0xac>)
 8001280:	809a      	strh	r2, [r3, #4]
    snake.body[1].y = snake.body[0].y;
 8001282:	4b1c      	ldr	r3, [pc, #112]	@ (80012f4 <Snake_InitGame+0xac>)
 8001284:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001288:	4b1a      	ldr	r3, [pc, #104]	@ (80012f4 <Snake_InitGame+0xac>)
 800128a:	80da      	strh	r2, [r3, #6]
    snake.body[2].x = snake.body[0].x - 2;
 800128c:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <Snake_InitGame+0xac>)
 800128e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001292:	b29b      	uxth	r3, r3
 8001294:	3b02      	subs	r3, #2
 8001296:	b29b      	uxth	r3, r3
 8001298:	b21a      	sxth	r2, r3
 800129a:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <Snake_InitGame+0xac>)
 800129c:	811a      	strh	r2, [r3, #8]
    snake.body[2].y = snake.body[0].y;
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <Snake_InitGame+0xac>)
 80012a0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80012a4:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <Snake_InitGame+0xac>)
 80012a6:	815a      	strh	r2, [r3, #10]
    for (uint16_t i = snake.length; i < SNAKE_MAX_LENGTH; ++i)
 80012a8:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <Snake_InitGame+0xac>)
 80012aa:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80012ae:	80fb      	strh	r3, [r7, #6]
 80012b0:	e00f      	b.n	80012d2 <Snake_InitGame+0x8a>
    {
        snake.body[i].x = -1;
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	4a0f      	ldr	r2, [pc, #60]	@ (80012f4 <Snake_InitGame+0xac>)
 80012b6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80012ba:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
        snake.body[i].y = -1;
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	4a0c      	ldr	r2, [pc, #48]	@ (80012f4 <Snake_InitGame+0xac>)
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012ca:	805a      	strh	r2, [r3, #2]
    for (uint16_t i = snake.length; i < SNAKE_MAX_LENGTH; ++i)
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	3301      	adds	r3, #1
 80012d0:	80fb      	strh	r3, [r7, #6]
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	2b63      	cmp	r3, #99	@ 0x63
 80012d6:	d9ec      	bls.n	80012b2 <Snake_InitGame+0x6a>
    }
    Snake_GenerateFood();
 80012d8:	f7ff ff5e 	bl	8001198 <Snake_GenerateFood>
    gameTickLast = HAL_GetTick();
 80012dc:	f008 f83c 	bl	8009358 <HAL_GetTick>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4a05      	ldr	r2, [pc, #20]	@ (80012f8 <Snake_InitGame+0xb0>)
 80012e4:	6013      	str	r3, [r2, #0]
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000672 	.word	0x20000672
 80012f4:	200004d8 	.word	0x200004d8
 80012f8:	20000674 	.word	0x20000674

080012fc <Snake_Draw>:

static void Snake_Draw(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
    for (uint16_t i = 0; i < snake.length; i++)
 8001302:	2300      	movs	r3, #0
 8001304:	80fb      	strh	r3, [r7, #6]
 8001306:	e010      	b.n	800132a <Snake_Draw+0x2e>
    {
        DrawBlock(snake.body[i].x, snake.body[i].y, 1);
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	4a1d      	ldr	r2, [pc, #116]	@ (8001380 <Snake_Draw+0x84>)
 800130c:	f932 0023 	ldrsh.w	r0, [r2, r3, lsl #2]
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	4a1b      	ldr	r2, [pc, #108]	@ (8001380 <Snake_Draw+0x84>)
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800131c:	2201      	movs	r2, #1
 800131e:	4619      	mov	r1, r3
 8001320:	f7ff ff1e 	bl	8001160 <DrawBlock>
    for (uint16_t i = 0; i < snake.length; i++)
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	3301      	adds	r3, #1
 8001328:	80fb      	strh	r3, [r7, #6]
 800132a:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <Snake_Draw+0x84>)
 800132c:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8001330:	88fa      	ldrh	r2, [r7, #6]
 8001332:	429a      	cmp	r2, r3
 8001334:	d3e8      	bcc.n	8001308 <Snake_Draw+0xc>
    }
    if (food.active)
 8001336:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <Snake_Draw+0x88>)
 8001338:	791b      	ldrb	r3, [r3, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d009      	beq.n	8001352 <Snake_Draw+0x56>
    {
        DrawBlock(food.pos.x, food.pos.y, 1);
 800133e:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <Snake_Draw+0x88>)
 8001340:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001344:	4a0f      	ldr	r2, [pc, #60]	@ (8001384 <Snake_Draw+0x88>)
 8001346:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800134a:	2201      	movs	r2, #1
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff07 	bl	8001160 <DrawBlock>
    }
    if (gameOver)
 8001352:	4b0d      	ldr	r3, [pc, #52]	@ (8001388 <Snake_Draw+0x8c>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00e      	beq.n	8001378 <Snake_Draw+0x7c>
    {
        OLED_DisplayString(OLED_WIDTH / 2 - 3 * 6, OLED_HEIGHT / 2 - 4, "GAME");
 800135a:	4a0c      	ldr	r2, [pc, #48]	@ (800138c <Snake_Draw+0x90>)
 800135c:	211c      	movs	r1, #28
 800135e:	202e      	movs	r0, #46	@ 0x2e
 8001360:	f001 fd0e 	bl	8002d80 <OLED_DisplayString>
        OLED_DisplayString(OLED_WIDTH / 2 - 3 * 6, OLED_HEIGHT / 2 + 4, "OVER");
 8001364:	4a0a      	ldr	r2, [pc, #40]	@ (8001390 <Snake_Draw+0x94>)
 8001366:	2124      	movs	r1, #36	@ 0x24
 8001368:	202e      	movs	r0, #46	@ 0x2e
 800136a:	f001 fd09 	bl	8002d80 <OLED_DisplayString>
        OLED_DisplayString(OLED_WIDTH / 2 - 5 * 6, OLED_HEIGHT / 2 + 12, "RST BTN=RS");
 800136e:	4a09      	ldr	r2, [pc, #36]	@ (8001394 <Snake_Draw+0x98>)
 8001370:	212c      	movs	r1, #44	@ 0x2c
 8001372:	2022      	movs	r0, #34	@ 0x22
 8001374:	f001 fd04 	bl	8002d80 <OLED_DisplayString>
    }
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200004d8 	.word	0x200004d8
 8001384:	2000066c 	.word	0x2000066c
 8001388:	20000672 	.word	0x20000672
 800138c:	0800e504 	.word	0x0800e504
 8001390:	0800e50c 	.word	0x0800e50c
 8001394:	0800e514 	.word	0x0800e514

08001398 <Snake_Update>:

static void Snake_Update(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
    if (gameOver)
 800139e:	4b5a      	ldr	r3, [pc, #360]	@ (8001508 <Snake_Update+0x170>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f040 80ab 	bne.w	80014fe <Snake_Update+0x166>
        return;

    Point new_head = snake.body[0];
 80013a8:	4b58      	ldr	r3, [pc, #352]	@ (800150c <Snake_Update+0x174>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	603b      	str	r3, [r7, #0]
    switch (snake.dir)
 80013ae:	4b57      	ldr	r3, [pc, #348]	@ (800150c <Snake_Update+0x174>)
 80013b0:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	d82b      	bhi.n	8001410 <Snake_Update+0x78>
 80013b8:	a201      	add	r2, pc, #4	@ (adr r2, 80013c0 <Snake_Update+0x28>)
 80013ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013be:	bf00      	nop
 80013c0:	080013d1 	.word	0x080013d1
 80013c4:	080013e1 	.word	0x080013e1
 80013c8:	080013f1 	.word	0x080013f1
 80013cc:	08001401 	.word	0x08001401
    {
    case DIR_UP:
        new_head.y--;
 80013d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	3b01      	subs	r3, #1
 80013d8:	b29b      	uxth	r3, r3
 80013da:	b21b      	sxth	r3, r3
 80013dc:	807b      	strh	r3, [r7, #2]
        break;
 80013de:	e017      	b.n	8001410 <Snake_Update+0x78>
    case DIR_DOWN:
        new_head.y++;
 80013e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	3301      	adds	r3, #1
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	807b      	strh	r3, [r7, #2]
        break;
 80013ee:	e00f      	b.n	8001410 <Snake_Update+0x78>
    case DIR_LEFT:
        new_head.x--;
 80013f0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	3b01      	subs	r3, #1
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	803b      	strh	r3, [r7, #0]
        break;
 80013fe:	e007      	b.n	8001410 <Snake_Update+0x78>
    case DIR_RIGHT:
        new_head.x++;
 8001400:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001404:	b29b      	uxth	r3, r3
 8001406:	3301      	adds	r3, #1
 8001408:	b29b      	uxth	r3, r3
 800140a:	b21b      	sxth	r3, r3
 800140c:	803b      	strh	r3, [r7, #0]
        break;
 800140e:	bf00      	nop
    }

    if (new_head.x < 0)
 8001410:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001414:	2b00      	cmp	r3, #0
 8001416:	da02      	bge.n	800141e <Snake_Update+0x86>
        new_head.x = GAME_AREA_WIDTH - 1;
 8001418:	231f      	movs	r3, #31
 800141a:	803b      	strh	r3, [r7, #0]
 800141c:	e005      	b.n	800142a <Snake_Update+0x92>
    else if (new_head.x >= GAME_AREA_WIDTH)
 800141e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001422:	2b1f      	cmp	r3, #31
 8001424:	dd01      	ble.n	800142a <Snake_Update+0x92>
        new_head.x = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	803b      	strh	r3, [r7, #0]
    if (new_head.y < 0)
 800142a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800142e:	2b00      	cmp	r3, #0
 8001430:	da02      	bge.n	8001438 <Snake_Update+0xa0>
        new_head.y = GAME_AREA_HEIGHT - 1;
 8001432:	230d      	movs	r3, #13
 8001434:	807b      	strh	r3, [r7, #2]
 8001436:	e005      	b.n	8001444 <Snake_Update+0xac>
    else if (new_head.y >= GAME_AREA_HEIGHT)
 8001438:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800143c:	2b0d      	cmp	r3, #13
 800143e:	dd01      	ble.n	8001444 <Snake_Update+0xac>
        new_head.y = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	807b      	strh	r3, [r7, #2]

    for (uint16_t i = 0; i < snake.length - 1; i++) // Check up to length-1
 8001444:	2300      	movs	r3, #0
 8001446:	80fb      	strh	r3, [r7, #6]
 8001448:	e018      	b.n	800147c <Snake_Update+0xe4>
    {
        if (new_head.x == snake.body[i].x && new_head.y == snake.body[i].y)
 800144a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	492e      	ldr	r1, [pc, #184]	@ (800150c <Snake_Update+0x174>)
 8001452:	f931 3023 	ldrsh.w	r3, [r1, r3, lsl #2]
 8001456:	429a      	cmp	r2, r3
 8001458:	d10d      	bne.n	8001476 <Snake_Update+0xde>
 800145a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	492a      	ldr	r1, [pc, #168]	@ (800150c <Snake_Update+0x174>)
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800146a:	429a      	cmp	r2, r3
 800146c:	d103      	bne.n	8001476 <Snake_Update+0xde>
        {
            gameOver = true;
 800146e:	4b26      	ldr	r3, [pc, #152]	@ (8001508 <Snake_Update+0x170>)
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
            return;
 8001474:	e044      	b.n	8001500 <Snake_Update+0x168>
    for (uint16_t i = 0; i < snake.length - 1; i++) // Check up to length-1
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	3301      	adds	r3, #1
 800147a:	80fb      	strh	r3, [r7, #6]
 800147c:	88fa      	ldrh	r2, [r7, #6]
 800147e:	4b23      	ldr	r3, [pc, #140]	@ (800150c <Snake_Update+0x174>)
 8001480:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8001484:	3b01      	subs	r3, #1
 8001486:	429a      	cmp	r2, r3
 8001488:	dbdf      	blt.n	800144a <Snake_Update+0xb2>
        }
    }

    if (food.active && new_head.x == food.pos.x && new_head.y == food.pos.y)
 800148a:	4b21      	ldr	r3, [pc, #132]	@ (8001510 <Snake_Update+0x178>)
 800148c:	791b      	ldrb	r3, [r3, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d01c      	beq.n	80014cc <Snake_Update+0x134>
 8001492:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001496:	4b1e      	ldr	r3, [pc, #120]	@ (8001510 <Snake_Update+0x178>)
 8001498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149c:	429a      	cmp	r2, r3
 800149e:	d115      	bne.n	80014cc <Snake_Update+0x134>
 80014a0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80014a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <Snake_Update+0x178>)
 80014a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d10e      	bne.n	80014cc <Snake_Update+0x134>
    {
        if (snake.length < SNAKE_MAX_LENGTH)
 80014ae:	4b17      	ldr	r3, [pc, #92]	@ (800150c <Snake_Update+0x174>)
 80014b0:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80014b4:	2b63      	cmp	r3, #99	@ 0x63
 80014b6:	d807      	bhi.n	80014c8 <Snake_Update+0x130>
            snake.length++;
 80014b8:	4b14      	ldr	r3, [pc, #80]	@ (800150c <Snake_Update+0x174>)
 80014ba:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80014be:	3301      	adds	r3, #1
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	4b12      	ldr	r3, [pc, #72]	@ (800150c <Snake_Update+0x174>)
 80014c4:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
        Snake_GenerateFood();
 80014c8:	f7ff fe66 	bl	8001198 <Snake_GenerateFood>
    }
    // No else needed for tail movement; body shift handles it.

    for (uint16_t i = snake.length - 1; i > 0; i--)
 80014cc:	4b0f      	ldr	r3, [pc, #60]	@ (800150c <Snake_Update+0x174>)
 80014ce:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80014d2:	3b01      	subs	r3, #1
 80014d4:	80bb      	strh	r3, [r7, #4]
 80014d6:	e00b      	b.n	80014f0 <Snake_Update+0x158>
    {
        snake.body[i] = snake.body[i - 1];
 80014d8:	88bb      	ldrh	r3, [r7, #4]
 80014da:	1e5a      	subs	r2, r3, #1
 80014dc:	88bb      	ldrh	r3, [r7, #4]
 80014de:	490b      	ldr	r1, [pc, #44]	@ (800150c <Snake_Update+0x174>)
 80014e0:	480a      	ldr	r0, [pc, #40]	@ (800150c <Snake_Update+0x174>)
 80014e2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint16_t i = snake.length - 1; i > 0; i--)
 80014ea:	88bb      	ldrh	r3, [r7, #4]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	80bb      	strh	r3, [r7, #4]
 80014f0:	88bb      	ldrh	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <Snake_Update+0x140>
    }
    snake.body[0] = new_head;
 80014f6:	4a05      	ldr	r2, [pc, #20]	@ (800150c <Snake_Update+0x174>)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	e000      	b.n	8001500 <Snake_Update+0x168>
        return;
 80014fe:	bf00      	nop
}
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000672 	.word	0x20000672
 800150c:	200004d8 	.word	0x200004d8
 8001510:	2000066c 	.word	0x2000066c

08001514 <Snake_HandleInput>:

void Snake_HandleInput(Direction input_dir)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
    if ((snake.dir == DIR_UP && input_dir != DIR_DOWN) ||
 800151e:	4b14      	ldr	r3, [pc, #80]	@ (8001570 <Snake_HandleInput+0x5c>)
 8001520:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <Snake_HandleInput+0x1a>
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d117      	bne.n	800155e <Snake_HandleInput+0x4a>
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <Snake_HandleInput+0x5c>)
 8001530:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
    if ((snake.dir == DIR_UP && input_dir != DIR_DOWN) ||
 8001534:	2b01      	cmp	r3, #1
 8001536:	d102      	bne.n	800153e <Snake_HandleInput+0x2a>
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10f      	bne.n	800155e <Snake_HandleInput+0x4a>
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 800153e:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <Snake_HandleInput+0x5c>)
 8001540:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8001544:	2b02      	cmp	r3, #2
 8001546:	d102      	bne.n	800154e <Snake_HandleInput+0x3a>
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	2b03      	cmp	r3, #3
 800154c:	d107      	bne.n	800155e <Snake_HandleInput+0x4a>
        (snake.dir == DIR_RIGHT && input_dir != DIR_LEFT))
 800154e:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <Snake_HandleInput+0x5c>)
 8001550:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8001554:	2b03      	cmp	r3, #3
 8001556:	d106      	bne.n	8001566 <Snake_HandleInput+0x52>
        (snake.dir == DIR_RIGHT && input_dir != DIR_LEFT))
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d003      	beq.n	8001566 <Snake_HandleInput+0x52>
    {
        snake.dir = input_dir;
 800155e:	4a04      	ldr	r2, [pc, #16]	@ (8001570 <Snake_HandleInput+0x5c>)
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	f882 3192 	strb.w	r3, [r2, #402]	@ 0x192
    }
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	200004d8 	.word	0x200004d8

08001574 <Snake_GameLoop>:

void Snake_GameLoop(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
    static uint16_t LastCount;
    static bool preMutiTurn = false;

    if (FirstRun)
 800157a:	4b60      	ldr	r3, [pc, #384]	@ (80016fc <Snake_GameLoop+0x188>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d006      	beq.n	8001590 <Snake_GameLoop+0x1c>
    {
        FirstRun = false;
 8001582:	4b5e      	ldr	r3, [pc, #376]	@ (80016fc <Snake_GameLoop+0x188>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
        LastCount = count;
 8001588:	4b5d      	ldr	r3, [pc, #372]	@ (8001700 <Snake_GameLoop+0x18c>)
 800158a:	881a      	ldrh	r2, [r3, #0]
 800158c:	4b5d      	ldr	r3, [pc, #372]	@ (8001704 <Snake_GameLoop+0x190>)
 800158e:	801a      	strh	r2, [r3, #0]
    }

    if (!preMutiTurn)
 8001590:	4b5d      	ldr	r3, [pc, #372]	@ (8001708 <Snake_GameLoop+0x194>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	f083 0301 	eor.w	r3, r3, #1
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d065      	beq.n	800166a <Snake_GameLoop+0xf6>
    {
        if (count - LastCount > 1)
 800159e:	4b58      	ldr	r3, [pc, #352]	@ (8001700 <Snake_GameLoop+0x18c>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	4b57      	ldr	r3, [pc, #348]	@ (8001704 <Snake_GameLoop+0x190>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	dd2a      	ble.n	8001604 <Snake_GameLoop+0x90>
        {
            if (snake.dir == DIR_UP)
 80015ae:	4b57      	ldr	r3, [pc, #348]	@ (800170c <Snake_GameLoop+0x198>)
 80015b0:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d103      	bne.n	80015c0 <Snake_GameLoop+0x4c>
                Snake_HandleInput(DIR_RIGHT);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f7ff ffab 	bl	8001514 <Snake_HandleInput>
 80015be:	e019      	b.n	80015f4 <Snake_GameLoop+0x80>
            else if (snake.dir == DIR_DOWN)
 80015c0:	4b52      	ldr	r3, [pc, #328]	@ (800170c <Snake_GameLoop+0x198>)
 80015c2:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d103      	bne.n	80015d2 <Snake_GameLoop+0x5e>
                Snake_HandleInput(DIR_LEFT);
 80015ca:	2002      	movs	r0, #2
 80015cc:	f7ff ffa2 	bl	8001514 <Snake_HandleInput>
 80015d0:	e010      	b.n	80015f4 <Snake_GameLoop+0x80>
            else if (snake.dir == DIR_LEFT)
 80015d2:	4b4e      	ldr	r3, [pc, #312]	@ (800170c <Snake_GameLoop+0x198>)
 80015d4:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d103      	bne.n	80015e4 <Snake_GameLoop+0x70>
                Snake_HandleInput(DIR_UP);
 80015dc:	2000      	movs	r0, #0
 80015de:	f7ff ff99 	bl	8001514 <Snake_HandleInput>
 80015e2:	e007      	b.n	80015f4 <Snake_GameLoop+0x80>
            else if (snake.dir == DIR_RIGHT)
 80015e4:	4b49      	ldr	r3, [pc, #292]	@ (800170c <Snake_GameLoop+0x198>)
 80015e6:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d102      	bne.n	80015f4 <Snake_GameLoop+0x80>
                Snake_HandleInput(DIR_DOWN);
 80015ee:	2001      	movs	r0, #1
 80015f0:	f7ff ff90 	bl	8001514 <Snake_HandleInput>

            preMutiTurn = true;
 80015f4:	4b44      	ldr	r3, [pc, #272]	@ (8001708 <Snake_GameLoop+0x194>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]
            LastCount = count;
 80015fa:	4b41      	ldr	r3, [pc, #260]	@ (8001700 <Snake_GameLoop+0x18c>)
 80015fc:	881a      	ldrh	r2, [r3, #0]
 80015fe:	4b41      	ldr	r3, [pc, #260]	@ (8001704 <Snake_GameLoop+0x190>)
 8001600:	801a      	strh	r2, [r3, #0]
 8001602:	e032      	b.n	800166a <Snake_GameLoop+0xf6>
        }
        else if (count - LastCount < -1)
 8001604:	4b3e      	ldr	r3, [pc, #248]	@ (8001700 <Snake_GameLoop+0x18c>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b3e      	ldr	r3, [pc, #248]	@ (8001704 <Snake_GameLoop+0x190>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001614:	da29      	bge.n	800166a <Snake_GameLoop+0xf6>
        {
            if (snake.dir == DIR_UP)
 8001616:	4b3d      	ldr	r3, [pc, #244]	@ (800170c <Snake_GameLoop+0x198>)
 8001618:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 800161c:	2b00      	cmp	r3, #0
 800161e:	d103      	bne.n	8001628 <Snake_GameLoop+0xb4>
                Snake_HandleInput(DIR_LEFT);
 8001620:	2002      	movs	r0, #2
 8001622:	f7ff ff77 	bl	8001514 <Snake_HandleInput>
 8001626:	e019      	b.n	800165c <Snake_GameLoop+0xe8>
            else if (snake.dir == DIR_DOWN)
 8001628:	4b38      	ldr	r3, [pc, #224]	@ (800170c <Snake_GameLoop+0x198>)
 800162a:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 800162e:	2b01      	cmp	r3, #1
 8001630:	d103      	bne.n	800163a <Snake_GameLoop+0xc6>
                Snake_HandleInput(DIR_RIGHT);
 8001632:	2003      	movs	r0, #3
 8001634:	f7ff ff6e 	bl	8001514 <Snake_HandleInput>
 8001638:	e010      	b.n	800165c <Snake_GameLoop+0xe8>
            else if (snake.dir == DIR_LEFT)
 800163a:	4b34      	ldr	r3, [pc, #208]	@ (800170c <Snake_GameLoop+0x198>)
 800163c:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8001640:	2b02      	cmp	r3, #2
 8001642:	d103      	bne.n	800164c <Snake_GameLoop+0xd8>
                Snake_HandleInput(DIR_DOWN);
 8001644:	2001      	movs	r0, #1
 8001646:	f7ff ff65 	bl	8001514 <Snake_HandleInput>
 800164a:	e007      	b.n	800165c <Snake_GameLoop+0xe8>
            else if (snake.dir == DIR_RIGHT)
 800164c:	4b2f      	ldr	r3, [pc, #188]	@ (800170c <Snake_GameLoop+0x198>)
 800164e:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8001652:	2b03      	cmp	r3, #3
 8001654:	d102      	bne.n	800165c <Snake_GameLoop+0xe8>
                Snake_HandleInput(DIR_UP);
 8001656:	2000      	movs	r0, #0
 8001658:	f7ff ff5c 	bl	8001514 <Snake_HandleInput>

            preMutiTurn = true;
 800165c:	4b2a      	ldr	r3, [pc, #168]	@ (8001708 <Snake_GameLoop+0x194>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
            LastCount = count;
 8001662:	4b27      	ldr	r3, [pc, #156]	@ (8001700 <Snake_GameLoop+0x18c>)
 8001664:	881a      	ldrh	r2, [r3, #0]
 8001666:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <Snake_GameLoop+0x190>)
 8001668:	801a      	strh	r2, [r3, #0]
        }
    }

    if (HAL_GetTick() - gameTickLast >= GAME_TICK_MS)
 800166a:	f007 fe75 	bl	8009358 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	4b27      	ldr	r3, [pc, #156]	@ (8001710 <Snake_GameLoop+0x19c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b63      	cmp	r3, #99	@ 0x63
 8001678:	d909      	bls.n	800168e <Snake_GameLoop+0x11a>
    {
        Snake_Update();
 800167a:	f7ff fe8d 	bl	8001398 <Snake_Update>
        gameTickLast = HAL_GetTick();
 800167e:	f007 fe6b 	bl	8009358 <HAL_GetTick>
 8001682:	4603      	mov	r3, r0
 8001684:	4a22      	ldr	r2, [pc, #136]	@ (8001710 <Snake_GameLoop+0x19c>)
 8001686:	6013      	str	r3, [r2, #0]
        preMutiTurn = false;
 8001688:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <Snake_GameLoop+0x194>)
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
    }
    Snake_Draw();
 800168e:	f7ff fe35 	bl	80012fc <Snake_Draw>

    if (gameOver)
 8001692:	4b20      	ldr	r3, [pc, #128]	@ (8001714 <Snake_GameLoop+0x1a0>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d01d      	beq.n	80016d6 <Snake_GameLoop+0x162>
    {
        if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 800169a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800169e:	481e      	ldr	r0, [pc, #120]	@ (8001718 <Snake_GameLoop+0x1a4>)
 80016a0:	f008 fa7a 	bl	8009b98 <HAL_GPIO_ReadPin>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d115      	bne.n	80016d6 <Snake_GameLoop+0x162>
        {
            HAL_Delay(INPUT_DEBOUNCE_MS);
 80016aa:	2032      	movs	r0, #50	@ 0x32
 80016ac:	f007 fe5e 	bl	800936c <HAL_Delay>
            if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 80016b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016b4:	4818      	ldr	r0, [pc, #96]	@ (8001718 <Snake_GameLoop+0x1a4>)
 80016b6:	f008 fa6f 	bl	8009b98 <HAL_GPIO_ReadPin>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10a      	bne.n	80016d6 <Snake_GameLoop+0x162>
            {
                Snake_InitGame();
 80016c0:	f7ff fdc2 	bl	8001248 <Snake_InitGame>
                while (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 80016c4:	bf00      	nop
 80016c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016ca:	4813      	ldr	r0, [pc, #76]	@ (8001718 <Snake_GameLoop+0x1a4>)
 80016cc:	f008 fa64 	bl	8009b98 <HAL_GPIO_ReadPin>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f7      	beq.n	80016c6 <Snake_GameLoop+0x152>
                    ;
            }
        }
    }
    char score_str[20];
    sprintf(score_str, "Score: %d", snake.length - 3);
 80016d6:	4b0d      	ldr	r3, [pc, #52]	@ (800170c <Snake_GameLoop+0x198>)
 80016d8:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80016dc:	1eda      	subs	r2, r3, #3
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	490e      	ldr	r1, [pc, #56]	@ (800171c <Snake_GameLoop+0x1a8>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f00a fbd6 	bl	800be94 <siprintf>
    OLED_DisplayString(0, OLED_HEIGHT-8, score_str);
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	461a      	mov	r2, r3
 80016ec:	2138      	movs	r1, #56	@ 0x38
 80016ee:	2000      	movs	r0, #0
 80016f0:	f001 fb46 	bl	8002d80 <OLED_DisplayString>
}
 80016f4:	bf00      	nop
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000000 	.word	0x20000000
 8001700:	20000740 	.word	0x20000740
 8001704:	200006a0 	.word	0x200006a0
 8001708:	200006a2 	.word	0x200006a2
 800170c:	200004d8 	.word	0x200004d8
 8001710:	20000674 	.word	0x20000674
 8001714:	20000672 	.word	0x20000672
 8001718:	40010c00 	.word	0x40010c00
 800171c:	0800e520 	.word	0x0800e520

08001720 <Game2048_AddRandomTile>:

#pragma region 2048 Game Definitions
// --- 2048 Game Implementation ---

static void Game2048_AddRandomTile()
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b092      	sub	sp, #72	@ 0x48
 8001724:	af00      	add	r7, sp, #0
    Point empty_tiles[GAME2048_BOARD_SIZE * GAME2048_BOARD_SIZE]; // Use GAME2048_BOARD_SIZE
    uint8_t num_empty_tiles = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 800172c:	2300      	movs	r3, #0
 800172e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001732:	e035      	b.n	80017a0 <Game2048_AddRandomTile+0x80>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001734:	2300      	movs	r3, #0
 8001736:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800173a:	e028      	b.n	800178e <Game2048_AddRandomTile+0x6e>
        {
            if (game2048_board[r][c].value == 0)
 800173c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8001740:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001744:	493a      	ldr	r1, [pc, #232]	@ (8001830 <Game2048_AddRandomTile+0x110>)
 8001746:	0092      	lsls	r2, r2, #2
 8001748:	4413      	add	r3, r2
 800174a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d118      	bne.n	8001784 <Game2048_AddRandomTile+0x64>
            {
                empty_tiles[num_empty_tiles].x = c;
 8001752:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001756:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800175a:	b212      	sxth	r2, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	3348      	adds	r3, #72	@ 0x48
 8001760:	443b      	add	r3, r7
 8001762:	f823 2c48 	strh.w	r2, [r3, #-72]
                empty_tiles[num_empty_tiles].y = r;
 8001766:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800176a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800176e:	b212      	sxth	r2, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	3348      	adds	r3, #72	@ 0x48
 8001774:	443b      	add	r3, r7
 8001776:	f823 2c46 	strh.w	r2, [r3, #-70]
                num_empty_tiles++;
 800177a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800177e:	3301      	adds	r3, #1
 8001780:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001784:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001788:	3301      	adds	r3, #1
 800178a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800178e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001792:	2b03      	cmp	r3, #3
 8001794:	d9d2      	bls.n	800173c <Game2048_AddRandomTile+0x1c>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001796:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800179a:	3301      	adds	r3, #1
 800179c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80017a0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d9c5      	bls.n	8001734 <Game2048_AddRandomTile+0x14>
            }
        }
    }
    if (num_empty_tiles > 0)
 80017a8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d03a      	beq.n	8001826 <Game2048_AddRandomTile+0x106>
    {
        uint16_t rand_index = rand() % num_empty_tiles;
 80017b0:	f00a fa70 	bl	800bc94 <rand>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80017ba:	fb92 f1f3 	sdiv	r1, r2, r3
 80017be:	fb01 f303 	mul.w	r3, r1, r3
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        uint8_t r_pos = empty_tiles[rand_index].y;
 80017c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	3348      	adds	r3, #72	@ 0x48
 80017d0:	443b      	add	r3, r7
 80017d2:	f933 3c46 	ldrsh.w	r3, [r3, #-70]
 80017d6:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
        uint8_t c_pos = empty_tiles[rand_index].x;
 80017da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	3348      	adds	r3, #72	@ 0x48
 80017e2:	443b      	add	r3, r7
 80017e4:	f933 3c48 	ldrsh.w	r3, [r3, #-72]
 80017e8:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
        game2048_board[r_pos][c_pos].value = (rand() % 10 == 0) ? 4 : 2;
 80017ec:	f00a fa52 	bl	800bc94 <rand>
 80017f0:	4601      	mov	r1, r0
 80017f2:	4b10      	ldr	r3, [pc, #64]	@ (8001834 <Game2048_AddRandomTile+0x114>)
 80017f4:	fb83 2301 	smull	r2, r3, r3, r1
 80017f8:	109a      	asrs	r2, r3, #2
 80017fa:	17cb      	asrs	r3, r1, #31
 80017fc:	1ad2      	subs	r2, r2, r3
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	1aca      	subs	r2, r1, r3
 8001808:	2a00      	cmp	r2, #0
 800180a:	d101      	bne.n	8001810 <Game2048_AddRandomTile+0xf0>
 800180c:	2004      	movs	r0, #4
 800180e:	e000      	b.n	8001812 <Game2048_AddRandomTile+0xf2>
 8001810:	2002      	movs	r0, #2
 8001812:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 8001816:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800181a:	4905      	ldr	r1, [pc, #20]	@ (8001830 <Game2048_AddRandomTile+0x110>)
 800181c:	0092      	lsls	r2, r2, #2
 800181e:	4413      	add	r3, r2
 8001820:	4602      	mov	r2, r0
 8001822:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }
}
 8001826:	bf00      	nop
 8001828:	3748      	adds	r7, #72	@ 0x48
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000678 	.word	0x20000678
 8001834:	66666667 	.word	0x66666667

08001838 <Game2048_Init>:

void Game2048_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 800183e:	2300      	movs	r3, #0
 8001840:	71fb      	strb	r3, [r7, #7]
 8001842:	e013      	b.n	800186c <Game2048_Init+0x34>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001844:	2300      	movs	r3, #0
 8001846:	71bb      	strb	r3, [r7, #6]
 8001848:	e00a      	b.n	8001860 <Game2048_Init+0x28>
        {
            game2048_board[r][c].value = 0;
 800184a:	79fa      	ldrb	r2, [r7, #7]
 800184c:	79bb      	ldrb	r3, [r7, #6]
 800184e:	4914      	ldr	r1, [pc, #80]	@ (80018a0 <Game2048_Init+0x68>)
 8001850:	0092      	lsls	r2, r2, #2
 8001852:	4413      	add	r3, r2
 8001854:	2200      	movs	r2, #0
 8001856:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 800185a:	79bb      	ldrb	r3, [r7, #6]
 800185c:	3301      	adds	r3, #1
 800185e:	71bb      	strb	r3, [r7, #6]
 8001860:	79bb      	ldrb	r3, [r7, #6]
 8001862:	2b03      	cmp	r3, #3
 8001864:	d9f1      	bls.n	800184a <Game2048_Init+0x12>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	3301      	adds	r3, #1
 800186a:	71fb      	strb	r3, [r7, #7]
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	2b03      	cmp	r3, #3
 8001870:	d9e8      	bls.n	8001844 <Game2048_Init+0xc>
        }
    }
    game2048_score = 0;
 8001872:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <Game2048_Init+0x6c>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
    game2048_game_over = false;
 8001878:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <Game2048_Init+0x70>)
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
    game2048_game_won = false;
 800187e:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <Game2048_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
    game2048_move_made_this_turn = false;
 8001884:	4b0a      	ldr	r3, [pc, #40]	@ (80018b0 <Game2048_Init+0x78>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
    FirstRun = true; // Reset the first run flag
 800188a:	4b0a      	ldr	r3, [pc, #40]	@ (80018b4 <Game2048_Init+0x7c>)
 800188c:	2201      	movs	r2, #1
 800188e:	701a      	strb	r2, [r3, #0]
    Game2048_AddRandomTile();
 8001890:	f7ff ff46 	bl	8001720 <Game2048_AddRandomTile>

    OLED_UpdateDisplayVSync(); // Update display to show the initial state
 8001894:	f000 fe88 	bl	80025a8 <OLED_UpdateDisplayVSync>
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000678 	.word	0x20000678
 80018a4:	20000698 	.word	0x20000698
 80018a8:	2000069c 	.word	0x2000069c
 80018ac:	2000069d 	.word	0x2000069d
 80018b0:	2000069e 	.word	0x2000069e
 80018b4:	20000000 	.word	0x20000000

080018b8 <Game2048_Restart>:

void Game2048_Restart(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
    Game2048_Init();
 80018bc:	f7ff ffbc 	bl	8001838 <Game2048_Init>
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <Game2048_DrawBoard>:

void Game2048_DrawBoard(void)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b089      	sub	sp, #36	@ 0x24
 80018c8:	af02      	add	r7, sp, #8
    OLED_ClearBuffer();
 80018ca:	f000 fe25 	bl	8002518 <OLED_ClearBuffer>
    char str_buffer[10];
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 80018ce:	2300      	movs	r3, #0
 80018d0:	75fb      	strb	r3, [r7, #23]
 80018d2:	e068      	b.n	80019a6 <Game2048_DrawBoard+0xe2>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 80018d4:	2300      	movs	r3, #0
 80018d6:	75bb      	strb	r3, [r7, #22]
 80018d8:	e05f      	b.n	800199a <Game2048_DrawBoard+0xd6>
        {
            uint16_t val = game2048_board[r][c].value;
 80018da:	7dfa      	ldrb	r2, [r7, #23]
 80018dc:	7dbb      	ldrb	r3, [r7, #22]
 80018de:	494d      	ldr	r1, [pc, #308]	@ (8001a14 <Game2048_DrawBoard+0x150>)
 80018e0:	0092      	lsls	r2, r2, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80018e8:	82bb      	strh	r3, [r7, #20]
            uint8_t tile_x = c * GAME2048_TILE_WIDTH;
 80018ea:	7dbb      	ldrb	r3, [r7, #22]
 80018ec:	015b      	lsls	r3, r3, #5
 80018ee:	74fb      	strb	r3, [r7, #19]
            uint8_t tile_y = r * GAME2048_TILE_HEIGHT;
 80018f0:	7dfb      	ldrb	r3, [r7, #23]
 80018f2:	461a      	mov	r2, r3
 80018f4:	00d2      	lsls	r2, r2, #3
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	74bb      	strb	r3, [r7, #18]
            uint8_t tile_inner_width = GAME2048_TILE_WIDTH - 2 * GAME2048_TILE_PADDING;
 80018fc:	231e      	movs	r3, #30
 80018fe:	747b      	strb	r3, [r7, #17]
            uint8_t tile_inner_height = GAME2048_TILE_HEIGHT - 2 * GAME2048_TILE_PADDING;
 8001900:	230c      	movs	r3, #12
 8001902:	743b      	strb	r3, [r7, #16]

            OLED_DrawFilledRectangle(tile_x + GAME2048_TILE_PADDING,
 8001904:	7cfb      	ldrb	r3, [r7, #19]
 8001906:	b29b      	uxth	r3, r3
 8001908:	3301      	adds	r3, #1
 800190a:	b29b      	uxth	r3, r3
 800190c:	b218      	sxth	r0, r3
                                     tile_y + GAME2048_TILE_PADDING,
 800190e:	7cbb      	ldrb	r3, [r7, #18]
 8001910:	b29b      	uxth	r3, r3
 8001912:	3301      	adds	r3, #1
 8001914:	b29b      	uxth	r3, r3
            OLED_DrawFilledRectangle(tile_x + GAME2048_TILE_PADDING,
 8001916:	b219      	sxth	r1, r3
 8001918:	8abb      	ldrh	r3, [r7, #20]
 800191a:	2b00      	cmp	r3, #0
 800191c:	bf14      	ite	ne
 800191e:	2301      	movne	r3, #1
 8001920:	2300      	moveq	r3, #0
 8001922:	b2db      	uxtb	r3, r3
 8001924:	461c      	mov	r4, r3
 8001926:	7c3b      	ldrb	r3, [r7, #16]
 8001928:	7c7a      	ldrb	r2, [r7, #17]
 800192a:	9400      	str	r4, [sp, #0]
 800192c:	f006 fed9 	bl	80086e2 <OLED_DrawFilledRectangle>
                                     tile_inner_width, tile_inner_height,
                                     (val == 0) ? 0 : 1);
            if (val > 0)
 8001930:	8abb      	ldrh	r3, [r7, #20]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d02e      	beq.n	8001994 <Game2048_DrawBoard+0xd0>
            {
                sprintf(str_buffer, "%d", val);
 8001936:	8aba      	ldrh	r2, [r7, #20]
 8001938:	463b      	mov	r3, r7
 800193a:	4937      	ldr	r1, [pc, #220]	@ (8001a18 <Game2048_DrawBoard+0x154>)
 800193c:	4618      	mov	r0, r3
 800193e:	f00a faa9 	bl	800be94 <siprintf>
                uint8_t text_width = strlen(str_buffer) * 6;
 8001942:	463b      	mov	r3, r7
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fc0b 	bl	8000160 <strlen>
 800194a:	4603      	mov	r3, r0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	461a      	mov	r2, r3
 8001950:	0052      	lsls	r2, r2, #1
 8001952:	4413      	add	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
                uint8_t text_height = 8;
 8001958:	2308      	movs	r3, #8
 800195a:	73bb      	strb	r3, [r7, #14]
                uint8_t text_x = tile_x + (GAME2048_TILE_WIDTH - text_width) / 2;
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	f1c3 0320 	rsb	r3, r3, #32
 8001962:	0fda      	lsrs	r2, r3, #31
 8001964:	4413      	add	r3, r2
 8001966:	105b      	asrs	r3, r3, #1
 8001968:	b2da      	uxtb	r2, r3
 800196a:	7cfb      	ldrb	r3, [r7, #19]
 800196c:	4413      	add	r3, r2
 800196e:	737b      	strb	r3, [r7, #13]
                uint8_t text_y = tile_y + (GAME2048_TILE_HEIGHT - text_height) / 2;
 8001970:	7bbb      	ldrb	r3, [r7, #14]
 8001972:	f1c3 030e 	rsb	r3, r3, #14
 8001976:	0fda      	lsrs	r2, r3, #31
 8001978:	4413      	add	r3, r2
 800197a:	105b      	asrs	r3, r3, #1
 800197c:	b2da      	uxtb	r2, r3
 800197e:	7cbb      	ldrb	r3, [r7, #18]
 8001980:	4413      	add	r3, r2
 8001982:	733b      	strb	r3, [r7, #12]
                OLED_DisplayStringInverted(text_x, text_y, str_buffer, 1);
 8001984:	7b7b      	ldrb	r3, [r7, #13]
 8001986:	b218      	sxth	r0, r3
 8001988:	7b3b      	ldrb	r3, [r7, #12]
 800198a:	b219      	sxth	r1, r3
 800198c:	463a      	mov	r2, r7
 800198e:	2301      	movs	r3, #1
 8001990:	f001 fa43 	bl	8002e1a <OLED_DisplayStringInverted>
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001994:	7dbb      	ldrb	r3, [r7, #22]
 8001996:	3301      	adds	r3, #1
 8001998:	75bb      	strb	r3, [r7, #22]
 800199a:	7dbb      	ldrb	r3, [r7, #22]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d99c      	bls.n	80018da <Game2048_DrawBoard+0x16>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
 80019a2:	3301      	adds	r3, #1
 80019a4:	75fb      	strb	r3, [r7, #23]
 80019a6:	7dfb      	ldrb	r3, [r7, #23]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d993      	bls.n	80018d4 <Game2048_DrawBoard+0x10>
            }
        }
    }
    sprintf(str_buffer, "Scores:%lu", game2048_score);
 80019ac:	4b1b      	ldr	r3, [pc, #108]	@ (8001a1c <Game2048_DrawBoard+0x158>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	463b      	mov	r3, r7
 80019b2:	491b      	ldr	r1, [pc, #108]	@ (8001a20 <Game2048_DrawBoard+0x15c>)
 80019b4:	4618      	mov	r0, r3
 80019b6:	f00a fa6d 	bl	800be94 <siprintf>
    OLED_DisplayString(0, OLED_HEIGHT - 8, str_buffer);
 80019ba:	463b      	mov	r3, r7
 80019bc:	461a      	mov	r2, r3
 80019be:	2138      	movs	r1, #56	@ 0x38
 80019c0:	2000      	movs	r0, #0
 80019c2:	f001 f9dd 	bl	8002d80 <OLED_DisplayString>

    if (game2048_game_over)
 80019c6:	4b17      	ldr	r3, [pc, #92]	@ (8001a24 <Game2048_DrawBoard+0x160>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d014      	beq.n	80019f8 <Game2048_DrawBoard+0x134>
    {
        OLED_DrawFilledRectangle(0, 0, OLED_WIDTH, OLED_HEIGHT-8, 1);
 80019ce:	2301      	movs	r3, #1
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2338      	movs	r3, #56	@ 0x38
 80019d4:	2280      	movs	r2, #128	@ 0x80
 80019d6:	2100      	movs	r1, #0
 80019d8:	2000      	movs	r0, #0
 80019da:	f006 fe82 	bl	80086e2 <OLED_DrawFilledRectangle>
        OLED_DisplayStringInverted((OLED_WIDTH - 8 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2 - 8, "GAME OVER", 1);
 80019de:	2301      	movs	r3, #1
 80019e0:	4a11      	ldr	r2, [pc, #68]	@ (8001a28 <Game2048_DrawBoard+0x164>)
 80019e2:	2114      	movs	r1, #20
 80019e4:	2028      	movs	r0, #40	@ 0x28
 80019e6:	f001 fa18 	bl	8002e1a <OLED_DisplayStringInverted>
        OLED_DisplayStringInverted((OLED_WIDTH - 10 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2, "RST BTN=RS", 1);
 80019ea:	2301      	movs	r3, #1
 80019ec:	4a0f      	ldr	r2, [pc, #60]	@ (8001a2c <Game2048_DrawBoard+0x168>)
 80019ee:	211c      	movs	r1, #28
 80019f0:	2022      	movs	r0, #34	@ 0x22
 80019f2:	f001 fa12 	bl	8002e1a <OLED_DisplayStringInverted>
    }
    else if (game2048_game_won)
    {
        OLED_DisplayString((OLED_WIDTH - 7 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2 - 4, "YOU WIN!");
    }
}
 80019f6:	e008      	b.n	8001a0a <Game2048_DrawBoard+0x146>
    else if (game2048_game_won)
 80019f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001a30 <Game2048_DrawBoard+0x16c>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d004      	beq.n	8001a0a <Game2048_DrawBoard+0x146>
        OLED_DisplayString((OLED_WIDTH - 7 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2 - 4, "YOU WIN!");
 8001a00:	4a0c      	ldr	r2, [pc, #48]	@ (8001a34 <Game2048_DrawBoard+0x170>)
 8001a02:	2118      	movs	r1, #24
 8001a04:	202b      	movs	r0, #43	@ 0x2b
 8001a06:	f001 f9bb 	bl	8002d80 <OLED_DisplayString>
}
 8001a0a:	bf00      	nop
 8001a0c:	371c      	adds	r7, #28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd90      	pop	{r4, r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000678 	.word	0x20000678
 8001a18:	0800e52c 	.word	0x0800e52c
 8001a1c:	20000698 	.word	0x20000698
 8001a20:	0800e530 	.word	0x0800e530
 8001a24:	2000069c 	.word	0x2000069c
 8001a28:	0800e53c 	.word	0x0800e53c
 8001a2c:	0800e514 	.word	0x0800e514
 8001a30:	2000069d 	.word	0x2000069d
 8001a34:	0800e548 	.word	0x0800e548

08001a38 <Game2048_CompactAndMerge>:

static void Game2048_CompactAndMerge(uint8_t line_idx, Direction dir, bool is_row)
{
 8001a38:	b490      	push	{r4, r7}
 8001a3a:	b08c      	sub	sp, #48	@ 0x30
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
 8001a42:	460b      	mov	r3, r1
 8001a44:	71bb      	strb	r3, [r7, #6]
 8001a46:	4613      	mov	r3, r2
 8001a48:	717b      	strb	r3, [r7, #5]
    uint8_t line_size = GAME2048_BOARD_SIZE;          // Use GAME2048_BOARD_SIZE
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint16_t temp_line[GAME2048_BOARD_SIZE] = {0};    // Use GAME2048_BOARD_SIZE
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
    uint16_t original_line_copy[GAME2048_BOARD_SIZE]; // To check if anything changed

    for (uint8_t i = 0; i < line_size; ++i)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001a60:	e01f      	b.n	8001aa2 <Game2048_CompactAndMerge+0x6a>
    {
        original_line_copy[i] = is_row ? game2048_board[line_idx][i].value : game2048_board[i][line_idx].value;
 8001a62:	797b      	ldrb	r3, [r7, #5]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <Game2048_CompactAndMerge+0x42>
 8001a68:	79fa      	ldrb	r2, [r7, #7]
 8001a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a6e:	49c2      	ldr	r1, [pc, #776]	@ (8001d78 <Game2048_CompactAndMerge+0x340>)
 8001a70:	0092      	lsls	r2, r2, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001a78:	e007      	b.n	8001a8a <Game2048_CompactAndMerge+0x52>
 8001a7a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	49bd      	ldr	r1, [pc, #756]	@ (8001d78 <Game2048_CompactAndMerge+0x340>)
 8001a82:	0092      	lsls	r2, r2, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001a8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	3330      	adds	r3, #48	@ 0x30
 8001a92:	443b      	add	r3, r7
 8001a94:	f823 2c24 	strh.w	r2, [r3, #-36]
    for (uint8_t i = 0; i < line_size; ++i)
 8001a98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001aa2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d3d9      	bcc.n	8001a62 <Game2048_CompactAndMerge+0x2a>
    }

    int8_t write_pos = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t increment = 1;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (dir == DIR_DOWN || dir == DIR_RIGHT)
 8001aba:	79bb      	ldrb	r3, [r7, #6]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d002      	beq.n	8001ac6 <Game2048_CompactAndMerge+0x8e>
 8001ac0:	79bb      	ldrb	r3, [r7, #6]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d108      	bne.n	8001ad8 <Game2048_CompactAndMerge+0xa0>
    {
        write_pos = line_size - 1;
 8001ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        increment = -1;
 8001ad2:	23ff      	movs	r3, #255	@ 0xff
 8001ad4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    }

    int8_t compact_pos = write_pos;
 8001ad8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001adc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001ae6:	e041      	b.n	8001b6c <Game2048_CompactAndMerge+0x134>
    {
        int8_t read_pos_actual = (dir == DIR_DOWN || dir == DIR_RIGHT) ? (line_size - 1 - i) : i;
 8001ae8:	79bb      	ldrb	r3, [r7, #6]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d002      	beq.n	8001af4 <Game2048_CompactAndMerge+0xbc>
 8001aee:	79bb      	ldrb	r3, [r7, #6]
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d109      	bne.n	8001b08 <Game2048_CompactAndMerge+0xd0>
 8001af4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001af8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	3b01      	subs	r3, #1
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	b25b      	sxtb	r3, r3
 8001b06:	e001      	b.n	8001b0c <Game2048_CompactAndMerge+0xd4>
 8001b08:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8001b0c:	f887 3020 	strb.w	r3, [r7, #32]
        uint16_t current_tile_value = is_row ? game2048_board[line_idx][read_pos_actual].value
 8001b10:	797b      	ldrb	r3, [r7, #5]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d008      	beq.n	8001b28 <Game2048_CompactAndMerge+0xf0>
 8001b16:	79fa      	ldrb	r2, [r7, #7]
 8001b18:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8001b1c:	4996      	ldr	r1, [pc, #600]	@ (8001d78 <Game2048_CompactAndMerge+0x340>)
 8001b1e:	0092      	lsls	r2, r2, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001b26:	e007      	b.n	8001b38 <Game2048_CompactAndMerge+0x100>
                                             : game2048_board[read_pos_actual][line_idx].value;
 8001b28:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
        uint16_t current_tile_value = is_row ? game2048_board[line_idx][read_pos_actual].value
 8001b2e:	4992      	ldr	r1, [pc, #584]	@ (8001d78 <Game2048_CompactAndMerge+0x340>)
 8001b30:	0092      	lsls	r2, r2, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001b38:	83fb      	strh	r3, [r7, #30]
        if (current_tile_value != 0)
 8001b3a:	8bfb      	ldrh	r3, [r7, #30]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00f      	beq.n	8001b60 <Game2048_CompactAndMerge+0x128>
        {
            temp_line[compact_pos] = current_tile_value;
 8001b40:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	3330      	adds	r3, #48	@ 0x30
 8001b48:	443b      	add	r3, r7
 8001b4a:	8bfa      	ldrh	r2, [r7, #30]
 8001b4c:	f823 2c1c 	strh.w	r2, [r3, #-28]
            compact_pos += increment;
 8001b50:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001b54:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001b58:	4413      	add	r3, r2
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 8001b60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001b64:	3301      	adds	r3, #1
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001b6c:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 8001b70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b74:	429a      	cmp	r2, r3
 8001b76:	dbb7      	blt.n	8001ae8 <Game2048_CompactAndMerge+0xb0>
        }
    }

    for (int8_t i = 0; i < line_size - 1; ++i)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001b7e:	e078      	b.n	8001c72 <Game2048_CompactAndMerge+0x23a>
    {
        int8_t current_idx = (dir == DIR_DOWN || dir == DIR_RIGHT) ? (line_size - 1 - i) : i;
 8001b80:	79bb      	ldrb	r3, [r7, #6]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d002      	beq.n	8001b8c <Game2048_CompactAndMerge+0x154>
 8001b86:	79bb      	ldrb	r3, [r7, #6]
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d109      	bne.n	8001ba0 <Game2048_CompactAndMerge+0x168>
 8001b8c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001b90:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	b25b      	sxtb	r3, r3
 8001b9e:	e001      	b.n	8001ba4 <Game2048_CompactAndMerge+0x16c>
 8001ba0:	f997 302a 	ldrsb.w	r3, [r7, #42]	@ 0x2a
 8001ba4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        int8_t next_idx = current_idx + increment;
 8001ba8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001bac:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        if (next_idx < 0 || next_idx >= line_size)
 8001bb8:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	db51      	blt.n	8001c64 <Game2048_CompactAndMerge+0x22c>
 8001bc0:	f997 2021 	ldrsb.w	r2, [r7, #33]	@ 0x21
 8001bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	da4b      	bge.n	8001c64 <Game2048_CompactAndMerge+0x22c>
            continue;

        if (temp_line[current_idx] != 0 && temp_line[current_idx] == temp_line[next_idx])
 8001bcc:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	3330      	adds	r3, #48	@ 0x30
 8001bd4:	443b      	add	r3, r7
 8001bd6:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d043      	beq.n	8001c66 <Game2048_CompactAndMerge+0x22e>
 8001bde:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	3330      	adds	r3, #48	@ 0x30
 8001be6:	443b      	add	r3, r7
 8001be8:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 8001bec:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	3330      	adds	r3, #48	@ 0x30
 8001bf4:	443b      	add	r3, r7
 8001bf6:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d133      	bne.n	8001c66 <Game2048_CompactAndMerge+0x22e>
        {
            temp_line[current_idx] *= 2;
 8001bfe:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	3330      	adds	r3, #48	@ 0x30
 8001c06:	443b      	add	r3, r7
 8001c08:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 8001c0c:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001c10:	0052      	lsls	r2, r2, #1
 8001c12:	b292      	uxth	r2, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	3330      	adds	r3, #48	@ 0x30
 8001c18:	443b      	add	r3, r7
 8001c1a:	f823 2c1c 	strh.w	r2, [r3, #-28]
            game2048_score += temp_line[current_idx];
 8001c1e:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	3330      	adds	r3, #48	@ 0x30
 8001c26:	443b      	add	r3, r7
 8001c28:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b53      	ldr	r3, [pc, #332]	@ (8001d7c <Game2048_CompactAndMerge+0x344>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a51      	ldr	r2, [pc, #324]	@ (8001d7c <Game2048_CompactAndMerge+0x344>)
 8001c36:	6013      	str	r3, [r2, #0]
            temp_line[next_idx] = 0;
 8001c38:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	3330      	adds	r3, #48	@ 0x30
 8001c40:	443b      	add	r3, r7
 8001c42:	2200      	movs	r2, #0
 8001c44:	f823 2c1c 	strh.w	r2, [r3, #-28]
            if (temp_line[current_idx] == 2048)
 8001c48:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	3330      	adds	r3, #48	@ 0x30
 8001c50:	443b      	add	r3, r7
 8001c52:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001c56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c5a:	d104      	bne.n	8001c66 <Game2048_CompactAndMerge+0x22e>
                game2048_game_won = true;
 8001c5c:	4b48      	ldr	r3, [pc, #288]	@ (8001d80 <Game2048_CompactAndMerge+0x348>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	e000      	b.n	8001c66 <Game2048_CompactAndMerge+0x22e>
            continue;
 8001c64:	bf00      	nop
    for (int8_t i = 0; i < line_size - 1; ++i)
 8001c66:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001c72:	f997 202a 	ldrsb.w	r2, [r7, #42]	@ 0x2a
 8001c76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	f6ff af7f 	blt.w	8001b80 <Game2048_CompactAndMerge+0x148>
        }
    }

    compact_pos = write_pos;
 8001c82:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001c86:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8001c90:	e045      	b.n	8001d1e <Game2048_CompactAndMerge+0x2e6>
    {
        int8_t read_pos_temp = (dir == DIR_DOWN || dir == DIR_RIGHT) ? (line_size - 1 - i) : i;
 8001c92:	79bb      	ldrb	r3, [r7, #6]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d002      	beq.n	8001c9e <Game2048_CompactAndMerge+0x266>
 8001c98:	79bb      	ldrb	r3, [r7, #6]
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d109      	bne.n	8001cb2 <Game2048_CompactAndMerge+0x27a>
 8001c9e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001ca2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	b25b      	sxtb	r3, r3
 8001cb0:	e001      	b.n	8001cb6 <Game2048_CompactAndMerge+0x27e>
 8001cb2:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 8001cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        // The condition "if (temp_line[read_pos_temp] != 0)" was problematic.
        // temp_line already contains the correct values, including zeros, after compaction and merging.
        // We should always write the value from temp_line to the board and advance compact_pos.
        if (is_row)
 8001cba:	797b      	ldrb	r3, [r7, #5]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d010      	beq.n	8001ce2 <Game2048_CompactAndMerge+0x2aa>
        {
            game2048_board[line_idx][compact_pos].value = temp_line[read_pos_temp];
 8001cc0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8001cc4:	79f9      	ldrb	r1, [r7, #7]
 8001cc6:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	3330      	adds	r3, #48	@ 0x30
 8001cce:	443b      	add	r3, r7
 8001cd0:	f833 4c1c 	ldrh.w	r4, [r3, #-28]
 8001cd4:	4828      	ldr	r0, [pc, #160]	@ (8001d78 <Game2048_CompactAndMerge+0x340>)
 8001cd6:	008b      	lsls	r3, r1, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	4622      	mov	r2, r4
 8001cdc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8001ce0:	e00f      	b.n	8001d02 <Game2048_CompactAndMerge+0x2ca>
        }
        else
        {
            game2048_board[compact_pos][line_idx].value = temp_line[read_pos_temp];
 8001ce2:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8001ce6:	f997 102c 	ldrsb.w	r1, [r7, #44]	@ 0x2c
 8001cea:	79fa      	ldrb	r2, [r7, #7]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	3330      	adds	r3, #48	@ 0x30
 8001cf0:	443b      	add	r3, r7
 8001cf2:	f833 4c1c 	ldrh.w	r4, [r3, #-28]
 8001cf6:	4820      	ldr	r0, [pc, #128]	@ (8001d78 <Game2048_CompactAndMerge+0x340>)
 8001cf8:	008b      	lsls	r3, r1, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	4622      	mov	r2, r4
 8001cfe:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        }
        compact_pos += increment; // compact_pos should always be updated.
 8001d02:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001d06:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001d0a:	4413      	add	r3, r2
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 8001d12:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001d16:	3301      	adds	r3, #1
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8001d1e:	f997 2029 	ldrsb.w	r2, [r7, #41]	@ 0x29
 8001d22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d26:	429a      	cmp	r2, r3
 8001d28:	dbb3      	blt.n	8001c92 <Game2048_CompactAndMerge+0x25a>
    }

    for (uint8_t i = 0; i < line_size; ++i)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8001d30:	e02f      	b.n	8001d92 <Game2048_CompactAndMerge+0x35a>
    {
        uint16_t current_val = is_row ? game2048_board[line_idx][i].value : game2048_board[i][line_idx].value;
 8001d32:	797b      	ldrb	r3, [r7, #5]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <Game2048_CompactAndMerge+0x312>
 8001d38:	79fa      	ldrb	r2, [r7, #7]
 8001d3a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001d3e:	490e      	ldr	r1, [pc, #56]	@ (8001d78 <Game2048_CompactAndMerge+0x340>)
 8001d40:	0092      	lsls	r2, r2, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d48:	e007      	b.n	8001d5a <Game2048_CompactAndMerge+0x322>
 8001d4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	4909      	ldr	r1, [pc, #36]	@ (8001d78 <Game2048_CompactAndMerge+0x340>)
 8001d52:	0092      	lsls	r2, r2, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d5a:	84bb      	strh	r3, [r7, #36]	@ 0x24
        if (original_line_copy[i] != current_val)
 8001d5c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	3330      	adds	r3, #48	@ 0x30
 8001d64:	443b      	add	r3, r7
 8001d66:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001d6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d00b      	beq.n	8001d88 <Game2048_CompactAndMerge+0x350>
        {
            game2048_move_made_this_turn = true;
 8001d70:	4b04      	ldr	r3, [pc, #16]	@ (8001d84 <Game2048_CompactAndMerge+0x34c>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]
            break;
 8001d76:	e013      	b.n	8001da0 <Game2048_CompactAndMerge+0x368>
 8001d78:	20000678 	.word	0x20000678
 8001d7c:	20000698 	.word	0x20000698
 8001d80:	2000069d 	.word	0x2000069d
 8001d84:	2000069e 	.word	0x2000069e
    for (uint8_t i = 0; i < line_size; ++i)
 8001d88:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8001d92:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001d96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d3c9      	bcc.n	8001d32 <Game2048_CompactAndMerge+0x2fa>
        }
    }
}
 8001d9e:	bf00      	nop
 8001da0:	bf00      	nop
 8001da2:	3730      	adds	r7, #48	@ 0x30
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc90      	pop	{r4, r7}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop

08001dac <Game2048_MoveUp>:

static void Game2048_MoveUp()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001db2:	2300      	movs	r3, #0
 8001db4:	71fb      	strb	r3, [r7, #7]
 8001db6:	e008      	b.n	8001dca <Game2048_MoveUp+0x1e>
    {
        Game2048_CompactAndMerge(c, DIR_UP, false);
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fe3a 	bl	8001a38 <Game2048_CompactAndMerge>
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	71fb      	strb	r3, [r7, #7]
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d9f3      	bls.n	8001db8 <Game2048_MoveUp+0xc>
    }
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <Game2048_MoveDown>:

static void Game2048_MoveDown()
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001de0:	2300      	movs	r3, #0
 8001de2:	71fb      	strb	r3, [r7, #7]
 8001de4:	e008      	b.n	8001df8 <Game2048_MoveDown+0x1e>
    {
        Game2048_CompactAndMerge(c, DIR_DOWN, false);
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	2200      	movs	r2, #0
 8001dea:	2101      	movs	r1, #1
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fe23 	bl	8001a38 <Game2048_CompactAndMerge>
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	3301      	adds	r3, #1
 8001df6:	71fb      	strb	r3, [r7, #7]
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d9f3      	bls.n	8001de6 <Game2048_MoveDown+0xc>
    }
}
 8001dfe:	bf00      	nop
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <Game2048_MoveLeft>:

static void Game2048_MoveLeft()
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001e0e:	2300      	movs	r3, #0
 8001e10:	71fb      	strb	r3, [r7, #7]
 8001e12:	e008      	b.n	8001e26 <Game2048_MoveLeft+0x1e>
    {
        Game2048_CompactAndMerge(r, DIR_LEFT, true);
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	2201      	movs	r2, #1
 8001e18:	2102      	movs	r1, #2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fe0c 	bl	8001a38 <Game2048_CompactAndMerge>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	3301      	adds	r3, #1
 8001e24:	71fb      	strb	r3, [r7, #7]
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d9f3      	bls.n	8001e14 <Game2048_MoveLeft+0xc>
    }
}
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <Game2048_MoveRight>:

static void Game2048_MoveRight()
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	71fb      	strb	r3, [r7, #7]
 8001e40:	e008      	b.n	8001e54 <Game2048_MoveRight+0x1e>
    {
        Game2048_CompactAndMerge(r, DIR_RIGHT, true);
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	2201      	movs	r2, #1
 8001e46:	2103      	movs	r1, #3
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fdf5 	bl	8001a38 <Game2048_CompactAndMerge>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	3301      	adds	r3, #1
 8001e52:	71fb      	strb	r3, [r7, #7]
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d9f3      	bls.n	8001e42 <Game2048_MoveRight+0xc>
    }
}
 8001e5a:	bf00      	nop
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <Game2048_CanMove>:

static bool Game2048_CanMove()
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	71fb      	strb	r3, [r7, #7]
 8001e6e:	e03e      	b.n	8001eee <Game2048_CanMove+0x8a>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001e70:	2300      	movs	r3, #0
 8001e72:	71bb      	strb	r3, [r7, #6]
 8001e74:	e035      	b.n	8001ee2 <Game2048_CanMove+0x7e>
        {
            if (game2048_board[r][c].value == 0)
 8001e76:	79fa      	ldrb	r2, [r7, #7]
 8001e78:	79bb      	ldrb	r3, [r7, #6]
 8001e7a:	4921      	ldr	r1, [pc, #132]	@ (8001f00 <Game2048_CanMove+0x9c>)
 8001e7c:	0092      	lsls	r2, r2, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <Game2048_CanMove+0x28>
                return true;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e034      	b.n	8001ef6 <Game2048_CanMove+0x92>
            uint16_t val = game2048_board[r][c].value;
 8001e8c:	79fa      	ldrb	r2, [r7, #7]
 8001e8e:	79bb      	ldrb	r3, [r7, #6]
 8001e90:	491b      	ldr	r1, [pc, #108]	@ (8001f00 <Game2048_CanMove+0x9c>)
 8001e92:	0092      	lsls	r2, r2, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001e9a:	80bb      	strh	r3, [r7, #4]
            if (c < GAME2048_BOARD_SIZE - 1 && game2048_board[r][c + 1].value == val) // Use GAME2048_BOARD_SIZE
 8001e9c:	79bb      	ldrb	r3, [r7, #6]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d80c      	bhi.n	8001ebc <Game2048_CanMove+0x58>
 8001ea2:	79fa      	ldrb	r2, [r7, #7]
 8001ea4:	79bb      	ldrb	r3, [r7, #6]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	4915      	ldr	r1, [pc, #84]	@ (8001f00 <Game2048_CanMove+0x9c>)
 8001eaa:	0092      	lsls	r2, r2, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001eb2:	88ba      	ldrh	r2, [r7, #4]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d101      	bne.n	8001ebc <Game2048_CanMove+0x58>
                return true;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e01c      	b.n	8001ef6 <Game2048_CanMove+0x92>
            if (r < GAME2048_BOARD_SIZE - 1 && game2048_board[r + 1][c].value == val) // Use GAME2048_BOARD_SIZE
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d80c      	bhi.n	8001edc <Game2048_CanMove+0x78>
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	79bb      	ldrb	r3, [r7, #6]
 8001ec8:	490d      	ldr	r1, [pc, #52]	@ (8001f00 <Game2048_CanMove+0x9c>)
 8001eca:	0092      	lsls	r2, r2, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ed2:	88ba      	ldrh	r2, [r7, #4]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d101      	bne.n	8001edc <Game2048_CanMove+0x78>
                return true;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e00c      	b.n	8001ef6 <Game2048_CanMove+0x92>
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001edc:	79bb      	ldrb	r3, [r7, #6]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	71bb      	strb	r3, [r7, #6]
 8001ee2:	79bb      	ldrb	r3, [r7, #6]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d9c6      	bls.n	8001e76 <Game2048_CanMove+0x12>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	3301      	adds	r3, #1
 8001eec:	71fb      	strb	r3, [r7, #7]
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d9bd      	bls.n	8001e70 <Game2048_CanMove+0xc>
        }
    }
    return false;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	20000678 	.word	0x20000678

08001f04 <Game2048_HandleInput>:

bool Game2048_HandleInput(Direction input_dir)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
    if (game2048_game_over || game2048_game_won)
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f8c <Game2048_HandleInput+0x88>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d103      	bne.n	8001f1e <Game2048_HandleInput+0x1a>
 8001f16:	4b1e      	ldr	r3, [pc, #120]	@ (8001f90 <Game2048_HandleInput+0x8c>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <Game2048_HandleInput+0x1e>
        return false;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e02f      	b.n	8001f82 <Game2048_HandleInput+0x7e>

    game2048_move_made_this_turn = false;
 8001f22:	4b1c      	ldr	r3, [pc, #112]	@ (8001f94 <Game2048_HandleInput+0x90>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]

    switch (input_dir)
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d816      	bhi.n	8001f5c <Game2048_HandleInput+0x58>
 8001f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f34 <Game2048_HandleInput+0x30>)
 8001f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f34:	08001f45 	.word	0x08001f45
 8001f38:	08001f4b 	.word	0x08001f4b
 8001f3c:	08001f51 	.word	0x08001f51
 8001f40:	08001f57 	.word	0x08001f57
    {
    case DIR_UP:
        Game2048_MoveUp();
 8001f44:	f7ff ff32 	bl	8001dac <Game2048_MoveUp>
        break;
 8001f48:	e008      	b.n	8001f5c <Game2048_HandleInput+0x58>
    case DIR_DOWN:
        Game2048_MoveDown();
 8001f4a:	f7ff ff46 	bl	8001dda <Game2048_MoveDown>
        break;
 8001f4e:	e005      	b.n	8001f5c <Game2048_HandleInput+0x58>
    case DIR_LEFT:
        Game2048_MoveLeft();
 8001f50:	f7ff ff5a 	bl	8001e08 <Game2048_MoveLeft>
        break;
 8001f54:	e002      	b.n	8001f5c <Game2048_HandleInput+0x58>
    case DIR_RIGHT:
        Game2048_MoveRight();
 8001f56:	f7ff ff6e 	bl	8001e36 <Game2048_MoveRight>
        break;
 8001f5a:	bf00      	nop
    }

    if (game2048_move_made_this_turn)
 8001f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f94 <Game2048_HandleInput+0x90>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00c      	beq.n	8001f7e <Game2048_HandleInput+0x7a>
    {
        Game2048_AddRandomTile();
 8001f64:	f7ff fbdc 	bl	8001720 <Game2048_AddRandomTile>
        if (!Game2048_CanMove())
 8001f68:	f7ff ff7c 	bl	8001e64 <Game2048_CanMove>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f083 0301 	eor.w	r3, r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d002      	beq.n	8001f7e <Game2048_HandleInput+0x7a>
        {
            game2048_game_over = true;
 8001f78:	4b04      	ldr	r3, [pc, #16]	@ (8001f8c <Game2048_HandleInput+0x88>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
        }
    }
    return game2048_move_made_this_turn;
 8001f7e:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <Game2048_HandleInput+0x90>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	2000069c 	.word	0x2000069c
 8001f90:	2000069d 	.word	0x2000069d
 8001f94:	2000069e 	.word	0x2000069e

08001f98 <Game2048_GameLoop>:

void Game2048_GameLoop(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
    static uint16_t LastCount;

    if (FirstRun)
 8001f9c:	4b48      	ldr	r3, [pc, #288]	@ (80020c0 <Game2048_GameLoop+0x128>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <Game2048_GameLoop+0x1a>
    {
        LastCount = count;
 8001fa4:	4b47      	ldr	r3, [pc, #284]	@ (80020c4 <Game2048_GameLoop+0x12c>)
 8001fa6:	881a      	ldrh	r2, [r3, #0]
 8001fa8:	4b47      	ldr	r3, [pc, #284]	@ (80020c8 <Game2048_GameLoop+0x130>)
 8001faa:	801a      	strh	r2, [r3, #0]
        FirstRun = false;
 8001fac:	4b44      	ldr	r3, [pc, #272]	@ (80020c0 <Game2048_GameLoop+0x128>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
    }

    if (count - LastCount > 1 && HAL_GPIO_ReadPin(GAME_BUTTON_PORT, GAME_BUTTON_PIN) == GPIO_PIN_SET)
 8001fb2:	4b44      	ldr	r3, [pc, #272]	@ (80020c4 <Game2048_GameLoop+0x12c>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b43      	ldr	r3, [pc, #268]	@ (80020c8 <Game2048_GameLoop+0x130>)
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	dd0f      	ble.n	8001fe2 <Game2048_GameLoop+0x4a>
 8001fc2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001fc6:	4841      	ldr	r0, [pc, #260]	@ (80020cc <Game2048_GameLoop+0x134>)
 8001fc8:	f007 fde6 	bl	8009b98 <HAL_GPIO_ReadPin>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d107      	bne.n	8001fe2 <Game2048_GameLoop+0x4a>
    {
        Game2048_HandleInput(DIR_RIGHT);
 8001fd2:	2003      	movs	r0, #3
 8001fd4:	f7ff ff96 	bl	8001f04 <Game2048_HandleInput>
        LastCount = count;
 8001fd8:	4b3a      	ldr	r3, [pc, #232]	@ (80020c4 <Game2048_GameLoop+0x12c>)
 8001fda:	881a      	ldrh	r2, [r3, #0]
 8001fdc:	4b3a      	ldr	r3, [pc, #232]	@ (80020c8 <Game2048_GameLoop+0x130>)
 8001fde:	801a      	strh	r2, [r3, #0]
 8001fe0:	e048      	b.n	8002074 <Game2048_GameLoop+0xdc>
    }
    else if (count - LastCount < -1 && HAL_GPIO_ReadPin(GAME_BUTTON_PORT, GAME_BUTTON_PIN) == GPIO_PIN_SET)
 8001fe2:	4b38      	ldr	r3, [pc, #224]	@ (80020c4 <Game2048_GameLoop+0x12c>)
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4b37      	ldr	r3, [pc, #220]	@ (80020c8 <Game2048_GameLoop+0x130>)
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff2:	da0f      	bge.n	8002014 <Game2048_GameLoop+0x7c>
 8001ff4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ff8:	4834      	ldr	r0, [pc, #208]	@ (80020cc <Game2048_GameLoop+0x134>)
 8001ffa:	f007 fdcd 	bl	8009b98 <HAL_GPIO_ReadPin>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b01      	cmp	r3, #1
 8002002:	d107      	bne.n	8002014 <Game2048_GameLoop+0x7c>
    {
        Game2048_HandleInput(DIR_LEFT);
 8002004:	2002      	movs	r0, #2
 8002006:	f7ff ff7d 	bl	8001f04 <Game2048_HandleInput>
        LastCount = count;
 800200a:	4b2e      	ldr	r3, [pc, #184]	@ (80020c4 <Game2048_GameLoop+0x12c>)
 800200c:	881a      	ldrh	r2, [r3, #0]
 800200e:	4b2e      	ldr	r3, [pc, #184]	@ (80020c8 <Game2048_GameLoop+0x130>)
 8002010:	801a      	strh	r2, [r3, #0]
 8002012:	e02f      	b.n	8002074 <Game2048_GameLoop+0xdc>
    }
    else if (count - LastCount > 1 && HAL_GPIO_ReadPin(GAME_BUTTON_PORT, GAME_BUTTON_PIN) == GPIO_PIN_RESET)
 8002014:	4b2b      	ldr	r3, [pc, #172]	@ (80020c4 <Game2048_GameLoop+0x12c>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	4b2b      	ldr	r3, [pc, #172]	@ (80020c8 <Game2048_GameLoop+0x130>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b01      	cmp	r3, #1
 8002022:	dd0f      	ble.n	8002044 <Game2048_GameLoop+0xac>
 8002024:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002028:	4828      	ldr	r0, [pc, #160]	@ (80020cc <Game2048_GameLoop+0x134>)
 800202a:	f007 fdb5 	bl	8009b98 <HAL_GPIO_ReadPin>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d107      	bne.n	8002044 <Game2048_GameLoop+0xac>
    {
        Game2048_HandleInput(DIR_UP);
 8002034:	2000      	movs	r0, #0
 8002036:	f7ff ff65 	bl	8001f04 <Game2048_HandleInput>
        LastCount = count;
 800203a:	4b22      	ldr	r3, [pc, #136]	@ (80020c4 <Game2048_GameLoop+0x12c>)
 800203c:	881a      	ldrh	r2, [r3, #0]
 800203e:	4b22      	ldr	r3, [pc, #136]	@ (80020c8 <Game2048_GameLoop+0x130>)
 8002040:	801a      	strh	r2, [r3, #0]
 8002042:	e017      	b.n	8002074 <Game2048_GameLoop+0xdc>
    }
    else if (count - LastCount < -1 && HAL_GPIO_ReadPin(GAME_BUTTON_PORT, GAME_BUTTON_PIN) == GPIO_PIN_RESET)
 8002044:	4b1f      	ldr	r3, [pc, #124]	@ (80020c4 <Game2048_GameLoop+0x12c>)
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b1f      	ldr	r3, [pc, #124]	@ (80020c8 <Game2048_GameLoop+0x130>)
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002054:	da0e      	bge.n	8002074 <Game2048_GameLoop+0xdc>
 8002056:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800205a:	481c      	ldr	r0, [pc, #112]	@ (80020cc <Game2048_GameLoop+0x134>)
 800205c:	f007 fd9c 	bl	8009b98 <HAL_GPIO_ReadPin>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <Game2048_GameLoop+0xdc>
    {
        Game2048_HandleInput(DIR_DOWN);
 8002066:	2001      	movs	r0, #1
 8002068:	f7ff ff4c 	bl	8001f04 <Game2048_HandleInput>
        LastCount = count;
 800206c:	4b15      	ldr	r3, [pc, #84]	@ (80020c4 <Game2048_GameLoop+0x12c>)
 800206e:	881a      	ldrh	r2, [r3, #0]
 8002070:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <Game2048_GameLoop+0x130>)
 8002072:	801a      	strh	r2, [r3, #0]
    }

    if (game2048_game_over)
 8002074:	4b16      	ldr	r3, [pc, #88]	@ (80020d0 <Game2048_GameLoop+0x138>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d01d      	beq.n	80020b8 <Game2048_GameLoop+0x120>
    {
        if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 800207c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002080:	4812      	ldr	r0, [pc, #72]	@ (80020cc <Game2048_GameLoop+0x134>)
 8002082:	f007 fd89 	bl	8009b98 <HAL_GPIO_ReadPin>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d115      	bne.n	80020b8 <Game2048_GameLoop+0x120>
        {
            HAL_Delay(INPUT_DEBOUNCE_MS);
 800208c:	2032      	movs	r0, #50	@ 0x32
 800208e:	f007 f96d 	bl	800936c <HAL_Delay>
            if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8002092:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002096:	480d      	ldr	r0, [pc, #52]	@ (80020cc <Game2048_GameLoop+0x134>)
 8002098:	f007 fd7e 	bl	8009b98 <HAL_GPIO_ReadPin>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10a      	bne.n	80020b8 <Game2048_GameLoop+0x120>
            {
                Game2048_Restart();
 80020a2:	f7ff fc09 	bl	80018b8 <Game2048_Restart>
                while (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 80020a6:	bf00      	nop
 80020a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020ac:	4807      	ldr	r0, [pc, #28]	@ (80020cc <Game2048_GameLoop+0x134>)
 80020ae:	f007 fd73 	bl	8009b98 <HAL_GPIO_ReadPin>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f7      	beq.n	80020a8 <Game2048_GameLoop+0x110>
            }
        }
    }


    Game2048_DrawBoard();
 80020b8:	f7ff fc04 	bl	80018c4 <Game2048_DrawBoard>
}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000000 	.word	0x20000000
 80020c4:	20000740 	.word	0x20000740
 80020c8:	200006a4 	.word	0x200006a4
 80020cc:	40010c00 	.word	0x40010c00
 80020d0:	2000069c 	.word	0x2000069c

080020d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020da:	f107 0310 	add.w	r3, r7, #16
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e8:	4b34      	ldr	r3, [pc, #208]	@ (80021bc <MX_GPIO_Init+0xe8>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4a33      	ldr	r2, [pc, #204]	@ (80021bc <MX_GPIO_Init+0xe8>)
 80020ee:	f043 0310 	orr.w	r3, r3, #16
 80020f2:	6193      	str	r3, [r2, #24]
 80020f4:	4b31      	ldr	r3, [pc, #196]	@ (80021bc <MX_GPIO_Init+0xe8>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002100:	4b2e      	ldr	r3, [pc, #184]	@ (80021bc <MX_GPIO_Init+0xe8>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	4a2d      	ldr	r2, [pc, #180]	@ (80021bc <MX_GPIO_Init+0xe8>)
 8002106:	f043 0320 	orr.w	r3, r3, #32
 800210a:	6193      	str	r3, [r2, #24]
 800210c:	4b2b      	ldr	r3, [pc, #172]	@ (80021bc <MX_GPIO_Init+0xe8>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002118:	4b28      	ldr	r3, [pc, #160]	@ (80021bc <MX_GPIO_Init+0xe8>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	4a27      	ldr	r2, [pc, #156]	@ (80021bc <MX_GPIO_Init+0xe8>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	6193      	str	r3, [r2, #24]
 8002124:	4b25      	ldr	r3, [pc, #148]	@ (80021bc <MX_GPIO_Init+0xe8>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002130:	4b22      	ldr	r3, [pc, #136]	@ (80021bc <MX_GPIO_Init+0xe8>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	4a21      	ldr	r2, [pc, #132]	@ (80021bc <MX_GPIO_Init+0xe8>)
 8002136:	f043 0308 	orr.w	r3, r3, #8
 800213a:	6193      	str	r3, [r2, #24]
 800213c:	4b1f      	ldr	r3, [pc, #124]	@ (80021bc <MX_GPIO_Init+0xe8>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	603b      	str	r3, [r7, #0]
 8002146:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SysWork_Light_GPIO_Port, SysWork_Light_Pin, GPIO_PIN_RESET);
 8002148:	2200      	movs	r2, #0
 800214a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800214e:	481c      	ldr	r0, [pc, #112]	@ (80021c0 <MX_GPIO_Init+0xec>)
 8002150:	f007 fd39 	bl	8009bc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET);
 8002154:	2200      	movs	r2, #0
 8002156:	2180      	movs	r1, #128	@ 0x80
 8002158:	481a      	ldr	r0, [pc, #104]	@ (80021c4 <MX_GPIO_Init+0xf0>)
 800215a:	f007 fd34 	bl	8009bc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SysWork_Light_Pin */
  GPIO_InitStruct.Pin = SysWork_Light_Pin;
 800215e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002162:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002164:	2301      	movs	r3, #1
 8002166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216c:	2302      	movs	r3, #2
 800216e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SysWork_Light_GPIO_Port, &GPIO_InitStruct);
 8002170:	f107 0310 	add.w	r3, r7, #16
 8002174:	4619      	mov	r1, r3
 8002176:	4812      	ldr	r0, [pc, #72]	@ (80021c0 <MX_GPIO_Init+0xec>)
 8002178:	f007 fb8a 	bl	8009890 <HAL_GPIO_Init>

  /*Configure GPIO pin : Flash_CS_Pin */
  GPIO_InitStruct.Pin = Flash_CS_Pin;
 800217c:	2380      	movs	r3, #128	@ 0x80
 800217e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002180:	2301      	movs	r3, #1
 8002182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002184:	2301      	movs	r3, #1
 8002186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002188:	2302      	movs	r3, #2
 800218a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Flash_CS_GPIO_Port, &GPIO_InitStruct);
 800218c:	f107 0310 	add.w	r3, r7, #16
 8002190:	4619      	mov	r1, r3
 8002192:	480c      	ldr	r0, [pc, #48]	@ (80021c4 <MX_GPIO_Init+0xf0>)
 8002194:	f007 fb7c 	bl	8009890 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch_Input_Pin Encoder_Input_Pin */
  GPIO_InitStruct.Pin = Switch_Input_Pin|Encoder_Input_Pin;
 8002198:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800219c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021a2:	2301      	movs	r3, #1
 80021a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a6:	f107 0310 	add.w	r3, r7, #16
 80021aa:	4619      	mov	r1, r3
 80021ac:	4806      	ldr	r0, [pc, #24]	@ (80021c8 <MX_GPIO_Init+0xf4>)
 80021ae:	f007 fb6f 	bl	8009890 <HAL_GPIO_Init>

}
 80021b2:	bf00      	nop
 80021b4:	3720      	adds	r7, #32
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40011000 	.word	0x40011000
 80021c4:	40010800 	.word	0x40010800
 80021c8:	40010c00 	.word	0x40010c00

080021cc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021d0:	4b12      	ldr	r3, [pc, #72]	@ (800221c <MX_I2C1_Init+0x50>)
 80021d2:	4a13      	ldr	r2, [pc, #76]	@ (8002220 <MX_I2C1_Init+0x54>)
 80021d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80021d6:	4b11      	ldr	r3, [pc, #68]	@ (800221c <MX_I2C1_Init+0x50>)
 80021d8:	4a12      	ldr	r2, [pc, #72]	@ (8002224 <MX_I2C1_Init+0x58>)
 80021da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021dc:	4b0f      	ldr	r3, [pc, #60]	@ (800221c <MX_I2C1_Init+0x50>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021e2:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <MX_I2C1_Init+0x50>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021e8:	4b0c      	ldr	r3, [pc, #48]	@ (800221c <MX_I2C1_Init+0x50>)
 80021ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021f0:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <MX_I2C1_Init+0x50>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021f6:	4b09      	ldr	r3, [pc, #36]	@ (800221c <MX_I2C1_Init+0x50>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021fc:	4b07      	ldr	r3, [pc, #28]	@ (800221c <MX_I2C1_Init+0x50>)
 80021fe:	2200      	movs	r2, #0
 8002200:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002202:	4b06      	ldr	r3, [pc, #24]	@ (800221c <MX_I2C1_Init+0x50>)
 8002204:	2200      	movs	r2, #0
 8002206:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002208:	4804      	ldr	r0, [pc, #16]	@ (800221c <MX_I2C1_Init+0x50>)
 800220a:	f007 fcf5 	bl	8009bf8 <HAL_I2C_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002214:	f000 f945 	bl	80024a2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}
 800221c:	200006a8 	.word	0x200006a8
 8002220:	40005400 	.word	0x40005400
 8002224:	00061a80 	.word	0x00061a80

08002228 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 0310 	add.w	r3, r7, #16
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a29      	ldr	r2, [pc, #164]	@ (80022e8 <HAL_I2C_MspInit+0xc0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d14a      	bne.n	80022de <HAL_I2C_MspInit+0xb6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002248:	4b28      	ldr	r3, [pc, #160]	@ (80022ec <HAL_I2C_MspInit+0xc4>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	4a27      	ldr	r2, [pc, #156]	@ (80022ec <HAL_I2C_MspInit+0xc4>)
 800224e:	f043 0308 	orr.w	r3, r3, #8
 8002252:	6193      	str	r3, [r2, #24]
 8002254:	4b25      	ldr	r3, [pc, #148]	@ (80022ec <HAL_I2C_MspInit+0xc4>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8002260:	23c0      	movs	r3, #192	@ 0xc0
 8002262:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002264:	2312      	movs	r3, #18
 8002266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002268:	2303      	movs	r3, #3
 800226a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226c:	f107 0310 	add.w	r3, r7, #16
 8002270:	4619      	mov	r1, r3
 8002272:	481f      	ldr	r0, [pc, #124]	@ (80022f0 <HAL_I2C_MspInit+0xc8>)
 8002274:	f007 fb0c 	bl	8009890 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002278:	4b1c      	ldr	r3, [pc, #112]	@ (80022ec <HAL_I2C_MspInit+0xc4>)
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	4a1b      	ldr	r2, [pc, #108]	@ (80022ec <HAL_I2C_MspInit+0xc4>)
 800227e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002282:	61d3      	str	r3, [r2, #28]
 8002284:	4b19      	ldr	r3, [pc, #100]	@ (80022ec <HAL_I2C_MspInit+0xc4>)
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8002290:	4b18      	ldr	r3, [pc, #96]	@ (80022f4 <HAL_I2C_MspInit+0xcc>)
 8002292:	4a19      	ldr	r2, [pc, #100]	@ (80022f8 <HAL_I2C_MspInit+0xd0>)
 8002294:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002296:	4b17      	ldr	r3, [pc, #92]	@ (80022f4 <HAL_I2C_MspInit+0xcc>)
 8002298:	2210      	movs	r2, #16
 800229a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800229c:	4b15      	ldr	r3, [pc, #84]	@ (80022f4 <HAL_I2C_MspInit+0xcc>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022a2:	4b14      	ldr	r3, [pc, #80]	@ (80022f4 <HAL_I2C_MspInit+0xcc>)
 80022a4:	2280      	movs	r2, #128	@ 0x80
 80022a6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022a8:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <HAL_I2C_MspInit+0xcc>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022ae:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <HAL_I2C_MspInit+0xcc>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80022b4:	4b0f      	ldr	r3, [pc, #60]	@ (80022f4 <HAL_I2C_MspInit+0xcc>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80022ba:	4b0e      	ldr	r3, [pc, #56]	@ (80022f4 <HAL_I2C_MspInit+0xcc>)
 80022bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022c0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80022c2:	480c      	ldr	r0, [pc, #48]	@ (80022f4 <HAL_I2C_MspInit+0xcc>)
 80022c4:	f007 f984 	bl	80095d0 <HAL_DMA_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 80022ce:	f000 f8e8 	bl	80024a2 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a07      	ldr	r2, [pc, #28]	@ (80022f4 <HAL_I2C_MspInit+0xcc>)
 80022d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80022d8:	4a06      	ldr	r2, [pc, #24]	@ (80022f4 <HAL_I2C_MspInit+0xcc>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80022de:	bf00      	nop
 80022e0:	3720      	adds	r7, #32
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40005400 	.word	0x40005400
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40010c00 	.word	0x40010c00
 80022f4:	200006fc 	.word	0x200006fc
 80022f8:	4002006c 	.word	0x4002006c

080022fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002300:	f006 ffd2 	bl	80092a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002304:	f000 f888 	bl	8002418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002308:	f7ff fee4 	bl	80020d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800230c:	f7fe fa60 	bl	80007d0 <MX_DMA_Init>
  MX_I2C1_Init();
 8002310:	f7ff ff5c 	bl	80021cc <MX_I2C1_Init>
  MX_TIM3_Init();
 8002314:	f006 fcd6 	bl	8008cc4 <MX_TIM3_Init>
  MX_SPI2_Init();
 8002318:	f006 fb22 	bl	8008960 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  // W25Q64_Init(); // 初始化W25Q64
  OLED_Init(); // 初始化OLED
 800231c:	f000 faa4 	bl	8002868 <OLED_Init>
  OLED_InitBuffer(); // 初始化双缓冲
 8002320:	f000 f8c6 	bl	80024b0 <OLED_InitBuffer>
  OLED_ClearBuffer(); // 清空缓冲区
 8002324:	f000 f8f8 	bl	8002518 <OLED_ClearBuffer>
  
  OLED_EnableDiffMode(1);  // 启用差分更新
 8002328:	2001      	movs	r0, #1
 800232a:	f004 fecd 	bl	80070c8 <OLED_EnableDiffMode>
  OLED_EnableFastUpdate(1); // 启用快速更新
 800232e:	2001      	movs	r0, #1
 8002330:	f004 fee8 	bl	8007104 <OLED_EnableFastUpdate>
  OLED_InitCube3D(&CUBE, 13.5f, 150, 10); //中心(113,10)
 8002334:	230a      	movs	r3, #10
 8002336:	2296      	movs	r2, #150	@ 0x96
 8002338:	492a      	ldr	r1, [pc, #168]	@ (80023e4 <main+0xe8>)
 800233a:	482b      	ldr	r0, [pc, #172]	@ (80023e8 <main+0xec>)
 800233c:	f7fe fae2 	bl	8000904 <OLED_InitCube3D>


  // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // 启动PWM
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1); // 启动编码器
 8002340:	2100      	movs	r1, #0
 8002342:	482a      	ldr	r0, [pc, #168]	@ (80023ec <main+0xf0>)
 8002344:	f009 fb27 	bl	800b996 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2); // 启动编码器
 8002348:	2104      	movs	r1, #4
 800234a:	4828      	ldr	r0, [pc, #160]	@ (80023ec <main+0xf0>)
 800234c:	f009 fb23 	bl	800b996 <HAL_TIM_Encoder_Start>

  OLED_InitAnimationManager(&g_AnimationManager); // 初始化动画管理器
 8002350:	4827      	ldr	r0, [pc, #156]	@ (80023f0 <main+0xf4>)
 8002352:	f005 feb3 	bl	80080bc <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Menu_AnimationManager); // 初始化菜单动画管理器
 8002356:	4827      	ldr	r0, [pc, #156]	@ (80023f4 <main+0xf8>)
 8002358:	f005 feb0 	bl	80080bc <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Games_AnimationManager); // 初始化游戏动画管理器
 800235c:	4826      	ldr	r0, [pc, #152]	@ (80023f8 <main+0xfc>)
 800235e:	f005 fead 	bl	80080bc <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Tools_AnimationManager); // 初始化工具动画管理器
 8002362:	4826      	ldr	r0, [pc, #152]	@ (80023fc <main+0x100>)
 8002364:	f005 feaa 	bl	80080bc <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Settings_AnimationManager); // 初始化设置动画管理器
 8002368:	4825      	ldr	r0, [pc, #148]	@ (8002400 <main+0x104>)
 800236a:	f005 fea7 	bl	80080bc <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&About_AnimationManager); // 初始化关于动画管理器
 800236e:	4825      	ldr	r0, [pc, #148]	@ (8002404 <main+0x108>)
 8002370:	f005 fea4 	bl	80080bc <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Status_AnimationManager); // 初始化状态动画管理器
 8002374:	4824      	ldr	r0, [pc, #144]	@ (8002408 <main+0x10c>)
 8002376:	f005 fea1 	bl	80080bc <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&g_Title_AnimationManager); // 初始化标题动画管理器
 800237a:	4824      	ldr	r0, [pc, #144]	@ (800240c <main+0x110>)
 800237c:	f005 fe9e 	bl	80080bc <OLED_InitAnimationManager>
  __HAL_TIM_SET_COUNTER(&htim3, 32767);
 8002380:	4b1a      	ldr	r3, [pc, #104]	@ (80023ec <main+0xf0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002388:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {    
    #pragma region OLED_UI_SETTINGS // UI设置
    OLED_ClearBuffer();
 800238a:	f000 f8c5 	bl	8002518 <OLED_ClearBuffer>
    System_UI_Loop(); // UI循环
 800238e:	f000 fd95 	bl	8002ebc <System_UI_Loop>
    if (isShowFPS)
 8002392:	4b1f      	ldr	r3, [pc, #124]	@ (8002410 <main+0x114>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <main+0xa6>
      OLED_OptimizedDisplayFPS(80, 56); // 显示帧率
 800239a:	2138      	movs	r1, #56	@ 0x38
 800239c:	2050      	movs	r0, #80	@ 0x50
 800239e:	f004 ff5b 	bl	8007258 <OLED_OptimizedDisplayFPS>
    count = __HAL_TIM_GET_COUNTER(&htim3); // 获取编码器计数值 1圈40
 80023a2:	4b12      	ldr	r3, [pc, #72]	@ (80023ec <main+0xf0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002414 <main+0x118>)
 80023ac:	801a      	strh	r2, [r3, #0]
    OLED_UpdateAnimationManager(&Menu_AnimationManager); // 更新菜单动画管理器
 80023ae:	4811      	ldr	r0, [pc, #68]	@ (80023f4 <main+0xf8>)
 80023b0:	f005 ff36 	bl	8008220 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_AnimationManager); // 更新动画管理器
 80023b4:	480e      	ldr	r0, [pc, #56]	@ (80023f0 <main+0xf4>)
 80023b6:	f005 ff33 	bl	8008220 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Games_AnimationManager); // 更新游戏动画管理器
 80023ba:	480f      	ldr	r0, [pc, #60]	@ (80023f8 <main+0xfc>)
 80023bc:	f005 ff30 	bl	8008220 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Tools_AnimationManager); // 更新工具动画管理器
 80023c0:	480e      	ldr	r0, [pc, #56]	@ (80023fc <main+0x100>)
 80023c2:	f005 ff2d 	bl	8008220 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Settings_AnimationManager); // 更新设置动画管理器
 80023c6:	480e      	ldr	r0, [pc, #56]	@ (8002400 <main+0x104>)
 80023c8:	f005 ff2a 	bl	8008220 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&About_AnimationManager); // 更新关于动画管理器
 80023cc:	480d      	ldr	r0, [pc, #52]	@ (8002404 <main+0x108>)
 80023ce:	f005 ff27 	bl	8008220 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Status_AnimationManager); // 更新状态动画管理器
 80023d2:	480d      	ldr	r0, [pc, #52]	@ (8002408 <main+0x10c>)
 80023d4:	f005 ff24 	bl	8008220 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_Title_AnimationManager); // 更新标题动画管理器
 80023d8:	480c      	ldr	r0, [pc, #48]	@ (800240c <main+0x110>)
 80023da:	f005 ff21 	bl	8008220 <OLED_UpdateAnimationManager>
    OLED_SmartUpdate(); // 智能更新显示
 80023de:	f004 fea1 	bl	8007124 <OLED_SmartUpdate>
    OLED_ClearBuffer();
 80023e2:	e7d2      	b.n	800238a <main+0x8e>
 80023e4:	41580000 	.word	0x41580000
 80023e8:	20000f58 	.word	0x20000f58
 80023ec:	20004448 	.word	0x20004448
 80023f0:	20003df8 	.word	0x20003df8
 80023f4:	2000144c 	.word	0x2000144c
 80023f8:	20001a40 	.word	0x20001a40
 80023fc:	20002034 	.word	0x20002034
 8002400:	20002628 	.word	0x20002628
 8002404:	20002c1c 	.word	0x20002c1c
 8002408:	20003210 	.word	0x20003210
 800240c:	20003804 	.word	0x20003804
 8002410:	20001038 	.word	0x20001038
 8002414:	20000740 	.word	0x20000740

08002418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b090      	sub	sp, #64	@ 0x40
 800241c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800241e:	f107 0318 	add.w	r3, r7, #24
 8002422:	2228      	movs	r2, #40	@ 0x28
 8002424:	2100      	movs	r1, #0
 8002426:	4618      	mov	r0, r3
 8002428:	f009 fd99 	bl	800bf5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800242c:	1d3b      	adds	r3, r7, #4
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	605a      	str	r2, [r3, #4]
 8002434:	609a      	str	r2, [r3, #8]
 8002436:	60da      	str	r2, [r3, #12]
 8002438:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800243a:	2301      	movs	r3, #1
 800243c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800243e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002442:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002444:	2300      	movs	r3, #0
 8002446:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002448:	2301      	movs	r3, #1
 800244a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800244c:	2302      	movs	r3, #2
 800244e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002450:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002454:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002456:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800245a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800245c:	f107 0318 	add.w	r3, r7, #24
 8002460:	4618      	mov	r0, r3
 8002462:	f008 f865 	bl	800a530 <HAL_RCC_OscConfig>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800246c:	f000 f819 	bl	80024a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002470:	230f      	movs	r3, #15
 8002472:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002474:	2302      	movs	r3, #2
 8002476:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002478:	2300      	movs	r3, #0
 800247a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800247c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002480:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002486:	1d3b      	adds	r3, r7, #4
 8002488:	2102      	movs	r1, #2
 800248a:	4618      	mov	r0, r3
 800248c:	f008 fad2 	bl	800aa34 <HAL_RCC_ClockConfig>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002496:	f000 f804 	bl	80024a2 <Error_Handler>
  }
}
 800249a:	bf00      	nop
 800249c:	3740      	adds	r7, #64	@ 0x40
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024a6:	b672      	cpsid	i
}
 80024a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024aa:	bf00      	nop
 80024ac:	e7fd      	b.n	80024aa <Error_Handler+0x8>
	...

080024b0 <OLED_InitBuffer>:
        0x22, 0x00, 0x07  // 页地址范围: 0-7
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 80024b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024ba:	2100      	movs	r1, #0
 80024bc:	4811      	ldr	r0, [pc, #68]	@ (8002504 <OLED_InitBuffer+0x54>)
 80024be:	f009 fd4e 	bl	800bf5e <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 80024c2:	f240 4201 	movw	r2, #1025	@ 0x401
 80024c6:	2100      	movs	r1, #0
 80024c8:	480f      	ldr	r0, [pc, #60]	@ (8002508 <OLED_InitBuffer+0x58>)
 80024ca:	f009 fd48 	bl	800bf5e <memset>

    // 初始化第一个字节为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 80024ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002508 <OLED_InitBuffer+0x58>)
 80024d0:	2240      	movs	r2, #64	@ 0x40
 80024d2:	701a      	strb	r2, [r3, #0]

    // 初始化状态变量
    oled_update_flag = OLED_READY;
 80024d4:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <OLED_InitBuffer+0x5c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
    oled_dma_busy = OLED_READY;
 80024da:	4b0d      	ldr	r3, [pc, #52]	@ (8002510 <OLED_InitBuffer+0x60>)
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 80024e0:	2300      	movs	r3, #0
 80024e2:	71fb      	strb	r3, [r7, #7]
 80024e4:	e006      	b.n	80024f4 <OLED_InitBuffer+0x44>
    {
        oled_dirty_pages[i] = 1;
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002514 <OLED_InitBuffer+0x64>)
 80024ea:	2101      	movs	r1, #1
 80024ec:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	3301      	adds	r3, #1
 80024f2:	71fb      	strb	r3, [r7, #7]
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	2b07      	cmp	r3, #7
 80024f8:	d9f5      	bls.n	80024e6 <OLED_InitBuffer+0x36>
    }
}
 80024fa:	bf00      	nop
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000754 	.word	0x20000754
 8002508:	20000b54 	.word	0x20000b54
 800250c:	20000748 	.word	0x20000748
 8002510:	20000749 	.word	0x20000749
 8002514:	2000074c 	.word	0x2000074c

08002518 <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 800251e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002522:	2100      	movs	r1, #0
 8002524:	480a      	ldr	r0, [pc, #40]	@ (8002550 <OLED_ClearBuffer+0x38>)
 8002526:	f009 fd1a 	bl	800bf5e <memset>

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 800252a:	2300      	movs	r3, #0
 800252c:	71fb      	strb	r3, [r7, #7]
 800252e:	e006      	b.n	800253e <OLED_ClearBuffer+0x26>
    {
        oled_dirty_pages[i] = 1;
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	4a08      	ldr	r2, [pc, #32]	@ (8002554 <OLED_ClearBuffer+0x3c>)
 8002534:	2101      	movs	r1, #1
 8002536:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	3301      	adds	r3, #1
 800253c:	71fb      	strb	r3, [r7, #7]
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	2b07      	cmp	r3, #7
 8002542:	d9f5      	bls.n	8002530 <OLED_ClearBuffer+0x18>
    }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000754 	.word	0x20000754
 8002554:	2000074c 	.word	0x2000074c

08002558 <OLED_IsBusy>:

uint8_t OLED_IsBusy(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
    // 如果标记为忙，检查是否已经过了足够时间
    if (oled_update_flag)
 800255e:	4b0f      	ldr	r3, [pc, #60]	@ (800259c <OLED_IsBusy+0x44>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d007      	beq.n	8002578 <OLED_IsBusy+0x20>
    {
        // SSD1315/SSD1306 典型帧率约为60Hz，每帧约16.7ms
        // 可以根据需要调整刷新率，减小此值可以提高帧率
        uint32_t current_time = HAL_GetTick();
 8002568:	f006 fef6 	bl	8009358 <HAL_GetTick>
 800256c:	6078      	str	r0, [r7, #4]
        if (current_time - oled_last_update_time >= 0)
 800256e:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <OLED_IsBusy+0x48>)
 8002570:	681b      	ldr	r3, [r3, #0]
        {
            oled_update_flag = OLED_READY; // 已经过了足够时间，不再忙
 8002572:	4b0a      	ldr	r3, [pc, #40]	@ (800259c <OLED_IsBusy+0x44>)
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
        }
    }

    // 如果DMA传输正在进行，也视为忙
    return (oled_update_flag || oled_dma_busy);
 8002578:	4b08      	ldr	r3, [pc, #32]	@ (800259c <OLED_IsBusy+0x44>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d104      	bne.n	800258c <OLED_IsBusy+0x34>
 8002582:	4b08      	ldr	r3, [pc, #32]	@ (80025a4 <OLED_IsBusy+0x4c>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <OLED_IsBusy+0x38>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <OLED_IsBusy+0x3a>
 8002590:	2300      	movs	r3, #0
 8002592:	b2db      	uxtb	r3, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000748 	.word	0x20000748
 80025a0:	20000744 	.word	0x20000744
 80025a4:	20000749 	.word	0x20000749

080025a8 <OLED_UpdateDisplayVSync>:

void OLED_UpdateDisplayVSync(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af02      	add	r7, sp, #8
    // 等待上一次更新完成
    while (OLED_IsBusy())
 80025ae:	bf00      	nop
 80025b0:	f7ff ffd2 	bl	8002558 <OLED_IsBusy>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1fa      	bne.n	80025b0 <OLED_UpdateDisplayVSync+0x8>
    {
        // 可以加入短暂延时或者让出CPU，但通常不会停留很久
    }

    oled_update_flag = OLED_BUSY;
 80025ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002638 <OLED_UpdateDisplayVSync+0x90>)
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 80025c0:	f006 feca 	bl	8009358 <HAL_GetTick>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4a1d      	ldr	r2, [pc, #116]	@ (800263c <OLED_UpdateDisplayVSync+0x94>)
 80025c8:	6013      	str	r3, [r2, #0]

    OLED_FrontBuffer[0] = 0x40;                                             // 数据控制字节：Co=0, D/C#=1 (数据)
 80025ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002640 <OLED_UpdateDisplayVSync+0x98>)
 80025cc:	2240      	movs	r2, #64	@ 0x40
 80025ce:	701a      	strb	r2, [r3, #0]
    memcpy(OLED_FrontBuffer + 1, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES); // 复制当前缓冲区到前缓冲区
 80025d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002644 <OLED_UpdateDisplayVSync+0x9c>)
 80025d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002648 <OLED_UpdateDisplayVSync+0xa0>)
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025dc:	461a      	mov	r2, r3
 80025de:	f009 fd4c 	bl	800c07a <memcpy>

    // 一次性发送所有命令
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 80025e2:	2300      	movs	r3, #0
 80025e4:	71fb      	strb	r3, [r7, #7]
 80025e6:	e008      	b.n	80025fa <OLED_UpdateDisplayVSync+0x52>
    {
        OLED_SendCommand(cmds[i]);
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	4a18      	ldr	r2, [pc, #96]	@ (800264c <OLED_UpdateDisplayVSync+0xa4>)
 80025ec:	5cd3      	ldrb	r3, [r2, r3]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f920 	bl	8002834 <OLED_SendCommand>
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	3301      	adds	r3, #1
 80025f8:	71fb      	strb	r3, [r7, #7]
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	2b07      	cmp	r3, #7
 80025fe:	d9f3      	bls.n	80025e8 <OLED_UpdateDisplayVSync+0x40>
    }


    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, OLED_WIDTH * OLED_PAGES + 1, HAL_MAX_DELAY);
 8002600:	f04f 33ff 	mov.w	r3, #4294967295
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	f240 4301 	movw	r3, #1025	@ 0x401
 800260a:	4a0d      	ldr	r2, [pc, #52]	@ (8002640 <OLED_UpdateDisplayVSync+0x98>)
 800260c:	2178      	movs	r1, #120	@ 0x78
 800260e:	4810      	ldr	r0, [pc, #64]	@ (8002650 <OLED_UpdateDisplayVSync+0xa8>)
 8002610:	f007 fc36 	bl	8009e80 <HAL_I2C_Master_Transmit>

    // 重置所有脏页标记
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8002614:	2300      	movs	r3, #0
 8002616:	71bb      	strb	r3, [r7, #6]
 8002618:	e006      	b.n	8002628 <OLED_UpdateDisplayVSync+0x80>
    {
        oled_dirty_pages[i] = 0;
 800261a:	79bb      	ldrb	r3, [r7, #6]
 800261c:	4a0d      	ldr	r2, [pc, #52]	@ (8002654 <OLED_UpdateDisplayVSync+0xac>)
 800261e:	2100      	movs	r1, #0
 8002620:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8002622:	79bb      	ldrb	r3, [r7, #6]
 8002624:	3301      	adds	r3, #1
 8002626:	71bb      	strb	r3, [r7, #6]
 8002628:	79bb      	ldrb	r3, [r7, #6]
 800262a:	2b07      	cmp	r3, #7
 800262c:	d9f5      	bls.n	800261a <OLED_UpdateDisplayVSync+0x72>
    }
}
 800262e:	bf00      	nop
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000748 	.word	0x20000748
 800263c:	20000744 	.word	0x20000744
 8002640:	20000b54 	.word	0x20000b54
 8002644:	20000b55 	.word	0x20000b55
 8002648:	20000754 	.word	0x20000754
 800264c:	0800eb5c 	.word	0x0800eb5c
 8002650:	200006a8 	.word	0x200006a8
 8002654:	2000074c 	.word	0x2000074c

08002658 <OLED_UpdateDisplayPartial>:
    }
}

// 局部更新显示函数
void OLED_UpdateDisplayPartial(uint8_t startPage, uint8_t endPage)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af02      	add	r7, sp, #8
 800265e:	4603      	mov	r3, r0
 8002660:	460a      	mov	r2, r1
 8002662:	71fb      	strb	r3, [r7, #7]
 8002664:	4613      	mov	r3, r2
 8002666:	71bb      	strb	r3, [r7, #6]
    // 边界检查
    if (startPage >= OLED_PAGES || endPage >= OLED_PAGES || startPage > endPage)
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	2b07      	cmp	r3, #7
 800266c:	d85c      	bhi.n	8002728 <OLED_UpdateDisplayPartial+0xd0>
 800266e:	79bb      	ldrb	r3, [r7, #6]
 8002670:	2b07      	cmp	r3, #7
 8002672:	d859      	bhi.n	8002728 <OLED_UpdateDisplayPartial+0xd0>
 8002674:	79fa      	ldrb	r2, [r7, #7]
 8002676:	79bb      	ldrb	r3, [r7, #6]
 8002678:	429a      	cmp	r2, r3
 800267a:	d855      	bhi.n	8002728 <OLED_UpdateDisplayPartial+0xd0>
        return;

    // 等待上一次更新完成
    while (OLED_IsBusy())
 800267c:	bf00      	nop
 800267e:	f7ff ff6b 	bl	8002558 <OLED_IsBusy>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1fa      	bne.n	800267e <OLED_UpdateDisplayPartial+0x26>
    {
        // 可以加入短暂延时或者让出CPU
    }

    oled_update_flag = OLED_BUSY;
 8002688:	4b29      	ldr	r3, [pc, #164]	@ (8002730 <OLED_UpdateDisplayPartial+0xd8>)
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 800268e:	f006 fe63 	bl	8009358 <HAL_GetTick>
 8002692:	4603      	mov	r3, r0
 8002694:	4a27      	ldr	r2, [pc, #156]	@ (8002734 <OLED_UpdateDisplayPartial+0xdc>)
 8002696:	6013      	str	r3, [r2, #0]

    // 设置页地址范围
    OLED_SendCommand(0x22);      // 页地址设置命令
 8002698:	2022      	movs	r0, #34	@ 0x22
 800269a:	f000 f8cb 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(startPage); // 起始页
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 f8c7 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(endPage);   // 结束页
 80026a6:	79bb      	ldrb	r3, [r7, #6]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 f8c3 	bl	8002834 <OLED_SendCommand>

    // 设置列地址范围（总是更新整行）
    OLED_SendCommand(0x21); // 列地址设置命令
 80026ae:	2021      	movs	r0, #33	@ 0x21
 80026b0:	f000 f8c0 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 起始列
 80026b4:	2000      	movs	r0, #0
 80026b6:	f000 f8bd 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x7F); // 结束列 (127)
 80026ba:	207f      	movs	r0, #127	@ 0x7f
 80026bc:	f000 f8ba 	bl	8002834 <OLED_SendCommand>

    // 计算需要传输的数据长度
    uint16_t dataLen = OLED_WIDTH * (endPage - startPage + 1);
 80026c0:	79ba      	ldrb	r2, [r7, #6]
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	3301      	adds	r3, #1
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	01db      	lsls	r3, r3, #7
 80026cc:	81bb      	strh	r3, [r7, #12]

    // 前缓冲区的第一个字节设为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 80026ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002738 <OLED_UpdateDisplayPartial+0xe0>)
 80026d0:	2240      	movs	r2, #64	@ 0x40
 80026d2:	701a      	strb	r2, [r3, #0]

    // 只复制需要更新的页
    for (uint8_t page = startPage; page <= endPage; page++)
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	73fb      	strb	r3, [r7, #15]
 80026d8:	e016      	b.n	8002708 <OLED_UpdateDisplayPartial+0xb0>
    {
        memcpy(
            OLED_FrontBuffer + 1 + (page - startPage) * OLED_WIDTH,
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	01db      	lsls	r3, r3, #7
 80026e2:	3301      	adds	r3, #1
        memcpy(
 80026e4:	4a14      	ldr	r2, [pc, #80]	@ (8002738 <OLED_UpdateDisplayPartial+0xe0>)
 80026e6:	1898      	adds	r0, r3, r2
            OLED_BackBuffer + page * OLED_WIDTH,
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	01db      	lsls	r3, r3, #7
 80026ec:	461a      	mov	r2, r3
        memcpy(
 80026ee:	4b13      	ldr	r3, [pc, #76]	@ (800273c <OLED_UpdateDisplayPartial+0xe4>)
 80026f0:	4413      	add	r3, r2
 80026f2:	2280      	movs	r2, #128	@ 0x80
 80026f4:	4619      	mov	r1, r3
 80026f6:	f009 fcc0 	bl	800c07a <memcpy>
            OLED_WIDTH);
        oled_dirty_pages[page] = 0; // 重置脏页标记
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	4a10      	ldr	r2, [pc, #64]	@ (8002740 <OLED_UpdateDisplayPartial+0xe8>)
 80026fe:	2100      	movs	r1, #0
 8002700:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = startPage; page <= endPage; page++)
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	3301      	adds	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	79bb      	ldrb	r3, [r7, #6]
 800270c:	429a      	cmp	r2, r3
 800270e:	d9e4      	bls.n	80026da <OLED_UpdateDisplayPartial+0x82>
    }

    // 发送数据
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, dataLen + 1, HAL_MAX_DELAY);
 8002710:	89bb      	ldrh	r3, [r7, #12]
 8002712:	3301      	adds	r3, #1
 8002714:	b29b      	uxth	r3, r3
 8002716:	f04f 32ff 	mov.w	r2, #4294967295
 800271a:	9200      	str	r2, [sp, #0]
 800271c:	4a06      	ldr	r2, [pc, #24]	@ (8002738 <OLED_UpdateDisplayPartial+0xe0>)
 800271e:	2178      	movs	r1, #120	@ 0x78
 8002720:	4808      	ldr	r0, [pc, #32]	@ (8002744 <OLED_UpdateDisplayPartial+0xec>)
 8002722:	f007 fbad 	bl	8009e80 <HAL_I2C_Master_Transmit>
 8002726:	e000      	b.n	800272a <OLED_UpdateDisplayPartial+0xd2>
        return;
 8002728:	bf00      	nop
}
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000748 	.word	0x20000748
 8002734:	20000744 	.word	0x20000744
 8002738:	20000b54 	.word	0x20000b54
 800273c:	20000754 	.word	0x20000754
 8002740:	2000074c 	.word	0x2000074c
 8002744:	200006a8 	.word	0x200006a8

08002748 <OLED_WritePixel>:

void OLED_WritePixel(int16_t x, int16_t y, uint8_t color)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	80fb      	strh	r3, [r7, #6]
 8002752:	460b      	mov	r3, r1
 8002754:	80bb      	strh	r3, [r7, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	70fb      	strb	r3, [r7, #3]
    // 边界检查
    if (x >= OLED_WIDTH || x < 0 || y >= OLED_HEIGHT || y < 0)
 800275a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800275e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002760:	dc5e      	bgt.n	8002820 <OLED_WritePixel+0xd8>
 8002762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002766:	2b00      	cmp	r3, #0
 8002768:	db5a      	blt.n	8002820 <OLED_WritePixel+0xd8>
 800276a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800276e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002770:	dc56      	bgt.n	8002820 <OLED_WritePixel+0xd8>
 8002772:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	db52      	blt.n	8002820 <OLED_WritePixel+0xd8>
        return;

    // 计算像素所在的字节位置
    uint16_t byte_index = x + (y / 8) * OLED_WIDTH;
 800277a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	da00      	bge.n	8002784 <OLED_WritePixel+0x3c>
 8002782:	3307      	adds	r3, #7
 8002784:	10db      	asrs	r3, r3, #3
 8002786:	b21b      	sxth	r3, r3
 8002788:	b29b      	uxth	r3, r3
 800278a:	01db      	lsls	r3, r3, #7
 800278c:	b29a      	uxth	r2, r3
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	4413      	add	r3, r2
 8002792:	81fb      	strh	r3, [r7, #14]
    uint8_t bit_position = y % 8;
 8002794:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002798:	425a      	negs	r2, r3
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	f002 0207 	and.w	r2, r2, #7
 80027a2:	bf58      	it	pl
 80027a4:	4253      	negpl	r3, r2
 80027a6:	b21b      	sxth	r3, r3
 80027a8:	737b      	strb	r3, [r7, #13]
    uint8_t page = y / 8; // 计算所在页
 80027aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	da00      	bge.n	80027b4 <OLED_WritePixel+0x6c>
 80027b2:	3307      	adds	r3, #7
 80027b4:	10db      	asrs	r3, r3, #3
 80027b6:	b21b      	sxth	r3, r3
 80027b8:	733b      	strb	r3, [r7, #12]

    // 记录当前像素值
    uint8_t old_value = OLED_BackBuffer[byte_index];
 80027ba:	89fb      	ldrh	r3, [r7, #14]
 80027bc:	4a1b      	ldr	r2, [pc, #108]	@ (800282c <OLED_WritePixel+0xe4>)
 80027be:	5cd3      	ldrb	r3, [r2, r3]
 80027c0:	72fb      	strb	r3, [r7, #11]

    if (color) // 如果需要点亮像素
 80027c2:	78fb      	ldrb	r3, [r7, #3]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00f      	beq.n	80027e8 <OLED_WritePixel+0xa0>
        OLED_BackBuffer[byte_index] |= (1 << bit_position);
 80027c8:	89fb      	ldrh	r3, [r7, #14]
 80027ca:	4a18      	ldr	r2, [pc, #96]	@ (800282c <OLED_WritePixel+0xe4>)
 80027cc:	5cd3      	ldrb	r3, [r2, r3]
 80027ce:	b25a      	sxtb	r2, r3
 80027d0:	7b7b      	ldrb	r3, [r7, #13]
 80027d2:	2101      	movs	r1, #1
 80027d4:	fa01 f303 	lsl.w	r3, r1, r3
 80027d8:	b25b      	sxtb	r3, r3
 80027da:	4313      	orrs	r3, r2
 80027dc:	b25a      	sxtb	r2, r3
 80027de:	89fb      	ldrh	r3, [r7, #14]
 80027e0:	b2d1      	uxtb	r1, r2
 80027e2:	4a12      	ldr	r2, [pc, #72]	@ (800282c <OLED_WritePixel+0xe4>)
 80027e4:	54d1      	strb	r1, [r2, r3]
 80027e6:	e010      	b.n	800280a <OLED_WritePixel+0xc2>
    else // 如果需要熄灭像素
        OLED_BackBuffer[byte_index] &= ~(1 << bit_position);
 80027e8:	89fb      	ldrh	r3, [r7, #14]
 80027ea:	4a10      	ldr	r2, [pc, #64]	@ (800282c <OLED_WritePixel+0xe4>)
 80027ec:	5cd3      	ldrb	r3, [r2, r3]
 80027ee:	b25a      	sxtb	r2, r3
 80027f0:	7b7b      	ldrb	r3, [r7, #13]
 80027f2:	2101      	movs	r1, #1
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	b25b      	sxtb	r3, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	b25b      	sxtb	r3, r3
 80027fe:	4013      	ands	r3, r2
 8002800:	b25a      	sxtb	r2, r3
 8002802:	89fb      	ldrh	r3, [r7, #14]
 8002804:	b2d1      	uxtb	r1, r2
 8002806:	4a09      	ldr	r2, [pc, #36]	@ (800282c <OLED_WritePixel+0xe4>)
 8002808:	54d1      	strb	r1, [r2, r3]

    // 如果像素值发生变化，标记该页为脏
    if (old_value != OLED_BackBuffer[byte_index])
 800280a:	89fb      	ldrh	r3, [r7, #14]
 800280c:	4a07      	ldr	r2, [pc, #28]	@ (800282c <OLED_WritePixel+0xe4>)
 800280e:	5cd3      	ldrb	r3, [r2, r3]
 8002810:	7afa      	ldrb	r2, [r7, #11]
 8002812:	429a      	cmp	r2, r3
 8002814:	d005      	beq.n	8002822 <OLED_WritePixel+0xda>
    {
        oled_dirty_pages[page] = 1;
 8002816:	7b3b      	ldrb	r3, [r7, #12]
 8002818:	4a05      	ldr	r2, [pc, #20]	@ (8002830 <OLED_WritePixel+0xe8>)
 800281a:	2101      	movs	r1, #1
 800281c:	54d1      	strb	r1, [r2, r3]
 800281e:	e000      	b.n	8002822 <OLED_WritePixel+0xda>
        return;
 8002820:	bf00      	nop
    }
}
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20000754 	.word	0x20000754
 8002830:	2000074c 	.word	0x2000074c

08002834 <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af02      	add	r7, sp, #8
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 800283e:	2300      	movs	r3, #0
 8002840:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8002846:	f107 020c 	add.w	r2, r7, #12
 800284a:	f04f 33ff 	mov.w	r3, #4294967295
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	2302      	movs	r3, #2
 8002852:	2178      	movs	r1, #120	@ 0x78
 8002854:	4803      	ldr	r0, [pc, #12]	@ (8002864 <OLED_SendCommand+0x30>)
 8002856:	f007 fb13 	bl	8009e80 <HAL_I2C_Master_Transmit>
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	200006a8 	.word	0x200006a8

08002868 <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 800286c:	2064      	movs	r0, #100	@ 0x64
 800286e:	f006 fd7d 	bl	800936c <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 8002872:	20ae      	movs	r0, #174	@ 0xae
 8002874:	f7ff ffde 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 8002878:	20d5      	movs	r0, #213	@ 0xd5
 800287a:	f7ff ffdb 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 800287e:	2080      	movs	r0, #128	@ 0x80
 8002880:	f7ff ffd8 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8002884:	20a8      	movs	r0, #168	@ 0xa8
 8002886:	f7ff ffd5 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 800288a:	203f      	movs	r0, #63	@ 0x3f
 800288c:	f7ff ffd2 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8002890:	20d3      	movs	r0, #211	@ 0xd3
 8002892:	f7ff ffcf 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 8002896:	2000      	movs	r0, #0
 8002898:	f7ff ffcc 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 800289c:	2040      	movs	r0, #64	@ 0x40
 800289e:	f7ff ffc9 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 80028a2:	208d      	movs	r0, #141	@ 0x8d
 80028a4:	f7ff ffc6 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 80028a8:	2014      	movs	r0, #20
 80028aa:	f7ff ffc3 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 80028ae:	2020      	movs	r0, #32
 80028b0:	f7ff ffc0 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 80028b4:	2000      	movs	r0, #0
 80028b6:	f7ff ffbd 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 80028ba:	20a1      	movs	r0, #161	@ 0xa1
 80028bc:	f7ff ffba 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 80028c0:	20c8      	movs	r0, #200	@ 0xc8
 80028c2:	f7ff ffb7 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 80028c6:	20da      	movs	r0, #218	@ 0xda
 80028c8:	f7ff ffb4 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 80028cc:	2012      	movs	r0, #18
 80028ce:	f7ff ffb1 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 80028d2:	2081      	movs	r0, #129	@ 0x81
 80028d4:	f7ff ffae 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 80028d8:	20cf      	movs	r0, #207	@ 0xcf
 80028da:	f7ff ffab 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 80028de:	20d9      	movs	r0, #217	@ 0xd9
 80028e0:	f7ff ffa8 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 80028e4:	20f1      	movs	r0, #241	@ 0xf1
 80028e6:	f7ff ffa5 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 80028ea:	20db      	movs	r0, #219	@ 0xdb
 80028ec:	f7ff ffa2 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 80028f0:	2030      	movs	r0, #48	@ 0x30
 80028f2:	f7ff ff9f 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 80028f6:	20a4      	movs	r0, #164	@ 0xa4
 80028f8:	f7ff ff9c 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 80028fc:	20a6      	movs	r0, #166	@ 0xa6
 80028fe:	f7ff ff99 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 8002902:	202e      	movs	r0, #46	@ 0x2e
 8002904:	f7ff ff96 	bl	8002834 <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 8002908:	f7ff fdd2 	bl	80024b0 <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 800290c:	f7ff fe04 	bl	8002518 <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 8002910:	20af      	movs	r0, #175	@ 0xaf
 8002912:	f7ff ff8f 	bl	8002834 <OLED_SendCommand>
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <OLED_InvertArea>:

// 区域反色功能 - 将指定矩形区域内的像素颜色反转 //! UPDATEDISPLAY REQUIRED
void OLED_InvertArea(int16_t x, int16_t y, uint8_t width, uint8_t height)
{
 800291c:	b490      	push	{r4, r7}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
 8002922:	4604      	mov	r4, r0
 8002924:	4608      	mov	r0, r1
 8002926:	4611      	mov	r1, r2
 8002928:	461a      	mov	r2, r3
 800292a:	4623      	mov	r3, r4
 800292c:	80fb      	strh	r3, [r7, #6]
 800292e:	4603      	mov	r3, r0
 8002930:	80bb      	strh	r3, [r7, #4]
 8002932:	460b      	mov	r3, r1
 8002934:	70fb      	strb	r3, [r7, #3]
 8002936:	4613      	mov	r3, r2
 8002938:	70bb      	strb	r3, [r7, #2]
    if (width == 0 || height == 0)
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 809d 	beq.w	8002a7c <OLED_InvertArea+0x160>
 8002942:	78bb      	ldrb	r3, [r7, #2]
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 8099 	beq.w	8002a7c <OLED_InvertArea+0x160>
        return;

    int16_t x_start_on_screen = x;
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	83fb      	strh	r3, [r7, #30]
    int16_t y_start_on_screen = y;
 800294e:	88bb      	ldrh	r3, [r7, #4]
 8002950:	83bb      	strh	r3, [r7, #28]
    int16_t x_end_on_screen = x + width - 1;
 8002952:	78fb      	ldrb	r3, [r7, #3]
 8002954:	b29a      	uxth	r2, r3
 8002956:	88fb      	ldrh	r3, [r7, #6]
 8002958:	4413      	add	r3, r2
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29b      	uxth	r3, r3
 8002960:	837b      	strh	r3, [r7, #26]
    int16_t y_end_on_screen = y + height - 1;
 8002962:	78bb      	ldrb	r3, [r7, #2]
 8002964:	b29a      	uxth	r2, r3
 8002966:	88bb      	ldrh	r3, [r7, #4]
 8002968:	4413      	add	r3, r2
 800296a:	b29b      	uxth	r3, r3
 800296c:	3b01      	subs	r3, #1
 800296e:	b29b      	uxth	r3, r3
 8002970:	833b      	strh	r3, [r7, #24]

    // Clip to screen boundaries
    if (x_start_on_screen < 0)
 8002972:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002976:	2b00      	cmp	r3, #0
 8002978:	da01      	bge.n	800297e <OLED_InvertArea+0x62>
        x_start_on_screen = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	83fb      	strh	r3, [r7, #30]
    if (y_start_on_screen < 0)
 800297e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002982:	2b00      	cmp	r3, #0
 8002984:	da01      	bge.n	800298a <OLED_InvertArea+0x6e>
        y_start_on_screen = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	83bb      	strh	r3, [r7, #28]
    if (x_end_on_screen >= OLED_WIDTH)
 800298a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800298e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002990:	dd01      	ble.n	8002996 <OLED_InvertArea+0x7a>
        x_end_on_screen = OLED_WIDTH - 1;
 8002992:	237f      	movs	r3, #127	@ 0x7f
 8002994:	837b      	strh	r3, [r7, #26]
    if (y_end_on_screen >= OLED_HEIGHT)
 8002996:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800299a:	2b3f      	cmp	r3, #63	@ 0x3f
 800299c:	dd01      	ble.n	80029a2 <OLED_InvertArea+0x86>
        y_end_on_screen = OLED_HEIGHT - 1;
 800299e:	233f      	movs	r3, #63	@ 0x3f
 80029a0:	833b      	strh	r3, [r7, #24]

    // If clipped area is invalid (e.g., entirely off-screen after clipping)
    if (x_start_on_screen > x_end_on_screen || y_start_on_screen > y_end_on_screen)
 80029a2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80029a6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	dc68      	bgt.n	8002a80 <OLED_InvertArea+0x164>
 80029ae:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80029b2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	dc62      	bgt.n	8002a80 <OLED_InvertArea+0x164>
        return;

    // 计算涉及的页范围
    uint8_t start_page = y_start_on_screen / 8;
 80029ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	da00      	bge.n	80029c4 <OLED_InvertArea+0xa8>
 80029c2:	3307      	adds	r3, #7
 80029c4:	10db      	asrs	r3, r3, #3
 80029c6:	b21b      	sxth	r3, r3
 80029c8:	747b      	strb	r3, [r7, #17]
    uint8_t end_page = y_end_on_screen / 8;
 80029ca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	da00      	bge.n	80029d4 <OLED_InvertArea+0xb8>
 80029d2:	3307      	adds	r3, #7
 80029d4:	10db      	asrs	r3, r3, #3
 80029d6:	b21b      	sxth	r3, r3
 80029d8:	743b      	strb	r3, [r7, #16]

    // 标记受影响的页为脏页
    extern volatile uint8_t oled_dirty_pages[];
    for (uint8_t page = start_page; page <= end_page; page++)
 80029da:	7c7b      	ldrb	r3, [r7, #17]
 80029dc:	75fb      	strb	r3, [r7, #23]
 80029de:	e006      	b.n	80029ee <OLED_InvertArea+0xd2>
    {
        oled_dirty_pages[page] = 1;
 80029e0:	7dfb      	ldrb	r3, [r7, #23]
 80029e2:	4a2a      	ldr	r2, [pc, #168]	@ (8002a8c <OLED_InvertArea+0x170>)
 80029e4:	2101      	movs	r1, #1
 80029e6:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = start_page; page <= end_page; page++)
 80029e8:	7dfb      	ldrb	r3, [r7, #23]
 80029ea:	3301      	adds	r3, #1
 80029ec:	75fb      	strb	r3, [r7, #23]
 80029ee:	7dfa      	ldrb	r2, [r7, #23]
 80029f0:	7c3b      	ldrb	r3, [r7, #16]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d9f4      	bls.n	80029e0 <OLED_InvertArea+0xc4>
    }

    // 优化的像素更新逻辑 - 按行处理以提高缓存命中率
    for (int16_t j = y_start_on_screen; j <= y_end_on_screen; j++)
 80029f6:	8bbb      	ldrh	r3, [r7, #28]
 80029f8:	82bb      	strh	r3, [r7, #20]
 80029fa:	e038      	b.n	8002a6e <OLED_InvertArea+0x152>
    {
        uint8_t page = (uint8_t)j / 8;
 80029fc:	8abb      	ldrh	r3, [r7, #20]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	08db      	lsrs	r3, r3, #3
 8002a02:	73fb      	strb	r3, [r7, #15]
        uint8_t bit_position = (uint8_t)j % 8;
 8002a04:	8abb      	ldrh	r3, [r7, #20]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	73bb      	strb	r3, [r7, #14]
        uint16_t byte_index_base = page * OLED_WIDTH;
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	01db      	lsls	r3, r3, #7
 8002a14:	81bb      	strh	r3, [r7, #12]

        // 处理当前行上的所有像素
        for (int16_t i = x_start_on_screen; i <= x_end_on_screen; i++)
 8002a16:	8bfb      	ldrh	r3, [r7, #30]
 8002a18:	827b      	strh	r3, [r7, #18]
 8002a1a:	e01c      	b.n	8002a56 <OLED_InvertArea+0x13a>
        {
            uint16_t byte_index = byte_index_base + i;
 8002a1c:	8a7a      	ldrh	r2, [r7, #18]
 8002a1e:	89bb      	ldrh	r3, [r7, #12]
 8002a20:	4413      	add	r3, r2
 8002a22:	817b      	strh	r3, [r7, #10]

            // 反转位
            if (byte_index < sizeof(OLED_BackBuffer))
 8002a24:	897b      	ldrh	r3, [r7, #10]
 8002a26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a2a:	d20e      	bcs.n	8002a4a <OLED_InvertArea+0x12e>
            {
                OLED_BackBuffer[byte_index] ^= (1 << bit_position);
 8002a2c:	897b      	ldrh	r3, [r7, #10]
 8002a2e:	4a18      	ldr	r2, [pc, #96]	@ (8002a90 <OLED_InvertArea+0x174>)
 8002a30:	5cd3      	ldrb	r3, [r2, r3]
 8002a32:	b25a      	sxtb	r2, r3
 8002a34:	7bbb      	ldrb	r3, [r7, #14]
 8002a36:	2101      	movs	r1, #1
 8002a38:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3c:	b25b      	sxtb	r3, r3
 8002a3e:	4053      	eors	r3, r2
 8002a40:	b25a      	sxtb	r2, r3
 8002a42:	897b      	ldrh	r3, [r7, #10]
 8002a44:	b2d1      	uxtb	r1, r2
 8002a46:	4a12      	ldr	r2, [pc, #72]	@ (8002a90 <OLED_InvertArea+0x174>)
 8002a48:	54d1      	strb	r1, [r2, r3]
        for (int16_t i = x_start_on_screen; i <= x_end_on_screen; i++)
 8002a4a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3301      	adds	r3, #1
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	827b      	strh	r3, [r7, #18]
 8002a56:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002a5a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	dddc      	ble.n	8002a1c <OLED_InvertArea+0x100>
    for (int16_t j = y_start_on_screen; j <= y_end_on_screen; j++)
 8002a62:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	3301      	adds	r3, #1
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	82bb      	strh	r3, [r7, #20]
 8002a6e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002a72:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	ddc0      	ble.n	80029fc <OLED_InvertArea+0xe0>
 8002a7a:	e002      	b.n	8002a82 <OLED_InvertArea+0x166>
        return;
 8002a7c:	bf00      	nop
 8002a7e:	e000      	b.n	8002a82 <OLED_InvertArea+0x166>
        return;
 8002a80:	bf00      	nop
            }
        }
    }
}
 8002a82:	3720      	adds	r7, #32
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc90      	pop	{r4, r7}
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	2000074c 	.word	0x2000074c
 8002a90:	20000754 	.word	0x20000754

08002a94 <OLED_DisplayChar>:
    OLED_SendCommand(0x00 + (x & 0x0F));        // 设置低4位列地址
    OLED_SendCommand(0x10 + ((x >> 4) & 0x0F)); // 设置高4位列地址
}

void OLED_DisplayChar(int16_t x, int16_t y, char ch) //! UPDATEDISPLAY REQUIRED
{
 8002a94:	b480      	push	{r7}
 8002a96:	b089      	sub	sp, #36	@ 0x24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	80fb      	strh	r3, [r7, #6]
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	80bb      	strh	r3, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	70fb      	strb	r3, [r7, #3]
    const uint8_t font_width = 6;
 8002aa6:	2306      	movs	r3, #6
 8002aa8:	773b      	strb	r3, [r7, #28]
    const uint8_t font_height = 8;
 8002aaa:	2308      	movs	r3, #8
 8002aac:	76fb      	strb	r3, [r7, #27]

    if (ch < 32)
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	2b1f      	cmp	r3, #31
 8002ab2:	f240 80a8 	bls.w	8002c06 <OLED_DisplayChar+0x172>
        return;

    uint8_t c = ch - 32;
 8002ab6:	78fb      	ldrb	r3, [r7, #3]
 8002ab8:	3b20      	subs	r3, #32
 8002aba:	76bb      	strb	r3, [r7, #26]

    uint8_t start_page = (y >= 0) ? (y / 8) : 0;
 8002abc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	db08      	blt.n	8002ad6 <OLED_DisplayChar+0x42>
 8002ac4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	da00      	bge.n	8002ace <OLED_DisplayChar+0x3a>
 8002acc:	3307      	adds	r3, #7
 8002ace:	10db      	asrs	r3, r3, #3
 8002ad0:	b21b      	sxth	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	e000      	b.n	8002ad8 <OLED_DisplayChar+0x44>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	767b      	strb	r3, [r7, #25]
    uint8_t end_page = ((y + font_height - 1) < OLED_HEIGHT) ? ((y + font_height - 1) / 8) : (OLED_HEIGHT / 8 - 1);
 8002ada:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002ade:	7efb      	ldrb	r3, [r7, #27]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	2b40      	cmp	r3, #64	@ 0x40
 8002ae4:	dc0a      	bgt.n	8002afc <OLED_DisplayChar+0x68>
 8002ae6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002aea:	7efb      	ldrb	r3, [r7, #27]
 8002aec:	4413      	add	r3, r2
 8002aee:	3b01      	subs	r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	da00      	bge.n	8002af6 <OLED_DisplayChar+0x62>
 8002af4:	3307      	adds	r3, #7
 8002af6:	10db      	asrs	r3, r3, #3
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	e000      	b.n	8002afe <OLED_DisplayChar+0x6a>
 8002afc:	2307      	movs	r3, #7
 8002afe:	763b      	strb	r3, [r7, #24]

    extern volatile uint8_t oled_dirty_pages[];
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 8002b00:	7e7b      	ldrb	r3, [r7, #25]
 8002b02:	77fb      	strb	r3, [r7, #31]
 8002b04:	e006      	b.n	8002b14 <OLED_DisplayChar+0x80>
    {
        oled_dirty_pages[page] = 1;
 8002b06:	7ffb      	ldrb	r3, [r7, #31]
 8002b08:	4a42      	ldr	r2, [pc, #264]	@ (8002c14 <OLED_DisplayChar+0x180>)
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 8002b0e:	7ffb      	ldrb	r3, [r7, #31]
 8002b10:	3301      	adds	r3, #1
 8002b12:	77fb      	strb	r3, [r7, #31]
 8002b14:	7ffa      	ldrb	r2, [r7, #31]
 8002b16:	7e3b      	ldrb	r3, [r7, #24]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d802      	bhi.n	8002b22 <OLED_DisplayChar+0x8e>
 8002b1c:	7ffb      	ldrb	r3, [r7, #31]
 8002b1e:	2b07      	cmp	r3, #7
 8002b20:	d9f1      	bls.n	8002b06 <OLED_DisplayChar+0x72>
    }
    // 按列渲染
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8002b22:	2300      	movs	r3, #0
 8002b24:	77bb      	strb	r3, [r7, #30]
 8002b26:	e069      	b.n	8002bfc <OLED_DisplayChar+0x168>
    {
        int16_t screen_x = x + char_col;
 8002b28:	7fbb      	ldrb	r3, [r7, #30]
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	4413      	add	r3, r2
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	82fb      	strh	r3, [r7, #22]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 8002b34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	db5b      	blt.n	8002bf4 <OLED_DisplayChar+0x160>
 8002b3c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b40:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b42:	dc57      	bgt.n	8002bf4 <OLED_DisplayChar+0x160>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 8002b44:	7ebb      	ldrb	r3, [r7, #26]
 8002b46:	7f3a      	ldrb	r2, [r7, #28]
 8002b48:	fb03 f202 	mul.w	r2, r3, r2
 8002b4c:	7fbb      	ldrb	r3, [r7, #30]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8002b54:	d259      	bcs.n	8002c0a <OLED_DisplayChar+0x176>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 8002b56:	7ebb      	ldrb	r3, [r7, #26]
 8002b58:	7f3a      	ldrb	r2, [r7, #28]
 8002b5a:	fb03 f202 	mul.w	r2, r3, r2
 8002b5e:	7fbb      	ldrb	r3, [r7, #30]
 8002b60:	4413      	add	r3, r2
 8002b62:	4a2d      	ldr	r2, [pc, #180]	@ (8002c18 <OLED_DisplayChar+0x184>)
 8002b64:	5cd3      	ldrb	r3, [r2, r3]
 8002b66:	757b      	strb	r3, [r7, #21]

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8002b68:	2300      	movs	r3, #0
 8002b6a:	777b      	strb	r3, [r7, #29]
 8002b6c:	e03d      	b.n	8002bea <OLED_DisplayChar+0x156>
        {
            int16_t screen_y = y + char_row_bit;
 8002b6e:	7f7b      	ldrb	r3, [r7, #29]
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	88bb      	ldrh	r3, [r7, #4]
 8002b74:	4413      	add	r3, r2
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	827b      	strh	r3, [r7, #18]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 8002b7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	db2f      	blt.n	8002be2 <OLED_DisplayChar+0x14e>
 8002b82:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b86:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b88:	dc2b      	bgt.n	8002be2 <OLED_DisplayChar+0x14e>
                continue;

            if ((font_data_col >> char_row_bit) & 0x01)
 8002b8a:	7d7a      	ldrb	r2, [r7, #21]
 8002b8c:	7f7b      	ldrb	r3, [r7, #29]
 8002b8e:	fa42 f303 	asr.w	r3, r2, r3
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d024      	beq.n	8002be4 <OLED_DisplayChar+0x150>
            {
                uint8_t page = (uint8_t)screen_y / 8;
 8002b9a:	8a7b      	ldrh	r3, [r7, #18]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	08db      	lsrs	r3, r3, #3
 8002ba0:	747b      	strb	r3, [r7, #17]
                uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 8002ba2:	8a7b      	ldrh	r3, [r7, #18]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	743b      	strb	r3, [r7, #16]
                uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 8002bac:	7c7b      	ldrb	r3, [r7, #17]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	01db      	lsls	r3, r3, #7
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	8afb      	ldrh	r3, [r7, #22]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	81fb      	strh	r3, [r7, #14]

                if (buffer_index < sizeof(OLED_BackBuffer))
 8002bba:	89fb      	ldrh	r3, [r7, #14]
 8002bbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bc0:	d210      	bcs.n	8002be4 <OLED_DisplayChar+0x150>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 8002bc2:	89fb      	ldrh	r3, [r7, #14]
 8002bc4:	4a15      	ldr	r2, [pc, #84]	@ (8002c1c <OLED_DisplayChar+0x188>)
 8002bc6:	5cd3      	ldrb	r3, [r2, r3]
 8002bc8:	b25a      	sxtb	r2, r3
 8002bca:	7c3b      	ldrb	r3, [r7, #16]
 8002bcc:	2101      	movs	r1, #1
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	b25b      	sxtb	r3, r3
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	b25a      	sxtb	r2, r3
 8002bd8:	89fb      	ldrh	r3, [r7, #14]
 8002bda:	b2d1      	uxtb	r1, r2
 8002bdc:	4a0f      	ldr	r2, [pc, #60]	@ (8002c1c <OLED_DisplayChar+0x188>)
 8002bde:	54d1      	strb	r1, [r2, r3]
 8002be0:	e000      	b.n	8002be4 <OLED_DisplayChar+0x150>
                continue;
 8002be2:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8002be4:	7f7b      	ldrb	r3, [r7, #29]
 8002be6:	3301      	adds	r3, #1
 8002be8:	777b      	strb	r3, [r7, #29]
 8002bea:	7f7a      	ldrb	r2, [r7, #29]
 8002bec:	7efb      	ldrb	r3, [r7, #27]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d3bd      	bcc.n	8002b6e <OLED_DisplayChar+0xda>
 8002bf2:	e000      	b.n	8002bf6 <OLED_DisplayChar+0x162>
            continue;
 8002bf4:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8002bf6:	7fbb      	ldrb	r3, [r7, #30]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	77bb      	strb	r3, [r7, #30]
 8002bfc:	7fba      	ldrb	r2, [r7, #30]
 8002bfe:	7f3b      	ldrb	r3, [r7, #28]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d391      	bcc.n	8002b28 <OLED_DisplayChar+0x94>
 8002c04:	e002      	b.n	8002c0c <OLED_DisplayChar+0x178>
        return;
 8002c06:	bf00      	nop
 8002c08:	e000      	b.n	8002c0c <OLED_DisplayChar+0x178>
            break;
 8002c0a:	bf00      	nop
                }
            }
        }
    }
}
 8002c0c:	3724      	adds	r7, #36	@ 0x24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	2000074c 	.word	0x2000074c
 8002c18:	0800e91c 	.word	0x0800e91c
 8002c1c:	20000754 	.word	0x20000754

08002c20 <OLED_DisplayCharInverted>:

void OLED_DisplayCharInverted(int16_t x, int16_t y, char ch, uint8_t inverted) //! UPDATEDISPLAY REQUIRED
{
 8002c20:	b490      	push	{r4, r7}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4604      	mov	r4, r0
 8002c28:	4608      	mov	r0, r1
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4623      	mov	r3, r4
 8002c30:	80fb      	strh	r3, [r7, #6]
 8002c32:	4603      	mov	r3, r0
 8002c34:	80bb      	strh	r3, [r7, #4]
 8002c36:	460b      	mov	r3, r1
 8002c38:	70fb      	strb	r3, [r7, #3]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	70bb      	strb	r3, [r7, #2]
    const uint8_t font_width = 6;
 8002c3e:	2306      	movs	r3, #6
 8002c40:	753b      	strb	r3, [r7, #20]
    const uint8_t font_height = 8;
 8002c42:	2308      	movs	r3, #8
 8002c44:	74fb      	strb	r3, [r7, #19]

    if (ch < 32)
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	2b1f      	cmp	r3, #31
 8002c4a:	f240 808e 	bls.w	8002d6a <OLED_DisplayCharInverted+0x14a>
        return;

    uint8_t c = ch - 32;
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	3b20      	subs	r3, #32
 8002c52:	74bb      	strb	r3, [r7, #18]

    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8002c54:	2300      	movs	r3, #0
 8002c56:	75fb      	strb	r3, [r7, #23]
 8002c58:	e081      	b.n	8002d5e <OLED_DisplayCharInverted+0x13e>
    {
        int16_t screen_x = x + char_col;
 8002c5a:	7dfb      	ldrb	r3, [r7, #23]
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	4413      	add	r3, r2
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	823b      	strh	r3, [r7, #16]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 8002c66:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	db73      	blt.n	8002d56 <OLED_DisplayCharInverted+0x136>
 8002c6e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c72:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c74:	dc6f      	bgt.n	8002d56 <OLED_DisplayCharInverted+0x136>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 8002c76:	7cbb      	ldrb	r3, [r7, #18]
 8002c78:	7d3a      	ldrb	r2, [r7, #20]
 8002c7a:	fb03 f202 	mul.w	r2, r3, r2
 8002c7e:	7dfb      	ldrb	r3, [r7, #23]
 8002c80:	4413      	add	r3, r2
 8002c82:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8002c86:	d272      	bcs.n	8002d6e <OLED_DisplayCharInverted+0x14e>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 8002c88:	7cbb      	ldrb	r3, [r7, #18]
 8002c8a:	7d3a      	ldrb	r2, [r7, #20]
 8002c8c:	fb03 f202 	mul.w	r2, r3, r2
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	4413      	add	r3, r2
 8002c94:	4a38      	ldr	r2, [pc, #224]	@ (8002d78 <OLED_DisplayCharInverted+0x158>)
 8002c96:	5cd3      	ldrb	r3, [r2, r3]
 8002c98:	75bb      	strb	r3, [r7, #22]

        if (inverted)
 8002c9a:	78bb      	ldrb	r3, [r7, #2]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <OLED_DisplayCharInverted+0x86>
        {
            font_data_col = ~font_data_col;
 8002ca0:	7dbb      	ldrb	r3, [r7, #22]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	75bb      	strb	r3, [r7, #22]
        }

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	757b      	strb	r3, [r7, #21]
 8002caa:	e04f      	b.n	8002d4c <OLED_DisplayCharInverted+0x12c>
        {
            int16_t screen_y = y + char_row_bit;
 8002cac:	7d7b      	ldrb	r3, [r7, #21]
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	88bb      	ldrh	r3, [r7, #4]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	81fb      	strh	r3, [r7, #14]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 8002cb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	db41      	blt.n	8002d44 <OLED_DisplayCharInverted+0x124>
 8002cc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cc4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002cc6:	dc3d      	bgt.n	8002d44 <OLED_DisplayCharInverted+0x124>
                continue;

            uint8_t page = (uint8_t)screen_y / 8;
 8002cc8:	89fb      	ldrh	r3, [r7, #14]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	08db      	lsrs	r3, r3, #3
 8002cce:	737b      	strb	r3, [r7, #13]
            uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 8002cd0:	89fb      	ldrh	r3, [r7, #14]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	733b      	strb	r3, [r7, #12]
            uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 8002cda:	7b7b      	ldrb	r3, [r7, #13]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	01db      	lsls	r3, r3, #7
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	8a3b      	ldrh	r3, [r7, #16]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	817b      	strh	r3, [r7, #10]

            if (buffer_index < sizeof(OLED_BackBuffer))
 8002ce8:	897b      	ldrh	r3, [r7, #10]
 8002cea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cee:	d22a      	bcs.n	8002d46 <OLED_DisplayCharInverted+0x126>
            {
                if ((font_data_col >> char_row_bit) & 0x01)
 8002cf0:	7dba      	ldrb	r2, [r7, #22]
 8002cf2:	7d7b      	ldrb	r3, [r7, #21]
 8002cf4:	fa42 f303 	asr.w	r3, r2, r3
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00f      	beq.n	8002d20 <OLED_DisplayCharInverted+0x100>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 8002d00:	897b      	ldrh	r3, [r7, #10]
 8002d02:	4a1e      	ldr	r2, [pc, #120]	@ (8002d7c <OLED_DisplayCharInverted+0x15c>)
 8002d04:	5cd3      	ldrb	r3, [r2, r3]
 8002d06:	b25a      	sxtb	r2, r3
 8002d08:	7b3b      	ldrb	r3, [r7, #12]
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d10:	b25b      	sxtb	r3, r3
 8002d12:	4313      	orrs	r3, r2
 8002d14:	b25a      	sxtb	r2, r3
 8002d16:	897b      	ldrh	r3, [r7, #10]
 8002d18:	b2d1      	uxtb	r1, r2
 8002d1a:	4a18      	ldr	r2, [pc, #96]	@ (8002d7c <OLED_DisplayCharInverted+0x15c>)
 8002d1c:	54d1      	strb	r1, [r2, r3]
 8002d1e:	e012      	b.n	8002d46 <OLED_DisplayCharInverted+0x126>
                }
                else
                {
                    OLED_BackBuffer[buffer_index] &= ~(1 << bit_offset_in_page);
 8002d20:	897b      	ldrh	r3, [r7, #10]
 8002d22:	4a16      	ldr	r2, [pc, #88]	@ (8002d7c <OLED_DisplayCharInverted+0x15c>)
 8002d24:	5cd3      	ldrb	r3, [r2, r3]
 8002d26:	b25a      	sxtb	r2, r3
 8002d28:	7b3b      	ldrb	r3, [r7, #12]
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d30:	b25b      	sxtb	r3, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	b25b      	sxtb	r3, r3
 8002d36:	4013      	ands	r3, r2
 8002d38:	b25a      	sxtb	r2, r3
 8002d3a:	897b      	ldrh	r3, [r7, #10]
 8002d3c:	b2d1      	uxtb	r1, r2
 8002d3e:	4a0f      	ldr	r2, [pc, #60]	@ (8002d7c <OLED_DisplayCharInverted+0x15c>)
 8002d40:	54d1      	strb	r1, [r2, r3]
 8002d42:	e000      	b.n	8002d46 <OLED_DisplayCharInverted+0x126>
                continue;
 8002d44:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8002d46:	7d7b      	ldrb	r3, [r7, #21]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	757b      	strb	r3, [r7, #21]
 8002d4c:	7d7a      	ldrb	r2, [r7, #21]
 8002d4e:	7cfb      	ldrb	r3, [r7, #19]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d3ab      	bcc.n	8002cac <OLED_DisplayCharInverted+0x8c>
 8002d54:	e000      	b.n	8002d58 <OLED_DisplayCharInverted+0x138>
            continue;
 8002d56:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8002d58:	7dfb      	ldrb	r3, [r7, #23]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	75fb      	strb	r3, [r7, #23]
 8002d5e:	7dfa      	ldrb	r2, [r7, #23]
 8002d60:	7d3b      	ldrb	r3, [r7, #20]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	f4ff af79 	bcc.w	8002c5a <OLED_DisplayCharInverted+0x3a>
 8002d68:	e002      	b.n	8002d70 <OLED_DisplayCharInverted+0x150>
        return;
 8002d6a:	bf00      	nop
 8002d6c:	e000      	b.n	8002d70 <OLED_DisplayCharInverted+0x150>
            break;
 8002d6e:	bf00      	nop
                }
            }
        }
    }
}
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc90      	pop	{r4, r7}
 8002d76:	4770      	bx	lr
 8002d78:	0800e91c 	.word	0x0800e91c
 8002d7c:	20000754 	.word	0x20000754

08002d80 <OLED_DisplayString>:

void OLED_DisplayString(int16_t x, int16_t y, char *str) //! UPDATEDISPLAY REQUIRED
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	603a      	str	r2, [r7, #0]
 8002d8a:	80fb      	strh	r3, [r7, #6]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	80bb      	strh	r3, [r7, #4]
    uint8_t j = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	73fb      	strb	r3, [r7, #15]
    const uint8_t font_width = 6;
 8002d94:	2306      	movs	r3, #6
 8002d96:	73bb      	strb	r3, [r7, #14]
    const uint8_t font_height = 8;
 8002d98:	2308      	movs	r3, #8
 8002d9a:	737b      	strb	r3, [r7, #13]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 8002d9c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002da0:	2b3f      	cmp	r3, #63	@ 0x3f
 8002da2:	dc34      	bgt.n	8002e0e <OLED_DisplayString+0x8e>
 8002da4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002da8:	7b7b      	ldrb	r3, [r7, #13]
 8002daa:	4413      	add	r3, r2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	dd2e      	ble.n	8002e0e <OLED_DisplayString+0x8e>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 8002db0:	e026      	b.n	8002e00 <OLED_DisplayString+0x80>
    {
        current_char_x = x + (j * font_width);
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	7bba      	ldrb	r2, [r7, #14]
 8002db8:	b292      	uxth	r2, r2
 8002dba:	fb02 f303 	mul.w	r3, r2, r3
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	817b      	strh	r3, [r7, #10]
        if (current_char_x >= OLED_WIDTH)
 8002dc8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002dcc:	2b7f      	cmp	r3, #127	@ 0x7f
 8002dce:	dc20      	bgt.n	8002e12 <OLED_DisplayString+0x92>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 8002dd0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002dd4:	7bbb      	ldrb	r3, [r7, #14]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	dc03      	bgt.n	8002de4 <OLED_DisplayString+0x64>
        {
            j++;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	3301      	adds	r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
            continue;
 8002de2:	e00d      	b.n	8002e00 <OLED_DisplayString+0x80>
        }
        OLED_DisplayChar(current_char_x, y, str[j]);
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	4413      	add	r3, r2
 8002dea:	781a      	ldrb	r2, [r3, #0]
 8002dec:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002df0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fe4d 	bl	8002a94 <OLED_DisplayChar>
        j++;
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
    while (str[j] != '\0')
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	4413      	add	r3, r2
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1d2      	bne.n	8002db2 <OLED_DisplayString+0x32>
 8002e0c:	e002      	b.n	8002e14 <OLED_DisplayString+0x94>
        return;
 8002e0e:	bf00      	nop
 8002e10:	e000      	b.n	8002e14 <OLED_DisplayString+0x94>
            break;
 8002e12:	bf00      	nop
    }
}
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <OLED_DisplayStringInverted>:

void OLED_DisplayStringInverted(int16_t x, int16_t y, char *str, uint8_t inverted) //! UPDATEDISPLAY REQUIRED
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60ba      	str	r2, [r7, #8]
 8002e22:	461a      	mov	r2, r3
 8002e24:	4603      	mov	r3, r0
 8002e26:	81fb      	strh	r3, [r7, #14]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	81bb      	strh	r3, [r7, #12]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	71fb      	strb	r3, [r7, #7]
    uint8_t j = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	75fb      	strb	r3, [r7, #23]
    const uint8_t font_width = 6;
 8002e34:	2306      	movs	r3, #6
 8002e36:	75bb      	strb	r3, [r7, #22]
    const uint8_t font_height = 8;
 8002e38:	2308      	movs	r3, #8
 8002e3a:	757b      	strb	r3, [r7, #21]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 8002e3c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e40:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e42:	dc34      	bgt.n	8002eae <OLED_DisplayStringInverted+0x94>
 8002e44:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002e48:	7d7b      	ldrb	r3, [r7, #21]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	dd2e      	ble.n	8002eae <OLED_DisplayStringInverted+0x94>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 8002e50:	e026      	b.n	8002ea0 <OLED_DisplayStringInverted+0x86>
    {
        current_char_x = x + (j * font_width);
 8002e52:	7dfb      	ldrb	r3, [r7, #23]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	7dba      	ldrb	r2, [r7, #22]
 8002e58:	b292      	uxth	r2, r2
 8002e5a:	fb02 f303 	mul.w	r3, r2, r3
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	89fb      	ldrh	r3, [r7, #14]
 8002e62:	4413      	add	r3, r2
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	827b      	strh	r3, [r7, #18]
        if (current_char_x >= OLED_WIDTH)
 8002e68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e6e:	dc20      	bgt.n	8002eb2 <OLED_DisplayStringInverted+0x98>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 8002e70:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002e74:	7dbb      	ldrb	r3, [r7, #22]
 8002e76:	4413      	add	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	dc03      	bgt.n	8002e84 <OLED_DisplayStringInverted+0x6a>
        {
            j++;
 8002e7c:	7dfb      	ldrb	r3, [r7, #23]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	75fb      	strb	r3, [r7, #23]
            continue;
 8002e82:	e00d      	b.n	8002ea0 <OLED_DisplayStringInverted+0x86>
        }
        OLED_DisplayCharInverted(current_char_x, y, str[j], inverted);
 8002e84:	7dfb      	ldrb	r3, [r7, #23]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	4413      	add	r3, r2
 8002e8a:	781a      	ldrb	r2, [r3, #0]
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002e92:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8002e96:	f7ff fec3 	bl	8002c20 <OLED_DisplayCharInverted>
        j++;
 8002e9a:	7dfb      	ldrb	r3, [r7, #23]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	75fb      	strb	r3, [r7, #23]
    while (str[j] != '\0')
 8002ea0:	7dfb      	ldrb	r3, [r7, #23]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1d2      	bne.n	8002e52 <OLED_DisplayStringInverted+0x38>
 8002eac:	e002      	b.n	8002eb4 <OLED_DisplayStringInverted+0x9a>
        return;
 8002eae:	bf00      	nop
 8002eb0:	e000      	b.n	8002eb4 <OLED_DisplayStringInverted+0x9a>
            break;
 8002eb2:	bf00      	nop
    }
}
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <System_UI_Loop>:
//光标动画部分
#define CURSORBG_TWEEN_TIME 350
#define CURSORBG_TWEEN_STYLE EASE_INOUT_BACK

void System_UI_Loop()
{
 8002ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ebe:	b095      	sub	sp, #84	@ 0x54
 8002ec0:	af04      	add	r7, sp, #16
    static bool isFirstRun = true;

    float x, y, x1, y1;
    if (!isFirstRun)
 8002ec2:	4b9d      	ldr	r3, [pc, #628]	@ (8003138 <System_UI_Loop+0x27c>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	f083 0301 	eor.w	r3, r3, #1
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <System_UI_Loop+0x18>
        SystemGetsSignal();
 8002ed0:	f002 fd3e 	bl	8005950 <SystemGetsSignal>

    if (isFirstRun) //第一次启动调用，初始化部分
 8002ed4:	4b98      	ldr	r3, [pc, #608]	@ (8003138 <System_UI_Loop+0x27c>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 8372 	beq.w	80035c2 <System_UI_Loop+0x706>
    {
#pragma region 标题栏
        OLED_MoveObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_End_Y, StartTweenTime, TweenStyle);
 8002ede:	2315      	movs	r3, #21
 8002ee0:	9303      	str	r3, [sp, #12]
 8002ee2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002ee6:	9302      	str	r3, [sp, #8]
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	9301      	str	r3, [sp, #4]
 8002eee:	4b93      	ldr	r3, [pc, #588]	@ (800313c <System_UI_Loop+0x280>)
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	4b93      	ldr	r3, [pc, #588]	@ (8003140 <System_UI_Loop+0x284>)
 8002ef4:	4a91      	ldr	r2, [pc, #580]	@ (800313c <System_UI_Loop+0x280>)
 8002ef6:	4993      	ldr	r1, [pc, #588]	@ (8003144 <System_UI_Loop+0x288>)
 8002ef8:	4893      	ldr	r0, [pc, #588]	@ (8003148 <System_UI_Loop+0x28c>)
 8002efa:	f005 f940 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002efe:	2315      	movs	r3, #21
 8002f00:	9303      	str	r3, [sp, #12]
 8002f02:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	4b8d      	ldr	r3, [pc, #564]	@ (8003140 <System_UI_Loop+0x284>)
 8002f0a:	9301      	str	r3, [sp, #4]
 8002f0c:	4b8b      	ldr	r3, [pc, #556]	@ (800313c <System_UI_Loop+0x280>)
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	4b8b      	ldr	r3, [pc, #556]	@ (8003140 <System_UI_Loop+0x284>)
 8002f12:	4a8a      	ldr	r2, [pc, #552]	@ (800313c <System_UI_Loop+0x280>)
 8002f14:	498d      	ldr	r1, [pc, #564]	@ (800314c <System_UI_Loop+0x290>)
 8002f16:	488c      	ldr	r0, [pc, #560]	@ (8003148 <System_UI_Loop+0x28c>)
 8002f18:	f005 f931 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002f1c:	2315      	movs	r3, #21
 8002f1e:	9303      	str	r3, [sp, #12]
 8002f20:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002f24:	9302      	str	r3, [sp, #8]
 8002f26:	4b86      	ldr	r3, [pc, #536]	@ (8003140 <System_UI_Loop+0x284>)
 8002f28:	9301      	str	r3, [sp, #4]
 8002f2a:	4b89      	ldr	r3, [pc, #548]	@ (8003150 <System_UI_Loop+0x294>)
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	4b84      	ldr	r3, [pc, #528]	@ (8003140 <System_UI_Loop+0x284>)
 8002f30:	4a87      	ldr	r2, [pc, #540]	@ (8003150 <System_UI_Loop+0x294>)
 8002f32:	4988      	ldr	r1, [pc, #544]	@ (8003154 <System_UI_Loop+0x298>)
 8002f34:	4884      	ldr	r0, [pc, #528]	@ (8003148 <System_UI_Loop+0x28c>)
 8002f36:	f005 f922 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002f3a:	2315      	movs	r3, #21
 8002f3c:	9303      	str	r3, [sp, #12]
 8002f3e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002f42:	9302      	str	r3, [sp, #8]
 8002f44:	4b7e      	ldr	r3, [pc, #504]	@ (8003140 <System_UI_Loop+0x284>)
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	4b83      	ldr	r3, [pc, #524]	@ (8003158 <System_UI_Loop+0x29c>)
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	4b7c      	ldr	r3, [pc, #496]	@ (8003140 <System_UI_Loop+0x284>)
 8002f4e:	4a82      	ldr	r2, [pc, #520]	@ (8003158 <System_UI_Loop+0x29c>)
 8002f50:	4982      	ldr	r1, [pc, #520]	@ (800315c <System_UI_Loop+0x2a0>)
 8002f52:	487d      	ldr	r0, [pc, #500]	@ (8003148 <System_UI_Loop+0x28c>)
 8002f54:	f005 f913 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Developer") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002f58:	2315      	movs	r3, #21
 8002f5a:	9303      	str	r3, [sp, #12]
 8002f5c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002f60:	9302      	str	r3, [sp, #8]
 8002f62:	4b77      	ldr	r3, [pc, #476]	@ (8003140 <System_UI_Loop+0x284>)
 8002f64:	9301      	str	r3, [sp, #4]
 8002f66:	4b7e      	ldr	r3, [pc, #504]	@ (8003160 <System_UI_Loop+0x2a4>)
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	4b75      	ldr	r3, [pc, #468]	@ (8003140 <System_UI_Loop+0x284>)
 8002f6c:	4a7c      	ldr	r2, [pc, #496]	@ (8003160 <System_UI_Loop+0x2a4>)
 8002f6e:	497d      	ldr	r1, [pc, #500]	@ (8003164 <System_UI_Loop+0x2a8>)
 8002f70:	4875      	ldr	r0, [pc, #468]	@ (8003148 <System_UI_Loop+0x28c>)
 8002f72:	f005 f904 	bl	800817e <OLED_MoveObject>

        OLED_MoveObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002f76:	2315      	movs	r3, #21
 8002f78:	9303      	str	r3, [sp, #12]
 8002f7a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002f7e:	9302      	str	r3, [sp, #8]
 8002f80:	4b6f      	ldr	r3, [pc, #444]	@ (8003140 <System_UI_Loop+0x284>)
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	4b74      	ldr	r3, [pc, #464]	@ (8003158 <System_UI_Loop+0x29c>)
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	4b6d      	ldr	r3, [pc, #436]	@ (8003140 <System_UI_Loop+0x284>)
 8002f8a:	4a73      	ldr	r2, [pc, #460]	@ (8003158 <System_UI_Loop+0x29c>)
 8002f8c:	4976      	ldr	r1, [pc, #472]	@ (8003168 <System_UI_Loop+0x2ac>)
 8002f8e:	486e      	ldr	r0, [pc, #440]	@ (8003148 <System_UI_Loop+0x28c>)
 8002f90:	f005 f8f5 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002f94:	2315      	movs	r3, #21
 8002f96:	9303      	str	r3, [sp, #12]
 8002f98:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002f9c:	9302      	str	r3, [sp, #8]
 8002f9e:	4b68      	ldr	r3, [pc, #416]	@ (8003140 <System_UI_Loop+0x284>)
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	4b66      	ldr	r3, [pc, #408]	@ (800313c <System_UI_Loop+0x280>)
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	4b66      	ldr	r3, [pc, #408]	@ (8003140 <System_UI_Loop+0x284>)
 8002fa8:	4a64      	ldr	r2, [pc, #400]	@ (800313c <System_UI_Loop+0x280>)
 8002faa:	4970      	ldr	r1, [pc, #448]	@ (800316c <System_UI_Loop+0x2b0>)
 8002fac:	4866      	ldr	r0, [pc, #408]	@ (8003148 <System_UI_Loop+0x28c>)
 8002fae:	f005 f8e6 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002fb2:	2315      	movs	r3, #21
 8002fb4:	9303      	str	r3, [sp, #12]
 8002fb6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002fba:	9302      	str	r3, [sp, #8]
 8002fbc:	4b60      	ldr	r3, [pc, #384]	@ (8003140 <System_UI_Loop+0x284>)
 8002fbe:	9301      	str	r3, [sp, #4]
 8002fc0:	4b65      	ldr	r3, [pc, #404]	@ (8003158 <System_UI_Loop+0x29c>)
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	4b5e      	ldr	r3, [pc, #376]	@ (8003140 <System_UI_Loop+0x284>)
 8002fc6:	4a64      	ldr	r2, [pc, #400]	@ (8003158 <System_UI_Loop+0x29c>)
 8002fc8:	4969      	ldr	r1, [pc, #420]	@ (8003170 <System_UI_Loop+0x2b4>)
 8002fca:	485f      	ldr	r0, [pc, #380]	@ (8003148 <System_UI_Loop+0x28c>)
 8002fcc:	f005 f8d7 	bl	800817e <OLED_MoveObject>

        OLED_MoveObject(&g_Title_AnimationManager, "BAD APPLE!", (OLED_WIDTH - strlen("BAD APPLE!") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("BAD APPLE!") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002fd0:	2315      	movs	r3, #21
 8002fd2:	9303      	str	r3, [sp, #12]
 8002fd4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002fd8:	9302      	str	r3, [sp, #8]
 8002fda:	4b59      	ldr	r3, [pc, #356]	@ (8003140 <System_UI_Loop+0x284>)
 8002fdc:	9301      	str	r3, [sp, #4]
 8002fde:	4b65      	ldr	r3, [pc, #404]	@ (8003174 <System_UI_Loop+0x2b8>)
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	4b57      	ldr	r3, [pc, #348]	@ (8003140 <System_UI_Loop+0x284>)
 8002fe4:	4a63      	ldr	r2, [pc, #396]	@ (8003174 <System_UI_Loop+0x2b8>)
 8002fe6:	4964      	ldr	r1, [pc, #400]	@ (8003178 <System_UI_Loop+0x2bc>)
 8002fe8:	4857      	ldr	r0, [pc, #348]	@ (8003148 <System_UI_Loop+0x28c>)
 8002fea:	f005 f8c8 	bl	800817e <OLED_MoveObject>

        OLED_MoveObject(&g_Title_AnimationManager, "Show FPS?", (OLED_WIDTH - strlen("Show FPS?") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Show FPS?") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002fee:	2315      	movs	r3, #21
 8002ff0:	9303      	str	r3, [sp, #12]
 8002ff2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002ff6:	9302      	str	r3, [sp, #8]
 8002ff8:	4b51      	ldr	r3, [pc, #324]	@ (8003140 <System_UI_Loop+0x284>)
 8002ffa:	9301      	str	r3, [sp, #4]
 8002ffc:	4b58      	ldr	r3, [pc, #352]	@ (8003160 <System_UI_Loop+0x2a4>)
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	4b4f      	ldr	r3, [pc, #316]	@ (8003140 <System_UI_Loop+0x284>)
 8003002:	4a57      	ldr	r2, [pc, #348]	@ (8003160 <System_UI_Loop+0x2a4>)
 8003004:	495d      	ldr	r1, [pc, #372]	@ (800317c <System_UI_Loop+0x2c0>)
 8003006:	4850      	ldr	r0, [pc, #320]	@ (8003148 <System_UI_Loop+0x28c>)
 8003008:	f005 f8b9 	bl	800817e <OLED_MoveObject>

        OLED_MoveObject(&g_Title_AnimationManager, "TitleDeveloper", (OLED_WIDTH - strlen("DEVELOPER: UnikoZera") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("DEVELOPER: UnikoZera") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 800300c:	2315      	movs	r3, #21
 800300e:	9303      	str	r3, [sp, #12]
 8003010:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003014:	9302      	str	r3, [sp, #8]
 8003016:	4b4a      	ldr	r3, [pc, #296]	@ (8003140 <System_UI_Loop+0x284>)
 8003018:	9301      	str	r3, [sp, #4]
 800301a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	4b47      	ldr	r3, [pc, #284]	@ (8003140 <System_UI_Loop+0x284>)
 8003022:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8003026:	4956      	ldr	r1, [pc, #344]	@ (8003180 <System_UI_Loop+0x2c4>)
 8003028:	4847      	ldr	r0, [pc, #284]	@ (8003148 <System_UI_Loop+0x28c>)
 800302a:	f005 f8a8 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleGithub", (OLED_WIDTH - strlen("Github Adress") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Github Adress") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 800302e:	2315      	movs	r3, #21
 8003030:	9303      	str	r3, [sp, #12]
 8003032:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003036:	9302      	str	r3, [sp, #8]
 8003038:	4b41      	ldr	r3, [pc, #260]	@ (8003140 <System_UI_Loop+0x284>)
 800303a:	9301      	str	r3, [sp, #4]
 800303c:	4b3f      	ldr	r3, [pc, #252]	@ (800313c <System_UI_Loop+0x280>)
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	4b3f      	ldr	r3, [pc, #252]	@ (8003140 <System_UI_Loop+0x284>)
 8003042:	4a3e      	ldr	r2, [pc, #248]	@ (800313c <System_UI_Loop+0x280>)
 8003044:	494f      	ldr	r1, [pc, #316]	@ (8003184 <System_UI_Loop+0x2c8>)
 8003046:	4840      	ldr	r0, [pc, #256]	@ (8003148 <System_UI_Loop+0x28c>)
 8003048:	f005 f899 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleDonate", (OLED_WIDTH - strlen("BiliBili Space") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("TitleDonate") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 800304c:	2315      	movs	r3, #21
 800304e:	9303      	str	r3, [sp, #12]
 8003050:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003054:	9302      	str	r3, [sp, #8]
 8003056:	4b3a      	ldr	r3, [pc, #232]	@ (8003140 <System_UI_Loop+0x284>)
 8003058:	9301      	str	r3, [sp, #4]
 800305a:	4b4b      	ldr	r3, [pc, #300]	@ (8003188 <System_UI_Loop+0x2cc>)
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	4b38      	ldr	r3, [pc, #224]	@ (8003140 <System_UI_Loop+0x284>)
 8003060:	4a3b      	ldr	r2, [pc, #236]	@ (8003150 <System_UI_Loop+0x294>)
 8003062:	494a      	ldr	r1, [pc, #296]	@ (800318c <System_UI_Loop+0x2d0>)
 8003064:	4838      	ldr	r0, [pc, #224]	@ (8003148 <System_UI_Loop+0x28c>)
 8003066:	f005 f88a 	bl	800817e <OLED_MoveObject>
#pragma endregion 标题栏

#pragma region 游戏栏
        OLED_MoveObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 800306a:	2315      	movs	r3, #21
 800306c:	9303      	str	r3, [sp, #12]
 800306e:	2301      	movs	r3, #1
 8003070:	9302      	str	r3, [sp, #8]
 8003072:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003076:	9301      	str	r3, [sp, #4]
 8003078:	4b45      	ldr	r3, [pc, #276]	@ (8003190 <System_UI_Loop+0x2d4>)
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003080:	4a43      	ldr	r2, [pc, #268]	@ (8003190 <System_UI_Loop+0x2d4>)
 8003082:	4944      	ldr	r1, [pc, #272]	@ (8003194 <System_UI_Loop+0x2d8>)
 8003084:	4844      	ldr	r0, [pc, #272]	@ (8003198 <System_UI_Loop+0x2dc>)
 8003086:	f005 f87a 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 800308a:	2315      	movs	r3, #21
 800308c:	9303      	str	r3, [sp, #12]
 800308e:	2301      	movs	r3, #1
 8003090:	9302      	str	r3, [sp, #8]
 8003092:	4b42      	ldr	r3, [pc, #264]	@ (800319c <System_UI_Loop+0x2e0>)
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	4b3e      	ldr	r3, [pc, #248]	@ (8003190 <System_UI_Loop+0x2d4>)
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	4b40      	ldr	r3, [pc, #256]	@ (800319c <System_UI_Loop+0x2e0>)
 800309c:	4a3c      	ldr	r2, [pc, #240]	@ (8003190 <System_UI_Loop+0x2d4>)
 800309e:	4940      	ldr	r1, [pc, #256]	@ (80031a0 <System_UI_Loop+0x2e4>)
 80030a0:	483d      	ldr	r0, [pc, #244]	@ (8003198 <System_UI_Loop+0x2dc>)
 80030a2:	f005 f86c 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, TweenStyle);
 80030a6:	2315      	movs	r3, #21
 80030a8:	9303      	str	r3, [sp, #12]
 80030aa:	2301      	movs	r3, #1
 80030ac:	9302      	str	r3, [sp, #8]
 80030ae:	4b3d      	ldr	r3, [pc, #244]	@ (80031a4 <System_UI_Loop+0x2e8>)
 80030b0:	9301      	str	r3, [sp, #4]
 80030b2:	4b37      	ldr	r3, [pc, #220]	@ (8003190 <System_UI_Loop+0x2d4>)
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	4b3b      	ldr	r3, [pc, #236]	@ (80031a4 <System_UI_Loop+0x2e8>)
 80030b8:	4a35      	ldr	r2, [pc, #212]	@ (8003190 <System_UI_Loop+0x2d4>)
 80030ba:	493b      	ldr	r1, [pc, #236]	@ (80031a8 <System_UI_Loop+0x2ec>)
 80030bc:	483b      	ldr	r0, [pc, #236]	@ (80031ac <System_UI_Loop+0x2f0>)
 80030be:	f005 f85e 	bl	800817e <OLED_MoveObject>
#pragma endregion 游戏栏

#pragma region 工具栏
        OLED_MoveObject(&Tools_AnimationManager, "VideoPlayer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 80030c2:	2315      	movs	r3, #21
 80030c4:	9303      	str	r3, [sp, #12]
 80030c6:	2301      	movs	r3, #1
 80030c8:	9302      	str	r3, [sp, #8]
 80030ca:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80030ce:	9301      	str	r3, [sp, #4]
 80030d0:	4b2f      	ldr	r3, [pc, #188]	@ (8003190 <System_UI_Loop+0x2d4>)
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	4b31      	ldr	r3, [pc, #196]	@ (800319c <System_UI_Loop+0x2e0>)
 80030d6:	4a2e      	ldr	r2, [pc, #184]	@ (8003190 <System_UI_Loop+0x2d4>)
 80030d8:	4935      	ldr	r1, [pc, #212]	@ (80031b0 <System_UI_Loop+0x2f4>)
 80030da:	4836      	ldr	r0, [pc, #216]	@ (80031b4 <System_UI_Loop+0x2f8>)
 80030dc:	f005 f84f 	bl	800817e <OLED_MoveObject>

#pragma endregion 工具栏

#pragma region 状态栏 //这里我想做成一个界面就好,不要选项
        OLED_MoveObject(&Status_AnimationManager, "RunningTime", 0, -10, 0, -10, 1, TweenStyle);
 80030e0:	2315      	movs	r3, #21
 80030e2:	9303      	str	r3, [sp, #12]
 80030e4:	2301      	movs	r3, #1
 80030e6:	9302      	str	r3, [sp, #8]
 80030e8:	4b15      	ldr	r3, [pc, #84]	@ (8003140 <System_UI_Loop+0x284>)
 80030ea:	9301      	str	r3, [sp, #4]
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	4b13      	ldr	r3, [pc, #76]	@ (8003140 <System_UI_Loop+0x284>)
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	492f      	ldr	r1, [pc, #188]	@ (80031b8 <System_UI_Loop+0x2fc>)
 80030fa:	4830      	ldr	r0, [pc, #192]	@ (80031bc <System_UI_Loop+0x300>)
 80030fc:	f005 f83f 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&Status_AnimationManager, "Status", 0, OLED_HEIGHT, 0, OLED_HEIGHT, 1, TweenStyle);
 8003100:	2315      	movs	r3, #21
 8003102:	9303      	str	r3, [sp, #12]
 8003104:	2301      	movs	r3, #1
 8003106:	9302      	str	r3, [sp, #8]
 8003108:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 800310c:	9301      	str	r3, [sp, #4]
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	4928      	ldr	r1, [pc, #160]	@ (80031c0 <System_UI_Loop+0x304>)
 800311e:	4827      	ldr	r0, [pc, #156]	@ (80031bc <System_UI_Loop+0x300>)
 8003120:	f005 f82d 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&Status_AnimationManager, "CUBE", 150, 50, 150, 50, 1, TweenStyle);
 8003124:	2315      	movs	r3, #21
 8003126:	9303      	str	r3, [sp, #12]
 8003128:	2301      	movs	r3, #1
 800312a:	9302      	str	r3, [sp, #8]
 800312c:	4b03      	ldr	r3, [pc, #12]	@ (800313c <System_UI_Loop+0x280>)
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	4b24      	ldr	r3, [pc, #144]	@ (80031c4 <System_UI_Loop+0x308>)
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	e048      	b.n	80031c8 <System_UI_Loop+0x30c>
 8003136:	bf00      	nop
 8003138:	2000043f 	.word	0x2000043f
 800313c:	42480000 	.word	0x42480000
 8003140:	c1200000 	.word	0xc1200000
 8003144:	0800e554 	.word	0x0800e554
 8003148:	20003804 	.word	0x20003804
 800314c:	0800e560 	.word	0x0800e560
 8003150:	42300000 	.word	0x42300000
 8003154:	0800e56c 	.word	0x0800e56c
 8003158:	42600000 	.word	0x42600000
 800315c:	0800e578 	.word	0x0800e578
 8003160:	42940000 	.word	0x42940000
 8003164:	0800e588 	.word	0x0800e588
 8003168:	0800e594 	.word	0x0800e594
 800316c:	0800e5a0 	.word	0x0800e5a0
 8003170:	0800e5ac 	.word	0x0800e5ac
 8003174:	42880000 	.word	0x42880000
 8003178:	0800e5b8 	.word	0x0800e5b8
 800317c:	0800e5c4 	.word	0x0800e5c4
 8003180:	0800e5d0 	.word	0x0800e5d0
 8003184:	0800e5e0 	.word	0x0800e5e0
 8003188:	42780000 	.word	0x42780000
 800318c:	0800e5ec 	.word	0x0800e5ec
 8003190:	c2b40000 	.word	0xc2b40000
 8003194:	0800e5f8 	.word	0x0800e5f8
 8003198:	20001a40 	.word	0x20001a40
 800319c:	41e80000 	.word	0x41e80000
 80031a0:	0800e600 	.word	0x0800e600
 80031a4:	42280000 	.word	0x42280000
 80031a8:	0800e608 	.word	0x0800e608
 80031ac:	20003df8 	.word	0x20003df8
 80031b0:	0800e614 	.word	0x0800e614
 80031b4:	20002034 	.word	0x20002034
 80031b8:	0800e620 	.word	0x0800e620
 80031bc:	20003210 	.word	0x20003210
 80031c0:	0800e62c 	.word	0x0800e62c
 80031c4:	43160000 	.word	0x43160000
 80031c8:	4ba8      	ldr	r3, [pc, #672]	@ (800346c <System_UI_Loop+0x5b0>)
 80031ca:	4aa9      	ldr	r2, [pc, #676]	@ (8003470 <System_UI_Loop+0x5b4>)
 80031cc:	49a9      	ldr	r1, [pc, #676]	@ (8003474 <System_UI_Loop+0x5b8>)
 80031ce:	48aa      	ldr	r0, [pc, #680]	@ (8003478 <System_UI_Loop+0x5bc>)
 80031d0:	f004 ffd5 	bl	800817e <OLED_MoveObject>
#pragma endregion 状态栏

#pragma region 设置栏
        OLED_MoveObject(&Settings_AnimationManager, "ShowFPS", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 80031d4:	2315      	movs	r3, #21
 80031d6:	9303      	str	r3, [sp, #12]
 80031d8:	2301      	movs	r3, #1
 80031da:	9302      	str	r3, [sp, #8]
 80031dc:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80031e0:	9301      	str	r3, [sp, #4]
 80031e2:	4ba6      	ldr	r3, [pc, #664]	@ (800347c <System_UI_Loop+0x5c0>)
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80031ea:	4aa4      	ldr	r2, [pc, #656]	@ (800347c <System_UI_Loop+0x5c0>)
 80031ec:	49a4      	ldr	r1, [pc, #656]	@ (8003480 <System_UI_Loop+0x5c4>)
 80031ee:	48a5      	ldr	r0, [pc, #660]	@ (8003484 <System_UI_Loop+0x5c8>)
 80031f0:	f004 ffc5 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&Settings_AnimationManager, "Lightness", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 80031f4:	2315      	movs	r3, #21
 80031f6:	9303      	str	r3, [sp, #12]
 80031f8:	2301      	movs	r3, #1
 80031fa:	9302      	str	r3, [sp, #8]
 80031fc:	4ba2      	ldr	r3, [pc, #648]	@ (8003488 <System_UI_Loop+0x5cc>)
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	4b9e      	ldr	r3, [pc, #632]	@ (800347c <System_UI_Loop+0x5c0>)
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	4ba0      	ldr	r3, [pc, #640]	@ (8003488 <System_UI_Loop+0x5cc>)
 8003206:	4a9d      	ldr	r2, [pc, #628]	@ (800347c <System_UI_Loop+0x5c0>)
 8003208:	49a0      	ldr	r1, [pc, #640]	@ (800348c <System_UI_Loop+0x5d0>)
 800320a:	489e      	ldr	r0, [pc, #632]	@ (8003484 <System_UI_Loop+0x5c8>)
 800320c:	f004 ffb7 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&Settings_AnimationManager, "Bar", 5, OLED_HEIGHT + 10, 0, OLED_HEIGHT + 10, 1, TweenStyle);
 8003210:	2315      	movs	r3, #21
 8003212:	9303      	str	r3, [sp, #12]
 8003214:	2301      	movs	r3, #1
 8003216:	9302      	str	r3, [sp, #8]
 8003218:	4b9d      	ldr	r3, [pc, #628]	@ (8003490 <System_UI_Loop+0x5d4>)
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	4b9b      	ldr	r3, [pc, #620]	@ (8003490 <System_UI_Loop+0x5d4>)
 8003224:	4a9b      	ldr	r2, [pc, #620]	@ (8003494 <System_UI_Loop+0x5d8>)
 8003226:	499c      	ldr	r1, [pc, #624]	@ (8003498 <System_UI_Loop+0x5dc>)
 8003228:	4896      	ldr	r0, [pc, #600]	@ (8003484 <System_UI_Loop+0x5c8>)
 800322a:	f004 ffa8 	bl	800817e <OLED_MoveObject>
#pragma endregion 设置栏

#pragma region 关于栏
        OLED_MoveObject(&About_AnimationManager, "Developer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 800322e:	2315      	movs	r3, #21
 8003230:	9303      	str	r3, [sp, #12]
 8003232:	2301      	movs	r3, #1
 8003234:	9302      	str	r3, [sp, #8]
 8003236:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800323a:	9301      	str	r3, [sp, #4]
 800323c:	4b8f      	ldr	r3, [pc, #572]	@ (800347c <System_UI_Loop+0x5c0>)
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003244:	4a8d      	ldr	r2, [pc, #564]	@ (800347c <System_UI_Loop+0x5c0>)
 8003246:	4995      	ldr	r1, [pc, #596]	@ (800349c <System_UI_Loop+0x5e0>)
 8003248:	4895      	ldr	r0, [pc, #596]	@ (80034a0 <System_UI_Loop+0x5e4>)
 800324a:	f004 ff98 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&About_AnimationManager, "Github", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 800324e:	2315      	movs	r3, #21
 8003250:	9303      	str	r3, [sp, #12]
 8003252:	2301      	movs	r3, #1
 8003254:	9302      	str	r3, [sp, #8]
 8003256:	4b8c      	ldr	r3, [pc, #560]	@ (8003488 <System_UI_Loop+0x5cc>)
 8003258:	9301      	str	r3, [sp, #4]
 800325a:	4b88      	ldr	r3, [pc, #544]	@ (800347c <System_UI_Loop+0x5c0>)
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	4b8a      	ldr	r3, [pc, #552]	@ (8003488 <System_UI_Loop+0x5cc>)
 8003260:	4a86      	ldr	r2, [pc, #536]	@ (800347c <System_UI_Loop+0x5c0>)
 8003262:	4990      	ldr	r1, [pc, #576]	@ (80034a4 <System_UI_Loop+0x5e8>)
 8003264:	488e      	ldr	r0, [pc, #568]	@ (80034a0 <System_UI_Loop+0x5e4>)
 8003266:	f004 ff8a 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&About_AnimationManager, "Donate", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, TweenStyle);
 800326a:	2315      	movs	r3, #21
 800326c:	9303      	str	r3, [sp, #12]
 800326e:	2301      	movs	r3, #1
 8003270:	9302      	str	r3, [sp, #8]
 8003272:	4b8d      	ldr	r3, [pc, #564]	@ (80034a8 <System_UI_Loop+0x5ec>)
 8003274:	9301      	str	r3, [sp, #4]
 8003276:	4b81      	ldr	r3, [pc, #516]	@ (800347c <System_UI_Loop+0x5c0>)
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	4b8b      	ldr	r3, [pc, #556]	@ (80034a8 <System_UI_Loop+0x5ec>)
 800327c:	4a7f      	ldr	r2, [pc, #508]	@ (800347c <System_UI_Loop+0x5c0>)
 800327e:	498b      	ldr	r1, [pc, #556]	@ (80034ac <System_UI_Loop+0x5f0>)
 8003280:	4887      	ldr	r0, [pc, #540]	@ (80034a0 <System_UI_Loop+0x5e4>)
 8003282:	f004 ff7c 	bl	800817e <OLED_MoveObject>

        OLED_MoveObject(&About_AnimationManager, "GH Adress", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 8003286:	2315      	movs	r3, #21
 8003288:	9303      	str	r3, [sp, #12]
 800328a:	2301      	movs	r3, #1
 800328c:	9302      	str	r3, [sp, #8]
 800328e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003292:	9301      	str	r3, [sp, #4]
 8003294:	4b79      	ldr	r3, [pc, #484]	@ (800347c <System_UI_Loop+0x5c0>)
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800329c:	4a77      	ldr	r2, [pc, #476]	@ (800347c <System_UI_Loop+0x5c0>)
 800329e:	4984      	ldr	r1, [pc, #528]	@ (80034b0 <System_UI_Loop+0x5f4>)
 80032a0:	487f      	ldr	r0, [pc, #508]	@ (80034a0 <System_UI_Loop+0x5e4>)
 80032a2:	f004 ff6c 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&About_AnimationManager, "BiliBili Space", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 80032a6:	2315      	movs	r3, #21
 80032a8:	9303      	str	r3, [sp, #12]
 80032aa:	2301      	movs	r3, #1
 80032ac:	9302      	str	r3, [sp, #8]
 80032ae:	4b76      	ldr	r3, [pc, #472]	@ (8003488 <System_UI_Loop+0x5cc>)
 80032b0:	9301      	str	r3, [sp, #4]
 80032b2:	4b72      	ldr	r3, [pc, #456]	@ (800347c <System_UI_Loop+0x5c0>)
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	4b74      	ldr	r3, [pc, #464]	@ (8003488 <System_UI_Loop+0x5cc>)
 80032b8:	4a70      	ldr	r2, [pc, #448]	@ (800347c <System_UI_Loop+0x5c0>)
 80032ba:	497e      	ldr	r1, [pc, #504]	@ (80034b4 <System_UI_Loop+0x5f8>)
 80032bc:	4878      	ldr	r0, [pc, #480]	@ (80034a0 <System_UI_Loop+0x5e4>)
 80032be:	f004 ff5e 	bl	800817e <OLED_MoveObject>

        OLED_MoveObject(&About_AnimationManager, "IconDeveloper", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_START_X, OLED_ICON_START_Y, StartTweenTime, TweenStyle);
 80032c2:	2315      	movs	r3, #21
 80032c4:	9303      	str	r3, [sp, #12]
 80032c6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80032ca:	9302      	str	r3, [sp, #8]
 80032cc:	4b7a      	ldr	r3, [pc, #488]	@ (80034b8 <System_UI_Loop+0x5fc>)
 80032ce:	9301      	str	r3, [sp, #4]
 80032d0:	4b7a      	ldr	r3, [pc, #488]	@ (80034bc <System_UI_Loop+0x600>)
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	4b78      	ldr	r3, [pc, #480]	@ (80034b8 <System_UI_Loop+0x5fc>)
 80032d6:	4a79      	ldr	r2, [pc, #484]	@ (80034bc <System_UI_Loop+0x600>)
 80032d8:	4979      	ldr	r1, [pc, #484]	@ (80034c0 <System_UI_Loop+0x604>)
 80032da:	4871      	ldr	r0, [pc, #452]	@ (80034a0 <System_UI_Loop+0x5e4>)
 80032dc:	f004 ff4f 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&About_AnimationManager, "_GHA", 3, OLED_HEIGHT, 3, OLED_HEIGHT, StartTweenTime, TweenStyle);
 80032e0:	2315      	movs	r3, #21
 80032e2:	9303      	str	r3, [sp, #12]
 80032e4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80032e8:	9302      	str	r3, [sp, #8]
 80032ea:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 80032ee:	9301      	str	r3, [sp, #4]
 80032f0:	4b74      	ldr	r3, [pc, #464]	@ (80034c4 <System_UI_Loop+0x608>)
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 80032f8:	4a72      	ldr	r2, [pc, #456]	@ (80034c4 <System_UI_Loop+0x608>)
 80032fa:	4973      	ldr	r1, [pc, #460]	@ (80034c8 <System_UI_Loop+0x60c>)
 80032fc:	4868      	ldr	r0, [pc, #416]	@ (80034a0 <System_UI_Loop+0x5e4>)
 80032fe:	f004 ff3e 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&About_AnimationManager, "DetailDonate", 5, OLED_HEIGHT, 5, OLED_HEIGHT, StartTweenTime, TweenStyle);
 8003302:	2315      	movs	r3, #21
 8003304:	9303      	str	r3, [sp, #12]
 8003306:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800330a:	9302      	str	r3, [sp, #8]
 800330c:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8003310:	9301      	str	r3, [sp, #4]
 8003312:	4b60      	ldr	r3, [pc, #384]	@ (8003494 <System_UI_Loop+0x5d8>)
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 800331a:	4a5e      	ldr	r2, [pc, #376]	@ (8003494 <System_UI_Loop+0x5d8>)
 800331c:	496b      	ldr	r1, [pc, #428]	@ (80034cc <System_UI_Loop+0x610>)
 800331e:	4860      	ldr	r0, [pc, #384]	@ (80034a0 <System_UI_Loop+0x5e4>)
 8003320:	f004 ff2d 	bl	800817e <OLED_MoveObject>

#pragma endregion 关于栏

#pragma region 主菜单动画
        OLED_MoveObject(&g_AnimationManager, "TitleBGScale", 0, 8, strlen("Epicful Games") * 6 + 3, 8, StartTweenTime, EASE_INOUT_CUBIC);
 8003324:	2306      	movs	r3, #6
 8003326:	9303      	str	r3, [sp, #12]
 8003328:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800332c:	9302      	str	r3, [sp, #8]
 800332e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	4b66      	ldr	r3, [pc, #408]	@ (80034d0 <System_UI_Loop+0x614>)
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	4964      	ldr	r1, [pc, #400]	@ (80034d4 <System_UI_Loop+0x618>)
 8003342:	4865      	ldr	r0, [pc, #404]	@ (80034d8 <System_UI_Loop+0x61c>)
 8003344:	f004 ff1b 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "Cursor", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * menuSelection, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * menuSelection, StartTweenTime, TweenStyle);
 8003348:	4b64      	ldr	r3, [pc, #400]	@ (80034dc <System_UI_Loop+0x620>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	4613      	mov	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4413      	add	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	3303      	adds	r3, #3
 800335a:	4618      	mov	r0, r3
 800335c:	f7fc ffc2 	bl	80002e4 <__aeabi_i2f>
 8003360:	4604      	mov	r4, r0
 8003362:	4b5e      	ldr	r3, [pc, #376]	@ (80034dc <System_UI_Loop+0x620>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	4613      	mov	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	3303      	adds	r3, #3
 8003374:	4618      	mov	r0, r3
 8003376:	f7fc ffb5 	bl	80002e4 <__aeabi_i2f>
 800337a:	4603      	mov	r3, r0
 800337c:	2215      	movs	r2, #21
 800337e:	9203      	str	r2, [sp, #12]
 8003380:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003384:	9202      	str	r2, [sp, #8]
 8003386:	9301      	str	r3, [sp, #4]
 8003388:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	4623      	mov	r3, r4
 8003390:	4a3a      	ldr	r2, [pc, #232]	@ (800347c <System_UI_Loop+0x5c0>)
 8003392:	4953      	ldr	r1, [pc, #332]	@ (80034e0 <System_UI_Loop+0x624>)
 8003394:	4850      	ldr	r0, [pc, #320]	@ (80034d8 <System_UI_Loop+0x61c>)
 8003396:	f004 fef2 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "CursorScale", 0, 10, strlen("Games") * 6 + 3, 10, StartTweenTime, TweenStyle);
 800339a:	2315      	movs	r3, #21
 800339c:	9303      	str	r3, [sp, #12]
 800339e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80033a2:	9302      	str	r3, [sp, #8]
 80033a4:	4b4f      	ldr	r3, [pc, #316]	@ (80034e4 <System_UI_Loop+0x628>)
 80033a6:	9301      	str	r3, [sp, #4]
 80033a8:	4b4f      	ldr	r3, [pc, #316]	@ (80034e8 <System_UI_Loop+0x62c>)
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	4b4d      	ldr	r3, [pc, #308]	@ (80034e4 <System_UI_Loop+0x628>)
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	494e      	ldr	r1, [pc, #312]	@ (80034ec <System_UI_Loop+0x630>)
 80033b4:	4848      	ldr	r0, [pc, #288]	@ (80034d8 <System_UI_Loop+0x61c>)
 80033b6:	f004 fee2 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, StartTweenTime, TweenStyle);
 80033ba:	2315      	movs	r3, #21
 80033bc:	9303      	str	r3, [sp, #12]
 80033be:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80033c2:	9302      	str	r3, [sp, #8]
 80033c4:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80033d4:	4a29      	ldr	r2, [pc, #164]	@ (800347c <System_UI_Loop+0x5c0>)
 80033d6:	4946      	ldr	r1, [pc, #280]	@ (80034f0 <System_UI_Loop+0x634>)
 80033d8:	4846      	ldr	r0, [pc, #280]	@ (80034f4 <System_UI_Loop+0x638>)
 80033da:	f004 fed0 	bl	800817e <OLED_MoveObject>
        HAL_Delay(100);
 80033de:	2064      	movs	r0, #100	@ 0x64
 80033e0:	f005 ffc4 	bl	800936c <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, StartTweenTime, TweenStyle);
 80033e4:	2315      	movs	r3, #21
 80033e6:	9303      	str	r3, [sp, #12]
 80033e8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80033ec:	9302      	str	r3, [sp, #8]
 80033ee:	4b26      	ldr	r3, [pc, #152]	@ (8003488 <System_UI_Loop+0x5cc>)
 80033f0:	9301      	str	r3, [sp, #4]
 80033f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	4b23      	ldr	r3, [pc, #140]	@ (8003488 <System_UI_Loop+0x5cc>)
 80033fa:	4a20      	ldr	r2, [pc, #128]	@ (800347c <System_UI_Loop+0x5c0>)
 80033fc:	493e      	ldr	r1, [pc, #248]	@ (80034f8 <System_UI_Loop+0x63c>)
 80033fe:	483d      	ldr	r0, [pc, #244]	@ (80034f4 <System_UI_Loop+0x638>)
 8003400:	f004 febd 	bl	800817e <OLED_MoveObject>
        HAL_Delay(100);
 8003404:	2064      	movs	r0, #100	@ 0x64
 8003406:	f005 ffb1 	bl	800936c <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, StartTweenTime, TweenStyle);
 800340a:	2315      	movs	r3, #21
 800340c:	9303      	str	r3, [sp, #12]
 800340e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003412:	9302      	str	r3, [sp, #8]
 8003414:	4b24      	ldr	r3, [pc, #144]	@ (80034a8 <System_UI_Loop+0x5ec>)
 8003416:	9301      	str	r3, [sp, #4]
 8003418:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	4b22      	ldr	r3, [pc, #136]	@ (80034a8 <System_UI_Loop+0x5ec>)
 8003420:	4a16      	ldr	r2, [pc, #88]	@ (800347c <System_UI_Loop+0x5c0>)
 8003422:	4936      	ldr	r1, [pc, #216]	@ (80034fc <System_UI_Loop+0x640>)
 8003424:	4833      	ldr	r0, [pc, #204]	@ (80034f4 <System_UI_Loop+0x638>)
 8003426:	f004 feaa 	bl	800817e <OLED_MoveObject>
        HAL_Delay(100);
 800342a:	2064      	movs	r0, #100	@ 0x64
 800342c:	f005 ff9e 	bl	800936c <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, StartTweenTime, TweenStyle);
 8003430:	2315      	movs	r3, #21
 8003432:	9303      	str	r3, [sp, #12]
 8003434:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003438:	9302      	str	r3, [sp, #8]
 800343a:	4b31      	ldr	r3, [pc, #196]	@ (8003500 <System_UI_Loop+0x644>)
 800343c:	9301      	str	r3, [sp, #4]
 800343e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	4b2e      	ldr	r3, [pc, #184]	@ (8003500 <System_UI_Loop+0x644>)
 8003446:	4a0d      	ldr	r2, [pc, #52]	@ (800347c <System_UI_Loop+0x5c0>)
 8003448:	492e      	ldr	r1, [pc, #184]	@ (8003504 <System_UI_Loop+0x648>)
 800344a:	482a      	ldr	r0, [pc, #168]	@ (80034f4 <System_UI_Loop+0x638>)
 800344c:	f004 fe97 	bl	800817e <OLED_MoveObject>
        HAL_Delay(100);
 8003450:	2064      	movs	r0, #100	@ 0x64
 8003452:	f005 ff8b 	bl	800936c <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, StartTweenTime, TweenStyle);
 8003456:	2315      	movs	r3, #21
 8003458:	9303      	str	r3, [sp, #12]
 800345a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800345e:	9302      	str	r3, [sp, #8]
 8003460:	4b29      	ldr	r3, [pc, #164]	@ (8003508 <System_UI_Loop+0x64c>)
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003468:	e050      	b.n	800350c <System_UI_Loop+0x650>
 800346a:	bf00      	nop
 800346c:	42480000 	.word	0x42480000
 8003470:	43160000 	.word	0x43160000
 8003474:	0800e634 	.word	0x0800e634
 8003478:	20003210 	.word	0x20003210
 800347c:	c2b40000 	.word	0xc2b40000
 8003480:	0800e63c 	.word	0x0800e63c
 8003484:	20002628 	.word	0x20002628
 8003488:	41e80000 	.word	0x41e80000
 800348c:	0800e644 	.word	0x0800e644
 8003490:	42940000 	.word	0x42940000
 8003494:	40a00000 	.word	0x40a00000
 8003498:	0800e650 	.word	0x0800e650
 800349c:	0800e654 	.word	0x0800e654
 80034a0:	20002c1c 	.word	0x20002c1c
 80034a4:	0800e660 	.word	0x0800e660
 80034a8:	42280000 	.word	0x42280000
 80034ac:	0800e668 	.word	0x0800e668
 80034b0:	0800e670 	.word	0x0800e670
 80034b4:	0800e67c 	.word	0x0800e67c
 80034b8:	41980000 	.word	0x41980000
 80034bc:	43050000 	.word	0x43050000
 80034c0:	0800e68c 	.word	0x0800e68c
 80034c4:	40400000 	.word	0x40400000
 80034c8:	0800e69c 	.word	0x0800e69c
 80034cc:	0800e6a4 	.word	0x0800e6a4
 80034d0:	42a20000 	.word	0x42a20000
 80034d4:	0800e6b4 	.word	0x0800e6b4
 80034d8:	20003df8 	.word	0x20003df8
 80034dc:	2000043d 	.word	0x2000043d
 80034e0:	0800e6c4 	.word	0x0800e6c4
 80034e4:	41200000 	.word	0x41200000
 80034e8:	42040000 	.word	0x42040000
 80034ec:	0800e6cc 	.word	0x0800e6cc
 80034f0:	0800e6d8 	.word	0x0800e6d8
 80034f4:	2000144c 	.word	0x2000144c
 80034f8:	0800e6e4 	.word	0x0800e6e4
 80034fc:	0800e6f0 	.word	0x0800e6f0
 8003500:	425c0000 	.word	0x425c0000
 8003504:	0800e700 	.word	0x0800e700
 8003508:	42880000 	.word	0x42880000
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	4bb0      	ldr	r3, [pc, #704]	@ (80037d0 <System_UI_Loop+0x914>)
 8003510:	4ab0      	ldr	r2, [pc, #704]	@ (80037d4 <System_UI_Loop+0x918>)
 8003512:	49b1      	ldr	r1, [pc, #708]	@ (80037d8 <System_UI_Loop+0x91c>)
 8003514:	48b1      	ldr	r0, [pc, #708]	@ (80037dc <System_UI_Loop+0x920>)
 8003516:	f004 fe32 	bl	800817e <OLED_MoveObject>

        OLED_MoveObject(&Menu_AnimationManager, "IconGames", OLED_ICON_START_X , OLED_ICON_START_Y, OLED_ICON_END_X , OLED_ICON_END_Y, StartTweenTime, TweenStyle);
 800351a:	2315      	movs	r3, #21
 800351c:	9303      	str	r3, [sp, #12]
 800351e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003522:	9302      	str	r3, [sp, #8]
 8003524:	4bae      	ldr	r3, [pc, #696]	@ (80037e0 <System_UI_Loop+0x924>)
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	4bae      	ldr	r3, [pc, #696]	@ (80037e4 <System_UI_Loop+0x928>)
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	4bac      	ldr	r3, [pc, #688]	@ (80037e0 <System_UI_Loop+0x924>)
 800352e:	4aae      	ldr	r2, [pc, #696]	@ (80037e8 <System_UI_Loop+0x92c>)
 8003530:	49ae      	ldr	r1, [pc, #696]	@ (80037ec <System_UI_Loop+0x930>)
 8003532:	48aa      	ldr	r0, [pc, #680]	@ (80037dc <System_UI_Loop+0x920>)
 8003534:	f004 fe23 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&Menu_AnimationManager, "IconTools", OLED_ICON_START_X , OLED_ICON_START_Y, OLED_ICON_START_X , OLED_ICON_START_Y, StartTweenTime, TweenStyle);
 8003538:	2315      	movs	r3, #21
 800353a:	9303      	str	r3, [sp, #12]
 800353c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003540:	9302      	str	r3, [sp, #8]
 8003542:	4ba7      	ldr	r3, [pc, #668]	@ (80037e0 <System_UI_Loop+0x924>)
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	4ba8      	ldr	r3, [pc, #672]	@ (80037e8 <System_UI_Loop+0x92c>)
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	4ba5      	ldr	r3, [pc, #660]	@ (80037e0 <System_UI_Loop+0x924>)
 800354c:	4aa6      	ldr	r2, [pc, #664]	@ (80037e8 <System_UI_Loop+0x92c>)
 800354e:	49a8      	ldr	r1, [pc, #672]	@ (80037f0 <System_UI_Loop+0x934>)
 8003550:	48a2      	ldr	r0, [pc, #648]	@ (80037dc <System_UI_Loop+0x920>)
 8003552:	f004 fe14 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&Menu_AnimationManager, "IconStatus", OLED_ICON_START_X , OLED_ICON_START_Y, OLED_ICON_START_X , OLED_ICON_START_Y, StartTweenTime, TweenStyle);
 8003556:	2315      	movs	r3, #21
 8003558:	9303      	str	r3, [sp, #12]
 800355a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800355e:	9302      	str	r3, [sp, #8]
 8003560:	4b9f      	ldr	r3, [pc, #636]	@ (80037e0 <System_UI_Loop+0x924>)
 8003562:	9301      	str	r3, [sp, #4]
 8003564:	4ba0      	ldr	r3, [pc, #640]	@ (80037e8 <System_UI_Loop+0x92c>)
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	4b9d      	ldr	r3, [pc, #628]	@ (80037e0 <System_UI_Loop+0x924>)
 800356a:	4a9f      	ldr	r2, [pc, #636]	@ (80037e8 <System_UI_Loop+0x92c>)
 800356c:	49a1      	ldr	r1, [pc, #644]	@ (80037f4 <System_UI_Loop+0x938>)
 800356e:	489b      	ldr	r0, [pc, #620]	@ (80037dc <System_UI_Loop+0x920>)
 8003570:	f004 fe05 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&Menu_AnimationManager, "IconSettings", OLED_ICON_START_X , OLED_ICON_START_Y, OLED_ICON_START_X , OLED_ICON_START_Y, StartTweenTime, TweenStyle);
 8003574:	2315      	movs	r3, #21
 8003576:	9303      	str	r3, [sp, #12]
 8003578:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800357c:	9302      	str	r3, [sp, #8]
 800357e:	4b98      	ldr	r3, [pc, #608]	@ (80037e0 <System_UI_Loop+0x924>)
 8003580:	9301      	str	r3, [sp, #4]
 8003582:	4b99      	ldr	r3, [pc, #612]	@ (80037e8 <System_UI_Loop+0x92c>)
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	4b96      	ldr	r3, [pc, #600]	@ (80037e0 <System_UI_Loop+0x924>)
 8003588:	4a97      	ldr	r2, [pc, #604]	@ (80037e8 <System_UI_Loop+0x92c>)
 800358a:	499b      	ldr	r1, [pc, #620]	@ (80037f8 <System_UI_Loop+0x93c>)
 800358c:	4893      	ldr	r0, [pc, #588]	@ (80037dc <System_UI_Loop+0x920>)
 800358e:	f004 fdf6 	bl	800817e <OLED_MoveObject>
        OLED_MoveObject(&Menu_AnimationManager, "IconAbout", OLED_ICON_START_X , OLED_ICON_START_Y, OLED_ICON_START_X , OLED_ICON_START_Y, StartTweenTime, TweenStyle);
 8003592:	2315      	movs	r3, #21
 8003594:	9303      	str	r3, [sp, #12]
 8003596:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800359a:	9302      	str	r3, [sp, #8]
 800359c:	4b90      	ldr	r3, [pc, #576]	@ (80037e0 <System_UI_Loop+0x924>)
 800359e:	9301      	str	r3, [sp, #4]
 80035a0:	4b91      	ldr	r3, [pc, #580]	@ (80037e8 <System_UI_Loop+0x92c>)
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	4b8e      	ldr	r3, [pc, #568]	@ (80037e0 <System_UI_Loop+0x924>)
 80035a6:	4a90      	ldr	r2, [pc, #576]	@ (80037e8 <System_UI_Loop+0x92c>)
 80035a8:	4994      	ldr	r1, [pc, #592]	@ (80037fc <System_UI_Loop+0x940>)
 80035aa:	488c      	ldr	r0, [pc, #560]	@ (80037dc <System_UI_Loop+0x920>)
 80035ac:	f004 fde7 	bl	800817e <OLED_MoveObject>
#pragma endregion 主菜单动画

        preMenuSelection = menuSelection;
 80035b0:	4b93      	ldr	r3, [pc, #588]	@ (8003800 <System_UI_Loop+0x944>)
 80035b2:	781a      	ldrb	r2, [r3, #0]
 80035b4:	4b93      	ldr	r3, [pc, #588]	@ (8003804 <System_UI_Loop+0x948>)
 80035b6:	701a      	strb	r2, [r3, #0]
        isFirstRun = false;
 80035b8:	4b93      	ldr	r3, [pc, #588]	@ (8003808 <System_UI_Loop+0x94c>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	701a      	strb	r2, [r3, #0]
        OLED_UpdateDisplayVSync();
 80035be:	f7fe fff3 	bl	80025a8 <OLED_UpdateDisplayVSync>
    }

#pragma region pager //翻页的函数

    if (menuRank == 1)
 80035c2:	4b92      	ldr	r3, [pc, #584]	@ (800380c <System_UI_Loop+0x950>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d178      	bne.n	80036bc <System_UI_Loop+0x800>
    {
        OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 80035ca:	4b8d      	ldr	r3, [pc, #564]	@ (8003800 <System_UI_Loop+0x944>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	f1c3 0202 	rsb	r2, r3, #2
 80035d2:	4613      	mov	r3, r2
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	3303      	adds	r3, #3
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fc fe80 	bl	80002e4 <__aeabi_i2f>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2203      	movs	r2, #3
 80035e8:	9201      	str	r2, [sp, #4]
 80035ea:	22c8      	movs	r2, #200	@ 0xc8
 80035ec:	9200      	str	r2, [sp, #0]
 80035ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80035f2:	4987      	ldr	r1, [pc, #540]	@ (8003810 <System_UI_Loop+0x954>)
 80035f4:	4879      	ldr	r0, [pc, #484]	@ (80037dc <System_UI_Loop+0x920>)
 80035f6:	f004 fe79 	bl	80082ec <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 80035fa:	4b81      	ldr	r3, [pc, #516]	@ (8003800 <System_UI_Loop+0x944>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	f1c3 0203 	rsb	r2, r3, #3
 8003602:	4613      	mov	r3, r2
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	3303      	adds	r3, #3
 800360e:	4618      	mov	r0, r3
 8003610:	f7fc fe68 	bl	80002e4 <__aeabi_i2f>
 8003614:	4603      	mov	r3, r0
 8003616:	2203      	movs	r2, #3
 8003618:	9201      	str	r2, [sp, #4]
 800361a:	22c8      	movs	r2, #200	@ 0xc8
 800361c:	9200      	str	r2, [sp, #0]
 800361e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003622:	497c      	ldr	r1, [pc, #496]	@ (8003814 <System_UI_Loop+0x958>)
 8003624:	486d      	ldr	r0, [pc, #436]	@ (80037dc <System_UI_Loop+0x920>)
 8003626:	f004 fe61 	bl	80082ec <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 800362a:	4b75      	ldr	r3, [pc, #468]	@ (8003800 <System_UI_Loop+0x944>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	f1c3 0204 	rsb	r2, r3, #4
 8003632:	4613      	mov	r3, r2
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	3303      	adds	r3, #3
 800363e:	4618      	mov	r0, r3
 8003640:	f7fc fe50 	bl	80002e4 <__aeabi_i2f>
 8003644:	4603      	mov	r3, r0
 8003646:	2203      	movs	r2, #3
 8003648:	9201      	str	r2, [sp, #4]
 800364a:	22c8      	movs	r2, #200	@ 0xc8
 800364c:	9200      	str	r2, [sp, #0]
 800364e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003652:	4971      	ldr	r1, [pc, #452]	@ (8003818 <System_UI_Loop+0x95c>)
 8003654:	4861      	ldr	r0, [pc, #388]	@ (80037dc <System_UI_Loop+0x920>)
 8003656:	f004 fe49 	bl	80082ec <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 800365a:	4b69      	ldr	r3, [pc, #420]	@ (8003800 <System_UI_Loop+0x944>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	f1c3 0205 	rsb	r2, r3, #5
 8003662:	4613      	mov	r3, r2
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	3303      	adds	r3, #3
 800366e:	4618      	mov	r0, r3
 8003670:	f7fc fe38 	bl	80002e4 <__aeabi_i2f>
 8003674:	4603      	mov	r3, r0
 8003676:	2203      	movs	r2, #3
 8003678:	9201      	str	r2, [sp, #4]
 800367a:	22c8      	movs	r2, #200	@ 0xc8
 800367c:	9200      	str	r2, [sp, #0]
 800367e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003682:	4966      	ldr	r1, [pc, #408]	@ (800381c <System_UI_Loop+0x960>)
 8003684:	4855      	ldr	r0, [pc, #340]	@ (80037dc <System_UI_Loop+0x920>)
 8003686:	f004 fe31 	bl	80082ec <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 800368a:	4b5d      	ldr	r3, [pc, #372]	@ (8003800 <System_UI_Loop+0x944>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	f1c3 0206 	rsb	r2, r3, #6
 8003692:	4613      	mov	r3, r2
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	4413      	add	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	3303      	adds	r3, #3
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fc fe20 	bl	80002e4 <__aeabi_i2f>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2203      	movs	r2, #3
 80036a8:	9201      	str	r2, [sp, #4]
 80036aa:	22c8      	movs	r2, #200	@ 0xc8
 80036ac:	9200      	str	r2, [sp, #0]
 80036ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80036b2:	4949      	ldr	r1, [pc, #292]	@ (80037d8 <System_UI_Loop+0x91c>)
 80036b4:	4849      	ldr	r0, [pc, #292]	@ (80037dc <System_UI_Loop+0x920>)
 80036b6:	f004 fe19 	bl	80082ec <OLED_DoTweenObject>
 80036ba:	e18b      	b.n	80039d4 <System_UI_Loop+0xb18>
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_GAMES)
 80036bc:	4b53      	ldr	r3, [pc, #332]	@ (800380c <System_UI_Loop+0x950>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d14c      	bne.n	800375e <System_UI_Loop+0x8a2>
 80036c4:	4b56      	ldr	r3, [pc, #344]	@ (8003820 <System_UI_Loop+0x964>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b05      	cmp	r3, #5
 80036ca:	d148      	bne.n	800375e <System_UI_Loop+0x8a2>
    {
        OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 80036cc:	4b4c      	ldr	r3, [pc, #304]	@ (8003800 <System_UI_Loop+0x944>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	f1c3 0202 	rsb	r2, r3, #2
 80036d4:	4613      	mov	r3, r2
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	3303      	adds	r3, #3
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fc fdff 	bl	80002e4 <__aeabi_i2f>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2203      	movs	r2, #3
 80036ea:	9201      	str	r2, [sp, #4]
 80036ec:	22c8      	movs	r2, #200	@ 0xc8
 80036ee:	9200      	str	r2, [sp, #0]
 80036f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80036f4:	494b      	ldr	r1, [pc, #300]	@ (8003824 <System_UI_Loop+0x968>)
 80036f6:	484c      	ldr	r0, [pc, #304]	@ (8003828 <System_UI_Loop+0x96c>)
 80036f8:	f004 fdf8 	bl	80082ec <OLED_DoTweenObject>
        OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 80036fc:	4b40      	ldr	r3, [pc, #256]	@ (8003800 <System_UI_Loop+0x944>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	f1c3 0203 	rsb	r2, r3, #3
 8003704:	4613      	mov	r3, r2
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	3303      	adds	r3, #3
 8003710:	4618      	mov	r0, r3
 8003712:	f7fc fde7 	bl	80002e4 <__aeabi_i2f>
 8003716:	4603      	mov	r3, r0
 8003718:	2203      	movs	r2, #3
 800371a:	9201      	str	r2, [sp, #4]
 800371c:	22c8      	movs	r2, #200	@ 0xc8
 800371e:	9200      	str	r2, [sp, #0]
 8003720:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003724:	4941      	ldr	r1, [pc, #260]	@ (800382c <System_UI_Loop+0x970>)
 8003726:	4840      	ldr	r0, [pc, #256]	@ (8003828 <System_UI_Loop+0x96c>)
 8003728:	f004 fde0 	bl	80082ec <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 800372c:	4b34      	ldr	r3, [pc, #208]	@ (8003800 <System_UI_Loop+0x944>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	f1c3 0204 	rsb	r2, r3, #4
 8003734:	4613      	mov	r3, r2
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	3303      	adds	r3, #3
 8003740:	4618      	mov	r0, r3
 8003742:	f7fc fdcf 	bl	80002e4 <__aeabi_i2f>
 8003746:	4603      	mov	r3, r0
 8003748:	2203      	movs	r2, #3
 800374a:	9201      	str	r2, [sp, #4]
 800374c:	22c8      	movs	r2, #200	@ 0xc8
 800374e:	9200      	str	r2, [sp, #0]
 8003750:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003754:	4936      	ldr	r1, [pc, #216]	@ (8003830 <System_UI_Loop+0x974>)
 8003756:	4837      	ldr	r0, [pc, #220]	@ (8003834 <System_UI_Loop+0x978>)
 8003758:	f004 fdc8 	bl	80082ec <OLED_DoTweenObject>
 800375c:	e13a      	b.n	80039d4 <System_UI_Loop+0xb18>
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_TOOLS)
 800375e:	4b2b      	ldr	r3, [pc, #172]	@ (800380c <System_UI_Loop+0x950>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d16c      	bne.n	8003840 <System_UI_Loop+0x984>
 8003766:	4b2e      	ldr	r3, [pc, #184]	@ (8003820 <System_UI_Loop+0x964>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	2b04      	cmp	r3, #4
 800376c:	d168      	bne.n	8003840 <System_UI_Loop+0x984>
    {
        OLED_DoTweenObject(&Tools_AnimationManager, "VideoPlayer", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 800376e:	4b24      	ldr	r3, [pc, #144]	@ (8003800 <System_UI_Loop+0x944>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	f1c3 0202 	rsb	r2, r3, #2
 8003776:	4613      	mov	r3, r2
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	3303      	adds	r3, #3
 8003782:	4618      	mov	r0, r3
 8003784:	f7fc fdae 	bl	80002e4 <__aeabi_i2f>
 8003788:	4603      	mov	r3, r0
 800378a:	2203      	movs	r2, #3
 800378c:	9201      	str	r2, [sp, #4]
 800378e:	22c8      	movs	r2, #200	@ 0xc8
 8003790:	9200      	str	r2, [sp, #0]
 8003792:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003796:	4928      	ldr	r1, [pc, #160]	@ (8003838 <System_UI_Loop+0x97c>)
 8003798:	4828      	ldr	r0, [pc, #160]	@ (800383c <System_UI_Loop+0x980>)
 800379a:	f004 fda7 	bl	80082ec <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 800379e:	4b18      	ldr	r3, [pc, #96]	@ (8003800 <System_UI_Loop+0x944>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	f1c3 0203 	rsb	r2, r3, #3
 80037a6:	4613      	mov	r3, r2
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	3303      	adds	r3, #3
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fc fd96 	bl	80002e4 <__aeabi_i2f>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2203      	movs	r2, #3
 80037bc:	9201      	str	r2, [sp, #4]
 80037be:	22c8      	movs	r2, #200	@ 0xc8
 80037c0:	9200      	str	r2, [sp, #0]
 80037c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80037c6:	491a      	ldr	r1, [pc, #104]	@ (8003830 <System_UI_Loop+0x974>)
 80037c8:	481a      	ldr	r0, [pc, #104]	@ (8003834 <System_UI_Loop+0x978>)
 80037ca:	f004 fd8f 	bl	80082ec <OLED_DoTweenObject>
 80037ce:	e101      	b.n	80039d4 <System_UI_Loop+0xb18>
 80037d0:	42880000 	.word	0x42880000
 80037d4:	c2b40000 	.word	0xc2b40000
 80037d8:	0800e710 	.word	0x0800e710
 80037dc:	2000144c 	.word	0x2000144c
 80037e0:	41980000 	.word	0x41980000
 80037e4:	42a20000 	.word	0x42a20000
 80037e8:	43050000 	.word	0x43050000
 80037ec:	0800e71c 	.word	0x0800e71c
 80037f0:	0800e728 	.word	0x0800e728
 80037f4:	0800e734 	.word	0x0800e734
 80037f8:	0800e740 	.word	0x0800e740
 80037fc:	0800e750 	.word	0x0800e750
 8003800:	2000043d 	.word	0x2000043d
 8003804:	20001035 	.word	0x20001035
 8003808:	2000043f 	.word	0x2000043f
 800380c:	2000043c 	.word	0x2000043c
 8003810:	0800e6d8 	.word	0x0800e6d8
 8003814:	0800e6e4 	.word	0x0800e6e4
 8003818:	0800e6f0 	.word	0x0800e6f0
 800381c:	0800e700 	.word	0x0800e700
 8003820:	20001034 	.word	0x20001034
 8003824:	0800e5f8 	.word	0x0800e5f8
 8003828:	20001a40 	.word	0x20001a40
 800382c:	0800e600 	.word	0x0800e600
 8003830:	0800e608 	.word	0x0800e608
 8003834:	20003df8 	.word	0x20003df8
 8003838:	0800e614 	.word	0x0800e614
 800383c:	20002034 	.word	0x20002034
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_SETTINGS)
 8003840:	4b28      	ldr	r3, [pc, #160]	@ (80038e4 <System_UI_Loop+0xa28>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b02      	cmp	r3, #2
 8003846:	d15d      	bne.n	8003904 <System_UI_Loop+0xa48>
 8003848:	4b27      	ldr	r3, [pc, #156]	@ (80038e8 <System_UI_Loop+0xa2c>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d159      	bne.n	8003904 <System_UI_Loop+0xa48>
    {
        OLED_DoTweenObject(&Settings_AnimationManager, "ShowFPS", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 8003850:	4b26      	ldr	r3, [pc, #152]	@ (80038ec <System_UI_Loop+0xa30>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	f1c3 0202 	rsb	r2, r3, #2
 8003858:	4613      	mov	r3, r2
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	3303      	adds	r3, #3
 8003864:	4618      	mov	r0, r3
 8003866:	f7fc fd3d 	bl	80002e4 <__aeabi_i2f>
 800386a:	4603      	mov	r3, r0
 800386c:	2203      	movs	r2, #3
 800386e:	9201      	str	r2, [sp, #4]
 8003870:	22c8      	movs	r2, #200	@ 0xc8
 8003872:	9200      	str	r2, [sp, #0]
 8003874:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003878:	491d      	ldr	r1, [pc, #116]	@ (80038f0 <System_UI_Loop+0xa34>)
 800387a:	481e      	ldr	r0, [pc, #120]	@ (80038f4 <System_UI_Loop+0xa38>)
 800387c:	f004 fd36 	bl	80082ec <OLED_DoTweenObject>
        OLED_DoTweenObject(&Settings_AnimationManager, "Lightness", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 8003880:	4b1a      	ldr	r3, [pc, #104]	@ (80038ec <System_UI_Loop+0xa30>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	f1c3 0203 	rsb	r2, r3, #3
 8003888:	4613      	mov	r3, r2
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	3303      	adds	r3, #3
 8003894:	4618      	mov	r0, r3
 8003896:	f7fc fd25 	bl	80002e4 <__aeabi_i2f>
 800389a:	4603      	mov	r3, r0
 800389c:	2203      	movs	r2, #3
 800389e:	9201      	str	r2, [sp, #4]
 80038a0:	22c8      	movs	r2, #200	@ 0xc8
 80038a2:	9200      	str	r2, [sp, #0]
 80038a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80038a8:	4913      	ldr	r1, [pc, #76]	@ (80038f8 <System_UI_Loop+0xa3c>)
 80038aa:	4812      	ldr	r0, [pc, #72]	@ (80038f4 <System_UI_Loop+0xa38>)
 80038ac:	f004 fd1e 	bl	80082ec <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 80038b0:	4b0e      	ldr	r3, [pc, #56]	@ (80038ec <System_UI_Loop+0xa30>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	f1c3 0204 	rsb	r2, r3, #4
 80038b8:	4613      	mov	r3, r2
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	3303      	adds	r3, #3
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fc fd0d 	bl	80002e4 <__aeabi_i2f>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2203      	movs	r2, #3
 80038ce:	9201      	str	r2, [sp, #4]
 80038d0:	22c8      	movs	r2, #200	@ 0xc8
 80038d2:	9200      	str	r2, [sp, #0]
 80038d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80038d8:	4908      	ldr	r1, [pc, #32]	@ (80038fc <System_UI_Loop+0xa40>)
 80038da:	4809      	ldr	r0, [pc, #36]	@ (8003900 <System_UI_Loop+0xa44>)
 80038dc:	f004 fd06 	bl	80082ec <OLED_DoTweenObject>
 80038e0:	e078      	b.n	80039d4 <System_UI_Loop+0xb18>
 80038e2:	bf00      	nop
 80038e4:	2000043c 	.word	0x2000043c
 80038e8:	20001034 	.word	0x20001034
 80038ec:	2000043d 	.word	0x2000043d
 80038f0:	0800e63c 	.word	0x0800e63c
 80038f4:	20002628 	.word	0x20002628
 80038f8:	0800e644 	.word	0x0800e644
 80038fc:	0800e608 	.word	0x0800e608
 8003900:	20003df8 	.word	0x20003df8
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_ABOUT)
 8003904:	4bbd      	ldr	r3, [pc, #756]	@ (8003bfc <System_UI_Loop+0xd40>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b02      	cmp	r3, #2
 800390a:	d163      	bne.n	80039d4 <System_UI_Loop+0xb18>
 800390c:	4bbc      	ldr	r3, [pc, #752]	@ (8003c00 <System_UI_Loop+0xd44>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b03      	cmp	r3, #3
 8003912:	d15f      	bne.n	80039d4 <System_UI_Loop+0xb18>
    {
        OLED_DoTweenObject(&About_AnimationManager, "Developer", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 8003914:	4bbb      	ldr	r3, [pc, #748]	@ (8003c04 <System_UI_Loop+0xd48>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	f1c3 0202 	rsb	r2, r3, #2
 800391c:	4613      	mov	r3, r2
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	3303      	adds	r3, #3
 8003928:	4618      	mov	r0, r3
 800392a:	f7fc fcdb 	bl	80002e4 <__aeabi_i2f>
 800392e:	4603      	mov	r3, r0
 8003930:	2203      	movs	r2, #3
 8003932:	9201      	str	r2, [sp, #4]
 8003934:	22c8      	movs	r2, #200	@ 0xc8
 8003936:	9200      	str	r2, [sp, #0]
 8003938:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800393c:	49b2      	ldr	r1, [pc, #712]	@ (8003c08 <System_UI_Loop+0xd4c>)
 800393e:	48b3      	ldr	r0, [pc, #716]	@ (8003c0c <System_UI_Loop+0xd50>)
 8003940:	f004 fcd4 	bl	80082ec <OLED_DoTweenObject>
        OLED_DoTweenObject(&About_AnimationManager, "Github", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 8003944:	4baf      	ldr	r3, [pc, #700]	@ (8003c04 <System_UI_Loop+0xd48>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	f1c3 0203 	rsb	r2, r3, #3
 800394c:	4613      	mov	r3, r2
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	3303      	adds	r3, #3
 8003958:	4618      	mov	r0, r3
 800395a:	f7fc fcc3 	bl	80002e4 <__aeabi_i2f>
 800395e:	4603      	mov	r3, r0
 8003960:	2203      	movs	r2, #3
 8003962:	9201      	str	r2, [sp, #4]
 8003964:	22c8      	movs	r2, #200	@ 0xc8
 8003966:	9200      	str	r2, [sp, #0]
 8003968:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800396c:	49a8      	ldr	r1, [pc, #672]	@ (8003c10 <System_UI_Loop+0xd54>)
 800396e:	48a7      	ldr	r0, [pc, #668]	@ (8003c0c <System_UI_Loop+0xd50>)
 8003970:	f004 fcbc 	bl	80082ec <OLED_DoTweenObject>
        OLED_DoTweenObject(&About_AnimationManager, "Donate", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 8003974:	4ba3      	ldr	r3, [pc, #652]	@ (8003c04 <System_UI_Loop+0xd48>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	f1c3 0204 	rsb	r2, r3, #4
 800397c:	4613      	mov	r3, r2
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	3303      	adds	r3, #3
 8003988:	4618      	mov	r0, r3
 800398a:	f7fc fcab 	bl	80002e4 <__aeabi_i2f>
 800398e:	4603      	mov	r3, r0
 8003990:	2203      	movs	r2, #3
 8003992:	9201      	str	r2, [sp, #4]
 8003994:	22c8      	movs	r2, #200	@ 0xc8
 8003996:	9200      	str	r2, [sp, #0]
 8003998:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800399c:	499d      	ldr	r1, [pc, #628]	@ (8003c14 <System_UI_Loop+0xd58>)
 800399e:	489b      	ldr	r0, [pc, #620]	@ (8003c0c <System_UI_Loop+0xd50>)
 80039a0:	f004 fca4 	bl	80082ec <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 80039a4:	4b97      	ldr	r3, [pc, #604]	@ (8003c04 <System_UI_Loop+0xd48>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	f1c3 0205 	rsb	r2, r3, #5
 80039ac:	4613      	mov	r3, r2
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	3303      	adds	r3, #3
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fc fc93 	bl	80002e4 <__aeabi_i2f>
 80039be:	4603      	mov	r3, r0
 80039c0:	2203      	movs	r2, #3
 80039c2:	9201      	str	r2, [sp, #4]
 80039c4:	22c8      	movs	r2, #200	@ 0xc8
 80039c6:	9200      	str	r2, [sp, #0]
 80039c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80039cc:	4992      	ldr	r1, [pc, #584]	@ (8003c18 <System_UI_Loop+0xd5c>)
 80039ce:	4893      	ldr	r0, [pc, #588]	@ (8003c1c <System_UI_Loop+0xd60>)
 80039d0:	f004 fc8c 	bl	80082ec <OLED_DoTweenObject>
    }

#pragma endregion pager

#pragma region DRAWER //画出你的UI
    OLED_GetObjectPosition(&Menu_AnimationManager, "IconGames", &x, &y);
 80039d4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80039d8:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80039dc:	4990      	ldr	r1, [pc, #576]	@ (8003c20 <System_UI_Loop+0xd64>)
 80039de:	4891      	ldr	r0, [pc, #580]	@ (8003c24 <System_UI_Loop+0xd68>)
 80039e0:	f004 fba9 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DrawIcon(x, y, ICON_GAME);
 80039e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fc feac 	bl	8000744 <__aeabi_f2iz>
 80039ec:	4603      	mov	r3, r0
 80039ee:	b21c      	sxth	r4, r3
 80039f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fc fea6 	bl	8000744 <__aeabi_f2iz>
 80039f8:	4603      	mov	r3, r0
 80039fa:	b21b      	sxth	r3, r3
 80039fc:	2200      	movs	r2, #0
 80039fe:	4619      	mov	r1, r3
 8003a00:	4620      	mov	r0, r4
 8003a02:	f004 ff09 	bl	8008818 <OLED_DrawIcon>
    OLED_GetObjectPosition(&Menu_AnimationManager, "IconTools", &x, &y);
 8003a06:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003a0a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003a0e:	4986      	ldr	r1, [pc, #536]	@ (8003c28 <System_UI_Loop+0xd6c>)
 8003a10:	4884      	ldr	r0, [pc, #528]	@ (8003c24 <System_UI_Loop+0xd68>)
 8003a12:	f004 fb90 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DrawIcon(x, y, ICON_TOOL);
 8003a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fc fe93 	bl	8000744 <__aeabi_f2iz>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	b21c      	sxth	r4, r3
 8003a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fc fe8d 	bl	8000744 <__aeabi_f2iz>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	b21b      	sxth	r3, r3
 8003a2e:	2201      	movs	r2, #1
 8003a30:	4619      	mov	r1, r3
 8003a32:	4620      	mov	r0, r4
 8003a34:	f004 fef0 	bl	8008818 <OLED_DrawIcon>
    OLED_GetObjectPosition(&Menu_AnimationManager, "IconStatus", &x, &y);
 8003a38:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003a3c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003a40:	497a      	ldr	r1, [pc, #488]	@ (8003c2c <System_UI_Loop+0xd70>)
 8003a42:	4878      	ldr	r0, [pc, #480]	@ (8003c24 <System_UI_Loop+0xd68>)
 8003a44:	f004 fb77 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DrawIcon(x, y, ICON_STATUS);
 8003a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fc fe7a 	bl	8000744 <__aeabi_f2iz>
 8003a50:	4603      	mov	r3, r0
 8003a52:	b21c      	sxth	r4, r3
 8003a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fc fe74 	bl	8000744 <__aeabi_f2iz>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	b21b      	sxth	r3, r3
 8003a60:	2202      	movs	r2, #2
 8003a62:	4619      	mov	r1, r3
 8003a64:	4620      	mov	r0, r4
 8003a66:	f004 fed7 	bl	8008818 <OLED_DrawIcon>
    OLED_GetObjectPosition(&Menu_AnimationManager, "IconSettings", &x, &y);
 8003a6a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003a6e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003a72:	496f      	ldr	r1, [pc, #444]	@ (8003c30 <System_UI_Loop+0xd74>)
 8003a74:	486b      	ldr	r0, [pc, #428]	@ (8003c24 <System_UI_Loop+0xd68>)
 8003a76:	f004 fb5e 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DrawIcon(x, y, ICON_SETTINGS);
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fc fe61 	bl	8000744 <__aeabi_f2iz>
 8003a82:	4603      	mov	r3, r0
 8003a84:	b21c      	sxth	r4, r3
 8003a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fc fe5b 	bl	8000744 <__aeabi_f2iz>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	b21b      	sxth	r3, r3
 8003a92:	2203      	movs	r2, #3
 8003a94:	4619      	mov	r1, r3
 8003a96:	4620      	mov	r0, r4
 8003a98:	f004 febe 	bl	8008818 <OLED_DrawIcon>
    OLED_GetObjectPosition(&Menu_AnimationManager, "IconAbout", &x, &y);
 8003a9c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003aa0:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003aa4:	4963      	ldr	r1, [pc, #396]	@ (8003c34 <System_UI_Loop+0xd78>)
 8003aa6:	485f      	ldr	r0, [pc, #380]	@ (8003c24 <System_UI_Loop+0xd68>)
 8003aa8:	f004 fb45 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DrawIcon(x, y, ICON_ABOUT);
 8003aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fc fe48 	bl	8000744 <__aeabi_f2iz>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	b21c      	sxth	r4, r3
 8003ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fc fe42 	bl	8000744 <__aeabi_f2iz>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	b21b      	sxth	r3, r3
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4620      	mov	r0, r4
 8003aca:	f004 fea5 	bl	8008818 <OLED_DrawIcon>
    OLED_GetObjectPosition(&About_AnimationManager, "IconDeveloper", &x, &y);
 8003ace:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003ad2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003ad6:	4958      	ldr	r1, [pc, #352]	@ (8003c38 <System_UI_Loop+0xd7c>)
 8003ad8:	484c      	ldr	r0, [pc, #304]	@ (8003c0c <System_UI_Loop+0xd50>)
 8003ada:	f004 fb2c 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DrawIcon(x, y, ICON_DEVELOPER);
 8003ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fc fe2f 	bl	8000744 <__aeabi_f2iz>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	b21c      	sxth	r4, r3
 8003aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fc fe29 	bl	8000744 <__aeabi_f2iz>
 8003af2:	4603      	mov	r3, r0
 8003af4:	b21b      	sxth	r3, r3
 8003af6:	2205      	movs	r2, #5
 8003af8:	4619      	mov	r1, r3
 8003afa:	4620      	mov	r0, r4
 8003afc:	f004 fe8c 	bl	8008818 <OLED_DrawIcon>

    OLED_GetObjectPosition(&Menu_AnimationManager, "SettingsButton", &x, &y);
 8003b00:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003b04:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003b08:	494c      	ldr	r1, [pc, #304]	@ (8003c3c <System_UI_Loop+0xd80>)
 8003b0a:	4846      	ldr	r0, [pc, #280]	@ (8003c24 <System_UI_Loop+0xd68>)
 8003b0c:	f004 fb13 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Settings");
 8003b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fc fe16 	bl	8000744 <__aeabi_f2iz>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	b21c      	sxth	r4, r3
 8003b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fc fe10 	bl	8000744 <__aeabi_f2iz>
 8003b24:	4603      	mov	r3, r0
 8003b26:	b21b      	sxth	r3, r3
 8003b28:	4a45      	ldr	r2, [pc, #276]	@ (8003c40 <System_UI_Loop+0xd84>)
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	f7ff f927 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "StatusButton", &x, &y);
 8003b32:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003b36:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003b3a:	4942      	ldr	r1, [pc, #264]	@ (8003c44 <System_UI_Loop+0xd88>)
 8003b3c:	4839      	ldr	r0, [pc, #228]	@ (8003c24 <System_UI_Loop+0xd68>)
 8003b3e:	f004 fafa 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Status");
 8003b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fc fdfd 	bl	8000744 <__aeabi_f2iz>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	b21c      	sxth	r4, r3
 8003b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fc fdf7 	bl	8000744 <__aeabi_f2iz>
 8003b56:	4603      	mov	r3, r0
 8003b58:	b21b      	sxth	r3, r3
 8003b5a:	4a3b      	ldr	r2, [pc, #236]	@ (8003c48 <System_UI_Loop+0xd8c>)
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4620      	mov	r0, r4
 8003b60:	f7ff f90e 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "GamesButton", &x, &y);
 8003b64:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003b68:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003b6c:	4937      	ldr	r1, [pc, #220]	@ (8003c4c <System_UI_Loop+0xd90>)
 8003b6e:	482d      	ldr	r0, [pc, #180]	@ (8003c24 <System_UI_Loop+0xd68>)
 8003b70:	f004 fae1 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Games");
 8003b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fc fde4 	bl	8000744 <__aeabi_f2iz>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	b21c      	sxth	r4, r3
 8003b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fc fdde 	bl	8000744 <__aeabi_f2iz>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	b21b      	sxth	r3, r3
 8003b8c:	4a30      	ldr	r2, [pc, #192]	@ (8003c50 <System_UI_Loop+0xd94>)
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4620      	mov	r0, r4
 8003b92:	f7ff f8f5 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "AboutButton", &x, &y);
 8003b96:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003b9a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003b9e:	492d      	ldr	r1, [pc, #180]	@ (8003c54 <System_UI_Loop+0xd98>)
 8003ba0:	4820      	ldr	r0, [pc, #128]	@ (8003c24 <System_UI_Loop+0xd68>)
 8003ba2:	f004 fac8 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "About");
 8003ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fc fdcb 	bl	8000744 <__aeabi_f2iz>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	b21c      	sxth	r4, r3
 8003bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fc fdc5 	bl	8000744 <__aeabi_f2iz>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	b21b      	sxth	r3, r3
 8003bbe:	4a26      	ldr	r2, [pc, #152]	@ (8003c58 <System_UI_Loop+0xd9c>)
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f7ff f8dc 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "ToolsButton", &x, &y);
 8003bc8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003bcc:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003bd0:	4922      	ldr	r1, [pc, #136]	@ (8003c5c <System_UI_Loop+0xda0>)
 8003bd2:	4814      	ldr	r0, [pc, #80]	@ (8003c24 <System_UI_Loop+0xd68>)
 8003bd4:	f004 faaf 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Tools");
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fc fdb2 	bl	8000744 <__aeabi_f2iz>
 8003be0:	4603      	mov	r3, r0
 8003be2:	b21c      	sxth	r4, r3
 8003be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fc fdac 	bl	8000744 <__aeabi_f2iz>
 8003bec:	4603      	mov	r3, r0
 8003bee:	b21b      	sxth	r3, r3
 8003bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c60 <System_UI_Loop+0xda4>)
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	f7ff f8c3 	bl	8002d80 <OLED_DisplayString>
 8003bfa:	e033      	b.n	8003c64 <System_UI_Loop+0xda8>
 8003bfc:	2000043c 	.word	0x2000043c
 8003c00:	20001034 	.word	0x20001034
 8003c04:	2000043d 	.word	0x2000043d
 8003c08:	0800e654 	.word	0x0800e654
 8003c0c:	20002c1c 	.word	0x20002c1c
 8003c10:	0800e660 	.word	0x0800e660
 8003c14:	0800e668 	.word	0x0800e668
 8003c18:	0800e608 	.word	0x0800e608
 8003c1c:	20003df8 	.word	0x20003df8
 8003c20:	0800e71c 	.word	0x0800e71c
 8003c24:	2000144c 	.word	0x2000144c
 8003c28:	0800e728 	.word	0x0800e728
 8003c2c:	0800e734 	.word	0x0800e734
 8003c30:	0800e740 	.word	0x0800e740
 8003c34:	0800e750 	.word	0x0800e750
 8003c38:	0800e68c 	.word	0x0800e68c
 8003c3c:	0800e700 	.word	0x0800e700
 8003c40:	0800e75c 	.word	0x0800e75c
 8003c44:	0800e6f0 	.word	0x0800e6f0
 8003c48:	0800e62c 	.word	0x0800e62c
 8003c4c:	0800e6d8 	.word	0x0800e6d8
 8003c50:	0800e768 	.word	0x0800e768
 8003c54:	0800e710 	.word	0x0800e710
 8003c58:	0800e770 	.word	0x0800e770
 8003c5c:	0800e6e4 	.word	0x0800e6e4
 8003c60:	0800e778 	.word	0x0800e778
    OLED_GetObjectPosition(&Games_AnimationManager, "Snake", &x, &y);
 8003c64:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003c68:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003c6c:	49ba      	ldr	r1, [pc, #744]	@ (8003f58 <System_UI_Loop+0x109c>)
 8003c6e:	48bb      	ldr	r0, [pc, #748]	@ (8003f5c <System_UI_Loop+0x10a0>)
 8003c70:	f004 fa61 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Snake");
 8003c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fc fd64 	bl	8000744 <__aeabi_f2iz>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	b21c      	sxth	r4, r3
 8003c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fc fd5e 	bl	8000744 <__aeabi_f2iz>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	b21b      	sxth	r3, r3
 8003c8c:	4ab2      	ldr	r2, [pc, #712]	@ (8003f58 <System_UI_Loop+0x109c>)
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4620      	mov	r0, r4
 8003c92:	f7ff f875 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&Games_AnimationManager, "2048", &x, &y);
 8003c96:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003c9a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003c9e:	49b0      	ldr	r1, [pc, #704]	@ (8003f60 <System_UI_Loop+0x10a4>)
 8003ca0:	48ae      	ldr	r0, [pc, #696]	@ (8003f5c <System_UI_Loop+0x10a0>)
 8003ca2:	f004 fa48 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "2048");
 8003ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fc fd4b 	bl	8000744 <__aeabi_f2iz>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	b21c      	sxth	r4, r3
 8003cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fc fd45 	bl	8000744 <__aeabi_f2iz>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	b21b      	sxth	r3, r3
 8003cbe:	4aa8      	ldr	r2, [pc, #672]	@ (8003f60 <System_UI_Loop+0x10a4>)
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	f7ff f85c 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_AnimationManager, "BackButton", &x, &y);
 8003cc8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003ccc:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003cd0:	49a4      	ldr	r1, [pc, #656]	@ (8003f64 <System_UI_Loop+0x10a8>)
 8003cd2:	48a5      	ldr	r0, [pc, #660]	@ (8003f68 <System_UI_Loop+0x10ac>)
 8003cd4:	f004 fa2f 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Back");
 8003cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fc fd32 	bl	8000744 <__aeabi_f2iz>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	b21c      	sxth	r4, r3
 8003ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fc fd2c 	bl	8000744 <__aeabi_f2iz>
 8003cec:	4603      	mov	r3, r0
 8003cee:	b21b      	sxth	r3, r3
 8003cf0:	4a9e      	ldr	r2, [pc, #632]	@ (8003f6c <System_UI_Loop+0x10b0>)
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f7ff f843 	bl	8002d80 <OLED_DisplayString>

    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleGames", &x, &y);
 8003cfa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003cfe:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003d02:	499b      	ldr	r1, [pc, #620]	@ (8003f70 <System_UI_Loop+0x10b4>)
 8003d04:	489b      	ldr	r0, [pc, #620]	@ (8003f74 <System_UI_Loop+0x10b8>)
 8003d06:	f004 fa16 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Epicful Games");
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fc fd19 	bl	8000744 <__aeabi_f2iz>
 8003d12:	4603      	mov	r3, r0
 8003d14:	b21c      	sxth	r4, r3
 8003d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fc fd13 	bl	8000744 <__aeabi_f2iz>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	b21b      	sxth	r3, r3
 8003d22:	4a95      	ldr	r2, [pc, #596]	@ (8003f78 <System_UI_Loop+0x10bc>)
 8003d24:	4619      	mov	r1, r3
 8003d26:	4620      	mov	r0, r4
 8003d28:	f7ff f82a 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleTools", &x, &y);
 8003d2c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003d30:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003d34:	4991      	ldr	r1, [pc, #580]	@ (8003f7c <System_UI_Loop+0x10c0>)
 8003d36:	488f      	ldr	r0, [pc, #572]	@ (8003f74 <System_UI_Loop+0x10b8>)
 8003d38:	f004 f9fd 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Tools For You");
 8003d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fc fd00 	bl	8000744 <__aeabi_f2iz>
 8003d44:	4603      	mov	r3, r0
 8003d46:	b21c      	sxth	r4, r3
 8003d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fc fcfa 	bl	8000744 <__aeabi_f2iz>
 8003d50:	4603      	mov	r3, r0
 8003d52:	b21b      	sxth	r3, r3
 8003d54:	4a8a      	ldr	r2, [pc, #552]	@ (8003f80 <System_UI_Loop+0x10c4>)
 8003d56:	4619      	mov	r1, r3
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f7ff f811 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleStatus", &x, &y);
 8003d5e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003d62:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003d66:	4987      	ldr	r1, [pc, #540]	@ (8003f84 <System_UI_Loop+0x10c8>)
 8003d68:	4882      	ldr	r0, [pc, #520]	@ (8003f74 <System_UI_Loop+0x10b8>)
 8003d6a:	f004 f9e4 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Machine States");
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fc fce7 	bl	8000744 <__aeabi_f2iz>
 8003d76:	4603      	mov	r3, r0
 8003d78:	b21c      	sxth	r4, r3
 8003d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fc fce1 	bl	8000744 <__aeabi_f2iz>
 8003d82:	4603      	mov	r3, r0
 8003d84:	b21b      	sxth	r3, r3
 8003d86:	4a80      	ldr	r2, [pc, #512]	@ (8003f88 <System_UI_Loop+0x10cc>)
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f7fe fff8 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleSettings", &x, &y);
 8003d90:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003d94:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003d98:	497c      	ldr	r1, [pc, #496]	@ (8003f8c <System_UI_Loop+0x10d0>)
 8003d9a:	4876      	ldr	r0, [pc, #472]	@ (8003f74 <System_UI_Loop+0x10b8>)
 8003d9c:	f004 f9cb 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "STM Settings");
 8003da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fc fcce 	bl	8000744 <__aeabi_f2iz>
 8003da8:	4603      	mov	r3, r0
 8003daa:	b21c      	sxth	r4, r3
 8003dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fc fcc8 	bl	8000744 <__aeabi_f2iz>
 8003db4:	4603      	mov	r3, r0
 8003db6:	b21b      	sxth	r3, r3
 8003db8:	4a75      	ldr	r2, [pc, #468]	@ (8003f90 <System_UI_Loop+0x10d4>)
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	f7fe ffdf 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleAbout", &x, &y);
 8003dc2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003dc6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003dca:	4972      	ldr	r1, [pc, #456]	@ (8003f94 <System_UI_Loop+0x10d8>)
 8003dcc:	4869      	ldr	r0, [pc, #420]	@ (8003f74 <System_UI_Loop+0x10b8>)
 8003dce:	f004 f9b2 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Developer!");
 8003dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fc fcb5 	bl	8000744 <__aeabi_f2iz>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	b21c      	sxth	r4, r3
 8003dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fc fcaf 	bl	8000744 <__aeabi_f2iz>
 8003de6:	4603      	mov	r3, r0
 8003de8:	b21b      	sxth	r3, r3
 8003dea:	4a6b      	ldr	r2, [pc, #428]	@ (8003f98 <System_UI_Loop+0x10dc>)
 8003dec:	4619      	mov	r1, r3
 8003dee:	4620      	mov	r0, r4
 8003df0:	f7fe ffc6 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleSnake", &x, &y);
 8003df4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003df8:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003dfc:	4967      	ldr	r1, [pc, #412]	@ (8003f9c <System_UI_Loop+0x10e0>)
 8003dfe:	485d      	ldr	r0, [pc, #372]	@ (8003f74 <System_UI_Loop+0x10b8>)
 8003e00:	f004 f999 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Greedy Snake");
 8003e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fc fc9c 	bl	8000744 <__aeabi_f2iz>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	b21c      	sxth	r4, r3
 8003e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fc fc96 	bl	8000744 <__aeabi_f2iz>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	b21b      	sxth	r3, r3
 8003e1c:	4a60      	ldr	r2, [pc, #384]	@ (8003fa0 <System_UI_Loop+0x10e4>)
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4620      	mov	r0, r4
 8003e22:	f7fe ffad 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "Title2048", &x, &y);
 8003e26:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003e2a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003e2e:	495d      	ldr	r1, [pc, #372]	@ (8003fa4 <System_UI_Loop+0x10e8>)
 8003e30:	4850      	ldr	r0, [pc, #320]	@ (8003f74 <System_UI_Loop+0x10b8>)
 8003e32:	f004 f980 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Here is 2048!");
 8003e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fc fc83 	bl	8000744 <__aeabi_f2iz>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	b21c      	sxth	r4, r3
 8003e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fc fc7d 	bl	8000744 <__aeabi_f2iz>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	b21b      	sxth	r3, r3
 8003e4e:	4a56      	ldr	r2, [pc, #344]	@ (8003fa8 <System_UI_Loop+0x10ec>)
 8003e50:	4619      	mov	r1, r3
 8003e52:	4620      	mov	r0, r4
 8003e54:	f7fe ff94 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleBack", &x, &y);
 8003e58:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003e5c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003e60:	4952      	ldr	r1, [pc, #328]	@ (8003fac <System_UI_Loop+0x10f0>)
 8003e62:	4844      	ldr	r0, [pc, #272]	@ (8003f74 <System_UI_Loop+0x10b8>)
 8003e64:	f004 f967 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Back To Menu");
 8003e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fc fc6a 	bl	8000744 <__aeabi_f2iz>
 8003e70:	4603      	mov	r3, r0
 8003e72:	b21c      	sxth	r4, r3
 8003e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fc fc64 	bl	8000744 <__aeabi_f2iz>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	b21b      	sxth	r3, r3
 8003e80:	4a4b      	ldr	r2, [pc, #300]	@ (8003fb0 <System_UI_Loop+0x10f4>)
 8003e82:	4619      	mov	r1, r3
 8003e84:	4620      	mov	r0, r4
 8003e86:	f7fe ff7b 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "BAD APPLE!", &x, &y);
 8003e8a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003e8e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003e92:	4948      	ldr	r1, [pc, #288]	@ (8003fb4 <System_UI_Loop+0x10f8>)
 8003e94:	4837      	ldr	r0, [pc, #220]	@ (8003f74 <System_UI_Loop+0x10b8>)
 8003e96:	f004 f94e 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "BAD APPLE!");
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fc fc51 	bl	8000744 <__aeabi_f2iz>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	b21c      	sxth	r4, r3
 8003ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fc fc4b 	bl	8000744 <__aeabi_f2iz>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	b21b      	sxth	r3, r3
 8003eb2:	4a40      	ldr	r2, [pc, #256]	@ (8003fb4 <System_UI_Loop+0x10f8>)
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f7fe ff62 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "Show FPS?", &x, &y);
 8003ebc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003ec0:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003ec4:	493c      	ldr	r1, [pc, #240]	@ (8003fb8 <System_UI_Loop+0x10fc>)
 8003ec6:	482b      	ldr	r0, [pc, #172]	@ (8003f74 <System_UI_Loop+0x10b8>)
 8003ec8:	f004 f935 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Show FPS?");
 8003ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fc fc38 	bl	8000744 <__aeabi_f2iz>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	b21c      	sxth	r4, r3
 8003ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fc fc32 	bl	8000744 <__aeabi_f2iz>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	b21b      	sxth	r3, r3
 8003ee4:	4a34      	ldr	r2, [pc, #208]	@ (8003fb8 <System_UI_Loop+0x10fc>)
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4620      	mov	r0, r4
 8003eea:	f7fe ff49 	bl	8002d80 <OLED_DisplayString>

    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleDeveloper", &x, &y);    
 8003eee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003ef2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003ef6:	4931      	ldr	r1, [pc, #196]	@ (8003fbc <System_UI_Loop+0x1100>)
 8003ef8:	481e      	ldr	r0, [pc, #120]	@ (8003f74 <System_UI_Loop+0x10b8>)
 8003efa:	f004 f91c 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Developer: UnikoZera");
 8003efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fc fc1f 	bl	8000744 <__aeabi_f2iz>
 8003f06:	4603      	mov	r3, r0
 8003f08:	b21c      	sxth	r4, r3
 8003f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fc fc19 	bl	8000744 <__aeabi_f2iz>
 8003f12:	4603      	mov	r3, r0
 8003f14:	b21b      	sxth	r3, r3
 8003f16:	4a2a      	ldr	r2, [pc, #168]	@ (8003fc0 <System_UI_Loop+0x1104>)
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	f7fe ff30 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleGithub", &x, &y);
 8003f20:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003f24:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003f28:	4926      	ldr	r1, [pc, #152]	@ (8003fc4 <System_UI_Loop+0x1108>)
 8003f2a:	4812      	ldr	r0, [pc, #72]	@ (8003f74 <System_UI_Loop+0x10b8>)
 8003f2c:	f004 f903 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "GH Address");
 8003f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fc fc06 	bl	8000744 <__aeabi_f2iz>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	b21c      	sxth	r4, r3
 8003f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fc fc00 	bl	8000744 <__aeabi_f2iz>
 8003f44:	4603      	mov	r3, r0
 8003f46:	b21b      	sxth	r3, r3
 8003f48:	4a1f      	ldr	r2, [pc, #124]	@ (8003fc8 <System_UI_Loop+0x110c>)
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	f7fe ff17 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleDonate", &x, &y);
 8003f52:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003f56:	e039      	b.n	8003fcc <System_UI_Loop+0x1110>
 8003f58:	0800e5f8 	.word	0x0800e5f8
 8003f5c:	20001a40 	.word	0x20001a40
 8003f60:	0800e600 	.word	0x0800e600
 8003f64:	0800e608 	.word	0x0800e608
 8003f68:	20003df8 	.word	0x20003df8
 8003f6c:	0800e780 	.word	0x0800e780
 8003f70:	0800e554 	.word	0x0800e554
 8003f74:	20003804 	.word	0x20003804
 8003f78:	0800e788 	.word	0x0800e788
 8003f7c:	0800e560 	.word	0x0800e560
 8003f80:	0800e798 	.word	0x0800e798
 8003f84:	0800e56c 	.word	0x0800e56c
 8003f88:	0800e7a8 	.word	0x0800e7a8
 8003f8c:	0800e578 	.word	0x0800e578
 8003f90:	0800e7b8 	.word	0x0800e7b8
 8003f94:	0800e588 	.word	0x0800e588
 8003f98:	0800e7c8 	.word	0x0800e7c8
 8003f9c:	0800e594 	.word	0x0800e594
 8003fa0:	0800e7d4 	.word	0x0800e7d4
 8003fa4:	0800e5a0 	.word	0x0800e5a0
 8003fa8:	0800e7e4 	.word	0x0800e7e4
 8003fac:	0800e5ac 	.word	0x0800e5ac
 8003fb0:	0800e7f4 	.word	0x0800e7f4
 8003fb4:	0800e5b8 	.word	0x0800e5b8
 8003fb8:	0800e5c4 	.word	0x0800e5c4
 8003fbc:	0800e5d0 	.word	0x0800e5d0
 8003fc0:	0800e804 	.word	0x0800e804
 8003fc4:	0800e5e0 	.word	0x0800e5e0
 8003fc8:	0800e81c 	.word	0x0800e81c
 8003fcc:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003fd0:	4993      	ldr	r1, [pc, #588]	@ (8004220 <System_UI_Loop+0x1364>)
 8003fd2:	4894      	ldr	r0, [pc, #592]	@ (8004224 <System_UI_Loop+0x1368>)
 8003fd4:	f004 f8af 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "BiliBili Space");
 8003fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fc fbb2 	bl	8000744 <__aeabi_f2iz>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	b21c      	sxth	r4, r3
 8003fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fc fbac 	bl	8000744 <__aeabi_f2iz>
 8003fec:	4603      	mov	r3, r0
 8003fee:	b21b      	sxth	r3, r3
 8003ff0:	4a8d      	ldr	r2, [pc, #564]	@ (8004228 <System_UI_Loop+0x136c>)
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f7fe fec3 	bl	8002d80 <OLED_DisplayString>

    OLED_GetObjectPosition(&Tools_AnimationManager, "VideoPlayer", &x, &y);
 8003ffa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003ffe:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8004002:	498a      	ldr	r1, [pc, #552]	@ (800422c <System_UI_Loop+0x1370>)
 8004004:	488a      	ldr	r0, [pc, #552]	@ (8004230 <System_UI_Loop+0x1374>)
 8004006:	f004 f896 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Video");
 800400a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800400c:	4618      	mov	r0, r3
 800400e:	f7fc fb99 	bl	8000744 <__aeabi_f2iz>
 8004012:	4603      	mov	r3, r0
 8004014:	b21c      	sxth	r4, r3
 8004016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004018:	4618      	mov	r0, r3
 800401a:	f7fc fb93 	bl	8000744 <__aeabi_f2iz>
 800401e:	4603      	mov	r3, r0
 8004020:	b21b      	sxth	r3, r3
 8004022:	4a84      	ldr	r2, [pc, #528]	@ (8004234 <System_UI_Loop+0x1378>)
 8004024:	4619      	mov	r1, r3
 8004026:	4620      	mov	r0, r4
 8004028:	f7fe feaa 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&Status_AnimationManager, "RunningTime", &x, &y);
 800402c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004030:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8004034:	4980      	ldr	r1, [pc, #512]	@ (8004238 <System_UI_Loop+0x137c>)
 8004036:	4881      	ldr	r0, [pc, #516]	@ (800423c <System_UI_Loop+0x1380>)
 8004038:	f004 f87d 	bl	8008136 <OLED_GetObjectPosition>
    unsigned char Timer[] = "Running Time:00:00:00";
 800403c:	4b80      	ldr	r3, [pc, #512]	@ (8004240 <System_UI_Loop+0x1384>)
 800403e:	f107 0414 	add.w	r4, r7, #20
 8004042:	461d      	mov	r5, r3
 8004044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004048:	e895 0003 	ldmia.w	r5, {r0, r1}
 800404c:	6020      	str	r0, [r4, #0]
 800404e:	3404      	adds	r4, #4
 8004050:	8021      	strh	r1, [r4, #0]
    sprintf(Timer, "Running Time:%02d:%02d:%02d", (HAL_GetTick() / 3600000) % 24, (HAL_GetTick() / 60000) % 60, (HAL_GetTick() / 1000) % 60);
 8004052:	f005 f981 	bl	8009358 <HAL_GetTick>
 8004056:	4603      	mov	r3, r0
 8004058:	4a7a      	ldr	r2, [pc, #488]	@ (8004244 <System_UI_Loop+0x1388>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	0d5a      	lsrs	r2, r3, #21
 8004060:	4b79      	ldr	r3, [pc, #484]	@ (8004248 <System_UI_Loop+0x138c>)
 8004062:	fba3 1302 	umull	r1, r3, r3, r2
 8004066:	091c      	lsrs	r4, r3, #4
 8004068:	4623      	mov	r3, r4
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	4423      	add	r3, r4
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	1ad4      	subs	r4, r2, r3
 8004072:	f005 f971 	bl	8009358 <HAL_GetTick>
 8004076:	4603      	mov	r3, r0
 8004078:	4a74      	ldr	r2, [pc, #464]	@ (800424c <System_UI_Loop+0x1390>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	0b9a      	lsrs	r2, r3, #14
 8004080:	4b73      	ldr	r3, [pc, #460]	@ (8004250 <System_UI_Loop+0x1394>)
 8004082:	fba3 1302 	umull	r1, r3, r3, r2
 8004086:	095d      	lsrs	r5, r3, #5
 8004088:	462b      	mov	r3, r5
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	1b5b      	subs	r3, r3, r5
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	1ad5      	subs	r5, r2, r3
 8004092:	f005 f961 	bl	8009358 <HAL_GetTick>
 8004096:	4603      	mov	r3, r0
 8004098:	4a6e      	ldr	r2, [pc, #440]	@ (8004254 <System_UI_Loop+0x1398>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	0999      	lsrs	r1, r3, #6
 80040a0:	4b6b      	ldr	r3, [pc, #428]	@ (8004250 <System_UI_Loop+0x1394>)
 80040a2:	fba3 2301 	umull	r2, r3, r3, r1
 80040a6:	095a      	lsrs	r2, r3, #5
 80040a8:	4613      	mov	r3, r2
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	1aca      	subs	r2, r1, r3
 80040b2:	f107 0014 	add.w	r0, r7, #20
 80040b6:	9200      	str	r2, [sp, #0]
 80040b8:	462b      	mov	r3, r5
 80040ba:	4622      	mov	r2, r4
 80040bc:	4966      	ldr	r1, [pc, #408]	@ (8004258 <System_UI_Loop+0x139c>)
 80040be:	f007 fee9 	bl	800be94 <siprintf>
    OLED_DisplayString(x, y, Timer);
 80040c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fc fb3d 	bl	8000744 <__aeabi_f2iz>
 80040ca:	4603      	mov	r3, r0
 80040cc:	b21c      	sxth	r4, r3
 80040ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fc fb37 	bl	8000744 <__aeabi_f2iz>
 80040d6:	4603      	mov	r3, r0
 80040d8:	b21b      	sxth	r3, r3
 80040da:	f107 0214 	add.w	r2, r7, #20
 80040de:	4619      	mov	r1, r3
 80040e0:	4620      	mov	r0, r4
 80040e2:	f7fe fe4d 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&Status_AnimationManager, "Status", &x, &y);
 80040e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80040ea:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80040ee:	495b      	ldr	r1, [pc, #364]	@ (800425c <System_UI_Loop+0x13a0>)
 80040f0:	4852      	ldr	r0, [pc, #328]	@ (800423c <System_UI_Loop+0x1380>)
 80040f2:	f004 f820 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "MCU:STM32F103C8T6");
 80040f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fc fb23 	bl	8000744 <__aeabi_f2iz>
 80040fe:	4603      	mov	r3, r0
 8004100:	b21c      	sxth	r4, r3
 8004102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004104:	4618      	mov	r0, r3
 8004106:	f7fc fb1d 	bl	8000744 <__aeabi_f2iz>
 800410a:	4603      	mov	r3, r0
 800410c:	b21b      	sxth	r3, r3
 800410e:	4a54      	ldr	r2, [pc, #336]	@ (8004260 <System_UI_Loop+0x13a4>)
 8004110:	4619      	mov	r1, r3
 8004112:	4620      	mov	r0, r4
 8004114:	f7fe fe34 	bl	8002d80 <OLED_DisplayString>
    OLED_DisplayString(x, y + 9, "Core: Cortex-M3");
 8004118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800411a:	4618      	mov	r0, r3
 800411c:	f7fc fb12 	bl	8000744 <__aeabi_f2iz>
 8004120:	4603      	mov	r3, r0
 8004122:	b21c      	sxth	r4, r3
 8004124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004126:	494f      	ldr	r1, [pc, #316]	@ (8004264 <System_UI_Loop+0x13a8>)
 8004128:	4618      	mov	r0, r3
 800412a:	f7fc f827 	bl	800017c <__addsf3>
 800412e:	4603      	mov	r3, r0
 8004130:	4618      	mov	r0, r3
 8004132:	f7fc fb07 	bl	8000744 <__aeabi_f2iz>
 8004136:	4603      	mov	r3, r0
 8004138:	b21b      	sxth	r3, r3
 800413a:	4a4b      	ldr	r2, [pc, #300]	@ (8004268 <System_UI_Loop+0x13ac>)
 800413c:	4619      	mov	r1, r3
 800413e:	4620      	mov	r0, r4
 8004140:	f7fe fe1e 	bl	8002d80 <OLED_DisplayString>
    OLED_DisplayString(x, y + 18, "CrystalOS v1.0");
 8004144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004146:	4618      	mov	r0, r3
 8004148:	f7fc fafc 	bl	8000744 <__aeabi_f2iz>
 800414c:	4603      	mov	r3, r0
 800414e:	b21c      	sxth	r4, r3
 8004150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004152:	4946      	ldr	r1, [pc, #280]	@ (800426c <System_UI_Loop+0x13b0>)
 8004154:	4618      	mov	r0, r3
 8004156:	f7fc f811 	bl	800017c <__addsf3>
 800415a:	4603      	mov	r3, r0
 800415c:	4618      	mov	r0, r3
 800415e:	f7fc faf1 	bl	8000744 <__aeabi_f2iz>
 8004162:	4603      	mov	r3, r0
 8004164:	b21b      	sxth	r3, r3
 8004166:	4a42      	ldr	r2, [pc, #264]	@ (8004270 <System_UI_Loop+0x13b4>)
 8004168:	4619      	mov	r1, r3
 800416a:	4620      	mov	r0, r4
 800416c:	f7fe fe08 	bl	8002d80 <OLED_DisplayString>
    OLED_DisplayString(x, y + 27, "UnikoZera Made");
 8004170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004172:	4618      	mov	r0, r3
 8004174:	f7fc fae6 	bl	8000744 <__aeabi_f2iz>
 8004178:	4603      	mov	r3, r0
 800417a:	b21c      	sxth	r4, r3
 800417c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800417e:	493d      	ldr	r1, [pc, #244]	@ (8004274 <System_UI_Loop+0x13b8>)
 8004180:	4618      	mov	r0, r3
 8004182:	f7fb fffb 	bl	800017c <__addsf3>
 8004186:	4603      	mov	r3, r0
 8004188:	4618      	mov	r0, r3
 800418a:	f7fc fadb 	bl	8000744 <__aeabi_f2iz>
 800418e:	4603      	mov	r3, r0
 8004190:	b21b      	sxth	r3, r3
 8004192:	4a39      	ldr	r2, [pc, #228]	@ (8004278 <System_UI_Loop+0x13bc>)
 8004194:	4619      	mov	r1, r3
 8004196:	4620      	mov	r0, r4
 8004198:	f7fe fdf2 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&Status_AnimationManager, "CUBE", &x, &y);
 800419c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80041a0:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80041a4:	4935      	ldr	r1, [pc, #212]	@ (800427c <System_UI_Loop+0x13c0>)
 80041a6:	4825      	ldr	r0, [pc, #148]	@ (800423c <System_UI_Loop+0x1380>)
 80041a8:	f003 ffc5 	bl	8008136 <OLED_GetObjectPosition>
    CUBE.transform.center_x = x;
 80041ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fc fac8 	bl	8000744 <__aeabi_f2iz>
 80041b4:	4603      	mov	r3, r0
 80041b6:	b21a      	sxth	r2, r3
 80041b8:	4b31      	ldr	r3, [pc, #196]	@ (8004280 <System_UI_Loop+0x13c4>)
 80041ba:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
    CUBE.transform.center_y = y;
 80041be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fc fabf 	bl	8000744 <__aeabi_f2iz>
 80041c6:	4603      	mov	r3, r0
 80041c8:	b21a      	sxth	r2, r3
 80041ca:	4b2d      	ldr	r3, [pc, #180]	@ (8004280 <System_UI_Loop+0x13c4>)
 80041cc:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
    OLED_UpdateCubeRotation(&CUBE, 0.02f, 0.03f, 0.01f); // X,Y,Z轴旋转增量
 80041d0:	4b2c      	ldr	r3, [pc, #176]	@ (8004284 <System_UI_Loop+0x13c8>)
 80041d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004288 <System_UI_Loop+0x13cc>)
 80041d4:	492d      	ldr	r1, [pc, #180]	@ (800428c <System_UI_Loop+0x13d0>)
 80041d6:	482a      	ldr	r0, [pc, #168]	@ (8004280 <System_UI_Loop+0x13c4>)
 80041d8:	f7fc fc8e 	bl	8000af8 <OLED_UpdateCubeRotation>
    OLED_DrawCube3D(&CUBE);
 80041dc:	4828      	ldr	r0, [pc, #160]	@ (8004280 <System_UI_Loop+0x13c4>)
 80041de:	f7fc fed5 	bl	8000f8c <OLED_DrawCube3D>

    OLED_GetObjectPosition(&Settings_AnimationManager, "ShowFPS", &x, &y);
 80041e2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80041e6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80041ea:	4929      	ldr	r1, [pc, #164]	@ (8004290 <System_UI_Loop+0x13d4>)
 80041ec:	4829      	ldr	r0, [pc, #164]	@ (8004294 <System_UI_Loop+0x13d8>)
 80041ee:	f003 ffa2 	bl	8008136 <OLED_GetObjectPosition>
    if (isShowFPS)
 80041f2:	4b29      	ldr	r3, [pc, #164]	@ (8004298 <System_UI_Loop+0x13dc>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d052      	beq.n	80042a0 <System_UI_Loop+0x13e4>
    {
        OLED_DisplayString(x, y, "Show FPS:ON");
 80041fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fc faa1 	bl	8000744 <__aeabi_f2iz>
 8004202:	4603      	mov	r3, r0
 8004204:	b21c      	sxth	r4, r3
 8004206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004208:	4618      	mov	r0, r3
 800420a:	f7fc fa9b 	bl	8000744 <__aeabi_f2iz>
 800420e:	4603      	mov	r3, r0
 8004210:	b21b      	sxth	r3, r3
 8004212:	4a22      	ldr	r2, [pc, #136]	@ (800429c <System_UI_Loop+0x13e0>)
 8004214:	4619      	mov	r1, r3
 8004216:	4620      	mov	r0, r4
 8004218:	f7fe fdb2 	bl	8002d80 <OLED_DisplayString>
 800421c:	e051      	b.n	80042c2 <System_UI_Loop+0x1406>
 800421e:	bf00      	nop
 8004220:	0800e5ec 	.word	0x0800e5ec
 8004224:	20003804 	.word	0x20003804
 8004228:	0800e67c 	.word	0x0800e67c
 800422c:	0800e614 	.word	0x0800e614
 8004230:	20002034 	.word	0x20002034
 8004234:	0800e828 	.word	0x0800e828
 8004238:	0800e620 	.word	0x0800e620
 800423c:	20003210 	.word	0x20003210
 8004240:	0800e8e8 	.word	0x0800e8e8
 8004244:	95217cb1 	.word	0x95217cb1
 8004248:	aaaaaaab 	.word	0xaaaaaaab
 800424c:	45e7b273 	.word	0x45e7b273
 8004250:	88888889 	.word	0x88888889
 8004254:	10624dd3 	.word	0x10624dd3
 8004258:	0800e830 	.word	0x0800e830
 800425c:	0800e62c 	.word	0x0800e62c
 8004260:	0800e84c 	.word	0x0800e84c
 8004264:	41100000 	.word	0x41100000
 8004268:	0800e860 	.word	0x0800e860
 800426c:	41900000 	.word	0x41900000
 8004270:	0800e870 	.word	0x0800e870
 8004274:	41d80000 	.word	0x41d80000
 8004278:	0800e880 	.word	0x0800e880
 800427c:	0800e634 	.word	0x0800e634
 8004280:	20000f58 	.word	0x20000f58
 8004284:	3c23d70a 	.word	0x3c23d70a
 8004288:	3cf5c28f 	.word	0x3cf5c28f
 800428c:	3ca3d70a 	.word	0x3ca3d70a
 8004290:	0800e63c 	.word	0x0800e63c
 8004294:	20002628 	.word	0x20002628
 8004298:	20001038 	.word	0x20001038
 800429c:	0800e890 	.word	0x0800e890
    }
    else
    {
        OLED_DisplayString(x, y, "Show FPS:OFF");
 80042a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fc fa4e 	bl	8000744 <__aeabi_f2iz>
 80042a8:	4603      	mov	r3, r0
 80042aa:	b21c      	sxth	r4, r3
 80042ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fc fa48 	bl	8000744 <__aeabi_f2iz>
 80042b4:	4603      	mov	r3, r0
 80042b6:	b21b      	sxth	r3, r3
 80042b8:	4ab3      	ldr	r2, [pc, #716]	@ (8004588 <System_UI_Loop+0x16cc>)
 80042ba:	4619      	mov	r1, r3
 80042bc:	4620      	mov	r0, r4
 80042be:	f7fe fd5f 	bl	8002d80 <OLED_DisplayString>
    }
    
    unsigned char Lightness[20] = "Lightness: 100%";
 80042c2:	4bb2      	ldr	r3, [pc, #712]	@ (800458c <System_UI_Loop+0x16d0>)
 80042c4:	463c      	mov	r4, r7
 80042c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80042cc:	2300      	movs	r3, #0
 80042ce:	613b      	str	r3, [r7, #16]
    int val = (brightness * 100) / 255; // 将亮度转换为百分比
 80042d0:	4baf      	ldr	r3, [pc, #700]	@ (8004590 <System_UI_Loop+0x16d4>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	461a      	mov	r2, r3
 80042d6:	2364      	movs	r3, #100	@ 0x64
 80042d8:	fb02 f303 	mul.w	r3, r2, r3
 80042dc:	4aad      	ldr	r2, [pc, #692]	@ (8004594 <System_UI_Loop+0x16d8>)
 80042de:	fb82 1203 	smull	r1, r2, r2, r3
 80042e2:	441a      	add	r2, r3
 80042e4:	11d2      	asrs	r2, r2, #7
 80042e6:	17db      	asrs	r3, r3, #31
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    OLED_GetObjectPosition(&Settings_AnimationManager, "Lightness", &x, &y);
 80042ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80042f0:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80042f4:	49a8      	ldr	r1, [pc, #672]	@ (8004598 <System_UI_Loop+0x16dc>)
 80042f6:	48a9      	ldr	r0, [pc, #676]	@ (800459c <System_UI_Loop+0x16e0>)
 80042f8:	f003 ff1d 	bl	8008136 <OLED_GetObjectPosition>
    sprintf(Lightness, "Lightness: %d%%", val);
 80042fc:	463b      	mov	r3, r7
 80042fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004300:	49a7      	ldr	r1, [pc, #668]	@ (80045a0 <System_UI_Loop+0x16e4>)
 8004302:	4618      	mov	r0, r3
 8004304:	f007 fdc6 	bl	800be94 <siprintf>
    OLED_DisplayString(x, y, Lightness);
 8004308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800430a:	4618      	mov	r0, r3
 800430c:	f7fc fa1a 	bl	8000744 <__aeabi_f2iz>
 8004310:	4603      	mov	r3, r0
 8004312:	b21c      	sxth	r4, r3
 8004314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004316:	4618      	mov	r0, r3
 8004318:	f7fc fa14 	bl	8000744 <__aeabi_f2iz>
 800431c:	4603      	mov	r3, r0
 800431e:	b21b      	sxth	r3, r3
 8004320:	463a      	mov	r2, r7
 8004322:	4619      	mov	r1, r3
 8004324:	4620      	mov	r0, r4
 8004326:	f7fe fd2b 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&Settings_AnimationManager, "Bar", &x, &y);
 800432a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800432e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8004332:	499c      	ldr	r1, [pc, #624]	@ (80045a4 <System_UI_Loop+0x16e8>)
 8004334:	4899      	ldr	r0, [pc, #612]	@ (800459c <System_UI_Loop+0x16e0>)
 8004336:	f003 fefe 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DrawProgressBar(x, y, 82, val);
 800433a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800433c:	4618      	mov	r0, r3
 800433e:	f7fc fa01 	bl	8000744 <__aeabi_f2iz>
 8004342:	4603      	mov	r3, r0
 8004344:	b21c      	sxth	r4, r3
 8004346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004348:	4618      	mov	r0, r3
 800434a:	f7fc f9fb 	bl	8000744 <__aeabi_f2iz>
 800434e:	4603      	mov	r3, r0
 8004350:	b219      	sxth	r1, r3
 8004352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2252      	movs	r2, #82	@ 0x52
 8004358:	4620      	mov	r0, r4
 800435a:	f004 f8cf 	bl	80084fc <OLED_DrawProgressBar>

    OLED_GetObjectPosition(&About_AnimationManager, "Developer", &x, &y);
 800435e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004362:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8004366:	4990      	ldr	r1, [pc, #576]	@ (80045a8 <System_UI_Loop+0x16ec>)
 8004368:	4890      	ldr	r0, [pc, #576]	@ (80045ac <System_UI_Loop+0x16f0>)
 800436a:	f003 fee4 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Developer");
 800436e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004370:	4618      	mov	r0, r3
 8004372:	f7fc f9e7 	bl	8000744 <__aeabi_f2iz>
 8004376:	4603      	mov	r3, r0
 8004378:	b21c      	sxth	r4, r3
 800437a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800437c:	4618      	mov	r0, r3
 800437e:	f7fc f9e1 	bl	8000744 <__aeabi_f2iz>
 8004382:	4603      	mov	r3, r0
 8004384:	b21b      	sxth	r3, r3
 8004386:	4a88      	ldr	r2, [pc, #544]	@ (80045a8 <System_UI_Loop+0x16ec>)
 8004388:	4619      	mov	r1, r3
 800438a:	4620      	mov	r0, r4
 800438c:	f7fe fcf8 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&About_AnimationManager, "Github", &x, &y);
 8004390:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004394:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8004398:	4985      	ldr	r1, [pc, #532]	@ (80045b0 <System_UI_Loop+0x16f4>)
 800439a:	4884      	ldr	r0, [pc, #528]	@ (80045ac <System_UI_Loop+0x16f0>)
 800439c:	f003 fecb 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Github");
 80043a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fc f9ce 	bl	8000744 <__aeabi_f2iz>
 80043a8:	4603      	mov	r3, r0
 80043aa:	b21c      	sxth	r4, r3
 80043ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fc f9c8 	bl	8000744 <__aeabi_f2iz>
 80043b4:	4603      	mov	r3, r0
 80043b6:	b21b      	sxth	r3, r3
 80043b8:	4a7d      	ldr	r2, [pc, #500]	@ (80045b0 <System_UI_Loop+0x16f4>)
 80043ba:	4619      	mov	r1, r3
 80043bc:	4620      	mov	r0, r4
 80043be:	f7fe fcdf 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&About_AnimationManager, "Donate", &x, &y);
 80043c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80043c6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80043ca:	497a      	ldr	r1, [pc, #488]	@ (80045b4 <System_UI_Loop+0x16f8>)
 80043cc:	4877      	ldr	r0, [pc, #476]	@ (80045ac <System_UI_Loop+0x16f0>)
 80043ce:	f003 feb2 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Donate");
 80043d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fc f9b5 	bl	8000744 <__aeabi_f2iz>
 80043da:	4603      	mov	r3, r0
 80043dc:	b21c      	sxth	r4, r3
 80043de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fc f9af 	bl	8000744 <__aeabi_f2iz>
 80043e6:	4603      	mov	r3, r0
 80043e8:	b21b      	sxth	r3, r3
 80043ea:	4a72      	ldr	r2, [pc, #456]	@ (80045b4 <System_UI_Loop+0x16f8>)
 80043ec:	4619      	mov	r1, r3
 80043ee:	4620      	mov	r0, r4
 80043f0:	f7fe fcc6 	bl	8002d80 <OLED_DisplayString>

    OLED_GetObjectPosition(&About_AnimationManager, "_GHA", &x, &y);
 80043f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80043f8:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80043fc:	496e      	ldr	r1, [pc, #440]	@ (80045b8 <System_UI_Loop+0x16fc>)
 80043fe:	486b      	ldr	r0, [pc, #428]	@ (80045ac <System_UI_Loop+0x16f0>)
 8004400:	f003 fe99 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Github.com/UnikoZera");
 8004404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004406:	4618      	mov	r0, r3
 8004408:	f7fc f99c 	bl	8000744 <__aeabi_f2iz>
 800440c:	4603      	mov	r3, r0
 800440e:	b21c      	sxth	r4, r3
 8004410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004412:	4618      	mov	r0, r3
 8004414:	f7fc f996 	bl	8000744 <__aeabi_f2iz>
 8004418:	4603      	mov	r3, r0
 800441a:	b21b      	sxth	r3, r3
 800441c:	4a67      	ldr	r2, [pc, #412]	@ (80045bc <System_UI_Loop+0x1700>)
 800441e:	4619      	mov	r1, r3
 8004420:	4620      	mov	r0, r4
 8004422:	f7fe fcad 	bl	8002d80 <OLED_DisplayString>
    OLED_InvertArea(x, y, strlen("Github.com/UnikoZera") * 6, 10);
 8004426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004428:	4618      	mov	r0, r3
 800442a:	f7fc f98b 	bl	8000744 <__aeabi_f2iz>
 800442e:	4603      	mov	r3, r0
 8004430:	b21c      	sxth	r4, r3
 8004432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004434:	4618      	mov	r0, r3
 8004436:	f7fc f985 	bl	8000744 <__aeabi_f2iz>
 800443a:	4603      	mov	r3, r0
 800443c:	b219      	sxth	r1, r3
 800443e:	230a      	movs	r3, #10
 8004440:	2278      	movs	r2, #120	@ 0x78
 8004442:	4620      	mov	r0, r4
 8004444:	f7fe fa6a 	bl	800291c <OLED_InvertArea>
    OLED_GetObjectPosition(&About_AnimationManager, "DetailDonate", &x, &y);
 8004448:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800444c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8004450:	495b      	ldr	r1, [pc, #364]	@ (80045c0 <System_UI_Loop+0x1704>)
 8004452:	4856      	ldr	r0, [pc, #344]	@ (80045ac <System_UI_Loop+0x16f0>)
 8004454:	f003 fe6f 	bl	8008136 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "ID:3546696818624992");
 8004458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800445a:	4618      	mov	r0, r3
 800445c:	f7fc f972 	bl	8000744 <__aeabi_f2iz>
 8004460:	4603      	mov	r3, r0
 8004462:	b21c      	sxth	r4, r3
 8004464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004466:	4618      	mov	r0, r3
 8004468:	f7fc f96c 	bl	8000744 <__aeabi_f2iz>
 800446c:	4603      	mov	r3, r0
 800446e:	b21b      	sxth	r3, r3
 8004470:	4a54      	ldr	r2, [pc, #336]	@ (80045c4 <System_UI_Loop+0x1708>)
 8004472:	4619      	mov	r1, r3
 8004474:	4620      	mov	r0, r4
 8004476:	f7fe fc83 	bl	8002d80 <OLED_DisplayString>
    OLED_InvertArea(x, y, strlen("ID:3546696818624992") * 6, 10);
 800447a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447c:	4618      	mov	r0, r3
 800447e:	f7fc f961 	bl	8000744 <__aeabi_f2iz>
 8004482:	4603      	mov	r3, r0
 8004484:	b21c      	sxth	r4, r3
 8004486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004488:	4618      	mov	r0, r3
 800448a:	f7fc f95b 	bl	8000744 <__aeabi_f2iz>
 800448e:	4603      	mov	r3, r0
 8004490:	b219      	sxth	r1, r3
 8004492:	230a      	movs	r3, #10
 8004494:	2272      	movs	r2, #114	@ 0x72
 8004496:	4620      	mov	r0, r4
 8004498:	f7fe fa40 	bl	800291c <OLED_InvertArea>

    OLED_GetObjectPosition(&g_AnimationManager, "TitleBGScale", &x, &y);
 800449c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80044a0:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80044a4:	4948      	ldr	r1, [pc, #288]	@ (80045c8 <System_UI_Loop+0x170c>)
 80044a6:	4849      	ldr	r0, [pc, #292]	@ (80045cc <System_UI_Loop+0x1710>)
 80044a8:	f003 fe45 	bl	8008136 <OLED_GetObjectPosition>
    OLED_InvertArea(OLED_WIDTH - x, 0, x, y);
 80044ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ae:	4619      	mov	r1, r3
 80044b0:	f04f 4086 	mov.w	r0, #1124073472	@ 0x43000000
 80044b4:	f7fb fe60 	bl	8000178 <__aeabi_fsub>
 80044b8:	4603      	mov	r3, r0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fc f942 	bl	8000744 <__aeabi_f2iz>
 80044c0:	4603      	mov	r3, r0
 80044c2:	b21c      	sxth	r4, r3
 80044c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fc f962 	bl	8000790 <__aeabi_f2uiz>
 80044cc:	4603      	mov	r3, r0
 80044ce:	b2dd      	uxtb	r5, r3
 80044d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fc f95c 	bl	8000790 <__aeabi_f2uiz>
 80044d8:	4603      	mov	r3, r0
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	462a      	mov	r2, r5
 80044de:	2100      	movs	r1, #0
 80044e0:	4620      	mov	r0, r4
 80044e2:	f7fe fa1b 	bl	800291c <OLED_InvertArea>

    OLED_GetObjectPosition(&g_AnimationManager, "Cursor", &x, &y);
 80044e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80044ea:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80044ee:	4938      	ldr	r1, [pc, #224]	@ (80045d0 <System_UI_Loop+0x1714>)
 80044f0:	4836      	ldr	r0, [pc, #216]	@ (80045cc <System_UI_Loop+0x1710>)
 80044f2:	f003 fe20 	bl	8008136 <OLED_GetObjectPosition>
    OLED_GetObjectPosition(&g_AnimationManager, "CursorScale", &x1, &y1);
 80044f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80044fa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80044fe:	4935      	ldr	r1, [pc, #212]	@ (80045d4 <System_UI_Loop+0x1718>)
 8004500:	4832      	ldr	r0, [pc, #200]	@ (80045cc <System_UI_Loop+0x1710>)
 8004502:	f003 fe18 	bl	8008136 <OLED_GetObjectPosition>
    OLED_InvertArea(x - 2, y - 2, x1, y1); // 绘制光标
 8004506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004508:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800450c:	4618      	mov	r0, r3
 800450e:	f7fb fe33 	bl	8000178 <__aeabi_fsub>
 8004512:	4603      	mov	r3, r0
 8004514:	4618      	mov	r0, r3
 8004516:	f7fc f915 	bl	8000744 <__aeabi_f2iz>
 800451a:	4603      	mov	r3, r0
 800451c:	b21c      	sxth	r4, r3
 800451e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004520:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004524:	4618      	mov	r0, r3
 8004526:	f7fb fe27 	bl	8000178 <__aeabi_fsub>
 800452a:	4603      	mov	r3, r0
 800452c:	4618      	mov	r0, r3
 800452e:	f7fc f909 	bl	8000744 <__aeabi_f2iz>
 8004532:	4603      	mov	r3, r0
 8004534:	b21d      	sxth	r5, r3
 8004536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004538:	4618      	mov	r0, r3
 800453a:	f7fc f929 	bl	8000790 <__aeabi_f2uiz>
 800453e:	4603      	mov	r3, r0
 8004540:	b2de      	uxtb	r6, r3
 8004542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004544:	4618      	mov	r0, r3
 8004546:	f7fc f923 	bl	8000790 <__aeabi_f2uiz>
 800454a:	4603      	mov	r3, r0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	4632      	mov	r2, r6
 8004550:	4629      	mov	r1, r5
 8004552:	4620      	mov	r0, r4
 8004554:	f7fe f9e2 	bl	800291c <OLED_InvertArea>
#pragma endregion DRAWER

#pragma region PlayerSelection //选择某个选项时候的详细内容
    if (menuRank == 1)
 8004558:	4b1f      	ldr	r3, [pc, #124]	@ (80045d8 <System_UI_Loop+0x171c>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b01      	cmp	r3, #1
 800455e:	f040 8382 	bne.w	8004c66 <System_UI_Loop+0x1daa>
    {
        switch (menuSelection)
 8004562:	4b1e      	ldr	r3, [pc, #120]	@ (80045dc <System_UI_Loop+0x1720>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	3b01      	subs	r3, #1
 8004568:	2b04      	cmp	r3, #4
 800456a:	f201 80db 	bhi.w	8005724 <System_UI_Loop+0x2868>
 800456e:	a201      	add	r2, pc, #4	@ (adr r2, 8004574 <System_UI_Loop+0x16b8>)
 8004570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004574:	080045e1 	.word	0x080045e1
 8004578:	08004703 	.word	0x08004703
 800457c:	0800488d 	.word	0x0800488d
 8004580:	080049af 	.word	0x080049af
 8004584:	08004b45 	.word	0x08004b45
 8004588:	0800e89c 	.word	0x0800e89c
 800458c:	0800e900 	.word	0x0800e900
 8004590:	2000043e 	.word	0x2000043e
 8004594:	80808081 	.word	0x80808081
 8004598:	0800e644 	.word	0x0800e644
 800459c:	20002628 	.word	0x20002628
 80045a0:	0800e8ac 	.word	0x0800e8ac
 80045a4:	0800e650 	.word	0x0800e650
 80045a8:	0800e654 	.word	0x0800e654
 80045ac:	20002c1c 	.word	0x20002c1c
 80045b0:	0800e660 	.word	0x0800e660
 80045b4:	0800e668 	.word	0x0800e668
 80045b8:	0800e69c 	.word	0x0800e69c
 80045bc:	0800e8bc 	.word	0x0800e8bc
 80045c0:	0800e6a4 	.word	0x0800e6a4
 80045c4:	0800e8d4 	.word	0x0800e8d4
 80045c8:	0800e6b4 	.word	0x0800e6b4
 80045cc:	20003df8 	.word	0x20003df8
 80045d0:	0800e6c4 	.word	0x0800e6c4
 80045d4:	0800e6cc 	.word	0x0800e6cc
 80045d8:	2000043c 	.word	0x2000043c
 80045dc:	2000043d 	.word	0x2000043d
        {
        case 1:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 80045e0:	2300      	movs	r3, #0
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	4b8e      	ldr	r3, [pc, #568]	@ (8004824 <System_UI_Loop+0x1968>)
 80045ec:	4a8e      	ldr	r2, [pc, #568]	@ (8004828 <System_UI_Loop+0x196c>)
 80045ee:	498f      	ldr	r1, [pc, #572]	@ (800482c <System_UI_Loop+0x1970>)
 80045f0:	488f      	ldr	r0, [pc, #572]	@ (8004830 <System_UI_Loop+0x1974>)
 80045f2:	f003 fe7b 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", OLED_WIDTH - strlen("Machine States") * 6, OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 80045f6:	2300      	movs	r3, #0
 80045f8:	9301      	str	r3, [sp, #4]
 80045fa:	2301      	movs	r3, #1
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	4b89      	ldr	r3, [pc, #548]	@ (8004824 <System_UI_Loop+0x1968>)
 8004600:	4a8c      	ldr	r2, [pc, #560]	@ (8004834 <System_UI_Loop+0x1978>)
 8004602:	498d      	ldr	r1, [pc, #564]	@ (8004838 <System_UI_Loop+0x197c>)
 8004604:	488a      	ldr	r0, [pc, #552]	@ (8004830 <System_UI_Loop+0x1974>)
 8004606:	f003 fe71 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", OLED_WIDTH - strlen("STM Settings") * 6, OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 800460a:	2300      	movs	r3, #0
 800460c:	9301      	str	r3, [sp, #4]
 800460e:	2301      	movs	r3, #1
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	4b84      	ldr	r3, [pc, #528]	@ (8004824 <System_UI_Loop+0x1968>)
 8004614:	4a84      	ldr	r2, [pc, #528]	@ (8004828 <System_UI_Loop+0x196c>)
 8004616:	4989      	ldr	r1, [pc, #548]	@ (800483c <System_UI_Loop+0x1980>)
 8004618:	4885      	ldr	r0, [pc, #532]	@ (8004830 <System_UI_Loop+0x1974>)
 800461a:	f003 fe67 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 800461e:	2300      	movs	r3, #0
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	4b7e      	ldr	r3, [pc, #504]	@ (8004824 <System_UI_Loop+0x1968>)
 800462a:	4a85      	ldr	r2, [pc, #532]	@ (8004840 <System_UI_Loop+0x1984>)
 800462c:	4985      	ldr	r1, [pc, #532]	@ (8004844 <System_UI_Loop+0x1988>)
 800462e:	4880      	ldr	r0, [pc, #512]	@ (8004830 <System_UI_Loop+0x1974>)
 8004630:	f003 fe5c 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004634:	2300      	movs	r3, #0
 8004636:	9301      	str	r3, [sp, #4]
 8004638:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	4b79      	ldr	r3, [pc, #484]	@ (8004824 <System_UI_Loop+0x1968>)
 8004640:	4a81      	ldr	r2, [pc, #516]	@ (8004848 <System_UI_Loop+0x198c>)
 8004642:	4982      	ldr	r1, [pc, #520]	@ (800484c <System_UI_Loop+0x1990>)
 8004644:	487a      	ldr	r0, [pc, #488]	@ (8004830 <System_UI_Loop+0x1974>)
 8004646:	f003 fe51 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 800464a:	2304      	movs	r3, #4
 800464c:	9301      	str	r3, [sp, #4]
 800464e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	f04f 0300 	mov.w	r3, #0
 8004658:	4a7b      	ldr	r2, [pc, #492]	@ (8004848 <System_UI_Loop+0x198c>)
 800465a:	497d      	ldr	r1, [pc, #500]	@ (8004850 <System_UI_Loop+0x1994>)
 800465c:	4874      	ldr	r0, [pc, #464]	@ (8004830 <System_UI_Loop+0x1974>)
 800465e:	f003 fe45 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Epicful Games") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8004662:	2318      	movs	r3, #24
 8004664:	9301      	str	r3, [sp, #4]
 8004666:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004670:	4a78      	ldr	r2, [pc, #480]	@ (8004854 <System_UI_Loop+0x1998>)
 8004672:	4979      	ldr	r1, [pc, #484]	@ (8004858 <System_UI_Loop+0x199c>)
 8004674:	4879      	ldr	r0, [pc, #484]	@ (800485c <System_UI_Loop+0x19a0>)
 8004676:	f003 fe39 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Games") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 800467a:	2315      	movs	r3, #21
 800467c:	9301      	str	r3, [sp, #4]
 800467e:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	4b76      	ldr	r3, [pc, #472]	@ (8004860 <System_UI_Loop+0x19a4>)
 8004686:	4a77      	ldr	r2, [pc, #476]	@ (8004864 <System_UI_Loop+0x19a8>)
 8004688:	4977      	ldr	r1, [pc, #476]	@ (8004868 <System_UI_Loop+0x19ac>)
 800468a:	4874      	ldr	r0, [pc, #464]	@ (800485c <System_UI_Loop+0x19a0>)
 800468c:	f003 fe2e 	bl	80082ec <OLED_DoTweenObject>

            OLED_DoTweenObject(&Menu_AnimationManager, "IconGames", OLED_ICON_END_X, OLED_ICON_END_Y,OLED_ICON_TWEEN_IN_TIME, OLED_ICON_TWEEN_IN_STYLE);
 8004690:	2306      	movs	r3, #6
 8004692:	9301      	str	r3, [sp, #4]
 8004694:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	4b74      	ldr	r3, [pc, #464]	@ (800486c <System_UI_Loop+0x19b0>)
 800469c:	4a6d      	ldr	r2, [pc, #436]	@ (8004854 <System_UI_Loop+0x1998>)
 800469e:	4974      	ldr	r1, [pc, #464]	@ (8004870 <System_UI_Loop+0x19b4>)
 80046a0:	4874      	ldr	r0, [pc, #464]	@ (8004874 <System_UI_Loop+0x19b8>)
 80046a2:	f003 fe23 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&Menu_AnimationManager, "IconTools", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 80046a6:	2306      	movs	r3, #6
 80046a8:	9301      	str	r3, [sp, #4]
 80046aa:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	4b6e      	ldr	r3, [pc, #440]	@ (800486c <System_UI_Loop+0x19b0>)
 80046b2:	4a71      	ldr	r2, [pc, #452]	@ (8004878 <System_UI_Loop+0x19bc>)
 80046b4:	4971      	ldr	r1, [pc, #452]	@ (800487c <System_UI_Loop+0x19c0>)
 80046b6:	486f      	ldr	r0, [pc, #444]	@ (8004874 <System_UI_Loop+0x19b8>)
 80046b8:	f003 fe18 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&Menu_AnimationManager, "IconStatus", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 80046bc:	2306      	movs	r3, #6
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	4b69      	ldr	r3, [pc, #420]	@ (800486c <System_UI_Loop+0x19b0>)
 80046c8:	4a6b      	ldr	r2, [pc, #428]	@ (8004878 <System_UI_Loop+0x19bc>)
 80046ca:	496d      	ldr	r1, [pc, #436]	@ (8004880 <System_UI_Loop+0x19c4>)
 80046cc:	4869      	ldr	r0, [pc, #420]	@ (8004874 <System_UI_Loop+0x19b8>)
 80046ce:	f003 fe0d 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&Menu_AnimationManager, "IconSettings", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 80046d2:	2306      	movs	r3, #6
 80046d4:	9301      	str	r3, [sp, #4]
 80046d6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	4b63      	ldr	r3, [pc, #396]	@ (800486c <System_UI_Loop+0x19b0>)
 80046de:	4a66      	ldr	r2, [pc, #408]	@ (8004878 <System_UI_Loop+0x19bc>)
 80046e0:	4968      	ldr	r1, [pc, #416]	@ (8004884 <System_UI_Loop+0x19c8>)
 80046e2:	4864      	ldr	r0, [pc, #400]	@ (8004874 <System_UI_Loop+0x19b8>)
 80046e4:	f003 fe02 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&Menu_AnimationManager, "IconAbout", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 80046e8:	2306      	movs	r3, #6
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	4b5e      	ldr	r3, [pc, #376]	@ (800486c <System_UI_Loop+0x19b0>)
 80046f4:	4a60      	ldr	r2, [pc, #384]	@ (8004878 <System_UI_Loop+0x19bc>)
 80046f6:	4964      	ldr	r1, [pc, #400]	@ (8004888 <System_UI_Loop+0x19cc>)
 80046f8:	485e      	ldr	r0, [pc, #376]	@ (8004874 <System_UI_Loop+0x19b8>)
 80046fa:	f003 fdf7 	bl	80082ec <OLED_DoTweenObject>
            break;
 80046fe:	f001 b812 	b.w	8005726 <System_UI_Loop+0x286a>
        case 2:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004702:	2300      	movs	r3, #0
 8004704:	9301      	str	r3, [sp, #4]
 8004706:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	4b45      	ldr	r3, [pc, #276]	@ (8004824 <System_UI_Loop+0x1968>)
 800470e:	4a46      	ldr	r2, [pc, #280]	@ (8004828 <System_UI_Loop+0x196c>)
 8004710:	4946      	ldr	r1, [pc, #280]	@ (800482c <System_UI_Loop+0x1970>)
 8004712:	4847      	ldr	r0, [pc, #284]	@ (8004830 <System_UI_Loop+0x1974>)
 8004714:	f003 fdea 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 8004718:	2300      	movs	r3, #0
 800471a:	9301      	str	r3, [sp, #4]
 800471c:	2301      	movs	r3, #1
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	4b40      	ldr	r3, [pc, #256]	@ (8004824 <System_UI_Loop+0x1968>)
 8004722:	4a41      	ldr	r2, [pc, #260]	@ (8004828 <System_UI_Loop+0x196c>)
 8004724:	4945      	ldr	r1, [pc, #276]	@ (800483c <System_UI_Loop+0x1980>)
 8004726:	4842      	ldr	r0, [pc, #264]	@ (8004830 <System_UI_Loop+0x1974>)
 8004728:	f003 fde0 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 800472c:	2300      	movs	r3, #0
 800472e:	9301      	str	r3, [sp, #4]
 8004730:	2301      	movs	r3, #1
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	4b3b      	ldr	r3, [pc, #236]	@ (8004824 <System_UI_Loop+0x1968>)
 8004736:	4a42      	ldr	r2, [pc, #264]	@ (8004840 <System_UI_Loop+0x1984>)
 8004738:	4942      	ldr	r1, [pc, #264]	@ (8004844 <System_UI_Loop+0x1988>)
 800473a:	483d      	ldr	r0, [pc, #244]	@ (8004830 <System_UI_Loop+0x1974>)
 800473c:	f003 fdd6 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004740:	2300      	movs	r3, #0
 8004742:	9301      	str	r3, [sp, #4]
 8004744:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	4b36      	ldr	r3, [pc, #216]	@ (8004824 <System_UI_Loop+0x1968>)
 800474c:	4a39      	ldr	r2, [pc, #228]	@ (8004834 <System_UI_Loop+0x1978>)
 800474e:	493a      	ldr	r1, [pc, #232]	@ (8004838 <System_UI_Loop+0x197c>)
 8004750:	4837      	ldr	r0, [pc, #220]	@ (8004830 <System_UI_Loop+0x1974>)
 8004752:	f003 fdcb 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004756:	2300      	movs	r3, #0
 8004758:	9301      	str	r3, [sp, #4]
 800475a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	4b30      	ldr	r3, [pc, #192]	@ (8004824 <System_UI_Loop+0x1968>)
 8004762:	4a39      	ldr	r2, [pc, #228]	@ (8004848 <System_UI_Loop+0x198c>)
 8004764:	493a      	ldr	r1, [pc, #232]	@ (8004850 <System_UI_Loop+0x1994>)
 8004766:	4832      	ldr	r0, [pc, #200]	@ (8004830 <System_UI_Loop+0x1974>)
 8004768:	f003 fdc0 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 800476c:	2304      	movs	r3, #4
 800476e:	9301      	str	r3, [sp, #4]
 8004770:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	f04f 0300 	mov.w	r3, #0
 800477a:	4a33      	ldr	r2, [pc, #204]	@ (8004848 <System_UI_Loop+0x198c>)
 800477c:	4933      	ldr	r1, [pc, #204]	@ (800484c <System_UI_Loop+0x1990>)
 800477e:	482c      	ldr	r0, [pc, #176]	@ (8004830 <System_UI_Loop+0x1974>)
 8004780:	f003 fdb4 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Tools for you") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8004784:	2318      	movs	r3, #24
 8004786:	9301      	str	r3, [sp, #4]
 8004788:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004792:	4a30      	ldr	r2, [pc, #192]	@ (8004854 <System_UI_Loop+0x1998>)
 8004794:	4930      	ldr	r1, [pc, #192]	@ (8004858 <System_UI_Loop+0x199c>)
 8004796:	4831      	ldr	r0, [pc, #196]	@ (800485c <System_UI_Loop+0x19a0>)
 8004798:	f003 fda8 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Tools") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 800479c:	2315      	movs	r3, #21
 800479e:	9301      	str	r3, [sp, #4]
 80047a0:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	4b2e      	ldr	r3, [pc, #184]	@ (8004860 <System_UI_Loop+0x19a4>)
 80047a8:	4a2e      	ldr	r2, [pc, #184]	@ (8004864 <System_UI_Loop+0x19a8>)
 80047aa:	492f      	ldr	r1, [pc, #188]	@ (8004868 <System_UI_Loop+0x19ac>)
 80047ac:	482b      	ldr	r0, [pc, #172]	@ (800485c <System_UI_Loop+0x19a0>)
 80047ae:	f003 fd9d 	bl	80082ec <OLED_DoTweenObject>

            OLED_DoTweenObject(&Menu_AnimationManager, "IconGames", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 80047b2:	2306      	movs	r3, #6
 80047b4:	9301      	str	r3, [sp, #4]
 80047b6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	4b2b      	ldr	r3, [pc, #172]	@ (800486c <System_UI_Loop+0x19b0>)
 80047be:	4a2e      	ldr	r2, [pc, #184]	@ (8004878 <System_UI_Loop+0x19bc>)
 80047c0:	492b      	ldr	r1, [pc, #172]	@ (8004870 <System_UI_Loop+0x19b4>)
 80047c2:	482c      	ldr	r0, [pc, #176]	@ (8004874 <System_UI_Loop+0x19b8>)
 80047c4:	f003 fd92 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&Menu_AnimationManager, "IconTools", OLED_ICON_END_X, OLED_ICON_END_Y, OLED_ICON_TWEEN_IN_TIME, OLED_ICON_TWEEN_IN_STYLE);
 80047c8:	2306      	movs	r3, #6
 80047ca:	9301      	str	r3, [sp, #4]
 80047cc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	4b26      	ldr	r3, [pc, #152]	@ (800486c <System_UI_Loop+0x19b0>)
 80047d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004854 <System_UI_Loop+0x1998>)
 80047d6:	4929      	ldr	r1, [pc, #164]	@ (800487c <System_UI_Loop+0x19c0>)
 80047d8:	4826      	ldr	r0, [pc, #152]	@ (8004874 <System_UI_Loop+0x19b8>)
 80047da:	f003 fd87 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&Menu_AnimationManager, "IconStatus", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 80047de:	2306      	movs	r3, #6
 80047e0:	9301      	str	r3, [sp, #4]
 80047e2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	4b20      	ldr	r3, [pc, #128]	@ (800486c <System_UI_Loop+0x19b0>)
 80047ea:	4a23      	ldr	r2, [pc, #140]	@ (8004878 <System_UI_Loop+0x19bc>)
 80047ec:	4924      	ldr	r1, [pc, #144]	@ (8004880 <System_UI_Loop+0x19c4>)
 80047ee:	4821      	ldr	r0, [pc, #132]	@ (8004874 <System_UI_Loop+0x19b8>)
 80047f0:	f003 fd7c 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&Menu_AnimationManager, "IconSettings", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 80047f4:	2306      	movs	r3, #6
 80047f6:	9301      	str	r3, [sp, #4]
 80047f8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	4b1b      	ldr	r3, [pc, #108]	@ (800486c <System_UI_Loop+0x19b0>)
 8004800:	4a1d      	ldr	r2, [pc, #116]	@ (8004878 <System_UI_Loop+0x19bc>)
 8004802:	4920      	ldr	r1, [pc, #128]	@ (8004884 <System_UI_Loop+0x19c8>)
 8004804:	481b      	ldr	r0, [pc, #108]	@ (8004874 <System_UI_Loop+0x19b8>)
 8004806:	f003 fd71 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&Menu_AnimationManager, "IconAbout", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 800480a:	2306      	movs	r3, #6
 800480c:	9301      	str	r3, [sp, #4]
 800480e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	4b15      	ldr	r3, [pc, #84]	@ (800486c <System_UI_Loop+0x19b0>)
 8004816:	4a18      	ldr	r2, [pc, #96]	@ (8004878 <System_UI_Loop+0x19bc>)
 8004818:	491b      	ldr	r1, [pc, #108]	@ (8004888 <System_UI_Loop+0x19cc>)
 800481a:	4816      	ldr	r0, [pc, #88]	@ (8004874 <System_UI_Loop+0x19b8>)
 800481c:	f003 fd66 	bl	80082ec <OLED_DoTweenObject>
            break;
 8004820:	f000 bf81 	b.w	8005726 <System_UI_Loop+0x286a>
 8004824:	c1200000 	.word	0xc1200000
 8004828:	42600000 	.word	0x42600000
 800482c:	0800e5ac 	.word	0x0800e5ac
 8004830:	20003804 	.word	0x20003804
 8004834:	42300000 	.word	0x42300000
 8004838:	0800e56c 	.word	0x0800e56c
 800483c:	0800e578 	.word	0x0800e578
 8004840:	42880000 	.word	0x42880000
 8004844:	0800e588 	.word	0x0800e588
 8004848:	42480000 	.word	0x42480000
 800484c:	0800e560 	.word	0x0800e560
 8004850:	0800e554 	.word	0x0800e554
 8004854:	42a20000 	.word	0x42a20000
 8004858:	0800e6b4 	.word	0x0800e6b4
 800485c:	20003df8 	.word	0x20003df8
 8004860:	41200000 	.word	0x41200000
 8004864:	42040000 	.word	0x42040000
 8004868:	0800e6cc 	.word	0x0800e6cc
 800486c:	41980000 	.word	0x41980000
 8004870:	0800e71c 	.word	0x0800e71c
 8004874:	2000144c 	.word	0x2000144c
 8004878:	43050000 	.word	0x43050000
 800487c:	0800e728 	.word	0x0800e728
 8004880:	0800e734 	.word	0x0800e734
 8004884:	0800e740 	.word	0x0800e740
 8004888:	0800e750 	.word	0x0800e750
        case 3:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 800488c:	2300      	movs	r3, #0
 800488e:	9301      	str	r3, [sp, #4]
 8004890:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	4b8e      	ldr	r3, [pc, #568]	@ (8004ad0 <System_UI_Loop+0x1c14>)
 8004898:	4a8e      	ldr	r2, [pc, #568]	@ (8004ad4 <System_UI_Loop+0x1c18>)
 800489a:	498f      	ldr	r1, [pc, #572]	@ (8004ad8 <System_UI_Loop+0x1c1c>)
 800489c:	488f      	ldr	r0, [pc, #572]	@ (8004adc <System_UI_Loop+0x1c20>)
 800489e:	f003 fd25 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 80048a2:	2300      	movs	r3, #0
 80048a4:	9301      	str	r3, [sp, #4]
 80048a6:	2301      	movs	r3, #1
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	4b89      	ldr	r3, [pc, #548]	@ (8004ad0 <System_UI_Loop+0x1c14>)
 80048ac:	4a8c      	ldr	r2, [pc, #560]	@ (8004ae0 <System_UI_Loop+0x1c24>)
 80048ae:	498d      	ldr	r1, [pc, #564]	@ (8004ae4 <System_UI_Loop+0x1c28>)
 80048b0:	488a      	ldr	r0, [pc, #552]	@ (8004adc <System_UI_Loop+0x1c20>)
 80048b2:	f003 fd1b 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 80048b6:	2300      	movs	r3, #0
 80048b8:	9301      	str	r3, [sp, #4]
 80048ba:	2301      	movs	r3, #1
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	4b84      	ldr	r3, [pc, #528]	@ (8004ad0 <System_UI_Loop+0x1c14>)
 80048c0:	4a89      	ldr	r2, [pc, #548]	@ (8004ae8 <System_UI_Loop+0x1c2c>)
 80048c2:	498a      	ldr	r1, [pc, #552]	@ (8004aec <System_UI_Loop+0x1c30>)
 80048c4:	4885      	ldr	r0, [pc, #532]	@ (8004adc <System_UI_Loop+0x1c20>)
 80048c6:	f003 fd11 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 80048ca:	2300      	movs	r3, #0
 80048cc:	9301      	str	r3, [sp, #4]
 80048ce:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	4b7e      	ldr	r3, [pc, #504]	@ (8004ad0 <System_UI_Loop+0x1c14>)
 80048d6:	4a7f      	ldr	r2, [pc, #508]	@ (8004ad4 <System_UI_Loop+0x1c18>)
 80048d8:	4985      	ldr	r1, [pc, #532]	@ (8004af0 <System_UI_Loop+0x1c34>)
 80048da:	4880      	ldr	r0, [pc, #512]	@ (8004adc <System_UI_Loop+0x1c20>)
 80048dc:	f003 fd06 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 80048e0:	2300      	movs	r3, #0
 80048e2:	9301      	str	r3, [sp, #4]
 80048e4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	4b79      	ldr	r3, [pc, #484]	@ (8004ad0 <System_UI_Loop+0x1c14>)
 80048ec:	4a7c      	ldr	r2, [pc, #496]	@ (8004ae0 <System_UI_Loop+0x1c24>)
 80048ee:	4981      	ldr	r1, [pc, #516]	@ (8004af4 <System_UI_Loop+0x1c38>)
 80048f0:	487a      	ldr	r0, [pc, #488]	@ (8004adc <System_UI_Loop+0x1c20>)
 80048f2:	f003 fcfb 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 80048f6:	2304      	movs	r3, #4
 80048f8:	9301      	str	r3, [sp, #4]
 80048fa:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	4a7c      	ldr	r2, [pc, #496]	@ (8004af8 <System_UI_Loop+0x1c3c>)
 8004906:	497d      	ldr	r1, [pc, #500]	@ (8004afc <System_UI_Loop+0x1c40>)
 8004908:	4874      	ldr	r0, [pc, #464]	@ (8004adc <System_UI_Loop+0x1c20>)
 800490a:	f003 fcef 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Machine States") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 800490e:	2318      	movs	r3, #24
 8004910:	9301      	str	r3, [sp, #4]
 8004912:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800491c:	4a78      	ldr	r2, [pc, #480]	@ (8004b00 <System_UI_Loop+0x1c44>)
 800491e:	4979      	ldr	r1, [pc, #484]	@ (8004b04 <System_UI_Loop+0x1c48>)
 8004920:	4879      	ldr	r0, [pc, #484]	@ (8004b08 <System_UI_Loop+0x1c4c>)
 8004922:	f003 fce3 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("States") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8004926:	2315      	movs	r3, #21
 8004928:	9301      	str	r3, [sp, #4]
 800492a:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	4b76      	ldr	r3, [pc, #472]	@ (8004b0c <System_UI_Loop+0x1c50>)
 8004932:	4a77      	ldr	r2, [pc, #476]	@ (8004b10 <System_UI_Loop+0x1c54>)
 8004934:	4977      	ldr	r1, [pc, #476]	@ (8004b14 <System_UI_Loop+0x1c58>)
 8004936:	4874      	ldr	r0, [pc, #464]	@ (8004b08 <System_UI_Loop+0x1c4c>)
 8004938:	f003 fcd8 	bl	80082ec <OLED_DoTweenObject>

            OLED_DoTweenObject(&Menu_AnimationManager, "IconGames", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 800493c:	2306      	movs	r3, #6
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	4b74      	ldr	r3, [pc, #464]	@ (8004b18 <System_UI_Loop+0x1c5c>)
 8004948:	4a74      	ldr	r2, [pc, #464]	@ (8004b1c <System_UI_Loop+0x1c60>)
 800494a:	4975      	ldr	r1, [pc, #468]	@ (8004b20 <System_UI_Loop+0x1c64>)
 800494c:	4875      	ldr	r0, [pc, #468]	@ (8004b24 <System_UI_Loop+0x1c68>)
 800494e:	f003 fccd 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&Menu_AnimationManager, "IconTools", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 8004952:	2306      	movs	r3, #6
 8004954:	9301      	str	r3, [sp, #4]
 8004956:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	4b6e      	ldr	r3, [pc, #440]	@ (8004b18 <System_UI_Loop+0x1c5c>)
 800495e:	4a6f      	ldr	r2, [pc, #444]	@ (8004b1c <System_UI_Loop+0x1c60>)
 8004960:	4971      	ldr	r1, [pc, #452]	@ (8004b28 <System_UI_Loop+0x1c6c>)
 8004962:	4870      	ldr	r0, [pc, #448]	@ (8004b24 <System_UI_Loop+0x1c68>)
 8004964:	f003 fcc2 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&Menu_AnimationManager, "IconStatus", OLED_ICON_END_X, OLED_ICON_END_Y, OLED_ICON_TWEEN_IN_TIME, OLED_ICON_TWEEN_IN_STYLE);
 8004968:	2306      	movs	r3, #6
 800496a:	9301      	str	r3, [sp, #4]
 800496c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	4b69      	ldr	r3, [pc, #420]	@ (8004b18 <System_UI_Loop+0x1c5c>)
 8004974:	4a6d      	ldr	r2, [pc, #436]	@ (8004b2c <System_UI_Loop+0x1c70>)
 8004976:	496e      	ldr	r1, [pc, #440]	@ (8004b30 <System_UI_Loop+0x1c74>)
 8004978:	486a      	ldr	r0, [pc, #424]	@ (8004b24 <System_UI_Loop+0x1c68>)
 800497a:	f003 fcb7 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&Menu_AnimationManager, "IconSettings", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 800497e:	2306      	movs	r3, #6
 8004980:	9301      	str	r3, [sp, #4]
 8004982:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	4b63      	ldr	r3, [pc, #396]	@ (8004b18 <System_UI_Loop+0x1c5c>)
 800498a:	4a64      	ldr	r2, [pc, #400]	@ (8004b1c <System_UI_Loop+0x1c60>)
 800498c:	4969      	ldr	r1, [pc, #420]	@ (8004b34 <System_UI_Loop+0x1c78>)
 800498e:	4865      	ldr	r0, [pc, #404]	@ (8004b24 <System_UI_Loop+0x1c68>)
 8004990:	f003 fcac 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&Menu_AnimationManager, "IconAbout", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 8004994:	2306      	movs	r3, #6
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	4b5e      	ldr	r3, [pc, #376]	@ (8004b18 <System_UI_Loop+0x1c5c>)
 80049a0:	4a5e      	ldr	r2, [pc, #376]	@ (8004b1c <System_UI_Loop+0x1c60>)
 80049a2:	4965      	ldr	r1, [pc, #404]	@ (8004b38 <System_UI_Loop+0x1c7c>)
 80049a4:	485f      	ldr	r0, [pc, #380]	@ (8004b24 <System_UI_Loop+0x1c68>)
 80049a6:	f003 fca1 	bl	80082ec <OLED_DoTweenObject>
            break;
 80049aa:	f000 bebc 	b.w	8005726 <System_UI_Loop+0x286a>
        case 4:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 80049ae:	2300      	movs	r3, #0
 80049b0:	9301      	str	r3, [sp, #4]
 80049b2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	4b45      	ldr	r3, [pc, #276]	@ (8004ad0 <System_UI_Loop+0x1c14>)
 80049ba:	4a46      	ldr	r2, [pc, #280]	@ (8004ad4 <System_UI_Loop+0x1c18>)
 80049bc:	4946      	ldr	r1, [pc, #280]	@ (8004ad8 <System_UI_Loop+0x1c1c>)
 80049be:	4847      	ldr	r0, [pc, #284]	@ (8004adc <System_UI_Loop+0x1c20>)
 80049c0:	f003 fc94 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 80049c4:	2300      	movs	r3, #0
 80049c6:	9301      	str	r3, [sp, #4]
 80049c8:	2301      	movs	r3, #1
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	4b40      	ldr	r3, [pc, #256]	@ (8004ad0 <System_UI_Loop+0x1c14>)
 80049ce:	4a44      	ldr	r2, [pc, #272]	@ (8004ae0 <System_UI_Loop+0x1c24>)
 80049d0:	4944      	ldr	r1, [pc, #272]	@ (8004ae4 <System_UI_Loop+0x1c28>)
 80049d2:	4842      	ldr	r0, [pc, #264]	@ (8004adc <System_UI_Loop+0x1c20>)
 80049d4:	f003 fc8a 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 80049d8:	2300      	movs	r3, #0
 80049da:	9301      	str	r3, [sp, #4]
 80049dc:	2301      	movs	r3, #1
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ad0 <System_UI_Loop+0x1c14>)
 80049e2:	4a3f      	ldr	r2, [pc, #252]	@ (8004ae0 <System_UI_Loop+0x1c24>)
 80049e4:	4943      	ldr	r1, [pc, #268]	@ (8004af4 <System_UI_Loop+0x1c38>)
 80049e6:	483d      	ldr	r0, [pc, #244]	@ (8004adc <System_UI_Loop+0x1c20>)
 80049e8:	f003 fc80 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 80049ec:	2300      	movs	r3, #0
 80049ee:	9301      	str	r3, [sp, #4]
 80049f0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	4b36      	ldr	r3, [pc, #216]	@ (8004ad0 <System_UI_Loop+0x1c14>)
 80049f8:	4a3f      	ldr	r2, [pc, #252]	@ (8004af8 <System_UI_Loop+0x1c3c>)
 80049fa:	4940      	ldr	r1, [pc, #256]	@ (8004afc <System_UI_Loop+0x1c40>)
 80049fc:	4837      	ldr	r0, [pc, #220]	@ (8004adc <System_UI_Loop+0x1c20>)
 80049fe:	f003 fc75 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004a02:	2300      	movs	r3, #0
 8004a04:	9301      	str	r3, [sp, #4]
 8004a06:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	4b30      	ldr	r3, [pc, #192]	@ (8004ad0 <System_UI_Loop+0x1c14>)
 8004a0e:	4a36      	ldr	r2, [pc, #216]	@ (8004ae8 <System_UI_Loop+0x1c2c>)
 8004a10:	4936      	ldr	r1, [pc, #216]	@ (8004aec <System_UI_Loop+0x1c30>)
 8004a12:	4832      	ldr	r0, [pc, #200]	@ (8004adc <System_UI_Loop+0x1c20>)
 8004a14:	f003 fc6a 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8004a18:	2304      	movs	r3, #4
 8004a1a:	9301      	str	r3, [sp, #4]
 8004a1c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	4a2b      	ldr	r2, [pc, #172]	@ (8004ad4 <System_UI_Loop+0x1c18>)
 8004a28:	4931      	ldr	r1, [pc, #196]	@ (8004af0 <System_UI_Loop+0x1c34>)
 8004a2a:	482c      	ldr	r0, [pc, #176]	@ (8004adc <System_UI_Loop+0x1c20>)
 8004a2c:	f003 fc5e 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("STM Settings") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8004a30:	2318      	movs	r3, #24
 8004a32:	9301      	str	r3, [sp, #4]
 8004a34:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004a3e:	4a3f      	ldr	r2, [pc, #252]	@ (8004b3c <System_UI_Loop+0x1c80>)
 8004a40:	4930      	ldr	r1, [pc, #192]	@ (8004b04 <System_UI_Loop+0x1c48>)
 8004a42:	4831      	ldr	r0, [pc, #196]	@ (8004b08 <System_UI_Loop+0x1c4c>)
 8004a44:	f003 fc52 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Settings") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8004a48:	2315      	movs	r3, #21
 8004a4a:	9301      	str	r3, [sp, #4]
 8004a4c:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	4b2e      	ldr	r3, [pc, #184]	@ (8004b0c <System_UI_Loop+0x1c50>)
 8004a54:	4a3a      	ldr	r2, [pc, #232]	@ (8004b40 <System_UI_Loop+0x1c84>)
 8004a56:	492f      	ldr	r1, [pc, #188]	@ (8004b14 <System_UI_Loop+0x1c58>)
 8004a58:	482b      	ldr	r0, [pc, #172]	@ (8004b08 <System_UI_Loop+0x1c4c>)
 8004a5a:	f003 fc47 	bl	80082ec <OLED_DoTweenObject>

            OLED_DoTweenObject(&Menu_AnimationManager, "IconGames", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 8004a5e:	2306      	movs	r3, #6
 8004a60:	9301      	str	r3, [sp, #4]
 8004a62:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	4b2b      	ldr	r3, [pc, #172]	@ (8004b18 <System_UI_Loop+0x1c5c>)
 8004a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8004b1c <System_UI_Loop+0x1c60>)
 8004a6c:	492c      	ldr	r1, [pc, #176]	@ (8004b20 <System_UI_Loop+0x1c64>)
 8004a6e:	482d      	ldr	r0, [pc, #180]	@ (8004b24 <System_UI_Loop+0x1c68>)
 8004a70:	f003 fc3c 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&Menu_AnimationManager, "IconTools", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 8004a74:	2306      	movs	r3, #6
 8004a76:	9301      	str	r3, [sp, #4]
 8004a78:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	4b26      	ldr	r3, [pc, #152]	@ (8004b18 <System_UI_Loop+0x1c5c>)
 8004a80:	4a26      	ldr	r2, [pc, #152]	@ (8004b1c <System_UI_Loop+0x1c60>)
 8004a82:	4929      	ldr	r1, [pc, #164]	@ (8004b28 <System_UI_Loop+0x1c6c>)
 8004a84:	4827      	ldr	r0, [pc, #156]	@ (8004b24 <System_UI_Loop+0x1c68>)
 8004a86:	f003 fc31 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&Menu_AnimationManager, "IconStatus", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 8004a8a:	2306      	movs	r3, #6
 8004a8c:	9301      	str	r3, [sp, #4]
 8004a8e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	4b20      	ldr	r3, [pc, #128]	@ (8004b18 <System_UI_Loop+0x1c5c>)
 8004a96:	4a21      	ldr	r2, [pc, #132]	@ (8004b1c <System_UI_Loop+0x1c60>)
 8004a98:	4925      	ldr	r1, [pc, #148]	@ (8004b30 <System_UI_Loop+0x1c74>)
 8004a9a:	4822      	ldr	r0, [pc, #136]	@ (8004b24 <System_UI_Loop+0x1c68>)
 8004a9c:	f003 fc26 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&Menu_AnimationManager, "IconSettings", OLED_ICON_END_X, OLED_ICON_END_Y, OLED_ICON_TWEEN_IN_TIME, OLED_ICON_TWEEN_IN_STYLE);
 8004aa0:	2306      	movs	r3, #6
 8004aa2:	9301      	str	r3, [sp, #4]
 8004aa4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8004b18 <System_UI_Loop+0x1c5c>)
 8004aac:	4a1f      	ldr	r2, [pc, #124]	@ (8004b2c <System_UI_Loop+0x1c70>)
 8004aae:	4921      	ldr	r1, [pc, #132]	@ (8004b34 <System_UI_Loop+0x1c78>)
 8004ab0:	481c      	ldr	r0, [pc, #112]	@ (8004b24 <System_UI_Loop+0x1c68>)
 8004ab2:	f003 fc1b 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&Menu_AnimationManager, "IconAbout", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 8004ab6:	2306      	movs	r3, #6
 8004ab8:	9301      	str	r3, [sp, #4]
 8004aba:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	4b15      	ldr	r3, [pc, #84]	@ (8004b18 <System_UI_Loop+0x1c5c>)
 8004ac2:	4a16      	ldr	r2, [pc, #88]	@ (8004b1c <System_UI_Loop+0x1c60>)
 8004ac4:	491c      	ldr	r1, [pc, #112]	@ (8004b38 <System_UI_Loop+0x1c7c>)
 8004ac6:	4817      	ldr	r0, [pc, #92]	@ (8004b24 <System_UI_Loop+0x1c68>)
 8004ac8:	f003 fc10 	bl	80082ec <OLED_DoTweenObject>
            break;
 8004acc:	f000 be2b 	b.w	8005726 <System_UI_Loop+0x286a>
 8004ad0:	c1200000 	.word	0xc1200000
 8004ad4:	42600000 	.word	0x42600000
 8004ad8:	0800e5ac 	.word	0x0800e5ac
 8004adc:	20003804 	.word	0x20003804
 8004ae0:	42480000 	.word	0x42480000
 8004ae4:	0800e554 	.word	0x0800e554
 8004ae8:	42880000 	.word	0x42880000
 8004aec:	0800e588 	.word	0x0800e588
 8004af0:	0800e578 	.word	0x0800e578
 8004af4:	0800e560 	.word	0x0800e560
 8004af8:	42300000 	.word	0x42300000
 8004afc:	0800e56c 	.word	0x0800e56c
 8004b00:	42ae0000 	.word	0x42ae0000
 8004b04:	0800e6b4 	.word	0x0800e6b4
 8004b08:	20003df8 	.word	0x20003df8
 8004b0c:	41200000 	.word	0x41200000
 8004b10:	421c0000 	.word	0x421c0000
 8004b14:	0800e6cc 	.word	0x0800e6cc
 8004b18:	41980000 	.word	0x41980000
 8004b1c:	43050000 	.word	0x43050000
 8004b20:	0800e71c 	.word	0x0800e71c
 8004b24:	2000144c 	.word	0x2000144c
 8004b28:	0800e728 	.word	0x0800e728
 8004b2c:	42a20000 	.word	0x42a20000
 8004b30:	0800e734 	.word	0x0800e734
 8004b34:	0800e740 	.word	0x0800e740
 8004b38:	0800e750 	.word	0x0800e750
 8004b3c:	42960000 	.word	0x42960000
 8004b40:	424c0000 	.word	0x424c0000
        case 5:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004b44:	2300      	movs	r3, #0
 8004b46:	9301      	str	r3, [sp, #4]
 8004b48:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	4b8d      	ldr	r3, [pc, #564]	@ (8004d84 <System_UI_Loop+0x1ec8>)
 8004b50:	4a8d      	ldr	r2, [pc, #564]	@ (8004d88 <System_UI_Loop+0x1ecc>)
 8004b52:	498e      	ldr	r1, [pc, #568]	@ (8004d8c <System_UI_Loop+0x1ed0>)
 8004b54:	488e      	ldr	r0, [pc, #568]	@ (8004d90 <System_UI_Loop+0x1ed4>)
 8004b56:	f003 fbc9 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	9301      	str	r3, [sp, #4]
 8004b5e:	2301      	movs	r3, #1
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	4b88      	ldr	r3, [pc, #544]	@ (8004d84 <System_UI_Loop+0x1ec8>)
 8004b64:	4a8b      	ldr	r2, [pc, #556]	@ (8004d94 <System_UI_Loop+0x1ed8>)
 8004b66:	498c      	ldr	r1, [pc, #560]	@ (8004d98 <System_UI_Loop+0x1edc>)
 8004b68:	4889      	ldr	r0, [pc, #548]	@ (8004d90 <System_UI_Loop+0x1ed4>)
 8004b6a:	f003 fbbf 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 8004b6e:	2300      	movs	r3, #0
 8004b70:	9301      	str	r3, [sp, #4]
 8004b72:	2301      	movs	r3, #1
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	4b83      	ldr	r3, [pc, #524]	@ (8004d84 <System_UI_Loop+0x1ec8>)
 8004b78:	4a88      	ldr	r2, [pc, #544]	@ (8004d9c <System_UI_Loop+0x1ee0>)
 8004b7a:	4989      	ldr	r1, [pc, #548]	@ (8004da0 <System_UI_Loop+0x1ee4>)
 8004b7c:	4884      	ldr	r0, [pc, #528]	@ (8004d90 <System_UI_Loop+0x1ed4>)
 8004b7e:	f003 fbb5 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004b82:	2300      	movs	r3, #0
 8004b84:	9301      	str	r3, [sp, #4]
 8004b86:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	4b7d      	ldr	r3, [pc, #500]	@ (8004d84 <System_UI_Loop+0x1ec8>)
 8004b8e:	4a7e      	ldr	r2, [pc, #504]	@ (8004d88 <System_UI_Loop+0x1ecc>)
 8004b90:	4984      	ldr	r1, [pc, #528]	@ (8004da4 <System_UI_Loop+0x1ee8>)
 8004b92:	487f      	ldr	r0, [pc, #508]	@ (8004d90 <System_UI_Loop+0x1ed4>)
 8004b94:	f003 fbaa 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004b98:	2300      	movs	r3, #0
 8004b9a:	9301      	str	r3, [sp, #4]
 8004b9c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	4b78      	ldr	r3, [pc, #480]	@ (8004d84 <System_UI_Loop+0x1ec8>)
 8004ba4:	4a7b      	ldr	r2, [pc, #492]	@ (8004d94 <System_UI_Loop+0x1ed8>)
 8004ba6:	4980      	ldr	r1, [pc, #512]	@ (8004da8 <System_UI_Loop+0x1eec>)
 8004ba8:	4879      	ldr	r0, [pc, #484]	@ (8004d90 <System_UI_Loop+0x1ed4>)
 8004baa:	f003 fb9f 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_End_Y, OLED_ICON_TWEEN_IN_TIME, OLED_ICON_TWEEN_IN_STYLE);
 8004bae:	2306      	movs	r3, #6
 8004bb0:	9301      	str	r3, [sp, #4]
 8004bb2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	4a7b      	ldr	r2, [pc, #492]	@ (8004dac <System_UI_Loop+0x1ef0>)
 8004bbe:	497c      	ldr	r1, [pc, #496]	@ (8004db0 <System_UI_Loop+0x1ef4>)
 8004bc0:	4873      	ldr	r0, [pc, #460]	@ (8004d90 <System_UI_Loop+0x1ed4>)
 8004bc2:	f003 fb93 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Developer!") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8004bc6:	2318      	movs	r3, #24
 8004bc8:	9301      	str	r3, [sp, #4]
 8004bca:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004bd4:	4a77      	ldr	r2, [pc, #476]	@ (8004db4 <System_UI_Loop+0x1ef8>)
 8004bd6:	4978      	ldr	r1, [pc, #480]	@ (8004db8 <System_UI_Loop+0x1efc>)
 8004bd8:	4878      	ldr	r0, [pc, #480]	@ (8004dbc <System_UI_Loop+0x1f00>)
 8004bda:	f003 fb87 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("About") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8004bde:	2315      	movs	r3, #21
 8004be0:	9301      	str	r3, [sp, #4]
 8004be2:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	4b75      	ldr	r3, [pc, #468]	@ (8004dc0 <System_UI_Loop+0x1f04>)
 8004bea:	4a76      	ldr	r2, [pc, #472]	@ (8004dc4 <System_UI_Loop+0x1f08>)
 8004bec:	4976      	ldr	r1, [pc, #472]	@ (8004dc8 <System_UI_Loop+0x1f0c>)
 8004bee:	4873      	ldr	r0, [pc, #460]	@ (8004dbc <System_UI_Loop+0x1f00>)
 8004bf0:	f003 fb7c 	bl	80082ec <OLED_DoTweenObject>

            OLED_DoTweenObject(&Menu_AnimationManager, "IconGames", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 8004bf4:	2306      	movs	r3, #6
 8004bf6:	9301      	str	r3, [sp, #4]
 8004bf8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	4b73      	ldr	r3, [pc, #460]	@ (8004dcc <System_UI_Loop+0x1f10>)
 8004c00:	4a73      	ldr	r2, [pc, #460]	@ (8004dd0 <System_UI_Loop+0x1f14>)
 8004c02:	4974      	ldr	r1, [pc, #464]	@ (8004dd4 <System_UI_Loop+0x1f18>)
 8004c04:	4874      	ldr	r0, [pc, #464]	@ (8004dd8 <System_UI_Loop+0x1f1c>)
 8004c06:	f003 fb71 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&Menu_AnimationManager, "IconTools", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 8004c0a:	2306      	movs	r3, #6
 8004c0c:	9301      	str	r3, [sp, #4]
 8004c0e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	4b6d      	ldr	r3, [pc, #436]	@ (8004dcc <System_UI_Loop+0x1f10>)
 8004c16:	4a6e      	ldr	r2, [pc, #440]	@ (8004dd0 <System_UI_Loop+0x1f14>)
 8004c18:	4970      	ldr	r1, [pc, #448]	@ (8004ddc <System_UI_Loop+0x1f20>)
 8004c1a:	486f      	ldr	r0, [pc, #444]	@ (8004dd8 <System_UI_Loop+0x1f1c>)
 8004c1c:	f003 fb66 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&Menu_AnimationManager, "IconStatus", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 8004c20:	2306      	movs	r3, #6
 8004c22:	9301      	str	r3, [sp, #4]
 8004c24:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	4b68      	ldr	r3, [pc, #416]	@ (8004dcc <System_UI_Loop+0x1f10>)
 8004c2c:	4a68      	ldr	r2, [pc, #416]	@ (8004dd0 <System_UI_Loop+0x1f14>)
 8004c2e:	496c      	ldr	r1, [pc, #432]	@ (8004de0 <System_UI_Loop+0x1f24>)
 8004c30:	4869      	ldr	r0, [pc, #420]	@ (8004dd8 <System_UI_Loop+0x1f1c>)
 8004c32:	f003 fb5b 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&Menu_AnimationManager, "IconSettings", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 8004c36:	2306      	movs	r3, #6
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	4b62      	ldr	r3, [pc, #392]	@ (8004dcc <System_UI_Loop+0x1f10>)
 8004c42:	4a63      	ldr	r2, [pc, #396]	@ (8004dd0 <System_UI_Loop+0x1f14>)
 8004c44:	4967      	ldr	r1, [pc, #412]	@ (8004de4 <System_UI_Loop+0x1f28>)
 8004c46:	4864      	ldr	r0, [pc, #400]	@ (8004dd8 <System_UI_Loop+0x1f1c>)
 8004c48:	f003 fb50 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&Menu_AnimationManager, "IconAbout", OLED_ICON_END_X, OLED_ICON_END_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 8004c4c:	2306      	movs	r3, #6
 8004c4e:	9301      	str	r3, [sp, #4]
 8004c50:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	4b5d      	ldr	r3, [pc, #372]	@ (8004dcc <System_UI_Loop+0x1f10>)
 8004c58:	4a63      	ldr	r2, [pc, #396]	@ (8004de8 <System_UI_Loop+0x1f2c>)
 8004c5a:	4964      	ldr	r1, [pc, #400]	@ (8004dec <System_UI_Loop+0x1f30>)
 8004c5c:	485e      	ldr	r0, [pc, #376]	@ (8004dd8 <System_UI_Loop+0x1f1c>)
 8004c5e:	f003 fb45 	bl	80082ec <OLED_DoTweenObject>
            break;
 8004c62:	f000 bd60 	b.w	8005726 <System_UI_Loop+0x286a>
        default:
            break;
        }
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_ABOUT)
 8004c66:	4b62      	ldr	r3, [pc, #392]	@ (8004df0 <System_UI_Loop+0x1f34>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	f040 8217 	bne.w	800509e <System_UI_Loop+0x21e2>
 8004c70:	4b60      	ldr	r3, [pc, #384]	@ (8004df4 <System_UI_Loop+0x1f38>)
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	f040 8212 	bne.w	800509e <System_UI_Loop+0x21e2>
    {
        switch (menuSelection)
 8004c7a:	4b5f      	ldr	r3, [pc, #380]	@ (8004df8 <System_UI_Loop+0x1f3c>)
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	f200 820a 	bhi.w	800509a <System_UI_Loop+0x21de>
 8004c86:	a201      	add	r2, pc, #4	@ (adr r2, 8004c8c <System_UI_Loop+0x1dd0>)
 8004c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8c:	08004c9d 	.word	0x08004c9d
 8004c90:	08004e29 	.word	0x08004e29
 8004c94:	08004ef9 	.word	0x08004ef9
 8004c98:	08004fc9 	.word	0x08004fc9
        {
        case 1:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	9301      	str	r3, [sp, #4]
 8004ca0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	4b37      	ldr	r3, [pc, #220]	@ (8004d84 <System_UI_Loop+0x1ec8>)
 8004ca8:	4a40      	ldr	r2, [pc, #256]	@ (8004dac <System_UI_Loop+0x1ef0>)
 8004caa:	4941      	ldr	r1, [pc, #260]	@ (8004db0 <System_UI_Loop+0x1ef4>)
 8004cac:	4838      	ldr	r0, [pc, #224]	@ (8004d90 <System_UI_Loop+0x1ed4>)
 8004cae:	f003 fb1d 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleDeveloper", (OLED_WIDTH - strlen("DEVELOPER: UnikoZera") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8004cb2:	2304      	movs	r3, #4
 8004cb4:	9301      	str	r3, [sp, #4]
 8004cb6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8004cc4:	494d      	ldr	r1, [pc, #308]	@ (8004dfc <System_UI_Loop+0x1f40>)
 8004cc6:	4832      	ldr	r0, [pc, #200]	@ (8004d90 <System_UI_Loop+0x1ed4>)
 8004cc8:	f003 fb10 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGithub", (OLED_WIDTH - strlen("GH Address") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004ccc:	2300      	movs	r3, #0
 8004cce:	9301      	str	r3, [sp, #4]
 8004cd0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	4b2b      	ldr	r3, [pc, #172]	@ (8004d84 <System_UI_Loop+0x1ec8>)
 8004cd8:	4a34      	ldr	r2, [pc, #208]	@ (8004dac <System_UI_Loop+0x1ef0>)
 8004cda:	4949      	ldr	r1, [pc, #292]	@ (8004e00 <System_UI_Loop+0x1f44>)
 8004cdc:	482c      	ldr	r0, [pc, #176]	@ (8004d90 <System_UI_Loop+0x1ed4>)
 8004cde:	f003 fb05 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleDonate", (OLED_WIDTH - strlen("BiliBili Space") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	9301      	str	r3, [sp, #4]
 8004ce6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	4b25      	ldr	r3, [pc, #148]	@ (8004d84 <System_UI_Loop+0x1ec8>)
 8004cee:	4a2b      	ldr	r2, [pc, #172]	@ (8004d9c <System_UI_Loop+0x1ee0>)
 8004cf0:	4944      	ldr	r1, [pc, #272]	@ (8004e04 <System_UI_Loop+0x1f48>)
 8004cf2:	4827      	ldr	r0, [pc, #156]	@ (8004d90 <System_UI_Loop+0x1ed4>)
 8004cf4:	f003 fafa 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	9301      	str	r3, [sp, #4]
 8004cfc:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	4b20      	ldr	r3, [pc, #128]	@ (8004d84 <System_UI_Loop+0x1ec8>)
 8004d04:	4a20      	ldr	r2, [pc, #128]	@ (8004d88 <System_UI_Loop+0x1ecc>)
 8004d06:	4921      	ldr	r1, [pc, #132]	@ (8004d8c <System_UI_Loop+0x1ed0>)
 8004d08:	4821      	ldr	r0, [pc, #132]	@ (8004d90 <System_UI_Loop+0x1ed4>)
 8004d0a:	f003 faef 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("DEVELOPER: UnikoZera") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8004d0e:	2318      	movs	r3, #24
 8004d10:	9301      	str	r3, [sp, #4]
 8004d12:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004d1c:	4a3a      	ldr	r2, [pc, #232]	@ (8004e08 <System_UI_Loop+0x1f4c>)
 8004d1e:	4926      	ldr	r1, [pc, #152]	@ (8004db8 <System_UI_Loop+0x1efc>)
 8004d20:	4826      	ldr	r0, [pc, #152]	@ (8004dbc <System_UI_Loop+0x1f00>)
 8004d22:	f003 fae3 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Developer") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8004d26:	2315      	movs	r3, #21
 8004d28:	9301      	str	r3, [sp, #4]
 8004d2a:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	4b23      	ldr	r3, [pc, #140]	@ (8004dc0 <System_UI_Loop+0x1f04>)
 8004d32:	4a36      	ldr	r2, [pc, #216]	@ (8004e0c <System_UI_Loop+0x1f50>)
 8004d34:	4924      	ldr	r1, [pc, #144]	@ (8004dc8 <System_UI_Loop+0x1f0c>)
 8004d36:	4821      	ldr	r0, [pc, #132]	@ (8004dbc <System_UI_Loop+0x1f00>)
 8004d38:	f003 fad8 	bl	80082ec <OLED_DoTweenObject>

            OLED_DoTweenObject(&About_AnimationManager, "IconDeveloper", OLED_ICON_END_X, OLED_ICON_END_Y, OLED_ICON_TWEEN_IN_TIME, OLED_ICON_TWEEN_IN_STYLE);
 8004d3c:	2306      	movs	r3, #6
 8004d3e:	9301      	str	r3, [sp, #4]
 8004d40:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	4b21      	ldr	r3, [pc, #132]	@ (8004dcc <System_UI_Loop+0x1f10>)
 8004d48:	4a27      	ldr	r2, [pc, #156]	@ (8004de8 <System_UI_Loop+0x1f2c>)
 8004d4a:	4931      	ldr	r1, [pc, #196]	@ (8004e10 <System_UI_Loop+0x1f54>)
 8004d4c:	4831      	ldr	r0, [pc, #196]	@ (8004e14 <System_UI_Loop+0x1f58>)
 8004d4e:	f003 facd 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&About_AnimationManager, "_GHA", 3, OLED_HEIGHT, 300, EASE_IN_CUBIC);
 8004d52:	2304      	movs	r3, #4
 8004d54:	9301      	str	r3, [sp, #4]
 8004d56:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8004d60:	4a2d      	ldr	r2, [pc, #180]	@ (8004e18 <System_UI_Loop+0x1f5c>)
 8004d62:	492e      	ldr	r1, [pc, #184]	@ (8004e1c <System_UI_Loop+0x1f60>)
 8004d64:	482b      	ldr	r0, [pc, #172]	@ (8004e14 <System_UI_Loop+0x1f58>)
 8004d66:	f003 fac1 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&About_AnimationManager, "DetailDonate", 5, OLED_HEIGHT, 300, EASE_IN_CUBIC);
 8004d6a:	2304      	movs	r3, #4
 8004d6c:	9301      	str	r3, [sp, #4]
 8004d6e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8004d78:	4a29      	ldr	r2, [pc, #164]	@ (8004e20 <System_UI_Loop+0x1f64>)
 8004d7a:	492a      	ldr	r1, [pc, #168]	@ (8004e24 <System_UI_Loop+0x1f68>)
 8004d7c:	4825      	ldr	r0, [pc, #148]	@ (8004e14 <System_UI_Loop+0x1f58>)
 8004d7e:	f003 fab5 	bl	80082ec <OLED_DoTweenObject>
            break;
 8004d82:	e18b      	b.n	800509c <System_UI_Loop+0x21e0>
 8004d84:	c1200000 	.word	0xc1200000
 8004d88:	42600000 	.word	0x42600000
 8004d8c:	0800e5ac 	.word	0x0800e5ac
 8004d90:	20003804 	.word	0x20003804
 8004d94:	42480000 	.word	0x42480000
 8004d98:	0800e560 	.word	0x0800e560
 8004d9c:	42300000 	.word	0x42300000
 8004da0:	0800e56c 	.word	0x0800e56c
 8004da4:	0800e578 	.word	0x0800e578
 8004da8:	0800e554 	.word	0x0800e554
 8004dac:	42880000 	.word	0x42880000
 8004db0:	0800e588 	.word	0x0800e588
 8004db4:	427c0000 	.word	0x427c0000
 8004db8:	0800e6b4 	.word	0x0800e6b4
 8004dbc:	20003df8 	.word	0x20003df8
 8004dc0:	41200000 	.word	0x41200000
 8004dc4:	42040000 	.word	0x42040000
 8004dc8:	0800e6cc 	.word	0x0800e6cc
 8004dcc:	41980000 	.word	0x41980000
 8004dd0:	43050000 	.word	0x43050000
 8004dd4:	0800e71c 	.word	0x0800e71c
 8004dd8:	2000144c 	.word	0x2000144c
 8004ddc:	0800e728 	.word	0x0800e728
 8004de0:	0800e734 	.word	0x0800e734
 8004de4:	0800e740 	.word	0x0800e740
 8004de8:	42a20000 	.word	0x42a20000
 8004dec:	0800e750 	.word	0x0800e750
 8004df0:	2000043c 	.word	0x2000043c
 8004df4:	20001034 	.word	0x20001034
 8004df8:	2000043d 	.word	0x2000043d
 8004dfc:	0800e5d0 	.word	0x0800e5d0
 8004e00:	0800e5e0 	.word	0x0800e5e0
 8004e04:	0800e5ec 	.word	0x0800e5ec
 8004e08:	42f60000 	.word	0x42f60000
 8004e0c:	42640000 	.word	0x42640000
 8004e10:	0800e68c 	.word	0x0800e68c
 8004e14:	20002c1c 	.word	0x20002c1c
 8004e18:	40400000 	.word	0x40400000
 8004e1c:	0800e69c 	.word	0x0800e69c
 8004e20:	40a00000 	.word	0x40a00000
 8004e24:	0800e6a4 	.word	0x0800e6a4
        case 2:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleDeveloper", (OLED_WIDTH - strlen("DEVELOPER: UnikoZera") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004e28:	2300      	movs	r3, #0
 8004e2a:	9301      	str	r3, [sp, #4]
 8004e2c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	4ba4      	ldr	r3, [pc, #656]	@ (80050c4 <System_UI_Loop+0x2208>)
 8004e34:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8004e38:	49a3      	ldr	r1, [pc, #652]	@ (80050c8 <System_UI_Loop+0x220c>)
 8004e3a:	48a4      	ldr	r0, [pc, #656]	@ (80050cc <System_UI_Loop+0x2210>)
 8004e3c:	f003 fa56 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGithub", (OLED_WIDTH - strlen("GH Address") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8004e40:	2304      	movs	r3, #4
 8004e42:	9301      	str	r3, [sp, #4]
 8004e44:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	4aa0      	ldr	r2, [pc, #640]	@ (80050d0 <System_UI_Loop+0x2214>)
 8004e50:	49a0      	ldr	r1, [pc, #640]	@ (80050d4 <System_UI_Loop+0x2218>)
 8004e52:	489e      	ldr	r0, [pc, #632]	@ (80050cc <System_UI_Loop+0x2210>)
 8004e54:	f003 fa4a 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleDonate", (OLED_WIDTH - strlen("BiliBili Space") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004e58:	2300      	movs	r3, #0
 8004e5a:	9301      	str	r3, [sp, #4]
 8004e5c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	4b98      	ldr	r3, [pc, #608]	@ (80050c4 <System_UI_Loop+0x2208>)
 8004e64:	4a9c      	ldr	r2, [pc, #624]	@ (80050d8 <System_UI_Loop+0x221c>)
 8004e66:	499d      	ldr	r1, [pc, #628]	@ (80050dc <System_UI_Loop+0x2220>)
 8004e68:	4898      	ldr	r0, [pc, #608]	@ (80050cc <System_UI_Loop+0x2210>)
 8004e6a:	f003 fa3f 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004e6e:	2300      	movs	r3, #0
 8004e70:	9301      	str	r3, [sp, #4]
 8004e72:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	4b92      	ldr	r3, [pc, #584]	@ (80050c4 <System_UI_Loop+0x2208>)
 8004e7a:	4a99      	ldr	r2, [pc, #612]	@ (80050e0 <System_UI_Loop+0x2224>)
 8004e7c:	4999      	ldr	r1, [pc, #612]	@ (80050e4 <System_UI_Loop+0x2228>)
 8004e7e:	4893      	ldr	r0, [pc, #588]	@ (80050cc <System_UI_Loop+0x2210>)
 8004e80:	f003 fa34 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("GH Address") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8004e84:	2318      	movs	r3, #24
 8004e86:	9301      	str	r3, [sp, #4]
 8004e88:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004e92:	4a95      	ldr	r2, [pc, #596]	@ (80050e8 <System_UI_Loop+0x222c>)
 8004e94:	4995      	ldr	r1, [pc, #596]	@ (80050ec <System_UI_Loop+0x2230>)
 8004e96:	4896      	ldr	r0, [pc, #600]	@ (80050f0 <System_UI_Loop+0x2234>)
 8004e98:	f003 fa28 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Github") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8004e9c:	2315      	movs	r3, #21
 8004e9e:	9301      	str	r3, [sp, #4]
 8004ea0:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	4b93      	ldr	r3, [pc, #588]	@ (80050f4 <System_UI_Loop+0x2238>)
 8004ea8:	4a93      	ldr	r2, [pc, #588]	@ (80050f8 <System_UI_Loop+0x223c>)
 8004eaa:	4994      	ldr	r1, [pc, #592]	@ (80050fc <System_UI_Loop+0x2240>)
 8004eac:	4890      	ldr	r0, [pc, #576]	@ (80050f0 <System_UI_Loop+0x2234>)
 8004eae:	f003 fa1d 	bl	80082ec <OLED_DoTweenObject>

            OLED_DoTweenObject(&About_AnimationManager, "IconDeveloper", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 8004eb2:	2306      	movs	r3, #6
 8004eb4:	9301      	str	r3, [sp, #4]
 8004eb6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	4b90      	ldr	r3, [pc, #576]	@ (8005100 <System_UI_Loop+0x2244>)
 8004ebe:	4a91      	ldr	r2, [pc, #580]	@ (8005104 <System_UI_Loop+0x2248>)
 8004ec0:	4991      	ldr	r1, [pc, #580]	@ (8005108 <System_UI_Loop+0x224c>)
 8004ec2:	4892      	ldr	r0, [pc, #584]	@ (800510c <System_UI_Loop+0x2250>)
 8004ec4:	f003 fa12 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&About_AnimationManager, "_GHA", 3 , OLED_HEIGHT - 10, 300, EASE_IN_CUBIC);
 8004ec8:	2304      	movs	r3, #4
 8004eca:	9301      	str	r3, [sp, #4]
 8004ecc:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	4b8f      	ldr	r3, [pc, #572]	@ (8005110 <System_UI_Loop+0x2254>)
 8004ed4:	4a8f      	ldr	r2, [pc, #572]	@ (8005114 <System_UI_Loop+0x2258>)
 8004ed6:	4990      	ldr	r1, [pc, #576]	@ (8005118 <System_UI_Loop+0x225c>)
 8004ed8:	488c      	ldr	r0, [pc, #560]	@ (800510c <System_UI_Loop+0x2250>)
 8004eda:	f003 fa07 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&About_AnimationManager, "DetailDonate", 5, OLED_HEIGHT, 300, EASE_IN_CUBIC);
 8004ede:	2304      	movs	r3, #4
 8004ee0:	9301      	str	r3, [sp, #4]
 8004ee2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8004eec:	4a8b      	ldr	r2, [pc, #556]	@ (800511c <System_UI_Loop+0x2260>)
 8004eee:	498c      	ldr	r1, [pc, #560]	@ (8005120 <System_UI_Loop+0x2264>)
 8004ef0:	4886      	ldr	r0, [pc, #536]	@ (800510c <System_UI_Loop+0x2250>)
 8004ef2:	f003 f9fb 	bl	80082ec <OLED_DoTweenObject>
            break;
 8004ef6:	e0d1      	b.n	800509c <System_UI_Loop+0x21e0>
        case 3:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleDeveloper", (OLED_WIDTH - strlen("DEVELOPER: UnikoZera") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004ef8:	2300      	movs	r3, #0
 8004efa:	9301      	str	r3, [sp, #4]
 8004efc:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	4b70      	ldr	r3, [pc, #448]	@ (80050c4 <System_UI_Loop+0x2208>)
 8004f04:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8004f08:	496f      	ldr	r1, [pc, #444]	@ (80050c8 <System_UI_Loop+0x220c>)
 8004f0a:	4870      	ldr	r0, [pc, #448]	@ (80050cc <System_UI_Loop+0x2210>)
 8004f0c:	f003 f9ee 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGithub", (OLED_WIDTH - strlen("GH Address") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004f10:	2300      	movs	r3, #0
 8004f12:	9301      	str	r3, [sp, #4]
 8004f14:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	4b6a      	ldr	r3, [pc, #424]	@ (80050c4 <System_UI_Loop+0x2208>)
 8004f1c:	4a6c      	ldr	r2, [pc, #432]	@ (80050d0 <System_UI_Loop+0x2214>)
 8004f1e:	496d      	ldr	r1, [pc, #436]	@ (80050d4 <System_UI_Loop+0x2218>)
 8004f20:	486a      	ldr	r0, [pc, #424]	@ (80050cc <System_UI_Loop+0x2210>)
 8004f22:	f003 f9e3 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleDonate", (OLED_WIDTH - strlen("BiliBili Space") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8004f26:	2304      	movs	r3, #4
 8004f28:	9301      	str	r3, [sp, #4]
 8004f2a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	f04f 0300 	mov.w	r3, #0
 8004f34:	4a68      	ldr	r2, [pc, #416]	@ (80050d8 <System_UI_Loop+0x221c>)
 8004f36:	4969      	ldr	r1, [pc, #420]	@ (80050dc <System_UI_Loop+0x2220>)
 8004f38:	4864      	ldr	r0, [pc, #400]	@ (80050cc <System_UI_Loop+0x2210>)
 8004f3a:	f003 f9d7 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004f3e:	2300      	movs	r3, #0
 8004f40:	9301      	str	r3, [sp, #4]
 8004f42:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	4b5e      	ldr	r3, [pc, #376]	@ (80050c4 <System_UI_Loop+0x2208>)
 8004f4a:	4a65      	ldr	r2, [pc, #404]	@ (80050e0 <System_UI_Loop+0x2224>)
 8004f4c:	4965      	ldr	r1, [pc, #404]	@ (80050e4 <System_UI_Loop+0x2228>)
 8004f4e:	485f      	ldr	r0, [pc, #380]	@ (80050cc <System_UI_Loop+0x2210>)
 8004f50:	f003 f9cc 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("BiliBili Space") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8004f54:	2318      	movs	r3, #24
 8004f56:	9301      	str	r3, [sp, #4]
 8004f58:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004f62:	4a70      	ldr	r2, [pc, #448]	@ (8005124 <System_UI_Loop+0x2268>)
 8004f64:	4961      	ldr	r1, [pc, #388]	@ (80050ec <System_UI_Loop+0x2230>)
 8004f66:	4862      	ldr	r0, [pc, #392]	@ (80050f0 <System_UI_Loop+0x2234>)
 8004f68:	f003 f9c0 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Donate") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8004f6c:	2315      	movs	r3, #21
 8004f6e:	9301      	str	r3, [sp, #4]
 8004f70:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	4b5f      	ldr	r3, [pc, #380]	@ (80050f4 <System_UI_Loop+0x2238>)
 8004f78:	4a5f      	ldr	r2, [pc, #380]	@ (80050f8 <System_UI_Loop+0x223c>)
 8004f7a:	4960      	ldr	r1, [pc, #384]	@ (80050fc <System_UI_Loop+0x2240>)
 8004f7c:	485c      	ldr	r0, [pc, #368]	@ (80050f0 <System_UI_Loop+0x2234>)
 8004f7e:	f003 f9b5 	bl	80082ec <OLED_DoTweenObject>

            OLED_DoTweenObject(&About_AnimationManager, "IconDeveloper", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 8004f82:	2306      	movs	r3, #6
 8004f84:	9301      	str	r3, [sp, #4]
 8004f86:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	4b5c      	ldr	r3, [pc, #368]	@ (8005100 <System_UI_Loop+0x2244>)
 8004f8e:	4a5d      	ldr	r2, [pc, #372]	@ (8005104 <System_UI_Loop+0x2248>)
 8004f90:	495d      	ldr	r1, [pc, #372]	@ (8005108 <System_UI_Loop+0x224c>)
 8004f92:	485e      	ldr	r0, [pc, #376]	@ (800510c <System_UI_Loop+0x2250>)
 8004f94:	f003 f9aa 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&About_AnimationManager, "_GHA", 3, OLED_HEIGHT, 300, EASE_IN_CUBIC);
 8004f98:	2304      	movs	r3, #4
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8004fa6:	4a5b      	ldr	r2, [pc, #364]	@ (8005114 <System_UI_Loop+0x2258>)
 8004fa8:	495b      	ldr	r1, [pc, #364]	@ (8005118 <System_UI_Loop+0x225c>)
 8004faa:	4858      	ldr	r0, [pc, #352]	@ (800510c <System_UI_Loop+0x2250>)
 8004fac:	f003 f99e 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&About_AnimationManager, "DetailDonate", 5, OLED_HEIGHT - 10, 300, EASE_IN_CUBIC);            
 8004fb0:	2304      	movs	r3, #4
 8004fb2:	9301      	str	r3, [sp, #4]
 8004fb4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	4b55      	ldr	r3, [pc, #340]	@ (8005110 <System_UI_Loop+0x2254>)
 8004fbc:	4a57      	ldr	r2, [pc, #348]	@ (800511c <System_UI_Loop+0x2260>)
 8004fbe:	4958      	ldr	r1, [pc, #352]	@ (8005120 <System_UI_Loop+0x2264>)
 8004fc0:	4852      	ldr	r0, [pc, #328]	@ (800510c <System_UI_Loop+0x2250>)
 8004fc2:	f003 f993 	bl	80082ec <OLED_DoTweenObject>
            break;
 8004fc6:	e069      	b.n	800509c <System_UI_Loop+0x21e0>
        case 4:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleDeveloper", (OLED_WIDTH - strlen("DEVELOPER: UnikoZera") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004fc8:	2300      	movs	r3, #0
 8004fca:	9301      	str	r3, [sp, #4]
 8004fcc:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	4b3c      	ldr	r3, [pc, #240]	@ (80050c4 <System_UI_Loop+0x2208>)
 8004fd4:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8004fd8:	493b      	ldr	r1, [pc, #236]	@ (80050c8 <System_UI_Loop+0x220c>)
 8004fda:	483c      	ldr	r0, [pc, #240]	@ (80050cc <System_UI_Loop+0x2210>)
 8004fdc:	f003 f986 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGithub", (OLED_WIDTH - strlen("GH Address") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	9301      	str	r3, [sp, #4]
 8004fe4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	4b36      	ldr	r3, [pc, #216]	@ (80050c4 <System_UI_Loop+0x2208>)
 8004fec:	4a38      	ldr	r2, [pc, #224]	@ (80050d0 <System_UI_Loop+0x2214>)
 8004fee:	4939      	ldr	r1, [pc, #228]	@ (80050d4 <System_UI_Loop+0x2218>)
 8004ff0:	4836      	ldr	r0, [pc, #216]	@ (80050cc <System_UI_Loop+0x2210>)
 8004ff2:	f003 f97b 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleDonate", (OLED_WIDTH - strlen("BiliBili Space") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	9301      	str	r3, [sp, #4]
 8004ffa:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	4b30      	ldr	r3, [pc, #192]	@ (80050c4 <System_UI_Loop+0x2208>)
 8005002:	4a35      	ldr	r2, [pc, #212]	@ (80050d8 <System_UI_Loop+0x221c>)
 8005004:	4935      	ldr	r1, [pc, #212]	@ (80050dc <System_UI_Loop+0x2220>)
 8005006:	4831      	ldr	r0, [pc, #196]	@ (80050cc <System_UI_Loop+0x2210>)
 8005008:	f003 f970 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 800500c:	2304      	movs	r3, #4
 800500e:	9301      	str	r3, [sp, #4]
 8005010:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	4a31      	ldr	r2, [pc, #196]	@ (80050e0 <System_UI_Loop+0x2224>)
 800501c:	4931      	ldr	r1, [pc, #196]	@ (80050e4 <System_UI_Loop+0x2228>)
 800501e:	482b      	ldr	r0, [pc, #172]	@ (80050cc <System_UI_Loop+0x2210>)
 8005020:	f003 f964 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8005024:	2318      	movs	r3, #24
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8005032:	4a3d      	ldr	r2, [pc, #244]	@ (8005128 <System_UI_Loop+0x226c>)
 8005034:	492d      	ldr	r1, [pc, #180]	@ (80050ec <System_UI_Loop+0x2230>)
 8005036:	482e      	ldr	r0, [pc, #184]	@ (80050f0 <System_UI_Loop+0x2234>)
 8005038:	f003 f958 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 800503c:	2315      	movs	r3, #21
 800503e:	9301      	str	r3, [sp, #4]
 8005040:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	4b2b      	ldr	r3, [pc, #172]	@ (80050f4 <System_UI_Loop+0x2238>)
 8005048:	4a38      	ldr	r2, [pc, #224]	@ (800512c <System_UI_Loop+0x2270>)
 800504a:	492c      	ldr	r1, [pc, #176]	@ (80050fc <System_UI_Loop+0x2240>)
 800504c:	4828      	ldr	r0, [pc, #160]	@ (80050f0 <System_UI_Loop+0x2234>)
 800504e:	f003 f94d 	bl	80082ec <OLED_DoTweenObject>

            OLED_DoTweenObject(&About_AnimationManager, "IconDeveloper", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 8005052:	2306      	movs	r3, #6
 8005054:	9301      	str	r3, [sp, #4]
 8005056:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	4b28      	ldr	r3, [pc, #160]	@ (8005100 <System_UI_Loop+0x2244>)
 800505e:	4a29      	ldr	r2, [pc, #164]	@ (8005104 <System_UI_Loop+0x2248>)
 8005060:	4929      	ldr	r1, [pc, #164]	@ (8005108 <System_UI_Loop+0x224c>)
 8005062:	482a      	ldr	r0, [pc, #168]	@ (800510c <System_UI_Loop+0x2250>)
 8005064:	f003 f942 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&About_AnimationManager, "_GHA", 3, OLED_HEIGHT, 300, EASE_IN_CUBIC);
 8005068:	2304      	movs	r3, #4
 800506a:	9301      	str	r3, [sp, #4]
 800506c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8005076:	4a27      	ldr	r2, [pc, #156]	@ (8005114 <System_UI_Loop+0x2258>)
 8005078:	4927      	ldr	r1, [pc, #156]	@ (8005118 <System_UI_Loop+0x225c>)
 800507a:	4824      	ldr	r0, [pc, #144]	@ (800510c <System_UI_Loop+0x2250>)
 800507c:	f003 f936 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&About_AnimationManager, "DetailDonate", 5, OLED_HEIGHT, 300, EASE_IN_CUBIC);
 8005080:	2304      	movs	r3, #4
 8005082:	9301      	str	r3, [sp, #4]
 8005084:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 800508e:	4a23      	ldr	r2, [pc, #140]	@ (800511c <System_UI_Loop+0x2260>)
 8005090:	4923      	ldr	r1, [pc, #140]	@ (8005120 <System_UI_Loop+0x2264>)
 8005092:	481e      	ldr	r0, [pc, #120]	@ (800510c <System_UI_Loop+0x2250>)
 8005094:	f003 f92a 	bl	80082ec <OLED_DoTweenObject>
            break;
 8005098:	e000      	b.n	800509c <System_UI_Loop+0x21e0>
        default:
            break;
 800509a:	bf00      	nop
        switch (menuSelection)
 800509c:	e343      	b.n	8005726 <System_UI_Loop+0x286a>
        }
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_TOOLS)
 800509e:	4b24      	ldr	r3, [pc, #144]	@ (8005130 <System_UI_Loop+0x2274>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	f040 80c0 	bne.w	8005228 <System_UI_Loop+0x236c>
 80050a8:	4b22      	ldr	r3, [pc, #136]	@ (8005134 <System_UI_Loop+0x2278>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	f040 80bb 	bne.w	8005228 <System_UI_Loop+0x236c>
    {
        switch (menuSelection)
 80050b2:	4b21      	ldr	r3, [pc, #132]	@ (8005138 <System_UI_Loop+0x227c>)
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d040      	beq.n	800513c <System_UI_Loop+0x2280>
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	f000 8084 	beq.w	80051c8 <System_UI_Loop+0x230c>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
            break;
        default:
            break;
 80050c0:	e0b1      	b.n	8005226 <System_UI_Loop+0x236a>
 80050c2:	bf00      	nop
 80050c4:	c1200000 	.word	0xc1200000
 80050c8:	0800e5d0 	.word	0x0800e5d0
 80050cc:	20003804 	.word	0x20003804
 80050d0:	42880000 	.word	0x42880000
 80050d4:	0800e5e0 	.word	0x0800e5e0
 80050d8:	42300000 	.word	0x42300000
 80050dc:	0800e5ec 	.word	0x0800e5ec
 80050e0:	42600000 	.word	0x42600000
 80050e4:	0800e5ac 	.word	0x0800e5ac
 80050e8:	427c0000 	.word	0x427c0000
 80050ec:	0800e6b4 	.word	0x0800e6b4
 80050f0:	20003df8 	.word	0x20003df8
 80050f4:	41200000 	.word	0x41200000
 80050f8:	421c0000 	.word	0x421c0000
 80050fc:	0800e6cc 	.word	0x0800e6cc
 8005100:	41980000 	.word	0x41980000
 8005104:	43050000 	.word	0x43050000
 8005108:	0800e68c 	.word	0x0800e68c
 800510c:	20002c1c 	.word	0x20002c1c
 8005110:	42580000 	.word	0x42580000
 8005114:	40400000 	.word	0x40400000
 8005118:	0800e69c 	.word	0x0800e69c
 800511c:	40a00000 	.word	0x40a00000
 8005120:	0800e6a4 	.word	0x0800e6a4
 8005124:	42ae0000 	.word	0x42ae0000
 8005128:	42960000 	.word	0x42960000
 800512c:	41d80000 	.word	0x41d80000
 8005130:	2000043c 	.word	0x2000043c
 8005134:	20001034 	.word	0x20001034
 8005138:	2000043d 	.word	0x2000043d
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 800513c:	2300      	movs	r3, #0
 800513e:	9301      	str	r3, [sp, #4]
 8005140:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	4ba1      	ldr	r3, [pc, #644]	@ (80053cc <System_UI_Loop+0x2510>)
 8005148:	4aa1      	ldr	r2, [pc, #644]	@ (80053d0 <System_UI_Loop+0x2514>)
 800514a:	49a2      	ldr	r1, [pc, #648]	@ (80053d4 <System_UI_Loop+0x2518>)
 800514c:	48a2      	ldr	r0, [pc, #648]	@ (80053d8 <System_UI_Loop+0x251c>)
 800514e:	f003 f8cd 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "BAD APPLE!", (OLED_WIDTH - strlen("BAD APPLE!") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8005152:	2304      	movs	r3, #4
 8005154:	9301      	str	r3, [sp, #4]
 8005156:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	4a9e      	ldr	r2, [pc, #632]	@ (80053dc <System_UI_Loop+0x2520>)
 8005162:	499f      	ldr	r1, [pc, #636]	@ (80053e0 <System_UI_Loop+0x2524>)
 8005164:	489c      	ldr	r0, [pc, #624]	@ (80053d8 <System_UI_Loop+0x251c>)
 8005166:	f003 f8c1 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("BAD APPLE!") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 800516a:	2300      	movs	r3, #0
 800516c:	9301      	str	r3, [sp, #4]
 800516e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	4b95      	ldr	r3, [pc, #596]	@ (80053cc <System_UI_Loop+0x2510>)
 8005176:	4a9b      	ldr	r2, [pc, #620]	@ (80053e4 <System_UI_Loop+0x2528>)
 8005178:	499b      	ldr	r1, [pc, #620]	@ (80053e8 <System_UI_Loop+0x252c>)
 800517a:	4897      	ldr	r0, [pc, #604]	@ (80053d8 <System_UI_Loop+0x251c>)
 800517c:	f003 f8b6 	bl	80082ec <OLED_DoTweenObject>
 8005180:	2304      	movs	r3, #4
 8005182:	9301      	str	r3, [sp, #4]
 8005184:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800518e:	4a97      	ldr	r2, [pc, #604]	@ (80053ec <System_UI_Loop+0x2530>)
 8005190:	4997      	ldr	r1, [pc, #604]	@ (80053f0 <System_UI_Loop+0x2534>)
 8005192:	4898      	ldr	r0, [pc, #608]	@ (80053f4 <System_UI_Loop+0x2538>)
 8005194:	f003 f8aa 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("BAD APPLE!") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8005198:	2318      	movs	r3, #24
 800519a:	9301      	str	r3, [sp, #4]
 800519c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80051a6:	4a91      	ldr	r2, [pc, #580]	@ (80053ec <System_UI_Loop+0x2530>)
 80051a8:	4991      	ldr	r1, [pc, #580]	@ (80053f0 <System_UI_Loop+0x2534>)
 80051aa:	4892      	ldr	r0, [pc, #584]	@ (80053f4 <System_UI_Loop+0x2538>)
 80051ac:	f003 f89e 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Video") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 80051b0:	2315      	movs	r3, #21
 80051b2:	9301      	str	r3, [sp, #4]
 80051b4:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	4b8f      	ldr	r3, [pc, #572]	@ (80053f8 <System_UI_Loop+0x253c>)
 80051bc:	4a8f      	ldr	r2, [pc, #572]	@ (80053fc <System_UI_Loop+0x2540>)
 80051be:	4990      	ldr	r1, [pc, #576]	@ (8005400 <System_UI_Loop+0x2544>)
 80051c0:	488c      	ldr	r0, [pc, #560]	@ (80053f4 <System_UI_Loop+0x2538>)
 80051c2:	f003 f893 	bl	80082ec <OLED_DoTweenObject>
            break;
 80051c6:	e02e      	b.n	8005226 <System_UI_Loop+0x236a>
            OLED_DoTweenObject(&g_Title_AnimationManager, "BAD APPLE!", (OLED_WIDTH - strlen("BAD APPLE!") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 80051c8:	2300      	movs	r3, #0
 80051ca:	9301      	str	r3, [sp, #4]
 80051cc:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	4b7e      	ldr	r3, [pc, #504]	@ (80053cc <System_UI_Loop+0x2510>)
 80051d4:	4a81      	ldr	r2, [pc, #516]	@ (80053dc <System_UI_Loop+0x2520>)
 80051d6:	4982      	ldr	r1, [pc, #520]	@ (80053e0 <System_UI_Loop+0x2524>)
 80051d8:	487f      	ldr	r0, [pc, #508]	@ (80053d8 <System_UI_Loop+0x251c>)
 80051da:	f003 f887 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 80051de:	2304      	movs	r3, #4
 80051e0:	9301      	str	r3, [sp, #4]
 80051e2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	f04f 0300 	mov.w	r3, #0
 80051ec:	4a7d      	ldr	r2, [pc, #500]	@ (80053e4 <System_UI_Loop+0x2528>)
 80051ee:	497e      	ldr	r1, [pc, #504]	@ (80053e8 <System_UI_Loop+0x252c>)
 80051f0:	4879      	ldr	r0, [pc, #484]	@ (80053d8 <System_UI_Loop+0x251c>)
 80051f2:	f003 f87b 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 80051f6:	2318      	movs	r3, #24
 80051f8:	9301      	str	r3, [sp, #4]
 80051fa:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8005204:	4a7f      	ldr	r2, [pc, #508]	@ (8005404 <System_UI_Loop+0x2548>)
 8005206:	497a      	ldr	r1, [pc, #488]	@ (80053f0 <System_UI_Loop+0x2534>)
 8005208:	487a      	ldr	r0, [pc, #488]	@ (80053f4 <System_UI_Loop+0x2538>)
 800520a:	f003 f86f 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 800520e:	2315      	movs	r3, #21
 8005210:	9301      	str	r3, [sp, #4]
 8005212:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	4b77      	ldr	r3, [pc, #476]	@ (80053f8 <System_UI_Loop+0x253c>)
 800521a:	4a7b      	ldr	r2, [pc, #492]	@ (8005408 <System_UI_Loop+0x254c>)
 800521c:	4978      	ldr	r1, [pc, #480]	@ (8005400 <System_UI_Loop+0x2544>)
 800521e:	4875      	ldr	r0, [pc, #468]	@ (80053f4 <System_UI_Loop+0x2538>)
 8005220:	f003 f864 	bl	80082ec <OLED_DoTweenObject>
            break;
 8005224:	bf00      	nop
        switch (menuSelection)
 8005226:	e27e      	b.n	8005726 <System_UI_Loop+0x286a>
        }
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_GAMES)
 8005228:	4b78      	ldr	r3, [pc, #480]	@ (800540c <System_UI_Loop+0x2550>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b02      	cmp	r3, #2
 800522e:	f040 80fb 	bne.w	8005428 <System_UI_Loop+0x256c>
 8005232:	4b77      	ldr	r3, [pc, #476]	@ (8005410 <System_UI_Loop+0x2554>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b05      	cmp	r3, #5
 8005238:	f040 80f6 	bne.w	8005428 <System_UI_Loop+0x256c>
    {
        switch (menuSelection)
 800523c:	4b75      	ldr	r3, [pc, #468]	@ (8005414 <System_UI_Loop+0x2558>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b03      	cmp	r3, #3
 8005242:	f000 8087 	beq.w	8005354 <System_UI_Loop+0x2498>
 8005246:	2b03      	cmp	r3, #3
 8005248:	f300 80be 	bgt.w	80053c8 <System_UI_Loop+0x250c>
 800524c:	2b01      	cmp	r3, #1
 800524e:	d002      	beq.n	8005256 <System_UI_Loop+0x239a>
 8005250:	2b02      	cmp	r3, #2
 8005252:	d045      	beq.n	80052e0 <System_UI_Loop+0x2424>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
            break;
        default:
            break;
 8005254:	e0b8      	b.n	80053c8 <System_UI_Loop+0x250c>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8005256:	2300      	movs	r3, #0
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	4b5a      	ldr	r3, [pc, #360]	@ (80053cc <System_UI_Loop+0x2510>)
 8005262:	4a5b      	ldr	r2, [pc, #364]	@ (80053d0 <System_UI_Loop+0x2514>)
 8005264:	496c      	ldr	r1, [pc, #432]	@ (8005418 <System_UI_Loop+0x255c>)
 8005266:	485c      	ldr	r0, [pc, #368]	@ (80053d8 <System_UI_Loop+0x251c>)
 8005268:	f003 f840 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 800526c:	2304      	movs	r3, #4
 800526e:	9301      	str	r3, [sp, #4]
 8005270:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	f04f 0300 	mov.w	r3, #0
 800527a:	4a5a      	ldr	r2, [pc, #360]	@ (80053e4 <System_UI_Loop+0x2528>)
 800527c:	4967      	ldr	r1, [pc, #412]	@ (800541c <System_UI_Loop+0x2560>)
 800527e:	4856      	ldr	r0, [pc, #344]	@ (80053d8 <System_UI_Loop+0x251c>)
 8005280:	f003 f834 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8005284:	2300      	movs	r3, #0
 8005286:	9301      	str	r3, [sp, #4]
 8005288:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	4b4f      	ldr	r3, [pc, #316]	@ (80053cc <System_UI_Loop+0x2510>)
 8005290:	4a4f      	ldr	r2, [pc, #316]	@ (80053d0 <System_UI_Loop+0x2514>)
 8005292:	4963      	ldr	r1, [pc, #396]	@ (8005420 <System_UI_Loop+0x2564>)
 8005294:	4850      	ldr	r0, [pc, #320]	@ (80053d8 <System_UI_Loop+0x251c>)
 8005296:	f003 f829 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 800529a:	2300      	movs	r3, #0
 800529c:	9301      	str	r3, [sp, #4]
 800529e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	4b49      	ldr	r3, [pc, #292]	@ (80053cc <System_UI_Loop+0x2510>)
 80052a6:	4a4f      	ldr	r2, [pc, #316]	@ (80053e4 <System_UI_Loop+0x2528>)
 80052a8:	494f      	ldr	r1, [pc, #316]	@ (80053e8 <System_UI_Loop+0x252c>)
 80052aa:	484b      	ldr	r0, [pc, #300]	@ (80053d8 <System_UI_Loop+0x251c>)
 80052ac:	f003 f81e 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Greedy Snake") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 80052b0:	2318      	movs	r3, #24
 80052b2:	9301      	str	r3, [sp, #4]
 80052b4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80052be:	4a51      	ldr	r2, [pc, #324]	@ (8005404 <System_UI_Loop+0x2548>)
 80052c0:	494b      	ldr	r1, [pc, #300]	@ (80053f0 <System_UI_Loop+0x2534>)
 80052c2:	484c      	ldr	r0, [pc, #304]	@ (80053f4 <System_UI_Loop+0x2538>)
 80052c4:	f003 f812 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Snake") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 80052c8:	2315      	movs	r3, #21
 80052ca:	9301      	str	r3, [sp, #4]
 80052cc:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	4b49      	ldr	r3, [pc, #292]	@ (80053f8 <System_UI_Loop+0x253c>)
 80052d4:	4a49      	ldr	r2, [pc, #292]	@ (80053fc <System_UI_Loop+0x2540>)
 80052d6:	494a      	ldr	r1, [pc, #296]	@ (8005400 <System_UI_Loop+0x2544>)
 80052d8:	4846      	ldr	r0, [pc, #280]	@ (80053f4 <System_UI_Loop+0x2538>)
 80052da:	f003 f807 	bl	80082ec <OLED_DoTweenObject>
            break;
 80052de:	e074      	b.n	80053ca <System_UI_Loop+0x250e>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 80052e0:	2304      	movs	r3, #4
 80052e2:	9301      	str	r3, [sp, #4]
 80052e4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	f04f 0300 	mov.w	r3, #0
 80052ee:	4a38      	ldr	r2, [pc, #224]	@ (80053d0 <System_UI_Loop+0x2514>)
 80052f0:	494b      	ldr	r1, [pc, #300]	@ (8005420 <System_UI_Loop+0x2564>)
 80052f2:	4839      	ldr	r0, [pc, #228]	@ (80053d8 <System_UI_Loop+0x251c>)
 80052f4:	f002 fffa 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 80052f8:	2300      	movs	r3, #0
 80052fa:	9301      	str	r3, [sp, #4]
 80052fc:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	4b32      	ldr	r3, [pc, #200]	@ (80053cc <System_UI_Loop+0x2510>)
 8005304:	4a37      	ldr	r2, [pc, #220]	@ (80053e4 <System_UI_Loop+0x2528>)
 8005306:	4945      	ldr	r1, [pc, #276]	@ (800541c <System_UI_Loop+0x2560>)
 8005308:	4833      	ldr	r0, [pc, #204]	@ (80053d8 <System_UI_Loop+0x251c>)
 800530a:	f002 ffef 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y,TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 800530e:	2300      	movs	r3, #0
 8005310:	9301      	str	r3, [sp, #4]
 8005312:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	4b2c      	ldr	r3, [pc, #176]	@ (80053cc <System_UI_Loop+0x2510>)
 800531a:	4a32      	ldr	r2, [pc, #200]	@ (80053e4 <System_UI_Loop+0x2528>)
 800531c:	4932      	ldr	r1, [pc, #200]	@ (80053e8 <System_UI_Loop+0x252c>)
 800531e:	482e      	ldr	r0, [pc, #184]	@ (80053d8 <System_UI_Loop+0x251c>)
 8005320:	f002 ffe4 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Here is 2048!") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8005324:	2318      	movs	r3, #24
 8005326:	9301      	str	r3, [sp, #4]
 8005328:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8005332:	4a3c      	ldr	r2, [pc, #240]	@ (8005424 <System_UI_Loop+0x2568>)
 8005334:	492e      	ldr	r1, [pc, #184]	@ (80053f0 <System_UI_Loop+0x2534>)
 8005336:	482f      	ldr	r0, [pc, #188]	@ (80053f4 <System_UI_Loop+0x2538>)
 8005338:	f002 ffd8 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("2048") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 800533c:	2315      	movs	r3, #21
 800533e:	9301      	str	r3, [sp, #4]
 8005340:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	4b2c      	ldr	r3, [pc, #176]	@ (80053f8 <System_UI_Loop+0x253c>)
 8005348:	4a2f      	ldr	r2, [pc, #188]	@ (8005408 <System_UI_Loop+0x254c>)
 800534a:	492d      	ldr	r1, [pc, #180]	@ (8005400 <System_UI_Loop+0x2544>)
 800534c:	4829      	ldr	r0, [pc, #164]	@ (80053f4 <System_UI_Loop+0x2538>)
 800534e:	f002 ffcd 	bl	80082ec <OLED_DoTweenObject>
            break;
 8005352:	e03a      	b.n	80053ca <System_UI_Loop+0x250e>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8005354:	2304      	movs	r3, #4
 8005356:	9301      	str	r3, [sp, #4]
 8005358:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	4a20      	ldr	r2, [pc, #128]	@ (80053e4 <System_UI_Loop+0x2528>)
 8005364:	4920      	ldr	r1, [pc, #128]	@ (80053e8 <System_UI_Loop+0x252c>)
 8005366:	481c      	ldr	r0, [pc, #112]	@ (80053d8 <System_UI_Loop+0x251c>)
 8005368:	f002 ffc0 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 800536c:	2300      	movs	r3, #0
 800536e:	9301      	str	r3, [sp, #4]
 8005370:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	4b15      	ldr	r3, [pc, #84]	@ (80053cc <System_UI_Loop+0x2510>)
 8005378:	4a1a      	ldr	r2, [pc, #104]	@ (80053e4 <System_UI_Loop+0x2528>)
 800537a:	4928      	ldr	r1, [pc, #160]	@ (800541c <System_UI_Loop+0x2560>)
 800537c:	4816      	ldr	r0, [pc, #88]	@ (80053d8 <System_UI_Loop+0x251c>)
 800537e:	f002 ffb5 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8005382:	2300      	movs	r3, #0
 8005384:	9301      	str	r3, [sp, #4]
 8005386:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	4b0f      	ldr	r3, [pc, #60]	@ (80053cc <System_UI_Loop+0x2510>)
 800538e:	4a10      	ldr	r2, [pc, #64]	@ (80053d0 <System_UI_Loop+0x2514>)
 8005390:	4923      	ldr	r1, [pc, #140]	@ (8005420 <System_UI_Loop+0x2564>)
 8005392:	4811      	ldr	r0, [pc, #68]	@ (80053d8 <System_UI_Loop+0x251c>)
 8005394:	f002 ffaa 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8005398:	2318      	movs	r3, #24
 800539a:	9301      	str	r3, [sp, #4]
 800539c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80053a6:	4a17      	ldr	r2, [pc, #92]	@ (8005404 <System_UI_Loop+0x2548>)
 80053a8:	4911      	ldr	r1, [pc, #68]	@ (80053f0 <System_UI_Loop+0x2534>)
 80053aa:	4812      	ldr	r0, [pc, #72]	@ (80053f4 <System_UI_Loop+0x2538>)
 80053ac:	f002 ff9e 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 80053b0:	2315      	movs	r3, #21
 80053b2:	9301      	str	r3, [sp, #4]
 80053b4:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	4b0f      	ldr	r3, [pc, #60]	@ (80053f8 <System_UI_Loop+0x253c>)
 80053bc:	4a12      	ldr	r2, [pc, #72]	@ (8005408 <System_UI_Loop+0x254c>)
 80053be:	4910      	ldr	r1, [pc, #64]	@ (8005400 <System_UI_Loop+0x2544>)
 80053c0:	480c      	ldr	r0, [pc, #48]	@ (80053f4 <System_UI_Loop+0x2538>)
 80053c2:	f002 ff93 	bl	80082ec <OLED_DoTweenObject>
            break;
 80053c6:	e000      	b.n	80053ca <System_UI_Loop+0x250e>
            break;
 80053c8:	bf00      	nop
        switch (menuSelection)
 80053ca:	e1ac      	b.n	8005726 <System_UI_Loop+0x286a>
 80053cc:	c1200000 	.word	0xc1200000
 80053d0:	42480000 	.word	0x42480000
 80053d4:	0800e560 	.word	0x0800e560
 80053d8:	20003804 	.word	0x20003804
 80053dc:	42880000 	.word	0x42880000
 80053e0:	0800e5b8 	.word	0x0800e5b8
 80053e4:	42600000 	.word	0x42600000
 80053e8:	0800e5ac 	.word	0x0800e5ac
 80053ec:	427c0000 	.word	0x427c0000
 80053f0:	0800e6b4 	.word	0x0800e6b4
 80053f4:	20003df8 	.word	0x20003df8
 80053f8:	41200000 	.word	0x41200000
 80053fc:	42040000 	.word	0x42040000
 8005400:	0800e6cc 	.word	0x0800e6cc
 8005404:	42960000 	.word	0x42960000
 8005408:	41d80000 	.word	0x41d80000
 800540c:	2000043c 	.word	0x2000043c
 8005410:	20001034 	.word	0x20001034
 8005414:	2000043d 	.word	0x2000043d
 8005418:	0800e554 	.word	0x0800e554
 800541c:	0800e594 	.word	0x0800e594
 8005420:	0800e5a0 	.word	0x0800e5a0
 8005424:	42a20000 	.word	0x42a20000
        }
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_GAMES && menuSelection == 1)
 8005428:	4b96      	ldr	r3, [pc, #600]	@ (8005684 <System_UI_Loop+0x27c8>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b03      	cmp	r3, #3
 800542e:	d10d      	bne.n	800544c <System_UI_Loop+0x2590>
 8005430:	4b95      	ldr	r3, [pc, #596]	@ (8005688 <System_UI_Loop+0x27cc>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	2b05      	cmp	r3, #5
 8005436:	d109      	bne.n	800544c <System_UI_Loop+0x2590>
 8005438:	4b94      	ldr	r3, [pc, #592]	@ (800568c <System_UI_Loop+0x27d0>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d105      	bne.n	800544c <System_UI_Loop+0x2590>
    {
        cancelSelection = true;
 8005440:	4b93      	ldr	r3, [pc, #588]	@ (8005690 <System_UI_Loop+0x27d4>)
 8005442:	2201      	movs	r2, #1
 8005444:	701a      	strb	r2, [r3, #0]
        Snake_GameLoop();
 8005446:	f7fc f895 	bl	8001574 <Snake_GameLoop>
 800544a:	e16c      	b.n	8005726 <System_UI_Loop+0x286a>
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_GAMES && menuSelection == 2)
 800544c:	4b8d      	ldr	r3, [pc, #564]	@ (8005684 <System_UI_Loop+0x27c8>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b03      	cmp	r3, #3
 8005452:	d10d      	bne.n	8005470 <System_UI_Loop+0x25b4>
 8005454:	4b8c      	ldr	r3, [pc, #560]	@ (8005688 <System_UI_Loop+0x27cc>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	2b05      	cmp	r3, #5
 800545a:	d109      	bne.n	8005470 <System_UI_Loop+0x25b4>
 800545c:	4b8b      	ldr	r3, [pc, #556]	@ (800568c <System_UI_Loop+0x27d0>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b02      	cmp	r3, #2
 8005462:	d105      	bne.n	8005470 <System_UI_Loop+0x25b4>
    {
        cancelSelection = true;
 8005464:	4b8a      	ldr	r3, [pc, #552]	@ (8005690 <System_UI_Loop+0x27d4>)
 8005466:	2201      	movs	r2, #1
 8005468:	701a      	strb	r2, [r3, #0]
        Game2048_GameLoop();
 800546a:	f7fc fd95 	bl	8001f98 <Game2048_GameLoop>
 800546e:	e15a      	b.n	8005726 <System_UI_Loop+0x286a>
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_TOOLS && menuSelection == 1)
 8005470:	4b84      	ldr	r3, [pc, #528]	@ (8005684 <System_UI_Loop+0x27c8>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	2b03      	cmp	r3, #3
 8005476:	d10d      	bne.n	8005494 <System_UI_Loop+0x25d8>
 8005478:	4b83      	ldr	r3, [pc, #524]	@ (8005688 <System_UI_Loop+0x27cc>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b04      	cmp	r3, #4
 800547e:	d109      	bne.n	8005494 <System_UI_Loop+0x25d8>
 8005480:	4b82      	ldr	r3, [pc, #520]	@ (800568c <System_UI_Loop+0x27d0>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d105      	bne.n	8005494 <System_UI_Loop+0x25d8>
    {
        cancelSelection = true;
 8005488:	4b81      	ldr	r3, [pc, #516]	@ (8005690 <System_UI_Loop+0x27d4>)
 800548a:	2201      	movs	r2, #1
 800548c:	701a      	strb	r2, [r3, #0]
        play_video();
 800548e:	f003 fdbd 	bl	800900c <play_video>
 8005492:	e148      	b.n	8005726 <System_UI_Loop+0x286a>
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_STATUS)
 8005494:	4b7b      	ldr	r3, [pc, #492]	@ (8005684 <System_UI_Loop+0x27c8>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b02      	cmp	r3, #2
 800549a:	d142      	bne.n	8005522 <System_UI_Loop+0x2666>
 800549c:	4b7a      	ldr	r3, [pc, #488]	@ (8005688 <System_UI_Loop+0x27cc>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d13e      	bne.n	8005522 <System_UI_Loop+0x2666>
    {
        OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 80054a4:	2318      	movs	r3, #24
 80054a6:	9301      	str	r3, [sp, #4]
 80054a8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	4977      	ldr	r1, [pc, #476]	@ (8005694 <System_UI_Loop+0x27d8>)
 80054b8:	4877      	ldr	r0, [pc, #476]	@ (8005698 <System_UI_Loop+0x27dc>)
 80054ba:	f002 ff17 	bl	80082ec <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "CursorScale", 0, 8, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 80054be:	2315      	movs	r3, #21
 80054c0:	9301      	str	r3, [sp, #4]
 80054c2:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80054cc:	f04f 0200 	mov.w	r2, #0
 80054d0:	4972      	ldr	r1, [pc, #456]	@ (800569c <System_UI_Loop+0x27e0>)
 80054d2:	4871      	ldr	r0, [pc, #452]	@ (8005698 <System_UI_Loop+0x27dc>)
 80054d4:	f002 ff0a 	bl	80082ec <OLED_DoTweenObject>

        OLED_DoTweenObject(&Status_AnimationManager, "RunningTime", OLED_UI_END_X, 1, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80054d8:	2318      	movs	r3, #24
 80054da:	9301      	str	r3, [sp, #4]
 80054dc:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80054e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80054ea:	496d      	ldr	r1, [pc, #436]	@ (80056a0 <System_UI_Loop+0x27e4>)
 80054ec:	486d      	ldr	r0, [pc, #436]	@ (80056a4 <System_UI_Loop+0x27e8>)
 80054ee:	f002 fefd 	bl	80082ec <OLED_DoTweenObject>
        OLED_DoTweenObject(&Status_AnimationManager, "Status", 0, OLED_UI_START_Y + OLED_UI_GAP_Y * 1 + 6, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80054f2:	2318      	movs	r3, #24
 80054f4:	9301      	str	r3, [sp, #4]
 80054f6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	4b6a      	ldr	r3, [pc, #424]	@ (80056a8 <System_UI_Loop+0x27ec>)
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	496a      	ldr	r1, [pc, #424]	@ (80056ac <System_UI_Loop+0x27f0>)
 8005504:	4867      	ldr	r0, [pc, #412]	@ (80056a4 <System_UI_Loop+0x27e8>)
 8005506:	f002 fef1 	bl	80082ec <OLED_DoTweenObject>

        OLED_DoTweenObject(&Status_AnimationManager, "CUBE", 113, 50, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 800550a:	2318      	movs	r3, #24
 800550c:	9301      	str	r3, [sp, #4]
 800550e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	4b66      	ldr	r3, [pc, #408]	@ (80056b0 <System_UI_Loop+0x27f4>)
 8005516:	4a67      	ldr	r2, [pc, #412]	@ (80056b4 <System_UI_Loop+0x27f8>)
 8005518:	4967      	ldr	r1, [pc, #412]	@ (80056b8 <System_UI_Loop+0x27fc>)
 800551a:	4862      	ldr	r0, [pc, #392]	@ (80056a4 <System_UI_Loop+0x27e8>)
 800551c:	f002 fee6 	bl	80082ec <OLED_DoTweenObject>
 8005520:	e101      	b.n	8005726 <System_UI_Loop+0x286a>
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_SETTINGS)
 8005522:	4b58      	ldr	r3, [pc, #352]	@ (8005684 <System_UI_Loop+0x27c8>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b02      	cmp	r3, #2
 8005528:	f040 80e4 	bne.w	80056f4 <System_UI_Loop+0x2838>
 800552c:	4b56      	ldr	r3, [pc, #344]	@ (8005688 <System_UI_Loop+0x27cc>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b01      	cmp	r3, #1
 8005532:	f040 80df 	bne.w	80056f4 <System_UI_Loop+0x2838>
    {
        switch (menuSelection)
 8005536:	4b55      	ldr	r3, [pc, #340]	@ (800568c <System_UI_Loop+0x27d0>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b03      	cmp	r3, #3
 800553c:	d070      	beq.n	8005620 <System_UI_Loop+0x2764>
 800553e:	2b03      	cmp	r3, #3
 8005540:	f300 809d 	bgt.w	800567e <System_UI_Loop+0x27c2>
 8005544:	2b01      	cmp	r3, #1
 8005546:	d002      	beq.n	800554e <System_UI_Loop+0x2692>
 8005548:	2b02      	cmp	r3, #2
 800554a:	d03a      	beq.n	80055c2 <System_UI_Loop+0x2706>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
            OLED_DoTweenObject(&Settings_AnimationManager, "Bar", 5, OLED_HEIGHT + 10, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
            break;
        default:
            break;
 800554c:	e097      	b.n	800567e <System_UI_Loop+0x27c2>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 800554e:	2300      	movs	r3, #0
 8005550:	9301      	str	r3, [sp, #4]
 8005552:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	4b58      	ldr	r3, [pc, #352]	@ (80056bc <System_UI_Loop+0x2800>)
 800555a:	4a59      	ldr	r2, [pc, #356]	@ (80056c0 <System_UI_Loop+0x2804>)
 800555c:	4959      	ldr	r1, [pc, #356]	@ (80056c4 <System_UI_Loop+0x2808>)
 800555e:	485a      	ldr	r0, [pc, #360]	@ (80056c8 <System_UI_Loop+0x280c>)
 8005560:	f002 fec4 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Show FPS?", (OLED_WIDTH - strlen("Show FPS?") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8005564:	2304      	movs	r3, #4
 8005566:	9301      	str	r3, [sp, #4]
 8005568:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	f04f 0300 	mov.w	r3, #0
 8005572:	4a56      	ldr	r2, [pc, #344]	@ (80056cc <System_UI_Loop+0x2810>)
 8005574:	4956      	ldr	r1, [pc, #344]	@ (80056d0 <System_UI_Loop+0x2814>)
 8005576:	4854      	ldr	r0, [pc, #336]	@ (80056c8 <System_UI_Loop+0x280c>)
 8005578:	f002 feb8 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Show FPS?") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 800557c:	2318      	movs	r3, #24
 800557e:	9301      	str	r3, [sp, #4]
 8005580:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800558a:	4a52      	ldr	r2, [pc, #328]	@ (80056d4 <System_UI_Loop+0x2818>)
 800558c:	4941      	ldr	r1, [pc, #260]	@ (8005694 <System_UI_Loop+0x27d8>)
 800558e:	4842      	ldr	r0, [pc, #264]	@ (8005698 <System_UI_Loop+0x27dc>)
 8005590:	f002 feac 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Show FPS:OFF") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8005594:	2315      	movs	r3, #21
 8005596:	9301      	str	r3, [sp, #4]
 8005598:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	4b4e      	ldr	r3, [pc, #312]	@ (80056d8 <System_UI_Loop+0x281c>)
 80055a0:	4a4e      	ldr	r2, [pc, #312]	@ (80056dc <System_UI_Loop+0x2820>)
 80055a2:	493e      	ldr	r1, [pc, #248]	@ (800569c <System_UI_Loop+0x27e0>)
 80055a4:	483c      	ldr	r0, [pc, #240]	@ (8005698 <System_UI_Loop+0x27dc>)
 80055a6:	f002 fea1 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&Settings_AnimationManager, "Bar", 5, OLED_HEIGHT + 10, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 80055aa:	2301      	movs	r3, #1
 80055ac:	9301      	str	r3, [sp, #4]
 80055ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	4b45      	ldr	r3, [pc, #276]	@ (80056cc <System_UI_Loop+0x2810>)
 80055b6:	4a4a      	ldr	r2, [pc, #296]	@ (80056e0 <System_UI_Loop+0x2824>)
 80055b8:	494a      	ldr	r1, [pc, #296]	@ (80056e4 <System_UI_Loop+0x2828>)
 80055ba:	484b      	ldr	r0, [pc, #300]	@ (80056e8 <System_UI_Loop+0x282c>)
 80055bc:	f002 fe96 	bl	80082ec <OLED_DoTweenObject>
            break;
 80055c0:	e05e      	b.n	8005680 <System_UI_Loop+0x27c4>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Show FPS?", (OLED_WIDTH - strlen("Show FPS?") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 80055c2:	2300      	movs	r3, #0
 80055c4:	9301      	str	r3, [sp, #4]
 80055c6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	4b3b      	ldr	r3, [pc, #236]	@ (80056bc <System_UI_Loop+0x2800>)
 80055ce:	4a3f      	ldr	r2, [pc, #252]	@ (80056cc <System_UI_Loop+0x2810>)
 80055d0:	493f      	ldr	r1, [pc, #252]	@ (80056d0 <System_UI_Loop+0x2814>)
 80055d2:	483d      	ldr	r0, [pc, #244]	@ (80056c8 <System_UI_Loop+0x280c>)
 80055d4:	f002 fe8a 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 80055d8:	2318      	movs	r3, #24
 80055da:	9301      	str	r3, [sp, #4]
 80055dc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80055e6:	f04f 0200 	mov.w	r2, #0
 80055ea:	492a      	ldr	r1, [pc, #168]	@ (8005694 <System_UI_Loop+0x27d8>)
 80055ec:	482a      	ldr	r0, [pc, #168]	@ (8005698 <System_UI_Loop+0x27dc>)
 80055ee:	f002 fe7d 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Lightness: 100%") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 80055f2:	2315      	movs	r3, #21
 80055f4:	9301      	str	r3, [sp, #4]
 80055f6:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	4b36      	ldr	r3, [pc, #216]	@ (80056d8 <System_UI_Loop+0x281c>)
 80055fe:	4a3b      	ldr	r2, [pc, #236]	@ (80056ec <System_UI_Loop+0x2830>)
 8005600:	4926      	ldr	r1, [pc, #152]	@ (800569c <System_UI_Loop+0x27e0>)
 8005602:	4825      	ldr	r0, [pc, #148]	@ (8005698 <System_UI_Loop+0x27dc>)
 8005604:	f002 fe72 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&Settings_AnimationManager, "Bar", 5, OLED_HEIGHT + 10, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005608:	2301      	movs	r3, #1
 800560a:	9301      	str	r3, [sp, #4]
 800560c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	4b2e      	ldr	r3, [pc, #184]	@ (80056cc <System_UI_Loop+0x2810>)
 8005614:	4a32      	ldr	r2, [pc, #200]	@ (80056e0 <System_UI_Loop+0x2824>)
 8005616:	4933      	ldr	r1, [pc, #204]	@ (80056e4 <System_UI_Loop+0x2828>)
 8005618:	4833      	ldr	r0, [pc, #204]	@ (80056e8 <System_UI_Loop+0x282c>)
 800561a:	f002 fe67 	bl	80082ec <OLED_DoTweenObject>
            break;
 800561e:	e02f      	b.n	8005680 <System_UI_Loop+0x27c4>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Show FPS?", (OLED_WIDTH - strlen("Show FPS?") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8005620:	2300      	movs	r3, #0
 8005622:	9301      	str	r3, [sp, #4]
 8005624:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	4b24      	ldr	r3, [pc, #144]	@ (80056bc <System_UI_Loop+0x2800>)
 800562c:	4a27      	ldr	r2, [pc, #156]	@ (80056cc <System_UI_Loop+0x2810>)
 800562e:	4928      	ldr	r1, [pc, #160]	@ (80056d0 <System_UI_Loop+0x2814>)
 8005630:	4825      	ldr	r0, [pc, #148]	@ (80056c8 <System_UI_Loop+0x280c>)
 8005632:	f002 fe5b 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8005636:	2318      	movs	r3, #24
 8005638:	9301      	str	r3, [sp, #4]
 800563a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	4912      	ldr	r1, [pc, #72]	@ (8005694 <System_UI_Loop+0x27d8>)
 800564a:	4813      	ldr	r0, [pc, #76]	@ (8005698 <System_UI_Loop+0x27dc>)
 800564c:	f002 fe4e 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8005650:	2315      	movs	r3, #21
 8005652:	9301      	str	r3, [sp, #4]
 8005654:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	4b1f      	ldr	r3, [pc, #124]	@ (80056d8 <System_UI_Loop+0x281c>)
 800565c:	4a24      	ldr	r2, [pc, #144]	@ (80056f0 <System_UI_Loop+0x2834>)
 800565e:	490f      	ldr	r1, [pc, #60]	@ (800569c <System_UI_Loop+0x27e0>)
 8005660:	480d      	ldr	r0, [pc, #52]	@ (8005698 <System_UI_Loop+0x27dc>)
 8005662:	f002 fe43 	bl	80082ec <OLED_DoTweenObject>
            OLED_DoTweenObject(&Settings_AnimationManager, "Bar", 5, OLED_HEIGHT + 10, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005666:	2301      	movs	r3, #1
 8005668:	9301      	str	r3, [sp, #4]
 800566a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	4b16      	ldr	r3, [pc, #88]	@ (80056cc <System_UI_Loop+0x2810>)
 8005672:	4a1b      	ldr	r2, [pc, #108]	@ (80056e0 <System_UI_Loop+0x2824>)
 8005674:	491b      	ldr	r1, [pc, #108]	@ (80056e4 <System_UI_Loop+0x2828>)
 8005676:	481c      	ldr	r0, [pc, #112]	@ (80056e8 <System_UI_Loop+0x282c>)
 8005678:	f002 fe38 	bl	80082ec <OLED_DoTweenObject>
            break;
 800567c:	e000      	b.n	8005680 <System_UI_Loop+0x27c4>
            break;
 800567e:	bf00      	nop
        switch (menuSelection)
 8005680:	e051      	b.n	8005726 <System_UI_Loop+0x286a>
 8005682:	bf00      	nop
 8005684:	2000043c 	.word	0x2000043c
 8005688:	20001034 	.word	0x20001034
 800568c:	2000043d 	.word	0x2000043d
 8005690:	20001036 	.word	0x20001036
 8005694:	0800e6b4 	.word	0x0800e6b4
 8005698:	20003df8 	.word	0x20003df8
 800569c:	0800e6cc 	.word	0x0800e6cc
 80056a0:	0800e620 	.word	0x0800e620
 80056a4:	20003210 	.word	0x20003210
 80056a8:	41b00000 	.word	0x41b00000
 80056ac:	0800e62c 	.word	0x0800e62c
 80056b0:	42480000 	.word	0x42480000
 80056b4:	42e20000 	.word	0x42e20000
 80056b8:	0800e634 	.word	0x0800e634
 80056bc:	c1200000 	.word	0xc1200000
 80056c0:	42600000 	.word	0x42600000
 80056c4:	0800e578 	.word	0x0800e578
 80056c8:	20003804 	.word	0x20003804
 80056cc:	42940000 	.word	0x42940000
 80056d0:	0800e5c4 	.word	0x0800e5c4
 80056d4:	42640000 	.word	0x42640000
 80056d8:	41200000 	.word	0x41200000
 80056dc:	42960000 	.word	0x42960000
 80056e0:	40a00000 	.word	0x40a00000
 80056e4:	0800e650 	.word	0x0800e650
 80056e8:	20002628 	.word	0x20002628
 80056ec:	42ba0000 	.word	0x42ba0000
 80056f0:	41d80000 	.word	0x41d80000
        }
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_SETTINGS && menuSelection == 2)
 80056f4:	4b74      	ldr	r3, [pc, #464]	@ (80058c8 <System_UI_Loop+0x2a0c>)
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d114      	bne.n	8005726 <System_UI_Loop+0x286a>
 80056fc:	4b73      	ldr	r3, [pc, #460]	@ (80058cc <System_UI_Loop+0x2a10>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d110      	bne.n	8005726 <System_UI_Loop+0x286a>
 8005704:	4b72      	ldr	r3, [pc, #456]	@ (80058d0 <System_UI_Loop+0x2a14>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b02      	cmp	r3, #2
 800570a:	d10c      	bne.n	8005726 <System_UI_Loop+0x286a>
    {
        OLED_DoTweenObject(&Settings_AnimationManager, "Bar", 5, OLED_HEIGHT - 9, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 800570c:	2318      	movs	r3, #24
 800570e:	9301      	str	r3, [sp, #4]
 8005710:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	4b6f      	ldr	r3, [pc, #444]	@ (80058d4 <System_UI_Loop+0x2a18>)
 8005718:	4a6f      	ldr	r2, [pc, #444]	@ (80058d8 <System_UI_Loop+0x2a1c>)
 800571a:	4970      	ldr	r1, [pc, #448]	@ (80058dc <System_UI_Loop+0x2a20>)
 800571c:	4870      	ldr	r0, [pc, #448]	@ (80058e0 <System_UI_Loop+0x2a24>)
 800571e:	f002 fde5 	bl	80082ec <OLED_DoTweenObject>
 8005722:	e000      	b.n	8005726 <System_UI_Loop+0x286a>
            break;
 8005724:	bf00      	nop
    }
    
    if (menuRank != 1)
 8005726:	4b68      	ldr	r3, [pc, #416]	@ (80058c8 <System_UI_Loop+0x2a0c>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d036      	beq.n	800579c <System_UI_Loop+0x28e0>
    {
        OLED_DoTweenObject(&Menu_AnimationManager, "IconGames", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 800572e:	2306      	movs	r3, #6
 8005730:	9301      	str	r3, [sp, #4]
 8005732:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	4b6a      	ldr	r3, [pc, #424]	@ (80058e4 <System_UI_Loop+0x2a28>)
 800573a:	4a6b      	ldr	r2, [pc, #428]	@ (80058e8 <System_UI_Loop+0x2a2c>)
 800573c:	496b      	ldr	r1, [pc, #428]	@ (80058ec <System_UI_Loop+0x2a30>)
 800573e:	486c      	ldr	r0, [pc, #432]	@ (80058f0 <System_UI_Loop+0x2a34>)
 8005740:	f002 fdd4 	bl	80082ec <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "IconTools", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 8005744:	2306      	movs	r3, #6
 8005746:	9301      	str	r3, [sp, #4]
 8005748:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	4b65      	ldr	r3, [pc, #404]	@ (80058e4 <System_UI_Loop+0x2a28>)
 8005750:	4a65      	ldr	r2, [pc, #404]	@ (80058e8 <System_UI_Loop+0x2a2c>)
 8005752:	4968      	ldr	r1, [pc, #416]	@ (80058f4 <System_UI_Loop+0x2a38>)
 8005754:	4866      	ldr	r0, [pc, #408]	@ (80058f0 <System_UI_Loop+0x2a34>)
 8005756:	f002 fdc9 	bl	80082ec <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "IconStatus", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 800575a:	2306      	movs	r3, #6
 800575c:	9301      	str	r3, [sp, #4]
 800575e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	4b5f      	ldr	r3, [pc, #380]	@ (80058e4 <System_UI_Loop+0x2a28>)
 8005766:	4a60      	ldr	r2, [pc, #384]	@ (80058e8 <System_UI_Loop+0x2a2c>)
 8005768:	4963      	ldr	r1, [pc, #396]	@ (80058f8 <System_UI_Loop+0x2a3c>)
 800576a:	4861      	ldr	r0, [pc, #388]	@ (80058f0 <System_UI_Loop+0x2a34>)
 800576c:	f002 fdbe 	bl	80082ec <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "IconSettings", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 8005770:	2306      	movs	r3, #6
 8005772:	9301      	str	r3, [sp, #4]
 8005774:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	4b5a      	ldr	r3, [pc, #360]	@ (80058e4 <System_UI_Loop+0x2a28>)
 800577c:	4a5a      	ldr	r2, [pc, #360]	@ (80058e8 <System_UI_Loop+0x2a2c>)
 800577e:	495f      	ldr	r1, [pc, #380]	@ (80058fc <System_UI_Loop+0x2a40>)
 8005780:	485b      	ldr	r0, [pc, #364]	@ (80058f0 <System_UI_Loop+0x2a34>)
 8005782:	f002 fdb3 	bl	80082ec <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "IconAbout", OLED_ICON_START_X, OLED_ICON_START_Y, OLED_ICON_TWEEN_OUT_TIME, OLED_ICON_TWEEN_OUT_STYLE);
 8005786:	2306      	movs	r3, #6
 8005788:	9301      	str	r3, [sp, #4]
 800578a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	4b54      	ldr	r3, [pc, #336]	@ (80058e4 <System_UI_Loop+0x2a28>)
 8005792:	4a55      	ldr	r2, [pc, #340]	@ (80058e8 <System_UI_Loop+0x2a2c>)
 8005794:	495a      	ldr	r1, [pc, #360]	@ (8005900 <System_UI_Loop+0x2a44>)
 8005796:	4856      	ldr	r0, [pc, #344]	@ (80058f0 <System_UI_Loop+0x2a34>)
 8005798:	f002 fda8 	bl	80082ec <OLED_DoTweenObject>
    
#pragma endregion PlayerSelection

#pragma region ResetAnimation //完成换级时候让动画复位

    if (resetAnimation && !(OLED_GetAnimationStates(&Games_AnimationManager, "Snake") || OLED_GetAnimationStates(&Status_AnimationManager, "RunningTime") || OLED_GetAnimationStates(&Settings_AnimationManager, "ShowFPS") || OLED_GetAnimationStates(&About_AnimationManager, "Developer") || OLED_GetAnimationStates(&Tools_AnimationManager, "VideoPlayer")))
 800579c:	4b59      	ldr	r3, [pc, #356]	@ (8005904 <System_UI_Loop+0x2a48>)
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d079      	beq.n	8005898 <System_UI_Loop+0x29dc>
 80057a4:	4958      	ldr	r1, [pc, #352]	@ (8005908 <System_UI_Loop+0x2a4c>)
 80057a6:	4859      	ldr	r0, [pc, #356]	@ (800590c <System_UI_Loop+0x2a50>)
 80057a8:	f002 fd8a 	bl	80082c0 <OLED_GetAnimationStates>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d172      	bne.n	8005898 <System_UI_Loop+0x29dc>
 80057b2:	4957      	ldr	r1, [pc, #348]	@ (8005910 <System_UI_Loop+0x2a54>)
 80057b4:	4857      	ldr	r0, [pc, #348]	@ (8005914 <System_UI_Loop+0x2a58>)
 80057b6:	f002 fd83 	bl	80082c0 <OLED_GetAnimationStates>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d16b      	bne.n	8005898 <System_UI_Loop+0x29dc>
 80057c0:	4955      	ldr	r1, [pc, #340]	@ (8005918 <System_UI_Loop+0x2a5c>)
 80057c2:	4847      	ldr	r0, [pc, #284]	@ (80058e0 <System_UI_Loop+0x2a24>)
 80057c4:	f002 fd7c 	bl	80082c0 <OLED_GetAnimationStates>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d164      	bne.n	8005898 <System_UI_Loop+0x29dc>
 80057ce:	4953      	ldr	r1, [pc, #332]	@ (800591c <System_UI_Loop+0x2a60>)
 80057d0:	4853      	ldr	r0, [pc, #332]	@ (8005920 <System_UI_Loop+0x2a64>)
 80057d2:	f002 fd75 	bl	80082c0 <OLED_GetAnimationStates>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d15d      	bne.n	8005898 <System_UI_Loop+0x29dc>
 80057dc:	4951      	ldr	r1, [pc, #324]	@ (8005924 <System_UI_Loop+0x2a68>)
 80057de:	4852      	ldr	r0, [pc, #328]	@ (8005928 <System_UI_Loop+0x2a6c>)
 80057e0:	f002 fd6e 	bl	80082c0 <OLED_GetAnimationStates>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d156      	bne.n	8005898 <System_UI_Loop+0x29dc>
    {
        OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, EASE_IN_CIRC);
 80057ea:	230a      	movs	r3, #10
 80057ec:	9301      	str	r3, [sp, #4]
 80057ee:	2301      	movs	r3, #1
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80057f6:	4a4d      	ldr	r2, [pc, #308]	@ (800592c <System_UI_Loop+0x2a70>)
 80057f8:	4943      	ldr	r1, [pc, #268]	@ (8005908 <System_UI_Loop+0x2a4c>)
 80057fa:	4844      	ldr	r0, [pc, #272]	@ (800590c <System_UI_Loop+0x2a50>)
 80057fc:	f002 fd76 	bl	80082ec <OLED_DoTweenObject>
        OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, EASE_IN_CIRC);
 8005800:	230a      	movs	r3, #10
 8005802:	9301      	str	r3, [sp, #4]
 8005804:	2301      	movs	r3, #1
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	4b49      	ldr	r3, [pc, #292]	@ (8005930 <System_UI_Loop+0x2a74>)
 800580a:	4a48      	ldr	r2, [pc, #288]	@ (800592c <System_UI_Loop+0x2a70>)
 800580c:	4949      	ldr	r1, [pc, #292]	@ (8005934 <System_UI_Loop+0x2a78>)
 800580e:	483f      	ldr	r0, [pc, #252]	@ (800590c <System_UI_Loop+0x2a50>)
 8005810:	f002 fd6c 	bl	80082ec <OLED_DoTweenObject>


        OLED_DoTweenObject(&About_AnimationManager, "Developer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, EASE_IN_CIRC);
 8005814:	230a      	movs	r3, #10
 8005816:	9301      	str	r3, [sp, #4]
 8005818:	2301      	movs	r3, #1
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005820:	4a42      	ldr	r2, [pc, #264]	@ (800592c <System_UI_Loop+0x2a70>)
 8005822:	493e      	ldr	r1, [pc, #248]	@ (800591c <System_UI_Loop+0x2a60>)
 8005824:	483e      	ldr	r0, [pc, #248]	@ (8005920 <System_UI_Loop+0x2a64>)
 8005826:	f002 fd61 	bl	80082ec <OLED_DoTweenObject>
        OLED_DoTweenObject(&About_AnimationManager, "Github", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, EASE_IN_CIRC);
 800582a:	230a      	movs	r3, #10
 800582c:	9301      	str	r3, [sp, #4]
 800582e:	2301      	movs	r3, #1
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	4b3f      	ldr	r3, [pc, #252]	@ (8005930 <System_UI_Loop+0x2a74>)
 8005834:	4a3d      	ldr	r2, [pc, #244]	@ (800592c <System_UI_Loop+0x2a70>)
 8005836:	4940      	ldr	r1, [pc, #256]	@ (8005938 <System_UI_Loop+0x2a7c>)
 8005838:	4839      	ldr	r0, [pc, #228]	@ (8005920 <System_UI_Loop+0x2a64>)
 800583a:	f002 fd57 	bl	80082ec <OLED_DoTweenObject>
        OLED_DoTweenObject(&About_AnimationManager, "Donate", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, EASE_IN_CIRC);
 800583e:	230a      	movs	r3, #10
 8005840:	9301      	str	r3, [sp, #4]
 8005842:	2301      	movs	r3, #1
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	4b3d      	ldr	r3, [pc, #244]	@ (800593c <System_UI_Loop+0x2a80>)
 8005848:	4a38      	ldr	r2, [pc, #224]	@ (800592c <System_UI_Loop+0x2a70>)
 800584a:	493d      	ldr	r1, [pc, #244]	@ (8005940 <System_UI_Loop+0x2a84>)
 800584c:	4834      	ldr	r0, [pc, #208]	@ (8005920 <System_UI_Loop+0x2a64>)
 800584e:	f002 fd4d 	bl	80082ec <OLED_DoTweenObject>

        OLED_DoTweenObject(&Tools_AnimationManager, "VideoPlayer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, EASE_IN_CIRC);
 8005852:	230a      	movs	r3, #10
 8005854:	9301      	str	r3, [sp, #4]
 8005856:	2301      	movs	r3, #1
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800585e:	4a33      	ldr	r2, [pc, #204]	@ (800592c <System_UI_Loop+0x2a70>)
 8005860:	4930      	ldr	r1, [pc, #192]	@ (8005924 <System_UI_Loop+0x2a68>)
 8005862:	4831      	ldr	r0, [pc, #196]	@ (8005928 <System_UI_Loop+0x2a6c>)
 8005864:	f002 fd42 	bl	80082ec <OLED_DoTweenObject>

        OLED_DoTweenObject(&Settings_AnimationManager, "ShowFPS", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, EASE_IN_CIRC);
 8005868:	230a      	movs	r3, #10
 800586a:	9301      	str	r3, [sp, #4]
 800586c:	2301      	movs	r3, #1
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005874:	4a2d      	ldr	r2, [pc, #180]	@ (800592c <System_UI_Loop+0x2a70>)
 8005876:	4928      	ldr	r1, [pc, #160]	@ (8005918 <System_UI_Loop+0x2a5c>)
 8005878:	4819      	ldr	r0, [pc, #100]	@ (80058e0 <System_UI_Loop+0x2a24>)
 800587a:	f002 fd37 	bl	80082ec <OLED_DoTweenObject>
        OLED_DoTweenObject(&Settings_AnimationManager, "Lightness", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, EASE_IN_CIRC);
 800587e:	230a      	movs	r3, #10
 8005880:	9301      	str	r3, [sp, #4]
 8005882:	2301      	movs	r3, #1
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	4b2a      	ldr	r3, [pc, #168]	@ (8005930 <System_UI_Loop+0x2a74>)
 8005888:	4a28      	ldr	r2, [pc, #160]	@ (800592c <System_UI_Loop+0x2a70>)
 800588a:	492e      	ldr	r1, [pc, #184]	@ (8005944 <System_UI_Loop+0x2a88>)
 800588c:	4814      	ldr	r0, [pc, #80]	@ (80058e0 <System_UI_Loop+0x2a24>)
 800588e:	f002 fd2d 	bl	80082ec <OLED_DoTweenObject>
        resetAnimation = false;
 8005892:	4b1c      	ldr	r3, [pc, #112]	@ (8005904 <System_UI_Loop+0x2a48>)
 8005894:	2200      	movs	r2, #0
 8005896:	701a      	strb	r2, [r3, #0]
    }

    if (menuRank == 3 && currentPage == UI_PAGE_SETTINGS)
 8005898:	4b0b      	ldr	r3, [pc, #44]	@ (80058c8 <System_UI_Loop+0x2a0c>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b03      	cmp	r3, #3
 800589e:	d10b      	bne.n	80058b8 <System_UI_Loop+0x29fc>
 80058a0:	4b0a      	ldr	r3, [pc, #40]	@ (80058cc <System_UI_Loop+0x2a10>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d107      	bne.n	80058b8 <System_UI_Loop+0x29fc>
    {

        OLED_SendCommand(0x81); 
 80058a8:	2081      	movs	r0, #129	@ 0x81
 80058aa:	f7fc ffc3 	bl	8002834 <OLED_SendCommand>
        OLED_SendCommand(brightness); 
 80058ae:	4b26      	ldr	r3, [pc, #152]	@ (8005948 <System_UI_Loop+0x2a8c>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fc ffbe 	bl	8002834 <OLED_SendCommand>
    }
    

#pragma endregion ResetAnimation

    preMenuSelection = menuSelection;
 80058b8:	4b05      	ldr	r3, [pc, #20]	@ (80058d0 <System_UI_Loop+0x2a14>)
 80058ba:	781a      	ldrb	r2, [r3, #0]
 80058bc:	4b23      	ldr	r3, [pc, #140]	@ (800594c <System_UI_Loop+0x2a90>)
 80058be:	701a      	strb	r2, [r3, #0]
}
 80058c0:	bf00      	nop
 80058c2:	3744      	adds	r7, #68	@ 0x44
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058c8:	2000043c 	.word	0x2000043c
 80058cc:	20001034 	.word	0x20001034
 80058d0:	2000043d 	.word	0x2000043d
 80058d4:	425c0000 	.word	0x425c0000
 80058d8:	40a00000 	.word	0x40a00000
 80058dc:	0800e650 	.word	0x0800e650
 80058e0:	20002628 	.word	0x20002628
 80058e4:	41980000 	.word	0x41980000
 80058e8:	43050000 	.word	0x43050000
 80058ec:	0800e71c 	.word	0x0800e71c
 80058f0:	2000144c 	.word	0x2000144c
 80058f4:	0800e728 	.word	0x0800e728
 80058f8:	0800e734 	.word	0x0800e734
 80058fc:	0800e740 	.word	0x0800e740
 8005900:	0800e750 	.word	0x0800e750
 8005904:	20001037 	.word	0x20001037
 8005908:	0800e5f8 	.word	0x0800e5f8
 800590c:	20001a40 	.word	0x20001a40
 8005910:	0800e620 	.word	0x0800e620
 8005914:	20003210 	.word	0x20003210
 8005918:	0800e63c 	.word	0x0800e63c
 800591c:	0800e654 	.word	0x0800e654
 8005920:	20002c1c 	.word	0x20002c1c
 8005924:	0800e614 	.word	0x0800e614
 8005928:	20002034 	.word	0x20002034
 800592c:	c2b40000 	.word	0xc2b40000
 8005930:	41e80000 	.word	0x41e80000
 8005934:	0800e600 	.word	0x0800e600
 8005938:	0800e660 	.word	0x0800e660
 800593c:	42280000 	.word	0x42280000
 8005940:	0800e668 	.word	0x0800e668
 8005944:	0800e644 	.word	0x0800e644
 8005948:	2000043e 	.word	0x2000043e
 800594c:	20001035 	.word	0x20001035

08005950 <SystemGetsSignal>:
#define RollScale 5
void SystemGetsSignal() // 这里是旋钮数据的获取
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af02      	add	r7, sp, #8
#pragma region 管理翻页
    static uint16_t preCount = 32767;
    uint16_t pageCount;
    if (currentPage == UI_PAGE_MENU)
 8005956:	4b63      	ldr	r3, [pc, #396]	@ (8005ae4 <SystemGetsSignal+0x194>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d102      	bne.n	8005964 <SystemGetsSignal+0x14>
    {
        pageCount = MainMenuItemCount;
 800595e:	2305      	movs	r3, #5
 8005960:	80fb      	strh	r3, [r7, #6]
 8005962:	e01a      	b.n	800599a <SystemGetsSignal+0x4a>
    }
    else if (currentPage == UI_PAGE_SETTINGS)
 8005964:	4b5f      	ldr	r3, [pc, #380]	@ (8005ae4 <SystemGetsSignal+0x194>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d102      	bne.n	8005972 <SystemGetsSignal+0x22>
    {
        pageCount = SettingsItemCount;
 800596c:	2303      	movs	r3, #3
 800596e:	80fb      	strh	r3, [r7, #6]
 8005970:	e013      	b.n	800599a <SystemGetsSignal+0x4a>
    }
    else if (currentPage == UI_PAGE_ABOUT)
 8005972:	4b5c      	ldr	r3, [pc, #368]	@ (8005ae4 <SystemGetsSignal+0x194>)
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2b03      	cmp	r3, #3
 8005978:	d102      	bne.n	8005980 <SystemGetsSignal+0x30>
    {
        pageCount = AboutItemCount;
 800597a:	2304      	movs	r3, #4
 800597c:	80fb      	strh	r3, [r7, #6]
 800597e:	e00c      	b.n	800599a <SystemGetsSignal+0x4a>
    }
    else if (currentPage == UI_PAGE_TOOLS)
 8005980:	4b58      	ldr	r3, [pc, #352]	@ (8005ae4 <SystemGetsSignal+0x194>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b04      	cmp	r3, #4
 8005986:	d102      	bne.n	800598e <SystemGetsSignal+0x3e>
    {
        pageCount = ToolsItemCount;
 8005988:	2302      	movs	r3, #2
 800598a:	80fb      	strh	r3, [r7, #6]
 800598c:	e005      	b.n	800599a <SystemGetsSignal+0x4a>
    }
    else if (currentPage == UI_PAGE_GAMES)
 800598e:	4b55      	ldr	r3, [pc, #340]	@ (8005ae4 <SystemGetsSignal+0x194>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	2b05      	cmp	r3, #5
 8005994:	d101      	bne.n	800599a <SystemGetsSignal+0x4a>
    {
        pageCount = GamesItemCount;
 8005996:	2303      	movs	r3, #3
 8005998:	80fb      	strh	r3, [r7, #6]
    }

    if (!cancelSelection)
 800599a:	4b53      	ldr	r3, [pc, #332]	@ (8005ae8 <SystemGetsSignal+0x198>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	f083 0301 	eor.w	r3, r3, #1
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d03a      	beq.n	8005a1e <SystemGetsSignal+0xce>
    {
        if (count - preCount > 1)
 80059a8:	4b50      	ldr	r3, [pc, #320]	@ (8005aec <SystemGetsSignal+0x19c>)
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	461a      	mov	r2, r3
 80059ae:	4b50      	ldr	r3, [pc, #320]	@ (8005af0 <SystemGetsSignal+0x1a0>)
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	dd14      	ble.n	80059e2 <SystemGetsSignal+0x92>
        {
            if (menuSelection < pageCount)
 80059b8:	4b4e      	ldr	r3, [pc, #312]	@ (8005af4 <SystemGetsSignal+0x1a4>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	461a      	mov	r2, r3
 80059be:	88fb      	ldrh	r3, [r7, #6]
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d906      	bls.n	80059d2 <SystemGetsSignal+0x82>
            {
                menuSelection++;
 80059c4:	4b4b      	ldr	r3, [pc, #300]	@ (8005af4 <SystemGetsSignal+0x1a4>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	3301      	adds	r3, #1
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	4b49      	ldr	r3, [pc, #292]	@ (8005af4 <SystemGetsSignal+0x1a4>)
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	e002      	b.n	80059d8 <SystemGetsSignal+0x88>
            }
            else
            {
                menuSelection = 1;
 80059d2:	4b48      	ldr	r3, [pc, #288]	@ (8005af4 <SystemGetsSignal+0x1a4>)
 80059d4:	2201      	movs	r2, #1
 80059d6:	701a      	strb	r2, [r3, #0]
            }

            preCount = count;
 80059d8:	4b44      	ldr	r3, [pc, #272]	@ (8005aec <SystemGetsSignal+0x19c>)
 80059da:	881a      	ldrh	r2, [r3, #0]
 80059dc:	4b44      	ldr	r3, [pc, #272]	@ (8005af0 <SystemGetsSignal+0x1a0>)
 80059de:	801a      	strh	r2, [r3, #0]
 80059e0:	e08f      	b.n	8005b02 <SystemGetsSignal+0x1b2>
        }
        else if (count - preCount < -1)
 80059e2:	4b42      	ldr	r3, [pc, #264]	@ (8005aec <SystemGetsSignal+0x19c>)
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	4b41      	ldr	r3, [pc, #260]	@ (8005af0 <SystemGetsSignal+0x1a0>)
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f2:	f280 8086 	bge.w	8005b02 <SystemGetsSignal+0x1b2>
        {

            if (menuSelection > 1)
 80059f6:	4b3f      	ldr	r3, [pc, #252]	@ (8005af4 <SystemGetsSignal+0x1a4>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d906      	bls.n	8005a0c <SystemGetsSignal+0xbc>
            {
                menuSelection--;
 80059fe:	4b3d      	ldr	r3, [pc, #244]	@ (8005af4 <SystemGetsSignal+0x1a4>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	4b3b      	ldr	r3, [pc, #236]	@ (8005af4 <SystemGetsSignal+0x1a4>)
 8005a08:	701a      	strb	r2, [r3, #0]
 8005a0a:	e003      	b.n	8005a14 <SystemGetsSignal+0xc4>
            }
            else
            {
                menuSelection = pageCount;
 8005a0c:	88fb      	ldrh	r3, [r7, #6]
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	4b38      	ldr	r3, [pc, #224]	@ (8005af4 <SystemGetsSignal+0x1a4>)
 8005a12:	701a      	strb	r2, [r3, #0]
            }

            preCount = count;
 8005a14:	4b35      	ldr	r3, [pc, #212]	@ (8005aec <SystemGetsSignal+0x19c>)
 8005a16:	881a      	ldrh	r2, [r3, #0]
 8005a18:	4b35      	ldr	r3, [pc, #212]	@ (8005af0 <SystemGetsSignal+0x1a0>)
 8005a1a:	801a      	strh	r2, [r3, #0]
 8005a1c:	e071      	b.n	8005b02 <SystemGetsSignal+0x1b2>
        }
    }
    else if (cancelSelection && currentPage == UI_PAGE_SETTINGS && menuRank == 3)
 8005a1e:	4b32      	ldr	r3, [pc, #200]	@ (8005ae8 <SystemGetsSignal+0x198>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d058      	beq.n	8005ad8 <SystemGetsSignal+0x188>
 8005a26:	4b2f      	ldr	r3, [pc, #188]	@ (8005ae4 <SystemGetsSignal+0x194>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d154      	bne.n	8005ad8 <SystemGetsSignal+0x188>
 8005a2e:	4b32      	ldr	r3, [pc, #200]	@ (8005af8 <SystemGetsSignal+0x1a8>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	d150      	bne.n	8005ad8 <SystemGetsSignal+0x188>
    {
        if (brightness + RollScale >= 255 && count - preCount > 1)
 8005a36:	4b31      	ldr	r3, [pc, #196]	@ (8005afc <SystemGetsSignal+0x1ac>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	2bf9      	cmp	r3, #249	@ 0xf9
 8005a3c:	d90f      	bls.n	8005a5e <SystemGetsSignal+0x10e>
 8005a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8005aec <SystemGetsSignal+0x19c>)
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	4b2a      	ldr	r3, [pc, #168]	@ (8005af0 <SystemGetsSignal+0x1a0>)
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	dd07      	ble.n	8005a5e <SystemGetsSignal+0x10e>
        {
            brightness = 255;
 8005a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8005afc <SystemGetsSignal+0x1ac>)
 8005a50:	22ff      	movs	r2, #255	@ 0xff
 8005a52:	701a      	strb	r2, [r3, #0]
            preCount = count;
 8005a54:	4b25      	ldr	r3, [pc, #148]	@ (8005aec <SystemGetsSignal+0x19c>)
 8005a56:	881a      	ldrh	r2, [r3, #0]
 8005a58:	4b25      	ldr	r3, [pc, #148]	@ (8005af0 <SystemGetsSignal+0x1a0>)
 8005a5a:	801a      	strh	r2, [r3, #0]
 8005a5c:	e03b      	b.n	8005ad6 <SystemGetsSignal+0x186>
        }
        else if (brightness - RollScale <= 0 && count - preCount < -1)
 8005a5e:	4b27      	ldr	r3, [pc, #156]	@ (8005afc <SystemGetsSignal+0x1ac>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	2b05      	cmp	r3, #5
 8005a64:	d810      	bhi.n	8005a88 <SystemGetsSignal+0x138>
 8005a66:	4b21      	ldr	r3, [pc, #132]	@ (8005aec <SystemGetsSignal+0x19c>)
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	4b20      	ldr	r3, [pc, #128]	@ (8005af0 <SystemGetsSignal+0x1a0>)
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a76:	da07      	bge.n	8005a88 <SystemGetsSignal+0x138>
        {
            brightness = 0;
 8005a78:	4b20      	ldr	r3, [pc, #128]	@ (8005afc <SystemGetsSignal+0x1ac>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	701a      	strb	r2, [r3, #0]
            preCount = count;
 8005a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8005aec <SystemGetsSignal+0x19c>)
 8005a80:	881a      	ldrh	r2, [r3, #0]
 8005a82:	4b1b      	ldr	r3, [pc, #108]	@ (8005af0 <SystemGetsSignal+0x1a0>)
 8005a84:	801a      	strh	r2, [r3, #0]
 8005a86:	e026      	b.n	8005ad6 <SystemGetsSignal+0x186>
        }
        else if (count - preCount > 1)
 8005a88:	4b18      	ldr	r3, [pc, #96]	@ (8005aec <SystemGetsSignal+0x19c>)
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	4b18      	ldr	r3, [pc, #96]	@ (8005af0 <SystemGetsSignal+0x1a0>)
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	dd0a      	ble.n	8005aae <SystemGetsSignal+0x15e>
        {
            brightness += RollScale;
 8005a98:	4b18      	ldr	r3, [pc, #96]	@ (8005afc <SystemGetsSignal+0x1ac>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	3305      	adds	r3, #5
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	4b16      	ldr	r3, [pc, #88]	@ (8005afc <SystemGetsSignal+0x1ac>)
 8005aa2:	701a      	strb	r2, [r3, #0]
            preCount = count;
 8005aa4:	4b11      	ldr	r3, [pc, #68]	@ (8005aec <SystemGetsSignal+0x19c>)
 8005aa6:	881a      	ldrh	r2, [r3, #0]
 8005aa8:	4b11      	ldr	r3, [pc, #68]	@ (8005af0 <SystemGetsSignal+0x1a0>)
 8005aaa:	801a      	strh	r2, [r3, #0]
        if (brightness + RollScale >= 255 && count - preCount > 1)
 8005aac:	e028      	b.n	8005b00 <SystemGetsSignal+0x1b0>
        }
        else if (count - preCount < -1)
 8005aae:	4b0f      	ldr	r3, [pc, #60]	@ (8005aec <SystemGetsSignal+0x19c>)
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8005af0 <SystemGetsSignal+0x1a0>)
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abe:	da1f      	bge.n	8005b00 <SystemGetsSignal+0x1b0>
        {
            brightness -= RollScale;
 8005ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8005afc <SystemGetsSignal+0x1ac>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	3b05      	subs	r3, #5
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8005afc <SystemGetsSignal+0x1ac>)
 8005aca:	701a      	strb	r2, [r3, #0]
            preCount = count;
 8005acc:	4b07      	ldr	r3, [pc, #28]	@ (8005aec <SystemGetsSignal+0x19c>)
 8005ace:	881a      	ldrh	r2, [r3, #0]
 8005ad0:	4b07      	ldr	r3, [pc, #28]	@ (8005af0 <SystemGetsSignal+0x1a0>)
 8005ad2:	801a      	strh	r2, [r3, #0]
        if (brightness + RollScale >= 255 && count - preCount > 1)
 8005ad4:	e014      	b.n	8005b00 <SystemGetsSignal+0x1b0>
 8005ad6:	e013      	b.n	8005b00 <SystemGetsSignal+0x1b0>
        }
    }
    else
        preCount = count;
 8005ad8:	4b04      	ldr	r3, [pc, #16]	@ (8005aec <SystemGetsSignal+0x19c>)
 8005ada:	881a      	ldrh	r2, [r3, #0]
 8005adc:	4b04      	ldr	r3, [pc, #16]	@ (8005af0 <SystemGetsSignal+0x1a0>)
 8005ade:	801a      	strh	r2, [r3, #0]
 8005ae0:	e00f      	b.n	8005b02 <SystemGetsSignal+0x1b2>
 8005ae2:	bf00      	nop
 8005ae4:	20001034 	.word	0x20001034
 8005ae8:	20001036 	.word	0x20001036
 8005aec:	20000740 	.word	0x20000740
 8005af0:	20000440 	.word	0x20000440
 8005af4:	2000043d 	.word	0x2000043d
 8005af8:	2000043c 	.word	0x2000043c
 8005afc:	2000043e 	.word	0x2000043e
        if (brightness + RollScale >= 255 && count - preCount > 1)
 8005b00:	bf00      	nop


#pragma endregion 管理翻页

    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8005b02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005b06:	4876      	ldr	r0, [pc, #472]	@ (8005ce0 <SystemGetsSignal+0x390>)
 8005b08:	f004 f846 	bl	8009b98 <HAL_GPIO_ReadPin>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f041 82a7 	bne.w	8007062 <SystemGetsSignal+0x1712>
    {
        HAL_Delay(50); // 防抖动延时
 8005b14:	2032      	movs	r0, #50	@ 0x32
 8005b16:	f003 fc29 	bl	800936c <HAL_Delay>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && !gameOver && !game2048_game_over)
 8005b1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005b1e:	4870      	ldr	r0, [pc, #448]	@ (8005ce0 <SystemGetsSignal+0x390>)
 8005b20:	f004 f83a 	bl	8009b98 <HAL_GPIO_ReadPin>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f041 829b 	bne.w	8007062 <SystemGetsSignal+0x1712>
 8005b2c:	4b6d      	ldr	r3, [pc, #436]	@ (8005ce4 <SystemGetsSignal+0x394>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	f083 0301 	eor.w	r3, r3, #1
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f001 8293 	beq.w	8007062 <SystemGetsSignal+0x1712>
 8005b3c:	4b6a      	ldr	r3, [pc, #424]	@ (8005ce8 <SystemGetsSignal+0x398>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	f083 0301 	eor.w	r3, r3, #1
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f001 828b 	beq.w	8007062 <SystemGetsSignal+0x1712>
        {
// #pragma region 游戏部分
            if (menuRank == 1 && menuSelection == 1)
 8005b4c:	4b67      	ldr	r3, [pc, #412]	@ (8005cec <SystemGetsSignal+0x39c>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	f040 80ed 	bne.w	8005d30 <SystemGetsSignal+0x3e0>
 8005b56:	4b66      	ldr	r3, [pc, #408]	@ (8005cf0 <SystemGetsSignal+0x3a0>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	f040 80e8 	bne.w	8005d30 <SystemGetsSignal+0x3e0>
            {
                menuRank = 2;
 8005b60:	4b62      	ldr	r3, [pc, #392]	@ (8005cec <SystemGetsSignal+0x39c>)
 8005b62:	2202      	movs	r2, #2
 8005b64:	701a      	strb	r2, [r3, #0]
                menuSelection = 1;
 8005b66:	4b62      	ldr	r3, [pc, #392]	@ (8005cf0 <SystemGetsSignal+0x3a0>)
 8005b68:	2201      	movs	r2, #1
 8005b6a:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8005b6c:	4b61      	ldr	r3, [pc, #388]	@ (8005cf4 <SystemGetsSignal+0x3a4>)
 8005b6e:	2205      	movs	r2, #5
 8005b70:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005b72:	4b5f      	ldr	r3, [pc, #380]	@ (8005cf0 <SystemGetsSignal+0x3a0>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	f1c3 0202 	rsb	r2, r3, #2
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	3303      	adds	r3, #3
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fa fbac 	bl	80002e4 <__aeabi_i2f>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2201      	movs	r2, #1
 8005b90:	9201      	str	r2, [sp, #4]
 8005b92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005b96:	9200      	str	r2, [sp, #0]
 8005b98:	4a57      	ldr	r2, [pc, #348]	@ (8005cf8 <SystemGetsSignal+0x3a8>)
 8005b9a:	4958      	ldr	r1, [pc, #352]	@ (8005cfc <SystemGetsSignal+0x3ac>)
 8005b9c:	4858      	ldr	r0, [pc, #352]	@ (8005d00 <SystemGetsSignal+0x3b0>)
 8005b9e:	f002 fba5 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8005ba2:	2064      	movs	r0, #100	@ 0x64
 8005ba4:	f003 fbe2 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005ba8:	4b51      	ldr	r3, [pc, #324]	@ (8005cf0 <SystemGetsSignal+0x3a0>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	f1c3 0203 	rsb	r2, r3, #3
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	4413      	add	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	3303      	adds	r3, #3
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fa fb91 	bl	80002e4 <__aeabi_i2f>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	9201      	str	r2, [sp, #4]
 8005bc8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005bcc:	9200      	str	r2, [sp, #0]
 8005bce:	4a4a      	ldr	r2, [pc, #296]	@ (8005cf8 <SystemGetsSignal+0x3a8>)
 8005bd0:	494c      	ldr	r1, [pc, #304]	@ (8005d04 <SystemGetsSignal+0x3b4>)
 8005bd2:	484b      	ldr	r0, [pc, #300]	@ (8005d00 <SystemGetsSignal+0x3b0>)
 8005bd4:	f002 fb8a 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8005bd8:	2064      	movs	r0, #100	@ 0x64
 8005bda:	f003 fbc7 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005bde:	4b44      	ldr	r3, [pc, #272]	@ (8005cf0 <SystemGetsSignal+0x3a0>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	f1c3 0204 	rsb	r2, r3, #4
 8005be6:	4613      	mov	r3, r2
 8005be8:	005b      	lsls	r3, r3, #1
 8005bea:	4413      	add	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	3303      	adds	r3, #3
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fa fb76 	bl	80002e4 <__aeabi_i2f>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	9201      	str	r2, [sp, #4]
 8005bfe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005c02:	9200      	str	r2, [sp, #0]
 8005c04:	4a3c      	ldr	r2, [pc, #240]	@ (8005cf8 <SystemGetsSignal+0x3a8>)
 8005c06:	4940      	ldr	r1, [pc, #256]	@ (8005d08 <SystemGetsSignal+0x3b8>)
 8005c08:	483d      	ldr	r0, [pc, #244]	@ (8005d00 <SystemGetsSignal+0x3b0>)
 8005c0a:	f002 fb6f 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8005c0e:	2064      	movs	r0, #100	@ 0x64
 8005c10:	f003 fbac 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005c14:	4b36      	ldr	r3, [pc, #216]	@ (8005cf0 <SystemGetsSignal+0x3a0>)
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	f1c3 0205 	rsb	r2, r3, #5
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	4413      	add	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	3303      	adds	r3, #3
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7fa fb5b 	bl	80002e4 <__aeabi_i2f>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2201      	movs	r2, #1
 8005c32:	9201      	str	r2, [sp, #4]
 8005c34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005c38:	9200      	str	r2, [sp, #0]
 8005c3a:	4a2f      	ldr	r2, [pc, #188]	@ (8005cf8 <SystemGetsSignal+0x3a8>)
 8005c3c:	4933      	ldr	r1, [pc, #204]	@ (8005d0c <SystemGetsSignal+0x3bc>)
 8005c3e:	4830      	ldr	r0, [pc, #192]	@ (8005d00 <SystemGetsSignal+0x3b0>)
 8005c40:	f002 fb54 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8005c44:	2064      	movs	r0, #100	@ 0x64
 8005c46:	f003 fb91 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005c4a:	4b29      	ldr	r3, [pc, #164]	@ (8005cf0 <SystemGetsSignal+0x3a0>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	f1c3 0206 	rsb	r2, r3, #6
 8005c52:	4613      	mov	r3, r2
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	3303      	adds	r3, #3
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fa fb40 	bl	80002e4 <__aeabi_i2f>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2201      	movs	r2, #1
 8005c68:	9201      	str	r2, [sp, #4]
 8005c6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005c6e:	9200      	str	r2, [sp, #0]
 8005c70:	4a21      	ldr	r2, [pc, #132]	@ (8005cf8 <SystemGetsSignal+0x3a8>)
 8005c72:	4927      	ldr	r1, [pc, #156]	@ (8005d10 <SystemGetsSignal+0x3c0>)
 8005c74:	4822      	ldr	r0, [pc, #136]	@ (8005d00 <SystemGetsSignal+0x3b0>)
 8005c76:	f002 fb39 	bl	80082ec <OLED_DoTweenObject>

                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005c7a:	2318      	movs	r3, #24
 8005c7c:	9301      	str	r3, [sp, #4]
 8005c7e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005c88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005c8c:	4921      	ldr	r1, [pc, #132]	@ (8005d14 <SystemGetsSignal+0x3c4>)
 8005c8e:	4822      	ldr	r0, [pc, #136]	@ (8005d18 <SystemGetsSignal+0x3c8>)
 8005c90:	f002 fb2c 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8005c94:	2064      	movs	r0, #100	@ 0x64
 8005c96:	f003 fb69 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005c9a:	2318      	movs	r3, #24
 8005c9c:	9301      	str	r3, [sp, #4]
 8005c9e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8005d1c <SystemGetsSignal+0x3cc>)
 8005ca6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005caa:	491d      	ldr	r1, [pc, #116]	@ (8005d20 <SystemGetsSignal+0x3d0>)
 8005cac:	481a      	ldr	r0, [pc, #104]	@ (8005d18 <SystemGetsSignal+0x3c8>)
 8005cae:	f002 fb1d 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8005cb2:	2064      	movs	r0, #100	@ 0x64
 8005cb4:	f003 fb5a 	bl	800936c <HAL_Delay>
                OLED_DoTweenObjectY(&g_AnimationManager, "BackButton", OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, BASIC_TWEEN_IN_STYLE);
 8005cb8:	2318      	movs	r3, #24
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	4a19      	ldr	r2, [pc, #100]	@ (8005d24 <SystemGetsSignal+0x3d4>)
 8005cc0:	4919      	ldr	r1, [pc, #100]	@ (8005d28 <SystemGetsSignal+0x3d8>)
 8005cc2:	481a      	ldr	r0, [pc, #104]	@ (8005d2c <SystemGetsSignal+0x3dc>)
 8005cc4:	f002 fbe5 	bl	8008492 <OLED_DoTweenObjectY>
                OLED_DoTweenObjectX(&g_AnimationManager, "BackButton", OLED_UI_END_X, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005cc8:	2318      	movs	r3, #24
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005cd0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005cd4:	4914      	ldr	r1, [pc, #80]	@ (8005d28 <SystemGetsSignal+0x3d8>)
 8005cd6:	4815      	ldr	r0, [pc, #84]	@ (8005d2c <SystemGetsSignal+0x3dc>)
 8005cd8:	f002 fba6 	bl	8008428 <OLED_DoTweenObjectX>
 8005cdc:	f001 b9b8 	b.w	8007050 <SystemGetsSignal+0x1700>
 8005ce0:	40010c00 	.word	0x40010c00
 8005ce4:	20000672 	.word	0x20000672
 8005ce8:	2000069c 	.word	0x2000069c
 8005cec:	2000043c 	.word	0x2000043c
 8005cf0:	2000043d 	.word	0x2000043d
 8005cf4:	20001034 	.word	0x20001034
 8005cf8:	c2b40000 	.word	0xc2b40000
 8005cfc:	0800e6d8 	.word	0x0800e6d8
 8005d00:	2000144c 	.word	0x2000144c
 8005d04:	0800e6e4 	.word	0x0800e6e4
 8005d08:	0800e6f0 	.word	0x0800e6f0
 8005d0c:	0800e700 	.word	0x0800e700
 8005d10:	0800e710 	.word	0x0800e710
 8005d14:	0800e5f8 	.word	0x0800e5f8
 8005d18:	20001a40 	.word	0x20001a40
 8005d1c:	41e80000 	.word	0x41e80000
 8005d20:	0800e600 	.word	0x0800e600
 8005d24:	42280000 	.word	0x42280000
 8005d28:	0800e608 	.word	0x0800e608
 8005d2c:	20003df8 	.word	0x20003df8
            }
            else if (menuRank == 2 && menuSelection == 3 && currentPage == UI_PAGE_GAMES)
 8005d30:	4bb2      	ldr	r3, [pc, #712]	@ (8005ffc <SystemGetsSignal+0x6ac>)
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	f040 8088 	bne.w	8005e4a <SystemGetsSignal+0x4fa>
 8005d3a:	4bb1      	ldr	r3, [pc, #708]	@ (8006000 <SystemGetsSignal+0x6b0>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	f040 8083 	bne.w	8005e4a <SystemGetsSignal+0x4fa>
 8005d44:	4baf      	ldr	r3, [pc, #700]	@ (8006004 <SystemGetsSignal+0x6b4>)
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b05      	cmp	r3, #5
 8005d4a:	d17e      	bne.n	8005e4a <SystemGetsSignal+0x4fa>
            {
                menuRank = 1;
 8005d4c:	4bab      	ldr	r3, [pc, #684]	@ (8005ffc <SystemGetsSignal+0x6ac>)
 8005d4e:	2201      	movs	r2, #1
 8005d50:	701a      	strb	r2, [r3, #0]
                menuSelection = 1;
 8005d52:	4bab      	ldr	r3, [pc, #684]	@ (8006000 <SystemGetsSignal+0x6b0>)
 8005d54:	2201      	movs	r2, #1
 8005d56:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_MENU;
 8005d58:	4baa      	ldr	r3, [pc, #680]	@ (8006004 <SystemGetsSignal+0x6b4>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005d5e:	2301      	movs	r3, #1
 8005d60:	9301      	str	r3, [sp, #4]
 8005d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	4ba7      	ldr	r3, [pc, #668]	@ (8006008 <SystemGetsSignal+0x6b8>)
 8005d6a:	4aa8      	ldr	r2, [pc, #672]	@ (800600c <SystemGetsSignal+0x6bc>)
 8005d6c:	49a8      	ldr	r1, [pc, #672]	@ (8006010 <SystemGetsSignal+0x6c0>)
 8005d6e:	48a9      	ldr	r0, [pc, #676]	@ (8006014 <SystemGetsSignal+0x6c4>)
 8005d70:	f002 fabc 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8005d74:	2064      	movs	r0, #100	@ 0x64
 8005d76:	f003 faf9 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	9301      	str	r3, [sp, #4]
 8005d7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	4ba4      	ldr	r3, [pc, #656]	@ (8006018 <SystemGetsSignal+0x6c8>)
 8005d86:	4aa1      	ldr	r2, [pc, #644]	@ (800600c <SystemGetsSignal+0x6bc>)
 8005d88:	49a4      	ldr	r1, [pc, #656]	@ (800601c <SystemGetsSignal+0x6cc>)
 8005d8a:	48a2      	ldr	r0, [pc, #648]	@ (8006014 <SystemGetsSignal+0x6c4>)
 8005d8c:	f002 faae 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8005d90:	2064      	movs	r0, #100	@ 0x64
 8005d92:	f003 faeb 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005d96:	2301      	movs	r3, #1
 8005d98:	9301      	str	r3, [sp, #4]
 8005d9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005da4:	4a99      	ldr	r2, [pc, #612]	@ (800600c <SystemGetsSignal+0x6bc>)
 8005da6:	499e      	ldr	r1, [pc, #632]	@ (8006020 <SystemGetsSignal+0x6d0>)
 8005da8:	489e      	ldr	r0, [pc, #632]	@ (8006024 <SystemGetsSignal+0x6d4>)
 8005daa:	f002 fa9f 	bl	80082ec <OLED_DoTweenObject>

                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005dae:	2318      	movs	r3, #24
 8005db0:	9301      	str	r3, [sp, #4]
 8005db2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005dbc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005dc0:	4999      	ldr	r1, [pc, #612]	@ (8006028 <SystemGetsSignal+0x6d8>)
 8005dc2:	489a      	ldr	r0, [pc, #616]	@ (800602c <SystemGetsSignal+0x6dc>)
 8005dc4:	f002 fa92 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8005dc8:	2064      	movs	r0, #100	@ 0x64
 8005dca:	f003 facf 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005dce:	2318      	movs	r3, #24
 8005dd0:	9301      	str	r3, [sp, #4]
 8005dd2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	4b95      	ldr	r3, [pc, #596]	@ (8006030 <SystemGetsSignal+0x6e0>)
 8005dda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005dde:	4995      	ldr	r1, [pc, #596]	@ (8006034 <SystemGetsSignal+0x6e4>)
 8005de0:	4892      	ldr	r0, [pc, #584]	@ (800602c <SystemGetsSignal+0x6dc>)
 8005de2:	f002 fa83 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8005de6:	2064      	movs	r0, #100	@ 0x64
 8005de8:	f003 fac0 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005dec:	2318      	movs	r3, #24
 8005dee:	9301      	str	r3, [sp, #4]
 8005df0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	4b90      	ldr	r3, [pc, #576]	@ (8006038 <SystemGetsSignal+0x6e8>)
 8005df8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005dfc:	498f      	ldr	r1, [pc, #572]	@ (800603c <SystemGetsSignal+0x6ec>)
 8005dfe:	488b      	ldr	r0, [pc, #556]	@ (800602c <SystemGetsSignal+0x6dc>)
 8005e00:	f002 fa74 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8005e04:	2064      	movs	r0, #100	@ 0x64
 8005e06:	f003 fab1 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005e0a:	2318      	movs	r3, #24
 8005e0c:	9301      	str	r3, [sp, #4]
 8005e0e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	4b8a      	ldr	r3, [pc, #552]	@ (8006040 <SystemGetsSignal+0x6f0>)
 8005e16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005e1a:	498a      	ldr	r1, [pc, #552]	@ (8006044 <SystemGetsSignal+0x6f4>)
 8005e1c:	4883      	ldr	r0, [pc, #524]	@ (800602c <SystemGetsSignal+0x6dc>)
 8005e1e:	f002 fa65 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8005e22:	2064      	movs	r0, #100	@ 0x64
 8005e24:	f003 faa2 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005e28:	2318      	movs	r3, #24
 8005e2a:	9301      	str	r3, [sp, #4]
 8005e2c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	4b85      	ldr	r3, [pc, #532]	@ (8006048 <SystemGetsSignal+0x6f8>)
 8005e34:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005e38:	4984      	ldr	r1, [pc, #528]	@ (800604c <SystemGetsSignal+0x6fc>)
 8005e3a:	487c      	ldr	r0, [pc, #496]	@ (800602c <SystemGetsSignal+0x6dc>)
 8005e3c:	f002 fa56 	bl	80082ec <OLED_DoTweenObject>
                resetAnimation = true;
 8005e40:	4b83      	ldr	r3, [pc, #524]	@ (8006050 <SystemGetsSignal+0x700>)
 8005e42:	2201      	movs	r2, #1
 8005e44:	701a      	strb	r2, [r3, #0]
 8005e46:	f001 b903 	b.w	8007050 <SystemGetsSignal+0x1700>
            }
            else if (menuRank == 2 && menuSelection == 1 && currentPage == UI_PAGE_GAMES)
 8005e4a:	4b6c      	ldr	r3, [pc, #432]	@ (8005ffc <SystemGetsSignal+0x6ac>)
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d15e      	bne.n	8005f10 <SystemGetsSignal+0x5c0>
 8005e52:	4b6b      	ldr	r3, [pc, #428]	@ (8006000 <SystemGetsSignal+0x6b0>)
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d15a      	bne.n	8005f10 <SystemGetsSignal+0x5c0>
 8005e5a:	4b6a      	ldr	r3, [pc, #424]	@ (8006004 <SystemGetsSignal+0x6b4>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b05      	cmp	r3, #5
 8005e60:	d156      	bne.n	8005f10 <SystemGetsSignal+0x5c0>
            {
                menuRank = 3;
 8005e62:	4b66      	ldr	r3, [pc, #408]	@ (8005ffc <SystemGetsSignal+0x6ac>)
 8005e64:	2203      	movs	r2, #3
 8005e66:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8005e68:	4b66      	ldr	r3, [pc, #408]	@ (8006004 <SystemGetsSignal+0x6b4>)
 8005e6a:	2205      	movs	r2, #5
 8005e6c:	701a      	strb	r2, [r3, #0]
                Snake_InitGame();
 8005e6e:	f7fb f9eb 	bl	8001248 <Snake_InitGame>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8005e72:	2318      	movs	r3, #24
 8005e74:	9301      	str	r3, [sp, #4]
 8005e76:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8005e80:	f04f 0200 	mov.w	r2, #0
 8005e84:	4973      	ldr	r1, [pc, #460]	@ (8006054 <SystemGetsSignal+0x704>)
 8005e86:	4867      	ldr	r0, [pc, #412]	@ (8006024 <SystemGetsSignal+0x6d4>)
 8005e88:	f002 fa30 	bl	80082ec <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", 0, 8, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8005e8c:	2315      	movs	r3, #21
 8005e8e:	9301      	str	r3, [sp, #4]
 8005e90:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8005e9a:	f04f 0200 	mov.w	r2, #0
 8005e9e:	496e      	ldr	r1, [pc, #440]	@ (8006058 <SystemGetsSignal+0x708>)
 8005ea0:	4860      	ldr	r0, [pc, #384]	@ (8006024 <SystemGetsSignal+0x6d4>)
 8005ea2:	f002 fa23 	bl	80082ec <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	9301      	str	r3, [sp, #4]
 8005eaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005eb4:	4a55      	ldr	r2, [pc, #340]	@ (800600c <SystemGetsSignal+0x6bc>)
 8005eb6:	4956      	ldr	r1, [pc, #344]	@ (8006010 <SystemGetsSignal+0x6c0>)
 8005eb8:	4856      	ldr	r0, [pc, #344]	@ (8006014 <SystemGetsSignal+0x6c4>)
 8005eba:	f002 fa17 	bl	80082ec <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	9301      	str	r3, [sp, #4]
 8005ec2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	4b4f      	ldr	r3, [pc, #316]	@ (8006008 <SystemGetsSignal+0x6b8>)
 8005eca:	4a64      	ldr	r2, [pc, #400]	@ (800605c <SystemGetsSignal+0x70c>)
 8005ecc:	4964      	ldr	r1, [pc, #400]	@ (8006060 <SystemGetsSignal+0x710>)
 8005ece:	4865      	ldr	r0, [pc, #404]	@ (8006064 <SystemGetsSignal+0x714>)
 8005ed0:	f002 fa0c 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8005ed4:	2064      	movs	r0, #100	@ 0x64
 8005ed6:	f003 fa49 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005eda:	2301      	movs	r3, #1
 8005edc:	9301      	str	r3, [sp, #4]
 8005ede:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	4b52      	ldr	r3, [pc, #328]	@ (8006030 <SystemGetsSignal+0x6e0>)
 8005ee6:	4a49      	ldr	r2, [pc, #292]	@ (800600c <SystemGetsSignal+0x6bc>)
 8005ee8:	494c      	ldr	r1, [pc, #304]	@ (800601c <SystemGetsSignal+0x6cc>)
 8005eea:	484a      	ldr	r0, [pc, #296]	@ (8006014 <SystemGetsSignal+0x6c4>)
 8005eec:	f002 f9fe 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8005ef0:	2064      	movs	r0, #100	@ 0x64
 8005ef2:	f003 fa3b 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	9301      	str	r3, [sp, #4]
 8005efa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	4b4d      	ldr	r3, [pc, #308]	@ (8006038 <SystemGetsSignal+0x6e8>)
 8005f02:	4a42      	ldr	r2, [pc, #264]	@ (800600c <SystemGetsSignal+0x6bc>)
 8005f04:	4946      	ldr	r1, [pc, #280]	@ (8006020 <SystemGetsSignal+0x6d0>)
 8005f06:	4847      	ldr	r0, [pc, #284]	@ (8006024 <SystemGetsSignal+0x6d4>)
 8005f08:	f002 f9f0 	bl	80082ec <OLED_DoTweenObject>
 8005f0c:	f001 b8a0 	b.w	8007050 <SystemGetsSignal+0x1700>
            }
            else if (menuRank == 3 && menuSelection == 1 && cancelSelection && UI_PAGE_GAMES && !gameOver && currentPage == UI_PAGE_GAMES)
 8005f10:	4b3a      	ldr	r3, [pc, #232]	@ (8005ffc <SystemGetsSignal+0x6ac>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b03      	cmp	r3, #3
 8005f16:	f040 80b1 	bne.w	800607c <SystemGetsSignal+0x72c>
 8005f1a:	4b39      	ldr	r3, [pc, #228]	@ (8006000 <SystemGetsSignal+0x6b0>)
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	f040 80ac 	bne.w	800607c <SystemGetsSignal+0x72c>
 8005f24:	4b50      	ldr	r3, [pc, #320]	@ (8006068 <SystemGetsSignal+0x718>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 80a7 	beq.w	800607c <SystemGetsSignal+0x72c>
 8005f2e:	4b4f      	ldr	r3, [pc, #316]	@ (800606c <SystemGetsSignal+0x71c>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	f083 0301 	eor.w	r3, r3, #1
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 809f 	beq.w	800607c <SystemGetsSignal+0x72c>
 8005f3e:	4b31      	ldr	r3, [pc, #196]	@ (8006004 <SystemGetsSignal+0x6b4>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b05      	cmp	r3, #5
 8005f44:	f040 809a 	bne.w	800607c <SystemGetsSignal+0x72c>
            {
                menuRank = 2;
 8005f48:	4b2c      	ldr	r3, [pc, #176]	@ (8005ffc <SystemGetsSignal+0x6ac>)
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8005f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8006004 <SystemGetsSignal+0x6b4>)
 8005f50:	2205      	movs	r2, #5
 8005f52:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8005f54:	2304      	movs	r3, #4
 8005f56:	9301      	str	r3, [sp, #4]
 8005f58:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	f04f 0300 	mov.w	r3, #0
 8005f62:	4a3e      	ldr	r2, [pc, #248]	@ (800605c <SystemGetsSignal+0x70c>)
 8005f64:	493e      	ldr	r1, [pc, #248]	@ (8006060 <SystemGetsSignal+0x710>)
 8005f66:	483f      	ldr	r0, [pc, #252]	@ (8006064 <SystemGetsSignal+0x714>)
 8005f68:	f002 f9c0 	bl	80082ec <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Greedy Snake") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8005f6c:	2318      	movs	r3, #24
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8005f7a:	4a3d      	ldr	r2, [pc, #244]	@ (8006070 <SystemGetsSignal+0x720>)
 8005f7c:	4935      	ldr	r1, [pc, #212]	@ (8006054 <SystemGetsSignal+0x704>)
 8005f7e:	4829      	ldr	r0, [pc, #164]	@ (8006024 <SystemGetsSignal+0x6d4>)
 8005f80:	f002 f9b4 	bl	80082ec <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Snake") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8005f84:	2315      	movs	r3, #21
 8005f86:	9301      	str	r3, [sp, #4]
 8005f88:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	4b39      	ldr	r3, [pc, #228]	@ (8006074 <SystemGetsSignal+0x724>)
 8005f90:	4a39      	ldr	r2, [pc, #228]	@ (8006078 <SystemGetsSignal+0x728>)
 8005f92:	4931      	ldr	r1, [pc, #196]	@ (8006058 <SystemGetsSignal+0x708>)
 8005f94:	4823      	ldr	r0, [pc, #140]	@ (8006024 <SystemGetsSignal+0x6d4>)
 8005f96:	f002 f9a9 	bl	80082ec <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005f9a:	2318      	movs	r3, #24
 8005f9c:	9301      	str	r3, [sp, #4]
 8005f9e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005fa8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005fac:	4918      	ldr	r1, [pc, #96]	@ (8006010 <SystemGetsSignal+0x6c0>)
 8005fae:	4819      	ldr	r0, [pc, #100]	@ (8006014 <SystemGetsSignal+0x6c4>)
 8005fb0:	f002 f99c 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8005fb4:	2064      	movs	r0, #100	@ 0x64
 8005fb6:	f003 f9d9 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005fba:	2318      	movs	r3, #24
 8005fbc:	9301      	str	r3, [sp, #4]
 8005fbe:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8006030 <SystemGetsSignal+0x6e0>)
 8005fc6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005fca:	4914      	ldr	r1, [pc, #80]	@ (800601c <SystemGetsSignal+0x6cc>)
 8005fcc:	4811      	ldr	r0, [pc, #68]	@ (8006014 <SystemGetsSignal+0x6c4>)
 8005fce:	f002 f98d 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8005fd2:	2064      	movs	r0, #100	@ 0x64
 8005fd4:	f003 f9ca 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005fd8:	2318      	movs	r3, #24
 8005fda:	9301      	str	r3, [sp, #4]
 8005fdc:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	4b15      	ldr	r3, [pc, #84]	@ (8006038 <SystemGetsSignal+0x6e8>)
 8005fe4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005fe8:	490d      	ldr	r1, [pc, #52]	@ (8006020 <SystemGetsSignal+0x6d0>)
 8005fea:	480e      	ldr	r0, [pc, #56]	@ (8006024 <SystemGetsSignal+0x6d4>)
 8005fec:	f002 f97e 	bl	80082ec <OLED_DoTweenObject>
                cancelSelection = false;
 8005ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8006068 <SystemGetsSignal+0x718>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	701a      	strb	r2, [r3, #0]
 8005ff6:	f001 b82b 	b.w	8007050 <SystemGetsSignal+0x1700>
 8005ffa:	bf00      	nop
 8005ffc:	2000043c 	.word	0x2000043c
 8006000:	2000043d 	.word	0x2000043d
 8006004:	20001034 	.word	0x20001034
 8006008:	c1200000 	.word	0xc1200000
 800600c:	c2b40000 	.word	0xc2b40000
 8006010:	0800e5f8 	.word	0x0800e5f8
 8006014:	20001a40 	.word	0x20001a40
 8006018:	40400000 	.word	0x40400000
 800601c:	0800e600 	.word	0x0800e600
 8006020:	0800e608 	.word	0x0800e608
 8006024:	20003df8 	.word	0x20003df8
 8006028:	0800e6d8 	.word	0x0800e6d8
 800602c:	2000144c 	.word	0x2000144c
 8006030:	41e80000 	.word	0x41e80000
 8006034:	0800e6e4 	.word	0x0800e6e4
 8006038:	42280000 	.word	0x42280000
 800603c:	0800e6f0 	.word	0x0800e6f0
 8006040:	425c0000 	.word	0x425c0000
 8006044:	0800e700 	.word	0x0800e700
 8006048:	42880000 	.word	0x42880000
 800604c:	0800e710 	.word	0x0800e710
 8006050:	20001037 	.word	0x20001037
 8006054:	0800e6b4 	.word	0x0800e6b4
 8006058:	0800e6cc 	.word	0x0800e6cc
 800605c:	42600000 	.word	0x42600000
 8006060:	0800e594 	.word	0x0800e594
 8006064:	20003804 	.word	0x20003804
 8006068:	20001036 	.word	0x20001036
 800606c:	20000672 	.word	0x20000672
 8006070:	42960000 	.word	0x42960000
 8006074:	41200000 	.word	0x41200000
 8006078:	42040000 	.word	0x42040000
            }
            else if (menuRank == 2 && menuSelection == 2 && currentPage == UI_PAGE_GAMES)
 800607c:	4b68      	ldr	r3, [pc, #416]	@ (8006220 <SystemGetsSignal+0x8d0>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b02      	cmp	r3, #2
 8006082:	d158      	bne.n	8006136 <SystemGetsSignal+0x7e6>
 8006084:	4b67      	ldr	r3, [pc, #412]	@ (8006224 <SystemGetsSignal+0x8d4>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	2b02      	cmp	r3, #2
 800608a:	d154      	bne.n	8006136 <SystemGetsSignal+0x7e6>
 800608c:	4b66      	ldr	r3, [pc, #408]	@ (8006228 <SystemGetsSignal+0x8d8>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	2b05      	cmp	r3, #5
 8006092:	d150      	bne.n	8006136 <SystemGetsSignal+0x7e6>
            {
                menuRank = 3;
 8006094:	4b62      	ldr	r3, [pc, #392]	@ (8006220 <SystemGetsSignal+0x8d0>)
 8006096:	2203      	movs	r2, #3
 8006098:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 800609a:	4b63      	ldr	r3, [pc, #396]	@ (8006228 <SystemGetsSignal+0x8d8>)
 800609c:	2205      	movs	r2, #5
 800609e:	701a      	strb	r2, [r3, #0]
                Game2048_Init();
 80060a0:	f7fb fbca 	bl	8001838 <Game2048_Init>
                OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 80060a4:	2300      	movs	r3, #0
 80060a6:	9301      	str	r3, [sp, #4]
 80060a8:	2301      	movs	r3, #1
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	4b5f      	ldr	r3, [pc, #380]	@ (800622c <SystemGetsSignal+0x8dc>)
 80060ae:	4a60      	ldr	r2, [pc, #384]	@ (8006230 <SystemGetsSignal+0x8e0>)
 80060b0:	4960      	ldr	r1, [pc, #384]	@ (8006234 <SystemGetsSignal+0x8e4>)
 80060b2:	4861      	ldr	r0, [pc, #388]	@ (8006238 <SystemGetsSignal+0x8e8>)
 80060b4:	f002 f91a 	bl	80082ec <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, 1, TITLE_BG_TWEEN_STYLE);
 80060b8:	2318      	movs	r3, #24
 80060ba:	9301      	str	r3, [sp, #4]
 80060bc:	2301      	movs	r3, #1
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80060c4:	f04f 0200 	mov.w	r2, #0
 80060c8:	495c      	ldr	r1, [pc, #368]	@ (800623c <SystemGetsSignal+0x8ec>)
 80060ca:	485d      	ldr	r0, [pc, #372]	@ (8006240 <SystemGetsSignal+0x8f0>)
 80060cc:	f002 f90e 	bl	80082ec <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", 0, 8, 1, CURSORBG_TWEEN_STYLE);
 80060d0:	2315      	movs	r3, #21
 80060d2:	9301      	str	r3, [sp, #4]
 80060d4:	2301      	movs	r3, #1
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	4958      	ldr	r1, [pc, #352]	@ (8006244 <SystemGetsSignal+0x8f4>)
 80060e2:	4857      	ldr	r0, [pc, #348]	@ (8006240 <SystemGetsSignal+0x8f0>)
 80060e4:	f002 f902 	bl	80082ec <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, 1, BASIC_TWEEN_OUT_STYLE);
 80060e8:	2301      	movs	r3, #1
 80060ea:	9301      	str	r3, [sp, #4]
 80060ec:	2301      	movs	r3, #1
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	4b55      	ldr	r3, [pc, #340]	@ (8006248 <SystemGetsSignal+0x8f8>)
 80060f2:	4a56      	ldr	r2, [pc, #344]	@ (800624c <SystemGetsSignal+0x8fc>)
 80060f4:	4956      	ldr	r1, [pc, #344]	@ (8006250 <SystemGetsSignal+0x900>)
 80060f6:	4857      	ldr	r0, [pc, #348]	@ (8006254 <SystemGetsSignal+0x904>)
 80060f8:	f002 f8f8 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 80060fc:	2064      	movs	r0, #100	@ 0x64
 80060fe:	f003 f935 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, BASIC_TWEEN_OUT_STYLE);
 8006102:	2301      	movs	r3, #1
 8006104:	9301      	str	r3, [sp, #4]
 8006106:	2301      	movs	r3, #1
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800610e:	4a4f      	ldr	r2, [pc, #316]	@ (800624c <SystemGetsSignal+0x8fc>)
 8006110:	4951      	ldr	r1, [pc, #324]	@ (8006258 <SystemGetsSignal+0x908>)
 8006112:	4850      	ldr	r0, [pc, #320]	@ (8006254 <SystemGetsSignal+0x904>)
 8006114:	f002 f8ea 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006118:	2064      	movs	r0, #100	@ 0x64
 800611a:	f003 f927 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, BASIC_TWEEN_OUT_STYLE);
 800611e:	2301      	movs	r3, #1
 8006120:	9301      	str	r3, [sp, #4]
 8006122:	2301      	movs	r3, #1
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	4b4d      	ldr	r3, [pc, #308]	@ (800625c <SystemGetsSignal+0x90c>)
 8006128:	4a48      	ldr	r2, [pc, #288]	@ (800624c <SystemGetsSignal+0x8fc>)
 800612a:	494d      	ldr	r1, [pc, #308]	@ (8006260 <SystemGetsSignal+0x910>)
 800612c:	4844      	ldr	r0, [pc, #272]	@ (8006240 <SystemGetsSignal+0x8f0>)
 800612e:	f002 f8dd 	bl	80082ec <OLED_DoTweenObject>
 8006132:	f000 bf8d 	b.w	8007050 <SystemGetsSignal+0x1700>
            }
            else if (menuRank == 3 && menuSelection == 2 && cancelSelection && UI_PAGE_GAMES && !game2048_game_over && currentPage == UI_PAGE_GAMES)
 8006136:	4b3a      	ldr	r3, [pc, #232]	@ (8006220 <SystemGetsSignal+0x8d0>)
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	2b03      	cmp	r3, #3
 800613c:	f040 809c 	bne.w	8006278 <SystemGetsSignal+0x928>
 8006140:	4b38      	ldr	r3, [pc, #224]	@ (8006224 <SystemGetsSignal+0x8d4>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	2b02      	cmp	r3, #2
 8006146:	f040 8097 	bne.w	8006278 <SystemGetsSignal+0x928>
 800614a:	4b46      	ldr	r3, [pc, #280]	@ (8006264 <SystemGetsSignal+0x914>)
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 8092 	beq.w	8006278 <SystemGetsSignal+0x928>
 8006154:	4b44      	ldr	r3, [pc, #272]	@ (8006268 <SystemGetsSignal+0x918>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	f083 0301 	eor.w	r3, r3, #1
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 808a 	beq.w	8006278 <SystemGetsSignal+0x928>
 8006164:	4b30      	ldr	r3, [pc, #192]	@ (8006228 <SystemGetsSignal+0x8d8>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	2b05      	cmp	r3, #5
 800616a:	f040 8085 	bne.w	8006278 <SystemGetsSignal+0x928>
            {
                menuRank = 2;
 800616e:	4b2c      	ldr	r3, [pc, #176]	@ (8006220 <SystemGetsSignal+0x8d0>)
 8006170:	2202      	movs	r2, #2
 8006172:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8006174:	4b2c      	ldr	r3, [pc, #176]	@ (8006228 <SystemGetsSignal+0x8d8>)
 8006176:	2205      	movs	r2, #5
 8006178:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 800617a:	2304      	movs	r3, #4
 800617c:	9301      	str	r3, [sp, #4]
 800617e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	f04f 0300 	mov.w	r3, #0
 8006188:	4a29      	ldr	r2, [pc, #164]	@ (8006230 <SystemGetsSignal+0x8e0>)
 800618a:	492a      	ldr	r1, [pc, #168]	@ (8006234 <SystemGetsSignal+0x8e4>)
 800618c:	482a      	ldr	r0, [pc, #168]	@ (8006238 <SystemGetsSignal+0x8e8>)
 800618e:	f002 f8ad 	bl	80082ec <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Here is 2048!") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8006192:	2318      	movs	r3, #24
 8006194:	9301      	str	r3, [sp, #4]
 8006196:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80061a0:	4a32      	ldr	r2, [pc, #200]	@ (800626c <SystemGetsSignal+0x91c>)
 80061a2:	4926      	ldr	r1, [pc, #152]	@ (800623c <SystemGetsSignal+0x8ec>)
 80061a4:	4826      	ldr	r0, [pc, #152]	@ (8006240 <SystemGetsSignal+0x8f0>)
 80061a6:	f002 f8a1 	bl	80082ec <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("2048") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 80061aa:	2315      	movs	r3, #21
 80061ac:	9301      	str	r3, [sp, #4]
 80061ae:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	4b2e      	ldr	r3, [pc, #184]	@ (8006270 <SystemGetsSignal+0x920>)
 80061b6:	4a2f      	ldr	r2, [pc, #188]	@ (8006274 <SystemGetsSignal+0x924>)
 80061b8:	4922      	ldr	r1, [pc, #136]	@ (8006244 <SystemGetsSignal+0x8f4>)
 80061ba:	4821      	ldr	r0, [pc, #132]	@ (8006240 <SystemGetsSignal+0x8f0>)
 80061bc:	f002 f896 	bl	80082ec <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80061c0:	2318      	movs	r3, #24
 80061c2:	9301      	str	r3, [sp, #4]
 80061c4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	4b1f      	ldr	r3, [pc, #124]	@ (8006248 <SystemGetsSignal+0x8f8>)
 80061cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80061d0:	491f      	ldr	r1, [pc, #124]	@ (8006250 <SystemGetsSignal+0x900>)
 80061d2:	4820      	ldr	r0, [pc, #128]	@ (8006254 <SystemGetsSignal+0x904>)
 80061d4:	f002 f88a 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 80061d8:	2064      	movs	r0, #100	@ 0x64
 80061da:	f003 f8c7 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80061de:	2318      	movs	r3, #24
 80061e0:	9301      	str	r3, [sp, #4]
 80061e2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80061ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80061f0:	4919      	ldr	r1, [pc, #100]	@ (8006258 <SystemGetsSignal+0x908>)
 80061f2:	4818      	ldr	r0, [pc, #96]	@ (8006254 <SystemGetsSignal+0x904>)
 80061f4:	f002 f87a 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 80061f8:	2064      	movs	r0, #100	@ 0x64
 80061fa:	f003 f8b7 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80061fe:	2318      	movs	r3, #24
 8006200:	9301      	str	r3, [sp, #4]
 8006202:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	4b14      	ldr	r3, [pc, #80]	@ (800625c <SystemGetsSignal+0x90c>)
 800620a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800620e:	4914      	ldr	r1, [pc, #80]	@ (8006260 <SystemGetsSignal+0x910>)
 8006210:	480b      	ldr	r0, [pc, #44]	@ (8006240 <SystemGetsSignal+0x8f0>)
 8006212:	f002 f86b 	bl	80082ec <OLED_DoTweenObject>
                cancelSelection = false;
 8006216:	4b13      	ldr	r3, [pc, #76]	@ (8006264 <SystemGetsSignal+0x914>)
 8006218:	2200      	movs	r2, #0
 800621a:	701a      	strb	r2, [r3, #0]
 800621c:	f000 bf18 	b.w	8007050 <SystemGetsSignal+0x1700>
 8006220:	2000043c 	.word	0x2000043c
 8006224:	2000043d 	.word	0x2000043d
 8006228:	20001034 	.word	0x20001034
 800622c:	c1200000 	.word	0xc1200000
 8006230:	42480000 	.word	0x42480000
 8006234:	0800e5a0 	.word	0x0800e5a0
 8006238:	20003804 	.word	0x20003804
 800623c:	0800e6b4 	.word	0x0800e6b4
 8006240:	20003df8 	.word	0x20003df8
 8006244:	0800e6cc 	.word	0x0800e6cc
 8006248:	40400000 	.word	0x40400000
 800624c:	c2b40000 	.word	0xc2b40000
 8006250:	0800e5f8 	.word	0x0800e5f8
 8006254:	20001a40 	.word	0x20001a40
 8006258:	0800e600 	.word	0x0800e600
 800625c:	41e80000 	.word	0x41e80000
 8006260:	0800e608 	.word	0x0800e608
 8006264:	20001036 	.word	0x20001036
 8006268:	2000069c 	.word	0x2000069c
 800626c:	42a20000 	.word	0x42a20000
 8006270:	41200000 	.word	0x41200000
 8006274:	41d80000 	.word	0x41d80000
            }
// #pragma endregion 游戏部分
// #pragma region 关于部分
            else if (menuRank == 1 && menuSelection == 5)
 8006278:	4bba      	ldr	r3, [pc, #744]	@ (8006564 <SystemGetsSignal+0xc14>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b01      	cmp	r3, #1
 800627e:	f040 8094 	bne.w	80063aa <SystemGetsSignal+0xa5a>
 8006282:	4bb9      	ldr	r3, [pc, #740]	@ (8006568 <SystemGetsSignal+0xc18>)
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	2b05      	cmp	r3, #5
 8006288:	f040 808f 	bne.w	80063aa <SystemGetsSignal+0xa5a>
            {
                menuRank = 2;
 800628c:	4bb5      	ldr	r3, [pc, #724]	@ (8006564 <SystemGetsSignal+0xc14>)
 800628e:	2202      	movs	r2, #2
 8006290:	701a      	strb	r2, [r3, #0]
                menuSelection = 1;
 8006292:	4bb5      	ldr	r3, [pc, #724]	@ (8006568 <SystemGetsSignal+0xc18>)
 8006294:	2201      	movs	r2, #1
 8006296:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_ABOUT;
 8006298:	4bb4      	ldr	r3, [pc, #720]	@ (800656c <SystemGetsSignal+0xc1c>)
 800629a:	2203      	movs	r2, #3
 800629c:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -3, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 800629e:	2301      	movs	r3, #1
 80062a0:	9301      	str	r3, [sp, #4]
 80062a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	4bb1      	ldr	r3, [pc, #708]	@ (8006570 <SystemGetsSignal+0xc20>)
 80062aa:	4ab2      	ldr	r2, [pc, #712]	@ (8006574 <SystemGetsSignal+0xc24>)
 80062ac:	49b2      	ldr	r1, [pc, #712]	@ (8006578 <SystemGetsSignal+0xc28>)
 80062ae:	48b3      	ldr	r0, [pc, #716]	@ (800657c <SystemGetsSignal+0xc2c>)
 80062b0:	f002 f81c 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 80062b4:	2064      	movs	r0, #100	@ 0x64
 80062b6:	f003 f859 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -2, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 80062ba:	2301      	movs	r3, #1
 80062bc:	9301      	str	r3, [sp, #4]
 80062be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	4bae      	ldr	r3, [pc, #696]	@ (8006580 <SystemGetsSignal+0xc30>)
 80062c6:	4aab      	ldr	r2, [pc, #684]	@ (8006574 <SystemGetsSignal+0xc24>)
 80062c8:	49ae      	ldr	r1, [pc, #696]	@ (8006584 <SystemGetsSignal+0xc34>)
 80062ca:	48ac      	ldr	r0, [pc, #688]	@ (800657c <SystemGetsSignal+0xc2c>)
 80062cc:	f002 f80e 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 80062d0:	2064      	movs	r0, #100	@ 0x64
 80062d2:	f003 f84b 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 80062d6:	2301      	movs	r3, #1
 80062d8:	9301      	str	r3, [sp, #4]
 80062da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	4ba9      	ldr	r3, [pc, #676]	@ (8006588 <SystemGetsSignal+0xc38>)
 80062e2:	4aa4      	ldr	r2, [pc, #656]	@ (8006574 <SystemGetsSignal+0xc24>)
 80062e4:	49a9      	ldr	r1, [pc, #676]	@ (800658c <SystemGetsSignal+0xc3c>)
 80062e6:	48a5      	ldr	r0, [pc, #660]	@ (800657c <SystemGetsSignal+0xc2c>)
 80062e8:	f002 f800 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 80062ec:	2064      	movs	r0, #100	@ 0x64
 80062ee:	f003 f83d 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 80062f2:	2301      	movs	r3, #1
 80062f4:	9301      	str	r3, [sp, #4]
 80062f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	4ba4      	ldr	r3, [pc, #656]	@ (8006590 <SystemGetsSignal+0xc40>)
 80062fe:	4a9d      	ldr	r2, [pc, #628]	@ (8006574 <SystemGetsSignal+0xc24>)
 8006300:	49a4      	ldr	r1, [pc, #656]	@ (8006594 <SystemGetsSignal+0xc44>)
 8006302:	489e      	ldr	r0, [pc, #632]	@ (800657c <SystemGetsSignal+0xc2c>)
 8006304:	f001 fff2 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006308:	2064      	movs	r0, #100	@ 0x64
 800630a:	f003 f82f 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 800630e:	2301      	movs	r3, #1
 8006310:	9301      	str	r3, [sp, #4]
 8006312:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800631c:	4a95      	ldr	r2, [pc, #596]	@ (8006574 <SystemGetsSignal+0xc24>)
 800631e:	499e      	ldr	r1, [pc, #632]	@ (8006598 <SystemGetsSignal+0xc48>)
 8006320:	4896      	ldr	r0, [pc, #600]	@ (800657c <SystemGetsSignal+0xc2c>)
 8006322:	f001 ffe3 	bl	80082ec <OLED_DoTweenObject>

                OLED_DoTweenObject(&About_AnimationManager, "Developer", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8006326:	2318      	movs	r3, #24
 8006328:	9301      	str	r3, [sp, #4]
 800632a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8006334:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006338:	4998      	ldr	r1, [pc, #608]	@ (800659c <SystemGetsSignal+0xc4c>)
 800633a:	4899      	ldr	r0, [pc, #612]	@ (80065a0 <SystemGetsSignal+0xc50>)
 800633c:	f001 ffd6 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006340:	2064      	movs	r0, #100	@ 0x64
 8006342:	f003 f813 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&About_AnimationManager, "Github", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8006346:	2318      	movs	r3, #24
 8006348:	9301      	str	r3, [sp, #4]
 800634a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	4b94      	ldr	r3, [pc, #592]	@ (80065a4 <SystemGetsSignal+0xc54>)
 8006352:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006356:	4994      	ldr	r1, [pc, #592]	@ (80065a8 <SystemGetsSignal+0xc58>)
 8006358:	4891      	ldr	r0, [pc, #580]	@ (80065a0 <SystemGetsSignal+0xc50>)
 800635a:	f001 ffc7 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 800635e:	2064      	movs	r0, #100	@ 0x64
 8006360:	f003 f804 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&About_AnimationManager, "Donate", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8006364:	2318      	movs	r3, #24
 8006366:	9301      	str	r3, [sp, #4]
 8006368:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	4b8f      	ldr	r3, [pc, #572]	@ (80065ac <SystemGetsSignal+0xc5c>)
 8006370:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006374:	498e      	ldr	r1, [pc, #568]	@ (80065b0 <SystemGetsSignal+0xc60>)
 8006376:	488a      	ldr	r0, [pc, #552]	@ (80065a0 <SystemGetsSignal+0xc50>)
 8006378:	f001 ffb8 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 800637c:	2064      	movs	r0, #100	@ 0x64
 800637e:	f002 fff5 	bl	800936c <HAL_Delay>
                OLED_DoTweenObjectY(&g_AnimationManager, "BackButton", OLED_UI_START_Y + OLED_UI_GAP_Y * 4, 1, BASIC_TWEEN_IN_STYLE);
 8006382:	2318      	movs	r3, #24
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	2301      	movs	r3, #1
 8006388:	4a8a      	ldr	r2, [pc, #552]	@ (80065b4 <SystemGetsSignal+0xc64>)
 800638a:	498b      	ldr	r1, [pc, #556]	@ (80065b8 <SystemGetsSignal+0xc68>)
 800638c:	488b      	ldr	r0, [pc, #556]	@ (80065bc <SystemGetsSignal+0xc6c>)
 800638e:	f002 f880 	bl	8008492 <OLED_DoTweenObjectY>
                OLED_DoTweenObjectX(&g_AnimationManager, "BackButton", OLED_UI_END_X, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8006392:	2318      	movs	r3, #24
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800639a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800639e:	4986      	ldr	r1, [pc, #536]	@ (80065b8 <SystemGetsSignal+0xc68>)
 80063a0:	4886      	ldr	r0, [pc, #536]	@ (80065bc <SystemGetsSignal+0xc6c>)
 80063a2:	f002 f841 	bl	8008428 <OLED_DoTweenObjectX>
 80063a6:	f000 be53 	b.w	8007050 <SystemGetsSignal+0x1700>
            }
            else if (menuRank == 2 && menuSelection == 4 && currentPage == UI_PAGE_ABOUT)
 80063aa:	4b6e      	ldr	r3, [pc, #440]	@ (8006564 <SystemGetsSignal+0xc14>)
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	f040 8108 	bne.w	80065c4 <SystemGetsSignal+0xc74>
 80063b4:	4b6c      	ldr	r3, [pc, #432]	@ (8006568 <SystemGetsSignal+0xc18>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b04      	cmp	r3, #4
 80063ba:	f040 8103 	bne.w	80065c4 <SystemGetsSignal+0xc74>
 80063be:	4b6b      	ldr	r3, [pc, #428]	@ (800656c <SystemGetsSignal+0xc1c>)
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	f040 80fe 	bne.w	80065c4 <SystemGetsSignal+0xc74>
            {
                menuRank = 1;
 80063c8:	4b66      	ldr	r3, [pc, #408]	@ (8006564 <SystemGetsSignal+0xc14>)
 80063ca:	2201      	movs	r2, #1
 80063cc:	701a      	strb	r2, [r3, #0]
                menuSelection = 5;
 80063ce:	4b66      	ldr	r3, [pc, #408]	@ (8006568 <SystemGetsSignal+0xc18>)
 80063d0:	2205      	movs	r2, #5
 80063d2:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_MENU;
 80063d4:	4b65      	ldr	r3, [pc, #404]	@ (800656c <SystemGetsSignal+0xc1c>)
 80063d6:	2200      	movs	r2, #0
 80063d8:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&About_AnimationManager, "Developer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -2, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 80063da:	2301      	movs	r3, #1
 80063dc:	9301      	str	r3, [sp, #4]
 80063de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	4b66      	ldr	r3, [pc, #408]	@ (8006580 <SystemGetsSignal+0xc30>)
 80063e6:	4a63      	ldr	r2, [pc, #396]	@ (8006574 <SystemGetsSignal+0xc24>)
 80063e8:	496c      	ldr	r1, [pc, #432]	@ (800659c <SystemGetsSignal+0xc4c>)
 80063ea:	486d      	ldr	r0, [pc, #436]	@ (80065a0 <SystemGetsSignal+0xc50>)
 80063ec:	f001 ff7e 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 80063f0:	2064      	movs	r0, #100	@ 0x64
 80063f2:	f002 ffbb 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&About_AnimationManager, "Github", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 80063f6:	2301      	movs	r3, #1
 80063f8:	9301      	str	r3, [sp, #4]
 80063fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	4b61      	ldr	r3, [pc, #388]	@ (8006588 <SystemGetsSignal+0xc38>)
 8006402:	4a5c      	ldr	r2, [pc, #368]	@ (8006574 <SystemGetsSignal+0xc24>)
 8006404:	4968      	ldr	r1, [pc, #416]	@ (80065a8 <SystemGetsSignal+0xc58>)
 8006406:	4866      	ldr	r0, [pc, #408]	@ (80065a0 <SystemGetsSignal+0xc50>)
 8006408:	f001 ff70 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 800640c:	2064      	movs	r0, #100	@ 0x64
 800640e:	f002 ffad 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&About_AnimationManager, "Donate", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006412:	2301      	movs	r3, #1
 8006414:	9301      	str	r3, [sp, #4]
 8006416:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	4b5c      	ldr	r3, [pc, #368]	@ (8006590 <SystemGetsSignal+0xc40>)
 800641e:	4a55      	ldr	r2, [pc, #340]	@ (8006574 <SystemGetsSignal+0xc24>)
 8006420:	4963      	ldr	r1, [pc, #396]	@ (80065b0 <SystemGetsSignal+0xc60>)
 8006422:	485f      	ldr	r0, [pc, #380]	@ (80065a0 <SystemGetsSignal+0xc50>)
 8006424:	f001 ff62 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006428:	2064      	movs	r0, #100	@ 0x64
 800642a:	f002 ff9f 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 800642e:	2301      	movs	r3, #1
 8006430:	9301      	str	r3, [sp, #4]
 8006432:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800643c:	4a4d      	ldr	r2, [pc, #308]	@ (8006574 <SystemGetsSignal+0xc24>)
 800643e:	495e      	ldr	r1, [pc, #376]	@ (80065b8 <SystemGetsSignal+0xc68>)
 8006440:	485e      	ldr	r0, [pc, #376]	@ (80065bc <SystemGetsSignal+0xc6c>)
 8006442:	f001 ff53 	bl	80082ec <OLED_DoTweenObject>

                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8006446:	4b48      	ldr	r3, [pc, #288]	@ (8006568 <SystemGetsSignal+0xc18>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	f1c3 0202 	rsb	r2, r3, #2
 800644e:	4613      	mov	r3, r2
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	4413      	add	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	3303      	adds	r3, #3
 800645a:	4618      	mov	r0, r3
 800645c:	f7f9 ff42 	bl	80002e4 <__aeabi_i2f>
 8006460:	4603      	mov	r3, r0
 8006462:	2218      	movs	r2, #24
 8006464:	9201      	str	r2, [sp, #4]
 8006466:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800646a:	9200      	str	r2, [sp, #0]
 800646c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006470:	4941      	ldr	r1, [pc, #260]	@ (8006578 <SystemGetsSignal+0xc28>)
 8006472:	4842      	ldr	r0, [pc, #264]	@ (800657c <SystemGetsSignal+0xc2c>)
 8006474:	f001 ff3a 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006478:	2064      	movs	r0, #100	@ 0x64
 800647a:	f002 ff77 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 800647e:	4b3a      	ldr	r3, [pc, #232]	@ (8006568 <SystemGetsSignal+0xc18>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	f1c3 0203 	rsb	r2, r3, #3
 8006486:	4613      	mov	r3, r2
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	4413      	add	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	3303      	adds	r3, #3
 8006492:	4618      	mov	r0, r3
 8006494:	f7f9 ff26 	bl	80002e4 <__aeabi_i2f>
 8006498:	4603      	mov	r3, r0
 800649a:	2218      	movs	r2, #24
 800649c:	9201      	str	r2, [sp, #4]
 800649e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80064a2:	9200      	str	r2, [sp, #0]
 80064a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80064a8:	4936      	ldr	r1, [pc, #216]	@ (8006584 <SystemGetsSignal+0xc34>)
 80064aa:	4834      	ldr	r0, [pc, #208]	@ (800657c <SystemGetsSignal+0xc2c>)
 80064ac:	f001 ff1e 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 80064b0:	2064      	movs	r0, #100	@ 0x64
 80064b2:	f002 ff5b 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80064b6:	4b2c      	ldr	r3, [pc, #176]	@ (8006568 <SystemGetsSignal+0xc18>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	f1c3 0204 	rsb	r2, r3, #4
 80064be:	4613      	mov	r3, r2
 80064c0:	005b      	lsls	r3, r3, #1
 80064c2:	4413      	add	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	3303      	adds	r3, #3
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7f9 ff0a 	bl	80002e4 <__aeabi_i2f>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2218      	movs	r2, #24
 80064d4:	9201      	str	r2, [sp, #4]
 80064d6:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80064da:	9200      	str	r2, [sp, #0]
 80064dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80064e0:	492a      	ldr	r1, [pc, #168]	@ (800658c <SystemGetsSignal+0xc3c>)
 80064e2:	4826      	ldr	r0, [pc, #152]	@ (800657c <SystemGetsSignal+0xc2c>)
 80064e4:	f001 ff02 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 80064e8:	2064      	movs	r0, #100	@ 0x64
 80064ea:	f002 ff3f 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80064ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006568 <SystemGetsSignal+0xc18>)
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	f1c3 0205 	rsb	r2, r3, #5
 80064f6:	4613      	mov	r3, r2
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	4413      	add	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	3303      	adds	r3, #3
 8006502:	4618      	mov	r0, r3
 8006504:	f7f9 feee 	bl	80002e4 <__aeabi_i2f>
 8006508:	4603      	mov	r3, r0
 800650a:	2218      	movs	r2, #24
 800650c:	9201      	str	r2, [sp, #4]
 800650e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8006512:	9200      	str	r2, [sp, #0]
 8006514:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006518:	491e      	ldr	r1, [pc, #120]	@ (8006594 <SystemGetsSignal+0xc44>)
 800651a:	4818      	ldr	r0, [pc, #96]	@ (800657c <SystemGetsSignal+0xc2c>)
 800651c:	f001 fee6 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006520:	2064      	movs	r0, #100	@ 0x64
 8006522:	f002 ff23 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8006526:	4b10      	ldr	r3, [pc, #64]	@ (8006568 <SystemGetsSignal+0xc18>)
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	f1c3 0206 	rsb	r2, r3, #6
 800652e:	4613      	mov	r3, r2
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	4413      	add	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	3303      	adds	r3, #3
 800653a:	4618      	mov	r0, r3
 800653c:	f7f9 fed2 	bl	80002e4 <__aeabi_i2f>
 8006540:	4603      	mov	r3, r0
 8006542:	2218      	movs	r2, #24
 8006544:	9201      	str	r2, [sp, #4]
 8006546:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800654a:	9200      	str	r2, [sp, #0]
 800654c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006550:	4911      	ldr	r1, [pc, #68]	@ (8006598 <SystemGetsSignal+0xc48>)
 8006552:	480a      	ldr	r0, [pc, #40]	@ (800657c <SystemGetsSignal+0xc2c>)
 8006554:	f001 feca 	bl	80082ec <OLED_DoTweenObject>
                resetAnimation = true;
 8006558:	4b19      	ldr	r3, [pc, #100]	@ (80065c0 <SystemGetsSignal+0xc70>)
 800655a:	2201      	movs	r2, #1
 800655c:	701a      	strb	r2, [r3, #0]
 800655e:	f000 bd77 	b.w	8007050 <SystemGetsSignal+0x1700>
 8006562:	bf00      	nop
 8006564:	2000043c 	.word	0x2000043c
 8006568:	2000043d 	.word	0x2000043d
 800656c:	20001034 	.word	0x20001034
 8006570:	c2100000 	.word	0xc2100000
 8006574:	c2b40000 	.word	0xc2b40000
 8006578:	0800e6d8 	.word	0x0800e6d8
 800657c:	2000144c 	.word	0x2000144c
 8006580:	c1b80000 	.word	0xc1b80000
 8006584:	0800e6e4 	.word	0x0800e6e4
 8006588:	c1200000 	.word	0xc1200000
 800658c:	0800e6f0 	.word	0x0800e6f0
 8006590:	40400000 	.word	0x40400000
 8006594:	0800e700 	.word	0x0800e700
 8006598:	0800e710 	.word	0x0800e710
 800659c:	0800e654 	.word	0x0800e654
 80065a0:	20002c1c 	.word	0x20002c1c
 80065a4:	41e80000 	.word	0x41e80000
 80065a8:	0800e660 	.word	0x0800e660
 80065ac:	42280000 	.word	0x42280000
 80065b0:	0800e668 	.word	0x0800e668
 80065b4:	425c0000 	.word	0x425c0000
 80065b8:	0800e608 	.word	0x0800e608
 80065bc:	20003df8 	.word	0x20003df8
 80065c0:	20001037 	.word	0x20001037
            }
// #pragma endregion 关于部分
// #pragma region 工具部分
            else if (menuRank == 1 && menuSelection == 2)
 80065c4:	4b99      	ldr	r3, [pc, #612]	@ (800682c <SystemGetsSignal+0xedc>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d174      	bne.n	80066b6 <SystemGetsSignal+0xd66>
 80065cc:	4b98      	ldr	r3, [pc, #608]	@ (8006830 <SystemGetsSignal+0xee0>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d170      	bne.n	80066b6 <SystemGetsSignal+0xd66>
            {
                menuRank = 2;
 80065d4:	4b95      	ldr	r3, [pc, #596]	@ (800682c <SystemGetsSignal+0xedc>)
 80065d6:	2202      	movs	r2, #2
 80065d8:	701a      	strb	r2, [r3, #0]
                menuSelection = 1;
 80065da:	4b95      	ldr	r3, [pc, #596]	@ (8006830 <SystemGetsSignal+0xee0>)
 80065dc:	2201      	movs	r2, #1
 80065de:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_TOOLS;
 80065e0:	4b94      	ldr	r3, [pc, #592]	@ (8006834 <SystemGetsSignal+0xee4>)
 80065e2:	2204      	movs	r2, #4
 80065e4:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 80065e6:	2301      	movs	r3, #1
 80065e8:	9301      	str	r3, [sp, #4]
 80065ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	4b91      	ldr	r3, [pc, #580]	@ (8006838 <SystemGetsSignal+0xee8>)
 80065f2:	4a92      	ldr	r2, [pc, #584]	@ (800683c <SystemGetsSignal+0xeec>)
 80065f4:	4992      	ldr	r1, [pc, #584]	@ (8006840 <SystemGetsSignal+0xef0>)
 80065f6:	4893      	ldr	r0, [pc, #588]	@ (8006844 <SystemGetsSignal+0xef4>)
 80065f8:	f001 fe78 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 80065fc:	2064      	movs	r0, #100	@ 0x64
 80065fe:	f002 feb5 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006602:	2301      	movs	r3, #1
 8006604:	9301      	str	r3, [sp, #4]
 8006606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8006610:	4a8a      	ldr	r2, [pc, #552]	@ (800683c <SystemGetsSignal+0xeec>)
 8006612:	498d      	ldr	r1, [pc, #564]	@ (8006848 <SystemGetsSignal+0xef8>)
 8006614:	488b      	ldr	r0, [pc, #556]	@ (8006844 <SystemGetsSignal+0xef4>)
 8006616:	f001 fe69 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 800661a:	2064      	movs	r0, #100	@ 0x64
 800661c:	f002 fea6 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006620:	2301      	movs	r3, #1
 8006622:	9301      	str	r3, [sp, #4]
 8006624:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	4b88      	ldr	r3, [pc, #544]	@ (800684c <SystemGetsSignal+0xefc>)
 800662c:	4a83      	ldr	r2, [pc, #524]	@ (800683c <SystemGetsSignal+0xeec>)
 800662e:	4988      	ldr	r1, [pc, #544]	@ (8006850 <SystemGetsSignal+0xf00>)
 8006630:	4884      	ldr	r0, [pc, #528]	@ (8006844 <SystemGetsSignal+0xef4>)
 8006632:	f001 fe5b 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006636:	2064      	movs	r0, #100	@ 0x64
 8006638:	f002 fe98 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 800663c:	2301      	movs	r3, #1
 800663e:	9301      	str	r3, [sp, #4]
 8006640:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	4b83      	ldr	r3, [pc, #524]	@ (8006854 <SystemGetsSignal+0xf04>)
 8006648:	4a7c      	ldr	r2, [pc, #496]	@ (800683c <SystemGetsSignal+0xeec>)
 800664a:	4983      	ldr	r1, [pc, #524]	@ (8006858 <SystemGetsSignal+0xf08>)
 800664c:	487d      	ldr	r0, [pc, #500]	@ (8006844 <SystemGetsSignal+0xef4>)
 800664e:	f001 fe4d 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006652:	2064      	movs	r0, #100	@ 0x64
 8006654:	f002 fe8a 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006658:	2301      	movs	r3, #1
 800665a:	9301      	str	r3, [sp, #4]
 800665c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	4b7e      	ldr	r3, [pc, #504]	@ (800685c <SystemGetsSignal+0xf0c>)
 8006664:	4a75      	ldr	r2, [pc, #468]	@ (800683c <SystemGetsSignal+0xeec>)
 8006666:	497e      	ldr	r1, [pc, #504]	@ (8006860 <SystemGetsSignal+0xf10>)
 8006668:	4876      	ldr	r0, [pc, #472]	@ (8006844 <SystemGetsSignal+0xef4>)
 800666a:	f001 fe3f 	bl	80082ec <OLED_DoTweenObject>

                OLED_DoTweenObject(&Tools_AnimationManager, "VideoPlayer", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 800666e:	2318      	movs	r3, #24
 8006670:	9301      	str	r3, [sp, #4]
 8006672:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800667c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006680:	4978      	ldr	r1, [pc, #480]	@ (8006864 <SystemGetsSignal+0xf14>)
 8006682:	4879      	ldr	r0, [pc, #484]	@ (8006868 <SystemGetsSignal+0xf18>)
 8006684:	f001 fe32 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006688:	2064      	movs	r0, #100	@ 0x64
 800668a:	f002 fe6f 	bl	800936c <HAL_Delay>
                OLED_DoTweenObjectY(&g_AnimationManager, "BackButton", OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, BASIC_TWEEN_IN_STYLE);
 800668e:	2318      	movs	r3, #24
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	2301      	movs	r3, #1
 8006694:	4a6d      	ldr	r2, [pc, #436]	@ (800684c <SystemGetsSignal+0xefc>)
 8006696:	4975      	ldr	r1, [pc, #468]	@ (800686c <SystemGetsSignal+0xf1c>)
 8006698:	4875      	ldr	r0, [pc, #468]	@ (8006870 <SystemGetsSignal+0xf20>)
 800669a:	f001 fefa 	bl	8008492 <OLED_DoTweenObjectY>
                OLED_DoTweenObjectX(&g_AnimationManager, "BackButton", OLED_UI_END_X, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 800669e:	2318      	movs	r3, #24
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80066a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80066aa:	4970      	ldr	r1, [pc, #448]	@ (800686c <SystemGetsSignal+0xf1c>)
 80066ac:	4870      	ldr	r0, [pc, #448]	@ (8006870 <SystemGetsSignal+0xf20>)
 80066ae:	f001 febb 	bl	8008428 <OLED_DoTweenObjectX>
 80066b2:	f000 bccd 	b.w	8007050 <SystemGetsSignal+0x1700>
            }
            else if (menuRank == 2 && menuSelection == 1 && currentPage == UI_PAGE_TOOLS)
 80066b6:	4b5d      	ldr	r3, [pc, #372]	@ (800682c <SystemGetsSignal+0xedc>)
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d152      	bne.n	8006764 <SystemGetsSignal+0xe14>
 80066be:	4b5c      	ldr	r3, [pc, #368]	@ (8006830 <SystemGetsSignal+0xee0>)
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d14e      	bne.n	8006764 <SystemGetsSignal+0xe14>
 80066c6:	4b5b      	ldr	r3, [pc, #364]	@ (8006834 <SystemGetsSignal+0xee4>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	d14a      	bne.n	8006764 <SystemGetsSignal+0xe14>
            {
                menuRank = 3;
 80066ce:	4b57      	ldr	r3, [pc, #348]	@ (800682c <SystemGetsSignal+0xedc>)
 80066d0:	2203      	movs	r2, #3
 80066d2:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_TOOLS;
 80066d4:	4b57      	ldr	r3, [pc, #348]	@ (8006834 <SystemGetsSignal+0xee4>)
 80066d6:	2204      	movs	r2, #4
 80066d8:	701a      	strb	r2, [r3, #0]
                video_first_play = true;
 80066da:	4b66      	ldr	r3, [pc, #408]	@ (8006874 <SystemGetsSignal+0xf24>)
 80066dc:	2201      	movs	r2, #1
 80066de:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&g_Title_AnimationManager, "BAD APPLE!", (OLED_WIDTH - strlen("BAD APPLE!") * 6), OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 80066e0:	2300      	movs	r3, #0
 80066e2:	9301      	str	r3, [sp, #4]
 80066e4:	2301      	movs	r3, #1
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	4b63      	ldr	r3, [pc, #396]	@ (8006878 <SystemGetsSignal+0xf28>)
 80066ea:	4a64      	ldr	r2, [pc, #400]	@ (800687c <SystemGetsSignal+0xf2c>)
 80066ec:	4964      	ldr	r1, [pc, #400]	@ (8006880 <SystemGetsSignal+0xf30>)
 80066ee:	4865      	ldr	r0, [pc, #404]	@ (8006884 <SystemGetsSignal+0xf34>)
 80066f0:	f001 fdfc 	bl	80082ec <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, 1, TITLE_BG_TWEEN_STYLE);
 80066f4:	2318      	movs	r3, #24
 80066f6:	9301      	str	r3, [sp, #4]
 80066f8:	2301      	movs	r3, #1
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	4960      	ldr	r1, [pc, #384]	@ (8006888 <SystemGetsSignal+0xf38>)
 8006706:	485a      	ldr	r0, [pc, #360]	@ (8006870 <SystemGetsSignal+0xf20>)
 8006708:	f001 fdf0 	bl	80082ec <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", 0, 8, 1, CURSORBG_TWEEN_STYLE);
 800670c:	2315      	movs	r3, #21
 800670e:	9301      	str	r3, [sp, #4]
 8006710:	2301      	movs	r3, #1
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8006718:	f04f 0200 	mov.w	r2, #0
 800671c:	495b      	ldr	r1, [pc, #364]	@ (800688c <SystemGetsSignal+0xf3c>)
 800671e:	4854      	ldr	r0, [pc, #336]	@ (8006870 <SystemGetsSignal+0xf20>)
 8006720:	f001 fde4 	bl	80082ec <OLED_DoTweenObject>
                OLED_DoTweenObject(&Tools_AnimationManager, "VideoPlayer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, BASIC_TWEEN_OUT_STYLE);
 8006724:	2301      	movs	r3, #1
 8006726:	9301      	str	r3, [sp, #4]
 8006728:	2301      	movs	r3, #1
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8006730:	4a42      	ldr	r2, [pc, #264]	@ (800683c <SystemGetsSignal+0xeec>)
 8006732:	494c      	ldr	r1, [pc, #304]	@ (8006864 <SystemGetsSignal+0xf14>)
 8006734:	484c      	ldr	r0, [pc, #304]	@ (8006868 <SystemGetsSignal+0xf18>)
 8006736:	f001 fdd9 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 800673a:	2064      	movs	r0, #100	@ 0x64
 800673c:	f002 fe16 	bl	800936c <HAL_Delay>
                OLED_DoTweenObjectY(&g_AnimationManager, "BackButton", OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, BASIC_TWEEN_OUT_STYLE);
 8006740:	2301      	movs	r3, #1
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	2301      	movs	r3, #1
 8006746:	4a41      	ldr	r2, [pc, #260]	@ (800684c <SystemGetsSignal+0xefc>)
 8006748:	4948      	ldr	r1, [pc, #288]	@ (800686c <SystemGetsSignal+0xf1c>)
 800674a:	4849      	ldr	r0, [pc, #292]	@ (8006870 <SystemGetsSignal+0xf20>)
 800674c:	f001 fea1 	bl	8008492 <OLED_DoTweenObjectY>
                OLED_DoTweenObjectX(&g_AnimationManager, "BackButton", OLED_UI_START_X, 1, BASIC_TWEEN_OUT_STYLE);
 8006750:	2301      	movs	r3, #1
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	2301      	movs	r3, #1
 8006756:	4a39      	ldr	r2, [pc, #228]	@ (800683c <SystemGetsSignal+0xeec>)
 8006758:	4944      	ldr	r1, [pc, #272]	@ (800686c <SystemGetsSignal+0xf1c>)
 800675a:	4845      	ldr	r0, [pc, #276]	@ (8006870 <SystemGetsSignal+0xf20>)
 800675c:	f001 fe64 	bl	8008428 <OLED_DoTweenObjectX>
 8006760:	f000 bc76 	b.w	8007050 <SystemGetsSignal+0x1700>
            }
            else if (menuRank == 3 && menuSelection == 1 && cancelSelection && currentPage == UI_PAGE_TOOLS)
 8006764:	4b31      	ldr	r3, [pc, #196]	@ (800682c <SystemGetsSignal+0xedc>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	2b03      	cmp	r3, #3
 800676a:	f040 8099 	bne.w	80068a0 <SystemGetsSignal+0xf50>
 800676e:	4b30      	ldr	r3, [pc, #192]	@ (8006830 <SystemGetsSignal+0xee0>)
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b01      	cmp	r3, #1
 8006774:	f040 8094 	bne.w	80068a0 <SystemGetsSignal+0xf50>
 8006778:	4b45      	ldr	r3, [pc, #276]	@ (8006890 <SystemGetsSignal+0xf40>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 808f 	beq.w	80068a0 <SystemGetsSignal+0xf50>
 8006782:	4b2c      	ldr	r3, [pc, #176]	@ (8006834 <SystemGetsSignal+0xee4>)
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	2b04      	cmp	r3, #4
 8006788:	f040 808a 	bne.w	80068a0 <SystemGetsSignal+0xf50>
            {
                menuRank = 2;
 800678c:	4b27      	ldr	r3, [pc, #156]	@ (800682c <SystemGetsSignal+0xedc>)
 800678e:	2202      	movs	r2, #2
 8006790:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_TOOLS;
 8006792:	4b28      	ldr	r3, [pc, #160]	@ (8006834 <SystemGetsSignal+0xee4>)
 8006794:	2204      	movs	r2, #4
 8006796:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&g_Title_AnimationManager, "BAD APPLE!", (OLED_WIDTH - strlen("BAD APPLE!") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8006798:	2304      	movs	r3, #4
 800679a:	9301      	str	r3, [sp, #4]
 800679c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	f04f 0300 	mov.w	r3, #0
 80067a6:	4a35      	ldr	r2, [pc, #212]	@ (800687c <SystemGetsSignal+0xf2c>)
 80067a8:	4935      	ldr	r1, [pc, #212]	@ (8006880 <SystemGetsSignal+0xf30>)
 80067aa:	4836      	ldr	r0, [pc, #216]	@ (8006884 <SystemGetsSignal+0xf34>)
 80067ac:	f001 fd9e 	bl	80082ec <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("BAD APPLE!") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 80067b0:	2318      	movs	r3, #24
 80067b2:	9301      	str	r3, [sp, #4]
 80067b4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80067be:	4a35      	ldr	r2, [pc, #212]	@ (8006894 <SystemGetsSignal+0xf44>)
 80067c0:	4931      	ldr	r1, [pc, #196]	@ (8006888 <SystemGetsSignal+0xf38>)
 80067c2:	482b      	ldr	r0, [pc, #172]	@ (8006870 <SystemGetsSignal+0xf20>)
 80067c4:	f001 fd92 	bl	80082ec <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Video") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 80067c8:	2315      	movs	r3, #21
 80067ca:	9301      	str	r3, [sp, #4]
 80067cc:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	4b31      	ldr	r3, [pc, #196]	@ (8006898 <SystemGetsSignal+0xf48>)
 80067d4:	4a31      	ldr	r2, [pc, #196]	@ (800689c <SystemGetsSignal+0xf4c>)
 80067d6:	492d      	ldr	r1, [pc, #180]	@ (800688c <SystemGetsSignal+0xf3c>)
 80067d8:	4825      	ldr	r0, [pc, #148]	@ (8006870 <SystemGetsSignal+0xf20>)
 80067da:	f001 fd87 	bl	80082ec <OLED_DoTweenObject>
                OLED_DoTweenObject(&Tools_AnimationManager, "VideoPlayer", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80067de:	2318      	movs	r3, #24
 80067e0:	9301      	str	r3, [sp, #4]
 80067e2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80067ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80067f0:	491c      	ldr	r1, [pc, #112]	@ (8006864 <SystemGetsSignal+0xf14>)
 80067f2:	481d      	ldr	r0, [pc, #116]	@ (8006868 <SystemGetsSignal+0xf18>)
 80067f4:	f001 fd7a 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 80067f8:	2064      	movs	r0, #100	@ 0x64
 80067fa:	f002 fdb7 	bl	800936c <HAL_Delay>
                OLED_DoTweenObjectY(&g_AnimationManager, "BackButton", OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, BASIC_TWEEN_IN_STYLE);
 80067fe:	2318      	movs	r3, #24
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	2301      	movs	r3, #1
 8006804:	4a11      	ldr	r2, [pc, #68]	@ (800684c <SystemGetsSignal+0xefc>)
 8006806:	4919      	ldr	r1, [pc, #100]	@ (800686c <SystemGetsSignal+0xf1c>)
 8006808:	4819      	ldr	r0, [pc, #100]	@ (8006870 <SystemGetsSignal+0xf20>)
 800680a:	f001 fe42 	bl	8008492 <OLED_DoTweenObjectY>
                OLED_DoTweenObjectX(&g_AnimationManager, "BackButton", OLED_UI_END_X, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 800680e:	2318      	movs	r3, #24
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8006816:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800681a:	4914      	ldr	r1, [pc, #80]	@ (800686c <SystemGetsSignal+0xf1c>)
 800681c:	4814      	ldr	r0, [pc, #80]	@ (8006870 <SystemGetsSignal+0xf20>)
 800681e:	f001 fe03 	bl	8008428 <OLED_DoTweenObjectX>
                cancelSelection = false;
 8006822:	4b1b      	ldr	r3, [pc, #108]	@ (8006890 <SystemGetsSignal+0xf40>)
 8006824:	2200      	movs	r2, #0
 8006826:	701a      	strb	r2, [r3, #0]
 8006828:	f000 bc12 	b.w	8007050 <SystemGetsSignal+0x1700>
 800682c:	2000043c 	.word	0x2000043c
 8006830:	2000043d 	.word	0x2000043d
 8006834:	20001034 	.word	0x20001034
 8006838:	40400000 	.word	0x40400000
 800683c:	c2b40000 	.word	0xc2b40000
 8006840:	0800e6d8 	.word	0x0800e6d8
 8006844:	2000144c 	.word	0x2000144c
 8006848:	0800e6e4 	.word	0x0800e6e4
 800684c:	41e80000 	.word	0x41e80000
 8006850:	0800e6f0 	.word	0x0800e6f0
 8006854:	42280000 	.word	0x42280000
 8006858:	0800e700 	.word	0x0800e700
 800685c:	425c0000 	.word	0x425c0000
 8006860:	0800e710 	.word	0x0800e710
 8006864:	0800e614 	.word	0x0800e614
 8006868:	20002034 	.word	0x20002034
 800686c:	0800e608 	.word	0x0800e608
 8006870:	20003df8 	.word	0x20003df8
 8006874:	20004490 	.word	0x20004490
 8006878:	c1200000 	.word	0xc1200000
 800687c:	42880000 	.word	0x42880000
 8006880:	0800e5b8 	.word	0x0800e5b8
 8006884:	20003804 	.word	0x20003804
 8006888:	0800e6b4 	.word	0x0800e6b4
 800688c:	0800e6cc 	.word	0x0800e6cc
 8006890:	20001036 	.word	0x20001036
 8006894:	427c0000 	.word	0x427c0000
 8006898:	41200000 	.word	0x41200000
 800689c:	42040000 	.word	0x42040000
            }
            else if (menuRank == 2 && menuSelection == 2 && currentPage == UI_PAGE_TOOLS)
 80068a0:	4b90      	ldr	r3, [pc, #576]	@ (8006ae4 <SystemGetsSignal+0x1194>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	f040 80ba 	bne.w	8006a1e <SystemGetsSignal+0x10ce>
 80068aa:	4b8f      	ldr	r3, [pc, #572]	@ (8006ae8 <SystemGetsSignal+0x1198>)
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	f040 80b5 	bne.w	8006a1e <SystemGetsSignal+0x10ce>
 80068b4:	4b8d      	ldr	r3, [pc, #564]	@ (8006aec <SystemGetsSignal+0x119c>)
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	2b04      	cmp	r3, #4
 80068ba:	f040 80b0 	bne.w	8006a1e <SystemGetsSignal+0x10ce>
            {
                menuRank = 1;
 80068be:	4b89      	ldr	r3, [pc, #548]	@ (8006ae4 <SystemGetsSignal+0x1194>)
 80068c0:	2201      	movs	r2, #1
 80068c2:	701a      	strb	r2, [r3, #0]
                menuSelection = 2;
 80068c4:	4b88      	ldr	r3, [pc, #544]	@ (8006ae8 <SystemGetsSignal+0x1198>)
 80068c6:	2202      	movs	r2, #2
 80068c8:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_MENU;
 80068ca:	4b88      	ldr	r3, [pc, #544]	@ (8006aec <SystemGetsSignal+0x119c>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Tools_AnimationManager, "VideoPlayer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 80068d0:	2301      	movs	r3, #1
 80068d2:	9301      	str	r3, [sp, #4]
 80068d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	4b85      	ldr	r3, [pc, #532]	@ (8006af0 <SystemGetsSignal+0x11a0>)
 80068dc:	4a85      	ldr	r2, [pc, #532]	@ (8006af4 <SystemGetsSignal+0x11a4>)
 80068de:	4986      	ldr	r1, [pc, #536]	@ (8006af8 <SystemGetsSignal+0x11a8>)
 80068e0:	4886      	ldr	r0, [pc, #536]	@ (8006afc <SystemGetsSignal+0x11ac>)
 80068e2:	f001 fd03 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 80068e6:	2064      	movs	r0, #100	@ 0x64
 80068e8:	f002 fd40 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 80068ec:	2301      	movs	r3, #1
 80068ee:	9301      	str	r3, [sp, #4]
 80068f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80068fa:	4a7e      	ldr	r2, [pc, #504]	@ (8006af4 <SystemGetsSignal+0x11a4>)
 80068fc:	4980      	ldr	r1, [pc, #512]	@ (8006b00 <SystemGetsSignal+0x11b0>)
 80068fe:	4881      	ldr	r0, [pc, #516]	@ (8006b04 <SystemGetsSignal+0x11b4>)
 8006900:	f001 fcf4 	bl	80082ec <OLED_DoTweenObject>

                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8006904:	4b78      	ldr	r3, [pc, #480]	@ (8006ae8 <SystemGetsSignal+0x1198>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	f1c3 0202 	rsb	r2, r3, #2
 800690c:	4613      	mov	r3, r2
 800690e:	005b      	lsls	r3, r3, #1
 8006910:	4413      	add	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	3303      	adds	r3, #3
 8006918:	4618      	mov	r0, r3
 800691a:	f7f9 fce3 	bl	80002e4 <__aeabi_i2f>
 800691e:	4603      	mov	r3, r0
 8006920:	2218      	movs	r2, #24
 8006922:	9201      	str	r2, [sp, #4]
 8006924:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8006928:	9200      	str	r2, [sp, #0]
 800692a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800692e:	4976      	ldr	r1, [pc, #472]	@ (8006b08 <SystemGetsSignal+0x11b8>)
 8006930:	4876      	ldr	r0, [pc, #472]	@ (8006b0c <SystemGetsSignal+0x11bc>)
 8006932:	f001 fcdb 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006936:	2064      	movs	r0, #100	@ 0x64
 8006938:	f002 fd18 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 800693c:	4b6a      	ldr	r3, [pc, #424]	@ (8006ae8 <SystemGetsSignal+0x1198>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	f1c3 0203 	rsb	r2, r3, #3
 8006944:	4613      	mov	r3, r2
 8006946:	005b      	lsls	r3, r3, #1
 8006948:	4413      	add	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	3303      	adds	r3, #3
 8006950:	4618      	mov	r0, r3
 8006952:	f7f9 fcc7 	bl	80002e4 <__aeabi_i2f>
 8006956:	4603      	mov	r3, r0
 8006958:	2218      	movs	r2, #24
 800695a:	9201      	str	r2, [sp, #4]
 800695c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8006960:	9200      	str	r2, [sp, #0]
 8006962:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006966:	496a      	ldr	r1, [pc, #424]	@ (8006b10 <SystemGetsSignal+0x11c0>)
 8006968:	4868      	ldr	r0, [pc, #416]	@ (8006b0c <SystemGetsSignal+0x11bc>)
 800696a:	f001 fcbf 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 800696e:	2064      	movs	r0, #100	@ 0x64
 8006970:	f002 fcfc 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8006974:	4b5c      	ldr	r3, [pc, #368]	@ (8006ae8 <SystemGetsSignal+0x1198>)
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	f1c3 0204 	rsb	r2, r3, #4
 800697c:	4613      	mov	r3, r2
 800697e:	005b      	lsls	r3, r3, #1
 8006980:	4413      	add	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	3303      	adds	r3, #3
 8006988:	4618      	mov	r0, r3
 800698a:	f7f9 fcab 	bl	80002e4 <__aeabi_i2f>
 800698e:	4603      	mov	r3, r0
 8006990:	2218      	movs	r2, #24
 8006992:	9201      	str	r2, [sp, #4]
 8006994:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8006998:	9200      	str	r2, [sp, #0]
 800699a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800699e:	495d      	ldr	r1, [pc, #372]	@ (8006b14 <SystemGetsSignal+0x11c4>)
 80069a0:	485a      	ldr	r0, [pc, #360]	@ (8006b0c <SystemGetsSignal+0x11bc>)
 80069a2:	f001 fca3 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 80069a6:	2064      	movs	r0, #100	@ 0x64
 80069a8:	f002 fce0 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80069ac:	4b4e      	ldr	r3, [pc, #312]	@ (8006ae8 <SystemGetsSignal+0x1198>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	f1c3 0205 	rsb	r2, r3, #5
 80069b4:	4613      	mov	r3, r2
 80069b6:	005b      	lsls	r3, r3, #1
 80069b8:	4413      	add	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	3303      	adds	r3, #3
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7f9 fc8f 	bl	80002e4 <__aeabi_i2f>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2218      	movs	r2, #24
 80069ca:	9201      	str	r2, [sp, #4]
 80069cc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80069d0:	9200      	str	r2, [sp, #0]
 80069d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80069d6:	4950      	ldr	r1, [pc, #320]	@ (8006b18 <SystemGetsSignal+0x11c8>)
 80069d8:	484c      	ldr	r0, [pc, #304]	@ (8006b0c <SystemGetsSignal+0x11bc>)
 80069da:	f001 fc87 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 80069de:	2064      	movs	r0, #100	@ 0x64
 80069e0:	f002 fcc4 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80069e4:	4b40      	ldr	r3, [pc, #256]	@ (8006ae8 <SystemGetsSignal+0x1198>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	f1c3 0206 	rsb	r2, r3, #6
 80069ec:	4613      	mov	r3, r2
 80069ee:	005b      	lsls	r3, r3, #1
 80069f0:	4413      	add	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	3303      	adds	r3, #3
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7f9 fc73 	bl	80002e4 <__aeabi_i2f>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2218      	movs	r2, #24
 8006a02:	9201      	str	r2, [sp, #4]
 8006a04:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8006a08:	9200      	str	r2, [sp, #0]
 8006a0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006a0e:	4943      	ldr	r1, [pc, #268]	@ (8006b1c <SystemGetsSignal+0x11cc>)
 8006a10:	483e      	ldr	r0, [pc, #248]	@ (8006b0c <SystemGetsSignal+0x11bc>)
 8006a12:	f001 fc6b 	bl	80082ec <OLED_DoTweenObject>
                resetAnimation = true;
 8006a16:	4b42      	ldr	r3, [pc, #264]	@ (8006b20 <SystemGetsSignal+0x11d0>)
 8006a18:	2201      	movs	r2, #1
 8006a1a:	701a      	strb	r2, [r3, #0]
 8006a1c:	e318      	b.n	8007050 <SystemGetsSignal+0x1700>
            }
// #pragma endregion 工具部分
// #pragma region 状态部分
            else if (menuRank == 1 && menuSelection == 3)
 8006a1e:	4b31      	ldr	r3, [pc, #196]	@ (8006ae4 <SystemGetsSignal+0x1194>)
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	f040 808a 	bne.w	8006b3c <SystemGetsSignal+0x11ec>
 8006a28:	4b2f      	ldr	r3, [pc, #188]	@ (8006ae8 <SystemGetsSignal+0x1198>)
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b03      	cmp	r3, #3
 8006a2e:	f040 8085 	bne.w	8006b3c <SystemGetsSignal+0x11ec>
            {
                menuRank = 2;
 8006a32:	4b2c      	ldr	r3, [pc, #176]	@ (8006ae4 <SystemGetsSignal+0x1194>)
 8006a34:	2202      	movs	r2, #2
 8006a36:	701a      	strb	r2, [r3, #0]
                menuSelection = 3;
 8006a38:	4b2b      	ldr	r3, [pc, #172]	@ (8006ae8 <SystemGetsSignal+0x1198>)
 8006a3a:	2203      	movs	r2, #3
 8006a3c:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_STATUS;
 8006a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8006aec <SystemGetsSignal+0x119c>)
 8006a40:	2202      	movs	r2, #2
 8006a42:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8006a44:	2300      	movs	r3, #0
 8006a46:	9301      	str	r3, [sp, #4]
 8006a48:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	4b35      	ldr	r3, [pc, #212]	@ (8006b24 <SystemGetsSignal+0x11d4>)
 8006a50:	4a35      	ldr	r2, [pc, #212]	@ (8006b28 <SystemGetsSignal+0x11d8>)
 8006a52:	4936      	ldr	r1, [pc, #216]	@ (8006b2c <SystemGetsSignal+0x11dc>)
 8006a54:	4836      	ldr	r0, [pc, #216]	@ (8006b30 <SystemGetsSignal+0x11e0>)
 8006a56:	f001 fc49 	bl	80082ec <OLED_DoTweenObject>
                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	9301      	str	r3, [sp, #4]
 8006a5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	4b2f      	ldr	r3, [pc, #188]	@ (8006b24 <SystemGetsSignal+0x11d4>)
 8006a66:	4a23      	ldr	r2, [pc, #140]	@ (8006af4 <SystemGetsSignal+0x11a4>)
 8006a68:	4927      	ldr	r1, [pc, #156]	@ (8006b08 <SystemGetsSignal+0x11b8>)
 8006a6a:	4828      	ldr	r0, [pc, #160]	@ (8006b0c <SystemGetsSignal+0x11bc>)
 8006a6c:	f001 fc3e 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006a70:	2064      	movs	r0, #100	@ 0x64
 8006a72:	f002 fc7b 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006a76:	2301      	movs	r3, #1
 8006a78:	9301      	str	r3, [sp, #4]
 8006a7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	4b1b      	ldr	r3, [pc, #108]	@ (8006af0 <SystemGetsSignal+0x11a0>)
 8006a82:	4a1c      	ldr	r2, [pc, #112]	@ (8006af4 <SystemGetsSignal+0x11a4>)
 8006a84:	4922      	ldr	r1, [pc, #136]	@ (8006b10 <SystemGetsSignal+0x11c0>)
 8006a86:	4821      	ldr	r0, [pc, #132]	@ (8006b0c <SystemGetsSignal+0x11bc>)
 8006a88:	f001 fc30 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006a8c:	2064      	movs	r0, #100	@ 0x64
 8006a8e:	f002 fc6d 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006a92:	2301      	movs	r3, #1
 8006a94:	9301      	str	r3, [sp, #4]
 8006a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8006aa0:	4a14      	ldr	r2, [pc, #80]	@ (8006af4 <SystemGetsSignal+0x11a4>)
 8006aa2:	491c      	ldr	r1, [pc, #112]	@ (8006b14 <SystemGetsSignal+0x11c4>)
 8006aa4:	4819      	ldr	r0, [pc, #100]	@ (8006b0c <SystemGetsSignal+0x11bc>)
 8006aa6:	f001 fc21 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006aaa:	2064      	movs	r0, #100	@ 0x64
 8006aac:	f002 fc5e 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	9301      	str	r3, [sp, #4]
 8006ab4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	4b1e      	ldr	r3, [pc, #120]	@ (8006b34 <SystemGetsSignal+0x11e4>)
 8006abc:	4a0d      	ldr	r2, [pc, #52]	@ (8006af4 <SystemGetsSignal+0x11a4>)
 8006abe:	4916      	ldr	r1, [pc, #88]	@ (8006b18 <SystemGetsSignal+0x11c8>)
 8006ac0:	4812      	ldr	r0, [pc, #72]	@ (8006b0c <SystemGetsSignal+0x11bc>)
 8006ac2:	f001 fc13 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006ac6:	2064      	movs	r0, #100	@ 0x64
 8006ac8:	f002 fc50 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006acc:	2301      	movs	r3, #1
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	4b18      	ldr	r3, [pc, #96]	@ (8006b38 <SystemGetsSignal+0x11e8>)
 8006ad8:	4a06      	ldr	r2, [pc, #24]	@ (8006af4 <SystemGetsSignal+0x11a4>)
 8006ada:	4910      	ldr	r1, [pc, #64]	@ (8006b1c <SystemGetsSignal+0x11cc>)
 8006adc:	480b      	ldr	r0, [pc, #44]	@ (8006b0c <SystemGetsSignal+0x11bc>)
 8006ade:	f001 fc05 	bl	80082ec <OLED_DoTweenObject>
 8006ae2:	e2b5      	b.n	8007050 <SystemGetsSignal+0x1700>
 8006ae4:	2000043c 	.word	0x2000043c
 8006ae8:	2000043d 	.word	0x2000043d
 8006aec:	20001034 	.word	0x20001034
 8006af0:	40400000 	.word	0x40400000
 8006af4:	c2b40000 	.word	0xc2b40000
 8006af8:	0800e614 	.word	0x0800e614
 8006afc:	20002034 	.word	0x20002034
 8006b00:	0800e608 	.word	0x0800e608
 8006b04:	20003df8 	.word	0x20003df8
 8006b08:	0800e6d8 	.word	0x0800e6d8
 8006b0c:	2000144c 	.word	0x2000144c
 8006b10:	0800e6e4 	.word	0x0800e6e4
 8006b14:	0800e6f0 	.word	0x0800e6f0
 8006b18:	0800e700 	.word	0x0800e700
 8006b1c:	0800e710 	.word	0x0800e710
 8006b20:	20001037 	.word	0x20001037
 8006b24:	c1200000 	.word	0xc1200000
 8006b28:	42300000 	.word	0x42300000
 8006b2c:	0800e56c 	.word	0x0800e56c
 8006b30:	20003804 	.word	0x20003804
 8006b34:	41e80000 	.word	0x41e80000
 8006b38:	42280000 	.word	0x42280000
            }
            else if (menuRank == 2 && currentPage == UI_PAGE_STATUS)
 8006b3c:	4bab      	ldr	r3, [pc, #684]	@ (8006dec <SystemGetsSignal+0x149c>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	f040 8091 	bne.w	8006c68 <SystemGetsSignal+0x1318>
 8006b46:	4baa      	ldr	r3, [pc, #680]	@ (8006df0 <SystemGetsSignal+0x14a0>)
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	f040 808c 	bne.w	8006c68 <SystemGetsSignal+0x1318>
            {
                menuRank = 1;
 8006b50:	4ba6      	ldr	r3, [pc, #664]	@ (8006dec <SystemGetsSignal+0x149c>)
 8006b52:	2201      	movs	r2, #1
 8006b54:	701a      	strb	r2, [r3, #0]
                menuSelection = 3;
 8006b56:	4ba7      	ldr	r3, [pc, #668]	@ (8006df4 <SystemGetsSignal+0x14a4>)
 8006b58:	2203      	movs	r2, #3
 8006b5a:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_MENU;
 8006b5c:	4ba4      	ldr	r3, [pc, #656]	@ (8006df0 <SystemGetsSignal+0x14a0>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	701a      	strb	r2, [r3, #0]

                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Status") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8006b62:	2304      	movs	r3, #4
 8006b64:	9301      	str	r3, [sp, #4]
 8006b66:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	f04f 0300 	mov.w	r3, #0
 8006b70:	4aa1      	ldr	r2, [pc, #644]	@ (8006df8 <SystemGetsSignal+0x14a8>)
 8006b72:	49a2      	ldr	r1, [pc, #648]	@ (8006dfc <SystemGetsSignal+0x14ac>)
 8006b74:	48a2      	ldr	r0, [pc, #648]	@ (8006e00 <SystemGetsSignal+0x14b0>)
 8006b76:	f001 fbb9 	bl	80082ec <OLED_DoTweenObject>

                OLED_DoTweenObject(&Status_AnimationManager, "RunningTime", 0, -10, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	9301      	str	r3, [sp, #4]
 8006b7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	4b9f      	ldr	r3, [pc, #636]	@ (8006e04 <SystemGetsSignal+0x14b4>)
 8006b86:	f04f 0200 	mov.w	r2, #0
 8006b8a:	499f      	ldr	r1, [pc, #636]	@ (8006e08 <SystemGetsSignal+0x14b8>)
 8006b8c:	489f      	ldr	r0, [pc, #636]	@ (8006e0c <SystemGetsSignal+0x14bc>)
 8006b8e:	f001 fbad 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006b92:	2064      	movs	r0, #100	@ 0x64
 8006b94:	f002 fbea 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Status_AnimationManager, "Status", 0, OLED_HEIGHT, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006b98:	2301      	movs	r3, #1
 8006b9a:	9301      	str	r3, [sp, #4]
 8006b9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8006ba6:	f04f 0200 	mov.w	r2, #0
 8006baa:	4999      	ldr	r1, [pc, #612]	@ (8006e10 <SystemGetsSignal+0x14c0>)
 8006bac:	4897      	ldr	r0, [pc, #604]	@ (8006e0c <SystemGetsSignal+0x14bc>)
 8006bae:	f001 fb9d 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006bb2:	2064      	movs	r0, #100	@ 0x64
 8006bb4:	f002 fbda 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Status_AnimationManager, "CUBE", 150, 50, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006bb8:	2301      	movs	r3, #1
 8006bba:	9301      	str	r3, [sp, #4]
 8006bbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	4b94      	ldr	r3, [pc, #592]	@ (8006e14 <SystemGetsSignal+0x14c4>)
 8006bc4:	4a94      	ldr	r2, [pc, #592]	@ (8006e18 <SystemGetsSignal+0x14c8>)
 8006bc6:	4995      	ldr	r1, [pc, #596]	@ (8006e1c <SystemGetsSignal+0x14cc>)
 8006bc8:	4890      	ldr	r0, [pc, #576]	@ (8006e0c <SystemGetsSignal+0x14bc>)
 8006bca:	f001 fb8f 	bl	80082ec <OLED_DoTweenObject>

                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8006bce:	2318      	movs	r3, #24
 8006bd0:	9301      	str	r3, [sp, #4]
 8006bd2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	4b8a      	ldr	r3, [pc, #552]	@ (8006e04 <SystemGetsSignal+0x14b4>)
 8006bda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006bde:	4990      	ldr	r1, [pc, #576]	@ (8006e20 <SystemGetsSignal+0x14d0>)
 8006be0:	4890      	ldr	r0, [pc, #576]	@ (8006e24 <SystemGetsSignal+0x14d4>)
 8006be2:	f001 fb83 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006be6:	2064      	movs	r0, #100	@ 0x64
 8006be8:	f002 fbc0 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8006bec:	2318      	movs	r3, #24
 8006bee:	9301      	str	r3, [sp, #4]
 8006bf0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	4b8c      	ldr	r3, [pc, #560]	@ (8006e28 <SystemGetsSignal+0x14d8>)
 8006bf8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006bfc:	498b      	ldr	r1, [pc, #556]	@ (8006e2c <SystemGetsSignal+0x14dc>)
 8006bfe:	4889      	ldr	r0, [pc, #548]	@ (8006e24 <SystemGetsSignal+0x14d4>)
 8006c00:	f001 fb74 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006c04:	2064      	movs	r0, #100	@ 0x64
 8006c06:	f002 fbb1 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8006c0a:	2318      	movs	r3, #24
 8006c0c:	9301      	str	r3, [sp, #4]
 8006c0e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8006c18:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006c1c:	4984      	ldr	r1, [pc, #528]	@ (8006e30 <SystemGetsSignal+0x14e0>)
 8006c1e:	4881      	ldr	r0, [pc, #516]	@ (8006e24 <SystemGetsSignal+0x14d4>)
 8006c20:	f001 fb64 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006c24:	2064      	movs	r0, #100	@ 0x64
 8006c26:	f002 fba1 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8006c2a:	2318      	movs	r3, #24
 8006c2c:	9301      	str	r3, [sp, #4]
 8006c2e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	4b7f      	ldr	r3, [pc, #508]	@ (8006e34 <SystemGetsSignal+0x14e4>)
 8006c36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006c3a:	497f      	ldr	r1, [pc, #508]	@ (8006e38 <SystemGetsSignal+0x14e8>)
 8006c3c:	4879      	ldr	r0, [pc, #484]	@ (8006e24 <SystemGetsSignal+0x14d4>)
 8006c3e:	f001 fb55 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006c42:	2064      	movs	r0, #100	@ 0x64
 8006c44:	f002 fb92 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8006c48:	2318      	movs	r3, #24
 8006c4a:	9301      	str	r3, [sp, #4]
 8006c4c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	4b7a      	ldr	r3, [pc, #488]	@ (8006e3c <SystemGetsSignal+0x14ec>)
 8006c54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006c58:	4979      	ldr	r1, [pc, #484]	@ (8006e40 <SystemGetsSignal+0x14f0>)
 8006c5a:	4872      	ldr	r0, [pc, #456]	@ (8006e24 <SystemGetsSignal+0x14d4>)
 8006c5c:	f001 fb46 	bl	80082ec <OLED_DoTweenObject>
                resetAnimation = true;
 8006c60:	4b78      	ldr	r3, [pc, #480]	@ (8006e44 <SystemGetsSignal+0x14f4>)
 8006c62:	2201      	movs	r2, #1
 8006c64:	701a      	strb	r2, [r3, #0]
 8006c66:	e1f3      	b.n	8007050 <SystemGetsSignal+0x1700>
            }
// #pragma endregion 状态部分
// #pragma region 设置部分
            else if (menuRank == 1 && menuSelection == 4) 
 8006c68:	4b60      	ldr	r3, [pc, #384]	@ (8006dec <SystemGetsSignal+0x149c>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	f040 808f 	bne.w	8006d90 <SystemGetsSignal+0x1440>
 8006c72:	4b60      	ldr	r3, [pc, #384]	@ (8006df4 <SystemGetsSignal+0x14a4>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	2b04      	cmp	r3, #4
 8006c78:	f040 808a 	bne.w	8006d90 <SystemGetsSignal+0x1440>
            {
                menuRank = 2;
 8006c7c:	4b5b      	ldr	r3, [pc, #364]	@ (8006dec <SystemGetsSignal+0x149c>)
 8006c7e:	2202      	movs	r2, #2
 8006c80:	701a      	strb	r2, [r3, #0]
                menuSelection = 1;
 8006c82:	4b5c      	ldr	r3, [pc, #368]	@ (8006df4 <SystemGetsSignal+0x14a4>)
 8006c84:	2201      	movs	r2, #1
 8006c86:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_SETTINGS;
 8006c88:	4b59      	ldr	r3, [pc, #356]	@ (8006df0 <SystemGetsSignal+0x14a0>)
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -2, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006c8e:	2301      	movs	r3, #1
 8006c90:	9301      	str	r3, [sp, #4]
 8006c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	4b6b      	ldr	r3, [pc, #428]	@ (8006e48 <SystemGetsSignal+0x14f8>)
 8006c9a:	4a6c      	ldr	r2, [pc, #432]	@ (8006e4c <SystemGetsSignal+0x14fc>)
 8006c9c:	4960      	ldr	r1, [pc, #384]	@ (8006e20 <SystemGetsSignal+0x14d0>)
 8006c9e:	4861      	ldr	r0, [pc, #388]	@ (8006e24 <SystemGetsSignal+0x14d4>)
 8006ca0:	f001 fb24 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006ca4:	2064      	movs	r0, #100	@ 0x64
 8006ca6:	f002 fb61 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006caa:	2301      	movs	r3, #1
 8006cac:	9301      	str	r3, [sp, #4]
 8006cae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	4b53      	ldr	r3, [pc, #332]	@ (8006e04 <SystemGetsSignal+0x14b4>)
 8006cb6:	4a65      	ldr	r2, [pc, #404]	@ (8006e4c <SystemGetsSignal+0x14fc>)
 8006cb8:	495c      	ldr	r1, [pc, #368]	@ (8006e2c <SystemGetsSignal+0x14dc>)
 8006cba:	485a      	ldr	r0, [pc, #360]	@ (8006e24 <SystemGetsSignal+0x14d4>)
 8006cbc:	f001 fb16 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006cc0:	2064      	movs	r0, #100	@ 0x64
 8006cc2:	f002 fb53 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	9301      	str	r3, [sp, #4]
 8006cca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	4b55      	ldr	r3, [pc, #340]	@ (8006e28 <SystemGetsSignal+0x14d8>)
 8006cd2:	4a5e      	ldr	r2, [pc, #376]	@ (8006e4c <SystemGetsSignal+0x14fc>)
 8006cd4:	4956      	ldr	r1, [pc, #344]	@ (8006e30 <SystemGetsSignal+0x14e0>)
 8006cd6:	4853      	ldr	r0, [pc, #332]	@ (8006e24 <SystemGetsSignal+0x14d4>)
 8006cd8:	f001 fb08 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006cdc:	2064      	movs	r0, #100	@ 0x64
 8006cde:	f002 fb45 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	9301      	str	r3, [sp, #4]
 8006ce6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8006cf0:	4a56      	ldr	r2, [pc, #344]	@ (8006e4c <SystemGetsSignal+0x14fc>)
 8006cf2:	4951      	ldr	r1, [pc, #324]	@ (8006e38 <SystemGetsSignal+0x14e8>)
 8006cf4:	484b      	ldr	r0, [pc, #300]	@ (8006e24 <SystemGetsSignal+0x14d4>)
 8006cf6:	f001 faf9 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006cfa:	2064      	movs	r0, #100	@ 0x64
 8006cfc:	f002 fb36 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006d00:	2301      	movs	r3, #1
 8006d02:	9301      	str	r3, [sp, #4]
 8006d04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	4b4a      	ldr	r3, [pc, #296]	@ (8006e34 <SystemGetsSignal+0x14e4>)
 8006d0c:	4a4f      	ldr	r2, [pc, #316]	@ (8006e4c <SystemGetsSignal+0x14fc>)
 8006d0e:	494c      	ldr	r1, [pc, #304]	@ (8006e40 <SystemGetsSignal+0x14f0>)
 8006d10:	4844      	ldr	r0, [pc, #272]	@ (8006e24 <SystemGetsSignal+0x14d4>)
 8006d12:	f001 faeb 	bl	80082ec <OLED_DoTweenObject>

                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8006d16:	2300      	movs	r3, #0
 8006d18:	9301      	str	r3, [sp, #4]
 8006d1a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	4b38      	ldr	r3, [pc, #224]	@ (8006e04 <SystemGetsSignal+0x14b4>)
 8006d22:	4a4b      	ldr	r2, [pc, #300]	@ (8006e50 <SystemGetsSignal+0x1500>)
 8006d24:	494b      	ldr	r1, [pc, #300]	@ (8006e54 <SystemGetsSignal+0x1504>)
 8006d26:	4836      	ldr	r0, [pc, #216]	@ (8006e00 <SystemGetsSignal+0x14b0>)
 8006d28:	f001 fae0 	bl	80082ec <OLED_DoTweenObject>
                OLED_DoTweenObject(&Settings_AnimationManager, "ShowFPS", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8006d2c:	2318      	movs	r3, #24
 8006d2e:	9301      	str	r3, [sp, #4]
 8006d30:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8006d3a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006d3e:	4946      	ldr	r1, [pc, #280]	@ (8006e58 <SystemGetsSignal+0x1508>)
 8006d40:	4846      	ldr	r0, [pc, #280]	@ (8006e5c <SystemGetsSignal+0x150c>)
 8006d42:	f001 fad3 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006d46:	2064      	movs	r0, #100	@ 0x64
 8006d48:	f002 fb10 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Settings_AnimationManager, "Lightness", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8006d4c:	2318      	movs	r3, #24
 8006d4e:	9301      	str	r3, [sp, #4]
 8006d50:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	4b37      	ldr	r3, [pc, #220]	@ (8006e34 <SystemGetsSignal+0x14e4>)
 8006d58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006d5c:	4940      	ldr	r1, [pc, #256]	@ (8006e60 <SystemGetsSignal+0x1510>)
 8006d5e:	483f      	ldr	r0, [pc, #252]	@ (8006e5c <SystemGetsSignal+0x150c>)
 8006d60:	f001 fac4 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006d64:	2064      	movs	r0, #100	@ 0x64
 8006d66:	f002 fb01 	bl	800936c <HAL_Delay>
                OLED_DoTweenObjectY(&g_AnimationManager, "BackButton", OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, BASIC_TWEEN_IN_STYLE);
 8006d6a:	2318      	movs	r3, #24
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	2301      	movs	r3, #1
 8006d70:	4a32      	ldr	r2, [pc, #200]	@ (8006e3c <SystemGetsSignal+0x14ec>)
 8006d72:	493c      	ldr	r1, [pc, #240]	@ (8006e64 <SystemGetsSignal+0x1514>)
 8006d74:	483c      	ldr	r0, [pc, #240]	@ (8006e68 <SystemGetsSignal+0x1518>)
 8006d76:	f001 fb8c 	bl	8008492 <OLED_DoTweenObjectY>
                OLED_DoTweenObjectX(&g_AnimationManager, "BackButton", OLED_UI_END_X, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8006d7a:	2318      	movs	r3, #24
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8006d82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006d86:	4937      	ldr	r1, [pc, #220]	@ (8006e64 <SystemGetsSignal+0x1514>)
 8006d88:	4837      	ldr	r0, [pc, #220]	@ (8006e68 <SystemGetsSignal+0x1518>)
 8006d8a:	f001 fb4d 	bl	8008428 <OLED_DoTweenObjectX>
 8006d8e:	e15f      	b.n	8007050 <SystemGetsSignal+0x1700>
            }
            else if (menuRank == 2 && menuSelection == 1 && currentPage == UI_PAGE_SETTINGS)
 8006d90:	4b16      	ldr	r3, [pc, #88]	@ (8006dec <SystemGetsSignal+0x149c>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d113      	bne.n	8006dc0 <SystemGetsSignal+0x1470>
 8006d98:	4b16      	ldr	r3, [pc, #88]	@ (8006df4 <SystemGetsSignal+0x14a4>)
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d10f      	bne.n	8006dc0 <SystemGetsSignal+0x1470>
 8006da0:	4b13      	ldr	r3, [pc, #76]	@ (8006df0 <SystemGetsSignal+0x14a0>)
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d10b      	bne.n	8006dc0 <SystemGetsSignal+0x1470>
            {
                if (isShowFPS)
 8006da8:	4b30      	ldr	r3, [pc, #192]	@ (8006e6c <SystemGetsSignal+0x151c>)
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <SystemGetsSignal+0x1468>
                {
                    isShowFPS = false;
 8006db0:	4b2e      	ldr	r3, [pc, #184]	@ (8006e6c <SystemGetsSignal+0x151c>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	701a      	strb	r2, [r3, #0]
                if (isShowFPS)
 8006db6:	e14b      	b.n	8007050 <SystemGetsSignal+0x1700>
                }
                else
                {
                    isShowFPS = true;
 8006db8:	4b2c      	ldr	r3, [pc, #176]	@ (8006e6c <SystemGetsSignal+0x151c>)
 8006dba:	2201      	movs	r2, #1
 8006dbc:	701a      	strb	r2, [r3, #0]
                if (isShowFPS)
 8006dbe:	e147      	b.n	8007050 <SystemGetsSignal+0x1700>
                }
            }
            else if (menuRank == 2 && menuSelection == 2 && currentPage == UI_PAGE_SETTINGS)
 8006dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8006dec <SystemGetsSignal+0x149c>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d155      	bne.n	8006e74 <SystemGetsSignal+0x1524>
 8006dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8006df4 <SystemGetsSignal+0x14a4>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d151      	bne.n	8006e74 <SystemGetsSignal+0x1524>
 8006dd0:	4b07      	ldr	r3, [pc, #28]	@ (8006df0 <SystemGetsSignal+0x14a0>)
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d14d      	bne.n	8006e74 <SystemGetsSignal+0x1524>
            {
                menuRank = 3;
 8006dd8:	4b04      	ldr	r3, [pc, #16]	@ (8006dec <SystemGetsSignal+0x149c>)
 8006dda:	2203      	movs	r2, #3
 8006ddc:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_SETTINGS;
 8006dde:	4b04      	ldr	r3, [pc, #16]	@ (8006df0 <SystemGetsSignal+0x14a0>)
 8006de0:	2201      	movs	r2, #1
 8006de2:	701a      	strb	r2, [r3, #0]
                cancelSelection = true;
 8006de4:	4b22      	ldr	r3, [pc, #136]	@ (8006e70 <SystemGetsSignal+0x1520>)
 8006de6:	2201      	movs	r2, #1
 8006de8:	701a      	strb	r2, [r3, #0]
 8006dea:	e131      	b.n	8007050 <SystemGetsSignal+0x1700>
 8006dec:	2000043c 	.word	0x2000043c
 8006df0:	20001034 	.word	0x20001034
 8006df4:	2000043d 	.word	0x2000043d
 8006df8:	42b80000 	.word	0x42b80000
 8006dfc:	0800e56c 	.word	0x0800e56c
 8006e00:	20003804 	.word	0x20003804
 8006e04:	c1200000 	.word	0xc1200000
 8006e08:	0800e620 	.word	0x0800e620
 8006e0c:	20003210 	.word	0x20003210
 8006e10:	0800e62c 	.word	0x0800e62c
 8006e14:	42480000 	.word	0x42480000
 8006e18:	43160000 	.word	0x43160000
 8006e1c:	0800e634 	.word	0x0800e634
 8006e20:	0800e6d8 	.word	0x0800e6d8
 8006e24:	2000144c 	.word	0x2000144c
 8006e28:	40400000 	.word	0x40400000
 8006e2c:	0800e6e4 	.word	0x0800e6e4
 8006e30:	0800e6f0 	.word	0x0800e6f0
 8006e34:	41e80000 	.word	0x41e80000
 8006e38:	0800e700 	.word	0x0800e700
 8006e3c:	42280000 	.word	0x42280000
 8006e40:	0800e710 	.word	0x0800e710
 8006e44:	20001037 	.word	0x20001037
 8006e48:	c1b80000 	.word	0xc1b80000
 8006e4c:	c2b40000 	.word	0xc2b40000
 8006e50:	42600000 	.word	0x42600000
 8006e54:	0800e578 	.word	0x0800e578
 8006e58:	0800e63c 	.word	0x0800e63c
 8006e5c:	20002628 	.word	0x20002628
 8006e60:	0800e644 	.word	0x0800e644
 8006e64:	0800e608 	.word	0x0800e608
 8006e68:	20003df8 	.word	0x20003df8
 8006e6c:	20001038 	.word	0x20001038
 8006e70:	20001036 	.word	0x20001036
            }
            else if (menuRank == 3 && menuSelection == 2 && currentPage == UI_PAGE_SETTINGS)
 8006e74:	4b7d      	ldr	r3, [pc, #500]	@ (800706c <SystemGetsSignal+0x171c>)
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	2b03      	cmp	r3, #3
 8006e7a:	d111      	bne.n	8006ea0 <SystemGetsSignal+0x1550>
 8006e7c:	4b7c      	ldr	r3, [pc, #496]	@ (8007070 <SystemGetsSignal+0x1720>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d10d      	bne.n	8006ea0 <SystemGetsSignal+0x1550>
 8006e84:	4b7b      	ldr	r3, [pc, #492]	@ (8007074 <SystemGetsSignal+0x1724>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d109      	bne.n	8006ea0 <SystemGetsSignal+0x1550>
            {
                menuRank = 2;
 8006e8c:	4b77      	ldr	r3, [pc, #476]	@ (800706c <SystemGetsSignal+0x171c>)
 8006e8e:	2202      	movs	r2, #2
 8006e90:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_SETTINGS;
 8006e92:	4b78      	ldr	r3, [pc, #480]	@ (8007074 <SystemGetsSignal+0x1724>)
 8006e94:	2201      	movs	r2, #1
 8006e96:	701a      	strb	r2, [r3, #0]
                cancelSelection = false;
 8006e98:	4b77      	ldr	r3, [pc, #476]	@ (8007078 <SystemGetsSignal+0x1728>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	701a      	strb	r2, [r3, #0]
 8006e9e:	e0d7      	b.n	8007050 <SystemGetsSignal+0x1700>
            }
            else if (menuRank == 2 && menuSelection == 3 && currentPage == UI_PAGE_SETTINGS)
 8006ea0:	4b72      	ldr	r3, [pc, #456]	@ (800706c <SystemGetsSignal+0x171c>)
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	f040 80d3 	bne.w	8007050 <SystemGetsSignal+0x1700>
 8006eaa:	4b71      	ldr	r3, [pc, #452]	@ (8007070 <SystemGetsSignal+0x1720>)
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	f040 80ce 	bne.w	8007050 <SystemGetsSignal+0x1700>
 8006eb4:	4b6f      	ldr	r3, [pc, #444]	@ (8007074 <SystemGetsSignal+0x1724>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	f040 80c9 	bne.w	8007050 <SystemGetsSignal+0x1700>
            {
                menuRank = 1;
 8006ebe:	4b6b      	ldr	r3, [pc, #428]	@ (800706c <SystemGetsSignal+0x171c>)
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	701a      	strb	r2, [r3, #0]
                menuSelection = 4;
 8006ec4:	4b6a      	ldr	r3, [pc, #424]	@ (8007070 <SystemGetsSignal+0x1720>)
 8006ec6:	2204      	movs	r2, #4
 8006ec8:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_MENU;
 8006eca:	4b6a      	ldr	r3, [pc, #424]	@ (8007074 <SystemGetsSignal+0x1724>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	701a      	strb	r2, [r3, #0]

                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8006ed0:	2304      	movs	r3, #4
 8006ed2:	9301      	str	r3, [sp, #4]
 8006ed4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	f04f 0300 	mov.w	r3, #0
 8006ede:	4a67      	ldr	r2, [pc, #412]	@ (800707c <SystemGetsSignal+0x172c>)
 8006ee0:	4967      	ldr	r1, [pc, #412]	@ (8007080 <SystemGetsSignal+0x1730>)
 8006ee2:	4868      	ldr	r0, [pc, #416]	@ (8007084 <SystemGetsSignal+0x1734>)
 8006ee4:	f001 fa02 	bl	80082ec <OLED_DoTweenObject>
                OLED_DoTweenObject(&Settings_AnimationManager, "ShowFPS", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006ee8:	2301      	movs	r3, #1
 8006eea:	9301      	str	r3, [sp, #4]
 8006eec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	4b65      	ldr	r3, [pc, #404]	@ (8007088 <SystemGetsSignal+0x1738>)
 8006ef4:	4a65      	ldr	r2, [pc, #404]	@ (800708c <SystemGetsSignal+0x173c>)
 8006ef6:	4966      	ldr	r1, [pc, #408]	@ (8007090 <SystemGetsSignal+0x1740>)
 8006ef8:	4866      	ldr	r0, [pc, #408]	@ (8007094 <SystemGetsSignal+0x1744>)
 8006efa:	f001 f9f7 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006efe:	2064      	movs	r0, #100	@ 0x64
 8006f00:	f002 fa34 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Settings_AnimationManager, "Lightness", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006f04:	2301      	movs	r3, #1
 8006f06:	9301      	str	r3, [sp, #4]
 8006f08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	4b62      	ldr	r3, [pc, #392]	@ (8007098 <SystemGetsSignal+0x1748>)
 8006f10:	4a5e      	ldr	r2, [pc, #376]	@ (800708c <SystemGetsSignal+0x173c>)
 8006f12:	4962      	ldr	r1, [pc, #392]	@ (800709c <SystemGetsSignal+0x174c>)
 8006f14:	485f      	ldr	r0, [pc, #380]	@ (8007094 <SystemGetsSignal+0x1744>)
 8006f16:	f001 f9e9 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006f1a:	2064      	movs	r0, #100	@ 0x64
 8006f1c:	f002 fa26 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006f20:	2301      	movs	r3, #1
 8006f22:	9301      	str	r3, [sp, #4]
 8006f24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8006f2e:	4a57      	ldr	r2, [pc, #348]	@ (800708c <SystemGetsSignal+0x173c>)
 8006f30:	495b      	ldr	r1, [pc, #364]	@ (80070a0 <SystemGetsSignal+0x1750>)
 8006f32:	485c      	ldr	r0, [pc, #368]	@ (80070a4 <SystemGetsSignal+0x1754>)
 8006f34:	f001 f9da 	bl	80082ec <OLED_DoTweenObject>

                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8006f38:	4b4d      	ldr	r3, [pc, #308]	@ (8007070 <SystemGetsSignal+0x1720>)
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	f1c3 0202 	rsb	r2, r3, #2
 8006f40:	4613      	mov	r3, r2
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	4413      	add	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	3303      	adds	r3, #3
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7f9 f9c9 	bl	80002e4 <__aeabi_i2f>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2204      	movs	r2, #4
 8006f56:	9201      	str	r2, [sp, #4]
 8006f58:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006f5c:	9200      	str	r2, [sp, #0]
 8006f5e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006f62:	4951      	ldr	r1, [pc, #324]	@ (80070a8 <SystemGetsSignal+0x1758>)
 8006f64:	4851      	ldr	r0, [pc, #324]	@ (80070ac <SystemGetsSignal+0x175c>)
 8006f66:	f001 f9c1 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006f6a:	2064      	movs	r0, #100	@ 0x64
 8006f6c:	f002 f9fe 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8006f70:	4b3f      	ldr	r3, [pc, #252]	@ (8007070 <SystemGetsSignal+0x1720>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	f1c3 0203 	rsb	r2, r3, #3
 8006f78:	4613      	mov	r3, r2
 8006f7a:	005b      	lsls	r3, r3, #1
 8006f7c:	4413      	add	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4413      	add	r3, r2
 8006f82:	3303      	adds	r3, #3
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7f9 f9ad 	bl	80002e4 <__aeabi_i2f>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2204      	movs	r2, #4
 8006f8e:	9201      	str	r2, [sp, #4]
 8006f90:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006f94:	9200      	str	r2, [sp, #0]
 8006f96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006f9a:	4945      	ldr	r1, [pc, #276]	@ (80070b0 <SystemGetsSignal+0x1760>)
 8006f9c:	4843      	ldr	r0, [pc, #268]	@ (80070ac <SystemGetsSignal+0x175c>)
 8006f9e:	f001 f9a5 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006fa2:	2064      	movs	r0, #100	@ 0x64
 8006fa4:	f002 f9e2 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8006fa8:	4b31      	ldr	r3, [pc, #196]	@ (8007070 <SystemGetsSignal+0x1720>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	f1c3 0204 	rsb	r2, r3, #4
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	005b      	lsls	r3, r3, #1
 8006fb4:	4413      	add	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	3303      	adds	r3, #3
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7f9 f991 	bl	80002e4 <__aeabi_i2f>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2204      	movs	r2, #4
 8006fc6:	9201      	str	r2, [sp, #4]
 8006fc8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006fcc:	9200      	str	r2, [sp, #0]
 8006fce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006fd2:	4938      	ldr	r1, [pc, #224]	@ (80070b4 <SystemGetsSignal+0x1764>)
 8006fd4:	4835      	ldr	r0, [pc, #212]	@ (80070ac <SystemGetsSignal+0x175c>)
 8006fd6:	f001 f989 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8006fda:	2064      	movs	r0, #100	@ 0x64
 8006fdc:	f002 f9c6 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8006fe0:	4b23      	ldr	r3, [pc, #140]	@ (8007070 <SystemGetsSignal+0x1720>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	f1c3 0205 	rsb	r2, r3, #5
 8006fe8:	4613      	mov	r3, r2
 8006fea:	005b      	lsls	r3, r3, #1
 8006fec:	4413      	add	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	3303      	adds	r3, #3
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7f9 f975 	bl	80002e4 <__aeabi_i2f>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2204      	movs	r2, #4
 8006ffe:	9201      	str	r2, [sp, #4]
 8007000:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8007004:	9200      	str	r2, [sp, #0]
 8007006:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800700a:	492b      	ldr	r1, [pc, #172]	@ (80070b8 <SystemGetsSignal+0x1768>)
 800700c:	4827      	ldr	r0, [pc, #156]	@ (80070ac <SystemGetsSignal+0x175c>)
 800700e:	f001 f96d 	bl	80082ec <OLED_DoTweenObject>
                HAL_Delay(100);
 8007012:	2064      	movs	r0, #100	@ 0x64
 8007014:	f002 f9aa 	bl	800936c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8007018:	4b15      	ldr	r3, [pc, #84]	@ (8007070 <SystemGetsSignal+0x1720>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	f1c3 0206 	rsb	r2, r3, #6
 8007020:	4613      	mov	r3, r2
 8007022:	005b      	lsls	r3, r3, #1
 8007024:	4413      	add	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	3303      	adds	r3, #3
 800702c:	4618      	mov	r0, r3
 800702e:	f7f9 f959 	bl	80002e4 <__aeabi_i2f>
 8007032:	4603      	mov	r3, r0
 8007034:	2204      	movs	r2, #4
 8007036:	9201      	str	r2, [sp, #4]
 8007038:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800703c:	9200      	str	r2, [sp, #0]
 800703e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007042:	491e      	ldr	r1, [pc, #120]	@ (80070bc <SystemGetsSignal+0x176c>)
 8007044:	4819      	ldr	r0, [pc, #100]	@ (80070ac <SystemGetsSignal+0x175c>)
 8007046:	f001 f951 	bl	80082ec <OLED_DoTweenObject>
                resetAnimation = true;
 800704a:	4b1d      	ldr	r3, [pc, #116]	@ (80070c0 <SystemGetsSignal+0x1770>)
 800704c:	2201      	movs	r2, #1
 800704e:	701a      	strb	r2, [r3, #0]
            }
// #pragma endregion 设置部分

            while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8007050:	bf00      	nop
 8007052:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007056:	481b      	ldr	r0, [pc, #108]	@ (80070c4 <SystemGetsSignal+0x1774>)
 8007058:	f002 fd9e 	bl	8009b98 <HAL_GPIO_ReadPin>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d0f7      	beq.n	8007052 <SystemGetsSignal+0x1702>
                // 等待按钮释放
                // 这里肯定会导致fps的下降233
            }
        }
    }
}
 8007062:	bf00      	nop
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	2000043c 	.word	0x2000043c
 8007070:	2000043d 	.word	0x2000043d
 8007074:	20001034 	.word	0x20001034
 8007078:	20001036 	.word	0x20001036
 800707c:	42600000 	.word	0x42600000
 8007080:	0800e578 	.word	0x0800e578
 8007084:	20003804 	.word	0x20003804
 8007088:	c1200000 	.word	0xc1200000
 800708c:	c2b40000 	.word	0xc2b40000
 8007090:	0800e63c 	.word	0x0800e63c
 8007094:	20002628 	.word	0x20002628
 8007098:	40400000 	.word	0x40400000
 800709c:	0800e644 	.word	0x0800e644
 80070a0:	0800e608 	.word	0x0800e608
 80070a4:	20003df8 	.word	0x20003df8
 80070a8:	0800e6d8 	.word	0x0800e6d8
 80070ac:	2000144c 	.word	0x2000144c
 80070b0:	0800e6e4 	.word	0x0800e6e4
 80070b4:	0800e6f0 	.word	0x0800e6f0
 80070b8:	0800e700 	.word	0x0800e700
 80070bc:	0800e710 	.word	0x0800e710
 80070c0:	20001037 	.word	0x20001037
 80070c4:	40010c00 	.word	0x40010c00

080070c8 <OLED_EnableDiffMode>:
    }
}

// 启用差分更新模式
void OLED_EnableDiffMode(uint8_t enable)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	4603      	mov	r3, r0
 80070d0:	71fb      	strb	r3, [r7, #7]
    diff_mode_enabled = enable;
 80070d2:	4a09      	ldr	r2, [pc, #36]	@ (80070f8 <OLED_EnableDiffMode+0x30>)
 80070d4:	79fb      	ldrb	r3, [r7, #7]
 80070d6:	7013      	strb	r3, [r2, #0]
    if (enable)
 80070d8:	79fb      	ldrb	r3, [r7, #7]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d008      	beq.n	80070f0 <OLED_EnableDiffMode+0x28>
    {
        memcpy(OLED_PrevBuffer, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES);
 80070de:	4a07      	ldr	r2, [pc, #28]	@ (80070fc <OLED_EnableDiffMode+0x34>)
 80070e0:	4b07      	ldr	r3, [pc, #28]	@ (8007100 <OLED_EnableDiffMode+0x38>)
 80070e2:	4610      	mov	r0, r2
 80070e4:	4619      	mov	r1, r3
 80070e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070ea:	461a      	mov	r2, r3
 80070ec:	f004 ffc5 	bl	800c07a <memcpy>
    }
}
 80070f0:	bf00      	nop
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	2000143c 	.word	0x2000143c
 80070fc:	2000103c 	.word	0x2000103c
 8007100:	20000754 	.word	0x20000754

08007104 <OLED_EnableFastUpdate>:

// 设置快速更新模式
void OLED_EnableFastUpdate(uint8_t enable)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	71fb      	strb	r3, [r7, #7]
    fast_update_enabled = enable;
 800710e:	4a04      	ldr	r2, [pc, #16]	@ (8007120 <OLED_EnableFastUpdate+0x1c>)
 8007110:	79fb      	ldrb	r3, [r7, #7]
 8007112:	7013      	strb	r3, [r2, #0]
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	bc80      	pop	{r7}
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	20000442 	.word	0x20000442

08007124 <OLED_SmartUpdate>:

// 智能更新显示
// 选择性更新脏页，以提高帧率
void OLED_SmartUpdate(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
    // 如果OLED/DMA忙，直接返回
    if (OLED_IsBusy())
 800712a:	f7fb fa15 	bl	8002558 <OLED_IsBusy>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	f040 8082 	bne.w	800723a <OLED_SmartUpdate+0x116>
    {
        return;
    }

    // 检查是否有脏页需要更新
    uint8_t has_dirty = 0;
 8007136:	2300      	movs	r3, #0
 8007138:	73fb      	strb	r3, [r7, #15]
    uint8_t first_dirty = 255;
 800713a:	23ff      	movs	r3, #255	@ 0xff
 800713c:	73bb      	strb	r3, [r7, #14]
    uint8_t last_dirty = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	737b      	strb	r3, [r7, #13]

    // 如果启用了差分更新，检查哪些页已经变化
    if (diff_mode_enabled)
 8007142:	4b40      	ldr	r3, [pc, #256]	@ (8007244 <OLED_SmartUpdate+0x120>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d046      	beq.n	80071d8 <OLED_SmartUpdate+0xb4>
    {
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 800714a:	2300      	movs	r3, #0
 800714c:	733b      	strb	r3, [r7, #12]
 800714e:	e03f      	b.n	80071d0 <OLED_SmartUpdate+0xac>
        {
            // 检查此页中是否有任何字节发生变化
            uint8_t page_changed = 0;
 8007150:	2300      	movs	r3, #0
 8007152:	72fb      	strb	r3, [r7, #11]
            uint16_t start_idx = page * OLED_WIDTH;
 8007154:	7b3b      	ldrb	r3, [r7, #12]
 8007156:	b29b      	uxth	r3, r3
 8007158:	01db      	lsls	r3, r3, #7
 800715a:	80bb      	strh	r3, [r7, #4]

            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 800715c:	2300      	movs	r3, #0
 800715e:	813b      	strh	r3, [r7, #8]
 8007160:	e015      	b.n	800718e <OLED_SmartUpdate+0x6a>
            {
                if (OLED_BackBuffer[start_idx + i] != OLED_PrevBuffer[start_idx + i])
 8007162:	88ba      	ldrh	r2, [r7, #4]
 8007164:	893b      	ldrh	r3, [r7, #8]
 8007166:	4413      	add	r3, r2
 8007168:	4a37      	ldr	r2, [pc, #220]	@ (8007248 <OLED_SmartUpdate+0x124>)
 800716a:	5cd2      	ldrb	r2, [r2, r3]
 800716c:	88b9      	ldrh	r1, [r7, #4]
 800716e:	893b      	ldrh	r3, [r7, #8]
 8007170:	440b      	add	r3, r1
 8007172:	4936      	ldr	r1, [pc, #216]	@ (800724c <OLED_SmartUpdate+0x128>)
 8007174:	5ccb      	ldrb	r3, [r1, r3]
 8007176:	429a      	cmp	r2, r3
 8007178:	d006      	beq.n	8007188 <OLED_SmartUpdate+0x64>
                {
                    page_changed = 1;
 800717a:	2301      	movs	r3, #1
 800717c:	72fb      	strb	r3, [r7, #11]
                    oled_dirty_pages[page] = 1;
 800717e:	7b3b      	ldrb	r3, [r7, #12]
 8007180:	4a33      	ldr	r2, [pc, #204]	@ (8007250 <OLED_SmartUpdate+0x12c>)
 8007182:	2101      	movs	r1, #1
 8007184:	54d1      	strb	r1, [r2, r3]
                    break;
 8007186:	e005      	b.n	8007194 <OLED_SmartUpdate+0x70>
            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 8007188:	893b      	ldrh	r3, [r7, #8]
 800718a:	3301      	adds	r3, #1
 800718c:	813b      	strh	r3, [r7, #8]
 800718e:	893b      	ldrh	r3, [r7, #8]
 8007190:	2b7f      	cmp	r3, #127	@ 0x7f
 8007192:	d9e6      	bls.n	8007162 <OLED_SmartUpdate+0x3e>
                }
            }

            if (page_changed)
 8007194:	7afb      	ldrb	r3, [r7, #11]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d017      	beq.n	80071ca <OLED_SmartUpdate+0xa6>
            {
                has_dirty = 1;
 800719a:	2301      	movs	r3, #1
 800719c:	73fb      	strb	r3, [r7, #15]
                if (page < first_dirty)
 800719e:	7b3a      	ldrb	r2, [r7, #12]
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d201      	bcs.n	80071aa <OLED_SmartUpdate+0x86>
                    first_dirty = page;
 80071a6:	7b3b      	ldrb	r3, [r7, #12]
 80071a8:	73bb      	strb	r3, [r7, #14]
                if (page > last_dirty)
 80071aa:	7b3a      	ldrb	r2, [r7, #12]
 80071ac:	7b7b      	ldrb	r3, [r7, #13]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d901      	bls.n	80071b6 <OLED_SmartUpdate+0x92>
                    last_dirty = page;
 80071b2:	7b3b      	ldrb	r3, [r7, #12]
 80071b4:	737b      	strb	r3, [r7, #13]

                // 更新上一帧缓存
                memcpy(
 80071b6:	88bb      	ldrh	r3, [r7, #4]
 80071b8:	4a24      	ldr	r2, [pc, #144]	@ (800724c <OLED_SmartUpdate+0x128>)
 80071ba:	1898      	adds	r0, r3, r2
 80071bc:	88bb      	ldrh	r3, [r7, #4]
 80071be:	4a22      	ldr	r2, [pc, #136]	@ (8007248 <OLED_SmartUpdate+0x124>)
 80071c0:	4413      	add	r3, r2
 80071c2:	2280      	movs	r2, #128	@ 0x80
 80071c4:	4619      	mov	r1, r3
 80071c6:	f004 ff58 	bl	800c07a <memcpy>
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 80071ca:	7b3b      	ldrb	r3, [r7, #12]
 80071cc:	3301      	adds	r3, #1
 80071ce:	733b      	strb	r3, [r7, #12]
 80071d0:	7b3b      	ldrb	r3, [r7, #12]
 80071d2:	2b07      	cmp	r3, #7
 80071d4:	d9bc      	bls.n	8007150 <OLED_SmartUpdate+0x2c>
 80071d6:	e01c      	b.n	8007212 <OLED_SmartUpdate+0xee>
        }
    }
    else
    {
        // 如果未启用差分更新，使用脏页标记
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 80071d8:	2300      	movs	r3, #0
 80071da:	71fb      	strb	r3, [r7, #7]
 80071dc:	e016      	b.n	800720c <OLED_SmartUpdate+0xe8>
        {
            if (oled_dirty_pages[i])
 80071de:	79fb      	ldrb	r3, [r7, #7]
 80071e0:	4a1b      	ldr	r2, [pc, #108]	@ (8007250 <OLED_SmartUpdate+0x12c>)
 80071e2:	5cd3      	ldrb	r3, [r2, r3]
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00d      	beq.n	8007206 <OLED_SmartUpdate+0xe2>
            {
                has_dirty = 1;
 80071ea:	2301      	movs	r3, #1
 80071ec:	73fb      	strb	r3, [r7, #15]
                if (i < first_dirty)
 80071ee:	79fa      	ldrb	r2, [r7, #7]
 80071f0:	7bbb      	ldrb	r3, [r7, #14]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d201      	bcs.n	80071fa <OLED_SmartUpdate+0xd6>
                    first_dirty = i;
 80071f6:	79fb      	ldrb	r3, [r7, #7]
 80071f8:	73bb      	strb	r3, [r7, #14]
                if (i > last_dirty)
 80071fa:	79fa      	ldrb	r2, [r7, #7]
 80071fc:	7b7b      	ldrb	r3, [r7, #13]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d901      	bls.n	8007206 <OLED_SmartUpdate+0xe2>
                    last_dirty = i;
 8007202:	79fb      	ldrb	r3, [r7, #7]
 8007204:	737b      	strb	r3, [r7, #13]
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 8007206:	79fb      	ldrb	r3, [r7, #7]
 8007208:	3301      	adds	r3, #1
 800720a:	71fb      	strb	r3, [r7, #7]
 800720c:	79fb      	ldrb	r3, [r7, #7]
 800720e:	2b07      	cmp	r3, #7
 8007210:	d9e5      	bls.n	80071de <OLED_SmartUpdate+0xba>
            }
        }
    }

    // 如果有脏页，只更新这些页
    if (has_dirty && fast_update_enabled)
 8007212:	7bfb      	ldrb	r3, [r7, #15]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00a      	beq.n	800722e <OLED_SmartUpdate+0x10a>
 8007218:	4b0e      	ldr	r3, [pc, #56]	@ (8007254 <OLED_SmartUpdate+0x130>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d006      	beq.n	800722e <OLED_SmartUpdate+0x10a>
    {
        OLED_UpdateDisplayPartial(first_dirty, last_dirty);
 8007220:	7b7a      	ldrb	r2, [r7, #13]
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	4611      	mov	r1, r2
 8007226:	4618      	mov	r0, r3
 8007228:	f7fb fa16 	bl	8002658 <OLED_UpdateDisplayPartial>
 800722c:	e006      	b.n	800723c <OLED_SmartUpdate+0x118>
    }
    else if (has_dirty)
 800722e:	7bfb      	ldrb	r3, [r7, #15]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <OLED_SmartUpdate+0x118>
    {
        OLED_UpdateDisplayVSync();
 8007234:	f7fb f9b8 	bl	80025a8 <OLED_UpdateDisplayVSync>
 8007238:	e000      	b.n	800723c <OLED_SmartUpdate+0x118>
        return;
 800723a:	bf00      	nop
    }
}
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	2000143c 	.word	0x2000143c
 8007248:	20000754 	.word	0x20000754
 800724c:	2000103c 	.word	0x2000103c
 8007250:	2000074c 	.word	0x2000074c
 8007254:	20000442 	.word	0x20000442

08007258 <OLED_OptimizedDisplayFPS>:


// 显示FPS
void OLED_OptimizedDisplayFPS(int16_t x, int16_t y)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	4603      	mov	r3, r0
 8007260:	460a      	mov	r2, r1
 8007262:	80fb      	strh	r3, [r7, #6]
 8007264:	4613      	mov	r3, r2
 8007266:	80bb      	strh	r3, [r7, #4]
    static uint32_t last_time = 0;
    static uint32_t frames = 0;
    static uint32_t fps = 0;
    static char fps_str[16] = "FPS:0";

    frames++;
 8007268:	4b15      	ldr	r3, [pc, #84]	@ (80072c0 <OLED_OptimizedDisplayFPS+0x68>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	3301      	adds	r3, #1
 800726e:	4a14      	ldr	r2, [pc, #80]	@ (80072c0 <OLED_OptimizedDisplayFPS+0x68>)
 8007270:	6013      	str	r3, [r2, #0]

    // 每秒更新一次FPS
    uint32_t current_time = HAL_GetTick();
 8007272:	f002 f871 	bl	8009358 <HAL_GetTick>
 8007276:	60f8      	str	r0, [r7, #12]
    if (current_time - last_time >= 1000)
 8007278:	4b12      	ldr	r3, [pc, #72]	@ (80072c4 <OLED_OptimizedDisplayFPS+0x6c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007284:	d310      	bcc.n	80072a8 <OLED_OptimizedDisplayFPS+0x50>
    {
        fps = frames;
 8007286:	4b0e      	ldr	r3, [pc, #56]	@ (80072c0 <OLED_OptimizedDisplayFPS+0x68>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a0f      	ldr	r2, [pc, #60]	@ (80072c8 <OLED_OptimizedDisplayFPS+0x70>)
 800728c:	6013      	str	r3, [r2, #0]
        sprintf(fps_str, "FPS:%d", fps);
 800728e:	4b0e      	ldr	r3, [pc, #56]	@ (80072c8 <OLED_OptimizedDisplayFPS+0x70>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	461a      	mov	r2, r3
 8007294:	490d      	ldr	r1, [pc, #52]	@ (80072cc <OLED_OptimizedDisplayFPS+0x74>)
 8007296:	480e      	ldr	r0, [pc, #56]	@ (80072d0 <OLED_OptimizedDisplayFPS+0x78>)
 8007298:	f004 fdfc 	bl	800be94 <siprintf>
        frames = 0;
 800729c:	4b08      	ldr	r3, [pc, #32]	@ (80072c0 <OLED_OptimizedDisplayFPS+0x68>)
 800729e:	2200      	movs	r2, #0
 80072a0:	601a      	str	r2, [r3, #0]
        last_time = current_time;
 80072a2:	4a08      	ldr	r2, [pc, #32]	@ (80072c4 <OLED_OptimizedDisplayFPS+0x6c>)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6013      	str	r3, [r2, #0]
    }

    OLED_DisplayString(x, y, fps_str);
 80072a8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80072ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072b0:	4a07      	ldr	r2, [pc, #28]	@ (80072d0 <OLED_OptimizedDisplayFPS+0x78>)
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fb fd64 	bl	8002d80 <OLED_DisplayString>
 80072b8:	bf00      	nop
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	20001440 	.word	0x20001440
 80072c4:	20001444 	.word	0x20001444
 80072c8:	20001448 	.word	0x20001448
 80072cc:	0800e914 	.word	0x0800e914
 80072d0:	20000444 	.word	0x20000444

080072d4 <EaseLinear>:
#include "oled_ui.h"

#pragma region TWEENS // 动画缓动函数全部在这里定义

static float EaseLinear(float t)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
    return t;
 80072dc:	687b      	ldr	r3, [r7, #4]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bc80      	pop	{r7}
 80072e6:	4770      	bx	lr

080072e8 <EaseInQuad>:

static float EaseInQuad(float t)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
    return t * t;
 80072f0:	6879      	ldr	r1, [r7, #4]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7f9 f84a 	bl	800038c <__aeabi_fmul>
 80072f8:	4603      	mov	r3, r0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <EaseOutQuad>:

static float EaseOutQuad(float t)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b082      	sub	sp, #8
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
    return t * (2 - t);
 800730a:	6879      	ldr	r1, [r7, #4]
 800730c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8007310:	f7f8 ff32 	bl	8000178 <__aeabi_fsub>
 8007314:	4603      	mov	r3, r0
 8007316:	6879      	ldr	r1, [r7, #4]
 8007318:	4618      	mov	r0, r3
 800731a:	f7f9 f837 	bl	800038c <__aeabi_fmul>
 800731e:	4603      	mov	r3, r0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <EaseInOutQuad>:

static float EaseInOutQuad(float t)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 2 * t * t : -1 + (4 - 2 * t) * t;
 8007330:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7f9 f9c7 	bl	80006c8 <__aeabi_fcmplt>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00b      	beq.n	8007358 <EaseInOutQuad+0x30>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4619      	mov	r1, r3
 8007344:	4618      	mov	r0, r3
 8007346:	f7f8 ff19 	bl	800017c <__addsf3>
 800734a:	4603      	mov	r3, r0
 800734c:	6879      	ldr	r1, [r7, #4]
 800734e:	4618      	mov	r0, r3
 8007350:	f7f9 f81c 	bl	800038c <__aeabi_fmul>
 8007354:	4603      	mov	r3, r0
 8007356:	e016      	b.n	8007386 <EaseInOutQuad+0x5e>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4619      	mov	r1, r3
 800735c:	4618      	mov	r0, r3
 800735e:	f7f8 ff0d 	bl	800017c <__addsf3>
 8007362:	4603      	mov	r3, r0
 8007364:	4619      	mov	r1, r3
 8007366:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 800736a:	f7f8 ff05 	bl	8000178 <__aeabi_fsub>
 800736e:	4603      	mov	r3, r0
 8007370:	6879      	ldr	r1, [r7, #4]
 8007372:	4618      	mov	r0, r3
 8007374:	f7f9 f80a 	bl	800038c <__aeabi_fmul>
 8007378:	4603      	mov	r3, r0
 800737a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800737e:	4618      	mov	r0, r3
 8007380:	f7f8 fefa 	bl	8000178 <__aeabi_fsub>
 8007384:	4603      	mov	r3, r0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <EaseInCubic>:

static float EaseInCubic(float t)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b082      	sub	sp, #8
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
    return t * t * t;
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f7f8 fff7 	bl	800038c <__aeabi_fmul>
 800739e:	4603      	mov	r3, r0
 80073a0:	6879      	ldr	r1, [r7, #4]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7f8 fff2 	bl	800038c <__aeabi_fmul>
 80073a8:	4603      	mov	r3, r0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <EaseOutCubic>:

static float EaseOutCubic(float t)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b084      	sub	sp, #16
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
    float t1 = t - 1;
 80073ba:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7f8 feda 	bl	8000178 <__aeabi_fsub>
 80073c4:	4603      	mov	r3, r0
 80073c6:	60fb      	str	r3, [r7, #12]
    return t1 * t1 * t1 + 1;
 80073c8:	68f9      	ldr	r1, [r7, #12]
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f7f8 ffde 	bl	800038c <__aeabi_fmul>
 80073d0:	4603      	mov	r3, r0
 80073d2:	68f9      	ldr	r1, [r7, #12]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7f8 ffd9 	bl	800038c <__aeabi_fmul>
 80073da:	4603      	mov	r3, r0
 80073dc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7f8 fecb 	bl	800017c <__addsf3>
 80073e6:	4603      	mov	r3, r0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <EaseInOutCubic>:

static float EaseInOutCubic(float t)
{
 80073f0:	b590      	push	{r4, r7, lr}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
 80073f8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7f9 f963 	bl	80006c8 <__aeabi_fcmplt>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d010      	beq.n	800742a <EaseInOutCubic+0x3a>
 8007408:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7f8 ffbd 	bl	800038c <__aeabi_fmul>
 8007412:	4603      	mov	r3, r0
 8007414:	6879      	ldr	r1, [r7, #4]
 8007416:	4618      	mov	r0, r3
 8007418:	f7f8 ffb8 	bl	800038c <__aeabi_fmul>
 800741c:	4603      	mov	r3, r0
 800741e:	6879      	ldr	r1, [r7, #4]
 8007420:	4618      	mov	r0, r3
 8007422:	f7f8 ffb3 	bl	800038c <__aeabi_fmul>
 8007426:	4603      	mov	r3, r0
 8007428:	e02f      	b.n	800748a <EaseInOutCubic+0x9a>
 800742a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7f8 fea2 	bl	8000178 <__aeabi_fsub>
 8007434:	4603      	mov	r3, r0
 8007436:	461c      	mov	r4, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4619      	mov	r1, r3
 800743c:	4618      	mov	r0, r3
 800743e:	f7f8 fe9d 	bl	800017c <__addsf3>
 8007442:	4603      	mov	r3, r0
 8007444:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007448:	4618      	mov	r0, r3
 800744a:	f7f8 fe95 	bl	8000178 <__aeabi_fsub>
 800744e:	4603      	mov	r3, r0
 8007450:	4619      	mov	r1, r3
 8007452:	4620      	mov	r0, r4
 8007454:	f7f8 ff9a 	bl	800038c <__aeabi_fmul>
 8007458:	4603      	mov	r3, r0
 800745a:	461c      	mov	r4, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4619      	mov	r1, r3
 8007460:	4618      	mov	r0, r3
 8007462:	f7f8 fe8b 	bl	800017c <__addsf3>
 8007466:	4603      	mov	r3, r0
 8007468:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800746c:	4618      	mov	r0, r3
 800746e:	f7f8 fe83 	bl	8000178 <__aeabi_fsub>
 8007472:	4603      	mov	r3, r0
 8007474:	4619      	mov	r1, r3
 8007476:	4620      	mov	r0, r4
 8007478:	f7f8 ff88 	bl	800038c <__aeabi_fmul>
 800747c:	4603      	mov	r3, r0
 800747e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007482:	4618      	mov	r0, r3
 8007484:	f7f8 fe7a 	bl	800017c <__addsf3>
 8007488:	4603      	mov	r3, r0
}
 800748a:	4618      	mov	r0, r3
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	bd90      	pop	{r4, r7, pc}
	...

08007494 <EaseInExpo>:

// 在现有EaseType_t枚举中添加这些新类型
// 指数缓动
static float EaseInExpo(float t)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
    return (t == 0) ? 0 : powf(2, 10 * (t - 1));
 800749c:	f04f 0100 	mov.w	r1, #0
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f7f9 f907 	bl	80006b4 <__aeabi_fcmpeq>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d111      	bne.n	80074d0 <EaseInExpo+0x3c>
 80074ac:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7f8 fe61 	bl	8000178 <__aeabi_fsub>
 80074b6:	4603      	mov	r3, r0
 80074b8:	4908      	ldr	r1, [pc, #32]	@ (80074dc <EaseInExpo+0x48>)
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7f8 ff66 	bl	800038c <__aeabi_fmul>
 80074c0:	4603      	mov	r3, r0
 80074c2:	4619      	mov	r1, r3
 80074c4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80074c8:	f005 fdb4 	bl	800d034 <powf>
 80074cc:	4603      	mov	r3, r0
 80074ce:	e001      	b.n	80074d4 <EaseInExpo+0x40>
 80074d0:	f04f 0300 	mov.w	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	41200000 	.word	0x41200000

080074e0 <EaseOutExpo>:

static float EaseOutExpo(float t)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
    return (t == 1) ? 1 : (1 - powf(2, -10 * t));
 80074e8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7f9 f8e1 	bl	80006b4 <__aeabi_fcmpeq>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d111      	bne.n	800751c <EaseOutExpo+0x3c>
 80074f8:	490b      	ldr	r1, [pc, #44]	@ (8007528 <EaseOutExpo+0x48>)
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7f8 ff46 	bl	800038c <__aeabi_fmul>
 8007500:	4603      	mov	r3, r0
 8007502:	4619      	mov	r1, r3
 8007504:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8007508:	f005 fd94 	bl	800d034 <powf>
 800750c:	4603      	mov	r3, r0
 800750e:	4619      	mov	r1, r3
 8007510:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007514:	f7f8 fe30 	bl	8000178 <__aeabi_fsub>
 8007518:	4603      	mov	r3, r0
 800751a:	e001      	b.n	8007520 <EaseOutExpo+0x40>
 800751c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 8007520:	4618      	mov	r0, r3
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	c1200000 	.word	0xc1200000

0800752c <EaseInOutExpo>:

static float EaseInOutExpo(float t)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
    if (t == 0)
 8007534:	f04f 0100 	mov.w	r1, #0
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f7f9 f8bb 	bl	80006b4 <__aeabi_fcmpeq>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <EaseInOutExpo+0x1e>
        return 0;
 8007544:	f04f 0300 	mov.w	r3, #0
 8007548:	e045      	b.n	80075d6 <EaseInOutExpo+0xaa>
    if (t == 1)
 800754a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7f9 f8b0 	bl	80006b4 <__aeabi_fcmpeq>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d002      	beq.n	8007560 <EaseInOutExpo+0x34>
        return 1;
 800755a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800755e:	e03a      	b.n	80075d6 <EaseInOutExpo+0xaa>
    if (t < 0.5f)
 8007560:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f7f9 f8af 	bl	80006c8 <__aeabi_fcmplt>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d016      	beq.n	800759e <EaseInOutExpo+0x72>
        return powf(2, 20 * t - 10) / 2;
 8007570:	491b      	ldr	r1, [pc, #108]	@ (80075e0 <EaseInOutExpo+0xb4>)
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7f8 ff0a 	bl	800038c <__aeabi_fmul>
 8007578:	4603      	mov	r3, r0
 800757a:	491a      	ldr	r1, [pc, #104]	@ (80075e4 <EaseInOutExpo+0xb8>)
 800757c:	4618      	mov	r0, r3
 800757e:	f7f8 fdfb 	bl	8000178 <__aeabi_fsub>
 8007582:	4603      	mov	r3, r0
 8007584:	4619      	mov	r1, r3
 8007586:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800758a:	f005 fd53 	bl	800d034 <powf>
 800758e:	4603      	mov	r3, r0
 8007590:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007594:	4618      	mov	r0, r3
 8007596:	f7f8 ffad 	bl	80004f4 <__aeabi_fdiv>
 800759a:	4603      	mov	r3, r0
 800759c:	e01b      	b.n	80075d6 <EaseInOutExpo+0xaa>
    return (2 - powf(2, -20 * t + 10)) / 2;
 800759e:	4912      	ldr	r1, [pc, #72]	@ (80075e8 <EaseInOutExpo+0xbc>)
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7f8 fef3 	bl	800038c <__aeabi_fmul>
 80075a6:	4603      	mov	r3, r0
 80075a8:	490e      	ldr	r1, [pc, #56]	@ (80075e4 <EaseInOutExpo+0xb8>)
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7f8 fde6 	bl	800017c <__addsf3>
 80075b0:	4603      	mov	r3, r0
 80075b2:	4619      	mov	r1, r3
 80075b4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80075b8:	f005 fd3c 	bl	800d034 <powf>
 80075bc:	4603      	mov	r3, r0
 80075be:	4619      	mov	r1, r3
 80075c0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80075c4:	f7f8 fdd8 	bl	8000178 <__aeabi_fsub>
 80075c8:	4603      	mov	r3, r0
 80075ca:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7f8 ff90 	bl	80004f4 <__aeabi_fdiv>
 80075d4:	4603      	mov	r3, r0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	41a00000 	.word	0x41a00000
 80075e4:	41200000 	.word	0x41200000
 80075e8:	c1a00000 	.word	0xc1a00000

080075ec <EaseInCirc>:

// 圆形曲线缓动
static float EaseInCirc(float t)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
    return 1 - sqrtf(1 - t * t);
 80075f4:	6879      	ldr	r1, [r7, #4]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7f8 fec8 	bl	800038c <__aeabi_fmul>
 80075fc:	4603      	mov	r3, r0
 80075fe:	4619      	mov	r1, r3
 8007600:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007604:	f7f8 fdb8 	bl	8000178 <__aeabi_fsub>
 8007608:	4603      	mov	r3, r0
 800760a:	4618      	mov	r0, r3
 800760c:	f005 fd5f 	bl	800d0ce <sqrtf>
 8007610:	4603      	mov	r3, r0
 8007612:	4619      	mov	r1, r3
 8007614:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007618:	f7f8 fdae 	bl	8000178 <__aeabi_fsub>
 800761c:	4603      	mov	r3, r0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <EaseOutCirc>:

static float EaseOutCirc(float t)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b082      	sub	sp, #8
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
    return sqrtf(1 - powf(t - 1, 2));
 800762e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7f8 fda0 	bl	8000178 <__aeabi_fsub>
 8007638:	4603      	mov	r3, r0
 800763a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800763e:	4618      	mov	r0, r3
 8007640:	f005 fcf8 	bl	800d034 <powf>
 8007644:	4603      	mov	r3, r0
 8007646:	4619      	mov	r1, r3
 8007648:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800764c:	f7f8 fd94 	bl	8000178 <__aeabi_fsub>
 8007650:	4603      	mov	r3, r0
 8007652:	4618      	mov	r0, r3
 8007654:	f005 fd3b 	bl	800d0ce <sqrtf>
 8007658:	4603      	mov	r3, r0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <EaseInOutCirc>:

static float EaseInOutCirc(float t)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b082      	sub	sp, #8
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 800766a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7f9 f82a 	bl	80006c8 <__aeabi_fcmplt>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d022      	beq.n	80076c0 <EaseInOutCirc+0x5e>
        return (1 - sqrtf(1 - powf(2 * t, 2))) / 2;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4619      	mov	r1, r3
 800767e:	4618      	mov	r0, r3
 8007680:	f7f8 fd7c 	bl	800017c <__addsf3>
 8007684:	4603      	mov	r3, r0
 8007686:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800768a:	4618      	mov	r0, r3
 800768c:	f005 fcd2 	bl	800d034 <powf>
 8007690:	4603      	mov	r3, r0
 8007692:	4619      	mov	r1, r3
 8007694:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007698:	f7f8 fd6e 	bl	8000178 <__aeabi_fsub>
 800769c:	4603      	mov	r3, r0
 800769e:	4618      	mov	r0, r3
 80076a0:	f005 fd15 	bl	800d0ce <sqrtf>
 80076a4:	4603      	mov	r3, r0
 80076a6:	4619      	mov	r1, r3
 80076a8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80076ac:	f7f8 fd64 	bl	8000178 <__aeabi_fsub>
 80076b0:	4603      	mov	r3, r0
 80076b2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7f8 ff1c 	bl	80004f4 <__aeabi_fdiv>
 80076bc:	4603      	mov	r3, r0
 80076be:	e027      	b.n	8007710 <EaseInOutCirc+0xae>
    return (sqrtf(1 - powf(-2 * t + 2, 2)) + 1) / 2;
 80076c0:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7f8 fe61 	bl	800038c <__aeabi_fmul>
 80076ca:	4603      	mov	r3, r0
 80076cc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7f8 fd53 	bl	800017c <__addsf3>
 80076d6:	4603      	mov	r3, r0
 80076d8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80076dc:	4618      	mov	r0, r3
 80076de:	f005 fca9 	bl	800d034 <powf>
 80076e2:	4603      	mov	r3, r0
 80076e4:	4619      	mov	r1, r3
 80076e6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80076ea:	f7f8 fd45 	bl	8000178 <__aeabi_fsub>
 80076ee:	4603      	mov	r3, r0
 80076f0:	4618      	mov	r0, r3
 80076f2:	f005 fcec 	bl	800d0ce <sqrtf>
 80076f6:	4603      	mov	r3, r0
 80076f8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7f8 fd3d 	bl	800017c <__addsf3>
 8007702:	4603      	mov	r3, r0
 8007704:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007708:	4618      	mov	r0, r3
 800770a:	f7f8 fef3 	bl	80004f4 <__aeabi_fdiv>
 800770e:	4603      	mov	r3, r0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <EaseInElastic>:

// 弹性缓动
static float EaseInElastic(float t)
{
 8007718:	b590      	push	{r4, r7, lr}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 8007720:	4b22      	ldr	r3, [pc, #136]	@ (80077ac <EaseInElastic+0x94>)
 8007722:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8007724:	f04f 0100 	mov.w	r1, #0
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7f8 ffc3 	bl	80006b4 <__aeabi_fcmpeq>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d002      	beq.n	800773a <EaseInElastic+0x22>
        return 0;
 8007734:	f04f 0300 	mov.w	r3, #0
 8007738:	e034      	b.n	80077a4 <EaseInElastic+0x8c>
    if (t == 1)
 800773a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7f8 ffb8 	bl	80006b4 <__aeabi_fcmpeq>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d002      	beq.n	8007750 <EaseInElastic+0x38>
        return 1;
 800774a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800774e:	e029      	b.n	80077a4 <EaseInElastic+0x8c>
    return -powf(2, 10 * t - 10) * sinf((t * 10 - 10.75f) * c4);
 8007750:	4917      	ldr	r1, [pc, #92]	@ (80077b0 <EaseInElastic+0x98>)
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7f8 fe1a 	bl	800038c <__aeabi_fmul>
 8007758:	4603      	mov	r3, r0
 800775a:	4915      	ldr	r1, [pc, #84]	@ (80077b0 <EaseInElastic+0x98>)
 800775c:	4618      	mov	r0, r3
 800775e:	f7f8 fd0b 	bl	8000178 <__aeabi_fsub>
 8007762:	4603      	mov	r3, r0
 8007764:	4619      	mov	r1, r3
 8007766:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800776a:	f005 fc63 	bl	800d034 <powf>
 800776e:	4603      	mov	r3, r0
 8007770:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8007774:	490e      	ldr	r1, [pc, #56]	@ (80077b0 <EaseInElastic+0x98>)
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7f8 fe08 	bl	800038c <__aeabi_fmul>
 800777c:	4603      	mov	r3, r0
 800777e:	490d      	ldr	r1, [pc, #52]	@ (80077b4 <EaseInElastic+0x9c>)
 8007780:	4618      	mov	r0, r3
 8007782:	f7f8 fcf9 	bl	8000178 <__aeabi_fsub>
 8007786:	4603      	mov	r3, r0
 8007788:	68f9      	ldr	r1, [r7, #12]
 800778a:	4618      	mov	r0, r3
 800778c:	f7f8 fdfe 	bl	800038c <__aeabi_fmul>
 8007790:	4603      	mov	r3, r0
 8007792:	4618      	mov	r0, r3
 8007794:	f005 fcee 	bl	800d174 <sinf>
 8007798:	4603      	mov	r3, r0
 800779a:	4619      	mov	r1, r3
 800779c:	4620      	mov	r0, r4
 800779e:	f7f8 fdf5 	bl	800038c <__aeabi_fmul>
 80077a2:	4603      	mov	r3, r0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd90      	pop	{r4, r7, pc}
 80077ac:	40060a8b 	.word	0x40060a8b
 80077b0:	41200000 	.word	0x41200000
 80077b4:	412c0000 	.word	0x412c0000

080077b8 <EaseOutElastic>:

static float EaseOutElastic(float t)
{
 80077b8:	b590      	push	{r4, r7, lr}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 80077c0:	4b22      	ldr	r3, [pc, #136]	@ (800784c <EaseOutElastic+0x94>)
 80077c2:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 80077c4:	f04f 0100 	mov.w	r1, #0
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f7f8 ff73 	bl	80006b4 <__aeabi_fcmpeq>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d002      	beq.n	80077da <EaseOutElastic+0x22>
        return 0;
 80077d4:	f04f 0300 	mov.w	r3, #0
 80077d8:	e034      	b.n	8007844 <EaseOutElastic+0x8c>
    if (t == 1)
 80077da:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7f8 ff68 	bl	80006b4 <__aeabi_fcmpeq>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d002      	beq.n	80077f0 <EaseOutElastic+0x38>
        return 1;
 80077ea:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80077ee:	e029      	b.n	8007844 <EaseOutElastic+0x8c>
    return powf(2, -10 * t) * sinf((t * 10 - 0.75f) * c4) + 1;
 80077f0:	4917      	ldr	r1, [pc, #92]	@ (8007850 <EaseOutElastic+0x98>)
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7f8 fdca 	bl	800038c <__aeabi_fmul>
 80077f8:	4603      	mov	r3, r0
 80077fa:	4619      	mov	r1, r3
 80077fc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8007800:	f005 fc18 	bl	800d034 <powf>
 8007804:	4604      	mov	r4, r0
 8007806:	4913      	ldr	r1, [pc, #76]	@ (8007854 <EaseOutElastic+0x9c>)
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f7f8 fdbf 	bl	800038c <__aeabi_fmul>
 800780e:	4603      	mov	r3, r0
 8007810:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8007814:	4618      	mov	r0, r3
 8007816:	f7f8 fcaf 	bl	8000178 <__aeabi_fsub>
 800781a:	4603      	mov	r3, r0
 800781c:	68f9      	ldr	r1, [r7, #12]
 800781e:	4618      	mov	r0, r3
 8007820:	f7f8 fdb4 	bl	800038c <__aeabi_fmul>
 8007824:	4603      	mov	r3, r0
 8007826:	4618      	mov	r0, r3
 8007828:	f005 fca4 	bl	800d174 <sinf>
 800782c:	4603      	mov	r3, r0
 800782e:	4619      	mov	r1, r3
 8007830:	4620      	mov	r0, r4
 8007832:	f7f8 fdab 	bl	800038c <__aeabi_fmul>
 8007836:	4603      	mov	r3, r0
 8007838:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800783c:	4618      	mov	r0, r3
 800783e:	f7f8 fc9d 	bl	800017c <__addsf3>
 8007842:	4603      	mov	r3, r0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	bd90      	pop	{r4, r7, pc}
 800784c:	40060a8b 	.word	0x40060a8b
 8007850:	c1200000 	.word	0xc1200000
 8007854:	41200000 	.word	0x41200000

08007858 <EaseInOutElastic>:

static float EaseInOutElastic(float t)
{
 8007858:	b590      	push	{r4, r7, lr}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
    const float c5 = (2 * 3.14159f) / 4.5f;
 8007860:	4b44      	ldr	r3, [pc, #272]	@ (8007974 <EaseInOutElastic+0x11c>)
 8007862:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8007864:	f04f 0100 	mov.w	r1, #0
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7f8 ff23 	bl	80006b4 <__aeabi_fcmpeq>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d002      	beq.n	800787a <EaseInOutElastic+0x22>
        return 0;
 8007874:	f04f 0300 	mov.w	r3, #0
 8007878:	e077      	b.n	800796a <EaseInOutElastic+0x112>
    if (t == 1)
 800787a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7f8 ff18 	bl	80006b4 <__aeabi_fcmpeq>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d002      	beq.n	8007890 <EaseInOutElastic+0x38>
        return 1;
 800788a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800788e:	e06c      	b.n	800796a <EaseInOutElastic+0x112>
    if (t < 0.5f)
 8007890:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7f8 ff17 	bl	80006c8 <__aeabi_fcmplt>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d030      	beq.n	8007902 <EaseInOutElastic+0xaa>
        return -(powf(2, 20 * t - 10) * sinf((20 * t - 11.125f) * c5)) / 2;
 80078a0:	4935      	ldr	r1, [pc, #212]	@ (8007978 <EaseInOutElastic+0x120>)
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7f8 fd72 	bl	800038c <__aeabi_fmul>
 80078a8:	4603      	mov	r3, r0
 80078aa:	4934      	ldr	r1, [pc, #208]	@ (800797c <EaseInOutElastic+0x124>)
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7f8 fc63 	bl	8000178 <__aeabi_fsub>
 80078b2:	4603      	mov	r3, r0
 80078b4:	4619      	mov	r1, r3
 80078b6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80078ba:	f005 fbbb 	bl	800d034 <powf>
 80078be:	4604      	mov	r4, r0
 80078c0:	492d      	ldr	r1, [pc, #180]	@ (8007978 <EaseInOutElastic+0x120>)
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7f8 fd62 	bl	800038c <__aeabi_fmul>
 80078c8:	4603      	mov	r3, r0
 80078ca:	492d      	ldr	r1, [pc, #180]	@ (8007980 <EaseInOutElastic+0x128>)
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7f8 fc53 	bl	8000178 <__aeabi_fsub>
 80078d2:	4603      	mov	r3, r0
 80078d4:	68f9      	ldr	r1, [r7, #12]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7f8 fd58 	bl	800038c <__aeabi_fmul>
 80078dc:	4603      	mov	r3, r0
 80078de:	4618      	mov	r0, r3
 80078e0:	f005 fc48 	bl	800d174 <sinf>
 80078e4:	4603      	mov	r3, r0
 80078e6:	4619      	mov	r1, r3
 80078e8:	4620      	mov	r0, r4
 80078ea:	f7f8 fd4f 	bl	800038c <__aeabi_fmul>
 80078ee:	4603      	mov	r3, r0
 80078f0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80078f4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7f8 fdfb 	bl	80004f4 <__aeabi_fdiv>
 80078fe:	4603      	mov	r3, r0
 8007900:	e033      	b.n	800796a <EaseInOutElastic+0x112>
    return (powf(2, -20 * t + 10) * sinf((20 * t - 11.125f) * c5)) / 2 + 1;
 8007902:	4920      	ldr	r1, [pc, #128]	@ (8007984 <EaseInOutElastic+0x12c>)
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f7f8 fd41 	bl	800038c <__aeabi_fmul>
 800790a:	4603      	mov	r3, r0
 800790c:	491b      	ldr	r1, [pc, #108]	@ (800797c <EaseInOutElastic+0x124>)
 800790e:	4618      	mov	r0, r3
 8007910:	f7f8 fc34 	bl	800017c <__addsf3>
 8007914:	4603      	mov	r3, r0
 8007916:	4619      	mov	r1, r3
 8007918:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800791c:	f005 fb8a 	bl	800d034 <powf>
 8007920:	4604      	mov	r4, r0
 8007922:	4915      	ldr	r1, [pc, #84]	@ (8007978 <EaseInOutElastic+0x120>)
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7f8 fd31 	bl	800038c <__aeabi_fmul>
 800792a:	4603      	mov	r3, r0
 800792c:	4914      	ldr	r1, [pc, #80]	@ (8007980 <EaseInOutElastic+0x128>)
 800792e:	4618      	mov	r0, r3
 8007930:	f7f8 fc22 	bl	8000178 <__aeabi_fsub>
 8007934:	4603      	mov	r3, r0
 8007936:	68f9      	ldr	r1, [r7, #12]
 8007938:	4618      	mov	r0, r3
 800793a:	f7f8 fd27 	bl	800038c <__aeabi_fmul>
 800793e:	4603      	mov	r3, r0
 8007940:	4618      	mov	r0, r3
 8007942:	f005 fc17 	bl	800d174 <sinf>
 8007946:	4603      	mov	r3, r0
 8007948:	4619      	mov	r1, r3
 800794a:	4620      	mov	r0, r4
 800794c:	f7f8 fd1e 	bl	800038c <__aeabi_fmul>
 8007950:	4603      	mov	r3, r0
 8007952:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007956:	4618      	mov	r0, r3
 8007958:	f7f8 fdcc 	bl	80004f4 <__aeabi_fdiv>
 800795c:	4603      	mov	r3, r0
 800795e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007962:	4618      	mov	r0, r3
 8007964:	f7f8 fc0a 	bl	800017c <__addsf3>
 8007968:	4603      	mov	r3, r0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	bd90      	pop	{r4, r7, pc}
 8007972:	bf00      	nop
 8007974:	3fb2b8b9 	.word	0x3fb2b8b9
 8007978:	41a00000 	.word	0x41a00000
 800797c:	41200000 	.word	0x41200000
 8007980:	41320000 	.word	0x41320000
 8007984:	c1a00000 	.word	0xc1a00000

08007988 <EaseOutBounce>:

static float EaseOutBounce(float t)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
    const float n1 = 7.5625f;
 8007990:	4b45      	ldr	r3, [pc, #276]	@ (8007aa8 <EaseOutBounce+0x120>)
 8007992:	60fb      	str	r3, [r7, #12]
    const float d1 = 2.75f;
 8007994:	4b45      	ldr	r3, [pc, #276]	@ (8007aac <EaseOutBounce+0x124>)
 8007996:	60bb      	str	r3, [r7, #8]

    if (t < 1 / d1)
 8007998:	68b9      	ldr	r1, [r7, #8]
 800799a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800799e:	f7f8 fda9 	bl	80004f4 <__aeabi_fdiv>
 80079a2:	4603      	mov	r3, r0
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7f8 fe8e 	bl	80006c8 <__aeabi_fcmplt>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00a      	beq.n	80079c8 <EaseOutBounce+0x40>
    {
        return n1 * t * t;
 80079b2:	6879      	ldr	r1, [r7, #4]
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f7f8 fce9 	bl	800038c <__aeabi_fmul>
 80079ba:	4603      	mov	r3, r0
 80079bc:	6879      	ldr	r1, [r7, #4]
 80079be:	4618      	mov	r0, r3
 80079c0:	f7f8 fce4 	bl	800038c <__aeabi_fmul>
 80079c4:	4603      	mov	r3, r0
 80079c6:	e06a      	b.n	8007a9e <EaseOutBounce+0x116>
    }
    else if (t < 2 / d1)
 80079c8:	68b9      	ldr	r1, [r7, #8]
 80079ca:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80079ce:	f7f8 fd91 	bl	80004f4 <__aeabi_fdiv>
 80079d2:	4603      	mov	r3, r0
 80079d4:	4619      	mov	r1, r3
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7f8 fe76 	bl	80006c8 <__aeabi_fcmplt>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d01c      	beq.n	8007a1c <EaseOutBounce+0x94>
    {
        t -= 1.5f / d1;
 80079e2:	68b9      	ldr	r1, [r7, #8]
 80079e4:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 80079e8:	f7f8 fd84 	bl	80004f4 <__aeabi_fdiv>
 80079ec:	4603      	mov	r3, r0
 80079ee:	4619      	mov	r1, r3
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f7f8 fbc1 	bl	8000178 <__aeabi_fsub>
 80079f6:	4603      	mov	r3, r0
 80079f8:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.75f;
 80079fa:	6879      	ldr	r1, [r7, #4]
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f7f8 fcc5 	bl	800038c <__aeabi_fmul>
 8007a02:	4603      	mov	r3, r0
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7f8 fcc0 	bl	800038c <__aeabi_fmul>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7f8 fbb2 	bl	800017c <__addsf3>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	e040      	b.n	8007a9e <EaseOutBounce+0x116>
    }
    else if (t < 2.5f / d1)
 8007a1c:	68b9      	ldr	r1, [r7, #8]
 8007a1e:	4824      	ldr	r0, [pc, #144]	@ (8007ab0 <EaseOutBounce+0x128>)
 8007a20:	f7f8 fd68 	bl	80004f4 <__aeabi_fdiv>
 8007a24:	4603      	mov	r3, r0
 8007a26:	4619      	mov	r1, r3
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7f8 fe4d 	bl	80006c8 <__aeabi_fcmplt>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d01a      	beq.n	8007a6a <EaseOutBounce+0xe2>
    {
        t -= 2.25f / d1;
 8007a34:	68b9      	ldr	r1, [r7, #8]
 8007a36:	481f      	ldr	r0, [pc, #124]	@ (8007ab4 <EaseOutBounce+0x12c>)
 8007a38:	f7f8 fd5c 	bl	80004f4 <__aeabi_fdiv>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7f8 fb99 	bl	8000178 <__aeabi_fsub>
 8007a46:	4603      	mov	r3, r0
 8007a48:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.9375f;
 8007a4a:	6879      	ldr	r1, [r7, #4]
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f7f8 fc9d 	bl	800038c <__aeabi_fmul>
 8007a52:	4603      	mov	r3, r0
 8007a54:	6879      	ldr	r1, [r7, #4]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7f8 fc98 	bl	800038c <__aeabi_fmul>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	4916      	ldr	r1, [pc, #88]	@ (8007ab8 <EaseOutBounce+0x130>)
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7f8 fb8b 	bl	800017c <__addsf3>
 8007a66:	4603      	mov	r3, r0
 8007a68:	e019      	b.n	8007a9e <EaseOutBounce+0x116>
    }
    else
    {
        t -= 2.625f / d1;
 8007a6a:	68b9      	ldr	r1, [r7, #8]
 8007a6c:	4813      	ldr	r0, [pc, #76]	@ (8007abc <EaseOutBounce+0x134>)
 8007a6e:	f7f8 fd41 	bl	80004f4 <__aeabi_fdiv>
 8007a72:	4603      	mov	r3, r0
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7f8 fb7e 	bl	8000178 <__aeabi_fsub>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.984375f;
 8007a80:	6879      	ldr	r1, [r7, #4]
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f7f8 fc82 	bl	800038c <__aeabi_fmul>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	6879      	ldr	r1, [r7, #4]
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7f8 fc7d 	bl	800038c <__aeabi_fmul>
 8007a92:	4603      	mov	r3, r0
 8007a94:	490a      	ldr	r1, [pc, #40]	@ (8007ac0 <EaseOutBounce+0x138>)
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7f8 fb70 	bl	800017c <__addsf3>
 8007a9c:	4603      	mov	r3, r0
    }
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	40f20000 	.word	0x40f20000
 8007aac:	40300000 	.word	0x40300000
 8007ab0:	40200000 	.word	0x40200000
 8007ab4:	40100000 	.word	0x40100000
 8007ab8:	3f700000 	.word	0x3f700000
 8007abc:	40280000 	.word	0x40280000
 8007ac0:	3f7c0000 	.word	0x3f7c0000

08007ac4 <EaseInBounce>:

// 反弹缓动
static float EaseInBounce(float t)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
    return 1 - EaseOutBounce(1 - t);
 8007acc:	6879      	ldr	r1, [r7, #4]
 8007ace:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007ad2:	f7f8 fb51 	bl	8000178 <__aeabi_fsub>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7ff ff55 	bl	8007988 <EaseOutBounce>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007ae6:	f7f8 fb47 	bl	8000178 <__aeabi_fsub>
 8007aea:	4603      	mov	r3, r0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <EaseInOutBounce>:

static float EaseInOutBounce(float t)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 8007afc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7f8 fde1 	bl	80006c8 <__aeabi_fcmplt>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d010      	beq.n	8007b2e <EaseInOutBounce+0x3a>
        return EaseInBounce(t * 2) * 0.5f;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7f8 fb33 	bl	800017c <__addsf3>
 8007b16:	4603      	mov	r3, r0
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7ff ffd3 	bl	8007ac4 <EaseInBounce>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7f8 fc31 	bl	800038c <__aeabi_fmul>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	e01b      	b.n	8007b66 <EaseInOutBounce+0x72>
    return EaseOutBounce(t * 2 - 1) * 0.5f + 0.5f;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4619      	mov	r1, r3
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7f8 fb22 	bl	800017c <__addsf3>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7f8 fb1a 	bl	8000178 <__aeabi_fsub>
 8007b44:	4603      	mov	r3, r0
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7ff ff1e 	bl	8007988 <EaseOutBounce>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7f8 fc1a 	bl	800038c <__aeabi_fmul>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7f8 fb0c 	bl	800017c <__addsf3>
 8007b64:	4603      	mov	r3, r0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
	...

08007b70 <EaseInBack>:

// 背越式缓动
static float EaseInBack(float t)
{
 8007b70:	b590      	push	{r4, r7, lr}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8007b78:	4b15      	ldr	r3, [pc, #84]	@ (8007bd0 <EaseInBack+0x60>)
 8007b7a:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8007b7c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f7f8 fafb 	bl	800017c <__addsf3>
 8007b86:	4603      	mov	r3, r0
 8007b88:	60bb      	str	r3, [r7, #8]

    return c3 * t * t * t - c1 * t * t;
 8007b8a:	6879      	ldr	r1, [r7, #4]
 8007b8c:	68b8      	ldr	r0, [r7, #8]
 8007b8e:	f7f8 fbfd 	bl	800038c <__aeabi_fmul>
 8007b92:	4603      	mov	r3, r0
 8007b94:	6879      	ldr	r1, [r7, #4]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7f8 fbf8 	bl	800038c <__aeabi_fmul>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7f8 fbf3 	bl	800038c <__aeabi_fmul>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	461c      	mov	r4, r3
 8007baa:	6879      	ldr	r1, [r7, #4]
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f7f8 fbed 	bl	800038c <__aeabi_fmul>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	6879      	ldr	r1, [r7, #4]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7f8 fbe8 	bl	800038c <__aeabi_fmul>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f7f8 fad9 	bl	8000178 <__aeabi_fsub>
 8007bc6:	4603      	mov	r3, r0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3714      	adds	r7, #20
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd90      	pop	{r4, r7, pc}
 8007bd0:	3fd9cd60 	.word	0x3fd9cd60

08007bd4 <EaseOutBack>:

static float EaseOutBack(float t)
{
 8007bd4:	b590      	push	{r4, r7, lr}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8007bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8007c50 <EaseOutBack+0x7c>)
 8007bde:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8007be0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f7f8 fac9 	bl	800017c <__addsf3>
 8007bea:	4603      	mov	r3, r0
 8007bec:	60bb      	str	r3, [r7, #8]

    return 1 + c3 * powf(t - 1, 3) + c1 * powf(t - 1, 2);
 8007bee:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7f8 fac0 	bl	8000178 <__aeabi_fsub>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	4916      	ldr	r1, [pc, #88]	@ (8007c54 <EaseOutBack+0x80>)
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f005 fa19 	bl	800d034 <powf>
 8007c02:	4603      	mov	r3, r0
 8007c04:	68b9      	ldr	r1, [r7, #8]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7f8 fbc0 	bl	800038c <__aeabi_fmul>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7f8 fab2 	bl	800017c <__addsf3>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	461c      	mov	r4, r3
 8007c1c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f7f8 faa9 	bl	8000178 <__aeabi_fsub>
 8007c26:	4603      	mov	r3, r0
 8007c28:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f005 fa01 	bl	800d034 <powf>
 8007c32:	4603      	mov	r3, r0
 8007c34:	68f9      	ldr	r1, [r7, #12]
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7f8 fba8 	bl	800038c <__aeabi_fmul>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	4619      	mov	r1, r3
 8007c40:	4620      	mov	r0, r4
 8007c42:	f7f8 fa9b 	bl	800017c <__addsf3>
 8007c46:	4603      	mov	r3, r0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd90      	pop	{r4, r7, pc}
 8007c50:	3fd9cd60 	.word	0x3fd9cd60
 8007c54:	40400000 	.word	0x40400000

08007c58 <EaseInOutBack>:

static float EaseInOutBack(float t)
{
 8007c58:	b5b0      	push	{r4, r5, r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8007c60:	4b40      	ldr	r3, [pc, #256]	@ (8007d64 <EaseInOutBack+0x10c>)
 8007c62:	60fb      	str	r3, [r7, #12]
    const float c2 = c1 * 1.525f;
 8007c64:	4940      	ldr	r1, [pc, #256]	@ (8007d68 <EaseInOutBack+0x110>)
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f7f8 fb90 	bl	800038c <__aeabi_fmul>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	60bb      	str	r3, [r7, #8]

    if (t < 0.5f)
 8007c70:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f7f8 fd27 	bl	80006c8 <__aeabi_fcmplt>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d02c      	beq.n	8007cda <EaseInOutBack+0x82>
        return (powf(2 * t, 2) * ((c2 + 1) * 2 * t - c2)) / 2;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4619      	mov	r1, r3
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7f8 fa79 	bl	800017c <__addsf3>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007c90:	4618      	mov	r0, r3
 8007c92:	f005 f9cf 	bl	800d034 <powf>
 8007c96:	4604      	mov	r4, r0
 8007c98:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007c9c:	68b8      	ldr	r0, [r7, #8]
 8007c9e:	f7f8 fa6d 	bl	800017c <__addsf3>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7f8 fa68 	bl	800017c <__addsf3>
 8007cac:	4603      	mov	r3, r0
 8007cae:	6879      	ldr	r1, [r7, #4]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7f8 fb6b 	bl	800038c <__aeabi_fmul>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	68b9      	ldr	r1, [r7, #8]
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7f8 fa5c 	bl	8000178 <__aeabi_fsub>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	f7f8 fb61 	bl	800038c <__aeabi_fmul>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7f8 fc0f 	bl	80004f4 <__aeabi_fdiv>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	e03f      	b.n	8007d5a <EaseInOutBack+0x102>
    return (powf(2 * t - 2, 2) * ((c2 + 1) * (t * 2 - 2) + c2) + 2) / 2;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7f8 fa4c 	bl	800017c <__addsf3>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7f8 fa44 	bl	8000178 <__aeabi_fsub>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f005 f99c 	bl	800d034 <powf>
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007d02:	68b8      	ldr	r0, [r7, #8]
 8007d04:	f7f8 fa3a 	bl	800017c <__addsf3>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	461d      	mov	r5, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7f8 fa33 	bl	800017c <__addsf3>
 8007d16:	4603      	mov	r3, r0
 8007d18:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7f8 fa2b 	bl	8000178 <__aeabi_fsub>
 8007d22:	4603      	mov	r3, r0
 8007d24:	4619      	mov	r1, r3
 8007d26:	4628      	mov	r0, r5
 8007d28:	f7f8 fb30 	bl	800038c <__aeabi_fmul>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	68b9      	ldr	r1, [r7, #8]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7f8 fa23 	bl	800017c <__addsf3>
 8007d36:	4603      	mov	r3, r0
 8007d38:	4619      	mov	r1, r3
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f7f8 fb26 	bl	800038c <__aeabi_fmul>
 8007d40:	4603      	mov	r3, r0
 8007d42:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7f8 fa18 	bl	800017c <__addsf3>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7f8 fbce 	bl	80004f4 <__aeabi_fdiv>
 8007d58:	4603      	mov	r3, r0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bdb0      	pop	{r4, r5, r7, pc}
 8007d62:	bf00      	nop
 8007d64:	3fd9cd60 	.word	0x3fd9cd60
 8007d68:	3fc33333 	.word	0x3fc33333

08007d6c <EaseInSine>:

// 正弦缓动
static float EaseInSine(float t)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
    return 1 - cosf((t * 3.14159f) / 2);
 8007d74:	490c      	ldr	r1, [pc, #48]	@ (8007da8 <EaseInSine+0x3c>)
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7f8 fb08 	bl	800038c <__aeabi_fmul>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7f8 fbb6 	bl	80004f4 <__aeabi_fdiv>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f005 f9ba 	bl	800d104 <cosf>
 8007d90:	4603      	mov	r3, r0
 8007d92:	4619      	mov	r1, r3
 8007d94:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007d98:	f7f8 f9ee 	bl	8000178 <__aeabi_fsub>
 8007d9c:	4603      	mov	r3, r0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	40490fd0 	.word	0x40490fd0

08007dac <EaseOutSine>:

static float EaseOutSine(float t)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
    return sinf((t * 3.14159f) / 2);
 8007db4:	4909      	ldr	r1, [pc, #36]	@ (8007ddc <EaseOutSine+0x30>)
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f7f8 fae8 	bl	800038c <__aeabi_fmul>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7f8 fb96 	bl	80004f4 <__aeabi_fdiv>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f005 f9d2 	bl	800d174 <sinf>
 8007dd0:	4603      	mov	r3, r0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	40490fd0 	.word	0x40490fd0

08007de0 <EaseInOutSine>:

static float EaseInOutSine(float t)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
    return -(cosf(3.14159f * t) - 1) / 2;
 8007de8:	490d      	ldr	r1, [pc, #52]	@ (8007e20 <EaseInOutSine+0x40>)
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f7f8 face 	bl	800038c <__aeabi_fmul>
 8007df0:	4603      	mov	r3, r0
 8007df2:	4618      	mov	r0, r3
 8007df4:	f005 f986 	bl	800d104 <cosf>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7f8 f9ba 	bl	8000178 <__aeabi_fsub>
 8007e04:	4603      	mov	r3, r0
 8007e06:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007e0a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7f8 fb70 	bl	80004f4 <__aeabi_fdiv>
 8007e14:	4603      	mov	r3, r0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	40490fd0 	.word	0x40490fd0

08007e24 <GetEaseValue>:

static float GetEaseValue(float progress, EaseType_t easeType)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	70fb      	strb	r3, [r7, #3]
    switch (easeType)
 8007e30:	78fb      	ldrb	r3, [r7, #3]
 8007e32:	2b18      	cmp	r3, #24
 8007e34:	f200 80b3 	bhi.w	8007f9e <GetEaseValue+0x17a>
 8007e38:	a201      	add	r2, pc, #4	@ (adr r2, 8007e40 <GetEaseValue+0x1c>)
 8007e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3e:	bf00      	nop
 8007e40:	08007ea5 	.word	0x08007ea5
 8007e44:	08007eaf 	.word	0x08007eaf
 8007e48:	08007eb9 	.word	0x08007eb9
 8007e4c:	08007ec3 	.word	0x08007ec3
 8007e50:	08007ecd 	.word	0x08007ecd
 8007e54:	08007ed7 	.word	0x08007ed7
 8007e58:	08007ee1 	.word	0x08007ee1
 8007e5c:	08007eeb 	.word	0x08007eeb
 8007e60:	08007ef5 	.word	0x08007ef5
 8007e64:	08007eff 	.word	0x08007eff
 8007e68:	08007f09 	.word	0x08007f09
 8007e6c:	08007f13 	.word	0x08007f13
 8007e70:	08007f1d 	.word	0x08007f1d
 8007e74:	08007f27 	.word	0x08007f27
 8007e78:	08007f31 	.word	0x08007f31
 8007e7c:	08007f3b 	.word	0x08007f3b
 8007e80:	08007f45 	.word	0x08007f45
 8007e84:	08007f4f 	.word	0x08007f4f
 8007e88:	08007f59 	.word	0x08007f59
 8007e8c:	08007f63 	.word	0x08007f63
 8007e90:	08007f6d 	.word	0x08007f6d
 8007e94:	08007f77 	.word	0x08007f77
 8007e98:	08007f81 	.word	0x08007f81
 8007e9c:	08007f8b 	.word	0x08007f8b
 8007ea0:	08007f95 	.word	0x08007f95
    {
    case EASE_LINEAR:
        return EaseLinear(progress);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff fa15 	bl	80072d4 <EaseLinear>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	e078      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_IN_QUAD:
        return EaseInQuad(progress);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7ff fa1a 	bl	80072e8 <EaseInQuad>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	e073      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_OUT_QUAD:
        return EaseOutQuad(progress);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f7ff fa22 	bl	8007302 <EaseOutQuad>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	e06e      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_INOUT_QUAD:
        return EaseInOutQuad(progress);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7ff fa30 	bl	8007328 <EaseInOutQuad>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	e069      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_IN_CUBIC:
        return EaseInCubic(progress);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff fa5e 	bl	800738e <EaseInCubic>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	e064      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_OUT_CUBIC:
        return EaseOutCubic(progress);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7ff fa6b 	bl	80073b2 <EaseOutCubic>
 8007edc:	4603      	mov	r3, r0
 8007ede:	e05f      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_INOUT_CUBIC:
        return EaseInOutCubic(progress);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f7ff fa85 	bl	80073f0 <EaseInOutCubic>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	e05a      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_IN_EXPO:
        return EaseInExpo(progress);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7ff fad2 	bl	8007494 <EaseInExpo>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	e055      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_OUT_EXPO:
        return EaseOutExpo(progress);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f7ff faf3 	bl	80074e0 <EaseOutExpo>
 8007efa:	4603      	mov	r3, r0
 8007efc:	e050      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_INOUT_EXPO:
        return EaseInOutExpo(progress);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7ff fb14 	bl	800752c <EaseInOutExpo>
 8007f04:	4603      	mov	r3, r0
 8007f06:	e04b      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_IN_CIRC:
        return EaseInCirc(progress);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7ff fb6f 	bl	80075ec <EaseInCirc>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	e046      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_OUT_CIRC:
        return EaseOutCirc(progress);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7ff fb87 	bl	8007626 <EaseOutCirc>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	e041      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_INOUT_CIRC:
        return EaseInOutCirc(progress);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7ff fba0 	bl	8007662 <EaseInOutCirc>
 8007f22:	4603      	mov	r3, r0
 8007f24:	e03c      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_IN_ELASTIC:
        return EaseInElastic(progress);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7ff fbf6 	bl	8007718 <EaseInElastic>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	e037      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_OUT_ELASTIC:
        return EaseOutElastic(progress);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f7ff fc41 	bl	80077b8 <EaseOutElastic>
 8007f36:	4603      	mov	r3, r0
 8007f38:	e032      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_INOUT_ELASTIC:
        return EaseInOutElastic(progress);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff fc8c 	bl	8007858 <EaseInOutElastic>
 8007f40:	4603      	mov	r3, r0
 8007f42:	e02d      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_IN_BOUNCE:
        return EaseInBounce(progress);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7ff fdbd 	bl	8007ac4 <EaseInBounce>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	e028      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_OUT_BOUNCE:
        return EaseOutBounce(progress);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7ff fd1a 	bl	8007988 <EaseOutBounce>
 8007f54:	4603      	mov	r3, r0
 8007f56:	e023      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_INOUT_BOUNCE:
        return EaseInOutBounce(progress);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f7ff fdcb 	bl	8007af4 <EaseInOutBounce>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	e01e      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_IN_BACK:
        return EaseInBack(progress);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7ff fe04 	bl	8007b70 <EaseInBack>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	e019      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_OUT_BACK:
        return EaseOutBack(progress);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7ff fe31 	bl	8007bd4 <EaseOutBack>
 8007f72:	4603      	mov	r3, r0
 8007f74:	e014      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_INOUT_BACK:
        return EaseInOutBack(progress);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7ff fe6e 	bl	8007c58 <EaseInOutBack>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	e00f      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_IN_SINE:
        return EaseInSine(progress);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7ff fef3 	bl	8007d6c <EaseInSine>
 8007f86:	4603      	mov	r3, r0
 8007f88:	e00a      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_OUT_SINE:
        return EaseOutSine(progress);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f7ff ff0e 	bl	8007dac <EaseOutSine>
 8007f90:	4603      	mov	r3, r0
 8007f92:	e005      	b.n	8007fa0 <GetEaseValue+0x17c>
    case EASE_INOUT_SINE:
        return EaseInOutSine(progress);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7ff ff23 	bl	8007de0 <EaseInOutSine>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	e000      	b.n	8007fa0 <GetEaseValue+0x17c>
    default:
        return progress;
 8007f9e:	687b      	ldr	r3, [r7, #4]
    }
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <OLED_InitAnimation>:

#pragma region ANIMATIONTWEENS
// 这里是底层动画实现
void OLED_InitAnimation(Animation_t *anim, float startValue, float endValue,
                        uint32_t duration, EaseType_t easeType)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
 8007fb4:	603b      	str	r3, [r7, #0]
    anim->startTime = HAL_GetTick();
 8007fb6:	f001 f9cf 	bl	8009358 <HAL_GetTick>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	601a      	str	r2, [r3, #0]
    anim->duration = duration;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	605a      	str	r2, [r3, #4]
    anim->startValue = startValue;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	609a      	str	r2, [r3, #8]
    anim->endValue = endValue;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	60da      	str	r2, [r3, #12]
    anim->currentValue = startValue;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	611a      	str	r2, [r3, #16]
    anim->isActive = 1;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	751a      	strb	r2, [r3, #20]
    anim->easeType = easeType;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	7e3a      	ldrb	r2, [r7, #24]
 8007fe2:	755a      	strb	r2, [r3, #21]
}
 8007fe4:	bf00      	nop
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <OLED_UpdateAnimation>:

// 更新动画状态，返回isActive的值
uint8_t OLED_UpdateAnimation(Animation_t *anim, uint32_t currentTime)
{
 8007fec:	b590      	push	{r4, r7, lr}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
    if (!anim->isActive)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	7d1b      	ldrb	r3, [r3, #20]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <OLED_UpdateAnimation+0x16>
        return 0;
 8007ffe:	2300      	movs	r3, #0
 8008000:	e04d      	b.n	800809e <OLED_UpdateAnimation+0xb2>

    uint32_t elapsedTime = currentTime - anim->startTime;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	617b      	str	r3, [r7, #20]
    // 动画完成
    if (elapsedTime >= anim->duration || anim->currentValue == anim->endValue) // 如果我的目标在指定的点上，也关闭isActive
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	429a      	cmp	r2, r3
 8008014:	d20a      	bcs.n	800802c <OLED_UpdateAnimation+0x40>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	691a      	ldr	r2, [r3, #16]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	4619      	mov	r1, r3
 8008020:	4610      	mov	r0, r2
 8008022:	f7f8 fb47 	bl	80006b4 <__aeabi_fcmpeq>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d008      	beq.n	800803e <OLED_UpdateAnimation+0x52>
    {
        anim->currentValue = anim->endValue;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	68da      	ldr	r2, [r3, #12]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	611a      	str	r2, [r3, #16]
        anim->isActive = 0;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	751a      	strb	r2, [r3, #20]
        return 0;
 800803a:	2300      	movs	r3, #0
 800803c:	e02f      	b.n	800809e <OLED_UpdateAnimation+0xb2>
    }

    // 计算当前进度 (0.0 - 1.0)
    float progress = (float)elapsedTime / anim->duration;
 800803e:	6978      	ldr	r0, [r7, #20]
 8008040:	f7f8 f94c 	bl	80002dc <__aeabi_ui2f>
 8008044:	4604      	mov	r4, r0
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	4618      	mov	r0, r3
 800804c:	f7f8 f946 	bl	80002dc <__aeabi_ui2f>
 8008050:	4603      	mov	r3, r0
 8008052:	4619      	mov	r1, r3
 8008054:	4620      	mov	r0, r4
 8008056:	f7f8 fa4d 	bl	80004f4 <__aeabi_fdiv>
 800805a:	4603      	mov	r3, r0
 800805c:	613b      	str	r3, [r7, #16]

    // 应用缓动函数
    float easedProgress = GetEaseValue(progress, anim->easeType);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	7d5b      	ldrb	r3, [r3, #21]
 8008062:	4619      	mov	r1, r3
 8008064:	6938      	ldr	r0, [r7, #16]
 8008066:	f7ff fedd 	bl	8007e24 <GetEaseValue>
 800806a:	60f8      	str	r0, [r7, #12]

    // 计算当前值
    anim->currentValue = anim->startValue + (anim->endValue - anim->startValue) * easedProgress;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	689c      	ldr	r4, [r3, #8]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	68da      	ldr	r2, [r3, #12]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	4619      	mov	r1, r3
 800807a:	4610      	mov	r0, r2
 800807c:	f7f8 f87c 	bl	8000178 <__aeabi_fsub>
 8008080:	4603      	mov	r3, r0
 8008082:	68f9      	ldr	r1, [r7, #12]
 8008084:	4618      	mov	r0, r3
 8008086:	f7f8 f981 	bl	800038c <__aeabi_fmul>
 800808a:	4603      	mov	r3, r0
 800808c:	4619      	mov	r1, r3
 800808e:	4620      	mov	r0, r4
 8008090:	f7f8 f874 	bl	800017c <__addsf3>
 8008094:	4603      	mov	r3, r0
 8008096:	461a      	mov	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	611a      	str	r2, [r3, #16]

    return 1;
 800809c:	2301      	movs	r3, #1
}
 800809e:	4618      	mov	r0, r3
 80080a0:	371c      	adds	r7, #28
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd90      	pop	{r4, r7, pc}

080080a6 <OLED_GetAnimationValue>:

// 获取当前动画值
float OLED_GetAnimationValue(Animation_t *anim)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
    return anim->currentValue;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	691b      	ldr	r3, [r3, #16]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bc80      	pop	{r7}
 80080ba:	4770      	bx	lr

080080bc <OLED_InitAnimationManager>:
AnimationManager_t Status_AnimationManager;
AnimationManager_t g_Title_AnimationManager; // 菜单动画管理器
AnimationManager_t g_AnimationManager;       // 全局动画管理器

void OLED_InitAnimationManager(AnimationManager_t *manager) // 这是初始化一个动画管理器，填入你的manager名字，在系统初始化时候调用它
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
    manager->count = 0;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 25f0 	strb.w	r2, [r3, #1520]	@ 0x5f0
    memset(manager->taggedAnimations, 0, sizeof(manager->taggedAnimations));
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 80080d2:	2100      	movs	r1, #0
 80080d4:	4618      	mov	r0, r3
 80080d6:	f003 ff42 	bl	800bf5e <memset>
}
 80080da:	bf00      	nop
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <OLED_FindTaggedAnimation>:

TaggedAnimation_t *OLED_FindTaggedAnimation(AnimationManager_t *manager, const char *tag) // 查找对应manager的标签对应的动画tag
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < manager->count; i++)
 80080ec:	2300      	movs	r3, #0
 80080ee:	73fb      	strb	r3, [r7, #15]
 80080f0:	e016      	b.n	8008120 <OLED_FindTaggedAnimation+0x3e>
    {
        if (strcmp(manager->taggedAnimations[i].tag, tag) == 0)
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
 80080f4:	224c      	movs	r2, #76	@ 0x4c
 80080f6:	fb02 f303 	mul.w	r3, r2, r3
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	4413      	add	r3, r2
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	4618      	mov	r0, r3
 8008102:	f7f8 f823 	bl	800014c <strcmp>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d106      	bne.n	800811a <OLED_FindTaggedAnimation+0x38>
        {
            return &manager->taggedAnimations[i];
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	224c      	movs	r2, #76	@ 0x4c
 8008110:	fb02 f303 	mul.w	r3, r2, r3
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	4413      	add	r3, r2
 8008118:	e009      	b.n	800812e <OLED_FindTaggedAnimation+0x4c>
    for (uint8_t i = 0; i < manager->count; i++)
 800811a:	7bfb      	ldrb	r3, [r7, #15]
 800811c:	3301      	adds	r3, #1
 800811e:	73fb      	strb	r3, [r7, #15]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8008126:	7bfa      	ldrb	r2, [r7, #15]
 8008128:	429a      	cmp	r2, r3
 800812a:	d3e2      	bcc.n	80080f2 <OLED_FindTaggedAnimation+0x10>
        }
    }
    return NULL;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <OLED_GetObjectPosition>:

uint8_t OLED_GetObjectPosition(AnimationManager_t *manager, const char *tag, float *x, float *y) // 获取tag当前位置
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b086      	sub	sp, #24
 800813a:	af00      	add	r7, sp, #0
 800813c:	60f8      	str	r0, [r7, #12]
 800813e:	60b9      	str	r1, [r7, #8]
 8008140:	607a      	str	r2, [r7, #4]
 8008142:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8008144:	68b9      	ldr	r1, [r7, #8]
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f7ff ffcb 	bl	80080e2 <OLED_FindTaggedAnimation>
 800814c:	6178      	str	r0, [r7, #20]
    if (anim)
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00f      	beq.n	8008174 <OLED_GetObjectPosition+0x3e>
    {
        if (x)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d003      	beq.n	8008162 <OLED_GetObjectPosition+0x2c>
            *x = anim->currentX;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	601a      	str	r2, [r3, #0]
        if (y)
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d003      	beq.n	8008170 <OLED_GetObjectPosition+0x3a>
            *y = anim->currentY;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	601a      	str	r2, [r3, #0]
        return 1;
 8008170:	2301      	movs	r3, #1
 8008172:	e000      	b.n	8008176 <OLED_GetObjectPosition+0x40>
    }
    return 0;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <OLED_MoveObject>:

// 移动指定标签的对象
void OLED_MoveObject(AnimationManager_t *manager, const char *tag,
                     float startX, float startY, float targetX, float targetY,
                     uint32_t duration, EaseType_t easeType) // 这个函数是用来移动一个对象的，tag是对象的标签，startX和startY是起始坐标，targetX和targetY是目标坐标，duration是动画持续时间，easeType是缓动类型
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b088      	sub	sp, #32
 8008182:	af02      	add	r7, sp, #8
 8008184:	60f8      	str	r0, [r7, #12]
 8008186:	60b9      	str	r1, [r7, #8]
 8008188:	607a      	str	r2, [r7, #4]
 800818a:	603b      	str	r3, [r7, #0]
    // 查找已存在的动画
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 800818c:	68b9      	ldr	r1, [r7, #8]
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f7ff ffa7 	bl	80080e2 <OLED_FindTaggedAnimation>
 8008194:	6178      	str	r0, [r7, #20]

    // 如果没找到并且还有可用槽位，创建新的动画
    if (anim == NULL)
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d122      	bne.n	80081e2 <OLED_MoveObject+0x64>
    {
        if (manager->count >= MAX_ANIMATIONS)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 80081a2:	2b13      	cmp	r3, #19
 80081a4:	d838      	bhi.n	8008218 <OLED_MoveObject+0x9a>
            return; // 动画已满，无法添加

        anim = &manager->taggedAnimations[manager->count++];
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 80081ac:	1c5a      	adds	r2, r3, #1
 80081ae:	b2d1      	uxtb	r1, r2
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	f882 15f0 	strb.w	r1, [r2, #1520]	@ 0x5f0
 80081b6:	461a      	mov	r2, r3
 80081b8:	234c      	movs	r3, #76	@ 0x4c
 80081ba:	fb02 f303 	mul.w	r3, r2, r3
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	4413      	add	r3, r2
 80081c2:	617b      	str	r3, [r7, #20]
        strncpy(anim->tag, tag, sizeof(anim->tag) - 1);
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	220f      	movs	r2, #15
 80081c8:	68b9      	ldr	r1, [r7, #8]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f003 fecf 	bl	800bf6e <strncpy>
        anim->tag[sizeof(anim->tag) - 1] = '\0'; // 确保字符串结束
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	2200      	movs	r2, #0
 80081d4:	73da      	strb	r2, [r3, #15]
        anim->currentX = startX;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = startY;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // 初始化或更新X和Y坐标的动画
    OLED_InitAnimation(&anim->xAnimation, startX, targetX, duration, easeType);
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f103 0010 	add.w	r0, r3, #16
 80081e8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f0:	6a3a      	ldr	r2, [r7, #32]
 80081f2:	6879      	ldr	r1, [r7, #4]
 80081f4:	f7ff fed8 	bl	8007fa8 <OLED_InitAnimation>
    OLED_InitAnimation(&anim->yAnimation, startY, targetY, duration, easeType);
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80081fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008208:	6839      	ldr	r1, [r7, #0]
 800820a:	f7ff fecd 	bl	8007fa8 <OLED_InitAnimation>
    anim->isActive = 1;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	2201      	movs	r2, #1
 8008212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008216:	e000      	b.n	800821a <OLED_MoveObject+0x9c>
            return; // 动画已满，无法添加
 8008218:	bf00      	nop
}
 800821a:	3718      	adds	r7, #24
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <OLED_UpdateAnimationManager>:

// 更新manager里面的所有动画!
void OLED_UpdateAnimationManager(AnimationManager_t *manager) //! 这里需要使用OLED_UpdateDisplayVSync()来更新显示
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 8008228:	f001 f896 	bl	8009358 <HAL_GetTick>
 800822c:	6138      	str	r0, [r7, #16]

    for (uint8_t i = 0; i < manager->count; i++)
 800822e:	2300      	movs	r3, #0
 8008230:	75fb      	strb	r3, [r7, #23]
 8008232:	e03a      	b.n	80082aa <OLED_UpdateAnimationManager+0x8a>
    {
        TaggedAnimation_t *anim = &manager->taggedAnimations[i];
 8008234:	7dfb      	ldrb	r3, [r7, #23]
 8008236:	224c      	movs	r2, #76	@ 0x4c
 8008238:	fb02 f303 	mul.w	r3, r2, r3
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	4413      	add	r3, r2
 8008240:	60fb      	str	r3, [r7, #12]
        if (!anim->isActive)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008248:	2b00      	cmp	r3, #0
 800824a:	d02a      	beq.n	80082a2 <OLED_UpdateAnimationManager+0x82>
            continue;

        uint8_t activeX = OLED_UpdateAnimation(&anim->xAnimation, currentTime);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	3310      	adds	r3, #16
 8008250:	6939      	ldr	r1, [r7, #16]
 8008252:	4618      	mov	r0, r3
 8008254:	f7ff feca 	bl	8007fec <OLED_UpdateAnimation>
 8008258:	4603      	mov	r3, r0
 800825a:	72fb      	strb	r3, [r7, #11]
        uint8_t activeY = OLED_UpdateAnimation(&anim->yAnimation, currentTime);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	3328      	adds	r3, #40	@ 0x28
 8008260:	6939      	ldr	r1, [r7, #16]
 8008262:	4618      	mov	r0, r3
 8008264:	f7ff fec2 	bl	8007fec <OLED_UpdateAnimation>
 8008268:	4603      	mov	r3, r0
 800826a:	72bb      	strb	r3, [r7, #10]

        anim->currentX = OLED_GetAnimationValue(&anim->xAnimation);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	3310      	adds	r3, #16
 8008270:	4618      	mov	r0, r3
 8008272:	f7ff ff18 	bl	80080a6 <OLED_GetAnimationValue>
 8008276:	4602      	mov	r2, r0
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = OLED_GetAnimationValue(&anim->yAnimation);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	3328      	adds	r3, #40	@ 0x28
 8008280:	4618      	mov	r0, r3
 8008282:	f7ff ff10 	bl	80080a6 <OLED_GetAnimationValue>
 8008286:	4602      	mov	r2, r0
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	649a      	str	r2, [r3, #72]	@ 0x48

        // 如果两个动画都结束，则标记该对象动画为非活跃
        if (!activeX && !activeY)
 800828c:	7afb      	ldrb	r3, [r7, #11]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d108      	bne.n	80082a4 <OLED_UpdateAnimationManager+0x84>
 8008292:	7abb      	ldrb	r3, [r7, #10]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d105      	bne.n	80082a4 <OLED_UpdateAnimationManager+0x84>
            anim->isActive = 0;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082a0:	e000      	b.n	80082a4 <OLED_UpdateAnimationManager+0x84>
            continue;
 80082a2:	bf00      	nop
    for (uint8_t i = 0; i < manager->count; i++)
 80082a4:	7dfb      	ldrb	r3, [r7, #23]
 80082a6:	3301      	adds	r3, #1
 80082a8:	75fb      	strb	r3, [r7, #23]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 80082b0:	7dfa      	ldrb	r2, [r7, #23]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d3be      	bcc.n	8008234 <OLED_UpdateAnimationManager+0x14>
    }
}
 80082b6:	bf00      	nop
 80082b8:	bf00      	nop
 80082ba:	3718      	adds	r7, #24
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <OLED_GetAnimationStates>:

uint8_t OLED_GetAnimationStates(AnimationManager_t *manager, const char *tag) // 返回值是1表示活跃，0表示非活跃
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 80082ca:	6839      	ldr	r1, [r7, #0]
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f7ff ff08 	bl	80080e2 <OLED_FindTaggedAnimation>
 80082d2:	60f8      	str	r0, [r7, #12]
    if (anim)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d003      	beq.n	80082e2 <OLED_GetAnimationStates+0x22>
    {
        return anim->isActive;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80082e0:	e000      	b.n	80082e4 <OLED_GetAnimationStates+0x24>
    }
    return 0; // 如果没有找到，返回0表示非活跃
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <OLED_DoTweenObject>:

// 移动指定标签的对象到目标坐标。
// 如果对象已在向同一目标动画且动画处于活动状态，则不执行任何操作。
// 否则，它会中断当前动画（如果活动）并从当前位置开始新的动画。
void OLED_DoTweenObject(AnimationManager_t *manager, const char *tag, float targetX, float targetY, uint32_t duration, EaseType_t easeType)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b08a      	sub	sp, #40	@ 0x28
 80082f0:	af04      	add	r7, sp, #16
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
 80082f8:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 80082fa:	68b9      	ldr	r1, [r7, #8]
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f7ff fef0 	bl	80080e2 <OLED_FindTaggedAnimation>
 8008302:	6178      	str	r0, [r7, #20]

    if (anim == NULL)
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d029      	beq.n	800835e <OLED_DoTweenObject+0x72>
        // 但这需要为新对象定义 initialX, initialY。
        return;
    }

    // 检查动画是否已处于活动状态并且已经朝向相同的目标
    if (anim->isActive &&
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008310:	2b00      	cmp	r3, #0
 8008312:	d011      	beq.n	8008338 <OLED_DoTweenObject+0x4c>
        anim->xAnimation.endValue == targetX &&
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	69db      	ldr	r3, [r3, #28]
    if (anim->isActive &&
 8008318:	4619      	mov	r1, r3
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f7f8 f9ca 	bl	80006b4 <__aeabi_fcmpeq>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d008      	beq.n	8008338 <OLED_DoTweenObject+0x4c>
        anim->yAnimation.endValue == targetY)
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        anim->xAnimation.endValue == targetX &&
 800832a:	4619      	mov	r1, r3
 800832c:	6838      	ldr	r0, [r7, #0]
 800832e:	f7f8 f9c1 	bl	80006b4 <__aeabi_fcmpeq>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d114      	bne.n	8008362 <OLED_DoTweenObject+0x76>
        return;
    }

    // 否则，（重新）启动动画到新目标
    // OLED_MoveObject 将从 anim->currentX, anim->currentY 开始动画
    OLED_MoveObject(manager, tag, anim->currentX, anim->currentY, targetX, targetY, duration, easeType);
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8008340:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008344:	9303      	str	r3, [sp, #12]
 8008346:	6a3b      	ldr	r3, [r7, #32]
 8008348:	9302      	str	r3, [sp, #8]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	9301      	str	r3, [sp, #4]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	460b      	mov	r3, r1
 8008354:	68b9      	ldr	r1, [r7, #8]
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f7ff ff11 	bl	800817e <OLED_MoveObject>
 800835c:	e002      	b.n	8008364 <OLED_DoTweenObject+0x78>
        return;
 800835e:	bf00      	nop
 8008360:	e000      	b.n	8008364 <OLED_DoTweenObject+0x78>
        return;
 8008362:	bf00      	nop
}
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <OLED_MoveObjectAxis>:

// 为X或Y轴单独创建动画的函数
void OLED_MoveObjectAxis(AnimationManager_t *manager, const char *tag,
                         float startX, float startY, float targetX, float targetY,
                         uint32_t duration, EaseType_t easeType, bool onlyX, bool onlyY)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b088      	sub	sp, #32
 800836e:	af02      	add	r7, sp, #8
 8008370:	60f8      	str	r0, [r7, #12]
 8008372:	60b9      	str	r1, [r7, #8]
 8008374:	607a      	str	r2, [r7, #4]
 8008376:	603b      	str	r3, [r7, #0]
    // 查找已存在的动画
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8008378:	68b9      	ldr	r1, [r7, #8]
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f7ff feb1 	bl	80080e2 <OLED_FindTaggedAnimation>
 8008380:	6178      	str	r0, [r7, #20]

    // 如果没找到并且还有可用槽位，创建新的动画
    if (anim == NULL)
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d122      	bne.n	80083ce <OLED_MoveObjectAxis+0x64>
    {
        if (manager->count >= MAX_ANIMATIONS)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 800838e:	2b13      	cmp	r3, #19
 8008390:	d846      	bhi.n	8008420 <OLED_MoveObjectAxis+0xb6>
            return; // 动画已满，无法添加

        anim = &manager->taggedAnimations[manager->count++];
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8008398:	1c5a      	adds	r2, r3, #1
 800839a:	b2d1      	uxtb	r1, r2
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	f882 15f0 	strb.w	r1, [r2, #1520]	@ 0x5f0
 80083a2:	461a      	mov	r2, r3
 80083a4:	234c      	movs	r3, #76	@ 0x4c
 80083a6:	fb02 f303 	mul.w	r3, r2, r3
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	4413      	add	r3, r2
 80083ae:	617b      	str	r3, [r7, #20]
        strncpy(anim->tag, tag, sizeof(anim->tag) - 1);
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	220f      	movs	r2, #15
 80083b4:	68b9      	ldr	r1, [r7, #8]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f003 fdd9 	bl	800bf6e <strncpy>
        anim->tag[sizeof(anim->tag) - 1] = '\0'; // 确保字符串结束
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	2200      	movs	r2, #0
 80083c0:	73da      	strb	r2, [r3, #15]
        anim->currentX = startX;
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = startY;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // 只初始化需要的轴的动画
    if (!onlyY) // 如果不是只修改Y轴，就修改X轴
 80083ce:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80083d2:	f083 0301 	eor.w	r3, r3, #1
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00a      	beq.n	80083f2 <OLED_MoveObjectAxis+0x88>
        OLED_InitAnimation(&anim->xAnimation, startX, targetX, duration, easeType);
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	f103 0010 	add.w	r0, r3, #16
 80083e2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ea:	6a3a      	ldr	r2, [r7, #32]
 80083ec:	6879      	ldr	r1, [r7, #4]
 80083ee:	f7ff fddb 	bl	8007fa8 <OLED_InitAnimation>
    if (!onlyX) // 如果不是只修改X轴，就修改Y轴
 80083f2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80083f6:	f083 0301 	eor.w	r3, r3, #1
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00a      	beq.n	8008416 <OLED_MoveObjectAxis+0xac>
        OLED_InitAnimation(&anim->yAnimation, startY, targetY, duration, easeType);
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8008406:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	f7ff fdc9 	bl	8007fa8 <OLED_InitAnimation>

    anim->isActive = 1;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	2201      	movs	r2, #1
 800841a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800841e:	e000      	b.n	8008422 <OLED_MoveObjectAxis+0xb8>
            return; // 动画已满，无法添加
 8008420:	bf00      	nop
}
 8008422:	3718      	adds	r7, #24
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <OLED_DoTweenObjectX>:

// 这个函数是用来移动一个对象的，tag是对象的标签，targetX是目标坐标，duration是动画持续时间，easeType是缓动类型
//! 这里不可以在while里面调用！为一次性调用
void OLED_DoTweenObjectX(AnimationManager_t *manager, const char *tag, float targetX, uint32_t duration, EaseType_t easeType)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b08c      	sub	sp, #48	@ 0x30
 800842c:	af06      	add	r7, sp, #24
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
 8008434:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8008436:	68b9      	ldr	r1, [r7, #8]
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f7ff fe52 	bl	80080e2 <OLED_FindTaggedAnimation>
 800843e:	6178      	str	r0, [r7, #20]
    if (anim && anim->currentX != targetX)
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d021      	beq.n	800848a <OLED_DoTweenObjectX+0x62>
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7f8 f931 	bl	80006b4 <__aeabi_fcmpeq>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d000      	beq.n	800845a <OLED_DoTweenObjectX+0x32>
    {
        OLED_MoveObjectAxis(manager, tag, anim->currentX, anim->currentY, targetX, anim->currentY, duration, easeType, true, false);
    }
}
 8008458:	e017      	b.n	800848a <OLED_DoTweenObjectX+0x62>
        OLED_MoveObjectAxis(manager, tag, anim->currentX, anim->currentY, targetX, anim->currentY, duration, easeType, true, false);
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008466:	2200      	movs	r2, #0
 8008468:	9205      	str	r2, [sp, #20]
 800846a:	2201      	movs	r2, #1
 800846c:	9204      	str	r2, [sp, #16]
 800846e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008472:	9203      	str	r2, [sp, #12]
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	9202      	str	r2, [sp, #8]
 8008478:	9301      	str	r3, [sp, #4]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	4603      	mov	r3, r0
 8008480:	460a      	mov	r2, r1
 8008482:	68b9      	ldr	r1, [r7, #8]
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f7ff ff70 	bl	800836a <OLED_MoveObjectAxis>
}
 800848a:	bf00      	nop
 800848c:	3718      	adds	r7, #24
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <OLED_DoTweenObjectY>:

// 这个函数是用来移动一个对象的，tag是对象的标签，targetY是目标坐标，duration是动画持续时间，easeType是缓动类型
//! 这里不可以在while里面调用！为一次性调用
void OLED_DoTweenObjectY(AnimationManager_t *manager, const char *tag, float targetY, uint32_t duration, EaseType_t easeType)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b08c      	sub	sp, #48	@ 0x30
 8008496:	af06      	add	r7, sp, #24
 8008498:	60f8      	str	r0, [r7, #12]
 800849a:	60b9      	str	r1, [r7, #8]
 800849c:	607a      	str	r2, [r7, #4]
 800849e:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 80084a0:	68b9      	ldr	r1, [r7, #8]
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f7ff fe1d 	bl	80080e2 <OLED_FindTaggedAnimation>
 80084a8:	6178      	str	r0, [r7, #20]
    if (anim && anim->currentY != targetY)
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d021      	beq.n	80084f4 <OLED_DoTweenObjectY+0x62>
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7f8 f8fc 	bl	80006b4 <__aeabi_fcmpeq>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d000      	beq.n	80084c4 <OLED_DoTweenObjectY+0x32>
    {
        OLED_MoveObjectAxis(manager, tag, anim->currentX, anim->currentY, anim->currentX, targetY, duration, easeType, false, true);
    }
}
 80084c2:	e017      	b.n	80084f4 <OLED_DoTweenObjectY+0x62>
        OLED_MoveObjectAxis(manager, tag, anim->currentX, anim->currentY, anim->currentX, targetY, duration, easeType, false, true);
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084d0:	2201      	movs	r2, #1
 80084d2:	9205      	str	r2, [sp, #20]
 80084d4:	2200      	movs	r2, #0
 80084d6:	9204      	str	r2, [sp, #16]
 80084d8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80084dc:	9203      	str	r2, [sp, #12]
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	9202      	str	r2, [sp, #8]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	9201      	str	r2, [sp, #4]
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	4603      	mov	r3, r0
 80084ea:	460a      	mov	r2, r1
 80084ec:	68b9      	ldr	r1, [r7, #8]
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f7ff ff3b 	bl	800836a <OLED_MoveObjectAxis>
}
 80084f4:	bf00      	nop
 80084f6:	3718      	adds	r7, #24
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <OLED_DrawProgressBar>:
    }
}

// 绘制进度条
void OLED_DrawProgressBar(int16_t x, int16_t y, uint8_t width, uint8_t progress) //! UPDATEDISPLAY REQUIRED
{
 80084fc:	b590      	push	{r4, r7, lr}
 80084fe:	b087      	sub	sp, #28
 8008500:	af02      	add	r7, sp, #8
 8008502:	4604      	mov	r4, r0
 8008504:	4608      	mov	r0, r1
 8008506:	4611      	mov	r1, r2
 8008508:	461a      	mov	r2, r3
 800850a:	4623      	mov	r3, r4
 800850c:	80fb      	strh	r3, [r7, #6]
 800850e:	4603      	mov	r3, r0
 8008510:	80bb      	strh	r3, [r7, #4]
 8008512:	460b      	mov	r3, r1
 8008514:	70fb      	strb	r3, [r7, #3]
 8008516:	4613      	mov	r3, r2
 8008518:	70bb      	strb	r3, [r7, #2]
    // 绘制进度条外框
    OLED_DrawRectangle(x, y, width, 6);
 800851a:	78fa      	ldrb	r2, [r7, #3]
 800851c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8008520:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8008524:	2306      	movs	r3, #6
 8008526:	f000 f827 	bl	8008578 <OLED_DrawRectangle>

    // 计算并绘制进度条填充部分
    if (progress > 0)
 800852a:	78bb      	ldrb	r3, [r7, #2]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d01c      	beq.n	800856a <OLED_DrawProgressBar+0x6e>
    {
        uint8_t fillWidth = ((width - 2) * progress) / 100;
 8008530:	78fb      	ldrb	r3, [r7, #3]
 8008532:	3b02      	subs	r3, #2
 8008534:	78ba      	ldrb	r2, [r7, #2]
 8008536:	fb02 f303 	mul.w	r3, r2, r3
 800853a:	4a0e      	ldr	r2, [pc, #56]	@ (8008574 <OLED_DrawProgressBar+0x78>)
 800853c:	fb82 1203 	smull	r1, r2, r2, r3
 8008540:	1152      	asrs	r2, r2, #5
 8008542:	17db      	asrs	r3, r3, #31
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	73fb      	strb	r3, [r7, #15]
        if (fillWidth > 0)
 8008548:	7bfb      	ldrb	r3, [r7, #15]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00d      	beq.n	800856a <OLED_DrawProgressBar+0x6e>
        {
            OLED_DrawFilledRectangle(x + 1, y + 1, fillWidth, 4, 1);
 800854e:	88fb      	ldrh	r3, [r7, #6]
 8008550:	3301      	adds	r3, #1
 8008552:	b29b      	uxth	r3, r3
 8008554:	b218      	sxth	r0, r3
 8008556:	88bb      	ldrh	r3, [r7, #4]
 8008558:	3301      	adds	r3, #1
 800855a:	b29b      	uxth	r3, r3
 800855c:	b219      	sxth	r1, r3
 800855e:	7bfa      	ldrb	r2, [r7, #15]
 8008560:	2301      	movs	r3, #1
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	2304      	movs	r3, #4
 8008566:	f000 f8bc 	bl	80086e2 <OLED_DrawFilledRectangle>
        }
    }
}
 800856a:	bf00      	nop
 800856c:	3714      	adds	r7, #20
 800856e:	46bd      	mov	sp, r7
 8008570:	bd90      	pop	{r4, r7, pc}
 8008572:	bf00      	nop
 8008574:	51eb851f 	.word	0x51eb851f

08008578 <OLED_DrawRectangle>:

// 绘制空心矩形
// Parameters x and y are changed to int16_t to handle negative coordinates.
void OLED_DrawRectangle(int16_t x, int16_t y, uint8_t width, uint8_t height) //! UPDATEDISPLAY REQUIRED
{
 8008578:	b590      	push	{r4, r7, lr}
 800857a:	b087      	sub	sp, #28
 800857c:	af00      	add	r7, sp, #0
 800857e:	4604      	mov	r4, r0
 8008580:	4608      	mov	r0, r1
 8008582:	4611      	mov	r1, r2
 8008584:	461a      	mov	r2, r3
 8008586:	4623      	mov	r3, r4
 8008588:	80fb      	strh	r3, [r7, #6]
 800858a:	4603      	mov	r3, r0
 800858c:	80bb      	strh	r3, [r7, #4]
 800858e:	460b      	mov	r3, r1
 8008590:	70fb      	strb	r3, [r7, #3]
 8008592:	4613      	mov	r3, r2
 8008594:	70bb      	strb	r3, [r7, #2]
    // Initial check for zero dimensions
    if (width == 0 || height == 0)
 8008596:	78fb      	ldrb	r3, [r7, #3]
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 8098 	beq.w	80086ce <OLED_DrawRectangle+0x156>
 800859e:	78bb      	ldrb	r3, [r7, #2]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f000 8094 	beq.w	80086ce <OLED_DrawRectangle+0x156>
        return;
    }

    // Use int16_t for width and height internally for clipping calculations
    // to prevent overflow and handle adjustments correctly.
    int16_t current_width = width;
 80085a6:	78fb      	ldrb	r3, [r7, #3]
 80085a8:	82fb      	strh	r3, [r7, #22]
    int16_t current_height = height;
 80085aa:	78bb      	ldrb	r3, [r7, #2]
 80085ac:	82bb      	strh	r3, [r7, #20]

    // Clip left edge: if x is negative, adjust width and set x to 0
    if (x < 0)
 80085ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	da06      	bge.n	80085c4 <OLED_DrawRectangle+0x4c>
    {
        current_width += x; // x is negative, so this reduces width
 80085b6:	8afa      	ldrh	r2, [r7, #22]
 80085b8:	88fb      	ldrh	r3, [r7, #6]
 80085ba:	4413      	add	r3, r2
 80085bc:	b29b      	uxth	r3, r3
 80085be:	82fb      	strh	r3, [r7, #22]
        x = 0;
 80085c0:	2300      	movs	r3, #0
 80085c2:	80fb      	strh	r3, [r7, #6]
    }

    // Clip top edge: if y is negative, adjust height and set y to 0
    if (y < 0)
 80085c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	da06      	bge.n	80085da <OLED_DrawRectangle+0x62>
    {
        current_height += y; // y is negative, so this reduces height
 80085cc:	8aba      	ldrh	r2, [r7, #20]
 80085ce:	88bb      	ldrh	r3, [r7, #4]
 80085d0:	4413      	add	r3, r2
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	82bb      	strh	r3, [r7, #20]
        y = 0;
 80085d6:	2300      	movs	r3, #0
 80085d8:	80bb      	strh	r3, [r7, #4]
    }

    // If width or height became non-positive after left/top clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 80085da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	dd77      	ble.n	80086d2 <OLED_DrawRectangle+0x15a>
 80085e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	dd73      	ble.n	80086d2 <OLED_DrawRectangle+0x15a>
    }

    // Check if the adjusted rectangle is entirely off-screen to the right or bottom
    // At this point, x and y are >= 0.
    // Assuming OLED_WIDTH and OLED_HEIGHT are defined (e.g., in oled.h)
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT)
 80085ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80085ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80085f0:	dc71      	bgt.n	80086d6 <OLED_DrawRectangle+0x15e>
 80085f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80085f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80085f8:	dc6d      	bgt.n	80086d6 <OLED_DrawRectangle+0x15e>
    {
        return;
    }

    // Clip right edge: if x + current_width extends beyond OLED_WIDTH
    if (x + current_width > OLED_WIDTH)
 80085fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80085fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008602:	4413      	add	r3, r2
 8008604:	2b80      	cmp	r3, #128	@ 0x80
 8008606:	dd04      	ble.n	8008612 <OLED_DrawRectangle+0x9a>
    {
        current_width = OLED_WIDTH - x;
 8008608:	88fb      	ldrh	r3, [r7, #6]
 800860a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800860e:	b29b      	uxth	r3, r3
 8008610:	82fb      	strh	r3, [r7, #22]
    }

    // Clip bottom edge: if y + current_height extends beyond OLED_HEIGHT
    if (y + current_height > OLED_HEIGHT)
 8008612:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008616:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800861a:	4413      	add	r3, r2
 800861c:	2b40      	cmp	r3, #64	@ 0x40
 800861e:	dd04      	ble.n	800862a <OLED_DrawRectangle+0xb2>
    {
        current_height = OLED_HEIGHT - y;
 8008620:	88bb      	ldrh	r3, [r7, #4]
 8008622:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8008626:	b29b      	uxth	r3, r3
 8008628:	82bb      	strh	r3, [r7, #20]
    }

    // If width or height became non-positive after right/bottom clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 800862a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800862e:	2b00      	cmp	r3, #0
 8008630:	dd53      	ble.n	80086da <OLED_DrawRectangle+0x162>
 8008632:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008636:	2b00      	cmp	r3, #0
 8008638:	dd4f      	ble.n	80086da <OLED_DrawRectangle+0x162>
    }

    // At this point, x, y, current_width, and current_height define the drawable part
    // of the rectangle. Cast coordinates and dimensions to uint8_t for drawing,
    // as they are now confirmed to be within valid screen bounds.
    uint8_t final_x = (uint8_t)x;
 800863a:	88fb      	ldrh	r3, [r7, #6]
 800863c:	747b      	strb	r3, [r7, #17]
    uint8_t final_y = (uint8_t)y;
 800863e:	88bb      	ldrh	r3, [r7, #4]
 8008640:	743b      	strb	r3, [r7, #16]
    uint8_t final_width = (uint8_t)current_width;
 8008642:	8afb      	ldrh	r3, [r7, #22]
 8008644:	73fb      	strb	r3, [r7, #15]
    uint8_t final_height = (uint8_t)current_height;
 8008646:	8abb      	ldrh	r3, [r7, #20]
 8008648:	73bb      	strb	r3, [r7, #14]

    // Calculate the bottom-right corner coordinates
    uint8_t x2 = final_x + final_width - 1;
 800864a:	7c7a      	ldrb	r2, [r7, #17]
 800864c:	7bfb      	ldrb	r3, [r7, #15]
 800864e:	4413      	add	r3, r2
 8008650:	b2db      	uxtb	r3, r3
 8008652:	3b01      	subs	r3, #1
 8008654:	737b      	strb	r3, [r7, #13]
    uint8_t y2 = final_y + final_height - 1;
 8008656:	7c3a      	ldrb	r2, [r7, #16]
 8008658:	7bbb      	ldrb	r3, [r7, #14]
 800865a:	4413      	add	r3, r2
 800865c:	b2db      	uxtb	r3, r3
 800865e:	3b01      	subs	r3, #1
 8008660:	733b      	strb	r3, [r7, #12]

    // Draw horizontal lines
    for (uint8_t i = final_x; i <= x2; i++)
 8008662:	7c7b      	ldrb	r3, [r7, #17]
 8008664:	74fb      	strb	r3, [r7, #19]
 8008666:	e012      	b.n	800868e <OLED_DrawRectangle+0x116>
    {
        OLED_WritePixel(i, final_y, 1); // Top line
 8008668:	7cfb      	ldrb	r3, [r7, #19]
 800866a:	b21b      	sxth	r3, r3
 800866c:	7c3a      	ldrb	r2, [r7, #16]
 800866e:	b211      	sxth	r1, r2
 8008670:	2201      	movs	r2, #1
 8008672:	4618      	mov	r0, r3
 8008674:	f7fa f868 	bl	8002748 <OLED_WritePixel>
        OLED_WritePixel(i, y2, 1);      // Bottom line
 8008678:	7cfb      	ldrb	r3, [r7, #19]
 800867a:	b21b      	sxth	r3, r3
 800867c:	7b3a      	ldrb	r2, [r7, #12]
 800867e:	b211      	sxth	r1, r2
 8008680:	2201      	movs	r2, #1
 8008682:	4618      	mov	r0, r3
 8008684:	f7fa f860 	bl	8002748 <OLED_WritePixel>
    for (uint8_t i = final_x; i <= x2; i++)
 8008688:	7cfb      	ldrb	r3, [r7, #19]
 800868a:	3301      	adds	r3, #1
 800868c:	74fb      	strb	r3, [r7, #19]
 800868e:	7cfa      	ldrb	r2, [r7, #19]
 8008690:	7b7b      	ldrb	r3, [r7, #13]
 8008692:	429a      	cmp	r2, r3
 8008694:	d9e8      	bls.n	8008668 <OLED_DrawRectangle+0xf0>
    }

    // Draw vertical lines
    // Loop from final_y + 1 to y2 - 1 to avoid double-drawing corners
    // and to correctly handle height = 1 or 2.
    for (uint8_t j = final_y + 1; j < y2; j++)
 8008696:	7c3b      	ldrb	r3, [r7, #16]
 8008698:	3301      	adds	r3, #1
 800869a:	74bb      	strb	r3, [r7, #18]
 800869c:	e012      	b.n	80086c4 <OLED_DrawRectangle+0x14c>
    {
        OLED_WritePixel(final_x, j, 1); // Left line
 800869e:	7c7b      	ldrb	r3, [r7, #17]
 80086a0:	b21b      	sxth	r3, r3
 80086a2:	7cba      	ldrb	r2, [r7, #18]
 80086a4:	b211      	sxth	r1, r2
 80086a6:	2201      	movs	r2, #1
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7fa f84d 	bl	8002748 <OLED_WritePixel>
        OLED_WritePixel(x2, j, 1);      // Right line
 80086ae:	7b7b      	ldrb	r3, [r7, #13]
 80086b0:	b21b      	sxth	r3, r3
 80086b2:	7cba      	ldrb	r2, [r7, #18]
 80086b4:	b211      	sxth	r1, r2
 80086b6:	2201      	movs	r2, #1
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fa f845 	bl	8002748 <OLED_WritePixel>
    for (uint8_t j = final_y + 1; j < y2; j++)
 80086be:	7cbb      	ldrb	r3, [r7, #18]
 80086c0:	3301      	adds	r3, #1
 80086c2:	74bb      	strb	r3, [r7, #18]
 80086c4:	7cba      	ldrb	r2, [r7, #18]
 80086c6:	7b3b      	ldrb	r3, [r7, #12]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d3e8      	bcc.n	800869e <OLED_DrawRectangle+0x126>
 80086cc:	e006      	b.n	80086dc <OLED_DrawRectangle+0x164>
        return;
 80086ce:	bf00      	nop
 80086d0:	e004      	b.n	80086dc <OLED_DrawRectangle+0x164>
        return;
 80086d2:	bf00      	nop
 80086d4:	e002      	b.n	80086dc <OLED_DrawRectangle+0x164>
        return;
 80086d6:	bf00      	nop
 80086d8:	e000      	b.n	80086dc <OLED_DrawRectangle+0x164>
        return;
 80086da:	bf00      	nop
    }
}
 80086dc:	371c      	adds	r7, #28
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd90      	pop	{r4, r7, pc}

080086e2 <OLED_DrawFilledRectangle>:

// 绘制填充矩形
void OLED_DrawFilledRectangle(int16_t x, int16_t y, uint8_t width, uint8_t height, uint8_t color) //! UPDATEDISPLAY REQUIRED
{
 80086e2:	b590      	push	{r4, r7, lr}
 80086e4:	b087      	sub	sp, #28
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	4604      	mov	r4, r0
 80086ea:	4608      	mov	r0, r1
 80086ec:	4611      	mov	r1, r2
 80086ee:	461a      	mov	r2, r3
 80086f0:	4623      	mov	r3, r4
 80086f2:	80fb      	strh	r3, [r7, #6]
 80086f4:	4603      	mov	r3, r0
 80086f6:	80bb      	strh	r3, [r7, #4]
 80086f8:	460b      	mov	r3, r1
 80086fa:	70fb      	strb	r3, [r7, #3]
 80086fc:	4613      	mov	r3, r2
 80086fe:	70bb      	strb	r3, [r7, #2]
    // Initial check for zero dimensions
    if (width == 0 || height == 0)
 8008700:	78fb      	ldrb	r3, [r7, #3]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d07e      	beq.n	8008804 <OLED_DrawFilledRectangle+0x122>
 8008706:	78bb      	ldrb	r3, [r7, #2]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d07b      	beq.n	8008804 <OLED_DrawFilledRectangle+0x122>
    {
        return;
    }

    // Use int16_t for width and height internally for clipping calculations
    int16_t current_width = width;
 800870c:	78fb      	ldrb	r3, [r7, #3]
 800870e:	82fb      	strh	r3, [r7, #22]
    int16_t current_height = height;
 8008710:	78bb      	ldrb	r3, [r7, #2]
 8008712:	82bb      	strh	r3, [r7, #20]

    // Clip left edge: if x is negative, adjust width and set x to 0
    if (x < 0)
 8008714:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008718:	2b00      	cmp	r3, #0
 800871a:	da06      	bge.n	800872a <OLED_DrawFilledRectangle+0x48>
    {
        current_width += x; // x is negative, so this reduces width
 800871c:	8afa      	ldrh	r2, [r7, #22]
 800871e:	88fb      	ldrh	r3, [r7, #6]
 8008720:	4413      	add	r3, r2
 8008722:	b29b      	uxth	r3, r3
 8008724:	82fb      	strh	r3, [r7, #22]
        x = 0;
 8008726:	2300      	movs	r3, #0
 8008728:	80fb      	strh	r3, [r7, #6]
    }

    // Clip top edge: if y is negative, adjust height and set y to 0
    if (y < 0)
 800872a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	da06      	bge.n	8008740 <OLED_DrawFilledRectangle+0x5e>
    {
        current_height += y; // y is negative, so this reduces height
 8008732:	8aba      	ldrh	r2, [r7, #20]
 8008734:	88bb      	ldrh	r3, [r7, #4]
 8008736:	4413      	add	r3, r2
 8008738:	b29b      	uxth	r3, r3
 800873a:	82bb      	strh	r3, [r7, #20]
        y = 0;
 800873c:	2300      	movs	r3, #0
 800873e:	80bb      	strh	r3, [r7, #4]
    }

    // If width or height became non-positive after left/top clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 8008740:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008744:	2b00      	cmp	r3, #0
 8008746:	dd5f      	ble.n	8008808 <OLED_DrawFilledRectangle+0x126>
 8008748:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800874c:	2b00      	cmp	r3, #0
 800874e:	dd5b      	ble.n	8008808 <OLED_DrawFilledRectangle+0x126>
        return;
    }

    // Check if the adjusted rectangle is entirely off-screen to the right or bottom
    // At this point, x and y are >= 0.
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT)
 8008750:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008754:	2b7f      	cmp	r3, #127	@ 0x7f
 8008756:	dc59      	bgt.n	800880c <OLED_DrawFilledRectangle+0x12a>
 8008758:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800875c:	2b3f      	cmp	r3, #63	@ 0x3f
 800875e:	dc55      	bgt.n	800880c <OLED_DrawFilledRectangle+0x12a>
    {
        return;
    }

    // Clip right edge: if x + current_width extends beyond OLED_WIDTH
    if (x + current_width > OLED_WIDTH)
 8008760:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008764:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008768:	4413      	add	r3, r2
 800876a:	2b80      	cmp	r3, #128	@ 0x80
 800876c:	dd04      	ble.n	8008778 <OLED_DrawFilledRectangle+0x96>
    {
        current_width = OLED_WIDTH - x;
 800876e:	88fb      	ldrh	r3, [r7, #6]
 8008770:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8008774:	b29b      	uxth	r3, r3
 8008776:	82fb      	strh	r3, [r7, #22]
    }

    // Clip bottom edge: if y + current_height extends beyond OLED_HEIGHT
    if (y + current_height > OLED_HEIGHT)
 8008778:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800877c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008780:	4413      	add	r3, r2
 8008782:	2b40      	cmp	r3, #64	@ 0x40
 8008784:	dd04      	ble.n	8008790 <OLED_DrawFilledRectangle+0xae>
    {
        current_height = OLED_HEIGHT - y;
 8008786:	88bb      	ldrh	r3, [r7, #4]
 8008788:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800878c:	b29b      	uxth	r3, r3
 800878e:	82bb      	strh	r3, [r7, #20]
    }

    // If width or height became non-positive after right/bottom clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 8008790:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008794:	2b00      	cmp	r3, #0
 8008796:	dd3b      	ble.n	8008810 <OLED_DrawFilledRectangle+0x12e>
 8008798:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800879c:	2b00      	cmp	r3, #0
 800879e:	dd37      	ble.n	8008810 <OLED_DrawFilledRectangle+0x12e>
    {
        return;
    }

    // Cast coordinates and dimensions to uint8_t for drawing
    uint8_t final_x = (uint8_t)x;
 80087a0:	88fb      	ldrh	r3, [r7, #6]
 80087a2:	747b      	strb	r3, [r7, #17]
    uint8_t final_y = (uint8_t)y;
 80087a4:	88bb      	ldrh	r3, [r7, #4]
 80087a6:	743b      	strb	r3, [r7, #16]
    uint8_t final_width = (uint8_t)current_width;
 80087a8:	8afb      	ldrh	r3, [r7, #22]
 80087aa:	73fb      	strb	r3, [r7, #15]
    uint8_t final_height = (uint8_t)current_height;
 80087ac:	8abb      	ldrh	r3, [r7, #20]
 80087ae:	73bb      	strb	r3, [r7, #14]

    uint8_t x2 = final_x + final_width - 1;
 80087b0:	7c7a      	ldrb	r2, [r7, #17]
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
 80087b4:	4413      	add	r3, r2
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	3b01      	subs	r3, #1
 80087ba:	737b      	strb	r3, [r7, #13]
    uint8_t y2 = final_y + final_height - 1;
 80087bc:	7c3a      	ldrb	r2, [r7, #16]
 80087be:	7bbb      	ldrb	r3, [r7, #14]
 80087c0:	4413      	add	r3, r2
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	3b01      	subs	r3, #1
 80087c6:	733b      	strb	r3, [r7, #12]

    // 逐像素填充
    for (uint8_t j = final_y; j <= y2; j++)
 80087c8:	7c3b      	ldrb	r3, [r7, #16]
 80087ca:	74fb      	strb	r3, [r7, #19]
 80087cc:	e015      	b.n	80087fa <OLED_DrawFilledRectangle+0x118>
    {
        for (uint8_t i = final_x; i <= x2; i++)
 80087ce:	7c7b      	ldrb	r3, [r7, #17]
 80087d0:	74bb      	strb	r3, [r7, #18]
 80087d2:	e00b      	b.n	80087ec <OLED_DrawFilledRectangle+0x10a>
        {
            OLED_WritePixel(i, j, color);
 80087d4:	7cbb      	ldrb	r3, [r7, #18]
 80087d6:	b21b      	sxth	r3, r3
 80087d8:	7cfa      	ldrb	r2, [r7, #19]
 80087da:	b211      	sxth	r1, r2
 80087dc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7f9 ffb1 	bl	8002748 <OLED_WritePixel>
        for (uint8_t i = final_x; i <= x2; i++)
 80087e6:	7cbb      	ldrb	r3, [r7, #18]
 80087e8:	3301      	adds	r3, #1
 80087ea:	74bb      	strb	r3, [r7, #18]
 80087ec:	7cba      	ldrb	r2, [r7, #18]
 80087ee:	7b7b      	ldrb	r3, [r7, #13]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d9ef      	bls.n	80087d4 <OLED_DrawFilledRectangle+0xf2>
    for (uint8_t j = final_y; j <= y2; j++)
 80087f4:	7cfb      	ldrb	r3, [r7, #19]
 80087f6:	3301      	adds	r3, #1
 80087f8:	74fb      	strb	r3, [r7, #19]
 80087fa:	7cfa      	ldrb	r2, [r7, #19]
 80087fc:	7b3b      	ldrb	r3, [r7, #12]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d9e5      	bls.n	80087ce <OLED_DrawFilledRectangle+0xec>
 8008802:	e006      	b.n	8008812 <OLED_DrawFilledRectangle+0x130>
        return;
 8008804:	bf00      	nop
 8008806:	e004      	b.n	8008812 <OLED_DrawFilledRectangle+0x130>
        return;
 8008808:	bf00      	nop
 800880a:	e002      	b.n	8008812 <OLED_DrawFilledRectangle+0x130>
        return;
 800880c:	bf00      	nop
 800880e:	e000      	b.n	8008812 <OLED_DrawFilledRectangle+0x130>
        return;
 8008810:	bf00      	nop
        }
    }
}
 8008812:	371c      	adds	r7, #28
 8008814:	46bd      	mov	sp, r7
 8008816:	bd90      	pop	{r4, r7, pc}

08008818 <OLED_DrawIcon>:
//     }
// }

// 绘制图标 - 40x40水平扫描格式
void OLED_DrawIcon(int16_t x, int16_t y, IconType_t iconType) //! UPDATEDISPLAY REQUIRED
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
 800881e:	4603      	mov	r3, r0
 8008820:	80fb      	strh	r3, [r7, #6]
 8008822:	460b      	mov	r3, r1
 8008824:	80bb      	strh	r3, [r7, #4]
 8008826:	4613      	mov	r3, r2
 8008828:	70fb      	strb	r3, [r7, #3]
    const unsigned char *iconData = NULL;
 800882a:	2300      	movs	r3, #0
 800882c:	617b      	str	r3, [r7, #20]
    uint8_t iconWidth = 36;  // 图标宽度（36像素）
 800882e:	2324      	movs	r3, #36	@ 0x24
 8008830:	747b      	strb	r3, [r7, #17]
    uint8_t iconHeight = 36; // 图标高度（36像素）
 8008832:	2324      	movs	r3, #36	@ 0x24
 8008834:	743b      	strb	r3, [r7, #16]

    // 根据图标类型选择对应的数据
    switch (iconType)
 8008836:	78fb      	ldrb	r3, [r7, #3]
 8008838:	2b05      	cmp	r3, #5
 800883a:	d87f      	bhi.n	800893c <OLED_DrawIcon+0x124>
 800883c:	a201      	add	r2, pc, #4	@ (adr r2, 8008844 <OLED_DrawIcon+0x2c>)
 800883e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008842:	bf00      	nop
 8008844:	0800885d 	.word	0x0800885d
 8008848:	08008863 	.word	0x08008863
 800884c:	08008869 	.word	0x08008869
 8008850:	0800886f 	.word	0x0800886f
 8008854:	08008875 	.word	0x08008875
 8008858:	0800887b 	.word	0x0800887b
    {
    case ICON_GAME:
        iconData = IMG_GAME_DATA;
 800885c:	4b3a      	ldr	r3, [pc, #232]	@ (8008948 <OLED_DrawIcon+0x130>)
 800885e:	617b      	str	r3, [r7, #20]
        break;
 8008860:	e00e      	b.n	8008880 <OLED_DrawIcon+0x68>
    case ICON_TOOL:
        iconData = IMG_TOOL_DATA;
 8008862:	4b3a      	ldr	r3, [pc, #232]	@ (800894c <OLED_DrawIcon+0x134>)
 8008864:	617b      	str	r3, [r7, #20]
        break;
 8008866:	e00b      	b.n	8008880 <OLED_DrawIcon+0x68>
    case ICON_STATUS:
        iconData = IMG_STATUS_DATA;
 8008868:	4b39      	ldr	r3, [pc, #228]	@ (8008950 <OLED_DrawIcon+0x138>)
 800886a:	617b      	str	r3, [r7, #20]
        break;
 800886c:	e008      	b.n	8008880 <OLED_DrawIcon+0x68>
    case ICON_SETTINGS:
        iconData = IMG_SETTINGS_DATA;
 800886e:	4b39      	ldr	r3, [pc, #228]	@ (8008954 <OLED_DrawIcon+0x13c>)
 8008870:	617b      	str	r3, [r7, #20]
        break;
 8008872:	e005      	b.n	8008880 <OLED_DrawIcon+0x68>
    case ICON_ABOUT:
        iconData = IMG_ABOUT_DATA;
 8008874:	4b38      	ldr	r3, [pc, #224]	@ (8008958 <OLED_DrawIcon+0x140>)
 8008876:	617b      	str	r3, [r7, #20]
        break;
 8008878:	e002      	b.n	8008880 <OLED_DrawIcon+0x68>
    case ICON_DEVELOPER:
        iconData = IMG_DEVELOPER_DATA;
 800887a:	4b38      	ldr	r3, [pc, #224]	@ (800895c <OLED_DrawIcon+0x144>)
 800887c:	617b      	str	r3, [r7, #20]
        break;
 800887e:	bf00      	nop
    default:
        return; // 无效的图标类型，直接返回
    }

    // 检查图标数据是否有效
    if (iconData == NULL)
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d05c      	beq.n	8008940 <OLED_DrawIcon+0x128>
        return;    // 水平扫描格式：从左往右，从上往下，每8个像素一个字节
    // 36像素宽度需要5个字节每行（36/8=4.5，向上取整为5），36行共180字节
    for (uint8_t row = 0; row < iconHeight; row++)
 8008886:	2300      	movs	r3, #0
 8008888:	74fb      	strb	r3, [r7, #19]
 800888a:	e052      	b.n	8008932 <OLED_DrawIcon+0x11a>
    {
        for (uint8_t col = 0; col < iconWidth; col++)
 800888c:	2300      	movs	r3, #0
 800888e:	74bb      	strb	r3, [r7, #18]
 8008890:	e048      	b.n	8008924 <OLED_DrawIcon+0x10c>
        {
            // 计算当前像素在屏幕上的坐标
            int16_t pixel_x = x + col;
 8008892:	7cbb      	ldrb	r3, [r7, #18]
 8008894:	b29a      	uxth	r2, r3
 8008896:	88fb      	ldrh	r3, [r7, #6]
 8008898:	4413      	add	r3, r2
 800889a:	b29b      	uxth	r3, r3
 800889c:	81fb      	strh	r3, [r7, #14]
            int16_t pixel_y = y + row;
 800889e:	7cfb      	ldrb	r3, [r7, #19]
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	88bb      	ldrh	r3, [r7, #4]
 80088a4:	4413      	add	r3, r2
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	81bb      	strh	r3, [r7, #12]

            // 边界检查
            if (pixel_x < 0 || pixel_x >= OLED_WIDTH ||
 80088aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	db34      	blt.n	800891c <OLED_DrawIcon+0x104>
 80088b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80088b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80088b8:	dc30      	bgt.n	800891c <OLED_DrawIcon+0x104>
 80088ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	db2c      	blt.n	800891c <OLED_DrawIcon+0x104>
                pixel_y < 0 || pixel_y >= OLED_HEIGHT)
 80088c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80088c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80088c8:	dc28      	bgt.n	800891c <OLED_DrawIcon+0x104>
                continue;

            // 水平扫描格式的数据组织方式：
            // 每行有5个字节（36像素/8像素每字节，向上取整）
            // byte_index = 行索引 * 5 + 当前列在该行中的字节位置
            uint16_t byte_index = row * 5 + (col / 8);
 80088ca:	7cfb      	ldrb	r3, [r7, #19]
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	461a      	mov	r2, r3
 80088d0:	0092      	lsls	r2, r2, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	7cba      	ldrb	r2, [r7, #18]
 80088d8:	08d2      	lsrs	r2, r2, #3
 80088da:	b2d2      	uxtb	r2, r2
 80088dc:	4413      	add	r3, r2
 80088de:	817b      	strh	r3, [r7, #10]
            uint8_t bit_index = col % 8;
 80088e0:	7cbb      	ldrb	r3, [r7, #18]
 80088e2:	f003 0307 	and.w	r3, r3, #7
 80088e6:	727b      	strb	r3, [r7, #9]

            // 检查字节索引是否在有效范围内
            if (byte_index < 180) // 图标数据大小为180字节（36*36像素，每行5字节）
 80088e8:	897b      	ldrh	r3, [r7, #10]
 80088ea:	2bb3      	cmp	r3, #179	@ 0xb3
 80088ec:	d817      	bhi.n	800891e <OLED_DrawIcon+0x106>
            {
                // 提取像素值（从字节的最高位开始，从左到右）
                uint8_t pixel_value = (iconData[byte_index] >> (7 - bit_index)) & 0x01;
 80088ee:	897b      	ldrh	r3, [r7, #10]
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	4413      	add	r3, r2
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	461a      	mov	r2, r3
 80088f8:	7a7b      	ldrb	r3, [r7, #9]
 80088fa:	f1c3 0307 	rsb	r3, r3, #7
 80088fe:	fa42 f303 	asr.w	r3, r2, r3
 8008902:	b2db      	uxtb	r3, r3
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	723b      	strb	r3, [r7, #8]

                // 绘制像素
                OLED_WritePixel(pixel_x, pixel_y, pixel_value);
 800890a:	7a3a      	ldrb	r2, [r7, #8]
 800890c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8008910:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008914:	4618      	mov	r0, r3
 8008916:	f7f9 ff17 	bl	8002748 <OLED_WritePixel>
 800891a:	e000      	b.n	800891e <OLED_DrawIcon+0x106>
                continue;
 800891c:	bf00      	nop
        for (uint8_t col = 0; col < iconWidth; col++)
 800891e:	7cbb      	ldrb	r3, [r7, #18]
 8008920:	3301      	adds	r3, #1
 8008922:	74bb      	strb	r3, [r7, #18]
 8008924:	7cba      	ldrb	r2, [r7, #18]
 8008926:	7c7b      	ldrb	r3, [r7, #17]
 8008928:	429a      	cmp	r2, r3
 800892a:	d3b2      	bcc.n	8008892 <OLED_DrawIcon+0x7a>
    for (uint8_t row = 0; row < iconHeight; row++)
 800892c:	7cfb      	ldrb	r3, [r7, #19]
 800892e:	3301      	adds	r3, #1
 8008930:	74fb      	strb	r3, [r7, #19]
 8008932:	7cfa      	ldrb	r2, [r7, #19]
 8008934:	7c3b      	ldrb	r3, [r7, #16]
 8008936:	429a      	cmp	r2, r3
 8008938:	d3a8      	bcc.n	800888c <OLED_DrawIcon+0x74>
 800893a:	e002      	b.n	8008942 <OLED_DrawIcon+0x12a>
        return; // 无效的图标类型，直接返回
 800893c:	bf00      	nop
 800893e:	e000      	b.n	8008942 <OLED_DrawIcon+0x12a>
        return;    // 水平扫描格式：从左往右，从上往下，每8个像素一个字节
 8008940:	bf00      	nop
            }
        }
    }
}
 8008942:	3718      	adds	r7, #24
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	20000004 	.word	0x20000004
 800894c:	200000b8 	.word	0x200000b8
 8008950:	2000016c 	.word	0x2000016c
 8008954:	20000220 	.word	0x20000220
 8008958:	200002d4 	.word	0x200002d4
 800895c:	20000388 	.word	0x20000388

08008960 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8008964:	4b17      	ldr	r3, [pc, #92]	@ (80089c4 <MX_SPI2_Init+0x64>)
 8008966:	4a18      	ldr	r2, [pc, #96]	@ (80089c8 <MX_SPI2_Init+0x68>)
 8008968:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800896a:	4b16      	ldr	r3, [pc, #88]	@ (80089c4 <MX_SPI2_Init+0x64>)
 800896c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8008970:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008972:	4b14      	ldr	r3, [pc, #80]	@ (80089c4 <MX_SPI2_Init+0x64>)
 8008974:	2200      	movs	r2, #0
 8008976:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008978:	4b12      	ldr	r3, [pc, #72]	@ (80089c4 <MX_SPI2_Init+0x64>)
 800897a:	2200      	movs	r2, #0
 800897c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800897e:	4b11      	ldr	r3, [pc, #68]	@ (80089c4 <MX_SPI2_Init+0x64>)
 8008980:	2200      	movs	r2, #0
 8008982:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008984:	4b0f      	ldr	r3, [pc, #60]	@ (80089c4 <MX_SPI2_Init+0x64>)
 8008986:	2200      	movs	r2, #0
 8008988:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800898a:	4b0e      	ldr	r3, [pc, #56]	@ (80089c4 <MX_SPI2_Init+0x64>)
 800898c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008990:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008992:	4b0c      	ldr	r3, [pc, #48]	@ (80089c4 <MX_SPI2_Init+0x64>)
 8008994:	2200      	movs	r2, #0
 8008996:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008998:	4b0a      	ldr	r3, [pc, #40]	@ (80089c4 <MX_SPI2_Init+0x64>)
 800899a:	2200      	movs	r2, #0
 800899c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800899e:	4b09      	ldr	r3, [pc, #36]	@ (80089c4 <MX_SPI2_Init+0x64>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089a4:	4b07      	ldr	r3, [pc, #28]	@ (80089c4 <MX_SPI2_Init+0x64>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80089aa:	4b06      	ldr	r3, [pc, #24]	@ (80089c4 <MX_SPI2_Init+0x64>)
 80089ac:	220a      	movs	r2, #10
 80089ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80089b0:	4804      	ldr	r0, [pc, #16]	@ (80089c4 <MX_SPI2_Init+0x64>)
 80089b2:	f002 f9b9 	bl	800ad28 <HAL_SPI_Init>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d001      	beq.n	80089c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80089bc:	f7f9 fd71 	bl	80024a2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80089c0:	bf00      	nop
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	200043ec 	.word	0x200043ec
 80089c8:	40003800 	.word	0x40003800

080089cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b088      	sub	sp, #32
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089d4:	f107 0310 	add.w	r3, r7, #16
 80089d8:	2200      	movs	r2, #0
 80089da:	601a      	str	r2, [r3, #0]
 80089dc:	605a      	str	r2, [r3, #4]
 80089de:	609a      	str	r2, [r3, #8]
 80089e0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a1c      	ldr	r2, [pc, #112]	@ (8008a58 <HAL_SPI_MspInit+0x8c>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d131      	bne.n	8008a50 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80089ec:	4b1b      	ldr	r3, [pc, #108]	@ (8008a5c <HAL_SPI_MspInit+0x90>)
 80089ee:	69db      	ldr	r3, [r3, #28]
 80089f0:	4a1a      	ldr	r2, [pc, #104]	@ (8008a5c <HAL_SPI_MspInit+0x90>)
 80089f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80089f6:	61d3      	str	r3, [r2, #28]
 80089f8:	4b18      	ldr	r3, [pc, #96]	@ (8008a5c <HAL_SPI_MspInit+0x90>)
 80089fa:	69db      	ldr	r3, [r3, #28]
 80089fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a00:	60fb      	str	r3, [r7, #12]
 8008a02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a04:	4b15      	ldr	r3, [pc, #84]	@ (8008a5c <HAL_SPI_MspInit+0x90>)
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	4a14      	ldr	r2, [pc, #80]	@ (8008a5c <HAL_SPI_MspInit+0x90>)
 8008a0a:	f043 0308 	orr.w	r3, r3, #8
 8008a0e:	6193      	str	r3, [r2, #24]
 8008a10:	4b12      	ldr	r3, [pc, #72]	@ (8008a5c <HAL_SPI_MspInit+0x90>)
 8008a12:	699b      	ldr	r3, [r3, #24]
 8008a14:	f003 0308 	and.w	r3, r3, #8
 8008a18:	60bb      	str	r3, [r7, #8]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = Flash_SCK_Pin|Flash_MOSI_Pin;
 8008a1c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8008a20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a22:	2302      	movs	r3, #2
 8008a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008a26:	2303      	movs	r3, #3
 8008a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a2a:	f107 0310 	add.w	r3, r7, #16
 8008a2e:	4619      	mov	r1, r3
 8008a30:	480b      	ldr	r0, [pc, #44]	@ (8008a60 <HAL_SPI_MspInit+0x94>)
 8008a32:	f000 ff2d 	bl	8009890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Flash_MISO_Pin;
 8008a36:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008a3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a40:	2300      	movs	r3, #0
 8008a42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Flash_MISO_GPIO_Port, &GPIO_InitStruct);
 8008a44:	f107 0310 	add.w	r3, r7, #16
 8008a48:	4619      	mov	r1, r3
 8008a4a:	4805      	ldr	r0, [pc, #20]	@ (8008a60 <HAL_SPI_MspInit+0x94>)
 8008a4c:	f000 ff20 	bl	8009890 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8008a50:	bf00      	nop
 8008a52:	3720      	adds	r7, #32
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	40003800 	.word	0x40003800
 8008a5c:	40021000 	.word	0x40021000
 8008a60:	40010c00 	.word	0x40010c00

08008a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008a6a:	4b15      	ldr	r3, [pc, #84]	@ (8008ac0 <HAL_MspInit+0x5c>)
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	4a14      	ldr	r2, [pc, #80]	@ (8008ac0 <HAL_MspInit+0x5c>)
 8008a70:	f043 0301 	orr.w	r3, r3, #1
 8008a74:	6193      	str	r3, [r2, #24]
 8008a76:	4b12      	ldr	r3, [pc, #72]	@ (8008ac0 <HAL_MspInit+0x5c>)
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	f003 0301 	and.w	r3, r3, #1
 8008a7e:	60bb      	str	r3, [r7, #8]
 8008a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008a82:	4b0f      	ldr	r3, [pc, #60]	@ (8008ac0 <HAL_MspInit+0x5c>)
 8008a84:	69db      	ldr	r3, [r3, #28]
 8008a86:	4a0e      	ldr	r2, [pc, #56]	@ (8008ac0 <HAL_MspInit+0x5c>)
 8008a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a8c:	61d3      	str	r3, [r2, #28]
 8008a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ac0 <HAL_MspInit+0x5c>)
 8008a90:	69db      	ldr	r3, [r3, #28]
 8008a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a96:	607b      	str	r3, [r7, #4]
 8008a98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8008ac4 <HAL_MspInit+0x60>)
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8008aa6:	60fb      	str	r3, [r7, #12]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008aae:	60fb      	str	r3, [r7, #12]
 8008ab0:	4a04      	ldr	r2, [pc, #16]	@ (8008ac4 <HAL_MspInit+0x60>)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008ab6:	bf00      	nop
 8008ab8:	3714      	adds	r7, #20
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bc80      	pop	{r7}
 8008abe:	4770      	bx	lr
 8008ac0:	40021000 	.word	0x40021000
 8008ac4:	40010000 	.word	0x40010000

08008ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008acc:	bf00      	nop
 8008ace:	e7fd      	b.n	8008acc <NMI_Handler+0x4>

08008ad0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008ad4:	bf00      	nop
 8008ad6:	e7fd      	b.n	8008ad4 <HardFault_Handler+0x4>

08008ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008adc:	bf00      	nop
 8008ade:	e7fd      	b.n	8008adc <MemManage_Handler+0x4>

08008ae0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008ae4:	bf00      	nop
 8008ae6:	e7fd      	b.n	8008ae4 <BusFault_Handler+0x4>

08008ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008aec:	bf00      	nop
 8008aee:	e7fd      	b.n	8008aec <UsageFault_Handler+0x4>

08008af0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008af0:	b480      	push	{r7}
 8008af2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008af4:	bf00      	nop
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bc80      	pop	{r7}
 8008afa:	4770      	bx	lr

08008afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008afc:	b480      	push	{r7}
 8008afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008b00:	bf00      	nop
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bc80      	pop	{r7}
 8008b06:	4770      	bx	lr

08008b08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008b0c:	bf00      	nop
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bc80      	pop	{r7}
 8008b12:	4770      	bx	lr

08008b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008b18:	f000 fc0c 	bl	8009334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008b1c:	bf00      	nop
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8008b24:	4802      	ldr	r0, [pc, #8]	@ (8008b30 <DMA1_Channel6_IRQHandler+0x10>)
 8008b26:	f000 fdad 	bl	8009684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8008b2a:	bf00      	nop
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	200006fc 	.word	0x200006fc

08008b34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008b34:	b480      	push	{r7}
 8008b36:	af00      	add	r7, sp, #0
  return 1;
 8008b38:	2301      	movs	r3, #1
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bc80      	pop	{r7}
 8008b40:	4770      	bx	lr

08008b42 <_kill>:

int _kill(int pid, int sig)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b082      	sub	sp, #8
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008b4c:	f003 fa68 	bl	800c020 <__errno>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2216      	movs	r2, #22
 8008b54:	601a      	str	r2, [r3, #0]
  return -1;
 8008b56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <_exit>:

void _exit (int status)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b082      	sub	sp, #8
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008b6a:	f04f 31ff 	mov.w	r1, #4294967295
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7ff ffe7 	bl	8008b42 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008b74:	bf00      	nop
 8008b76:	e7fd      	b.n	8008b74 <_exit+0x12>

08008b78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b84:	2300      	movs	r3, #0
 8008b86:	617b      	str	r3, [r7, #20]
 8008b88:	e00a      	b.n	8008ba0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008b8a:	f3af 8000 	nop.w
 8008b8e:	4601      	mov	r1, r0
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	1c5a      	adds	r2, r3, #1
 8008b94:	60ba      	str	r2, [r7, #8]
 8008b96:	b2ca      	uxtb	r2, r1
 8008b98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	617b      	str	r3, [r7, #20]
 8008ba0:	697a      	ldr	r2, [r7, #20]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	dbf0      	blt.n	8008b8a <_read+0x12>
  }

  return len;
 8008ba8:	687b      	ldr	r3, [r7, #4]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3718      	adds	r7, #24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b086      	sub	sp, #24
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	60f8      	str	r0, [r7, #12]
 8008bba:	60b9      	str	r1, [r7, #8]
 8008bbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	617b      	str	r3, [r7, #20]
 8008bc2:	e009      	b.n	8008bd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	1c5a      	adds	r2, r3, #1
 8008bc8:	60ba      	str	r2, [r7, #8]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	617b      	str	r3, [r7, #20]
 8008bd8:	697a      	ldr	r2, [r7, #20]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	dbf1      	blt.n	8008bc4 <_write+0x12>
  }
  return len;
 8008be0:	687b      	ldr	r3, [r7, #4]
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3718      	adds	r7, #24
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <_close>:

int _close(int file)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b083      	sub	sp, #12
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008bf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bc80      	pop	{r7}
 8008bfe:	4770      	bx	lr

08008c00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008c10:	605a      	str	r2, [r3, #4]
  return 0;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bc80      	pop	{r7}
 8008c1c:	4770      	bx	lr

08008c1e <_isatty>:

int _isatty(int file)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008c26:	2301      	movs	r3, #1
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bc80      	pop	{r7}
 8008c30:	4770      	bx	lr

08008c32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b085      	sub	sp, #20
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	60f8      	str	r0, [r7, #12]
 8008c3a:	60b9      	str	r1, [r7, #8]
 8008c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bc80      	pop	{r7}
 8008c48:	4770      	bx	lr
	...

08008c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b086      	sub	sp, #24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008c54:	4a14      	ldr	r2, [pc, #80]	@ (8008ca8 <_sbrk+0x5c>)
 8008c56:	4b15      	ldr	r3, [pc, #84]	@ (8008cac <_sbrk+0x60>)
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008c60:	4b13      	ldr	r3, [pc, #76]	@ (8008cb0 <_sbrk+0x64>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d102      	bne.n	8008c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008c68:	4b11      	ldr	r3, [pc, #68]	@ (8008cb0 <_sbrk+0x64>)
 8008c6a:	4a12      	ldr	r2, [pc, #72]	@ (8008cb4 <_sbrk+0x68>)
 8008c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008c6e:	4b10      	ldr	r3, [pc, #64]	@ (8008cb0 <_sbrk+0x64>)
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4413      	add	r3, r2
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d207      	bcs.n	8008c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008c7c:	f003 f9d0 	bl	800c020 <__errno>
 8008c80:	4603      	mov	r3, r0
 8008c82:	220c      	movs	r2, #12
 8008c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008c86:	f04f 33ff 	mov.w	r3, #4294967295
 8008c8a:	e009      	b.n	8008ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008c8c:	4b08      	ldr	r3, [pc, #32]	@ (8008cb0 <_sbrk+0x64>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008c92:	4b07      	ldr	r3, [pc, #28]	@ (8008cb0 <_sbrk+0x64>)
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4413      	add	r3, r2
 8008c9a:	4a05      	ldr	r2, [pc, #20]	@ (8008cb0 <_sbrk+0x64>)
 8008c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3718      	adds	r7, #24
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	20005000 	.word	0x20005000
 8008cac:	00000400 	.word	0x00000400
 8008cb0:	20004444 	.word	0x20004444
 8008cb4:	200045f0 	.word	0x200045f0

08008cb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008cbc:	bf00      	nop
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bc80      	pop	{r7}
 8008cc2:	4770      	bx	lr

08008cc4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b08c      	sub	sp, #48	@ 0x30
 8008cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8008cca:	f107 030c 	add.w	r3, r7, #12
 8008cce:	2224      	movs	r2, #36	@ 0x24
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f003 f943 	bl	800bf5e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008cd8:	1d3b      	adds	r3, r7, #4
 8008cda:	2200      	movs	r2, #0
 8008cdc:	601a      	str	r2, [r3, #0]
 8008cde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008ce0:	4b20      	ldr	r3, [pc, #128]	@ (8008d64 <MX_TIM3_Init+0xa0>)
 8008ce2:	4a21      	ldr	r2, [pc, #132]	@ (8008d68 <MX_TIM3_Init+0xa4>)
 8008ce4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8008d64 <MX_TIM3_Init+0xa0>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008cec:	4b1d      	ldr	r3, [pc, #116]	@ (8008d64 <MX_TIM3_Init+0xa0>)
 8008cee:	2200      	movs	r2, #0
 8008cf0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8008cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8008d64 <MX_TIM3_Init+0xa0>)
 8008cf4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008cf8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8008d64 <MX_TIM3_Init+0xa0>)
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008d00:	4b18      	ldr	r3, [pc, #96]	@ (8008d64 <MX_TIM3_Init+0xa0>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8008d06:	2301      	movs	r3, #1
 8008d08:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008d12:	2300      	movs	r3, #0
 8008d14:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8008d16:	2300      	movs	r3, #0
 8008d18:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8008d22:	2300      	movs	r3, #0
 8008d24:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8008d26:	2300      	movs	r3, #0
 8008d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8008d2a:	f107 030c 	add.w	r3, r7, #12
 8008d2e:	4619      	mov	r1, r3
 8008d30:	480c      	ldr	r0, [pc, #48]	@ (8008d64 <MX_TIM3_Init+0xa0>)
 8008d32:	f002 fd8e 	bl	800b852 <HAL_TIM_Encoder_Init>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d001      	beq.n	8008d40 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8008d3c:	f7f9 fbb1 	bl	80024a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008d40:	2300      	movs	r3, #0
 8008d42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008d44:	2300      	movs	r3, #0
 8008d46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008d48:	1d3b      	adds	r3, r7, #4
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	4805      	ldr	r0, [pc, #20]	@ (8008d64 <MX_TIM3_Init+0xa0>)
 8008d4e:	f002 ff43 	bl	800bbd8 <HAL_TIMEx_MasterConfigSynchronization>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8008d58:	f7f9 fba3 	bl	80024a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8008d5c:	bf00      	nop
 8008d5e:	3730      	adds	r7, #48	@ 0x30
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	20004448 	.word	0x20004448
 8008d68:	40000400 	.word	0x40000400

08008d6c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b08a      	sub	sp, #40	@ 0x28
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d74:	f107 0314 	add.w	r3, r7, #20
 8008d78:	2200      	movs	r2, #0
 8008d7a:	601a      	str	r2, [r3, #0]
 8008d7c:	605a      	str	r2, [r3, #4]
 8008d7e:	609a      	str	r2, [r3, #8]
 8008d80:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a1e      	ldr	r2, [pc, #120]	@ (8008e00 <HAL_TIM_Encoder_MspInit+0x94>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d135      	bne.n	8008df8 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8008e04 <HAL_TIM_Encoder_MspInit+0x98>)
 8008d8e:	69db      	ldr	r3, [r3, #28]
 8008d90:	4a1c      	ldr	r2, [pc, #112]	@ (8008e04 <HAL_TIM_Encoder_MspInit+0x98>)
 8008d92:	f043 0302 	orr.w	r3, r3, #2
 8008d96:	61d3      	str	r3, [r2, #28]
 8008d98:	4b1a      	ldr	r3, [pc, #104]	@ (8008e04 <HAL_TIM_Encoder_MspInit+0x98>)
 8008d9a:	69db      	ldr	r3, [r3, #28]
 8008d9c:	f003 0302 	and.w	r3, r3, #2
 8008da0:	613b      	str	r3, [r7, #16]
 8008da2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008da4:	4b17      	ldr	r3, [pc, #92]	@ (8008e04 <HAL_TIM_Encoder_MspInit+0x98>)
 8008da6:	699b      	ldr	r3, [r3, #24]
 8008da8:	4a16      	ldr	r2, [pc, #88]	@ (8008e04 <HAL_TIM_Encoder_MspInit+0x98>)
 8008daa:	f043 0308 	orr.w	r3, r3, #8
 8008dae:	6193      	str	r3, [r2, #24]
 8008db0:	4b14      	ldr	r3, [pc, #80]	@ (8008e04 <HAL_TIM_Encoder_MspInit+0x98>)
 8008db2:	699b      	ldr	r3, [r3, #24]
 8008db4:	f003 0308 	and.w	r3, r3, #8
 8008db8:	60fb      	str	r3, [r7, #12]
 8008dba:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_CH1_Pin|Encoder_CH2_Pin;
 8008dbc:	2330      	movs	r3, #48	@ 0x30
 8008dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008dc8:	f107 0314 	add.w	r3, r7, #20
 8008dcc:	4619      	mov	r1, r3
 8008dce:	480e      	ldr	r0, [pc, #56]	@ (8008e08 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008dd0:	f000 fd5e 	bl	8009890 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8008dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8008e0c <HAL_TIM_Encoder_MspInit+0xa0>)
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ddc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8008de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008df0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008df2:	4a06      	ldr	r2, [pc, #24]	@ (8008e0c <HAL_TIM_Encoder_MspInit+0xa0>)
 8008df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8008df8:	bf00      	nop
 8008dfa:	3728      	adds	r7, #40	@ 0x28
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	40000400 	.word	0x40000400
 8008e04:	40021000 	.word	0x40021000
 8008e08:	40010c00 	.word	0x40010c00
 8008e0c:	40010000 	.word	0x40010000

08008e10 <lz77_decompress>:

#define Video_Basic_Addr 0x00000000 // Base address for video data
bool video_first_play;

int lz77_decompress(const uint8_t *input, size_t input_size, uint8_t *output, size_t output_size)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b08f      	sub	sp, #60	@ 0x3c
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
 8008e1c:	603b      	str	r3, [r7, #0]
    const uint8_t *input_end = input + input_size;
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	4413      	add	r3, r2
 8008e24:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t *output_end = output + output_size;
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	623b      	str	r3, [r7, #32]
    uint8_t *output_ptr = output;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	637b      	str	r3, [r7, #52]	@ 0x34

    while (input < input_end)
 8008e32:	e07d      	b.n	8008f30 <lz77_decompress+0x120>
    {
        uint8_t flag = *input++;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	1c5a      	adds	r2, r3, #1
 8008e38:	60fa      	str	r2, [r7, #12]
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	77fb      	strb	r3, [r7, #31]
        if (flag < 0x80)
 8008e3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	db25      	blt.n	8008e92 <lz77_decompress+0x82>
        {
            // Literal run
            size_t len = flag & 0x7F;
 8008e46:	7ffb      	ldrb	r3, [r7, #31]
 8008e48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e4c:	617b      	str	r3, [r7, #20]
            if (input + len > input_end || output_ptr + len > output_end)
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	4413      	add	r3, r2
 8008e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d305      	bcc.n	8008e66 <lz77_decompress+0x56>
 8008e5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	4413      	add	r3, r2
 8008e60:	6a3a      	ldr	r2, [r7, #32]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d202      	bcs.n	8008e6c <lz77_decompress+0x5c>
            {
                return -1; // Overflow check
 8008e66:	f04f 33ff 	mov.w	r3, #4294967295
 8008e6a:	e069      	b.n	8008f40 <lz77_decompress+0x130>
            }
            for (size_t i = 0; i < len; i++)
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e70:	e00a      	b.n	8008e88 <lz77_decompress+0x78>
            {
                *output_ptr++ = *input++;
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	1c53      	adds	r3, r2, #1
 8008e76:	60fb      	str	r3, [r7, #12]
 8008e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e7a:	1c59      	adds	r1, r3, #1
 8008e7c:	6379      	str	r1, [r7, #52]	@ 0x34
 8008e7e:	7812      	ldrb	r2, [r2, #0]
 8008e80:	701a      	strb	r2, [r3, #0]
            for (size_t i = 0; i < len; i++)
 8008e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e84:	3301      	adds	r3, #1
 8008e86:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d3f0      	bcc.n	8008e72 <lz77_decompress+0x62>
 8008e90:	e04e      	b.n	8008f30 <lz77_decompress+0x120>
            }
        }
        else
        {
            // Back reference
            if (input + 2 > input_end)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3302      	adds	r3, #2
 8008e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d202      	bcs.n	8008ea2 <lz77_decompress+0x92>
            {
                return -2; // Input overflow
 8008e9c:	f06f 0301 	mvn.w	r3, #1
 8008ea0:	e04e      	b.n	8008f40 <lz77_decompress+0x130>
            }
            uint16_t offset = ((flag & 0x7F) << 8) | *input++;
 8008ea2:	7ffb      	ldrb	r3, [r7, #31]
 8008ea4:	b21b      	sxth	r3, r3
 8008ea6:	021b      	lsls	r3, r3, #8
 8008ea8:	b21b      	sxth	r3, r3
 8008eaa:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 8008eae:	b21a      	sxth	r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	1c59      	adds	r1, r3, #1
 8008eb4:	60f9      	str	r1, [r7, #12]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	b21b      	sxth	r3, r3
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	b21b      	sxth	r3, r3
 8008ebe:	83bb      	strh	r3, [r7, #28]
            offset += 1; // Offset starts from 1
 8008ec0:	8bbb      	ldrh	r3, [r7, #28]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	83bb      	strh	r3, [r7, #28]
            uint8_t length = *input++;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	1c5a      	adds	r2, r3, #1
 8008eca:	60fa      	str	r2, [r7, #12]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	76fb      	strb	r3, [r7, #27]
            if (length == 0 || offset > (size_t)(output_ptr - output))
 8008ed0:	7efb      	ldrb	r3, [r7, #27]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d005      	beq.n	8008ee2 <lz77_decompress+0xd2>
 8008ed6:	8bbb      	ldrh	r3, [r7, #28]
 8008ed8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	1a8a      	subs	r2, r1, r2
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d902      	bls.n	8008ee8 <lz77_decompress+0xd8>
            {
                return -3; // Invalid length or offset
 8008ee2:	f06f 0302 	mvn.w	r3, #2
 8008ee6:	e02b      	b.n	8008f40 <lz77_decompress+0x130>
            }
            uint8_t *src = output_ptr - offset;
 8008ee8:	8bbb      	ldrh	r3, [r7, #28]
 8008eea:	425b      	negs	r3, r3
 8008eec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008eee:	4413      	add	r3, r2
 8008ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (output_ptr + length > output_end)
 8008ef2:	7efb      	ldrb	r3, [r7, #27]
 8008ef4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ef6:	4413      	add	r3, r2
 8008ef8:	6a3a      	ldr	r2, [r7, #32]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d202      	bcs.n	8008f04 <lz77_decompress+0xf4>
            {
                return -4; // Output overflow
 8008efe:	f06f 0303 	mvn.w	r3, #3
 8008f02:	e01d      	b.n	8008f40 <lz77_decompress+0x130>
            }
            for (uint8_t i = 0; i < length; i++)
 8008f04:	2300      	movs	r3, #0
 8008f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f0a:	e00c      	b.n	8008f26 <lz77_decompress+0x116>
            {
                *output_ptr++ = *src++;
 8008f0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f0e:	1c53      	adds	r3, r2, #1
 8008f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f14:	1c59      	adds	r1, r3, #1
 8008f16:	6379      	str	r1, [r7, #52]	@ 0x34
 8008f18:	7812      	ldrb	r2, [r2, #0]
 8008f1a:	701a      	strb	r2, [r3, #0]
            for (uint8_t i = 0; i < length; i++)
 8008f1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008f20:	3301      	adds	r3, #1
 8008f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f26:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8008f2a:	7efb      	ldrb	r3, [r7, #27]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d3ed      	bcc.n	8008f0c <lz77_decompress+0xfc>
    while (input < input_end)
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f34:	429a      	cmp	r2, r3
 8008f36:	f4ff af7d 	bcc.w	8008e34 <lz77_decompress+0x24>
            }
        }
    }
    return (int)(output_ptr - output);
 8008f3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	1ad3      	subs	r3, r2, r3
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	373c      	adds	r7, #60	@ 0x3c
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bc80      	pop	{r7}
 8008f48:	4770      	bx	lr
	...

08008f4c <display_frame_oled>:

// Declare the goodapple data if not in goodapple.h (it should be)
// extern const unsigned char goodapple[]; // Ensure this is available

void display_frame_oled(unsigned char *frame)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
    // OLED_ClearBuffer();
    for (int i = 0; i < 114 * 64; i++)
 8008f54:	2300      	movs	r3, #0
 8008f56:	617b      	str	r3, [r7, #20]
 8008f58:	e03d      	b.n	8008fd6 <display_frame_oled+0x8a>
    { // Assuming OLED is 128x64, video is 114x64
        bool pixel = (frame[i / 8] & (1 << (i % 8))) != 0;
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	da00      	bge.n	8008f62 <display_frame_oled+0x16>
 8008f60:	3307      	adds	r3, #7
 8008f62:	10db      	asrs	r3, r3, #3
 8008f64:	461a      	mov	r2, r3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4413      	add	r3, r2
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	f003 0307 	and.w	r3, r3, #7
 8008f74:	fa42 f303 	asr.w	r3, r2, r3
 8008f78:	f003 0301 	and.w	r3, r3, #1
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	bf14      	ite	ne
 8008f80:	2301      	movne	r3, #1
 8008f82:	2300      	moveq	r3, #0
 8008f84:	74fb      	strb	r3, [r7, #19]
        // Adjust x-coordinate to center the 114-width video on a 128-width screen
        int x = (i % 114) + (OLED_WIDTH - 114) / 2;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	4a17      	ldr	r2, [pc, #92]	@ (8008fe8 <display_frame_oled+0x9c>)
 8008f8a:	fb82 1203 	smull	r1, r2, r2, r3
 8008f8e:	441a      	add	r2, r3
 8008f90:	1191      	asrs	r1, r2, #6
 8008f92:	17da      	asrs	r2, r3, #31
 8008f94:	1a8a      	subs	r2, r1, r2
 8008f96:	2172      	movs	r1, #114	@ 0x72
 8008f98:	fb01 f202 	mul.w	r2, r1, r2
 8008f9c:	1a9a      	subs	r2, r3, r2
 8008f9e:	1dd3      	adds	r3, r2, #7
 8008fa0:	60fb      	str	r3, [r7, #12]
        int y = i / 114;
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	4a10      	ldr	r2, [pc, #64]	@ (8008fe8 <display_frame_oled+0x9c>)
 8008fa6:	fb82 1203 	smull	r1, r2, r2, r3
 8008faa:	441a      	add	r2, r3
 8008fac:	1192      	asrs	r2, r2, #6
 8008fae:	17db      	asrs	r3, r3, #31
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	60bb      	str	r3, [r7, #8]
        if (x < OLED_WIDTH && y < OLED_HEIGHT)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2b7f      	cmp	r3, #127	@ 0x7f
 8008fb8:	dc0a      	bgt.n	8008fd0 <display_frame_oled+0x84>
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	2b3f      	cmp	r3, #63	@ 0x3f
 8008fbe:	dc07      	bgt.n	8008fd0 <display_frame_oled+0x84>
        {                                         // Boundary check
            OLED_WritePixel(x, y, pixel ? 1 : 0); // Draw pixel (1 for white, 0 for black)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	b21b      	sxth	r3, r3
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	b211      	sxth	r1, r2
 8008fc8:	7cfa      	ldrb	r2, [r7, #19]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7f9 fbbc 	bl	8002748 <OLED_WritePixel>
    for (int i = 0; i < 114 * 64; i++)
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	617b      	str	r3, [r7, #20]
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f5b3 5fe4 	cmp.w	r3, #7296	@ 0x1c80
 8008fdc:	dbbd      	blt.n	8008f5a <display_frame_oled+0xe>
        }
    }
    // OLED_SmartUpdate();
}
 8008fde:	bf00      	nop
 8008fe0:	bf00      	nop
 8008fe2:	3718      	adds	r7, #24
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	8fb823ef 	.word	0x8fb823ef

08008fec <video_player_init>:

void video_player_init()
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	af00      	add	r7, sp, #0
    W25Q64_Read(Video_Basic_Addr, (uint8_t *)&total_frames, sizeof(total_frames)); // Read the frame count from the flash memory, cast to uint8_t* and use sizeof
 8008ff0:	2204      	movs	r2, #4
 8008ff2:	4904      	ldr	r1, [pc, #16]	@ (8009004 <video_player_init+0x18>)
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	f7f8 f883 	bl	8001100 <W25Q64_Read>
    current_frame_index = 0;
 8008ffa:	4b03      	ldr	r3, [pc, #12]	@ (8009008 <video_player_init+0x1c>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	601a      	str	r2, [r3, #0]
}
 8009000:	bf00      	nop
 8009002:	bd80      	pop	{r7, pc}
 8009004:	20004498 	.word	0x20004498
 8009008:	20004494 	.word	0x20004494

0800900c <play_video>:

void play_video()
{
 800900c:	b580      	push	{r7, lr}
 800900e:	f5ad 7d66 	sub.w	sp, sp, #920	@ 0x398
 8009012:	af00      	add	r7, sp, #0
    static uint16_t LastCount_video = 0;


    if (video_first_play)
 8009014:	4b28      	ldr	r3, [pc, #160]	@ (80090b8 <play_video+0xac>)
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d008      	beq.n	800902e <play_video+0x22>
    {
        video_first_play = false;
 800901c:	4b26      	ldr	r3, [pc, #152]	@ (80090b8 <play_video+0xac>)
 800901e:	2200      	movs	r2, #0
 8009020:	701a      	strb	r2, [r3, #0]
        LastCount_video = count; // Initialize LastCount_video
 8009022:	4b26      	ldr	r3, [pc, #152]	@ (80090bc <play_video+0xb0>)
 8009024:	881a      	ldrh	r2, [r3, #0]
 8009026:	4b26      	ldr	r3, [pc, #152]	@ (80090c0 <play_video+0xb4>)
 8009028:	801a      	strh	r2, [r3, #0]
        video_player_init();
 800902a:	f7ff ffdf 	bl	8008fec <video_player_init>
    }


    unsigned char frame_buffer[920]; // Buffer for one decompressed frame (114*64/8 = 912, rounded up)

    if (total_frames == 0)
 800902e:	4b25      	ldr	r3, [pc, #148]	@ (80090c4 <play_video+0xb8>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d101      	bne.n	800903a <play_video+0x2e>
    {
        video_player_init();
 8009036:	f7ff ffd9 	bl	8008fec <video_player_init>
    }

    if (current_frame_index >= total_frames)
 800903a:	4b23      	ldr	r3, [pc, #140]	@ (80090c8 <play_video+0xbc>)
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	4b21      	ldr	r3, [pc, #132]	@ (80090c4 <play_video+0xb8>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	429a      	cmp	r2, r3
 8009044:	d302      	bcc.n	800904c <play_video+0x40>
    {
        current_frame_index = 0;
 8009046:	4b20      	ldr	r3, [pc, #128]	@ (80090c8 <play_video+0xbc>)
 8009048:	2200      	movs	r2, #0
 800904a:	601a      	str	r2, [r3, #0]
    }

    get_target_frame_index(current_frame_index, frame_buffer, sizeof(frame_buffer));
 800904c:	4b1e      	ldr	r3, [pc, #120]	@ (80090c8 <play_video+0xbc>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4639      	mov	r1, r7
 8009052:	f44f 7266 	mov.w	r2, #920	@ 0x398
 8009056:	4618      	mov	r0, r3
 8009058:	f000 f880 	bl	800915c <get_target_frame_index>

    display_frame_oled(frame_buffer);
 800905c:	463b      	mov	r3, r7
 800905e:	4618      	mov	r0, r3
 8009060:	f7ff ff74 	bl	8008f4c <display_frame_oled>

    current_frame_index++;
 8009064:	4b18      	ldr	r3, [pc, #96]	@ (80090c8 <play_video+0xbc>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3301      	adds	r3, #1
 800906a:	4a17      	ldr	r2, [pc, #92]	@ (80090c8 <play_video+0xbc>)
 800906c:	6013      	str	r3, [r2, #0]

    if(count - LastCount_video >= 2)
 800906e:	4b13      	ldr	r3, [pc, #76]	@ (80090bc <play_video+0xb0>)
 8009070:	881b      	ldrh	r3, [r3, #0]
 8009072:	461a      	mov	r2, r3
 8009074:	4b12      	ldr	r3, [pc, #72]	@ (80090c0 <play_video+0xb4>)
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	1ad3      	subs	r3, r2, r3
 800907a:	2b01      	cmp	r3, #1
 800907c:	dd07      	ble.n	800908e <play_video+0x82>
    {
        video_fast_forward(10);
 800907e:	200a      	movs	r0, #10
 8009080:	f000 f824 	bl	80090cc <video_fast_forward>
        LastCount_video = count;
 8009084:	4b0d      	ldr	r3, [pc, #52]	@ (80090bc <play_video+0xb0>)
 8009086:	881a      	ldrh	r2, [r3, #0]
 8009088:	4b0d      	ldr	r3, [pc, #52]	@ (80090c0 <play_video+0xb4>)
 800908a:	801a      	strh	r2, [r3, #0]
    else if (count - LastCount_video <= -2)
    {
        video_rewind(10);
        LastCount_video = count;
    }
}
 800908c:	e00f      	b.n	80090ae <play_video+0xa2>
    else if (count - LastCount_video <= -2)
 800908e:	4b0b      	ldr	r3, [pc, #44]	@ (80090bc <play_video+0xb0>)
 8009090:	881b      	ldrh	r3, [r3, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	4b0a      	ldr	r3, [pc, #40]	@ (80090c0 <play_video+0xb4>)
 8009096:	881b      	ldrh	r3, [r3, #0]
 8009098:	1ad3      	subs	r3, r2, r3
 800909a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800909e:	da06      	bge.n	80090ae <play_video+0xa2>
        video_rewind(10);
 80090a0:	200a      	movs	r0, #10
 80090a2:	f000 f837 	bl	8009114 <video_rewind>
        LastCount_video = count;
 80090a6:	4b05      	ldr	r3, [pc, #20]	@ (80090bc <play_video+0xb0>)
 80090a8:	881a      	ldrh	r2, [r3, #0]
 80090aa:	4b05      	ldr	r3, [pc, #20]	@ (80090c0 <play_video+0xb4>)
 80090ac:	801a      	strh	r2, [r3, #0]
}
 80090ae:	bf00      	nop
 80090b0:	f507 7766 	add.w	r7, r7, #920	@ 0x398
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	20004490 	.word	0x20004490
 80090bc:	20000740 	.word	0x20000740
 80090c0:	2000449c 	.word	0x2000449c
 80090c4:	20004498 	.word	0x20004498
 80090c8:	20004494 	.word	0x20004494

080090cc <video_fast_forward>:

void video_fast_forward(int frames_to_skip)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
    if (total_frames == 0)
 80090d4:	4b0d      	ldr	r3, [pc, #52]	@ (800910c <video_fast_forward+0x40>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d101      	bne.n	80090e0 <video_fast_forward+0x14>
        video_player_init(); // Ensure total_frames is initialized
 80090dc:	f7ff ff86 	bl	8008fec <video_player_init>
    current_frame_index += frames_to_skip;
 80090e0:	4b0b      	ldr	r3, [pc, #44]	@ (8009110 <video_fast_forward+0x44>)
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4413      	add	r3, r2
 80090e8:	4a09      	ldr	r2, [pc, #36]	@ (8009110 <video_fast_forward+0x44>)
 80090ea:	6013      	str	r3, [r2, #0]
    if (current_frame_index >= total_frames)
 80090ec:	4b08      	ldr	r3, [pc, #32]	@ (8009110 <video_fast_forward+0x44>)
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	4b06      	ldr	r3, [pc, #24]	@ (800910c <video_fast_forward+0x40>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d304      	bcc.n	8009102 <video_fast_forward+0x36>
    {
        current_frame_index = total_frames - 1; // Go to last frame
 80090f8:	4b04      	ldr	r3, [pc, #16]	@ (800910c <video_fast_forward+0x40>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3b01      	subs	r3, #1
 80090fe:	4a04      	ldr	r2, [pc, #16]	@ (8009110 <video_fast_forward+0x44>)
 8009100:	6013      	str	r3, [r2, #0]
    }
    if (current_frame_index < 0) // Should not happen with fast forward, but good practice
    {
        current_frame_index = 0;
    }
}
 8009102:	bf00      	nop
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	20004498 	.word	0x20004498
 8009110:	20004494 	.word	0x20004494

08009114 <video_rewind>:

void video_rewind(int frames_to_skip)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
    if (total_frames == 0)
 800911c:	4b0d      	ldr	r3, [pc, #52]	@ (8009154 <video_rewind+0x40>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d101      	bne.n	8009128 <video_rewind+0x14>
        video_player_init(); // Ensure total_frames is initialized
 8009124:	f7ff ff62 	bl	8008fec <video_player_init>

    if ((int)current_frame_index - frames_to_skip < 0) // Check before subtraction to prevent underflow with unsigned int
 8009128:	4b0b      	ldr	r3, [pc, #44]	@ (8009158 <video_rewind+0x44>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	461a      	mov	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	da03      	bge.n	800913e <video_rewind+0x2a>
    {
        current_frame_index = 0; // Go to first frame
 8009136:	4b08      	ldr	r3, [pc, #32]	@ (8009158 <video_rewind+0x44>)
 8009138:	2200      	movs	r2, #0
 800913a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        current_frame_index -= frames_to_skip;
    }
}
 800913c:	e005      	b.n	800914a <video_rewind+0x36>
        current_frame_index -= frames_to_skip;
 800913e:	4b06      	ldr	r3, [pc, #24]	@ (8009158 <video_rewind+0x44>)
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	1ad3      	subs	r3, r2, r3
 8009146:	4a04      	ldr	r2, [pc, #16]	@ (8009158 <video_rewind+0x44>)
 8009148:	6013      	str	r3, [r2, #0]
}
 800914a:	bf00      	nop
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	20004498 	.word	0x20004498
 8009158:	20004494 	.word	0x20004494

0800915c <get_target_frame_index>:
        current_frame_index = 0;
    }
}

int get_target_frame_index(unsigned int index, uint8_t *dst, size_t output_size)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	f5ad 7d70 	sub.w	sp, sp, #960	@ 0x3c0
 8009162:	af00      	add	r7, sp, #0
 8009164:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8009168:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 800916c:	6018      	str	r0, [r3, #0]
 800916e:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8009172:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 8009176:	6019      	str	r1, [r3, #0]
 8009178:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 800917c:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 8009180:	601a      	str	r2, [r3, #0]
    unsigned char temp[920];
    uint32_t compressed_length;
    uint32_t picture_start_offset;
    uint32_t total_frames_from_flash;

    W25Q64_Read(Video_Basic_Addr, (uint8_t *)&total_frames_from_flash, sizeof(total_frames_from_flash));
 8009182:	f107 0310 	add.w	r3, r7, #16
 8009186:	2204      	movs	r2, #4
 8009188:	4619      	mov	r1, r3
 800918a:	2000      	movs	r0, #0
 800918c:	f7f7 ffb8 	bl	8001100 <W25Q64_Read>
    picture_start_offset = sizeof(uint32_t) + (total_frames_from_flash + 1) * sizeof(uint32_t);
 8009190:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8009194:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	3302      	adds	r3, #2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
    W25Q64_Read(Video_Basic_Addr + sizeof(uint32_t) + (index * sizeof(uint32_t)), (uint8_t *)&target_ptr_val, sizeof(target_ptr_val));
 80091a2:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 80091a6:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3301      	adds	r3, #1
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	f507 716c 	add.w	r1, r7, #944	@ 0x3b0
 80091b4:	2204      	movs	r2, #4
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7f7 ffa2 	bl	8001100 <W25Q64_Read>
    W25Q64_Read(Video_Basic_Addr + sizeof(uint32_t) + ((index + 1) * sizeof(uint32_t)), (uint8_t *)&next_ptr_val, sizeof(next_ptr_val));
 80091bc:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 80091c0:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	3302      	adds	r3, #2
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	f507 716b 	add.w	r1, r7, #940	@ 0x3ac
 80091ce:	2204      	movs	r2, #4
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7f7 ff95 	bl	8001100 <W25Q64_Read>

    compressed_length = next_ptr_val - target_ptr_val;
 80091d6:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 80091da:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8

    if (compressed_length == 0)
 80091e4:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d101      	bne.n	80091f0 <get_target_frame_index+0x94>
    {
        return 0;
 80091ec:	2300      	movs	r3, #0
 80091ee:	e030      	b.n	8009252 <get_target_frame_index+0xf6>
    }
    if (next_ptr_val < target_ptr_val)
 80091f0:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 80091f4:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d202      	bcs.n	8009202 <get_target_frame_index+0xa6>
    {
        return -2;
 80091fc:	f06f 0301 	mvn.w	r3, #1
 8009200:	e027      	b.n	8009252 <get_target_frame_index+0xf6>
    }
    if (compressed_length > sizeof(temp))
 8009202:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8009206:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800920a:	d902      	bls.n	8009212 <get_target_frame_index+0xb6>
    {
        return -1;
 800920c:	f04f 33ff 	mov.w	r3, #4294967295
 8009210:	e01f      	b.n	8009252 <get_target_frame_index+0xf6>
    }

    W25Q64_Read(Video_Basic_Addr + picture_start_offset + target_ptr_val, temp, compressed_length);
 8009212:	f8d7 23b0 	ldr.w	r2, [r7, #944]	@ 0x3b0
 8009216:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 800921a:	4413      	add	r3, r2
 800921c:	f107 0114 	add.w	r1, r7, #20
 8009220:	f8d7 23b8 	ldr.w	r2, [r7, #952]	@ 0x3b8
 8009224:	4618      	mov	r0, r3
 8009226:	f7f7 ff6b 	bl	8001100 <W25Q64_Read>

    int decompressed_bytes = lz77_decompress(temp, compressed_length, dst, output_size);
 800922a:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 800922e:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 8009232:	f507 7270 	add.w	r2, r7, #960	@ 0x3c0
 8009236:	f5a2 726e 	sub.w	r2, r2, #952	@ 0x3b8
 800923a:	f107 0014 	add.w	r0, r7, #20
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6812      	ldr	r2, [r2, #0]
 8009242:	f8d7 13b8 	ldr.w	r1, [r7, #952]	@ 0x3b8
 8009246:	f7ff fde3 	bl	8008e10 <lz77_decompress>
 800924a:	f8c7 03b4 	str.w	r0, [r7, #948]	@ 0x3b4
    return decompressed_bytes;
 800924e:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
}
 8009252:	4618      	mov	r0, r3
 8009254:	f507 7770 	add.w	r7, r7, #960	@ 0x3c0
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800925c:	f7ff fd2c 	bl	8008cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009260:	480b      	ldr	r0, [pc, #44]	@ (8009290 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8009262:	490c      	ldr	r1, [pc, #48]	@ (8009294 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8009264:	4a0c      	ldr	r2, [pc, #48]	@ (8009298 <LoopFillZerobss+0x16>)
  movs r3, #0
 8009266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009268:	e002      	b.n	8009270 <LoopCopyDataInit>

0800926a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800926a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800926c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800926e:	3304      	adds	r3, #4

08009270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009274:	d3f9      	bcc.n	800926a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009276:	4a09      	ldr	r2, [pc, #36]	@ (800929c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8009278:	4c09      	ldr	r4, [pc, #36]	@ (80092a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800927a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800927c:	e001      	b.n	8009282 <LoopFillZerobss>

0800927e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800927e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009280:	3204      	adds	r2, #4

08009282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009284:	d3fb      	bcc.n	800927e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009286:	f002 fed1 	bl	800c02c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800928a:	f7f9 f837 	bl	80022fc <main>
  bx lr
 800928e:	4770      	bx	lr
  ldr r0, =_sdata
 8009290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009294:	200004bc 	.word	0x200004bc
  ldr r2, =_sidata
 8009298:	0800f06c 	.word	0x0800f06c
  ldr r2, =_sbss
 800929c:	200004bc 	.word	0x200004bc
  ldr r4, =_ebss
 80092a0:	200045f0 	.word	0x200045f0

080092a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80092a4:	e7fe      	b.n	80092a4 <ADC1_2_IRQHandler>
	...

080092a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80092ac:	4b08      	ldr	r3, [pc, #32]	@ (80092d0 <HAL_Init+0x28>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a07      	ldr	r2, [pc, #28]	@ (80092d0 <HAL_Init+0x28>)
 80092b2:	f043 0310 	orr.w	r3, r3, #16
 80092b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80092b8:	2003      	movs	r0, #3
 80092ba:	f000 f947 	bl	800954c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80092be:	200f      	movs	r0, #15
 80092c0:	f000 f808 	bl	80092d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80092c4:	f7ff fbce 	bl	8008a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	40022000 	.word	0x40022000

080092d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80092dc:	4b12      	ldr	r3, [pc, #72]	@ (8009328 <HAL_InitTick+0x54>)
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	4b12      	ldr	r3, [pc, #72]	@ (800932c <HAL_InitTick+0x58>)
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	4619      	mov	r1, r3
 80092e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80092ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80092ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80092f2:	4618      	mov	r0, r3
 80092f4:	f000 f95f 	bl	80095b6 <HAL_SYSTICK_Config>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d001      	beq.n	8009302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e00e      	b.n	8009320 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b0f      	cmp	r3, #15
 8009306:	d80a      	bhi.n	800931e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009308:	2200      	movs	r2, #0
 800930a:	6879      	ldr	r1, [r7, #4]
 800930c:	f04f 30ff 	mov.w	r0, #4294967295
 8009310:	f000 f927 	bl	8009562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009314:	4a06      	ldr	r2, [pc, #24]	@ (8009330 <HAL_InitTick+0x5c>)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800931a:	2300      	movs	r3, #0
 800931c:	e000      	b.n	8009320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
}
 8009320:	4618      	mov	r0, r3
 8009322:	3708      	adds	r7, #8
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}
 8009328:	20000454 	.word	0x20000454
 800932c:	2000045c 	.word	0x2000045c
 8009330:	20000458 	.word	0x20000458

08009334 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009334:	b480      	push	{r7}
 8009336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009338:	4b05      	ldr	r3, [pc, #20]	@ (8009350 <HAL_IncTick+0x1c>)
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	461a      	mov	r2, r3
 800933e:	4b05      	ldr	r3, [pc, #20]	@ (8009354 <HAL_IncTick+0x20>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4413      	add	r3, r2
 8009344:	4a03      	ldr	r2, [pc, #12]	@ (8009354 <HAL_IncTick+0x20>)
 8009346:	6013      	str	r3, [r2, #0]
}
 8009348:	bf00      	nop
 800934a:	46bd      	mov	sp, r7
 800934c:	bc80      	pop	{r7}
 800934e:	4770      	bx	lr
 8009350:	2000045c 	.word	0x2000045c
 8009354:	200044a0 	.word	0x200044a0

08009358 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009358:	b480      	push	{r7}
 800935a:	af00      	add	r7, sp, #0
  return uwTick;
 800935c:	4b02      	ldr	r3, [pc, #8]	@ (8009368 <HAL_GetTick+0x10>)
 800935e:	681b      	ldr	r3, [r3, #0]
}
 8009360:	4618      	mov	r0, r3
 8009362:	46bd      	mov	sp, r7
 8009364:	bc80      	pop	{r7}
 8009366:	4770      	bx	lr
 8009368:	200044a0 	.word	0x200044a0

0800936c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009374:	f7ff fff0 	bl	8009358 <HAL_GetTick>
 8009378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009384:	d005      	beq.n	8009392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009386:	4b0a      	ldr	r3, [pc, #40]	@ (80093b0 <HAL_Delay+0x44>)
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	461a      	mov	r2, r3
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	4413      	add	r3, r2
 8009390:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009392:	bf00      	nop
 8009394:	f7ff ffe0 	bl	8009358 <HAL_GetTick>
 8009398:	4602      	mov	r2, r0
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	1ad3      	subs	r3, r2, r3
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d8f7      	bhi.n	8009394 <HAL_Delay+0x28>
  {
  }
}
 80093a4:	bf00      	nop
 80093a6:	bf00      	nop
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	2000045c 	.word	0x2000045c

080093b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f003 0307 	and.w	r3, r3, #7
 80093c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80093c4:	4b0c      	ldr	r3, [pc, #48]	@ (80093f8 <__NVIC_SetPriorityGrouping+0x44>)
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80093d0:	4013      	ands	r3, r2
 80093d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80093dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80093e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80093e6:	4a04      	ldr	r2, [pc, #16]	@ (80093f8 <__NVIC_SetPriorityGrouping+0x44>)
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	60d3      	str	r3, [r2, #12]
}
 80093ec:	bf00      	nop
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bc80      	pop	{r7}
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	e000ed00 	.word	0xe000ed00

080093fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80093fc:	b480      	push	{r7}
 80093fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009400:	4b04      	ldr	r3, [pc, #16]	@ (8009414 <__NVIC_GetPriorityGrouping+0x18>)
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	0a1b      	lsrs	r3, r3, #8
 8009406:	f003 0307 	and.w	r3, r3, #7
}
 800940a:	4618      	mov	r0, r3
 800940c:	46bd      	mov	sp, r7
 800940e:	bc80      	pop	{r7}
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	e000ed00 	.word	0xe000ed00

08009418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	4603      	mov	r3, r0
 8009420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009426:	2b00      	cmp	r3, #0
 8009428:	db0b      	blt.n	8009442 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800942a:	79fb      	ldrb	r3, [r7, #7]
 800942c:	f003 021f 	and.w	r2, r3, #31
 8009430:	4906      	ldr	r1, [pc, #24]	@ (800944c <__NVIC_EnableIRQ+0x34>)
 8009432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009436:	095b      	lsrs	r3, r3, #5
 8009438:	2001      	movs	r0, #1
 800943a:	fa00 f202 	lsl.w	r2, r0, r2
 800943e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009442:	bf00      	nop
 8009444:	370c      	adds	r7, #12
 8009446:	46bd      	mov	sp, r7
 8009448:	bc80      	pop	{r7}
 800944a:	4770      	bx	lr
 800944c:	e000e100 	.word	0xe000e100

08009450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	4603      	mov	r3, r0
 8009458:	6039      	str	r1, [r7, #0]
 800945a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800945c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009460:	2b00      	cmp	r3, #0
 8009462:	db0a      	blt.n	800947a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	b2da      	uxtb	r2, r3
 8009468:	490c      	ldr	r1, [pc, #48]	@ (800949c <__NVIC_SetPriority+0x4c>)
 800946a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800946e:	0112      	lsls	r2, r2, #4
 8009470:	b2d2      	uxtb	r2, r2
 8009472:	440b      	add	r3, r1
 8009474:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009478:	e00a      	b.n	8009490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	b2da      	uxtb	r2, r3
 800947e:	4908      	ldr	r1, [pc, #32]	@ (80094a0 <__NVIC_SetPriority+0x50>)
 8009480:	79fb      	ldrb	r3, [r7, #7]
 8009482:	f003 030f 	and.w	r3, r3, #15
 8009486:	3b04      	subs	r3, #4
 8009488:	0112      	lsls	r2, r2, #4
 800948a:	b2d2      	uxtb	r2, r2
 800948c:	440b      	add	r3, r1
 800948e:	761a      	strb	r2, [r3, #24]
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	bc80      	pop	{r7}
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	e000e100 	.word	0xe000e100
 80094a0:	e000ed00 	.word	0xe000ed00

080094a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b089      	sub	sp, #36	@ 0x24
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f003 0307 	and.w	r3, r3, #7
 80094b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	f1c3 0307 	rsb	r3, r3, #7
 80094be:	2b04      	cmp	r3, #4
 80094c0:	bf28      	it	cs
 80094c2:	2304      	movcs	r3, #4
 80094c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	3304      	adds	r3, #4
 80094ca:	2b06      	cmp	r3, #6
 80094cc:	d902      	bls.n	80094d4 <NVIC_EncodePriority+0x30>
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	3b03      	subs	r3, #3
 80094d2:	e000      	b.n	80094d6 <NVIC_EncodePriority+0x32>
 80094d4:	2300      	movs	r3, #0
 80094d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80094d8:	f04f 32ff 	mov.w	r2, #4294967295
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	fa02 f303 	lsl.w	r3, r2, r3
 80094e2:	43da      	mvns	r2, r3
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	401a      	ands	r2, r3
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80094ec:	f04f 31ff 	mov.w	r1, #4294967295
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	fa01 f303 	lsl.w	r3, r1, r3
 80094f6:	43d9      	mvns	r1, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80094fc:	4313      	orrs	r3, r2
         );
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3724      	adds	r7, #36	@ 0x24
 8009502:	46bd      	mov	sp, r7
 8009504:	bc80      	pop	{r7}
 8009506:	4770      	bx	lr

08009508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	3b01      	subs	r3, #1
 8009514:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009518:	d301      	bcc.n	800951e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800951a:	2301      	movs	r3, #1
 800951c:	e00f      	b.n	800953e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800951e:	4a0a      	ldr	r2, [pc, #40]	@ (8009548 <SysTick_Config+0x40>)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	3b01      	subs	r3, #1
 8009524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009526:	210f      	movs	r1, #15
 8009528:	f04f 30ff 	mov.w	r0, #4294967295
 800952c:	f7ff ff90 	bl	8009450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009530:	4b05      	ldr	r3, [pc, #20]	@ (8009548 <SysTick_Config+0x40>)
 8009532:	2200      	movs	r2, #0
 8009534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009536:	4b04      	ldr	r3, [pc, #16]	@ (8009548 <SysTick_Config+0x40>)
 8009538:	2207      	movs	r2, #7
 800953a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	e000e010 	.word	0xe000e010

0800954c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f7ff ff2d 	bl	80093b4 <__NVIC_SetPriorityGrouping>
}
 800955a:	bf00      	nop
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009562:	b580      	push	{r7, lr}
 8009564:	b086      	sub	sp, #24
 8009566:	af00      	add	r7, sp, #0
 8009568:	4603      	mov	r3, r0
 800956a:	60b9      	str	r1, [r7, #8]
 800956c:	607a      	str	r2, [r7, #4]
 800956e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009570:	2300      	movs	r3, #0
 8009572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009574:	f7ff ff42 	bl	80093fc <__NVIC_GetPriorityGrouping>
 8009578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	68b9      	ldr	r1, [r7, #8]
 800957e:	6978      	ldr	r0, [r7, #20]
 8009580:	f7ff ff90 	bl	80094a4 <NVIC_EncodePriority>
 8009584:	4602      	mov	r2, r0
 8009586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800958a:	4611      	mov	r1, r2
 800958c:	4618      	mov	r0, r3
 800958e:	f7ff ff5f 	bl	8009450 <__NVIC_SetPriority>
}
 8009592:	bf00      	nop
 8009594:	3718      	adds	r7, #24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b082      	sub	sp, #8
 800959e:	af00      	add	r7, sp, #0
 80095a0:	4603      	mov	r3, r0
 80095a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80095a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7ff ff35 	bl	8009418 <__NVIC_EnableIRQ>
}
 80095ae:	bf00      	nop
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b082      	sub	sp, #8
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f7ff ffa2 	bl	8009508 <SysTick_Config>
 80095c4:	4603      	mov	r3, r0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3708      	adds	r7, #8
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
	...

080095d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80095d8:	2300      	movs	r3, #0
 80095da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d101      	bne.n	80095e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	e043      	b.n	800966e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	461a      	mov	r2, r3
 80095ec:	4b22      	ldr	r3, [pc, #136]	@ (8009678 <HAL_DMA_Init+0xa8>)
 80095ee:	4413      	add	r3, r2
 80095f0:	4a22      	ldr	r2, [pc, #136]	@ (800967c <HAL_DMA_Init+0xac>)
 80095f2:	fba2 2303 	umull	r2, r3, r2, r3
 80095f6:	091b      	lsrs	r3, r3, #4
 80095f8:	009a      	lsls	r2, r3, #2
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a1f      	ldr	r2, [pc, #124]	@ (8009680 <HAL_DMA_Init+0xb0>)
 8009602:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2202      	movs	r2, #2
 8009608:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800961a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800961e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8009628:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009634:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	695b      	ldr	r3, [r3, #20]
 800963a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009640:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	69db      	ldr	r3, [r3, #28]
 8009646:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	4313      	orrs	r3, r2
 800964c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68fa      	ldr	r2, [r7, #12]
 8009654:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3714      	adds	r7, #20
 8009672:	46bd      	mov	sp, r7
 8009674:	bc80      	pop	{r7}
 8009676:	4770      	bx	lr
 8009678:	bffdfff8 	.word	0xbffdfff8
 800967c:	cccccccd 	.word	0xcccccccd
 8009680:	40020000 	.word	0x40020000

08009684 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096a0:	2204      	movs	r2, #4
 80096a2:	409a      	lsls	r2, r3
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	4013      	ands	r3, r2
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d04f      	beq.n	800974c <HAL_DMA_IRQHandler+0xc8>
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	f003 0304 	and.w	r3, r3, #4
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d04a      	beq.n	800974c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 0320 	and.w	r3, r3, #32
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d107      	bne.n	80096d4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f022 0204 	bic.w	r2, r2, #4
 80096d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a66      	ldr	r2, [pc, #408]	@ (8009874 <HAL_DMA_IRQHandler+0x1f0>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d029      	beq.n	8009732 <HAL_DMA_IRQHandler+0xae>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a65      	ldr	r2, [pc, #404]	@ (8009878 <HAL_DMA_IRQHandler+0x1f4>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d022      	beq.n	800972e <HAL_DMA_IRQHandler+0xaa>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a63      	ldr	r2, [pc, #396]	@ (800987c <HAL_DMA_IRQHandler+0x1f8>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d01a      	beq.n	8009728 <HAL_DMA_IRQHandler+0xa4>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a62      	ldr	r2, [pc, #392]	@ (8009880 <HAL_DMA_IRQHandler+0x1fc>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d012      	beq.n	8009722 <HAL_DMA_IRQHandler+0x9e>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a60      	ldr	r2, [pc, #384]	@ (8009884 <HAL_DMA_IRQHandler+0x200>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d00a      	beq.n	800971c <HAL_DMA_IRQHandler+0x98>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a5f      	ldr	r2, [pc, #380]	@ (8009888 <HAL_DMA_IRQHandler+0x204>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d102      	bne.n	8009716 <HAL_DMA_IRQHandler+0x92>
 8009710:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009714:	e00e      	b.n	8009734 <HAL_DMA_IRQHandler+0xb0>
 8009716:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800971a:	e00b      	b.n	8009734 <HAL_DMA_IRQHandler+0xb0>
 800971c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009720:	e008      	b.n	8009734 <HAL_DMA_IRQHandler+0xb0>
 8009722:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009726:	e005      	b.n	8009734 <HAL_DMA_IRQHandler+0xb0>
 8009728:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800972c:	e002      	b.n	8009734 <HAL_DMA_IRQHandler+0xb0>
 800972e:	2340      	movs	r3, #64	@ 0x40
 8009730:	e000      	b.n	8009734 <HAL_DMA_IRQHandler+0xb0>
 8009732:	2304      	movs	r3, #4
 8009734:	4a55      	ldr	r2, [pc, #340]	@ (800988c <HAL_DMA_IRQHandler+0x208>)
 8009736:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 8094 	beq.w	800986a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800974a:	e08e      	b.n	800986a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009750:	2202      	movs	r2, #2
 8009752:	409a      	lsls	r2, r3
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	4013      	ands	r3, r2
 8009758:	2b00      	cmp	r3, #0
 800975a:	d056      	beq.n	800980a <HAL_DMA_IRQHandler+0x186>
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	f003 0302 	and.w	r3, r3, #2
 8009762:	2b00      	cmp	r3, #0
 8009764:	d051      	beq.n	800980a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f003 0320 	and.w	r3, r3, #32
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10b      	bne.n	800978c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f022 020a 	bic.w	r2, r2, #10
 8009782:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a38      	ldr	r2, [pc, #224]	@ (8009874 <HAL_DMA_IRQHandler+0x1f0>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d029      	beq.n	80097ea <HAL_DMA_IRQHandler+0x166>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a37      	ldr	r2, [pc, #220]	@ (8009878 <HAL_DMA_IRQHandler+0x1f4>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d022      	beq.n	80097e6 <HAL_DMA_IRQHandler+0x162>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a35      	ldr	r2, [pc, #212]	@ (800987c <HAL_DMA_IRQHandler+0x1f8>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d01a      	beq.n	80097e0 <HAL_DMA_IRQHandler+0x15c>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a34      	ldr	r2, [pc, #208]	@ (8009880 <HAL_DMA_IRQHandler+0x1fc>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d012      	beq.n	80097da <HAL_DMA_IRQHandler+0x156>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a32      	ldr	r2, [pc, #200]	@ (8009884 <HAL_DMA_IRQHandler+0x200>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d00a      	beq.n	80097d4 <HAL_DMA_IRQHandler+0x150>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a31      	ldr	r2, [pc, #196]	@ (8009888 <HAL_DMA_IRQHandler+0x204>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d102      	bne.n	80097ce <HAL_DMA_IRQHandler+0x14a>
 80097c8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80097cc:	e00e      	b.n	80097ec <HAL_DMA_IRQHandler+0x168>
 80097ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80097d2:	e00b      	b.n	80097ec <HAL_DMA_IRQHandler+0x168>
 80097d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80097d8:	e008      	b.n	80097ec <HAL_DMA_IRQHandler+0x168>
 80097da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80097de:	e005      	b.n	80097ec <HAL_DMA_IRQHandler+0x168>
 80097e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097e4:	e002      	b.n	80097ec <HAL_DMA_IRQHandler+0x168>
 80097e6:	2320      	movs	r3, #32
 80097e8:	e000      	b.n	80097ec <HAL_DMA_IRQHandler+0x168>
 80097ea:	2302      	movs	r3, #2
 80097ec:	4a27      	ldr	r2, [pc, #156]	@ (800988c <HAL_DMA_IRQHandler+0x208>)
 80097ee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d034      	beq.n	800986a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009808:	e02f      	b.n	800986a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800980e:	2208      	movs	r2, #8
 8009810:	409a      	lsls	r2, r3
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	4013      	ands	r3, r2
 8009816:	2b00      	cmp	r3, #0
 8009818:	d028      	beq.n	800986c <HAL_DMA_IRQHandler+0x1e8>
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	f003 0308 	and.w	r3, r3, #8
 8009820:	2b00      	cmp	r3, #0
 8009822:	d023      	beq.n	800986c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f022 020e 	bic.w	r2, r2, #14
 8009832:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800983c:	2101      	movs	r1, #1
 800983e:	fa01 f202 	lsl.w	r2, r1, r2
 8009842:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2201      	movs	r2, #1
 800984e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800985e:	2b00      	cmp	r3, #0
 8009860:	d004      	beq.n	800986c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	4798      	blx	r3
    }
  }
  return;
 800986a:	bf00      	nop
 800986c:	bf00      	nop
}
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	40020008 	.word	0x40020008
 8009878:	4002001c 	.word	0x4002001c
 800987c:	40020030 	.word	0x40020030
 8009880:	40020044 	.word	0x40020044
 8009884:	40020058 	.word	0x40020058
 8009888:	4002006c 	.word	0x4002006c
 800988c:	40020000 	.word	0x40020000

08009890 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009890:	b480      	push	{r7}
 8009892:	b08b      	sub	sp, #44	@ 0x2c
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800989a:	2300      	movs	r3, #0
 800989c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800989e:	2300      	movs	r3, #0
 80098a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80098a2:	e169      	b.n	8009b78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80098a4:	2201      	movs	r2, #1
 80098a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a8:	fa02 f303 	lsl.w	r3, r2, r3
 80098ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	69fa      	ldr	r2, [r7, #28]
 80098b4:	4013      	ands	r3, r2
 80098b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80098b8:	69ba      	ldr	r2, [r7, #24]
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	429a      	cmp	r2, r3
 80098be:	f040 8158 	bne.w	8009b72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	4a9a      	ldr	r2, [pc, #616]	@ (8009b30 <HAL_GPIO_Init+0x2a0>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d05e      	beq.n	800998a <HAL_GPIO_Init+0xfa>
 80098cc:	4a98      	ldr	r2, [pc, #608]	@ (8009b30 <HAL_GPIO_Init+0x2a0>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d875      	bhi.n	80099be <HAL_GPIO_Init+0x12e>
 80098d2:	4a98      	ldr	r2, [pc, #608]	@ (8009b34 <HAL_GPIO_Init+0x2a4>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d058      	beq.n	800998a <HAL_GPIO_Init+0xfa>
 80098d8:	4a96      	ldr	r2, [pc, #600]	@ (8009b34 <HAL_GPIO_Init+0x2a4>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d86f      	bhi.n	80099be <HAL_GPIO_Init+0x12e>
 80098de:	4a96      	ldr	r2, [pc, #600]	@ (8009b38 <HAL_GPIO_Init+0x2a8>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d052      	beq.n	800998a <HAL_GPIO_Init+0xfa>
 80098e4:	4a94      	ldr	r2, [pc, #592]	@ (8009b38 <HAL_GPIO_Init+0x2a8>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d869      	bhi.n	80099be <HAL_GPIO_Init+0x12e>
 80098ea:	4a94      	ldr	r2, [pc, #592]	@ (8009b3c <HAL_GPIO_Init+0x2ac>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d04c      	beq.n	800998a <HAL_GPIO_Init+0xfa>
 80098f0:	4a92      	ldr	r2, [pc, #584]	@ (8009b3c <HAL_GPIO_Init+0x2ac>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d863      	bhi.n	80099be <HAL_GPIO_Init+0x12e>
 80098f6:	4a92      	ldr	r2, [pc, #584]	@ (8009b40 <HAL_GPIO_Init+0x2b0>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d046      	beq.n	800998a <HAL_GPIO_Init+0xfa>
 80098fc:	4a90      	ldr	r2, [pc, #576]	@ (8009b40 <HAL_GPIO_Init+0x2b0>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d85d      	bhi.n	80099be <HAL_GPIO_Init+0x12e>
 8009902:	2b12      	cmp	r3, #18
 8009904:	d82a      	bhi.n	800995c <HAL_GPIO_Init+0xcc>
 8009906:	2b12      	cmp	r3, #18
 8009908:	d859      	bhi.n	80099be <HAL_GPIO_Init+0x12e>
 800990a:	a201      	add	r2, pc, #4	@ (adr r2, 8009910 <HAL_GPIO_Init+0x80>)
 800990c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009910:	0800998b 	.word	0x0800998b
 8009914:	08009965 	.word	0x08009965
 8009918:	08009977 	.word	0x08009977
 800991c:	080099b9 	.word	0x080099b9
 8009920:	080099bf 	.word	0x080099bf
 8009924:	080099bf 	.word	0x080099bf
 8009928:	080099bf 	.word	0x080099bf
 800992c:	080099bf 	.word	0x080099bf
 8009930:	080099bf 	.word	0x080099bf
 8009934:	080099bf 	.word	0x080099bf
 8009938:	080099bf 	.word	0x080099bf
 800993c:	080099bf 	.word	0x080099bf
 8009940:	080099bf 	.word	0x080099bf
 8009944:	080099bf 	.word	0x080099bf
 8009948:	080099bf 	.word	0x080099bf
 800994c:	080099bf 	.word	0x080099bf
 8009950:	080099bf 	.word	0x080099bf
 8009954:	0800996d 	.word	0x0800996d
 8009958:	08009981 	.word	0x08009981
 800995c:	4a79      	ldr	r2, [pc, #484]	@ (8009b44 <HAL_GPIO_Init+0x2b4>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d013      	beq.n	800998a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009962:	e02c      	b.n	80099be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	623b      	str	r3, [r7, #32]
          break;
 800996a:	e029      	b.n	80099c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	3304      	adds	r3, #4
 8009972:	623b      	str	r3, [r7, #32]
          break;
 8009974:	e024      	b.n	80099c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	3308      	adds	r3, #8
 800997c:	623b      	str	r3, [r7, #32]
          break;
 800997e:	e01f      	b.n	80099c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	330c      	adds	r3, #12
 8009986:	623b      	str	r3, [r7, #32]
          break;
 8009988:	e01a      	b.n	80099c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d102      	bne.n	8009998 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009992:	2304      	movs	r3, #4
 8009994:	623b      	str	r3, [r7, #32]
          break;
 8009996:	e013      	b.n	80099c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	2b01      	cmp	r3, #1
 800999e:	d105      	bne.n	80099ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80099a0:	2308      	movs	r3, #8
 80099a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	69fa      	ldr	r2, [r7, #28]
 80099a8:	611a      	str	r2, [r3, #16]
          break;
 80099aa:	e009      	b.n	80099c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80099ac:	2308      	movs	r3, #8
 80099ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	69fa      	ldr	r2, [r7, #28]
 80099b4:	615a      	str	r2, [r3, #20]
          break;
 80099b6:	e003      	b.n	80099c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80099b8:	2300      	movs	r3, #0
 80099ba:	623b      	str	r3, [r7, #32]
          break;
 80099bc:	e000      	b.n	80099c0 <HAL_GPIO_Init+0x130>
          break;
 80099be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	2bff      	cmp	r3, #255	@ 0xff
 80099c4:	d801      	bhi.n	80099ca <HAL_GPIO_Init+0x13a>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	e001      	b.n	80099ce <HAL_GPIO_Init+0x13e>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	3304      	adds	r3, #4
 80099ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	2bff      	cmp	r3, #255	@ 0xff
 80099d4:	d802      	bhi.n	80099dc <HAL_GPIO_Init+0x14c>
 80099d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	e002      	b.n	80099e2 <HAL_GPIO_Init+0x152>
 80099dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099de:	3b08      	subs	r3, #8
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	210f      	movs	r1, #15
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	fa01 f303 	lsl.w	r3, r1, r3
 80099f0:	43db      	mvns	r3, r3
 80099f2:	401a      	ands	r2, r3
 80099f4:	6a39      	ldr	r1, [r7, #32]
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	fa01 f303 	lsl.w	r3, r1, r3
 80099fc:	431a      	orrs	r2, r3
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	f000 80b1 	beq.w	8009b72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009a10:	4b4d      	ldr	r3, [pc, #308]	@ (8009b48 <HAL_GPIO_Init+0x2b8>)
 8009a12:	699b      	ldr	r3, [r3, #24]
 8009a14:	4a4c      	ldr	r2, [pc, #304]	@ (8009b48 <HAL_GPIO_Init+0x2b8>)
 8009a16:	f043 0301 	orr.w	r3, r3, #1
 8009a1a:	6193      	str	r3, [r2, #24]
 8009a1c:	4b4a      	ldr	r3, [pc, #296]	@ (8009b48 <HAL_GPIO_Init+0x2b8>)
 8009a1e:	699b      	ldr	r3, [r3, #24]
 8009a20:	f003 0301 	and.w	r3, r3, #1
 8009a24:	60bb      	str	r3, [r7, #8]
 8009a26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009a28:	4a48      	ldr	r2, [pc, #288]	@ (8009b4c <HAL_GPIO_Init+0x2bc>)
 8009a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2c:	089b      	lsrs	r3, r3, #2
 8009a2e:	3302      	adds	r3, #2
 8009a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a38:	f003 0303 	and.w	r3, r3, #3
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	220f      	movs	r2, #15
 8009a40:	fa02 f303 	lsl.w	r3, r2, r3
 8009a44:	43db      	mvns	r3, r3
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	4013      	ands	r3, r2
 8009a4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a40      	ldr	r2, [pc, #256]	@ (8009b50 <HAL_GPIO_Init+0x2c0>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d013      	beq.n	8009a7c <HAL_GPIO_Init+0x1ec>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a3f      	ldr	r2, [pc, #252]	@ (8009b54 <HAL_GPIO_Init+0x2c4>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d00d      	beq.n	8009a78 <HAL_GPIO_Init+0x1e8>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4a3e      	ldr	r2, [pc, #248]	@ (8009b58 <HAL_GPIO_Init+0x2c8>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d007      	beq.n	8009a74 <HAL_GPIO_Init+0x1e4>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a3d      	ldr	r2, [pc, #244]	@ (8009b5c <HAL_GPIO_Init+0x2cc>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d101      	bne.n	8009a70 <HAL_GPIO_Init+0x1e0>
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	e006      	b.n	8009a7e <HAL_GPIO_Init+0x1ee>
 8009a70:	2304      	movs	r3, #4
 8009a72:	e004      	b.n	8009a7e <HAL_GPIO_Init+0x1ee>
 8009a74:	2302      	movs	r3, #2
 8009a76:	e002      	b.n	8009a7e <HAL_GPIO_Init+0x1ee>
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e000      	b.n	8009a7e <HAL_GPIO_Init+0x1ee>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a80:	f002 0203 	and.w	r2, r2, #3
 8009a84:	0092      	lsls	r2, r2, #2
 8009a86:	4093      	lsls	r3, r2
 8009a88:	68fa      	ldr	r2, [r7, #12]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009a8e:	492f      	ldr	r1, [pc, #188]	@ (8009b4c <HAL_GPIO_Init+0x2bc>)
 8009a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a92:	089b      	lsrs	r3, r3, #2
 8009a94:	3302      	adds	r3, #2
 8009a96:	68fa      	ldr	r2, [r7, #12]
 8009a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d006      	beq.n	8009ab6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009aa8:	4b2d      	ldr	r3, [pc, #180]	@ (8009b60 <HAL_GPIO_Init+0x2d0>)
 8009aaa:	689a      	ldr	r2, [r3, #8]
 8009aac:	492c      	ldr	r1, [pc, #176]	@ (8009b60 <HAL_GPIO_Init+0x2d0>)
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	608b      	str	r3, [r1, #8]
 8009ab4:	e006      	b.n	8009ac4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8009b60 <HAL_GPIO_Init+0x2d0>)
 8009ab8:	689a      	ldr	r2, [r3, #8]
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	43db      	mvns	r3, r3
 8009abe:	4928      	ldr	r1, [pc, #160]	@ (8009b60 <HAL_GPIO_Init+0x2d0>)
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d006      	beq.n	8009ade <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009ad0:	4b23      	ldr	r3, [pc, #140]	@ (8009b60 <HAL_GPIO_Init+0x2d0>)
 8009ad2:	68da      	ldr	r2, [r3, #12]
 8009ad4:	4922      	ldr	r1, [pc, #136]	@ (8009b60 <HAL_GPIO_Init+0x2d0>)
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	60cb      	str	r3, [r1, #12]
 8009adc:	e006      	b.n	8009aec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009ade:	4b20      	ldr	r3, [pc, #128]	@ (8009b60 <HAL_GPIO_Init+0x2d0>)
 8009ae0:	68da      	ldr	r2, [r3, #12]
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	43db      	mvns	r3, r3
 8009ae6:	491e      	ldr	r1, [pc, #120]	@ (8009b60 <HAL_GPIO_Init+0x2d0>)
 8009ae8:	4013      	ands	r3, r2
 8009aea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d006      	beq.n	8009b06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009af8:	4b19      	ldr	r3, [pc, #100]	@ (8009b60 <HAL_GPIO_Init+0x2d0>)
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	4918      	ldr	r1, [pc, #96]	@ (8009b60 <HAL_GPIO_Init+0x2d0>)
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	604b      	str	r3, [r1, #4]
 8009b04:	e006      	b.n	8009b14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009b06:	4b16      	ldr	r3, [pc, #88]	@ (8009b60 <HAL_GPIO_Init+0x2d0>)
 8009b08:	685a      	ldr	r2, [r3, #4]
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	43db      	mvns	r3, r3
 8009b0e:	4914      	ldr	r1, [pc, #80]	@ (8009b60 <HAL_GPIO_Init+0x2d0>)
 8009b10:	4013      	ands	r3, r2
 8009b12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d021      	beq.n	8009b64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009b20:	4b0f      	ldr	r3, [pc, #60]	@ (8009b60 <HAL_GPIO_Init+0x2d0>)
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	490e      	ldr	r1, [pc, #56]	@ (8009b60 <HAL_GPIO_Init+0x2d0>)
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	600b      	str	r3, [r1, #0]
 8009b2c:	e021      	b.n	8009b72 <HAL_GPIO_Init+0x2e2>
 8009b2e:	bf00      	nop
 8009b30:	10320000 	.word	0x10320000
 8009b34:	10310000 	.word	0x10310000
 8009b38:	10220000 	.word	0x10220000
 8009b3c:	10210000 	.word	0x10210000
 8009b40:	10120000 	.word	0x10120000
 8009b44:	10110000 	.word	0x10110000
 8009b48:	40021000 	.word	0x40021000
 8009b4c:	40010000 	.word	0x40010000
 8009b50:	40010800 	.word	0x40010800
 8009b54:	40010c00 	.word	0x40010c00
 8009b58:	40011000 	.word	0x40011000
 8009b5c:	40011400 	.word	0x40011400
 8009b60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009b64:	4b0b      	ldr	r3, [pc, #44]	@ (8009b94 <HAL_GPIO_Init+0x304>)
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	43db      	mvns	r3, r3
 8009b6c:	4909      	ldr	r1, [pc, #36]	@ (8009b94 <HAL_GPIO_Init+0x304>)
 8009b6e:	4013      	ands	r3, r2
 8009b70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b74:	3301      	adds	r3, #1
 8009b76:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f47f ae8e 	bne.w	80098a4 <HAL_GPIO_Init+0x14>
  }
}
 8009b88:	bf00      	nop
 8009b8a:	bf00      	nop
 8009b8c:	372c      	adds	r7, #44	@ 0x2c
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bc80      	pop	{r7}
 8009b92:	4770      	bx	lr
 8009b94:	40010400 	.word	0x40010400

08009b98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	689a      	ldr	r2, [r3, #8]
 8009ba8:	887b      	ldrh	r3, [r7, #2]
 8009baa:	4013      	ands	r3, r2
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d002      	beq.n	8009bb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	73fb      	strb	r3, [r7, #15]
 8009bb4:	e001      	b.n	8009bba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3714      	adds	r7, #20
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bc80      	pop	{r7}
 8009bc4:	4770      	bx	lr

08009bc6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009bc6:	b480      	push	{r7}
 8009bc8:	b083      	sub	sp, #12
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	460b      	mov	r3, r1
 8009bd0:	807b      	strh	r3, [r7, #2]
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009bd6:	787b      	ldrb	r3, [r7, #1]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d003      	beq.n	8009be4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009bdc:	887a      	ldrh	r2, [r7, #2]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009be2:	e003      	b.n	8009bec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009be4:	887b      	ldrh	r3, [r7, #2]
 8009be6:	041a      	lsls	r2, r3, #16
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	611a      	str	r2, [r3, #16]
}
 8009bec:	bf00      	nop
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bc80      	pop	{r7}
 8009bf4:	4770      	bx	lr
	...

08009bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d101      	bne.n	8009c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	e12b      	b.n	8009e62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d106      	bne.n	8009c24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7f8 fb02 	bl	8002228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2224      	movs	r2, #36	@ 0x24
 8009c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f022 0201 	bic.w	r2, r2, #1
 8009c3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009c4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009c5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009c5c:	f001 f832 	bl	800acc4 <HAL_RCC_GetPCLK1Freq>
 8009c60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	4a81      	ldr	r2, [pc, #516]	@ (8009e6c <HAL_I2C_Init+0x274>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d807      	bhi.n	8009c7c <HAL_I2C_Init+0x84>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	4a80      	ldr	r2, [pc, #512]	@ (8009e70 <HAL_I2C_Init+0x278>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	bf94      	ite	ls
 8009c74:	2301      	movls	r3, #1
 8009c76:	2300      	movhi	r3, #0
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	e006      	b.n	8009c8a <HAL_I2C_Init+0x92>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	4a7d      	ldr	r2, [pc, #500]	@ (8009e74 <HAL_I2C_Init+0x27c>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	bf94      	ite	ls
 8009c84:	2301      	movls	r3, #1
 8009c86:	2300      	movhi	r3, #0
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d001      	beq.n	8009c92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e0e7      	b.n	8009e62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	4a78      	ldr	r2, [pc, #480]	@ (8009e78 <HAL_I2C_Init+0x280>)
 8009c96:	fba2 2303 	umull	r2, r3, r2, r3
 8009c9a:	0c9b      	lsrs	r3, r3, #18
 8009c9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68ba      	ldr	r2, [r7, #8]
 8009cae:	430a      	orrs	r2, r1
 8009cb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	6a1b      	ldr	r3, [r3, #32]
 8009cb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	4a6a      	ldr	r2, [pc, #424]	@ (8009e6c <HAL_I2C_Init+0x274>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d802      	bhi.n	8009ccc <HAL_I2C_Init+0xd4>
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	e009      	b.n	8009ce0 <HAL_I2C_Init+0xe8>
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009cd2:	fb02 f303 	mul.w	r3, r2, r3
 8009cd6:	4a69      	ldr	r2, [pc, #420]	@ (8009e7c <HAL_I2C_Init+0x284>)
 8009cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8009cdc:	099b      	lsrs	r3, r3, #6
 8009cde:	3301      	adds	r3, #1
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	6812      	ldr	r2, [r2, #0]
 8009ce4:	430b      	orrs	r3, r1
 8009ce6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	69db      	ldr	r3, [r3, #28]
 8009cee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009cf2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	495c      	ldr	r1, [pc, #368]	@ (8009e6c <HAL_I2C_Init+0x274>)
 8009cfc:	428b      	cmp	r3, r1
 8009cfe:	d819      	bhi.n	8009d34 <HAL_I2C_Init+0x13c>
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	1e59      	subs	r1, r3, #1
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	005b      	lsls	r3, r3, #1
 8009d0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d0e:	1c59      	adds	r1, r3, #1
 8009d10:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009d14:	400b      	ands	r3, r1
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00a      	beq.n	8009d30 <HAL_I2C_Init+0x138>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	1e59      	subs	r1, r3, #1
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	005b      	lsls	r3, r3, #1
 8009d24:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d28:	3301      	adds	r3, #1
 8009d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d2e:	e051      	b.n	8009dd4 <HAL_I2C_Init+0x1dc>
 8009d30:	2304      	movs	r3, #4
 8009d32:	e04f      	b.n	8009dd4 <HAL_I2C_Init+0x1dc>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d111      	bne.n	8009d60 <HAL_I2C_Init+0x168>
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	1e58      	subs	r0, r3, #1
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6859      	ldr	r1, [r3, #4]
 8009d44:	460b      	mov	r3, r1
 8009d46:	005b      	lsls	r3, r3, #1
 8009d48:	440b      	add	r3, r1
 8009d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009d4e:	3301      	adds	r3, #1
 8009d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	bf0c      	ite	eq
 8009d58:	2301      	moveq	r3, #1
 8009d5a:	2300      	movne	r3, #0
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	e012      	b.n	8009d86 <HAL_I2C_Init+0x18e>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	1e58      	subs	r0, r3, #1
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6859      	ldr	r1, [r3, #4]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	440b      	add	r3, r1
 8009d6e:	0099      	lsls	r1, r3, #2
 8009d70:	440b      	add	r3, r1
 8009d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8009d76:	3301      	adds	r3, #1
 8009d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	bf0c      	ite	eq
 8009d80:	2301      	moveq	r3, #1
 8009d82:	2300      	movne	r3, #0
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d001      	beq.n	8009d8e <HAL_I2C_Init+0x196>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e022      	b.n	8009dd4 <HAL_I2C_Init+0x1dc>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10e      	bne.n	8009db4 <HAL_I2C_Init+0x1bc>
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	1e58      	subs	r0, r3, #1
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6859      	ldr	r1, [r3, #4]
 8009d9e:	460b      	mov	r3, r1
 8009da0:	005b      	lsls	r3, r3, #1
 8009da2:	440b      	add	r3, r1
 8009da4:	fbb0 f3f3 	udiv	r3, r0, r3
 8009da8:	3301      	adds	r3, #1
 8009daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009dae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009db2:	e00f      	b.n	8009dd4 <HAL_I2C_Init+0x1dc>
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	1e58      	subs	r0, r3, #1
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6859      	ldr	r1, [r3, #4]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	440b      	add	r3, r1
 8009dc2:	0099      	lsls	r1, r3, #2
 8009dc4:	440b      	add	r3, r1
 8009dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8009dca:	3301      	adds	r3, #1
 8009dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009dd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009dd4:	6879      	ldr	r1, [r7, #4]
 8009dd6:	6809      	ldr	r1, [r1, #0]
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	69da      	ldr	r2, [r3, #28]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	431a      	orrs	r2, r3
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	430a      	orrs	r2, r1
 8009df6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009e02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	6911      	ldr	r1, [r2, #16]
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	68d2      	ldr	r2, [r2, #12]
 8009e0e:	4311      	orrs	r1, r2
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	6812      	ldr	r2, [r2, #0]
 8009e14:	430b      	orrs	r3, r1
 8009e16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	695a      	ldr	r2, [r3, #20]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	699b      	ldr	r3, [r3, #24]
 8009e2a:	431a      	orrs	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	430a      	orrs	r2, r1
 8009e32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f042 0201 	orr.w	r2, r2, #1
 8009e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2220      	movs	r2, #32
 8009e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	000186a0 	.word	0x000186a0
 8009e70:	001e847f 	.word	0x001e847f
 8009e74:	003d08ff 	.word	0x003d08ff
 8009e78:	431bde83 	.word	0x431bde83
 8009e7c:	10624dd3 	.word	0x10624dd3

08009e80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b088      	sub	sp, #32
 8009e84:	af02      	add	r7, sp, #8
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	607a      	str	r2, [r7, #4]
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	817b      	strh	r3, [r7, #10]
 8009e90:	4613      	mov	r3, r2
 8009e92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009e94:	f7ff fa60 	bl	8009358 <HAL_GetTick>
 8009e98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	2b20      	cmp	r3, #32
 8009ea4:	f040 80e0 	bne.w	800a068 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	2319      	movs	r3, #25
 8009eae:	2201      	movs	r2, #1
 8009eb0:	4970      	ldr	r1, [pc, #448]	@ (800a074 <HAL_I2C_Master_Transmit+0x1f4>)
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f000 f964 	bl	800a180 <I2C_WaitOnFlagUntilTimeout>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d001      	beq.n	8009ec2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009ebe:	2302      	movs	r3, #2
 8009ec0:	e0d3      	b.n	800a06a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d101      	bne.n	8009ed0 <HAL_I2C_Master_Transmit+0x50>
 8009ecc:	2302      	movs	r3, #2
 8009ece:	e0cc      	b.n	800a06a <HAL_I2C_Master_Transmit+0x1ea>
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f003 0301 	and.w	r3, r3, #1
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d007      	beq.n	8009ef6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f042 0201 	orr.w	r2, r2, #1
 8009ef4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009f04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2221      	movs	r2, #33	@ 0x21
 8009f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2210      	movs	r2, #16
 8009f12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	893a      	ldrh	r2, [r7, #8]
 8009f26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	4a50      	ldr	r2, [pc, #320]	@ (800a078 <HAL_I2C_Master_Transmit+0x1f8>)
 8009f36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009f38:	8979      	ldrh	r1, [r7, #10]
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	6a3a      	ldr	r2, [r7, #32]
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	f000 f89c 	bl	800a07c <I2C_MasterRequestWrite>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d001      	beq.n	8009f4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e08d      	b.n	800a06a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f4e:	2300      	movs	r3, #0
 8009f50:	613b      	str	r3, [r7, #16]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	695b      	ldr	r3, [r3, #20]
 8009f58:	613b      	str	r3, [r7, #16]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	613b      	str	r3, [r7, #16]
 8009f62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009f64:	e066      	b.n	800a034 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f66:	697a      	ldr	r2, [r7, #20]
 8009f68:	6a39      	ldr	r1, [r7, #32]
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f000 fa22 	bl	800a3b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00d      	beq.n	8009f92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f7a:	2b04      	cmp	r3, #4
 8009f7c:	d107      	bne.n	8009f8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e06b      	b.n	800a06a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f96:	781a      	ldrb	r2, [r3, #0]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fa2:	1c5a      	adds	r2, r3, #1
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	3b01      	subs	r3, #1
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	695b      	ldr	r3, [r3, #20]
 8009fc8:	f003 0304 	and.w	r3, r3, #4
 8009fcc:	2b04      	cmp	r3, #4
 8009fce:	d11b      	bne.n	800a008 <HAL_I2C_Master_Transmit+0x188>
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d017      	beq.n	800a008 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fdc:	781a      	ldrb	r2, [r3, #0]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe8:	1c5a      	adds	r2, r3, #1
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	b29a      	uxth	r2, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a000:	3b01      	subs	r3, #1
 800a002:	b29a      	uxth	r2, r3
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a008:	697a      	ldr	r2, [r7, #20]
 800a00a:	6a39      	ldr	r1, [r7, #32]
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f000 fa19 	bl	800a444 <I2C_WaitOnBTFFlagUntilTimeout>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00d      	beq.n	800a034 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a01c:	2b04      	cmp	r3, #4
 800a01e:	d107      	bne.n	800a030 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a02e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a030:	2301      	movs	r3, #1
 800a032:	e01a      	b.n	800a06a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d194      	bne.n	8009f66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a04a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2220      	movs	r2, #32
 800a050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2200      	movs	r2, #0
 800a058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2200      	movs	r2, #0
 800a060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a064:	2300      	movs	r3, #0
 800a066:	e000      	b.n	800a06a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a068:	2302      	movs	r3, #2
  }
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3718      	adds	r7, #24
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	00100002 	.word	0x00100002
 800a078:	ffff0000 	.word	0xffff0000

0800a07c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b088      	sub	sp, #32
 800a080:	af02      	add	r7, sp, #8
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	607a      	str	r2, [r7, #4]
 800a086:	603b      	str	r3, [r7, #0]
 800a088:	460b      	mov	r3, r1
 800a08a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a090:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	2b08      	cmp	r3, #8
 800a096:	d006      	beq.n	800a0a6 <I2C_MasterRequestWrite+0x2a>
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d003      	beq.n	800a0a6 <I2C_MasterRequestWrite+0x2a>
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a0a4:	d108      	bne.n	800a0b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a0b4:	601a      	str	r2, [r3, #0]
 800a0b6:	e00b      	b.n	800a0d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0bc:	2b12      	cmp	r3, #18
 800a0be:	d107      	bne.n	800a0d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a0ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	f000 f84f 	bl	800a180 <I2C_WaitOnFlagUntilTimeout>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00d      	beq.n	800a104 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0f6:	d103      	bne.n	800a100 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a0fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a100:	2303      	movs	r3, #3
 800a102:	e035      	b.n	800a170 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a10c:	d108      	bne.n	800a120 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a10e:	897b      	ldrh	r3, [r7, #10]
 800a110:	b2db      	uxtb	r3, r3
 800a112:	461a      	mov	r2, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a11c:	611a      	str	r2, [r3, #16]
 800a11e:	e01b      	b.n	800a158 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a120:	897b      	ldrh	r3, [r7, #10]
 800a122:	11db      	asrs	r3, r3, #7
 800a124:	b2db      	uxtb	r3, r3
 800a126:	f003 0306 	and.w	r3, r3, #6
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	f063 030f 	orn	r3, r3, #15
 800a130:	b2da      	uxtb	r2, r3
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	490e      	ldr	r1, [pc, #56]	@ (800a178 <I2C_MasterRequestWrite+0xfc>)
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f000 f898 	bl	800a274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d001      	beq.n	800a14e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	e010      	b.n	800a170 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a14e:	897b      	ldrh	r3, [r7, #10]
 800a150:	b2da      	uxtb	r2, r3
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	4907      	ldr	r1, [pc, #28]	@ (800a17c <I2C_MasterRequestWrite+0x100>)
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f000 f888 	bl	800a274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d001      	beq.n	800a16e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	e000      	b.n	800a170 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3718      	adds	r7, #24
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	00010008 	.word	0x00010008
 800a17c:	00010002 	.word	0x00010002

0800a180 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	603b      	str	r3, [r7, #0]
 800a18c:	4613      	mov	r3, r2
 800a18e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a190:	e048      	b.n	800a224 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a198:	d044      	beq.n	800a224 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a19a:	f7ff f8dd 	bl	8009358 <HAL_GetTick>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	1ad3      	subs	r3, r2, r3
 800a1a4:	683a      	ldr	r2, [r7, #0]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d302      	bcc.n	800a1b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d139      	bne.n	800a224 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	0c1b      	lsrs	r3, r3, #16
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d10d      	bne.n	800a1d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	695b      	ldr	r3, [r3, #20]
 800a1c0:	43da      	mvns	r2, r3
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	bf0c      	ite	eq
 800a1cc:	2301      	moveq	r3, #1
 800a1ce:	2300      	movne	r3, #0
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	e00c      	b.n	800a1f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	43da      	mvns	r2, r3
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	4013      	ands	r3, r2
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	bf0c      	ite	eq
 800a1e8:	2301      	moveq	r3, #1
 800a1ea:	2300      	movne	r3, #0
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	79fb      	ldrb	r3, [r7, #7]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d116      	bne.n	800a224 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2220      	movs	r2, #32
 800a200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a210:	f043 0220 	orr.w	r2, r3, #32
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2200      	movs	r2, #0
 800a21c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	e023      	b.n	800a26c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	0c1b      	lsrs	r3, r3, #16
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d10d      	bne.n	800a24a <I2C_WaitOnFlagUntilTimeout+0xca>
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	695b      	ldr	r3, [r3, #20]
 800a234:	43da      	mvns	r2, r3
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	4013      	ands	r3, r2
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	bf0c      	ite	eq
 800a240:	2301      	moveq	r3, #1
 800a242:	2300      	movne	r3, #0
 800a244:	b2db      	uxtb	r3, r3
 800a246:	461a      	mov	r2, r3
 800a248:	e00c      	b.n	800a264 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	699b      	ldr	r3, [r3, #24]
 800a250:	43da      	mvns	r2, r3
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	4013      	ands	r3, r2
 800a256:	b29b      	uxth	r3, r3
 800a258:	2b00      	cmp	r3, #0
 800a25a:	bf0c      	ite	eq
 800a25c:	2301      	moveq	r3, #1
 800a25e:	2300      	movne	r3, #0
 800a260:	b2db      	uxtb	r3, r3
 800a262:	461a      	mov	r2, r3
 800a264:	79fb      	ldrb	r3, [r7, #7]
 800a266:	429a      	cmp	r2, r3
 800a268:	d093      	beq.n	800a192 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
 800a280:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a282:	e071      	b.n	800a368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	695b      	ldr	r3, [r3, #20]
 800a28a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a28e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a292:	d123      	bne.n	800a2dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a2a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a2ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2220      	movs	r2, #32
 800a2b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2c8:	f043 0204 	orr.w	r2, r3, #4
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e067      	b.n	800a3ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e2:	d041      	beq.n	800a368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2e4:	f7ff f838 	bl	8009358 <HAL_GetTick>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	1ad3      	subs	r3, r2, r3
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d302      	bcc.n	800a2fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d136      	bne.n	800a368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	0c1b      	lsrs	r3, r3, #16
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	2b01      	cmp	r3, #1
 800a302:	d10c      	bne.n	800a31e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	43da      	mvns	r2, r3
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	4013      	ands	r3, r2
 800a310:	b29b      	uxth	r3, r3
 800a312:	2b00      	cmp	r3, #0
 800a314:	bf14      	ite	ne
 800a316:	2301      	movne	r3, #1
 800a318:	2300      	moveq	r3, #0
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	e00b      	b.n	800a336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	699b      	ldr	r3, [r3, #24]
 800a324:	43da      	mvns	r2, r3
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	4013      	ands	r3, r2
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	bf14      	ite	ne
 800a330:	2301      	movne	r3, #1
 800a332:	2300      	moveq	r3, #0
 800a334:	b2db      	uxtb	r3, r3
 800a336:	2b00      	cmp	r3, #0
 800a338:	d016      	beq.n	800a368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2200      	movs	r2, #0
 800a33e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2220      	movs	r2, #32
 800a344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a354:	f043 0220 	orr.w	r2, r3, #32
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a364:	2301      	movs	r3, #1
 800a366:	e021      	b.n	800a3ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	0c1b      	lsrs	r3, r3, #16
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d10c      	bne.n	800a38c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	695b      	ldr	r3, [r3, #20]
 800a378:	43da      	mvns	r2, r3
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	4013      	ands	r3, r2
 800a37e:	b29b      	uxth	r3, r3
 800a380:	2b00      	cmp	r3, #0
 800a382:	bf14      	ite	ne
 800a384:	2301      	movne	r3, #1
 800a386:	2300      	moveq	r3, #0
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	e00b      	b.n	800a3a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	699b      	ldr	r3, [r3, #24]
 800a392:	43da      	mvns	r2, r3
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	4013      	ands	r3, r2
 800a398:	b29b      	uxth	r3, r3
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	bf14      	ite	ne
 800a39e:	2301      	movne	r3, #1
 800a3a0:	2300      	moveq	r3, #0
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f47f af6d 	bne.w	800a284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3710      	adds	r7, #16
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a3c0:	e034      	b.n	800a42c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f000 f886 	bl	800a4d4 <I2C_IsAcknowledgeFailed>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d001      	beq.n	800a3d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e034      	b.n	800a43c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d8:	d028      	beq.n	800a42c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3da:	f7fe ffbd 	bl	8009358 <HAL_GetTick>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	1ad3      	subs	r3, r2, r3
 800a3e4:	68ba      	ldr	r2, [r7, #8]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d302      	bcc.n	800a3f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d11d      	bne.n	800a42c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	695b      	ldr	r3, [r3, #20]
 800a3f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3fa:	2b80      	cmp	r3, #128	@ 0x80
 800a3fc:	d016      	beq.n	800a42c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2220      	movs	r2, #32
 800a408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a418:	f043 0220 	orr.w	r2, r3, #32
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a428:	2301      	movs	r3, #1
 800a42a:	e007      	b.n	800a43c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	695b      	ldr	r3, [r3, #20]
 800a432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a436:	2b80      	cmp	r3, #128	@ 0x80
 800a438:	d1c3      	bne.n	800a3c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a450:	e034      	b.n	800a4bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f000 f83e 	bl	800a4d4 <I2C_IsAcknowledgeFailed>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	e034      	b.n	800a4cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a468:	d028      	beq.n	800a4bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a46a:	f7fe ff75 	bl	8009358 <HAL_GetTick>
 800a46e:	4602      	mov	r2, r0
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	1ad3      	subs	r3, r2, r3
 800a474:	68ba      	ldr	r2, [r7, #8]
 800a476:	429a      	cmp	r2, r3
 800a478:	d302      	bcc.n	800a480 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d11d      	bne.n	800a4bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	695b      	ldr	r3, [r3, #20]
 800a486:	f003 0304 	and.w	r3, r3, #4
 800a48a:	2b04      	cmp	r3, #4
 800a48c:	d016      	beq.n	800a4bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2200      	movs	r2, #0
 800a492:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2220      	movs	r2, #32
 800a498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4a8:	f043 0220 	orr.w	r2, r3, #32
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e007      	b.n	800a4cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	695b      	ldr	r3, [r3, #20]
 800a4c2:	f003 0304 	and.w	r3, r3, #4
 800a4c6:	2b04      	cmp	r3, #4
 800a4c8:	d1c3      	bne.n	800a452 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	695b      	ldr	r3, [r3, #20]
 800a4e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a4e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4ea:	d11b      	bne.n	800a524 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a4f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2220      	movs	r2, #32
 800a500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a510:	f043 0204 	orr.w	r2, r3, #4
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	e000      	b.n	800a526 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	370c      	adds	r7, #12
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bc80      	pop	{r7}
 800a52e:	4770      	bx	lr

0800a530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d101      	bne.n	800a542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	e272      	b.n	800aa28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f000 8087 	beq.w	800a65e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a550:	4b92      	ldr	r3, [pc, #584]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	f003 030c 	and.w	r3, r3, #12
 800a558:	2b04      	cmp	r3, #4
 800a55a:	d00c      	beq.n	800a576 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a55c:	4b8f      	ldr	r3, [pc, #572]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	f003 030c 	and.w	r3, r3, #12
 800a564:	2b08      	cmp	r3, #8
 800a566:	d112      	bne.n	800a58e <HAL_RCC_OscConfig+0x5e>
 800a568:	4b8c      	ldr	r3, [pc, #560]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a574:	d10b      	bne.n	800a58e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a576:	4b89      	ldr	r3, [pc, #548]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d06c      	beq.n	800a65c <HAL_RCC_OscConfig+0x12c>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d168      	bne.n	800a65c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	e24c      	b.n	800aa28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a596:	d106      	bne.n	800a5a6 <HAL_RCC_OscConfig+0x76>
 800a598:	4b80      	ldr	r3, [pc, #512]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a7f      	ldr	r2, [pc, #508]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a59e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a5a2:	6013      	str	r3, [r2, #0]
 800a5a4:	e02e      	b.n	800a604 <HAL_RCC_OscConfig+0xd4>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d10c      	bne.n	800a5c8 <HAL_RCC_OscConfig+0x98>
 800a5ae:	4b7b      	ldr	r3, [pc, #492]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a7a      	ldr	r2, [pc, #488]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a5b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5b8:	6013      	str	r3, [r2, #0]
 800a5ba:	4b78      	ldr	r3, [pc, #480]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a77      	ldr	r2, [pc, #476]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a5c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a5c4:	6013      	str	r3, [r2, #0]
 800a5c6:	e01d      	b.n	800a604 <HAL_RCC_OscConfig+0xd4>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a5d0:	d10c      	bne.n	800a5ec <HAL_RCC_OscConfig+0xbc>
 800a5d2:	4b72      	ldr	r3, [pc, #456]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a71      	ldr	r2, [pc, #452]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a5d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a5dc:	6013      	str	r3, [r2, #0]
 800a5de:	4b6f      	ldr	r3, [pc, #444]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a6e      	ldr	r2, [pc, #440]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a5e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a5e8:	6013      	str	r3, [r2, #0]
 800a5ea:	e00b      	b.n	800a604 <HAL_RCC_OscConfig+0xd4>
 800a5ec:	4b6b      	ldr	r3, [pc, #428]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a6a      	ldr	r2, [pc, #424]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a5f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5f6:	6013      	str	r3, [r2, #0]
 800a5f8:	4b68      	ldr	r3, [pc, #416]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a67      	ldr	r2, [pc, #412]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a5fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a602:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d013      	beq.n	800a634 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a60c:	f7fe fea4 	bl	8009358 <HAL_GetTick>
 800a610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a612:	e008      	b.n	800a626 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a614:	f7fe fea0 	bl	8009358 <HAL_GetTick>
 800a618:	4602      	mov	r2, r0
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	1ad3      	subs	r3, r2, r3
 800a61e:	2b64      	cmp	r3, #100	@ 0x64
 800a620:	d901      	bls.n	800a626 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a622:	2303      	movs	r3, #3
 800a624:	e200      	b.n	800aa28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a626:	4b5d      	ldr	r3, [pc, #372]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d0f0      	beq.n	800a614 <HAL_RCC_OscConfig+0xe4>
 800a632:	e014      	b.n	800a65e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a634:	f7fe fe90 	bl	8009358 <HAL_GetTick>
 800a638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a63a:	e008      	b.n	800a64e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a63c:	f7fe fe8c 	bl	8009358 <HAL_GetTick>
 800a640:	4602      	mov	r2, r0
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	1ad3      	subs	r3, r2, r3
 800a646:	2b64      	cmp	r3, #100	@ 0x64
 800a648:	d901      	bls.n	800a64e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a64a:	2303      	movs	r3, #3
 800a64c:	e1ec      	b.n	800aa28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a64e:	4b53      	ldr	r3, [pc, #332]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1f0      	bne.n	800a63c <HAL_RCC_OscConfig+0x10c>
 800a65a:	e000      	b.n	800a65e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a65c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f003 0302 	and.w	r3, r3, #2
 800a666:	2b00      	cmp	r3, #0
 800a668:	d063      	beq.n	800a732 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a66a:	4b4c      	ldr	r3, [pc, #304]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	f003 030c 	and.w	r3, r3, #12
 800a672:	2b00      	cmp	r3, #0
 800a674:	d00b      	beq.n	800a68e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a676:	4b49      	ldr	r3, [pc, #292]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	f003 030c 	and.w	r3, r3, #12
 800a67e:	2b08      	cmp	r3, #8
 800a680:	d11c      	bne.n	800a6bc <HAL_RCC_OscConfig+0x18c>
 800a682:	4b46      	ldr	r3, [pc, #280]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d116      	bne.n	800a6bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a68e:	4b43      	ldr	r3, [pc, #268]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f003 0302 	and.w	r3, r3, #2
 800a696:	2b00      	cmp	r3, #0
 800a698:	d005      	beq.n	800a6a6 <HAL_RCC_OscConfig+0x176>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d001      	beq.n	800a6a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e1c0      	b.n	800aa28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6a6:	4b3d      	ldr	r3, [pc, #244]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	695b      	ldr	r3, [r3, #20]
 800a6b2:	00db      	lsls	r3, r3, #3
 800a6b4:	4939      	ldr	r1, [pc, #228]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a6ba:	e03a      	b.n	800a732 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	691b      	ldr	r3, [r3, #16]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d020      	beq.n	800a706 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a6c4:	4b36      	ldr	r3, [pc, #216]	@ (800a7a0 <HAL_RCC_OscConfig+0x270>)
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6ca:	f7fe fe45 	bl	8009358 <HAL_GetTick>
 800a6ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6d0:	e008      	b.n	800a6e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6d2:	f7fe fe41 	bl	8009358 <HAL_GetTick>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	1ad3      	subs	r3, r2, r3
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	d901      	bls.n	800a6e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a6e0:	2303      	movs	r3, #3
 800a6e2:	e1a1      	b.n	800aa28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6e4:	4b2d      	ldr	r3, [pc, #180]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 0302 	and.w	r3, r3, #2
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d0f0      	beq.n	800a6d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6f0:	4b2a      	ldr	r3, [pc, #168]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	695b      	ldr	r3, [r3, #20]
 800a6fc:	00db      	lsls	r3, r3, #3
 800a6fe:	4927      	ldr	r1, [pc, #156]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a700:	4313      	orrs	r3, r2
 800a702:	600b      	str	r3, [r1, #0]
 800a704:	e015      	b.n	800a732 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a706:	4b26      	ldr	r3, [pc, #152]	@ (800a7a0 <HAL_RCC_OscConfig+0x270>)
 800a708:	2200      	movs	r2, #0
 800a70a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a70c:	f7fe fe24 	bl	8009358 <HAL_GetTick>
 800a710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a712:	e008      	b.n	800a726 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a714:	f7fe fe20 	bl	8009358 <HAL_GetTick>
 800a718:	4602      	mov	r2, r0
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	1ad3      	subs	r3, r2, r3
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d901      	bls.n	800a726 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a722:	2303      	movs	r3, #3
 800a724:	e180      	b.n	800aa28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a726:	4b1d      	ldr	r3, [pc, #116]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f003 0302 	and.w	r3, r3, #2
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d1f0      	bne.n	800a714 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f003 0308 	and.w	r3, r3, #8
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d03a      	beq.n	800a7b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	699b      	ldr	r3, [r3, #24]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d019      	beq.n	800a77a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a746:	4b17      	ldr	r3, [pc, #92]	@ (800a7a4 <HAL_RCC_OscConfig+0x274>)
 800a748:	2201      	movs	r2, #1
 800a74a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a74c:	f7fe fe04 	bl	8009358 <HAL_GetTick>
 800a750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a752:	e008      	b.n	800a766 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a754:	f7fe fe00 	bl	8009358 <HAL_GetTick>
 800a758:	4602      	mov	r2, r0
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	1ad3      	subs	r3, r2, r3
 800a75e:	2b02      	cmp	r3, #2
 800a760:	d901      	bls.n	800a766 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a762:	2303      	movs	r3, #3
 800a764:	e160      	b.n	800aa28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a766:	4b0d      	ldr	r3, [pc, #52]	@ (800a79c <HAL_RCC_OscConfig+0x26c>)
 800a768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a76a:	f003 0302 	and.w	r3, r3, #2
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d0f0      	beq.n	800a754 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a772:	2001      	movs	r0, #1
 800a774:	f000 faba 	bl	800acec <RCC_Delay>
 800a778:	e01c      	b.n	800a7b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a77a:	4b0a      	ldr	r3, [pc, #40]	@ (800a7a4 <HAL_RCC_OscConfig+0x274>)
 800a77c:	2200      	movs	r2, #0
 800a77e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a780:	f7fe fdea 	bl	8009358 <HAL_GetTick>
 800a784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a786:	e00f      	b.n	800a7a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a788:	f7fe fde6 	bl	8009358 <HAL_GetTick>
 800a78c:	4602      	mov	r2, r0
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	1ad3      	subs	r3, r2, r3
 800a792:	2b02      	cmp	r3, #2
 800a794:	d908      	bls.n	800a7a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a796:	2303      	movs	r3, #3
 800a798:	e146      	b.n	800aa28 <HAL_RCC_OscConfig+0x4f8>
 800a79a:	bf00      	nop
 800a79c:	40021000 	.word	0x40021000
 800a7a0:	42420000 	.word	0x42420000
 800a7a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a7a8:	4b92      	ldr	r3, [pc, #584]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a7aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ac:	f003 0302 	and.w	r3, r3, #2
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1e9      	bne.n	800a788 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 0304 	and.w	r3, r3, #4
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f000 80a6 	beq.w	800a90e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a7c6:	4b8b      	ldr	r3, [pc, #556]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a7c8:	69db      	ldr	r3, [r3, #28]
 800a7ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d10d      	bne.n	800a7ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a7d2:	4b88      	ldr	r3, [pc, #544]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a7d4:	69db      	ldr	r3, [r3, #28]
 800a7d6:	4a87      	ldr	r2, [pc, #540]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a7d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7dc:	61d3      	str	r3, [r2, #28]
 800a7de:	4b85      	ldr	r3, [pc, #532]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a7e0:	69db      	ldr	r3, [r3, #28]
 800a7e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a7e6:	60bb      	str	r3, [r7, #8]
 800a7e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a7ee:	4b82      	ldr	r3, [pc, #520]	@ (800a9f8 <HAL_RCC_OscConfig+0x4c8>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d118      	bne.n	800a82c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a7fa:	4b7f      	ldr	r3, [pc, #508]	@ (800a9f8 <HAL_RCC_OscConfig+0x4c8>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a7e      	ldr	r2, [pc, #504]	@ (800a9f8 <HAL_RCC_OscConfig+0x4c8>)
 800a800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a806:	f7fe fda7 	bl	8009358 <HAL_GetTick>
 800a80a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a80c:	e008      	b.n	800a820 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a80e:	f7fe fda3 	bl	8009358 <HAL_GetTick>
 800a812:	4602      	mov	r2, r0
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	1ad3      	subs	r3, r2, r3
 800a818:	2b64      	cmp	r3, #100	@ 0x64
 800a81a:	d901      	bls.n	800a820 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a81c:	2303      	movs	r3, #3
 800a81e:	e103      	b.n	800aa28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a820:	4b75      	ldr	r3, [pc, #468]	@ (800a9f8 <HAL_RCC_OscConfig+0x4c8>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d0f0      	beq.n	800a80e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	2b01      	cmp	r3, #1
 800a832:	d106      	bne.n	800a842 <HAL_RCC_OscConfig+0x312>
 800a834:	4b6f      	ldr	r3, [pc, #444]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a836:	6a1b      	ldr	r3, [r3, #32]
 800a838:	4a6e      	ldr	r2, [pc, #440]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a83a:	f043 0301 	orr.w	r3, r3, #1
 800a83e:	6213      	str	r3, [r2, #32]
 800a840:	e02d      	b.n	800a89e <HAL_RCC_OscConfig+0x36e>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10c      	bne.n	800a864 <HAL_RCC_OscConfig+0x334>
 800a84a:	4b6a      	ldr	r3, [pc, #424]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a84c:	6a1b      	ldr	r3, [r3, #32]
 800a84e:	4a69      	ldr	r2, [pc, #420]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a850:	f023 0301 	bic.w	r3, r3, #1
 800a854:	6213      	str	r3, [r2, #32]
 800a856:	4b67      	ldr	r3, [pc, #412]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a858:	6a1b      	ldr	r3, [r3, #32]
 800a85a:	4a66      	ldr	r2, [pc, #408]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a85c:	f023 0304 	bic.w	r3, r3, #4
 800a860:	6213      	str	r3, [r2, #32]
 800a862:	e01c      	b.n	800a89e <HAL_RCC_OscConfig+0x36e>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	2b05      	cmp	r3, #5
 800a86a:	d10c      	bne.n	800a886 <HAL_RCC_OscConfig+0x356>
 800a86c:	4b61      	ldr	r3, [pc, #388]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a86e:	6a1b      	ldr	r3, [r3, #32]
 800a870:	4a60      	ldr	r2, [pc, #384]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a872:	f043 0304 	orr.w	r3, r3, #4
 800a876:	6213      	str	r3, [r2, #32]
 800a878:	4b5e      	ldr	r3, [pc, #376]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a87a:	6a1b      	ldr	r3, [r3, #32]
 800a87c:	4a5d      	ldr	r2, [pc, #372]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a87e:	f043 0301 	orr.w	r3, r3, #1
 800a882:	6213      	str	r3, [r2, #32]
 800a884:	e00b      	b.n	800a89e <HAL_RCC_OscConfig+0x36e>
 800a886:	4b5b      	ldr	r3, [pc, #364]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a888:	6a1b      	ldr	r3, [r3, #32]
 800a88a:	4a5a      	ldr	r2, [pc, #360]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a88c:	f023 0301 	bic.w	r3, r3, #1
 800a890:	6213      	str	r3, [r2, #32]
 800a892:	4b58      	ldr	r3, [pc, #352]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a894:	6a1b      	ldr	r3, [r3, #32]
 800a896:	4a57      	ldr	r2, [pc, #348]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a898:	f023 0304 	bic.w	r3, r3, #4
 800a89c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d015      	beq.n	800a8d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a8a6:	f7fe fd57 	bl	8009358 <HAL_GetTick>
 800a8aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8ac:	e00a      	b.n	800a8c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8ae:	f7fe fd53 	bl	8009358 <HAL_GetTick>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d901      	bls.n	800a8c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a8c0:	2303      	movs	r3, #3
 800a8c2:	e0b1      	b.n	800aa28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8c4:	4b4b      	ldr	r3, [pc, #300]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a8c6:	6a1b      	ldr	r3, [r3, #32]
 800a8c8:	f003 0302 	and.w	r3, r3, #2
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d0ee      	beq.n	800a8ae <HAL_RCC_OscConfig+0x37e>
 800a8d0:	e014      	b.n	800a8fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a8d2:	f7fe fd41 	bl	8009358 <HAL_GetTick>
 800a8d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a8d8:	e00a      	b.n	800a8f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8da:	f7fe fd3d 	bl	8009358 <HAL_GetTick>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d901      	bls.n	800a8f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	e09b      	b.n	800aa28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a8f0:	4b40      	ldr	r3, [pc, #256]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a8f2:	6a1b      	ldr	r3, [r3, #32]
 800a8f4:	f003 0302 	and.w	r3, r3, #2
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d1ee      	bne.n	800a8da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a8fc:	7dfb      	ldrb	r3, [r7, #23]
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d105      	bne.n	800a90e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a902:	4b3c      	ldr	r3, [pc, #240]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a904:	69db      	ldr	r3, [r3, #28]
 800a906:	4a3b      	ldr	r2, [pc, #236]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a908:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a90c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	69db      	ldr	r3, [r3, #28]
 800a912:	2b00      	cmp	r3, #0
 800a914:	f000 8087 	beq.w	800aa26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a918:	4b36      	ldr	r3, [pc, #216]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	f003 030c 	and.w	r3, r3, #12
 800a920:	2b08      	cmp	r3, #8
 800a922:	d061      	beq.n	800a9e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	69db      	ldr	r3, [r3, #28]
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d146      	bne.n	800a9ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a92c:	4b33      	ldr	r3, [pc, #204]	@ (800a9fc <HAL_RCC_OscConfig+0x4cc>)
 800a92e:	2200      	movs	r2, #0
 800a930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a932:	f7fe fd11 	bl	8009358 <HAL_GetTick>
 800a936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a938:	e008      	b.n	800a94c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a93a:	f7fe fd0d 	bl	8009358 <HAL_GetTick>
 800a93e:	4602      	mov	r2, r0
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	1ad3      	subs	r3, r2, r3
 800a944:	2b02      	cmp	r3, #2
 800a946:	d901      	bls.n	800a94c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a948:	2303      	movs	r3, #3
 800a94a:	e06d      	b.n	800aa28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a94c:	4b29      	ldr	r3, [pc, #164]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a954:	2b00      	cmp	r3, #0
 800a956:	d1f0      	bne.n	800a93a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6a1b      	ldr	r3, [r3, #32]
 800a95c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a960:	d108      	bne.n	800a974 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a962:	4b24      	ldr	r3, [pc, #144]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	4921      	ldr	r1, [pc, #132]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a970:	4313      	orrs	r3, r2
 800a972:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a974:	4b1f      	ldr	r3, [pc, #124]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6a19      	ldr	r1, [r3, #32]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a984:	430b      	orrs	r3, r1
 800a986:	491b      	ldr	r1, [pc, #108]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a988:	4313      	orrs	r3, r2
 800a98a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a98c:	4b1b      	ldr	r3, [pc, #108]	@ (800a9fc <HAL_RCC_OscConfig+0x4cc>)
 800a98e:	2201      	movs	r2, #1
 800a990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a992:	f7fe fce1 	bl	8009358 <HAL_GetTick>
 800a996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a998:	e008      	b.n	800a9ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a99a:	f7fe fcdd 	bl	8009358 <HAL_GetTick>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	1ad3      	subs	r3, r2, r3
 800a9a4:	2b02      	cmp	r3, #2
 800a9a6:	d901      	bls.n	800a9ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	e03d      	b.n	800aa28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a9ac:	4b11      	ldr	r3, [pc, #68]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d0f0      	beq.n	800a99a <HAL_RCC_OscConfig+0x46a>
 800a9b8:	e035      	b.n	800aa26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9ba:	4b10      	ldr	r3, [pc, #64]	@ (800a9fc <HAL_RCC_OscConfig+0x4cc>)
 800a9bc:	2200      	movs	r2, #0
 800a9be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9c0:	f7fe fcca 	bl	8009358 <HAL_GetTick>
 800a9c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a9c6:	e008      	b.n	800a9da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9c8:	f7fe fcc6 	bl	8009358 <HAL_GetTick>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	1ad3      	subs	r3, r2, r3
 800a9d2:	2b02      	cmp	r3, #2
 800a9d4:	d901      	bls.n	800a9da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a9d6:	2303      	movs	r3, #3
 800a9d8:	e026      	b.n	800aa28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a9da:	4b06      	ldr	r3, [pc, #24]	@ (800a9f4 <HAL_RCC_OscConfig+0x4c4>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1f0      	bne.n	800a9c8 <HAL_RCC_OscConfig+0x498>
 800a9e6:	e01e      	b.n	800aa26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	69db      	ldr	r3, [r3, #28]
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d107      	bne.n	800aa00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	e019      	b.n	800aa28 <HAL_RCC_OscConfig+0x4f8>
 800a9f4:	40021000 	.word	0x40021000
 800a9f8:	40007000 	.word	0x40007000
 800a9fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800aa00:	4b0b      	ldr	r3, [pc, #44]	@ (800aa30 <HAL_RCC_OscConfig+0x500>)
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a1b      	ldr	r3, [r3, #32]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d106      	bne.n	800aa22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d001      	beq.n	800aa26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	e000      	b.n	800aa28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800aa26:	2300      	movs	r3, #0
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3718      	adds	r7, #24
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	40021000 	.word	0x40021000

0800aa34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d101      	bne.n	800aa48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aa44:	2301      	movs	r3, #1
 800aa46:	e0d0      	b.n	800abea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aa48:	4b6a      	ldr	r3, [pc, #424]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c0>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f003 0307 	and.w	r3, r3, #7
 800aa50:	683a      	ldr	r2, [r7, #0]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d910      	bls.n	800aa78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa56:	4b67      	ldr	r3, [pc, #412]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c0>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f023 0207 	bic.w	r2, r3, #7
 800aa5e:	4965      	ldr	r1, [pc, #404]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c0>)
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa66:	4b63      	ldr	r3, [pc, #396]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c0>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f003 0307 	and.w	r3, r3, #7
 800aa6e:	683a      	ldr	r2, [r7, #0]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d001      	beq.n	800aa78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	e0b8      	b.n	800abea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 0302 	and.w	r3, r3, #2
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d020      	beq.n	800aac6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f003 0304 	and.w	r3, r3, #4
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d005      	beq.n	800aa9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aa90:	4b59      	ldr	r3, [pc, #356]	@ (800abf8 <HAL_RCC_ClockConfig+0x1c4>)
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	4a58      	ldr	r2, [pc, #352]	@ (800abf8 <HAL_RCC_ClockConfig+0x1c4>)
 800aa96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800aa9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f003 0308 	and.w	r3, r3, #8
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d005      	beq.n	800aab4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800aaa8:	4b53      	ldr	r3, [pc, #332]	@ (800abf8 <HAL_RCC_ClockConfig+0x1c4>)
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	4a52      	ldr	r2, [pc, #328]	@ (800abf8 <HAL_RCC_ClockConfig+0x1c4>)
 800aaae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800aab2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aab4:	4b50      	ldr	r3, [pc, #320]	@ (800abf8 <HAL_RCC_ClockConfig+0x1c4>)
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	494d      	ldr	r1, [pc, #308]	@ (800abf8 <HAL_RCC_ClockConfig+0x1c4>)
 800aac2:	4313      	orrs	r3, r2
 800aac4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f003 0301 	and.w	r3, r3, #1
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d040      	beq.n	800ab54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d107      	bne.n	800aaea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aada:	4b47      	ldr	r3, [pc, #284]	@ (800abf8 <HAL_RCC_ClockConfig+0x1c4>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d115      	bne.n	800ab12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aae6:	2301      	movs	r3, #1
 800aae8:	e07f      	b.n	800abea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d107      	bne.n	800ab02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aaf2:	4b41      	ldr	r3, [pc, #260]	@ (800abf8 <HAL_RCC_ClockConfig+0x1c4>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d109      	bne.n	800ab12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	e073      	b.n	800abea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab02:	4b3d      	ldr	r3, [pc, #244]	@ (800abf8 <HAL_RCC_ClockConfig+0x1c4>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f003 0302 	and.w	r3, r3, #2
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d101      	bne.n	800ab12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e06b      	b.n	800abea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ab12:	4b39      	ldr	r3, [pc, #228]	@ (800abf8 <HAL_RCC_ClockConfig+0x1c4>)
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	f023 0203 	bic.w	r2, r3, #3
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	4936      	ldr	r1, [pc, #216]	@ (800abf8 <HAL_RCC_ClockConfig+0x1c4>)
 800ab20:	4313      	orrs	r3, r2
 800ab22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ab24:	f7fe fc18 	bl	8009358 <HAL_GetTick>
 800ab28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab2a:	e00a      	b.n	800ab42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab2c:	f7fe fc14 	bl	8009358 <HAL_GetTick>
 800ab30:	4602      	mov	r2, r0
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	1ad3      	subs	r3, r2, r3
 800ab36:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d901      	bls.n	800ab42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ab3e:	2303      	movs	r3, #3
 800ab40:	e053      	b.n	800abea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab42:	4b2d      	ldr	r3, [pc, #180]	@ (800abf8 <HAL_RCC_ClockConfig+0x1c4>)
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	f003 020c 	and.w	r2, r3, #12
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d1eb      	bne.n	800ab2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ab54:	4b27      	ldr	r3, [pc, #156]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c0>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f003 0307 	and.w	r3, r3, #7
 800ab5c:	683a      	ldr	r2, [r7, #0]
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d210      	bcs.n	800ab84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab62:	4b24      	ldr	r3, [pc, #144]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c0>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f023 0207 	bic.w	r2, r3, #7
 800ab6a:	4922      	ldr	r1, [pc, #136]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c0>)
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab72:	4b20      	ldr	r3, [pc, #128]	@ (800abf4 <HAL_RCC_ClockConfig+0x1c0>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f003 0307 	and.w	r3, r3, #7
 800ab7a:	683a      	ldr	r2, [r7, #0]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d001      	beq.n	800ab84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ab80:	2301      	movs	r3, #1
 800ab82:	e032      	b.n	800abea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f003 0304 	and.w	r3, r3, #4
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d008      	beq.n	800aba2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ab90:	4b19      	ldr	r3, [pc, #100]	@ (800abf8 <HAL_RCC_ClockConfig+0x1c4>)
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	4916      	ldr	r1, [pc, #88]	@ (800abf8 <HAL_RCC_ClockConfig+0x1c4>)
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f003 0308 	and.w	r3, r3, #8
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d009      	beq.n	800abc2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800abae:	4b12      	ldr	r3, [pc, #72]	@ (800abf8 <HAL_RCC_ClockConfig+0x1c4>)
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	691b      	ldr	r3, [r3, #16]
 800abba:	00db      	lsls	r3, r3, #3
 800abbc:	490e      	ldr	r1, [pc, #56]	@ (800abf8 <HAL_RCC_ClockConfig+0x1c4>)
 800abbe:	4313      	orrs	r3, r2
 800abc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800abc2:	f000 f821 	bl	800ac08 <HAL_RCC_GetSysClockFreq>
 800abc6:	4602      	mov	r2, r0
 800abc8:	4b0b      	ldr	r3, [pc, #44]	@ (800abf8 <HAL_RCC_ClockConfig+0x1c4>)
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	091b      	lsrs	r3, r3, #4
 800abce:	f003 030f 	and.w	r3, r3, #15
 800abd2:	490a      	ldr	r1, [pc, #40]	@ (800abfc <HAL_RCC_ClockConfig+0x1c8>)
 800abd4:	5ccb      	ldrb	r3, [r1, r3]
 800abd6:	fa22 f303 	lsr.w	r3, r2, r3
 800abda:	4a09      	ldr	r2, [pc, #36]	@ (800ac00 <HAL_RCC_ClockConfig+0x1cc>)
 800abdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800abde:	4b09      	ldr	r3, [pc, #36]	@ (800ac04 <HAL_RCC_ClockConfig+0x1d0>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7fe fb76 	bl	80092d4 <HAL_InitTick>

  return HAL_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	40022000 	.word	0x40022000
 800abf8:	40021000 	.word	0x40021000
 800abfc:	0800eb64 	.word	0x0800eb64
 800ac00:	20000454 	.word	0x20000454
 800ac04:	20000458 	.word	0x20000458

0800ac08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b087      	sub	sp, #28
 800ac0c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	60fb      	str	r3, [r7, #12]
 800ac12:	2300      	movs	r3, #0
 800ac14:	60bb      	str	r3, [r7, #8]
 800ac16:	2300      	movs	r3, #0
 800ac18:	617b      	str	r3, [r7, #20]
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800ac22:	4b1e      	ldr	r3, [pc, #120]	@ (800ac9c <HAL_RCC_GetSysClockFreq+0x94>)
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f003 030c 	and.w	r3, r3, #12
 800ac2e:	2b04      	cmp	r3, #4
 800ac30:	d002      	beq.n	800ac38 <HAL_RCC_GetSysClockFreq+0x30>
 800ac32:	2b08      	cmp	r3, #8
 800ac34:	d003      	beq.n	800ac3e <HAL_RCC_GetSysClockFreq+0x36>
 800ac36:	e027      	b.n	800ac88 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ac38:	4b19      	ldr	r3, [pc, #100]	@ (800aca0 <HAL_RCC_GetSysClockFreq+0x98>)
 800ac3a:	613b      	str	r3, [r7, #16]
      break;
 800ac3c:	e027      	b.n	800ac8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	0c9b      	lsrs	r3, r3, #18
 800ac42:	f003 030f 	and.w	r3, r3, #15
 800ac46:	4a17      	ldr	r2, [pc, #92]	@ (800aca4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800ac48:	5cd3      	ldrb	r3, [r2, r3]
 800ac4a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d010      	beq.n	800ac78 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ac56:	4b11      	ldr	r3, [pc, #68]	@ (800ac9c <HAL_RCC_GetSysClockFreq+0x94>)
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	0c5b      	lsrs	r3, r3, #17
 800ac5c:	f003 0301 	and.w	r3, r3, #1
 800ac60:	4a11      	ldr	r2, [pc, #68]	@ (800aca8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800ac62:	5cd3      	ldrb	r3, [r2, r3]
 800ac64:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4a0d      	ldr	r2, [pc, #52]	@ (800aca0 <HAL_RCC_GetSysClockFreq+0x98>)
 800ac6a:	fb03 f202 	mul.w	r2, r3, r2
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac74:	617b      	str	r3, [r7, #20]
 800ac76:	e004      	b.n	800ac82 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4a0c      	ldr	r2, [pc, #48]	@ (800acac <HAL_RCC_GetSysClockFreq+0xa4>)
 800ac7c:	fb02 f303 	mul.w	r3, r2, r3
 800ac80:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	613b      	str	r3, [r7, #16]
      break;
 800ac86:	e002      	b.n	800ac8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ac88:	4b05      	ldr	r3, [pc, #20]	@ (800aca0 <HAL_RCC_GetSysClockFreq+0x98>)
 800ac8a:	613b      	str	r3, [r7, #16]
      break;
 800ac8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ac8e:	693b      	ldr	r3, [r7, #16]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	371c      	adds	r7, #28
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bc80      	pop	{r7}
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop
 800ac9c:	40021000 	.word	0x40021000
 800aca0:	007a1200 	.word	0x007a1200
 800aca4:	0800eb7c 	.word	0x0800eb7c
 800aca8:	0800eb8c 	.word	0x0800eb8c
 800acac:	003d0900 	.word	0x003d0900

0800acb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800acb0:	b480      	push	{r7}
 800acb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800acb4:	4b02      	ldr	r3, [pc, #8]	@ (800acc0 <HAL_RCC_GetHCLKFreq+0x10>)
 800acb6:	681b      	ldr	r3, [r3, #0]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	46bd      	mov	sp, r7
 800acbc:	bc80      	pop	{r7}
 800acbe:	4770      	bx	lr
 800acc0:	20000454 	.word	0x20000454

0800acc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800acc8:	f7ff fff2 	bl	800acb0 <HAL_RCC_GetHCLKFreq>
 800accc:	4602      	mov	r2, r0
 800acce:	4b05      	ldr	r3, [pc, #20]	@ (800ace4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	0a1b      	lsrs	r3, r3, #8
 800acd4:	f003 0307 	and.w	r3, r3, #7
 800acd8:	4903      	ldr	r1, [pc, #12]	@ (800ace8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800acda:	5ccb      	ldrb	r3, [r1, r3]
 800acdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	40021000 	.word	0x40021000
 800ace8:	0800eb74 	.word	0x0800eb74

0800acec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800acf4:	4b0a      	ldr	r3, [pc, #40]	@ (800ad20 <RCC_Delay+0x34>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a0a      	ldr	r2, [pc, #40]	@ (800ad24 <RCC_Delay+0x38>)
 800acfa:	fba2 2303 	umull	r2, r3, r2, r3
 800acfe:	0a5b      	lsrs	r3, r3, #9
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	fb02 f303 	mul.w	r3, r2, r3
 800ad06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800ad08:	bf00      	nop
  }
  while (Delay --);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	1e5a      	subs	r2, r3, #1
 800ad0e:	60fa      	str	r2, [r7, #12]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1f9      	bne.n	800ad08 <RCC_Delay+0x1c>
}
 800ad14:	bf00      	nop
 800ad16:	bf00      	nop
 800ad18:	3714      	adds	r7, #20
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bc80      	pop	{r7}
 800ad1e:	4770      	bx	lr
 800ad20:	20000454 	.word	0x20000454
 800ad24:	10624dd3 	.word	0x10624dd3

0800ad28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d101      	bne.n	800ad3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ad36:	2301      	movs	r3, #1
 800ad38:	e076      	b.n	800ae28 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d108      	bne.n	800ad54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ad4a:	d009      	beq.n	800ad60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	61da      	str	r2, [r3, #28]
 800ad52:	e005      	b.n	800ad60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2200      	movs	r2, #0
 800ad58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d106      	bne.n	800ad80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f7fd fe26 	bl	80089cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2202      	movs	r2, #2
 800ad84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ad96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ada8:	431a      	orrs	r2, r3
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800adb2:	431a      	orrs	r2, r3
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	f003 0302 	and.w	r3, r3, #2
 800adbc:	431a      	orrs	r2, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	695b      	ldr	r3, [r3, #20]
 800adc2:	f003 0301 	and.w	r3, r3, #1
 800adc6:	431a      	orrs	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	699b      	ldr	r3, [r3, #24]
 800adcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800add0:	431a      	orrs	r2, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	69db      	ldr	r3, [r3, #28]
 800add6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800adda:	431a      	orrs	r2, r3
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a1b      	ldr	r3, [r3, #32]
 800ade0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ade4:	ea42 0103 	orr.w	r1, r2, r3
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	430a      	orrs	r2, r1
 800adf6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	699b      	ldr	r3, [r3, #24]
 800adfc:	0c1a      	lsrs	r2, r3, #16
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f002 0204 	and.w	r2, r2, #4
 800ae06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	69da      	ldr	r2, [r3, #28]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ae16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2201      	movs	r2, #1
 800ae22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800ae26:	2300      	movs	r3, #0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3708      	adds	r7, #8
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b088      	sub	sp, #32
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	603b      	str	r3, [r7, #0]
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae40:	f7fe fa8a 	bl	8009358 <HAL_GetTick>
 800ae44:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800ae46:	88fb      	ldrh	r3, [r7, #6]
 800ae48:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d001      	beq.n	800ae5a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800ae56:	2302      	movs	r3, #2
 800ae58:	e12a      	b.n	800b0b0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d002      	beq.n	800ae66 <HAL_SPI_Transmit+0x36>
 800ae60:	88fb      	ldrh	r3, [r7, #6]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d101      	bne.n	800ae6a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800ae66:	2301      	movs	r3, #1
 800ae68:	e122      	b.n	800b0b0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d101      	bne.n	800ae78 <HAL_SPI_Transmit+0x48>
 800ae74:	2302      	movs	r3, #2
 800ae76:	e11b      	b.n	800b0b0 <HAL_SPI_Transmit+0x280>
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2203      	movs	r2, #3
 800ae84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	68ba      	ldr	r2, [r7, #8]
 800ae92:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	88fa      	ldrh	r2, [r7, #6]
 800ae98:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	88fa      	ldrh	r2, [r7, #6]
 800ae9e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2200      	movs	r2, #0
 800aea4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aec6:	d10f      	bne.n	800aee8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aed6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aee6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aef2:	2b40      	cmp	r3, #64	@ 0x40
 800aef4:	d007      	beq.n	800af06 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af0e:	d152      	bne.n	800afb6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d002      	beq.n	800af1e <HAL_SPI_Transmit+0xee>
 800af18:	8b7b      	ldrh	r3, [r7, #26]
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	d145      	bne.n	800afaa <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af22:	881a      	ldrh	r2, [r3, #0]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af2e:	1c9a      	adds	r2, r3, #2
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800af38:	b29b      	uxth	r3, r3
 800af3a:	3b01      	subs	r3, #1
 800af3c:	b29a      	uxth	r2, r3
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800af42:	e032      	b.n	800afaa <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	f003 0302 	and.w	r3, r3, #2
 800af4e:	2b02      	cmp	r3, #2
 800af50:	d112      	bne.n	800af78 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af56:	881a      	ldrh	r2, [r3, #0]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af62:	1c9a      	adds	r2, r3, #2
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	3b01      	subs	r3, #1
 800af70:	b29a      	uxth	r2, r3
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	86da      	strh	r2, [r3, #54]	@ 0x36
 800af76:	e018      	b.n	800afaa <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af78:	f7fe f9ee 	bl	8009358 <HAL_GetTick>
 800af7c:	4602      	mov	r2, r0
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	683a      	ldr	r2, [r7, #0]
 800af84:	429a      	cmp	r2, r3
 800af86:	d803      	bhi.n	800af90 <HAL_SPI_Transmit+0x160>
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af8e:	d102      	bne.n	800af96 <HAL_SPI_Transmit+0x166>
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d109      	bne.n	800afaa <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2201      	movs	r2, #1
 800af9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800afa6:	2303      	movs	r3, #3
 800afa8:	e082      	b.n	800b0b0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800afae:	b29b      	uxth	r3, r3
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d1c7      	bne.n	800af44 <HAL_SPI_Transmit+0x114>
 800afb4:	e053      	b.n	800b05e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d002      	beq.n	800afc4 <HAL_SPI_Transmit+0x194>
 800afbe:	8b7b      	ldrh	r3, [r7, #26]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d147      	bne.n	800b054 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	330c      	adds	r3, #12
 800afce:	7812      	ldrb	r2, [r2, #0]
 800afd0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afd6:	1c5a      	adds	r2, r3, #1
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	3b01      	subs	r3, #1
 800afe4:	b29a      	uxth	r2, r3
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800afea:	e033      	b.n	800b054 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	689b      	ldr	r3, [r3, #8]
 800aff2:	f003 0302 	and.w	r3, r3, #2
 800aff6:	2b02      	cmp	r3, #2
 800aff8:	d113      	bne.n	800b022 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	330c      	adds	r3, #12
 800b004:	7812      	ldrb	r2, [r2, #0]
 800b006:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b00c:	1c5a      	adds	r2, r3, #1
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b016:	b29b      	uxth	r3, r3
 800b018:	3b01      	subs	r3, #1
 800b01a:	b29a      	uxth	r2, r3
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b020:	e018      	b.n	800b054 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b022:	f7fe f999 	bl	8009358 <HAL_GetTick>
 800b026:	4602      	mov	r2, r0
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	1ad3      	subs	r3, r2, r3
 800b02c:	683a      	ldr	r2, [r7, #0]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d803      	bhi.n	800b03a <HAL_SPI_Transmit+0x20a>
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b038:	d102      	bne.n	800b040 <HAL_SPI_Transmit+0x210>
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d109      	bne.n	800b054 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2201      	movs	r2, #1
 800b044:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2200      	movs	r2, #0
 800b04c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b050:	2303      	movs	r3, #3
 800b052:	e02d      	b.n	800b0b0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b058:	b29b      	uxth	r3, r3
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d1c6      	bne.n	800afec <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b05e:	69fa      	ldr	r2, [r7, #28]
 800b060:	6839      	ldr	r1, [r7, #0]
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f000 fbc4 	bl	800b7f0 <SPI_EndRxTxTransaction>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d002      	beq.n	800b074 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2220      	movs	r2, #32
 800b072:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d10a      	bne.n	800b092 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b07c:	2300      	movs	r3, #0
 800b07e:	617b      	str	r3, [r7, #20]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	617b      	str	r3, [r7, #20]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	617b      	str	r3, [r7, #20]
 800b090:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2201      	movs	r2, #1
 800b096:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d001      	beq.n	800b0ae <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e000      	b.n	800b0b0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800b0ae:	2300      	movs	r3, #0
  }
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3720      	adds	r7, #32
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b088      	sub	sp, #32
 800b0bc:	af02      	add	r7, sp, #8
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	603b      	str	r3, [r7, #0]
 800b0c4:	4613      	mov	r3, r2
 800b0c6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d001      	beq.n	800b0d8 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800b0d4:	2302      	movs	r3, #2
 800b0d6:	e104      	b.n	800b2e2 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b0e0:	d112      	bne.n	800b108 <HAL_SPI_Receive+0x50>
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d10e      	bne.n	800b108 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2204      	movs	r2, #4
 800b0ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b0f2:	88fa      	ldrh	r2, [r7, #6]
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	68ba      	ldr	r2, [r7, #8]
 800b0fc:	68b9      	ldr	r1, [r7, #8]
 800b0fe:	68f8      	ldr	r0, [r7, #12]
 800b100:	f000 f8f3 	bl	800b2ea <HAL_SPI_TransmitReceive>
 800b104:	4603      	mov	r3, r0
 800b106:	e0ec      	b.n	800b2e2 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b108:	f7fe f926 	bl	8009358 <HAL_GetTick>
 800b10c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d002      	beq.n	800b11a <HAL_SPI_Receive+0x62>
 800b114:	88fb      	ldrh	r3, [r7, #6]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d101      	bne.n	800b11e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	e0e1      	b.n	800b2e2 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b124:	2b01      	cmp	r3, #1
 800b126:	d101      	bne.n	800b12c <HAL_SPI_Receive+0x74>
 800b128:	2302      	movs	r3, #2
 800b12a:	e0da      	b.n	800b2e2 <HAL_SPI_Receive+0x22a>
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2201      	movs	r2, #1
 800b130:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2204      	movs	r2, #4
 800b138:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2200      	movs	r2, #0
 800b140:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	68ba      	ldr	r2, [r7, #8]
 800b146:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	88fa      	ldrh	r2, [r7, #6]
 800b14c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	88fa      	ldrh	r2, [r7, #6]
 800b152:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2200      	movs	r2, #0
 800b158:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2200      	movs	r2, #0
 800b15e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2200      	movs	r2, #0
 800b164:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2200      	movs	r2, #0
 800b16a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2200      	movs	r2, #0
 800b170:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b17a:	d10f      	bne.n	800b19c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b18a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b19a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1a6:	2b40      	cmp	r3, #64	@ 0x40
 800b1a8:	d007      	beq.n	800b1ba <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b1b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d170      	bne.n	800b2a4 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b1c2:	e035      	b.n	800b230 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	f003 0301 	and.w	r3, r3, #1
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d115      	bne.n	800b1fe <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f103 020c 	add.w	r2, r3, #12
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1de:	7812      	ldrb	r2, [r2, #0]
 800b1e0:	b2d2      	uxtb	r2, r2
 800b1e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1e8:	1c5a      	adds	r2, r3, #1
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	b29a      	uxth	r2, r3
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b1fc:	e018      	b.n	800b230 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b1fe:	f7fe f8ab 	bl	8009358 <HAL_GetTick>
 800b202:	4602      	mov	r2, r0
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	1ad3      	subs	r3, r2, r3
 800b208:	683a      	ldr	r2, [r7, #0]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d803      	bhi.n	800b216 <HAL_SPI_Receive+0x15e>
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b214:	d102      	bne.n	800b21c <HAL_SPI_Receive+0x164>
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d109      	bne.n	800b230 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2201      	movs	r2, #1
 800b220:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2200      	movs	r2, #0
 800b228:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b22c:	2303      	movs	r3, #3
 800b22e:	e058      	b.n	800b2e2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b234:	b29b      	uxth	r3, r3
 800b236:	2b00      	cmp	r3, #0
 800b238:	d1c4      	bne.n	800b1c4 <HAL_SPI_Receive+0x10c>
 800b23a:	e038      	b.n	800b2ae <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	f003 0301 	and.w	r3, r3, #1
 800b246:	2b01      	cmp	r3, #1
 800b248:	d113      	bne.n	800b272 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	68da      	ldr	r2, [r3, #12]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b254:	b292      	uxth	r2, r2
 800b256:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b25c:	1c9a      	adds	r2, r3, #2
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b266:	b29b      	uxth	r3, r3
 800b268:	3b01      	subs	r3, #1
 800b26a:	b29a      	uxth	r2, r3
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b270:	e018      	b.n	800b2a4 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b272:	f7fe f871 	bl	8009358 <HAL_GetTick>
 800b276:	4602      	mov	r2, r0
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	1ad3      	subs	r3, r2, r3
 800b27c:	683a      	ldr	r2, [r7, #0]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d803      	bhi.n	800b28a <HAL_SPI_Receive+0x1d2>
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b288:	d102      	bne.n	800b290 <HAL_SPI_Receive+0x1d8>
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d109      	bne.n	800b2a4 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2201      	movs	r2, #1
 800b294:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2200      	movs	r2, #0
 800b29c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b2a0:	2303      	movs	r3, #3
 800b2a2:	e01e      	b.n	800b2e2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d1c6      	bne.n	800b23c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b2ae:	697a      	ldr	r2, [r7, #20]
 800b2b0:	6839      	ldr	r1, [r7, #0]
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	f000 fa4a 	bl	800b74c <SPI_EndRxTransaction>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d002      	beq.n	800b2c4 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2220      	movs	r2, #32
 800b2c2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d001      	beq.n	800b2e0 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	e000      	b.n	800b2e2 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800b2e0:	2300      	movs	r3, #0
  }
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3718      	adds	r7, #24
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b08a      	sub	sp, #40	@ 0x28
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	60f8      	str	r0, [r7, #12]
 800b2f2:	60b9      	str	r1, [r7, #8]
 800b2f4:	607a      	str	r2, [r7, #4]
 800b2f6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b2fc:	f7fe f82c 	bl	8009358 <HAL_GetTick>
 800b300:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b308:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b310:	887b      	ldrh	r3, [r7, #2]
 800b312:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b314:	7ffb      	ldrb	r3, [r7, #31]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d00c      	beq.n	800b334 <HAL_SPI_TransmitReceive+0x4a>
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b320:	d106      	bne.n	800b330 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d102      	bne.n	800b330 <HAL_SPI_TransmitReceive+0x46>
 800b32a:	7ffb      	ldrb	r3, [r7, #31]
 800b32c:	2b04      	cmp	r3, #4
 800b32e:	d001      	beq.n	800b334 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800b330:	2302      	movs	r3, #2
 800b332:	e17f      	b.n	800b634 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d005      	beq.n	800b346 <HAL_SPI_TransmitReceive+0x5c>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d002      	beq.n	800b346 <HAL_SPI_TransmitReceive+0x5c>
 800b340:	887b      	ldrh	r3, [r7, #2]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d101      	bne.n	800b34a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	e174      	b.n	800b634 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b350:	2b01      	cmp	r3, #1
 800b352:	d101      	bne.n	800b358 <HAL_SPI_TransmitReceive+0x6e>
 800b354:	2302      	movs	r3, #2
 800b356:	e16d      	b.n	800b634 <HAL_SPI_TransmitReceive+0x34a>
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b366:	b2db      	uxtb	r3, r3
 800b368:	2b04      	cmp	r3, #4
 800b36a:	d003      	beq.n	800b374 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2205      	movs	r2, #5
 800b370:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2200      	movs	r2, #0
 800b378:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	887a      	ldrh	r2, [r7, #2]
 800b384:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	887a      	ldrh	r2, [r7, #2]
 800b38a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	68ba      	ldr	r2, [r7, #8]
 800b390:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	887a      	ldrh	r2, [r7, #2]
 800b396:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	887a      	ldrh	r2, [r7, #2]
 800b39c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3b4:	2b40      	cmp	r3, #64	@ 0x40
 800b3b6:	d007      	beq.n	800b3c8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b3c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b3d0:	d17e      	bne.n	800b4d0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d002      	beq.n	800b3e0 <HAL_SPI_TransmitReceive+0xf6>
 800b3da:	8afb      	ldrh	r3, [r7, #22]
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d16c      	bne.n	800b4ba <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3e4:	881a      	ldrh	r2, [r3, #0]
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3f0:	1c9a      	adds	r2, r3, #2
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	b29a      	uxth	r2, r3
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b404:	e059      	b.n	800b4ba <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	f003 0302 	and.w	r3, r3, #2
 800b410:	2b02      	cmp	r3, #2
 800b412:	d11b      	bne.n	800b44c <HAL_SPI_TransmitReceive+0x162>
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b418:	b29b      	uxth	r3, r3
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d016      	beq.n	800b44c <HAL_SPI_TransmitReceive+0x162>
 800b41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b420:	2b01      	cmp	r3, #1
 800b422:	d113      	bne.n	800b44c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b428:	881a      	ldrh	r2, [r3, #0]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b434:	1c9a      	adds	r2, r3, #2
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b43e:	b29b      	uxth	r3, r3
 800b440:	3b01      	subs	r3, #1
 800b442:	b29a      	uxth	r2, r3
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b448:	2300      	movs	r3, #0
 800b44a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	f003 0301 	and.w	r3, r3, #1
 800b456:	2b01      	cmp	r3, #1
 800b458:	d119      	bne.n	800b48e <HAL_SPI_TransmitReceive+0x1a4>
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b45e:	b29b      	uxth	r3, r3
 800b460:	2b00      	cmp	r3, #0
 800b462:	d014      	beq.n	800b48e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	68da      	ldr	r2, [r3, #12]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b46e:	b292      	uxth	r2, r2
 800b470:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b476:	1c9a      	adds	r2, r3, #2
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b480:	b29b      	uxth	r3, r3
 800b482:	3b01      	subs	r3, #1
 800b484:	b29a      	uxth	r2, r3
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b48a:	2301      	movs	r3, #1
 800b48c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b48e:	f7fd ff63 	bl	8009358 <HAL_GetTick>
 800b492:	4602      	mov	r2, r0
 800b494:	6a3b      	ldr	r3, [r7, #32]
 800b496:	1ad3      	subs	r3, r2, r3
 800b498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d80d      	bhi.n	800b4ba <HAL_SPI_TransmitReceive+0x1d0>
 800b49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4a4:	d009      	beq.n	800b4ba <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800b4b6:	2303      	movs	r3, #3
 800b4b8:	e0bc      	b.n	800b634 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d1a0      	bne.n	800b406 <HAL_SPI_TransmitReceive+0x11c>
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d19b      	bne.n	800b406 <HAL_SPI_TransmitReceive+0x11c>
 800b4ce:	e082      	b.n	800b5d6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d002      	beq.n	800b4de <HAL_SPI_TransmitReceive+0x1f4>
 800b4d8:	8afb      	ldrh	r3, [r7, #22]
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d171      	bne.n	800b5c2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	330c      	adds	r3, #12
 800b4e8:	7812      	ldrb	r2, [r2, #0]
 800b4ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4f0:	1c5a      	adds	r2, r3, #1
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	b29a      	uxth	r2, r3
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b504:	e05d      	b.n	800b5c2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	f003 0302 	and.w	r3, r3, #2
 800b510:	2b02      	cmp	r3, #2
 800b512:	d11c      	bne.n	800b54e <HAL_SPI_TransmitReceive+0x264>
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b518:	b29b      	uxth	r3, r3
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d017      	beq.n	800b54e <HAL_SPI_TransmitReceive+0x264>
 800b51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b520:	2b01      	cmp	r3, #1
 800b522:	d114      	bne.n	800b54e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	330c      	adds	r3, #12
 800b52e:	7812      	ldrb	r2, [r2, #0]
 800b530:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b536:	1c5a      	adds	r2, r3, #1
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b540:	b29b      	uxth	r3, r3
 800b542:	3b01      	subs	r3, #1
 800b544:	b29a      	uxth	r2, r3
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b54a:	2300      	movs	r3, #0
 800b54c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	f003 0301 	and.w	r3, r3, #1
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d119      	bne.n	800b590 <HAL_SPI_TransmitReceive+0x2a6>
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b560:	b29b      	uxth	r3, r3
 800b562:	2b00      	cmp	r3, #0
 800b564:	d014      	beq.n	800b590 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	68da      	ldr	r2, [r3, #12]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b570:	b2d2      	uxtb	r2, r2
 800b572:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b578:	1c5a      	adds	r2, r3, #1
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b582:	b29b      	uxth	r3, r3
 800b584:	3b01      	subs	r3, #1
 800b586:	b29a      	uxth	r2, r3
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b58c:	2301      	movs	r3, #1
 800b58e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b590:	f7fd fee2 	bl	8009358 <HAL_GetTick>
 800b594:	4602      	mov	r2, r0
 800b596:	6a3b      	ldr	r3, [r7, #32]
 800b598:	1ad3      	subs	r3, r2, r3
 800b59a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d803      	bhi.n	800b5a8 <HAL_SPI_TransmitReceive+0x2be>
 800b5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5a6:	d102      	bne.n	800b5ae <HAL_SPI_TransmitReceive+0x2c4>
 800b5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d109      	bne.n	800b5c2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800b5be:	2303      	movs	r3, #3
 800b5c0:	e038      	b.n	800b634 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d19c      	bne.n	800b506 <HAL_SPI_TransmitReceive+0x21c>
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d197      	bne.n	800b506 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b5d6:	6a3a      	ldr	r2, [r7, #32]
 800b5d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f000 f908 	bl	800b7f0 <SPI_EndRxTxTransaction>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d008      	beq.n	800b5f8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2220      	movs	r2, #32
 800b5ea:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	e01d      	b.n	800b634 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d10a      	bne.n	800b616 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b600:	2300      	movs	r3, #0
 800b602:	613b      	str	r3, [r7, #16]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	613b      	str	r3, [r7, #16]
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	689b      	ldr	r3, [r3, #8]
 800b612:	613b      	str	r3, [r7, #16]
 800b614:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2201      	movs	r2, #1
 800b61a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2200      	movs	r2, #0
 800b622:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d001      	beq.n	800b632 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800b62e:	2301      	movs	r3, #1
 800b630:	e000      	b.n	800b634 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800b632:	2300      	movs	r3, #0
  }
}
 800b634:	4618      	mov	r0, r3
 800b636:	3728      	adds	r7, #40	@ 0x28
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b088      	sub	sp, #32
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	603b      	str	r3, [r7, #0]
 800b648:	4613      	mov	r3, r2
 800b64a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b64c:	f7fd fe84 	bl	8009358 <HAL_GetTick>
 800b650:	4602      	mov	r2, r0
 800b652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b654:	1a9b      	subs	r3, r3, r2
 800b656:	683a      	ldr	r2, [r7, #0]
 800b658:	4413      	add	r3, r2
 800b65a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b65c:	f7fd fe7c 	bl	8009358 <HAL_GetTick>
 800b660:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b662:	4b39      	ldr	r3, [pc, #228]	@ (800b748 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	015b      	lsls	r3, r3, #5
 800b668:	0d1b      	lsrs	r3, r3, #20
 800b66a:	69fa      	ldr	r2, [r7, #28]
 800b66c:	fb02 f303 	mul.w	r3, r2, r3
 800b670:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b672:	e054      	b.n	800b71e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b67a:	d050      	beq.n	800b71e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b67c:	f7fd fe6c 	bl	8009358 <HAL_GetTick>
 800b680:	4602      	mov	r2, r0
 800b682:	69bb      	ldr	r3, [r7, #24]
 800b684:	1ad3      	subs	r3, r2, r3
 800b686:	69fa      	ldr	r2, [r7, #28]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d902      	bls.n	800b692 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d13d      	bne.n	800b70e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	685a      	ldr	r2, [r3, #4]
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b6a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	685b      	ldr	r3, [r3, #4]
 800b6a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b6aa:	d111      	bne.n	800b6d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b6b4:	d004      	beq.n	800b6c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6be:	d107      	bne.n	800b6d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b6ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b6d8:	d10f      	bne.n	800b6fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b6e8:	601a      	str	r2, [r3, #0]
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b6f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2200      	movs	r2, #0
 800b706:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800b70a:	2303      	movs	r3, #3
 800b70c:	e017      	b.n	800b73e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d101      	bne.n	800b718 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b714:	2300      	movs	r3, #0
 800b716:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	3b01      	subs	r3, #1
 800b71c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	689a      	ldr	r2, [r3, #8]
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	4013      	ands	r3, r2
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	429a      	cmp	r2, r3
 800b72c:	bf0c      	ite	eq
 800b72e:	2301      	moveq	r3, #1
 800b730:	2300      	movne	r3, #0
 800b732:	b2db      	uxtb	r3, r3
 800b734:	461a      	mov	r2, r3
 800b736:	79fb      	ldrb	r3, [r7, #7]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d19b      	bne.n	800b674 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3720      	adds	r7, #32
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	20000454 	.word	0x20000454

0800b74c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b086      	sub	sp, #24
 800b750:	af02      	add	r7, sp, #8
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b760:	d111      	bne.n	800b786 <SPI_EndRxTransaction+0x3a>
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b76a:	d004      	beq.n	800b776 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b774:	d107      	bne.n	800b786 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b784:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b78e:	d117      	bne.n	800b7c0 <SPI_EndRxTransaction+0x74>
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b798:	d112      	bne.n	800b7c0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	9300      	str	r3, [sp, #0]
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	2101      	movs	r1, #1
 800b7a4:	68f8      	ldr	r0, [r7, #12]
 800b7a6:	f7ff ff49 	bl	800b63c <SPI_WaitFlagStateUntilTimeout>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d01a      	beq.n	800b7e6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7b4:	f043 0220 	orr.w	r2, r3, #32
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b7bc:	2303      	movs	r3, #3
 800b7be:	e013      	b.n	800b7e8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	9300      	str	r3, [sp, #0]
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	2180      	movs	r1, #128	@ 0x80
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f7ff ff36 	bl	800b63c <SPI_WaitFlagStateUntilTimeout>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d007      	beq.n	800b7e6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7da:	f043 0220 	orr.w	r2, r3, #32
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b7e2:	2303      	movs	r3, #3
 800b7e4:	e000      	b.n	800b7e8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800b7e6:	2300      	movs	r3, #0
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af02      	add	r7, sp, #8
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	2201      	movs	r2, #1
 800b804:	2102      	movs	r1, #2
 800b806:	68f8      	ldr	r0, [r7, #12]
 800b808:	f7ff ff18 	bl	800b63c <SPI_WaitFlagStateUntilTimeout>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d007      	beq.n	800b822 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b816:	f043 0220 	orr.w	r2, r3, #32
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800b81e:	2303      	movs	r3, #3
 800b820:	e013      	b.n	800b84a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	2200      	movs	r2, #0
 800b82a:	2180      	movs	r1, #128	@ 0x80
 800b82c:	68f8      	ldr	r0, [r7, #12]
 800b82e:	f7ff ff05 	bl	800b63c <SPI_WaitFlagStateUntilTimeout>
 800b832:	4603      	mov	r3, r0
 800b834:	2b00      	cmp	r3, #0
 800b836:	d007      	beq.n	800b848 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b83c:	f043 0220 	orr.w	r2, r3, #32
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800b844:	2303      	movs	r3, #3
 800b846:	e000      	b.n	800b84a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800b848:	2300      	movs	r3, #0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b086      	sub	sp, #24
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
 800b85a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d101      	bne.n	800b866 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b862:	2301      	movs	r3, #1
 800b864:	e093      	b.n	800b98e <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b86c:	b2db      	uxtb	r3, r3
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d106      	bne.n	800b880 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2200      	movs	r2, #0
 800b876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f7fd fa76 	bl	8008d6c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2202      	movs	r2, #2
 800b884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	689b      	ldr	r3, [r3, #8]
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	6812      	ldr	r2, [r2, #0]
 800b892:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b896:	f023 0307 	bic.w	r3, r3, #7
 800b89a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	3304      	adds	r3, #4
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	4610      	mov	r0, r2
 800b8a8:	f000 f904 	bl	800bab4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	699b      	ldr	r3, [r3, #24]
 800b8ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	6a1b      	ldr	r3, [r3, #32]
 800b8c2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	697a      	ldr	r2, [r7, #20]
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b8d4:	f023 0303 	bic.w	r3, r3, #3
 800b8d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	689a      	ldr	r2, [r3, #8]
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	699b      	ldr	r3, [r3, #24]
 800b8e2:	021b      	lsls	r3, r3, #8
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	693a      	ldr	r2, [r7, #16]
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800b8f2:	f023 030c 	bic.w	r3, r3, #12
 800b8f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b8fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	68da      	ldr	r2, [r3, #12]
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	69db      	ldr	r3, [r3, #28]
 800b90c:	021b      	lsls	r3, r3, #8
 800b90e:	4313      	orrs	r3, r2
 800b910:	693a      	ldr	r2, [r7, #16]
 800b912:	4313      	orrs	r3, r2
 800b914:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	691b      	ldr	r3, [r3, #16]
 800b91a:	011a      	lsls	r2, r3, #4
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	6a1b      	ldr	r3, [r3, #32]
 800b920:	031b      	lsls	r3, r3, #12
 800b922:	4313      	orrs	r3, r2
 800b924:	693a      	ldr	r2, [r7, #16]
 800b926:	4313      	orrs	r3, r2
 800b928:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b930:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	685a      	ldr	r2, [r3, #4]
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	695b      	ldr	r3, [r3, #20]
 800b93a:	011b      	lsls	r3, r3, #4
 800b93c:	4313      	orrs	r3, r2
 800b93e:	68fa      	ldr	r2, [r7, #12]
 800b940:	4313      	orrs	r3, r2
 800b942:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	697a      	ldr	r2, [r7, #20]
 800b94a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	693a      	ldr	r2, [r7, #16]
 800b952:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	68fa      	ldr	r2, [r7, #12]
 800b95a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2201      	movs	r2, #1
 800b960:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2201      	movs	r2, #1
 800b968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2201      	movs	r2, #1
 800b970:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2201      	movs	r2, #1
 800b978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2201      	movs	r2, #1
 800b988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b98c:	2300      	movs	r3, #0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3718      	adds	r7, #24
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}

0800b996 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b996:	b580      	push	{r7, lr}
 800b998:	b084      	sub	sp, #16
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
 800b99e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b9a6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b9ae:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b9b6:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b9be:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d110      	bne.n	800b9e8 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b9c6:	7bfb      	ldrb	r3, [r7, #15]
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d102      	bne.n	800b9d2 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b9cc:	7b7b      	ldrb	r3, [r7, #13]
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d001      	beq.n	800b9d6 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	e069      	b.n	800baaa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2202      	movs	r2, #2
 800b9da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2202      	movs	r2, #2
 800b9e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b9e6:	e031      	b.n	800ba4c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	2b04      	cmp	r3, #4
 800b9ec:	d110      	bne.n	800ba10 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b9ee:	7bbb      	ldrb	r3, [r7, #14]
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d102      	bne.n	800b9fa <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b9f4:	7b3b      	ldrb	r3, [r7, #12]
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d001      	beq.n	800b9fe <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e055      	b.n	800baaa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2202      	movs	r2, #2
 800ba02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2202      	movs	r2, #2
 800ba0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ba0e:	e01d      	b.n	800ba4c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ba10:	7bfb      	ldrb	r3, [r7, #15]
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d108      	bne.n	800ba28 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ba16:	7bbb      	ldrb	r3, [r7, #14]
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d105      	bne.n	800ba28 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ba1c:	7b7b      	ldrb	r3, [r7, #13]
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d102      	bne.n	800ba28 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ba22:	7b3b      	ldrb	r3, [r7, #12]
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d001      	beq.n	800ba2c <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800ba28:	2301      	movs	r3, #1
 800ba2a:	e03e      	b.n	800baaa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2202      	movs	r2, #2
 800ba30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2202      	movs	r2, #2
 800ba38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2202      	movs	r2, #2
 800ba40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2202      	movs	r2, #2
 800ba48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d003      	beq.n	800ba5a <HAL_TIM_Encoder_Start+0xc4>
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	2b04      	cmp	r3, #4
 800ba56:	d008      	beq.n	800ba6a <HAL_TIM_Encoder_Start+0xd4>
 800ba58:	e00f      	b.n	800ba7a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	2201      	movs	r2, #1
 800ba60:	2100      	movs	r1, #0
 800ba62:	4618      	mov	r0, r3
 800ba64:	f000 f894 	bl	800bb90 <TIM_CCxChannelCmd>
      break;
 800ba68:	e016      	b.n	800ba98 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2201      	movs	r2, #1
 800ba70:	2104      	movs	r1, #4
 800ba72:	4618      	mov	r0, r3
 800ba74:	f000 f88c 	bl	800bb90 <TIM_CCxChannelCmd>
      break;
 800ba78:	e00e      	b.n	800ba98 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	2201      	movs	r2, #1
 800ba80:	2100      	movs	r1, #0
 800ba82:	4618      	mov	r0, r3
 800ba84:	f000 f884 	bl	800bb90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	2104      	movs	r1, #4
 800ba90:	4618      	mov	r0, r3
 800ba92:	f000 f87d 	bl	800bb90 <TIM_CCxChannelCmd>
      break;
 800ba96:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f042 0201 	orr.w	r2, r2, #1
 800baa6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
	...

0800bab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	4a2f      	ldr	r2, [pc, #188]	@ (800bb84 <TIM_Base_SetConfig+0xd0>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d00b      	beq.n	800bae4 <TIM_Base_SetConfig+0x30>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bad2:	d007      	beq.n	800bae4 <TIM_Base_SetConfig+0x30>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	4a2c      	ldr	r2, [pc, #176]	@ (800bb88 <TIM_Base_SetConfig+0xd4>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d003      	beq.n	800bae4 <TIM_Base_SetConfig+0x30>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	4a2b      	ldr	r2, [pc, #172]	@ (800bb8c <TIM_Base_SetConfig+0xd8>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d108      	bne.n	800baf6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800baea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	68fa      	ldr	r2, [r7, #12]
 800baf2:	4313      	orrs	r3, r2
 800baf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	4a22      	ldr	r2, [pc, #136]	@ (800bb84 <TIM_Base_SetConfig+0xd0>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d00b      	beq.n	800bb16 <TIM_Base_SetConfig+0x62>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb04:	d007      	beq.n	800bb16 <TIM_Base_SetConfig+0x62>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4a1f      	ldr	r2, [pc, #124]	@ (800bb88 <TIM_Base_SetConfig+0xd4>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d003      	beq.n	800bb16 <TIM_Base_SetConfig+0x62>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	4a1e      	ldr	r2, [pc, #120]	@ (800bb8c <TIM_Base_SetConfig+0xd8>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d108      	bne.n	800bb28 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	68fa      	ldr	r2, [r7, #12]
 800bb24:	4313      	orrs	r3, r2
 800bb26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	695b      	ldr	r3, [r3, #20]
 800bb32:	4313      	orrs	r3, r2
 800bb34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	689a      	ldr	r2, [r3, #8]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	4a0d      	ldr	r2, [pc, #52]	@ (800bb84 <TIM_Base_SetConfig+0xd0>)
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d103      	bne.n	800bb5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	691a      	ldr	r2, [r3, #16]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2201      	movs	r2, #1
 800bb60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	691b      	ldr	r3, [r3, #16]
 800bb66:	f003 0301 	and.w	r3, r3, #1
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d005      	beq.n	800bb7a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	f023 0201 	bic.w	r2, r3, #1
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	611a      	str	r2, [r3, #16]
  }
}
 800bb7a:	bf00      	nop
 800bb7c:	3714      	adds	r7, #20
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bc80      	pop	{r7}
 800bb82:	4770      	bx	lr
 800bb84:	40012c00 	.word	0x40012c00
 800bb88:	40000400 	.word	0x40000400
 800bb8c:	40000800 	.word	0x40000800

0800bb90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b087      	sub	sp, #28
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	f003 031f 	and.w	r3, r3, #31
 800bba2:	2201      	movs	r2, #1
 800bba4:	fa02 f303 	lsl.w	r3, r2, r3
 800bba8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	6a1a      	ldr	r2, [r3, #32]
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	43db      	mvns	r3, r3
 800bbb2:	401a      	ands	r2, r3
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6a1a      	ldr	r2, [r3, #32]
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	f003 031f 	and.w	r3, r3, #31
 800bbc2:	6879      	ldr	r1, [r7, #4]
 800bbc4:	fa01 f303 	lsl.w	r3, r1, r3
 800bbc8:	431a      	orrs	r2, r3
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	621a      	str	r2, [r3, #32]
}
 800bbce:	bf00      	nop
 800bbd0:	371c      	adds	r7, #28
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bc80      	pop	{r7}
 800bbd6:	4770      	bx	lr

0800bbd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b085      	sub	sp, #20
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d101      	bne.n	800bbf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bbec:	2302      	movs	r3, #2
 800bbee:	e046      	b.n	800bc7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2202      	movs	r2, #2
 800bbfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	68fa      	ldr	r2, [r7, #12]
 800bc28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a16      	ldr	r2, [pc, #88]	@ (800bc88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d00e      	beq.n	800bc52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc3c:	d009      	beq.n	800bc52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4a12      	ldr	r2, [pc, #72]	@ (800bc8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d004      	beq.n	800bc52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4a10      	ldr	r2, [pc, #64]	@ (800bc90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d10c      	bne.n	800bc6c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	68ba      	ldr	r2, [r7, #8]
 800bc60:	4313      	orrs	r3, r2
 800bc62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	68ba      	ldr	r2, [r7, #8]
 800bc6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2200      	movs	r2, #0
 800bc78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bc7c:	2300      	movs	r3, #0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3714      	adds	r7, #20
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bc80      	pop	{r7}
 800bc86:	4770      	bx	lr
 800bc88:	40012c00 	.word	0x40012c00
 800bc8c:	40000400 	.word	0x40000400
 800bc90:	40000800 	.word	0x40000800

0800bc94 <rand>:
 800bc94:	4b16      	ldr	r3, [pc, #88]	@ (800bcf0 <rand+0x5c>)
 800bc96:	b510      	push	{r4, lr}
 800bc98:	681c      	ldr	r4, [r3, #0]
 800bc9a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800bc9c:	b9b3      	cbnz	r3, 800bccc <rand+0x38>
 800bc9e:	2018      	movs	r0, #24
 800bca0:	f000 fa60 	bl	800c164 <malloc>
 800bca4:	4602      	mov	r2, r0
 800bca6:	6320      	str	r0, [r4, #48]	@ 0x30
 800bca8:	b920      	cbnz	r0, 800bcb4 <rand+0x20>
 800bcaa:	2152      	movs	r1, #82	@ 0x52
 800bcac:	4b11      	ldr	r3, [pc, #68]	@ (800bcf4 <rand+0x60>)
 800bcae:	4812      	ldr	r0, [pc, #72]	@ (800bcf8 <rand+0x64>)
 800bcb0:	f000 f9f2 	bl	800c098 <__assert_func>
 800bcb4:	4911      	ldr	r1, [pc, #68]	@ (800bcfc <rand+0x68>)
 800bcb6:	4b12      	ldr	r3, [pc, #72]	@ (800bd00 <rand+0x6c>)
 800bcb8:	e9c0 1300 	strd	r1, r3, [r0]
 800bcbc:	4b11      	ldr	r3, [pc, #68]	@ (800bd04 <rand+0x70>)
 800bcbe:	2100      	movs	r1, #0
 800bcc0:	6083      	str	r3, [r0, #8]
 800bcc2:	230b      	movs	r3, #11
 800bcc4:	8183      	strh	r3, [r0, #12]
 800bcc6:	2001      	movs	r0, #1
 800bcc8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800bccc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bcce:	480e      	ldr	r0, [pc, #56]	@ (800bd08 <rand+0x74>)
 800bcd0:	690b      	ldr	r3, [r1, #16]
 800bcd2:	694c      	ldr	r4, [r1, #20]
 800bcd4:	4358      	muls	r0, r3
 800bcd6:	4a0d      	ldr	r2, [pc, #52]	@ (800bd0c <rand+0x78>)
 800bcd8:	fb02 0004 	mla	r0, r2, r4, r0
 800bcdc:	fba3 3202 	umull	r3, r2, r3, r2
 800bce0:	3301      	adds	r3, #1
 800bce2:	eb40 0002 	adc.w	r0, r0, r2
 800bce6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800bcea:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800bcee:	bd10      	pop	{r4, pc}
 800bcf0:	2000046c 	.word	0x2000046c
 800bcf4:	0800eb8e 	.word	0x0800eb8e
 800bcf8:	0800eba5 	.word	0x0800eba5
 800bcfc:	abcd330e 	.word	0xabcd330e
 800bd00:	e66d1234 	.word	0xe66d1234
 800bd04:	0005deec 	.word	0x0005deec
 800bd08:	5851f42d 	.word	0x5851f42d
 800bd0c:	4c957f2d 	.word	0x4c957f2d

0800bd10 <std>:
 800bd10:	2300      	movs	r3, #0
 800bd12:	b510      	push	{r4, lr}
 800bd14:	4604      	mov	r4, r0
 800bd16:	e9c0 3300 	strd	r3, r3, [r0]
 800bd1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd1e:	6083      	str	r3, [r0, #8]
 800bd20:	8181      	strh	r1, [r0, #12]
 800bd22:	6643      	str	r3, [r0, #100]	@ 0x64
 800bd24:	81c2      	strh	r2, [r0, #14]
 800bd26:	6183      	str	r3, [r0, #24]
 800bd28:	4619      	mov	r1, r3
 800bd2a:	2208      	movs	r2, #8
 800bd2c:	305c      	adds	r0, #92	@ 0x5c
 800bd2e:	f000 f916 	bl	800bf5e <memset>
 800bd32:	4b0d      	ldr	r3, [pc, #52]	@ (800bd68 <std+0x58>)
 800bd34:	6224      	str	r4, [r4, #32]
 800bd36:	6263      	str	r3, [r4, #36]	@ 0x24
 800bd38:	4b0c      	ldr	r3, [pc, #48]	@ (800bd6c <std+0x5c>)
 800bd3a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bd3c:	4b0c      	ldr	r3, [pc, #48]	@ (800bd70 <std+0x60>)
 800bd3e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bd40:	4b0c      	ldr	r3, [pc, #48]	@ (800bd74 <std+0x64>)
 800bd42:	6323      	str	r3, [r4, #48]	@ 0x30
 800bd44:	4b0c      	ldr	r3, [pc, #48]	@ (800bd78 <std+0x68>)
 800bd46:	429c      	cmp	r4, r3
 800bd48:	d006      	beq.n	800bd58 <std+0x48>
 800bd4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bd4e:	4294      	cmp	r4, r2
 800bd50:	d002      	beq.n	800bd58 <std+0x48>
 800bd52:	33d0      	adds	r3, #208	@ 0xd0
 800bd54:	429c      	cmp	r4, r3
 800bd56:	d105      	bne.n	800bd64 <std+0x54>
 800bd58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd60:	f000 b988 	b.w	800c074 <__retarget_lock_init_recursive>
 800bd64:	bd10      	pop	{r4, pc}
 800bd66:	bf00      	nop
 800bd68:	0800bed9 	.word	0x0800bed9
 800bd6c:	0800befb 	.word	0x0800befb
 800bd70:	0800bf33 	.word	0x0800bf33
 800bd74:	0800bf57 	.word	0x0800bf57
 800bd78:	200044a4 	.word	0x200044a4

0800bd7c <stdio_exit_handler>:
 800bd7c:	4a02      	ldr	r2, [pc, #8]	@ (800bd88 <stdio_exit_handler+0xc>)
 800bd7e:	4903      	ldr	r1, [pc, #12]	@ (800bd8c <stdio_exit_handler+0x10>)
 800bd80:	4803      	ldr	r0, [pc, #12]	@ (800bd90 <stdio_exit_handler+0x14>)
 800bd82:	f000 b869 	b.w	800be58 <_fwalk_sglue>
 800bd86:	bf00      	nop
 800bd88:	20000460 	.word	0x20000460
 800bd8c:	0800c9a1 	.word	0x0800c9a1
 800bd90:	20000470 	.word	0x20000470

0800bd94 <cleanup_stdio>:
 800bd94:	6841      	ldr	r1, [r0, #4]
 800bd96:	4b0c      	ldr	r3, [pc, #48]	@ (800bdc8 <cleanup_stdio+0x34>)
 800bd98:	b510      	push	{r4, lr}
 800bd9a:	4299      	cmp	r1, r3
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	d001      	beq.n	800bda4 <cleanup_stdio+0x10>
 800bda0:	f000 fdfe 	bl	800c9a0 <_fflush_r>
 800bda4:	68a1      	ldr	r1, [r4, #8]
 800bda6:	4b09      	ldr	r3, [pc, #36]	@ (800bdcc <cleanup_stdio+0x38>)
 800bda8:	4299      	cmp	r1, r3
 800bdaa:	d002      	beq.n	800bdb2 <cleanup_stdio+0x1e>
 800bdac:	4620      	mov	r0, r4
 800bdae:	f000 fdf7 	bl	800c9a0 <_fflush_r>
 800bdb2:	68e1      	ldr	r1, [r4, #12]
 800bdb4:	4b06      	ldr	r3, [pc, #24]	@ (800bdd0 <cleanup_stdio+0x3c>)
 800bdb6:	4299      	cmp	r1, r3
 800bdb8:	d004      	beq.n	800bdc4 <cleanup_stdio+0x30>
 800bdba:	4620      	mov	r0, r4
 800bdbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdc0:	f000 bdee 	b.w	800c9a0 <_fflush_r>
 800bdc4:	bd10      	pop	{r4, pc}
 800bdc6:	bf00      	nop
 800bdc8:	200044a4 	.word	0x200044a4
 800bdcc:	2000450c 	.word	0x2000450c
 800bdd0:	20004574 	.word	0x20004574

0800bdd4 <global_stdio_init.part.0>:
 800bdd4:	b510      	push	{r4, lr}
 800bdd6:	4b0b      	ldr	r3, [pc, #44]	@ (800be04 <global_stdio_init.part.0+0x30>)
 800bdd8:	4c0b      	ldr	r4, [pc, #44]	@ (800be08 <global_stdio_init.part.0+0x34>)
 800bdda:	4a0c      	ldr	r2, [pc, #48]	@ (800be0c <global_stdio_init.part.0+0x38>)
 800bddc:	4620      	mov	r0, r4
 800bdde:	601a      	str	r2, [r3, #0]
 800bde0:	2104      	movs	r1, #4
 800bde2:	2200      	movs	r2, #0
 800bde4:	f7ff ff94 	bl	800bd10 <std>
 800bde8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bdec:	2201      	movs	r2, #1
 800bdee:	2109      	movs	r1, #9
 800bdf0:	f7ff ff8e 	bl	800bd10 <std>
 800bdf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bdf8:	2202      	movs	r2, #2
 800bdfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdfe:	2112      	movs	r1, #18
 800be00:	f7ff bf86 	b.w	800bd10 <std>
 800be04:	200045dc 	.word	0x200045dc
 800be08:	200044a4 	.word	0x200044a4
 800be0c:	0800bd7d 	.word	0x0800bd7d

0800be10 <__sfp_lock_acquire>:
 800be10:	4801      	ldr	r0, [pc, #4]	@ (800be18 <__sfp_lock_acquire+0x8>)
 800be12:	f000 b930 	b.w	800c076 <__retarget_lock_acquire_recursive>
 800be16:	bf00      	nop
 800be18:	200045e5 	.word	0x200045e5

0800be1c <__sfp_lock_release>:
 800be1c:	4801      	ldr	r0, [pc, #4]	@ (800be24 <__sfp_lock_release+0x8>)
 800be1e:	f000 b92b 	b.w	800c078 <__retarget_lock_release_recursive>
 800be22:	bf00      	nop
 800be24:	200045e5 	.word	0x200045e5

0800be28 <__sinit>:
 800be28:	b510      	push	{r4, lr}
 800be2a:	4604      	mov	r4, r0
 800be2c:	f7ff fff0 	bl	800be10 <__sfp_lock_acquire>
 800be30:	6a23      	ldr	r3, [r4, #32]
 800be32:	b11b      	cbz	r3, 800be3c <__sinit+0x14>
 800be34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be38:	f7ff bff0 	b.w	800be1c <__sfp_lock_release>
 800be3c:	4b04      	ldr	r3, [pc, #16]	@ (800be50 <__sinit+0x28>)
 800be3e:	6223      	str	r3, [r4, #32]
 800be40:	4b04      	ldr	r3, [pc, #16]	@ (800be54 <__sinit+0x2c>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d1f5      	bne.n	800be34 <__sinit+0xc>
 800be48:	f7ff ffc4 	bl	800bdd4 <global_stdio_init.part.0>
 800be4c:	e7f2      	b.n	800be34 <__sinit+0xc>
 800be4e:	bf00      	nop
 800be50:	0800bd95 	.word	0x0800bd95
 800be54:	200045dc 	.word	0x200045dc

0800be58 <_fwalk_sglue>:
 800be58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be5c:	4607      	mov	r7, r0
 800be5e:	4688      	mov	r8, r1
 800be60:	4614      	mov	r4, r2
 800be62:	2600      	movs	r6, #0
 800be64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be68:	f1b9 0901 	subs.w	r9, r9, #1
 800be6c:	d505      	bpl.n	800be7a <_fwalk_sglue+0x22>
 800be6e:	6824      	ldr	r4, [r4, #0]
 800be70:	2c00      	cmp	r4, #0
 800be72:	d1f7      	bne.n	800be64 <_fwalk_sglue+0xc>
 800be74:	4630      	mov	r0, r6
 800be76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be7a:	89ab      	ldrh	r3, [r5, #12]
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d907      	bls.n	800be90 <_fwalk_sglue+0x38>
 800be80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be84:	3301      	adds	r3, #1
 800be86:	d003      	beq.n	800be90 <_fwalk_sglue+0x38>
 800be88:	4629      	mov	r1, r5
 800be8a:	4638      	mov	r0, r7
 800be8c:	47c0      	blx	r8
 800be8e:	4306      	orrs	r6, r0
 800be90:	3568      	adds	r5, #104	@ 0x68
 800be92:	e7e9      	b.n	800be68 <_fwalk_sglue+0x10>

0800be94 <siprintf>:
 800be94:	b40e      	push	{r1, r2, r3}
 800be96:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800be9a:	b510      	push	{r4, lr}
 800be9c:	2400      	movs	r4, #0
 800be9e:	b09d      	sub	sp, #116	@ 0x74
 800bea0:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bea2:	9002      	str	r0, [sp, #8]
 800bea4:	9006      	str	r0, [sp, #24]
 800bea6:	9107      	str	r1, [sp, #28]
 800bea8:	9104      	str	r1, [sp, #16]
 800beaa:	4809      	ldr	r0, [pc, #36]	@ (800bed0 <siprintf+0x3c>)
 800beac:	4909      	ldr	r1, [pc, #36]	@ (800bed4 <siprintf+0x40>)
 800beae:	f853 2b04 	ldr.w	r2, [r3], #4
 800beb2:	9105      	str	r1, [sp, #20]
 800beb4:	6800      	ldr	r0, [r0, #0]
 800beb6:	a902      	add	r1, sp, #8
 800beb8:	9301      	str	r3, [sp, #4]
 800beba:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bebc:	f000 fa64 	bl	800c388 <_svfiprintf_r>
 800bec0:	9b02      	ldr	r3, [sp, #8]
 800bec2:	701c      	strb	r4, [r3, #0]
 800bec4:	b01d      	add	sp, #116	@ 0x74
 800bec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800beca:	b003      	add	sp, #12
 800becc:	4770      	bx	lr
 800bece:	bf00      	nop
 800bed0:	2000046c 	.word	0x2000046c
 800bed4:	ffff0208 	.word	0xffff0208

0800bed8 <__sread>:
 800bed8:	b510      	push	{r4, lr}
 800beda:	460c      	mov	r4, r1
 800bedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bee0:	f000 f87a 	bl	800bfd8 <_read_r>
 800bee4:	2800      	cmp	r0, #0
 800bee6:	bfab      	itete	ge
 800bee8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800beea:	89a3      	ldrhlt	r3, [r4, #12]
 800beec:	181b      	addge	r3, r3, r0
 800beee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bef2:	bfac      	ite	ge
 800bef4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bef6:	81a3      	strhlt	r3, [r4, #12]
 800bef8:	bd10      	pop	{r4, pc}

0800befa <__swrite>:
 800befa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800befe:	461f      	mov	r7, r3
 800bf00:	898b      	ldrh	r3, [r1, #12]
 800bf02:	4605      	mov	r5, r0
 800bf04:	05db      	lsls	r3, r3, #23
 800bf06:	460c      	mov	r4, r1
 800bf08:	4616      	mov	r6, r2
 800bf0a:	d505      	bpl.n	800bf18 <__swrite+0x1e>
 800bf0c:	2302      	movs	r3, #2
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf14:	f000 f84e 	bl	800bfb4 <_lseek_r>
 800bf18:	89a3      	ldrh	r3, [r4, #12]
 800bf1a:	4632      	mov	r2, r6
 800bf1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf20:	81a3      	strh	r3, [r4, #12]
 800bf22:	4628      	mov	r0, r5
 800bf24:	463b      	mov	r3, r7
 800bf26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf2e:	f000 b865 	b.w	800bffc <_write_r>

0800bf32 <__sseek>:
 800bf32:	b510      	push	{r4, lr}
 800bf34:	460c      	mov	r4, r1
 800bf36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf3a:	f000 f83b 	bl	800bfb4 <_lseek_r>
 800bf3e:	1c43      	adds	r3, r0, #1
 800bf40:	89a3      	ldrh	r3, [r4, #12]
 800bf42:	bf15      	itete	ne
 800bf44:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bf46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bf4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bf4e:	81a3      	strheq	r3, [r4, #12]
 800bf50:	bf18      	it	ne
 800bf52:	81a3      	strhne	r3, [r4, #12]
 800bf54:	bd10      	pop	{r4, pc}

0800bf56 <__sclose>:
 800bf56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf5a:	f000 b81b 	b.w	800bf94 <_close_r>

0800bf5e <memset>:
 800bf5e:	4603      	mov	r3, r0
 800bf60:	4402      	add	r2, r0
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d100      	bne.n	800bf68 <memset+0xa>
 800bf66:	4770      	bx	lr
 800bf68:	f803 1b01 	strb.w	r1, [r3], #1
 800bf6c:	e7f9      	b.n	800bf62 <memset+0x4>

0800bf6e <strncpy>:
 800bf6e:	4603      	mov	r3, r0
 800bf70:	b510      	push	{r4, lr}
 800bf72:	3901      	subs	r1, #1
 800bf74:	b132      	cbz	r2, 800bf84 <strncpy+0x16>
 800bf76:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bf7a:	3a01      	subs	r2, #1
 800bf7c:	f803 4b01 	strb.w	r4, [r3], #1
 800bf80:	2c00      	cmp	r4, #0
 800bf82:	d1f7      	bne.n	800bf74 <strncpy+0x6>
 800bf84:	2100      	movs	r1, #0
 800bf86:	441a      	add	r2, r3
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d100      	bne.n	800bf8e <strncpy+0x20>
 800bf8c:	bd10      	pop	{r4, pc}
 800bf8e:	f803 1b01 	strb.w	r1, [r3], #1
 800bf92:	e7f9      	b.n	800bf88 <strncpy+0x1a>

0800bf94 <_close_r>:
 800bf94:	b538      	push	{r3, r4, r5, lr}
 800bf96:	2300      	movs	r3, #0
 800bf98:	4d05      	ldr	r5, [pc, #20]	@ (800bfb0 <_close_r+0x1c>)
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	4608      	mov	r0, r1
 800bf9e:	602b      	str	r3, [r5, #0]
 800bfa0:	f7fc fe23 	bl	8008bea <_close>
 800bfa4:	1c43      	adds	r3, r0, #1
 800bfa6:	d102      	bne.n	800bfae <_close_r+0x1a>
 800bfa8:	682b      	ldr	r3, [r5, #0]
 800bfaa:	b103      	cbz	r3, 800bfae <_close_r+0x1a>
 800bfac:	6023      	str	r3, [r4, #0]
 800bfae:	bd38      	pop	{r3, r4, r5, pc}
 800bfb0:	200045e0 	.word	0x200045e0

0800bfb4 <_lseek_r>:
 800bfb4:	b538      	push	{r3, r4, r5, lr}
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	4608      	mov	r0, r1
 800bfba:	4611      	mov	r1, r2
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	4d05      	ldr	r5, [pc, #20]	@ (800bfd4 <_lseek_r+0x20>)
 800bfc0:	602a      	str	r2, [r5, #0]
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	f7fc fe35 	bl	8008c32 <_lseek>
 800bfc8:	1c43      	adds	r3, r0, #1
 800bfca:	d102      	bne.n	800bfd2 <_lseek_r+0x1e>
 800bfcc:	682b      	ldr	r3, [r5, #0]
 800bfce:	b103      	cbz	r3, 800bfd2 <_lseek_r+0x1e>
 800bfd0:	6023      	str	r3, [r4, #0]
 800bfd2:	bd38      	pop	{r3, r4, r5, pc}
 800bfd4:	200045e0 	.word	0x200045e0

0800bfd8 <_read_r>:
 800bfd8:	b538      	push	{r3, r4, r5, lr}
 800bfda:	4604      	mov	r4, r0
 800bfdc:	4608      	mov	r0, r1
 800bfde:	4611      	mov	r1, r2
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	4d05      	ldr	r5, [pc, #20]	@ (800bff8 <_read_r+0x20>)
 800bfe4:	602a      	str	r2, [r5, #0]
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	f7fc fdc6 	bl	8008b78 <_read>
 800bfec:	1c43      	adds	r3, r0, #1
 800bfee:	d102      	bne.n	800bff6 <_read_r+0x1e>
 800bff0:	682b      	ldr	r3, [r5, #0]
 800bff2:	b103      	cbz	r3, 800bff6 <_read_r+0x1e>
 800bff4:	6023      	str	r3, [r4, #0]
 800bff6:	bd38      	pop	{r3, r4, r5, pc}
 800bff8:	200045e0 	.word	0x200045e0

0800bffc <_write_r>:
 800bffc:	b538      	push	{r3, r4, r5, lr}
 800bffe:	4604      	mov	r4, r0
 800c000:	4608      	mov	r0, r1
 800c002:	4611      	mov	r1, r2
 800c004:	2200      	movs	r2, #0
 800c006:	4d05      	ldr	r5, [pc, #20]	@ (800c01c <_write_r+0x20>)
 800c008:	602a      	str	r2, [r5, #0]
 800c00a:	461a      	mov	r2, r3
 800c00c:	f7fc fdd1 	bl	8008bb2 <_write>
 800c010:	1c43      	adds	r3, r0, #1
 800c012:	d102      	bne.n	800c01a <_write_r+0x1e>
 800c014:	682b      	ldr	r3, [r5, #0]
 800c016:	b103      	cbz	r3, 800c01a <_write_r+0x1e>
 800c018:	6023      	str	r3, [r4, #0]
 800c01a:	bd38      	pop	{r3, r4, r5, pc}
 800c01c:	200045e0 	.word	0x200045e0

0800c020 <__errno>:
 800c020:	4b01      	ldr	r3, [pc, #4]	@ (800c028 <__errno+0x8>)
 800c022:	6818      	ldr	r0, [r3, #0]
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	2000046c 	.word	0x2000046c

0800c02c <__libc_init_array>:
 800c02c:	b570      	push	{r4, r5, r6, lr}
 800c02e:	2600      	movs	r6, #0
 800c030:	4d0c      	ldr	r5, [pc, #48]	@ (800c064 <__libc_init_array+0x38>)
 800c032:	4c0d      	ldr	r4, [pc, #52]	@ (800c068 <__libc_init_array+0x3c>)
 800c034:	1b64      	subs	r4, r4, r5
 800c036:	10a4      	asrs	r4, r4, #2
 800c038:	42a6      	cmp	r6, r4
 800c03a:	d109      	bne.n	800c050 <__libc_init_array+0x24>
 800c03c:	f002 fa56 	bl	800e4ec <_init>
 800c040:	2600      	movs	r6, #0
 800c042:	4d0a      	ldr	r5, [pc, #40]	@ (800c06c <__libc_init_array+0x40>)
 800c044:	4c0a      	ldr	r4, [pc, #40]	@ (800c070 <__libc_init_array+0x44>)
 800c046:	1b64      	subs	r4, r4, r5
 800c048:	10a4      	asrs	r4, r4, #2
 800c04a:	42a6      	cmp	r6, r4
 800c04c:	d105      	bne.n	800c05a <__libc_init_array+0x2e>
 800c04e:	bd70      	pop	{r4, r5, r6, pc}
 800c050:	f855 3b04 	ldr.w	r3, [r5], #4
 800c054:	4798      	blx	r3
 800c056:	3601      	adds	r6, #1
 800c058:	e7ee      	b.n	800c038 <__libc_init_array+0xc>
 800c05a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c05e:	4798      	blx	r3
 800c060:	3601      	adds	r6, #1
 800c062:	e7f2      	b.n	800c04a <__libc_init_array+0x1e>
 800c064:	0800f064 	.word	0x0800f064
 800c068:	0800f064 	.word	0x0800f064
 800c06c:	0800f064 	.word	0x0800f064
 800c070:	0800f068 	.word	0x0800f068

0800c074 <__retarget_lock_init_recursive>:
 800c074:	4770      	bx	lr

0800c076 <__retarget_lock_acquire_recursive>:
 800c076:	4770      	bx	lr

0800c078 <__retarget_lock_release_recursive>:
 800c078:	4770      	bx	lr

0800c07a <memcpy>:
 800c07a:	440a      	add	r2, r1
 800c07c:	4291      	cmp	r1, r2
 800c07e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c082:	d100      	bne.n	800c086 <memcpy+0xc>
 800c084:	4770      	bx	lr
 800c086:	b510      	push	{r4, lr}
 800c088:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c08c:	4291      	cmp	r1, r2
 800c08e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c092:	d1f9      	bne.n	800c088 <memcpy+0xe>
 800c094:	bd10      	pop	{r4, pc}
	...

0800c098 <__assert_func>:
 800c098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c09a:	4614      	mov	r4, r2
 800c09c:	461a      	mov	r2, r3
 800c09e:	4b09      	ldr	r3, [pc, #36]	@ (800c0c4 <__assert_func+0x2c>)
 800c0a0:	4605      	mov	r5, r0
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	68d8      	ldr	r0, [r3, #12]
 800c0a6:	b14c      	cbz	r4, 800c0bc <__assert_func+0x24>
 800c0a8:	4b07      	ldr	r3, [pc, #28]	@ (800c0c8 <__assert_func+0x30>)
 800c0aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c0ae:	9100      	str	r1, [sp, #0]
 800c0b0:	462b      	mov	r3, r5
 800c0b2:	4906      	ldr	r1, [pc, #24]	@ (800c0cc <__assert_func+0x34>)
 800c0b4:	f000 fc9c 	bl	800c9f0 <fiprintf>
 800c0b8:	f000 fce4 	bl	800ca84 <abort>
 800c0bc:	4b04      	ldr	r3, [pc, #16]	@ (800c0d0 <__assert_func+0x38>)
 800c0be:	461c      	mov	r4, r3
 800c0c0:	e7f3      	b.n	800c0aa <__assert_func+0x12>
 800c0c2:	bf00      	nop
 800c0c4:	2000046c 	.word	0x2000046c
 800c0c8:	0800ebfd 	.word	0x0800ebfd
 800c0cc:	0800ec0a 	.word	0x0800ec0a
 800c0d0:	0800ec38 	.word	0x0800ec38

0800c0d4 <_free_r>:
 800c0d4:	b538      	push	{r3, r4, r5, lr}
 800c0d6:	4605      	mov	r5, r0
 800c0d8:	2900      	cmp	r1, #0
 800c0da:	d040      	beq.n	800c15e <_free_r+0x8a>
 800c0dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0e0:	1f0c      	subs	r4, r1, #4
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	bfb8      	it	lt
 800c0e6:	18e4      	addlt	r4, r4, r3
 800c0e8:	f000 f8e6 	bl	800c2b8 <__malloc_lock>
 800c0ec:	4a1c      	ldr	r2, [pc, #112]	@ (800c160 <_free_r+0x8c>)
 800c0ee:	6813      	ldr	r3, [r2, #0]
 800c0f0:	b933      	cbnz	r3, 800c100 <_free_r+0x2c>
 800c0f2:	6063      	str	r3, [r4, #4]
 800c0f4:	6014      	str	r4, [r2, #0]
 800c0f6:	4628      	mov	r0, r5
 800c0f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0fc:	f000 b8e2 	b.w	800c2c4 <__malloc_unlock>
 800c100:	42a3      	cmp	r3, r4
 800c102:	d908      	bls.n	800c116 <_free_r+0x42>
 800c104:	6820      	ldr	r0, [r4, #0]
 800c106:	1821      	adds	r1, r4, r0
 800c108:	428b      	cmp	r3, r1
 800c10a:	bf01      	itttt	eq
 800c10c:	6819      	ldreq	r1, [r3, #0]
 800c10e:	685b      	ldreq	r3, [r3, #4]
 800c110:	1809      	addeq	r1, r1, r0
 800c112:	6021      	streq	r1, [r4, #0]
 800c114:	e7ed      	b.n	800c0f2 <_free_r+0x1e>
 800c116:	461a      	mov	r2, r3
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	b10b      	cbz	r3, 800c120 <_free_r+0x4c>
 800c11c:	42a3      	cmp	r3, r4
 800c11e:	d9fa      	bls.n	800c116 <_free_r+0x42>
 800c120:	6811      	ldr	r1, [r2, #0]
 800c122:	1850      	adds	r0, r2, r1
 800c124:	42a0      	cmp	r0, r4
 800c126:	d10b      	bne.n	800c140 <_free_r+0x6c>
 800c128:	6820      	ldr	r0, [r4, #0]
 800c12a:	4401      	add	r1, r0
 800c12c:	1850      	adds	r0, r2, r1
 800c12e:	4283      	cmp	r3, r0
 800c130:	6011      	str	r1, [r2, #0]
 800c132:	d1e0      	bne.n	800c0f6 <_free_r+0x22>
 800c134:	6818      	ldr	r0, [r3, #0]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	4408      	add	r0, r1
 800c13a:	6010      	str	r0, [r2, #0]
 800c13c:	6053      	str	r3, [r2, #4]
 800c13e:	e7da      	b.n	800c0f6 <_free_r+0x22>
 800c140:	d902      	bls.n	800c148 <_free_r+0x74>
 800c142:	230c      	movs	r3, #12
 800c144:	602b      	str	r3, [r5, #0]
 800c146:	e7d6      	b.n	800c0f6 <_free_r+0x22>
 800c148:	6820      	ldr	r0, [r4, #0]
 800c14a:	1821      	adds	r1, r4, r0
 800c14c:	428b      	cmp	r3, r1
 800c14e:	bf01      	itttt	eq
 800c150:	6819      	ldreq	r1, [r3, #0]
 800c152:	685b      	ldreq	r3, [r3, #4]
 800c154:	1809      	addeq	r1, r1, r0
 800c156:	6021      	streq	r1, [r4, #0]
 800c158:	6063      	str	r3, [r4, #4]
 800c15a:	6054      	str	r4, [r2, #4]
 800c15c:	e7cb      	b.n	800c0f6 <_free_r+0x22>
 800c15e:	bd38      	pop	{r3, r4, r5, pc}
 800c160:	200045ec 	.word	0x200045ec

0800c164 <malloc>:
 800c164:	4b02      	ldr	r3, [pc, #8]	@ (800c170 <malloc+0xc>)
 800c166:	4601      	mov	r1, r0
 800c168:	6818      	ldr	r0, [r3, #0]
 800c16a:	f000 b825 	b.w	800c1b8 <_malloc_r>
 800c16e:	bf00      	nop
 800c170:	2000046c 	.word	0x2000046c

0800c174 <sbrk_aligned>:
 800c174:	b570      	push	{r4, r5, r6, lr}
 800c176:	4e0f      	ldr	r6, [pc, #60]	@ (800c1b4 <sbrk_aligned+0x40>)
 800c178:	460c      	mov	r4, r1
 800c17a:	6831      	ldr	r1, [r6, #0]
 800c17c:	4605      	mov	r5, r0
 800c17e:	b911      	cbnz	r1, 800c186 <sbrk_aligned+0x12>
 800c180:	f000 fc62 	bl	800ca48 <_sbrk_r>
 800c184:	6030      	str	r0, [r6, #0]
 800c186:	4621      	mov	r1, r4
 800c188:	4628      	mov	r0, r5
 800c18a:	f000 fc5d 	bl	800ca48 <_sbrk_r>
 800c18e:	1c43      	adds	r3, r0, #1
 800c190:	d103      	bne.n	800c19a <sbrk_aligned+0x26>
 800c192:	f04f 34ff 	mov.w	r4, #4294967295
 800c196:	4620      	mov	r0, r4
 800c198:	bd70      	pop	{r4, r5, r6, pc}
 800c19a:	1cc4      	adds	r4, r0, #3
 800c19c:	f024 0403 	bic.w	r4, r4, #3
 800c1a0:	42a0      	cmp	r0, r4
 800c1a2:	d0f8      	beq.n	800c196 <sbrk_aligned+0x22>
 800c1a4:	1a21      	subs	r1, r4, r0
 800c1a6:	4628      	mov	r0, r5
 800c1a8:	f000 fc4e 	bl	800ca48 <_sbrk_r>
 800c1ac:	3001      	adds	r0, #1
 800c1ae:	d1f2      	bne.n	800c196 <sbrk_aligned+0x22>
 800c1b0:	e7ef      	b.n	800c192 <sbrk_aligned+0x1e>
 800c1b2:	bf00      	nop
 800c1b4:	200045e8 	.word	0x200045e8

0800c1b8 <_malloc_r>:
 800c1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1bc:	1ccd      	adds	r5, r1, #3
 800c1be:	f025 0503 	bic.w	r5, r5, #3
 800c1c2:	3508      	adds	r5, #8
 800c1c4:	2d0c      	cmp	r5, #12
 800c1c6:	bf38      	it	cc
 800c1c8:	250c      	movcc	r5, #12
 800c1ca:	2d00      	cmp	r5, #0
 800c1cc:	4606      	mov	r6, r0
 800c1ce:	db01      	blt.n	800c1d4 <_malloc_r+0x1c>
 800c1d0:	42a9      	cmp	r1, r5
 800c1d2:	d904      	bls.n	800c1de <_malloc_r+0x26>
 800c1d4:	230c      	movs	r3, #12
 800c1d6:	6033      	str	r3, [r6, #0]
 800c1d8:	2000      	movs	r0, #0
 800c1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c2b4 <_malloc_r+0xfc>
 800c1e2:	f000 f869 	bl	800c2b8 <__malloc_lock>
 800c1e6:	f8d8 3000 	ldr.w	r3, [r8]
 800c1ea:	461c      	mov	r4, r3
 800c1ec:	bb44      	cbnz	r4, 800c240 <_malloc_r+0x88>
 800c1ee:	4629      	mov	r1, r5
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	f7ff ffbf 	bl	800c174 <sbrk_aligned>
 800c1f6:	1c43      	adds	r3, r0, #1
 800c1f8:	4604      	mov	r4, r0
 800c1fa:	d158      	bne.n	800c2ae <_malloc_r+0xf6>
 800c1fc:	f8d8 4000 	ldr.w	r4, [r8]
 800c200:	4627      	mov	r7, r4
 800c202:	2f00      	cmp	r7, #0
 800c204:	d143      	bne.n	800c28e <_malloc_r+0xd6>
 800c206:	2c00      	cmp	r4, #0
 800c208:	d04b      	beq.n	800c2a2 <_malloc_r+0xea>
 800c20a:	6823      	ldr	r3, [r4, #0]
 800c20c:	4639      	mov	r1, r7
 800c20e:	4630      	mov	r0, r6
 800c210:	eb04 0903 	add.w	r9, r4, r3
 800c214:	f000 fc18 	bl	800ca48 <_sbrk_r>
 800c218:	4581      	cmp	r9, r0
 800c21a:	d142      	bne.n	800c2a2 <_malloc_r+0xea>
 800c21c:	6821      	ldr	r1, [r4, #0]
 800c21e:	4630      	mov	r0, r6
 800c220:	1a6d      	subs	r5, r5, r1
 800c222:	4629      	mov	r1, r5
 800c224:	f7ff ffa6 	bl	800c174 <sbrk_aligned>
 800c228:	3001      	adds	r0, #1
 800c22a:	d03a      	beq.n	800c2a2 <_malloc_r+0xea>
 800c22c:	6823      	ldr	r3, [r4, #0]
 800c22e:	442b      	add	r3, r5
 800c230:	6023      	str	r3, [r4, #0]
 800c232:	f8d8 3000 	ldr.w	r3, [r8]
 800c236:	685a      	ldr	r2, [r3, #4]
 800c238:	bb62      	cbnz	r2, 800c294 <_malloc_r+0xdc>
 800c23a:	f8c8 7000 	str.w	r7, [r8]
 800c23e:	e00f      	b.n	800c260 <_malloc_r+0xa8>
 800c240:	6822      	ldr	r2, [r4, #0]
 800c242:	1b52      	subs	r2, r2, r5
 800c244:	d420      	bmi.n	800c288 <_malloc_r+0xd0>
 800c246:	2a0b      	cmp	r2, #11
 800c248:	d917      	bls.n	800c27a <_malloc_r+0xc2>
 800c24a:	1961      	adds	r1, r4, r5
 800c24c:	42a3      	cmp	r3, r4
 800c24e:	6025      	str	r5, [r4, #0]
 800c250:	bf18      	it	ne
 800c252:	6059      	strne	r1, [r3, #4]
 800c254:	6863      	ldr	r3, [r4, #4]
 800c256:	bf08      	it	eq
 800c258:	f8c8 1000 	streq.w	r1, [r8]
 800c25c:	5162      	str	r2, [r4, r5]
 800c25e:	604b      	str	r3, [r1, #4]
 800c260:	4630      	mov	r0, r6
 800c262:	f000 f82f 	bl	800c2c4 <__malloc_unlock>
 800c266:	f104 000b 	add.w	r0, r4, #11
 800c26a:	1d23      	adds	r3, r4, #4
 800c26c:	f020 0007 	bic.w	r0, r0, #7
 800c270:	1ac2      	subs	r2, r0, r3
 800c272:	bf1c      	itt	ne
 800c274:	1a1b      	subne	r3, r3, r0
 800c276:	50a3      	strne	r3, [r4, r2]
 800c278:	e7af      	b.n	800c1da <_malloc_r+0x22>
 800c27a:	6862      	ldr	r2, [r4, #4]
 800c27c:	42a3      	cmp	r3, r4
 800c27e:	bf0c      	ite	eq
 800c280:	f8c8 2000 	streq.w	r2, [r8]
 800c284:	605a      	strne	r2, [r3, #4]
 800c286:	e7eb      	b.n	800c260 <_malloc_r+0xa8>
 800c288:	4623      	mov	r3, r4
 800c28a:	6864      	ldr	r4, [r4, #4]
 800c28c:	e7ae      	b.n	800c1ec <_malloc_r+0x34>
 800c28e:	463c      	mov	r4, r7
 800c290:	687f      	ldr	r7, [r7, #4]
 800c292:	e7b6      	b.n	800c202 <_malloc_r+0x4a>
 800c294:	461a      	mov	r2, r3
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	42a3      	cmp	r3, r4
 800c29a:	d1fb      	bne.n	800c294 <_malloc_r+0xdc>
 800c29c:	2300      	movs	r3, #0
 800c29e:	6053      	str	r3, [r2, #4]
 800c2a0:	e7de      	b.n	800c260 <_malloc_r+0xa8>
 800c2a2:	230c      	movs	r3, #12
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	6033      	str	r3, [r6, #0]
 800c2a8:	f000 f80c 	bl	800c2c4 <__malloc_unlock>
 800c2ac:	e794      	b.n	800c1d8 <_malloc_r+0x20>
 800c2ae:	6005      	str	r5, [r0, #0]
 800c2b0:	e7d6      	b.n	800c260 <_malloc_r+0xa8>
 800c2b2:	bf00      	nop
 800c2b4:	200045ec 	.word	0x200045ec

0800c2b8 <__malloc_lock>:
 800c2b8:	4801      	ldr	r0, [pc, #4]	@ (800c2c0 <__malloc_lock+0x8>)
 800c2ba:	f7ff bedc 	b.w	800c076 <__retarget_lock_acquire_recursive>
 800c2be:	bf00      	nop
 800c2c0:	200045e4 	.word	0x200045e4

0800c2c4 <__malloc_unlock>:
 800c2c4:	4801      	ldr	r0, [pc, #4]	@ (800c2cc <__malloc_unlock+0x8>)
 800c2c6:	f7ff bed7 	b.w	800c078 <__retarget_lock_release_recursive>
 800c2ca:	bf00      	nop
 800c2cc:	200045e4 	.word	0x200045e4

0800c2d0 <__ssputs_r>:
 800c2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d4:	461f      	mov	r7, r3
 800c2d6:	688e      	ldr	r6, [r1, #8]
 800c2d8:	4682      	mov	sl, r0
 800c2da:	42be      	cmp	r6, r7
 800c2dc:	460c      	mov	r4, r1
 800c2de:	4690      	mov	r8, r2
 800c2e0:	680b      	ldr	r3, [r1, #0]
 800c2e2:	d82d      	bhi.n	800c340 <__ssputs_r+0x70>
 800c2e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c2e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c2ec:	d026      	beq.n	800c33c <__ssputs_r+0x6c>
 800c2ee:	6965      	ldr	r5, [r4, #20]
 800c2f0:	6909      	ldr	r1, [r1, #16]
 800c2f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2f6:	eba3 0901 	sub.w	r9, r3, r1
 800c2fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2fe:	1c7b      	adds	r3, r7, #1
 800c300:	444b      	add	r3, r9
 800c302:	106d      	asrs	r5, r5, #1
 800c304:	429d      	cmp	r5, r3
 800c306:	bf38      	it	cc
 800c308:	461d      	movcc	r5, r3
 800c30a:	0553      	lsls	r3, r2, #21
 800c30c:	d527      	bpl.n	800c35e <__ssputs_r+0x8e>
 800c30e:	4629      	mov	r1, r5
 800c310:	f7ff ff52 	bl	800c1b8 <_malloc_r>
 800c314:	4606      	mov	r6, r0
 800c316:	b360      	cbz	r0, 800c372 <__ssputs_r+0xa2>
 800c318:	464a      	mov	r2, r9
 800c31a:	6921      	ldr	r1, [r4, #16]
 800c31c:	f7ff fead 	bl	800c07a <memcpy>
 800c320:	89a3      	ldrh	r3, [r4, #12]
 800c322:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c32a:	81a3      	strh	r3, [r4, #12]
 800c32c:	6126      	str	r6, [r4, #16]
 800c32e:	444e      	add	r6, r9
 800c330:	6026      	str	r6, [r4, #0]
 800c332:	463e      	mov	r6, r7
 800c334:	6165      	str	r5, [r4, #20]
 800c336:	eba5 0509 	sub.w	r5, r5, r9
 800c33a:	60a5      	str	r5, [r4, #8]
 800c33c:	42be      	cmp	r6, r7
 800c33e:	d900      	bls.n	800c342 <__ssputs_r+0x72>
 800c340:	463e      	mov	r6, r7
 800c342:	4632      	mov	r2, r6
 800c344:	4641      	mov	r1, r8
 800c346:	6820      	ldr	r0, [r4, #0]
 800c348:	f000 fb64 	bl	800ca14 <memmove>
 800c34c:	2000      	movs	r0, #0
 800c34e:	68a3      	ldr	r3, [r4, #8]
 800c350:	1b9b      	subs	r3, r3, r6
 800c352:	60a3      	str	r3, [r4, #8]
 800c354:	6823      	ldr	r3, [r4, #0]
 800c356:	4433      	add	r3, r6
 800c358:	6023      	str	r3, [r4, #0]
 800c35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c35e:	462a      	mov	r2, r5
 800c360:	f000 fb97 	bl	800ca92 <_realloc_r>
 800c364:	4606      	mov	r6, r0
 800c366:	2800      	cmp	r0, #0
 800c368:	d1e0      	bne.n	800c32c <__ssputs_r+0x5c>
 800c36a:	4650      	mov	r0, sl
 800c36c:	6921      	ldr	r1, [r4, #16]
 800c36e:	f7ff feb1 	bl	800c0d4 <_free_r>
 800c372:	230c      	movs	r3, #12
 800c374:	f8ca 3000 	str.w	r3, [sl]
 800c378:	89a3      	ldrh	r3, [r4, #12]
 800c37a:	f04f 30ff 	mov.w	r0, #4294967295
 800c37e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c382:	81a3      	strh	r3, [r4, #12]
 800c384:	e7e9      	b.n	800c35a <__ssputs_r+0x8a>
	...

0800c388 <_svfiprintf_r>:
 800c388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c38c:	4698      	mov	r8, r3
 800c38e:	898b      	ldrh	r3, [r1, #12]
 800c390:	4607      	mov	r7, r0
 800c392:	061b      	lsls	r3, r3, #24
 800c394:	460d      	mov	r5, r1
 800c396:	4614      	mov	r4, r2
 800c398:	b09d      	sub	sp, #116	@ 0x74
 800c39a:	d510      	bpl.n	800c3be <_svfiprintf_r+0x36>
 800c39c:	690b      	ldr	r3, [r1, #16]
 800c39e:	b973      	cbnz	r3, 800c3be <_svfiprintf_r+0x36>
 800c3a0:	2140      	movs	r1, #64	@ 0x40
 800c3a2:	f7ff ff09 	bl	800c1b8 <_malloc_r>
 800c3a6:	6028      	str	r0, [r5, #0]
 800c3a8:	6128      	str	r0, [r5, #16]
 800c3aa:	b930      	cbnz	r0, 800c3ba <_svfiprintf_r+0x32>
 800c3ac:	230c      	movs	r3, #12
 800c3ae:	603b      	str	r3, [r7, #0]
 800c3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b4:	b01d      	add	sp, #116	@ 0x74
 800c3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ba:	2340      	movs	r3, #64	@ 0x40
 800c3bc:	616b      	str	r3, [r5, #20]
 800c3be:	2300      	movs	r3, #0
 800c3c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3c2:	2320      	movs	r3, #32
 800c3c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c3c8:	2330      	movs	r3, #48	@ 0x30
 800c3ca:	f04f 0901 	mov.w	r9, #1
 800c3ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3d2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c56c <_svfiprintf_r+0x1e4>
 800c3d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c3da:	4623      	mov	r3, r4
 800c3dc:	469a      	mov	sl, r3
 800c3de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3e2:	b10a      	cbz	r2, 800c3e8 <_svfiprintf_r+0x60>
 800c3e4:	2a25      	cmp	r2, #37	@ 0x25
 800c3e6:	d1f9      	bne.n	800c3dc <_svfiprintf_r+0x54>
 800c3e8:	ebba 0b04 	subs.w	fp, sl, r4
 800c3ec:	d00b      	beq.n	800c406 <_svfiprintf_r+0x7e>
 800c3ee:	465b      	mov	r3, fp
 800c3f0:	4622      	mov	r2, r4
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	4638      	mov	r0, r7
 800c3f6:	f7ff ff6b 	bl	800c2d0 <__ssputs_r>
 800c3fa:	3001      	adds	r0, #1
 800c3fc:	f000 80a7 	beq.w	800c54e <_svfiprintf_r+0x1c6>
 800c400:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c402:	445a      	add	r2, fp
 800c404:	9209      	str	r2, [sp, #36]	@ 0x24
 800c406:	f89a 3000 	ldrb.w	r3, [sl]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	f000 809f 	beq.w	800c54e <_svfiprintf_r+0x1c6>
 800c410:	2300      	movs	r3, #0
 800c412:	f04f 32ff 	mov.w	r2, #4294967295
 800c416:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c41a:	f10a 0a01 	add.w	sl, sl, #1
 800c41e:	9304      	str	r3, [sp, #16]
 800c420:	9307      	str	r3, [sp, #28]
 800c422:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c426:	931a      	str	r3, [sp, #104]	@ 0x68
 800c428:	4654      	mov	r4, sl
 800c42a:	2205      	movs	r2, #5
 800c42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c430:	484e      	ldr	r0, [pc, #312]	@ (800c56c <_svfiprintf_r+0x1e4>)
 800c432:	f000 fb19 	bl	800ca68 <memchr>
 800c436:	9a04      	ldr	r2, [sp, #16]
 800c438:	b9d8      	cbnz	r0, 800c472 <_svfiprintf_r+0xea>
 800c43a:	06d0      	lsls	r0, r2, #27
 800c43c:	bf44      	itt	mi
 800c43e:	2320      	movmi	r3, #32
 800c440:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c444:	0711      	lsls	r1, r2, #28
 800c446:	bf44      	itt	mi
 800c448:	232b      	movmi	r3, #43	@ 0x2b
 800c44a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c44e:	f89a 3000 	ldrb.w	r3, [sl]
 800c452:	2b2a      	cmp	r3, #42	@ 0x2a
 800c454:	d015      	beq.n	800c482 <_svfiprintf_r+0xfa>
 800c456:	4654      	mov	r4, sl
 800c458:	2000      	movs	r0, #0
 800c45a:	f04f 0c0a 	mov.w	ip, #10
 800c45e:	9a07      	ldr	r2, [sp, #28]
 800c460:	4621      	mov	r1, r4
 800c462:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c466:	3b30      	subs	r3, #48	@ 0x30
 800c468:	2b09      	cmp	r3, #9
 800c46a:	d94b      	bls.n	800c504 <_svfiprintf_r+0x17c>
 800c46c:	b1b0      	cbz	r0, 800c49c <_svfiprintf_r+0x114>
 800c46e:	9207      	str	r2, [sp, #28]
 800c470:	e014      	b.n	800c49c <_svfiprintf_r+0x114>
 800c472:	eba0 0308 	sub.w	r3, r0, r8
 800c476:	fa09 f303 	lsl.w	r3, r9, r3
 800c47a:	4313      	orrs	r3, r2
 800c47c:	46a2      	mov	sl, r4
 800c47e:	9304      	str	r3, [sp, #16]
 800c480:	e7d2      	b.n	800c428 <_svfiprintf_r+0xa0>
 800c482:	9b03      	ldr	r3, [sp, #12]
 800c484:	1d19      	adds	r1, r3, #4
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	9103      	str	r1, [sp, #12]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	bfbb      	ittet	lt
 800c48e:	425b      	neglt	r3, r3
 800c490:	f042 0202 	orrlt.w	r2, r2, #2
 800c494:	9307      	strge	r3, [sp, #28]
 800c496:	9307      	strlt	r3, [sp, #28]
 800c498:	bfb8      	it	lt
 800c49a:	9204      	strlt	r2, [sp, #16]
 800c49c:	7823      	ldrb	r3, [r4, #0]
 800c49e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c4a0:	d10a      	bne.n	800c4b8 <_svfiprintf_r+0x130>
 800c4a2:	7863      	ldrb	r3, [r4, #1]
 800c4a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4a6:	d132      	bne.n	800c50e <_svfiprintf_r+0x186>
 800c4a8:	9b03      	ldr	r3, [sp, #12]
 800c4aa:	3402      	adds	r4, #2
 800c4ac:	1d1a      	adds	r2, r3, #4
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	9203      	str	r2, [sp, #12]
 800c4b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c4b6:	9305      	str	r3, [sp, #20]
 800c4b8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c570 <_svfiprintf_r+0x1e8>
 800c4bc:	2203      	movs	r2, #3
 800c4be:	4650      	mov	r0, sl
 800c4c0:	7821      	ldrb	r1, [r4, #0]
 800c4c2:	f000 fad1 	bl	800ca68 <memchr>
 800c4c6:	b138      	cbz	r0, 800c4d8 <_svfiprintf_r+0x150>
 800c4c8:	2240      	movs	r2, #64	@ 0x40
 800c4ca:	9b04      	ldr	r3, [sp, #16]
 800c4cc:	eba0 000a 	sub.w	r0, r0, sl
 800c4d0:	4082      	lsls	r2, r0
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	3401      	adds	r4, #1
 800c4d6:	9304      	str	r3, [sp, #16]
 800c4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4dc:	2206      	movs	r2, #6
 800c4de:	4825      	ldr	r0, [pc, #148]	@ (800c574 <_svfiprintf_r+0x1ec>)
 800c4e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c4e4:	f000 fac0 	bl	800ca68 <memchr>
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	d036      	beq.n	800c55a <_svfiprintf_r+0x1d2>
 800c4ec:	4b22      	ldr	r3, [pc, #136]	@ (800c578 <_svfiprintf_r+0x1f0>)
 800c4ee:	bb1b      	cbnz	r3, 800c538 <_svfiprintf_r+0x1b0>
 800c4f0:	9b03      	ldr	r3, [sp, #12]
 800c4f2:	3307      	adds	r3, #7
 800c4f4:	f023 0307 	bic.w	r3, r3, #7
 800c4f8:	3308      	adds	r3, #8
 800c4fa:	9303      	str	r3, [sp, #12]
 800c4fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4fe:	4433      	add	r3, r6
 800c500:	9309      	str	r3, [sp, #36]	@ 0x24
 800c502:	e76a      	b.n	800c3da <_svfiprintf_r+0x52>
 800c504:	460c      	mov	r4, r1
 800c506:	2001      	movs	r0, #1
 800c508:	fb0c 3202 	mla	r2, ip, r2, r3
 800c50c:	e7a8      	b.n	800c460 <_svfiprintf_r+0xd8>
 800c50e:	2300      	movs	r3, #0
 800c510:	f04f 0c0a 	mov.w	ip, #10
 800c514:	4619      	mov	r1, r3
 800c516:	3401      	adds	r4, #1
 800c518:	9305      	str	r3, [sp, #20]
 800c51a:	4620      	mov	r0, r4
 800c51c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c520:	3a30      	subs	r2, #48	@ 0x30
 800c522:	2a09      	cmp	r2, #9
 800c524:	d903      	bls.n	800c52e <_svfiprintf_r+0x1a6>
 800c526:	2b00      	cmp	r3, #0
 800c528:	d0c6      	beq.n	800c4b8 <_svfiprintf_r+0x130>
 800c52a:	9105      	str	r1, [sp, #20]
 800c52c:	e7c4      	b.n	800c4b8 <_svfiprintf_r+0x130>
 800c52e:	4604      	mov	r4, r0
 800c530:	2301      	movs	r3, #1
 800c532:	fb0c 2101 	mla	r1, ip, r1, r2
 800c536:	e7f0      	b.n	800c51a <_svfiprintf_r+0x192>
 800c538:	ab03      	add	r3, sp, #12
 800c53a:	9300      	str	r3, [sp, #0]
 800c53c:	462a      	mov	r2, r5
 800c53e:	4638      	mov	r0, r7
 800c540:	4b0e      	ldr	r3, [pc, #56]	@ (800c57c <_svfiprintf_r+0x1f4>)
 800c542:	a904      	add	r1, sp, #16
 800c544:	f3af 8000 	nop.w
 800c548:	1c42      	adds	r2, r0, #1
 800c54a:	4606      	mov	r6, r0
 800c54c:	d1d6      	bne.n	800c4fc <_svfiprintf_r+0x174>
 800c54e:	89ab      	ldrh	r3, [r5, #12]
 800c550:	065b      	lsls	r3, r3, #25
 800c552:	f53f af2d 	bmi.w	800c3b0 <_svfiprintf_r+0x28>
 800c556:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c558:	e72c      	b.n	800c3b4 <_svfiprintf_r+0x2c>
 800c55a:	ab03      	add	r3, sp, #12
 800c55c:	9300      	str	r3, [sp, #0]
 800c55e:	462a      	mov	r2, r5
 800c560:	4638      	mov	r0, r7
 800c562:	4b06      	ldr	r3, [pc, #24]	@ (800c57c <_svfiprintf_r+0x1f4>)
 800c564:	a904      	add	r1, sp, #16
 800c566:	f000 f87d 	bl	800c664 <_printf_i>
 800c56a:	e7ed      	b.n	800c548 <_svfiprintf_r+0x1c0>
 800c56c:	0800ec39 	.word	0x0800ec39
 800c570:	0800ec3f 	.word	0x0800ec3f
 800c574:	0800ec43 	.word	0x0800ec43
 800c578:	00000000 	.word	0x00000000
 800c57c:	0800c2d1 	.word	0x0800c2d1

0800c580 <_printf_common>:
 800c580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c584:	4616      	mov	r6, r2
 800c586:	4698      	mov	r8, r3
 800c588:	688a      	ldr	r2, [r1, #8]
 800c58a:	690b      	ldr	r3, [r1, #16]
 800c58c:	4607      	mov	r7, r0
 800c58e:	4293      	cmp	r3, r2
 800c590:	bfb8      	it	lt
 800c592:	4613      	movlt	r3, r2
 800c594:	6033      	str	r3, [r6, #0]
 800c596:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c59a:	460c      	mov	r4, r1
 800c59c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c5a0:	b10a      	cbz	r2, 800c5a6 <_printf_common+0x26>
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	6033      	str	r3, [r6, #0]
 800c5a6:	6823      	ldr	r3, [r4, #0]
 800c5a8:	0699      	lsls	r1, r3, #26
 800c5aa:	bf42      	ittt	mi
 800c5ac:	6833      	ldrmi	r3, [r6, #0]
 800c5ae:	3302      	addmi	r3, #2
 800c5b0:	6033      	strmi	r3, [r6, #0]
 800c5b2:	6825      	ldr	r5, [r4, #0]
 800c5b4:	f015 0506 	ands.w	r5, r5, #6
 800c5b8:	d106      	bne.n	800c5c8 <_printf_common+0x48>
 800c5ba:	f104 0a19 	add.w	sl, r4, #25
 800c5be:	68e3      	ldr	r3, [r4, #12]
 800c5c0:	6832      	ldr	r2, [r6, #0]
 800c5c2:	1a9b      	subs	r3, r3, r2
 800c5c4:	42ab      	cmp	r3, r5
 800c5c6:	dc2b      	bgt.n	800c620 <_printf_common+0xa0>
 800c5c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c5cc:	6822      	ldr	r2, [r4, #0]
 800c5ce:	3b00      	subs	r3, #0
 800c5d0:	bf18      	it	ne
 800c5d2:	2301      	movne	r3, #1
 800c5d4:	0692      	lsls	r2, r2, #26
 800c5d6:	d430      	bmi.n	800c63a <_printf_common+0xba>
 800c5d8:	4641      	mov	r1, r8
 800c5da:	4638      	mov	r0, r7
 800c5dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c5e0:	47c8      	blx	r9
 800c5e2:	3001      	adds	r0, #1
 800c5e4:	d023      	beq.n	800c62e <_printf_common+0xae>
 800c5e6:	6823      	ldr	r3, [r4, #0]
 800c5e8:	6922      	ldr	r2, [r4, #16]
 800c5ea:	f003 0306 	and.w	r3, r3, #6
 800c5ee:	2b04      	cmp	r3, #4
 800c5f0:	bf14      	ite	ne
 800c5f2:	2500      	movne	r5, #0
 800c5f4:	6833      	ldreq	r3, [r6, #0]
 800c5f6:	f04f 0600 	mov.w	r6, #0
 800c5fa:	bf08      	it	eq
 800c5fc:	68e5      	ldreq	r5, [r4, #12]
 800c5fe:	f104 041a 	add.w	r4, r4, #26
 800c602:	bf08      	it	eq
 800c604:	1aed      	subeq	r5, r5, r3
 800c606:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c60a:	bf08      	it	eq
 800c60c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c610:	4293      	cmp	r3, r2
 800c612:	bfc4      	itt	gt
 800c614:	1a9b      	subgt	r3, r3, r2
 800c616:	18ed      	addgt	r5, r5, r3
 800c618:	42b5      	cmp	r5, r6
 800c61a:	d11a      	bne.n	800c652 <_printf_common+0xd2>
 800c61c:	2000      	movs	r0, #0
 800c61e:	e008      	b.n	800c632 <_printf_common+0xb2>
 800c620:	2301      	movs	r3, #1
 800c622:	4652      	mov	r2, sl
 800c624:	4641      	mov	r1, r8
 800c626:	4638      	mov	r0, r7
 800c628:	47c8      	blx	r9
 800c62a:	3001      	adds	r0, #1
 800c62c:	d103      	bne.n	800c636 <_printf_common+0xb6>
 800c62e:	f04f 30ff 	mov.w	r0, #4294967295
 800c632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c636:	3501      	adds	r5, #1
 800c638:	e7c1      	b.n	800c5be <_printf_common+0x3e>
 800c63a:	2030      	movs	r0, #48	@ 0x30
 800c63c:	18e1      	adds	r1, r4, r3
 800c63e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c642:	1c5a      	adds	r2, r3, #1
 800c644:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c648:	4422      	add	r2, r4
 800c64a:	3302      	adds	r3, #2
 800c64c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c650:	e7c2      	b.n	800c5d8 <_printf_common+0x58>
 800c652:	2301      	movs	r3, #1
 800c654:	4622      	mov	r2, r4
 800c656:	4641      	mov	r1, r8
 800c658:	4638      	mov	r0, r7
 800c65a:	47c8      	blx	r9
 800c65c:	3001      	adds	r0, #1
 800c65e:	d0e6      	beq.n	800c62e <_printf_common+0xae>
 800c660:	3601      	adds	r6, #1
 800c662:	e7d9      	b.n	800c618 <_printf_common+0x98>

0800c664 <_printf_i>:
 800c664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c668:	7e0f      	ldrb	r7, [r1, #24]
 800c66a:	4691      	mov	r9, r2
 800c66c:	2f78      	cmp	r7, #120	@ 0x78
 800c66e:	4680      	mov	r8, r0
 800c670:	460c      	mov	r4, r1
 800c672:	469a      	mov	sl, r3
 800c674:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c676:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c67a:	d807      	bhi.n	800c68c <_printf_i+0x28>
 800c67c:	2f62      	cmp	r7, #98	@ 0x62
 800c67e:	d80a      	bhi.n	800c696 <_printf_i+0x32>
 800c680:	2f00      	cmp	r7, #0
 800c682:	f000 80d1 	beq.w	800c828 <_printf_i+0x1c4>
 800c686:	2f58      	cmp	r7, #88	@ 0x58
 800c688:	f000 80b8 	beq.w	800c7fc <_printf_i+0x198>
 800c68c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c690:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c694:	e03a      	b.n	800c70c <_printf_i+0xa8>
 800c696:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c69a:	2b15      	cmp	r3, #21
 800c69c:	d8f6      	bhi.n	800c68c <_printf_i+0x28>
 800c69e:	a101      	add	r1, pc, #4	@ (adr r1, 800c6a4 <_printf_i+0x40>)
 800c6a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c6a4:	0800c6fd 	.word	0x0800c6fd
 800c6a8:	0800c711 	.word	0x0800c711
 800c6ac:	0800c68d 	.word	0x0800c68d
 800c6b0:	0800c68d 	.word	0x0800c68d
 800c6b4:	0800c68d 	.word	0x0800c68d
 800c6b8:	0800c68d 	.word	0x0800c68d
 800c6bc:	0800c711 	.word	0x0800c711
 800c6c0:	0800c68d 	.word	0x0800c68d
 800c6c4:	0800c68d 	.word	0x0800c68d
 800c6c8:	0800c68d 	.word	0x0800c68d
 800c6cc:	0800c68d 	.word	0x0800c68d
 800c6d0:	0800c80f 	.word	0x0800c80f
 800c6d4:	0800c73b 	.word	0x0800c73b
 800c6d8:	0800c7c9 	.word	0x0800c7c9
 800c6dc:	0800c68d 	.word	0x0800c68d
 800c6e0:	0800c68d 	.word	0x0800c68d
 800c6e4:	0800c831 	.word	0x0800c831
 800c6e8:	0800c68d 	.word	0x0800c68d
 800c6ec:	0800c73b 	.word	0x0800c73b
 800c6f0:	0800c68d 	.word	0x0800c68d
 800c6f4:	0800c68d 	.word	0x0800c68d
 800c6f8:	0800c7d1 	.word	0x0800c7d1
 800c6fc:	6833      	ldr	r3, [r6, #0]
 800c6fe:	1d1a      	adds	r2, r3, #4
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	6032      	str	r2, [r6, #0]
 800c704:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c708:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c70c:	2301      	movs	r3, #1
 800c70e:	e09c      	b.n	800c84a <_printf_i+0x1e6>
 800c710:	6833      	ldr	r3, [r6, #0]
 800c712:	6820      	ldr	r0, [r4, #0]
 800c714:	1d19      	adds	r1, r3, #4
 800c716:	6031      	str	r1, [r6, #0]
 800c718:	0606      	lsls	r6, r0, #24
 800c71a:	d501      	bpl.n	800c720 <_printf_i+0xbc>
 800c71c:	681d      	ldr	r5, [r3, #0]
 800c71e:	e003      	b.n	800c728 <_printf_i+0xc4>
 800c720:	0645      	lsls	r5, r0, #25
 800c722:	d5fb      	bpl.n	800c71c <_printf_i+0xb8>
 800c724:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c728:	2d00      	cmp	r5, #0
 800c72a:	da03      	bge.n	800c734 <_printf_i+0xd0>
 800c72c:	232d      	movs	r3, #45	@ 0x2d
 800c72e:	426d      	negs	r5, r5
 800c730:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c734:	230a      	movs	r3, #10
 800c736:	4858      	ldr	r0, [pc, #352]	@ (800c898 <_printf_i+0x234>)
 800c738:	e011      	b.n	800c75e <_printf_i+0xfa>
 800c73a:	6821      	ldr	r1, [r4, #0]
 800c73c:	6833      	ldr	r3, [r6, #0]
 800c73e:	0608      	lsls	r0, r1, #24
 800c740:	f853 5b04 	ldr.w	r5, [r3], #4
 800c744:	d402      	bmi.n	800c74c <_printf_i+0xe8>
 800c746:	0649      	lsls	r1, r1, #25
 800c748:	bf48      	it	mi
 800c74a:	b2ad      	uxthmi	r5, r5
 800c74c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c74e:	6033      	str	r3, [r6, #0]
 800c750:	bf14      	ite	ne
 800c752:	230a      	movne	r3, #10
 800c754:	2308      	moveq	r3, #8
 800c756:	4850      	ldr	r0, [pc, #320]	@ (800c898 <_printf_i+0x234>)
 800c758:	2100      	movs	r1, #0
 800c75a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c75e:	6866      	ldr	r6, [r4, #4]
 800c760:	2e00      	cmp	r6, #0
 800c762:	60a6      	str	r6, [r4, #8]
 800c764:	db05      	blt.n	800c772 <_printf_i+0x10e>
 800c766:	6821      	ldr	r1, [r4, #0]
 800c768:	432e      	orrs	r6, r5
 800c76a:	f021 0104 	bic.w	r1, r1, #4
 800c76e:	6021      	str	r1, [r4, #0]
 800c770:	d04b      	beq.n	800c80a <_printf_i+0x1a6>
 800c772:	4616      	mov	r6, r2
 800c774:	fbb5 f1f3 	udiv	r1, r5, r3
 800c778:	fb03 5711 	mls	r7, r3, r1, r5
 800c77c:	5dc7      	ldrb	r7, [r0, r7]
 800c77e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c782:	462f      	mov	r7, r5
 800c784:	42bb      	cmp	r3, r7
 800c786:	460d      	mov	r5, r1
 800c788:	d9f4      	bls.n	800c774 <_printf_i+0x110>
 800c78a:	2b08      	cmp	r3, #8
 800c78c:	d10b      	bne.n	800c7a6 <_printf_i+0x142>
 800c78e:	6823      	ldr	r3, [r4, #0]
 800c790:	07df      	lsls	r7, r3, #31
 800c792:	d508      	bpl.n	800c7a6 <_printf_i+0x142>
 800c794:	6923      	ldr	r3, [r4, #16]
 800c796:	6861      	ldr	r1, [r4, #4]
 800c798:	4299      	cmp	r1, r3
 800c79a:	bfde      	ittt	le
 800c79c:	2330      	movle	r3, #48	@ 0x30
 800c79e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c7a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c7a6:	1b92      	subs	r2, r2, r6
 800c7a8:	6122      	str	r2, [r4, #16]
 800c7aa:	464b      	mov	r3, r9
 800c7ac:	4621      	mov	r1, r4
 800c7ae:	4640      	mov	r0, r8
 800c7b0:	f8cd a000 	str.w	sl, [sp]
 800c7b4:	aa03      	add	r2, sp, #12
 800c7b6:	f7ff fee3 	bl	800c580 <_printf_common>
 800c7ba:	3001      	adds	r0, #1
 800c7bc:	d14a      	bne.n	800c854 <_printf_i+0x1f0>
 800c7be:	f04f 30ff 	mov.w	r0, #4294967295
 800c7c2:	b004      	add	sp, #16
 800c7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7c8:	6823      	ldr	r3, [r4, #0]
 800c7ca:	f043 0320 	orr.w	r3, r3, #32
 800c7ce:	6023      	str	r3, [r4, #0]
 800c7d0:	2778      	movs	r7, #120	@ 0x78
 800c7d2:	4832      	ldr	r0, [pc, #200]	@ (800c89c <_printf_i+0x238>)
 800c7d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c7d8:	6823      	ldr	r3, [r4, #0]
 800c7da:	6831      	ldr	r1, [r6, #0]
 800c7dc:	061f      	lsls	r7, r3, #24
 800c7de:	f851 5b04 	ldr.w	r5, [r1], #4
 800c7e2:	d402      	bmi.n	800c7ea <_printf_i+0x186>
 800c7e4:	065f      	lsls	r7, r3, #25
 800c7e6:	bf48      	it	mi
 800c7e8:	b2ad      	uxthmi	r5, r5
 800c7ea:	6031      	str	r1, [r6, #0]
 800c7ec:	07d9      	lsls	r1, r3, #31
 800c7ee:	bf44      	itt	mi
 800c7f0:	f043 0320 	orrmi.w	r3, r3, #32
 800c7f4:	6023      	strmi	r3, [r4, #0]
 800c7f6:	b11d      	cbz	r5, 800c800 <_printf_i+0x19c>
 800c7f8:	2310      	movs	r3, #16
 800c7fa:	e7ad      	b.n	800c758 <_printf_i+0xf4>
 800c7fc:	4826      	ldr	r0, [pc, #152]	@ (800c898 <_printf_i+0x234>)
 800c7fe:	e7e9      	b.n	800c7d4 <_printf_i+0x170>
 800c800:	6823      	ldr	r3, [r4, #0]
 800c802:	f023 0320 	bic.w	r3, r3, #32
 800c806:	6023      	str	r3, [r4, #0]
 800c808:	e7f6      	b.n	800c7f8 <_printf_i+0x194>
 800c80a:	4616      	mov	r6, r2
 800c80c:	e7bd      	b.n	800c78a <_printf_i+0x126>
 800c80e:	6833      	ldr	r3, [r6, #0]
 800c810:	6825      	ldr	r5, [r4, #0]
 800c812:	1d18      	adds	r0, r3, #4
 800c814:	6961      	ldr	r1, [r4, #20]
 800c816:	6030      	str	r0, [r6, #0]
 800c818:	062e      	lsls	r6, r5, #24
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	d501      	bpl.n	800c822 <_printf_i+0x1be>
 800c81e:	6019      	str	r1, [r3, #0]
 800c820:	e002      	b.n	800c828 <_printf_i+0x1c4>
 800c822:	0668      	lsls	r0, r5, #25
 800c824:	d5fb      	bpl.n	800c81e <_printf_i+0x1ba>
 800c826:	8019      	strh	r1, [r3, #0]
 800c828:	2300      	movs	r3, #0
 800c82a:	4616      	mov	r6, r2
 800c82c:	6123      	str	r3, [r4, #16]
 800c82e:	e7bc      	b.n	800c7aa <_printf_i+0x146>
 800c830:	6833      	ldr	r3, [r6, #0]
 800c832:	2100      	movs	r1, #0
 800c834:	1d1a      	adds	r2, r3, #4
 800c836:	6032      	str	r2, [r6, #0]
 800c838:	681e      	ldr	r6, [r3, #0]
 800c83a:	6862      	ldr	r2, [r4, #4]
 800c83c:	4630      	mov	r0, r6
 800c83e:	f000 f913 	bl	800ca68 <memchr>
 800c842:	b108      	cbz	r0, 800c848 <_printf_i+0x1e4>
 800c844:	1b80      	subs	r0, r0, r6
 800c846:	6060      	str	r0, [r4, #4]
 800c848:	6863      	ldr	r3, [r4, #4]
 800c84a:	6123      	str	r3, [r4, #16]
 800c84c:	2300      	movs	r3, #0
 800c84e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c852:	e7aa      	b.n	800c7aa <_printf_i+0x146>
 800c854:	4632      	mov	r2, r6
 800c856:	4649      	mov	r1, r9
 800c858:	4640      	mov	r0, r8
 800c85a:	6923      	ldr	r3, [r4, #16]
 800c85c:	47d0      	blx	sl
 800c85e:	3001      	adds	r0, #1
 800c860:	d0ad      	beq.n	800c7be <_printf_i+0x15a>
 800c862:	6823      	ldr	r3, [r4, #0]
 800c864:	079b      	lsls	r3, r3, #30
 800c866:	d413      	bmi.n	800c890 <_printf_i+0x22c>
 800c868:	68e0      	ldr	r0, [r4, #12]
 800c86a:	9b03      	ldr	r3, [sp, #12]
 800c86c:	4298      	cmp	r0, r3
 800c86e:	bfb8      	it	lt
 800c870:	4618      	movlt	r0, r3
 800c872:	e7a6      	b.n	800c7c2 <_printf_i+0x15e>
 800c874:	2301      	movs	r3, #1
 800c876:	4632      	mov	r2, r6
 800c878:	4649      	mov	r1, r9
 800c87a:	4640      	mov	r0, r8
 800c87c:	47d0      	blx	sl
 800c87e:	3001      	adds	r0, #1
 800c880:	d09d      	beq.n	800c7be <_printf_i+0x15a>
 800c882:	3501      	adds	r5, #1
 800c884:	68e3      	ldr	r3, [r4, #12]
 800c886:	9903      	ldr	r1, [sp, #12]
 800c888:	1a5b      	subs	r3, r3, r1
 800c88a:	42ab      	cmp	r3, r5
 800c88c:	dcf2      	bgt.n	800c874 <_printf_i+0x210>
 800c88e:	e7eb      	b.n	800c868 <_printf_i+0x204>
 800c890:	2500      	movs	r5, #0
 800c892:	f104 0619 	add.w	r6, r4, #25
 800c896:	e7f5      	b.n	800c884 <_printf_i+0x220>
 800c898:	0800ec4a 	.word	0x0800ec4a
 800c89c:	0800ec5b 	.word	0x0800ec5b

0800c8a0 <__sflush_r>:
 800c8a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8a6:	0716      	lsls	r6, r2, #28
 800c8a8:	4605      	mov	r5, r0
 800c8aa:	460c      	mov	r4, r1
 800c8ac:	d454      	bmi.n	800c958 <__sflush_r+0xb8>
 800c8ae:	684b      	ldr	r3, [r1, #4]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	dc02      	bgt.n	800c8ba <__sflush_r+0x1a>
 800c8b4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	dd48      	ble.n	800c94c <__sflush_r+0xac>
 800c8ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c8bc:	2e00      	cmp	r6, #0
 800c8be:	d045      	beq.n	800c94c <__sflush_r+0xac>
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c8c6:	682f      	ldr	r7, [r5, #0]
 800c8c8:	6a21      	ldr	r1, [r4, #32]
 800c8ca:	602b      	str	r3, [r5, #0]
 800c8cc:	d030      	beq.n	800c930 <__sflush_r+0x90>
 800c8ce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c8d0:	89a3      	ldrh	r3, [r4, #12]
 800c8d2:	0759      	lsls	r1, r3, #29
 800c8d4:	d505      	bpl.n	800c8e2 <__sflush_r+0x42>
 800c8d6:	6863      	ldr	r3, [r4, #4]
 800c8d8:	1ad2      	subs	r2, r2, r3
 800c8da:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c8dc:	b10b      	cbz	r3, 800c8e2 <__sflush_r+0x42>
 800c8de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c8e0:	1ad2      	subs	r2, r2, r3
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	4628      	mov	r0, r5
 800c8e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c8e8:	6a21      	ldr	r1, [r4, #32]
 800c8ea:	47b0      	blx	r6
 800c8ec:	1c43      	adds	r3, r0, #1
 800c8ee:	89a3      	ldrh	r3, [r4, #12]
 800c8f0:	d106      	bne.n	800c900 <__sflush_r+0x60>
 800c8f2:	6829      	ldr	r1, [r5, #0]
 800c8f4:	291d      	cmp	r1, #29
 800c8f6:	d82b      	bhi.n	800c950 <__sflush_r+0xb0>
 800c8f8:	4a28      	ldr	r2, [pc, #160]	@ (800c99c <__sflush_r+0xfc>)
 800c8fa:	40ca      	lsrs	r2, r1
 800c8fc:	07d6      	lsls	r6, r2, #31
 800c8fe:	d527      	bpl.n	800c950 <__sflush_r+0xb0>
 800c900:	2200      	movs	r2, #0
 800c902:	6062      	str	r2, [r4, #4]
 800c904:	6922      	ldr	r2, [r4, #16]
 800c906:	04d9      	lsls	r1, r3, #19
 800c908:	6022      	str	r2, [r4, #0]
 800c90a:	d504      	bpl.n	800c916 <__sflush_r+0x76>
 800c90c:	1c42      	adds	r2, r0, #1
 800c90e:	d101      	bne.n	800c914 <__sflush_r+0x74>
 800c910:	682b      	ldr	r3, [r5, #0]
 800c912:	b903      	cbnz	r3, 800c916 <__sflush_r+0x76>
 800c914:	6560      	str	r0, [r4, #84]	@ 0x54
 800c916:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c918:	602f      	str	r7, [r5, #0]
 800c91a:	b1b9      	cbz	r1, 800c94c <__sflush_r+0xac>
 800c91c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c920:	4299      	cmp	r1, r3
 800c922:	d002      	beq.n	800c92a <__sflush_r+0x8a>
 800c924:	4628      	mov	r0, r5
 800c926:	f7ff fbd5 	bl	800c0d4 <_free_r>
 800c92a:	2300      	movs	r3, #0
 800c92c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c92e:	e00d      	b.n	800c94c <__sflush_r+0xac>
 800c930:	2301      	movs	r3, #1
 800c932:	4628      	mov	r0, r5
 800c934:	47b0      	blx	r6
 800c936:	4602      	mov	r2, r0
 800c938:	1c50      	adds	r0, r2, #1
 800c93a:	d1c9      	bne.n	800c8d0 <__sflush_r+0x30>
 800c93c:	682b      	ldr	r3, [r5, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d0c6      	beq.n	800c8d0 <__sflush_r+0x30>
 800c942:	2b1d      	cmp	r3, #29
 800c944:	d001      	beq.n	800c94a <__sflush_r+0xaa>
 800c946:	2b16      	cmp	r3, #22
 800c948:	d11d      	bne.n	800c986 <__sflush_r+0xe6>
 800c94a:	602f      	str	r7, [r5, #0]
 800c94c:	2000      	movs	r0, #0
 800c94e:	e021      	b.n	800c994 <__sflush_r+0xf4>
 800c950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c954:	b21b      	sxth	r3, r3
 800c956:	e01a      	b.n	800c98e <__sflush_r+0xee>
 800c958:	690f      	ldr	r7, [r1, #16]
 800c95a:	2f00      	cmp	r7, #0
 800c95c:	d0f6      	beq.n	800c94c <__sflush_r+0xac>
 800c95e:	0793      	lsls	r3, r2, #30
 800c960:	bf18      	it	ne
 800c962:	2300      	movne	r3, #0
 800c964:	680e      	ldr	r6, [r1, #0]
 800c966:	bf08      	it	eq
 800c968:	694b      	ldreq	r3, [r1, #20]
 800c96a:	1bf6      	subs	r6, r6, r7
 800c96c:	600f      	str	r7, [r1, #0]
 800c96e:	608b      	str	r3, [r1, #8]
 800c970:	2e00      	cmp	r6, #0
 800c972:	ddeb      	ble.n	800c94c <__sflush_r+0xac>
 800c974:	4633      	mov	r3, r6
 800c976:	463a      	mov	r2, r7
 800c978:	4628      	mov	r0, r5
 800c97a:	6a21      	ldr	r1, [r4, #32]
 800c97c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c980:	47e0      	blx	ip
 800c982:	2800      	cmp	r0, #0
 800c984:	dc07      	bgt.n	800c996 <__sflush_r+0xf6>
 800c986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c98a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c98e:	f04f 30ff 	mov.w	r0, #4294967295
 800c992:	81a3      	strh	r3, [r4, #12]
 800c994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c996:	4407      	add	r7, r0
 800c998:	1a36      	subs	r6, r6, r0
 800c99a:	e7e9      	b.n	800c970 <__sflush_r+0xd0>
 800c99c:	20400001 	.word	0x20400001

0800c9a0 <_fflush_r>:
 800c9a0:	b538      	push	{r3, r4, r5, lr}
 800c9a2:	690b      	ldr	r3, [r1, #16]
 800c9a4:	4605      	mov	r5, r0
 800c9a6:	460c      	mov	r4, r1
 800c9a8:	b913      	cbnz	r3, 800c9b0 <_fflush_r+0x10>
 800c9aa:	2500      	movs	r5, #0
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	bd38      	pop	{r3, r4, r5, pc}
 800c9b0:	b118      	cbz	r0, 800c9ba <_fflush_r+0x1a>
 800c9b2:	6a03      	ldr	r3, [r0, #32]
 800c9b4:	b90b      	cbnz	r3, 800c9ba <_fflush_r+0x1a>
 800c9b6:	f7ff fa37 	bl	800be28 <__sinit>
 800c9ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d0f3      	beq.n	800c9aa <_fflush_r+0xa>
 800c9c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c9c4:	07d0      	lsls	r0, r2, #31
 800c9c6:	d404      	bmi.n	800c9d2 <_fflush_r+0x32>
 800c9c8:	0599      	lsls	r1, r3, #22
 800c9ca:	d402      	bmi.n	800c9d2 <_fflush_r+0x32>
 800c9cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9ce:	f7ff fb52 	bl	800c076 <__retarget_lock_acquire_recursive>
 800c9d2:	4628      	mov	r0, r5
 800c9d4:	4621      	mov	r1, r4
 800c9d6:	f7ff ff63 	bl	800c8a0 <__sflush_r>
 800c9da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c9dc:	4605      	mov	r5, r0
 800c9de:	07da      	lsls	r2, r3, #31
 800c9e0:	d4e4      	bmi.n	800c9ac <_fflush_r+0xc>
 800c9e2:	89a3      	ldrh	r3, [r4, #12]
 800c9e4:	059b      	lsls	r3, r3, #22
 800c9e6:	d4e1      	bmi.n	800c9ac <_fflush_r+0xc>
 800c9e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9ea:	f7ff fb45 	bl	800c078 <__retarget_lock_release_recursive>
 800c9ee:	e7dd      	b.n	800c9ac <_fflush_r+0xc>

0800c9f0 <fiprintf>:
 800c9f0:	b40e      	push	{r1, r2, r3}
 800c9f2:	b503      	push	{r0, r1, lr}
 800c9f4:	4601      	mov	r1, r0
 800c9f6:	ab03      	add	r3, sp, #12
 800c9f8:	4805      	ldr	r0, [pc, #20]	@ (800ca10 <fiprintf+0x20>)
 800c9fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9fe:	6800      	ldr	r0, [r0, #0]
 800ca00:	9301      	str	r3, [sp, #4]
 800ca02:	f000 f89b 	bl	800cb3c <_vfiprintf_r>
 800ca06:	b002      	add	sp, #8
 800ca08:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca0c:	b003      	add	sp, #12
 800ca0e:	4770      	bx	lr
 800ca10:	2000046c 	.word	0x2000046c

0800ca14 <memmove>:
 800ca14:	4288      	cmp	r0, r1
 800ca16:	b510      	push	{r4, lr}
 800ca18:	eb01 0402 	add.w	r4, r1, r2
 800ca1c:	d902      	bls.n	800ca24 <memmove+0x10>
 800ca1e:	4284      	cmp	r4, r0
 800ca20:	4623      	mov	r3, r4
 800ca22:	d807      	bhi.n	800ca34 <memmove+0x20>
 800ca24:	1e43      	subs	r3, r0, #1
 800ca26:	42a1      	cmp	r1, r4
 800ca28:	d008      	beq.n	800ca3c <memmove+0x28>
 800ca2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca32:	e7f8      	b.n	800ca26 <memmove+0x12>
 800ca34:	4601      	mov	r1, r0
 800ca36:	4402      	add	r2, r0
 800ca38:	428a      	cmp	r2, r1
 800ca3a:	d100      	bne.n	800ca3e <memmove+0x2a>
 800ca3c:	bd10      	pop	{r4, pc}
 800ca3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca46:	e7f7      	b.n	800ca38 <memmove+0x24>

0800ca48 <_sbrk_r>:
 800ca48:	b538      	push	{r3, r4, r5, lr}
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	4d05      	ldr	r5, [pc, #20]	@ (800ca64 <_sbrk_r+0x1c>)
 800ca4e:	4604      	mov	r4, r0
 800ca50:	4608      	mov	r0, r1
 800ca52:	602b      	str	r3, [r5, #0]
 800ca54:	f7fc f8fa 	bl	8008c4c <_sbrk>
 800ca58:	1c43      	adds	r3, r0, #1
 800ca5a:	d102      	bne.n	800ca62 <_sbrk_r+0x1a>
 800ca5c:	682b      	ldr	r3, [r5, #0]
 800ca5e:	b103      	cbz	r3, 800ca62 <_sbrk_r+0x1a>
 800ca60:	6023      	str	r3, [r4, #0]
 800ca62:	bd38      	pop	{r3, r4, r5, pc}
 800ca64:	200045e0 	.word	0x200045e0

0800ca68 <memchr>:
 800ca68:	4603      	mov	r3, r0
 800ca6a:	b510      	push	{r4, lr}
 800ca6c:	b2c9      	uxtb	r1, r1
 800ca6e:	4402      	add	r2, r0
 800ca70:	4293      	cmp	r3, r2
 800ca72:	4618      	mov	r0, r3
 800ca74:	d101      	bne.n	800ca7a <memchr+0x12>
 800ca76:	2000      	movs	r0, #0
 800ca78:	e003      	b.n	800ca82 <memchr+0x1a>
 800ca7a:	7804      	ldrb	r4, [r0, #0]
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	428c      	cmp	r4, r1
 800ca80:	d1f6      	bne.n	800ca70 <memchr+0x8>
 800ca82:	bd10      	pop	{r4, pc}

0800ca84 <abort>:
 800ca84:	2006      	movs	r0, #6
 800ca86:	b508      	push	{r3, lr}
 800ca88:	f000 fa2c 	bl	800cee4 <raise>
 800ca8c:	2001      	movs	r0, #1
 800ca8e:	f7fc f868 	bl	8008b62 <_exit>

0800ca92 <_realloc_r>:
 800ca92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca96:	4607      	mov	r7, r0
 800ca98:	4614      	mov	r4, r2
 800ca9a:	460d      	mov	r5, r1
 800ca9c:	b921      	cbnz	r1, 800caa8 <_realloc_r+0x16>
 800ca9e:	4611      	mov	r1, r2
 800caa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caa4:	f7ff bb88 	b.w	800c1b8 <_malloc_r>
 800caa8:	b92a      	cbnz	r2, 800cab6 <_realloc_r+0x24>
 800caaa:	f7ff fb13 	bl	800c0d4 <_free_r>
 800caae:	4625      	mov	r5, r4
 800cab0:	4628      	mov	r0, r5
 800cab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cab6:	f000 fa31 	bl	800cf1c <_malloc_usable_size_r>
 800caba:	4284      	cmp	r4, r0
 800cabc:	4606      	mov	r6, r0
 800cabe:	d802      	bhi.n	800cac6 <_realloc_r+0x34>
 800cac0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cac4:	d8f4      	bhi.n	800cab0 <_realloc_r+0x1e>
 800cac6:	4621      	mov	r1, r4
 800cac8:	4638      	mov	r0, r7
 800caca:	f7ff fb75 	bl	800c1b8 <_malloc_r>
 800cace:	4680      	mov	r8, r0
 800cad0:	b908      	cbnz	r0, 800cad6 <_realloc_r+0x44>
 800cad2:	4645      	mov	r5, r8
 800cad4:	e7ec      	b.n	800cab0 <_realloc_r+0x1e>
 800cad6:	42b4      	cmp	r4, r6
 800cad8:	4622      	mov	r2, r4
 800cada:	4629      	mov	r1, r5
 800cadc:	bf28      	it	cs
 800cade:	4632      	movcs	r2, r6
 800cae0:	f7ff facb 	bl	800c07a <memcpy>
 800cae4:	4629      	mov	r1, r5
 800cae6:	4638      	mov	r0, r7
 800cae8:	f7ff faf4 	bl	800c0d4 <_free_r>
 800caec:	e7f1      	b.n	800cad2 <_realloc_r+0x40>

0800caee <__sfputc_r>:
 800caee:	6893      	ldr	r3, [r2, #8]
 800caf0:	b410      	push	{r4}
 800caf2:	3b01      	subs	r3, #1
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	6093      	str	r3, [r2, #8]
 800caf8:	da07      	bge.n	800cb0a <__sfputc_r+0x1c>
 800cafa:	6994      	ldr	r4, [r2, #24]
 800cafc:	42a3      	cmp	r3, r4
 800cafe:	db01      	blt.n	800cb04 <__sfputc_r+0x16>
 800cb00:	290a      	cmp	r1, #10
 800cb02:	d102      	bne.n	800cb0a <__sfputc_r+0x1c>
 800cb04:	bc10      	pop	{r4}
 800cb06:	f000 b931 	b.w	800cd6c <__swbuf_r>
 800cb0a:	6813      	ldr	r3, [r2, #0]
 800cb0c:	1c58      	adds	r0, r3, #1
 800cb0e:	6010      	str	r0, [r2, #0]
 800cb10:	7019      	strb	r1, [r3, #0]
 800cb12:	4608      	mov	r0, r1
 800cb14:	bc10      	pop	{r4}
 800cb16:	4770      	bx	lr

0800cb18 <__sfputs_r>:
 800cb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb1a:	4606      	mov	r6, r0
 800cb1c:	460f      	mov	r7, r1
 800cb1e:	4614      	mov	r4, r2
 800cb20:	18d5      	adds	r5, r2, r3
 800cb22:	42ac      	cmp	r4, r5
 800cb24:	d101      	bne.n	800cb2a <__sfputs_r+0x12>
 800cb26:	2000      	movs	r0, #0
 800cb28:	e007      	b.n	800cb3a <__sfputs_r+0x22>
 800cb2a:	463a      	mov	r2, r7
 800cb2c:	4630      	mov	r0, r6
 800cb2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb32:	f7ff ffdc 	bl	800caee <__sfputc_r>
 800cb36:	1c43      	adds	r3, r0, #1
 800cb38:	d1f3      	bne.n	800cb22 <__sfputs_r+0xa>
 800cb3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cb3c <_vfiprintf_r>:
 800cb3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb40:	460d      	mov	r5, r1
 800cb42:	4614      	mov	r4, r2
 800cb44:	4698      	mov	r8, r3
 800cb46:	4606      	mov	r6, r0
 800cb48:	b09d      	sub	sp, #116	@ 0x74
 800cb4a:	b118      	cbz	r0, 800cb54 <_vfiprintf_r+0x18>
 800cb4c:	6a03      	ldr	r3, [r0, #32]
 800cb4e:	b90b      	cbnz	r3, 800cb54 <_vfiprintf_r+0x18>
 800cb50:	f7ff f96a 	bl	800be28 <__sinit>
 800cb54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb56:	07d9      	lsls	r1, r3, #31
 800cb58:	d405      	bmi.n	800cb66 <_vfiprintf_r+0x2a>
 800cb5a:	89ab      	ldrh	r3, [r5, #12]
 800cb5c:	059a      	lsls	r2, r3, #22
 800cb5e:	d402      	bmi.n	800cb66 <_vfiprintf_r+0x2a>
 800cb60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb62:	f7ff fa88 	bl	800c076 <__retarget_lock_acquire_recursive>
 800cb66:	89ab      	ldrh	r3, [r5, #12]
 800cb68:	071b      	lsls	r3, r3, #28
 800cb6a:	d501      	bpl.n	800cb70 <_vfiprintf_r+0x34>
 800cb6c:	692b      	ldr	r3, [r5, #16]
 800cb6e:	b99b      	cbnz	r3, 800cb98 <_vfiprintf_r+0x5c>
 800cb70:	4629      	mov	r1, r5
 800cb72:	4630      	mov	r0, r6
 800cb74:	f000 f938 	bl	800cde8 <__swsetup_r>
 800cb78:	b170      	cbz	r0, 800cb98 <_vfiprintf_r+0x5c>
 800cb7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb7c:	07dc      	lsls	r4, r3, #31
 800cb7e:	d504      	bpl.n	800cb8a <_vfiprintf_r+0x4e>
 800cb80:	f04f 30ff 	mov.w	r0, #4294967295
 800cb84:	b01d      	add	sp, #116	@ 0x74
 800cb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb8a:	89ab      	ldrh	r3, [r5, #12]
 800cb8c:	0598      	lsls	r0, r3, #22
 800cb8e:	d4f7      	bmi.n	800cb80 <_vfiprintf_r+0x44>
 800cb90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb92:	f7ff fa71 	bl	800c078 <__retarget_lock_release_recursive>
 800cb96:	e7f3      	b.n	800cb80 <_vfiprintf_r+0x44>
 800cb98:	2300      	movs	r3, #0
 800cb9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb9c:	2320      	movs	r3, #32
 800cb9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cba2:	2330      	movs	r3, #48	@ 0x30
 800cba4:	f04f 0901 	mov.w	r9, #1
 800cba8:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbac:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800cd58 <_vfiprintf_r+0x21c>
 800cbb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cbb4:	4623      	mov	r3, r4
 800cbb6:	469a      	mov	sl, r3
 800cbb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbbc:	b10a      	cbz	r2, 800cbc2 <_vfiprintf_r+0x86>
 800cbbe:	2a25      	cmp	r2, #37	@ 0x25
 800cbc0:	d1f9      	bne.n	800cbb6 <_vfiprintf_r+0x7a>
 800cbc2:	ebba 0b04 	subs.w	fp, sl, r4
 800cbc6:	d00b      	beq.n	800cbe0 <_vfiprintf_r+0xa4>
 800cbc8:	465b      	mov	r3, fp
 800cbca:	4622      	mov	r2, r4
 800cbcc:	4629      	mov	r1, r5
 800cbce:	4630      	mov	r0, r6
 800cbd0:	f7ff ffa2 	bl	800cb18 <__sfputs_r>
 800cbd4:	3001      	adds	r0, #1
 800cbd6:	f000 80a7 	beq.w	800cd28 <_vfiprintf_r+0x1ec>
 800cbda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbdc:	445a      	add	r2, fp
 800cbde:	9209      	str	r2, [sp, #36]	@ 0x24
 800cbe0:	f89a 3000 	ldrb.w	r3, [sl]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	f000 809f 	beq.w	800cd28 <_vfiprintf_r+0x1ec>
 800cbea:	2300      	movs	r3, #0
 800cbec:	f04f 32ff 	mov.w	r2, #4294967295
 800cbf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbf4:	f10a 0a01 	add.w	sl, sl, #1
 800cbf8:	9304      	str	r3, [sp, #16]
 800cbfa:	9307      	str	r3, [sp, #28]
 800cbfc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc00:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc02:	4654      	mov	r4, sl
 800cc04:	2205      	movs	r2, #5
 800cc06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc0a:	4853      	ldr	r0, [pc, #332]	@ (800cd58 <_vfiprintf_r+0x21c>)
 800cc0c:	f7ff ff2c 	bl	800ca68 <memchr>
 800cc10:	9a04      	ldr	r2, [sp, #16]
 800cc12:	b9d8      	cbnz	r0, 800cc4c <_vfiprintf_r+0x110>
 800cc14:	06d1      	lsls	r1, r2, #27
 800cc16:	bf44      	itt	mi
 800cc18:	2320      	movmi	r3, #32
 800cc1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc1e:	0713      	lsls	r3, r2, #28
 800cc20:	bf44      	itt	mi
 800cc22:	232b      	movmi	r3, #43	@ 0x2b
 800cc24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc28:	f89a 3000 	ldrb.w	r3, [sl]
 800cc2c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc2e:	d015      	beq.n	800cc5c <_vfiprintf_r+0x120>
 800cc30:	4654      	mov	r4, sl
 800cc32:	2000      	movs	r0, #0
 800cc34:	f04f 0c0a 	mov.w	ip, #10
 800cc38:	9a07      	ldr	r2, [sp, #28]
 800cc3a:	4621      	mov	r1, r4
 800cc3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc40:	3b30      	subs	r3, #48	@ 0x30
 800cc42:	2b09      	cmp	r3, #9
 800cc44:	d94b      	bls.n	800ccde <_vfiprintf_r+0x1a2>
 800cc46:	b1b0      	cbz	r0, 800cc76 <_vfiprintf_r+0x13a>
 800cc48:	9207      	str	r2, [sp, #28]
 800cc4a:	e014      	b.n	800cc76 <_vfiprintf_r+0x13a>
 800cc4c:	eba0 0308 	sub.w	r3, r0, r8
 800cc50:	fa09 f303 	lsl.w	r3, r9, r3
 800cc54:	4313      	orrs	r3, r2
 800cc56:	46a2      	mov	sl, r4
 800cc58:	9304      	str	r3, [sp, #16]
 800cc5a:	e7d2      	b.n	800cc02 <_vfiprintf_r+0xc6>
 800cc5c:	9b03      	ldr	r3, [sp, #12]
 800cc5e:	1d19      	adds	r1, r3, #4
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	9103      	str	r1, [sp, #12]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	bfbb      	ittet	lt
 800cc68:	425b      	neglt	r3, r3
 800cc6a:	f042 0202 	orrlt.w	r2, r2, #2
 800cc6e:	9307      	strge	r3, [sp, #28]
 800cc70:	9307      	strlt	r3, [sp, #28]
 800cc72:	bfb8      	it	lt
 800cc74:	9204      	strlt	r2, [sp, #16]
 800cc76:	7823      	ldrb	r3, [r4, #0]
 800cc78:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc7a:	d10a      	bne.n	800cc92 <_vfiprintf_r+0x156>
 800cc7c:	7863      	ldrb	r3, [r4, #1]
 800cc7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc80:	d132      	bne.n	800cce8 <_vfiprintf_r+0x1ac>
 800cc82:	9b03      	ldr	r3, [sp, #12]
 800cc84:	3402      	adds	r4, #2
 800cc86:	1d1a      	adds	r2, r3, #4
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	9203      	str	r2, [sp, #12]
 800cc8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cc90:	9305      	str	r3, [sp, #20]
 800cc92:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800cd5c <_vfiprintf_r+0x220>
 800cc96:	2203      	movs	r2, #3
 800cc98:	4650      	mov	r0, sl
 800cc9a:	7821      	ldrb	r1, [r4, #0]
 800cc9c:	f7ff fee4 	bl	800ca68 <memchr>
 800cca0:	b138      	cbz	r0, 800ccb2 <_vfiprintf_r+0x176>
 800cca2:	2240      	movs	r2, #64	@ 0x40
 800cca4:	9b04      	ldr	r3, [sp, #16]
 800cca6:	eba0 000a 	sub.w	r0, r0, sl
 800ccaa:	4082      	lsls	r2, r0
 800ccac:	4313      	orrs	r3, r2
 800ccae:	3401      	adds	r4, #1
 800ccb0:	9304      	str	r3, [sp, #16]
 800ccb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccb6:	2206      	movs	r2, #6
 800ccb8:	4829      	ldr	r0, [pc, #164]	@ (800cd60 <_vfiprintf_r+0x224>)
 800ccba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ccbe:	f7ff fed3 	bl	800ca68 <memchr>
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	d03f      	beq.n	800cd46 <_vfiprintf_r+0x20a>
 800ccc6:	4b27      	ldr	r3, [pc, #156]	@ (800cd64 <_vfiprintf_r+0x228>)
 800ccc8:	bb1b      	cbnz	r3, 800cd12 <_vfiprintf_r+0x1d6>
 800ccca:	9b03      	ldr	r3, [sp, #12]
 800cccc:	3307      	adds	r3, #7
 800ccce:	f023 0307 	bic.w	r3, r3, #7
 800ccd2:	3308      	adds	r3, #8
 800ccd4:	9303      	str	r3, [sp, #12]
 800ccd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccd8:	443b      	add	r3, r7
 800ccda:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccdc:	e76a      	b.n	800cbb4 <_vfiprintf_r+0x78>
 800ccde:	460c      	mov	r4, r1
 800cce0:	2001      	movs	r0, #1
 800cce2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cce6:	e7a8      	b.n	800cc3a <_vfiprintf_r+0xfe>
 800cce8:	2300      	movs	r3, #0
 800ccea:	f04f 0c0a 	mov.w	ip, #10
 800ccee:	4619      	mov	r1, r3
 800ccf0:	3401      	adds	r4, #1
 800ccf2:	9305      	str	r3, [sp, #20]
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccfa:	3a30      	subs	r2, #48	@ 0x30
 800ccfc:	2a09      	cmp	r2, #9
 800ccfe:	d903      	bls.n	800cd08 <_vfiprintf_r+0x1cc>
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d0c6      	beq.n	800cc92 <_vfiprintf_r+0x156>
 800cd04:	9105      	str	r1, [sp, #20]
 800cd06:	e7c4      	b.n	800cc92 <_vfiprintf_r+0x156>
 800cd08:	4604      	mov	r4, r0
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd10:	e7f0      	b.n	800ccf4 <_vfiprintf_r+0x1b8>
 800cd12:	ab03      	add	r3, sp, #12
 800cd14:	9300      	str	r3, [sp, #0]
 800cd16:	462a      	mov	r2, r5
 800cd18:	4630      	mov	r0, r6
 800cd1a:	4b13      	ldr	r3, [pc, #76]	@ (800cd68 <_vfiprintf_r+0x22c>)
 800cd1c:	a904      	add	r1, sp, #16
 800cd1e:	f3af 8000 	nop.w
 800cd22:	4607      	mov	r7, r0
 800cd24:	1c78      	adds	r0, r7, #1
 800cd26:	d1d6      	bne.n	800ccd6 <_vfiprintf_r+0x19a>
 800cd28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd2a:	07d9      	lsls	r1, r3, #31
 800cd2c:	d405      	bmi.n	800cd3a <_vfiprintf_r+0x1fe>
 800cd2e:	89ab      	ldrh	r3, [r5, #12]
 800cd30:	059a      	lsls	r2, r3, #22
 800cd32:	d402      	bmi.n	800cd3a <_vfiprintf_r+0x1fe>
 800cd34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd36:	f7ff f99f 	bl	800c078 <__retarget_lock_release_recursive>
 800cd3a:	89ab      	ldrh	r3, [r5, #12]
 800cd3c:	065b      	lsls	r3, r3, #25
 800cd3e:	f53f af1f 	bmi.w	800cb80 <_vfiprintf_r+0x44>
 800cd42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd44:	e71e      	b.n	800cb84 <_vfiprintf_r+0x48>
 800cd46:	ab03      	add	r3, sp, #12
 800cd48:	9300      	str	r3, [sp, #0]
 800cd4a:	462a      	mov	r2, r5
 800cd4c:	4630      	mov	r0, r6
 800cd4e:	4b06      	ldr	r3, [pc, #24]	@ (800cd68 <_vfiprintf_r+0x22c>)
 800cd50:	a904      	add	r1, sp, #16
 800cd52:	f7ff fc87 	bl	800c664 <_printf_i>
 800cd56:	e7e4      	b.n	800cd22 <_vfiprintf_r+0x1e6>
 800cd58:	0800ec39 	.word	0x0800ec39
 800cd5c:	0800ec3f 	.word	0x0800ec3f
 800cd60:	0800ec43 	.word	0x0800ec43
 800cd64:	00000000 	.word	0x00000000
 800cd68:	0800cb19 	.word	0x0800cb19

0800cd6c <__swbuf_r>:
 800cd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd6e:	460e      	mov	r6, r1
 800cd70:	4614      	mov	r4, r2
 800cd72:	4605      	mov	r5, r0
 800cd74:	b118      	cbz	r0, 800cd7e <__swbuf_r+0x12>
 800cd76:	6a03      	ldr	r3, [r0, #32]
 800cd78:	b90b      	cbnz	r3, 800cd7e <__swbuf_r+0x12>
 800cd7a:	f7ff f855 	bl	800be28 <__sinit>
 800cd7e:	69a3      	ldr	r3, [r4, #24]
 800cd80:	60a3      	str	r3, [r4, #8]
 800cd82:	89a3      	ldrh	r3, [r4, #12]
 800cd84:	071a      	lsls	r2, r3, #28
 800cd86:	d501      	bpl.n	800cd8c <__swbuf_r+0x20>
 800cd88:	6923      	ldr	r3, [r4, #16]
 800cd8a:	b943      	cbnz	r3, 800cd9e <__swbuf_r+0x32>
 800cd8c:	4621      	mov	r1, r4
 800cd8e:	4628      	mov	r0, r5
 800cd90:	f000 f82a 	bl	800cde8 <__swsetup_r>
 800cd94:	b118      	cbz	r0, 800cd9e <__swbuf_r+0x32>
 800cd96:	f04f 37ff 	mov.w	r7, #4294967295
 800cd9a:	4638      	mov	r0, r7
 800cd9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd9e:	6823      	ldr	r3, [r4, #0]
 800cda0:	6922      	ldr	r2, [r4, #16]
 800cda2:	b2f6      	uxtb	r6, r6
 800cda4:	1a98      	subs	r0, r3, r2
 800cda6:	6963      	ldr	r3, [r4, #20]
 800cda8:	4637      	mov	r7, r6
 800cdaa:	4283      	cmp	r3, r0
 800cdac:	dc05      	bgt.n	800cdba <__swbuf_r+0x4e>
 800cdae:	4621      	mov	r1, r4
 800cdb0:	4628      	mov	r0, r5
 800cdb2:	f7ff fdf5 	bl	800c9a0 <_fflush_r>
 800cdb6:	2800      	cmp	r0, #0
 800cdb8:	d1ed      	bne.n	800cd96 <__swbuf_r+0x2a>
 800cdba:	68a3      	ldr	r3, [r4, #8]
 800cdbc:	3b01      	subs	r3, #1
 800cdbe:	60a3      	str	r3, [r4, #8]
 800cdc0:	6823      	ldr	r3, [r4, #0]
 800cdc2:	1c5a      	adds	r2, r3, #1
 800cdc4:	6022      	str	r2, [r4, #0]
 800cdc6:	701e      	strb	r6, [r3, #0]
 800cdc8:	6962      	ldr	r2, [r4, #20]
 800cdca:	1c43      	adds	r3, r0, #1
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d004      	beq.n	800cdda <__swbuf_r+0x6e>
 800cdd0:	89a3      	ldrh	r3, [r4, #12]
 800cdd2:	07db      	lsls	r3, r3, #31
 800cdd4:	d5e1      	bpl.n	800cd9a <__swbuf_r+0x2e>
 800cdd6:	2e0a      	cmp	r6, #10
 800cdd8:	d1df      	bne.n	800cd9a <__swbuf_r+0x2e>
 800cdda:	4621      	mov	r1, r4
 800cddc:	4628      	mov	r0, r5
 800cdde:	f7ff fddf 	bl	800c9a0 <_fflush_r>
 800cde2:	2800      	cmp	r0, #0
 800cde4:	d0d9      	beq.n	800cd9a <__swbuf_r+0x2e>
 800cde6:	e7d6      	b.n	800cd96 <__swbuf_r+0x2a>

0800cde8 <__swsetup_r>:
 800cde8:	b538      	push	{r3, r4, r5, lr}
 800cdea:	4b29      	ldr	r3, [pc, #164]	@ (800ce90 <__swsetup_r+0xa8>)
 800cdec:	4605      	mov	r5, r0
 800cdee:	6818      	ldr	r0, [r3, #0]
 800cdf0:	460c      	mov	r4, r1
 800cdf2:	b118      	cbz	r0, 800cdfc <__swsetup_r+0x14>
 800cdf4:	6a03      	ldr	r3, [r0, #32]
 800cdf6:	b90b      	cbnz	r3, 800cdfc <__swsetup_r+0x14>
 800cdf8:	f7ff f816 	bl	800be28 <__sinit>
 800cdfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce00:	0719      	lsls	r1, r3, #28
 800ce02:	d422      	bmi.n	800ce4a <__swsetup_r+0x62>
 800ce04:	06da      	lsls	r2, r3, #27
 800ce06:	d407      	bmi.n	800ce18 <__swsetup_r+0x30>
 800ce08:	2209      	movs	r2, #9
 800ce0a:	602a      	str	r2, [r5, #0]
 800ce0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce10:	f04f 30ff 	mov.w	r0, #4294967295
 800ce14:	81a3      	strh	r3, [r4, #12]
 800ce16:	e033      	b.n	800ce80 <__swsetup_r+0x98>
 800ce18:	0758      	lsls	r0, r3, #29
 800ce1a:	d512      	bpl.n	800ce42 <__swsetup_r+0x5a>
 800ce1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ce1e:	b141      	cbz	r1, 800ce32 <__swsetup_r+0x4a>
 800ce20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ce24:	4299      	cmp	r1, r3
 800ce26:	d002      	beq.n	800ce2e <__swsetup_r+0x46>
 800ce28:	4628      	mov	r0, r5
 800ce2a:	f7ff f953 	bl	800c0d4 <_free_r>
 800ce2e:	2300      	movs	r3, #0
 800ce30:	6363      	str	r3, [r4, #52]	@ 0x34
 800ce32:	89a3      	ldrh	r3, [r4, #12]
 800ce34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ce38:	81a3      	strh	r3, [r4, #12]
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	6063      	str	r3, [r4, #4]
 800ce3e:	6923      	ldr	r3, [r4, #16]
 800ce40:	6023      	str	r3, [r4, #0]
 800ce42:	89a3      	ldrh	r3, [r4, #12]
 800ce44:	f043 0308 	orr.w	r3, r3, #8
 800ce48:	81a3      	strh	r3, [r4, #12]
 800ce4a:	6923      	ldr	r3, [r4, #16]
 800ce4c:	b94b      	cbnz	r3, 800ce62 <__swsetup_r+0x7a>
 800ce4e:	89a3      	ldrh	r3, [r4, #12]
 800ce50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ce54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce58:	d003      	beq.n	800ce62 <__swsetup_r+0x7a>
 800ce5a:	4621      	mov	r1, r4
 800ce5c:	4628      	mov	r0, r5
 800ce5e:	f000 f88a 	bl	800cf76 <__smakebuf_r>
 800ce62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce66:	f013 0201 	ands.w	r2, r3, #1
 800ce6a:	d00a      	beq.n	800ce82 <__swsetup_r+0x9a>
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	60a2      	str	r2, [r4, #8]
 800ce70:	6962      	ldr	r2, [r4, #20]
 800ce72:	4252      	negs	r2, r2
 800ce74:	61a2      	str	r2, [r4, #24]
 800ce76:	6922      	ldr	r2, [r4, #16]
 800ce78:	b942      	cbnz	r2, 800ce8c <__swsetup_r+0xa4>
 800ce7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ce7e:	d1c5      	bne.n	800ce0c <__swsetup_r+0x24>
 800ce80:	bd38      	pop	{r3, r4, r5, pc}
 800ce82:	0799      	lsls	r1, r3, #30
 800ce84:	bf58      	it	pl
 800ce86:	6962      	ldrpl	r2, [r4, #20]
 800ce88:	60a2      	str	r2, [r4, #8]
 800ce8a:	e7f4      	b.n	800ce76 <__swsetup_r+0x8e>
 800ce8c:	2000      	movs	r0, #0
 800ce8e:	e7f7      	b.n	800ce80 <__swsetup_r+0x98>
 800ce90:	2000046c 	.word	0x2000046c

0800ce94 <_raise_r>:
 800ce94:	291f      	cmp	r1, #31
 800ce96:	b538      	push	{r3, r4, r5, lr}
 800ce98:	4605      	mov	r5, r0
 800ce9a:	460c      	mov	r4, r1
 800ce9c:	d904      	bls.n	800cea8 <_raise_r+0x14>
 800ce9e:	2316      	movs	r3, #22
 800cea0:	6003      	str	r3, [r0, #0]
 800cea2:	f04f 30ff 	mov.w	r0, #4294967295
 800cea6:	bd38      	pop	{r3, r4, r5, pc}
 800cea8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ceaa:	b112      	cbz	r2, 800ceb2 <_raise_r+0x1e>
 800ceac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ceb0:	b94b      	cbnz	r3, 800cec6 <_raise_r+0x32>
 800ceb2:	4628      	mov	r0, r5
 800ceb4:	f000 f830 	bl	800cf18 <_getpid_r>
 800ceb8:	4622      	mov	r2, r4
 800ceba:	4601      	mov	r1, r0
 800cebc:	4628      	mov	r0, r5
 800cebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cec2:	f000 b817 	b.w	800cef4 <_kill_r>
 800cec6:	2b01      	cmp	r3, #1
 800cec8:	d00a      	beq.n	800cee0 <_raise_r+0x4c>
 800ceca:	1c59      	adds	r1, r3, #1
 800cecc:	d103      	bne.n	800ced6 <_raise_r+0x42>
 800cece:	2316      	movs	r3, #22
 800ced0:	6003      	str	r3, [r0, #0]
 800ced2:	2001      	movs	r0, #1
 800ced4:	e7e7      	b.n	800cea6 <_raise_r+0x12>
 800ced6:	2100      	movs	r1, #0
 800ced8:	4620      	mov	r0, r4
 800ceda:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cede:	4798      	blx	r3
 800cee0:	2000      	movs	r0, #0
 800cee2:	e7e0      	b.n	800cea6 <_raise_r+0x12>

0800cee4 <raise>:
 800cee4:	4b02      	ldr	r3, [pc, #8]	@ (800cef0 <raise+0xc>)
 800cee6:	4601      	mov	r1, r0
 800cee8:	6818      	ldr	r0, [r3, #0]
 800ceea:	f7ff bfd3 	b.w	800ce94 <_raise_r>
 800ceee:	bf00      	nop
 800cef0:	2000046c 	.word	0x2000046c

0800cef4 <_kill_r>:
 800cef4:	b538      	push	{r3, r4, r5, lr}
 800cef6:	2300      	movs	r3, #0
 800cef8:	4d06      	ldr	r5, [pc, #24]	@ (800cf14 <_kill_r+0x20>)
 800cefa:	4604      	mov	r4, r0
 800cefc:	4608      	mov	r0, r1
 800cefe:	4611      	mov	r1, r2
 800cf00:	602b      	str	r3, [r5, #0]
 800cf02:	f7fb fe1e 	bl	8008b42 <_kill>
 800cf06:	1c43      	adds	r3, r0, #1
 800cf08:	d102      	bne.n	800cf10 <_kill_r+0x1c>
 800cf0a:	682b      	ldr	r3, [r5, #0]
 800cf0c:	b103      	cbz	r3, 800cf10 <_kill_r+0x1c>
 800cf0e:	6023      	str	r3, [r4, #0]
 800cf10:	bd38      	pop	{r3, r4, r5, pc}
 800cf12:	bf00      	nop
 800cf14:	200045e0 	.word	0x200045e0

0800cf18 <_getpid_r>:
 800cf18:	f7fb be0c 	b.w	8008b34 <_getpid>

0800cf1c <_malloc_usable_size_r>:
 800cf1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf20:	1f18      	subs	r0, r3, #4
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	bfbc      	itt	lt
 800cf26:	580b      	ldrlt	r3, [r1, r0]
 800cf28:	18c0      	addlt	r0, r0, r3
 800cf2a:	4770      	bx	lr

0800cf2c <__swhatbuf_r>:
 800cf2c:	b570      	push	{r4, r5, r6, lr}
 800cf2e:	460c      	mov	r4, r1
 800cf30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf34:	4615      	mov	r5, r2
 800cf36:	2900      	cmp	r1, #0
 800cf38:	461e      	mov	r6, r3
 800cf3a:	b096      	sub	sp, #88	@ 0x58
 800cf3c:	da0c      	bge.n	800cf58 <__swhatbuf_r+0x2c>
 800cf3e:	89a3      	ldrh	r3, [r4, #12]
 800cf40:	2100      	movs	r1, #0
 800cf42:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cf46:	bf14      	ite	ne
 800cf48:	2340      	movne	r3, #64	@ 0x40
 800cf4a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cf4e:	2000      	movs	r0, #0
 800cf50:	6031      	str	r1, [r6, #0]
 800cf52:	602b      	str	r3, [r5, #0]
 800cf54:	b016      	add	sp, #88	@ 0x58
 800cf56:	bd70      	pop	{r4, r5, r6, pc}
 800cf58:	466a      	mov	r2, sp
 800cf5a:	f000 f849 	bl	800cff0 <_fstat_r>
 800cf5e:	2800      	cmp	r0, #0
 800cf60:	dbed      	blt.n	800cf3e <__swhatbuf_r+0x12>
 800cf62:	9901      	ldr	r1, [sp, #4]
 800cf64:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cf68:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cf6c:	4259      	negs	r1, r3
 800cf6e:	4159      	adcs	r1, r3
 800cf70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf74:	e7eb      	b.n	800cf4e <__swhatbuf_r+0x22>

0800cf76 <__smakebuf_r>:
 800cf76:	898b      	ldrh	r3, [r1, #12]
 800cf78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf7a:	079d      	lsls	r5, r3, #30
 800cf7c:	4606      	mov	r6, r0
 800cf7e:	460c      	mov	r4, r1
 800cf80:	d507      	bpl.n	800cf92 <__smakebuf_r+0x1c>
 800cf82:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cf86:	6023      	str	r3, [r4, #0]
 800cf88:	6123      	str	r3, [r4, #16]
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	6163      	str	r3, [r4, #20]
 800cf8e:	b003      	add	sp, #12
 800cf90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf92:	466a      	mov	r2, sp
 800cf94:	ab01      	add	r3, sp, #4
 800cf96:	f7ff ffc9 	bl	800cf2c <__swhatbuf_r>
 800cf9a:	9f00      	ldr	r7, [sp, #0]
 800cf9c:	4605      	mov	r5, r0
 800cf9e:	4639      	mov	r1, r7
 800cfa0:	4630      	mov	r0, r6
 800cfa2:	f7ff f909 	bl	800c1b8 <_malloc_r>
 800cfa6:	b948      	cbnz	r0, 800cfbc <__smakebuf_r+0x46>
 800cfa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfac:	059a      	lsls	r2, r3, #22
 800cfae:	d4ee      	bmi.n	800cf8e <__smakebuf_r+0x18>
 800cfb0:	f023 0303 	bic.w	r3, r3, #3
 800cfb4:	f043 0302 	orr.w	r3, r3, #2
 800cfb8:	81a3      	strh	r3, [r4, #12]
 800cfba:	e7e2      	b.n	800cf82 <__smakebuf_r+0xc>
 800cfbc:	89a3      	ldrh	r3, [r4, #12]
 800cfbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cfc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfc6:	81a3      	strh	r3, [r4, #12]
 800cfc8:	9b01      	ldr	r3, [sp, #4]
 800cfca:	6020      	str	r0, [r4, #0]
 800cfcc:	b15b      	cbz	r3, 800cfe6 <__smakebuf_r+0x70>
 800cfce:	4630      	mov	r0, r6
 800cfd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfd4:	f000 f81e 	bl	800d014 <_isatty_r>
 800cfd8:	b128      	cbz	r0, 800cfe6 <__smakebuf_r+0x70>
 800cfda:	89a3      	ldrh	r3, [r4, #12]
 800cfdc:	f023 0303 	bic.w	r3, r3, #3
 800cfe0:	f043 0301 	orr.w	r3, r3, #1
 800cfe4:	81a3      	strh	r3, [r4, #12]
 800cfe6:	89a3      	ldrh	r3, [r4, #12]
 800cfe8:	431d      	orrs	r5, r3
 800cfea:	81a5      	strh	r5, [r4, #12]
 800cfec:	e7cf      	b.n	800cf8e <__smakebuf_r+0x18>
	...

0800cff0 <_fstat_r>:
 800cff0:	b538      	push	{r3, r4, r5, lr}
 800cff2:	2300      	movs	r3, #0
 800cff4:	4d06      	ldr	r5, [pc, #24]	@ (800d010 <_fstat_r+0x20>)
 800cff6:	4604      	mov	r4, r0
 800cff8:	4608      	mov	r0, r1
 800cffa:	4611      	mov	r1, r2
 800cffc:	602b      	str	r3, [r5, #0]
 800cffe:	f7fb fdff 	bl	8008c00 <_fstat>
 800d002:	1c43      	adds	r3, r0, #1
 800d004:	d102      	bne.n	800d00c <_fstat_r+0x1c>
 800d006:	682b      	ldr	r3, [r5, #0]
 800d008:	b103      	cbz	r3, 800d00c <_fstat_r+0x1c>
 800d00a:	6023      	str	r3, [r4, #0]
 800d00c:	bd38      	pop	{r3, r4, r5, pc}
 800d00e:	bf00      	nop
 800d010:	200045e0 	.word	0x200045e0

0800d014 <_isatty_r>:
 800d014:	b538      	push	{r3, r4, r5, lr}
 800d016:	2300      	movs	r3, #0
 800d018:	4d05      	ldr	r5, [pc, #20]	@ (800d030 <_isatty_r+0x1c>)
 800d01a:	4604      	mov	r4, r0
 800d01c:	4608      	mov	r0, r1
 800d01e:	602b      	str	r3, [r5, #0]
 800d020:	f7fb fdfd 	bl	8008c1e <_isatty>
 800d024:	1c43      	adds	r3, r0, #1
 800d026:	d102      	bne.n	800d02e <_isatty_r+0x1a>
 800d028:	682b      	ldr	r3, [r5, #0]
 800d02a:	b103      	cbz	r3, 800d02e <_isatty_r+0x1a>
 800d02c:	6023      	str	r3, [r4, #0]
 800d02e:	bd38      	pop	{r3, r4, r5, pc}
 800d030:	200045e0 	.word	0x200045e0

0800d034 <powf>:
 800d034:	b570      	push	{r4, r5, r6, lr}
 800d036:	460c      	mov	r4, r1
 800d038:	4606      	mov	r6, r0
 800d03a:	f000 fa43 	bl	800d4c4 <__ieee754_powf>
 800d03e:	4621      	mov	r1, r4
 800d040:	4605      	mov	r5, r0
 800d042:	4620      	mov	r0, r4
 800d044:	f7f3 fb68 	bl	8000718 <__aeabi_fcmpun>
 800d048:	bb68      	cbnz	r0, 800d0a6 <powf+0x72>
 800d04a:	2100      	movs	r1, #0
 800d04c:	4630      	mov	r0, r6
 800d04e:	f7f3 fb31 	bl	80006b4 <__aeabi_fcmpeq>
 800d052:	b190      	cbz	r0, 800d07a <powf+0x46>
 800d054:	2100      	movs	r1, #0
 800d056:	4620      	mov	r0, r4
 800d058:	f7f3 fb2c 	bl	80006b4 <__aeabi_fcmpeq>
 800d05c:	2800      	cmp	r0, #0
 800d05e:	d133      	bne.n	800d0c8 <powf+0x94>
 800d060:	4620      	mov	r0, r4
 800d062:	f000 f8c1 	bl	800d1e8 <finitef>
 800d066:	b1f0      	cbz	r0, 800d0a6 <powf+0x72>
 800d068:	2100      	movs	r1, #0
 800d06a:	4620      	mov	r0, r4
 800d06c:	f7f3 fb2c 	bl	80006c8 <__aeabi_fcmplt>
 800d070:	b1c8      	cbz	r0, 800d0a6 <powf+0x72>
 800d072:	f7fe ffd5 	bl	800c020 <__errno>
 800d076:	2322      	movs	r3, #34	@ 0x22
 800d078:	e014      	b.n	800d0a4 <powf+0x70>
 800d07a:	4628      	mov	r0, r5
 800d07c:	f000 f8b4 	bl	800d1e8 <finitef>
 800d080:	b998      	cbnz	r0, 800d0aa <powf+0x76>
 800d082:	4630      	mov	r0, r6
 800d084:	f000 f8b0 	bl	800d1e8 <finitef>
 800d088:	b178      	cbz	r0, 800d0aa <powf+0x76>
 800d08a:	4620      	mov	r0, r4
 800d08c:	f000 f8ac 	bl	800d1e8 <finitef>
 800d090:	b158      	cbz	r0, 800d0aa <powf+0x76>
 800d092:	4629      	mov	r1, r5
 800d094:	4628      	mov	r0, r5
 800d096:	f7f3 fb3f 	bl	8000718 <__aeabi_fcmpun>
 800d09a:	2800      	cmp	r0, #0
 800d09c:	d0e9      	beq.n	800d072 <powf+0x3e>
 800d09e:	f7fe ffbf 	bl	800c020 <__errno>
 800d0a2:	2321      	movs	r3, #33	@ 0x21
 800d0a4:	6003      	str	r3, [r0, #0]
 800d0a6:	4628      	mov	r0, r5
 800d0a8:	bd70      	pop	{r4, r5, r6, pc}
 800d0aa:	2100      	movs	r1, #0
 800d0ac:	4628      	mov	r0, r5
 800d0ae:	f7f3 fb01 	bl	80006b4 <__aeabi_fcmpeq>
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	d0f7      	beq.n	800d0a6 <powf+0x72>
 800d0b6:	4630      	mov	r0, r6
 800d0b8:	f000 f896 	bl	800d1e8 <finitef>
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	d0f2      	beq.n	800d0a6 <powf+0x72>
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	f000 f891 	bl	800d1e8 <finitef>
 800d0c6:	e7d3      	b.n	800d070 <powf+0x3c>
 800d0c8:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 800d0cc:	e7eb      	b.n	800d0a6 <powf+0x72>

0800d0ce <sqrtf>:
 800d0ce:	b538      	push	{r3, r4, r5, lr}
 800d0d0:	4605      	mov	r5, r0
 800d0d2:	f000 f891 	bl	800d1f8 <__ieee754_sqrtf>
 800d0d6:	4629      	mov	r1, r5
 800d0d8:	4604      	mov	r4, r0
 800d0da:	4628      	mov	r0, r5
 800d0dc:	f7f3 fb1c 	bl	8000718 <__aeabi_fcmpun>
 800d0e0:	b968      	cbnz	r0, 800d0fe <sqrtf+0x30>
 800d0e2:	2100      	movs	r1, #0
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	f7f3 faef 	bl	80006c8 <__aeabi_fcmplt>
 800d0ea:	b140      	cbz	r0, 800d0fe <sqrtf+0x30>
 800d0ec:	f7fe ff98 	bl	800c020 <__errno>
 800d0f0:	2321      	movs	r3, #33	@ 0x21
 800d0f2:	2100      	movs	r1, #0
 800d0f4:	6003      	str	r3, [r0, #0]
 800d0f6:	4608      	mov	r0, r1
 800d0f8:	f7f3 f9fc 	bl	80004f4 <__aeabi_fdiv>
 800d0fc:	4604      	mov	r4, r0
 800d0fe:	4620      	mov	r0, r4
 800d100:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d104 <cosf>:
 800d104:	b507      	push	{r0, r1, r2, lr}
 800d106:	4a1a      	ldr	r2, [pc, #104]	@ (800d170 <cosf+0x6c>)
 800d108:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800d10c:	4293      	cmp	r3, r2
 800d10e:	4601      	mov	r1, r0
 800d110:	d805      	bhi.n	800d11e <cosf+0x1a>
 800d112:	2100      	movs	r1, #0
 800d114:	b003      	add	sp, #12
 800d116:	f85d eb04 	ldr.w	lr, [sp], #4
 800d11a:	f000 b8dd 	b.w	800d2d8 <__kernel_cosf>
 800d11e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d122:	d304      	bcc.n	800d12e <cosf+0x2a>
 800d124:	f7f3 f828 	bl	8000178 <__aeabi_fsub>
 800d128:	b003      	add	sp, #12
 800d12a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d12e:	4669      	mov	r1, sp
 800d130:	f000 fd28 	bl	800db84 <__ieee754_rem_pio2f>
 800d134:	f000 0203 	and.w	r2, r0, #3
 800d138:	2a01      	cmp	r2, #1
 800d13a:	d007      	beq.n	800d14c <cosf+0x48>
 800d13c:	2a02      	cmp	r2, #2
 800d13e:	d00c      	beq.n	800d15a <cosf+0x56>
 800d140:	b982      	cbnz	r2, 800d164 <cosf+0x60>
 800d142:	9901      	ldr	r1, [sp, #4]
 800d144:	9800      	ldr	r0, [sp, #0]
 800d146:	f000 f8c7 	bl	800d2d8 <__kernel_cosf>
 800d14a:	e7ed      	b.n	800d128 <cosf+0x24>
 800d14c:	9901      	ldr	r1, [sp, #4]
 800d14e:	9800      	ldr	r0, [sp, #0]
 800d150:	f000 f942 	bl	800d3d8 <__kernel_sinf>
 800d154:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800d158:	e7e6      	b.n	800d128 <cosf+0x24>
 800d15a:	9901      	ldr	r1, [sp, #4]
 800d15c:	9800      	ldr	r0, [sp, #0]
 800d15e:	f000 f8bb 	bl	800d2d8 <__kernel_cosf>
 800d162:	e7f7      	b.n	800d154 <cosf+0x50>
 800d164:	2201      	movs	r2, #1
 800d166:	9901      	ldr	r1, [sp, #4]
 800d168:	9800      	ldr	r0, [sp, #0]
 800d16a:	f000 f935 	bl	800d3d8 <__kernel_sinf>
 800d16e:	e7db      	b.n	800d128 <cosf+0x24>
 800d170:	3f490fd8 	.word	0x3f490fd8

0800d174 <sinf>:
 800d174:	b507      	push	{r0, r1, r2, lr}
 800d176:	4a1b      	ldr	r2, [pc, #108]	@ (800d1e4 <sinf+0x70>)
 800d178:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800d17c:	4293      	cmp	r3, r2
 800d17e:	4601      	mov	r1, r0
 800d180:	d806      	bhi.n	800d190 <sinf+0x1c>
 800d182:	2200      	movs	r2, #0
 800d184:	2100      	movs	r1, #0
 800d186:	b003      	add	sp, #12
 800d188:	f85d eb04 	ldr.w	lr, [sp], #4
 800d18c:	f000 b924 	b.w	800d3d8 <__kernel_sinf>
 800d190:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d194:	d304      	bcc.n	800d1a0 <sinf+0x2c>
 800d196:	f7f2 ffef 	bl	8000178 <__aeabi_fsub>
 800d19a:	b003      	add	sp, #12
 800d19c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d1a0:	4669      	mov	r1, sp
 800d1a2:	f000 fcef 	bl	800db84 <__ieee754_rem_pio2f>
 800d1a6:	f000 0003 	and.w	r0, r0, #3
 800d1aa:	2801      	cmp	r0, #1
 800d1ac:	d008      	beq.n	800d1c0 <sinf+0x4c>
 800d1ae:	2802      	cmp	r0, #2
 800d1b0:	d00b      	beq.n	800d1ca <sinf+0x56>
 800d1b2:	b990      	cbnz	r0, 800d1da <sinf+0x66>
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	9901      	ldr	r1, [sp, #4]
 800d1b8:	9800      	ldr	r0, [sp, #0]
 800d1ba:	f000 f90d 	bl	800d3d8 <__kernel_sinf>
 800d1be:	e7ec      	b.n	800d19a <sinf+0x26>
 800d1c0:	9901      	ldr	r1, [sp, #4]
 800d1c2:	9800      	ldr	r0, [sp, #0]
 800d1c4:	f000 f888 	bl	800d2d8 <__kernel_cosf>
 800d1c8:	e7e7      	b.n	800d19a <sinf+0x26>
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	9901      	ldr	r1, [sp, #4]
 800d1ce:	9800      	ldr	r0, [sp, #0]
 800d1d0:	f000 f902 	bl	800d3d8 <__kernel_sinf>
 800d1d4:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800d1d8:	e7df      	b.n	800d19a <sinf+0x26>
 800d1da:	9901      	ldr	r1, [sp, #4]
 800d1dc:	9800      	ldr	r0, [sp, #0]
 800d1de:	f000 f87b 	bl	800d2d8 <__kernel_cosf>
 800d1e2:	e7f7      	b.n	800d1d4 <sinf+0x60>
 800d1e4:	3f490fd8 	.word	0x3f490fd8

0800d1e8 <finitef>:
 800d1e8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800d1ec:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800d1f0:	bfac      	ite	ge
 800d1f2:	2000      	movge	r0, #0
 800d1f4:	2001      	movlt	r0, #1
 800d1f6:	4770      	bx	lr

0800d1f8 <__ieee754_sqrtf>:
 800d1f8:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800d1fc:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d204:	4603      	mov	r3, r0
 800d206:	4604      	mov	r4, r0
 800d208:	d30a      	bcc.n	800d220 <__ieee754_sqrtf+0x28>
 800d20a:	4601      	mov	r1, r0
 800d20c:	f7f3 f8be 	bl	800038c <__aeabi_fmul>
 800d210:	4601      	mov	r1, r0
 800d212:	4620      	mov	r0, r4
 800d214:	f7f2 ffb2 	bl	800017c <__addsf3>
 800d218:	4604      	mov	r4, r0
 800d21a:	4620      	mov	r0, r4
 800d21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d220:	2a00      	cmp	r2, #0
 800d222:	d0fa      	beq.n	800d21a <__ieee754_sqrtf+0x22>
 800d224:	2800      	cmp	r0, #0
 800d226:	da06      	bge.n	800d236 <__ieee754_sqrtf+0x3e>
 800d228:	4601      	mov	r1, r0
 800d22a:	f7f2 ffa5 	bl	8000178 <__aeabi_fsub>
 800d22e:	4601      	mov	r1, r0
 800d230:	f7f3 f960 	bl	80004f4 <__aeabi_fdiv>
 800d234:	e7f0      	b.n	800d218 <__ieee754_sqrtf+0x20>
 800d236:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 800d23a:	d03c      	beq.n	800d2b6 <__ieee754_sqrtf+0xbe>
 800d23c:	15c2      	asrs	r2, r0, #23
 800d23e:	2400      	movs	r4, #0
 800d240:	2019      	movs	r0, #25
 800d242:	4626      	mov	r6, r4
 800d244:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800d248:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d24c:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 800d250:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d254:	07d2      	lsls	r2, r2, #31
 800d256:	bf58      	it	pl
 800d258:	005b      	lslpl	r3, r3, #1
 800d25a:	106d      	asrs	r5, r5, #1
 800d25c:	005b      	lsls	r3, r3, #1
 800d25e:	1872      	adds	r2, r6, r1
 800d260:	429a      	cmp	r2, r3
 800d262:	bfcf      	iteee	gt
 800d264:	461a      	movgt	r2, r3
 800d266:	1856      	addle	r6, r2, r1
 800d268:	1864      	addle	r4, r4, r1
 800d26a:	1a9a      	suble	r2, r3, r2
 800d26c:	3801      	subs	r0, #1
 800d26e:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800d272:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d276:	d1f2      	bne.n	800d25e <__ieee754_sqrtf+0x66>
 800d278:	b1ba      	cbz	r2, 800d2aa <__ieee754_sqrtf+0xb2>
 800d27a:	4e15      	ldr	r6, [pc, #84]	@ (800d2d0 <__ieee754_sqrtf+0xd8>)
 800d27c:	4f15      	ldr	r7, [pc, #84]	@ (800d2d4 <__ieee754_sqrtf+0xdc>)
 800d27e:	6830      	ldr	r0, [r6, #0]
 800d280:	6839      	ldr	r1, [r7, #0]
 800d282:	f7f2 ff79 	bl	8000178 <__aeabi_fsub>
 800d286:	f8d6 8000 	ldr.w	r8, [r6]
 800d28a:	4601      	mov	r1, r0
 800d28c:	4640      	mov	r0, r8
 800d28e:	f7f3 fa25 	bl	80006dc <__aeabi_fcmple>
 800d292:	b150      	cbz	r0, 800d2aa <__ieee754_sqrtf+0xb2>
 800d294:	6830      	ldr	r0, [r6, #0]
 800d296:	6839      	ldr	r1, [r7, #0]
 800d298:	f7f2 ff70 	bl	800017c <__addsf3>
 800d29c:	6836      	ldr	r6, [r6, #0]
 800d29e:	4601      	mov	r1, r0
 800d2a0:	4630      	mov	r0, r6
 800d2a2:	f7f3 fa11 	bl	80006c8 <__aeabi_fcmplt>
 800d2a6:	b170      	cbz	r0, 800d2c6 <__ieee754_sqrtf+0xce>
 800d2a8:	3402      	adds	r4, #2
 800d2aa:	1064      	asrs	r4, r4, #1
 800d2ac:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800d2b0:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800d2b4:	e7b1      	b.n	800d21a <__ieee754_sqrtf+0x22>
 800d2b6:	005b      	lsls	r3, r3, #1
 800d2b8:	0218      	lsls	r0, r3, #8
 800d2ba:	460a      	mov	r2, r1
 800d2bc:	f101 0101 	add.w	r1, r1, #1
 800d2c0:	d5f9      	bpl.n	800d2b6 <__ieee754_sqrtf+0xbe>
 800d2c2:	4252      	negs	r2, r2
 800d2c4:	e7bb      	b.n	800d23e <__ieee754_sqrtf+0x46>
 800d2c6:	3401      	adds	r4, #1
 800d2c8:	f024 0401 	bic.w	r4, r4, #1
 800d2cc:	e7ed      	b.n	800d2aa <__ieee754_sqrtf+0xb2>
 800d2ce:	bf00      	nop
 800d2d0:	0800ec70 	.word	0x0800ec70
 800d2d4:	0800ec6c 	.word	0x0800ec6c

0800d2d8 <__kernel_cosf>:
 800d2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2dc:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800d2e0:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 800d2e4:	4606      	mov	r6, r0
 800d2e6:	4688      	mov	r8, r1
 800d2e8:	d203      	bcs.n	800d2f2 <__kernel_cosf+0x1a>
 800d2ea:	f7f3 fa2b 	bl	8000744 <__aeabi_f2iz>
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	d05c      	beq.n	800d3ac <__kernel_cosf+0xd4>
 800d2f2:	4631      	mov	r1, r6
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	f7f3 f849 	bl	800038c <__aeabi_fmul>
 800d2fa:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800d2fe:	4604      	mov	r4, r0
 800d300:	f7f3 f844 	bl	800038c <__aeabi_fmul>
 800d304:	492b      	ldr	r1, [pc, #172]	@ (800d3b4 <__kernel_cosf+0xdc>)
 800d306:	4607      	mov	r7, r0
 800d308:	4620      	mov	r0, r4
 800d30a:	f7f3 f83f 	bl	800038c <__aeabi_fmul>
 800d30e:	492a      	ldr	r1, [pc, #168]	@ (800d3b8 <__kernel_cosf+0xe0>)
 800d310:	f7f2 ff34 	bl	800017c <__addsf3>
 800d314:	4621      	mov	r1, r4
 800d316:	f7f3 f839 	bl	800038c <__aeabi_fmul>
 800d31a:	4928      	ldr	r1, [pc, #160]	@ (800d3bc <__kernel_cosf+0xe4>)
 800d31c:	f7f2 ff2c 	bl	8000178 <__aeabi_fsub>
 800d320:	4621      	mov	r1, r4
 800d322:	f7f3 f833 	bl	800038c <__aeabi_fmul>
 800d326:	4926      	ldr	r1, [pc, #152]	@ (800d3c0 <__kernel_cosf+0xe8>)
 800d328:	f7f2 ff28 	bl	800017c <__addsf3>
 800d32c:	4621      	mov	r1, r4
 800d32e:	f7f3 f82d 	bl	800038c <__aeabi_fmul>
 800d332:	4924      	ldr	r1, [pc, #144]	@ (800d3c4 <__kernel_cosf+0xec>)
 800d334:	f7f2 ff20 	bl	8000178 <__aeabi_fsub>
 800d338:	4621      	mov	r1, r4
 800d33a:	f7f3 f827 	bl	800038c <__aeabi_fmul>
 800d33e:	4922      	ldr	r1, [pc, #136]	@ (800d3c8 <__kernel_cosf+0xf0>)
 800d340:	f7f2 ff1c 	bl	800017c <__addsf3>
 800d344:	4621      	mov	r1, r4
 800d346:	f7f3 f821 	bl	800038c <__aeabi_fmul>
 800d34a:	4621      	mov	r1, r4
 800d34c:	f7f3 f81e 	bl	800038c <__aeabi_fmul>
 800d350:	4641      	mov	r1, r8
 800d352:	4604      	mov	r4, r0
 800d354:	4630      	mov	r0, r6
 800d356:	f7f3 f819 	bl	800038c <__aeabi_fmul>
 800d35a:	4601      	mov	r1, r0
 800d35c:	4620      	mov	r0, r4
 800d35e:	f7f2 ff0b 	bl	8000178 <__aeabi_fsub>
 800d362:	4b1a      	ldr	r3, [pc, #104]	@ (800d3cc <__kernel_cosf+0xf4>)
 800d364:	4604      	mov	r4, r0
 800d366:	429d      	cmp	r5, r3
 800d368:	d80a      	bhi.n	800d380 <__kernel_cosf+0xa8>
 800d36a:	4601      	mov	r1, r0
 800d36c:	4638      	mov	r0, r7
 800d36e:	f7f2 ff03 	bl	8000178 <__aeabi_fsub>
 800d372:	4601      	mov	r1, r0
 800d374:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800d378:	f7f2 fefe 	bl	8000178 <__aeabi_fsub>
 800d37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d380:	4b13      	ldr	r3, [pc, #76]	@ (800d3d0 <__kernel_cosf+0xf8>)
 800d382:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800d386:	429d      	cmp	r5, r3
 800d388:	bf8c      	ite	hi
 800d38a:	4d12      	ldrhi	r5, [pc, #72]	@ (800d3d4 <__kernel_cosf+0xfc>)
 800d38c:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 800d390:	4629      	mov	r1, r5
 800d392:	f7f2 fef1 	bl	8000178 <__aeabi_fsub>
 800d396:	4629      	mov	r1, r5
 800d398:	4606      	mov	r6, r0
 800d39a:	4638      	mov	r0, r7
 800d39c:	f7f2 feec 	bl	8000178 <__aeabi_fsub>
 800d3a0:	4621      	mov	r1, r4
 800d3a2:	f7f2 fee9 	bl	8000178 <__aeabi_fsub>
 800d3a6:	4601      	mov	r1, r0
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	e7e5      	b.n	800d378 <__kernel_cosf+0xa0>
 800d3ac:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800d3b0:	e7e4      	b.n	800d37c <__kernel_cosf+0xa4>
 800d3b2:	bf00      	nop
 800d3b4:	ad47d74e 	.word	0xad47d74e
 800d3b8:	310f74f6 	.word	0x310f74f6
 800d3bc:	3493f27c 	.word	0x3493f27c
 800d3c0:	37d00d01 	.word	0x37d00d01
 800d3c4:	3ab60b61 	.word	0x3ab60b61
 800d3c8:	3d2aaaab 	.word	0x3d2aaaab
 800d3cc:	3e999999 	.word	0x3e999999
 800d3d0:	3f480000 	.word	0x3f480000
 800d3d4:	3e900000 	.word	0x3e900000

0800d3d8 <__kernel_sinf>:
 800d3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3dc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800d3e0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d3e4:	4604      	mov	r4, r0
 800d3e6:	460f      	mov	r7, r1
 800d3e8:	4691      	mov	r9, r2
 800d3ea:	d203      	bcs.n	800d3f4 <__kernel_sinf+0x1c>
 800d3ec:	f7f3 f9aa 	bl	8000744 <__aeabi_f2iz>
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	d035      	beq.n	800d460 <__kernel_sinf+0x88>
 800d3f4:	4621      	mov	r1, r4
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	f7f2 ffc8 	bl	800038c <__aeabi_fmul>
 800d3fc:	4605      	mov	r5, r0
 800d3fe:	4601      	mov	r1, r0
 800d400:	4620      	mov	r0, r4
 800d402:	f7f2 ffc3 	bl	800038c <__aeabi_fmul>
 800d406:	4929      	ldr	r1, [pc, #164]	@ (800d4ac <__kernel_sinf+0xd4>)
 800d408:	4606      	mov	r6, r0
 800d40a:	4628      	mov	r0, r5
 800d40c:	f7f2 ffbe 	bl	800038c <__aeabi_fmul>
 800d410:	4927      	ldr	r1, [pc, #156]	@ (800d4b0 <__kernel_sinf+0xd8>)
 800d412:	f7f2 feb1 	bl	8000178 <__aeabi_fsub>
 800d416:	4629      	mov	r1, r5
 800d418:	f7f2 ffb8 	bl	800038c <__aeabi_fmul>
 800d41c:	4925      	ldr	r1, [pc, #148]	@ (800d4b4 <__kernel_sinf+0xdc>)
 800d41e:	f7f2 fead 	bl	800017c <__addsf3>
 800d422:	4629      	mov	r1, r5
 800d424:	f7f2 ffb2 	bl	800038c <__aeabi_fmul>
 800d428:	4923      	ldr	r1, [pc, #140]	@ (800d4b8 <__kernel_sinf+0xe0>)
 800d42a:	f7f2 fea5 	bl	8000178 <__aeabi_fsub>
 800d42e:	4629      	mov	r1, r5
 800d430:	f7f2 ffac 	bl	800038c <__aeabi_fmul>
 800d434:	4921      	ldr	r1, [pc, #132]	@ (800d4bc <__kernel_sinf+0xe4>)
 800d436:	f7f2 fea1 	bl	800017c <__addsf3>
 800d43a:	4680      	mov	r8, r0
 800d43c:	f1b9 0f00 	cmp.w	r9, #0
 800d440:	d111      	bne.n	800d466 <__kernel_sinf+0x8e>
 800d442:	4601      	mov	r1, r0
 800d444:	4628      	mov	r0, r5
 800d446:	f7f2 ffa1 	bl	800038c <__aeabi_fmul>
 800d44a:	491d      	ldr	r1, [pc, #116]	@ (800d4c0 <__kernel_sinf+0xe8>)
 800d44c:	f7f2 fe94 	bl	8000178 <__aeabi_fsub>
 800d450:	4631      	mov	r1, r6
 800d452:	f7f2 ff9b 	bl	800038c <__aeabi_fmul>
 800d456:	4601      	mov	r1, r0
 800d458:	4620      	mov	r0, r4
 800d45a:	f7f2 fe8f 	bl	800017c <__addsf3>
 800d45e:	4604      	mov	r4, r0
 800d460:	4620      	mov	r0, r4
 800d462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d466:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800d46a:	4638      	mov	r0, r7
 800d46c:	f7f2 ff8e 	bl	800038c <__aeabi_fmul>
 800d470:	4641      	mov	r1, r8
 800d472:	4681      	mov	r9, r0
 800d474:	4630      	mov	r0, r6
 800d476:	f7f2 ff89 	bl	800038c <__aeabi_fmul>
 800d47a:	4601      	mov	r1, r0
 800d47c:	4648      	mov	r0, r9
 800d47e:	f7f2 fe7b 	bl	8000178 <__aeabi_fsub>
 800d482:	4629      	mov	r1, r5
 800d484:	f7f2 ff82 	bl	800038c <__aeabi_fmul>
 800d488:	4639      	mov	r1, r7
 800d48a:	f7f2 fe75 	bl	8000178 <__aeabi_fsub>
 800d48e:	490c      	ldr	r1, [pc, #48]	@ (800d4c0 <__kernel_sinf+0xe8>)
 800d490:	4605      	mov	r5, r0
 800d492:	4630      	mov	r0, r6
 800d494:	f7f2 ff7a 	bl	800038c <__aeabi_fmul>
 800d498:	4601      	mov	r1, r0
 800d49a:	4628      	mov	r0, r5
 800d49c:	f7f2 fe6e 	bl	800017c <__addsf3>
 800d4a0:	4601      	mov	r1, r0
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	f7f2 fe68 	bl	8000178 <__aeabi_fsub>
 800d4a8:	e7d9      	b.n	800d45e <__kernel_sinf+0x86>
 800d4aa:	bf00      	nop
 800d4ac:	2f2ec9d3 	.word	0x2f2ec9d3
 800d4b0:	32d72f34 	.word	0x32d72f34
 800d4b4:	3638ef1b 	.word	0x3638ef1b
 800d4b8:	39500d01 	.word	0x39500d01
 800d4bc:	3c088889 	.word	0x3c088889
 800d4c0:	3e2aaaab 	.word	0x3e2aaaab

0800d4c4 <__ieee754_powf>:
 800d4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c8:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 800d4cc:	4681      	mov	r9, r0
 800d4ce:	460f      	mov	r7, r1
 800d4d0:	4606      	mov	r6, r0
 800d4d2:	460c      	mov	r4, r1
 800d4d4:	b087      	sub	sp, #28
 800d4d6:	d10c      	bne.n	800d4f2 <__ieee754_powf+0x2e>
 800d4d8:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 800d4dc:	0076      	lsls	r6, r6, #1
 800d4de:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800d4e2:	f240 8310 	bls.w	800db06 <__ieee754_powf+0x642>
 800d4e6:	4639      	mov	r1, r7
 800d4e8:	4648      	mov	r0, r9
 800d4ea:	f7f2 fe47 	bl	800017c <__addsf3>
 800d4ee:	4601      	mov	r1, r0
 800d4f0:	e043      	b.n	800d57a <__ieee754_powf+0xb6>
 800d4f2:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800d4f6:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800d4fa:	d802      	bhi.n	800d502 <__ieee754_powf+0x3e>
 800d4fc:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800d500:	d908      	bls.n	800d514 <__ieee754_powf+0x50>
 800d502:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800d506:	d1ee      	bne.n	800d4e6 <__ieee754_powf+0x22>
 800d508:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800d50c:	0064      	lsls	r4, r4, #1
 800d50e:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800d512:	e7e6      	b.n	800d4e2 <__ieee754_powf+0x1e>
 800d514:	2800      	cmp	r0, #0
 800d516:	da1f      	bge.n	800d558 <__ieee754_powf+0x94>
 800d518:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 800d51c:	f080 82f8 	bcs.w	800db10 <__ieee754_powf+0x64c>
 800d520:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800d524:	d32f      	bcc.n	800d586 <__ieee754_powf+0xc2>
 800d526:	ea4f 53eb 	mov.w	r3, fp, asr #23
 800d52a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800d52e:	fa4b f503 	asr.w	r5, fp, r3
 800d532:	fa05 f303 	lsl.w	r3, r5, r3
 800d536:	455b      	cmp	r3, fp
 800d538:	d123      	bne.n	800d582 <__ieee754_powf+0xbe>
 800d53a:	f005 0501 	and.w	r5, r5, #1
 800d53e:	f1c5 0502 	rsb	r5, r5, #2
 800d542:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800d546:	d11f      	bne.n	800d588 <__ieee754_powf+0xc4>
 800d548:	2c00      	cmp	r4, #0
 800d54a:	4649      	mov	r1, r9
 800d54c:	da15      	bge.n	800d57a <__ieee754_powf+0xb6>
 800d54e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800d552:	f7f2 ffcf 	bl	80004f4 <__aeabi_fdiv>
 800d556:	e7ca      	b.n	800d4ee <__ieee754_powf+0x2a>
 800d558:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800d55c:	d111      	bne.n	800d582 <__ieee754_powf+0xbe>
 800d55e:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800d562:	f000 82d0 	beq.w	800db06 <__ieee754_powf+0x642>
 800d566:	d904      	bls.n	800d572 <__ieee754_powf+0xae>
 800d568:	2c00      	cmp	r4, #0
 800d56a:	f280 82cf 	bge.w	800db0c <__ieee754_powf+0x648>
 800d56e:	2100      	movs	r1, #0
 800d570:	e003      	b.n	800d57a <__ieee754_powf+0xb6>
 800d572:	2c00      	cmp	r4, #0
 800d574:	dafb      	bge.n	800d56e <__ieee754_powf+0xaa>
 800d576:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800d57a:	4608      	mov	r0, r1
 800d57c:	b007      	add	sp, #28
 800d57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d582:	2500      	movs	r5, #0
 800d584:	e7dd      	b.n	800d542 <__ieee754_powf+0x7e>
 800d586:	2500      	movs	r5, #0
 800d588:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800d58c:	d104      	bne.n	800d598 <__ieee754_powf+0xd4>
 800d58e:	4649      	mov	r1, r9
 800d590:	4648      	mov	r0, r9
 800d592:	f7f2 fefb 	bl	800038c <__aeabi_fmul>
 800d596:	e7aa      	b.n	800d4ee <__ieee754_powf+0x2a>
 800d598:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800d59c:	f040 82bd 	bne.w	800db1a <__ieee754_powf+0x656>
 800d5a0:	2e00      	cmp	r6, #0
 800d5a2:	f2c0 82ba 	blt.w	800db1a <__ieee754_powf+0x656>
 800d5a6:	4648      	mov	r0, r9
 800d5a8:	b007      	add	sp, #28
 800d5aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ae:	f7ff be23 	b.w	800d1f8 <__ieee754_sqrtf>
 800d5b2:	2d01      	cmp	r5, #1
 800d5b4:	d1e1      	bne.n	800d57a <__ieee754_powf+0xb6>
 800d5b6:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800d5ba:	e798      	b.n	800d4ee <__ieee754_powf+0x2a>
 800d5bc:	0ff3      	lsrs	r3, r6, #31
 800d5be:	3b01      	subs	r3, #1
 800d5c0:	9303      	str	r3, [sp, #12]
 800d5c2:	432b      	orrs	r3, r5
 800d5c4:	d101      	bne.n	800d5ca <__ieee754_powf+0x106>
 800d5c6:	4649      	mov	r1, r9
 800d5c8:	e2c5      	b.n	800db56 <__ieee754_powf+0x692>
 800d5ca:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 800d5ce:	f240 809b 	bls.w	800d708 <__ieee754_powf+0x244>
 800d5d2:	4b46      	ldr	r3, [pc, #280]	@ (800d6ec <__ieee754_powf+0x228>)
 800d5d4:	4598      	cmp	r8, r3
 800d5d6:	d807      	bhi.n	800d5e8 <__ieee754_powf+0x124>
 800d5d8:	2c00      	cmp	r4, #0
 800d5da:	da0a      	bge.n	800d5f2 <__ieee754_powf+0x12e>
 800d5dc:	2000      	movs	r0, #0
 800d5de:	b007      	add	sp, #28
 800d5e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e4:	f000 bc9d 	b.w	800df22 <__math_oflowf>
 800d5e8:	4b41      	ldr	r3, [pc, #260]	@ (800d6f0 <__ieee754_powf+0x22c>)
 800d5ea:	4598      	cmp	r8, r3
 800d5ec:	d907      	bls.n	800d5fe <__ieee754_powf+0x13a>
 800d5ee:	2c00      	cmp	r4, #0
 800d5f0:	dcf4      	bgt.n	800d5dc <__ieee754_powf+0x118>
 800d5f2:	2000      	movs	r0, #0
 800d5f4:	b007      	add	sp, #28
 800d5f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5fa:	f000 bc8e 	b.w	800df1a <__math_uflowf>
 800d5fe:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800d602:	f7f2 fdb9 	bl	8000178 <__aeabi_fsub>
 800d606:	493b      	ldr	r1, [pc, #236]	@ (800d6f4 <__ieee754_powf+0x230>)
 800d608:	4606      	mov	r6, r0
 800d60a:	f7f2 febf 	bl	800038c <__aeabi_fmul>
 800d60e:	493a      	ldr	r1, [pc, #232]	@ (800d6f8 <__ieee754_powf+0x234>)
 800d610:	4680      	mov	r8, r0
 800d612:	4630      	mov	r0, r6
 800d614:	f7f2 feba 	bl	800038c <__aeabi_fmul>
 800d618:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800d61c:	4681      	mov	r9, r0
 800d61e:	4630      	mov	r0, r6
 800d620:	f7f2 feb4 	bl	800038c <__aeabi_fmul>
 800d624:	4601      	mov	r1, r0
 800d626:	4835      	ldr	r0, [pc, #212]	@ (800d6fc <__ieee754_powf+0x238>)
 800d628:	f7f2 fda6 	bl	8000178 <__aeabi_fsub>
 800d62c:	4631      	mov	r1, r6
 800d62e:	f7f2 fead 	bl	800038c <__aeabi_fmul>
 800d632:	4601      	mov	r1, r0
 800d634:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800d638:	f7f2 fd9e 	bl	8000178 <__aeabi_fsub>
 800d63c:	4631      	mov	r1, r6
 800d63e:	4682      	mov	sl, r0
 800d640:	4630      	mov	r0, r6
 800d642:	f7f2 fea3 	bl	800038c <__aeabi_fmul>
 800d646:	4601      	mov	r1, r0
 800d648:	4650      	mov	r0, sl
 800d64a:	f7f2 fe9f 	bl	800038c <__aeabi_fmul>
 800d64e:	492c      	ldr	r1, [pc, #176]	@ (800d700 <__ieee754_powf+0x23c>)
 800d650:	f7f2 fe9c 	bl	800038c <__aeabi_fmul>
 800d654:	4601      	mov	r1, r0
 800d656:	4648      	mov	r0, r9
 800d658:	f7f2 fd8e 	bl	8000178 <__aeabi_fsub>
 800d65c:	4601      	mov	r1, r0
 800d65e:	4606      	mov	r6, r0
 800d660:	4640      	mov	r0, r8
 800d662:	f7f2 fd8b 	bl	800017c <__addsf3>
 800d666:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800d66a:	f02b 0b0f 	bic.w	fp, fp, #15
 800d66e:	4641      	mov	r1, r8
 800d670:	4658      	mov	r0, fp
 800d672:	f7f2 fd81 	bl	8000178 <__aeabi_fsub>
 800d676:	4601      	mov	r1, r0
 800d678:	4630      	mov	r0, r6
 800d67a:	f7f2 fd7d 	bl	8000178 <__aeabi_fsub>
 800d67e:	9b03      	ldr	r3, [sp, #12]
 800d680:	3d01      	subs	r5, #1
 800d682:	f36f 040b 	bfc	r4, #0, #12
 800d686:	431d      	orrs	r5, r3
 800d688:	4606      	mov	r6, r0
 800d68a:	4621      	mov	r1, r4
 800d68c:	4638      	mov	r0, r7
 800d68e:	bf14      	ite	ne
 800d690:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 800d694:	4d1b      	ldreq	r5, [pc, #108]	@ (800d704 <__ieee754_powf+0x240>)
 800d696:	f7f2 fd6f 	bl	8000178 <__aeabi_fsub>
 800d69a:	4659      	mov	r1, fp
 800d69c:	f7f2 fe76 	bl	800038c <__aeabi_fmul>
 800d6a0:	4639      	mov	r1, r7
 800d6a2:	4680      	mov	r8, r0
 800d6a4:	4630      	mov	r0, r6
 800d6a6:	f7f2 fe71 	bl	800038c <__aeabi_fmul>
 800d6aa:	4601      	mov	r1, r0
 800d6ac:	4640      	mov	r0, r8
 800d6ae:	f7f2 fd65 	bl	800017c <__addsf3>
 800d6b2:	4621      	mov	r1, r4
 800d6b4:	4606      	mov	r6, r0
 800d6b6:	4658      	mov	r0, fp
 800d6b8:	f7f2 fe68 	bl	800038c <__aeabi_fmul>
 800d6bc:	4601      	mov	r1, r0
 800d6be:	4607      	mov	r7, r0
 800d6c0:	4630      	mov	r0, r6
 800d6c2:	f7f2 fd5b 	bl	800017c <__addsf3>
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	4604      	mov	r4, r0
 800d6ca:	4680      	mov	r8, r0
 800d6cc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800d6d0:	f340 813f 	ble.w	800d952 <__ieee754_powf+0x48e>
 800d6d4:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800d6d8:	f240 8128 	bls.w	800d92c <__ieee754_powf+0x468>
 800d6dc:	2100      	movs	r1, #0
 800d6de:	4628      	mov	r0, r5
 800d6e0:	f7f2 fff2 	bl	80006c8 <__aeabi_fcmplt>
 800d6e4:	3800      	subs	r0, #0
 800d6e6:	bf18      	it	ne
 800d6e8:	2001      	movne	r0, #1
 800d6ea:	e778      	b.n	800d5de <__ieee754_powf+0x11a>
 800d6ec:	3f7ffff3 	.word	0x3f7ffff3
 800d6f0:	3f800007 	.word	0x3f800007
 800d6f4:	3fb8aa00 	.word	0x3fb8aa00
 800d6f8:	36eca570 	.word	0x36eca570
 800d6fc:	3eaaaaab 	.word	0x3eaaaaab
 800d700:	3fb8aa3b 	.word	0x3fb8aa3b
 800d704:	bf800000 	.word	0xbf800000
 800d708:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800d70c:	f040 810a 	bne.w	800d924 <__ieee754_powf+0x460>
 800d710:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 800d714:	f7f2 fe3a 	bl	800038c <__aeabi_fmul>
 800d718:	f06f 0217 	mvn.w	r2, #23
 800d71c:	4682      	mov	sl, r0
 800d71e:	ea4f 53ea 	mov.w	r3, sl, asr #23
 800d722:	3b7f      	subs	r3, #127	@ 0x7f
 800d724:	441a      	add	r2, r3
 800d726:	4b95      	ldr	r3, [pc, #596]	@ (800d97c <__ieee754_powf+0x4b8>)
 800d728:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 800d72c:	459a      	cmp	sl, r3
 800d72e:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 800d732:	dd06      	ble.n	800d742 <__ieee754_powf+0x27e>
 800d734:	4b92      	ldr	r3, [pc, #584]	@ (800d980 <__ieee754_powf+0x4bc>)
 800d736:	459a      	cmp	sl, r3
 800d738:	f340 80f6 	ble.w	800d928 <__ieee754_powf+0x464>
 800d73c:	3201      	adds	r2, #1
 800d73e:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 800d742:	2300      	movs	r3, #0
 800d744:	9301      	str	r3, [sp, #4]
 800d746:	9205      	str	r2, [sp, #20]
 800d748:	4b8e      	ldr	r3, [pc, #568]	@ (800d984 <__ieee754_powf+0x4c0>)
 800d74a:	9a01      	ldr	r2, [sp, #4]
 800d74c:	4630      	mov	r0, r6
 800d74e:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 800d752:	46b2      	mov	sl, r6
 800d754:	4659      	mov	r1, fp
 800d756:	f7f2 fd0f 	bl	8000178 <__aeabi_fsub>
 800d75a:	4631      	mov	r1, r6
 800d75c:	4681      	mov	r9, r0
 800d75e:	4658      	mov	r0, fp
 800d760:	f7f2 fd0c 	bl	800017c <__addsf3>
 800d764:	4601      	mov	r1, r0
 800d766:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800d76a:	f7f2 fec3 	bl	80004f4 <__aeabi_fdiv>
 800d76e:	4601      	mov	r1, r0
 800d770:	9004      	str	r0, [sp, #16]
 800d772:	4648      	mov	r0, r9
 800d774:	f7f2 fe0a 	bl	800038c <__aeabi_fmul>
 800d778:	9002      	str	r0, [sp, #8]
 800d77a:	9b02      	ldr	r3, [sp, #8]
 800d77c:	1076      	asrs	r6, r6, #1
 800d77e:	f36f 030b 	bfc	r3, #0, #12
 800d782:	4698      	mov	r8, r3
 800d784:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 800d788:	9b01      	ldr	r3, [sp, #4]
 800d78a:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 800d78e:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 800d792:	4631      	mov	r1, r6
 800d794:	4640      	mov	r0, r8
 800d796:	f7f2 fdf9 	bl	800038c <__aeabi_fmul>
 800d79a:	4601      	mov	r1, r0
 800d79c:	4648      	mov	r0, r9
 800d79e:	f7f2 fceb 	bl	8000178 <__aeabi_fsub>
 800d7a2:	4659      	mov	r1, fp
 800d7a4:	4681      	mov	r9, r0
 800d7a6:	4630      	mov	r0, r6
 800d7a8:	f7f2 fce6 	bl	8000178 <__aeabi_fsub>
 800d7ac:	4601      	mov	r1, r0
 800d7ae:	4650      	mov	r0, sl
 800d7b0:	f7f2 fce2 	bl	8000178 <__aeabi_fsub>
 800d7b4:	4641      	mov	r1, r8
 800d7b6:	f7f2 fde9 	bl	800038c <__aeabi_fmul>
 800d7ba:	4601      	mov	r1, r0
 800d7bc:	4648      	mov	r0, r9
 800d7be:	f7f2 fcdb 	bl	8000178 <__aeabi_fsub>
 800d7c2:	9b04      	ldr	r3, [sp, #16]
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	f7f2 fde1 	bl	800038c <__aeabi_fmul>
 800d7ca:	9902      	ldr	r1, [sp, #8]
 800d7cc:	4683      	mov	fp, r0
 800d7ce:	4608      	mov	r0, r1
 800d7d0:	f7f2 fddc 	bl	800038c <__aeabi_fmul>
 800d7d4:	4606      	mov	r6, r0
 800d7d6:	496c      	ldr	r1, [pc, #432]	@ (800d988 <__ieee754_powf+0x4c4>)
 800d7d8:	f7f2 fdd8 	bl	800038c <__aeabi_fmul>
 800d7dc:	496b      	ldr	r1, [pc, #428]	@ (800d98c <__ieee754_powf+0x4c8>)
 800d7de:	f7f2 fccd 	bl	800017c <__addsf3>
 800d7e2:	4631      	mov	r1, r6
 800d7e4:	f7f2 fdd2 	bl	800038c <__aeabi_fmul>
 800d7e8:	4969      	ldr	r1, [pc, #420]	@ (800d990 <__ieee754_powf+0x4cc>)
 800d7ea:	f7f2 fcc7 	bl	800017c <__addsf3>
 800d7ee:	4631      	mov	r1, r6
 800d7f0:	f7f2 fdcc 	bl	800038c <__aeabi_fmul>
 800d7f4:	4967      	ldr	r1, [pc, #412]	@ (800d994 <__ieee754_powf+0x4d0>)
 800d7f6:	f7f2 fcc1 	bl	800017c <__addsf3>
 800d7fa:	4631      	mov	r1, r6
 800d7fc:	f7f2 fdc6 	bl	800038c <__aeabi_fmul>
 800d800:	4965      	ldr	r1, [pc, #404]	@ (800d998 <__ieee754_powf+0x4d4>)
 800d802:	f7f2 fcbb 	bl	800017c <__addsf3>
 800d806:	4631      	mov	r1, r6
 800d808:	f7f2 fdc0 	bl	800038c <__aeabi_fmul>
 800d80c:	4963      	ldr	r1, [pc, #396]	@ (800d99c <__ieee754_powf+0x4d8>)
 800d80e:	f7f2 fcb5 	bl	800017c <__addsf3>
 800d812:	4631      	mov	r1, r6
 800d814:	4681      	mov	r9, r0
 800d816:	4630      	mov	r0, r6
 800d818:	f7f2 fdb8 	bl	800038c <__aeabi_fmul>
 800d81c:	4601      	mov	r1, r0
 800d81e:	4648      	mov	r0, r9
 800d820:	f7f2 fdb4 	bl	800038c <__aeabi_fmul>
 800d824:	4606      	mov	r6, r0
 800d826:	4641      	mov	r1, r8
 800d828:	9802      	ldr	r0, [sp, #8]
 800d82a:	f7f2 fca7 	bl	800017c <__addsf3>
 800d82e:	4659      	mov	r1, fp
 800d830:	f7f2 fdac 	bl	800038c <__aeabi_fmul>
 800d834:	4631      	mov	r1, r6
 800d836:	f7f2 fca1 	bl	800017c <__addsf3>
 800d83a:	4641      	mov	r1, r8
 800d83c:	4681      	mov	r9, r0
 800d83e:	4640      	mov	r0, r8
 800d840:	f7f2 fda4 	bl	800038c <__aeabi_fmul>
 800d844:	4956      	ldr	r1, [pc, #344]	@ (800d9a0 <__ieee754_powf+0x4dc>)
 800d846:	4682      	mov	sl, r0
 800d848:	f7f2 fc98 	bl	800017c <__addsf3>
 800d84c:	4649      	mov	r1, r9
 800d84e:	f7f2 fc95 	bl	800017c <__addsf3>
 800d852:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800d856:	f026 060f 	bic.w	r6, r6, #15
 800d85a:	4631      	mov	r1, r6
 800d85c:	4640      	mov	r0, r8
 800d85e:	f7f2 fd95 	bl	800038c <__aeabi_fmul>
 800d862:	494f      	ldr	r1, [pc, #316]	@ (800d9a0 <__ieee754_powf+0x4dc>)
 800d864:	4680      	mov	r8, r0
 800d866:	4630      	mov	r0, r6
 800d868:	f7f2 fc86 	bl	8000178 <__aeabi_fsub>
 800d86c:	4651      	mov	r1, sl
 800d86e:	f7f2 fc83 	bl	8000178 <__aeabi_fsub>
 800d872:	4601      	mov	r1, r0
 800d874:	4648      	mov	r0, r9
 800d876:	f7f2 fc7f 	bl	8000178 <__aeabi_fsub>
 800d87a:	9902      	ldr	r1, [sp, #8]
 800d87c:	f7f2 fd86 	bl	800038c <__aeabi_fmul>
 800d880:	4631      	mov	r1, r6
 800d882:	4681      	mov	r9, r0
 800d884:	4658      	mov	r0, fp
 800d886:	f7f2 fd81 	bl	800038c <__aeabi_fmul>
 800d88a:	4601      	mov	r1, r0
 800d88c:	4648      	mov	r0, r9
 800d88e:	f7f2 fc75 	bl	800017c <__addsf3>
 800d892:	4682      	mov	sl, r0
 800d894:	4601      	mov	r1, r0
 800d896:	4640      	mov	r0, r8
 800d898:	f7f2 fc70 	bl	800017c <__addsf3>
 800d89c:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800d8a0:	f026 060f 	bic.w	r6, r6, #15
 800d8a4:	4630      	mov	r0, r6
 800d8a6:	493f      	ldr	r1, [pc, #252]	@ (800d9a4 <__ieee754_powf+0x4e0>)
 800d8a8:	f7f2 fd70 	bl	800038c <__aeabi_fmul>
 800d8ac:	4641      	mov	r1, r8
 800d8ae:	4681      	mov	r9, r0
 800d8b0:	4630      	mov	r0, r6
 800d8b2:	f7f2 fc61 	bl	8000178 <__aeabi_fsub>
 800d8b6:	4601      	mov	r1, r0
 800d8b8:	4650      	mov	r0, sl
 800d8ba:	f7f2 fc5d 	bl	8000178 <__aeabi_fsub>
 800d8be:	493a      	ldr	r1, [pc, #232]	@ (800d9a8 <__ieee754_powf+0x4e4>)
 800d8c0:	f7f2 fd64 	bl	800038c <__aeabi_fmul>
 800d8c4:	4939      	ldr	r1, [pc, #228]	@ (800d9ac <__ieee754_powf+0x4e8>)
 800d8c6:	4680      	mov	r8, r0
 800d8c8:	4630      	mov	r0, r6
 800d8ca:	f7f2 fd5f 	bl	800038c <__aeabi_fmul>
 800d8ce:	4601      	mov	r1, r0
 800d8d0:	4640      	mov	r0, r8
 800d8d2:	f7f2 fc53 	bl	800017c <__addsf3>
 800d8d6:	4b36      	ldr	r3, [pc, #216]	@ (800d9b0 <__ieee754_powf+0x4ec>)
 800d8d8:	9a01      	ldr	r2, [sp, #4]
 800d8da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d8de:	f7f2 fc4d 	bl	800017c <__addsf3>
 800d8e2:	9a05      	ldr	r2, [sp, #20]
 800d8e4:	4606      	mov	r6, r0
 800d8e6:	4610      	mov	r0, r2
 800d8e8:	f7f2 fcfc 	bl	80002e4 <__aeabi_i2f>
 800d8ec:	4680      	mov	r8, r0
 800d8ee:	4b31      	ldr	r3, [pc, #196]	@ (800d9b4 <__ieee754_powf+0x4f0>)
 800d8f0:	9a01      	ldr	r2, [sp, #4]
 800d8f2:	4631      	mov	r1, r6
 800d8f4:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 800d8f8:	4648      	mov	r0, r9
 800d8fa:	f7f2 fc3f 	bl	800017c <__addsf3>
 800d8fe:	4651      	mov	r1, sl
 800d900:	f7f2 fc3c 	bl	800017c <__addsf3>
 800d904:	4641      	mov	r1, r8
 800d906:	f7f2 fc39 	bl	800017c <__addsf3>
 800d90a:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800d90e:	f02b 0b0f 	bic.w	fp, fp, #15
 800d912:	4641      	mov	r1, r8
 800d914:	4658      	mov	r0, fp
 800d916:	f7f2 fc2f 	bl	8000178 <__aeabi_fsub>
 800d91a:	4651      	mov	r1, sl
 800d91c:	f7f2 fc2c 	bl	8000178 <__aeabi_fsub>
 800d920:	4649      	mov	r1, r9
 800d922:	e6a6      	b.n	800d672 <__ieee754_powf+0x1ae>
 800d924:	2200      	movs	r2, #0
 800d926:	e6fa      	b.n	800d71e <__ieee754_powf+0x25a>
 800d928:	2301      	movs	r3, #1
 800d92a:	e70b      	b.n	800d744 <__ieee754_powf+0x280>
 800d92c:	d148      	bne.n	800d9c0 <__ieee754_powf+0x4fc>
 800d92e:	4922      	ldr	r1, [pc, #136]	@ (800d9b8 <__ieee754_powf+0x4f4>)
 800d930:	4630      	mov	r0, r6
 800d932:	f7f2 fc23 	bl	800017c <__addsf3>
 800d936:	4639      	mov	r1, r7
 800d938:	4681      	mov	r9, r0
 800d93a:	4620      	mov	r0, r4
 800d93c:	f7f2 fc1c 	bl	8000178 <__aeabi_fsub>
 800d940:	4601      	mov	r1, r0
 800d942:	4648      	mov	r0, r9
 800d944:	f7f2 fede 	bl	8000704 <__aeabi_fcmpgt>
 800d948:	2800      	cmp	r0, #0
 800d94a:	f47f aec7 	bne.w	800d6dc <__ieee754_powf+0x218>
 800d94e:	2386      	movs	r3, #134	@ 0x86
 800d950:	e03b      	b.n	800d9ca <__ieee754_powf+0x506>
 800d952:	4a1a      	ldr	r2, [pc, #104]	@ (800d9bc <__ieee754_powf+0x4f8>)
 800d954:	4293      	cmp	r3, r2
 800d956:	d907      	bls.n	800d968 <__ieee754_powf+0x4a4>
 800d958:	2100      	movs	r1, #0
 800d95a:	4628      	mov	r0, r5
 800d95c:	f7f2 feb4 	bl	80006c8 <__aeabi_fcmplt>
 800d960:	3800      	subs	r0, #0
 800d962:	bf18      	it	ne
 800d964:	2001      	movne	r0, #1
 800d966:	e645      	b.n	800d5f4 <__ieee754_powf+0x130>
 800d968:	d12a      	bne.n	800d9c0 <__ieee754_powf+0x4fc>
 800d96a:	4639      	mov	r1, r7
 800d96c:	f7f2 fc04 	bl	8000178 <__aeabi_fsub>
 800d970:	4631      	mov	r1, r6
 800d972:	f7f2 febd 	bl	80006f0 <__aeabi_fcmpge>
 800d976:	2800      	cmp	r0, #0
 800d978:	d0e9      	beq.n	800d94e <__ieee754_powf+0x48a>
 800d97a:	e7ed      	b.n	800d958 <__ieee754_powf+0x494>
 800d97c:	001cc471 	.word	0x001cc471
 800d980:	005db3d6 	.word	0x005db3d6
 800d984:	0800ec84 	.word	0x0800ec84
 800d988:	3e53f142 	.word	0x3e53f142
 800d98c:	3e6c3255 	.word	0x3e6c3255
 800d990:	3e8ba305 	.word	0x3e8ba305
 800d994:	3eaaaaab 	.word	0x3eaaaaab
 800d998:	3edb6db7 	.word	0x3edb6db7
 800d99c:	3f19999a 	.word	0x3f19999a
 800d9a0:	40400000 	.word	0x40400000
 800d9a4:	3f763800 	.word	0x3f763800
 800d9a8:	3f76384f 	.word	0x3f76384f
 800d9ac:	369dc3a0 	.word	0x369dc3a0
 800d9b0:	0800ec74 	.word	0x0800ec74
 800d9b4:	0800ec7c 	.word	0x0800ec7c
 800d9b8:	3338aa3c 	.word	0x3338aa3c
 800d9bc:	43160000 	.word	0x43160000
 800d9c0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800d9c4:	f240 809b 	bls.w	800dafe <__ieee754_powf+0x63a>
 800d9c8:	15db      	asrs	r3, r3, #23
 800d9ca:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 800d9ce:	3b7e      	subs	r3, #126	@ 0x7e
 800d9d0:	411c      	asrs	r4, r3
 800d9d2:	4444      	add	r4, r8
 800d9d4:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 800d9d8:	4961      	ldr	r1, [pc, #388]	@ (800db60 <__ieee754_powf+0x69c>)
 800d9da:	3b7f      	subs	r3, #127	@ 0x7f
 800d9dc:	4119      	asrs	r1, r3
 800d9de:	4021      	ands	r1, r4
 800d9e0:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800d9e4:	f1c3 0317 	rsb	r3, r3, #23
 800d9e8:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 800d9ec:	4638      	mov	r0, r7
 800d9ee:	411c      	asrs	r4, r3
 800d9f0:	f1b8 0f00 	cmp.w	r8, #0
 800d9f4:	bfb8      	it	lt
 800d9f6:	4264      	neglt	r4, r4
 800d9f8:	f7f2 fbbe 	bl	8000178 <__aeabi_fsub>
 800d9fc:	4607      	mov	r7, r0
 800d9fe:	4631      	mov	r1, r6
 800da00:	4638      	mov	r0, r7
 800da02:	f7f2 fbbb 	bl	800017c <__addsf3>
 800da06:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 800da0a:	f028 080f 	bic.w	r8, r8, #15
 800da0e:	4640      	mov	r0, r8
 800da10:	4954      	ldr	r1, [pc, #336]	@ (800db64 <__ieee754_powf+0x6a0>)
 800da12:	f7f2 fcbb 	bl	800038c <__aeabi_fmul>
 800da16:	4639      	mov	r1, r7
 800da18:	4681      	mov	r9, r0
 800da1a:	4640      	mov	r0, r8
 800da1c:	f7f2 fbac 	bl	8000178 <__aeabi_fsub>
 800da20:	4601      	mov	r1, r0
 800da22:	4630      	mov	r0, r6
 800da24:	f7f2 fba8 	bl	8000178 <__aeabi_fsub>
 800da28:	494f      	ldr	r1, [pc, #316]	@ (800db68 <__ieee754_powf+0x6a4>)
 800da2a:	f7f2 fcaf 	bl	800038c <__aeabi_fmul>
 800da2e:	494f      	ldr	r1, [pc, #316]	@ (800db6c <__ieee754_powf+0x6a8>)
 800da30:	4606      	mov	r6, r0
 800da32:	4640      	mov	r0, r8
 800da34:	f7f2 fcaa 	bl	800038c <__aeabi_fmul>
 800da38:	4601      	mov	r1, r0
 800da3a:	4630      	mov	r0, r6
 800da3c:	f7f2 fb9e 	bl	800017c <__addsf3>
 800da40:	4607      	mov	r7, r0
 800da42:	4601      	mov	r1, r0
 800da44:	4648      	mov	r0, r9
 800da46:	f7f2 fb99 	bl	800017c <__addsf3>
 800da4a:	4649      	mov	r1, r9
 800da4c:	4606      	mov	r6, r0
 800da4e:	f7f2 fb93 	bl	8000178 <__aeabi_fsub>
 800da52:	4601      	mov	r1, r0
 800da54:	4638      	mov	r0, r7
 800da56:	f7f2 fb8f 	bl	8000178 <__aeabi_fsub>
 800da5a:	4631      	mov	r1, r6
 800da5c:	4680      	mov	r8, r0
 800da5e:	4630      	mov	r0, r6
 800da60:	f7f2 fc94 	bl	800038c <__aeabi_fmul>
 800da64:	4607      	mov	r7, r0
 800da66:	4942      	ldr	r1, [pc, #264]	@ (800db70 <__ieee754_powf+0x6ac>)
 800da68:	f7f2 fc90 	bl	800038c <__aeabi_fmul>
 800da6c:	4941      	ldr	r1, [pc, #260]	@ (800db74 <__ieee754_powf+0x6b0>)
 800da6e:	f7f2 fb83 	bl	8000178 <__aeabi_fsub>
 800da72:	4639      	mov	r1, r7
 800da74:	f7f2 fc8a 	bl	800038c <__aeabi_fmul>
 800da78:	493f      	ldr	r1, [pc, #252]	@ (800db78 <__ieee754_powf+0x6b4>)
 800da7a:	f7f2 fb7f 	bl	800017c <__addsf3>
 800da7e:	4639      	mov	r1, r7
 800da80:	f7f2 fc84 	bl	800038c <__aeabi_fmul>
 800da84:	493d      	ldr	r1, [pc, #244]	@ (800db7c <__ieee754_powf+0x6b8>)
 800da86:	f7f2 fb77 	bl	8000178 <__aeabi_fsub>
 800da8a:	4639      	mov	r1, r7
 800da8c:	f7f2 fc7e 	bl	800038c <__aeabi_fmul>
 800da90:	493b      	ldr	r1, [pc, #236]	@ (800db80 <__ieee754_powf+0x6bc>)
 800da92:	f7f2 fb73 	bl	800017c <__addsf3>
 800da96:	4639      	mov	r1, r7
 800da98:	f7f2 fc78 	bl	800038c <__aeabi_fmul>
 800da9c:	4601      	mov	r1, r0
 800da9e:	4630      	mov	r0, r6
 800daa0:	f7f2 fb6a 	bl	8000178 <__aeabi_fsub>
 800daa4:	4607      	mov	r7, r0
 800daa6:	4601      	mov	r1, r0
 800daa8:	4630      	mov	r0, r6
 800daaa:	f7f2 fc6f 	bl	800038c <__aeabi_fmul>
 800daae:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800dab2:	4681      	mov	r9, r0
 800dab4:	4638      	mov	r0, r7
 800dab6:	f7f2 fb5f 	bl	8000178 <__aeabi_fsub>
 800daba:	4601      	mov	r1, r0
 800dabc:	4648      	mov	r0, r9
 800dabe:	f7f2 fd19 	bl	80004f4 <__aeabi_fdiv>
 800dac2:	4641      	mov	r1, r8
 800dac4:	4607      	mov	r7, r0
 800dac6:	4630      	mov	r0, r6
 800dac8:	f7f2 fc60 	bl	800038c <__aeabi_fmul>
 800dacc:	4641      	mov	r1, r8
 800dace:	f7f2 fb55 	bl	800017c <__addsf3>
 800dad2:	4601      	mov	r1, r0
 800dad4:	4638      	mov	r0, r7
 800dad6:	f7f2 fb4f 	bl	8000178 <__aeabi_fsub>
 800dada:	4631      	mov	r1, r6
 800dadc:	f7f2 fb4c 	bl	8000178 <__aeabi_fsub>
 800dae0:	4601      	mov	r1, r0
 800dae2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800dae6:	f7f2 fb47 	bl	8000178 <__aeabi_fsub>
 800daea:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800daee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800daf2:	da06      	bge.n	800db02 <__ieee754_powf+0x63e>
 800daf4:	4621      	mov	r1, r4
 800daf6:	f000 f9af 	bl	800de58 <scalbnf>
 800dafa:	4629      	mov	r1, r5
 800dafc:	e549      	b.n	800d592 <__ieee754_powf+0xce>
 800dafe:	2400      	movs	r4, #0
 800db00:	e77d      	b.n	800d9fe <__ieee754_powf+0x53a>
 800db02:	4618      	mov	r0, r3
 800db04:	e7f9      	b.n	800dafa <__ieee754_powf+0x636>
 800db06:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800db0a:	e536      	b.n	800d57a <__ieee754_powf+0xb6>
 800db0c:	4639      	mov	r1, r7
 800db0e:	e534      	b.n	800d57a <__ieee754_powf+0xb6>
 800db10:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800db14:	f43f ad23 	beq.w	800d55e <__ieee754_powf+0x9a>
 800db18:	2502      	movs	r5, #2
 800db1a:	4648      	mov	r0, r9
 800db1c:	f000 f998 	bl	800de50 <fabsf>
 800db20:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800db24:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800db28:	46c2      	mov	sl, r8
 800db2a:	4601      	mov	r1, r0
 800db2c:	d003      	beq.n	800db36 <__ieee754_powf+0x672>
 800db2e:	f1b8 0f00 	cmp.w	r8, #0
 800db32:	f47f ad43 	bne.w	800d5bc <__ieee754_powf+0xf8>
 800db36:	2c00      	cmp	r4, #0
 800db38:	da04      	bge.n	800db44 <__ieee754_powf+0x680>
 800db3a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800db3e:	f7f2 fcd9 	bl	80004f4 <__aeabi_fdiv>
 800db42:	4601      	mov	r1, r0
 800db44:	2e00      	cmp	r6, #0
 800db46:	f6bf ad18 	bge.w	800d57a <__ieee754_powf+0xb6>
 800db4a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800db4e:	ea58 0805 	orrs.w	r8, r8, r5
 800db52:	f47f ad2e 	bne.w	800d5b2 <__ieee754_powf+0xee>
 800db56:	4608      	mov	r0, r1
 800db58:	f7f2 fb0e 	bl	8000178 <__aeabi_fsub>
 800db5c:	4601      	mov	r1, r0
 800db5e:	e4f8      	b.n	800d552 <__ieee754_powf+0x8e>
 800db60:	ff800000 	.word	0xff800000
 800db64:	3f317200 	.word	0x3f317200
 800db68:	3f317218 	.word	0x3f317218
 800db6c:	35bfbe8c 	.word	0x35bfbe8c
 800db70:	3331bb4c 	.word	0x3331bb4c
 800db74:	35ddea0e 	.word	0x35ddea0e
 800db78:	388ab355 	.word	0x388ab355
 800db7c:	3b360b61 	.word	0x3b360b61
 800db80:	3e2aaaab 	.word	0x3e2aaaab

0800db84 <__ieee754_rem_pio2f>:
 800db84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db88:	4aa4      	ldr	r2, [pc, #656]	@ (800de1c <__ieee754_rem_pio2f+0x298>)
 800db8a:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800db8e:	4590      	cmp	r8, r2
 800db90:	460c      	mov	r4, r1
 800db92:	4682      	mov	sl, r0
 800db94:	b087      	sub	sp, #28
 800db96:	d804      	bhi.n	800dba2 <__ieee754_rem_pio2f+0x1e>
 800db98:	2300      	movs	r3, #0
 800db9a:	6008      	str	r0, [r1, #0]
 800db9c:	604b      	str	r3, [r1, #4]
 800db9e:	2500      	movs	r5, #0
 800dba0:	e01d      	b.n	800dbde <__ieee754_rem_pio2f+0x5a>
 800dba2:	4a9f      	ldr	r2, [pc, #636]	@ (800de20 <__ieee754_rem_pio2f+0x29c>)
 800dba4:	4590      	cmp	r8, r2
 800dba6:	d84f      	bhi.n	800dc48 <__ieee754_rem_pio2f+0xc4>
 800dba8:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800dbac:	2800      	cmp	r0, #0
 800dbae:	499d      	ldr	r1, [pc, #628]	@ (800de24 <__ieee754_rem_pio2f+0x2a0>)
 800dbb0:	4f9d      	ldr	r7, [pc, #628]	@ (800de28 <__ieee754_rem_pio2f+0x2a4>)
 800dbb2:	f025 050f 	bic.w	r5, r5, #15
 800dbb6:	dd24      	ble.n	800dc02 <__ieee754_rem_pio2f+0x7e>
 800dbb8:	f7f2 fade 	bl	8000178 <__aeabi_fsub>
 800dbbc:	42bd      	cmp	r5, r7
 800dbbe:	4606      	mov	r6, r0
 800dbc0:	d011      	beq.n	800dbe6 <__ieee754_rem_pio2f+0x62>
 800dbc2:	499a      	ldr	r1, [pc, #616]	@ (800de2c <__ieee754_rem_pio2f+0x2a8>)
 800dbc4:	f7f2 fad8 	bl	8000178 <__aeabi_fsub>
 800dbc8:	4601      	mov	r1, r0
 800dbca:	4605      	mov	r5, r0
 800dbcc:	4630      	mov	r0, r6
 800dbce:	f7f2 fad3 	bl	8000178 <__aeabi_fsub>
 800dbd2:	4996      	ldr	r1, [pc, #600]	@ (800de2c <__ieee754_rem_pio2f+0x2a8>)
 800dbd4:	f7f2 fad0 	bl	8000178 <__aeabi_fsub>
 800dbd8:	6025      	str	r5, [r4, #0]
 800dbda:	2501      	movs	r5, #1
 800dbdc:	6060      	str	r0, [r4, #4]
 800dbde:	4628      	mov	r0, r5
 800dbe0:	b007      	add	sp, #28
 800dbe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbe6:	4992      	ldr	r1, [pc, #584]	@ (800de30 <__ieee754_rem_pio2f+0x2ac>)
 800dbe8:	f7f2 fac6 	bl	8000178 <__aeabi_fsub>
 800dbec:	4991      	ldr	r1, [pc, #580]	@ (800de34 <__ieee754_rem_pio2f+0x2b0>)
 800dbee:	4606      	mov	r6, r0
 800dbf0:	f7f2 fac2 	bl	8000178 <__aeabi_fsub>
 800dbf4:	4601      	mov	r1, r0
 800dbf6:	4605      	mov	r5, r0
 800dbf8:	4630      	mov	r0, r6
 800dbfa:	f7f2 fabd 	bl	8000178 <__aeabi_fsub>
 800dbfe:	498d      	ldr	r1, [pc, #564]	@ (800de34 <__ieee754_rem_pio2f+0x2b0>)
 800dc00:	e7e8      	b.n	800dbd4 <__ieee754_rem_pio2f+0x50>
 800dc02:	f7f2 fabb 	bl	800017c <__addsf3>
 800dc06:	42bd      	cmp	r5, r7
 800dc08:	4606      	mov	r6, r0
 800dc0a:	d00f      	beq.n	800dc2c <__ieee754_rem_pio2f+0xa8>
 800dc0c:	4987      	ldr	r1, [pc, #540]	@ (800de2c <__ieee754_rem_pio2f+0x2a8>)
 800dc0e:	f7f2 fab5 	bl	800017c <__addsf3>
 800dc12:	4601      	mov	r1, r0
 800dc14:	4605      	mov	r5, r0
 800dc16:	4630      	mov	r0, r6
 800dc18:	f7f2 faae 	bl	8000178 <__aeabi_fsub>
 800dc1c:	4983      	ldr	r1, [pc, #524]	@ (800de2c <__ieee754_rem_pio2f+0x2a8>)
 800dc1e:	f7f2 faad 	bl	800017c <__addsf3>
 800dc22:	6025      	str	r5, [r4, #0]
 800dc24:	6060      	str	r0, [r4, #4]
 800dc26:	f04f 35ff 	mov.w	r5, #4294967295
 800dc2a:	e7d8      	b.n	800dbde <__ieee754_rem_pio2f+0x5a>
 800dc2c:	4980      	ldr	r1, [pc, #512]	@ (800de30 <__ieee754_rem_pio2f+0x2ac>)
 800dc2e:	f7f2 faa5 	bl	800017c <__addsf3>
 800dc32:	4980      	ldr	r1, [pc, #512]	@ (800de34 <__ieee754_rem_pio2f+0x2b0>)
 800dc34:	4606      	mov	r6, r0
 800dc36:	f7f2 faa1 	bl	800017c <__addsf3>
 800dc3a:	4601      	mov	r1, r0
 800dc3c:	4605      	mov	r5, r0
 800dc3e:	4630      	mov	r0, r6
 800dc40:	f7f2 fa9a 	bl	8000178 <__aeabi_fsub>
 800dc44:	497b      	ldr	r1, [pc, #492]	@ (800de34 <__ieee754_rem_pio2f+0x2b0>)
 800dc46:	e7ea      	b.n	800dc1e <__ieee754_rem_pio2f+0x9a>
 800dc48:	4a7b      	ldr	r2, [pc, #492]	@ (800de38 <__ieee754_rem_pio2f+0x2b4>)
 800dc4a:	4590      	cmp	r8, r2
 800dc4c:	f200 8095 	bhi.w	800dd7a <__ieee754_rem_pio2f+0x1f6>
 800dc50:	f000 f8fe 	bl	800de50 <fabsf>
 800dc54:	4979      	ldr	r1, [pc, #484]	@ (800de3c <__ieee754_rem_pio2f+0x2b8>)
 800dc56:	4606      	mov	r6, r0
 800dc58:	f7f2 fb98 	bl	800038c <__aeabi_fmul>
 800dc5c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800dc60:	f7f2 fa8c 	bl	800017c <__addsf3>
 800dc64:	f7f2 fd6e 	bl	8000744 <__aeabi_f2iz>
 800dc68:	4605      	mov	r5, r0
 800dc6a:	f7f2 fb3b 	bl	80002e4 <__aeabi_i2f>
 800dc6e:	496d      	ldr	r1, [pc, #436]	@ (800de24 <__ieee754_rem_pio2f+0x2a0>)
 800dc70:	4681      	mov	r9, r0
 800dc72:	f7f2 fb8b 	bl	800038c <__aeabi_fmul>
 800dc76:	4601      	mov	r1, r0
 800dc78:	4630      	mov	r0, r6
 800dc7a:	f7f2 fa7d 	bl	8000178 <__aeabi_fsub>
 800dc7e:	496b      	ldr	r1, [pc, #428]	@ (800de2c <__ieee754_rem_pio2f+0x2a8>)
 800dc80:	4607      	mov	r7, r0
 800dc82:	4648      	mov	r0, r9
 800dc84:	f7f2 fb82 	bl	800038c <__aeabi_fmul>
 800dc88:	2d1f      	cmp	r5, #31
 800dc8a:	4606      	mov	r6, r0
 800dc8c:	dc0e      	bgt.n	800dcac <__ieee754_rem_pio2f+0x128>
 800dc8e:	4a6c      	ldr	r2, [pc, #432]	@ (800de40 <__ieee754_rem_pio2f+0x2bc>)
 800dc90:	1e69      	subs	r1, r5, #1
 800dc92:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800dc96:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 800dc9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d004      	beq.n	800dcac <__ieee754_rem_pio2f+0x128>
 800dca2:	4631      	mov	r1, r6
 800dca4:	4638      	mov	r0, r7
 800dca6:	f7f2 fa67 	bl	8000178 <__aeabi_fsub>
 800dcaa:	e00b      	b.n	800dcc4 <__ieee754_rem_pio2f+0x140>
 800dcac:	4631      	mov	r1, r6
 800dcae:	4638      	mov	r0, r7
 800dcb0:	f7f2 fa62 	bl	8000178 <__aeabi_fsub>
 800dcb4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800dcb8:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 800dcbc:	2b08      	cmp	r3, #8
 800dcbe:	ea4f 5be8 	mov.w	fp, r8, asr #23
 800dcc2:	dc01      	bgt.n	800dcc8 <__ieee754_rem_pio2f+0x144>
 800dcc4:	6020      	str	r0, [r4, #0]
 800dcc6:	e026      	b.n	800dd16 <__ieee754_rem_pio2f+0x192>
 800dcc8:	4959      	ldr	r1, [pc, #356]	@ (800de30 <__ieee754_rem_pio2f+0x2ac>)
 800dcca:	4648      	mov	r0, r9
 800dccc:	f7f2 fb5e 	bl	800038c <__aeabi_fmul>
 800dcd0:	4606      	mov	r6, r0
 800dcd2:	4601      	mov	r1, r0
 800dcd4:	4638      	mov	r0, r7
 800dcd6:	f7f2 fa4f 	bl	8000178 <__aeabi_fsub>
 800dcda:	4601      	mov	r1, r0
 800dcdc:	4680      	mov	r8, r0
 800dcde:	4638      	mov	r0, r7
 800dce0:	f7f2 fa4a 	bl	8000178 <__aeabi_fsub>
 800dce4:	4631      	mov	r1, r6
 800dce6:	f7f2 fa47 	bl	8000178 <__aeabi_fsub>
 800dcea:	4606      	mov	r6, r0
 800dcec:	4951      	ldr	r1, [pc, #324]	@ (800de34 <__ieee754_rem_pio2f+0x2b0>)
 800dcee:	4648      	mov	r0, r9
 800dcf0:	f7f2 fb4c 	bl	800038c <__aeabi_fmul>
 800dcf4:	4631      	mov	r1, r6
 800dcf6:	f7f2 fa3f 	bl	8000178 <__aeabi_fsub>
 800dcfa:	4601      	mov	r1, r0
 800dcfc:	4606      	mov	r6, r0
 800dcfe:	4640      	mov	r0, r8
 800dd00:	f7f2 fa3a 	bl	8000178 <__aeabi_fsub>
 800dd04:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800dd08:	ebab 0b03 	sub.w	fp, fp, r3
 800dd0c:	f1bb 0f19 	cmp.w	fp, #25
 800dd10:	dc18      	bgt.n	800dd44 <__ieee754_rem_pio2f+0x1c0>
 800dd12:	4647      	mov	r7, r8
 800dd14:	6020      	str	r0, [r4, #0]
 800dd16:	f8d4 8000 	ldr.w	r8, [r4]
 800dd1a:	4638      	mov	r0, r7
 800dd1c:	4641      	mov	r1, r8
 800dd1e:	f7f2 fa2b 	bl	8000178 <__aeabi_fsub>
 800dd22:	4631      	mov	r1, r6
 800dd24:	f7f2 fa28 	bl	8000178 <__aeabi_fsub>
 800dd28:	f1ba 0f00 	cmp.w	sl, #0
 800dd2c:	6060      	str	r0, [r4, #4]
 800dd2e:	f6bf af56 	bge.w	800dbde <__ieee754_rem_pio2f+0x5a>
 800dd32:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 800dd36:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800dd3a:	f8c4 8000 	str.w	r8, [r4]
 800dd3e:	6060      	str	r0, [r4, #4]
 800dd40:	426d      	negs	r5, r5
 800dd42:	e74c      	b.n	800dbde <__ieee754_rem_pio2f+0x5a>
 800dd44:	493f      	ldr	r1, [pc, #252]	@ (800de44 <__ieee754_rem_pio2f+0x2c0>)
 800dd46:	4648      	mov	r0, r9
 800dd48:	f7f2 fb20 	bl	800038c <__aeabi_fmul>
 800dd4c:	4606      	mov	r6, r0
 800dd4e:	4601      	mov	r1, r0
 800dd50:	4640      	mov	r0, r8
 800dd52:	f7f2 fa11 	bl	8000178 <__aeabi_fsub>
 800dd56:	4601      	mov	r1, r0
 800dd58:	4607      	mov	r7, r0
 800dd5a:	4640      	mov	r0, r8
 800dd5c:	f7f2 fa0c 	bl	8000178 <__aeabi_fsub>
 800dd60:	4631      	mov	r1, r6
 800dd62:	f7f2 fa09 	bl	8000178 <__aeabi_fsub>
 800dd66:	4606      	mov	r6, r0
 800dd68:	4937      	ldr	r1, [pc, #220]	@ (800de48 <__ieee754_rem_pio2f+0x2c4>)
 800dd6a:	4648      	mov	r0, r9
 800dd6c:	f7f2 fb0e 	bl	800038c <__aeabi_fmul>
 800dd70:	4631      	mov	r1, r6
 800dd72:	f7f2 fa01 	bl	8000178 <__aeabi_fsub>
 800dd76:	4606      	mov	r6, r0
 800dd78:	e793      	b.n	800dca2 <__ieee754_rem_pio2f+0x11e>
 800dd7a:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800dd7e:	d305      	bcc.n	800dd8c <__ieee754_rem_pio2f+0x208>
 800dd80:	4601      	mov	r1, r0
 800dd82:	f7f2 f9f9 	bl	8000178 <__aeabi_fsub>
 800dd86:	6060      	str	r0, [r4, #4]
 800dd88:	6020      	str	r0, [r4, #0]
 800dd8a:	e708      	b.n	800db9e <__ieee754_rem_pio2f+0x1a>
 800dd8c:	ea4f 56e8 	mov.w	r6, r8, asr #23
 800dd90:	3e86      	subs	r6, #134	@ 0x86
 800dd92:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800dd96:	4640      	mov	r0, r8
 800dd98:	f7f2 fcd4 	bl	8000744 <__aeabi_f2iz>
 800dd9c:	f7f2 faa2 	bl	80002e4 <__aeabi_i2f>
 800dda0:	4601      	mov	r1, r0
 800dda2:	9003      	str	r0, [sp, #12]
 800dda4:	4640      	mov	r0, r8
 800dda6:	f7f2 f9e7 	bl	8000178 <__aeabi_fsub>
 800ddaa:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800ddae:	f7f2 faed 	bl	800038c <__aeabi_fmul>
 800ddb2:	4607      	mov	r7, r0
 800ddb4:	f7f2 fcc6 	bl	8000744 <__aeabi_f2iz>
 800ddb8:	f7f2 fa94 	bl	80002e4 <__aeabi_i2f>
 800ddbc:	4601      	mov	r1, r0
 800ddbe:	9004      	str	r0, [sp, #16]
 800ddc0:	4605      	mov	r5, r0
 800ddc2:	4638      	mov	r0, r7
 800ddc4:	f7f2 f9d8 	bl	8000178 <__aeabi_fsub>
 800ddc8:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800ddcc:	f7f2 fade 	bl	800038c <__aeabi_fmul>
 800ddd0:	2100      	movs	r1, #0
 800ddd2:	9005      	str	r0, [sp, #20]
 800ddd4:	f7f2 fc6e 	bl	80006b4 <__aeabi_fcmpeq>
 800ddd8:	b1f0      	cbz	r0, 800de18 <__ieee754_rem_pio2f+0x294>
 800ddda:	2100      	movs	r1, #0
 800dddc:	4628      	mov	r0, r5
 800ddde:	f7f2 fc69 	bl	80006b4 <__aeabi_fcmpeq>
 800dde2:	2800      	cmp	r0, #0
 800dde4:	bf14      	ite	ne
 800dde6:	2301      	movne	r3, #1
 800dde8:	2302      	moveq	r3, #2
 800ddea:	4a18      	ldr	r2, [pc, #96]	@ (800de4c <__ieee754_rem_pio2f+0x2c8>)
 800ddec:	4621      	mov	r1, r4
 800ddee:	9201      	str	r2, [sp, #4]
 800ddf0:	2202      	movs	r2, #2
 800ddf2:	a803      	add	r0, sp, #12
 800ddf4:	9200      	str	r2, [sp, #0]
 800ddf6:	4632      	mov	r2, r6
 800ddf8:	f000 f898 	bl	800df2c <__kernel_rem_pio2f>
 800ddfc:	f1ba 0f00 	cmp.w	sl, #0
 800de00:	4605      	mov	r5, r0
 800de02:	f6bf aeec 	bge.w	800dbde <__ieee754_rem_pio2f+0x5a>
 800de06:	6823      	ldr	r3, [r4, #0]
 800de08:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800de0c:	6023      	str	r3, [r4, #0]
 800de0e:	6863      	ldr	r3, [r4, #4]
 800de10:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800de14:	6063      	str	r3, [r4, #4]
 800de16:	e793      	b.n	800dd40 <__ieee754_rem_pio2f+0x1bc>
 800de18:	2303      	movs	r3, #3
 800de1a:	e7e6      	b.n	800ddea <__ieee754_rem_pio2f+0x266>
 800de1c:	3f490fd8 	.word	0x3f490fd8
 800de20:	4016cbe3 	.word	0x4016cbe3
 800de24:	3fc90f80 	.word	0x3fc90f80
 800de28:	3fc90fd0 	.word	0x3fc90fd0
 800de2c:	37354443 	.word	0x37354443
 800de30:	37354400 	.word	0x37354400
 800de34:	2e85a308 	.word	0x2e85a308
 800de38:	43490f80 	.word	0x43490f80
 800de3c:	3f22f984 	.word	0x3f22f984
 800de40:	0800ec8c 	.word	0x0800ec8c
 800de44:	2e85a300 	.word	0x2e85a300
 800de48:	248d3132 	.word	0x248d3132
 800de4c:	0800ed0c 	.word	0x0800ed0c

0800de50 <fabsf>:
 800de50:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800de54:	4770      	bx	lr
	...

0800de58 <scalbnf>:
 800de58:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800de5c:	b538      	push	{r3, r4, r5, lr}
 800de5e:	4603      	mov	r3, r0
 800de60:	460d      	mov	r5, r1
 800de62:	4604      	mov	r4, r0
 800de64:	d02e      	beq.n	800dec4 <scalbnf+0x6c>
 800de66:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800de6a:	d304      	bcc.n	800de76 <scalbnf+0x1e>
 800de6c:	4601      	mov	r1, r0
 800de6e:	f7f2 f985 	bl	800017c <__addsf3>
 800de72:	4603      	mov	r3, r0
 800de74:	e026      	b.n	800dec4 <scalbnf+0x6c>
 800de76:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800de7a:	d118      	bne.n	800deae <scalbnf+0x56>
 800de7c:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800de80:	f7f2 fa84 	bl	800038c <__aeabi_fmul>
 800de84:	4a17      	ldr	r2, [pc, #92]	@ (800dee4 <scalbnf+0x8c>)
 800de86:	4603      	mov	r3, r0
 800de88:	4295      	cmp	r5, r2
 800de8a:	db0c      	blt.n	800dea6 <scalbnf+0x4e>
 800de8c:	4604      	mov	r4, r0
 800de8e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800de92:	3a19      	subs	r2, #25
 800de94:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800de98:	428d      	cmp	r5, r1
 800de9a:	dd0a      	ble.n	800deb2 <scalbnf+0x5a>
 800de9c:	4912      	ldr	r1, [pc, #72]	@ (800dee8 <scalbnf+0x90>)
 800de9e:	4618      	mov	r0, r3
 800dea0:	f361 001e 	bfi	r0, r1, #0, #31
 800dea4:	e000      	b.n	800dea8 <scalbnf+0x50>
 800dea6:	4911      	ldr	r1, [pc, #68]	@ (800deec <scalbnf+0x94>)
 800dea8:	f7f2 fa70 	bl	800038c <__aeabi_fmul>
 800deac:	e7e1      	b.n	800de72 <scalbnf+0x1a>
 800deae:	0dd2      	lsrs	r2, r2, #23
 800deb0:	e7f0      	b.n	800de94 <scalbnf+0x3c>
 800deb2:	1951      	adds	r1, r2, r5
 800deb4:	29fe      	cmp	r1, #254	@ 0xfe
 800deb6:	dcf1      	bgt.n	800de9c <scalbnf+0x44>
 800deb8:	2900      	cmp	r1, #0
 800deba:	dd05      	ble.n	800dec8 <scalbnf+0x70>
 800debc:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800dec0:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800dec4:	4618      	mov	r0, r3
 800dec6:	bd38      	pop	{r3, r4, r5, pc}
 800dec8:	f111 0f16 	cmn.w	r1, #22
 800decc:	da01      	bge.n	800ded2 <scalbnf+0x7a>
 800dece:	4907      	ldr	r1, [pc, #28]	@ (800deec <scalbnf+0x94>)
 800ded0:	e7e5      	b.n	800de9e <scalbnf+0x46>
 800ded2:	f101 0019 	add.w	r0, r1, #25
 800ded6:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800deda:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 800dede:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800dee2:	e7e1      	b.n	800dea8 <scalbnf+0x50>
 800dee4:	ffff3cb0 	.word	0xffff3cb0
 800dee8:	7149f2ca 	.word	0x7149f2ca
 800deec:	0da24260 	.word	0x0da24260

0800def0 <with_errnof>:
 800def0:	b538      	push	{r3, r4, r5, lr}
 800def2:	4604      	mov	r4, r0
 800def4:	460d      	mov	r5, r1
 800def6:	f7fe f893 	bl	800c020 <__errno>
 800defa:	6005      	str	r5, [r0, #0]
 800defc:	4620      	mov	r0, r4
 800defe:	bd38      	pop	{r3, r4, r5, pc}

0800df00 <xflowf>:
 800df00:	b508      	push	{r3, lr}
 800df02:	b140      	cbz	r0, 800df16 <xflowf+0x16>
 800df04:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800df08:	f7f2 fa40 	bl	800038c <__aeabi_fmul>
 800df0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800df10:	2122      	movs	r1, #34	@ 0x22
 800df12:	f7ff bfed 	b.w	800def0 <with_errnof>
 800df16:	4608      	mov	r0, r1
 800df18:	e7f6      	b.n	800df08 <xflowf+0x8>

0800df1a <__math_uflowf>:
 800df1a:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800df1e:	f7ff bfef 	b.w	800df00 <xflowf>

0800df22 <__math_oflowf>:
 800df22:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800df26:	f7ff bfeb 	b.w	800df00 <xflowf>
	...

0800df2c <__kernel_rem_pio2f>:
 800df2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df30:	b0db      	sub	sp, #364	@ 0x16c
 800df32:	9202      	str	r2, [sp, #8]
 800df34:	9304      	str	r3, [sp, #16]
 800df36:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800df38:	4bac      	ldr	r3, [pc, #688]	@ (800e1ec <__kernel_rem_pio2f+0x2c0>)
 800df3a:	9005      	str	r0, [sp, #20]
 800df3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df40:	9100      	str	r1, [sp, #0]
 800df42:	9301      	str	r3, [sp, #4]
 800df44:	9b04      	ldr	r3, [sp, #16]
 800df46:	3b01      	subs	r3, #1
 800df48:	9303      	str	r3, [sp, #12]
 800df4a:	9b02      	ldr	r3, [sp, #8]
 800df4c:	1d1a      	adds	r2, r3, #4
 800df4e:	f2c0 8099 	blt.w	800e084 <__kernel_rem_pio2f+0x158>
 800df52:	1edc      	subs	r4, r3, #3
 800df54:	bf48      	it	mi
 800df56:	1d1c      	addmi	r4, r3, #4
 800df58:	10e4      	asrs	r4, r4, #3
 800df5a:	2500      	movs	r5, #0
 800df5c:	f04f 0b00 	mov.w	fp, #0
 800df60:	1c67      	adds	r7, r4, #1
 800df62:	00fb      	lsls	r3, r7, #3
 800df64:	9306      	str	r3, [sp, #24]
 800df66:	9b02      	ldr	r3, [sp, #8]
 800df68:	9a03      	ldr	r2, [sp, #12]
 800df6a:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800df6e:	9b01      	ldr	r3, [sp, #4]
 800df70:	eba4 0802 	sub.w	r8, r4, r2
 800df74:	eb03 0902 	add.w	r9, r3, r2
 800df78:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800df7a:	ae1e      	add	r6, sp, #120	@ 0x78
 800df7c:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 800df80:	454d      	cmp	r5, r9
 800df82:	f340 8081 	ble.w	800e088 <__kernel_rem_pio2f+0x15c>
 800df86:	9a04      	ldr	r2, [sp, #16]
 800df88:	ab1e      	add	r3, sp, #120	@ 0x78
 800df8a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800df8e:	f04f 0900 	mov.w	r9, #0
 800df92:	2300      	movs	r3, #0
 800df94:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800df98:	9a01      	ldr	r2, [sp, #4]
 800df9a:	4591      	cmp	r9, r2
 800df9c:	f340 809a 	ble.w	800e0d4 <__kernel_rem_pio2f+0x1a8>
 800dfa0:	4613      	mov	r3, r2
 800dfa2:	aa0a      	add	r2, sp, #40	@ 0x28
 800dfa4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dfa8:	9308      	str	r3, [sp, #32]
 800dfaa:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800dfac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800dfb0:	9c01      	ldr	r4, [sp, #4]
 800dfb2:	9307      	str	r3, [sp, #28]
 800dfb4:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800dfb8:	4646      	mov	r6, r8
 800dfba:	4625      	mov	r5, r4
 800dfbc:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 800dfc0:	ab5a      	add	r3, sp, #360	@ 0x168
 800dfc2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800dfc6:	f853 bc50 	ldr.w	fp, [r3, #-80]
 800dfca:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800dfce:	2d00      	cmp	r5, #0
 800dfd0:	f300 8085 	bgt.w	800e0de <__kernel_rem_pio2f+0x1b2>
 800dfd4:	4639      	mov	r1, r7
 800dfd6:	4658      	mov	r0, fp
 800dfd8:	f7ff ff3e 	bl	800de58 <scalbnf>
 800dfdc:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 800dfe0:	4605      	mov	r5, r0
 800dfe2:	f7f2 f9d3 	bl	800038c <__aeabi_fmul>
 800dfe6:	f000 fa3f 	bl	800e468 <floorf>
 800dfea:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800dfee:	f7f2 f9cd 	bl	800038c <__aeabi_fmul>
 800dff2:	4601      	mov	r1, r0
 800dff4:	4628      	mov	r0, r5
 800dff6:	f7f2 f8bf 	bl	8000178 <__aeabi_fsub>
 800dffa:	4605      	mov	r5, r0
 800dffc:	f7f2 fba2 	bl	8000744 <__aeabi_f2iz>
 800e000:	4606      	mov	r6, r0
 800e002:	f7f2 f96f 	bl	80002e4 <__aeabi_i2f>
 800e006:	4601      	mov	r1, r0
 800e008:	4628      	mov	r0, r5
 800e00a:	f7f2 f8b5 	bl	8000178 <__aeabi_fsub>
 800e00e:	2f00      	cmp	r7, #0
 800e010:	4681      	mov	r9, r0
 800e012:	f340 8081 	ble.w	800e118 <__kernel_rem_pio2f+0x1ec>
 800e016:	1e62      	subs	r2, r4, #1
 800e018:	ab0a      	add	r3, sp, #40	@ 0x28
 800e01a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800e01e:	f1c7 0108 	rsb	r1, r7, #8
 800e022:	fa45 f301 	asr.w	r3, r5, r1
 800e026:	441e      	add	r6, r3
 800e028:	408b      	lsls	r3, r1
 800e02a:	1aed      	subs	r5, r5, r3
 800e02c:	ab0a      	add	r3, sp, #40	@ 0x28
 800e02e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e032:	f1c7 0307 	rsb	r3, r7, #7
 800e036:	411d      	asrs	r5, r3
 800e038:	2d00      	cmp	r5, #0
 800e03a:	dd7a      	ble.n	800e132 <__kernel_rem_pio2f+0x206>
 800e03c:	2200      	movs	r2, #0
 800e03e:	4692      	mov	sl, r2
 800e040:	3601      	adds	r6, #1
 800e042:	4294      	cmp	r4, r2
 800e044:	f300 80aa 	bgt.w	800e19c <__kernel_rem_pio2f+0x270>
 800e048:	2f00      	cmp	r7, #0
 800e04a:	dd05      	ble.n	800e058 <__kernel_rem_pio2f+0x12c>
 800e04c:	2f01      	cmp	r7, #1
 800e04e:	f000 80b6 	beq.w	800e1be <__kernel_rem_pio2f+0x292>
 800e052:	2f02      	cmp	r7, #2
 800e054:	f000 80bd 	beq.w	800e1d2 <__kernel_rem_pio2f+0x2a6>
 800e058:	2d02      	cmp	r5, #2
 800e05a:	d16a      	bne.n	800e132 <__kernel_rem_pio2f+0x206>
 800e05c:	4649      	mov	r1, r9
 800e05e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800e062:	f7f2 f889 	bl	8000178 <__aeabi_fsub>
 800e066:	4681      	mov	r9, r0
 800e068:	f1ba 0f00 	cmp.w	sl, #0
 800e06c:	d061      	beq.n	800e132 <__kernel_rem_pio2f+0x206>
 800e06e:	4639      	mov	r1, r7
 800e070:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800e074:	f7ff fef0 	bl	800de58 <scalbnf>
 800e078:	4601      	mov	r1, r0
 800e07a:	4648      	mov	r0, r9
 800e07c:	f7f2 f87c 	bl	8000178 <__aeabi_fsub>
 800e080:	4681      	mov	r9, r0
 800e082:	e056      	b.n	800e132 <__kernel_rem_pio2f+0x206>
 800e084:	2400      	movs	r4, #0
 800e086:	e768      	b.n	800df5a <__kernel_rem_pio2f+0x2e>
 800e088:	eb18 0f05 	cmn.w	r8, r5
 800e08c:	d407      	bmi.n	800e09e <__kernel_rem_pio2f+0x172>
 800e08e:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800e092:	f7f2 f927 	bl	80002e4 <__aeabi_i2f>
 800e096:	f846 0b04 	str.w	r0, [r6], #4
 800e09a:	3501      	adds	r5, #1
 800e09c:	e770      	b.n	800df80 <__kernel_rem_pio2f+0x54>
 800e09e:	4658      	mov	r0, fp
 800e0a0:	e7f9      	b.n	800e096 <__kernel_rem_pio2f+0x16a>
 800e0a2:	9307      	str	r3, [sp, #28]
 800e0a4:	9b05      	ldr	r3, [sp, #20]
 800e0a6:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 800e0aa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e0ae:	f7f2 f96d 	bl	800038c <__aeabi_fmul>
 800e0b2:	4601      	mov	r1, r0
 800e0b4:	4630      	mov	r0, r6
 800e0b6:	f7f2 f861 	bl	800017c <__addsf3>
 800e0ba:	4606      	mov	r6, r0
 800e0bc:	9b07      	ldr	r3, [sp, #28]
 800e0be:	f108 0801 	add.w	r8, r8, #1
 800e0c2:	9a03      	ldr	r2, [sp, #12]
 800e0c4:	4590      	cmp	r8, r2
 800e0c6:	ddec      	ble.n	800e0a2 <__kernel_rem_pio2f+0x176>
 800e0c8:	f84a 6b04 	str.w	r6, [sl], #4
 800e0cc:	f109 0901 	add.w	r9, r9, #1
 800e0d0:	3504      	adds	r5, #4
 800e0d2:	e761      	b.n	800df98 <__kernel_rem_pio2f+0x6c>
 800e0d4:	46ab      	mov	fp, r5
 800e0d6:	461e      	mov	r6, r3
 800e0d8:	f04f 0800 	mov.w	r8, #0
 800e0dc:	e7f1      	b.n	800e0c2 <__kernel_rem_pio2f+0x196>
 800e0de:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800e0e2:	4658      	mov	r0, fp
 800e0e4:	f7f2 f952 	bl	800038c <__aeabi_fmul>
 800e0e8:	f7f2 fb2c 	bl	8000744 <__aeabi_f2iz>
 800e0ec:	f7f2 f8fa 	bl	80002e4 <__aeabi_i2f>
 800e0f0:	4649      	mov	r1, r9
 800e0f2:	9009      	str	r0, [sp, #36]	@ 0x24
 800e0f4:	f7f2 f94a 	bl	800038c <__aeabi_fmul>
 800e0f8:	4601      	mov	r1, r0
 800e0fa:	4658      	mov	r0, fp
 800e0fc:	f7f2 f83c 	bl	8000178 <__aeabi_fsub>
 800e100:	f7f2 fb20 	bl	8000744 <__aeabi_f2iz>
 800e104:	3d01      	subs	r5, #1
 800e106:	f846 0b04 	str.w	r0, [r6], #4
 800e10a:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 800e10e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e110:	f7f2 f834 	bl	800017c <__addsf3>
 800e114:	4683      	mov	fp, r0
 800e116:	e75a      	b.n	800dfce <__kernel_rem_pio2f+0xa2>
 800e118:	d105      	bne.n	800e126 <__kernel_rem_pio2f+0x1fa>
 800e11a:	1e63      	subs	r3, r4, #1
 800e11c:	aa0a      	add	r2, sp, #40	@ 0x28
 800e11e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800e122:	11ed      	asrs	r5, r5, #7
 800e124:	e788      	b.n	800e038 <__kernel_rem_pio2f+0x10c>
 800e126:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800e12a:	f7f2 fae1 	bl	80006f0 <__aeabi_fcmpge>
 800e12e:	4605      	mov	r5, r0
 800e130:	bb90      	cbnz	r0, 800e198 <__kernel_rem_pio2f+0x26c>
 800e132:	2100      	movs	r1, #0
 800e134:	4648      	mov	r0, r9
 800e136:	f7f2 fabd 	bl	80006b4 <__aeabi_fcmpeq>
 800e13a:	2800      	cmp	r0, #0
 800e13c:	f000 8090 	beq.w	800e260 <__kernel_rem_pio2f+0x334>
 800e140:	2200      	movs	r2, #0
 800e142:	1e63      	subs	r3, r4, #1
 800e144:	9901      	ldr	r1, [sp, #4]
 800e146:	428b      	cmp	r3, r1
 800e148:	da4a      	bge.n	800e1e0 <__kernel_rem_pio2f+0x2b4>
 800e14a:	2a00      	cmp	r2, #0
 800e14c:	d076      	beq.n	800e23c <__kernel_rem_pio2f+0x310>
 800e14e:	3c01      	subs	r4, #1
 800e150:	ab0a      	add	r3, sp, #40	@ 0x28
 800e152:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e156:	3f08      	subs	r7, #8
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d0f8      	beq.n	800e14e <__kernel_rem_pio2f+0x222>
 800e15c:	4639      	mov	r1, r7
 800e15e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800e162:	f7ff fe79 	bl	800de58 <scalbnf>
 800e166:	46a2      	mov	sl, r4
 800e168:	4607      	mov	r7, r0
 800e16a:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 800e16e:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 800e172:	f1ba 0f00 	cmp.w	sl, #0
 800e176:	f280 80a1 	bge.w	800e2bc <__kernel_rem_pio2f+0x390>
 800e17a:	4627      	mov	r7, r4
 800e17c:	2200      	movs	r2, #0
 800e17e:	2f00      	cmp	r7, #0
 800e180:	f2c0 80cb 	blt.w	800e31a <__kernel_rem_pio2f+0x3ee>
 800e184:	a946      	add	r1, sp, #280	@ 0x118
 800e186:	4690      	mov	r8, r2
 800e188:	f04f 0a00 	mov.w	sl, #0
 800e18c:	4b18      	ldr	r3, [pc, #96]	@ (800e1f0 <__kernel_rem_pio2f+0x2c4>)
 800e18e:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800e192:	eba4 0907 	sub.w	r9, r4, r7
 800e196:	e0b4      	b.n	800e302 <__kernel_rem_pio2f+0x3d6>
 800e198:	2502      	movs	r5, #2
 800e19a:	e74f      	b.n	800e03c <__kernel_rem_pio2f+0x110>
 800e19c:	f858 3b04 	ldr.w	r3, [r8], #4
 800e1a0:	f1ba 0f00 	cmp.w	sl, #0
 800e1a4:	d108      	bne.n	800e1b8 <__kernel_rem_pio2f+0x28c>
 800e1a6:	b123      	cbz	r3, 800e1b2 <__kernel_rem_pio2f+0x286>
 800e1a8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800e1ac:	f848 3c04 	str.w	r3, [r8, #-4]
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	469a      	mov	sl, r3
 800e1b4:	3201      	adds	r2, #1
 800e1b6:	e744      	b.n	800e042 <__kernel_rem_pio2f+0x116>
 800e1b8:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800e1bc:	e7f6      	b.n	800e1ac <__kernel_rem_pio2f+0x280>
 800e1be:	1e62      	subs	r2, r4, #1
 800e1c0:	ab0a      	add	r3, sp, #40	@ 0x28
 800e1c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1ca:	a90a      	add	r1, sp, #40	@ 0x28
 800e1cc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e1d0:	e742      	b.n	800e058 <__kernel_rem_pio2f+0x12c>
 800e1d2:	1e62      	subs	r2, r4, #1
 800e1d4:	ab0a      	add	r3, sp, #40	@ 0x28
 800e1d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e1de:	e7f4      	b.n	800e1ca <__kernel_rem_pio2f+0x29e>
 800e1e0:	a90a      	add	r1, sp, #40	@ 0x28
 800e1e2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e1e6:	3b01      	subs	r3, #1
 800e1e8:	430a      	orrs	r2, r1
 800e1ea:	e7ab      	b.n	800e144 <__kernel_rem_pio2f+0x218>
 800e1ec:	0800f050 	.word	0x0800f050
 800e1f0:	0800f024 	.word	0x0800f024
 800e1f4:	3301      	adds	r3, #1
 800e1f6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e1fa:	2900      	cmp	r1, #0
 800e1fc:	d0fa      	beq.n	800e1f4 <__kernel_rem_pio2f+0x2c8>
 800e1fe:	9a04      	ldr	r2, [sp, #16]
 800e200:	a91e      	add	r1, sp, #120	@ 0x78
 800e202:	18a2      	adds	r2, r4, r2
 800e204:	1c66      	adds	r6, r4, #1
 800e206:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800e20a:	441c      	add	r4, r3
 800e20c:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 800e210:	42b4      	cmp	r4, r6
 800e212:	f6ff aecf 	blt.w	800dfb4 <__kernel_rem_pio2f+0x88>
 800e216:	9b07      	ldr	r3, [sp, #28]
 800e218:	46ab      	mov	fp, r5
 800e21a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e21e:	f7f2 f861 	bl	80002e4 <__aeabi_i2f>
 800e222:	f04f 0a00 	mov.w	sl, #0
 800e226:	f04f 0800 	mov.w	r8, #0
 800e22a:	6028      	str	r0, [r5, #0]
 800e22c:	9b03      	ldr	r3, [sp, #12]
 800e22e:	459a      	cmp	sl, r3
 800e230:	dd07      	ble.n	800e242 <__kernel_rem_pio2f+0x316>
 800e232:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 800e236:	3504      	adds	r5, #4
 800e238:	3601      	adds	r6, #1
 800e23a:	e7e9      	b.n	800e210 <__kernel_rem_pio2f+0x2e4>
 800e23c:	2301      	movs	r3, #1
 800e23e:	9a08      	ldr	r2, [sp, #32]
 800e240:	e7d9      	b.n	800e1f6 <__kernel_rem_pio2f+0x2ca>
 800e242:	9b05      	ldr	r3, [sp, #20]
 800e244:	f85b 0904 	ldr.w	r0, [fp], #-4
 800e248:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800e24c:	f7f2 f89e 	bl	800038c <__aeabi_fmul>
 800e250:	4601      	mov	r1, r0
 800e252:	4640      	mov	r0, r8
 800e254:	f7f1 ff92 	bl	800017c <__addsf3>
 800e258:	f10a 0a01 	add.w	sl, sl, #1
 800e25c:	4680      	mov	r8, r0
 800e25e:	e7e5      	b.n	800e22c <__kernel_rem_pio2f+0x300>
 800e260:	9b06      	ldr	r3, [sp, #24]
 800e262:	9a02      	ldr	r2, [sp, #8]
 800e264:	4648      	mov	r0, r9
 800e266:	1a99      	subs	r1, r3, r2
 800e268:	f7ff fdf6 	bl	800de58 <scalbnf>
 800e26c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800e270:	4680      	mov	r8, r0
 800e272:	f7f2 fa3d 	bl	80006f0 <__aeabi_fcmpge>
 800e276:	b1f8      	cbz	r0, 800e2b8 <__kernel_rem_pio2f+0x38c>
 800e278:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800e27c:	4640      	mov	r0, r8
 800e27e:	f7f2 f885 	bl	800038c <__aeabi_fmul>
 800e282:	f7f2 fa5f 	bl	8000744 <__aeabi_f2iz>
 800e286:	f7f2 f82d 	bl	80002e4 <__aeabi_i2f>
 800e28a:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800e28e:	4681      	mov	r9, r0
 800e290:	f7f2 f87c 	bl	800038c <__aeabi_fmul>
 800e294:	4601      	mov	r1, r0
 800e296:	4640      	mov	r0, r8
 800e298:	f7f1 ff6e 	bl	8000178 <__aeabi_fsub>
 800e29c:	f7f2 fa52 	bl	8000744 <__aeabi_f2iz>
 800e2a0:	ab0a      	add	r3, sp, #40	@ 0x28
 800e2a2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e2a6:	4648      	mov	r0, r9
 800e2a8:	3401      	adds	r4, #1
 800e2aa:	3708      	adds	r7, #8
 800e2ac:	f7f2 fa4a 	bl	8000744 <__aeabi_f2iz>
 800e2b0:	ab0a      	add	r3, sp, #40	@ 0x28
 800e2b2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e2b6:	e751      	b.n	800e15c <__kernel_rem_pio2f+0x230>
 800e2b8:	4640      	mov	r0, r8
 800e2ba:	e7f7      	b.n	800e2ac <__kernel_rem_pio2f+0x380>
 800e2bc:	ab0a      	add	r3, sp, #40	@ 0x28
 800e2be:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e2c2:	f7f2 f80f 	bl	80002e4 <__aeabi_i2f>
 800e2c6:	4639      	mov	r1, r7
 800e2c8:	f7f2 f860 	bl	800038c <__aeabi_fmul>
 800e2cc:	4649      	mov	r1, r9
 800e2ce:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 800e2d2:	4638      	mov	r0, r7
 800e2d4:	f7f2 f85a 	bl	800038c <__aeabi_fmul>
 800e2d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e2dc:	4607      	mov	r7, r0
 800e2de:	e748      	b.n	800e172 <__kernel_rem_pio2f+0x246>
 800e2e0:	f853 0b04 	ldr.w	r0, [r3], #4
 800e2e4:	f85b 1b04 	ldr.w	r1, [fp], #4
 800e2e8:	9203      	str	r2, [sp, #12]
 800e2ea:	9302      	str	r3, [sp, #8]
 800e2ec:	f7f2 f84e 	bl	800038c <__aeabi_fmul>
 800e2f0:	4601      	mov	r1, r0
 800e2f2:	4640      	mov	r0, r8
 800e2f4:	f7f1 ff42 	bl	800017c <__addsf3>
 800e2f8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e2fc:	4680      	mov	r8, r0
 800e2fe:	f10a 0a01 	add.w	sl, sl, #1
 800e302:	9901      	ldr	r1, [sp, #4]
 800e304:	458a      	cmp	sl, r1
 800e306:	dc01      	bgt.n	800e30c <__kernel_rem_pio2f+0x3e0>
 800e308:	45ca      	cmp	sl, r9
 800e30a:	dde9      	ble.n	800e2e0 <__kernel_rem_pio2f+0x3b4>
 800e30c:	ab5a      	add	r3, sp, #360	@ 0x168
 800e30e:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800e312:	f849 8ca0 	str.w	r8, [r9, #-160]
 800e316:	3f01      	subs	r7, #1
 800e318:	e731      	b.n	800e17e <__kernel_rem_pio2f+0x252>
 800e31a:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800e31c:	2b02      	cmp	r3, #2
 800e31e:	dc07      	bgt.n	800e330 <__kernel_rem_pio2f+0x404>
 800e320:	2b00      	cmp	r3, #0
 800e322:	dc4e      	bgt.n	800e3c2 <__kernel_rem_pio2f+0x496>
 800e324:	d02e      	beq.n	800e384 <__kernel_rem_pio2f+0x458>
 800e326:	f006 0007 	and.w	r0, r6, #7
 800e32a:	b05b      	add	sp, #364	@ 0x16c
 800e32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e330:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800e332:	2b03      	cmp	r3, #3
 800e334:	d1f7      	bne.n	800e326 <__kernel_rem_pio2f+0x3fa>
 800e336:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 800e33a:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800e33e:	46b8      	mov	r8, r7
 800e340:	46a2      	mov	sl, r4
 800e342:	f1ba 0f00 	cmp.w	sl, #0
 800e346:	dc49      	bgt.n	800e3dc <__kernel_rem_pio2f+0x4b0>
 800e348:	46a1      	mov	r9, r4
 800e34a:	f1b9 0f01 	cmp.w	r9, #1
 800e34e:	dc60      	bgt.n	800e412 <__kernel_rem_pio2f+0x4e6>
 800e350:	2000      	movs	r0, #0
 800e352:	2c01      	cmp	r4, #1
 800e354:	dc76      	bgt.n	800e444 <__kernel_rem_pio2f+0x518>
 800e356:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800e358:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800e35a:	2d00      	cmp	r5, #0
 800e35c:	d178      	bne.n	800e450 <__kernel_rem_pio2f+0x524>
 800e35e:	9900      	ldr	r1, [sp, #0]
 800e360:	600a      	str	r2, [r1, #0]
 800e362:	460a      	mov	r2, r1
 800e364:	604b      	str	r3, [r1, #4]
 800e366:	6090      	str	r0, [r2, #8]
 800e368:	e7dd      	b.n	800e326 <__kernel_rem_pio2f+0x3fa>
 800e36a:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800e36e:	f7f1 ff05 	bl	800017c <__addsf3>
 800e372:	3c01      	subs	r4, #1
 800e374:	2c00      	cmp	r4, #0
 800e376:	daf8      	bge.n	800e36a <__kernel_rem_pio2f+0x43e>
 800e378:	b10d      	cbz	r5, 800e37e <__kernel_rem_pio2f+0x452>
 800e37a:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800e37e:	9b00      	ldr	r3, [sp, #0]
 800e380:	6018      	str	r0, [r3, #0]
 800e382:	e7d0      	b.n	800e326 <__kernel_rem_pio2f+0x3fa>
 800e384:	2000      	movs	r0, #0
 800e386:	af32      	add	r7, sp, #200	@ 0xc8
 800e388:	e7f4      	b.n	800e374 <__kernel_rem_pio2f+0x448>
 800e38a:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800e38e:	f7f1 fef5 	bl	800017c <__addsf3>
 800e392:	f108 38ff 	add.w	r8, r8, #4294967295
 800e396:	f1b8 0f00 	cmp.w	r8, #0
 800e39a:	daf6      	bge.n	800e38a <__kernel_rem_pio2f+0x45e>
 800e39c:	b1ad      	cbz	r5, 800e3ca <__kernel_rem_pio2f+0x49e>
 800e39e:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 800e3a2:	9a00      	ldr	r2, [sp, #0]
 800e3a4:	4601      	mov	r1, r0
 800e3a6:	6013      	str	r3, [r2, #0]
 800e3a8:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800e3aa:	f7f1 fee5 	bl	8000178 <__aeabi_fsub>
 800e3ae:	f04f 0801 	mov.w	r8, #1
 800e3b2:	4544      	cmp	r4, r8
 800e3b4:	da0b      	bge.n	800e3ce <__kernel_rem_pio2f+0x4a2>
 800e3b6:	b10d      	cbz	r5, 800e3bc <__kernel_rem_pio2f+0x490>
 800e3b8:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800e3bc:	9b00      	ldr	r3, [sp, #0]
 800e3be:	6058      	str	r0, [r3, #4]
 800e3c0:	e7b1      	b.n	800e326 <__kernel_rem_pio2f+0x3fa>
 800e3c2:	46a0      	mov	r8, r4
 800e3c4:	2000      	movs	r0, #0
 800e3c6:	af32      	add	r7, sp, #200	@ 0xc8
 800e3c8:	e7e5      	b.n	800e396 <__kernel_rem_pio2f+0x46a>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	e7e9      	b.n	800e3a2 <__kernel_rem_pio2f+0x476>
 800e3ce:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800e3d2:	f7f1 fed3 	bl	800017c <__addsf3>
 800e3d6:	f108 0801 	add.w	r8, r8, #1
 800e3da:	e7ea      	b.n	800e3b2 <__kernel_rem_pio2f+0x486>
 800e3dc:	f8d8 3000 	ldr.w	r3, [r8]
 800e3e0:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	4610      	mov	r0, r2
 800e3e8:	9302      	str	r3, [sp, #8]
 800e3ea:	9201      	str	r2, [sp, #4]
 800e3ec:	f7f1 fec6 	bl	800017c <__addsf3>
 800e3f0:	9a01      	ldr	r2, [sp, #4]
 800e3f2:	4601      	mov	r1, r0
 800e3f4:	4681      	mov	r9, r0
 800e3f6:	4610      	mov	r0, r2
 800e3f8:	f7f1 febe 	bl	8000178 <__aeabi_fsub>
 800e3fc:	9b02      	ldr	r3, [sp, #8]
 800e3fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e402:	4619      	mov	r1, r3
 800e404:	f7f1 feba 	bl	800017c <__addsf3>
 800e408:	f848 0904 	str.w	r0, [r8], #-4
 800e40c:	f8c8 9000 	str.w	r9, [r8]
 800e410:	e797      	b.n	800e342 <__kernel_rem_pio2f+0x416>
 800e412:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800e416:	f8d7 a000 	ldr.w	sl, [r7]
 800e41a:	4618      	mov	r0, r3
 800e41c:	4651      	mov	r1, sl
 800e41e:	9301      	str	r3, [sp, #4]
 800e420:	f7f1 feac 	bl	800017c <__addsf3>
 800e424:	9b01      	ldr	r3, [sp, #4]
 800e426:	4601      	mov	r1, r0
 800e428:	4680      	mov	r8, r0
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7f1 fea4 	bl	8000178 <__aeabi_fsub>
 800e430:	4651      	mov	r1, sl
 800e432:	f7f1 fea3 	bl	800017c <__addsf3>
 800e436:	f847 0904 	str.w	r0, [r7], #-4
 800e43a:	f109 39ff 	add.w	r9, r9, #4294967295
 800e43e:	f8c7 8000 	str.w	r8, [r7]
 800e442:	e782      	b.n	800e34a <__kernel_rem_pio2f+0x41e>
 800e444:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800e448:	f7f1 fe98 	bl	800017c <__addsf3>
 800e44c:	3c01      	subs	r4, #1
 800e44e:	e780      	b.n	800e352 <__kernel_rem_pio2f+0x426>
 800e450:	9900      	ldr	r1, [sp, #0]
 800e452:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800e456:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e45a:	600a      	str	r2, [r1, #0]
 800e45c:	604b      	str	r3, [r1, #4]
 800e45e:	460a      	mov	r2, r1
 800e460:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800e464:	e77f      	b.n	800e366 <__kernel_rem_pio2f+0x43a>
 800e466:	bf00      	nop

0800e468 <floorf>:
 800e468:	b570      	push	{r4, r5, r6, lr}
 800e46a:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800e46e:	3d7f      	subs	r5, #127	@ 0x7f
 800e470:	2d16      	cmp	r5, #22
 800e472:	4601      	mov	r1, r0
 800e474:	4604      	mov	r4, r0
 800e476:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800e47a:	dc26      	bgt.n	800e4ca <floorf+0x62>
 800e47c:	2d00      	cmp	r5, #0
 800e47e:	da0f      	bge.n	800e4a0 <floorf+0x38>
 800e480:	4917      	ldr	r1, [pc, #92]	@ (800e4e0 <floorf+0x78>)
 800e482:	f7f1 fe7b 	bl	800017c <__addsf3>
 800e486:	2100      	movs	r1, #0
 800e488:	f7f2 f93c 	bl	8000704 <__aeabi_fcmpgt>
 800e48c:	b130      	cbz	r0, 800e49c <floorf+0x34>
 800e48e:	2c00      	cmp	r4, #0
 800e490:	da23      	bge.n	800e4da <floorf+0x72>
 800e492:	2e00      	cmp	r6, #0
 800e494:	4c13      	ldr	r4, [pc, #76]	@ (800e4e4 <floorf+0x7c>)
 800e496:	bf08      	it	eq
 800e498:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800e49c:	4621      	mov	r1, r4
 800e49e:	e01a      	b.n	800e4d6 <floorf+0x6e>
 800e4a0:	4e11      	ldr	r6, [pc, #68]	@ (800e4e8 <floorf+0x80>)
 800e4a2:	412e      	asrs	r6, r5
 800e4a4:	4230      	tst	r0, r6
 800e4a6:	d016      	beq.n	800e4d6 <floorf+0x6e>
 800e4a8:	490d      	ldr	r1, [pc, #52]	@ (800e4e0 <floorf+0x78>)
 800e4aa:	f7f1 fe67 	bl	800017c <__addsf3>
 800e4ae:	2100      	movs	r1, #0
 800e4b0:	f7f2 f928 	bl	8000704 <__aeabi_fcmpgt>
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	d0f1      	beq.n	800e49c <floorf+0x34>
 800e4b8:	2c00      	cmp	r4, #0
 800e4ba:	bfbe      	ittt	lt
 800e4bc:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 800e4c0:	412b      	asrlt	r3, r5
 800e4c2:	18e4      	addlt	r4, r4, r3
 800e4c4:	ea24 0406 	bic.w	r4, r4, r6
 800e4c8:	e7e8      	b.n	800e49c <floorf+0x34>
 800e4ca:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800e4ce:	d302      	bcc.n	800e4d6 <floorf+0x6e>
 800e4d0:	f7f1 fe54 	bl	800017c <__addsf3>
 800e4d4:	4601      	mov	r1, r0
 800e4d6:	4608      	mov	r0, r1
 800e4d8:	bd70      	pop	{r4, r5, r6, pc}
 800e4da:	2400      	movs	r4, #0
 800e4dc:	e7de      	b.n	800e49c <floorf+0x34>
 800e4de:	bf00      	nop
 800e4e0:	7149f2ca 	.word	0x7149f2ca
 800e4e4:	bf800000 	.word	0xbf800000
 800e4e8:	007fffff 	.word	0x007fffff

0800e4ec <_init>:
 800e4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ee:	bf00      	nop
 800e4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4f2:	bc08      	pop	{r3}
 800e4f4:	469e      	mov	lr, r3
 800e4f6:	4770      	bx	lr

0800e4f8 <_fini>:
 800e4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4fa:	bf00      	nop
 800e4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4fe:	bc08      	pop	{r3}
 800e500:	469e      	mov	lr, r3
 800e502:	4770      	bx	lr
