
STM32PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000721c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006f0c  08007328  08007328  00008328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e234  0800e234  00010070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800e234  0800e234  00010070  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800e234  0800e234  00010070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e234  0800e234  0000f234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e238  0800e238  0000f238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800e23c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003eb4  20000070  0800e2ac  00010070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003f24  0800e2ac  00010f24  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001032e  00000000  00000000  00010099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e41  00000000  00000000  000203c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  00023208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e22  00000000  00000000  000243d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001823e  00000000  00000000  000251fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016187  00000000  00000000  0003d438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008deca  00000000  00000000  000535bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1489  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005448  00000000  00000000  000e14cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000e6914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08007310 	.word	0x08007310

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08007310 	.word	0x08007310

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpun>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000700:	d102      	bne.n	8000708 <__aeabi_fcmpun+0x14>
 8000702:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000706:	d108      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000708:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800070c:	d102      	bne.n	8000714 <__aeabi_fcmpun+0x20>
 800070e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000712:	d102      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	4770      	bx	lr
 800071a:	f04f 0001 	mov.w	r0, #1
 800071e:	4770      	bx	lr

08000720 <__aeabi_f2iz>:
 8000720:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000724:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000728:	d30f      	bcc.n	800074a <__aeabi_f2iz+0x2a>
 800072a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800072e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000732:	d90d      	bls.n	8000750 <__aeabi_f2iz+0x30>
 8000734:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000738:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000740:	fa23 f002 	lsr.w	r0, r3, r2
 8000744:	bf18      	it	ne
 8000746:	4240      	negne	r0, r0
 8000748:	4770      	bx	lr
 800074a:	f04f 0000 	mov.w	r0, #0
 800074e:	4770      	bx	lr
 8000750:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000754:	d101      	bne.n	800075a <__aeabi_f2iz+0x3a>
 8000756:	0242      	lsls	r2, r0, #9
 8000758:	d105      	bne.n	8000766 <__aeabi_f2iz+0x46>
 800075a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800075e:	bf08      	it	eq
 8000760:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000772:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_DMA_Init+0x38>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	4a0b      	ldr	r2, [pc, #44]	@ (80007a4 <MX_DMA_Init+0x38>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6153      	str	r3, [r2, #20]
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_DMA_Init+0x38>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	2010      	movs	r0, #16
 8000790:	f002 faff 	bl	8002d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000794:	2010      	movs	r0, #16
 8000796:	f002 fb18 	bl	8002dca <HAL_NVIC_EnableIRQ>

}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000

080007a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 0310 	add.w	r3, r7, #16
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000868 <MX_GPIO_Init+0xc0>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a29      	ldr	r2, [pc, #164]	@ (8000868 <MX_GPIO_Init+0xc0>)
 80007c2:	f043 0310 	orr.w	r3, r3, #16
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b27      	ldr	r3, [pc, #156]	@ (8000868 <MX_GPIO_Init+0xc0>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f003 0310 	and.w	r3, r3, #16
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d4:	4b24      	ldr	r3, [pc, #144]	@ (8000868 <MX_GPIO_Init+0xc0>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a23      	ldr	r2, [pc, #140]	@ (8000868 <MX_GPIO_Init+0xc0>)
 80007da:	f043 0320 	orr.w	r3, r3, #32
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <MX_GPIO_Init+0xc0>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0320 	and.w	r3, r3, #32
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <MX_GPIO_Init+0xc0>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000868 <MX_GPIO_Init+0xc0>)
 80007f2:	f043 0308 	orr.w	r3, r3, #8
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <MX_GPIO_Init+0xc0>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0308 	and.w	r3, r3, #8
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000804:	4b18      	ldr	r3, [pc, #96]	@ (8000868 <MX_GPIO_Init+0xc0>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a17      	ldr	r2, [pc, #92]	@ (8000868 <MX_GPIO_Init+0xc0>)
 800080a:	f043 0304 	orr.w	r3, r3, #4
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <MX_GPIO_Init+0xc0>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SysWork_Light_GPIO_Port, SysWork_Light_Pin, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000822:	4812      	ldr	r0, [pc, #72]	@ (800086c <MX_GPIO_Init+0xc4>)
 8000824:	f002 fdd0 	bl	80033c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SysWork_Light_Pin */
  GPIO_InitStruct.Pin = SysWork_Light_Pin;
 8000828:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800082c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2302      	movs	r3, #2
 8000838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SysWork_Light_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	4619      	mov	r1, r3
 8000840:	480a      	ldr	r0, [pc, #40]	@ (800086c <MX_GPIO_Init+0xc4>)
 8000842:	f002 fc3d 	bl	80030c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch_Input_Pin Encoder_Input_Pin */
  GPIO_InitStruct.Pin = Switch_Input_Pin|Encoder_Input_Pin;
 8000846:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800084a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000850:	2301      	movs	r3, #1
 8000852:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	4619      	mov	r1, r3
 800085a:	4805      	ldr	r0, [pc, #20]	@ (8000870 <MX_GPIO_Init+0xc8>)
 800085c:	f002 fc30 	bl	80030c0 <HAL_GPIO_Init>

}
 8000860:	bf00      	nop
 8000862:	3720      	adds	r7, #32
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40021000 	.word	0x40021000
 800086c:	40011000 	.word	0x40011000
 8000870:	40010c00 	.word	0x40010c00

08000874 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000878:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <MX_I2C1_Init+0x50>)
 800087a:	4a13      	ldr	r2, [pc, #76]	@ (80008c8 <MX_I2C1_Init+0x54>)
 800087c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800087e:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <MX_I2C1_Init+0x50>)
 8000880:	4a12      	ldr	r2, [pc, #72]	@ (80008cc <MX_I2C1_Init+0x58>)
 8000882:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000884:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <MX_I2C1_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800088a:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <MX_I2C1_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000890:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <MX_I2C1_Init+0x50>)
 8000892:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000896:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000898:	4b0a      	ldr	r3, [pc, #40]	@ (80008c4 <MX_I2C1_Init+0x50>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <MX_I2C1_Init+0x50>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a4:	4b07      	ldr	r3, [pc, #28]	@ (80008c4 <MX_I2C1_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <MX_I2C1_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008b0:	4804      	ldr	r0, [pc, #16]	@ (80008c4 <MX_I2C1_Init+0x50>)
 80008b2:	f002 fda1 	bl	80033f8 <HAL_I2C_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008bc:	f000 f93f 	bl	8000b3e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	2000008c 	.word	0x2000008c
 80008c8:	40005400 	.word	0x40005400
 80008cc:	00061a80 	.word	0x00061a80

080008d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a29      	ldr	r2, [pc, #164]	@ (8000990 <HAL_I2C_MspInit+0xc0>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d14a      	bne.n	8000986 <HAL_I2C_MspInit+0xb6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f0:	4b28      	ldr	r3, [pc, #160]	@ (8000994 <HAL_I2C_MspInit+0xc4>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	4a27      	ldr	r2, [pc, #156]	@ (8000994 <HAL_I2C_MspInit+0xc4>)
 80008f6:	f043 0308 	orr.w	r3, r3, #8
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	4b25      	ldr	r3, [pc, #148]	@ (8000994 <HAL_I2C_MspInit+0xc4>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f003 0308 	and.w	r3, r3, #8
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8000908:	23c0      	movs	r3, #192	@ 0xc0
 800090a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800090c:	2312      	movs	r3, #18
 800090e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000910:	2303      	movs	r3, #3
 8000912:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	4619      	mov	r1, r3
 800091a:	481f      	ldr	r0, [pc, #124]	@ (8000998 <HAL_I2C_MspInit+0xc8>)
 800091c:	f002 fbd0 	bl	80030c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000920:	4b1c      	ldr	r3, [pc, #112]	@ (8000994 <HAL_I2C_MspInit+0xc4>)
 8000922:	69db      	ldr	r3, [r3, #28]
 8000924:	4a1b      	ldr	r2, [pc, #108]	@ (8000994 <HAL_I2C_MspInit+0xc4>)
 8000926:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800092a:	61d3      	str	r3, [r2, #28]
 800092c:	4b19      	ldr	r3, [pc, #100]	@ (8000994 <HAL_I2C_MspInit+0xc4>)
 800092e:	69db      	ldr	r3, [r3, #28]
 8000930:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000938:	4b18      	ldr	r3, [pc, #96]	@ (800099c <HAL_I2C_MspInit+0xcc>)
 800093a:	4a19      	ldr	r2, [pc, #100]	@ (80009a0 <HAL_I2C_MspInit+0xd0>)
 800093c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800093e:	4b17      	ldr	r3, [pc, #92]	@ (800099c <HAL_I2C_MspInit+0xcc>)
 8000940:	2210      	movs	r2, #16
 8000942:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000944:	4b15      	ldr	r3, [pc, #84]	@ (800099c <HAL_I2C_MspInit+0xcc>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800094a:	4b14      	ldr	r3, [pc, #80]	@ (800099c <HAL_I2C_MspInit+0xcc>)
 800094c:	2280      	movs	r2, #128	@ 0x80
 800094e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000950:	4b12      	ldr	r3, [pc, #72]	@ (800099c <HAL_I2C_MspInit+0xcc>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <HAL_I2C_MspInit+0xcc>)
 8000958:	2200      	movs	r2, #0
 800095a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <HAL_I2C_MspInit+0xcc>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <HAL_I2C_MspInit+0xcc>)
 8000964:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000968:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800096a:	480c      	ldr	r0, [pc, #48]	@ (800099c <HAL_I2C_MspInit+0xcc>)
 800096c:	f002 fa48 	bl	8002e00 <HAL_DMA_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 8000976:	f000 f8e2 	bl	8000b3e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a07      	ldr	r2, [pc, #28]	@ (800099c <HAL_I2C_MspInit+0xcc>)
 800097e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000980:	4a06      	ldr	r2, [pc, #24]	@ (800099c <HAL_I2C_MspInit+0xcc>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000986:	bf00      	nop
 8000988:	3720      	adds	r7, #32
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40005400 	.word	0x40005400
 8000994:	40021000 	.word	0x40021000
 8000998:	40010c00 	.word	0x40010c00
 800099c:	200000e0 	.word	0x200000e0
 80009a0:	4002006c 	.word	0x4002006c

080009a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a8:	f002 f896 	bl	8002ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ac:	f000 f882 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b0:	f7ff fefa 	bl	80007a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80009b4:	f7ff feda 	bl	800076c <MX_DMA_Init>
  MX_I2C1_Init();
 80009b8:	f7ff ff5c 	bl	8000874 <MX_I2C1_Init>
  MX_TIM1_Init();
 80009bc:	f001 fd72 	bl	80024a4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80009c0:	f001 fe12 	bl	80025e8 <MX_TIM3_Init>
  MX_SPI2_Init();
 80009c4:	f001 fc48 	bl	8002258 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init(); // 初始化OLED
 80009c8:	f000 fa9c 	bl	8000f04 <OLED_Init>
  OLED_InitBuffer(); // 初始化双缓冲
 80009cc:	f000 f8be 	bl	8000b4c <OLED_InitBuffer>
  OLED_ClearBuffer(); // 清空缓冲区
 80009d0:	f000 f8f0 	bl	8000bb4 <OLED_ClearBuffer>
  
  OLED_EnableDiffMode(1);  // 启用差分更新
 80009d4:	2001      	movs	r0, #1
 80009d6:	f000 fc03 	bl	80011e0 <OLED_EnableDiffMode>
  OLED_EnableFastUpdate(1); // 启用快速更新
 80009da:	2001      	movs	r0, #1
 80009dc:	f000 fc1e 	bl	800121c <OLED_EnableFastUpdate>

  
  // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // 启动PWM
 80009e0:	2104      	movs	r1, #4
 80009e2:	4829      	ldr	r0, [pc, #164]	@ (8000a88 <main+0xe4>)
 80009e4:	f003 fecc 	bl	8004780 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1); // 启动编码器
 80009e8:	2100      	movs	r1, #0
 80009ea:	4828      	ldr	r0, [pc, #160]	@ (8000a8c <main+0xe8>)
 80009ec:	f004 f80c 	bl	8004a08 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2); // 启动编码器
 80009f0:	2104      	movs	r1, #4
 80009f2:	4826      	ldr	r0, [pc, #152]	@ (8000a8c <main+0xe8>)
 80009f4:	f004 f808 	bl	8004a08 <HAL_TIM_Encoder_Start>

  OLED_InitAnimationManager(&g_AnimationManager); // 初始化动画管理器
 80009f8:	4825      	ldr	r0, [pc, #148]	@ (8000a90 <main+0xec>)
 80009fa:	f001 fbc9 	bl	8002190 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Menu_AnimationManager); // 初始化菜单动画管理器
 80009fe:	4825      	ldr	r0, [pc, #148]	@ (8000a94 <main+0xf0>)
 8000a00:	f001 fbc6 	bl	8002190 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Games_AnimationManager); // 初始化游戏动画管理器
 8000a04:	4824      	ldr	r0, [pc, #144]	@ (8000a98 <main+0xf4>)
 8000a06:	f001 fbc3 	bl	8002190 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Tools_AnimationManager); // 初始化工具动画管理器
 8000a0a:	4824      	ldr	r0, [pc, #144]	@ (8000a9c <main+0xf8>)
 8000a0c:	f001 fbc0 	bl	8002190 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Settings_AnimationManager); // 初始化设置动画管理器
 8000a10:	4823      	ldr	r0, [pc, #140]	@ (8000aa0 <main+0xfc>)
 8000a12:	f001 fbbd 	bl	8002190 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&About_AnimationManager); // 初始化关于动画管理器
 8000a16:	4823      	ldr	r0, [pc, #140]	@ (8000aa4 <main+0x100>)
 8000a18:	f001 fbba 	bl	8002190 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Status_AnimationManager); // 初始化状态动画管理器
 8000a1c:	4822      	ldr	r0, [pc, #136]	@ (8000aa8 <main+0x104>)
 8000a1e:	f001 fbb7 	bl	8002190 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&g_Title_AnimationManager); // 初始化标题动画管理器
 8000a22:	4822      	ldr	r0, [pc, #136]	@ (8000aac <main+0x108>)
 8000a24:	f001 fbb4 	bl	8002190 <OLED_InitAnimationManager>
  __HAL_TIM_SET_COUNTER(&htim3, 32767);
 8000a28:	4b18      	ldr	r3, [pc, #96]	@ (8000a8c <main+0xe8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000a30:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {    
    #pragma region OLED_UI_SETTINGS // UI设置
    OLED_ClearBuffer();
 8000a32:	f000 f8bf 	bl	8000bb4 <OLED_ClearBuffer>
    
    // System_UI_Loop(); // UI循环
    play_video(); // 播放视频
 8000a36:	f001 ffc1 	bl	80029bc <play_video>
    
    OLED_OptimizedDisplayFPS(80, 56); // 显示帧率
 8000a3a:	2138      	movs	r1, #56	@ 0x38
 8000a3c:	2050      	movs	r0, #80	@ 0x50
 8000a3e:	f000 fc97 	bl	8001370 <OLED_OptimizedDisplayFPS>
    count = __HAL_TIM_GET_COUNTER(&htim3); // 获取编码器计数值 1圈40
 8000a42:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <main+0xe8>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	4b19      	ldr	r3, [pc, #100]	@ (8000ab0 <main+0x10c>)
 8000a4c:	801a      	strh	r2, [r3, #0]
    OLED_UpdateAnimationManager(&Menu_AnimationManager); // 更新菜单动画管理器
 8000a4e:	4811      	ldr	r0, [pc, #68]	@ (8000a94 <main+0xf0>)
 8000a50:	f001 fbb1 	bl	80021b6 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_AnimationManager); // 更新动画管理器
 8000a54:	480e      	ldr	r0, [pc, #56]	@ (8000a90 <main+0xec>)
 8000a56:	f001 fbae 	bl	80021b6 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Games_AnimationManager); // 更新游戏动画管理器
 8000a5a:	480f      	ldr	r0, [pc, #60]	@ (8000a98 <main+0xf4>)
 8000a5c:	f001 fbab 	bl	80021b6 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Tools_AnimationManager); // 更新工具动画管理器
 8000a60:	480e      	ldr	r0, [pc, #56]	@ (8000a9c <main+0xf8>)
 8000a62:	f001 fba8 	bl	80021b6 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Settings_AnimationManager); // 更新设置动画管理器
 8000a66:	480e      	ldr	r0, [pc, #56]	@ (8000aa0 <main+0xfc>)
 8000a68:	f001 fba5 	bl	80021b6 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&About_AnimationManager); // 更新关于动画管理器
 8000a6c:	480d      	ldr	r0, [pc, #52]	@ (8000aa4 <main+0x100>)
 8000a6e:	f001 fba2 	bl	80021b6 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Status_AnimationManager); // 更新状态动画管理器
 8000a72:	480d      	ldr	r0, [pc, #52]	@ (8000aa8 <main+0x104>)
 8000a74:	f001 fb9f 	bl	80021b6 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_Title_AnimationManager); // 更新标题动画管理器
 8000a78:	480c      	ldr	r0, [pc, #48]	@ (8000aac <main+0x108>)
 8000a7a:	f001 fb9c 	bl	80021b6 <OLED_UpdateAnimationManager>
    OLED_SmartUpdate(); // 智能更新显示
 8000a7e:	f000 fbdd 	bl	800123c <OLED_SmartUpdate>
    OLED_ClearBuffer();
 8000a82:	bf00      	nop
 8000a84:	e7d5      	b.n	8000a32 <main+0x8e>
 8000a86:	bf00      	nop
 8000a88:	20003d48 	.word	0x20003d48
 8000a8c:	20003d90 	.word	0x20003d90
 8000a90:	200036f8 	.word	0x200036f8
 8000a94:	20000d4c 	.word	0x20000d4c
 8000a98:	20001340 	.word	0x20001340
 8000a9c:	20001934 	.word	0x20001934
 8000aa0:	20001f28 	.word	0x20001f28
 8000aa4:	2000251c 	.word	0x2000251c
 8000aa8:	20002b10 	.word	0x20002b10
 8000aac:	20003104 	.word	0x20003104
 8000ab0:	20000124 	.word	0x20000124

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b090      	sub	sp, #64	@ 0x40
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0318 	add.w	r3, r7, #24
 8000abe:	2228      	movs	r2, #40	@ 0x28
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f004 fd3a 	bl	800553c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ada:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ade:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000af0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000af2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af8:	f107 0318 	add.w	r3, r7, #24
 8000afc:	4618      	mov	r0, r3
 8000afe:	f003 f917 	bl	8003d30 <HAL_RCC_OscConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b08:	f000 f819 	bl	8000b3e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b10:	2302      	movs	r3, #2
 8000b12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2102      	movs	r1, #2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f003 fb84 	bl	8004234 <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b32:	f000 f804 	bl	8000b3e <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3740      	adds	r7, #64	@ 0x40
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b42:	b672      	cpsid	i
}
 8000b44:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b46:	bf00      	nop
 8000b48:	e7fd      	b.n	8000b46 <Error_Handler+0x8>
	...

08000b4c <OLED_InitBuffer>:
        0x22, 0x00, 0x07  // 页地址范围: 0-7
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000b52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b56:	2100      	movs	r1, #0
 8000b58:	4811      	ldr	r0, [pc, #68]	@ (8000ba0 <OLED_InitBuffer+0x54>)
 8000b5a:	f004 fcef 	bl	800553c <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 8000b5e:	f240 4201 	movw	r2, #1025	@ 0x401
 8000b62:	2100      	movs	r1, #0
 8000b64:	480f      	ldr	r0, [pc, #60]	@ (8000ba4 <OLED_InitBuffer+0x58>)
 8000b66:	f004 fce9 	bl	800553c <memset>

    // 初始化第一个字节为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <OLED_InitBuffer+0x58>)
 8000b6c:	2240      	movs	r2, #64	@ 0x40
 8000b6e:	701a      	strb	r2, [r3, #0]

    // 初始化状态变量
    oled_update_flag = OLED_READY;
 8000b70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba8 <OLED_InitBuffer+0x5c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
    oled_dma_busy = OLED_READY;
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <OLED_InitBuffer+0x60>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	71fb      	strb	r3, [r7, #7]
 8000b80:	e006      	b.n	8000b90 <OLED_InitBuffer+0x44>
    {
        oled_dirty_pages[i] = 1;
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <OLED_InitBuffer+0x64>)
 8000b86:	2101      	movs	r1, #1
 8000b88:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	71fb      	strb	r3, [r7, #7]
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	2b07      	cmp	r3, #7
 8000b94:	d9f5      	bls.n	8000b82 <OLED_InitBuffer+0x36>
    }
}
 8000b96:	bf00      	nop
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000138 	.word	0x20000138
 8000ba4:	20000538 	.word	0x20000538
 8000ba8:	2000012c 	.word	0x2000012c
 8000bac:	2000012d 	.word	0x2000012d
 8000bb0:	20000130 	.word	0x20000130

08000bb4 <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000bba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	480a      	ldr	r0, [pc, #40]	@ (8000bec <OLED_ClearBuffer+0x38>)
 8000bc2:	f004 fcbb 	bl	800553c <memset>

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	71fb      	strb	r3, [r7, #7]
 8000bca:	e006      	b.n	8000bda <OLED_ClearBuffer+0x26>
    {
        oled_dirty_pages[i] = 1;
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	4a08      	ldr	r2, [pc, #32]	@ (8000bf0 <OLED_ClearBuffer+0x3c>)
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	71fb      	strb	r3, [r7, #7]
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2b07      	cmp	r3, #7
 8000bde:	d9f5      	bls.n	8000bcc <OLED_ClearBuffer+0x18>
    }
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000138 	.word	0x20000138
 8000bf0:	20000130 	.word	0x20000130

08000bf4 <OLED_IsBusy>:

uint8_t OLED_IsBusy(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
    // 如果标记为忙，检查是否已经过了足够时间
    if (oled_update_flag)
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <OLED_IsBusy+0x44>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d007      	beq.n	8000c14 <OLED_IsBusy+0x20>
    {
        // SSD1315/SSD1306 典型帧率约为60Hz，每帧约16.7ms
        // 可以根据需要调整刷新率，减小此值可以提高帧率
        uint32_t current_time = HAL_GetTick();
 8000c04:	f001 ffc0 	bl	8002b88 <HAL_GetTick>
 8000c08:	6078      	str	r0, [r7, #4]
        if (current_time - oled_last_update_time >= 0)
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <OLED_IsBusy+0x48>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
        {
            oled_update_flag = OLED_READY; // 已经过了足够时间，不再忙
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <OLED_IsBusy+0x44>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
        }
    }

    // 如果DMA传输正在进行，也视为忙
    return (oled_update_flag || oled_dma_busy);
 8000c14:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <OLED_IsBusy+0x44>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d104      	bne.n	8000c28 <OLED_IsBusy+0x34>
 8000c1e:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <OLED_IsBusy+0x4c>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <OLED_IsBusy+0x38>
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e000      	b.n	8000c2e <OLED_IsBusy+0x3a>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	b2db      	uxtb	r3, r3
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	2000012c 	.word	0x2000012c
 8000c3c:	20000128 	.word	0x20000128
 8000c40:	2000012d 	.word	0x2000012d

08000c44 <OLED_UpdateDisplayVSync>:

void OLED_UpdateDisplayVSync(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af02      	add	r7, sp, #8
    // 等待上一次更新完成
    while (OLED_IsBusy())
 8000c4a:	bf00      	nop
 8000c4c:	f7ff ffd2 	bl	8000bf4 <OLED_IsBusy>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d1fa      	bne.n	8000c4c <OLED_UpdateDisplayVSync+0x8>
    {
        // 可以加入短暂延时或者让出CPU，但通常不会停留很久
    }

    oled_update_flag = OLED_BUSY;
 8000c56:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd4 <OLED_UpdateDisplayVSync+0x90>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8000c5c:	f001 ff94 	bl	8002b88 <HAL_GetTick>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4a1d      	ldr	r2, [pc, #116]	@ (8000cd8 <OLED_UpdateDisplayVSync+0x94>)
 8000c64:	6013      	str	r3, [r2, #0]

    OLED_FrontBuffer[0] = 0x40;                                             // 数据控制字节：Co=0, D/C#=1 (数据)
 8000c66:	4b1d      	ldr	r3, [pc, #116]	@ (8000cdc <OLED_UpdateDisplayVSync+0x98>)
 8000c68:	2240      	movs	r2, #64	@ 0x40
 8000c6a:	701a      	strb	r2, [r3, #0]
    memcpy(OLED_FrontBuffer + 1, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES); // 复制当前缓冲区到前缓冲区
 8000c6c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce0 <OLED_UpdateDisplayVSync+0x9c>)
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <OLED_UpdateDisplayVSync+0xa0>)
 8000c70:	4610      	mov	r0, r2
 8000c72:	4619      	mov	r1, r3
 8000c74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c78:	461a      	mov	r2, r3
 8000c7a:	f004 fc93 	bl	80055a4 <memcpy>

    // 一次性发送所有命令
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	71fb      	strb	r3, [r7, #7]
 8000c82:	e008      	b.n	8000c96 <OLED_UpdateDisplayVSync+0x52>
    {
        OLED_SendCommand(cmds[i]);
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	4a18      	ldr	r2, [pc, #96]	@ (8000ce8 <OLED_UpdateDisplayVSync+0xa4>)
 8000c88:	5cd3      	ldrb	r3, [r2, r3]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f920 	bl	8000ed0 <OLED_SendCommand>
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	3301      	adds	r3, #1
 8000c94:	71fb      	strb	r3, [r7, #7]
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	2b07      	cmp	r3, #7
 8000c9a:	d9f3      	bls.n	8000c84 <OLED_UpdateDisplayVSync+0x40>
    }


    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, OLED_WIDTH * OLED_PAGES + 1, HAL_MAX_DELAY);
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	f240 4301 	movw	r3, #1025	@ 0x401
 8000ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8000cdc <OLED_UpdateDisplayVSync+0x98>)
 8000ca8:	2178      	movs	r1, #120	@ 0x78
 8000caa:	4810      	ldr	r0, [pc, #64]	@ (8000cec <OLED_UpdateDisplayVSync+0xa8>)
 8000cac:	f002 fce8 	bl	8003680 <HAL_I2C_Master_Transmit>

    // 重置所有脏页标记
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	71bb      	strb	r3, [r7, #6]
 8000cb4:	e006      	b.n	8000cc4 <OLED_UpdateDisplayVSync+0x80>
    {
        oled_dirty_pages[i] = 0;
 8000cb6:	79bb      	ldrb	r3, [r7, #6]
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf0 <OLED_UpdateDisplayVSync+0xac>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000cbe:	79bb      	ldrb	r3, [r7, #6]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	71bb      	strb	r3, [r7, #6]
 8000cc4:	79bb      	ldrb	r3, [r7, #6]
 8000cc6:	2b07      	cmp	r3, #7
 8000cc8:	d9f5      	bls.n	8000cb6 <OLED_UpdateDisplayVSync+0x72>
    }
}
 8000cca:	bf00      	nop
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	2000012c 	.word	0x2000012c
 8000cd8:	20000128 	.word	0x20000128
 8000cdc:	20000538 	.word	0x20000538
 8000ce0:	20000539 	.word	0x20000539
 8000ce4:	20000138 	.word	0x20000138
 8000ce8:	08007570 	.word	0x08007570
 8000cec:	2000008c 	.word	0x2000008c
 8000cf0:	20000130 	.word	0x20000130

08000cf4 <OLED_UpdateDisplayPartial>:
    }
}

// 局部更新显示函数
void OLED_UpdateDisplayPartial(uint8_t startPage, uint8_t endPage)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af02      	add	r7, sp, #8
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	460a      	mov	r2, r1
 8000cfe:	71fb      	strb	r3, [r7, #7]
 8000d00:	4613      	mov	r3, r2
 8000d02:	71bb      	strb	r3, [r7, #6]
    // 边界检查
    if (startPage >= OLED_PAGES || endPage >= OLED_PAGES || startPage > endPage)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	2b07      	cmp	r3, #7
 8000d08:	d85c      	bhi.n	8000dc4 <OLED_UpdateDisplayPartial+0xd0>
 8000d0a:	79bb      	ldrb	r3, [r7, #6]
 8000d0c:	2b07      	cmp	r3, #7
 8000d0e:	d859      	bhi.n	8000dc4 <OLED_UpdateDisplayPartial+0xd0>
 8000d10:	79fa      	ldrb	r2, [r7, #7]
 8000d12:	79bb      	ldrb	r3, [r7, #6]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d855      	bhi.n	8000dc4 <OLED_UpdateDisplayPartial+0xd0>
        return;

    // 等待上一次更新完成
    while (OLED_IsBusy())
 8000d18:	bf00      	nop
 8000d1a:	f7ff ff6b 	bl	8000bf4 <OLED_IsBusy>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1fa      	bne.n	8000d1a <OLED_UpdateDisplayPartial+0x26>
    {
        // 可以加入短暂延时或者让出CPU
    }

    oled_update_flag = OLED_BUSY;
 8000d24:	4b29      	ldr	r3, [pc, #164]	@ (8000dcc <OLED_UpdateDisplayPartial+0xd8>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8000d2a:	f001 ff2d 	bl	8002b88 <HAL_GetTick>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4a27      	ldr	r2, [pc, #156]	@ (8000dd0 <OLED_UpdateDisplayPartial+0xdc>)
 8000d32:	6013      	str	r3, [r2, #0]

    // 设置页地址范围
    OLED_SendCommand(0x22);      // 页地址设置命令
 8000d34:	2022      	movs	r0, #34	@ 0x22
 8000d36:	f000 f8cb 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(startPage); // 起始页
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 f8c7 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(endPage);   // 结束页
 8000d42:	79bb      	ldrb	r3, [r7, #6]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f8c3 	bl	8000ed0 <OLED_SendCommand>

    // 设置列地址范围（总是更新整行）
    OLED_SendCommand(0x21); // 列地址设置命令
 8000d4a:	2021      	movs	r0, #33	@ 0x21
 8000d4c:	f000 f8c0 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 起始列
 8000d50:	2000      	movs	r0, #0
 8000d52:	f000 f8bd 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0x7F); // 结束列 (127)
 8000d56:	207f      	movs	r0, #127	@ 0x7f
 8000d58:	f000 f8ba 	bl	8000ed0 <OLED_SendCommand>

    // 计算需要传输的数据长度
    uint16_t dataLen = OLED_WIDTH * (endPage - startPage + 1);
 8000d5c:	79ba      	ldrb	r2, [r7, #6]
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	3301      	adds	r3, #1
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	01db      	lsls	r3, r3, #7
 8000d68:	81bb      	strh	r3, [r7, #12]

    // 前缓冲区的第一个字节设为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <OLED_UpdateDisplayPartial+0xe0>)
 8000d6c:	2240      	movs	r2, #64	@ 0x40
 8000d6e:	701a      	strb	r2, [r3, #0]

    // 只复制需要更新的页
    for (uint8_t page = startPage; page <= endPage; page++)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	73fb      	strb	r3, [r7, #15]
 8000d74:	e016      	b.n	8000da4 <OLED_UpdateDisplayPartial+0xb0>
    {
        memcpy(
            OLED_FrontBuffer + 1 + (page - startPage) * OLED_WIDTH,
 8000d76:	7bfa      	ldrb	r2, [r7, #15]
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	01db      	lsls	r3, r3, #7
 8000d7e:	3301      	adds	r3, #1
        memcpy(
 8000d80:	4a14      	ldr	r2, [pc, #80]	@ (8000dd4 <OLED_UpdateDisplayPartial+0xe0>)
 8000d82:	1898      	adds	r0, r3, r2
            OLED_BackBuffer + page * OLED_WIDTH,
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	01db      	lsls	r3, r3, #7
 8000d88:	461a      	mov	r2, r3
        memcpy(
 8000d8a:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <OLED_UpdateDisplayPartial+0xe4>)
 8000d8c:	4413      	add	r3, r2
 8000d8e:	2280      	movs	r2, #128	@ 0x80
 8000d90:	4619      	mov	r1, r3
 8000d92:	f004 fc07 	bl	80055a4 <memcpy>
            OLED_WIDTH);
        oled_dirty_pages[page] = 0; // 重置脏页标记
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	4a10      	ldr	r2, [pc, #64]	@ (8000ddc <OLED_UpdateDisplayPartial+0xe8>)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = startPage; page <= endPage; page++)
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	3301      	adds	r3, #1
 8000da2:	73fb      	strb	r3, [r7, #15]
 8000da4:	7bfa      	ldrb	r2, [r7, #15]
 8000da6:	79bb      	ldrb	r3, [r7, #6]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d9e4      	bls.n	8000d76 <OLED_UpdateDisplayPartial+0x82>
    }

    // 发送数据
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, dataLen + 1, HAL_MAX_DELAY);
 8000dac:	89bb      	ldrh	r3, [r7, #12]
 8000dae:	3301      	adds	r3, #1
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	f04f 32ff 	mov.w	r2, #4294967295
 8000db6:	9200      	str	r2, [sp, #0]
 8000db8:	4a06      	ldr	r2, [pc, #24]	@ (8000dd4 <OLED_UpdateDisplayPartial+0xe0>)
 8000dba:	2178      	movs	r1, #120	@ 0x78
 8000dbc:	4808      	ldr	r0, [pc, #32]	@ (8000de0 <OLED_UpdateDisplayPartial+0xec>)
 8000dbe:	f002 fc5f 	bl	8003680 <HAL_I2C_Master_Transmit>
 8000dc2:	e000      	b.n	8000dc6 <OLED_UpdateDisplayPartial+0xd2>
        return;
 8000dc4:	bf00      	nop
}
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	2000012c 	.word	0x2000012c
 8000dd0:	20000128 	.word	0x20000128
 8000dd4:	20000538 	.word	0x20000538
 8000dd8:	20000138 	.word	0x20000138
 8000ddc:	20000130 	.word	0x20000130
 8000de0:	2000008c 	.word	0x2000008c

08000de4 <OLED_WritePixel>:

void OLED_WritePixel(int16_t x, int16_t y, uint8_t color)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	80fb      	strh	r3, [r7, #6]
 8000dee:	460b      	mov	r3, r1
 8000df0:	80bb      	strh	r3, [r7, #4]
 8000df2:	4613      	mov	r3, r2
 8000df4:	70fb      	strb	r3, [r7, #3]
    // 边界检查
    if (x >= OLED_WIDTH || x < 0 || y >= OLED_HEIGHT || y < 0)
 8000df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dfa:	2b7f      	cmp	r3, #127	@ 0x7f
 8000dfc:	dc5e      	bgt.n	8000ebc <OLED_WritePixel+0xd8>
 8000dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	db5a      	blt.n	8000ebc <OLED_WritePixel+0xd8>
 8000e06:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e0a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e0c:	dc56      	bgt.n	8000ebc <OLED_WritePixel+0xd8>
 8000e0e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db52      	blt.n	8000ebc <OLED_WritePixel+0xd8>
        return;

    // 计算像素所在的字节位置
    uint16_t byte_index = x + (y / 8) * OLED_WIDTH;
 8000e16:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	da00      	bge.n	8000e20 <OLED_WritePixel+0x3c>
 8000e1e:	3307      	adds	r3, #7
 8000e20:	10db      	asrs	r3, r3, #3
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	01db      	lsls	r3, r3, #7
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	81fb      	strh	r3, [r7, #14]
    uint8_t bit_position = y % 8;
 8000e30:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e34:	425a      	negs	r2, r3
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	f002 0207 	and.w	r2, r2, #7
 8000e3e:	bf58      	it	pl
 8000e40:	4253      	negpl	r3, r2
 8000e42:	b21b      	sxth	r3, r3
 8000e44:	737b      	strb	r3, [r7, #13]
    uint8_t page = y / 8; // 计算所在页
 8000e46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	da00      	bge.n	8000e50 <OLED_WritePixel+0x6c>
 8000e4e:	3307      	adds	r3, #7
 8000e50:	10db      	asrs	r3, r3, #3
 8000e52:	b21b      	sxth	r3, r3
 8000e54:	733b      	strb	r3, [r7, #12]

    // 记录当前像素值
    uint8_t old_value = OLED_BackBuffer[byte_index];
 8000e56:	89fb      	ldrh	r3, [r7, #14]
 8000e58:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec8 <OLED_WritePixel+0xe4>)
 8000e5a:	5cd3      	ldrb	r3, [r2, r3]
 8000e5c:	72fb      	strb	r3, [r7, #11]

    if (color) // 如果需要点亮像素
 8000e5e:	78fb      	ldrb	r3, [r7, #3]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00f      	beq.n	8000e84 <OLED_WritePixel+0xa0>
        OLED_BackBuffer[byte_index] |= (1 << bit_position);
 8000e64:	89fb      	ldrh	r3, [r7, #14]
 8000e66:	4a18      	ldr	r2, [pc, #96]	@ (8000ec8 <OLED_WritePixel+0xe4>)
 8000e68:	5cd3      	ldrb	r3, [r2, r3]
 8000e6a:	b25a      	sxtb	r2, r3
 8000e6c:	7b7b      	ldrb	r3, [r7, #13]
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fa01 f303 	lsl.w	r3, r1, r3
 8000e74:	b25b      	sxtb	r3, r3
 8000e76:	4313      	orrs	r3, r2
 8000e78:	b25a      	sxtb	r2, r3
 8000e7a:	89fb      	ldrh	r3, [r7, #14]
 8000e7c:	b2d1      	uxtb	r1, r2
 8000e7e:	4a12      	ldr	r2, [pc, #72]	@ (8000ec8 <OLED_WritePixel+0xe4>)
 8000e80:	54d1      	strb	r1, [r2, r3]
 8000e82:	e010      	b.n	8000ea6 <OLED_WritePixel+0xc2>
    else // 如果需要熄灭像素
        OLED_BackBuffer[byte_index] &= ~(1 << bit_position);
 8000e84:	89fb      	ldrh	r3, [r7, #14]
 8000e86:	4a10      	ldr	r2, [pc, #64]	@ (8000ec8 <OLED_WritePixel+0xe4>)
 8000e88:	5cd3      	ldrb	r3, [r2, r3]
 8000e8a:	b25a      	sxtb	r2, r3
 8000e8c:	7b7b      	ldrb	r3, [r7, #13]
 8000e8e:	2101      	movs	r1, #1
 8000e90:	fa01 f303 	lsl.w	r3, r1, r3
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	b25a      	sxtb	r2, r3
 8000e9e:	89fb      	ldrh	r3, [r7, #14]
 8000ea0:	b2d1      	uxtb	r1, r2
 8000ea2:	4a09      	ldr	r2, [pc, #36]	@ (8000ec8 <OLED_WritePixel+0xe4>)
 8000ea4:	54d1      	strb	r1, [r2, r3]

    // 如果像素值发生变化，标记该页为脏
    if (old_value != OLED_BackBuffer[byte_index])
 8000ea6:	89fb      	ldrh	r3, [r7, #14]
 8000ea8:	4a07      	ldr	r2, [pc, #28]	@ (8000ec8 <OLED_WritePixel+0xe4>)
 8000eaa:	5cd3      	ldrb	r3, [r2, r3]
 8000eac:	7afa      	ldrb	r2, [r7, #11]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d005      	beq.n	8000ebe <OLED_WritePixel+0xda>
    {
        oled_dirty_pages[page] = 1;
 8000eb2:	7b3b      	ldrb	r3, [r7, #12]
 8000eb4:	4a05      	ldr	r2, [pc, #20]	@ (8000ecc <OLED_WritePixel+0xe8>)
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	54d1      	strb	r1, [r2, r3]
 8000eba:	e000      	b.n	8000ebe <OLED_WritePixel+0xda>
        return;
 8000ebc:	bf00      	nop
    }
}
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000138 	.word	0x20000138
 8000ecc:	20000130 	.word	0x20000130

08000ed0 <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 8000eda:	2300      	movs	r3, #0
 8000edc:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8000ee2:	f107 020c 	add.w	r2, r7, #12
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2302      	movs	r3, #2
 8000eee:	2178      	movs	r1, #120	@ 0x78
 8000ef0:	4803      	ldr	r0, [pc, #12]	@ (8000f00 <OLED_SendCommand+0x30>)
 8000ef2:	f002 fbc5 	bl	8003680 <HAL_I2C_Master_Transmit>
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	2000008c 	.word	0x2000008c

08000f04 <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 8000f08:	2064      	movs	r0, #100	@ 0x64
 8000f0a:	f001 fe47 	bl	8002b9c <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 8000f0e:	20ae      	movs	r0, #174	@ 0xae
 8000f10:	f7ff ffde 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 8000f14:	20d5      	movs	r0, #213	@ 0xd5
 8000f16:	f7ff ffdb 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 8000f1a:	2080      	movs	r0, #128	@ 0x80
 8000f1c:	f7ff ffd8 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8000f20:	20a8      	movs	r0, #168	@ 0xa8
 8000f22:	f7ff ffd5 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 8000f26:	203f      	movs	r0, #63	@ 0x3f
 8000f28:	f7ff ffd2 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8000f2c:	20d3      	movs	r0, #211	@ 0xd3
 8000f2e:	f7ff ffcf 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 8000f32:	2000      	movs	r0, #0
 8000f34:	f7ff ffcc 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8000f38:	2040      	movs	r0, #64	@ 0x40
 8000f3a:	f7ff ffc9 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 8000f3e:	208d      	movs	r0, #141	@ 0x8d
 8000f40:	f7ff ffc6 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 8000f44:	2014      	movs	r0, #20
 8000f46:	f7ff ffc3 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 8000f4a:	2020      	movs	r0, #32
 8000f4c:	f7ff ffc0 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 8000f50:	2000      	movs	r0, #0
 8000f52:	f7ff ffbd 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 8000f56:	20a1      	movs	r0, #161	@ 0xa1
 8000f58:	f7ff ffba 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 8000f5c:	20c8      	movs	r0, #200	@ 0xc8
 8000f5e:	f7ff ffb7 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 8000f62:	20da      	movs	r0, #218	@ 0xda
 8000f64:	f7ff ffb4 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8000f68:	2012      	movs	r0, #18
 8000f6a:	f7ff ffb1 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 8000f6e:	2081      	movs	r0, #129	@ 0x81
 8000f70:	f7ff ffae 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 8000f74:	20cf      	movs	r0, #207	@ 0xcf
 8000f76:	f7ff ffab 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 8000f7a:	20d9      	movs	r0, #217	@ 0xd9
 8000f7c:	f7ff ffa8 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 8000f80:	20f1      	movs	r0, #241	@ 0xf1
 8000f82:	f7ff ffa5 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 8000f86:	20db      	movs	r0, #219	@ 0xdb
 8000f88:	f7ff ffa2 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 8000f8c:	2030      	movs	r0, #48	@ 0x30
 8000f8e:	f7ff ff9f 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 8000f92:	20a4      	movs	r0, #164	@ 0xa4
 8000f94:	f7ff ff9c 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 8000f98:	20a6      	movs	r0, #166	@ 0xa6
 8000f9a:	f7ff ff99 	bl	8000ed0 <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 8000f9e:	202e      	movs	r0, #46	@ 0x2e
 8000fa0:	f7ff ff96 	bl	8000ed0 <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 8000fa4:	f7ff fdd2 	bl	8000b4c <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 8000fa8:	f7ff fe04 	bl	8000bb4 <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 8000fac:	20af      	movs	r0, #175	@ 0xaf
 8000fae:	f7ff ff8f 	bl	8000ed0 <OLED_SendCommand>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <OLED_DisplayChar>:
    OLED_SendCommand(0x00 + (x & 0x0F));        // 设置低4位列地址
    OLED_SendCommand(0x10 + ((x >> 4) & 0x0F)); // 设置高4位列地址
}

void OLED_DisplayChar(int16_t x, int16_t y, char ch) //! UPDATEDISPLAY REQUIRED
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	@ 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80fb      	strh	r3, [r7, #6]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	80bb      	strh	r3, [r7, #4]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	70fb      	strb	r3, [r7, #3]
    const uint8_t font_width = 6;
 8000fca:	2306      	movs	r3, #6
 8000fcc:	773b      	strb	r3, [r7, #28]
    const uint8_t font_height = 8;
 8000fce:	2308      	movs	r3, #8
 8000fd0:	76fb      	strb	r3, [r7, #27]

    if (ch < 32)
 8000fd2:	78fb      	ldrb	r3, [r7, #3]
 8000fd4:	2b1f      	cmp	r3, #31
 8000fd6:	f240 80a8 	bls.w	800112a <OLED_DisplayChar+0x172>
        return;

    uint8_t c = ch - 32;
 8000fda:	78fb      	ldrb	r3, [r7, #3]
 8000fdc:	3b20      	subs	r3, #32
 8000fde:	76bb      	strb	r3, [r7, #26]

    uint8_t start_page = (y >= 0) ? (y / 8) : 0;
 8000fe0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db08      	blt.n	8000ffa <OLED_DisplayChar+0x42>
 8000fe8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	da00      	bge.n	8000ff2 <OLED_DisplayChar+0x3a>
 8000ff0:	3307      	adds	r3, #7
 8000ff2:	10db      	asrs	r3, r3, #3
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	e000      	b.n	8000ffc <OLED_DisplayChar+0x44>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	767b      	strb	r3, [r7, #25]
    uint8_t end_page = ((y + font_height - 1) < OLED_HEIGHT) ? ((y + font_height - 1) / 8) : (OLED_HEIGHT / 8 - 1);
 8000ffe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001002:	7efb      	ldrb	r3, [r7, #27]
 8001004:	4413      	add	r3, r2
 8001006:	2b40      	cmp	r3, #64	@ 0x40
 8001008:	dc0a      	bgt.n	8001020 <OLED_DisplayChar+0x68>
 800100a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800100e:	7efb      	ldrb	r3, [r7, #27]
 8001010:	4413      	add	r3, r2
 8001012:	3b01      	subs	r3, #1
 8001014:	2b00      	cmp	r3, #0
 8001016:	da00      	bge.n	800101a <OLED_DisplayChar+0x62>
 8001018:	3307      	adds	r3, #7
 800101a:	10db      	asrs	r3, r3, #3
 800101c:	b2db      	uxtb	r3, r3
 800101e:	e000      	b.n	8001022 <OLED_DisplayChar+0x6a>
 8001020:	2307      	movs	r3, #7
 8001022:	763b      	strb	r3, [r7, #24]

    extern volatile uint8_t oled_dirty_pages[];
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 8001024:	7e7b      	ldrb	r3, [r7, #25]
 8001026:	77fb      	strb	r3, [r7, #31]
 8001028:	e006      	b.n	8001038 <OLED_DisplayChar+0x80>
    {
        oled_dirty_pages[page] = 1;
 800102a:	7ffb      	ldrb	r3, [r7, #31]
 800102c:	4a42      	ldr	r2, [pc, #264]	@ (8001138 <OLED_DisplayChar+0x180>)
 800102e:	2101      	movs	r1, #1
 8001030:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 8001032:	7ffb      	ldrb	r3, [r7, #31]
 8001034:	3301      	adds	r3, #1
 8001036:	77fb      	strb	r3, [r7, #31]
 8001038:	7ffa      	ldrb	r2, [r7, #31]
 800103a:	7e3b      	ldrb	r3, [r7, #24]
 800103c:	429a      	cmp	r2, r3
 800103e:	d802      	bhi.n	8001046 <OLED_DisplayChar+0x8e>
 8001040:	7ffb      	ldrb	r3, [r7, #31]
 8001042:	2b07      	cmp	r3, #7
 8001044:	d9f1      	bls.n	800102a <OLED_DisplayChar+0x72>
    }
    // 按列渲染
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8001046:	2300      	movs	r3, #0
 8001048:	77bb      	strb	r3, [r7, #30]
 800104a:	e069      	b.n	8001120 <OLED_DisplayChar+0x168>
    {
        int16_t screen_x = x + char_col;
 800104c:	7fbb      	ldrb	r3, [r7, #30]
 800104e:	b29a      	uxth	r2, r3
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	4413      	add	r3, r2
 8001054:	b29b      	uxth	r3, r3
 8001056:	82fb      	strh	r3, [r7, #22]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 8001058:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db5b      	blt.n	8001118 <OLED_DisplayChar+0x160>
 8001060:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001064:	2b7f      	cmp	r3, #127	@ 0x7f
 8001066:	dc57      	bgt.n	8001118 <OLED_DisplayChar+0x160>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 8001068:	7ebb      	ldrb	r3, [r7, #26]
 800106a:	7f3a      	ldrb	r2, [r7, #28]
 800106c:	fb03 f202 	mul.w	r2, r3, r2
 8001070:	7fbb      	ldrb	r3, [r7, #30]
 8001072:	4413      	add	r3, r2
 8001074:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8001078:	d259      	bcs.n	800112e <OLED_DisplayChar+0x176>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 800107a:	7ebb      	ldrb	r3, [r7, #26]
 800107c:	7f3a      	ldrb	r2, [r7, #28]
 800107e:	fb03 f202 	mul.w	r2, r3, r2
 8001082:	7fbb      	ldrb	r3, [r7, #30]
 8001084:	4413      	add	r3, r2
 8001086:	4a2d      	ldr	r2, [pc, #180]	@ (800113c <OLED_DisplayChar+0x184>)
 8001088:	5cd3      	ldrb	r3, [r2, r3]
 800108a:	757b      	strb	r3, [r7, #21]

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 800108c:	2300      	movs	r3, #0
 800108e:	777b      	strb	r3, [r7, #29]
 8001090:	e03d      	b.n	800110e <OLED_DisplayChar+0x156>
        {
            int16_t screen_y = y + char_row_bit;
 8001092:	7f7b      	ldrb	r3, [r7, #29]
 8001094:	b29a      	uxth	r2, r3
 8001096:	88bb      	ldrh	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	b29b      	uxth	r3, r3
 800109c:	827b      	strh	r3, [r7, #18]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 800109e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	db2f      	blt.n	8001106 <OLED_DisplayChar+0x14e>
 80010a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80010ac:	dc2b      	bgt.n	8001106 <OLED_DisplayChar+0x14e>
                continue;

            if ((font_data_col >> char_row_bit) & 0x01)
 80010ae:	7d7a      	ldrb	r2, [r7, #21]
 80010b0:	7f7b      	ldrb	r3, [r7, #29]
 80010b2:	fa42 f303 	asr.w	r3, r2, r3
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d024      	beq.n	8001108 <OLED_DisplayChar+0x150>
            {
                uint8_t page = (uint8_t)screen_y / 8;
 80010be:	8a7b      	ldrh	r3, [r7, #18]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	08db      	lsrs	r3, r3, #3
 80010c4:	747b      	strb	r3, [r7, #17]
                uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 80010c6:	8a7b      	ldrh	r3, [r7, #18]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	743b      	strb	r3, [r7, #16]
                uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 80010d0:	7c7b      	ldrb	r3, [r7, #17]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	01db      	lsls	r3, r3, #7
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	8afb      	ldrh	r3, [r7, #22]
 80010da:	4413      	add	r3, r2
 80010dc:	81fb      	strh	r3, [r7, #14]

                if (buffer_index < sizeof(OLED_BackBuffer))
 80010de:	89fb      	ldrh	r3, [r7, #14]
 80010e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010e4:	d210      	bcs.n	8001108 <OLED_DisplayChar+0x150>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 80010e6:	89fb      	ldrh	r3, [r7, #14]
 80010e8:	4a15      	ldr	r2, [pc, #84]	@ (8001140 <OLED_DisplayChar+0x188>)
 80010ea:	5cd3      	ldrb	r3, [r2, r3]
 80010ec:	b25a      	sxtb	r2, r3
 80010ee:	7c3b      	ldrb	r3, [r7, #16]
 80010f0:	2101      	movs	r1, #1
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b25a      	sxtb	r2, r3
 80010fc:	89fb      	ldrh	r3, [r7, #14]
 80010fe:	b2d1      	uxtb	r1, r2
 8001100:	4a0f      	ldr	r2, [pc, #60]	@ (8001140 <OLED_DisplayChar+0x188>)
 8001102:	54d1      	strb	r1, [r2, r3]
 8001104:	e000      	b.n	8001108 <OLED_DisplayChar+0x150>
                continue;
 8001106:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8001108:	7f7b      	ldrb	r3, [r7, #29]
 800110a:	3301      	adds	r3, #1
 800110c:	777b      	strb	r3, [r7, #29]
 800110e:	7f7a      	ldrb	r2, [r7, #29]
 8001110:	7efb      	ldrb	r3, [r7, #27]
 8001112:	429a      	cmp	r2, r3
 8001114:	d3bd      	bcc.n	8001092 <OLED_DisplayChar+0xda>
 8001116:	e000      	b.n	800111a <OLED_DisplayChar+0x162>
            continue;
 8001118:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 800111a:	7fbb      	ldrb	r3, [r7, #30]
 800111c:	3301      	adds	r3, #1
 800111e:	77bb      	strb	r3, [r7, #30]
 8001120:	7fba      	ldrb	r2, [r7, #30]
 8001122:	7f3b      	ldrb	r3, [r7, #28]
 8001124:	429a      	cmp	r2, r3
 8001126:	d391      	bcc.n	800104c <OLED_DisplayChar+0x94>
 8001128:	e002      	b.n	8001130 <OLED_DisplayChar+0x178>
        return;
 800112a:	bf00      	nop
 800112c:	e000      	b.n	8001130 <OLED_DisplayChar+0x178>
            break;
 800112e:	bf00      	nop
                }
            }
        }
    }
}
 8001130:	3724      	adds	r7, #36	@ 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	20000130 	.word	0x20000130
 800113c:	08007330 	.word	0x08007330
 8001140:	20000138 	.word	0x20000138

08001144 <OLED_DisplayString>:
        }
    }
}

void OLED_DisplayString(int16_t x, int16_t y, char *str) //! UPDATEDISPLAY REQUIRED
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	603a      	str	r2, [r7, #0]
 800114e:	80fb      	strh	r3, [r7, #6]
 8001150:	460b      	mov	r3, r1
 8001152:	80bb      	strh	r3, [r7, #4]
    uint8_t j = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	73fb      	strb	r3, [r7, #15]
    const uint8_t font_width = 6;
 8001158:	2306      	movs	r3, #6
 800115a:	73bb      	strb	r3, [r7, #14]
    const uint8_t font_height = 8;
 800115c:	2308      	movs	r3, #8
 800115e:	737b      	strb	r3, [r7, #13]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 8001160:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001164:	2b3f      	cmp	r3, #63	@ 0x3f
 8001166:	dc34      	bgt.n	80011d2 <OLED_DisplayString+0x8e>
 8001168:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800116c:	7b7b      	ldrb	r3, [r7, #13]
 800116e:	4413      	add	r3, r2
 8001170:	2b00      	cmp	r3, #0
 8001172:	dd2e      	ble.n	80011d2 <OLED_DisplayString+0x8e>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 8001174:	e026      	b.n	80011c4 <OLED_DisplayString+0x80>
    {
        current_char_x = x + (j * font_width);
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	b29b      	uxth	r3, r3
 800117a:	7bba      	ldrb	r2, [r7, #14]
 800117c:	b292      	uxth	r2, r2
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	b29a      	uxth	r2, r3
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	4413      	add	r3, r2
 8001188:	b29b      	uxth	r3, r3
 800118a:	817b      	strh	r3, [r7, #10]
        if (current_char_x >= OLED_WIDTH)
 800118c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001190:	2b7f      	cmp	r3, #127	@ 0x7f
 8001192:	dc20      	bgt.n	80011d6 <OLED_DisplayString+0x92>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 8001194:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001198:	7bbb      	ldrb	r3, [r7, #14]
 800119a:	4413      	add	r3, r2
 800119c:	2b00      	cmp	r3, #0
 800119e:	dc03      	bgt.n	80011a8 <OLED_DisplayString+0x64>
        {
            j++;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	3301      	adds	r3, #1
 80011a4:	73fb      	strb	r3, [r7, #15]
            continue;
 80011a6:	e00d      	b.n	80011c4 <OLED_DisplayString+0x80>
        }
        OLED_DisplayChar(current_char_x, y, str[j]);
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	4413      	add	r3, r2
 80011ae:	781a      	ldrb	r2, [r3, #0]
 80011b0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80011b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fefd 	bl	8000fb8 <OLED_DisplayChar>
        j++;
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	3301      	adds	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
    while (str[j] != '\0')
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	4413      	add	r3, r2
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1d2      	bne.n	8001176 <OLED_DisplayString+0x32>
 80011d0:	e002      	b.n	80011d8 <OLED_DisplayString+0x94>
        return;
 80011d2:	bf00      	nop
 80011d4:	e000      	b.n	80011d8 <OLED_DisplayString+0x94>
            break;
 80011d6:	bf00      	nop
    }
}
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <OLED_EnableDiffMode>:
    }
}

// 启用差分更新模式
void OLED_EnableDiffMode(uint8_t enable)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
    diff_mode_enabled = enable;
 80011ea:	4a09      	ldr	r2, [pc, #36]	@ (8001210 <OLED_EnableDiffMode+0x30>)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	7013      	strb	r3, [r2, #0]
    if (enable)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d008      	beq.n	8001208 <OLED_EnableDiffMode+0x28>
    {
        memcpy(OLED_PrevBuffer, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES);
 80011f6:	4a07      	ldr	r2, [pc, #28]	@ (8001214 <OLED_EnableDiffMode+0x34>)
 80011f8:	4b07      	ldr	r3, [pc, #28]	@ (8001218 <OLED_EnableDiffMode+0x38>)
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001202:	461a      	mov	r2, r3
 8001204:	f004 f9ce 	bl	80055a4 <memcpy>
    }
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000d3c 	.word	0x20000d3c
 8001214:	2000093c 	.word	0x2000093c
 8001218:	20000138 	.word	0x20000138

0800121c <OLED_EnableFastUpdate>:

// 设置快速更新模式
void OLED_EnableFastUpdate(uint8_t enable)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
    fast_update_enabled = enable;
 8001226:	4a04      	ldr	r2, [pc, #16]	@ (8001238 <OLED_EnableFastUpdate+0x1c>)
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	7013      	strb	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000000 	.word	0x20000000

0800123c <OLED_SmartUpdate>:

// 智能更新显示
// 选择性更新脏页，以提高帧率
void OLED_SmartUpdate(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
    // 如果OLED/DMA忙，直接返回
    if (OLED_IsBusy())
 8001242:	f7ff fcd7 	bl	8000bf4 <OLED_IsBusy>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	f040 8082 	bne.w	8001352 <OLED_SmartUpdate+0x116>
    {
        return;
    }

    // 检查是否有脏页需要更新
    uint8_t has_dirty = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	73fb      	strb	r3, [r7, #15]
    uint8_t first_dirty = 255;
 8001252:	23ff      	movs	r3, #255	@ 0xff
 8001254:	73bb      	strb	r3, [r7, #14]
    uint8_t last_dirty = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	737b      	strb	r3, [r7, #13]

    // 如果启用了差分更新，检查哪些页已经变化
    if (diff_mode_enabled)
 800125a:	4b40      	ldr	r3, [pc, #256]	@ (800135c <OLED_SmartUpdate+0x120>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d046      	beq.n	80012f0 <OLED_SmartUpdate+0xb4>
    {
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 8001262:	2300      	movs	r3, #0
 8001264:	733b      	strb	r3, [r7, #12]
 8001266:	e03f      	b.n	80012e8 <OLED_SmartUpdate+0xac>
        {
            // 检查此页中是否有任何字节发生变化
            uint8_t page_changed = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	72fb      	strb	r3, [r7, #11]
            uint16_t start_idx = page * OLED_WIDTH;
 800126c:	7b3b      	ldrb	r3, [r7, #12]
 800126e:	b29b      	uxth	r3, r3
 8001270:	01db      	lsls	r3, r3, #7
 8001272:	80bb      	strh	r3, [r7, #4]

            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 8001274:	2300      	movs	r3, #0
 8001276:	813b      	strh	r3, [r7, #8]
 8001278:	e015      	b.n	80012a6 <OLED_SmartUpdate+0x6a>
            {
                if (OLED_BackBuffer[start_idx + i] != OLED_PrevBuffer[start_idx + i])
 800127a:	88ba      	ldrh	r2, [r7, #4]
 800127c:	893b      	ldrh	r3, [r7, #8]
 800127e:	4413      	add	r3, r2
 8001280:	4a37      	ldr	r2, [pc, #220]	@ (8001360 <OLED_SmartUpdate+0x124>)
 8001282:	5cd2      	ldrb	r2, [r2, r3]
 8001284:	88b9      	ldrh	r1, [r7, #4]
 8001286:	893b      	ldrh	r3, [r7, #8]
 8001288:	440b      	add	r3, r1
 800128a:	4936      	ldr	r1, [pc, #216]	@ (8001364 <OLED_SmartUpdate+0x128>)
 800128c:	5ccb      	ldrb	r3, [r1, r3]
 800128e:	429a      	cmp	r2, r3
 8001290:	d006      	beq.n	80012a0 <OLED_SmartUpdate+0x64>
                {
                    page_changed = 1;
 8001292:	2301      	movs	r3, #1
 8001294:	72fb      	strb	r3, [r7, #11]
                    oled_dirty_pages[page] = 1;
 8001296:	7b3b      	ldrb	r3, [r7, #12]
 8001298:	4a33      	ldr	r2, [pc, #204]	@ (8001368 <OLED_SmartUpdate+0x12c>)
 800129a:	2101      	movs	r1, #1
 800129c:	54d1      	strb	r1, [r2, r3]
                    break;
 800129e:	e005      	b.n	80012ac <OLED_SmartUpdate+0x70>
            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 80012a0:	893b      	ldrh	r3, [r7, #8]
 80012a2:	3301      	adds	r3, #1
 80012a4:	813b      	strh	r3, [r7, #8]
 80012a6:	893b      	ldrh	r3, [r7, #8]
 80012a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80012aa:	d9e6      	bls.n	800127a <OLED_SmartUpdate+0x3e>
                }
            }

            if (page_changed)
 80012ac:	7afb      	ldrb	r3, [r7, #11]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d017      	beq.n	80012e2 <OLED_SmartUpdate+0xa6>
            {
                has_dirty = 1;
 80012b2:	2301      	movs	r3, #1
 80012b4:	73fb      	strb	r3, [r7, #15]
                if (page < first_dirty)
 80012b6:	7b3a      	ldrb	r2, [r7, #12]
 80012b8:	7bbb      	ldrb	r3, [r7, #14]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d201      	bcs.n	80012c2 <OLED_SmartUpdate+0x86>
                    first_dirty = page;
 80012be:	7b3b      	ldrb	r3, [r7, #12]
 80012c0:	73bb      	strb	r3, [r7, #14]
                if (page > last_dirty)
 80012c2:	7b3a      	ldrb	r2, [r7, #12]
 80012c4:	7b7b      	ldrb	r3, [r7, #13]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d901      	bls.n	80012ce <OLED_SmartUpdate+0x92>
                    last_dirty = page;
 80012ca:	7b3b      	ldrb	r3, [r7, #12]
 80012cc:	737b      	strb	r3, [r7, #13]

                // 更新上一帧缓存
                memcpy(
 80012ce:	88bb      	ldrh	r3, [r7, #4]
 80012d0:	4a24      	ldr	r2, [pc, #144]	@ (8001364 <OLED_SmartUpdate+0x128>)
 80012d2:	1898      	adds	r0, r3, r2
 80012d4:	88bb      	ldrh	r3, [r7, #4]
 80012d6:	4a22      	ldr	r2, [pc, #136]	@ (8001360 <OLED_SmartUpdate+0x124>)
 80012d8:	4413      	add	r3, r2
 80012da:	2280      	movs	r2, #128	@ 0x80
 80012dc:	4619      	mov	r1, r3
 80012de:	f004 f961 	bl	80055a4 <memcpy>
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 80012e2:	7b3b      	ldrb	r3, [r7, #12]
 80012e4:	3301      	adds	r3, #1
 80012e6:	733b      	strb	r3, [r7, #12]
 80012e8:	7b3b      	ldrb	r3, [r7, #12]
 80012ea:	2b07      	cmp	r3, #7
 80012ec:	d9bc      	bls.n	8001268 <OLED_SmartUpdate+0x2c>
 80012ee:	e01c      	b.n	800132a <OLED_SmartUpdate+0xee>
        }
    }
    else
    {
        // 如果未启用差分更新，使用脏页标记
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 80012f0:	2300      	movs	r3, #0
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	e016      	b.n	8001324 <OLED_SmartUpdate+0xe8>
        {
            if (oled_dirty_pages[i])
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001368 <OLED_SmartUpdate+0x12c>)
 80012fa:	5cd3      	ldrb	r3, [r2, r3]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00d      	beq.n	800131e <OLED_SmartUpdate+0xe2>
            {
                has_dirty = 1;
 8001302:	2301      	movs	r3, #1
 8001304:	73fb      	strb	r3, [r7, #15]
                if (i < first_dirty)
 8001306:	79fa      	ldrb	r2, [r7, #7]
 8001308:	7bbb      	ldrb	r3, [r7, #14]
 800130a:	429a      	cmp	r2, r3
 800130c:	d201      	bcs.n	8001312 <OLED_SmartUpdate+0xd6>
                    first_dirty = i;
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	73bb      	strb	r3, [r7, #14]
                if (i > last_dirty)
 8001312:	79fa      	ldrb	r2, [r7, #7]
 8001314:	7b7b      	ldrb	r3, [r7, #13]
 8001316:	429a      	cmp	r2, r3
 8001318:	d901      	bls.n	800131e <OLED_SmartUpdate+0xe2>
                    last_dirty = i;
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	737b      	strb	r3, [r7, #13]
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	3301      	adds	r3, #1
 8001322:	71fb      	strb	r3, [r7, #7]
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2b07      	cmp	r3, #7
 8001328:	d9e5      	bls.n	80012f6 <OLED_SmartUpdate+0xba>
            }
        }
    }

    // 如果有脏页，只更新这些页
    if (has_dirty && fast_update_enabled)
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00a      	beq.n	8001346 <OLED_SmartUpdate+0x10a>
 8001330:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <OLED_SmartUpdate+0x130>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <OLED_SmartUpdate+0x10a>
    {
        OLED_UpdateDisplayPartial(first_dirty, last_dirty);
 8001338:	7b7a      	ldrb	r2, [r7, #13]
 800133a:	7bbb      	ldrb	r3, [r7, #14]
 800133c:	4611      	mov	r1, r2
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fcd8 	bl	8000cf4 <OLED_UpdateDisplayPartial>
 8001344:	e006      	b.n	8001354 <OLED_SmartUpdate+0x118>
    }
    else if (has_dirty)
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <OLED_SmartUpdate+0x118>
    {
        OLED_UpdateDisplayVSync();
 800134c:	f7ff fc7a 	bl	8000c44 <OLED_UpdateDisplayVSync>
 8001350:	e000      	b.n	8001354 <OLED_SmartUpdate+0x118>
        return;
 8001352:	bf00      	nop
    }
}
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000d3c 	.word	0x20000d3c
 8001360:	20000138 	.word	0x20000138
 8001364:	2000093c 	.word	0x2000093c
 8001368:	20000130 	.word	0x20000130
 800136c:	20000000 	.word	0x20000000

08001370 <OLED_OptimizedDisplayFPS>:


// 显示FPS
void OLED_OptimizedDisplayFPS(int16_t x, int16_t y)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	460a      	mov	r2, r1
 800137a:	80fb      	strh	r3, [r7, #6]
 800137c:	4613      	mov	r3, r2
 800137e:	80bb      	strh	r3, [r7, #4]
    static uint32_t last_time = 0;
    static uint32_t frames = 0;
    static uint32_t fps = 0;
    static char fps_str[16] = "FPS:0";

    frames++;
 8001380:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <OLED_OptimizedDisplayFPS+0x68>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	4a14      	ldr	r2, [pc, #80]	@ (80013d8 <OLED_OptimizedDisplayFPS+0x68>)
 8001388:	6013      	str	r3, [r2, #0]

    // 每秒更新一次FPS
    uint32_t current_time = HAL_GetTick();
 800138a:	f001 fbfd 	bl	8002b88 <HAL_GetTick>
 800138e:	60f8      	str	r0, [r7, #12]
    if (current_time - last_time >= 1000)
 8001390:	4b12      	ldr	r3, [pc, #72]	@ (80013dc <OLED_OptimizedDisplayFPS+0x6c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800139c:	d310      	bcc.n	80013c0 <OLED_OptimizedDisplayFPS+0x50>
    {
        fps = frames;
 800139e:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <OLED_OptimizedDisplayFPS+0x68>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a0f      	ldr	r2, [pc, #60]	@ (80013e0 <OLED_OptimizedDisplayFPS+0x70>)
 80013a4:	6013      	str	r3, [r2, #0]
        sprintf(fps_str, "FPS:%d", fps);
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <OLED_OptimizedDisplayFPS+0x70>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	490d      	ldr	r1, [pc, #52]	@ (80013e4 <OLED_OptimizedDisplayFPS+0x74>)
 80013ae:	480e      	ldr	r0, [pc, #56]	@ (80013e8 <OLED_OptimizedDisplayFPS+0x78>)
 80013b0:	f004 f8a2 	bl	80054f8 <siprintf>
        frames = 0;
 80013b4:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <OLED_OptimizedDisplayFPS+0x68>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
        last_time = current_time;
 80013ba:	4a08      	ldr	r2, [pc, #32]	@ (80013dc <OLED_OptimizedDisplayFPS+0x6c>)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6013      	str	r3, [r2, #0]
    }

    OLED_DisplayString(x, y, fps_str);
 80013c0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80013c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c8:	4a07      	ldr	r2, [pc, #28]	@ (80013e8 <OLED_OptimizedDisplayFPS+0x78>)
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff feba 	bl	8001144 <OLED_DisplayString>
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000d40 	.word	0x20000d40
 80013dc:	20000d44 	.word	0x20000d44
 80013e0:	20000d48 	.word	0x20000d48
 80013e4:	08007328 	.word	0x08007328
 80013e8:	20000004 	.word	0x20000004

080013ec <EaseLinear>:
#include "stdint.h" // 添加 stdint.h 以支持标准整数类型
#include "oled_ui.h"
#pragma region TWEENS // 动画缓动函数全部在这里定义

static float EaseLinear(float t)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
    return t;
 80013f4:	687b      	ldr	r3, [r7, #4]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <EaseInQuad>:

static float EaseInQuad(float t)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
    return t * t;
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7fe ffac 	bl	8000368 <__aeabi_fmul>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <EaseOutQuad>:

static float EaseOutQuad(float t)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
    return t * (2 - t);
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001428:	f7fe fe94 	bl	8000154 <__aeabi_fsub>
 800142c:	4603      	mov	r3, r0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4618      	mov	r0, r3
 8001432:	f7fe ff99 	bl	8000368 <__aeabi_fmul>
 8001436:	4603      	mov	r3, r0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <EaseInOutQuad>:

static float EaseInOutQuad(float t)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 2 * t * t : -1 + (4 - 2 * t) * t;
 8001448:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff f929 	bl	80006a4 <__aeabi_fcmplt>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00b      	beq.n	8001470 <EaseInOutQuad+0x30>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4619      	mov	r1, r3
 800145c:	4618      	mov	r0, r3
 800145e:	f7fe fe7b 	bl	8000158 <__addsf3>
 8001462:	4603      	mov	r3, r0
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	4618      	mov	r0, r3
 8001468:	f7fe ff7e 	bl	8000368 <__aeabi_fmul>
 800146c:	4603      	mov	r3, r0
 800146e:	e016      	b.n	800149e <EaseInOutQuad+0x5e>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4619      	mov	r1, r3
 8001474:	4618      	mov	r0, r3
 8001476:	f7fe fe6f 	bl	8000158 <__addsf3>
 800147a:	4603      	mov	r3, r0
 800147c:	4619      	mov	r1, r3
 800147e:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 8001482:	f7fe fe67 	bl	8000154 <__aeabi_fsub>
 8001486:	4603      	mov	r3, r0
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe ff6c 	bl	8000368 <__aeabi_fmul>
 8001490:	4603      	mov	r3, r0
 8001492:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe fe5c 	bl	8000154 <__aeabi_fsub>
 800149c:	4603      	mov	r3, r0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <EaseInCubic>:

static float EaseInCubic(float t)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
    return t * t * t;
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7fe ff59 	bl	8000368 <__aeabi_fmul>
 80014b6:	4603      	mov	r3, r0
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7fe ff54 	bl	8000368 <__aeabi_fmul>
 80014c0:	4603      	mov	r3, r0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <EaseOutCubic>:

static float EaseOutCubic(float t)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b084      	sub	sp, #16
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
    float t1 = t - 1;
 80014d2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7fe fe3c 	bl	8000154 <__aeabi_fsub>
 80014dc:	4603      	mov	r3, r0
 80014de:	60fb      	str	r3, [r7, #12]
    return t1 * t1 * t1 + 1;
 80014e0:	68f9      	ldr	r1, [r7, #12]
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f7fe ff40 	bl	8000368 <__aeabi_fmul>
 80014e8:	4603      	mov	r3, r0
 80014ea:	68f9      	ldr	r1, [r7, #12]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe ff3b 	bl	8000368 <__aeabi_fmul>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7fe fe2d 	bl	8000158 <__addsf3>
 80014fe:	4603      	mov	r3, r0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <EaseInOutCubic>:

static float EaseInOutCubic(float t)
{
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
 8001510:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff f8c5 	bl	80006a4 <__aeabi_fcmplt>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d010      	beq.n	8001542 <EaseInOutCubic+0x3a>
 8001520:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7fe ff1f 	bl	8000368 <__aeabi_fmul>
 800152a:	4603      	mov	r3, r0
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	4618      	mov	r0, r3
 8001530:	f7fe ff1a 	bl	8000368 <__aeabi_fmul>
 8001534:	4603      	mov	r3, r0
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe ff15 	bl	8000368 <__aeabi_fmul>
 800153e:	4603      	mov	r3, r0
 8001540:	e02f      	b.n	80015a2 <EaseInOutCubic+0x9a>
 8001542:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7fe fe04 	bl	8000154 <__aeabi_fsub>
 800154c:	4603      	mov	r3, r0
 800154e:	461c      	mov	r4, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4619      	mov	r1, r3
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe fdff 	bl	8000158 <__addsf3>
 800155a:	4603      	mov	r3, r0
 800155c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe fdf7 	bl	8000154 <__aeabi_fsub>
 8001566:	4603      	mov	r3, r0
 8001568:	4619      	mov	r1, r3
 800156a:	4620      	mov	r0, r4
 800156c:	f7fe fefc 	bl	8000368 <__aeabi_fmul>
 8001570:	4603      	mov	r3, r0
 8001572:	461c      	mov	r4, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4619      	mov	r1, r3
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe fded 	bl	8000158 <__addsf3>
 800157e:	4603      	mov	r3, r0
 8001580:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe fde5 	bl	8000154 <__aeabi_fsub>
 800158a:	4603      	mov	r3, r0
 800158c:	4619      	mov	r1, r3
 800158e:	4620      	mov	r0, r4
 8001590:	f7fe feea 	bl	8000368 <__aeabi_fmul>
 8001594:	4603      	mov	r3, r0
 8001596:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe fddc 	bl	8000158 <__addsf3>
 80015a0:	4603      	mov	r3, r0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd90      	pop	{r4, r7, pc}
	...

080015ac <EaseInExpo>:

// 在现有EaseType_t枚举中添加这些新类型
// 指数缓动
static float EaseInExpo(float t)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
    return (t == 0) ? 0 : powf(2, 10 * (t - 1));
 80015b4:	f04f 0100 	mov.w	r1, #0
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff f869 	bl	8000690 <__aeabi_fcmpeq>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d111      	bne.n	80015e8 <EaseInExpo+0x3c>
 80015c4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7fe fdc3 	bl	8000154 <__aeabi_fsub>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4908      	ldr	r1, [pc, #32]	@ (80015f4 <EaseInExpo+0x48>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe fec8 	bl	8000368 <__aeabi_fmul>
 80015d8:	4603      	mov	r3, r0
 80015da:	4619      	mov	r1, r3
 80015dc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80015e0:	f004 fc3a 	bl	8005e58 <powf>
 80015e4:	4603      	mov	r3, r0
 80015e6:	e001      	b.n	80015ec <EaseInExpo+0x40>
 80015e8:	f04f 0300 	mov.w	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	41200000 	.word	0x41200000

080015f8 <EaseOutExpo>:

static float EaseOutExpo(float t)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
    return (t == 1) ? 1 : (1 - powf(2, -10 * t));
 8001600:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff f843 	bl	8000690 <__aeabi_fcmpeq>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d111      	bne.n	8001634 <EaseOutExpo+0x3c>
 8001610:	490b      	ldr	r1, [pc, #44]	@ (8001640 <EaseOutExpo+0x48>)
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7fe fea8 	bl	8000368 <__aeabi_fmul>
 8001618:	4603      	mov	r3, r0
 800161a:	4619      	mov	r1, r3
 800161c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001620:	f004 fc1a 	bl	8005e58 <powf>
 8001624:	4603      	mov	r3, r0
 8001626:	4619      	mov	r1, r3
 8001628:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800162c:	f7fe fd92 	bl	8000154 <__aeabi_fsub>
 8001630:	4603      	mov	r3, r0
 8001632:	e001      	b.n	8001638 <EaseOutExpo+0x40>
 8001634:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	c1200000 	.word	0xc1200000

08001644 <EaseInOutExpo>:

static float EaseInOutExpo(float t)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
    if (t == 0)
 800164c:	f04f 0100 	mov.w	r1, #0
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff f81d 	bl	8000690 <__aeabi_fcmpeq>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <EaseInOutExpo+0x1e>
        return 0;
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	e045      	b.n	80016ee <EaseInOutExpo+0xaa>
    if (t == 1)
 8001662:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff f812 	bl	8000690 <__aeabi_fcmpeq>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <EaseInOutExpo+0x34>
        return 1;
 8001672:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001676:	e03a      	b.n	80016ee <EaseInOutExpo+0xaa>
    if (t < 0.5f)
 8001678:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff f811 	bl	80006a4 <__aeabi_fcmplt>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d016      	beq.n	80016b6 <EaseInOutExpo+0x72>
        return powf(2, 20 * t - 10) / 2;
 8001688:	491b      	ldr	r1, [pc, #108]	@ (80016f8 <EaseInOutExpo+0xb4>)
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7fe fe6c 	bl	8000368 <__aeabi_fmul>
 8001690:	4603      	mov	r3, r0
 8001692:	491a      	ldr	r1, [pc, #104]	@ (80016fc <EaseInOutExpo+0xb8>)
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe fd5d 	bl	8000154 <__aeabi_fsub>
 800169a:	4603      	mov	r3, r0
 800169c:	4619      	mov	r1, r3
 800169e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016a2:	f004 fbd9 	bl	8005e58 <powf>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff0f 	bl	80004d0 <__aeabi_fdiv>
 80016b2:	4603      	mov	r3, r0
 80016b4:	e01b      	b.n	80016ee <EaseInOutExpo+0xaa>
    return (2 - powf(2, -20 * t + 10)) / 2;
 80016b6:	4912      	ldr	r1, [pc, #72]	@ (8001700 <EaseInOutExpo+0xbc>)
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7fe fe55 	bl	8000368 <__aeabi_fmul>
 80016be:	4603      	mov	r3, r0
 80016c0:	490e      	ldr	r1, [pc, #56]	@ (80016fc <EaseInOutExpo+0xb8>)
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fd48 	bl	8000158 <__addsf3>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4619      	mov	r1, r3
 80016cc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016d0:	f004 fbc2 	bl	8005e58 <powf>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4619      	mov	r1, r3
 80016d8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016dc:	f7fe fd3a 	bl	8000154 <__aeabi_fsub>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe fef2 	bl	80004d0 <__aeabi_fdiv>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	41a00000 	.word	0x41a00000
 80016fc:	41200000 	.word	0x41200000
 8001700:	c1a00000 	.word	0xc1a00000

08001704 <EaseInCirc>:

// 圆形曲线缓动
static float EaseInCirc(float t)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
    return 1 - sqrtf(1 - t * t);
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7fe fe2a 	bl	8000368 <__aeabi_fmul>
 8001714:	4603      	mov	r3, r0
 8001716:	4619      	mov	r1, r3
 8001718:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800171c:	f7fe fd1a 	bl	8000154 <__aeabi_fsub>
 8001720:	4603      	mov	r3, r0
 8001722:	4618      	mov	r0, r3
 8001724:	f004 fbe5 	bl	8005ef2 <sqrtf>
 8001728:	4603      	mov	r3, r0
 800172a:	4619      	mov	r1, r3
 800172c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001730:	f7fe fd10 	bl	8000154 <__aeabi_fsub>
 8001734:	4603      	mov	r3, r0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <EaseOutCirc>:

static float EaseOutCirc(float t)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
    return sqrtf(1 - powf(t - 1, 2));
 8001746:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7fe fd02 	bl	8000154 <__aeabi_fsub>
 8001750:	4603      	mov	r3, r0
 8001752:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001756:	4618      	mov	r0, r3
 8001758:	f004 fb7e 	bl	8005e58 <powf>
 800175c:	4603      	mov	r3, r0
 800175e:	4619      	mov	r1, r3
 8001760:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001764:	f7fe fcf6 	bl	8000154 <__aeabi_fsub>
 8001768:	4603      	mov	r3, r0
 800176a:	4618      	mov	r0, r3
 800176c:	f004 fbc1 	bl	8005ef2 <sqrtf>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <EaseInOutCirc>:

static float EaseInOutCirc(float t)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 8001782:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7fe ff8c 	bl	80006a4 <__aeabi_fcmplt>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d022      	beq.n	80017d8 <EaseInOutCirc+0x5e>
        return (1 - sqrtf(1 - powf(2 * t, 2))) / 2;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4619      	mov	r1, r3
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fcde 	bl	8000158 <__addsf3>
 800179c:	4603      	mov	r3, r0
 800179e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80017a2:	4618      	mov	r0, r3
 80017a4:	f004 fb58 	bl	8005e58 <powf>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4619      	mov	r1, r3
 80017ac:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80017b0:	f7fe fcd0 	bl	8000154 <__aeabi_fsub>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f004 fb9b 	bl	8005ef2 <sqrtf>
 80017bc:	4603      	mov	r3, r0
 80017be:	4619      	mov	r1, r3
 80017c0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80017c4:	f7fe fcc6 	bl	8000154 <__aeabi_fsub>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fe7e 	bl	80004d0 <__aeabi_fdiv>
 80017d4:	4603      	mov	r3, r0
 80017d6:	e027      	b.n	8001828 <EaseInOutCirc+0xae>
    return (sqrtf(1 - powf(-2 * t + 2, 2)) + 1) / 2;
 80017d8:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7fe fdc3 	bl	8000368 <__aeabi_fmul>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe fcb5 	bl	8000158 <__addsf3>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80017f4:	4618      	mov	r0, r3
 80017f6:	f004 fb2f 	bl	8005e58 <powf>
 80017fa:	4603      	mov	r3, r0
 80017fc:	4619      	mov	r1, r3
 80017fe:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001802:	f7fe fca7 	bl	8000154 <__aeabi_fsub>
 8001806:	4603      	mov	r3, r0
 8001808:	4618      	mov	r0, r3
 800180a:	f004 fb72 	bl	8005ef2 <sqrtf>
 800180e:	4603      	mov	r3, r0
 8001810:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fc9f 	bl	8000158 <__addsf3>
 800181a:	4603      	mov	r3, r0
 800181c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fe55 	bl	80004d0 <__aeabi_fdiv>
 8001826:	4603      	mov	r3, r0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <EaseInElastic>:

// 弹性缓动
static float EaseInElastic(float t)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 8001838:	4b22      	ldr	r3, [pc, #136]	@ (80018c4 <EaseInElastic+0x94>)
 800183a:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 800183c:	f04f 0100 	mov.w	r1, #0
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7fe ff25 	bl	8000690 <__aeabi_fcmpeq>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d002      	beq.n	8001852 <EaseInElastic+0x22>
        return 0;
 800184c:	f04f 0300 	mov.w	r3, #0
 8001850:	e034      	b.n	80018bc <EaseInElastic+0x8c>
    if (t == 1)
 8001852:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7fe ff1a 	bl	8000690 <__aeabi_fcmpeq>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <EaseInElastic+0x38>
        return 1;
 8001862:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001866:	e029      	b.n	80018bc <EaseInElastic+0x8c>
    return -powf(2, 10 * t - 10) * sinf((t * 10 - 10.75f) * c4);
 8001868:	4917      	ldr	r1, [pc, #92]	@ (80018c8 <EaseInElastic+0x98>)
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7fe fd7c 	bl	8000368 <__aeabi_fmul>
 8001870:	4603      	mov	r3, r0
 8001872:	4915      	ldr	r1, [pc, #84]	@ (80018c8 <EaseInElastic+0x98>)
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fc6d 	bl	8000154 <__aeabi_fsub>
 800187a:	4603      	mov	r3, r0
 800187c:	4619      	mov	r1, r3
 800187e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001882:	f004 fae9 	bl	8005e58 <powf>
 8001886:	4603      	mov	r3, r0
 8001888:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 800188c:	490e      	ldr	r1, [pc, #56]	@ (80018c8 <EaseInElastic+0x98>)
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7fe fd6a 	bl	8000368 <__aeabi_fmul>
 8001894:	4603      	mov	r3, r0
 8001896:	490d      	ldr	r1, [pc, #52]	@ (80018cc <EaseInElastic+0x9c>)
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fc5b 	bl	8000154 <__aeabi_fsub>
 800189e:	4603      	mov	r3, r0
 80018a0:	68f9      	ldr	r1, [r7, #12]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fd60 	bl	8000368 <__aeabi_fmul>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f004 fb74 	bl	8005f98 <sinf>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4619      	mov	r1, r3
 80018b4:	4620      	mov	r0, r4
 80018b6:	f7fe fd57 	bl	8000368 <__aeabi_fmul>
 80018ba:	4603      	mov	r3, r0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd90      	pop	{r4, r7, pc}
 80018c4:	40060a8b 	.word	0x40060a8b
 80018c8:	41200000 	.word	0x41200000
 80018cc:	412c0000 	.word	0x412c0000

080018d0 <EaseOutElastic>:

static float EaseOutElastic(float t)
{
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 80018d8:	4b22      	ldr	r3, [pc, #136]	@ (8001964 <EaseOutElastic+0x94>)
 80018da:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 80018dc:	f04f 0100 	mov.w	r1, #0
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7fe fed5 	bl	8000690 <__aeabi_fcmpeq>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <EaseOutElastic+0x22>
        return 0;
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	e034      	b.n	800195c <EaseOutElastic+0x8c>
    if (t == 1)
 80018f2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7fe feca 	bl	8000690 <__aeabi_fcmpeq>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <EaseOutElastic+0x38>
        return 1;
 8001902:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001906:	e029      	b.n	800195c <EaseOutElastic+0x8c>
    return powf(2, -10 * t) * sinf((t * 10 - 0.75f) * c4) + 1;
 8001908:	4917      	ldr	r1, [pc, #92]	@ (8001968 <EaseOutElastic+0x98>)
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7fe fd2c 	bl	8000368 <__aeabi_fmul>
 8001910:	4603      	mov	r3, r0
 8001912:	4619      	mov	r1, r3
 8001914:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001918:	f004 fa9e 	bl	8005e58 <powf>
 800191c:	4604      	mov	r4, r0
 800191e:	4913      	ldr	r1, [pc, #76]	@ (800196c <EaseOutElastic+0x9c>)
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7fe fd21 	bl	8000368 <__aeabi_fmul>
 8001926:	4603      	mov	r3, r0
 8001928:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fc11 	bl	8000154 <__aeabi_fsub>
 8001932:	4603      	mov	r3, r0
 8001934:	68f9      	ldr	r1, [r7, #12]
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fd16 	bl	8000368 <__aeabi_fmul>
 800193c:	4603      	mov	r3, r0
 800193e:	4618      	mov	r0, r3
 8001940:	f004 fb2a 	bl	8005f98 <sinf>
 8001944:	4603      	mov	r3, r0
 8001946:	4619      	mov	r1, r3
 8001948:	4620      	mov	r0, r4
 800194a:	f7fe fd0d 	bl	8000368 <__aeabi_fmul>
 800194e:	4603      	mov	r3, r0
 8001950:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fbff 	bl	8000158 <__addsf3>
 800195a:	4603      	mov	r3, r0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	bd90      	pop	{r4, r7, pc}
 8001964:	40060a8b 	.word	0x40060a8b
 8001968:	c1200000 	.word	0xc1200000
 800196c:	41200000 	.word	0x41200000

08001970 <EaseInOutElastic>:

static float EaseInOutElastic(float t)
{
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
    const float c5 = (2 * 3.14159f) / 4.5f;
 8001978:	4b44      	ldr	r3, [pc, #272]	@ (8001a8c <EaseInOutElastic+0x11c>)
 800197a:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 800197c:	f04f 0100 	mov.w	r1, #0
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7fe fe85 	bl	8000690 <__aeabi_fcmpeq>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <EaseInOutElastic+0x22>
        return 0;
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	e077      	b.n	8001a82 <EaseInOutElastic+0x112>
    if (t == 1)
 8001992:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7fe fe7a 	bl	8000690 <__aeabi_fcmpeq>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <EaseInOutElastic+0x38>
        return 1;
 80019a2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80019a6:	e06c      	b.n	8001a82 <EaseInOutElastic+0x112>
    if (t < 0.5f)
 80019a8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7fe fe79 	bl	80006a4 <__aeabi_fcmplt>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d030      	beq.n	8001a1a <EaseInOutElastic+0xaa>
        return -(powf(2, 20 * t - 10) * sinf((20 * t - 11.125f) * c5)) / 2;
 80019b8:	4935      	ldr	r1, [pc, #212]	@ (8001a90 <EaseInOutElastic+0x120>)
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7fe fcd4 	bl	8000368 <__aeabi_fmul>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4934      	ldr	r1, [pc, #208]	@ (8001a94 <EaseInOutElastic+0x124>)
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fbc5 	bl	8000154 <__aeabi_fsub>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4619      	mov	r1, r3
 80019ce:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80019d2:	f004 fa41 	bl	8005e58 <powf>
 80019d6:	4604      	mov	r4, r0
 80019d8:	492d      	ldr	r1, [pc, #180]	@ (8001a90 <EaseInOutElastic+0x120>)
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7fe fcc4 	bl	8000368 <__aeabi_fmul>
 80019e0:	4603      	mov	r3, r0
 80019e2:	492d      	ldr	r1, [pc, #180]	@ (8001a98 <EaseInOutElastic+0x128>)
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fbb5 	bl	8000154 <__aeabi_fsub>
 80019ea:	4603      	mov	r3, r0
 80019ec:	68f9      	ldr	r1, [r7, #12]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fcba 	bl	8000368 <__aeabi_fmul>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f004 face 	bl	8005f98 <sinf>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4619      	mov	r1, r3
 8001a00:	4620      	mov	r0, r4
 8001a02:	f7fe fcb1 	bl	8000368 <__aeabi_fmul>
 8001a06:	4603      	mov	r3, r0
 8001a08:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001a0c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fd5d 	bl	80004d0 <__aeabi_fdiv>
 8001a16:	4603      	mov	r3, r0
 8001a18:	e033      	b.n	8001a82 <EaseInOutElastic+0x112>
    return (powf(2, -20 * t + 10) * sinf((20 * t - 11.125f) * c5)) / 2 + 1;
 8001a1a:	4920      	ldr	r1, [pc, #128]	@ (8001a9c <EaseInOutElastic+0x12c>)
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7fe fca3 	bl	8000368 <__aeabi_fmul>
 8001a22:	4603      	mov	r3, r0
 8001a24:	491b      	ldr	r1, [pc, #108]	@ (8001a94 <EaseInOutElastic+0x124>)
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fb96 	bl	8000158 <__addsf3>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001a34:	f004 fa10 	bl	8005e58 <powf>
 8001a38:	4604      	mov	r4, r0
 8001a3a:	4915      	ldr	r1, [pc, #84]	@ (8001a90 <EaseInOutElastic+0x120>)
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7fe fc93 	bl	8000368 <__aeabi_fmul>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4914      	ldr	r1, [pc, #80]	@ (8001a98 <EaseInOutElastic+0x128>)
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fb84 	bl	8000154 <__aeabi_fsub>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	68f9      	ldr	r1, [r7, #12]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fc89 	bl	8000368 <__aeabi_fmul>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f004 fa9d 	bl	8005f98 <sinf>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4619      	mov	r1, r3
 8001a62:	4620      	mov	r0, r4
 8001a64:	f7fe fc80 	bl	8000368 <__aeabi_fmul>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fd2e 	bl	80004d0 <__aeabi_fdiv>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fb6c 	bl	8000158 <__addsf3>
 8001a80:	4603      	mov	r3, r0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd90      	pop	{r4, r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	3fb2b8b9 	.word	0x3fb2b8b9
 8001a90:	41a00000 	.word	0x41a00000
 8001a94:	41200000 	.word	0x41200000
 8001a98:	41320000 	.word	0x41320000
 8001a9c:	c1a00000 	.word	0xc1a00000

08001aa0 <EaseOutBounce>:

static float EaseOutBounce(float t)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
    const float n1 = 7.5625f;
 8001aa8:	4b45      	ldr	r3, [pc, #276]	@ (8001bc0 <EaseOutBounce+0x120>)
 8001aaa:	60fb      	str	r3, [r7, #12]
    const float d1 = 2.75f;
 8001aac:	4b45      	ldr	r3, [pc, #276]	@ (8001bc4 <EaseOutBounce+0x124>)
 8001aae:	60bb      	str	r3, [r7, #8]

    if (t < 1 / d1)
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001ab6:	f7fe fd0b 	bl	80004d0 <__aeabi_fdiv>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4619      	mov	r1, r3
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7fe fdf0 	bl	80006a4 <__aeabi_fcmplt>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00a      	beq.n	8001ae0 <EaseOutBounce+0x40>
    {
        return n1 * t * t;
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f7fe fc4b 	bl	8000368 <__aeabi_fmul>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fc46 	bl	8000368 <__aeabi_fmul>
 8001adc:	4603      	mov	r3, r0
 8001ade:	e06a      	b.n	8001bb6 <EaseOutBounce+0x116>
    }
    else if (t < 2 / d1)
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001ae6:	f7fe fcf3 	bl	80004d0 <__aeabi_fdiv>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4619      	mov	r1, r3
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7fe fdd8 	bl	80006a4 <__aeabi_fcmplt>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d01c      	beq.n	8001b34 <EaseOutBounce+0x94>
    {
        t -= 1.5f / d1;
 8001afa:	68b9      	ldr	r1, [r7, #8]
 8001afc:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8001b00:	f7fe fce6 	bl	80004d0 <__aeabi_fdiv>
 8001b04:	4603      	mov	r3, r0
 8001b06:	4619      	mov	r1, r3
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7fe fb23 	bl	8000154 <__aeabi_fsub>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.75f;
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f7fe fc27 	bl	8000368 <__aeabi_fmul>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fc22 	bl	8000368 <__aeabi_fmul>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fb14 	bl	8000158 <__addsf3>
 8001b30:	4603      	mov	r3, r0
 8001b32:	e040      	b.n	8001bb6 <EaseOutBounce+0x116>
    }
    else if (t < 2.5f / d1)
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	4824      	ldr	r0, [pc, #144]	@ (8001bc8 <EaseOutBounce+0x128>)
 8001b38:	f7fe fcca 	bl	80004d0 <__aeabi_fdiv>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4619      	mov	r1, r3
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7fe fdaf 	bl	80006a4 <__aeabi_fcmplt>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d01a      	beq.n	8001b82 <EaseOutBounce+0xe2>
    {
        t -= 2.25f / d1;
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	481f      	ldr	r0, [pc, #124]	@ (8001bcc <EaseOutBounce+0x12c>)
 8001b50:	f7fe fcbe 	bl	80004d0 <__aeabi_fdiv>
 8001b54:	4603      	mov	r3, r0
 8001b56:	4619      	mov	r1, r3
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7fe fafb 	bl	8000154 <__aeabi_fsub>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.9375f;
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f7fe fbff 	bl	8000368 <__aeabi_fmul>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fbfa 	bl	8000368 <__aeabi_fmul>
 8001b74:	4603      	mov	r3, r0
 8001b76:	4916      	ldr	r1, [pc, #88]	@ (8001bd0 <EaseOutBounce+0x130>)
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe faed 	bl	8000158 <__addsf3>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	e019      	b.n	8001bb6 <EaseOutBounce+0x116>
    }
    else
    {
        t -= 2.625f / d1;
 8001b82:	68b9      	ldr	r1, [r7, #8]
 8001b84:	4813      	ldr	r0, [pc, #76]	@ (8001bd4 <EaseOutBounce+0x134>)
 8001b86:	f7fe fca3 	bl	80004d0 <__aeabi_fdiv>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7fe fae0 	bl	8000154 <__aeabi_fsub>
 8001b94:	4603      	mov	r3, r0
 8001b96:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.984375f;
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f7fe fbe4 	bl	8000368 <__aeabi_fmul>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fbdf 	bl	8000368 <__aeabi_fmul>
 8001baa:	4603      	mov	r3, r0
 8001bac:	490a      	ldr	r1, [pc, #40]	@ (8001bd8 <EaseOutBounce+0x138>)
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fad2 	bl	8000158 <__addsf3>
 8001bb4:	4603      	mov	r3, r0
    }
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40f20000 	.word	0x40f20000
 8001bc4:	40300000 	.word	0x40300000
 8001bc8:	40200000 	.word	0x40200000
 8001bcc:	40100000 	.word	0x40100000
 8001bd0:	3f700000 	.word	0x3f700000
 8001bd4:	40280000 	.word	0x40280000
 8001bd8:	3f7c0000 	.word	0x3f7c0000

08001bdc <EaseInBounce>:

// 反弹缓动
static float EaseInBounce(float t)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
    return 1 - EaseOutBounce(1 - t);
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001bea:	f7fe fab3 	bl	8000154 <__aeabi_fsub>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff55 	bl	8001aa0 <EaseOutBounce>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001bfe:	f7fe faa9 	bl	8000154 <__aeabi_fsub>
 8001c02:	4603      	mov	r3, r0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <EaseInOutBounce>:

static float EaseInOutBounce(float t)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 8001c14:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7fe fd43 	bl	80006a4 <__aeabi_fcmplt>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d010      	beq.n	8001c46 <EaseInOutBounce+0x3a>
        return EaseInBounce(t * 2) * 0.5f;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4619      	mov	r1, r3
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fa95 	bl	8000158 <__addsf3>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ffd3 	bl	8001bdc <EaseInBounce>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fb93 	bl	8000368 <__aeabi_fmul>
 8001c42:	4603      	mov	r3, r0
 8001c44:	e01b      	b.n	8001c7e <EaseInOutBounce+0x72>
    return EaseOutBounce(t * 2 - 1) * 0.5f + 0.5f;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fa84 	bl	8000158 <__addsf3>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fa7c 	bl	8000154 <__aeabi_fsub>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff ff1e 	bl	8001aa0 <EaseOutBounce>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fb7c 	bl	8000368 <__aeabi_fmul>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe fa6e 	bl	8000158 <__addsf3>
 8001c7c:	4603      	mov	r3, r0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <EaseInBack>:

// 背越式缓动
static float EaseInBack(float t)
{
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8001c90:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <EaseInBack+0x60>)
 8001c92:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8001c94:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f7fe fa5d 	bl	8000158 <__addsf3>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	60bb      	str	r3, [r7, #8]

    return c3 * t * t * t - c1 * t * t;
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	68b8      	ldr	r0, [r7, #8]
 8001ca6:	f7fe fb5f 	bl	8000368 <__aeabi_fmul>
 8001caa:	4603      	mov	r3, r0
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fb5a 	bl	8000368 <__aeabi_fmul>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fb55 	bl	8000368 <__aeabi_fmul>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461c      	mov	r4, r3
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f7fe fb4f 	bl	8000368 <__aeabi_fmul>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fb4a 	bl	8000368 <__aeabi_fmul>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4620      	mov	r0, r4
 8001cda:	f7fe fa3b 	bl	8000154 <__aeabi_fsub>
 8001cde:	4603      	mov	r3, r0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd90      	pop	{r4, r7, pc}
 8001ce8:	3fd9cd60 	.word	0x3fd9cd60

08001cec <EaseOutBack>:

static float EaseOutBack(float t)
{
 8001cec:	b590      	push	{r4, r7, lr}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8001cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d68 <EaseOutBack+0x7c>)
 8001cf6:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8001cf8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f7fe fa2b 	bl	8000158 <__addsf3>
 8001d02:	4603      	mov	r3, r0
 8001d04:	60bb      	str	r3, [r7, #8]

    return 1 + c3 * powf(t - 1, 3) + c1 * powf(t - 1, 2);
 8001d06:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7fe fa22 	bl	8000154 <__aeabi_fsub>
 8001d10:	4603      	mov	r3, r0
 8001d12:	4916      	ldr	r1, [pc, #88]	@ (8001d6c <EaseOutBack+0x80>)
 8001d14:	4618      	mov	r0, r3
 8001d16:	f004 f89f 	bl	8005e58 <powf>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	68b9      	ldr	r1, [r7, #8]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fb22 	bl	8000368 <__aeabi_fmul>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fa14 	bl	8000158 <__addsf3>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461c      	mov	r4, r3
 8001d34:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7fe fa0b 	bl	8000154 <__aeabi_fsub>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001d44:	4618      	mov	r0, r3
 8001d46:	f004 f887 	bl	8005e58 <powf>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	68f9      	ldr	r1, [r7, #12]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fb0a 	bl	8000368 <__aeabi_fmul>
 8001d54:	4603      	mov	r3, r0
 8001d56:	4619      	mov	r1, r3
 8001d58:	4620      	mov	r0, r4
 8001d5a:	f7fe f9fd 	bl	8000158 <__addsf3>
 8001d5e:	4603      	mov	r3, r0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd90      	pop	{r4, r7, pc}
 8001d68:	3fd9cd60 	.word	0x3fd9cd60
 8001d6c:	40400000 	.word	0x40400000

08001d70 <EaseInOutBack>:

static float EaseInOutBack(float t)
{
 8001d70:	b5b0      	push	{r4, r5, r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8001d78:	4b40      	ldr	r3, [pc, #256]	@ (8001e7c <EaseInOutBack+0x10c>)
 8001d7a:	60fb      	str	r3, [r7, #12]
    const float c2 = c1 * 1.525f;
 8001d7c:	4940      	ldr	r1, [pc, #256]	@ (8001e80 <EaseInOutBack+0x110>)
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f7fe faf2 	bl	8000368 <__aeabi_fmul>
 8001d84:	4603      	mov	r3, r0
 8001d86:	60bb      	str	r3, [r7, #8]

    if (t < 0.5f)
 8001d88:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7fe fc89 	bl	80006a4 <__aeabi_fcmplt>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d02c      	beq.n	8001df2 <EaseInOutBack+0x82>
        return (powf(2 * t, 2) * ((c2 + 1) * 2 * t - c2)) / 2;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe f9db 	bl	8000158 <__addsf3>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001da8:	4618      	mov	r0, r3
 8001daa:	f004 f855 	bl	8005e58 <powf>
 8001dae:	4604      	mov	r4, r0
 8001db0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001db4:	68b8      	ldr	r0, [r7, #8]
 8001db6:	f7fe f9cf 	bl	8000158 <__addsf3>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe f9ca 	bl	8000158 <__addsf3>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe facd 	bl	8000368 <__aeabi_fmul>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe f9be 	bl	8000154 <__aeabi_fsub>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f7fe fac3 	bl	8000368 <__aeabi_fmul>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fb71 	bl	80004d0 <__aeabi_fdiv>
 8001dee:	4603      	mov	r3, r0
 8001df0:	e03f      	b.n	8001e72 <EaseInOutBack+0x102>
    return (powf(2 * t - 2, 2) * ((c2 + 1) * (t * 2 - 2) + c2) + 2) / 2;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4619      	mov	r1, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe f9ae 	bl	8000158 <__addsf3>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe f9a6 	bl	8000154 <__aeabi_fsub>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f004 f822 	bl	8005e58 <powf>
 8001e14:	4604      	mov	r4, r0
 8001e16:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001e1a:	68b8      	ldr	r0, [r7, #8]
 8001e1c:	f7fe f99c 	bl	8000158 <__addsf3>
 8001e20:	4603      	mov	r3, r0
 8001e22:	461d      	mov	r5, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4619      	mov	r1, r3
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe f995 	bl	8000158 <__addsf3>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe f98d 	bl	8000154 <__aeabi_fsub>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4628      	mov	r0, r5
 8001e40:	f7fe fa92 	bl	8000368 <__aeabi_fmul>
 8001e44:	4603      	mov	r3, r0
 8001e46:	68b9      	ldr	r1, [r7, #8]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe f985 	bl	8000158 <__addsf3>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4619      	mov	r1, r3
 8001e52:	4620      	mov	r0, r4
 8001e54:	f7fe fa88 	bl	8000368 <__aeabi_fmul>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe f97a 	bl	8000158 <__addsf3>
 8001e64:	4603      	mov	r3, r0
 8001e66:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fb30 	bl	80004d0 <__aeabi_fdiv>
 8001e70:	4603      	mov	r3, r0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bdb0      	pop	{r4, r5, r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	3fd9cd60 	.word	0x3fd9cd60
 8001e80:	3fc33333 	.word	0x3fc33333

08001e84 <EaseInSine>:

// 正弦缓动
static float EaseInSine(float t)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
    return 1 - cosf((t * 3.14159f) / 2);
 8001e8c:	490c      	ldr	r1, [pc, #48]	@ (8001ec0 <EaseInSine+0x3c>)
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7fe fa6a 	bl	8000368 <__aeabi_fmul>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fb18 	bl	80004d0 <__aeabi_fdiv>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f004 f840 	bl	8005f28 <cosf>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001eb0:	f7fe f950 	bl	8000154 <__aeabi_fsub>
 8001eb4:	4603      	mov	r3, r0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40490fd0 	.word	0x40490fd0

08001ec4 <EaseOutSine>:

static float EaseOutSine(float t)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
    return sinf((t * 3.14159f) / 2);
 8001ecc:	4909      	ldr	r1, [pc, #36]	@ (8001ef4 <EaseOutSine+0x30>)
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7fe fa4a 	bl	8000368 <__aeabi_fmul>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe faf8 	bl	80004d0 <__aeabi_fdiv>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f004 f858 	bl	8005f98 <sinf>
 8001ee8:	4603      	mov	r3, r0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40490fd0 	.word	0x40490fd0

08001ef8 <EaseInOutSine>:

static float EaseInOutSine(float t)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
    return -(cosf(3.14159f * t) - 1) / 2;
 8001f00:	490d      	ldr	r1, [pc, #52]	@ (8001f38 <EaseInOutSine+0x40>)
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7fe fa30 	bl	8000368 <__aeabi_fmul>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f004 f80c 	bl	8005f28 <cosf>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe f91c 	bl	8000154 <__aeabi_fsub>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001f22:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fad2 	bl	80004d0 <__aeabi_fdiv>
 8001f2c:	4603      	mov	r3, r0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40490fd0 	.word	0x40490fd0

08001f3c <GetEaseValue>:

static float GetEaseValue(float progress, EaseType_t easeType)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	70fb      	strb	r3, [r7, #3]
    switch (easeType)
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	2b18      	cmp	r3, #24
 8001f4c:	f200 80b3 	bhi.w	80020b6 <GetEaseValue+0x17a>
 8001f50:	a201      	add	r2, pc, #4	@ (adr r2, 8001f58 <GetEaseValue+0x1c>)
 8001f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f56:	bf00      	nop
 8001f58:	08001fbd 	.word	0x08001fbd
 8001f5c:	08001fc7 	.word	0x08001fc7
 8001f60:	08001fd1 	.word	0x08001fd1
 8001f64:	08001fdb 	.word	0x08001fdb
 8001f68:	08001fe5 	.word	0x08001fe5
 8001f6c:	08001fef 	.word	0x08001fef
 8001f70:	08001ff9 	.word	0x08001ff9
 8001f74:	08002003 	.word	0x08002003
 8001f78:	0800200d 	.word	0x0800200d
 8001f7c:	08002017 	.word	0x08002017
 8001f80:	08002021 	.word	0x08002021
 8001f84:	0800202b 	.word	0x0800202b
 8001f88:	08002035 	.word	0x08002035
 8001f8c:	0800203f 	.word	0x0800203f
 8001f90:	08002049 	.word	0x08002049
 8001f94:	08002053 	.word	0x08002053
 8001f98:	0800205d 	.word	0x0800205d
 8001f9c:	08002067 	.word	0x08002067
 8001fa0:	08002071 	.word	0x08002071
 8001fa4:	0800207b 	.word	0x0800207b
 8001fa8:	08002085 	.word	0x08002085
 8001fac:	0800208f 	.word	0x0800208f
 8001fb0:	08002099 	.word	0x08002099
 8001fb4:	080020a3 	.word	0x080020a3
 8001fb8:	080020ad 	.word	0x080020ad
    {
    case EASE_LINEAR:
        return EaseLinear(progress);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff fa15 	bl	80013ec <EaseLinear>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	e078      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_IN_QUAD:
        return EaseInQuad(progress);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff fa1a 	bl	8001400 <EaseInQuad>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	e073      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_OUT_QUAD:
        return EaseOutQuad(progress);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff fa22 	bl	800141a <EaseOutQuad>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	e06e      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_INOUT_QUAD:
        return EaseInOutQuad(progress);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff fa30 	bl	8001440 <EaseInOutQuad>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	e069      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_IN_CUBIC:
        return EaseInCubic(progress);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff fa5e 	bl	80014a6 <EaseInCubic>
 8001fea:	4603      	mov	r3, r0
 8001fec:	e064      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_OUT_CUBIC:
        return EaseOutCubic(progress);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff fa6b 	bl	80014ca <EaseOutCubic>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	e05f      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_INOUT_CUBIC:
        return EaseInOutCubic(progress);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff fa85 	bl	8001508 <EaseInOutCubic>
 8001ffe:	4603      	mov	r3, r0
 8002000:	e05a      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_IN_EXPO:
        return EaseInExpo(progress);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff fad2 	bl	80015ac <EaseInExpo>
 8002008:	4603      	mov	r3, r0
 800200a:	e055      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_OUT_EXPO:
        return EaseOutExpo(progress);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff faf3 	bl	80015f8 <EaseOutExpo>
 8002012:	4603      	mov	r3, r0
 8002014:	e050      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_INOUT_EXPO:
        return EaseInOutExpo(progress);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff fb14 	bl	8001644 <EaseInOutExpo>
 800201c:	4603      	mov	r3, r0
 800201e:	e04b      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_IN_CIRC:
        return EaseInCirc(progress);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff fb6f 	bl	8001704 <EaseInCirc>
 8002026:	4603      	mov	r3, r0
 8002028:	e046      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_OUT_CIRC:
        return EaseOutCirc(progress);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fb87 	bl	800173e <EaseOutCirc>
 8002030:	4603      	mov	r3, r0
 8002032:	e041      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_INOUT_CIRC:
        return EaseInOutCirc(progress);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff fba0 	bl	800177a <EaseInOutCirc>
 800203a:	4603      	mov	r3, r0
 800203c:	e03c      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_IN_ELASTIC:
        return EaseInElastic(progress);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff fbf6 	bl	8001830 <EaseInElastic>
 8002044:	4603      	mov	r3, r0
 8002046:	e037      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_OUT_ELASTIC:
        return EaseOutElastic(progress);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff fc41 	bl	80018d0 <EaseOutElastic>
 800204e:	4603      	mov	r3, r0
 8002050:	e032      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_INOUT_ELASTIC:
        return EaseInOutElastic(progress);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff fc8c 	bl	8001970 <EaseInOutElastic>
 8002058:	4603      	mov	r3, r0
 800205a:	e02d      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_IN_BOUNCE:
        return EaseInBounce(progress);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff fdbd 	bl	8001bdc <EaseInBounce>
 8002062:	4603      	mov	r3, r0
 8002064:	e028      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_OUT_BOUNCE:
        return EaseOutBounce(progress);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff fd1a 	bl	8001aa0 <EaseOutBounce>
 800206c:	4603      	mov	r3, r0
 800206e:	e023      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_INOUT_BOUNCE:
        return EaseInOutBounce(progress);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff fdcb 	bl	8001c0c <EaseInOutBounce>
 8002076:	4603      	mov	r3, r0
 8002078:	e01e      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_IN_BACK:
        return EaseInBack(progress);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff fe04 	bl	8001c88 <EaseInBack>
 8002080:	4603      	mov	r3, r0
 8002082:	e019      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_OUT_BACK:
        return EaseOutBack(progress);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff fe31 	bl	8001cec <EaseOutBack>
 800208a:	4603      	mov	r3, r0
 800208c:	e014      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_INOUT_BACK:
        return EaseInOutBack(progress);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff fe6e 	bl	8001d70 <EaseInOutBack>
 8002094:	4603      	mov	r3, r0
 8002096:	e00f      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_IN_SINE:
        return EaseInSine(progress);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff fef3 	bl	8001e84 <EaseInSine>
 800209e:	4603      	mov	r3, r0
 80020a0:	e00a      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_OUT_SINE:
        return EaseOutSine(progress);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff ff0e 	bl	8001ec4 <EaseOutSine>
 80020a8:	4603      	mov	r3, r0
 80020aa:	e005      	b.n	80020b8 <GetEaseValue+0x17c>
    case EASE_INOUT_SINE:
        return EaseInOutSine(progress);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff23 	bl	8001ef8 <EaseInOutSine>
 80020b2:	4603      	mov	r3, r0
 80020b4:	e000      	b.n	80020b8 <GetEaseValue+0x17c>
    default:
        return progress;
 80020b6:	687b      	ldr	r3, [r7, #4]
    }
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <OLED_UpdateAnimation>:
    anim->easeType = easeType;
}

// 更新动画状态，返回isActive的值
uint8_t OLED_UpdateAnimation(Animation_t *anim, uint32_t currentTime)
{
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
    if (!anim->isActive)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	7d1b      	ldrb	r3, [r3, #20]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <OLED_UpdateAnimation+0x16>
        return 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e04d      	b.n	8002172 <OLED_UpdateAnimation+0xb2>

    uint32_t elapsedTime = currentTime - anim->startTime;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	617b      	str	r3, [r7, #20]
    // 动画完成
    if (elapsedTime >= anim->duration || anim->currentValue == anim->endValue) // 如果我的目标在指定的点上，也关闭isActive
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d20a      	bcs.n	8002100 <OLED_UpdateAnimation+0x40>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691a      	ldr	r2, [r3, #16]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	4619      	mov	r1, r3
 80020f4:	4610      	mov	r0, r2
 80020f6:	f7fe facb 	bl	8000690 <__aeabi_fcmpeq>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d008      	beq.n	8002112 <OLED_UpdateAnimation+0x52>
    {
        anim->currentValue = anim->endValue;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	611a      	str	r2, [r3, #16]
        anim->isActive = 0;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	751a      	strb	r2, [r3, #20]
        return 0;
 800210e:	2300      	movs	r3, #0
 8002110:	e02f      	b.n	8002172 <OLED_UpdateAnimation+0xb2>
    }

    // 计算当前进度 (0.0 - 1.0)
    float progress = (float)elapsedTime / anim->duration;
 8002112:	6978      	ldr	r0, [r7, #20]
 8002114:	f7fe f8d0 	bl	80002b8 <__aeabi_ui2f>
 8002118:	4604      	mov	r4, r0
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe f8ca 	bl	80002b8 <__aeabi_ui2f>
 8002124:	4603      	mov	r3, r0
 8002126:	4619      	mov	r1, r3
 8002128:	4620      	mov	r0, r4
 800212a:	f7fe f9d1 	bl	80004d0 <__aeabi_fdiv>
 800212e:	4603      	mov	r3, r0
 8002130:	613b      	str	r3, [r7, #16]

    // 应用缓动函数
    float easedProgress = GetEaseValue(progress, anim->easeType);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	7d5b      	ldrb	r3, [r3, #21]
 8002136:	4619      	mov	r1, r3
 8002138:	6938      	ldr	r0, [r7, #16]
 800213a:	f7ff feff 	bl	8001f3c <GetEaseValue>
 800213e:	60f8      	str	r0, [r7, #12]

    // 计算当前值
    anim->currentValue = anim->startValue + (anim->endValue - anim->startValue) * easedProgress;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689c      	ldr	r4, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4619      	mov	r1, r3
 800214e:	4610      	mov	r0, r2
 8002150:	f7fe f800 	bl	8000154 <__aeabi_fsub>
 8002154:	4603      	mov	r3, r0
 8002156:	68f9      	ldr	r1, [r7, #12]
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe f905 	bl	8000368 <__aeabi_fmul>
 800215e:	4603      	mov	r3, r0
 8002160:	4619      	mov	r1, r3
 8002162:	4620      	mov	r0, r4
 8002164:	f7fd fff8 	bl	8000158 <__addsf3>
 8002168:	4603      	mov	r3, r0
 800216a:	461a      	mov	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	611a      	str	r2, [r3, #16]

    return 1;
 8002170:	2301      	movs	r3, #1
}
 8002172:	4618      	mov	r0, r3
 8002174:	371c      	adds	r7, #28
 8002176:	46bd      	mov	sp, r7
 8002178:	bd90      	pop	{r4, r7, pc}

0800217a <OLED_GetAnimationValue>:

// 获取当前动画值
float OLED_GetAnimationValue(Animation_t *anim)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
    return anim->currentValue;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <OLED_InitAnimationManager>:
AnimationManager_t Status_AnimationManager;
AnimationManager_t g_Title_AnimationManager; // 菜单动画管理器
AnimationManager_t g_AnimationManager; // 全局动画管理器

void OLED_InitAnimationManager(AnimationManager_t *manager) // 这是初始化一个动画管理器，填入你的manager名字，在系统初始化时候调用它
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
    manager->count = 0;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 25f0 	strb.w	r2, [r3, #1520]	@ 0x5f0
    memset(manager->taggedAnimations, 0, sizeof(manager->taggedAnimations));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 80021a6:	2100      	movs	r1, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f003 f9c7 	bl	800553c <memset>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <OLED_UpdateAnimationManager>:
    anim->isActive = 1;
}

// 更新manager里面的所有动画!
void OLED_UpdateAnimationManager(AnimationManager_t *manager) //! 这里需要使用OLED_UpdateDisplayVSync()来更新显示
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 80021be:	f000 fce3 	bl	8002b88 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

    for (uint8_t i = 0; i < manager->count; i++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	75fb      	strb	r3, [r7, #23]
 80021c8:	e03a      	b.n	8002240 <OLED_UpdateAnimationManager+0x8a>
    {
        TaggedAnimation_t *anim = &manager->taggedAnimations[i];
 80021ca:	7dfb      	ldrb	r3, [r7, #23]
 80021cc:	224c      	movs	r2, #76	@ 0x4c
 80021ce:	fb02 f303 	mul.w	r3, r2, r3
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
        if (!anim->isActive)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d02a      	beq.n	8002238 <OLED_UpdateAnimationManager+0x82>
            continue;

        uint8_t activeX = OLED_UpdateAnimation(&anim->xAnimation, currentTime);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3310      	adds	r3, #16
 80021e6:	6939      	ldr	r1, [r7, #16]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff69 	bl	80020c0 <OLED_UpdateAnimation>
 80021ee:	4603      	mov	r3, r0
 80021f0:	72fb      	strb	r3, [r7, #11]
        uint8_t activeY = OLED_UpdateAnimation(&anim->yAnimation, currentTime);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	3328      	adds	r3, #40	@ 0x28
 80021f6:	6939      	ldr	r1, [r7, #16]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff61 	bl	80020c0 <OLED_UpdateAnimation>
 80021fe:	4603      	mov	r3, r0
 8002200:	72bb      	strb	r3, [r7, #10]

        anim->currentX = OLED_GetAnimationValue(&anim->xAnimation);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	3310      	adds	r3, #16
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ffb7 	bl	800217a <OLED_GetAnimationValue>
 800220c:	4602      	mov	r2, r0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = OLED_GetAnimationValue(&anim->yAnimation);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	3328      	adds	r3, #40	@ 0x28
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ffaf 	bl	800217a <OLED_GetAnimationValue>
 800221c:	4602      	mov	r2, r0
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	649a      	str	r2, [r3, #72]	@ 0x48

        // 如果两个动画都结束，则标记该对象动画为非活跃
        if (!activeX && !activeY)
 8002222:	7afb      	ldrb	r3, [r7, #11]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d108      	bne.n	800223a <OLED_UpdateAnimationManager+0x84>
 8002228:	7abb      	ldrb	r3, [r7, #10]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d105      	bne.n	800223a <OLED_UpdateAnimationManager+0x84>
            anim->isActive = 0;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002236:	e000      	b.n	800223a <OLED_UpdateAnimationManager+0x84>
            continue;
 8002238:	bf00      	nop
    for (uint8_t i = 0; i < manager->count; i++)
 800223a:	7dfb      	ldrb	r3, [r7, #23]
 800223c:	3301      	adds	r3, #1
 800223e:	75fb      	strb	r3, [r7, #23]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8002246:	7dfa      	ldrb	r2, [r7, #23]
 8002248:	429a      	cmp	r2, r3
 800224a:	d3be      	bcc.n	80021ca <OLED_UpdateAnimationManager+0x14>
    }
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800225c:	4b17      	ldr	r3, [pc, #92]	@ (80022bc <MX_SPI2_Init+0x64>)
 800225e:	4a18      	ldr	r2, [pc, #96]	@ (80022c0 <MX_SPI2_Init+0x68>)
 8002260:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002262:	4b16      	ldr	r3, [pc, #88]	@ (80022bc <MX_SPI2_Init+0x64>)
 8002264:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002268:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800226a:	4b14      	ldr	r3, [pc, #80]	@ (80022bc <MX_SPI2_Init+0x64>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002270:	4b12      	ldr	r3, [pc, #72]	@ (80022bc <MX_SPI2_Init+0x64>)
 8002272:	2200      	movs	r2, #0
 8002274:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002276:	4b11      	ldr	r3, [pc, #68]	@ (80022bc <MX_SPI2_Init+0x64>)
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800227c:	4b0f      	ldr	r3, [pc, #60]	@ (80022bc <MX_SPI2_Init+0x64>)
 800227e:	2200      	movs	r2, #0
 8002280:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002282:	4b0e      	ldr	r3, [pc, #56]	@ (80022bc <MX_SPI2_Init+0x64>)
 8002284:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002288:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800228a:	4b0c      	ldr	r3, [pc, #48]	@ (80022bc <MX_SPI2_Init+0x64>)
 800228c:	2200      	movs	r2, #0
 800228e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002290:	4b0a      	ldr	r3, [pc, #40]	@ (80022bc <MX_SPI2_Init+0x64>)
 8002292:	2200      	movs	r2, #0
 8002294:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002296:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <MX_SPI2_Init+0x64>)
 8002298:	2200      	movs	r2, #0
 800229a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800229c:	4b07      	ldr	r3, [pc, #28]	@ (80022bc <MX_SPI2_Init+0x64>)
 800229e:	2200      	movs	r2, #0
 80022a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80022a2:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <MX_SPI2_Init+0x64>)
 80022a4:	220a      	movs	r2, #10
 80022a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80022a8:	4804      	ldr	r0, [pc, #16]	@ (80022bc <MX_SPI2_Init+0x64>)
 80022aa:	f002 f93d 	bl	8004528 <HAL_SPI_Init>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80022b4:	f7fe fc43 	bl	8000b3e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20003cec 	.word	0x20003cec
 80022c0:	40003800 	.word	0x40003800

080022c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	f107 0310 	add.w	r3, r7, #16
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1c      	ldr	r2, [pc, #112]	@ (8002350 <HAL_SPI_MspInit+0x8c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d131      	bne.n	8002348 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002354 <HAL_SPI_MspInit+0x90>)
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002354 <HAL_SPI_MspInit+0x90>)
 80022ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022ee:	61d3      	str	r3, [r2, #28]
 80022f0:	4b18      	ldr	r3, [pc, #96]	@ (8002354 <HAL_SPI_MspInit+0x90>)
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fc:	4b15      	ldr	r3, [pc, #84]	@ (8002354 <HAL_SPI_MspInit+0x90>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	4a14      	ldr	r2, [pc, #80]	@ (8002354 <HAL_SPI_MspInit+0x90>)
 8002302:	f043 0308 	orr.w	r3, r3, #8
 8002306:	6193      	str	r3, [r2, #24]
 8002308:	4b12      	ldr	r3, [pc, #72]	@ (8002354 <HAL_SPI_MspInit+0x90>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = Flash_SCK_Pin|Flash_MOSI_Pin;
 8002314:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002318:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231a:	2302      	movs	r3, #2
 800231c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002322:	f107 0310 	add.w	r3, r7, #16
 8002326:	4619      	mov	r1, r3
 8002328:	480b      	ldr	r0, [pc, #44]	@ (8002358 <HAL_SPI_MspInit+0x94>)
 800232a:	f000 fec9 	bl	80030c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Flash_MISO_Pin;
 800232e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002332:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Flash_MISO_GPIO_Port, &GPIO_InitStruct);
 800233c:	f107 0310 	add.w	r3, r7, #16
 8002340:	4619      	mov	r1, r3
 8002342:	4805      	ldr	r0, [pc, #20]	@ (8002358 <HAL_SPI_MspInit+0x94>)
 8002344:	f000 febc 	bl	80030c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002348:	bf00      	nop
 800234a:	3720      	adds	r7, #32
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40003800 	.word	0x40003800
 8002354:	40021000 	.word	0x40021000
 8002358:	40010c00 	.word	0x40010c00

0800235c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002362:	4b15      	ldr	r3, [pc, #84]	@ (80023b8 <HAL_MspInit+0x5c>)
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	4a14      	ldr	r2, [pc, #80]	@ (80023b8 <HAL_MspInit+0x5c>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6193      	str	r3, [r2, #24]
 800236e:	4b12      	ldr	r3, [pc, #72]	@ (80023b8 <HAL_MspInit+0x5c>)
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	4b0f      	ldr	r3, [pc, #60]	@ (80023b8 <HAL_MspInit+0x5c>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	4a0e      	ldr	r2, [pc, #56]	@ (80023b8 <HAL_MspInit+0x5c>)
 8002380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002384:	61d3      	str	r3, [r2, #28]
 8002386:	4b0c      	ldr	r3, [pc, #48]	@ (80023b8 <HAL_MspInit+0x5c>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238e:	607b      	str	r3, [r7, #4]
 8002390:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002392:	4b0a      	ldr	r3, [pc, #40]	@ (80023bc <HAL_MspInit+0x60>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	4a04      	ldr	r2, [pc, #16]	@ (80023bc <HAL_MspInit+0x60>)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40010000 	.word	0x40010000

080023c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023c4:	bf00      	nop
 80023c6:	e7fd      	b.n	80023c4 <NMI_Handler+0x4>

080023c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <HardFault_Handler+0x4>

080023d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <MemManage_Handler+0x4>

080023d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023dc:	bf00      	nop
 80023de:	e7fd      	b.n	80023dc <BusFault_Handler+0x4>

080023e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <UsageFault_Handler+0x4>

080023e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr

0800240c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002410:	f000 fba8 	bl	8002b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}

08002418 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800241c:	4802      	ldr	r0, [pc, #8]	@ (8002428 <DMA1_Channel6_IRQHandler+0x10>)
 800241e:	f000 fd49 	bl	8002eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200000e0 	.word	0x200000e0

0800242c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002434:	4a14      	ldr	r2, [pc, #80]	@ (8002488 <_sbrk+0x5c>)
 8002436:	4b15      	ldr	r3, [pc, #84]	@ (800248c <_sbrk+0x60>)
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002440:	4b13      	ldr	r3, [pc, #76]	@ (8002490 <_sbrk+0x64>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d102      	bne.n	800244e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002448:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <_sbrk+0x64>)
 800244a:	4a12      	ldr	r2, [pc, #72]	@ (8002494 <_sbrk+0x68>)
 800244c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800244e:	4b10      	ldr	r3, [pc, #64]	@ (8002490 <_sbrk+0x64>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	429a      	cmp	r2, r3
 800245a:	d207      	bcs.n	800246c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800245c:	f003 f876 	bl	800554c <__errno>
 8002460:	4603      	mov	r3, r0
 8002462:	220c      	movs	r2, #12
 8002464:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002466:	f04f 33ff 	mov.w	r3, #4294967295
 800246a:	e009      	b.n	8002480 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800246c:	4b08      	ldr	r3, [pc, #32]	@ (8002490 <_sbrk+0x64>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002472:	4b07      	ldr	r3, [pc, #28]	@ (8002490 <_sbrk+0x64>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	4a05      	ldr	r2, [pc, #20]	@ (8002490 <_sbrk+0x64>)
 800247c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800247e:	68fb      	ldr	r3, [r7, #12]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20005000 	.word	0x20005000
 800248c:	00000400 	.word	0x00000400
 8002490:	20003d44 	.word	0x20003d44
 8002494:	20003f28 	.word	0x20003f28

08002498 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b096      	sub	sp, #88	@ 0x58
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024aa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]
 80024cc:	609a      	str	r2, [r3, #8]
 80024ce:	60da      	str	r2, [r3, #12]
 80024d0:	611a      	str	r2, [r3, #16]
 80024d2:	615a      	str	r2, [r3, #20]
 80024d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	2220      	movs	r2, #32
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f003 f82d 	bl	800553c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024e2:	4b3f      	ldr	r3, [pc, #252]	@ (80025e0 <MX_TIM1_Init+0x13c>)
 80024e4:	4a3f      	ldr	r2, [pc, #252]	@ (80025e4 <MX_TIM1_Init+0x140>)
 80024e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720-1;
 80024e8:	4b3d      	ldr	r3, [pc, #244]	@ (80025e0 <MX_TIM1_Init+0x13c>)
 80024ea:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80024ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f0:	4b3b      	ldr	r3, [pc, #236]	@ (80025e0 <MX_TIM1_Init+0x13c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 80024f6:	4b3a      	ldr	r3, [pc, #232]	@ (80025e0 <MX_TIM1_Init+0x13c>)
 80024f8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80024fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024fe:	4b38      	ldr	r3, [pc, #224]	@ (80025e0 <MX_TIM1_Init+0x13c>)
 8002500:	2200      	movs	r2, #0
 8002502:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002504:	4b36      	ldr	r3, [pc, #216]	@ (80025e0 <MX_TIM1_Init+0x13c>)
 8002506:	2200      	movs	r2, #0
 8002508:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800250a:	4b35      	ldr	r3, [pc, #212]	@ (80025e0 <MX_TIM1_Init+0x13c>)
 800250c:	2200      	movs	r2, #0
 800250e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002510:	4833      	ldr	r0, [pc, #204]	@ (80025e0 <MX_TIM1_Init+0x13c>)
 8002512:	f002 f88d 	bl	8004630 <HAL_TIM_Base_Init>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800251c:	f7fe fb0f 	bl	8000b3e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002520:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002524:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002526:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800252a:	4619      	mov	r1, r3
 800252c:	482c      	ldr	r0, [pc, #176]	@ (80025e0 <MX_TIM1_Init+0x13c>)
 800252e:	f002 fbbb 	bl	8004ca8 <HAL_TIM_ConfigClockSource>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002538:	f7fe fb01 	bl	8000b3e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800253c:	4828      	ldr	r0, [pc, #160]	@ (80025e0 <MX_TIM1_Init+0x13c>)
 800253e:	f002 f8c6 	bl	80046ce <HAL_TIM_PWM_Init>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002548:	f7fe faf9 	bl	8000b3e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800254c:	2300      	movs	r3, #0
 800254e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002554:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002558:	4619      	mov	r1, r3
 800255a:	4821      	ldr	r0, [pc, #132]	@ (80025e0 <MX_TIM1_Init+0x13c>)
 800255c:	f002 ff1c 	bl	8005398 <HAL_TIMEx_MasterConfigSynchronization>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8002566:	f7fe faea 	bl	8000b3e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800256a:	2360      	movs	r3, #96	@ 0x60
 800256c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002572:	2300      	movs	r3, #0
 8002574:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002576:	2300      	movs	r3, #0
 8002578:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800257a:	2300      	movs	r3, #0
 800257c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002582:	2300      	movs	r3, #0
 8002584:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002586:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800258a:	2204      	movs	r2, #4
 800258c:	4619      	mov	r1, r3
 800258e:	4814      	ldr	r0, [pc, #80]	@ (80025e0 <MX_TIM1_Init+0x13c>)
 8002590:	f002 fac8 	bl	8004b24 <HAL_TIM_PWM_ConfigChannel>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800259a:	f7fe fad0 	bl	8000b3e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800259e:	2300      	movs	r3, #0
 80025a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025b8:	2300      	movs	r3, #0
 80025ba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	4619      	mov	r1, r3
 80025c0:	4807      	ldr	r0, [pc, #28]	@ (80025e0 <MX_TIM1_Init+0x13c>)
 80025c2:	f002 ff47 	bl	8005454 <HAL_TIMEx_ConfigBreakDeadTime>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80025cc:	f7fe fab7 	bl	8000b3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80025d0:	4803      	ldr	r0, [pc, #12]	@ (80025e0 <MX_TIM1_Init+0x13c>)
 80025d2:	f000 f8cd 	bl	8002770 <HAL_TIM_MspPostInit>

}
 80025d6:	bf00      	nop
 80025d8:	3758      	adds	r7, #88	@ 0x58
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20003d48 	.word	0x20003d48
 80025e4:	40012c00 	.word	0x40012c00

080025e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08c      	sub	sp, #48	@ 0x30
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025ee:	f107 030c 	add.w	r3, r7, #12
 80025f2:	2224      	movs	r2, #36	@ 0x24
 80025f4:	2100      	movs	r1, #0
 80025f6:	4618      	mov	r0, r3
 80025f8:	f002 ffa0 	bl	800553c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025fc:	1d3b      	adds	r3, r7, #4
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002604:	4b20      	ldr	r3, [pc, #128]	@ (8002688 <MX_TIM3_Init+0xa0>)
 8002606:	4a21      	ldr	r2, [pc, #132]	@ (800268c <MX_TIM3_Init+0xa4>)
 8002608:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800260a:	4b1f      	ldr	r3, [pc, #124]	@ (8002688 <MX_TIM3_Init+0xa0>)
 800260c:	2200      	movs	r2, #0
 800260e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002610:	4b1d      	ldr	r3, [pc, #116]	@ (8002688 <MX_TIM3_Init+0xa0>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002616:	4b1c      	ldr	r3, [pc, #112]	@ (8002688 <MX_TIM3_Init+0xa0>)
 8002618:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800261c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261e:	4b1a      	ldr	r3, [pc, #104]	@ (8002688 <MX_TIM3_Init+0xa0>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002624:	4b18      	ldr	r3, [pc, #96]	@ (8002688 <MX_TIM3_Init+0xa0>)
 8002626:	2200      	movs	r2, #0
 8002628:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800262a:	2301      	movs	r3, #1
 800262c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002632:	2301      	movs	r3, #1
 8002634:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002636:	2300      	movs	r3, #0
 8002638:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800263e:	2300      	movs	r3, #0
 8002640:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002642:	2301      	movs	r3, #1
 8002644:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002646:	2300      	movs	r3, #0
 8002648:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800264e:	f107 030c 	add.w	r3, r7, #12
 8002652:	4619      	mov	r1, r3
 8002654:	480c      	ldr	r0, [pc, #48]	@ (8002688 <MX_TIM3_Init+0xa0>)
 8002656:	f002 f935 	bl	80048c4 <HAL_TIM_Encoder_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002660:	f7fe fa6d 	bl	8000b3e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002664:	2300      	movs	r3, #0
 8002666:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002668:	2300      	movs	r3, #0
 800266a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	4619      	mov	r1, r3
 8002670:	4805      	ldr	r0, [pc, #20]	@ (8002688 <MX_TIM3_Init+0xa0>)
 8002672:	f002 fe91 	bl	8005398 <HAL_TIMEx_MasterConfigSynchronization>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800267c:	f7fe fa5f 	bl	8000b3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002680:	bf00      	nop
 8002682:	3730      	adds	r7, #48	@ 0x30
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20003d90 	.word	0x20003d90
 800268c:	40000400 	.word	0x40000400

08002690 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a09      	ldr	r2, [pc, #36]	@ (80026c4 <HAL_TIM_Base_MspInit+0x34>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d10b      	bne.n	80026ba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026a2:	4b09      	ldr	r3, [pc, #36]	@ (80026c8 <HAL_TIM_Base_MspInit+0x38>)
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	4a08      	ldr	r2, [pc, #32]	@ (80026c8 <HAL_TIM_Base_MspInit+0x38>)
 80026a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026ac:	6193      	str	r3, [r2, #24]
 80026ae:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <HAL_TIM_Base_MspInit+0x38>)
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	40012c00 	.word	0x40012c00
 80026c8:	40021000 	.word	0x40021000

080026cc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	@ 0x28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002760 <HAL_TIM_Encoder_MspInit+0x94>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d135      	bne.n	8002758 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002764 <HAL_TIM_Encoder_MspInit+0x98>)
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002764 <HAL_TIM_Encoder_MspInit+0x98>)
 80026f2:	f043 0302 	orr.w	r3, r3, #2
 80026f6:	61d3      	str	r3, [r2, #28]
 80026f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002764 <HAL_TIM_Encoder_MspInit+0x98>)
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002704:	4b17      	ldr	r3, [pc, #92]	@ (8002764 <HAL_TIM_Encoder_MspInit+0x98>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	4a16      	ldr	r2, [pc, #88]	@ (8002764 <HAL_TIM_Encoder_MspInit+0x98>)
 800270a:	f043 0308 	orr.w	r3, r3, #8
 800270e:	6193      	str	r3, [r2, #24]
 8002710:	4b14      	ldr	r3, [pc, #80]	@ (8002764 <HAL_TIM_Encoder_MspInit+0x98>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_CH1_Pin|Encoder_CH2_Pin;
 800271c:	2330      	movs	r3, #48	@ 0x30
 800271e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002720:	2300      	movs	r3, #0
 8002722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	4619      	mov	r1, r3
 800272e:	480e      	ldr	r0, [pc, #56]	@ (8002768 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002730:	f000 fcc6 	bl	80030c0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002734:	4b0d      	ldr	r3, [pc, #52]	@ (800276c <HAL_TIM_Encoder_MspInit+0xa0>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	627b      	str	r3, [r7, #36]	@ 0x24
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002740:	627b      	str	r3, [r7, #36]	@ 0x24
 8002742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002744:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002750:	627b      	str	r3, [r7, #36]	@ 0x24
 8002752:	4a06      	ldr	r2, [pc, #24]	@ (800276c <HAL_TIM_Encoder_MspInit+0xa0>)
 8002754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002756:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002758:	bf00      	nop
 800275a:	3728      	adds	r7, #40	@ 0x28
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40000400 	.word	0x40000400
 8002764:	40021000 	.word	0x40021000
 8002768:	40010c00 	.word	0x40010c00
 800276c:	40010000 	.word	0x40010000

08002770 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002778:	f107 0310 	add.w	r3, r7, #16
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a10      	ldr	r2, [pc, #64]	@ (80027cc <HAL_TIM_MspPostInit+0x5c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d118      	bne.n	80027c2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002790:	4b0f      	ldr	r3, [pc, #60]	@ (80027d0 <HAL_TIM_MspPostInit+0x60>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	4a0e      	ldr	r2, [pc, #56]	@ (80027d0 <HAL_TIM_MspPostInit+0x60>)
 8002796:	f043 0304 	orr.w	r3, r3, #4
 800279a:	6193      	str	r3, [r2, #24]
 800279c:	4b0c      	ldr	r3, [pc, #48]	@ (80027d0 <HAL_TIM_MspPostInit+0x60>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ae:	2302      	movs	r3, #2
 80027b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	2302      	movs	r3, #2
 80027b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b6:	f107 0310 	add.w	r3, r7, #16
 80027ba:	4619      	mov	r1, r3
 80027bc:	4805      	ldr	r0, [pc, #20]	@ (80027d4 <HAL_TIM_MspPostInit+0x64>)
 80027be:	f000 fc7f 	bl	80030c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80027c2:	bf00      	nop
 80027c4:	3720      	adds	r7, #32
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40012c00 	.word	0x40012c00
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40010800 	.word	0x40010800

080027d8 <lz77_decompress>:
#include <stdint.h>
#include <stdio.h>
#include <stddef.h>

int lz77_decompress(const uint8_t *input, size_t input_size, uint8_t *output, size_t output_size)
{
 80027d8:	b480      	push	{r7}
 80027da:	b08f      	sub	sp, #60	@ 0x3c
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	603b      	str	r3, [r7, #0]
    const uint8_t *input_end = input + input_size;
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4413      	add	r3, r2
 80027ec:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t *output_end = output + output_size;
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	4413      	add	r3, r2
 80027f4:	623b      	str	r3, [r7, #32]
    uint8_t *output_ptr = output;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	637b      	str	r3, [r7, #52]	@ 0x34

    while (input < input_end)
 80027fa:	e07d      	b.n	80028f8 <lz77_decompress+0x120>
    {
        uint8_t flag = *input++;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	60fa      	str	r2, [r7, #12]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	77fb      	strb	r3, [r7, #31]
        if (flag < 0x80)
 8002806:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800280a:	2b00      	cmp	r3, #0
 800280c:	db25      	blt.n	800285a <lz77_decompress+0x82>
        {
            // Literal run
            size_t len = flag & 0x7F;
 800280e:	7ffb      	ldrb	r3, [r7, #31]
 8002810:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002814:	617b      	str	r3, [r7, #20]
            if (input + len > input_end || output_ptr + len > output_end)
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	4413      	add	r3, r2
 800281c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800281e:	429a      	cmp	r2, r3
 8002820:	d305      	bcc.n	800282e <lz77_decompress+0x56>
 8002822:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	4413      	add	r3, r2
 8002828:	6a3a      	ldr	r2, [r7, #32]
 800282a:	429a      	cmp	r2, r3
 800282c:	d202      	bcs.n	8002834 <lz77_decompress+0x5c>
            {
                return -1; // Overflow check
 800282e:	f04f 33ff 	mov.w	r3, #4294967295
 8002832:	e069      	b.n	8002908 <lz77_decompress+0x130>
            }
            for (size_t i = 0; i < len; i++)
 8002834:	2300      	movs	r3, #0
 8002836:	633b      	str	r3, [r7, #48]	@ 0x30
 8002838:	e00a      	b.n	8002850 <lz77_decompress+0x78>
            {
                *output_ptr++ = *input++;
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	1c53      	adds	r3, r2, #1
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002842:	1c59      	adds	r1, r3, #1
 8002844:	6379      	str	r1, [r7, #52]	@ 0x34
 8002846:	7812      	ldrb	r2, [r2, #0]
 8002848:	701a      	strb	r2, [r3, #0]
            for (size_t i = 0; i < len; i++)
 800284a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800284c:	3301      	adds	r3, #1
 800284e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	429a      	cmp	r2, r3
 8002856:	d3f0      	bcc.n	800283a <lz77_decompress+0x62>
 8002858:	e04e      	b.n	80028f8 <lz77_decompress+0x120>
            }
        }
        else
        {
            // Back reference
            if (input + 2 > input_end)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	3302      	adds	r3, #2
 800285e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002860:	429a      	cmp	r2, r3
 8002862:	d202      	bcs.n	800286a <lz77_decompress+0x92>
            {
                return -1; // Input overflow
 8002864:	f04f 33ff 	mov.w	r3, #4294967295
 8002868:	e04e      	b.n	8002908 <lz77_decompress+0x130>
            }
            uint16_t offset = ((flag & 0x7F) << 8) | *input++;
 800286a:	7ffb      	ldrb	r3, [r7, #31]
 800286c:	b21b      	sxth	r3, r3
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	b21b      	sxth	r3, r3
 8002872:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 8002876:	b21a      	sxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1c59      	adds	r1, r3, #1
 800287c:	60f9      	str	r1, [r7, #12]
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	b21b      	sxth	r3, r3
 8002882:	4313      	orrs	r3, r2
 8002884:	b21b      	sxth	r3, r3
 8002886:	83bb      	strh	r3, [r7, #28]
            offset += 1; // Offset starts from 1
 8002888:	8bbb      	ldrh	r3, [r7, #28]
 800288a:	3301      	adds	r3, #1
 800288c:	83bb      	strh	r3, [r7, #28]
            uint8_t length = *input++;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	60fa      	str	r2, [r7, #12]
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	76fb      	strb	r3, [r7, #27]
            if (length == 0 || offset > (size_t)(output_ptr - output))
 8002898:	7efb      	ldrb	r3, [r7, #27]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d005      	beq.n	80028aa <lz77_decompress+0xd2>
 800289e:	8bbb      	ldrh	r3, [r7, #28]
 80028a0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	1a8a      	subs	r2, r1, r2
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d902      	bls.n	80028b0 <lz77_decompress+0xd8>
            {
                return -1; // Invalid length or offset
 80028aa:	f04f 33ff 	mov.w	r3, #4294967295
 80028ae:	e02b      	b.n	8002908 <lz77_decompress+0x130>
            }
            uint8_t *src = output_ptr - offset;
 80028b0:	8bbb      	ldrh	r3, [r7, #28]
 80028b2:	425b      	negs	r3, r3
 80028b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028b6:	4413      	add	r3, r2
 80028b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (output_ptr + length > output_end)
 80028ba:	7efb      	ldrb	r3, [r7, #27]
 80028bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028be:	4413      	add	r3, r2
 80028c0:	6a3a      	ldr	r2, [r7, #32]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d202      	bcs.n	80028cc <lz77_decompress+0xf4>
            {
                return -1; // Output overflow
 80028c6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ca:	e01d      	b.n	8002908 <lz77_decompress+0x130>
            }
            for (uint8_t i = 0; i < length; i++)
 80028cc:	2300      	movs	r3, #0
 80028ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028d2:	e00c      	b.n	80028ee <lz77_decompress+0x116>
            {
                *output_ptr++ = *src++;
 80028d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028d6:	1c53      	adds	r3, r2, #1
 80028d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028dc:	1c59      	adds	r1, r3, #1
 80028de:	6379      	str	r1, [r7, #52]	@ 0x34
 80028e0:	7812      	ldrb	r2, [r2, #0]
 80028e2:	701a      	strb	r2, [r3, #0]
            for (uint8_t i = 0; i < length; i++)
 80028e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80028e8:	3301      	adds	r3, #1
 80028ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028ee:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80028f2:	7efb      	ldrb	r3, [r7, #27]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d3ed      	bcc.n	80028d4 <lz77_decompress+0xfc>
    while (input < input_end)
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	429a      	cmp	r2, r3
 80028fe:	f4ff af7d 	bcc.w	80027fc <lz77_decompress+0x24>
            }
        }
    }
    return (int)(output_ptr - output);
 8002902:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	1ad3      	subs	r3, r2, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	373c      	adds	r7, #60	@ 0x3c
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
	...

08002914 <display_frame_oled>:

void display_frame_oled(unsigned char *frame)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
    OLED_ClearBuffer(); // Clear the OLED buffer before drawing a new frame
 800291c:	f7fe f94a 	bl	8000bb4 <OLED_ClearBuffer>
    for (int i = 0; i < 114 * 64; i++)
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	e03d      	b.n	80029a2 <display_frame_oled+0x8e>
    { // Assuming OLED is 128x64, video is 114x64
        bool pixel = (frame[i / 8] & (1 << (i % 8))) != 0;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b00      	cmp	r3, #0
 800292a:	da00      	bge.n	800292e <display_frame_oled+0x1a>
 800292c:	3307      	adds	r3, #7
 800292e:	10db      	asrs	r3, r3, #3
 8002930:	461a      	mov	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4413      	add	r3, r2
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	fa42 f303 	asr.w	r3, r2, r3
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf14      	ite	ne
 800294c:	2301      	movne	r3, #1
 800294e:	2300      	moveq	r3, #0
 8002950:	74fb      	strb	r3, [r7, #19]
        // Adjust x-coordinate to center the 114-width video on a 128-width screen
        int x = (i % 114) + (OLED_WIDTH - 114) / 2;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	4a18      	ldr	r2, [pc, #96]	@ (80029b8 <display_frame_oled+0xa4>)
 8002956:	fb82 1203 	smull	r1, r2, r2, r3
 800295a:	441a      	add	r2, r3
 800295c:	1191      	asrs	r1, r2, #6
 800295e:	17da      	asrs	r2, r3, #31
 8002960:	1a8a      	subs	r2, r1, r2
 8002962:	2172      	movs	r1, #114	@ 0x72
 8002964:	fb01 f202 	mul.w	r2, r1, r2
 8002968:	1a9a      	subs	r2, r3, r2
 800296a:	1dd3      	adds	r3, r2, #7
 800296c:	60fb      	str	r3, [r7, #12]
        int y = i / 114;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	4a11      	ldr	r2, [pc, #68]	@ (80029b8 <display_frame_oled+0xa4>)
 8002972:	fb82 1203 	smull	r1, r2, r2, r3
 8002976:	441a      	add	r2, r3
 8002978:	1192      	asrs	r2, r2, #6
 800297a:	17db      	asrs	r3, r3, #31
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	60bb      	str	r3, [r7, #8]
        if (x < OLED_WIDTH && y < OLED_HEIGHT)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b7f      	cmp	r3, #127	@ 0x7f
 8002984:	dc0a      	bgt.n	800299c <display_frame_oled+0x88>
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2b3f      	cmp	r3, #63	@ 0x3f
 800298a:	dc07      	bgt.n	800299c <display_frame_oled+0x88>
        {                                         // Boundary check
            OLED_WritePixel(x, y, pixel ? 1 : 0); // Draw pixel (1 for white, 0 for black)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	b21b      	sxth	r3, r3
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	b211      	sxth	r1, r2
 8002994:	7cfa      	ldrb	r2, [r7, #19]
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe fa24 	bl	8000de4 <OLED_WritePixel>
    for (int i = 0; i < 114 * 64; i++)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	3301      	adds	r3, #1
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f5b3 5fe4 	cmp.w	r3, #7296	@ 0x1c80
 80029a8:	dbbd      	blt.n	8002926 <display_frame_oled+0x12>
        }
    }
    OLED_SmartUpdate(); // Update the OLED display
 80029aa:	f7fe fc47 	bl	800123c <OLED_SmartUpdate>
}
 80029ae:	bf00      	nop
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	8fb823ef 	.word	0x8fb823ef

080029bc <play_video>:

void play_video()
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	f5ad 7d6c 	sub.w	sp, sp, #944	@ 0x3b0
 80029c2:	af00      	add	r7, sp, #0
    unsigned char frame_buffer[920]; // Buffer for one decompressed frame (114*64/8 = 912, rounded up)
    
    const unsigned char *frame_start = bad_apple;
 80029c4:	4b30      	ldr	r3, [pc, #192]	@ (8002a88 <play_video+0xcc>)
 80029c6:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
    int frame_count = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
    unsigned int current_offset = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8

    while (current_offset < sizeof(bad_apple))
 80029d6:	e043      	b.n	8002a60 <play_video+0xa4>
    {
        frame_count++;
 80029d8:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 80029dc:	3301      	adds	r3, #1
 80029de:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
        unsigned short length = *(unsigned short *)(frame_start + current_offset);
 80029e2:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 80029e6:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 80029ea:	4413      	add	r3, r2
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	f8a7 33a2 	strh.w	r3, [r7, #930]	@ 0x3a2
        if (length == 0)
 80029f2:	f8b7 33a2 	ldrh.w	r3, [r7, #930]	@ 0x3a2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d039      	beq.n	8002a6e <play_video+0xb2>
        { // End of video data marker or error
            break;
        }

        // Ensure we don't read past the end of video for the length itself
        if (current_offset + 2 > sizeof(bad_apple))
 80029fa:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 80029fe:	3302      	adds	r3, #2
 8002a00:	f646 026a 	movw	r2, #26730	@ 0x686a
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d834      	bhi.n	8002a72 <play_video+0xb6>
        {
            break;
        }

        // Ensure the compressed data length doesn't exceed remaining data
        if (current_offset + 2 + length > sizeof(bad_apple))
 8002a08:	f8b7 23a2 	ldrh.w	r2, [r7, #930]	@ 0x3a2
 8002a0c:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8002a10:	4413      	add	r3, r2
 8002a12:	3302      	adds	r3, #2
 8002a14:	f646 026a 	movw	r2, #26730	@ 0x686a
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d82c      	bhi.n	8002a76 <play_video+0xba>
        {
            break;
        }

        int decompressed_size = lz77_decompress(frame_start + current_offset + 2, length, frame_buffer, sizeof(frame_buffer));
 8002a1c:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8002a20:	3302      	adds	r3, #2
 8002a22:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 8002a26:	18d0      	adds	r0, r2, r3
 8002a28:	f8b7 13a2 	ldrh.w	r1, [r7, #930]	@ 0x3a2
 8002a2c:	1d3a      	adds	r2, r7, #4
 8002a2e:	f44f 7366 	mov.w	r3, #920	@ 0x398
 8002a32:	f7ff fed1 	bl	80027d8 <lz77_decompress>
 8002a36:	f8c7 039c 	str.w	r0, [r7, #924]	@ 0x39c

        if (decompressed_size > 0)
 8002a3a:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	dd1b      	ble.n	8002a7a <play_video+0xbe>
        {
            display_frame_oled(frame_buffer);
 8002a42:	1d3b      	adds	r3, r7, #4
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ff65 	bl	8002914 <display_frame_oled>
        {
            // Handle decompression error, maybe log or break
            break;
        }

        current_offset += length + 2;
 8002a4a:	f8b7 23a2 	ldrh.w	r2, [r7, #930]	@ 0x3a2
 8002a4e:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8002a52:	4413      	add	r3, r2
 8002a54:	3302      	adds	r3, #2
 8002a56:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8

        // Optional: Add a delay here if needed to control playback speed
        HAL_Delay(5); // Example: 100ms delay
 8002a5a:	2005      	movs	r0, #5
 8002a5c:	f000 f89e 	bl	8002b9c <HAL_Delay>
    while (current_offset < sizeof(bad_apple))
 8002a60:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8002a64:	f646 0269 	movw	r2, #26729	@ 0x6869
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d9b5      	bls.n	80029d8 <play_video+0x1c>
    }
    // Optionally, display total frames or a message when done
}
 8002a6c:	e006      	b.n	8002a7c <play_video+0xc0>
            break;
 8002a6e:	bf00      	nop
 8002a70:	e004      	b.n	8002a7c <play_video+0xc0>
            break;
 8002a72:	bf00      	nop
 8002a74:	e002      	b.n	8002a7c <play_video+0xc0>
            break;
 8002a76:	bf00      	nop
 8002a78:	e000      	b.n	8002a7c <play_video+0xc0>
            break;
 8002a7a:	bf00      	nop
}
 8002a7c:	bf00      	nop
 8002a7e:	f507 776c 	add.w	r7, r7, #944	@ 0x3b0
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	08007590 	.word	0x08007590

08002a8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a8c:	f7ff fd04 	bl	8002498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a90:	480b      	ldr	r0, [pc, #44]	@ (8002ac0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a92:	490c      	ldr	r1, [pc, #48]	@ (8002ac4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a94:	4a0c      	ldr	r2, [pc, #48]	@ (8002ac8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a98:	e002      	b.n	8002aa0 <LoopCopyDataInit>

08002a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a9e:	3304      	adds	r3, #4

08002aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aa4:	d3f9      	bcc.n	8002a9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aa6:	4a09      	ldr	r2, [pc, #36]	@ (8002acc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002aa8:	4c09      	ldr	r4, [pc, #36]	@ (8002ad0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aac:	e001      	b.n	8002ab2 <LoopFillZerobss>

08002aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ab0:	3204      	adds	r2, #4

08002ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ab4:	d3fb      	bcc.n	8002aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ab6:	f002 fd4f 	bl	8005558 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002aba:	f7fd ff73 	bl	80009a4 <main>
  bx lr
 8002abe:	4770      	bx	lr
  ldr r0, =_sdata
 8002ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ac4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002ac8:	0800e23c 	.word	0x0800e23c
  ldr r2, =_sbss
 8002acc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002ad0:	20003f24 	.word	0x20003f24

08002ad4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ad4:	e7fe      	b.n	8002ad4 <ADC1_2_IRQHandler>
	...

08002ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002adc:	4b08      	ldr	r3, [pc, #32]	@ (8002b00 <HAL_Init+0x28>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a07      	ldr	r2, [pc, #28]	@ (8002b00 <HAL_Init+0x28>)
 8002ae2:	f043 0310 	orr.w	r3, r3, #16
 8002ae6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ae8:	2003      	movs	r0, #3
 8002aea:	f000 f947 	bl	8002d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aee:	200f      	movs	r0, #15
 8002af0:	f000 f808 	bl	8002b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002af4:	f7ff fc32 	bl	800235c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40022000 	.word	0x40022000

08002b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b0c:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <HAL_InitTick+0x54>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <HAL_InitTick+0x58>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	4619      	mov	r1, r3
 8002b16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f95f 	bl	8002de6 <HAL_SYSTICK_Config>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e00e      	b.n	8002b50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b0f      	cmp	r3, #15
 8002b36:	d80a      	bhi.n	8002b4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b40:	f000 f927 	bl	8002d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b44:	4a06      	ldr	r2, [pc, #24]	@ (8002b60 <HAL_InitTick+0x5c>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e000      	b.n	8002b50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20000014 	.word	0x20000014
 8002b5c:	2000001c 	.word	0x2000001c
 8002b60:	20000018 	.word	0x20000018

08002b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b68:	4b05      	ldr	r3, [pc, #20]	@ (8002b80 <HAL_IncTick+0x1c>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4b05      	ldr	r3, [pc, #20]	@ (8002b84 <HAL_IncTick+0x20>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4413      	add	r3, r2
 8002b74:	4a03      	ldr	r2, [pc, #12]	@ (8002b84 <HAL_IncTick+0x20>)
 8002b76:	6013      	str	r3, [r2, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr
 8002b80:	2000001c 	.word	0x2000001c
 8002b84:	20003dd8 	.word	0x20003dd8

08002b88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b8c:	4b02      	ldr	r3, [pc, #8]	@ (8002b98 <HAL_GetTick+0x10>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	20003dd8 	.word	0x20003dd8

08002b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ba4:	f7ff fff0 	bl	8002b88 <HAL_GetTick>
 8002ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d005      	beq.n	8002bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002be0 <HAL_Delay+0x44>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bc2:	bf00      	nop
 8002bc4:	f7ff ffe0 	bl	8002b88 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d8f7      	bhi.n	8002bc4 <HAL_Delay+0x28>
  {
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	2000001c 	.word	0x2000001c

08002be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c28 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c00:	4013      	ands	r3, r2
 8002c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c16:	4a04      	ldr	r2, [pc, #16]	@ (8002c28 <__NVIC_SetPriorityGrouping+0x44>)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	60d3      	str	r3, [r2, #12]
}
 8002c1c:	bf00      	nop
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c30:	4b04      	ldr	r3, [pc, #16]	@ (8002c44 <__NVIC_GetPriorityGrouping+0x18>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	0a1b      	lsrs	r3, r3, #8
 8002c36:	f003 0307 	and.w	r3, r3, #7
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	db0b      	blt.n	8002c72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	f003 021f 	and.w	r2, r3, #31
 8002c60:	4906      	ldr	r1, [pc, #24]	@ (8002c7c <__NVIC_EnableIRQ+0x34>)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	2001      	movs	r0, #1
 8002c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	e000e100 	.word	0xe000e100

08002c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	6039      	str	r1, [r7, #0]
 8002c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	db0a      	blt.n	8002caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	490c      	ldr	r1, [pc, #48]	@ (8002ccc <__NVIC_SetPriority+0x4c>)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	0112      	lsls	r2, r2, #4
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ca8:	e00a      	b.n	8002cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	4908      	ldr	r1, [pc, #32]	@ (8002cd0 <__NVIC_SetPriority+0x50>)
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	3b04      	subs	r3, #4
 8002cb8:	0112      	lsls	r2, r2, #4
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	761a      	strb	r2, [r3, #24]
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	e000e100 	.word	0xe000e100
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b089      	sub	sp, #36	@ 0x24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f1c3 0307 	rsb	r3, r3, #7
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	bf28      	it	cs
 8002cf2:	2304      	movcs	r3, #4
 8002cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	2b06      	cmp	r3, #6
 8002cfc:	d902      	bls.n	8002d04 <NVIC_EncodePriority+0x30>
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3b03      	subs	r3, #3
 8002d02:	e000      	b.n	8002d06 <NVIC_EncodePriority+0x32>
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d08:	f04f 32ff 	mov.w	r2, #4294967295
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43da      	mvns	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	401a      	ands	r2, r3
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	fa01 f303 	lsl.w	r3, r1, r3
 8002d26:	43d9      	mvns	r1, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d2c:	4313      	orrs	r3, r2
         );
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3724      	adds	r7, #36	@ 0x24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d48:	d301      	bcc.n	8002d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e00f      	b.n	8002d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d78 <SysTick_Config+0x40>)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d56:	210f      	movs	r1, #15
 8002d58:	f04f 30ff 	mov.w	r0, #4294967295
 8002d5c:	f7ff ff90 	bl	8002c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d60:	4b05      	ldr	r3, [pc, #20]	@ (8002d78 <SysTick_Config+0x40>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d66:	4b04      	ldr	r3, [pc, #16]	@ (8002d78 <SysTick_Config+0x40>)
 8002d68:	2207      	movs	r2, #7
 8002d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	e000e010 	.word	0xe000e010

08002d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff ff2d 	bl	8002be4 <__NVIC_SetPriorityGrouping>
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b086      	sub	sp, #24
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	4603      	mov	r3, r0
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
 8002d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002da4:	f7ff ff42 	bl	8002c2c <__NVIC_GetPriorityGrouping>
 8002da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	6978      	ldr	r0, [r7, #20]
 8002db0:	f7ff ff90 	bl	8002cd4 <NVIC_EncodePriority>
 8002db4:	4602      	mov	r2, r0
 8002db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff ff5f 	bl	8002c80 <__NVIC_SetPriority>
}
 8002dc2:	bf00      	nop
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ff35 	bl	8002c48 <__NVIC_EnableIRQ>
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff ffa2 	bl	8002d38 <SysTick_Config>
 8002df4:	4603      	mov	r3, r0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e043      	b.n	8002e9e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4b22      	ldr	r3, [pc, #136]	@ (8002ea8 <HAL_DMA_Init+0xa8>)
 8002e1e:	4413      	add	r3, r2
 8002e20:	4a22      	ldr	r2, [pc, #136]	@ (8002eac <HAL_DMA_Init+0xac>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	091b      	lsrs	r3, r3, #4
 8002e28:	009a      	lsls	r2, r3, #2
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a1f      	ldr	r2, [pc, #124]	@ (8002eb0 <HAL_DMA_Init+0xb0>)
 8002e32:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e4a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002e4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	bffdfff8 	.word	0xbffdfff8
 8002eac:	cccccccd 	.word	0xcccccccd
 8002eb0:	40020000 	.word	0x40020000

08002eb4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	409a      	lsls	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d04f      	beq.n	8002f7c <HAL_DMA_IRQHandler+0xc8>
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d04a      	beq.n	8002f7c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d107      	bne.n	8002f04 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0204 	bic.w	r2, r2, #4
 8002f02:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a66      	ldr	r2, [pc, #408]	@ (80030a4 <HAL_DMA_IRQHandler+0x1f0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d029      	beq.n	8002f62 <HAL_DMA_IRQHandler+0xae>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a65      	ldr	r2, [pc, #404]	@ (80030a8 <HAL_DMA_IRQHandler+0x1f4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d022      	beq.n	8002f5e <HAL_DMA_IRQHandler+0xaa>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a63      	ldr	r2, [pc, #396]	@ (80030ac <HAL_DMA_IRQHandler+0x1f8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d01a      	beq.n	8002f58 <HAL_DMA_IRQHandler+0xa4>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a62      	ldr	r2, [pc, #392]	@ (80030b0 <HAL_DMA_IRQHandler+0x1fc>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d012      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x9e>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a60      	ldr	r2, [pc, #384]	@ (80030b4 <HAL_DMA_IRQHandler+0x200>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00a      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x98>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a5f      	ldr	r2, [pc, #380]	@ (80030b8 <HAL_DMA_IRQHandler+0x204>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d102      	bne.n	8002f46 <HAL_DMA_IRQHandler+0x92>
 8002f40:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002f44:	e00e      	b.n	8002f64 <HAL_DMA_IRQHandler+0xb0>
 8002f46:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002f4a:	e00b      	b.n	8002f64 <HAL_DMA_IRQHandler+0xb0>
 8002f4c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002f50:	e008      	b.n	8002f64 <HAL_DMA_IRQHandler+0xb0>
 8002f52:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002f56:	e005      	b.n	8002f64 <HAL_DMA_IRQHandler+0xb0>
 8002f58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f5c:	e002      	b.n	8002f64 <HAL_DMA_IRQHandler+0xb0>
 8002f5e:	2340      	movs	r3, #64	@ 0x40
 8002f60:	e000      	b.n	8002f64 <HAL_DMA_IRQHandler+0xb0>
 8002f62:	2304      	movs	r3, #4
 8002f64:	4a55      	ldr	r2, [pc, #340]	@ (80030bc <HAL_DMA_IRQHandler+0x208>)
 8002f66:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 8094 	beq.w	800309a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002f7a:	e08e      	b.n	800309a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f80:	2202      	movs	r2, #2
 8002f82:	409a      	lsls	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d056      	beq.n	800303a <HAL_DMA_IRQHandler+0x186>
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d051      	beq.n	800303a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10b      	bne.n	8002fbc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 020a 	bic.w	r2, r2, #10
 8002fb2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a38      	ldr	r2, [pc, #224]	@ (80030a4 <HAL_DMA_IRQHandler+0x1f0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d029      	beq.n	800301a <HAL_DMA_IRQHandler+0x166>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a37      	ldr	r2, [pc, #220]	@ (80030a8 <HAL_DMA_IRQHandler+0x1f4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d022      	beq.n	8003016 <HAL_DMA_IRQHandler+0x162>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a35      	ldr	r2, [pc, #212]	@ (80030ac <HAL_DMA_IRQHandler+0x1f8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d01a      	beq.n	8003010 <HAL_DMA_IRQHandler+0x15c>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a34      	ldr	r2, [pc, #208]	@ (80030b0 <HAL_DMA_IRQHandler+0x1fc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d012      	beq.n	800300a <HAL_DMA_IRQHandler+0x156>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a32      	ldr	r2, [pc, #200]	@ (80030b4 <HAL_DMA_IRQHandler+0x200>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00a      	beq.n	8003004 <HAL_DMA_IRQHandler+0x150>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a31      	ldr	r2, [pc, #196]	@ (80030b8 <HAL_DMA_IRQHandler+0x204>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d102      	bne.n	8002ffe <HAL_DMA_IRQHandler+0x14a>
 8002ff8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002ffc:	e00e      	b.n	800301c <HAL_DMA_IRQHandler+0x168>
 8002ffe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003002:	e00b      	b.n	800301c <HAL_DMA_IRQHandler+0x168>
 8003004:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003008:	e008      	b.n	800301c <HAL_DMA_IRQHandler+0x168>
 800300a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800300e:	e005      	b.n	800301c <HAL_DMA_IRQHandler+0x168>
 8003010:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003014:	e002      	b.n	800301c <HAL_DMA_IRQHandler+0x168>
 8003016:	2320      	movs	r3, #32
 8003018:	e000      	b.n	800301c <HAL_DMA_IRQHandler+0x168>
 800301a:	2302      	movs	r3, #2
 800301c:	4a27      	ldr	r2, [pc, #156]	@ (80030bc <HAL_DMA_IRQHandler+0x208>)
 800301e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302c:	2b00      	cmp	r3, #0
 800302e:	d034      	beq.n	800309a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003038:	e02f      	b.n	800309a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	2208      	movs	r2, #8
 8003040:	409a      	lsls	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d028      	beq.n	800309c <HAL_DMA_IRQHandler+0x1e8>
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d023      	beq.n	800309c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 020e 	bic.w	r2, r2, #14
 8003062:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306c:	2101      	movs	r1, #1
 800306e:	fa01 f202 	lsl.w	r2, r1, r2
 8003072:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308e:	2b00      	cmp	r3, #0
 8003090:	d004      	beq.n	800309c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	4798      	blx	r3
    }
  }
  return;
 800309a:	bf00      	nop
 800309c:	bf00      	nop
}
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40020008 	.word	0x40020008
 80030a8:	4002001c 	.word	0x4002001c
 80030ac:	40020030 	.word	0x40020030
 80030b0:	40020044 	.word	0x40020044
 80030b4:	40020058 	.word	0x40020058
 80030b8:	4002006c 	.word	0x4002006c
 80030bc:	40020000 	.word	0x40020000

080030c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b08b      	sub	sp, #44	@ 0x2c
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030ca:	2300      	movs	r3, #0
 80030cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030ce:	2300      	movs	r3, #0
 80030d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030d2:	e169      	b.n	80033a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030d4:	2201      	movs	r2, #1
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	f040 8158 	bne.w	80033a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	4a9a      	ldr	r2, [pc, #616]	@ (8003360 <HAL_GPIO_Init+0x2a0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d05e      	beq.n	80031ba <HAL_GPIO_Init+0xfa>
 80030fc:	4a98      	ldr	r2, [pc, #608]	@ (8003360 <HAL_GPIO_Init+0x2a0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d875      	bhi.n	80031ee <HAL_GPIO_Init+0x12e>
 8003102:	4a98      	ldr	r2, [pc, #608]	@ (8003364 <HAL_GPIO_Init+0x2a4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d058      	beq.n	80031ba <HAL_GPIO_Init+0xfa>
 8003108:	4a96      	ldr	r2, [pc, #600]	@ (8003364 <HAL_GPIO_Init+0x2a4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d86f      	bhi.n	80031ee <HAL_GPIO_Init+0x12e>
 800310e:	4a96      	ldr	r2, [pc, #600]	@ (8003368 <HAL_GPIO_Init+0x2a8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d052      	beq.n	80031ba <HAL_GPIO_Init+0xfa>
 8003114:	4a94      	ldr	r2, [pc, #592]	@ (8003368 <HAL_GPIO_Init+0x2a8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d869      	bhi.n	80031ee <HAL_GPIO_Init+0x12e>
 800311a:	4a94      	ldr	r2, [pc, #592]	@ (800336c <HAL_GPIO_Init+0x2ac>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d04c      	beq.n	80031ba <HAL_GPIO_Init+0xfa>
 8003120:	4a92      	ldr	r2, [pc, #584]	@ (800336c <HAL_GPIO_Init+0x2ac>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d863      	bhi.n	80031ee <HAL_GPIO_Init+0x12e>
 8003126:	4a92      	ldr	r2, [pc, #584]	@ (8003370 <HAL_GPIO_Init+0x2b0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d046      	beq.n	80031ba <HAL_GPIO_Init+0xfa>
 800312c:	4a90      	ldr	r2, [pc, #576]	@ (8003370 <HAL_GPIO_Init+0x2b0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d85d      	bhi.n	80031ee <HAL_GPIO_Init+0x12e>
 8003132:	2b12      	cmp	r3, #18
 8003134:	d82a      	bhi.n	800318c <HAL_GPIO_Init+0xcc>
 8003136:	2b12      	cmp	r3, #18
 8003138:	d859      	bhi.n	80031ee <HAL_GPIO_Init+0x12e>
 800313a:	a201      	add	r2, pc, #4	@ (adr r2, 8003140 <HAL_GPIO_Init+0x80>)
 800313c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003140:	080031bb 	.word	0x080031bb
 8003144:	08003195 	.word	0x08003195
 8003148:	080031a7 	.word	0x080031a7
 800314c:	080031e9 	.word	0x080031e9
 8003150:	080031ef 	.word	0x080031ef
 8003154:	080031ef 	.word	0x080031ef
 8003158:	080031ef 	.word	0x080031ef
 800315c:	080031ef 	.word	0x080031ef
 8003160:	080031ef 	.word	0x080031ef
 8003164:	080031ef 	.word	0x080031ef
 8003168:	080031ef 	.word	0x080031ef
 800316c:	080031ef 	.word	0x080031ef
 8003170:	080031ef 	.word	0x080031ef
 8003174:	080031ef 	.word	0x080031ef
 8003178:	080031ef 	.word	0x080031ef
 800317c:	080031ef 	.word	0x080031ef
 8003180:	080031ef 	.word	0x080031ef
 8003184:	0800319d 	.word	0x0800319d
 8003188:	080031b1 	.word	0x080031b1
 800318c:	4a79      	ldr	r2, [pc, #484]	@ (8003374 <HAL_GPIO_Init+0x2b4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d013      	beq.n	80031ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003192:	e02c      	b.n	80031ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	623b      	str	r3, [r7, #32]
          break;
 800319a:	e029      	b.n	80031f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	3304      	adds	r3, #4
 80031a2:	623b      	str	r3, [r7, #32]
          break;
 80031a4:	e024      	b.n	80031f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	3308      	adds	r3, #8
 80031ac:	623b      	str	r3, [r7, #32]
          break;
 80031ae:	e01f      	b.n	80031f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	330c      	adds	r3, #12
 80031b6:	623b      	str	r3, [r7, #32]
          break;
 80031b8:	e01a      	b.n	80031f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d102      	bne.n	80031c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031c2:	2304      	movs	r3, #4
 80031c4:	623b      	str	r3, [r7, #32]
          break;
 80031c6:	e013      	b.n	80031f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d105      	bne.n	80031dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031d0:	2308      	movs	r3, #8
 80031d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	611a      	str	r2, [r3, #16]
          break;
 80031da:	e009      	b.n	80031f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031dc:	2308      	movs	r3, #8
 80031de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	615a      	str	r2, [r3, #20]
          break;
 80031e6:	e003      	b.n	80031f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031e8:	2300      	movs	r3, #0
 80031ea:	623b      	str	r3, [r7, #32]
          break;
 80031ec:	e000      	b.n	80031f0 <HAL_GPIO_Init+0x130>
          break;
 80031ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2bff      	cmp	r3, #255	@ 0xff
 80031f4:	d801      	bhi.n	80031fa <HAL_GPIO_Init+0x13a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	e001      	b.n	80031fe <HAL_GPIO_Init+0x13e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3304      	adds	r3, #4
 80031fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	2bff      	cmp	r3, #255	@ 0xff
 8003204:	d802      	bhi.n	800320c <HAL_GPIO_Init+0x14c>
 8003206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	e002      	b.n	8003212 <HAL_GPIO_Init+0x152>
 800320c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320e:	3b08      	subs	r3, #8
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	210f      	movs	r1, #15
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	fa01 f303 	lsl.w	r3, r1, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	401a      	ands	r2, r3
 8003224:	6a39      	ldr	r1, [r7, #32]
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	fa01 f303 	lsl.w	r3, r1, r3
 800322c:	431a      	orrs	r2, r3
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80b1 	beq.w	80033a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003240:	4b4d      	ldr	r3, [pc, #308]	@ (8003378 <HAL_GPIO_Init+0x2b8>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	4a4c      	ldr	r2, [pc, #304]	@ (8003378 <HAL_GPIO_Init+0x2b8>)
 8003246:	f043 0301 	orr.w	r3, r3, #1
 800324a:	6193      	str	r3, [r2, #24]
 800324c:	4b4a      	ldr	r3, [pc, #296]	@ (8003378 <HAL_GPIO_Init+0x2b8>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003258:	4a48      	ldr	r2, [pc, #288]	@ (800337c <HAL_GPIO_Init+0x2bc>)
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	089b      	lsrs	r3, r3, #2
 800325e:	3302      	adds	r3, #2
 8003260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003264:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	220f      	movs	r2, #15
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4013      	ands	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a40      	ldr	r2, [pc, #256]	@ (8003380 <HAL_GPIO_Init+0x2c0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d013      	beq.n	80032ac <HAL_GPIO_Init+0x1ec>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a3f      	ldr	r2, [pc, #252]	@ (8003384 <HAL_GPIO_Init+0x2c4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00d      	beq.n	80032a8 <HAL_GPIO_Init+0x1e8>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a3e      	ldr	r2, [pc, #248]	@ (8003388 <HAL_GPIO_Init+0x2c8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d007      	beq.n	80032a4 <HAL_GPIO_Init+0x1e4>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a3d      	ldr	r2, [pc, #244]	@ (800338c <HAL_GPIO_Init+0x2cc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d101      	bne.n	80032a0 <HAL_GPIO_Init+0x1e0>
 800329c:	2303      	movs	r3, #3
 800329e:	e006      	b.n	80032ae <HAL_GPIO_Init+0x1ee>
 80032a0:	2304      	movs	r3, #4
 80032a2:	e004      	b.n	80032ae <HAL_GPIO_Init+0x1ee>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e002      	b.n	80032ae <HAL_GPIO_Init+0x1ee>
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <HAL_GPIO_Init+0x1ee>
 80032ac:	2300      	movs	r3, #0
 80032ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032b0:	f002 0203 	and.w	r2, r2, #3
 80032b4:	0092      	lsls	r2, r2, #2
 80032b6:	4093      	lsls	r3, r2
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032be:	492f      	ldr	r1, [pc, #188]	@ (800337c <HAL_GPIO_Init+0x2bc>)
 80032c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c2:	089b      	lsrs	r3, r3, #2
 80032c4:	3302      	adds	r3, #2
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d006      	beq.n	80032e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	492c      	ldr	r1, [pc, #176]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	608b      	str	r3, [r1, #8]
 80032e4:	e006      	b.n	80032f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	4928      	ldr	r1, [pc, #160]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d006      	beq.n	800330e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003300:	4b23      	ldr	r3, [pc, #140]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	4922      	ldr	r1, [pc, #136]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	4313      	orrs	r3, r2
 800330a:	60cb      	str	r3, [r1, #12]
 800330c:	e006      	b.n	800331c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800330e:	4b20      	ldr	r3, [pc, #128]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	43db      	mvns	r3, r3
 8003316:	491e      	ldr	r1, [pc, #120]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 8003318:	4013      	ands	r3, r2
 800331a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d006      	beq.n	8003336 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003328:	4b19      	ldr	r3, [pc, #100]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	4918      	ldr	r1, [pc, #96]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]
 8003334:	e006      	b.n	8003344 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003336:	4b16      	ldr	r3, [pc, #88]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	43db      	mvns	r3, r3
 800333e:	4914      	ldr	r1, [pc, #80]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 8003340:	4013      	ands	r3, r2
 8003342:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d021      	beq.n	8003394 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003350:	4b0f      	ldr	r3, [pc, #60]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	490e      	ldr	r1, [pc, #56]	@ (8003390 <HAL_GPIO_Init+0x2d0>)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	600b      	str	r3, [r1, #0]
 800335c:	e021      	b.n	80033a2 <HAL_GPIO_Init+0x2e2>
 800335e:	bf00      	nop
 8003360:	10320000 	.word	0x10320000
 8003364:	10310000 	.word	0x10310000
 8003368:	10220000 	.word	0x10220000
 800336c:	10210000 	.word	0x10210000
 8003370:	10120000 	.word	0x10120000
 8003374:	10110000 	.word	0x10110000
 8003378:	40021000 	.word	0x40021000
 800337c:	40010000 	.word	0x40010000
 8003380:	40010800 	.word	0x40010800
 8003384:	40010c00 	.word	0x40010c00
 8003388:	40011000 	.word	0x40011000
 800338c:	40011400 	.word	0x40011400
 8003390:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003394:	4b0b      	ldr	r3, [pc, #44]	@ (80033c4 <HAL_GPIO_Init+0x304>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	43db      	mvns	r3, r3
 800339c:	4909      	ldr	r1, [pc, #36]	@ (80033c4 <HAL_GPIO_Init+0x304>)
 800339e:	4013      	ands	r3, r2
 80033a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	3301      	adds	r3, #1
 80033a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	fa22 f303 	lsr.w	r3, r2, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f47f ae8e 	bne.w	80030d4 <HAL_GPIO_Init+0x14>
  }
}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	372c      	adds	r7, #44	@ 0x2c
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr
 80033c4:	40010400 	.word	0x40010400

080033c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	807b      	strh	r3, [r7, #2]
 80033d4:	4613      	mov	r3, r2
 80033d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033d8:	787b      	ldrb	r3, [r7, #1]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033de:	887a      	ldrh	r2, [r7, #2]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033e4:	e003      	b.n	80033ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033e6:	887b      	ldrh	r3, [r7, #2]
 80033e8:	041a      	lsls	r2, r3, #16
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	611a      	str	r2, [r3, #16]
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr

080033f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e12b      	b.n	8003662 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fd fa56 	bl	80008d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2224      	movs	r2, #36	@ 0x24
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800344a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800345a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800345c:	f001 f832 	bl	80044c4 <HAL_RCC_GetPCLK1Freq>
 8003460:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	4a81      	ldr	r2, [pc, #516]	@ (800366c <HAL_I2C_Init+0x274>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d807      	bhi.n	800347c <HAL_I2C_Init+0x84>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4a80      	ldr	r2, [pc, #512]	@ (8003670 <HAL_I2C_Init+0x278>)
 8003470:	4293      	cmp	r3, r2
 8003472:	bf94      	ite	ls
 8003474:	2301      	movls	r3, #1
 8003476:	2300      	movhi	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	e006      	b.n	800348a <HAL_I2C_Init+0x92>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4a7d      	ldr	r2, [pc, #500]	@ (8003674 <HAL_I2C_Init+0x27c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	bf94      	ite	ls
 8003484:	2301      	movls	r3, #1
 8003486:	2300      	movhi	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e0e7      	b.n	8003662 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4a78      	ldr	r2, [pc, #480]	@ (8003678 <HAL_I2C_Init+0x280>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	0c9b      	lsrs	r3, r3, #18
 800349c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4a6a      	ldr	r2, [pc, #424]	@ (800366c <HAL_I2C_Init+0x274>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d802      	bhi.n	80034cc <HAL_I2C_Init+0xd4>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	3301      	adds	r3, #1
 80034ca:	e009      	b.n	80034e0 <HAL_I2C_Init+0xe8>
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80034d2:	fb02 f303 	mul.w	r3, r2, r3
 80034d6:	4a69      	ldr	r2, [pc, #420]	@ (800367c <HAL_I2C_Init+0x284>)
 80034d8:	fba2 2303 	umull	r2, r3, r2, r3
 80034dc:	099b      	lsrs	r3, r3, #6
 80034de:	3301      	adds	r3, #1
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	430b      	orrs	r3, r1
 80034e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80034f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	495c      	ldr	r1, [pc, #368]	@ (800366c <HAL_I2C_Init+0x274>)
 80034fc:	428b      	cmp	r3, r1
 80034fe:	d819      	bhi.n	8003534 <HAL_I2C_Init+0x13c>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	1e59      	subs	r1, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	fbb1 f3f3 	udiv	r3, r1, r3
 800350e:	1c59      	adds	r1, r3, #1
 8003510:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003514:	400b      	ands	r3, r1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <HAL_I2C_Init+0x138>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1e59      	subs	r1, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	fbb1 f3f3 	udiv	r3, r1, r3
 8003528:	3301      	adds	r3, #1
 800352a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800352e:	e051      	b.n	80035d4 <HAL_I2C_Init+0x1dc>
 8003530:	2304      	movs	r3, #4
 8003532:	e04f      	b.n	80035d4 <HAL_I2C_Init+0x1dc>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d111      	bne.n	8003560 <HAL_I2C_Init+0x168>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	1e58      	subs	r0, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6859      	ldr	r1, [r3, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	440b      	add	r3, r1
 800354a:	fbb0 f3f3 	udiv	r3, r0, r3
 800354e:	3301      	adds	r3, #1
 8003550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003554:	2b00      	cmp	r3, #0
 8003556:	bf0c      	ite	eq
 8003558:	2301      	moveq	r3, #1
 800355a:	2300      	movne	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	e012      	b.n	8003586 <HAL_I2C_Init+0x18e>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	1e58      	subs	r0, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6859      	ldr	r1, [r3, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	0099      	lsls	r1, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	fbb0 f3f3 	udiv	r3, r0, r3
 8003576:	3301      	adds	r3, #1
 8003578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf0c      	ite	eq
 8003580:	2301      	moveq	r3, #1
 8003582:	2300      	movne	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <HAL_I2C_Init+0x196>
 800358a:	2301      	movs	r3, #1
 800358c:	e022      	b.n	80035d4 <HAL_I2C_Init+0x1dc>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10e      	bne.n	80035b4 <HAL_I2C_Init+0x1bc>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1e58      	subs	r0, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6859      	ldr	r1, [r3, #4]
 800359e:	460b      	mov	r3, r1
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	440b      	add	r3, r1
 80035a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80035a8:	3301      	adds	r3, #1
 80035aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035b2:	e00f      	b.n	80035d4 <HAL_I2C_Init+0x1dc>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	1e58      	subs	r0, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6859      	ldr	r1, [r3, #4]
 80035bc:	460b      	mov	r3, r1
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	0099      	lsls	r1, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ca:	3301      	adds	r3, #1
 80035cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	6809      	ldr	r1, [r1, #0]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69da      	ldr	r2, [r3, #28]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003602:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6911      	ldr	r1, [r2, #16]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68d2      	ldr	r2, [r2, #12]
 800360e:	4311      	orrs	r1, r2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	430b      	orrs	r3, r1
 8003616:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695a      	ldr	r2, [r3, #20]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	000186a0 	.word	0x000186a0
 8003670:	001e847f 	.word	0x001e847f
 8003674:	003d08ff 	.word	0x003d08ff
 8003678:	431bde83 	.word	0x431bde83
 800367c:	10624dd3 	.word	0x10624dd3

08003680 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af02      	add	r7, sp, #8
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	607a      	str	r2, [r7, #4]
 800368a:	461a      	mov	r2, r3
 800368c:	460b      	mov	r3, r1
 800368e:	817b      	strh	r3, [r7, #10]
 8003690:	4613      	mov	r3, r2
 8003692:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003694:	f7ff fa78 	bl	8002b88 <HAL_GetTick>
 8003698:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	f040 80e0 	bne.w	8003868 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	2319      	movs	r3, #25
 80036ae:	2201      	movs	r2, #1
 80036b0:	4970      	ldr	r1, [pc, #448]	@ (8003874 <HAL_I2C_Master_Transmit+0x1f4>)
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f964 	bl	8003980 <I2C_WaitOnFlagUntilTimeout>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80036be:	2302      	movs	r3, #2
 80036c0:	e0d3      	b.n	800386a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_I2C_Master_Transmit+0x50>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e0cc      	b.n	800386a <HAL_I2C_Master_Transmit+0x1ea>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d007      	beq.n	80036f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f042 0201 	orr.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003704:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2221      	movs	r2, #33	@ 0x21
 800370a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2210      	movs	r2, #16
 8003712:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	893a      	ldrh	r2, [r7, #8]
 8003726:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4a50      	ldr	r2, [pc, #320]	@ (8003878 <HAL_I2C_Master_Transmit+0x1f8>)
 8003736:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003738:	8979      	ldrh	r1, [r7, #10]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	6a3a      	ldr	r2, [r7, #32]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f89c 	bl	800387c <I2C_MasterRequestWrite>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e08d      	b.n	800386a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003764:	e066      	b.n	8003834 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	6a39      	ldr	r1, [r7, #32]
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 fa22 	bl	8003bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00d      	beq.n	8003792 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377a:	2b04      	cmp	r3, #4
 800377c:	d107      	bne.n	800378e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800378c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e06b      	b.n	800386a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003796:	781a      	ldrb	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d11b      	bne.n	8003808 <HAL_I2C_Master_Transmit+0x188>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d017      	beq.n	8003808 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	781a      	ldrb	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	6a39      	ldr	r1, [r7, #32]
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 fa19 	bl	8003c44 <I2C_WaitOnBTFFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00d      	beq.n	8003834 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381c:	2b04      	cmp	r3, #4
 800381e:	d107      	bne.n	8003830 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800382e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e01a      	b.n	800386a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003838:	2b00      	cmp	r3, #0
 800383a:	d194      	bne.n	8003766 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800384a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	e000      	b.n	800386a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003868:	2302      	movs	r3, #2
  }
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	00100002 	.word	0x00100002
 8003878:	ffff0000 	.word	0xffff0000

0800387c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af02      	add	r7, sp, #8
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	607a      	str	r2, [r7, #4]
 8003886:	603b      	str	r3, [r7, #0]
 8003888:	460b      	mov	r3, r1
 800388a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003890:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b08      	cmp	r3, #8
 8003896:	d006      	beq.n	80038a6 <I2C_MasterRequestWrite+0x2a>
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d003      	beq.n	80038a6 <I2C_MasterRequestWrite+0x2a>
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038a4:	d108      	bne.n	80038b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	e00b      	b.n	80038d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038bc:	2b12      	cmp	r3, #18
 80038be:	d107      	bne.n	80038d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f84f 	bl	8003980 <I2C_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00d      	beq.n	8003904 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038f6:	d103      	bne.n	8003900 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e035      	b.n	8003970 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800390c:	d108      	bne.n	8003920 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800390e:	897b      	ldrh	r3, [r7, #10]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	461a      	mov	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800391c:	611a      	str	r2, [r3, #16]
 800391e:	e01b      	b.n	8003958 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003920:	897b      	ldrh	r3, [r7, #10]
 8003922:	11db      	asrs	r3, r3, #7
 8003924:	b2db      	uxtb	r3, r3
 8003926:	f003 0306 	and.w	r3, r3, #6
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f063 030f 	orn	r3, r3, #15
 8003930:	b2da      	uxtb	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	490e      	ldr	r1, [pc, #56]	@ (8003978 <I2C_MasterRequestWrite+0xfc>)
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f898 	bl	8003a74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e010      	b.n	8003970 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800394e:	897b      	ldrh	r3, [r7, #10]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	4907      	ldr	r1, [pc, #28]	@ (800397c <I2C_MasterRequestWrite+0x100>)
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f888 	bl	8003a74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	00010008 	.word	0x00010008
 800397c:	00010002 	.word	0x00010002

08003980 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	4613      	mov	r3, r2
 800398e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003990:	e048      	b.n	8003a24 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003998:	d044      	beq.n	8003a24 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800399a:	f7ff f8f5 	bl	8002b88 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d302      	bcc.n	80039b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d139      	bne.n	8003a24 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	0c1b      	lsrs	r3, r3, #16
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d10d      	bne.n	80039d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	43da      	mvns	r2, r3
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	4013      	ands	r3, r2
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	bf0c      	ite	eq
 80039cc:	2301      	moveq	r3, #1
 80039ce:	2300      	movne	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	461a      	mov	r2, r3
 80039d4:	e00c      	b.n	80039f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	43da      	mvns	r2, r3
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	4013      	ands	r3, r2
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bf0c      	ite	eq
 80039e8:	2301      	moveq	r3, #1
 80039ea:	2300      	movne	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	461a      	mov	r2, r3
 80039f0:	79fb      	ldrb	r3, [r7, #7]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d116      	bne.n	8003a24 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a10:	f043 0220 	orr.w	r2, r3, #32
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e023      	b.n	8003a6c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	0c1b      	lsrs	r3, r3, #16
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d10d      	bne.n	8003a4a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	43da      	mvns	r2, r3
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	bf0c      	ite	eq
 8003a40:	2301      	moveq	r3, #1
 8003a42:	2300      	movne	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	e00c      	b.n	8003a64 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	43da      	mvns	r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	4013      	ands	r3, r2
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2301      	moveq	r3, #1
 8003a5e:	2300      	movne	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d093      	beq.n	8003992 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a82:	e071      	b.n	8003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a92:	d123      	bne.n	8003adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aa2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003aac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac8:	f043 0204 	orr.w	r2, r3, #4
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e067      	b.n	8003bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae2:	d041      	beq.n	8003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae4:	f7ff f850 	bl	8002b88 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d302      	bcc.n	8003afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d136      	bne.n	8003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	0c1b      	lsrs	r3, r3, #16
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d10c      	bne.n	8003b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	43da      	mvns	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bf14      	ite	ne
 8003b16:	2301      	movne	r3, #1
 8003b18:	2300      	moveq	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	e00b      	b.n	8003b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	43da      	mvns	r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	bf14      	ite	ne
 8003b30:	2301      	movne	r3, #1
 8003b32:	2300      	moveq	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d016      	beq.n	8003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b54:	f043 0220 	orr.w	r2, r3, #32
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e021      	b.n	8003bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	0c1b      	lsrs	r3, r3, #16
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d10c      	bne.n	8003b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	43da      	mvns	r2, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	bf14      	ite	ne
 8003b84:	2301      	movne	r3, #1
 8003b86:	2300      	moveq	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	e00b      	b.n	8003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	43da      	mvns	r2, r3
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4013      	ands	r3, r2
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	bf14      	ite	ne
 8003b9e:	2301      	movne	r3, #1
 8003ba0:	2300      	moveq	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f47f af6d 	bne.w	8003a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bc0:	e034      	b.n	8003c2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f886 	bl	8003cd4 <I2C_IsAcknowledgeFailed>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e034      	b.n	8003c3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d028      	beq.n	8003c2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bda:	f7fe ffd5 	bl	8002b88 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d302      	bcc.n	8003bf0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d11d      	bne.n	8003c2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bfa:	2b80      	cmp	r3, #128	@ 0x80
 8003bfc:	d016      	beq.n	8003c2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c18:	f043 0220 	orr.w	r2, r3, #32
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e007      	b.n	8003c3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c36:	2b80      	cmp	r3, #128	@ 0x80
 8003c38:	d1c3      	bne.n	8003bc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c50:	e034      	b.n	8003cbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 f83e 	bl	8003cd4 <I2C_IsAcknowledgeFailed>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e034      	b.n	8003ccc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c68:	d028      	beq.n	8003cbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6a:	f7fe ff8d 	bl	8002b88 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d302      	bcc.n	8003c80 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d11d      	bne.n	8003cbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d016      	beq.n	8003cbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca8:	f043 0220 	orr.w	r2, r3, #32
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e007      	b.n	8003ccc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d1c3      	bne.n	8003c52 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cea:	d11b      	bne.n	8003d24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cf4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d10:	f043 0204 	orr.w	r2, r3, #4
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr

08003d30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e272      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 8087 	beq.w	8003e5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d50:	4b92      	ldr	r3, [pc, #584]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 030c 	and.w	r3, r3, #12
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d00c      	beq.n	8003d76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d5c:	4b8f      	ldr	r3, [pc, #572]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f003 030c 	and.w	r3, r3, #12
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d112      	bne.n	8003d8e <HAL_RCC_OscConfig+0x5e>
 8003d68:	4b8c      	ldr	r3, [pc, #560]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d74:	d10b      	bne.n	8003d8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d76:	4b89      	ldr	r3, [pc, #548]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d06c      	beq.n	8003e5c <HAL_RCC_OscConfig+0x12c>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d168      	bne.n	8003e5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e24c      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d96:	d106      	bne.n	8003da6 <HAL_RCC_OscConfig+0x76>
 8003d98:	4b80      	ldr	r3, [pc, #512]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a7f      	ldr	r2, [pc, #508]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003d9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	e02e      	b.n	8003e04 <HAL_RCC_OscConfig+0xd4>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x98>
 8003dae:	4b7b      	ldr	r3, [pc, #492]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a7a      	ldr	r2, [pc, #488]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003db4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	4b78      	ldr	r3, [pc, #480]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a77      	ldr	r2, [pc, #476]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	e01d      	b.n	8003e04 <HAL_RCC_OscConfig+0xd4>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dd0:	d10c      	bne.n	8003dec <HAL_RCC_OscConfig+0xbc>
 8003dd2:	4b72      	ldr	r3, [pc, #456]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a71      	ldr	r2, [pc, #452]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003dd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	4b6f      	ldr	r3, [pc, #444]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a6e      	ldr	r2, [pc, #440]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	e00b      	b.n	8003e04 <HAL_RCC_OscConfig+0xd4>
 8003dec:	4b6b      	ldr	r3, [pc, #428]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a6a      	ldr	r2, [pc, #424]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003df2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	4b68      	ldr	r3, [pc, #416]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a67      	ldr	r2, [pc, #412]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003dfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d013      	beq.n	8003e34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7fe febc 	bl	8002b88 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e14:	f7fe feb8 	bl	8002b88 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b64      	cmp	r3, #100	@ 0x64
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e200      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e26:	4b5d      	ldr	r3, [pc, #372]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCC_OscConfig+0xe4>
 8003e32:	e014      	b.n	8003e5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e34:	f7fe fea8 	bl	8002b88 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e3c:	f7fe fea4 	bl	8002b88 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b64      	cmp	r3, #100	@ 0x64
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e1ec      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e4e:	4b53      	ldr	r3, [pc, #332]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x10c>
 8003e5a:	e000      	b.n	8003e5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d063      	beq.n	8003f32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e6a:	4b4c      	ldr	r3, [pc, #304]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00b      	beq.n	8003e8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e76:	4b49      	ldr	r3, [pc, #292]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f003 030c 	and.w	r3, r3, #12
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d11c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x18c>
 8003e82:	4b46      	ldr	r3, [pc, #280]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d116      	bne.n	8003ebc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e8e:	4b43      	ldr	r3, [pc, #268]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x176>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d001      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e1c0      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea6:	4b3d      	ldr	r3, [pc, #244]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4939      	ldr	r1, [pc, #228]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eba:	e03a      	b.n	8003f32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d020      	beq.n	8003f06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ec4:	4b36      	ldr	r3, [pc, #216]	@ (8003fa0 <HAL_RCC_OscConfig+0x270>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eca:	f7fe fe5d 	bl	8002b88 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed2:	f7fe fe59 	bl	8002b88 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e1a1      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4927      	ldr	r1, [pc, #156]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	600b      	str	r3, [r1, #0]
 8003f04:	e015      	b.n	8003f32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f06:	4b26      	ldr	r3, [pc, #152]	@ (8003fa0 <HAL_RCC_OscConfig+0x270>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0c:	f7fe fe3c 	bl	8002b88 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f14:	f7fe fe38 	bl	8002b88 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e180      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f26:	4b1d      	ldr	r3, [pc, #116]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d03a      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d019      	beq.n	8003f7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f46:	4b17      	ldr	r3, [pc, #92]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003f48:	2201      	movs	r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4c:	f7fe fe1c 	bl	8002b88 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f54:	f7fe fe18 	bl	8002b88 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e160      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f66:	4b0d      	ldr	r3, [pc, #52]	@ (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f72:	2001      	movs	r0, #1
 8003f74:	f000 faba 	bl	80044ec <RCC_Delay>
 8003f78:	e01c      	b.n	8003fb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f80:	f7fe fe02 	bl	8002b88 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f86:	e00f      	b.n	8003fa8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f88:	f7fe fdfe 	bl	8002b88 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d908      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e146      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
 8003f9a:	bf00      	nop
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	42420000 	.word	0x42420000
 8003fa4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa8:	4b92      	ldr	r3, [pc, #584]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e9      	bne.n	8003f88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 80a6 	beq.w	800410e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fc6:	4b8b      	ldr	r3, [pc, #556]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10d      	bne.n	8003fee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd2:	4b88      	ldr	r3, [pc, #544]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	4a87      	ldr	r2, [pc, #540]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8003fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fdc:	61d3      	str	r3, [r2, #28]
 8003fde:	4b85      	ldr	r3, [pc, #532]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe6:	60bb      	str	r3, [r7, #8]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fea:	2301      	movs	r3, #1
 8003fec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fee:	4b82      	ldr	r3, [pc, #520]	@ (80041f8 <HAL_RCC_OscConfig+0x4c8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d118      	bne.n	800402c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ffa:	4b7f      	ldr	r3, [pc, #508]	@ (80041f8 <HAL_RCC_OscConfig+0x4c8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a7e      	ldr	r2, [pc, #504]	@ (80041f8 <HAL_RCC_OscConfig+0x4c8>)
 8004000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004006:	f7fe fdbf 	bl	8002b88 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800400e:	f7fe fdbb 	bl	8002b88 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b64      	cmp	r3, #100	@ 0x64
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e103      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004020:	4b75      	ldr	r3, [pc, #468]	@ (80041f8 <HAL_RCC_OscConfig+0x4c8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f0      	beq.n	800400e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d106      	bne.n	8004042 <HAL_RCC_OscConfig+0x312>
 8004034:	4b6f      	ldr	r3, [pc, #444]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	4a6e      	ldr	r2, [pc, #440]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	6213      	str	r3, [r2, #32]
 8004040:	e02d      	b.n	800409e <HAL_RCC_OscConfig+0x36e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10c      	bne.n	8004064 <HAL_RCC_OscConfig+0x334>
 800404a:	4b6a      	ldr	r3, [pc, #424]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	4a69      	ldr	r2, [pc, #420]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	6213      	str	r3, [r2, #32]
 8004056:	4b67      	ldr	r3, [pc, #412]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	4a66      	ldr	r2, [pc, #408]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 800405c:	f023 0304 	bic.w	r3, r3, #4
 8004060:	6213      	str	r3, [r2, #32]
 8004062:	e01c      	b.n	800409e <HAL_RCC_OscConfig+0x36e>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b05      	cmp	r3, #5
 800406a:	d10c      	bne.n	8004086 <HAL_RCC_OscConfig+0x356>
 800406c:	4b61      	ldr	r3, [pc, #388]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	4a60      	ldr	r2, [pc, #384]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004072:	f043 0304 	orr.w	r3, r3, #4
 8004076:	6213      	str	r3, [r2, #32]
 8004078:	4b5e      	ldr	r3, [pc, #376]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	4a5d      	ldr	r2, [pc, #372]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	6213      	str	r3, [r2, #32]
 8004084:	e00b      	b.n	800409e <HAL_RCC_OscConfig+0x36e>
 8004086:	4b5b      	ldr	r3, [pc, #364]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	4a5a      	ldr	r2, [pc, #360]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 800408c:	f023 0301 	bic.w	r3, r3, #1
 8004090:	6213      	str	r3, [r2, #32]
 8004092:	4b58      	ldr	r3, [pc, #352]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	4a57      	ldr	r2, [pc, #348]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004098:	f023 0304 	bic.w	r3, r3, #4
 800409c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d015      	beq.n	80040d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a6:	f7fe fd6f 	bl	8002b88 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ac:	e00a      	b.n	80040c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ae:	f7fe fd6b 	bl	8002b88 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040bc:	4293      	cmp	r3, r2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e0b1      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c4:	4b4b      	ldr	r3, [pc, #300]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0ee      	beq.n	80040ae <HAL_RCC_OscConfig+0x37e>
 80040d0:	e014      	b.n	80040fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040d2:	f7fe fd59 	bl	8002b88 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d8:	e00a      	b.n	80040f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040da:	f7fe fd55 	bl	8002b88 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e09b      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f0:	4b40      	ldr	r3, [pc, #256]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1ee      	bne.n	80040da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d105      	bne.n	800410e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004102:	4b3c      	ldr	r3, [pc, #240]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	4a3b      	ldr	r2, [pc, #236]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004108:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800410c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 8087 	beq.w	8004226 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004118:	4b36      	ldr	r3, [pc, #216]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 030c 	and.w	r3, r3, #12
 8004120:	2b08      	cmp	r3, #8
 8004122:	d061      	beq.n	80041e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d146      	bne.n	80041ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412c:	4b33      	ldr	r3, [pc, #204]	@ (80041fc <HAL_RCC_OscConfig+0x4cc>)
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004132:	f7fe fd29 	bl	8002b88 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800413a:	f7fe fd25 	bl	8002b88 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e06d      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800414c:	4b29      	ldr	r3, [pc, #164]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f0      	bne.n	800413a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004160:	d108      	bne.n	8004174 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004162:	4b24      	ldr	r3, [pc, #144]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	4921      	ldr	r1, [pc, #132]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004170:	4313      	orrs	r3, r2
 8004172:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004174:	4b1f      	ldr	r3, [pc, #124]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a19      	ldr	r1, [r3, #32]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	430b      	orrs	r3, r1
 8004186:	491b      	ldr	r1, [pc, #108]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004188:	4313      	orrs	r3, r2
 800418a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800418c:	4b1b      	ldr	r3, [pc, #108]	@ (80041fc <HAL_RCC_OscConfig+0x4cc>)
 800418e:	2201      	movs	r2, #1
 8004190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004192:	f7fe fcf9 	bl	8002b88 <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800419a:	f7fe fcf5 	bl	8002b88 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e03d      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041ac:	4b11      	ldr	r3, [pc, #68]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0f0      	beq.n	800419a <HAL_RCC_OscConfig+0x46a>
 80041b8:	e035      	b.n	8004226 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ba:	4b10      	ldr	r3, [pc, #64]	@ (80041fc <HAL_RCC_OscConfig+0x4cc>)
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c0:	f7fe fce2 	bl	8002b88 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c8:	f7fe fcde 	bl	8002b88 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e026      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041da:	4b06      	ldr	r3, [pc, #24]	@ (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f0      	bne.n	80041c8 <HAL_RCC_OscConfig+0x498>
 80041e6:	e01e      	b.n	8004226 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d107      	bne.n	8004200 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e019      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
 80041f4:	40021000 	.word	0x40021000
 80041f8:	40007000 	.word	0x40007000
 80041fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004200:	4b0b      	ldr	r3, [pc, #44]	@ (8004230 <HAL_RCC_OscConfig+0x500>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	429a      	cmp	r2, r3
 8004212:	d106      	bne.n	8004222 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800421e:	429a      	cmp	r2, r3
 8004220:	d001      	beq.n	8004226 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40021000 	.word	0x40021000

08004234 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e0d0      	b.n	80043ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004248:	4b6a      	ldr	r3, [pc, #424]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c0>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d910      	bls.n	8004278 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004256:	4b67      	ldr	r3, [pc, #412]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f023 0207 	bic.w	r2, r3, #7
 800425e:	4965      	ldr	r1, [pc, #404]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	4313      	orrs	r3, r2
 8004264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004266:	4b63      	ldr	r3, [pc, #396]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d001      	beq.n	8004278 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0b8      	b.n	80043ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d020      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004290:	4b59      	ldr	r3, [pc, #356]	@ (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	4a58      	ldr	r2, [pc, #352]	@ (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004296:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800429a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d005      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042a8:	4b53      	ldr	r3, [pc, #332]	@ (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	4a52      	ldr	r2, [pc, #328]	@ (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80042b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042b4:	4b50      	ldr	r3, [pc, #320]	@ (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	494d      	ldr	r1, [pc, #308]	@ (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d040      	beq.n	8004354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d107      	bne.n	80042ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042da:	4b47      	ldr	r3, [pc, #284]	@ (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d115      	bne.n	8004312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e07f      	b.n	80043ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d107      	bne.n	8004302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f2:	4b41      	ldr	r3, [pc, #260]	@ (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d109      	bne.n	8004312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e073      	b.n	80043ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004302:	4b3d      	ldr	r3, [pc, #244]	@ (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e06b      	b.n	80043ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004312:	4b39      	ldr	r3, [pc, #228]	@ (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f023 0203 	bic.w	r2, r3, #3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	4936      	ldr	r1, [pc, #216]	@ (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004320:	4313      	orrs	r3, r2
 8004322:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004324:	f7fe fc30 	bl	8002b88 <HAL_GetTick>
 8004328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432a:	e00a      	b.n	8004342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800432c:	f7fe fc2c 	bl	8002b88 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800433a:	4293      	cmp	r3, r2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e053      	b.n	80043ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004342:	4b2d      	ldr	r3, [pc, #180]	@ (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f003 020c 	and.w	r2, r3, #12
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	429a      	cmp	r2, r3
 8004352:	d1eb      	bne.n	800432c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004354:	4b27      	ldr	r3, [pc, #156]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d210      	bcs.n	8004384 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004362:	4b24      	ldr	r3, [pc, #144]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f023 0207 	bic.w	r2, r3, #7
 800436a:	4922      	ldr	r1, [pc, #136]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c0>)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	4313      	orrs	r3, r2
 8004370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004372:	4b20      	ldr	r3, [pc, #128]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d001      	beq.n	8004384 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e032      	b.n	80043ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d008      	beq.n	80043a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004390:	4b19      	ldr	r3, [pc, #100]	@ (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	4916      	ldr	r1, [pc, #88]	@ (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d009      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043ae:	4b12      	ldr	r3, [pc, #72]	@ (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	490e      	ldr	r1, [pc, #56]	@ (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043c2:	f000 f821 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 80043c6:	4602      	mov	r2, r0
 80043c8:	4b0b      	ldr	r3, [pc, #44]	@ (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	091b      	lsrs	r3, r3, #4
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	490a      	ldr	r1, [pc, #40]	@ (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 80043d4:	5ccb      	ldrb	r3, [r1, r3]
 80043d6:	fa22 f303 	lsr.w	r3, r2, r3
 80043da:	4a09      	ldr	r2, [pc, #36]	@ (8004400 <HAL_RCC_ClockConfig+0x1cc>)
 80043dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043de:	4b09      	ldr	r3, [pc, #36]	@ (8004404 <HAL_RCC_ClockConfig+0x1d0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fe fb8e 	bl	8002b04 <HAL_InitTick>

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40022000 	.word	0x40022000
 80043f8:	40021000 	.word	0x40021000
 80043fc:	08007578 	.word	0x08007578
 8004400:	20000014 	.word	0x20000014
 8004404:	20000018 	.word	0x20000018

08004408 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	2300      	movs	r3, #0
 8004414:	60bb      	str	r3, [r7, #8]
 8004416:	2300      	movs	r3, #0
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	2300      	movs	r3, #0
 800441c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004422:	4b1e      	ldr	r3, [pc, #120]	@ (800449c <HAL_RCC_GetSysClockFreq+0x94>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f003 030c 	and.w	r3, r3, #12
 800442e:	2b04      	cmp	r3, #4
 8004430:	d002      	beq.n	8004438 <HAL_RCC_GetSysClockFreq+0x30>
 8004432:	2b08      	cmp	r3, #8
 8004434:	d003      	beq.n	800443e <HAL_RCC_GetSysClockFreq+0x36>
 8004436:	e027      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004438:	4b19      	ldr	r3, [pc, #100]	@ (80044a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800443a:	613b      	str	r3, [r7, #16]
      break;
 800443c:	e027      	b.n	800448e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	0c9b      	lsrs	r3, r3, #18
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	4a17      	ldr	r2, [pc, #92]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004448:	5cd3      	ldrb	r3, [r2, r3]
 800444a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d010      	beq.n	8004478 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004456:	4b11      	ldr	r3, [pc, #68]	@ (800449c <HAL_RCC_GetSysClockFreq+0x94>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	0c5b      	lsrs	r3, r3, #17
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	4a11      	ldr	r2, [pc, #68]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004462:	5cd3      	ldrb	r3, [r2, r3]
 8004464:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a0d      	ldr	r2, [pc, #52]	@ (80044a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800446a:	fb03 f202 	mul.w	r2, r3, r2
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	fbb2 f3f3 	udiv	r3, r2, r3
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	e004      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a0c      	ldr	r2, [pc, #48]	@ (80044ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800447c:	fb02 f303 	mul.w	r3, r2, r3
 8004480:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	613b      	str	r3, [r7, #16]
      break;
 8004486:	e002      	b.n	800448e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004488:	4b05      	ldr	r3, [pc, #20]	@ (80044a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800448a:	613b      	str	r3, [r7, #16]
      break;
 800448c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800448e:	693b      	ldr	r3, [r7, #16]
}
 8004490:	4618      	mov	r0, r3
 8004492:	371c      	adds	r7, #28
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	40021000 	.word	0x40021000
 80044a0:	007a1200 	.word	0x007a1200
 80044a4:	0800ddfc 	.word	0x0800ddfc
 80044a8:	0800de0c 	.word	0x0800de0c
 80044ac:	003d0900 	.word	0x003d0900

080044b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044b4:	4b02      	ldr	r3, [pc, #8]	@ (80044c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80044b6:	681b      	ldr	r3, [r3, #0]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr
 80044c0:	20000014 	.word	0x20000014

080044c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044c8:	f7ff fff2 	bl	80044b0 <HAL_RCC_GetHCLKFreq>
 80044cc:	4602      	mov	r2, r0
 80044ce:	4b05      	ldr	r3, [pc, #20]	@ (80044e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	0a1b      	lsrs	r3, r3, #8
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	4903      	ldr	r1, [pc, #12]	@ (80044e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044da:	5ccb      	ldrb	r3, [r1, r3]
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40021000 	.word	0x40021000
 80044e8:	08007588 	.word	0x08007588

080044ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004520 <RCC_Delay+0x34>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004524 <RCC_Delay+0x38>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	0a5b      	lsrs	r3, r3, #9
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	fb02 f303 	mul.w	r3, r2, r3
 8004506:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004508:	bf00      	nop
  }
  while (Delay --);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1e5a      	subs	r2, r3, #1
 800450e:	60fa      	str	r2, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1f9      	bne.n	8004508 <RCC_Delay+0x1c>
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	bc80      	pop	{r7}
 800451e:	4770      	bx	lr
 8004520:	20000014 	.word	0x20000014
 8004524:	10624dd3 	.word	0x10624dd3

08004528 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e076      	b.n	8004628 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453e:	2b00      	cmp	r3, #0
 8004540:	d108      	bne.n	8004554 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800454a:	d009      	beq.n	8004560 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	61da      	str	r2, [r3, #28]
 8004552:	e005      	b.n	8004560 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fd fea2 	bl	80022c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004596:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e4:	ea42 0103 	orr.w	r1, r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	0c1a      	lsrs	r2, r3, #16
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f002 0204 	and.w	r2, r2, #4
 8004606:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	69da      	ldr	r2, [r3, #28]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004616:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e041      	b.n	80046c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d106      	bne.n	800465c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fe f81a 	bl	8002690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3304      	adds	r3, #4
 800466c:	4619      	mov	r1, r3
 800466e:	4610      	mov	r0, r2
 8004670:	f000 fbe2 	bl	8004e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e041      	b.n	8004764 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d106      	bne.n	80046fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f839 	bl	800476c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2202      	movs	r2, #2
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3304      	adds	r3, #4
 800470a:	4619      	mov	r1, r3
 800470c:	4610      	mov	r0, r2
 800470e:	f000 fb93 	bl	8004e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr
	...

08004780 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d109      	bne.n	80047a4 <HAL_TIM_PWM_Start+0x24>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	bf14      	ite	ne
 800479c:	2301      	movne	r3, #1
 800479e:	2300      	moveq	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	e022      	b.n	80047ea <HAL_TIM_PWM_Start+0x6a>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d109      	bne.n	80047be <HAL_TIM_PWM_Start+0x3e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	bf14      	ite	ne
 80047b6:	2301      	movne	r3, #1
 80047b8:	2300      	moveq	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	e015      	b.n	80047ea <HAL_TIM_PWM_Start+0x6a>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d109      	bne.n	80047d8 <HAL_TIM_PWM_Start+0x58>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	bf14      	ite	ne
 80047d0:	2301      	movne	r3, #1
 80047d2:	2300      	moveq	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	e008      	b.n	80047ea <HAL_TIM_PWM_Start+0x6a>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	bf14      	ite	ne
 80047e4:	2301      	movne	r3, #1
 80047e6:	2300      	moveq	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e05e      	b.n	80048b0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d104      	bne.n	8004802 <HAL_TIM_PWM_Start+0x82>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004800:	e013      	b.n	800482a <HAL_TIM_PWM_Start+0xaa>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b04      	cmp	r3, #4
 8004806:	d104      	bne.n	8004812 <HAL_TIM_PWM_Start+0x92>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004810:	e00b      	b.n	800482a <HAL_TIM_PWM_Start+0xaa>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b08      	cmp	r3, #8
 8004816:	d104      	bne.n	8004822 <HAL_TIM_PWM_Start+0xa2>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004820:	e003      	b.n	800482a <HAL_TIM_PWM_Start+0xaa>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2202      	movs	r2, #2
 8004826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2201      	movs	r2, #1
 8004830:	6839      	ldr	r1, [r7, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fd8c 	bl	8005350 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a1e      	ldr	r2, [pc, #120]	@ (80048b8 <HAL_TIM_PWM_Start+0x138>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d107      	bne.n	8004852 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004850:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a18      	ldr	r2, [pc, #96]	@ (80048b8 <HAL_TIM_PWM_Start+0x138>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00e      	beq.n	800487a <HAL_TIM_PWM_Start+0xfa>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004864:	d009      	beq.n	800487a <HAL_TIM_PWM_Start+0xfa>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a14      	ldr	r2, [pc, #80]	@ (80048bc <HAL_TIM_PWM_Start+0x13c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d004      	beq.n	800487a <HAL_TIM_PWM_Start+0xfa>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a12      	ldr	r2, [pc, #72]	@ (80048c0 <HAL_TIM_PWM_Start+0x140>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d111      	bne.n	800489e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b06      	cmp	r3, #6
 800488a:	d010      	beq.n	80048ae <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0201 	orr.w	r2, r2, #1
 800489a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489c:	e007      	b.n	80048ae <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f042 0201 	orr.w	r2, r2, #1
 80048ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40012c00 	.word	0x40012c00
 80048bc:	40000400 	.word	0x40000400
 80048c0:	40000800 	.word	0x40000800

080048c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e093      	b.n	8004a00 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d106      	bne.n	80048f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7fd feed 	bl	80026cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2202      	movs	r2, #2
 80048f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6812      	ldr	r2, [r2, #0]
 8004904:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004908:	f023 0307 	bic.w	r3, r3, #7
 800490c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3304      	adds	r3, #4
 8004916:	4619      	mov	r1, r3
 8004918:	4610      	mov	r0, r2
 800491a:	f000 fa8d 	bl	8004e38 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004946:	f023 0303 	bic.w	r3, r3, #3
 800494a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	021b      	lsls	r3, r3, #8
 8004956:	4313      	orrs	r3, r2
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004964:	f023 030c 	bic.w	r3, r3, #12
 8004968:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004970:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004974:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	021b      	lsls	r3, r3, #8
 8004980:	4313      	orrs	r3, r2
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	011a      	lsls	r2, r3, #4
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	031b      	lsls	r3, r3, #12
 8004994:	4313      	orrs	r3, r2
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80049a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	4313      	orrs	r3, r2
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a18:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a20:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a28:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004a30:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d110      	bne.n	8004a5a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d102      	bne.n	8004a44 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a3e:	7b7b      	ldrb	r3, [r7, #13]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d001      	beq.n	8004a48 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e069      	b.n	8004b1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a58:	e031      	b.n	8004abe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d110      	bne.n	8004a82 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a60:	7bbb      	ldrb	r3, [r7, #14]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d102      	bne.n	8004a6c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a66:	7b3b      	ldrb	r3, [r7, #12]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d001      	beq.n	8004a70 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e055      	b.n	8004b1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a80:	e01d      	b.n	8004abe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d108      	bne.n	8004a9a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a88:	7bbb      	ldrb	r3, [r7, #14]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d105      	bne.n	8004a9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a8e:	7b7b      	ldrb	r3, [r7, #13]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d102      	bne.n	8004a9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a94:	7b3b      	ldrb	r3, [r7, #12]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d001      	beq.n	8004a9e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e03e      	b.n	8004b1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2202      	movs	r2, #2
 8004aba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <HAL_TIM_Encoder_Start+0xc4>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d008      	beq.n	8004adc <HAL_TIM_Encoder_Start+0xd4>
 8004aca:	e00f      	b.n	8004aec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 fc3b 	bl	8005350 <TIM_CCxChannelCmd>
      break;
 8004ada:	e016      	b.n	8004b0a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	2104      	movs	r1, #4
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 fc33 	bl	8005350 <TIM_CCxChannelCmd>
      break;
 8004aea:	e00e      	b.n	8004b0a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2201      	movs	r2, #1
 8004af2:	2100      	movs	r1, #0
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 fc2b 	bl	8005350 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2201      	movs	r2, #1
 8004b00:	2104      	movs	r1, #4
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fc24 	bl	8005350 <TIM_CCxChannelCmd>
      break;
 8004b08:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f042 0201 	orr.w	r2, r2, #1
 8004b18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d101      	bne.n	8004b42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e0ae      	b.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b0c      	cmp	r3, #12
 8004b4e:	f200 809f 	bhi.w	8004c90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b52:	a201      	add	r2, pc, #4	@ (adr r2, 8004b58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b58:	08004b8d 	.word	0x08004b8d
 8004b5c:	08004c91 	.word	0x08004c91
 8004b60:	08004c91 	.word	0x08004c91
 8004b64:	08004c91 	.word	0x08004c91
 8004b68:	08004bcd 	.word	0x08004bcd
 8004b6c:	08004c91 	.word	0x08004c91
 8004b70:	08004c91 	.word	0x08004c91
 8004b74:	08004c91 	.word	0x08004c91
 8004b78:	08004c0f 	.word	0x08004c0f
 8004b7c:	08004c91 	.word	0x08004c91
 8004b80:	08004c91 	.word	0x08004c91
 8004b84:	08004c91 	.word	0x08004c91
 8004b88:	08004c4f 	.word	0x08004c4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68b9      	ldr	r1, [r7, #8]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 f9be 	bl	8004f14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699a      	ldr	r2, [r3, #24]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0208 	orr.w	r2, r2, #8
 8004ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699a      	ldr	r2, [r3, #24]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0204 	bic.w	r2, r2, #4
 8004bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6999      	ldr	r1, [r3, #24]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	619a      	str	r2, [r3, #24]
      break;
 8004bca:	e064      	b.n	8004c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fa04 	bl	8004fe0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699a      	ldr	r2, [r3, #24]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004be6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699a      	ldr	r2, [r3, #24]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6999      	ldr	r1, [r3, #24]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	021a      	lsls	r2, r3, #8
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	619a      	str	r2, [r3, #24]
      break;
 8004c0c:	e043      	b.n	8004c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fa4d 	bl	80050b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69da      	ldr	r2, [r3, #28]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f042 0208 	orr.w	r2, r2, #8
 8004c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69da      	ldr	r2, [r3, #28]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0204 	bic.w	r2, r2, #4
 8004c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69d9      	ldr	r1, [r3, #28]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	61da      	str	r2, [r3, #28]
      break;
 8004c4c:	e023      	b.n	8004c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 fa97 	bl	8005188 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69da      	ldr	r2, [r3, #28]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69da      	ldr	r2, [r3, #28]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69d9      	ldr	r1, [r3, #28]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	021a      	lsls	r2, r3, #8
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	61da      	str	r2, [r3, #28]
      break;
 8004c8e:	e002      	b.n	8004c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	75fb      	strb	r3, [r7, #23]
      break;
 8004c94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_TIM_ConfigClockSource+0x1c>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e0b4      	b.n	8004e2e <HAL_TIM_ConfigClockSource+0x186>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cfc:	d03e      	beq.n	8004d7c <HAL_TIM_ConfigClockSource+0xd4>
 8004cfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d02:	f200 8087 	bhi.w	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d0a:	f000 8086 	beq.w	8004e1a <HAL_TIM_ConfigClockSource+0x172>
 8004d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d12:	d87f      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d14:	2b70      	cmp	r3, #112	@ 0x70
 8004d16:	d01a      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0xa6>
 8004d18:	2b70      	cmp	r3, #112	@ 0x70
 8004d1a:	d87b      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d1c:	2b60      	cmp	r3, #96	@ 0x60
 8004d1e:	d050      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0x11a>
 8004d20:	2b60      	cmp	r3, #96	@ 0x60
 8004d22:	d877      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d24:	2b50      	cmp	r3, #80	@ 0x50
 8004d26:	d03c      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0xfa>
 8004d28:	2b50      	cmp	r3, #80	@ 0x50
 8004d2a:	d873      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d2c:	2b40      	cmp	r3, #64	@ 0x40
 8004d2e:	d058      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x13a>
 8004d30:	2b40      	cmp	r3, #64	@ 0x40
 8004d32:	d86f      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d34:	2b30      	cmp	r3, #48	@ 0x30
 8004d36:	d064      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x15a>
 8004d38:	2b30      	cmp	r3, #48	@ 0x30
 8004d3a:	d86b      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	d060      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x15a>
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d867      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d05c      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x15a>
 8004d48:	2b10      	cmp	r3, #16
 8004d4a:	d05a      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x15a>
 8004d4c:	e062      	b.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d5e:	f000 fad8 	bl	8005312 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	609a      	str	r2, [r3, #8]
      break;
 8004d7a:	e04f      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d8c:	f000 fac1 	bl	8005312 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d9e:	609a      	str	r2, [r3, #8]
      break;
 8004da0:	e03c      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dae:	461a      	mov	r2, r3
 8004db0:	f000 fa38 	bl	8005224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2150      	movs	r1, #80	@ 0x50
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fa8f 	bl	80052de <TIM_ITRx_SetConfig>
      break;
 8004dc0:	e02c      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f000 fa56 	bl	8005280 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2160      	movs	r1, #96	@ 0x60
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fa7f 	bl	80052de <TIM_ITRx_SetConfig>
      break;
 8004de0:	e01c      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dee:	461a      	mov	r2, r3
 8004df0:	f000 fa18 	bl	8005224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2140      	movs	r1, #64	@ 0x40
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 fa6f 	bl	80052de <TIM_ITRx_SetConfig>
      break;
 8004e00:	e00c      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	f000 fa66 	bl	80052de <TIM_ITRx_SetConfig>
      break;
 8004e12:	e003      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	73fb      	strb	r3, [r7, #15]
      break;
 8004e18:	e000      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
	...

08004e38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a2f      	ldr	r2, [pc, #188]	@ (8004f08 <TIM_Base_SetConfig+0xd0>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00b      	beq.n	8004e68 <TIM_Base_SetConfig+0x30>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e56:	d007      	beq.n	8004e68 <TIM_Base_SetConfig+0x30>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a2c      	ldr	r2, [pc, #176]	@ (8004f0c <TIM_Base_SetConfig+0xd4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_Base_SetConfig+0x30>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a2b      	ldr	r2, [pc, #172]	@ (8004f10 <TIM_Base_SetConfig+0xd8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d108      	bne.n	8004e7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a22      	ldr	r2, [pc, #136]	@ (8004f08 <TIM_Base_SetConfig+0xd0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00b      	beq.n	8004e9a <TIM_Base_SetConfig+0x62>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e88:	d007      	beq.n	8004e9a <TIM_Base_SetConfig+0x62>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a1f      	ldr	r2, [pc, #124]	@ (8004f0c <TIM_Base_SetConfig+0xd4>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d003      	beq.n	8004e9a <TIM_Base_SetConfig+0x62>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a1e      	ldr	r2, [pc, #120]	@ (8004f10 <TIM_Base_SetConfig+0xd8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d108      	bne.n	8004eac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a0d      	ldr	r2, [pc, #52]	@ (8004f08 <TIM_Base_SetConfig+0xd0>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d103      	bne.n	8004ee0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	691a      	ldr	r2, [r3, #16]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d005      	beq.n	8004efe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f023 0201 	bic.w	r2, r3, #1
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	611a      	str	r2, [r3, #16]
  }
}
 8004efe:	bf00      	nop
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr
 8004f08:	40012c00 	.word	0x40012c00
 8004f0c:	40000400 	.word	0x40000400
 8004f10:	40000800 	.word	0x40000800

08004f14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	f023 0201 	bic.w	r2, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0303 	bic.w	r3, r3, #3
 8004f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f023 0302 	bic.w	r3, r3, #2
 8004f5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8004fdc <TIM_OC1_SetConfig+0xc8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d10c      	bne.n	8004f8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f023 0308 	bic.w	r3, r3, #8
 8004f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f023 0304 	bic.w	r3, r3, #4
 8004f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a13      	ldr	r2, [pc, #76]	@ (8004fdc <TIM_OC1_SetConfig+0xc8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d111      	bne.n	8004fb6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	621a      	str	r2, [r3, #32]
}
 8004fd0:	bf00      	nop
 8004fd2:	371c      	adds	r7, #28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bc80      	pop	{r7}
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40012c00 	.word	0x40012c00

08004fe0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	f023 0210 	bic.w	r2, r3, #16
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800500e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	021b      	lsls	r3, r3, #8
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f023 0320 	bic.w	r3, r3, #32
 800502a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4313      	orrs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a1d      	ldr	r2, [pc, #116]	@ (80050b0 <TIM_OC2_SetConfig+0xd0>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d10d      	bne.n	800505c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800505a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a14      	ldr	r2, [pc, #80]	@ (80050b0 <TIM_OC2_SetConfig+0xd0>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d113      	bne.n	800508c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800506a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005072:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	4313      	orrs	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4313      	orrs	r3, r2
 800508a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	621a      	str	r2, [r3, #32]
}
 80050a6:	bf00      	nop
 80050a8:	371c      	adds	r7, #28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bc80      	pop	{r7}
 80050ae:	4770      	bx	lr
 80050b0:	40012c00 	.word	0x40012c00

080050b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0303 	bic.w	r3, r3, #3
 80050ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	021b      	lsls	r3, r3, #8
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a1d      	ldr	r2, [pc, #116]	@ (8005184 <TIM_OC3_SetConfig+0xd0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d10d      	bne.n	800512e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005118:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	021b      	lsls	r3, r3, #8
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800512c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a14      	ldr	r2, [pc, #80]	@ (8005184 <TIM_OC3_SetConfig+0xd0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d113      	bne.n	800515e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800513c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	621a      	str	r2, [r3, #32]
}
 8005178:	bf00      	nop
 800517a:	371c      	adds	r7, #28
 800517c:	46bd      	mov	sp, r7
 800517e:	bc80      	pop	{r7}
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40012c00 	.word	0x40012c00

08005188 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	021b      	lsls	r3, r3, #8
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	031b      	lsls	r3, r3, #12
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a0f      	ldr	r2, [pc, #60]	@ (8005220 <TIM_OC4_SetConfig+0x98>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d109      	bne.n	80051fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	019b      	lsls	r3, r3, #6
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	621a      	str	r2, [r3, #32]
}
 8005216:	bf00      	nop
 8005218:	371c      	adds	r7, #28
 800521a:	46bd      	mov	sp, r7
 800521c:	bc80      	pop	{r7}
 800521e:	4770      	bx	lr
 8005220:	40012c00 	.word	0x40012c00

08005224 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	f023 0201 	bic.w	r2, r3, #1
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800524e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	4313      	orrs	r3, r2
 8005258:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f023 030a 	bic.w	r3, r3, #10
 8005260:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	bf00      	nop
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	bc80      	pop	{r7}
 800527e:	4770      	bx	lr

08005280 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	f023 0210 	bic.w	r2, r3, #16
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80052aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	031b      	lsls	r3, r3, #12
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80052bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	621a      	str	r2, [r3, #32]
}
 80052d4:	bf00      	nop
 80052d6:	371c      	adds	r7, #28
 80052d8:	46bd      	mov	sp, r7
 80052da:	bc80      	pop	{r7}
 80052dc:	4770      	bx	lr

080052de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052de:	b480      	push	{r7}
 80052e0:	b085      	sub	sp, #20
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f043 0307 	orr.w	r3, r3, #7
 8005300:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	609a      	str	r2, [r3, #8]
}
 8005308:	bf00      	nop
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	bc80      	pop	{r7}
 8005310:	4770      	bx	lr

08005312 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005312:	b480      	push	{r7}
 8005314:	b087      	sub	sp, #28
 8005316:	af00      	add	r7, sp, #0
 8005318:	60f8      	str	r0, [r7, #12]
 800531a:	60b9      	str	r1, [r7, #8]
 800531c:	607a      	str	r2, [r7, #4]
 800531e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800532c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	021a      	lsls	r2, r3, #8
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	431a      	orrs	r2, r3
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4313      	orrs	r3, r2
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	609a      	str	r2, [r3, #8]
}
 8005346:	bf00      	nop
 8005348:	371c      	adds	r7, #28
 800534a:	46bd      	mov	sp, r7
 800534c:	bc80      	pop	{r7}
 800534e:	4770      	bx	lr

08005350 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f003 031f 	and.w	r3, r3, #31
 8005362:	2201      	movs	r2, #1
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a1a      	ldr	r2, [r3, #32]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	43db      	mvns	r3, r3
 8005372:	401a      	ands	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a1a      	ldr	r2, [r3, #32]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f003 031f 	and.w	r3, r3, #31
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	fa01 f303 	lsl.w	r3, r1, r3
 8005388:	431a      	orrs	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	621a      	str	r2, [r3, #32]
}
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	bc80      	pop	{r7}
 8005396:	4770      	bx	lr

08005398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e046      	b.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4313      	orrs	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a16      	ldr	r2, [pc, #88]	@ (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d00e      	beq.n	8005412 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053fc:	d009      	beq.n	8005412 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a12      	ldr	r2, [pc, #72]	@ (800544c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d004      	beq.n	8005412 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a10      	ldr	r2, [pc, #64]	@ (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d10c      	bne.n	800542c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005418:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	4313      	orrs	r3, r2
 8005422:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr
 8005448:	40012c00 	.word	0x40012c00
 800544c:	40000400 	.word	0x40000400
 8005450:	40000800 	.word	0x40000800

08005454 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800546c:	2302      	movs	r3, #2
 800546e:	e03d      	b.n	80054ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bc80      	pop	{r7}
 80054f4:	4770      	bx	lr
	...

080054f8 <siprintf>:
 80054f8:	b40e      	push	{r1, r2, r3}
 80054fa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80054fe:	b510      	push	{r4, lr}
 8005500:	2400      	movs	r4, #0
 8005502:	b09d      	sub	sp, #116	@ 0x74
 8005504:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005506:	9002      	str	r0, [sp, #8]
 8005508:	9006      	str	r0, [sp, #24]
 800550a:	9107      	str	r1, [sp, #28]
 800550c:	9104      	str	r1, [sp, #16]
 800550e:	4809      	ldr	r0, [pc, #36]	@ (8005534 <siprintf+0x3c>)
 8005510:	4909      	ldr	r1, [pc, #36]	@ (8005538 <siprintf+0x40>)
 8005512:	f853 2b04 	ldr.w	r2, [r3], #4
 8005516:	9105      	str	r1, [sp, #20]
 8005518:	6800      	ldr	r0, [r0, #0]
 800551a:	a902      	add	r1, sp, #8
 800551c:	9301      	str	r3, [sp, #4]
 800551e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005520:	f000 f9a0 	bl	8005864 <_svfiprintf_r>
 8005524:	9b02      	ldr	r3, [sp, #8]
 8005526:	701c      	strb	r4, [r3, #0]
 8005528:	b01d      	add	sp, #116	@ 0x74
 800552a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800552e:	b003      	add	sp, #12
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	20000020 	.word	0x20000020
 8005538:	ffff0208 	.word	0xffff0208

0800553c <memset>:
 800553c:	4603      	mov	r3, r0
 800553e:	4402      	add	r2, r0
 8005540:	4293      	cmp	r3, r2
 8005542:	d100      	bne.n	8005546 <memset+0xa>
 8005544:	4770      	bx	lr
 8005546:	f803 1b01 	strb.w	r1, [r3], #1
 800554a:	e7f9      	b.n	8005540 <memset+0x4>

0800554c <__errno>:
 800554c:	4b01      	ldr	r3, [pc, #4]	@ (8005554 <__errno+0x8>)
 800554e:	6818      	ldr	r0, [r3, #0]
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	20000020 	.word	0x20000020

08005558 <__libc_init_array>:
 8005558:	b570      	push	{r4, r5, r6, lr}
 800555a:	2600      	movs	r6, #0
 800555c:	4d0c      	ldr	r5, [pc, #48]	@ (8005590 <__libc_init_array+0x38>)
 800555e:	4c0d      	ldr	r4, [pc, #52]	@ (8005594 <__libc_init_array+0x3c>)
 8005560:	1b64      	subs	r4, r4, r5
 8005562:	10a4      	asrs	r4, r4, #2
 8005564:	42a6      	cmp	r6, r4
 8005566:	d109      	bne.n	800557c <__libc_init_array+0x24>
 8005568:	f001 fed2 	bl	8007310 <_init>
 800556c:	2600      	movs	r6, #0
 800556e:	4d0a      	ldr	r5, [pc, #40]	@ (8005598 <__libc_init_array+0x40>)
 8005570:	4c0a      	ldr	r4, [pc, #40]	@ (800559c <__libc_init_array+0x44>)
 8005572:	1b64      	subs	r4, r4, r5
 8005574:	10a4      	asrs	r4, r4, #2
 8005576:	42a6      	cmp	r6, r4
 8005578:	d105      	bne.n	8005586 <__libc_init_array+0x2e>
 800557a:	bd70      	pop	{r4, r5, r6, pc}
 800557c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005580:	4798      	blx	r3
 8005582:	3601      	adds	r6, #1
 8005584:	e7ee      	b.n	8005564 <__libc_init_array+0xc>
 8005586:	f855 3b04 	ldr.w	r3, [r5], #4
 800558a:	4798      	blx	r3
 800558c:	3601      	adds	r6, #1
 800558e:	e7f2      	b.n	8005576 <__libc_init_array+0x1e>
 8005590:	0800e234 	.word	0x0800e234
 8005594:	0800e234 	.word	0x0800e234
 8005598:	0800e234 	.word	0x0800e234
 800559c:	0800e238 	.word	0x0800e238

080055a0 <__retarget_lock_acquire_recursive>:
 80055a0:	4770      	bx	lr

080055a2 <__retarget_lock_release_recursive>:
 80055a2:	4770      	bx	lr

080055a4 <memcpy>:
 80055a4:	440a      	add	r2, r1
 80055a6:	4291      	cmp	r1, r2
 80055a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80055ac:	d100      	bne.n	80055b0 <memcpy+0xc>
 80055ae:	4770      	bx	lr
 80055b0:	b510      	push	{r4, lr}
 80055b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055b6:	4291      	cmp	r1, r2
 80055b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055bc:	d1f9      	bne.n	80055b2 <memcpy+0xe>
 80055be:	bd10      	pop	{r4, pc}

080055c0 <_free_r>:
 80055c0:	b538      	push	{r3, r4, r5, lr}
 80055c2:	4605      	mov	r5, r0
 80055c4:	2900      	cmp	r1, #0
 80055c6:	d040      	beq.n	800564a <_free_r+0x8a>
 80055c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055cc:	1f0c      	subs	r4, r1, #4
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	bfb8      	it	lt
 80055d2:	18e4      	addlt	r4, r4, r3
 80055d4:	f000 f8de 	bl	8005794 <__malloc_lock>
 80055d8:	4a1c      	ldr	r2, [pc, #112]	@ (800564c <_free_r+0x8c>)
 80055da:	6813      	ldr	r3, [r2, #0]
 80055dc:	b933      	cbnz	r3, 80055ec <_free_r+0x2c>
 80055de:	6063      	str	r3, [r4, #4]
 80055e0:	6014      	str	r4, [r2, #0]
 80055e2:	4628      	mov	r0, r5
 80055e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055e8:	f000 b8da 	b.w	80057a0 <__malloc_unlock>
 80055ec:	42a3      	cmp	r3, r4
 80055ee:	d908      	bls.n	8005602 <_free_r+0x42>
 80055f0:	6820      	ldr	r0, [r4, #0]
 80055f2:	1821      	adds	r1, r4, r0
 80055f4:	428b      	cmp	r3, r1
 80055f6:	bf01      	itttt	eq
 80055f8:	6819      	ldreq	r1, [r3, #0]
 80055fa:	685b      	ldreq	r3, [r3, #4]
 80055fc:	1809      	addeq	r1, r1, r0
 80055fe:	6021      	streq	r1, [r4, #0]
 8005600:	e7ed      	b.n	80055de <_free_r+0x1e>
 8005602:	461a      	mov	r2, r3
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	b10b      	cbz	r3, 800560c <_free_r+0x4c>
 8005608:	42a3      	cmp	r3, r4
 800560a:	d9fa      	bls.n	8005602 <_free_r+0x42>
 800560c:	6811      	ldr	r1, [r2, #0]
 800560e:	1850      	adds	r0, r2, r1
 8005610:	42a0      	cmp	r0, r4
 8005612:	d10b      	bne.n	800562c <_free_r+0x6c>
 8005614:	6820      	ldr	r0, [r4, #0]
 8005616:	4401      	add	r1, r0
 8005618:	1850      	adds	r0, r2, r1
 800561a:	4283      	cmp	r3, r0
 800561c:	6011      	str	r1, [r2, #0]
 800561e:	d1e0      	bne.n	80055e2 <_free_r+0x22>
 8005620:	6818      	ldr	r0, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	4408      	add	r0, r1
 8005626:	6010      	str	r0, [r2, #0]
 8005628:	6053      	str	r3, [r2, #4]
 800562a:	e7da      	b.n	80055e2 <_free_r+0x22>
 800562c:	d902      	bls.n	8005634 <_free_r+0x74>
 800562e:	230c      	movs	r3, #12
 8005630:	602b      	str	r3, [r5, #0]
 8005632:	e7d6      	b.n	80055e2 <_free_r+0x22>
 8005634:	6820      	ldr	r0, [r4, #0]
 8005636:	1821      	adds	r1, r4, r0
 8005638:	428b      	cmp	r3, r1
 800563a:	bf01      	itttt	eq
 800563c:	6819      	ldreq	r1, [r3, #0]
 800563e:	685b      	ldreq	r3, [r3, #4]
 8005640:	1809      	addeq	r1, r1, r0
 8005642:	6021      	streq	r1, [r4, #0]
 8005644:	6063      	str	r3, [r4, #4]
 8005646:	6054      	str	r4, [r2, #4]
 8005648:	e7cb      	b.n	80055e2 <_free_r+0x22>
 800564a:	bd38      	pop	{r3, r4, r5, pc}
 800564c:	20003f20 	.word	0x20003f20

08005650 <sbrk_aligned>:
 8005650:	b570      	push	{r4, r5, r6, lr}
 8005652:	4e0f      	ldr	r6, [pc, #60]	@ (8005690 <sbrk_aligned+0x40>)
 8005654:	460c      	mov	r4, r1
 8005656:	6831      	ldr	r1, [r6, #0]
 8005658:	4605      	mov	r5, r0
 800565a:	b911      	cbnz	r1, 8005662 <sbrk_aligned+0x12>
 800565c:	f000 fba8 	bl	8005db0 <_sbrk_r>
 8005660:	6030      	str	r0, [r6, #0]
 8005662:	4621      	mov	r1, r4
 8005664:	4628      	mov	r0, r5
 8005666:	f000 fba3 	bl	8005db0 <_sbrk_r>
 800566a:	1c43      	adds	r3, r0, #1
 800566c:	d103      	bne.n	8005676 <sbrk_aligned+0x26>
 800566e:	f04f 34ff 	mov.w	r4, #4294967295
 8005672:	4620      	mov	r0, r4
 8005674:	bd70      	pop	{r4, r5, r6, pc}
 8005676:	1cc4      	adds	r4, r0, #3
 8005678:	f024 0403 	bic.w	r4, r4, #3
 800567c:	42a0      	cmp	r0, r4
 800567e:	d0f8      	beq.n	8005672 <sbrk_aligned+0x22>
 8005680:	1a21      	subs	r1, r4, r0
 8005682:	4628      	mov	r0, r5
 8005684:	f000 fb94 	bl	8005db0 <_sbrk_r>
 8005688:	3001      	adds	r0, #1
 800568a:	d1f2      	bne.n	8005672 <sbrk_aligned+0x22>
 800568c:	e7ef      	b.n	800566e <sbrk_aligned+0x1e>
 800568e:	bf00      	nop
 8005690:	20003f1c 	.word	0x20003f1c

08005694 <_malloc_r>:
 8005694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005698:	1ccd      	adds	r5, r1, #3
 800569a:	f025 0503 	bic.w	r5, r5, #3
 800569e:	3508      	adds	r5, #8
 80056a0:	2d0c      	cmp	r5, #12
 80056a2:	bf38      	it	cc
 80056a4:	250c      	movcc	r5, #12
 80056a6:	2d00      	cmp	r5, #0
 80056a8:	4606      	mov	r6, r0
 80056aa:	db01      	blt.n	80056b0 <_malloc_r+0x1c>
 80056ac:	42a9      	cmp	r1, r5
 80056ae:	d904      	bls.n	80056ba <_malloc_r+0x26>
 80056b0:	230c      	movs	r3, #12
 80056b2:	6033      	str	r3, [r6, #0]
 80056b4:	2000      	movs	r0, #0
 80056b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005790 <_malloc_r+0xfc>
 80056be:	f000 f869 	bl	8005794 <__malloc_lock>
 80056c2:	f8d8 3000 	ldr.w	r3, [r8]
 80056c6:	461c      	mov	r4, r3
 80056c8:	bb44      	cbnz	r4, 800571c <_malloc_r+0x88>
 80056ca:	4629      	mov	r1, r5
 80056cc:	4630      	mov	r0, r6
 80056ce:	f7ff ffbf 	bl	8005650 <sbrk_aligned>
 80056d2:	1c43      	adds	r3, r0, #1
 80056d4:	4604      	mov	r4, r0
 80056d6:	d158      	bne.n	800578a <_malloc_r+0xf6>
 80056d8:	f8d8 4000 	ldr.w	r4, [r8]
 80056dc:	4627      	mov	r7, r4
 80056de:	2f00      	cmp	r7, #0
 80056e0:	d143      	bne.n	800576a <_malloc_r+0xd6>
 80056e2:	2c00      	cmp	r4, #0
 80056e4:	d04b      	beq.n	800577e <_malloc_r+0xea>
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	4639      	mov	r1, r7
 80056ea:	4630      	mov	r0, r6
 80056ec:	eb04 0903 	add.w	r9, r4, r3
 80056f0:	f000 fb5e 	bl	8005db0 <_sbrk_r>
 80056f4:	4581      	cmp	r9, r0
 80056f6:	d142      	bne.n	800577e <_malloc_r+0xea>
 80056f8:	6821      	ldr	r1, [r4, #0]
 80056fa:	4630      	mov	r0, r6
 80056fc:	1a6d      	subs	r5, r5, r1
 80056fe:	4629      	mov	r1, r5
 8005700:	f7ff ffa6 	bl	8005650 <sbrk_aligned>
 8005704:	3001      	adds	r0, #1
 8005706:	d03a      	beq.n	800577e <_malloc_r+0xea>
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	442b      	add	r3, r5
 800570c:	6023      	str	r3, [r4, #0]
 800570e:	f8d8 3000 	ldr.w	r3, [r8]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	bb62      	cbnz	r2, 8005770 <_malloc_r+0xdc>
 8005716:	f8c8 7000 	str.w	r7, [r8]
 800571a:	e00f      	b.n	800573c <_malloc_r+0xa8>
 800571c:	6822      	ldr	r2, [r4, #0]
 800571e:	1b52      	subs	r2, r2, r5
 8005720:	d420      	bmi.n	8005764 <_malloc_r+0xd0>
 8005722:	2a0b      	cmp	r2, #11
 8005724:	d917      	bls.n	8005756 <_malloc_r+0xc2>
 8005726:	1961      	adds	r1, r4, r5
 8005728:	42a3      	cmp	r3, r4
 800572a:	6025      	str	r5, [r4, #0]
 800572c:	bf18      	it	ne
 800572e:	6059      	strne	r1, [r3, #4]
 8005730:	6863      	ldr	r3, [r4, #4]
 8005732:	bf08      	it	eq
 8005734:	f8c8 1000 	streq.w	r1, [r8]
 8005738:	5162      	str	r2, [r4, r5]
 800573a:	604b      	str	r3, [r1, #4]
 800573c:	4630      	mov	r0, r6
 800573e:	f000 f82f 	bl	80057a0 <__malloc_unlock>
 8005742:	f104 000b 	add.w	r0, r4, #11
 8005746:	1d23      	adds	r3, r4, #4
 8005748:	f020 0007 	bic.w	r0, r0, #7
 800574c:	1ac2      	subs	r2, r0, r3
 800574e:	bf1c      	itt	ne
 8005750:	1a1b      	subne	r3, r3, r0
 8005752:	50a3      	strne	r3, [r4, r2]
 8005754:	e7af      	b.n	80056b6 <_malloc_r+0x22>
 8005756:	6862      	ldr	r2, [r4, #4]
 8005758:	42a3      	cmp	r3, r4
 800575a:	bf0c      	ite	eq
 800575c:	f8c8 2000 	streq.w	r2, [r8]
 8005760:	605a      	strne	r2, [r3, #4]
 8005762:	e7eb      	b.n	800573c <_malloc_r+0xa8>
 8005764:	4623      	mov	r3, r4
 8005766:	6864      	ldr	r4, [r4, #4]
 8005768:	e7ae      	b.n	80056c8 <_malloc_r+0x34>
 800576a:	463c      	mov	r4, r7
 800576c:	687f      	ldr	r7, [r7, #4]
 800576e:	e7b6      	b.n	80056de <_malloc_r+0x4a>
 8005770:	461a      	mov	r2, r3
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	42a3      	cmp	r3, r4
 8005776:	d1fb      	bne.n	8005770 <_malloc_r+0xdc>
 8005778:	2300      	movs	r3, #0
 800577a:	6053      	str	r3, [r2, #4]
 800577c:	e7de      	b.n	800573c <_malloc_r+0xa8>
 800577e:	230c      	movs	r3, #12
 8005780:	4630      	mov	r0, r6
 8005782:	6033      	str	r3, [r6, #0]
 8005784:	f000 f80c 	bl	80057a0 <__malloc_unlock>
 8005788:	e794      	b.n	80056b4 <_malloc_r+0x20>
 800578a:	6005      	str	r5, [r0, #0]
 800578c:	e7d6      	b.n	800573c <_malloc_r+0xa8>
 800578e:	bf00      	nop
 8005790:	20003f20 	.word	0x20003f20

08005794 <__malloc_lock>:
 8005794:	4801      	ldr	r0, [pc, #4]	@ (800579c <__malloc_lock+0x8>)
 8005796:	f7ff bf03 	b.w	80055a0 <__retarget_lock_acquire_recursive>
 800579a:	bf00      	nop
 800579c:	20003f18 	.word	0x20003f18

080057a0 <__malloc_unlock>:
 80057a0:	4801      	ldr	r0, [pc, #4]	@ (80057a8 <__malloc_unlock+0x8>)
 80057a2:	f7ff befe 	b.w	80055a2 <__retarget_lock_release_recursive>
 80057a6:	bf00      	nop
 80057a8:	20003f18 	.word	0x20003f18

080057ac <__ssputs_r>:
 80057ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057b0:	461f      	mov	r7, r3
 80057b2:	688e      	ldr	r6, [r1, #8]
 80057b4:	4682      	mov	sl, r0
 80057b6:	42be      	cmp	r6, r7
 80057b8:	460c      	mov	r4, r1
 80057ba:	4690      	mov	r8, r2
 80057bc:	680b      	ldr	r3, [r1, #0]
 80057be:	d82d      	bhi.n	800581c <__ssputs_r+0x70>
 80057c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80057c8:	d026      	beq.n	8005818 <__ssputs_r+0x6c>
 80057ca:	6965      	ldr	r5, [r4, #20]
 80057cc:	6909      	ldr	r1, [r1, #16]
 80057ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057d2:	eba3 0901 	sub.w	r9, r3, r1
 80057d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057da:	1c7b      	adds	r3, r7, #1
 80057dc:	444b      	add	r3, r9
 80057de:	106d      	asrs	r5, r5, #1
 80057e0:	429d      	cmp	r5, r3
 80057e2:	bf38      	it	cc
 80057e4:	461d      	movcc	r5, r3
 80057e6:	0553      	lsls	r3, r2, #21
 80057e8:	d527      	bpl.n	800583a <__ssputs_r+0x8e>
 80057ea:	4629      	mov	r1, r5
 80057ec:	f7ff ff52 	bl	8005694 <_malloc_r>
 80057f0:	4606      	mov	r6, r0
 80057f2:	b360      	cbz	r0, 800584e <__ssputs_r+0xa2>
 80057f4:	464a      	mov	r2, r9
 80057f6:	6921      	ldr	r1, [r4, #16]
 80057f8:	f7ff fed4 	bl	80055a4 <memcpy>
 80057fc:	89a3      	ldrh	r3, [r4, #12]
 80057fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005806:	81a3      	strh	r3, [r4, #12]
 8005808:	6126      	str	r6, [r4, #16]
 800580a:	444e      	add	r6, r9
 800580c:	6026      	str	r6, [r4, #0]
 800580e:	463e      	mov	r6, r7
 8005810:	6165      	str	r5, [r4, #20]
 8005812:	eba5 0509 	sub.w	r5, r5, r9
 8005816:	60a5      	str	r5, [r4, #8]
 8005818:	42be      	cmp	r6, r7
 800581a:	d900      	bls.n	800581e <__ssputs_r+0x72>
 800581c:	463e      	mov	r6, r7
 800581e:	4632      	mov	r2, r6
 8005820:	4641      	mov	r1, r8
 8005822:	6820      	ldr	r0, [r4, #0]
 8005824:	f000 faaa 	bl	8005d7c <memmove>
 8005828:	2000      	movs	r0, #0
 800582a:	68a3      	ldr	r3, [r4, #8]
 800582c:	1b9b      	subs	r3, r3, r6
 800582e:	60a3      	str	r3, [r4, #8]
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	4433      	add	r3, r6
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800583a:	462a      	mov	r2, r5
 800583c:	f000 fad6 	bl	8005dec <_realloc_r>
 8005840:	4606      	mov	r6, r0
 8005842:	2800      	cmp	r0, #0
 8005844:	d1e0      	bne.n	8005808 <__ssputs_r+0x5c>
 8005846:	4650      	mov	r0, sl
 8005848:	6921      	ldr	r1, [r4, #16]
 800584a:	f7ff feb9 	bl	80055c0 <_free_r>
 800584e:	230c      	movs	r3, #12
 8005850:	f8ca 3000 	str.w	r3, [sl]
 8005854:	89a3      	ldrh	r3, [r4, #12]
 8005856:	f04f 30ff 	mov.w	r0, #4294967295
 800585a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800585e:	81a3      	strh	r3, [r4, #12]
 8005860:	e7e9      	b.n	8005836 <__ssputs_r+0x8a>
	...

08005864 <_svfiprintf_r>:
 8005864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005868:	4698      	mov	r8, r3
 800586a:	898b      	ldrh	r3, [r1, #12]
 800586c:	4607      	mov	r7, r0
 800586e:	061b      	lsls	r3, r3, #24
 8005870:	460d      	mov	r5, r1
 8005872:	4614      	mov	r4, r2
 8005874:	b09d      	sub	sp, #116	@ 0x74
 8005876:	d510      	bpl.n	800589a <_svfiprintf_r+0x36>
 8005878:	690b      	ldr	r3, [r1, #16]
 800587a:	b973      	cbnz	r3, 800589a <_svfiprintf_r+0x36>
 800587c:	2140      	movs	r1, #64	@ 0x40
 800587e:	f7ff ff09 	bl	8005694 <_malloc_r>
 8005882:	6028      	str	r0, [r5, #0]
 8005884:	6128      	str	r0, [r5, #16]
 8005886:	b930      	cbnz	r0, 8005896 <_svfiprintf_r+0x32>
 8005888:	230c      	movs	r3, #12
 800588a:	603b      	str	r3, [r7, #0]
 800588c:	f04f 30ff 	mov.w	r0, #4294967295
 8005890:	b01d      	add	sp, #116	@ 0x74
 8005892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005896:	2340      	movs	r3, #64	@ 0x40
 8005898:	616b      	str	r3, [r5, #20]
 800589a:	2300      	movs	r3, #0
 800589c:	9309      	str	r3, [sp, #36]	@ 0x24
 800589e:	2320      	movs	r3, #32
 80058a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80058a4:	2330      	movs	r3, #48	@ 0x30
 80058a6:	f04f 0901 	mov.w	r9, #1
 80058aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80058ae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005a48 <_svfiprintf_r+0x1e4>
 80058b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058b6:	4623      	mov	r3, r4
 80058b8:	469a      	mov	sl, r3
 80058ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058be:	b10a      	cbz	r2, 80058c4 <_svfiprintf_r+0x60>
 80058c0:	2a25      	cmp	r2, #37	@ 0x25
 80058c2:	d1f9      	bne.n	80058b8 <_svfiprintf_r+0x54>
 80058c4:	ebba 0b04 	subs.w	fp, sl, r4
 80058c8:	d00b      	beq.n	80058e2 <_svfiprintf_r+0x7e>
 80058ca:	465b      	mov	r3, fp
 80058cc:	4622      	mov	r2, r4
 80058ce:	4629      	mov	r1, r5
 80058d0:	4638      	mov	r0, r7
 80058d2:	f7ff ff6b 	bl	80057ac <__ssputs_r>
 80058d6:	3001      	adds	r0, #1
 80058d8:	f000 80a7 	beq.w	8005a2a <_svfiprintf_r+0x1c6>
 80058dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058de:	445a      	add	r2, fp
 80058e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80058e2:	f89a 3000 	ldrb.w	r3, [sl]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 809f 	beq.w	8005a2a <_svfiprintf_r+0x1c6>
 80058ec:	2300      	movs	r3, #0
 80058ee:	f04f 32ff 	mov.w	r2, #4294967295
 80058f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058f6:	f10a 0a01 	add.w	sl, sl, #1
 80058fa:	9304      	str	r3, [sp, #16]
 80058fc:	9307      	str	r3, [sp, #28]
 80058fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005902:	931a      	str	r3, [sp, #104]	@ 0x68
 8005904:	4654      	mov	r4, sl
 8005906:	2205      	movs	r2, #5
 8005908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800590c:	484e      	ldr	r0, [pc, #312]	@ (8005a48 <_svfiprintf_r+0x1e4>)
 800590e:	f000 fa5f 	bl	8005dd0 <memchr>
 8005912:	9a04      	ldr	r2, [sp, #16]
 8005914:	b9d8      	cbnz	r0, 800594e <_svfiprintf_r+0xea>
 8005916:	06d0      	lsls	r0, r2, #27
 8005918:	bf44      	itt	mi
 800591a:	2320      	movmi	r3, #32
 800591c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005920:	0711      	lsls	r1, r2, #28
 8005922:	bf44      	itt	mi
 8005924:	232b      	movmi	r3, #43	@ 0x2b
 8005926:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800592a:	f89a 3000 	ldrb.w	r3, [sl]
 800592e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005930:	d015      	beq.n	800595e <_svfiprintf_r+0xfa>
 8005932:	4654      	mov	r4, sl
 8005934:	2000      	movs	r0, #0
 8005936:	f04f 0c0a 	mov.w	ip, #10
 800593a:	9a07      	ldr	r2, [sp, #28]
 800593c:	4621      	mov	r1, r4
 800593e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005942:	3b30      	subs	r3, #48	@ 0x30
 8005944:	2b09      	cmp	r3, #9
 8005946:	d94b      	bls.n	80059e0 <_svfiprintf_r+0x17c>
 8005948:	b1b0      	cbz	r0, 8005978 <_svfiprintf_r+0x114>
 800594a:	9207      	str	r2, [sp, #28]
 800594c:	e014      	b.n	8005978 <_svfiprintf_r+0x114>
 800594e:	eba0 0308 	sub.w	r3, r0, r8
 8005952:	fa09 f303 	lsl.w	r3, r9, r3
 8005956:	4313      	orrs	r3, r2
 8005958:	46a2      	mov	sl, r4
 800595a:	9304      	str	r3, [sp, #16]
 800595c:	e7d2      	b.n	8005904 <_svfiprintf_r+0xa0>
 800595e:	9b03      	ldr	r3, [sp, #12]
 8005960:	1d19      	adds	r1, r3, #4
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	9103      	str	r1, [sp, #12]
 8005966:	2b00      	cmp	r3, #0
 8005968:	bfbb      	ittet	lt
 800596a:	425b      	neglt	r3, r3
 800596c:	f042 0202 	orrlt.w	r2, r2, #2
 8005970:	9307      	strge	r3, [sp, #28]
 8005972:	9307      	strlt	r3, [sp, #28]
 8005974:	bfb8      	it	lt
 8005976:	9204      	strlt	r2, [sp, #16]
 8005978:	7823      	ldrb	r3, [r4, #0]
 800597a:	2b2e      	cmp	r3, #46	@ 0x2e
 800597c:	d10a      	bne.n	8005994 <_svfiprintf_r+0x130>
 800597e:	7863      	ldrb	r3, [r4, #1]
 8005980:	2b2a      	cmp	r3, #42	@ 0x2a
 8005982:	d132      	bne.n	80059ea <_svfiprintf_r+0x186>
 8005984:	9b03      	ldr	r3, [sp, #12]
 8005986:	3402      	adds	r4, #2
 8005988:	1d1a      	adds	r2, r3, #4
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	9203      	str	r2, [sp, #12]
 800598e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005992:	9305      	str	r3, [sp, #20]
 8005994:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005a4c <_svfiprintf_r+0x1e8>
 8005998:	2203      	movs	r2, #3
 800599a:	4650      	mov	r0, sl
 800599c:	7821      	ldrb	r1, [r4, #0]
 800599e:	f000 fa17 	bl	8005dd0 <memchr>
 80059a2:	b138      	cbz	r0, 80059b4 <_svfiprintf_r+0x150>
 80059a4:	2240      	movs	r2, #64	@ 0x40
 80059a6:	9b04      	ldr	r3, [sp, #16]
 80059a8:	eba0 000a 	sub.w	r0, r0, sl
 80059ac:	4082      	lsls	r2, r0
 80059ae:	4313      	orrs	r3, r2
 80059b0:	3401      	adds	r4, #1
 80059b2:	9304      	str	r3, [sp, #16]
 80059b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059b8:	2206      	movs	r2, #6
 80059ba:	4825      	ldr	r0, [pc, #148]	@ (8005a50 <_svfiprintf_r+0x1ec>)
 80059bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059c0:	f000 fa06 	bl	8005dd0 <memchr>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	d036      	beq.n	8005a36 <_svfiprintf_r+0x1d2>
 80059c8:	4b22      	ldr	r3, [pc, #136]	@ (8005a54 <_svfiprintf_r+0x1f0>)
 80059ca:	bb1b      	cbnz	r3, 8005a14 <_svfiprintf_r+0x1b0>
 80059cc:	9b03      	ldr	r3, [sp, #12]
 80059ce:	3307      	adds	r3, #7
 80059d0:	f023 0307 	bic.w	r3, r3, #7
 80059d4:	3308      	adds	r3, #8
 80059d6:	9303      	str	r3, [sp, #12]
 80059d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059da:	4433      	add	r3, r6
 80059dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80059de:	e76a      	b.n	80058b6 <_svfiprintf_r+0x52>
 80059e0:	460c      	mov	r4, r1
 80059e2:	2001      	movs	r0, #1
 80059e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80059e8:	e7a8      	b.n	800593c <_svfiprintf_r+0xd8>
 80059ea:	2300      	movs	r3, #0
 80059ec:	f04f 0c0a 	mov.w	ip, #10
 80059f0:	4619      	mov	r1, r3
 80059f2:	3401      	adds	r4, #1
 80059f4:	9305      	str	r3, [sp, #20]
 80059f6:	4620      	mov	r0, r4
 80059f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059fc:	3a30      	subs	r2, #48	@ 0x30
 80059fe:	2a09      	cmp	r2, #9
 8005a00:	d903      	bls.n	8005a0a <_svfiprintf_r+0x1a6>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0c6      	beq.n	8005994 <_svfiprintf_r+0x130>
 8005a06:	9105      	str	r1, [sp, #20]
 8005a08:	e7c4      	b.n	8005994 <_svfiprintf_r+0x130>
 8005a0a:	4604      	mov	r4, r0
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a12:	e7f0      	b.n	80059f6 <_svfiprintf_r+0x192>
 8005a14:	ab03      	add	r3, sp, #12
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	462a      	mov	r2, r5
 8005a1a:	4638      	mov	r0, r7
 8005a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8005a58 <_svfiprintf_r+0x1f4>)
 8005a1e:	a904      	add	r1, sp, #16
 8005a20:	f3af 8000 	nop.w
 8005a24:	1c42      	adds	r2, r0, #1
 8005a26:	4606      	mov	r6, r0
 8005a28:	d1d6      	bne.n	80059d8 <_svfiprintf_r+0x174>
 8005a2a:	89ab      	ldrh	r3, [r5, #12]
 8005a2c:	065b      	lsls	r3, r3, #25
 8005a2e:	f53f af2d 	bmi.w	800588c <_svfiprintf_r+0x28>
 8005a32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a34:	e72c      	b.n	8005890 <_svfiprintf_r+0x2c>
 8005a36:	ab03      	add	r3, sp, #12
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	462a      	mov	r2, r5
 8005a3c:	4638      	mov	r0, r7
 8005a3e:	4b06      	ldr	r3, [pc, #24]	@ (8005a58 <_svfiprintf_r+0x1f4>)
 8005a40:	a904      	add	r1, sp, #16
 8005a42:	f000 f87d 	bl	8005b40 <_printf_i>
 8005a46:	e7ed      	b.n	8005a24 <_svfiprintf_r+0x1c0>
 8005a48:	0800de0e 	.word	0x0800de0e
 8005a4c:	0800de14 	.word	0x0800de14
 8005a50:	0800de18 	.word	0x0800de18
 8005a54:	00000000 	.word	0x00000000
 8005a58:	080057ad 	.word	0x080057ad

08005a5c <_printf_common>:
 8005a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a60:	4616      	mov	r6, r2
 8005a62:	4698      	mov	r8, r3
 8005a64:	688a      	ldr	r2, [r1, #8]
 8005a66:	690b      	ldr	r3, [r1, #16]
 8005a68:	4607      	mov	r7, r0
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	bfb8      	it	lt
 8005a6e:	4613      	movlt	r3, r2
 8005a70:	6033      	str	r3, [r6, #0]
 8005a72:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a76:	460c      	mov	r4, r1
 8005a78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a7c:	b10a      	cbz	r2, 8005a82 <_printf_common+0x26>
 8005a7e:	3301      	adds	r3, #1
 8005a80:	6033      	str	r3, [r6, #0]
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	0699      	lsls	r1, r3, #26
 8005a86:	bf42      	ittt	mi
 8005a88:	6833      	ldrmi	r3, [r6, #0]
 8005a8a:	3302      	addmi	r3, #2
 8005a8c:	6033      	strmi	r3, [r6, #0]
 8005a8e:	6825      	ldr	r5, [r4, #0]
 8005a90:	f015 0506 	ands.w	r5, r5, #6
 8005a94:	d106      	bne.n	8005aa4 <_printf_common+0x48>
 8005a96:	f104 0a19 	add.w	sl, r4, #25
 8005a9a:	68e3      	ldr	r3, [r4, #12]
 8005a9c:	6832      	ldr	r2, [r6, #0]
 8005a9e:	1a9b      	subs	r3, r3, r2
 8005aa0:	42ab      	cmp	r3, r5
 8005aa2:	dc2b      	bgt.n	8005afc <_printf_common+0xa0>
 8005aa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005aa8:	6822      	ldr	r2, [r4, #0]
 8005aaa:	3b00      	subs	r3, #0
 8005aac:	bf18      	it	ne
 8005aae:	2301      	movne	r3, #1
 8005ab0:	0692      	lsls	r2, r2, #26
 8005ab2:	d430      	bmi.n	8005b16 <_printf_common+0xba>
 8005ab4:	4641      	mov	r1, r8
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005abc:	47c8      	blx	r9
 8005abe:	3001      	adds	r0, #1
 8005ac0:	d023      	beq.n	8005b0a <_printf_common+0xae>
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	6922      	ldr	r2, [r4, #16]
 8005ac6:	f003 0306 	and.w	r3, r3, #6
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	bf14      	ite	ne
 8005ace:	2500      	movne	r5, #0
 8005ad0:	6833      	ldreq	r3, [r6, #0]
 8005ad2:	f04f 0600 	mov.w	r6, #0
 8005ad6:	bf08      	it	eq
 8005ad8:	68e5      	ldreq	r5, [r4, #12]
 8005ada:	f104 041a 	add.w	r4, r4, #26
 8005ade:	bf08      	it	eq
 8005ae0:	1aed      	subeq	r5, r5, r3
 8005ae2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005ae6:	bf08      	it	eq
 8005ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005aec:	4293      	cmp	r3, r2
 8005aee:	bfc4      	itt	gt
 8005af0:	1a9b      	subgt	r3, r3, r2
 8005af2:	18ed      	addgt	r5, r5, r3
 8005af4:	42b5      	cmp	r5, r6
 8005af6:	d11a      	bne.n	8005b2e <_printf_common+0xd2>
 8005af8:	2000      	movs	r0, #0
 8005afa:	e008      	b.n	8005b0e <_printf_common+0xb2>
 8005afc:	2301      	movs	r3, #1
 8005afe:	4652      	mov	r2, sl
 8005b00:	4641      	mov	r1, r8
 8005b02:	4638      	mov	r0, r7
 8005b04:	47c8      	blx	r9
 8005b06:	3001      	adds	r0, #1
 8005b08:	d103      	bne.n	8005b12 <_printf_common+0xb6>
 8005b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b12:	3501      	adds	r5, #1
 8005b14:	e7c1      	b.n	8005a9a <_printf_common+0x3e>
 8005b16:	2030      	movs	r0, #48	@ 0x30
 8005b18:	18e1      	adds	r1, r4, r3
 8005b1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b24:	4422      	add	r2, r4
 8005b26:	3302      	adds	r3, #2
 8005b28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b2c:	e7c2      	b.n	8005ab4 <_printf_common+0x58>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	4622      	mov	r2, r4
 8005b32:	4641      	mov	r1, r8
 8005b34:	4638      	mov	r0, r7
 8005b36:	47c8      	blx	r9
 8005b38:	3001      	adds	r0, #1
 8005b3a:	d0e6      	beq.n	8005b0a <_printf_common+0xae>
 8005b3c:	3601      	adds	r6, #1
 8005b3e:	e7d9      	b.n	8005af4 <_printf_common+0x98>

08005b40 <_printf_i>:
 8005b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b44:	7e0f      	ldrb	r7, [r1, #24]
 8005b46:	4691      	mov	r9, r2
 8005b48:	2f78      	cmp	r7, #120	@ 0x78
 8005b4a:	4680      	mov	r8, r0
 8005b4c:	460c      	mov	r4, r1
 8005b4e:	469a      	mov	sl, r3
 8005b50:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b56:	d807      	bhi.n	8005b68 <_printf_i+0x28>
 8005b58:	2f62      	cmp	r7, #98	@ 0x62
 8005b5a:	d80a      	bhi.n	8005b72 <_printf_i+0x32>
 8005b5c:	2f00      	cmp	r7, #0
 8005b5e:	f000 80d1 	beq.w	8005d04 <_printf_i+0x1c4>
 8005b62:	2f58      	cmp	r7, #88	@ 0x58
 8005b64:	f000 80b8 	beq.w	8005cd8 <_printf_i+0x198>
 8005b68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b70:	e03a      	b.n	8005be8 <_printf_i+0xa8>
 8005b72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b76:	2b15      	cmp	r3, #21
 8005b78:	d8f6      	bhi.n	8005b68 <_printf_i+0x28>
 8005b7a:	a101      	add	r1, pc, #4	@ (adr r1, 8005b80 <_printf_i+0x40>)
 8005b7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b80:	08005bd9 	.word	0x08005bd9
 8005b84:	08005bed 	.word	0x08005bed
 8005b88:	08005b69 	.word	0x08005b69
 8005b8c:	08005b69 	.word	0x08005b69
 8005b90:	08005b69 	.word	0x08005b69
 8005b94:	08005b69 	.word	0x08005b69
 8005b98:	08005bed 	.word	0x08005bed
 8005b9c:	08005b69 	.word	0x08005b69
 8005ba0:	08005b69 	.word	0x08005b69
 8005ba4:	08005b69 	.word	0x08005b69
 8005ba8:	08005b69 	.word	0x08005b69
 8005bac:	08005ceb 	.word	0x08005ceb
 8005bb0:	08005c17 	.word	0x08005c17
 8005bb4:	08005ca5 	.word	0x08005ca5
 8005bb8:	08005b69 	.word	0x08005b69
 8005bbc:	08005b69 	.word	0x08005b69
 8005bc0:	08005d0d 	.word	0x08005d0d
 8005bc4:	08005b69 	.word	0x08005b69
 8005bc8:	08005c17 	.word	0x08005c17
 8005bcc:	08005b69 	.word	0x08005b69
 8005bd0:	08005b69 	.word	0x08005b69
 8005bd4:	08005cad 	.word	0x08005cad
 8005bd8:	6833      	ldr	r3, [r6, #0]
 8005bda:	1d1a      	adds	r2, r3, #4
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6032      	str	r2, [r6, #0]
 8005be0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005be4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005be8:	2301      	movs	r3, #1
 8005bea:	e09c      	b.n	8005d26 <_printf_i+0x1e6>
 8005bec:	6833      	ldr	r3, [r6, #0]
 8005bee:	6820      	ldr	r0, [r4, #0]
 8005bf0:	1d19      	adds	r1, r3, #4
 8005bf2:	6031      	str	r1, [r6, #0]
 8005bf4:	0606      	lsls	r6, r0, #24
 8005bf6:	d501      	bpl.n	8005bfc <_printf_i+0xbc>
 8005bf8:	681d      	ldr	r5, [r3, #0]
 8005bfa:	e003      	b.n	8005c04 <_printf_i+0xc4>
 8005bfc:	0645      	lsls	r5, r0, #25
 8005bfe:	d5fb      	bpl.n	8005bf8 <_printf_i+0xb8>
 8005c00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c04:	2d00      	cmp	r5, #0
 8005c06:	da03      	bge.n	8005c10 <_printf_i+0xd0>
 8005c08:	232d      	movs	r3, #45	@ 0x2d
 8005c0a:	426d      	negs	r5, r5
 8005c0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c10:	230a      	movs	r3, #10
 8005c12:	4858      	ldr	r0, [pc, #352]	@ (8005d74 <_printf_i+0x234>)
 8005c14:	e011      	b.n	8005c3a <_printf_i+0xfa>
 8005c16:	6821      	ldr	r1, [r4, #0]
 8005c18:	6833      	ldr	r3, [r6, #0]
 8005c1a:	0608      	lsls	r0, r1, #24
 8005c1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c20:	d402      	bmi.n	8005c28 <_printf_i+0xe8>
 8005c22:	0649      	lsls	r1, r1, #25
 8005c24:	bf48      	it	mi
 8005c26:	b2ad      	uxthmi	r5, r5
 8005c28:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c2a:	6033      	str	r3, [r6, #0]
 8005c2c:	bf14      	ite	ne
 8005c2e:	230a      	movne	r3, #10
 8005c30:	2308      	moveq	r3, #8
 8005c32:	4850      	ldr	r0, [pc, #320]	@ (8005d74 <_printf_i+0x234>)
 8005c34:	2100      	movs	r1, #0
 8005c36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c3a:	6866      	ldr	r6, [r4, #4]
 8005c3c:	2e00      	cmp	r6, #0
 8005c3e:	60a6      	str	r6, [r4, #8]
 8005c40:	db05      	blt.n	8005c4e <_printf_i+0x10e>
 8005c42:	6821      	ldr	r1, [r4, #0]
 8005c44:	432e      	orrs	r6, r5
 8005c46:	f021 0104 	bic.w	r1, r1, #4
 8005c4a:	6021      	str	r1, [r4, #0]
 8005c4c:	d04b      	beq.n	8005ce6 <_printf_i+0x1a6>
 8005c4e:	4616      	mov	r6, r2
 8005c50:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c54:	fb03 5711 	mls	r7, r3, r1, r5
 8005c58:	5dc7      	ldrb	r7, [r0, r7]
 8005c5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c5e:	462f      	mov	r7, r5
 8005c60:	42bb      	cmp	r3, r7
 8005c62:	460d      	mov	r5, r1
 8005c64:	d9f4      	bls.n	8005c50 <_printf_i+0x110>
 8005c66:	2b08      	cmp	r3, #8
 8005c68:	d10b      	bne.n	8005c82 <_printf_i+0x142>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	07df      	lsls	r7, r3, #31
 8005c6e:	d508      	bpl.n	8005c82 <_printf_i+0x142>
 8005c70:	6923      	ldr	r3, [r4, #16]
 8005c72:	6861      	ldr	r1, [r4, #4]
 8005c74:	4299      	cmp	r1, r3
 8005c76:	bfde      	ittt	le
 8005c78:	2330      	movle	r3, #48	@ 0x30
 8005c7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c82:	1b92      	subs	r2, r2, r6
 8005c84:	6122      	str	r2, [r4, #16]
 8005c86:	464b      	mov	r3, r9
 8005c88:	4621      	mov	r1, r4
 8005c8a:	4640      	mov	r0, r8
 8005c8c:	f8cd a000 	str.w	sl, [sp]
 8005c90:	aa03      	add	r2, sp, #12
 8005c92:	f7ff fee3 	bl	8005a5c <_printf_common>
 8005c96:	3001      	adds	r0, #1
 8005c98:	d14a      	bne.n	8005d30 <_printf_i+0x1f0>
 8005c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c9e:	b004      	add	sp, #16
 8005ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	f043 0320 	orr.w	r3, r3, #32
 8005caa:	6023      	str	r3, [r4, #0]
 8005cac:	2778      	movs	r7, #120	@ 0x78
 8005cae:	4832      	ldr	r0, [pc, #200]	@ (8005d78 <_printf_i+0x238>)
 8005cb0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	6831      	ldr	r1, [r6, #0]
 8005cb8:	061f      	lsls	r7, r3, #24
 8005cba:	f851 5b04 	ldr.w	r5, [r1], #4
 8005cbe:	d402      	bmi.n	8005cc6 <_printf_i+0x186>
 8005cc0:	065f      	lsls	r7, r3, #25
 8005cc2:	bf48      	it	mi
 8005cc4:	b2ad      	uxthmi	r5, r5
 8005cc6:	6031      	str	r1, [r6, #0]
 8005cc8:	07d9      	lsls	r1, r3, #31
 8005cca:	bf44      	itt	mi
 8005ccc:	f043 0320 	orrmi.w	r3, r3, #32
 8005cd0:	6023      	strmi	r3, [r4, #0]
 8005cd2:	b11d      	cbz	r5, 8005cdc <_printf_i+0x19c>
 8005cd4:	2310      	movs	r3, #16
 8005cd6:	e7ad      	b.n	8005c34 <_printf_i+0xf4>
 8005cd8:	4826      	ldr	r0, [pc, #152]	@ (8005d74 <_printf_i+0x234>)
 8005cda:	e7e9      	b.n	8005cb0 <_printf_i+0x170>
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	f023 0320 	bic.w	r3, r3, #32
 8005ce2:	6023      	str	r3, [r4, #0]
 8005ce4:	e7f6      	b.n	8005cd4 <_printf_i+0x194>
 8005ce6:	4616      	mov	r6, r2
 8005ce8:	e7bd      	b.n	8005c66 <_printf_i+0x126>
 8005cea:	6833      	ldr	r3, [r6, #0]
 8005cec:	6825      	ldr	r5, [r4, #0]
 8005cee:	1d18      	adds	r0, r3, #4
 8005cf0:	6961      	ldr	r1, [r4, #20]
 8005cf2:	6030      	str	r0, [r6, #0]
 8005cf4:	062e      	lsls	r6, r5, #24
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	d501      	bpl.n	8005cfe <_printf_i+0x1be>
 8005cfa:	6019      	str	r1, [r3, #0]
 8005cfc:	e002      	b.n	8005d04 <_printf_i+0x1c4>
 8005cfe:	0668      	lsls	r0, r5, #25
 8005d00:	d5fb      	bpl.n	8005cfa <_printf_i+0x1ba>
 8005d02:	8019      	strh	r1, [r3, #0]
 8005d04:	2300      	movs	r3, #0
 8005d06:	4616      	mov	r6, r2
 8005d08:	6123      	str	r3, [r4, #16]
 8005d0a:	e7bc      	b.n	8005c86 <_printf_i+0x146>
 8005d0c:	6833      	ldr	r3, [r6, #0]
 8005d0e:	2100      	movs	r1, #0
 8005d10:	1d1a      	adds	r2, r3, #4
 8005d12:	6032      	str	r2, [r6, #0]
 8005d14:	681e      	ldr	r6, [r3, #0]
 8005d16:	6862      	ldr	r2, [r4, #4]
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f000 f859 	bl	8005dd0 <memchr>
 8005d1e:	b108      	cbz	r0, 8005d24 <_printf_i+0x1e4>
 8005d20:	1b80      	subs	r0, r0, r6
 8005d22:	6060      	str	r0, [r4, #4]
 8005d24:	6863      	ldr	r3, [r4, #4]
 8005d26:	6123      	str	r3, [r4, #16]
 8005d28:	2300      	movs	r3, #0
 8005d2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d2e:	e7aa      	b.n	8005c86 <_printf_i+0x146>
 8005d30:	4632      	mov	r2, r6
 8005d32:	4649      	mov	r1, r9
 8005d34:	4640      	mov	r0, r8
 8005d36:	6923      	ldr	r3, [r4, #16]
 8005d38:	47d0      	blx	sl
 8005d3a:	3001      	adds	r0, #1
 8005d3c:	d0ad      	beq.n	8005c9a <_printf_i+0x15a>
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	079b      	lsls	r3, r3, #30
 8005d42:	d413      	bmi.n	8005d6c <_printf_i+0x22c>
 8005d44:	68e0      	ldr	r0, [r4, #12]
 8005d46:	9b03      	ldr	r3, [sp, #12]
 8005d48:	4298      	cmp	r0, r3
 8005d4a:	bfb8      	it	lt
 8005d4c:	4618      	movlt	r0, r3
 8005d4e:	e7a6      	b.n	8005c9e <_printf_i+0x15e>
 8005d50:	2301      	movs	r3, #1
 8005d52:	4632      	mov	r2, r6
 8005d54:	4649      	mov	r1, r9
 8005d56:	4640      	mov	r0, r8
 8005d58:	47d0      	blx	sl
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	d09d      	beq.n	8005c9a <_printf_i+0x15a>
 8005d5e:	3501      	adds	r5, #1
 8005d60:	68e3      	ldr	r3, [r4, #12]
 8005d62:	9903      	ldr	r1, [sp, #12]
 8005d64:	1a5b      	subs	r3, r3, r1
 8005d66:	42ab      	cmp	r3, r5
 8005d68:	dcf2      	bgt.n	8005d50 <_printf_i+0x210>
 8005d6a:	e7eb      	b.n	8005d44 <_printf_i+0x204>
 8005d6c:	2500      	movs	r5, #0
 8005d6e:	f104 0619 	add.w	r6, r4, #25
 8005d72:	e7f5      	b.n	8005d60 <_printf_i+0x220>
 8005d74:	0800de1f 	.word	0x0800de1f
 8005d78:	0800de30 	.word	0x0800de30

08005d7c <memmove>:
 8005d7c:	4288      	cmp	r0, r1
 8005d7e:	b510      	push	{r4, lr}
 8005d80:	eb01 0402 	add.w	r4, r1, r2
 8005d84:	d902      	bls.n	8005d8c <memmove+0x10>
 8005d86:	4284      	cmp	r4, r0
 8005d88:	4623      	mov	r3, r4
 8005d8a:	d807      	bhi.n	8005d9c <memmove+0x20>
 8005d8c:	1e43      	subs	r3, r0, #1
 8005d8e:	42a1      	cmp	r1, r4
 8005d90:	d008      	beq.n	8005da4 <memmove+0x28>
 8005d92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d9a:	e7f8      	b.n	8005d8e <memmove+0x12>
 8005d9c:	4601      	mov	r1, r0
 8005d9e:	4402      	add	r2, r0
 8005da0:	428a      	cmp	r2, r1
 8005da2:	d100      	bne.n	8005da6 <memmove+0x2a>
 8005da4:	bd10      	pop	{r4, pc}
 8005da6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005daa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dae:	e7f7      	b.n	8005da0 <memmove+0x24>

08005db0 <_sbrk_r>:
 8005db0:	b538      	push	{r3, r4, r5, lr}
 8005db2:	2300      	movs	r3, #0
 8005db4:	4d05      	ldr	r5, [pc, #20]	@ (8005dcc <_sbrk_r+0x1c>)
 8005db6:	4604      	mov	r4, r0
 8005db8:	4608      	mov	r0, r1
 8005dba:	602b      	str	r3, [r5, #0]
 8005dbc:	f7fc fb36 	bl	800242c <_sbrk>
 8005dc0:	1c43      	adds	r3, r0, #1
 8005dc2:	d102      	bne.n	8005dca <_sbrk_r+0x1a>
 8005dc4:	682b      	ldr	r3, [r5, #0]
 8005dc6:	b103      	cbz	r3, 8005dca <_sbrk_r+0x1a>
 8005dc8:	6023      	str	r3, [r4, #0]
 8005dca:	bd38      	pop	{r3, r4, r5, pc}
 8005dcc:	20003f14 	.word	0x20003f14

08005dd0 <memchr>:
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	b510      	push	{r4, lr}
 8005dd4:	b2c9      	uxtb	r1, r1
 8005dd6:	4402      	add	r2, r0
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	4618      	mov	r0, r3
 8005ddc:	d101      	bne.n	8005de2 <memchr+0x12>
 8005dde:	2000      	movs	r0, #0
 8005de0:	e003      	b.n	8005dea <memchr+0x1a>
 8005de2:	7804      	ldrb	r4, [r0, #0]
 8005de4:	3301      	adds	r3, #1
 8005de6:	428c      	cmp	r4, r1
 8005de8:	d1f6      	bne.n	8005dd8 <memchr+0x8>
 8005dea:	bd10      	pop	{r4, pc}

08005dec <_realloc_r>:
 8005dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005df0:	4607      	mov	r7, r0
 8005df2:	4614      	mov	r4, r2
 8005df4:	460d      	mov	r5, r1
 8005df6:	b921      	cbnz	r1, 8005e02 <_realloc_r+0x16>
 8005df8:	4611      	mov	r1, r2
 8005dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfe:	f7ff bc49 	b.w	8005694 <_malloc_r>
 8005e02:	b92a      	cbnz	r2, 8005e10 <_realloc_r+0x24>
 8005e04:	f7ff fbdc 	bl	80055c0 <_free_r>
 8005e08:	4625      	mov	r5, r4
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e10:	f000 f81a 	bl	8005e48 <_malloc_usable_size_r>
 8005e14:	4284      	cmp	r4, r0
 8005e16:	4606      	mov	r6, r0
 8005e18:	d802      	bhi.n	8005e20 <_realloc_r+0x34>
 8005e1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e1e:	d8f4      	bhi.n	8005e0a <_realloc_r+0x1e>
 8005e20:	4621      	mov	r1, r4
 8005e22:	4638      	mov	r0, r7
 8005e24:	f7ff fc36 	bl	8005694 <_malloc_r>
 8005e28:	4680      	mov	r8, r0
 8005e2a:	b908      	cbnz	r0, 8005e30 <_realloc_r+0x44>
 8005e2c:	4645      	mov	r5, r8
 8005e2e:	e7ec      	b.n	8005e0a <_realloc_r+0x1e>
 8005e30:	42b4      	cmp	r4, r6
 8005e32:	4622      	mov	r2, r4
 8005e34:	4629      	mov	r1, r5
 8005e36:	bf28      	it	cs
 8005e38:	4632      	movcs	r2, r6
 8005e3a:	f7ff fbb3 	bl	80055a4 <memcpy>
 8005e3e:	4629      	mov	r1, r5
 8005e40:	4638      	mov	r0, r7
 8005e42:	f7ff fbbd 	bl	80055c0 <_free_r>
 8005e46:	e7f1      	b.n	8005e2c <_realloc_r+0x40>

08005e48 <_malloc_usable_size_r>:
 8005e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e4c:	1f18      	subs	r0, r3, #4
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	bfbc      	itt	lt
 8005e52:	580b      	ldrlt	r3, [r1, r0]
 8005e54:	18c0      	addlt	r0, r0, r3
 8005e56:	4770      	bx	lr

08005e58 <powf>:
 8005e58:	b570      	push	{r4, r5, r6, lr}
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	4606      	mov	r6, r0
 8005e5e:	f000 fa43 	bl	80062e8 <__ieee754_powf>
 8005e62:	4621      	mov	r1, r4
 8005e64:	4605      	mov	r5, r0
 8005e66:	4620      	mov	r0, r4
 8005e68:	f7fa fc44 	bl	80006f4 <__aeabi_fcmpun>
 8005e6c:	bb68      	cbnz	r0, 8005eca <powf+0x72>
 8005e6e:	2100      	movs	r1, #0
 8005e70:	4630      	mov	r0, r6
 8005e72:	f7fa fc0d 	bl	8000690 <__aeabi_fcmpeq>
 8005e76:	b190      	cbz	r0, 8005e9e <powf+0x46>
 8005e78:	2100      	movs	r1, #0
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f7fa fc08 	bl	8000690 <__aeabi_fcmpeq>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d133      	bne.n	8005eec <powf+0x94>
 8005e84:	4620      	mov	r0, r4
 8005e86:	f000 f8c1 	bl	800600c <finitef>
 8005e8a:	b1f0      	cbz	r0, 8005eca <powf+0x72>
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f7fa fc08 	bl	80006a4 <__aeabi_fcmplt>
 8005e94:	b1c8      	cbz	r0, 8005eca <powf+0x72>
 8005e96:	f7ff fb59 	bl	800554c <__errno>
 8005e9a:	2322      	movs	r3, #34	@ 0x22
 8005e9c:	e014      	b.n	8005ec8 <powf+0x70>
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f000 f8b4 	bl	800600c <finitef>
 8005ea4:	b998      	cbnz	r0, 8005ece <powf+0x76>
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	f000 f8b0 	bl	800600c <finitef>
 8005eac:	b178      	cbz	r0, 8005ece <powf+0x76>
 8005eae:	4620      	mov	r0, r4
 8005eb0:	f000 f8ac 	bl	800600c <finitef>
 8005eb4:	b158      	cbz	r0, 8005ece <powf+0x76>
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	4628      	mov	r0, r5
 8005eba:	f7fa fc1b 	bl	80006f4 <__aeabi_fcmpun>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	d0e9      	beq.n	8005e96 <powf+0x3e>
 8005ec2:	f7ff fb43 	bl	800554c <__errno>
 8005ec6:	2321      	movs	r3, #33	@ 0x21
 8005ec8:	6003      	str	r3, [r0, #0]
 8005eca:	4628      	mov	r0, r5
 8005ecc:	bd70      	pop	{r4, r5, r6, pc}
 8005ece:	2100      	movs	r1, #0
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	f7fa fbdd 	bl	8000690 <__aeabi_fcmpeq>
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	d0f7      	beq.n	8005eca <powf+0x72>
 8005eda:	4630      	mov	r0, r6
 8005edc:	f000 f896 	bl	800600c <finitef>
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	d0f2      	beq.n	8005eca <powf+0x72>
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f000 f891 	bl	800600c <finitef>
 8005eea:	e7d3      	b.n	8005e94 <powf+0x3c>
 8005eec:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8005ef0:	e7eb      	b.n	8005eca <powf+0x72>

08005ef2 <sqrtf>:
 8005ef2:	b538      	push	{r3, r4, r5, lr}
 8005ef4:	4605      	mov	r5, r0
 8005ef6:	f000 f891 	bl	800601c <__ieee754_sqrtf>
 8005efa:	4629      	mov	r1, r5
 8005efc:	4604      	mov	r4, r0
 8005efe:	4628      	mov	r0, r5
 8005f00:	f7fa fbf8 	bl	80006f4 <__aeabi_fcmpun>
 8005f04:	b968      	cbnz	r0, 8005f22 <sqrtf+0x30>
 8005f06:	2100      	movs	r1, #0
 8005f08:	4628      	mov	r0, r5
 8005f0a:	f7fa fbcb 	bl	80006a4 <__aeabi_fcmplt>
 8005f0e:	b140      	cbz	r0, 8005f22 <sqrtf+0x30>
 8005f10:	f7ff fb1c 	bl	800554c <__errno>
 8005f14:	2321      	movs	r3, #33	@ 0x21
 8005f16:	2100      	movs	r1, #0
 8005f18:	6003      	str	r3, [r0, #0]
 8005f1a:	4608      	mov	r0, r1
 8005f1c:	f7fa fad8 	bl	80004d0 <__aeabi_fdiv>
 8005f20:	4604      	mov	r4, r0
 8005f22:	4620      	mov	r0, r4
 8005f24:	bd38      	pop	{r3, r4, r5, pc}
	...

08005f28 <cosf>:
 8005f28:	b507      	push	{r0, r1, r2, lr}
 8005f2a:	4a1a      	ldr	r2, [pc, #104]	@ (8005f94 <cosf+0x6c>)
 8005f2c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8005f30:	4293      	cmp	r3, r2
 8005f32:	4601      	mov	r1, r0
 8005f34:	d805      	bhi.n	8005f42 <cosf+0x1a>
 8005f36:	2100      	movs	r1, #0
 8005f38:	b003      	add	sp, #12
 8005f3a:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f3e:	f000 b8dd 	b.w	80060fc <__kernel_cosf>
 8005f42:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005f46:	d304      	bcc.n	8005f52 <cosf+0x2a>
 8005f48:	f7fa f904 	bl	8000154 <__aeabi_fsub>
 8005f4c:	b003      	add	sp, #12
 8005f4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f52:	4669      	mov	r1, sp
 8005f54:	f000 fd28 	bl	80069a8 <__ieee754_rem_pio2f>
 8005f58:	f000 0203 	and.w	r2, r0, #3
 8005f5c:	2a01      	cmp	r2, #1
 8005f5e:	d007      	beq.n	8005f70 <cosf+0x48>
 8005f60:	2a02      	cmp	r2, #2
 8005f62:	d00c      	beq.n	8005f7e <cosf+0x56>
 8005f64:	b982      	cbnz	r2, 8005f88 <cosf+0x60>
 8005f66:	9901      	ldr	r1, [sp, #4]
 8005f68:	9800      	ldr	r0, [sp, #0]
 8005f6a:	f000 f8c7 	bl	80060fc <__kernel_cosf>
 8005f6e:	e7ed      	b.n	8005f4c <cosf+0x24>
 8005f70:	9901      	ldr	r1, [sp, #4]
 8005f72:	9800      	ldr	r0, [sp, #0]
 8005f74:	f000 f942 	bl	80061fc <__kernel_sinf>
 8005f78:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8005f7c:	e7e6      	b.n	8005f4c <cosf+0x24>
 8005f7e:	9901      	ldr	r1, [sp, #4]
 8005f80:	9800      	ldr	r0, [sp, #0]
 8005f82:	f000 f8bb 	bl	80060fc <__kernel_cosf>
 8005f86:	e7f7      	b.n	8005f78 <cosf+0x50>
 8005f88:	2201      	movs	r2, #1
 8005f8a:	9901      	ldr	r1, [sp, #4]
 8005f8c:	9800      	ldr	r0, [sp, #0]
 8005f8e:	f000 f935 	bl	80061fc <__kernel_sinf>
 8005f92:	e7db      	b.n	8005f4c <cosf+0x24>
 8005f94:	3f490fd8 	.word	0x3f490fd8

08005f98 <sinf>:
 8005f98:	b507      	push	{r0, r1, r2, lr}
 8005f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8006008 <sinf+0x70>)
 8005f9c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	4601      	mov	r1, r0
 8005fa4:	d806      	bhi.n	8005fb4 <sinf+0x1c>
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	2100      	movs	r1, #0
 8005faa:	b003      	add	sp, #12
 8005fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fb0:	f000 b924 	b.w	80061fc <__kernel_sinf>
 8005fb4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005fb8:	d304      	bcc.n	8005fc4 <sinf+0x2c>
 8005fba:	f7fa f8cb 	bl	8000154 <__aeabi_fsub>
 8005fbe:	b003      	add	sp, #12
 8005fc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8005fc4:	4669      	mov	r1, sp
 8005fc6:	f000 fcef 	bl	80069a8 <__ieee754_rem_pio2f>
 8005fca:	f000 0003 	and.w	r0, r0, #3
 8005fce:	2801      	cmp	r0, #1
 8005fd0:	d008      	beq.n	8005fe4 <sinf+0x4c>
 8005fd2:	2802      	cmp	r0, #2
 8005fd4:	d00b      	beq.n	8005fee <sinf+0x56>
 8005fd6:	b990      	cbnz	r0, 8005ffe <sinf+0x66>
 8005fd8:	2201      	movs	r2, #1
 8005fda:	9901      	ldr	r1, [sp, #4]
 8005fdc:	9800      	ldr	r0, [sp, #0]
 8005fde:	f000 f90d 	bl	80061fc <__kernel_sinf>
 8005fe2:	e7ec      	b.n	8005fbe <sinf+0x26>
 8005fe4:	9901      	ldr	r1, [sp, #4]
 8005fe6:	9800      	ldr	r0, [sp, #0]
 8005fe8:	f000 f888 	bl	80060fc <__kernel_cosf>
 8005fec:	e7e7      	b.n	8005fbe <sinf+0x26>
 8005fee:	2201      	movs	r2, #1
 8005ff0:	9901      	ldr	r1, [sp, #4]
 8005ff2:	9800      	ldr	r0, [sp, #0]
 8005ff4:	f000 f902 	bl	80061fc <__kernel_sinf>
 8005ff8:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8005ffc:	e7df      	b.n	8005fbe <sinf+0x26>
 8005ffe:	9901      	ldr	r1, [sp, #4]
 8006000:	9800      	ldr	r0, [sp, #0]
 8006002:	f000 f87b 	bl	80060fc <__kernel_cosf>
 8006006:	e7f7      	b.n	8005ff8 <sinf+0x60>
 8006008:	3f490fd8 	.word	0x3f490fd8

0800600c <finitef>:
 800600c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006010:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8006014:	bfac      	ite	ge
 8006016:	2000      	movge	r0, #0
 8006018:	2001      	movlt	r0, #1
 800601a:	4770      	bx	lr

0800601c <__ieee754_sqrtf>:
 800601c:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8006020:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006028:	4603      	mov	r3, r0
 800602a:	4604      	mov	r4, r0
 800602c:	d30a      	bcc.n	8006044 <__ieee754_sqrtf+0x28>
 800602e:	4601      	mov	r1, r0
 8006030:	f7fa f99a 	bl	8000368 <__aeabi_fmul>
 8006034:	4601      	mov	r1, r0
 8006036:	4620      	mov	r0, r4
 8006038:	f7fa f88e 	bl	8000158 <__addsf3>
 800603c:	4604      	mov	r4, r0
 800603e:	4620      	mov	r0, r4
 8006040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006044:	2a00      	cmp	r2, #0
 8006046:	d0fa      	beq.n	800603e <__ieee754_sqrtf+0x22>
 8006048:	2800      	cmp	r0, #0
 800604a:	da06      	bge.n	800605a <__ieee754_sqrtf+0x3e>
 800604c:	4601      	mov	r1, r0
 800604e:	f7fa f881 	bl	8000154 <__aeabi_fsub>
 8006052:	4601      	mov	r1, r0
 8006054:	f7fa fa3c 	bl	80004d0 <__aeabi_fdiv>
 8006058:	e7f0      	b.n	800603c <__ieee754_sqrtf+0x20>
 800605a:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 800605e:	d03c      	beq.n	80060da <__ieee754_sqrtf+0xbe>
 8006060:	15c2      	asrs	r2, r0, #23
 8006062:	2400      	movs	r4, #0
 8006064:	2019      	movs	r0, #25
 8006066:	4626      	mov	r6, r4
 8006068:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800606c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006070:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8006074:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006078:	07d2      	lsls	r2, r2, #31
 800607a:	bf58      	it	pl
 800607c:	005b      	lslpl	r3, r3, #1
 800607e:	106d      	asrs	r5, r5, #1
 8006080:	005b      	lsls	r3, r3, #1
 8006082:	1872      	adds	r2, r6, r1
 8006084:	429a      	cmp	r2, r3
 8006086:	bfcf      	iteee	gt
 8006088:	461a      	movgt	r2, r3
 800608a:	1856      	addle	r6, r2, r1
 800608c:	1864      	addle	r4, r4, r1
 800608e:	1a9a      	suble	r2, r3, r2
 8006090:	3801      	subs	r0, #1
 8006092:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8006096:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800609a:	d1f2      	bne.n	8006082 <__ieee754_sqrtf+0x66>
 800609c:	b1ba      	cbz	r2, 80060ce <__ieee754_sqrtf+0xb2>
 800609e:	4e15      	ldr	r6, [pc, #84]	@ (80060f4 <__ieee754_sqrtf+0xd8>)
 80060a0:	4f15      	ldr	r7, [pc, #84]	@ (80060f8 <__ieee754_sqrtf+0xdc>)
 80060a2:	6830      	ldr	r0, [r6, #0]
 80060a4:	6839      	ldr	r1, [r7, #0]
 80060a6:	f7fa f855 	bl	8000154 <__aeabi_fsub>
 80060aa:	f8d6 8000 	ldr.w	r8, [r6]
 80060ae:	4601      	mov	r1, r0
 80060b0:	4640      	mov	r0, r8
 80060b2:	f7fa fb01 	bl	80006b8 <__aeabi_fcmple>
 80060b6:	b150      	cbz	r0, 80060ce <__ieee754_sqrtf+0xb2>
 80060b8:	6830      	ldr	r0, [r6, #0]
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	f7fa f84c 	bl	8000158 <__addsf3>
 80060c0:	6836      	ldr	r6, [r6, #0]
 80060c2:	4601      	mov	r1, r0
 80060c4:	4630      	mov	r0, r6
 80060c6:	f7fa faed 	bl	80006a4 <__aeabi_fcmplt>
 80060ca:	b170      	cbz	r0, 80060ea <__ieee754_sqrtf+0xce>
 80060cc:	3402      	adds	r4, #2
 80060ce:	1064      	asrs	r4, r4, #1
 80060d0:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 80060d4:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 80060d8:	e7b1      	b.n	800603e <__ieee754_sqrtf+0x22>
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	0218      	lsls	r0, r3, #8
 80060de:	460a      	mov	r2, r1
 80060e0:	f101 0101 	add.w	r1, r1, #1
 80060e4:	d5f9      	bpl.n	80060da <__ieee754_sqrtf+0xbe>
 80060e6:	4252      	negs	r2, r2
 80060e8:	e7bb      	b.n	8006062 <__ieee754_sqrtf+0x46>
 80060ea:	3401      	adds	r4, #1
 80060ec:	f024 0401 	bic.w	r4, r4, #1
 80060f0:	e7ed      	b.n	80060ce <__ieee754_sqrtf+0xb2>
 80060f2:	bf00      	nop
 80060f4:	0800de48 	.word	0x0800de48
 80060f8:	0800de44 	.word	0x0800de44

080060fc <__kernel_cosf>:
 80060fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006100:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8006104:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 8006108:	4606      	mov	r6, r0
 800610a:	4688      	mov	r8, r1
 800610c:	d203      	bcs.n	8006116 <__kernel_cosf+0x1a>
 800610e:	f7fa fb07 	bl	8000720 <__aeabi_f2iz>
 8006112:	2800      	cmp	r0, #0
 8006114:	d05c      	beq.n	80061d0 <__kernel_cosf+0xd4>
 8006116:	4631      	mov	r1, r6
 8006118:	4630      	mov	r0, r6
 800611a:	f7fa f925 	bl	8000368 <__aeabi_fmul>
 800611e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006122:	4604      	mov	r4, r0
 8006124:	f7fa f920 	bl	8000368 <__aeabi_fmul>
 8006128:	492b      	ldr	r1, [pc, #172]	@ (80061d8 <__kernel_cosf+0xdc>)
 800612a:	4607      	mov	r7, r0
 800612c:	4620      	mov	r0, r4
 800612e:	f7fa f91b 	bl	8000368 <__aeabi_fmul>
 8006132:	492a      	ldr	r1, [pc, #168]	@ (80061dc <__kernel_cosf+0xe0>)
 8006134:	f7fa f810 	bl	8000158 <__addsf3>
 8006138:	4621      	mov	r1, r4
 800613a:	f7fa f915 	bl	8000368 <__aeabi_fmul>
 800613e:	4928      	ldr	r1, [pc, #160]	@ (80061e0 <__kernel_cosf+0xe4>)
 8006140:	f7fa f808 	bl	8000154 <__aeabi_fsub>
 8006144:	4621      	mov	r1, r4
 8006146:	f7fa f90f 	bl	8000368 <__aeabi_fmul>
 800614a:	4926      	ldr	r1, [pc, #152]	@ (80061e4 <__kernel_cosf+0xe8>)
 800614c:	f7fa f804 	bl	8000158 <__addsf3>
 8006150:	4621      	mov	r1, r4
 8006152:	f7fa f909 	bl	8000368 <__aeabi_fmul>
 8006156:	4924      	ldr	r1, [pc, #144]	@ (80061e8 <__kernel_cosf+0xec>)
 8006158:	f7f9 fffc 	bl	8000154 <__aeabi_fsub>
 800615c:	4621      	mov	r1, r4
 800615e:	f7fa f903 	bl	8000368 <__aeabi_fmul>
 8006162:	4922      	ldr	r1, [pc, #136]	@ (80061ec <__kernel_cosf+0xf0>)
 8006164:	f7f9 fff8 	bl	8000158 <__addsf3>
 8006168:	4621      	mov	r1, r4
 800616a:	f7fa f8fd 	bl	8000368 <__aeabi_fmul>
 800616e:	4621      	mov	r1, r4
 8006170:	f7fa f8fa 	bl	8000368 <__aeabi_fmul>
 8006174:	4641      	mov	r1, r8
 8006176:	4604      	mov	r4, r0
 8006178:	4630      	mov	r0, r6
 800617a:	f7fa f8f5 	bl	8000368 <__aeabi_fmul>
 800617e:	4601      	mov	r1, r0
 8006180:	4620      	mov	r0, r4
 8006182:	f7f9 ffe7 	bl	8000154 <__aeabi_fsub>
 8006186:	4b1a      	ldr	r3, [pc, #104]	@ (80061f0 <__kernel_cosf+0xf4>)
 8006188:	4604      	mov	r4, r0
 800618a:	429d      	cmp	r5, r3
 800618c:	d80a      	bhi.n	80061a4 <__kernel_cosf+0xa8>
 800618e:	4601      	mov	r1, r0
 8006190:	4638      	mov	r0, r7
 8006192:	f7f9 ffdf 	bl	8000154 <__aeabi_fsub>
 8006196:	4601      	mov	r1, r0
 8006198:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800619c:	f7f9 ffda 	bl	8000154 <__aeabi_fsub>
 80061a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061a4:	4b13      	ldr	r3, [pc, #76]	@ (80061f4 <__kernel_cosf+0xf8>)
 80061a6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80061aa:	429d      	cmp	r5, r3
 80061ac:	bf8c      	ite	hi
 80061ae:	4d12      	ldrhi	r5, [pc, #72]	@ (80061f8 <__kernel_cosf+0xfc>)
 80061b0:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 80061b4:	4629      	mov	r1, r5
 80061b6:	f7f9 ffcd 	bl	8000154 <__aeabi_fsub>
 80061ba:	4629      	mov	r1, r5
 80061bc:	4606      	mov	r6, r0
 80061be:	4638      	mov	r0, r7
 80061c0:	f7f9 ffc8 	bl	8000154 <__aeabi_fsub>
 80061c4:	4621      	mov	r1, r4
 80061c6:	f7f9 ffc5 	bl	8000154 <__aeabi_fsub>
 80061ca:	4601      	mov	r1, r0
 80061cc:	4630      	mov	r0, r6
 80061ce:	e7e5      	b.n	800619c <__kernel_cosf+0xa0>
 80061d0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80061d4:	e7e4      	b.n	80061a0 <__kernel_cosf+0xa4>
 80061d6:	bf00      	nop
 80061d8:	ad47d74e 	.word	0xad47d74e
 80061dc:	310f74f6 	.word	0x310f74f6
 80061e0:	3493f27c 	.word	0x3493f27c
 80061e4:	37d00d01 	.word	0x37d00d01
 80061e8:	3ab60b61 	.word	0x3ab60b61
 80061ec:	3d2aaaab 	.word	0x3d2aaaab
 80061f0:	3e999999 	.word	0x3e999999
 80061f4:	3f480000 	.word	0x3f480000
 80061f8:	3e900000 	.word	0x3e900000

080061fc <__kernel_sinf>:
 80061fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006200:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8006204:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8006208:	4604      	mov	r4, r0
 800620a:	460f      	mov	r7, r1
 800620c:	4691      	mov	r9, r2
 800620e:	d203      	bcs.n	8006218 <__kernel_sinf+0x1c>
 8006210:	f7fa fa86 	bl	8000720 <__aeabi_f2iz>
 8006214:	2800      	cmp	r0, #0
 8006216:	d035      	beq.n	8006284 <__kernel_sinf+0x88>
 8006218:	4621      	mov	r1, r4
 800621a:	4620      	mov	r0, r4
 800621c:	f7fa f8a4 	bl	8000368 <__aeabi_fmul>
 8006220:	4605      	mov	r5, r0
 8006222:	4601      	mov	r1, r0
 8006224:	4620      	mov	r0, r4
 8006226:	f7fa f89f 	bl	8000368 <__aeabi_fmul>
 800622a:	4929      	ldr	r1, [pc, #164]	@ (80062d0 <__kernel_sinf+0xd4>)
 800622c:	4606      	mov	r6, r0
 800622e:	4628      	mov	r0, r5
 8006230:	f7fa f89a 	bl	8000368 <__aeabi_fmul>
 8006234:	4927      	ldr	r1, [pc, #156]	@ (80062d4 <__kernel_sinf+0xd8>)
 8006236:	f7f9 ff8d 	bl	8000154 <__aeabi_fsub>
 800623a:	4629      	mov	r1, r5
 800623c:	f7fa f894 	bl	8000368 <__aeabi_fmul>
 8006240:	4925      	ldr	r1, [pc, #148]	@ (80062d8 <__kernel_sinf+0xdc>)
 8006242:	f7f9 ff89 	bl	8000158 <__addsf3>
 8006246:	4629      	mov	r1, r5
 8006248:	f7fa f88e 	bl	8000368 <__aeabi_fmul>
 800624c:	4923      	ldr	r1, [pc, #140]	@ (80062dc <__kernel_sinf+0xe0>)
 800624e:	f7f9 ff81 	bl	8000154 <__aeabi_fsub>
 8006252:	4629      	mov	r1, r5
 8006254:	f7fa f888 	bl	8000368 <__aeabi_fmul>
 8006258:	4921      	ldr	r1, [pc, #132]	@ (80062e0 <__kernel_sinf+0xe4>)
 800625a:	f7f9 ff7d 	bl	8000158 <__addsf3>
 800625e:	4680      	mov	r8, r0
 8006260:	f1b9 0f00 	cmp.w	r9, #0
 8006264:	d111      	bne.n	800628a <__kernel_sinf+0x8e>
 8006266:	4601      	mov	r1, r0
 8006268:	4628      	mov	r0, r5
 800626a:	f7fa f87d 	bl	8000368 <__aeabi_fmul>
 800626e:	491d      	ldr	r1, [pc, #116]	@ (80062e4 <__kernel_sinf+0xe8>)
 8006270:	f7f9 ff70 	bl	8000154 <__aeabi_fsub>
 8006274:	4631      	mov	r1, r6
 8006276:	f7fa f877 	bl	8000368 <__aeabi_fmul>
 800627a:	4601      	mov	r1, r0
 800627c:	4620      	mov	r0, r4
 800627e:	f7f9 ff6b 	bl	8000158 <__addsf3>
 8006282:	4604      	mov	r4, r0
 8006284:	4620      	mov	r0, r4
 8006286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800628a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800628e:	4638      	mov	r0, r7
 8006290:	f7fa f86a 	bl	8000368 <__aeabi_fmul>
 8006294:	4641      	mov	r1, r8
 8006296:	4681      	mov	r9, r0
 8006298:	4630      	mov	r0, r6
 800629a:	f7fa f865 	bl	8000368 <__aeabi_fmul>
 800629e:	4601      	mov	r1, r0
 80062a0:	4648      	mov	r0, r9
 80062a2:	f7f9 ff57 	bl	8000154 <__aeabi_fsub>
 80062a6:	4629      	mov	r1, r5
 80062a8:	f7fa f85e 	bl	8000368 <__aeabi_fmul>
 80062ac:	4639      	mov	r1, r7
 80062ae:	f7f9 ff51 	bl	8000154 <__aeabi_fsub>
 80062b2:	490c      	ldr	r1, [pc, #48]	@ (80062e4 <__kernel_sinf+0xe8>)
 80062b4:	4605      	mov	r5, r0
 80062b6:	4630      	mov	r0, r6
 80062b8:	f7fa f856 	bl	8000368 <__aeabi_fmul>
 80062bc:	4601      	mov	r1, r0
 80062be:	4628      	mov	r0, r5
 80062c0:	f7f9 ff4a 	bl	8000158 <__addsf3>
 80062c4:	4601      	mov	r1, r0
 80062c6:	4620      	mov	r0, r4
 80062c8:	f7f9 ff44 	bl	8000154 <__aeabi_fsub>
 80062cc:	e7d9      	b.n	8006282 <__kernel_sinf+0x86>
 80062ce:	bf00      	nop
 80062d0:	2f2ec9d3 	.word	0x2f2ec9d3
 80062d4:	32d72f34 	.word	0x32d72f34
 80062d8:	3638ef1b 	.word	0x3638ef1b
 80062dc:	39500d01 	.word	0x39500d01
 80062e0:	3c088889 	.word	0x3c088889
 80062e4:	3e2aaaab 	.word	0x3e2aaaab

080062e8 <__ieee754_powf>:
 80062e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ec:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 80062f0:	4681      	mov	r9, r0
 80062f2:	460f      	mov	r7, r1
 80062f4:	4606      	mov	r6, r0
 80062f6:	460c      	mov	r4, r1
 80062f8:	b087      	sub	sp, #28
 80062fa:	d10c      	bne.n	8006316 <__ieee754_powf+0x2e>
 80062fc:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 8006300:	0076      	lsls	r6, r6, #1
 8006302:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8006306:	f240 8310 	bls.w	800692a <__ieee754_powf+0x642>
 800630a:	4639      	mov	r1, r7
 800630c:	4648      	mov	r0, r9
 800630e:	f7f9 ff23 	bl	8000158 <__addsf3>
 8006312:	4601      	mov	r1, r0
 8006314:	e043      	b.n	800639e <__ieee754_powf+0xb6>
 8006316:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800631a:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800631e:	d802      	bhi.n	8006326 <__ieee754_powf+0x3e>
 8006320:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8006324:	d908      	bls.n	8006338 <__ieee754_powf+0x50>
 8006326:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800632a:	d1ee      	bne.n	800630a <__ieee754_powf+0x22>
 800632c:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8006330:	0064      	lsls	r4, r4, #1
 8006332:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8006336:	e7e6      	b.n	8006306 <__ieee754_powf+0x1e>
 8006338:	2800      	cmp	r0, #0
 800633a:	da1f      	bge.n	800637c <__ieee754_powf+0x94>
 800633c:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 8006340:	f080 82f8 	bcs.w	8006934 <__ieee754_powf+0x64c>
 8006344:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8006348:	d32f      	bcc.n	80063aa <__ieee754_powf+0xc2>
 800634a:	ea4f 53eb 	mov.w	r3, fp, asr #23
 800634e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8006352:	fa4b f503 	asr.w	r5, fp, r3
 8006356:	fa05 f303 	lsl.w	r3, r5, r3
 800635a:	455b      	cmp	r3, fp
 800635c:	d123      	bne.n	80063a6 <__ieee754_powf+0xbe>
 800635e:	f005 0501 	and.w	r5, r5, #1
 8006362:	f1c5 0502 	rsb	r5, r5, #2
 8006366:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800636a:	d11f      	bne.n	80063ac <__ieee754_powf+0xc4>
 800636c:	2c00      	cmp	r4, #0
 800636e:	4649      	mov	r1, r9
 8006370:	da15      	bge.n	800639e <__ieee754_powf+0xb6>
 8006372:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006376:	f7fa f8ab 	bl	80004d0 <__aeabi_fdiv>
 800637a:	e7ca      	b.n	8006312 <__ieee754_powf+0x2a>
 800637c:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8006380:	d111      	bne.n	80063a6 <__ieee754_powf+0xbe>
 8006382:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8006386:	f000 82d0 	beq.w	800692a <__ieee754_powf+0x642>
 800638a:	d904      	bls.n	8006396 <__ieee754_powf+0xae>
 800638c:	2c00      	cmp	r4, #0
 800638e:	f280 82cf 	bge.w	8006930 <__ieee754_powf+0x648>
 8006392:	2100      	movs	r1, #0
 8006394:	e003      	b.n	800639e <__ieee754_powf+0xb6>
 8006396:	2c00      	cmp	r4, #0
 8006398:	dafb      	bge.n	8006392 <__ieee754_powf+0xaa>
 800639a:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800639e:	4608      	mov	r0, r1
 80063a0:	b007      	add	sp, #28
 80063a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a6:	2500      	movs	r5, #0
 80063a8:	e7dd      	b.n	8006366 <__ieee754_powf+0x7e>
 80063aa:	2500      	movs	r5, #0
 80063ac:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80063b0:	d104      	bne.n	80063bc <__ieee754_powf+0xd4>
 80063b2:	4649      	mov	r1, r9
 80063b4:	4648      	mov	r0, r9
 80063b6:	f7f9 ffd7 	bl	8000368 <__aeabi_fmul>
 80063ba:	e7aa      	b.n	8006312 <__ieee754_powf+0x2a>
 80063bc:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80063c0:	f040 82bd 	bne.w	800693e <__ieee754_powf+0x656>
 80063c4:	2e00      	cmp	r6, #0
 80063c6:	f2c0 82ba 	blt.w	800693e <__ieee754_powf+0x656>
 80063ca:	4648      	mov	r0, r9
 80063cc:	b007      	add	sp, #28
 80063ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d2:	f7ff be23 	b.w	800601c <__ieee754_sqrtf>
 80063d6:	2d01      	cmp	r5, #1
 80063d8:	d1e1      	bne.n	800639e <__ieee754_powf+0xb6>
 80063da:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 80063de:	e798      	b.n	8006312 <__ieee754_powf+0x2a>
 80063e0:	0ff3      	lsrs	r3, r6, #31
 80063e2:	3b01      	subs	r3, #1
 80063e4:	9303      	str	r3, [sp, #12]
 80063e6:	432b      	orrs	r3, r5
 80063e8:	d101      	bne.n	80063ee <__ieee754_powf+0x106>
 80063ea:	4649      	mov	r1, r9
 80063ec:	e2c5      	b.n	800697a <__ieee754_powf+0x692>
 80063ee:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 80063f2:	f240 809b 	bls.w	800652c <__ieee754_powf+0x244>
 80063f6:	4b46      	ldr	r3, [pc, #280]	@ (8006510 <__ieee754_powf+0x228>)
 80063f8:	4598      	cmp	r8, r3
 80063fa:	d807      	bhi.n	800640c <__ieee754_powf+0x124>
 80063fc:	2c00      	cmp	r4, #0
 80063fe:	da0a      	bge.n	8006416 <__ieee754_powf+0x12e>
 8006400:	2000      	movs	r0, #0
 8006402:	b007      	add	sp, #28
 8006404:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006408:	f000 bc9d 	b.w	8006d46 <__math_oflowf>
 800640c:	4b41      	ldr	r3, [pc, #260]	@ (8006514 <__ieee754_powf+0x22c>)
 800640e:	4598      	cmp	r8, r3
 8006410:	d907      	bls.n	8006422 <__ieee754_powf+0x13a>
 8006412:	2c00      	cmp	r4, #0
 8006414:	dcf4      	bgt.n	8006400 <__ieee754_powf+0x118>
 8006416:	2000      	movs	r0, #0
 8006418:	b007      	add	sp, #28
 800641a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641e:	f000 bc8e 	b.w	8006d3e <__math_uflowf>
 8006422:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006426:	f7f9 fe95 	bl	8000154 <__aeabi_fsub>
 800642a:	493b      	ldr	r1, [pc, #236]	@ (8006518 <__ieee754_powf+0x230>)
 800642c:	4606      	mov	r6, r0
 800642e:	f7f9 ff9b 	bl	8000368 <__aeabi_fmul>
 8006432:	493a      	ldr	r1, [pc, #232]	@ (800651c <__ieee754_powf+0x234>)
 8006434:	4680      	mov	r8, r0
 8006436:	4630      	mov	r0, r6
 8006438:	f7f9 ff96 	bl	8000368 <__aeabi_fmul>
 800643c:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8006440:	4681      	mov	r9, r0
 8006442:	4630      	mov	r0, r6
 8006444:	f7f9 ff90 	bl	8000368 <__aeabi_fmul>
 8006448:	4601      	mov	r1, r0
 800644a:	4835      	ldr	r0, [pc, #212]	@ (8006520 <__ieee754_powf+0x238>)
 800644c:	f7f9 fe82 	bl	8000154 <__aeabi_fsub>
 8006450:	4631      	mov	r1, r6
 8006452:	f7f9 ff89 	bl	8000368 <__aeabi_fmul>
 8006456:	4601      	mov	r1, r0
 8006458:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800645c:	f7f9 fe7a 	bl	8000154 <__aeabi_fsub>
 8006460:	4631      	mov	r1, r6
 8006462:	4682      	mov	sl, r0
 8006464:	4630      	mov	r0, r6
 8006466:	f7f9 ff7f 	bl	8000368 <__aeabi_fmul>
 800646a:	4601      	mov	r1, r0
 800646c:	4650      	mov	r0, sl
 800646e:	f7f9 ff7b 	bl	8000368 <__aeabi_fmul>
 8006472:	492c      	ldr	r1, [pc, #176]	@ (8006524 <__ieee754_powf+0x23c>)
 8006474:	f7f9 ff78 	bl	8000368 <__aeabi_fmul>
 8006478:	4601      	mov	r1, r0
 800647a:	4648      	mov	r0, r9
 800647c:	f7f9 fe6a 	bl	8000154 <__aeabi_fsub>
 8006480:	4601      	mov	r1, r0
 8006482:	4606      	mov	r6, r0
 8006484:	4640      	mov	r0, r8
 8006486:	f7f9 fe67 	bl	8000158 <__addsf3>
 800648a:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800648e:	f02b 0b0f 	bic.w	fp, fp, #15
 8006492:	4641      	mov	r1, r8
 8006494:	4658      	mov	r0, fp
 8006496:	f7f9 fe5d 	bl	8000154 <__aeabi_fsub>
 800649a:	4601      	mov	r1, r0
 800649c:	4630      	mov	r0, r6
 800649e:	f7f9 fe59 	bl	8000154 <__aeabi_fsub>
 80064a2:	9b03      	ldr	r3, [sp, #12]
 80064a4:	3d01      	subs	r5, #1
 80064a6:	f36f 040b 	bfc	r4, #0, #12
 80064aa:	431d      	orrs	r5, r3
 80064ac:	4606      	mov	r6, r0
 80064ae:	4621      	mov	r1, r4
 80064b0:	4638      	mov	r0, r7
 80064b2:	bf14      	ite	ne
 80064b4:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 80064b8:	4d1b      	ldreq	r5, [pc, #108]	@ (8006528 <__ieee754_powf+0x240>)
 80064ba:	f7f9 fe4b 	bl	8000154 <__aeabi_fsub>
 80064be:	4659      	mov	r1, fp
 80064c0:	f7f9 ff52 	bl	8000368 <__aeabi_fmul>
 80064c4:	4639      	mov	r1, r7
 80064c6:	4680      	mov	r8, r0
 80064c8:	4630      	mov	r0, r6
 80064ca:	f7f9 ff4d 	bl	8000368 <__aeabi_fmul>
 80064ce:	4601      	mov	r1, r0
 80064d0:	4640      	mov	r0, r8
 80064d2:	f7f9 fe41 	bl	8000158 <__addsf3>
 80064d6:	4621      	mov	r1, r4
 80064d8:	4606      	mov	r6, r0
 80064da:	4658      	mov	r0, fp
 80064dc:	f7f9 ff44 	bl	8000368 <__aeabi_fmul>
 80064e0:	4601      	mov	r1, r0
 80064e2:	4607      	mov	r7, r0
 80064e4:	4630      	mov	r0, r6
 80064e6:	f7f9 fe37 	bl	8000158 <__addsf3>
 80064ea:	2800      	cmp	r0, #0
 80064ec:	4604      	mov	r4, r0
 80064ee:	4680      	mov	r8, r0
 80064f0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80064f4:	f340 813f 	ble.w	8006776 <__ieee754_powf+0x48e>
 80064f8:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80064fc:	f240 8128 	bls.w	8006750 <__ieee754_powf+0x468>
 8006500:	2100      	movs	r1, #0
 8006502:	4628      	mov	r0, r5
 8006504:	f7fa f8ce 	bl	80006a4 <__aeabi_fcmplt>
 8006508:	3800      	subs	r0, #0
 800650a:	bf18      	it	ne
 800650c:	2001      	movne	r0, #1
 800650e:	e778      	b.n	8006402 <__ieee754_powf+0x11a>
 8006510:	3f7ffff3 	.word	0x3f7ffff3
 8006514:	3f800007 	.word	0x3f800007
 8006518:	3fb8aa00 	.word	0x3fb8aa00
 800651c:	36eca570 	.word	0x36eca570
 8006520:	3eaaaaab 	.word	0x3eaaaaab
 8006524:	3fb8aa3b 	.word	0x3fb8aa3b
 8006528:	bf800000 	.word	0xbf800000
 800652c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8006530:	f040 810a 	bne.w	8006748 <__ieee754_powf+0x460>
 8006534:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8006538:	f7f9 ff16 	bl	8000368 <__aeabi_fmul>
 800653c:	f06f 0217 	mvn.w	r2, #23
 8006540:	4682      	mov	sl, r0
 8006542:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8006546:	3b7f      	subs	r3, #127	@ 0x7f
 8006548:	441a      	add	r2, r3
 800654a:	4b95      	ldr	r3, [pc, #596]	@ (80067a0 <__ieee754_powf+0x4b8>)
 800654c:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 8006550:	459a      	cmp	sl, r3
 8006552:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 8006556:	dd06      	ble.n	8006566 <__ieee754_powf+0x27e>
 8006558:	4b92      	ldr	r3, [pc, #584]	@ (80067a4 <__ieee754_powf+0x4bc>)
 800655a:	459a      	cmp	sl, r3
 800655c:	f340 80f6 	ble.w	800674c <__ieee754_powf+0x464>
 8006560:	3201      	adds	r2, #1
 8006562:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 8006566:	2300      	movs	r3, #0
 8006568:	9301      	str	r3, [sp, #4]
 800656a:	9205      	str	r2, [sp, #20]
 800656c:	4b8e      	ldr	r3, [pc, #568]	@ (80067a8 <__ieee754_powf+0x4c0>)
 800656e:	9a01      	ldr	r2, [sp, #4]
 8006570:	4630      	mov	r0, r6
 8006572:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8006576:	46b2      	mov	sl, r6
 8006578:	4659      	mov	r1, fp
 800657a:	f7f9 fdeb 	bl	8000154 <__aeabi_fsub>
 800657e:	4631      	mov	r1, r6
 8006580:	4681      	mov	r9, r0
 8006582:	4658      	mov	r0, fp
 8006584:	f7f9 fde8 	bl	8000158 <__addsf3>
 8006588:	4601      	mov	r1, r0
 800658a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800658e:	f7f9 ff9f 	bl	80004d0 <__aeabi_fdiv>
 8006592:	4601      	mov	r1, r0
 8006594:	9004      	str	r0, [sp, #16]
 8006596:	4648      	mov	r0, r9
 8006598:	f7f9 fee6 	bl	8000368 <__aeabi_fmul>
 800659c:	9002      	str	r0, [sp, #8]
 800659e:	9b02      	ldr	r3, [sp, #8]
 80065a0:	1076      	asrs	r6, r6, #1
 80065a2:	f36f 030b 	bfc	r3, #0, #12
 80065a6:	4698      	mov	r8, r3
 80065a8:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 80065ac:	9b01      	ldr	r3, [sp, #4]
 80065ae:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 80065b2:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 80065b6:	4631      	mov	r1, r6
 80065b8:	4640      	mov	r0, r8
 80065ba:	f7f9 fed5 	bl	8000368 <__aeabi_fmul>
 80065be:	4601      	mov	r1, r0
 80065c0:	4648      	mov	r0, r9
 80065c2:	f7f9 fdc7 	bl	8000154 <__aeabi_fsub>
 80065c6:	4659      	mov	r1, fp
 80065c8:	4681      	mov	r9, r0
 80065ca:	4630      	mov	r0, r6
 80065cc:	f7f9 fdc2 	bl	8000154 <__aeabi_fsub>
 80065d0:	4601      	mov	r1, r0
 80065d2:	4650      	mov	r0, sl
 80065d4:	f7f9 fdbe 	bl	8000154 <__aeabi_fsub>
 80065d8:	4641      	mov	r1, r8
 80065da:	f7f9 fec5 	bl	8000368 <__aeabi_fmul>
 80065de:	4601      	mov	r1, r0
 80065e0:	4648      	mov	r0, r9
 80065e2:	f7f9 fdb7 	bl	8000154 <__aeabi_fsub>
 80065e6:	9b04      	ldr	r3, [sp, #16]
 80065e8:	4619      	mov	r1, r3
 80065ea:	f7f9 febd 	bl	8000368 <__aeabi_fmul>
 80065ee:	9902      	ldr	r1, [sp, #8]
 80065f0:	4683      	mov	fp, r0
 80065f2:	4608      	mov	r0, r1
 80065f4:	f7f9 feb8 	bl	8000368 <__aeabi_fmul>
 80065f8:	4606      	mov	r6, r0
 80065fa:	496c      	ldr	r1, [pc, #432]	@ (80067ac <__ieee754_powf+0x4c4>)
 80065fc:	f7f9 feb4 	bl	8000368 <__aeabi_fmul>
 8006600:	496b      	ldr	r1, [pc, #428]	@ (80067b0 <__ieee754_powf+0x4c8>)
 8006602:	f7f9 fda9 	bl	8000158 <__addsf3>
 8006606:	4631      	mov	r1, r6
 8006608:	f7f9 feae 	bl	8000368 <__aeabi_fmul>
 800660c:	4969      	ldr	r1, [pc, #420]	@ (80067b4 <__ieee754_powf+0x4cc>)
 800660e:	f7f9 fda3 	bl	8000158 <__addsf3>
 8006612:	4631      	mov	r1, r6
 8006614:	f7f9 fea8 	bl	8000368 <__aeabi_fmul>
 8006618:	4967      	ldr	r1, [pc, #412]	@ (80067b8 <__ieee754_powf+0x4d0>)
 800661a:	f7f9 fd9d 	bl	8000158 <__addsf3>
 800661e:	4631      	mov	r1, r6
 8006620:	f7f9 fea2 	bl	8000368 <__aeabi_fmul>
 8006624:	4965      	ldr	r1, [pc, #404]	@ (80067bc <__ieee754_powf+0x4d4>)
 8006626:	f7f9 fd97 	bl	8000158 <__addsf3>
 800662a:	4631      	mov	r1, r6
 800662c:	f7f9 fe9c 	bl	8000368 <__aeabi_fmul>
 8006630:	4963      	ldr	r1, [pc, #396]	@ (80067c0 <__ieee754_powf+0x4d8>)
 8006632:	f7f9 fd91 	bl	8000158 <__addsf3>
 8006636:	4631      	mov	r1, r6
 8006638:	4681      	mov	r9, r0
 800663a:	4630      	mov	r0, r6
 800663c:	f7f9 fe94 	bl	8000368 <__aeabi_fmul>
 8006640:	4601      	mov	r1, r0
 8006642:	4648      	mov	r0, r9
 8006644:	f7f9 fe90 	bl	8000368 <__aeabi_fmul>
 8006648:	4606      	mov	r6, r0
 800664a:	4641      	mov	r1, r8
 800664c:	9802      	ldr	r0, [sp, #8]
 800664e:	f7f9 fd83 	bl	8000158 <__addsf3>
 8006652:	4659      	mov	r1, fp
 8006654:	f7f9 fe88 	bl	8000368 <__aeabi_fmul>
 8006658:	4631      	mov	r1, r6
 800665a:	f7f9 fd7d 	bl	8000158 <__addsf3>
 800665e:	4641      	mov	r1, r8
 8006660:	4681      	mov	r9, r0
 8006662:	4640      	mov	r0, r8
 8006664:	f7f9 fe80 	bl	8000368 <__aeabi_fmul>
 8006668:	4956      	ldr	r1, [pc, #344]	@ (80067c4 <__ieee754_powf+0x4dc>)
 800666a:	4682      	mov	sl, r0
 800666c:	f7f9 fd74 	bl	8000158 <__addsf3>
 8006670:	4649      	mov	r1, r9
 8006672:	f7f9 fd71 	bl	8000158 <__addsf3>
 8006676:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800667a:	f026 060f 	bic.w	r6, r6, #15
 800667e:	4631      	mov	r1, r6
 8006680:	4640      	mov	r0, r8
 8006682:	f7f9 fe71 	bl	8000368 <__aeabi_fmul>
 8006686:	494f      	ldr	r1, [pc, #316]	@ (80067c4 <__ieee754_powf+0x4dc>)
 8006688:	4680      	mov	r8, r0
 800668a:	4630      	mov	r0, r6
 800668c:	f7f9 fd62 	bl	8000154 <__aeabi_fsub>
 8006690:	4651      	mov	r1, sl
 8006692:	f7f9 fd5f 	bl	8000154 <__aeabi_fsub>
 8006696:	4601      	mov	r1, r0
 8006698:	4648      	mov	r0, r9
 800669a:	f7f9 fd5b 	bl	8000154 <__aeabi_fsub>
 800669e:	9902      	ldr	r1, [sp, #8]
 80066a0:	f7f9 fe62 	bl	8000368 <__aeabi_fmul>
 80066a4:	4631      	mov	r1, r6
 80066a6:	4681      	mov	r9, r0
 80066a8:	4658      	mov	r0, fp
 80066aa:	f7f9 fe5d 	bl	8000368 <__aeabi_fmul>
 80066ae:	4601      	mov	r1, r0
 80066b0:	4648      	mov	r0, r9
 80066b2:	f7f9 fd51 	bl	8000158 <__addsf3>
 80066b6:	4682      	mov	sl, r0
 80066b8:	4601      	mov	r1, r0
 80066ba:	4640      	mov	r0, r8
 80066bc:	f7f9 fd4c 	bl	8000158 <__addsf3>
 80066c0:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 80066c4:	f026 060f 	bic.w	r6, r6, #15
 80066c8:	4630      	mov	r0, r6
 80066ca:	493f      	ldr	r1, [pc, #252]	@ (80067c8 <__ieee754_powf+0x4e0>)
 80066cc:	f7f9 fe4c 	bl	8000368 <__aeabi_fmul>
 80066d0:	4641      	mov	r1, r8
 80066d2:	4681      	mov	r9, r0
 80066d4:	4630      	mov	r0, r6
 80066d6:	f7f9 fd3d 	bl	8000154 <__aeabi_fsub>
 80066da:	4601      	mov	r1, r0
 80066dc:	4650      	mov	r0, sl
 80066de:	f7f9 fd39 	bl	8000154 <__aeabi_fsub>
 80066e2:	493a      	ldr	r1, [pc, #232]	@ (80067cc <__ieee754_powf+0x4e4>)
 80066e4:	f7f9 fe40 	bl	8000368 <__aeabi_fmul>
 80066e8:	4939      	ldr	r1, [pc, #228]	@ (80067d0 <__ieee754_powf+0x4e8>)
 80066ea:	4680      	mov	r8, r0
 80066ec:	4630      	mov	r0, r6
 80066ee:	f7f9 fe3b 	bl	8000368 <__aeabi_fmul>
 80066f2:	4601      	mov	r1, r0
 80066f4:	4640      	mov	r0, r8
 80066f6:	f7f9 fd2f 	bl	8000158 <__addsf3>
 80066fa:	4b36      	ldr	r3, [pc, #216]	@ (80067d4 <__ieee754_powf+0x4ec>)
 80066fc:	9a01      	ldr	r2, [sp, #4]
 80066fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006702:	f7f9 fd29 	bl	8000158 <__addsf3>
 8006706:	9a05      	ldr	r2, [sp, #20]
 8006708:	4606      	mov	r6, r0
 800670a:	4610      	mov	r0, r2
 800670c:	f7f9 fdd8 	bl	80002c0 <__aeabi_i2f>
 8006710:	4680      	mov	r8, r0
 8006712:	4b31      	ldr	r3, [pc, #196]	@ (80067d8 <__ieee754_powf+0x4f0>)
 8006714:	9a01      	ldr	r2, [sp, #4]
 8006716:	4631      	mov	r1, r6
 8006718:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 800671c:	4648      	mov	r0, r9
 800671e:	f7f9 fd1b 	bl	8000158 <__addsf3>
 8006722:	4651      	mov	r1, sl
 8006724:	f7f9 fd18 	bl	8000158 <__addsf3>
 8006728:	4641      	mov	r1, r8
 800672a:	f7f9 fd15 	bl	8000158 <__addsf3>
 800672e:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8006732:	f02b 0b0f 	bic.w	fp, fp, #15
 8006736:	4641      	mov	r1, r8
 8006738:	4658      	mov	r0, fp
 800673a:	f7f9 fd0b 	bl	8000154 <__aeabi_fsub>
 800673e:	4651      	mov	r1, sl
 8006740:	f7f9 fd08 	bl	8000154 <__aeabi_fsub>
 8006744:	4649      	mov	r1, r9
 8006746:	e6a6      	b.n	8006496 <__ieee754_powf+0x1ae>
 8006748:	2200      	movs	r2, #0
 800674a:	e6fa      	b.n	8006542 <__ieee754_powf+0x25a>
 800674c:	2301      	movs	r3, #1
 800674e:	e70b      	b.n	8006568 <__ieee754_powf+0x280>
 8006750:	d148      	bne.n	80067e4 <__ieee754_powf+0x4fc>
 8006752:	4922      	ldr	r1, [pc, #136]	@ (80067dc <__ieee754_powf+0x4f4>)
 8006754:	4630      	mov	r0, r6
 8006756:	f7f9 fcff 	bl	8000158 <__addsf3>
 800675a:	4639      	mov	r1, r7
 800675c:	4681      	mov	r9, r0
 800675e:	4620      	mov	r0, r4
 8006760:	f7f9 fcf8 	bl	8000154 <__aeabi_fsub>
 8006764:	4601      	mov	r1, r0
 8006766:	4648      	mov	r0, r9
 8006768:	f7f9 ffba 	bl	80006e0 <__aeabi_fcmpgt>
 800676c:	2800      	cmp	r0, #0
 800676e:	f47f aec7 	bne.w	8006500 <__ieee754_powf+0x218>
 8006772:	2386      	movs	r3, #134	@ 0x86
 8006774:	e03b      	b.n	80067ee <__ieee754_powf+0x506>
 8006776:	4a1a      	ldr	r2, [pc, #104]	@ (80067e0 <__ieee754_powf+0x4f8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d907      	bls.n	800678c <__ieee754_powf+0x4a4>
 800677c:	2100      	movs	r1, #0
 800677e:	4628      	mov	r0, r5
 8006780:	f7f9 ff90 	bl	80006a4 <__aeabi_fcmplt>
 8006784:	3800      	subs	r0, #0
 8006786:	bf18      	it	ne
 8006788:	2001      	movne	r0, #1
 800678a:	e645      	b.n	8006418 <__ieee754_powf+0x130>
 800678c:	d12a      	bne.n	80067e4 <__ieee754_powf+0x4fc>
 800678e:	4639      	mov	r1, r7
 8006790:	f7f9 fce0 	bl	8000154 <__aeabi_fsub>
 8006794:	4631      	mov	r1, r6
 8006796:	f7f9 ff99 	bl	80006cc <__aeabi_fcmpge>
 800679a:	2800      	cmp	r0, #0
 800679c:	d0e9      	beq.n	8006772 <__ieee754_powf+0x48a>
 800679e:	e7ed      	b.n	800677c <__ieee754_powf+0x494>
 80067a0:	001cc471 	.word	0x001cc471
 80067a4:	005db3d6 	.word	0x005db3d6
 80067a8:	0800de5c 	.word	0x0800de5c
 80067ac:	3e53f142 	.word	0x3e53f142
 80067b0:	3e6c3255 	.word	0x3e6c3255
 80067b4:	3e8ba305 	.word	0x3e8ba305
 80067b8:	3eaaaaab 	.word	0x3eaaaaab
 80067bc:	3edb6db7 	.word	0x3edb6db7
 80067c0:	3f19999a 	.word	0x3f19999a
 80067c4:	40400000 	.word	0x40400000
 80067c8:	3f763800 	.word	0x3f763800
 80067cc:	3f76384f 	.word	0x3f76384f
 80067d0:	369dc3a0 	.word	0x369dc3a0
 80067d4:	0800de4c 	.word	0x0800de4c
 80067d8:	0800de54 	.word	0x0800de54
 80067dc:	3338aa3c 	.word	0x3338aa3c
 80067e0:	43160000 	.word	0x43160000
 80067e4:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80067e8:	f240 809b 	bls.w	8006922 <__ieee754_powf+0x63a>
 80067ec:	15db      	asrs	r3, r3, #23
 80067ee:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 80067f2:	3b7e      	subs	r3, #126	@ 0x7e
 80067f4:	411c      	asrs	r4, r3
 80067f6:	4444      	add	r4, r8
 80067f8:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 80067fc:	4961      	ldr	r1, [pc, #388]	@ (8006984 <__ieee754_powf+0x69c>)
 80067fe:	3b7f      	subs	r3, #127	@ 0x7f
 8006800:	4119      	asrs	r1, r3
 8006802:	4021      	ands	r1, r4
 8006804:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8006808:	f1c3 0317 	rsb	r3, r3, #23
 800680c:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 8006810:	4638      	mov	r0, r7
 8006812:	411c      	asrs	r4, r3
 8006814:	f1b8 0f00 	cmp.w	r8, #0
 8006818:	bfb8      	it	lt
 800681a:	4264      	neglt	r4, r4
 800681c:	f7f9 fc9a 	bl	8000154 <__aeabi_fsub>
 8006820:	4607      	mov	r7, r0
 8006822:	4631      	mov	r1, r6
 8006824:	4638      	mov	r0, r7
 8006826:	f7f9 fc97 	bl	8000158 <__addsf3>
 800682a:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 800682e:	f028 080f 	bic.w	r8, r8, #15
 8006832:	4640      	mov	r0, r8
 8006834:	4954      	ldr	r1, [pc, #336]	@ (8006988 <__ieee754_powf+0x6a0>)
 8006836:	f7f9 fd97 	bl	8000368 <__aeabi_fmul>
 800683a:	4639      	mov	r1, r7
 800683c:	4681      	mov	r9, r0
 800683e:	4640      	mov	r0, r8
 8006840:	f7f9 fc88 	bl	8000154 <__aeabi_fsub>
 8006844:	4601      	mov	r1, r0
 8006846:	4630      	mov	r0, r6
 8006848:	f7f9 fc84 	bl	8000154 <__aeabi_fsub>
 800684c:	494f      	ldr	r1, [pc, #316]	@ (800698c <__ieee754_powf+0x6a4>)
 800684e:	f7f9 fd8b 	bl	8000368 <__aeabi_fmul>
 8006852:	494f      	ldr	r1, [pc, #316]	@ (8006990 <__ieee754_powf+0x6a8>)
 8006854:	4606      	mov	r6, r0
 8006856:	4640      	mov	r0, r8
 8006858:	f7f9 fd86 	bl	8000368 <__aeabi_fmul>
 800685c:	4601      	mov	r1, r0
 800685e:	4630      	mov	r0, r6
 8006860:	f7f9 fc7a 	bl	8000158 <__addsf3>
 8006864:	4607      	mov	r7, r0
 8006866:	4601      	mov	r1, r0
 8006868:	4648      	mov	r0, r9
 800686a:	f7f9 fc75 	bl	8000158 <__addsf3>
 800686e:	4649      	mov	r1, r9
 8006870:	4606      	mov	r6, r0
 8006872:	f7f9 fc6f 	bl	8000154 <__aeabi_fsub>
 8006876:	4601      	mov	r1, r0
 8006878:	4638      	mov	r0, r7
 800687a:	f7f9 fc6b 	bl	8000154 <__aeabi_fsub>
 800687e:	4631      	mov	r1, r6
 8006880:	4680      	mov	r8, r0
 8006882:	4630      	mov	r0, r6
 8006884:	f7f9 fd70 	bl	8000368 <__aeabi_fmul>
 8006888:	4607      	mov	r7, r0
 800688a:	4942      	ldr	r1, [pc, #264]	@ (8006994 <__ieee754_powf+0x6ac>)
 800688c:	f7f9 fd6c 	bl	8000368 <__aeabi_fmul>
 8006890:	4941      	ldr	r1, [pc, #260]	@ (8006998 <__ieee754_powf+0x6b0>)
 8006892:	f7f9 fc5f 	bl	8000154 <__aeabi_fsub>
 8006896:	4639      	mov	r1, r7
 8006898:	f7f9 fd66 	bl	8000368 <__aeabi_fmul>
 800689c:	493f      	ldr	r1, [pc, #252]	@ (800699c <__ieee754_powf+0x6b4>)
 800689e:	f7f9 fc5b 	bl	8000158 <__addsf3>
 80068a2:	4639      	mov	r1, r7
 80068a4:	f7f9 fd60 	bl	8000368 <__aeabi_fmul>
 80068a8:	493d      	ldr	r1, [pc, #244]	@ (80069a0 <__ieee754_powf+0x6b8>)
 80068aa:	f7f9 fc53 	bl	8000154 <__aeabi_fsub>
 80068ae:	4639      	mov	r1, r7
 80068b0:	f7f9 fd5a 	bl	8000368 <__aeabi_fmul>
 80068b4:	493b      	ldr	r1, [pc, #236]	@ (80069a4 <__ieee754_powf+0x6bc>)
 80068b6:	f7f9 fc4f 	bl	8000158 <__addsf3>
 80068ba:	4639      	mov	r1, r7
 80068bc:	f7f9 fd54 	bl	8000368 <__aeabi_fmul>
 80068c0:	4601      	mov	r1, r0
 80068c2:	4630      	mov	r0, r6
 80068c4:	f7f9 fc46 	bl	8000154 <__aeabi_fsub>
 80068c8:	4607      	mov	r7, r0
 80068ca:	4601      	mov	r1, r0
 80068cc:	4630      	mov	r0, r6
 80068ce:	f7f9 fd4b 	bl	8000368 <__aeabi_fmul>
 80068d2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80068d6:	4681      	mov	r9, r0
 80068d8:	4638      	mov	r0, r7
 80068da:	f7f9 fc3b 	bl	8000154 <__aeabi_fsub>
 80068de:	4601      	mov	r1, r0
 80068e0:	4648      	mov	r0, r9
 80068e2:	f7f9 fdf5 	bl	80004d0 <__aeabi_fdiv>
 80068e6:	4641      	mov	r1, r8
 80068e8:	4607      	mov	r7, r0
 80068ea:	4630      	mov	r0, r6
 80068ec:	f7f9 fd3c 	bl	8000368 <__aeabi_fmul>
 80068f0:	4641      	mov	r1, r8
 80068f2:	f7f9 fc31 	bl	8000158 <__addsf3>
 80068f6:	4601      	mov	r1, r0
 80068f8:	4638      	mov	r0, r7
 80068fa:	f7f9 fc2b 	bl	8000154 <__aeabi_fsub>
 80068fe:	4631      	mov	r1, r6
 8006900:	f7f9 fc28 	bl	8000154 <__aeabi_fsub>
 8006904:	4601      	mov	r1, r0
 8006906:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800690a:	f7f9 fc23 	bl	8000154 <__aeabi_fsub>
 800690e:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8006912:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006916:	da06      	bge.n	8006926 <__ieee754_powf+0x63e>
 8006918:	4621      	mov	r1, r4
 800691a:	f000 f9af 	bl	8006c7c <scalbnf>
 800691e:	4629      	mov	r1, r5
 8006920:	e549      	b.n	80063b6 <__ieee754_powf+0xce>
 8006922:	2400      	movs	r4, #0
 8006924:	e77d      	b.n	8006822 <__ieee754_powf+0x53a>
 8006926:	4618      	mov	r0, r3
 8006928:	e7f9      	b.n	800691e <__ieee754_powf+0x636>
 800692a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800692e:	e536      	b.n	800639e <__ieee754_powf+0xb6>
 8006930:	4639      	mov	r1, r7
 8006932:	e534      	b.n	800639e <__ieee754_powf+0xb6>
 8006934:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8006938:	f43f ad23 	beq.w	8006382 <__ieee754_powf+0x9a>
 800693c:	2502      	movs	r5, #2
 800693e:	4648      	mov	r0, r9
 8006940:	f000 f998 	bl	8006c74 <fabsf>
 8006944:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8006948:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800694c:	46c2      	mov	sl, r8
 800694e:	4601      	mov	r1, r0
 8006950:	d003      	beq.n	800695a <__ieee754_powf+0x672>
 8006952:	f1b8 0f00 	cmp.w	r8, #0
 8006956:	f47f ad43 	bne.w	80063e0 <__ieee754_powf+0xf8>
 800695a:	2c00      	cmp	r4, #0
 800695c:	da04      	bge.n	8006968 <__ieee754_powf+0x680>
 800695e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006962:	f7f9 fdb5 	bl	80004d0 <__aeabi_fdiv>
 8006966:	4601      	mov	r1, r0
 8006968:	2e00      	cmp	r6, #0
 800696a:	f6bf ad18 	bge.w	800639e <__ieee754_powf+0xb6>
 800696e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8006972:	ea58 0805 	orrs.w	r8, r8, r5
 8006976:	f47f ad2e 	bne.w	80063d6 <__ieee754_powf+0xee>
 800697a:	4608      	mov	r0, r1
 800697c:	f7f9 fbea 	bl	8000154 <__aeabi_fsub>
 8006980:	4601      	mov	r1, r0
 8006982:	e4f8      	b.n	8006376 <__ieee754_powf+0x8e>
 8006984:	ff800000 	.word	0xff800000
 8006988:	3f317200 	.word	0x3f317200
 800698c:	3f317218 	.word	0x3f317218
 8006990:	35bfbe8c 	.word	0x35bfbe8c
 8006994:	3331bb4c 	.word	0x3331bb4c
 8006998:	35ddea0e 	.word	0x35ddea0e
 800699c:	388ab355 	.word	0x388ab355
 80069a0:	3b360b61 	.word	0x3b360b61
 80069a4:	3e2aaaab 	.word	0x3e2aaaab

080069a8 <__ieee754_rem_pio2f>:
 80069a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ac:	4aa4      	ldr	r2, [pc, #656]	@ (8006c40 <__ieee754_rem_pio2f+0x298>)
 80069ae:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 80069b2:	4590      	cmp	r8, r2
 80069b4:	460c      	mov	r4, r1
 80069b6:	4682      	mov	sl, r0
 80069b8:	b087      	sub	sp, #28
 80069ba:	d804      	bhi.n	80069c6 <__ieee754_rem_pio2f+0x1e>
 80069bc:	2300      	movs	r3, #0
 80069be:	6008      	str	r0, [r1, #0]
 80069c0:	604b      	str	r3, [r1, #4]
 80069c2:	2500      	movs	r5, #0
 80069c4:	e01d      	b.n	8006a02 <__ieee754_rem_pio2f+0x5a>
 80069c6:	4a9f      	ldr	r2, [pc, #636]	@ (8006c44 <__ieee754_rem_pio2f+0x29c>)
 80069c8:	4590      	cmp	r8, r2
 80069ca:	d84f      	bhi.n	8006a6c <__ieee754_rem_pio2f+0xc4>
 80069cc:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 80069d0:	2800      	cmp	r0, #0
 80069d2:	499d      	ldr	r1, [pc, #628]	@ (8006c48 <__ieee754_rem_pio2f+0x2a0>)
 80069d4:	4f9d      	ldr	r7, [pc, #628]	@ (8006c4c <__ieee754_rem_pio2f+0x2a4>)
 80069d6:	f025 050f 	bic.w	r5, r5, #15
 80069da:	dd24      	ble.n	8006a26 <__ieee754_rem_pio2f+0x7e>
 80069dc:	f7f9 fbba 	bl	8000154 <__aeabi_fsub>
 80069e0:	42bd      	cmp	r5, r7
 80069e2:	4606      	mov	r6, r0
 80069e4:	d011      	beq.n	8006a0a <__ieee754_rem_pio2f+0x62>
 80069e6:	499a      	ldr	r1, [pc, #616]	@ (8006c50 <__ieee754_rem_pio2f+0x2a8>)
 80069e8:	f7f9 fbb4 	bl	8000154 <__aeabi_fsub>
 80069ec:	4601      	mov	r1, r0
 80069ee:	4605      	mov	r5, r0
 80069f0:	4630      	mov	r0, r6
 80069f2:	f7f9 fbaf 	bl	8000154 <__aeabi_fsub>
 80069f6:	4996      	ldr	r1, [pc, #600]	@ (8006c50 <__ieee754_rem_pio2f+0x2a8>)
 80069f8:	f7f9 fbac 	bl	8000154 <__aeabi_fsub>
 80069fc:	6025      	str	r5, [r4, #0]
 80069fe:	2501      	movs	r5, #1
 8006a00:	6060      	str	r0, [r4, #4]
 8006a02:	4628      	mov	r0, r5
 8006a04:	b007      	add	sp, #28
 8006a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a0a:	4992      	ldr	r1, [pc, #584]	@ (8006c54 <__ieee754_rem_pio2f+0x2ac>)
 8006a0c:	f7f9 fba2 	bl	8000154 <__aeabi_fsub>
 8006a10:	4991      	ldr	r1, [pc, #580]	@ (8006c58 <__ieee754_rem_pio2f+0x2b0>)
 8006a12:	4606      	mov	r6, r0
 8006a14:	f7f9 fb9e 	bl	8000154 <__aeabi_fsub>
 8006a18:	4601      	mov	r1, r0
 8006a1a:	4605      	mov	r5, r0
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f7f9 fb99 	bl	8000154 <__aeabi_fsub>
 8006a22:	498d      	ldr	r1, [pc, #564]	@ (8006c58 <__ieee754_rem_pio2f+0x2b0>)
 8006a24:	e7e8      	b.n	80069f8 <__ieee754_rem_pio2f+0x50>
 8006a26:	f7f9 fb97 	bl	8000158 <__addsf3>
 8006a2a:	42bd      	cmp	r5, r7
 8006a2c:	4606      	mov	r6, r0
 8006a2e:	d00f      	beq.n	8006a50 <__ieee754_rem_pio2f+0xa8>
 8006a30:	4987      	ldr	r1, [pc, #540]	@ (8006c50 <__ieee754_rem_pio2f+0x2a8>)
 8006a32:	f7f9 fb91 	bl	8000158 <__addsf3>
 8006a36:	4601      	mov	r1, r0
 8006a38:	4605      	mov	r5, r0
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	f7f9 fb8a 	bl	8000154 <__aeabi_fsub>
 8006a40:	4983      	ldr	r1, [pc, #524]	@ (8006c50 <__ieee754_rem_pio2f+0x2a8>)
 8006a42:	f7f9 fb89 	bl	8000158 <__addsf3>
 8006a46:	6025      	str	r5, [r4, #0]
 8006a48:	6060      	str	r0, [r4, #4]
 8006a4a:	f04f 35ff 	mov.w	r5, #4294967295
 8006a4e:	e7d8      	b.n	8006a02 <__ieee754_rem_pio2f+0x5a>
 8006a50:	4980      	ldr	r1, [pc, #512]	@ (8006c54 <__ieee754_rem_pio2f+0x2ac>)
 8006a52:	f7f9 fb81 	bl	8000158 <__addsf3>
 8006a56:	4980      	ldr	r1, [pc, #512]	@ (8006c58 <__ieee754_rem_pio2f+0x2b0>)
 8006a58:	4606      	mov	r6, r0
 8006a5a:	f7f9 fb7d 	bl	8000158 <__addsf3>
 8006a5e:	4601      	mov	r1, r0
 8006a60:	4605      	mov	r5, r0
 8006a62:	4630      	mov	r0, r6
 8006a64:	f7f9 fb76 	bl	8000154 <__aeabi_fsub>
 8006a68:	497b      	ldr	r1, [pc, #492]	@ (8006c58 <__ieee754_rem_pio2f+0x2b0>)
 8006a6a:	e7ea      	b.n	8006a42 <__ieee754_rem_pio2f+0x9a>
 8006a6c:	4a7b      	ldr	r2, [pc, #492]	@ (8006c5c <__ieee754_rem_pio2f+0x2b4>)
 8006a6e:	4590      	cmp	r8, r2
 8006a70:	f200 8095 	bhi.w	8006b9e <__ieee754_rem_pio2f+0x1f6>
 8006a74:	f000 f8fe 	bl	8006c74 <fabsf>
 8006a78:	4979      	ldr	r1, [pc, #484]	@ (8006c60 <__ieee754_rem_pio2f+0x2b8>)
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	f7f9 fc74 	bl	8000368 <__aeabi_fmul>
 8006a80:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006a84:	f7f9 fb68 	bl	8000158 <__addsf3>
 8006a88:	f7f9 fe4a 	bl	8000720 <__aeabi_f2iz>
 8006a8c:	4605      	mov	r5, r0
 8006a8e:	f7f9 fc17 	bl	80002c0 <__aeabi_i2f>
 8006a92:	496d      	ldr	r1, [pc, #436]	@ (8006c48 <__ieee754_rem_pio2f+0x2a0>)
 8006a94:	4681      	mov	r9, r0
 8006a96:	f7f9 fc67 	bl	8000368 <__aeabi_fmul>
 8006a9a:	4601      	mov	r1, r0
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	f7f9 fb59 	bl	8000154 <__aeabi_fsub>
 8006aa2:	496b      	ldr	r1, [pc, #428]	@ (8006c50 <__ieee754_rem_pio2f+0x2a8>)
 8006aa4:	4607      	mov	r7, r0
 8006aa6:	4648      	mov	r0, r9
 8006aa8:	f7f9 fc5e 	bl	8000368 <__aeabi_fmul>
 8006aac:	2d1f      	cmp	r5, #31
 8006aae:	4606      	mov	r6, r0
 8006ab0:	dc0e      	bgt.n	8006ad0 <__ieee754_rem_pio2f+0x128>
 8006ab2:	4a6c      	ldr	r2, [pc, #432]	@ (8006c64 <__ieee754_rem_pio2f+0x2bc>)
 8006ab4:	1e69      	subs	r1, r5, #1
 8006ab6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006aba:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 8006abe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d004      	beq.n	8006ad0 <__ieee754_rem_pio2f+0x128>
 8006ac6:	4631      	mov	r1, r6
 8006ac8:	4638      	mov	r0, r7
 8006aca:	f7f9 fb43 	bl	8000154 <__aeabi_fsub>
 8006ace:	e00b      	b.n	8006ae8 <__ieee754_rem_pio2f+0x140>
 8006ad0:	4631      	mov	r1, r6
 8006ad2:	4638      	mov	r0, r7
 8006ad4:	f7f9 fb3e 	bl	8000154 <__aeabi_fsub>
 8006ad8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006adc:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	ea4f 5be8 	mov.w	fp, r8, asr #23
 8006ae6:	dc01      	bgt.n	8006aec <__ieee754_rem_pio2f+0x144>
 8006ae8:	6020      	str	r0, [r4, #0]
 8006aea:	e026      	b.n	8006b3a <__ieee754_rem_pio2f+0x192>
 8006aec:	4959      	ldr	r1, [pc, #356]	@ (8006c54 <__ieee754_rem_pio2f+0x2ac>)
 8006aee:	4648      	mov	r0, r9
 8006af0:	f7f9 fc3a 	bl	8000368 <__aeabi_fmul>
 8006af4:	4606      	mov	r6, r0
 8006af6:	4601      	mov	r1, r0
 8006af8:	4638      	mov	r0, r7
 8006afa:	f7f9 fb2b 	bl	8000154 <__aeabi_fsub>
 8006afe:	4601      	mov	r1, r0
 8006b00:	4680      	mov	r8, r0
 8006b02:	4638      	mov	r0, r7
 8006b04:	f7f9 fb26 	bl	8000154 <__aeabi_fsub>
 8006b08:	4631      	mov	r1, r6
 8006b0a:	f7f9 fb23 	bl	8000154 <__aeabi_fsub>
 8006b0e:	4606      	mov	r6, r0
 8006b10:	4951      	ldr	r1, [pc, #324]	@ (8006c58 <__ieee754_rem_pio2f+0x2b0>)
 8006b12:	4648      	mov	r0, r9
 8006b14:	f7f9 fc28 	bl	8000368 <__aeabi_fmul>
 8006b18:	4631      	mov	r1, r6
 8006b1a:	f7f9 fb1b 	bl	8000154 <__aeabi_fsub>
 8006b1e:	4601      	mov	r1, r0
 8006b20:	4606      	mov	r6, r0
 8006b22:	4640      	mov	r0, r8
 8006b24:	f7f9 fb16 	bl	8000154 <__aeabi_fsub>
 8006b28:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006b2c:	ebab 0b03 	sub.w	fp, fp, r3
 8006b30:	f1bb 0f19 	cmp.w	fp, #25
 8006b34:	dc18      	bgt.n	8006b68 <__ieee754_rem_pio2f+0x1c0>
 8006b36:	4647      	mov	r7, r8
 8006b38:	6020      	str	r0, [r4, #0]
 8006b3a:	f8d4 8000 	ldr.w	r8, [r4]
 8006b3e:	4638      	mov	r0, r7
 8006b40:	4641      	mov	r1, r8
 8006b42:	f7f9 fb07 	bl	8000154 <__aeabi_fsub>
 8006b46:	4631      	mov	r1, r6
 8006b48:	f7f9 fb04 	bl	8000154 <__aeabi_fsub>
 8006b4c:	f1ba 0f00 	cmp.w	sl, #0
 8006b50:	6060      	str	r0, [r4, #4]
 8006b52:	f6bf af56 	bge.w	8006a02 <__ieee754_rem_pio2f+0x5a>
 8006b56:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 8006b5a:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8006b5e:	f8c4 8000 	str.w	r8, [r4]
 8006b62:	6060      	str	r0, [r4, #4]
 8006b64:	426d      	negs	r5, r5
 8006b66:	e74c      	b.n	8006a02 <__ieee754_rem_pio2f+0x5a>
 8006b68:	493f      	ldr	r1, [pc, #252]	@ (8006c68 <__ieee754_rem_pio2f+0x2c0>)
 8006b6a:	4648      	mov	r0, r9
 8006b6c:	f7f9 fbfc 	bl	8000368 <__aeabi_fmul>
 8006b70:	4606      	mov	r6, r0
 8006b72:	4601      	mov	r1, r0
 8006b74:	4640      	mov	r0, r8
 8006b76:	f7f9 faed 	bl	8000154 <__aeabi_fsub>
 8006b7a:	4601      	mov	r1, r0
 8006b7c:	4607      	mov	r7, r0
 8006b7e:	4640      	mov	r0, r8
 8006b80:	f7f9 fae8 	bl	8000154 <__aeabi_fsub>
 8006b84:	4631      	mov	r1, r6
 8006b86:	f7f9 fae5 	bl	8000154 <__aeabi_fsub>
 8006b8a:	4606      	mov	r6, r0
 8006b8c:	4937      	ldr	r1, [pc, #220]	@ (8006c6c <__ieee754_rem_pio2f+0x2c4>)
 8006b8e:	4648      	mov	r0, r9
 8006b90:	f7f9 fbea 	bl	8000368 <__aeabi_fmul>
 8006b94:	4631      	mov	r1, r6
 8006b96:	f7f9 fadd 	bl	8000154 <__aeabi_fsub>
 8006b9a:	4606      	mov	r6, r0
 8006b9c:	e793      	b.n	8006ac6 <__ieee754_rem_pio2f+0x11e>
 8006b9e:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8006ba2:	d305      	bcc.n	8006bb0 <__ieee754_rem_pio2f+0x208>
 8006ba4:	4601      	mov	r1, r0
 8006ba6:	f7f9 fad5 	bl	8000154 <__aeabi_fsub>
 8006baa:	6060      	str	r0, [r4, #4]
 8006bac:	6020      	str	r0, [r4, #0]
 8006bae:	e708      	b.n	80069c2 <__ieee754_rem_pio2f+0x1a>
 8006bb0:	ea4f 56e8 	mov.w	r6, r8, asr #23
 8006bb4:	3e86      	subs	r6, #134	@ 0x86
 8006bb6:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 8006bba:	4640      	mov	r0, r8
 8006bbc:	f7f9 fdb0 	bl	8000720 <__aeabi_f2iz>
 8006bc0:	f7f9 fb7e 	bl	80002c0 <__aeabi_i2f>
 8006bc4:	4601      	mov	r1, r0
 8006bc6:	9003      	str	r0, [sp, #12]
 8006bc8:	4640      	mov	r0, r8
 8006bca:	f7f9 fac3 	bl	8000154 <__aeabi_fsub>
 8006bce:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8006bd2:	f7f9 fbc9 	bl	8000368 <__aeabi_fmul>
 8006bd6:	4607      	mov	r7, r0
 8006bd8:	f7f9 fda2 	bl	8000720 <__aeabi_f2iz>
 8006bdc:	f7f9 fb70 	bl	80002c0 <__aeabi_i2f>
 8006be0:	4601      	mov	r1, r0
 8006be2:	9004      	str	r0, [sp, #16]
 8006be4:	4605      	mov	r5, r0
 8006be6:	4638      	mov	r0, r7
 8006be8:	f7f9 fab4 	bl	8000154 <__aeabi_fsub>
 8006bec:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8006bf0:	f7f9 fbba 	bl	8000368 <__aeabi_fmul>
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	9005      	str	r0, [sp, #20]
 8006bf8:	f7f9 fd4a 	bl	8000690 <__aeabi_fcmpeq>
 8006bfc:	b1f0      	cbz	r0, 8006c3c <__ieee754_rem_pio2f+0x294>
 8006bfe:	2100      	movs	r1, #0
 8006c00:	4628      	mov	r0, r5
 8006c02:	f7f9 fd45 	bl	8000690 <__aeabi_fcmpeq>
 8006c06:	2800      	cmp	r0, #0
 8006c08:	bf14      	ite	ne
 8006c0a:	2301      	movne	r3, #1
 8006c0c:	2302      	moveq	r3, #2
 8006c0e:	4a18      	ldr	r2, [pc, #96]	@ (8006c70 <__ieee754_rem_pio2f+0x2c8>)
 8006c10:	4621      	mov	r1, r4
 8006c12:	9201      	str	r2, [sp, #4]
 8006c14:	2202      	movs	r2, #2
 8006c16:	a803      	add	r0, sp, #12
 8006c18:	9200      	str	r2, [sp, #0]
 8006c1a:	4632      	mov	r2, r6
 8006c1c:	f000 f898 	bl	8006d50 <__kernel_rem_pio2f>
 8006c20:	f1ba 0f00 	cmp.w	sl, #0
 8006c24:	4605      	mov	r5, r0
 8006c26:	f6bf aeec 	bge.w	8006a02 <__ieee754_rem_pio2f+0x5a>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006c30:	6023      	str	r3, [r4, #0]
 8006c32:	6863      	ldr	r3, [r4, #4]
 8006c34:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006c38:	6063      	str	r3, [r4, #4]
 8006c3a:	e793      	b.n	8006b64 <__ieee754_rem_pio2f+0x1bc>
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e7e6      	b.n	8006c0e <__ieee754_rem_pio2f+0x266>
 8006c40:	3f490fd8 	.word	0x3f490fd8
 8006c44:	4016cbe3 	.word	0x4016cbe3
 8006c48:	3fc90f80 	.word	0x3fc90f80
 8006c4c:	3fc90fd0 	.word	0x3fc90fd0
 8006c50:	37354443 	.word	0x37354443
 8006c54:	37354400 	.word	0x37354400
 8006c58:	2e85a308 	.word	0x2e85a308
 8006c5c:	43490f80 	.word	0x43490f80
 8006c60:	3f22f984 	.word	0x3f22f984
 8006c64:	0800de64 	.word	0x0800de64
 8006c68:	2e85a300 	.word	0x2e85a300
 8006c6c:	248d3132 	.word	0x248d3132
 8006c70:	0800dee4 	.word	0x0800dee4

08006c74 <fabsf>:
 8006c74:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006c78:	4770      	bx	lr
	...

08006c7c <scalbnf>:
 8006c7c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4603      	mov	r3, r0
 8006c84:	460d      	mov	r5, r1
 8006c86:	4604      	mov	r4, r0
 8006c88:	d02e      	beq.n	8006ce8 <scalbnf+0x6c>
 8006c8a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006c8e:	d304      	bcc.n	8006c9a <scalbnf+0x1e>
 8006c90:	4601      	mov	r1, r0
 8006c92:	f7f9 fa61 	bl	8000158 <__addsf3>
 8006c96:	4603      	mov	r3, r0
 8006c98:	e026      	b.n	8006ce8 <scalbnf+0x6c>
 8006c9a:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8006c9e:	d118      	bne.n	8006cd2 <scalbnf+0x56>
 8006ca0:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8006ca4:	f7f9 fb60 	bl	8000368 <__aeabi_fmul>
 8006ca8:	4a17      	ldr	r2, [pc, #92]	@ (8006d08 <scalbnf+0x8c>)
 8006caa:	4603      	mov	r3, r0
 8006cac:	4295      	cmp	r5, r2
 8006cae:	db0c      	blt.n	8006cca <scalbnf+0x4e>
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8006cb6:	3a19      	subs	r2, #25
 8006cb8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006cbc:	428d      	cmp	r5, r1
 8006cbe:	dd0a      	ble.n	8006cd6 <scalbnf+0x5a>
 8006cc0:	4912      	ldr	r1, [pc, #72]	@ (8006d0c <scalbnf+0x90>)
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f361 001e 	bfi	r0, r1, #0, #31
 8006cc8:	e000      	b.n	8006ccc <scalbnf+0x50>
 8006cca:	4911      	ldr	r1, [pc, #68]	@ (8006d10 <scalbnf+0x94>)
 8006ccc:	f7f9 fb4c 	bl	8000368 <__aeabi_fmul>
 8006cd0:	e7e1      	b.n	8006c96 <scalbnf+0x1a>
 8006cd2:	0dd2      	lsrs	r2, r2, #23
 8006cd4:	e7f0      	b.n	8006cb8 <scalbnf+0x3c>
 8006cd6:	1951      	adds	r1, r2, r5
 8006cd8:	29fe      	cmp	r1, #254	@ 0xfe
 8006cda:	dcf1      	bgt.n	8006cc0 <scalbnf+0x44>
 8006cdc:	2900      	cmp	r1, #0
 8006cde:	dd05      	ble.n	8006cec <scalbnf+0x70>
 8006ce0:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8006ce4:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8006ce8:	4618      	mov	r0, r3
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
 8006cec:	f111 0f16 	cmn.w	r1, #22
 8006cf0:	da01      	bge.n	8006cf6 <scalbnf+0x7a>
 8006cf2:	4907      	ldr	r1, [pc, #28]	@ (8006d10 <scalbnf+0x94>)
 8006cf4:	e7e5      	b.n	8006cc2 <scalbnf+0x46>
 8006cf6:	f101 0019 	add.w	r0, r1, #25
 8006cfa:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8006cfe:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8006d02:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8006d06:	e7e1      	b.n	8006ccc <scalbnf+0x50>
 8006d08:	ffff3cb0 	.word	0xffff3cb0
 8006d0c:	7149f2ca 	.word	0x7149f2ca
 8006d10:	0da24260 	.word	0x0da24260

08006d14 <with_errnof>:
 8006d14:	b538      	push	{r3, r4, r5, lr}
 8006d16:	4604      	mov	r4, r0
 8006d18:	460d      	mov	r5, r1
 8006d1a:	f7fe fc17 	bl	800554c <__errno>
 8006d1e:	6005      	str	r5, [r0, #0]
 8006d20:	4620      	mov	r0, r4
 8006d22:	bd38      	pop	{r3, r4, r5, pc}

08006d24 <xflowf>:
 8006d24:	b508      	push	{r3, lr}
 8006d26:	b140      	cbz	r0, 8006d3a <xflowf+0x16>
 8006d28:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8006d2c:	f7f9 fb1c 	bl	8000368 <__aeabi_fmul>
 8006d30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006d34:	2122      	movs	r1, #34	@ 0x22
 8006d36:	f7ff bfed 	b.w	8006d14 <with_errnof>
 8006d3a:	4608      	mov	r0, r1
 8006d3c:	e7f6      	b.n	8006d2c <xflowf+0x8>

08006d3e <__math_uflowf>:
 8006d3e:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8006d42:	f7ff bfef 	b.w	8006d24 <xflowf>

08006d46 <__math_oflowf>:
 8006d46:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8006d4a:	f7ff bfeb 	b.w	8006d24 <xflowf>
	...

08006d50 <__kernel_rem_pio2f>:
 8006d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d54:	b0db      	sub	sp, #364	@ 0x16c
 8006d56:	9202      	str	r2, [sp, #8]
 8006d58:	9304      	str	r3, [sp, #16]
 8006d5a:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8006d5c:	4bac      	ldr	r3, [pc, #688]	@ (8007010 <__kernel_rem_pio2f+0x2c0>)
 8006d5e:	9005      	str	r0, [sp, #20]
 8006d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d64:	9100      	str	r1, [sp, #0]
 8006d66:	9301      	str	r3, [sp, #4]
 8006d68:	9b04      	ldr	r3, [sp, #16]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	9303      	str	r3, [sp, #12]
 8006d6e:	9b02      	ldr	r3, [sp, #8]
 8006d70:	1d1a      	adds	r2, r3, #4
 8006d72:	f2c0 8099 	blt.w	8006ea8 <__kernel_rem_pio2f+0x158>
 8006d76:	1edc      	subs	r4, r3, #3
 8006d78:	bf48      	it	mi
 8006d7a:	1d1c      	addmi	r4, r3, #4
 8006d7c:	10e4      	asrs	r4, r4, #3
 8006d7e:	2500      	movs	r5, #0
 8006d80:	f04f 0b00 	mov.w	fp, #0
 8006d84:	1c67      	adds	r7, r4, #1
 8006d86:	00fb      	lsls	r3, r7, #3
 8006d88:	9306      	str	r3, [sp, #24]
 8006d8a:	9b02      	ldr	r3, [sp, #8]
 8006d8c:	9a03      	ldr	r2, [sp, #12]
 8006d8e:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8006d92:	9b01      	ldr	r3, [sp, #4]
 8006d94:	eba4 0802 	sub.w	r8, r4, r2
 8006d98:	eb03 0902 	add.w	r9, r3, r2
 8006d9c:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8006d9e:	ae1e      	add	r6, sp, #120	@ 0x78
 8006da0:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8006da4:	454d      	cmp	r5, r9
 8006da6:	f340 8081 	ble.w	8006eac <__kernel_rem_pio2f+0x15c>
 8006daa:	9a04      	ldr	r2, [sp, #16]
 8006dac:	ab1e      	add	r3, sp, #120	@ 0x78
 8006dae:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8006db2:	f04f 0900 	mov.w	r9, #0
 8006db6:	2300      	movs	r3, #0
 8006db8:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8006dbc:	9a01      	ldr	r2, [sp, #4]
 8006dbe:	4591      	cmp	r9, r2
 8006dc0:	f340 809a 	ble.w	8006ef8 <__kernel_rem_pio2f+0x1a8>
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	aa0a      	add	r2, sp, #40	@ 0x28
 8006dc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006dcc:	9308      	str	r3, [sp, #32]
 8006dce:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8006dd0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006dd4:	9c01      	ldr	r4, [sp, #4]
 8006dd6:	9307      	str	r3, [sp, #28]
 8006dd8:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8006ddc:	4646      	mov	r6, r8
 8006dde:	4625      	mov	r5, r4
 8006de0:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 8006de4:	ab5a      	add	r3, sp, #360	@ 0x168
 8006de6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006dea:	f853 bc50 	ldr.w	fp, [r3, #-80]
 8006dee:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8006df2:	2d00      	cmp	r5, #0
 8006df4:	f300 8085 	bgt.w	8006f02 <__kernel_rem_pio2f+0x1b2>
 8006df8:	4639      	mov	r1, r7
 8006dfa:	4658      	mov	r0, fp
 8006dfc:	f7ff ff3e 	bl	8006c7c <scalbnf>
 8006e00:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8006e04:	4605      	mov	r5, r0
 8006e06:	f7f9 faaf 	bl	8000368 <__aeabi_fmul>
 8006e0a:	f000 fa3f 	bl	800728c <floorf>
 8006e0e:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8006e12:	f7f9 faa9 	bl	8000368 <__aeabi_fmul>
 8006e16:	4601      	mov	r1, r0
 8006e18:	4628      	mov	r0, r5
 8006e1a:	f7f9 f99b 	bl	8000154 <__aeabi_fsub>
 8006e1e:	4605      	mov	r5, r0
 8006e20:	f7f9 fc7e 	bl	8000720 <__aeabi_f2iz>
 8006e24:	4606      	mov	r6, r0
 8006e26:	f7f9 fa4b 	bl	80002c0 <__aeabi_i2f>
 8006e2a:	4601      	mov	r1, r0
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	f7f9 f991 	bl	8000154 <__aeabi_fsub>
 8006e32:	2f00      	cmp	r7, #0
 8006e34:	4681      	mov	r9, r0
 8006e36:	f340 8081 	ble.w	8006f3c <__kernel_rem_pio2f+0x1ec>
 8006e3a:	1e62      	subs	r2, r4, #1
 8006e3c:	ab0a      	add	r3, sp, #40	@ 0x28
 8006e3e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8006e42:	f1c7 0108 	rsb	r1, r7, #8
 8006e46:	fa45 f301 	asr.w	r3, r5, r1
 8006e4a:	441e      	add	r6, r3
 8006e4c:	408b      	lsls	r3, r1
 8006e4e:	1aed      	subs	r5, r5, r3
 8006e50:	ab0a      	add	r3, sp, #40	@ 0x28
 8006e52:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006e56:	f1c7 0307 	rsb	r3, r7, #7
 8006e5a:	411d      	asrs	r5, r3
 8006e5c:	2d00      	cmp	r5, #0
 8006e5e:	dd7a      	ble.n	8006f56 <__kernel_rem_pio2f+0x206>
 8006e60:	2200      	movs	r2, #0
 8006e62:	4692      	mov	sl, r2
 8006e64:	3601      	adds	r6, #1
 8006e66:	4294      	cmp	r4, r2
 8006e68:	f300 80aa 	bgt.w	8006fc0 <__kernel_rem_pio2f+0x270>
 8006e6c:	2f00      	cmp	r7, #0
 8006e6e:	dd05      	ble.n	8006e7c <__kernel_rem_pio2f+0x12c>
 8006e70:	2f01      	cmp	r7, #1
 8006e72:	f000 80b6 	beq.w	8006fe2 <__kernel_rem_pio2f+0x292>
 8006e76:	2f02      	cmp	r7, #2
 8006e78:	f000 80bd 	beq.w	8006ff6 <__kernel_rem_pio2f+0x2a6>
 8006e7c:	2d02      	cmp	r5, #2
 8006e7e:	d16a      	bne.n	8006f56 <__kernel_rem_pio2f+0x206>
 8006e80:	4649      	mov	r1, r9
 8006e82:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006e86:	f7f9 f965 	bl	8000154 <__aeabi_fsub>
 8006e8a:	4681      	mov	r9, r0
 8006e8c:	f1ba 0f00 	cmp.w	sl, #0
 8006e90:	d061      	beq.n	8006f56 <__kernel_rem_pio2f+0x206>
 8006e92:	4639      	mov	r1, r7
 8006e94:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006e98:	f7ff fef0 	bl	8006c7c <scalbnf>
 8006e9c:	4601      	mov	r1, r0
 8006e9e:	4648      	mov	r0, r9
 8006ea0:	f7f9 f958 	bl	8000154 <__aeabi_fsub>
 8006ea4:	4681      	mov	r9, r0
 8006ea6:	e056      	b.n	8006f56 <__kernel_rem_pio2f+0x206>
 8006ea8:	2400      	movs	r4, #0
 8006eaa:	e768      	b.n	8006d7e <__kernel_rem_pio2f+0x2e>
 8006eac:	eb18 0f05 	cmn.w	r8, r5
 8006eb0:	d407      	bmi.n	8006ec2 <__kernel_rem_pio2f+0x172>
 8006eb2:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8006eb6:	f7f9 fa03 	bl	80002c0 <__aeabi_i2f>
 8006eba:	f846 0b04 	str.w	r0, [r6], #4
 8006ebe:	3501      	adds	r5, #1
 8006ec0:	e770      	b.n	8006da4 <__kernel_rem_pio2f+0x54>
 8006ec2:	4658      	mov	r0, fp
 8006ec4:	e7f9      	b.n	8006eba <__kernel_rem_pio2f+0x16a>
 8006ec6:	9307      	str	r3, [sp, #28]
 8006ec8:	9b05      	ldr	r3, [sp, #20]
 8006eca:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 8006ece:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006ed2:	f7f9 fa49 	bl	8000368 <__aeabi_fmul>
 8006ed6:	4601      	mov	r1, r0
 8006ed8:	4630      	mov	r0, r6
 8006eda:	f7f9 f93d 	bl	8000158 <__addsf3>
 8006ede:	4606      	mov	r6, r0
 8006ee0:	9b07      	ldr	r3, [sp, #28]
 8006ee2:	f108 0801 	add.w	r8, r8, #1
 8006ee6:	9a03      	ldr	r2, [sp, #12]
 8006ee8:	4590      	cmp	r8, r2
 8006eea:	ddec      	ble.n	8006ec6 <__kernel_rem_pio2f+0x176>
 8006eec:	f84a 6b04 	str.w	r6, [sl], #4
 8006ef0:	f109 0901 	add.w	r9, r9, #1
 8006ef4:	3504      	adds	r5, #4
 8006ef6:	e761      	b.n	8006dbc <__kernel_rem_pio2f+0x6c>
 8006ef8:	46ab      	mov	fp, r5
 8006efa:	461e      	mov	r6, r3
 8006efc:	f04f 0800 	mov.w	r8, #0
 8006f00:	e7f1      	b.n	8006ee6 <__kernel_rem_pio2f+0x196>
 8006f02:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8006f06:	4658      	mov	r0, fp
 8006f08:	f7f9 fa2e 	bl	8000368 <__aeabi_fmul>
 8006f0c:	f7f9 fc08 	bl	8000720 <__aeabi_f2iz>
 8006f10:	f7f9 f9d6 	bl	80002c0 <__aeabi_i2f>
 8006f14:	4649      	mov	r1, r9
 8006f16:	9009      	str	r0, [sp, #36]	@ 0x24
 8006f18:	f7f9 fa26 	bl	8000368 <__aeabi_fmul>
 8006f1c:	4601      	mov	r1, r0
 8006f1e:	4658      	mov	r0, fp
 8006f20:	f7f9 f918 	bl	8000154 <__aeabi_fsub>
 8006f24:	f7f9 fbfc 	bl	8000720 <__aeabi_f2iz>
 8006f28:	3d01      	subs	r5, #1
 8006f2a:	f846 0b04 	str.w	r0, [r6], #4
 8006f2e:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 8006f32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f34:	f7f9 f910 	bl	8000158 <__addsf3>
 8006f38:	4683      	mov	fp, r0
 8006f3a:	e75a      	b.n	8006df2 <__kernel_rem_pio2f+0xa2>
 8006f3c:	d105      	bne.n	8006f4a <__kernel_rem_pio2f+0x1fa>
 8006f3e:	1e63      	subs	r3, r4, #1
 8006f40:	aa0a      	add	r2, sp, #40	@ 0x28
 8006f42:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8006f46:	11ed      	asrs	r5, r5, #7
 8006f48:	e788      	b.n	8006e5c <__kernel_rem_pio2f+0x10c>
 8006f4a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006f4e:	f7f9 fbbd 	bl	80006cc <__aeabi_fcmpge>
 8006f52:	4605      	mov	r5, r0
 8006f54:	bb90      	cbnz	r0, 8006fbc <__kernel_rem_pio2f+0x26c>
 8006f56:	2100      	movs	r1, #0
 8006f58:	4648      	mov	r0, r9
 8006f5a:	f7f9 fb99 	bl	8000690 <__aeabi_fcmpeq>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	f000 8090 	beq.w	8007084 <__kernel_rem_pio2f+0x334>
 8006f64:	2200      	movs	r2, #0
 8006f66:	1e63      	subs	r3, r4, #1
 8006f68:	9901      	ldr	r1, [sp, #4]
 8006f6a:	428b      	cmp	r3, r1
 8006f6c:	da4a      	bge.n	8007004 <__kernel_rem_pio2f+0x2b4>
 8006f6e:	2a00      	cmp	r2, #0
 8006f70:	d076      	beq.n	8007060 <__kernel_rem_pio2f+0x310>
 8006f72:	3c01      	subs	r4, #1
 8006f74:	ab0a      	add	r3, sp, #40	@ 0x28
 8006f76:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006f7a:	3f08      	subs	r7, #8
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d0f8      	beq.n	8006f72 <__kernel_rem_pio2f+0x222>
 8006f80:	4639      	mov	r1, r7
 8006f82:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006f86:	f7ff fe79 	bl	8006c7c <scalbnf>
 8006f8a:	46a2      	mov	sl, r4
 8006f8c:	4607      	mov	r7, r0
 8006f8e:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 8006f92:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 8006f96:	f1ba 0f00 	cmp.w	sl, #0
 8006f9a:	f280 80a1 	bge.w	80070e0 <__kernel_rem_pio2f+0x390>
 8006f9e:	4627      	mov	r7, r4
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	2f00      	cmp	r7, #0
 8006fa4:	f2c0 80cb 	blt.w	800713e <__kernel_rem_pio2f+0x3ee>
 8006fa8:	a946      	add	r1, sp, #280	@ 0x118
 8006faa:	4690      	mov	r8, r2
 8006fac:	f04f 0a00 	mov.w	sl, #0
 8006fb0:	4b18      	ldr	r3, [pc, #96]	@ (8007014 <__kernel_rem_pio2f+0x2c4>)
 8006fb2:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8006fb6:	eba4 0907 	sub.w	r9, r4, r7
 8006fba:	e0b4      	b.n	8007126 <__kernel_rem_pio2f+0x3d6>
 8006fbc:	2502      	movs	r5, #2
 8006fbe:	e74f      	b.n	8006e60 <__kernel_rem_pio2f+0x110>
 8006fc0:	f858 3b04 	ldr.w	r3, [r8], #4
 8006fc4:	f1ba 0f00 	cmp.w	sl, #0
 8006fc8:	d108      	bne.n	8006fdc <__kernel_rem_pio2f+0x28c>
 8006fca:	b123      	cbz	r3, 8006fd6 <__kernel_rem_pio2f+0x286>
 8006fcc:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8006fd0:	f848 3c04 	str.w	r3, [r8, #-4]
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	469a      	mov	sl, r3
 8006fd8:	3201      	adds	r2, #1
 8006fda:	e744      	b.n	8006e66 <__kernel_rem_pio2f+0x116>
 8006fdc:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8006fe0:	e7f6      	b.n	8006fd0 <__kernel_rem_pio2f+0x280>
 8006fe2:	1e62      	subs	r2, r4, #1
 8006fe4:	ab0a      	add	r3, sp, #40	@ 0x28
 8006fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fee:	a90a      	add	r1, sp, #40	@ 0x28
 8006ff0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006ff4:	e742      	b.n	8006e7c <__kernel_rem_pio2f+0x12c>
 8006ff6:	1e62      	subs	r2, r4, #1
 8006ff8:	ab0a      	add	r3, sp, #40	@ 0x28
 8006ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007002:	e7f4      	b.n	8006fee <__kernel_rem_pio2f+0x29e>
 8007004:	a90a      	add	r1, sp, #40	@ 0x28
 8007006:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800700a:	3b01      	subs	r3, #1
 800700c:	430a      	orrs	r2, r1
 800700e:	e7ab      	b.n	8006f68 <__kernel_rem_pio2f+0x218>
 8007010:	0800e228 	.word	0x0800e228
 8007014:	0800e1fc 	.word	0x0800e1fc
 8007018:	3301      	adds	r3, #1
 800701a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800701e:	2900      	cmp	r1, #0
 8007020:	d0fa      	beq.n	8007018 <__kernel_rem_pio2f+0x2c8>
 8007022:	9a04      	ldr	r2, [sp, #16]
 8007024:	a91e      	add	r1, sp, #120	@ 0x78
 8007026:	18a2      	adds	r2, r4, r2
 8007028:	1c66      	adds	r6, r4, #1
 800702a:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800702e:	441c      	add	r4, r3
 8007030:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 8007034:	42b4      	cmp	r4, r6
 8007036:	f6ff aecf 	blt.w	8006dd8 <__kernel_rem_pio2f+0x88>
 800703a:	9b07      	ldr	r3, [sp, #28]
 800703c:	46ab      	mov	fp, r5
 800703e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007042:	f7f9 f93d 	bl	80002c0 <__aeabi_i2f>
 8007046:	f04f 0a00 	mov.w	sl, #0
 800704a:	f04f 0800 	mov.w	r8, #0
 800704e:	6028      	str	r0, [r5, #0]
 8007050:	9b03      	ldr	r3, [sp, #12]
 8007052:	459a      	cmp	sl, r3
 8007054:	dd07      	ble.n	8007066 <__kernel_rem_pio2f+0x316>
 8007056:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 800705a:	3504      	adds	r5, #4
 800705c:	3601      	adds	r6, #1
 800705e:	e7e9      	b.n	8007034 <__kernel_rem_pio2f+0x2e4>
 8007060:	2301      	movs	r3, #1
 8007062:	9a08      	ldr	r2, [sp, #32]
 8007064:	e7d9      	b.n	800701a <__kernel_rem_pio2f+0x2ca>
 8007066:	9b05      	ldr	r3, [sp, #20]
 8007068:	f85b 0904 	ldr.w	r0, [fp], #-4
 800706c:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8007070:	f7f9 f97a 	bl	8000368 <__aeabi_fmul>
 8007074:	4601      	mov	r1, r0
 8007076:	4640      	mov	r0, r8
 8007078:	f7f9 f86e 	bl	8000158 <__addsf3>
 800707c:	f10a 0a01 	add.w	sl, sl, #1
 8007080:	4680      	mov	r8, r0
 8007082:	e7e5      	b.n	8007050 <__kernel_rem_pio2f+0x300>
 8007084:	9b06      	ldr	r3, [sp, #24]
 8007086:	9a02      	ldr	r2, [sp, #8]
 8007088:	4648      	mov	r0, r9
 800708a:	1a99      	subs	r1, r3, r2
 800708c:	f7ff fdf6 	bl	8006c7c <scalbnf>
 8007090:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8007094:	4680      	mov	r8, r0
 8007096:	f7f9 fb19 	bl	80006cc <__aeabi_fcmpge>
 800709a:	b1f8      	cbz	r0, 80070dc <__kernel_rem_pio2f+0x38c>
 800709c:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 80070a0:	4640      	mov	r0, r8
 80070a2:	f7f9 f961 	bl	8000368 <__aeabi_fmul>
 80070a6:	f7f9 fb3b 	bl	8000720 <__aeabi_f2iz>
 80070aa:	f7f9 f909 	bl	80002c0 <__aeabi_i2f>
 80070ae:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80070b2:	4681      	mov	r9, r0
 80070b4:	f7f9 f958 	bl	8000368 <__aeabi_fmul>
 80070b8:	4601      	mov	r1, r0
 80070ba:	4640      	mov	r0, r8
 80070bc:	f7f9 f84a 	bl	8000154 <__aeabi_fsub>
 80070c0:	f7f9 fb2e 	bl	8000720 <__aeabi_f2iz>
 80070c4:	ab0a      	add	r3, sp, #40	@ 0x28
 80070c6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80070ca:	4648      	mov	r0, r9
 80070cc:	3401      	adds	r4, #1
 80070ce:	3708      	adds	r7, #8
 80070d0:	f7f9 fb26 	bl	8000720 <__aeabi_f2iz>
 80070d4:	ab0a      	add	r3, sp, #40	@ 0x28
 80070d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80070da:	e751      	b.n	8006f80 <__kernel_rem_pio2f+0x230>
 80070dc:	4640      	mov	r0, r8
 80070de:	e7f7      	b.n	80070d0 <__kernel_rem_pio2f+0x380>
 80070e0:	ab0a      	add	r3, sp, #40	@ 0x28
 80070e2:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80070e6:	f7f9 f8eb 	bl	80002c0 <__aeabi_i2f>
 80070ea:	4639      	mov	r1, r7
 80070ec:	f7f9 f93c 	bl	8000368 <__aeabi_fmul>
 80070f0:	4649      	mov	r1, r9
 80070f2:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 80070f6:	4638      	mov	r0, r7
 80070f8:	f7f9 f936 	bl	8000368 <__aeabi_fmul>
 80070fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007100:	4607      	mov	r7, r0
 8007102:	e748      	b.n	8006f96 <__kernel_rem_pio2f+0x246>
 8007104:	f853 0b04 	ldr.w	r0, [r3], #4
 8007108:	f85b 1b04 	ldr.w	r1, [fp], #4
 800710c:	9203      	str	r2, [sp, #12]
 800710e:	9302      	str	r3, [sp, #8]
 8007110:	f7f9 f92a 	bl	8000368 <__aeabi_fmul>
 8007114:	4601      	mov	r1, r0
 8007116:	4640      	mov	r0, r8
 8007118:	f7f9 f81e 	bl	8000158 <__addsf3>
 800711c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007120:	4680      	mov	r8, r0
 8007122:	f10a 0a01 	add.w	sl, sl, #1
 8007126:	9901      	ldr	r1, [sp, #4]
 8007128:	458a      	cmp	sl, r1
 800712a:	dc01      	bgt.n	8007130 <__kernel_rem_pio2f+0x3e0>
 800712c:	45ca      	cmp	sl, r9
 800712e:	dde9      	ble.n	8007104 <__kernel_rem_pio2f+0x3b4>
 8007130:	ab5a      	add	r3, sp, #360	@ 0x168
 8007132:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8007136:	f849 8ca0 	str.w	r8, [r9, #-160]
 800713a:	3f01      	subs	r7, #1
 800713c:	e731      	b.n	8006fa2 <__kernel_rem_pio2f+0x252>
 800713e:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8007140:	2b02      	cmp	r3, #2
 8007142:	dc07      	bgt.n	8007154 <__kernel_rem_pio2f+0x404>
 8007144:	2b00      	cmp	r3, #0
 8007146:	dc4e      	bgt.n	80071e6 <__kernel_rem_pio2f+0x496>
 8007148:	d02e      	beq.n	80071a8 <__kernel_rem_pio2f+0x458>
 800714a:	f006 0007 	and.w	r0, r6, #7
 800714e:	b05b      	add	sp, #364	@ 0x16c
 8007150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007154:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8007156:	2b03      	cmp	r3, #3
 8007158:	d1f7      	bne.n	800714a <__kernel_rem_pio2f+0x3fa>
 800715a:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 800715e:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8007162:	46b8      	mov	r8, r7
 8007164:	46a2      	mov	sl, r4
 8007166:	f1ba 0f00 	cmp.w	sl, #0
 800716a:	dc49      	bgt.n	8007200 <__kernel_rem_pio2f+0x4b0>
 800716c:	46a1      	mov	r9, r4
 800716e:	f1b9 0f01 	cmp.w	r9, #1
 8007172:	dc60      	bgt.n	8007236 <__kernel_rem_pio2f+0x4e6>
 8007174:	2000      	movs	r0, #0
 8007176:	2c01      	cmp	r4, #1
 8007178:	dc76      	bgt.n	8007268 <__kernel_rem_pio2f+0x518>
 800717a:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800717c:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800717e:	2d00      	cmp	r5, #0
 8007180:	d178      	bne.n	8007274 <__kernel_rem_pio2f+0x524>
 8007182:	9900      	ldr	r1, [sp, #0]
 8007184:	600a      	str	r2, [r1, #0]
 8007186:	460a      	mov	r2, r1
 8007188:	604b      	str	r3, [r1, #4]
 800718a:	6090      	str	r0, [r2, #8]
 800718c:	e7dd      	b.n	800714a <__kernel_rem_pio2f+0x3fa>
 800718e:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8007192:	f7f8 ffe1 	bl	8000158 <__addsf3>
 8007196:	3c01      	subs	r4, #1
 8007198:	2c00      	cmp	r4, #0
 800719a:	daf8      	bge.n	800718e <__kernel_rem_pio2f+0x43e>
 800719c:	b10d      	cbz	r5, 80071a2 <__kernel_rem_pio2f+0x452>
 800719e:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80071a2:	9b00      	ldr	r3, [sp, #0]
 80071a4:	6018      	str	r0, [r3, #0]
 80071a6:	e7d0      	b.n	800714a <__kernel_rem_pio2f+0x3fa>
 80071a8:	2000      	movs	r0, #0
 80071aa:	af32      	add	r7, sp, #200	@ 0xc8
 80071ac:	e7f4      	b.n	8007198 <__kernel_rem_pio2f+0x448>
 80071ae:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 80071b2:	f7f8 ffd1 	bl	8000158 <__addsf3>
 80071b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80071ba:	f1b8 0f00 	cmp.w	r8, #0
 80071be:	daf6      	bge.n	80071ae <__kernel_rem_pio2f+0x45e>
 80071c0:	b1ad      	cbz	r5, 80071ee <__kernel_rem_pio2f+0x49e>
 80071c2:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 80071c6:	9a00      	ldr	r2, [sp, #0]
 80071c8:	4601      	mov	r1, r0
 80071ca:	6013      	str	r3, [r2, #0]
 80071cc:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 80071ce:	f7f8 ffc1 	bl	8000154 <__aeabi_fsub>
 80071d2:	f04f 0801 	mov.w	r8, #1
 80071d6:	4544      	cmp	r4, r8
 80071d8:	da0b      	bge.n	80071f2 <__kernel_rem_pio2f+0x4a2>
 80071da:	b10d      	cbz	r5, 80071e0 <__kernel_rem_pio2f+0x490>
 80071dc:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80071e0:	9b00      	ldr	r3, [sp, #0]
 80071e2:	6058      	str	r0, [r3, #4]
 80071e4:	e7b1      	b.n	800714a <__kernel_rem_pio2f+0x3fa>
 80071e6:	46a0      	mov	r8, r4
 80071e8:	2000      	movs	r0, #0
 80071ea:	af32      	add	r7, sp, #200	@ 0xc8
 80071ec:	e7e5      	b.n	80071ba <__kernel_rem_pio2f+0x46a>
 80071ee:	4603      	mov	r3, r0
 80071f0:	e7e9      	b.n	80071c6 <__kernel_rem_pio2f+0x476>
 80071f2:	f857 1f04 	ldr.w	r1, [r7, #4]!
 80071f6:	f7f8 ffaf 	bl	8000158 <__addsf3>
 80071fa:	f108 0801 	add.w	r8, r8, #1
 80071fe:	e7ea      	b.n	80071d6 <__kernel_rem_pio2f+0x486>
 8007200:	f8d8 3000 	ldr.w	r3, [r8]
 8007204:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8007208:	4619      	mov	r1, r3
 800720a:	4610      	mov	r0, r2
 800720c:	9302      	str	r3, [sp, #8]
 800720e:	9201      	str	r2, [sp, #4]
 8007210:	f7f8 ffa2 	bl	8000158 <__addsf3>
 8007214:	9a01      	ldr	r2, [sp, #4]
 8007216:	4601      	mov	r1, r0
 8007218:	4681      	mov	r9, r0
 800721a:	4610      	mov	r0, r2
 800721c:	f7f8 ff9a 	bl	8000154 <__aeabi_fsub>
 8007220:	9b02      	ldr	r3, [sp, #8]
 8007222:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007226:	4619      	mov	r1, r3
 8007228:	f7f8 ff96 	bl	8000158 <__addsf3>
 800722c:	f848 0904 	str.w	r0, [r8], #-4
 8007230:	f8c8 9000 	str.w	r9, [r8]
 8007234:	e797      	b.n	8007166 <__kernel_rem_pio2f+0x416>
 8007236:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800723a:	f8d7 a000 	ldr.w	sl, [r7]
 800723e:	4618      	mov	r0, r3
 8007240:	4651      	mov	r1, sl
 8007242:	9301      	str	r3, [sp, #4]
 8007244:	f7f8 ff88 	bl	8000158 <__addsf3>
 8007248:	9b01      	ldr	r3, [sp, #4]
 800724a:	4601      	mov	r1, r0
 800724c:	4680      	mov	r8, r0
 800724e:	4618      	mov	r0, r3
 8007250:	f7f8 ff80 	bl	8000154 <__aeabi_fsub>
 8007254:	4651      	mov	r1, sl
 8007256:	f7f8 ff7f 	bl	8000158 <__addsf3>
 800725a:	f847 0904 	str.w	r0, [r7], #-4
 800725e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007262:	f8c7 8000 	str.w	r8, [r7]
 8007266:	e782      	b.n	800716e <__kernel_rem_pio2f+0x41e>
 8007268:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800726c:	f7f8 ff74 	bl	8000158 <__addsf3>
 8007270:	3c01      	subs	r4, #1
 8007272:	e780      	b.n	8007176 <__kernel_rem_pio2f+0x426>
 8007274:	9900      	ldr	r1, [sp, #0]
 8007276:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800727a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800727e:	600a      	str	r2, [r1, #0]
 8007280:	604b      	str	r3, [r1, #4]
 8007282:	460a      	mov	r2, r1
 8007284:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8007288:	e77f      	b.n	800718a <__kernel_rem_pio2f+0x43a>
 800728a:	bf00      	nop

0800728c <floorf>:
 800728c:	b570      	push	{r4, r5, r6, lr}
 800728e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8007292:	3d7f      	subs	r5, #127	@ 0x7f
 8007294:	2d16      	cmp	r5, #22
 8007296:	4601      	mov	r1, r0
 8007298:	4604      	mov	r4, r0
 800729a:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800729e:	dc26      	bgt.n	80072ee <floorf+0x62>
 80072a0:	2d00      	cmp	r5, #0
 80072a2:	da0f      	bge.n	80072c4 <floorf+0x38>
 80072a4:	4917      	ldr	r1, [pc, #92]	@ (8007304 <floorf+0x78>)
 80072a6:	f7f8 ff57 	bl	8000158 <__addsf3>
 80072aa:	2100      	movs	r1, #0
 80072ac:	f7f9 fa18 	bl	80006e0 <__aeabi_fcmpgt>
 80072b0:	b130      	cbz	r0, 80072c0 <floorf+0x34>
 80072b2:	2c00      	cmp	r4, #0
 80072b4:	da23      	bge.n	80072fe <floorf+0x72>
 80072b6:	2e00      	cmp	r6, #0
 80072b8:	4c13      	ldr	r4, [pc, #76]	@ (8007308 <floorf+0x7c>)
 80072ba:	bf08      	it	eq
 80072bc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80072c0:	4621      	mov	r1, r4
 80072c2:	e01a      	b.n	80072fa <floorf+0x6e>
 80072c4:	4e11      	ldr	r6, [pc, #68]	@ (800730c <floorf+0x80>)
 80072c6:	412e      	asrs	r6, r5
 80072c8:	4230      	tst	r0, r6
 80072ca:	d016      	beq.n	80072fa <floorf+0x6e>
 80072cc:	490d      	ldr	r1, [pc, #52]	@ (8007304 <floorf+0x78>)
 80072ce:	f7f8 ff43 	bl	8000158 <__addsf3>
 80072d2:	2100      	movs	r1, #0
 80072d4:	f7f9 fa04 	bl	80006e0 <__aeabi_fcmpgt>
 80072d8:	2800      	cmp	r0, #0
 80072da:	d0f1      	beq.n	80072c0 <floorf+0x34>
 80072dc:	2c00      	cmp	r4, #0
 80072de:	bfbe      	ittt	lt
 80072e0:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 80072e4:	412b      	asrlt	r3, r5
 80072e6:	18e4      	addlt	r4, r4, r3
 80072e8:	ea24 0406 	bic.w	r4, r4, r6
 80072ec:	e7e8      	b.n	80072c0 <floorf+0x34>
 80072ee:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 80072f2:	d302      	bcc.n	80072fa <floorf+0x6e>
 80072f4:	f7f8 ff30 	bl	8000158 <__addsf3>
 80072f8:	4601      	mov	r1, r0
 80072fa:	4608      	mov	r0, r1
 80072fc:	bd70      	pop	{r4, r5, r6, pc}
 80072fe:	2400      	movs	r4, #0
 8007300:	e7de      	b.n	80072c0 <floorf+0x34>
 8007302:	bf00      	nop
 8007304:	7149f2ca 	.word	0x7149f2ca
 8007308:	bf800000 	.word	0xbf800000
 800730c:	007fffff 	.word	0x007fffff

08007310 <_init>:
 8007310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007312:	bf00      	nop
 8007314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007316:	bc08      	pop	{r3}
 8007318:	469e      	mov	lr, r3
 800731a:	4770      	bx	lr

0800731c <_fini>:
 800731c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731e:	bf00      	nop
 8007320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007322:	bc08      	pop	{r3}
 8007324:	469e      	mov	lr, r3
 8007326:	4770      	bx	lr
