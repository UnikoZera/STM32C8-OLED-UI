
STM32PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a80  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08004b8c  08004b8c  00005b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fb0  08004fb0  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004fb0  08004fb0  00005fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fb8  08004fb8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fb8  08004fb8  00005fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fbc  08004fbc  00005fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004fc0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fa8  2000005c  0800501c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001004  0800501c  00007004  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000075a0  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019b2  00000000  00000000  0000d625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  0000efd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000710  00000000  00000000  0000f8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017806  00000000  00000000  0000ffb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b64a  00000000  00000000  000277be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082ffc  00000000  00000000  00032e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b5e04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a2c  00000000  00000000  000b5e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000b8874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b74 	.word	0x08004b74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004b74 	.word	0x08004b74

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	@ 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_fmul>:
 800037c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000380:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000384:	bf1e      	ittt	ne
 8000386:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038a:	ea92 0f0c 	teqne	r2, ip
 800038e:	ea93 0f0c 	teqne	r3, ip
 8000392:	d06f      	beq.n	8000474 <__aeabi_fmul+0xf8>
 8000394:	441a      	add	r2, r3
 8000396:	ea80 0c01 	eor.w	ip, r0, r1
 800039a:	0240      	lsls	r0, r0, #9
 800039c:	bf18      	it	ne
 800039e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a2:	d01e      	beq.n	80003e2 <__aeabi_fmul+0x66>
 80003a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b0:	fba0 3101 	umull	r3, r1, r0, r1
 80003b4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003bc:	bf3e      	ittt	cc
 80003be:	0049      	lslcc	r1, r1, #1
 80003c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c4:	005b      	lslcc	r3, r3, #1
 80003c6:	ea40 0001 	orr.w	r0, r0, r1
 80003ca:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ce:	2afd      	cmp	r2, #253	@ 0xfd
 80003d0:	d81d      	bhi.n	800040e <__aeabi_fmul+0x92>
 80003d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003da:	bf08      	it	eq
 80003dc:	f020 0001 	biceq.w	r0, r0, #1
 80003e0:	4770      	bx	lr
 80003e2:	f090 0f00 	teq	r0, #0
 80003e6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003ea:	bf08      	it	eq
 80003ec:	0249      	lsleq	r1, r1, #9
 80003ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f6:	3a7f      	subs	r2, #127	@ 0x7f
 80003f8:	bfc2      	ittt	gt
 80003fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000402:	4770      	bxgt	lr
 8000404:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	3a01      	subs	r2, #1
 800040e:	dc5d      	bgt.n	80004cc <__aeabi_fmul+0x150>
 8000410:	f112 0f19 	cmn.w	r2, #25
 8000414:	bfdc      	itt	le
 8000416:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800041a:	4770      	bxle	lr
 800041c:	f1c2 0200 	rsb	r2, r2, #0
 8000420:	0041      	lsls	r1, r0, #1
 8000422:	fa21 f102 	lsr.w	r1, r1, r2
 8000426:	f1c2 0220 	rsb	r2, r2, #32
 800042a:	fa00 fc02 	lsl.w	ip, r0, r2
 800042e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000432:	f140 0000 	adc.w	r0, r0, #0
 8000436:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043a:	bf08      	it	eq
 800043c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000440:	4770      	bx	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800044a:	bf02      	ittt	eq
 800044c:	0040      	lsleq	r0, r0, #1
 800044e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000452:	3a01      	subeq	r2, #1
 8000454:	d0f9      	beq.n	800044a <__aeabi_fmul+0xce>
 8000456:	ea40 000c 	orr.w	r0, r0, ip
 800045a:	f093 0f00 	teq	r3, #0
 800045e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000462:	bf02      	ittt	eq
 8000464:	0049      	lsleq	r1, r1, #1
 8000466:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800046a:	3b01      	subeq	r3, #1
 800046c:	d0f9      	beq.n	8000462 <__aeabi_fmul+0xe6>
 800046e:	ea41 010c 	orr.w	r1, r1, ip
 8000472:	e78f      	b.n	8000394 <__aeabi_fmul+0x18>
 8000474:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000478:	ea92 0f0c 	teq	r2, ip
 800047c:	bf18      	it	ne
 800047e:	ea93 0f0c 	teqne	r3, ip
 8000482:	d00a      	beq.n	800049a <__aeabi_fmul+0x11e>
 8000484:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000488:	bf18      	it	ne
 800048a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048e:	d1d8      	bne.n	8000442 <__aeabi_fmul+0xc6>
 8000490:	ea80 0001 	eor.w	r0, r0, r1
 8000494:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000498:	4770      	bx	lr
 800049a:	f090 0f00 	teq	r0, #0
 800049e:	bf17      	itett	ne
 80004a0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a4:	4608      	moveq	r0, r1
 80004a6:	f091 0f00 	teqne	r1, #0
 80004aa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004ae:	d014      	beq.n	80004da <__aeabi_fmul+0x15e>
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	d101      	bne.n	80004ba <__aeabi_fmul+0x13e>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d10f      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004ba:	ea93 0f0c 	teq	r3, ip
 80004be:	d103      	bne.n	80004c8 <__aeabi_fmul+0x14c>
 80004c0:	024b      	lsls	r3, r1, #9
 80004c2:	bf18      	it	ne
 80004c4:	4608      	movne	r0, r1
 80004c6:	d108      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d8:	4770      	bx	lr
 80004da:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004de:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_fdiv>:
 80004e4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004ec:	bf1e      	ittt	ne
 80004ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f2:	ea92 0f0c 	teqne	r2, ip
 80004f6:	ea93 0f0c 	teqne	r3, ip
 80004fa:	d069      	beq.n	80005d0 <__aeabi_fdiv+0xec>
 80004fc:	eba2 0203 	sub.w	r2, r2, r3
 8000500:	ea80 0c01 	eor.w	ip, r0, r1
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050a:	d037      	beq.n	800057c <__aeabi_fdiv+0x98>
 800050c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000510:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000514:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000518:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800051c:	428b      	cmp	r3, r1
 800051e:	bf38      	it	cc
 8000520:	005b      	lslcc	r3, r3, #1
 8000522:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000526:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800052a:	428b      	cmp	r3, r1
 800052c:	bf24      	itt	cs
 800052e:	1a5b      	subcs	r3, r3, r1
 8000530:	ea40 000c 	orrcs.w	r0, r0, ip
 8000534:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000538:	bf24      	itt	cs
 800053a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000542:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000546:	bf24      	itt	cs
 8000548:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800054c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000550:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000554:	bf24      	itt	cs
 8000556:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	bf18      	it	ne
 8000562:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000566:	d1e0      	bne.n	800052a <__aeabi_fdiv+0x46>
 8000568:	2afd      	cmp	r2, #253	@ 0xfd
 800056a:	f63f af50 	bhi.w	800040e <__aeabi_fmul+0x92>
 800056e:	428b      	cmp	r3, r1
 8000570:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000574:	bf08      	it	eq
 8000576:	f020 0001 	biceq.w	r0, r0, #1
 800057a:	4770      	bx	lr
 800057c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000580:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000584:	327f      	adds	r2, #127	@ 0x7f
 8000586:	bfc2      	ittt	gt
 8000588:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800058c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000590:	4770      	bxgt	lr
 8000592:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	3a01      	subs	r2, #1
 800059c:	e737      	b.n	800040e <__aeabi_fmul+0x92>
 800059e:	f092 0f00 	teq	r2, #0
 80005a2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a6:	bf02      	ittt	eq
 80005a8:	0040      	lsleq	r0, r0, #1
 80005aa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005ae:	3a01      	subeq	r2, #1
 80005b0:	d0f9      	beq.n	80005a6 <__aeabi_fdiv+0xc2>
 80005b2:	ea40 000c 	orr.w	r0, r0, ip
 80005b6:	f093 0f00 	teq	r3, #0
 80005ba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0049      	lsleq	r1, r1, #1
 80005c2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c6:	3b01      	subeq	r3, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fdiv+0xda>
 80005ca:	ea41 010c 	orr.w	r1, r1, ip
 80005ce:	e795      	b.n	80004fc <__aeabi_fdiv+0x18>
 80005d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d4:	ea92 0f0c 	teq	r2, ip
 80005d8:	d108      	bne.n	80005ec <__aeabi_fdiv+0x108>
 80005da:	0242      	lsls	r2, r0, #9
 80005dc:	f47f af7d 	bne.w	80004da <__aeabi_fmul+0x15e>
 80005e0:	ea93 0f0c 	teq	r3, ip
 80005e4:	f47f af70 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fmul+0x15e>
 80005ec:	ea93 0f0c 	teq	r3, ip
 80005f0:	d104      	bne.n	80005fc <__aeabi_fdiv+0x118>
 80005f2:	024b      	lsls	r3, r1, #9
 80005f4:	f43f af4c 	beq.w	8000490 <__aeabi_fmul+0x114>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e76e      	b.n	80004da <__aeabi_fmul+0x15e>
 80005fc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000600:	bf18      	it	ne
 8000602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000606:	d1ca      	bne.n	800059e <__aeabi_fdiv+0xba>
 8000608:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800060c:	f47f af5c 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 8000610:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000614:	f47f af3c 	bne.w	8000490 <__aeabi_fmul+0x114>
 8000618:	e75f      	b.n	80004da <__aeabi_fmul+0x15e>
 800061a:	bf00      	nop

0800061c <__gesf2>:
 800061c:	f04f 3cff 	mov.w	ip, #4294967295
 8000620:	e006      	b.n	8000630 <__cmpsf2+0x4>
 8000622:	bf00      	nop

08000624 <__lesf2>:
 8000624:	f04f 0c01 	mov.w	ip, #1
 8000628:	e002      	b.n	8000630 <__cmpsf2+0x4>
 800062a:	bf00      	nop

0800062c <__cmpsf2>:
 800062c:	f04f 0c01 	mov.w	ip, #1
 8000630:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000634:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000638:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800063c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000640:	bf18      	it	ne
 8000642:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000646:	d011      	beq.n	800066c <__cmpsf2+0x40>
 8000648:	b001      	add	sp, #4
 800064a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064e:	bf18      	it	ne
 8000650:	ea90 0f01 	teqne	r0, r1
 8000654:	bf58      	it	pl
 8000656:	ebb2 0003 	subspl.w	r0, r2, r3
 800065a:	bf88      	it	hi
 800065c:	17c8      	asrhi	r0, r1, #31
 800065e:	bf38      	it	cc
 8000660:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000664:	bf18      	it	ne
 8000666:	f040 0001 	orrne.w	r0, r0, #1
 800066a:	4770      	bx	lr
 800066c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000670:	d102      	bne.n	8000678 <__cmpsf2+0x4c>
 8000672:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000676:	d105      	bne.n	8000684 <__cmpsf2+0x58>
 8000678:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800067c:	d1e4      	bne.n	8000648 <__cmpsf2+0x1c>
 800067e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000682:	d0e1      	beq.n	8000648 <__cmpsf2+0x1c>
 8000684:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <__aeabi_cfrcmple>:
 800068c:	4684      	mov	ip, r0
 800068e:	4608      	mov	r0, r1
 8000690:	4661      	mov	r1, ip
 8000692:	e7ff      	b.n	8000694 <__aeabi_cfcmpeq>

08000694 <__aeabi_cfcmpeq>:
 8000694:	b50f      	push	{r0, r1, r2, r3, lr}
 8000696:	f7ff ffc9 	bl	800062c <__cmpsf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a4 <__aeabi_fcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cfcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cfcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cfcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffd2 	bl	800068c <__aeabi_cfrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc8 	bl	800068c <__aeabi_cfrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_fcmpun>:
 8000708:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800070c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000710:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000714:	d102      	bne.n	800071c <__aeabi_fcmpun+0x14>
 8000716:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800071a:	d108      	bne.n	800072e <__aeabi_fcmpun+0x26>
 800071c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000720:	d102      	bne.n	8000728 <__aeabi_fcmpun+0x20>
 8000722:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000726:	d102      	bne.n	800072e <__aeabi_fcmpun+0x26>
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	4770      	bx	lr
 800072e:	f04f 0001 	mov.w	r0, #1
 8000732:	4770      	bx	lr

08000734 <__aeabi_f2iz>:
 8000734:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000738:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800073c:	d30f      	bcc.n	800075e <__aeabi_f2iz+0x2a>
 800073e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000742:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000746:	d90d      	bls.n	8000764 <__aeabi_f2iz+0x30>
 8000748:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800074c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000750:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000754:	fa23 f002 	lsr.w	r0, r3, r2
 8000758:	bf18      	it	ne
 800075a:	4240      	negne	r0, r0
 800075c:	4770      	bx	lr
 800075e:	f04f 0000 	mov.w	r0, #0
 8000762:	4770      	bx	lr
 8000764:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000768:	d101      	bne.n	800076e <__aeabi_f2iz+0x3a>
 800076a:	0242      	lsls	r2, r0, #9
 800076c:	d105      	bne.n	800077a <__aeabi_f2iz+0x46>
 800076e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000772:	bf08      	it	eq
 8000774:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000778:	4770      	bx	lr
 800077a:	f04f 0000 	mov.w	r0, #0
 800077e:	4770      	bx	lr

08000780 <__aeabi_f2uiz>:
 8000780:	0042      	lsls	r2, r0, #1
 8000782:	d20e      	bcs.n	80007a2 <__aeabi_f2uiz+0x22>
 8000784:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000788:	d30b      	bcc.n	80007a2 <__aeabi_f2uiz+0x22>
 800078a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800078e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000792:	d409      	bmi.n	80007a8 <__aeabi_f2uiz+0x28>
 8000794:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000798:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800079c:	fa23 f002 	lsr.w	r0, r3, r2
 80007a0:	4770      	bx	lr
 80007a2:	f04f 0000 	mov.w	r0, #0
 80007a6:	4770      	bx	lr
 80007a8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80007ac:	d101      	bne.n	80007b2 <__aeabi_f2uiz+0x32>
 80007ae:	0242      	lsls	r2, r0, #9
 80007b0:	d102      	bne.n	80007b8 <__aeabi_f2uiz+0x38>
 80007b2:	f04f 30ff 	mov.w	r0, #4294967295
 80007b6:	4770      	bx	lr
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop

080007c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 0310 	add.w	r3, r7, #16
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000850 <MX_GPIO_Init+0x90>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a1d      	ldr	r2, [pc, #116]	@ (8000850 <MX_GPIO_Init+0x90>)
 80007da:	f043 0310 	orr.w	r3, r3, #16
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000850 <MX_GPIO_Init+0x90>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0310 	and.w	r3, r3, #16
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ec:	4b18      	ldr	r3, [pc, #96]	@ (8000850 <MX_GPIO_Init+0x90>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a17      	ldr	r2, [pc, #92]	@ (8000850 <MX_GPIO_Init+0x90>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <MX_GPIO_Init+0x90>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0304 	and.w	r3, r3, #4
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000804:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <MX_GPIO_Init+0x90>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a11      	ldr	r2, [pc, #68]	@ (8000850 <MX_GPIO_Init+0x90>)
 800080a:	f043 0308 	orr.w	r3, r3, #8
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <MX_GPIO_Init+0x90>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0308 	and.w	r3, r3, #8
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000822:	480c      	ldr	r0, [pc, #48]	@ (8000854 <MX_GPIO_Init+0x94>)
 8000824:	f001 fe46 	bl	80024b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000828:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800082c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2302      	movs	r3, #2
 8000838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	4619      	mov	r1, r3
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <MX_GPIO_Init+0x94>)
 8000842:	f001 fcb3 	bl	80021ac <HAL_GPIO_Init>

}
 8000846:	bf00      	nop
 8000848:	3720      	adds	r7, #32
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000
 8000854:	40011000 	.word	0x40011000

08000858 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800085c:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <MX_I2C1_Init+0x50>)
 800085e:	4a13      	ldr	r2, [pc, #76]	@ (80008ac <MX_I2C1_Init+0x54>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000864:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <MX_I2C1_Init+0x58>)
 8000866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000868:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000876:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800087a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087c:	4b0a      	ldr	r3, [pc, #40]	@ (80008a8 <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <MX_I2C1_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000896:	f001 fe25 	bl	80024e4 <HAL_I2C_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008a0:	f000 f8d9 	bl	8000a56 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000078 	.word	0x20000078
 80008ac:	40005400 	.word	0x40005400
 80008b0:	00061a80 	.word	0x00061a80

080008b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a15      	ldr	r2, [pc, #84]	@ (8000924 <HAL_I2C_MspInit+0x70>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d123      	bne.n	800091c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d4:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <HAL_I2C_MspInit+0x74>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a13      	ldr	r2, [pc, #76]	@ (8000928 <HAL_I2C_MspInit+0x74>)
 80008da:	f043 0308 	orr.w	r3, r3, #8
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <HAL_I2C_MspInit+0x74>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0308 	and.w	r3, r3, #8
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008ec:	23c0      	movs	r3, #192	@ 0xc0
 80008ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f0:	2312      	movs	r3, #18
 80008f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	4619      	mov	r1, r3
 80008fe:	480b      	ldr	r0, [pc, #44]	@ (800092c <HAL_I2C_MspInit+0x78>)
 8000900:	f001 fc54 	bl	80021ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000904:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <HAL_I2C_MspInit+0x74>)
 8000906:	69db      	ldr	r3, [r3, #28]
 8000908:	4a07      	ldr	r2, [pc, #28]	@ (8000928 <HAL_I2C_MspInit+0x74>)
 800090a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800090e:	61d3      	str	r3, [r2, #28]
 8000910:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <HAL_I2C_MspInit+0x74>)
 8000912:	69db      	ldr	r3, [r3, #28]
 8000914:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800091c:	bf00      	nop
 800091e:	3720      	adds	r7, #32
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40005400 	.word	0x40005400
 8000928:	40021000 	.word	0x40021000
 800092c:	40010c00 	.word	0x40010c00

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b087      	sub	sp, #28
 8000934:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f001 facf 	bl	8001ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 f84b 	bl	80009d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093e:	f7ff ff3f 	bl	80007c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000942:	f7ff ff89 	bl	8000858 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init(); // 初始化OLED
 8000946:	f000 f98b 	bl	8000c60 <OLED_Init>
  OLED_InitBuffer(); // 初始化双缓冲
 800094a:	f000 f88b 	bl	8000a64 <OLED_InitBuffer>
  OLED_ClearBuffer(); // 清空缓冲区
 800094e:	f000 f89d 	bl	8000a8c <OLED_ClearBuffer>

  // InitBlockAnimation(); // 初始化方块动画
  // AnimationLoop(); // 执行动画循环

  OLED_InitAnimationManager(&g_AnimationManager); // 初始化动画管理器
 8000952:	481a      	ldr	r0, [pc, #104]	@ (80009bc <main+0x8c>)
 8000954:	f001 f8c5 	bl	8001ae2 <OLED_InitAnimationManager>
  OLED_MoveObject(&g_AnimationManager, "player", 10, 20, 100, 30, 1000, EASE_OUT_BOUNCE); // 移动对象
 8000958:	2311      	movs	r3, #17
 800095a:	9303      	str	r3, [sp, #12]
 800095c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000960:	9302      	str	r3, [sp, #8]
 8000962:	4b17      	ldr	r3, [pc, #92]	@ (80009c0 <main+0x90>)
 8000964:	9301      	str	r3, [sp, #4]
 8000966:	4b17      	ldr	r3, [pc, #92]	@ (80009c4 <main+0x94>)
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <main+0x98>)
 800096c:	4a17      	ldr	r2, [pc, #92]	@ (80009cc <main+0x9c>)
 800096e:	4918      	ldr	r1, [pc, #96]	@ (80009d0 <main+0xa0>)
 8000970:	4812      	ldr	r0, [pc, #72]	@ (80009bc <main+0x8c>)
 8000972:	f001 f917 	bl	8001ba4 <OLED_MoveObject>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {    
    OLED_ClearBuffer();
 8000976:	f000 f889 	bl	8000a8c <OLED_ClearBuffer>

    OLED_UpdateAnimationManager(&g_AnimationManager);
 800097a:	4810      	ldr	r0, [pc, #64]	@ (80009bc <main+0x8c>)
 800097c:	f001 f963 	bl	8001c46 <OLED_UpdateAnimationManager>

    // 绘制对象
    float x, y;
    if (OLED_GetObjectPosition(&g_AnimationManager, "player", &x, &y))
 8000980:	463b      	mov	r3, r7
 8000982:	1d3a      	adds	r2, r7, #4
 8000984:	4912      	ldr	r1, [pc, #72]	@ (80009d0 <main+0xa0>)
 8000986:	480d      	ldr	r0, [pc, #52]	@ (80009bc <main+0x8c>)
 8000988:	f001 f8e8 	bl	8001b5c <OLED_GetObjectPosition>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d010      	beq.n	80009b4 <main+0x84>
    {
        OLED_DrawRectangle((uint8_t)x, (uint8_t)y, 20, 20);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fef3 	bl	8000780 <__aeabi_f2uiz>
 800099a:	4603      	mov	r3, r0
 800099c:	b2dc      	uxtb	r4, r3
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff feed 	bl	8000780 <__aeabi_f2uiz>
 80009a6:	4603      	mov	r3, r0
 80009a8:	b2d9      	uxtb	r1, r3
 80009aa:	2314      	movs	r3, #20
 80009ac:	2214      	movs	r2, #20
 80009ae:	4620      	mov	r0, r4
 80009b0:	f001 f999 	bl	8001ce6 <OLED_DrawRectangle>
    }



    OLED_UpdateDisplayVSync(); // 更新显示
 80009b4:	f000 f896 	bl	8000ae4 <OLED_UpdateDisplayVSync>
  {    
 80009b8:	e7dd      	b.n	8000976 <main+0x46>
 80009ba:	bf00      	nop
 80009bc:	200008d4 	.word	0x200008d4
 80009c0:	41f00000 	.word	0x41f00000
 80009c4:	42c80000 	.word	0x42c80000
 80009c8:	41a00000 	.word	0x41a00000
 80009cc:	41200000 	.word	0x41200000
 80009d0:	08004b8c 	.word	0x08004b8c

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b090      	sub	sp, #64	@ 0x40
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 0318 	add.w	r3, r7, #24
 80009de:	2228      	movs	r2, #40	@ 0x28
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f002 fe16 	bl	8003614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009fa:	2301      	movs	r3, #1
 80009fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009fe:	2310      	movs	r3, #16
 8000a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a02:	2302      	movs	r3, #2
 8000a04:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a06:	2300      	movs	r3, #0
 8000a08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a0a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a10:	f107 0318 	add.w	r3, r7, #24
 8000a14:	4618      	mov	r0, r3
 8000a16:	f002 fa01 	bl	8002e1c <HAL_RCC_OscConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a20:	f000 f819 	bl	8000a56 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a24:	230f      	movs	r3, #15
 8000a26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f002 fc6e 	bl	8003320 <HAL_RCC_ClockConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000a4a:	f000 f804 	bl	8000a56 <Error_Handler>
  }
}
 8000a4e:	bf00      	nop
 8000a50:	3740      	adds	r7, #64	@ 0x40
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5a:	b672      	cpsid	i
}
 8000a5c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5e:	bf00      	nop
 8000a60:	e7fd      	b.n	8000a5e <Error_Handler+0x8>
	...

08000a64 <OLED_InitBuffer>:
    0x44, 0x64, 0x54, 0x4C, 0x44, 0x00  // z (122)
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000a68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <OLED_InitBuffer+0x20>)
 8000a70:	f002 fdd0 	bl	8003614 <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 8000a74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4803      	ldr	r0, [pc, #12]	@ (8000a88 <OLED_InitBuffer+0x24>)
 8000a7c:	f002 fdca 	bl	8003614 <memset>
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200000d4 	.word	0x200000d4
 8000a88:	200004d4 	.word	0x200004d4

08000a8c <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000a90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a94:	2100      	movs	r1, #0
 8000a96:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <OLED_ClearBuffer+0x14>)
 8000a98:	f002 fdbc 	bl	8003614 <memset>
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200000d4 	.word	0x200000d4

08000aa4 <OLED_IsBusy>:

uint8_t OLED_IsBusy(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
    // 如果标记为忙，检查是否已经过了足够时间
    if (oled_update_flag)
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <OLED_IsBusy+0x38>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d00b      	beq.n	8000acc <OLED_IsBusy+0x28>
    {
        // SSD1315/SSD1306 典型帧率约为60Hz，每帧约16.7ms
        uint32_t current_time = HAL_GetTick();
 8000ab4:	f001 fa68 	bl	8001f88 <HAL_GetTick>
 8000ab8:	6078      	str	r0, [r7, #4]
        if (current_time - oled_last_update_time >= 2)
 8000aba:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <OLED_IsBusy+0x3c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d902      	bls.n	8000acc <OLED_IsBusy+0x28>
        {
            oled_update_flag = 0; // 已经过了足够时间，不再忙
 8000ac6:	4b05      	ldr	r3, [pc, #20]	@ (8000adc <OLED_IsBusy+0x38>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
        }
    }
    return oled_update_flag;
 8000acc:	4b03      	ldr	r3, [pc, #12]	@ (8000adc <OLED_IsBusy+0x38>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b2db      	uxtb	r3, r3
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200000d0 	.word	0x200000d0
 8000ae0:	200000cc 	.word	0x200000cc

08000ae4 <OLED_UpdateDisplayVSync>:

void OLED_UpdateDisplayVSync(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b0a4      	sub	sp, #144	@ 0x90
 8000ae8:	af02      	add	r7, sp, #8
    while (OLED_IsBusy()) 
 8000aea:	bf00      	nop
 8000aec:	f7ff ffda 	bl	8000aa4 <OLED_IsBusy>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d1fa      	bne.n	8000aec <OLED_UpdateDisplayVSync+0x8>
    {

    }
    oled_update_flag = 1;
 8000af6:	4b23      	ldr	r3, [pc, #140]	@ (8000b84 <OLED_UpdateDisplayVSync+0xa0>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8000afc:	f001 fa44 	bl	8001f88 <HAL_GetTick>
 8000b00:	4603      	mov	r3, r0
 8000b02:	4a21      	ldr	r2, [pc, #132]	@ (8000b88 <OLED_UpdateDisplayVSync+0xa4>)
 8000b04:	6013      	str	r3, [r2, #0]

    // 交换前后缓冲区
    memcpy(OLED_FrontBuffer, OLED_BackBuffer, 128 * 8); // 复制当前缓冲区到前缓冲区
 8000b06:	4a21      	ldr	r2, [pc, #132]	@ (8000b8c <OLED_UpdateDisplayVSync+0xa8>)
 8000b08:	4b21      	ldr	r3, [pc, #132]	@ (8000b90 <OLED_UpdateDisplayVSync+0xac>)
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b12:	461a      	mov	r2, r3
 8000b14:	f002 fdc4 	bl	80036a0 <memcpy>

    // 将前缓冲区发送到显示器
    uint8_t data[129]; // 数据缓冲区 (包括控制字节)
    data[0] = 0x40;    // 数据控制字节
 8000b18:	2340      	movs	r3, #64	@ 0x40
 8000b1a:	713b      	strb	r3, [r7, #4]

    // 逐页发送数据，每页一次性发送整行
    for (uint8_t page = 0; page < 8; page++)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000b22:	e025      	b.n	8000b70 <OLED_UpdateDisplayVSync+0x8c>
    {
        // 设置页地址
        OLED_SendCommand(0xB0 + page);
 8000b24:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000b28:	3b50      	subs	r3, #80	@ 0x50
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 f87d 	bl	8000c2c <OLED_SendCommand>
        // 设置列起始地址
        OLED_SendCommand(0x00); // 低位地址
 8000b32:	2000      	movs	r0, #0
 8000b34:	f000 f87a 	bl	8000c2c <OLED_SendCommand>
        OLED_SendCommand(0x10); // 高位地址
 8000b38:	2010      	movs	r0, #16
 8000b3a:	f000 f877 	bl	8000c2c <OLED_SendCommand>

        // 复制当前页到发送缓冲区
        memcpy(data + 1, &OLED_FrontBuffer[page * OLED_WIDTH], OLED_WIDTH);
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	3301      	adds	r3, #1
 8000b42:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8000b46:	01d2      	lsls	r2, r2, #7
 8000b48:	4910      	ldr	r1, [pc, #64]	@ (8000b8c <OLED_UpdateDisplayVSync+0xa8>)
 8000b4a:	4411      	add	r1, r2
 8000b4c:	2280      	movs	r2, #128	@ 0x80
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f002 fda6 	bl	80036a0 <memcpy>

        // 发送一整行数据
        HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, OLED_WIDTH + 1, HAL_MAX_DELAY);
 8000b54:	1d3a      	adds	r2, r7, #4
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	2381      	movs	r3, #129	@ 0x81
 8000b5e:	2178      	movs	r1, #120	@ 0x78
 8000b60:	480c      	ldr	r0, [pc, #48]	@ (8000b94 <OLED_UpdateDisplayVSync+0xb0>)
 8000b62:	f001 fe03 	bl	800276c <HAL_I2C_Master_Transmit>
    for (uint8_t page = 0; page < 8; page++)
 8000b66:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000b70:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000b74:	2b07      	cmp	r3, #7
 8000b76:	d9d5      	bls.n	8000b24 <OLED_UpdateDisplayVSync+0x40>
    }
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	3788      	adds	r7, #136	@ 0x88
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200000d0 	.word	0x200000d0
 8000b88:	200000cc 	.word	0x200000cc
 8000b8c:	200004d4 	.word	0x200004d4
 8000b90:	200000d4 	.word	0x200000d4
 8000b94:	20000078 	.word	0x20000078

08000b98 <OLED_WritePixel>:

void OLED_WritePixel(uint8_t x, uint8_t y, uint8_t color)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	71bb      	strb	r3, [r7, #6]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	717b      	strb	r3, [r7, #5]
    // 边界检查
    if (x >= 128 || y >= 64)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	db34      	blt.n	8000c1c <OLED_WritePixel+0x84>
 8000bb2:	79bb      	ldrb	r3, [r7, #6]
 8000bb4:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bb6:	d831      	bhi.n	8000c1c <OLED_WritePixel+0x84>
        return;

    // 计算像素所在的字节位置
    uint16_t byte_index = x + (y / 8) * 128;
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	79bb      	ldrb	r3, [r7, #6]
 8000bbe:	08db      	lsrs	r3, r3, #3
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	01db      	lsls	r3, r3, #7
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	4413      	add	r3, r2
 8000bc8:	81fb      	strh	r3, [r7, #14]
    uint8_t bit_position = y % 8;
 8000bca:	79bb      	ldrb	r3, [r7, #6]
 8000bcc:	f003 0307 	and.w	r3, r3, #7
 8000bd0:	737b      	strb	r3, [r7, #13]

    if (color) // 如果需要点亮像素
 8000bd2:	797b      	ldrb	r3, [r7, #5]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d00f      	beq.n	8000bf8 <OLED_WritePixel+0x60>
        OLED_BackBuffer[byte_index] |= (1 << bit_position);
 8000bd8:	89fb      	ldrh	r3, [r7, #14]
 8000bda:	4a13      	ldr	r2, [pc, #76]	@ (8000c28 <OLED_WritePixel+0x90>)
 8000bdc:	5cd3      	ldrb	r3, [r2, r3]
 8000bde:	b25a      	sxtb	r2, r3
 8000be0:	7b7b      	ldrb	r3, [r7, #13]
 8000be2:	2101      	movs	r1, #1
 8000be4:	fa01 f303 	lsl.w	r3, r1, r3
 8000be8:	b25b      	sxtb	r3, r3
 8000bea:	4313      	orrs	r3, r2
 8000bec:	b25a      	sxtb	r2, r3
 8000bee:	89fb      	ldrh	r3, [r7, #14]
 8000bf0:	b2d1      	uxtb	r1, r2
 8000bf2:	4a0d      	ldr	r2, [pc, #52]	@ (8000c28 <OLED_WritePixel+0x90>)
 8000bf4:	54d1      	strb	r1, [r2, r3]
 8000bf6:	e012      	b.n	8000c1e <OLED_WritePixel+0x86>
    else // 如果需要熄灭像素
        OLED_BackBuffer[byte_index] &= ~(1 << bit_position);
 8000bf8:	89fb      	ldrh	r3, [r7, #14]
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	@ (8000c28 <OLED_WritePixel+0x90>)
 8000bfc:	5cd3      	ldrb	r3, [r2, r3]
 8000bfe:	b25a      	sxtb	r2, r3
 8000c00:	7b7b      	ldrb	r3, [r7, #13]
 8000c02:	2101      	movs	r1, #1
 8000c04:	fa01 f303 	lsl.w	r3, r1, r3
 8000c08:	b25b      	sxtb	r3, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	4013      	ands	r3, r2
 8000c10:	b25a      	sxtb	r2, r3
 8000c12:	89fb      	ldrh	r3, [r7, #14]
 8000c14:	b2d1      	uxtb	r1, r2
 8000c16:	4a04      	ldr	r2, [pc, #16]	@ (8000c28 <OLED_WritePixel+0x90>)
 8000c18:	54d1      	strb	r1, [r2, r3]
 8000c1a:	e000      	b.n	8000c1e <OLED_WritePixel+0x86>
        return;
 8000c1c:	bf00      	nop
}
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	200000d4 	.word	0x200000d4

08000c2c <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af02      	add	r7, sp, #8
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 8000c36:	2300      	movs	r3, #0
 8000c38:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8000c3e:	f107 020c 	add.w	r2, r7, #12
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	2302      	movs	r3, #2
 8000c4a:	2178      	movs	r1, #120	@ 0x78
 8000c4c:	4803      	ldr	r0, [pc, #12]	@ (8000c5c <OLED_SendCommand+0x30>)
 8000c4e:	f001 fd8d 	bl	800276c <HAL_I2C_Master_Transmit>
}
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000078 	.word	0x20000078

08000c60 <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 8000c64:	2064      	movs	r0, #100	@ 0x64
 8000c66:	f001 f999 	bl	8001f9c <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 8000c6a:	20ae      	movs	r0, #174	@ 0xae
 8000c6c:	f7ff ffde 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 8000c70:	20d5      	movs	r0, #213	@ 0xd5
 8000c72:	f7ff ffdb 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 8000c76:	2080      	movs	r0, #128	@ 0x80
 8000c78:	f7ff ffd8 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8000c7c:	20a8      	movs	r0, #168	@ 0xa8
 8000c7e:	f7ff ffd5 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 8000c82:	203f      	movs	r0, #63	@ 0x3f
 8000c84:	f7ff ffd2 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8000c88:	20d3      	movs	r0, #211	@ 0xd3
 8000c8a:	f7ff ffcf 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f7ff ffcc 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8000c94:	2040      	movs	r0, #64	@ 0x40
 8000c96:	f7ff ffc9 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 8000c9a:	208d      	movs	r0, #141	@ 0x8d
 8000c9c:	f7ff ffc6 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 8000ca0:	2014      	movs	r0, #20
 8000ca2:	f7ff ffc3 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 8000ca6:	2020      	movs	r0, #32
 8000ca8:	f7ff ffc0 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff ffbd 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 8000cb2:	20a1      	movs	r0, #161	@ 0xa1
 8000cb4:	f7ff ffba 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 8000cb8:	20c8      	movs	r0, #200	@ 0xc8
 8000cba:	f7ff ffb7 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 8000cbe:	20da      	movs	r0, #218	@ 0xda
 8000cc0:	f7ff ffb4 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8000cc4:	2012      	movs	r0, #18
 8000cc6:	f7ff ffb1 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 8000cca:	2081      	movs	r0, #129	@ 0x81
 8000ccc:	f7ff ffae 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 8000cd0:	20cf      	movs	r0, #207	@ 0xcf
 8000cd2:	f7ff ffab 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 8000cd6:	20d9      	movs	r0, #217	@ 0xd9
 8000cd8:	f7ff ffa8 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 8000cdc:	20f1      	movs	r0, #241	@ 0xf1
 8000cde:	f7ff ffa5 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 8000ce2:	20db      	movs	r0, #219	@ 0xdb
 8000ce4:	f7ff ffa2 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 8000ce8:	2030      	movs	r0, #48	@ 0x30
 8000cea:	f7ff ff9f 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 8000cee:	20a4      	movs	r0, #164	@ 0xa4
 8000cf0:	f7ff ff9c 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 8000cf4:	20a6      	movs	r0, #166	@ 0xa6
 8000cf6:	f7ff ff99 	bl	8000c2c <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 8000cfa:	202e      	movs	r0, #46	@ 0x2e
 8000cfc:	f7ff ff96 	bl	8000c2c <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 8000d00:	f7ff feb0 	bl	8000a64 <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 8000d04:	f7ff fec2 	bl	8000a8c <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 8000d08:	20af      	movs	r0, #175	@ 0xaf
 8000d0a:	f7ff ff8f 	bl	8000c2c <OLED_SendCommand>
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <EaseLinear>:
#include "oled_ui.h"

#pragma region TWEENS // 动画缓动函数全部在这里定义

static float EaseLinear(float t)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
    return t;
 8000d1a:	687b      	ldr	r3, [r7, #4]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr

08000d26 <EaseInQuad>:

static float EaseInQuad(float t)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
    return t * t;
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff fb23 	bl	800037c <__aeabi_fmul>
 8000d36:	4603      	mov	r3, r0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <EaseOutQuad>:

static float EaseOutQuad(float t)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
    return t * (2 - t);
 8000d48:	6879      	ldr	r1, [r7, #4]
 8000d4a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000d4e:	f7ff fa0b 	bl	8000168 <__aeabi_fsub>
 8000d52:	4603      	mov	r3, r0
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fb10 	bl	800037c <__aeabi_fmul>
 8000d5c:	4603      	mov	r3, r0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <EaseInOutQuad>:

static float EaseInOutQuad(float t)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 2 * t * t : -1 + (4 - 2 * t) * t;
 8000d6e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff fca0 	bl	80006b8 <__aeabi_fcmplt>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d00b      	beq.n	8000d96 <EaseInOutQuad+0x30>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4619      	mov	r1, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff f9f2 	bl	800016c <__addsf3>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff faf5 	bl	800037c <__aeabi_fmul>
 8000d92:	4603      	mov	r3, r0
 8000d94:	e016      	b.n	8000dc4 <EaseInOutQuad+0x5e>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff f9e6 	bl	800016c <__addsf3>
 8000da0:	4603      	mov	r3, r0
 8000da2:	4619      	mov	r1, r3
 8000da4:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 8000da8:	f7ff f9de 	bl	8000168 <__aeabi_fsub>
 8000dac:	4603      	mov	r3, r0
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fae3 	bl	800037c <__aeabi_fmul>
 8000db6:	4603      	mov	r3, r0
 8000db8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff f9d3 	bl	8000168 <__aeabi_fsub>
 8000dc2:	4603      	mov	r3, r0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <EaseInCubic>:

static float EaseInCubic(float t)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
    return t * t * t;
 8000dd4:	6879      	ldr	r1, [r7, #4]
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff fad0 	bl	800037c <__aeabi_fmul>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff facb 	bl	800037c <__aeabi_fmul>
 8000de6:	4603      	mov	r3, r0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <EaseOutCubic>:

static float EaseOutCubic(float t)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
    float t1 = t - 1;
 8000df8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff f9b3 	bl	8000168 <__aeabi_fsub>
 8000e02:	4603      	mov	r3, r0
 8000e04:	60fb      	str	r3, [r7, #12]
    return t1 * t1 * t1 + 1;
 8000e06:	68f9      	ldr	r1, [r7, #12]
 8000e08:	68f8      	ldr	r0, [r7, #12]
 8000e0a:	f7ff fab7 	bl	800037c <__aeabi_fmul>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	68f9      	ldr	r1, [r7, #12]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fab2 	bl	800037c <__aeabi_fmul>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff f9a4 	bl	800016c <__addsf3>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <EaseInOutCubic>:

static float EaseInOutCubic(float t)
{
 8000e2e:	b590      	push	{r4, r7, lr}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
 8000e36:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff fc3c 	bl	80006b8 <__aeabi_fcmplt>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d010      	beq.n	8000e68 <EaseInOutCubic+0x3a>
 8000e46:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff fa96 	bl	800037c <__aeabi_fmul>
 8000e50:	4603      	mov	r3, r0
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fa91 	bl	800037c <__aeabi_fmul>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fa8c 	bl	800037c <__aeabi_fmul>
 8000e64:	4603      	mov	r3, r0
 8000e66:	e02f      	b.n	8000ec8 <EaseInOutCubic+0x9a>
 8000e68:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff f97b 	bl	8000168 <__aeabi_fsub>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461c      	mov	r4, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff f976 	bl	800016c <__addsf3>
 8000e80:	4603      	mov	r3, r0
 8000e82:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff f96e 	bl	8000168 <__aeabi_fsub>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4620      	mov	r0, r4
 8000e92:	f7ff fa73 	bl	800037c <__aeabi_fmul>
 8000e96:	4603      	mov	r3, r0
 8000e98:	461c      	mov	r4, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff f964 	bl	800016c <__addsf3>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff f95c 	bl	8000168 <__aeabi_fsub>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	f7ff fa61 	bl	800037c <__aeabi_fmul>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff f953 	bl	800016c <__addsf3>
 8000ec6:	4603      	mov	r3, r0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd90      	pop	{r4, r7, pc}

08000ed0 <EaseInExpo>:

// 在现有EaseType_t枚举中添加这些新类型
// 指数缓动
static float EaseInExpo(float t)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
    return (t == 0) ? 0 : powf(2, 10 * (t - 1));
 8000ed8:	f04f 0100 	mov.w	r1, #0
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff fbe1 	bl	80006a4 <__aeabi_fcmpeq>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d111      	bne.n	8000f0c <EaseInExpo+0x3c>
 8000ee8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff f93b 	bl	8000168 <__aeabi_fsub>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4908      	ldr	r1, [pc, #32]	@ (8000f18 <EaseInExpo+0x48>)
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fa40 	bl	800037c <__aeabi_fmul>
 8000efc:	4603      	mov	r3, r0
 8000efe:	4619      	mov	r1, r3
 8000f00:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000f04:	f002 fbda 	bl	80036bc <powf>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	e001      	b.n	8000f10 <EaseInExpo+0x40>
 8000f0c:	f04f 0300 	mov.w	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	41200000 	.word	0x41200000

08000f1c <EaseOutExpo>:

static float EaseOutExpo(float t)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    return (t == 1) ? 1 : (1 - powf(2, -10 * t));
 8000f24:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff fbbb 	bl	80006a4 <__aeabi_fcmpeq>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d111      	bne.n	8000f58 <EaseOutExpo+0x3c>
 8000f34:	490b      	ldr	r1, [pc, #44]	@ (8000f64 <EaseOutExpo+0x48>)
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff fa20 	bl	800037c <__aeabi_fmul>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000f44:	f002 fbba 	bl	80036bc <powf>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000f50:	f7ff f90a 	bl	8000168 <__aeabi_fsub>
 8000f54:	4603      	mov	r3, r0
 8000f56:	e001      	b.n	8000f5c <EaseOutExpo+0x40>
 8000f58:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	c1200000 	.word	0xc1200000

08000f68 <EaseInOutExpo>:

static float EaseInOutExpo(float t)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
    if (t == 0)
 8000f70:	f04f 0100 	mov.w	r1, #0
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff fb95 	bl	80006a4 <__aeabi_fcmpeq>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d002      	beq.n	8000f86 <EaseInOutExpo+0x1e>
        return 0;
 8000f80:	f04f 0300 	mov.w	r3, #0
 8000f84:	e045      	b.n	8001012 <EaseInOutExpo+0xaa>
    if (t == 1)
 8000f86:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff fb8a 	bl	80006a4 <__aeabi_fcmpeq>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d002      	beq.n	8000f9c <EaseInOutExpo+0x34>
        return 1;
 8000f96:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000f9a:	e03a      	b.n	8001012 <EaseInOutExpo+0xaa>
    if (t < 0.5f)
 8000f9c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff fb89 	bl	80006b8 <__aeabi_fcmplt>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d016      	beq.n	8000fda <EaseInOutExpo+0x72>
        return powf(2, 20 * t - 10) / 2;
 8000fac:	491b      	ldr	r1, [pc, #108]	@ (800101c <EaseInOutExpo+0xb4>)
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff f9e4 	bl	800037c <__aeabi_fmul>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	491a      	ldr	r1, [pc, #104]	@ (8001020 <EaseInOutExpo+0xb8>)
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff f8d5 	bl	8000168 <__aeabi_fsub>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000fc6:	f002 fb79 	bl	80036bc <powf>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fa87 	bl	80004e4 <__aeabi_fdiv>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	e01b      	b.n	8001012 <EaseInOutExpo+0xaa>
    return (2 - powf(2, -20 * t + 10)) / 2;
 8000fda:	4912      	ldr	r1, [pc, #72]	@ (8001024 <EaseInOutExpo+0xbc>)
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff f9cd 	bl	800037c <__aeabi_fmul>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	490e      	ldr	r1, [pc, #56]	@ (8001020 <EaseInOutExpo+0xb8>)
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff f8c0 	bl	800016c <__addsf3>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000ff4:	f002 fb62 	bl	80036bc <powf>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001000:	f7ff f8b2 	bl	8000168 <__aeabi_fsub>
 8001004:	4603      	mov	r3, r0
 8001006:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fa6a 	bl	80004e4 <__aeabi_fdiv>
 8001010:	4603      	mov	r3, r0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	41a00000 	.word	0x41a00000
 8001020:	41200000 	.word	0x41200000
 8001024:	c1a00000 	.word	0xc1a00000

08001028 <EaseInCirc>:

// 圆形曲线缓动
static float EaseInCirc(float t)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    return 1 - sqrtf(1 - t * t);
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff f9a2 	bl	800037c <__aeabi_fmul>
 8001038:	4603      	mov	r3, r0
 800103a:	4619      	mov	r1, r3
 800103c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001040:	f7ff f892 	bl	8000168 <__aeabi_fsub>
 8001044:	4603      	mov	r3, r0
 8001046:	4618      	mov	r0, r3
 8001048:	f002 fb85 	bl	8003756 <sqrtf>
 800104c:	4603      	mov	r3, r0
 800104e:	4619      	mov	r1, r3
 8001050:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001054:	f7ff f888 	bl	8000168 <__aeabi_fsub>
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <EaseOutCirc>:

static float EaseOutCirc(float t)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
    return sqrtf(1 - powf(t - 1, 2));
 800106a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff f87a 	bl	8000168 <__aeabi_fsub>
 8001074:	4603      	mov	r3, r0
 8001076:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800107a:	4618      	mov	r0, r3
 800107c:	f002 fb1e 	bl	80036bc <powf>
 8001080:	4603      	mov	r3, r0
 8001082:	4619      	mov	r1, r3
 8001084:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001088:	f7ff f86e 	bl	8000168 <__aeabi_fsub>
 800108c:	4603      	mov	r3, r0
 800108e:	4618      	mov	r0, r3
 8001090:	f002 fb61 	bl	8003756 <sqrtf>
 8001094:	4603      	mov	r3, r0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <EaseInOutCirc>:

static float EaseInOutCirc(float t)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 80010a6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff fb04 	bl	80006b8 <__aeabi_fcmplt>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d022      	beq.n	80010fc <EaseInOutCirc+0x5e>
        return (1 - sqrtf(1 - powf(2 * t, 2))) / 2;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4619      	mov	r1, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f856 	bl	800016c <__addsf3>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80010c6:	4618      	mov	r0, r3
 80010c8:	f002 faf8 	bl	80036bc <powf>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4619      	mov	r1, r3
 80010d0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80010d4:	f7ff f848 	bl	8000168 <__aeabi_fsub>
 80010d8:	4603      	mov	r3, r0
 80010da:	4618      	mov	r0, r3
 80010dc:	f002 fb3b 	bl	8003756 <sqrtf>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80010e8:	f7ff f83e 	bl	8000168 <__aeabi_fsub>
 80010ec:	4603      	mov	r3, r0
 80010ee:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f9f6 	bl	80004e4 <__aeabi_fdiv>
 80010f8:	4603      	mov	r3, r0
 80010fa:	e027      	b.n	800114c <EaseInOutCirc+0xae>
    return (sqrtf(1 - powf(-2 * t + 2, 2)) + 1) / 2;
 80010fc:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff f93b 	bl	800037c <__aeabi_fmul>
 8001106:	4603      	mov	r3, r0
 8001108:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f82d 	bl	800016c <__addsf3>
 8001112:	4603      	mov	r3, r0
 8001114:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001118:	4618      	mov	r0, r3
 800111a:	f002 facf 	bl	80036bc <powf>
 800111e:	4603      	mov	r3, r0
 8001120:	4619      	mov	r1, r3
 8001122:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001126:	f7ff f81f 	bl	8000168 <__aeabi_fsub>
 800112a:	4603      	mov	r3, r0
 800112c:	4618      	mov	r0, r3
 800112e:	f002 fb12 	bl	8003756 <sqrtf>
 8001132:	4603      	mov	r3, r0
 8001134:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff f817 	bl	800016c <__addsf3>
 800113e:	4603      	mov	r3, r0
 8001140:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f9cd 	bl	80004e4 <__aeabi_fdiv>
 800114a:	4603      	mov	r3, r0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <EaseInElastic>:

// 弹性缓动
static float EaseInElastic(float t)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 800115c:	4b22      	ldr	r3, [pc, #136]	@ (80011e8 <EaseInElastic+0x94>)
 800115e:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8001160:	f04f 0100 	mov.w	r1, #0
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff fa9d 	bl	80006a4 <__aeabi_fcmpeq>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <EaseInElastic+0x22>
        return 0;
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	e034      	b.n	80011e0 <EaseInElastic+0x8c>
    if (t == 1)
 8001176:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff fa92 	bl	80006a4 <__aeabi_fcmpeq>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <EaseInElastic+0x38>
        return 1;
 8001186:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800118a:	e029      	b.n	80011e0 <EaseInElastic+0x8c>
    return -powf(2, 10 * t - 10) * sinf((t * 10 - 10.75f) * c4);
 800118c:	4917      	ldr	r1, [pc, #92]	@ (80011ec <EaseInElastic+0x98>)
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff f8f4 	bl	800037c <__aeabi_fmul>
 8001194:	4603      	mov	r3, r0
 8001196:	4915      	ldr	r1, [pc, #84]	@ (80011ec <EaseInElastic+0x98>)
 8001198:	4618      	mov	r0, r3
 800119a:	f7fe ffe5 	bl	8000168 <__aeabi_fsub>
 800119e:	4603      	mov	r3, r0
 80011a0:	4619      	mov	r1, r3
 80011a2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80011a6:	f002 fa89 	bl	80036bc <powf>
 80011aa:	4603      	mov	r3, r0
 80011ac:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 80011b0:	490e      	ldr	r1, [pc, #56]	@ (80011ec <EaseInElastic+0x98>)
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff f8e2 	bl	800037c <__aeabi_fmul>
 80011b8:	4603      	mov	r3, r0
 80011ba:	490d      	ldr	r1, [pc, #52]	@ (80011f0 <EaseInElastic+0x9c>)
 80011bc:	4618      	mov	r0, r3
 80011be:	f7fe ffd3 	bl	8000168 <__aeabi_fsub>
 80011c2:	4603      	mov	r3, r0
 80011c4:	68f9      	ldr	r1, [r7, #12]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f8d8 	bl	800037c <__aeabi_fmul>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f002 fb14 	bl	80037fc <sinf>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4619      	mov	r1, r3
 80011d8:	4620      	mov	r0, r4
 80011da:	f7ff f8cf 	bl	800037c <__aeabi_fmul>
 80011de:	4603      	mov	r3, r0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd90      	pop	{r4, r7, pc}
 80011e8:	40060a8b 	.word	0x40060a8b
 80011ec:	41200000 	.word	0x41200000
 80011f0:	412c0000 	.word	0x412c0000

080011f4 <EaseOutElastic>:

static float EaseOutElastic(float t)
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 80011fc:	4b22      	ldr	r3, [pc, #136]	@ (8001288 <EaseOutElastic+0x94>)
 80011fe:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8001200:	f04f 0100 	mov.w	r1, #0
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff fa4d 	bl	80006a4 <__aeabi_fcmpeq>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <EaseOutElastic+0x22>
        return 0;
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	e034      	b.n	8001280 <EaseOutElastic+0x8c>
    if (t == 1)
 8001216:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fa42 	bl	80006a4 <__aeabi_fcmpeq>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <EaseOutElastic+0x38>
        return 1;
 8001226:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800122a:	e029      	b.n	8001280 <EaseOutElastic+0x8c>
    return powf(2, -10 * t) * sinf((t * 10 - 0.75f) * c4) + 1;
 800122c:	4917      	ldr	r1, [pc, #92]	@ (800128c <EaseOutElastic+0x98>)
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff f8a4 	bl	800037c <__aeabi_fmul>
 8001234:	4603      	mov	r3, r0
 8001236:	4619      	mov	r1, r3
 8001238:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800123c:	f002 fa3e 	bl	80036bc <powf>
 8001240:	4604      	mov	r4, r0
 8001242:	4913      	ldr	r1, [pc, #76]	@ (8001290 <EaseOutElastic+0x9c>)
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff f899 	bl	800037c <__aeabi_fmul>
 800124a:	4603      	mov	r3, r0
 800124c:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8001250:	4618      	mov	r0, r3
 8001252:	f7fe ff89 	bl	8000168 <__aeabi_fsub>
 8001256:	4603      	mov	r3, r0
 8001258:	68f9      	ldr	r1, [r7, #12]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f88e 	bl	800037c <__aeabi_fmul>
 8001260:	4603      	mov	r3, r0
 8001262:	4618      	mov	r0, r3
 8001264:	f002 faca 	bl	80037fc <sinf>
 8001268:	4603      	mov	r3, r0
 800126a:	4619      	mov	r1, r3
 800126c:	4620      	mov	r0, r4
 800126e:	f7ff f885 	bl	800037c <__aeabi_fmul>
 8001272:	4603      	mov	r3, r0
 8001274:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001278:	4618      	mov	r0, r3
 800127a:	f7fe ff77 	bl	800016c <__addsf3>
 800127e:	4603      	mov	r3, r0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	bd90      	pop	{r4, r7, pc}
 8001288:	40060a8b 	.word	0x40060a8b
 800128c:	c1200000 	.word	0xc1200000
 8001290:	41200000 	.word	0x41200000

08001294 <EaseInOutElastic>:

static float EaseInOutElastic(float t)
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
    const float c5 = (2 * 3.14159f) / 4.5f;
 800129c:	4b44      	ldr	r3, [pc, #272]	@ (80013b0 <EaseInOutElastic+0x11c>)
 800129e:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 80012a0:	f04f 0100 	mov.w	r1, #0
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff f9fd 	bl	80006a4 <__aeabi_fcmpeq>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d002      	beq.n	80012b6 <EaseInOutElastic+0x22>
        return 0;
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	e077      	b.n	80013a6 <EaseInOutElastic+0x112>
    if (t == 1)
 80012b6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff f9f2 	bl	80006a4 <__aeabi_fcmpeq>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <EaseInOutElastic+0x38>
        return 1;
 80012c6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80012ca:	e06c      	b.n	80013a6 <EaseInOutElastic+0x112>
    if (t < 0.5f)
 80012cc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff f9f1 	bl	80006b8 <__aeabi_fcmplt>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d030      	beq.n	800133e <EaseInOutElastic+0xaa>
        return -(powf(2, 20 * t - 10) * sinf((20 * t - 11.125f) * c5)) / 2;
 80012dc:	4935      	ldr	r1, [pc, #212]	@ (80013b4 <EaseInOutElastic+0x120>)
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff f84c 	bl	800037c <__aeabi_fmul>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4934      	ldr	r1, [pc, #208]	@ (80013b8 <EaseInOutElastic+0x124>)
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7fe ff3d 	bl	8000168 <__aeabi_fsub>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4619      	mov	r1, r3
 80012f2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80012f6:	f002 f9e1 	bl	80036bc <powf>
 80012fa:	4604      	mov	r4, r0
 80012fc:	492d      	ldr	r1, [pc, #180]	@ (80013b4 <EaseInOutElastic+0x120>)
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff f83c 	bl	800037c <__aeabi_fmul>
 8001304:	4603      	mov	r3, r0
 8001306:	492d      	ldr	r1, [pc, #180]	@ (80013bc <EaseInOutElastic+0x128>)
 8001308:	4618      	mov	r0, r3
 800130a:	f7fe ff2d 	bl	8000168 <__aeabi_fsub>
 800130e:	4603      	mov	r3, r0
 8001310:	68f9      	ldr	r1, [r7, #12]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f832 	bl	800037c <__aeabi_fmul>
 8001318:	4603      	mov	r3, r0
 800131a:	4618      	mov	r0, r3
 800131c:	f002 fa6e 	bl	80037fc <sinf>
 8001320:	4603      	mov	r3, r0
 8001322:	4619      	mov	r1, r3
 8001324:	4620      	mov	r0, r4
 8001326:	f7ff f829 	bl	800037c <__aeabi_fmul>
 800132a:	4603      	mov	r3, r0
 800132c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001330:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff f8d5 	bl	80004e4 <__aeabi_fdiv>
 800133a:	4603      	mov	r3, r0
 800133c:	e033      	b.n	80013a6 <EaseInOutElastic+0x112>
    return (powf(2, -20 * t + 10) * sinf((20 * t - 11.125f) * c5)) / 2 + 1;
 800133e:	4920      	ldr	r1, [pc, #128]	@ (80013c0 <EaseInOutElastic+0x12c>)
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff f81b 	bl	800037c <__aeabi_fmul>
 8001346:	4603      	mov	r3, r0
 8001348:	491b      	ldr	r1, [pc, #108]	@ (80013b8 <EaseInOutElastic+0x124>)
 800134a:	4618      	mov	r0, r3
 800134c:	f7fe ff0e 	bl	800016c <__addsf3>
 8001350:	4603      	mov	r3, r0
 8001352:	4619      	mov	r1, r3
 8001354:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001358:	f002 f9b0 	bl	80036bc <powf>
 800135c:	4604      	mov	r4, r0
 800135e:	4915      	ldr	r1, [pc, #84]	@ (80013b4 <EaseInOutElastic+0x120>)
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff f80b 	bl	800037c <__aeabi_fmul>
 8001366:	4603      	mov	r3, r0
 8001368:	4914      	ldr	r1, [pc, #80]	@ (80013bc <EaseInOutElastic+0x128>)
 800136a:	4618      	mov	r0, r3
 800136c:	f7fe fefc 	bl	8000168 <__aeabi_fsub>
 8001370:	4603      	mov	r3, r0
 8001372:	68f9      	ldr	r1, [r7, #12]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f801 	bl	800037c <__aeabi_fmul>
 800137a:	4603      	mov	r3, r0
 800137c:	4618      	mov	r0, r3
 800137e:	f002 fa3d 	bl	80037fc <sinf>
 8001382:	4603      	mov	r3, r0
 8001384:	4619      	mov	r1, r3
 8001386:	4620      	mov	r0, r4
 8001388:	f7fe fff8 	bl	800037c <__aeabi_fmul>
 800138c:	4603      	mov	r3, r0
 800138e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff f8a6 	bl	80004e4 <__aeabi_fdiv>
 8001398:	4603      	mov	r3, r0
 800139a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800139e:	4618      	mov	r0, r3
 80013a0:	f7fe fee4 	bl	800016c <__addsf3>
 80013a4:	4603      	mov	r3, r0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd90      	pop	{r4, r7, pc}
 80013ae:	bf00      	nop
 80013b0:	3fb2b8b9 	.word	0x3fb2b8b9
 80013b4:	41a00000 	.word	0x41a00000
 80013b8:	41200000 	.word	0x41200000
 80013bc:	41320000 	.word	0x41320000
 80013c0:	c1a00000 	.word	0xc1a00000

080013c4 <EaseOutBounce>:

static float EaseOutBounce(float t)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
    const float n1 = 7.5625f;
 80013cc:	4b45      	ldr	r3, [pc, #276]	@ (80014e4 <EaseOutBounce+0x120>)
 80013ce:	60fb      	str	r3, [r7, #12]
    const float d1 = 2.75f;
 80013d0:	4b45      	ldr	r3, [pc, #276]	@ (80014e8 <EaseOutBounce+0x124>)
 80013d2:	60bb      	str	r3, [r7, #8]

    if (t < 1 / d1)
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80013da:	f7ff f883 	bl	80004e4 <__aeabi_fdiv>
 80013de:	4603      	mov	r3, r0
 80013e0:	4619      	mov	r1, r3
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff f968 	bl	80006b8 <__aeabi_fcmplt>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00a      	beq.n	8001404 <EaseOutBounce+0x40>
    {
        return n1 * t * t;
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f7fe ffc3 	bl	800037c <__aeabi_fmul>
 80013f6:	4603      	mov	r3, r0
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7fe ffbe 	bl	800037c <__aeabi_fmul>
 8001400:	4603      	mov	r3, r0
 8001402:	e06a      	b.n	80014da <EaseOutBounce+0x116>
    }
    else if (t < 2 / d1)
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800140a:	f7ff f86b 	bl	80004e4 <__aeabi_fdiv>
 800140e:	4603      	mov	r3, r0
 8001410:	4619      	mov	r1, r3
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff f950 	bl	80006b8 <__aeabi_fcmplt>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d01c      	beq.n	8001458 <EaseOutBounce+0x94>
    {
        t -= 1.5f / d1;
 800141e:	68b9      	ldr	r1, [r7, #8]
 8001420:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8001424:	f7ff f85e 	bl	80004e4 <__aeabi_fdiv>
 8001428:	4603      	mov	r3, r0
 800142a:	4619      	mov	r1, r3
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7fe fe9b 	bl	8000168 <__aeabi_fsub>
 8001432:	4603      	mov	r3, r0
 8001434:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.75f;
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f7fe ff9f 	bl	800037c <__aeabi_fmul>
 800143e:	4603      	mov	r3, r0
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	4618      	mov	r0, r3
 8001444:	f7fe ff9a 	bl	800037c <__aeabi_fmul>
 8001448:	4603      	mov	r3, r0
 800144a:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 800144e:	4618      	mov	r0, r3
 8001450:	f7fe fe8c 	bl	800016c <__addsf3>
 8001454:	4603      	mov	r3, r0
 8001456:	e040      	b.n	80014da <EaseOutBounce+0x116>
    }
    else if (t < 2.5f / d1)
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	4824      	ldr	r0, [pc, #144]	@ (80014ec <EaseOutBounce+0x128>)
 800145c:	f7ff f842 	bl	80004e4 <__aeabi_fdiv>
 8001460:	4603      	mov	r3, r0
 8001462:	4619      	mov	r1, r3
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff f927 	bl	80006b8 <__aeabi_fcmplt>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d01a      	beq.n	80014a6 <EaseOutBounce+0xe2>
    {
        t -= 2.25f / d1;
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	481f      	ldr	r0, [pc, #124]	@ (80014f0 <EaseOutBounce+0x12c>)
 8001474:	f7ff f836 	bl	80004e4 <__aeabi_fdiv>
 8001478:	4603      	mov	r3, r0
 800147a:	4619      	mov	r1, r3
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7fe fe73 	bl	8000168 <__aeabi_fsub>
 8001482:	4603      	mov	r3, r0
 8001484:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.9375f;
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f7fe ff77 	bl	800037c <__aeabi_fmul>
 800148e:	4603      	mov	r3, r0
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	4618      	mov	r0, r3
 8001494:	f7fe ff72 	bl	800037c <__aeabi_fmul>
 8001498:	4603      	mov	r3, r0
 800149a:	4916      	ldr	r1, [pc, #88]	@ (80014f4 <EaseOutBounce+0x130>)
 800149c:	4618      	mov	r0, r3
 800149e:	f7fe fe65 	bl	800016c <__addsf3>
 80014a2:	4603      	mov	r3, r0
 80014a4:	e019      	b.n	80014da <EaseOutBounce+0x116>
    }
    else
    {
        t -= 2.625f / d1;
 80014a6:	68b9      	ldr	r1, [r7, #8]
 80014a8:	4813      	ldr	r0, [pc, #76]	@ (80014f8 <EaseOutBounce+0x134>)
 80014aa:	f7ff f81b 	bl	80004e4 <__aeabi_fdiv>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4619      	mov	r1, r3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7fe fe58 	bl	8000168 <__aeabi_fsub>
 80014b8:	4603      	mov	r3, r0
 80014ba:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.984375f;
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f7fe ff5c 	bl	800037c <__aeabi_fmul>
 80014c4:	4603      	mov	r3, r0
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7fe ff57 	bl	800037c <__aeabi_fmul>
 80014ce:	4603      	mov	r3, r0
 80014d0:	490a      	ldr	r1, [pc, #40]	@ (80014fc <EaseOutBounce+0x138>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7fe fe4a 	bl	800016c <__addsf3>
 80014d8:	4603      	mov	r3, r0
    }
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40f20000 	.word	0x40f20000
 80014e8:	40300000 	.word	0x40300000
 80014ec:	40200000 	.word	0x40200000
 80014f0:	40100000 	.word	0x40100000
 80014f4:	3f700000 	.word	0x3f700000
 80014f8:	40280000 	.word	0x40280000
 80014fc:	3f7c0000 	.word	0x3f7c0000

08001500 <EaseInBounce>:

// 反弹缓动
static float EaseInBounce(float t)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
    return 1 - EaseOutBounce(1 - t);
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800150e:	f7fe fe2b 	bl	8000168 <__aeabi_fsub>
 8001512:	4603      	mov	r3, r0
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff55 	bl	80013c4 <EaseOutBounce>
 800151a:	4603      	mov	r3, r0
 800151c:	4619      	mov	r1, r3
 800151e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001522:	f7fe fe21 	bl	8000168 <__aeabi_fsub>
 8001526:	4603      	mov	r3, r0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <EaseInOutBounce>:

static float EaseInOutBounce(float t)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 8001538:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff f8bb 	bl	80006b8 <__aeabi_fcmplt>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d010      	beq.n	800156a <EaseInOutBounce+0x3a>
        return EaseInBounce(t * 2) * 0.5f;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4619      	mov	r1, r3
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe fe0d 	bl	800016c <__addsf3>
 8001552:	4603      	mov	r3, r0
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ffd3 	bl	8001500 <EaseInBounce>
 800155a:	4603      	mov	r3, r0
 800155c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe ff0b 	bl	800037c <__aeabi_fmul>
 8001566:	4603      	mov	r3, r0
 8001568:	e01b      	b.n	80015a2 <EaseInOutBounce+0x72>
    return EaseOutBounce(t * 2 - 1) * 0.5f + 0.5f;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4619      	mov	r1, r3
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe fdfc 	bl	800016c <__addsf3>
 8001574:	4603      	mov	r3, r0
 8001576:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe fdf4 	bl	8000168 <__aeabi_fsub>
 8001580:	4603      	mov	r3, r0
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ff1e 	bl	80013c4 <EaseOutBounce>
 8001588:	4603      	mov	r3, r0
 800158a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe fef4 	bl	800037c <__aeabi_fmul>
 8001594:	4603      	mov	r3, r0
 8001596:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe fde6 	bl	800016c <__addsf3>
 80015a0:	4603      	mov	r3, r0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <EaseInBack>:

// 背越式缓动
static float EaseInBack(float t)
{
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 80015b4:	4b15      	ldr	r3, [pc, #84]	@ (800160c <EaseInBack+0x60>)
 80015b6:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 80015b8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f7fe fdd5 	bl	800016c <__addsf3>
 80015c2:	4603      	mov	r3, r0
 80015c4:	60bb      	str	r3, [r7, #8]

    return c3 * t * t * t - c1 * t * t;
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	68b8      	ldr	r0, [r7, #8]
 80015ca:	f7fe fed7 	bl	800037c <__aeabi_fmul>
 80015ce:	4603      	mov	r3, r0
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe fed2 	bl	800037c <__aeabi_fmul>
 80015d8:	4603      	mov	r3, r0
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe fecd 	bl	800037c <__aeabi_fmul>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461c      	mov	r4, r3
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f7fe fec7 	bl	800037c <__aeabi_fmul>
 80015ee:	4603      	mov	r3, r0
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe fec2 	bl	800037c <__aeabi_fmul>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4619      	mov	r1, r3
 80015fc:	4620      	mov	r0, r4
 80015fe:	f7fe fdb3 	bl	8000168 <__aeabi_fsub>
 8001602:	4603      	mov	r3, r0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	bd90      	pop	{r4, r7, pc}
 800160c:	3fd9cd60 	.word	0x3fd9cd60

08001610 <EaseOutBack>:

static float EaseOutBack(float t)
{
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8001618:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <EaseOutBack+0x7c>)
 800161a:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 800161c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f7fe fda3 	bl	800016c <__addsf3>
 8001626:	4603      	mov	r3, r0
 8001628:	60bb      	str	r3, [r7, #8]

    return 1 + c3 * powf(t - 1, 3) + c1 * powf(t - 1, 2);
 800162a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7fe fd9a 	bl	8000168 <__aeabi_fsub>
 8001634:	4603      	mov	r3, r0
 8001636:	4916      	ldr	r1, [pc, #88]	@ (8001690 <EaseOutBack+0x80>)
 8001638:	4618      	mov	r0, r3
 800163a:	f002 f83f 	bl	80036bc <powf>
 800163e:	4603      	mov	r3, r0
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe fe9a 	bl	800037c <__aeabi_fmul>
 8001648:	4603      	mov	r3, r0
 800164a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe fd8c 	bl	800016c <__addsf3>
 8001654:	4603      	mov	r3, r0
 8001656:	461c      	mov	r4, r3
 8001658:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7fe fd83 	bl	8000168 <__aeabi_fsub>
 8001662:	4603      	mov	r3, r0
 8001664:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001668:	4618      	mov	r0, r3
 800166a:	f002 f827 	bl	80036bc <powf>
 800166e:	4603      	mov	r3, r0
 8001670:	68f9      	ldr	r1, [r7, #12]
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe fe82 	bl	800037c <__aeabi_fmul>
 8001678:	4603      	mov	r3, r0
 800167a:	4619      	mov	r1, r3
 800167c:	4620      	mov	r0, r4
 800167e:	f7fe fd75 	bl	800016c <__addsf3>
 8001682:	4603      	mov	r3, r0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	bd90      	pop	{r4, r7, pc}
 800168c:	3fd9cd60 	.word	0x3fd9cd60
 8001690:	40400000 	.word	0x40400000

08001694 <EaseInOutBack>:

static float EaseInOutBack(float t)
{
 8001694:	b5b0      	push	{r4, r5, r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 800169c:	4b40      	ldr	r3, [pc, #256]	@ (80017a0 <EaseInOutBack+0x10c>)
 800169e:	60fb      	str	r3, [r7, #12]
    const float c2 = c1 * 1.525f;
 80016a0:	4940      	ldr	r1, [pc, #256]	@ (80017a4 <EaseInOutBack+0x110>)
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f7fe fe6a 	bl	800037c <__aeabi_fmul>
 80016a8:	4603      	mov	r3, r0
 80016aa:	60bb      	str	r3, [r7, #8]

    if (t < 0.5f)
 80016ac:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff f801 	bl	80006b8 <__aeabi_fcmplt>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d02c      	beq.n	8001716 <EaseInOutBack+0x82>
        return (powf(2 * t, 2) * ((c2 + 1) * 2 * t - c2)) / 2;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4619      	mov	r1, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe fd53 	bl	800016c <__addsf3>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80016cc:	4618      	mov	r0, r3
 80016ce:	f001 fff5 	bl	80036bc <powf>
 80016d2:	4604      	mov	r4, r0
 80016d4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80016d8:	68b8      	ldr	r0, [r7, #8]
 80016da:	f7fe fd47 	bl	800016c <__addsf3>
 80016de:	4603      	mov	r3, r0
 80016e0:	4619      	mov	r1, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe fd42 	bl	800016c <__addsf3>
 80016e8:	4603      	mov	r3, r0
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe fe45 	bl	800037c <__aeabi_fmul>
 80016f2:	4603      	mov	r3, r0
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe fd36 	bl	8000168 <__aeabi_fsub>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4619      	mov	r1, r3
 8001700:	4620      	mov	r0, r4
 8001702:	f7fe fe3b 	bl	800037c <__aeabi_fmul>
 8001706:	4603      	mov	r3, r0
 8001708:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe fee9 	bl	80004e4 <__aeabi_fdiv>
 8001712:	4603      	mov	r3, r0
 8001714:	e03f      	b.n	8001796 <EaseInOutBack+0x102>
    return (powf(2 * t - 2, 2) * ((c2 + 1) * (t * 2 - 2) + c2) + 2) / 2;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4619      	mov	r1, r3
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe fd26 	bl	800016c <__addsf3>
 8001720:	4603      	mov	r3, r0
 8001722:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe fd1e 	bl	8000168 <__aeabi_fsub>
 800172c:	4603      	mov	r3, r0
 800172e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001732:	4618      	mov	r0, r3
 8001734:	f001 ffc2 	bl	80036bc <powf>
 8001738:	4604      	mov	r4, r0
 800173a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800173e:	68b8      	ldr	r0, [r7, #8]
 8001740:	f7fe fd14 	bl	800016c <__addsf3>
 8001744:	4603      	mov	r3, r0
 8001746:	461d      	mov	r5, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4619      	mov	r1, r3
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fd0d 	bl	800016c <__addsf3>
 8001752:	4603      	mov	r3, r0
 8001754:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe fd05 	bl	8000168 <__aeabi_fsub>
 800175e:	4603      	mov	r3, r0
 8001760:	4619      	mov	r1, r3
 8001762:	4628      	mov	r0, r5
 8001764:	f7fe fe0a 	bl	800037c <__aeabi_fmul>
 8001768:	4603      	mov	r3, r0
 800176a:	68b9      	ldr	r1, [r7, #8]
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fcfd 	bl	800016c <__addsf3>
 8001772:	4603      	mov	r3, r0
 8001774:	4619      	mov	r1, r3
 8001776:	4620      	mov	r0, r4
 8001778:	f7fe fe00 	bl	800037c <__aeabi_fmul>
 800177c:	4603      	mov	r3, r0
 800177e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fcf2 	bl	800016c <__addsf3>
 8001788:	4603      	mov	r3, r0
 800178a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fea8 	bl	80004e4 <__aeabi_fdiv>
 8001794:	4603      	mov	r3, r0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bdb0      	pop	{r4, r5, r7, pc}
 800179e:	bf00      	nop
 80017a0:	3fd9cd60 	.word	0x3fd9cd60
 80017a4:	3fc33333 	.word	0x3fc33333

080017a8 <EaseInSine>:

// 正弦缓动
static float EaseInSine(float t)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
    return 1 - cosf((t * 3.14159f) / 2);
 80017b0:	490c      	ldr	r1, [pc, #48]	@ (80017e4 <EaseInSine+0x3c>)
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7fe fde2 	bl	800037c <__aeabi_fmul>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fe90 	bl	80004e4 <__aeabi_fdiv>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f001 ffe0 	bl	800378c <cosf>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4619      	mov	r1, r3
 80017d0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80017d4:	f7fe fcc8 	bl	8000168 <__aeabi_fsub>
 80017d8:	4603      	mov	r3, r0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40490fd0 	.word	0x40490fd0

080017e8 <EaseOutSine>:

static float EaseOutSine(float t)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
    return sinf((t * 3.14159f) / 2);
 80017f0:	4909      	ldr	r1, [pc, #36]	@ (8001818 <EaseOutSine+0x30>)
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7fe fdc2 	bl	800037c <__aeabi_fmul>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fe70 	bl	80004e4 <__aeabi_fdiv>
 8001804:	4603      	mov	r3, r0
 8001806:	4618      	mov	r0, r3
 8001808:	f001 fff8 	bl	80037fc <sinf>
 800180c:	4603      	mov	r3, r0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40490fd0 	.word	0x40490fd0

0800181c <EaseInOutSine>:

static float EaseInOutSine(float t)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
    return -(cosf(3.14159f * t) - 1) / 2;
 8001824:	490d      	ldr	r1, [pc, #52]	@ (800185c <EaseInOutSine+0x40>)
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7fe fda8 	bl	800037c <__aeabi_fmul>
 800182c:	4603      	mov	r3, r0
 800182e:	4618      	mov	r0, r3
 8001830:	f001 ffac 	bl	800378c <cosf>
 8001834:	4603      	mov	r3, r0
 8001836:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fc94 	bl	8000168 <__aeabi_fsub>
 8001840:	4603      	mov	r3, r0
 8001842:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001846:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fe4a 	bl	80004e4 <__aeabi_fdiv>
 8001850:	4603      	mov	r3, r0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40490fd0 	.word	0x40490fd0

08001860 <GetEaseValue>:

static float GetEaseValue(float progress, EaseType_t easeType)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	70fb      	strb	r3, [r7, #3]
    switch (easeType)
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	2b18      	cmp	r3, #24
 8001870:	f200 80b3 	bhi.w	80019da <GetEaseValue+0x17a>
 8001874:	a201      	add	r2, pc, #4	@ (adr r2, 800187c <GetEaseValue+0x1c>)
 8001876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187a:	bf00      	nop
 800187c:	080018e1 	.word	0x080018e1
 8001880:	080018eb 	.word	0x080018eb
 8001884:	080018f5 	.word	0x080018f5
 8001888:	080018ff 	.word	0x080018ff
 800188c:	08001909 	.word	0x08001909
 8001890:	08001913 	.word	0x08001913
 8001894:	0800191d 	.word	0x0800191d
 8001898:	08001927 	.word	0x08001927
 800189c:	08001931 	.word	0x08001931
 80018a0:	0800193b 	.word	0x0800193b
 80018a4:	08001945 	.word	0x08001945
 80018a8:	0800194f 	.word	0x0800194f
 80018ac:	08001959 	.word	0x08001959
 80018b0:	08001963 	.word	0x08001963
 80018b4:	0800196d 	.word	0x0800196d
 80018b8:	08001977 	.word	0x08001977
 80018bc:	08001981 	.word	0x08001981
 80018c0:	0800198b 	.word	0x0800198b
 80018c4:	08001995 	.word	0x08001995
 80018c8:	0800199f 	.word	0x0800199f
 80018cc:	080019a9 	.word	0x080019a9
 80018d0:	080019b3 	.word	0x080019b3
 80018d4:	080019bd 	.word	0x080019bd
 80018d8:	080019c7 	.word	0x080019c7
 80018dc:	080019d1 	.word	0x080019d1
    {
    case EASE_LINEAR:
        return EaseLinear(progress);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff fa16 	bl	8000d12 <EaseLinear>
 80018e6:	4603      	mov	r3, r0
 80018e8:	e078      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_IN_QUAD:
        return EaseInQuad(progress);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff fa1b 	bl	8000d26 <EaseInQuad>
 80018f0:	4603      	mov	r3, r0
 80018f2:	e073      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_OUT_QUAD:
        return EaseOutQuad(progress);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff fa23 	bl	8000d40 <EaseOutQuad>
 80018fa:	4603      	mov	r3, r0
 80018fc:	e06e      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_INOUT_QUAD:
        return EaseInOutQuad(progress);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fa31 	bl	8000d66 <EaseInOutQuad>
 8001904:	4603      	mov	r3, r0
 8001906:	e069      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_IN_CUBIC:
        return EaseInCubic(progress);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff fa5f 	bl	8000dcc <EaseInCubic>
 800190e:	4603      	mov	r3, r0
 8001910:	e064      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_OUT_CUBIC:
        return EaseOutCubic(progress);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fa6c 	bl	8000df0 <EaseOutCubic>
 8001918:	4603      	mov	r3, r0
 800191a:	e05f      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_INOUT_CUBIC:
        return EaseInOutCubic(progress);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff fa86 	bl	8000e2e <EaseInOutCubic>
 8001922:	4603      	mov	r3, r0
 8001924:	e05a      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_IN_EXPO:
        return EaseInExpo(progress);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff fad2 	bl	8000ed0 <EaseInExpo>
 800192c:	4603      	mov	r3, r0
 800192e:	e055      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_OUT_EXPO:
        return EaseOutExpo(progress);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff faf3 	bl	8000f1c <EaseOutExpo>
 8001936:	4603      	mov	r3, r0
 8001938:	e050      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_INOUT_EXPO:
        return EaseInOutExpo(progress);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff fb14 	bl	8000f68 <EaseInOutExpo>
 8001940:	4603      	mov	r3, r0
 8001942:	e04b      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_IN_CIRC:
        return EaseInCirc(progress);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff fb6f 	bl	8001028 <EaseInCirc>
 800194a:	4603      	mov	r3, r0
 800194c:	e046      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_OUT_CIRC:
        return EaseOutCirc(progress);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff fb87 	bl	8001062 <EaseOutCirc>
 8001954:	4603      	mov	r3, r0
 8001956:	e041      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_INOUT_CIRC:
        return EaseInOutCirc(progress);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff fba0 	bl	800109e <EaseInOutCirc>
 800195e:	4603      	mov	r3, r0
 8001960:	e03c      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_IN_ELASTIC:
        return EaseInElastic(progress);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff fbf6 	bl	8001154 <EaseInElastic>
 8001968:	4603      	mov	r3, r0
 800196a:	e037      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_OUT_ELASTIC:
        return EaseOutElastic(progress);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff fc41 	bl	80011f4 <EaseOutElastic>
 8001972:	4603      	mov	r3, r0
 8001974:	e032      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_INOUT_ELASTIC:
        return EaseInOutElastic(progress);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff fc8c 	bl	8001294 <EaseInOutElastic>
 800197c:	4603      	mov	r3, r0
 800197e:	e02d      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_IN_BOUNCE:
        return EaseInBounce(progress);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff fdbd 	bl	8001500 <EaseInBounce>
 8001986:	4603      	mov	r3, r0
 8001988:	e028      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_OUT_BOUNCE:
        return EaseOutBounce(progress);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff fd1a 	bl	80013c4 <EaseOutBounce>
 8001990:	4603      	mov	r3, r0
 8001992:	e023      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_INOUT_BOUNCE:
        return EaseInOutBounce(progress);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff fdcb 	bl	8001530 <EaseInOutBounce>
 800199a:	4603      	mov	r3, r0
 800199c:	e01e      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_IN_BACK:
        return EaseInBack(progress);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff fe04 	bl	80015ac <EaseInBack>
 80019a4:	4603      	mov	r3, r0
 80019a6:	e019      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_OUT_BACK:
        return EaseOutBack(progress);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff fe31 	bl	8001610 <EaseOutBack>
 80019ae:	4603      	mov	r3, r0
 80019b0:	e014      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_INOUT_BACK:
        return EaseInOutBack(progress);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff fe6e 	bl	8001694 <EaseInOutBack>
 80019b8:	4603      	mov	r3, r0
 80019ba:	e00f      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_IN_SINE:
        return EaseInSine(progress);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff fef3 	bl	80017a8 <EaseInSine>
 80019c2:	4603      	mov	r3, r0
 80019c4:	e00a      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_OUT_SINE:
        return EaseOutSine(progress);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ff0e 	bl	80017e8 <EaseOutSine>
 80019cc:	4603      	mov	r3, r0
 80019ce:	e005      	b.n	80019dc <GetEaseValue+0x17c>
    case EASE_INOUT_SINE:
        return EaseInOutSine(progress);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ff23 	bl	800181c <EaseInOutSine>
 80019d6:	4603      	mov	r3, r0
 80019d8:	e000      	b.n	80019dc <GetEaseValue+0x17c>
    default:
        return progress;
 80019da:	687b      	ldr	r3, [r7, #4]
    }
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <OLED_InitAnimation>:

#pragma region ANIMATIONTWEENS
// 这里是底层动画实现
void OLED_InitAnimation(Animation_t *anim, float startValue, float endValue,
                        uint32_t duration, EaseType_t easeType)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	603b      	str	r3, [r7, #0]
    anim->startTime = HAL_GetTick();
 80019f2:	f000 fac9 	bl	8001f88 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	601a      	str	r2, [r3, #0]
    anim->duration = duration;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	605a      	str	r2, [r3, #4]
    anim->startValue = startValue;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	609a      	str	r2, [r3, #8]
    anim->endValue = endValue;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	60da      	str	r2, [r3, #12]
    anim->currentValue = startValue;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	611a      	str	r2, [r3, #16]
    anim->isActive = 1;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2201      	movs	r2, #1
 8001a18:	751a      	strb	r2, [r3, #20]
    anim->easeType = easeType;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	7e3a      	ldrb	r2, [r7, #24]
 8001a1e:	755a      	strb	r2, [r3, #21]
}
 8001a20:	bf00      	nop
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <OLED_UpdateAnimation>:

// 更新动画状态
uint8_t OLED_UpdateAnimation(Animation_t *anim, uint32_t currentTime)
{
 8001a28:	b590      	push	{r4, r7, lr}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
    if (!anim->isActive)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	7d1b      	ldrb	r3, [r3, #20]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <OLED_UpdateAnimation+0x16>
        return 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e042      	b.n	8001ac4 <OLED_UpdateAnimation+0x9c>

    uint32_t elapsedTime = currentTime - anim->startTime;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	617b      	str	r3, [r7, #20]

    // 动画完成
    if (elapsedTime >= anim->duration)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d308      	bcc.n	8001a64 <OLED_UpdateAnimation+0x3c>
    {
        anim->currentValue = anim->endValue;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	611a      	str	r2, [r3, #16]
        anim->isActive = 0;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	751a      	strb	r2, [r3, #20]
        return 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	e02f      	b.n	8001ac4 <OLED_UpdateAnimation+0x9c>
    }

    // 计算当前进度 (0.0 - 1.0)
    float progress = (float)elapsedTime / anim->duration;
 8001a64:	6978      	ldr	r0, [r7, #20]
 8001a66:	f7fe fc31 	bl	80002cc <__aeabi_ui2f>
 8001a6a:	4604      	mov	r4, r0
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fc2b 	bl	80002cc <__aeabi_ui2f>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	f7fe fd32 	bl	80004e4 <__aeabi_fdiv>
 8001a80:	4603      	mov	r3, r0
 8001a82:	613b      	str	r3, [r7, #16]

    // 应用缓动函数
    float easedProgress = GetEaseValue(progress, anim->easeType);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	7d5b      	ldrb	r3, [r3, #21]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	6938      	ldr	r0, [r7, #16]
 8001a8c:	f7ff fee8 	bl	8001860 <GetEaseValue>
 8001a90:	60f8      	str	r0, [r7, #12]

    // 计算当前值
    anim->currentValue = anim->startValue + (anim->endValue - anim->startValue) * easedProgress;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689c      	ldr	r4, [r3, #8]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	f7fe fb61 	bl	8000168 <__aeabi_fsub>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	68f9      	ldr	r1, [r7, #12]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fc66 	bl	800037c <__aeabi_fmul>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f7fe fb59 	bl	800016c <__addsf3>
 8001aba:	4603      	mov	r3, r0
 8001abc:	461a      	mov	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	611a      	str	r2, [r3, #16]

    return 1;
 8001ac2:	2301      	movs	r3, #1
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	371c      	adds	r7, #28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd90      	pop	{r4, r7, pc}

08001acc <OLED_GetAnimationValue>:

// 获取当前动画值
float OLED_GetAnimationValue(Animation_t *anim)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
    return anim->currentValue;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <OLED_InitAnimationManager>:

// 动画管理器全局管理部分
AnimationManager_t g_AnimationManager; // 声明一个全局的动画管理器

void OLED_InitAnimationManager(AnimationManager_t *manager) // 这是初始化一个动画管理器，填入你的manager名字，在系统初始化时候调用它
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
    manager->count = 0;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 25f0 	strb.w	r2, [r3, #1520]	@ 0x5f0
    memset(manager->taggedAnimations, 0, sizeof(manager->taggedAnimations));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f001 fd8a 	bl	8003614 <memset>
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <OLED_FindTaggedAnimation>:

TaggedAnimation_t *OLED_FindTaggedAnimation(AnimationManager_t *manager, const char *tag)// 查找对应manager的标签对应的动画tag
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < manager->count; i++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	73fb      	strb	r3, [r7, #15]
 8001b16:	e016      	b.n	8001b46 <OLED_FindTaggedAnimation+0x3e>
    {
        if (strcmp(manager->taggedAnimations[i].tag, tag) == 0)
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	224c      	movs	r2, #76	@ 0x4c
 8001b1c:	fb02 f303 	mul.w	r3, r2, r3
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	4413      	add	r3, r2
 8001b24:	6839      	ldr	r1, [r7, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fb10 	bl	800014c <strcmp>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <OLED_FindTaggedAnimation+0x38>
        {
            return &manager->taggedAnimations[i];
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	224c      	movs	r2, #76	@ 0x4c
 8001b36:	fb02 f303 	mul.w	r3, r2, r3
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	e009      	b.n	8001b54 <OLED_FindTaggedAnimation+0x4c>
    for (uint8_t i = 0; i < manager->count; i++)
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	3301      	adds	r3, #1
 8001b44:	73fb      	strb	r3, [r7, #15]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8001b4c:	7bfa      	ldrb	r2, [r7, #15]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d3e2      	bcc.n	8001b18 <OLED_FindTaggedAnimation+0x10>
        }
    }
    return NULL;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <OLED_GetObjectPosition>:

uint8_t OLED_GetObjectPosition(AnimationManager_t *manager, const char *tag, float *x, float *y)// 获取tag当前位置
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8001b6a:	68b9      	ldr	r1, [r7, #8]
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f7ff ffcb 	bl	8001b08 <OLED_FindTaggedAnimation>
 8001b72:	6178      	str	r0, [r7, #20]
    if (anim)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00f      	beq.n	8001b9a <OLED_GetObjectPosition+0x3e>
    {
        if (x) *x = anim->currentX;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <OLED_GetObjectPosition+0x2c>
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	601a      	str	r2, [r3, #0]
        if (y) *y = anim->currentY;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <OLED_GetObjectPosition+0x3a>
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	601a      	str	r2, [r3, #0]
        return 1;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <OLED_GetObjectPosition+0x40>
    }
    return 0;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <OLED_MoveObject>:

// 移动指定标签的对象
void OLED_MoveObject(AnimationManager_t *manager, const char *tag,
                     float startX, float startY, float targetX, float targetY,
                     uint32_t duration, EaseType_t easeType) // 这个函数是用来移动一个对象的，tag是对象的标签，startX和startY是起始坐标，targetX和targetY是目标坐标，duration是动画持续时间，easeType是缓动类型
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af02      	add	r7, sp, #8
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	603b      	str	r3, [r7, #0]
    // 查找已存在的动画
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8001bb2:	68b9      	ldr	r1, [r7, #8]
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f7ff ffa7 	bl	8001b08 <OLED_FindTaggedAnimation>
 8001bba:	6178      	str	r0, [r7, #20]

    // 如果没找到并且还有可用槽位，创建新的动画
    if (anim == NULL)
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d122      	bne.n	8001c08 <OLED_MoveObject+0x64>
    {
        if (manager->count >= MAX_ANIMATIONS)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8001bc8:	2b13      	cmp	r3, #19
 8001bca:	d838      	bhi.n	8001c3e <OLED_MoveObject+0x9a>
            return; // 动画已满，无法添加

        anim = &manager->taggedAnimations[manager->count++];
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	b2d1      	uxtb	r1, r2
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	f882 15f0 	strb.w	r1, [r2, #1520]	@ 0x5f0
 8001bdc:	461a      	mov	r2, r3
 8001bde:	234c      	movs	r3, #76	@ 0x4c
 8001be0:	fb02 f303 	mul.w	r3, r2, r3
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	4413      	add	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]
        strncpy(anim->tag, tag, sizeof(anim->tag) - 1);
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	220f      	movs	r2, #15
 8001bee:	68b9      	ldr	r1, [r7, #8]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f001 fd17 	bl	8003624 <strncpy>
        anim->tag[sizeof(anim->tag) - 1] = '\0'; // 确保字符串结束
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	73da      	strb	r2, [r3, #15]
        anim->currentX = startX;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = startY;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // 初始化或更新X和Y坐标的动画
    OLED_InitAnimation(&anim->xAnimation, startX, targetX, duration, easeType);
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f103 0010 	add.w	r0, r3, #16
 8001c0e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c16:	6a3a      	ldr	r2, [r7, #32]
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	f7ff fee3 	bl	80019e4 <OLED_InitAnimation>
    OLED_InitAnimation(&anim->yAnimation, startY, targetY, duration, easeType);
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8001c24:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c2e:	6839      	ldr	r1, [r7, #0]
 8001c30:	f7ff fed8 	bl	80019e4 <OLED_InitAnimation>
    anim->isActive = 1;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c3c:	e000      	b.n	8001c40 <OLED_MoveObject+0x9c>
            return; // 动画已满，无法添加
 8001c3e:	bf00      	nop
}
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <OLED_UpdateAnimationManager>:

// 更新manager里面的所有动画!
void OLED_UpdateAnimationManager(AnimationManager_t *manager) //! 这里需要使用OLED_UpdateDisplayVSync()来更新显示
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b086      	sub	sp, #24
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 8001c4e:	f000 f99b 	bl	8001f88 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]
    
    for (uint8_t i = 0; i < manager->count; i++)
 8001c54:	2300      	movs	r3, #0
 8001c56:	75fb      	strb	r3, [r7, #23]
 8001c58:	e03a      	b.n	8001cd0 <OLED_UpdateAnimationManager+0x8a>
    {
        TaggedAnimation_t *anim = &manager->taggedAnimations[i];
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
 8001c5c:	224c      	movs	r2, #76	@ 0x4c
 8001c5e:	fb02 f303 	mul.w	r3, r2, r3
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]
        if (!anim->isActive)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d02a      	beq.n	8001cc8 <OLED_UpdateAnimationManager+0x82>
            continue;
            
        uint8_t activeX = OLED_UpdateAnimation(&anim->xAnimation, currentTime);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	3310      	adds	r3, #16
 8001c76:	6939      	ldr	r1, [r7, #16]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fed5 	bl	8001a28 <OLED_UpdateAnimation>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	72fb      	strb	r3, [r7, #11]
        uint8_t activeY = OLED_UpdateAnimation(&anim->yAnimation, currentTime);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	3328      	adds	r3, #40	@ 0x28
 8001c86:	6939      	ldr	r1, [r7, #16]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fecd 	bl	8001a28 <OLED_UpdateAnimation>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	72bb      	strb	r3, [r7, #10]
        
        anim->currentX = OLED_GetAnimationValue(&anim->xAnimation);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3310      	adds	r3, #16
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff18 	bl	8001acc <OLED_GetAnimationValue>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = OLED_GetAnimationValue(&anim->yAnimation);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3328      	adds	r3, #40	@ 0x28
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff ff10 	bl	8001acc <OLED_GetAnimationValue>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	649a      	str	r2, [r3, #72]	@ 0x48
        
        // 如果两个动画都结束，则标记该对象动画为非活跃
        if (!activeX && !activeY)
 8001cb2:	7afb      	ldrb	r3, [r7, #11]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d108      	bne.n	8001cca <OLED_UpdateAnimationManager+0x84>
 8001cb8:	7abb      	ldrb	r3, [r7, #10]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d105      	bne.n	8001cca <OLED_UpdateAnimationManager+0x84>
            anim->isActive = 0;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cc6:	e000      	b.n	8001cca <OLED_UpdateAnimationManager+0x84>
            continue;
 8001cc8:	bf00      	nop
    for (uint8_t i = 0; i < manager->count; i++)
 8001cca:	7dfb      	ldrb	r3, [r7, #23]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	75fb      	strb	r3, [r7, #23]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8001cd6:	7dfa      	ldrb	r2, [r7, #23]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d3be      	bcc.n	8001c5a <OLED_UpdateAnimationManager+0x14>
    }
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <OLED_DrawRectangle>:
    }
}

// 绘制空心矩形
void OLED_DrawRectangle(uint8_t x, uint8_t y, uint8_t width, uint8_t height) //! UPDATEDISPLAY REQUIRED
{
 8001ce6:	b590      	push	{r4, r7, lr}
 8001ce8:	b085      	sub	sp, #20
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4604      	mov	r4, r0
 8001cee:	4608      	mov	r0, r1
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4623      	mov	r3, r4
 8001cf6:	71fb      	strb	r3, [r7, #7]
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	71bb      	strb	r3, [r7, #6]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	717b      	strb	r3, [r7, #5]
 8001d00:	4613      	mov	r3, r2
 8001d02:	713b      	strb	r3, [r7, #4]
    // 基础边界检查和裁剪
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT || width == 0 || height == 0)
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	db57      	blt.n	8001dbc <OLED_DrawRectangle+0xd6>
 8001d0c:	79bb      	ldrb	r3, [r7, #6]
 8001d0e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d10:	d854      	bhi.n	8001dbc <OLED_DrawRectangle+0xd6>
 8001d12:	797b      	ldrb	r3, [r7, #5]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d051      	beq.n	8001dbc <OLED_DrawRectangle+0xd6>
 8001d18:	793b      	ldrb	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d04e      	beq.n	8001dbc <OLED_DrawRectangle+0xd6>
        return;
    if (x + width > OLED_WIDTH)
 8001d1e:	79fa      	ldrb	r2, [r7, #7]
 8001d20:	797b      	ldrb	r3, [r7, #5]
 8001d22:	4413      	add	r3, r2
 8001d24:	2b80      	cmp	r3, #128	@ 0x80
 8001d26:	dd06      	ble.n	8001d36 <OLED_DrawRectangle+0x50>
        width = OLED_WIDTH - x;
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8001d2e:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8001d32:	3380      	adds	r3, #128	@ 0x80
 8001d34:	717b      	strb	r3, [r7, #5]
    if (y + height > OLED_HEIGHT)
 8001d36:	79ba      	ldrb	r2, [r7, #6]
 8001d38:	793b      	ldrb	r3, [r7, #4]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	2b40      	cmp	r3, #64	@ 0x40
 8001d3e:	dd03      	ble.n	8001d48 <OLED_DrawRectangle+0x62>
        height = OLED_HEIGHT - y;
 8001d40:	79bb      	ldrb	r3, [r7, #6]
 8001d42:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001d46:	713b      	strb	r3, [r7, #4]

    uint8_t x2 = x + width - 1;
 8001d48:	79fa      	ldrb	r2, [r7, #7]
 8001d4a:	797b      	ldrb	r3, [r7, #5]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	737b      	strb	r3, [r7, #13]
    uint8_t y2 = y + height - 1;
 8001d54:	79ba      	ldrb	r2, [r7, #6]
 8001d56:	793b      	ldrb	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	733b      	strb	r3, [r7, #12]

    // 绘制水平线
    for (uint8_t i = x; i <= x2; i++)
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	73fb      	strb	r3, [r7, #15]
 8001d64:	e00e      	b.n	8001d84 <OLED_DrawRectangle+0x9e>
    {
        OLED_WritePixel(i, y, 1);  // 顶线
 8001d66:	79b9      	ldrb	r1, [r7, #6]
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe ff13 	bl	8000b98 <OLED_WritePixel>
        OLED_WritePixel(i, y2, 1); // 底线
 8001d72:	7b39      	ldrb	r1, [r7, #12]
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	2201      	movs	r2, #1
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe ff0d 	bl	8000b98 <OLED_WritePixel>
    for (uint8_t i = x; i <= x2; i++)
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	3301      	adds	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
 8001d84:	7bfa      	ldrb	r2, [r7, #15]
 8001d86:	7b7b      	ldrb	r3, [r7, #13]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d9ec      	bls.n	8001d66 <OLED_DrawRectangle+0x80>
    }

    // 绘制垂直线
    for (uint8_t j = y + 1; j < y2; j++)
 8001d8c:	79bb      	ldrb	r3, [r7, #6]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	73bb      	strb	r3, [r7, #14]
 8001d92:	e00e      	b.n	8001db2 <OLED_DrawRectangle+0xcc>
    {
        OLED_WritePixel(x, j, 1);  // 左线
 8001d94:	7bb9      	ldrb	r1, [r7, #14]
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fefc 	bl	8000b98 <OLED_WritePixel>
        OLED_WritePixel(x2, j, 1); // 右线
 8001da0:	7bb9      	ldrb	r1, [r7, #14]
 8001da2:	7b7b      	ldrb	r3, [r7, #13]
 8001da4:	2201      	movs	r2, #1
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fef6 	bl	8000b98 <OLED_WritePixel>
    for (uint8_t j = y + 1; j < y2; j++)
 8001dac:	7bbb      	ldrb	r3, [r7, #14]
 8001dae:	3301      	adds	r3, #1
 8001db0:	73bb      	strb	r3, [r7, #14]
 8001db2:	7bba      	ldrb	r2, [r7, #14]
 8001db4:	7b3b      	ldrb	r3, [r7, #12]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d3ec      	bcc.n	8001d94 <OLED_DrawRectangle+0xae>
 8001dba:	e000      	b.n	8001dbe <OLED_DrawRectangle+0xd8>
        return;
 8001dbc:	bf00      	nop
    }
}
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd90      	pop	{r4, r7, pc}

08001dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dca:	4b15      	ldr	r3, [pc, #84]	@ (8001e20 <HAL_MspInit+0x5c>)
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	4a14      	ldr	r2, [pc, #80]	@ (8001e20 <HAL_MspInit+0x5c>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6193      	str	r3, [r2, #24]
 8001dd6:	4b12      	ldr	r3, [pc, #72]	@ (8001e20 <HAL_MspInit+0x5c>)
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <HAL_MspInit+0x5c>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	4a0e      	ldr	r2, [pc, #56]	@ (8001e20 <HAL_MspInit+0x5c>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dec:	61d3      	str	r3, [r2, #28]
 8001dee:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <HAL_MspInit+0x5c>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001e24 <HAL_MspInit+0x60>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	4a04      	ldr	r2, [pc, #16]	@ (8001e24 <HAL_MspInit+0x60>)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40010000 	.word	0x40010000

08001e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <NMI_Handler+0x4>

08001e30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <HardFault_Handler+0x4>

08001e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <MemManage_Handler+0x4>

08001e40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <BusFault_Handler+0x4>

08001e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <UsageFault_Handler+0x4>

08001e50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e78:	f000 f874 	bl	8001f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e8c:	f7ff fff8 	bl	8001e80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e90:	480b      	ldr	r0, [pc, #44]	@ (8001ec0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e92:	490c      	ldr	r1, [pc, #48]	@ (8001ec4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e94:	4a0c      	ldr	r2, [pc, #48]	@ (8001ec8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e98:	e002      	b.n	8001ea0 <LoopCopyDataInit>

08001e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9e:	3304      	adds	r3, #4

08001ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea4:	d3f9      	bcc.n	8001e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea6:	4a09      	ldr	r2, [pc, #36]	@ (8001ecc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ea8:	4c09      	ldr	r4, [pc, #36]	@ (8001ed0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eac:	e001      	b.n	8001eb2 <LoopFillZerobss>

08001eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb0:	3204      	adds	r2, #4

08001eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb4:	d3fb      	bcc.n	8001eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eb6:	f001 fbcf 	bl	8003658 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eba:	f7fe fd39 	bl	8000930 <main>
  bx lr
 8001ebe:	4770      	bx	lr
  ldr r0, =_sdata
 8001ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001ec8:	08004fc0 	.word	0x08004fc0
  ldr r2, =_sbss
 8001ecc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001ed0:	20001004 	.word	0x20001004

08001ed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ed4:	e7fe      	b.n	8001ed4 <ADC1_2_IRQHandler>
	...

08001ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001edc:	4b08      	ldr	r3, [pc, #32]	@ (8001f00 <HAL_Init+0x28>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a07      	ldr	r2, [pc, #28]	@ (8001f00 <HAL_Init+0x28>)
 8001ee2:	f043 0310 	orr.w	r3, r3, #16
 8001ee6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee8:	2003      	movs	r0, #3
 8001eea:	f000 f92b 	bl	8002144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eee:	200f      	movs	r0, #15
 8001ef0:	f000 f808 	bl	8001f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef4:	f7ff ff66 	bl	8001dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40022000 	.word	0x40022000

08001f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f0c:	4b12      	ldr	r3, [pc, #72]	@ (8001f58 <HAL_InitTick+0x54>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b12      	ldr	r3, [pc, #72]	@ (8001f5c <HAL_InitTick+0x58>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	4619      	mov	r1, r3
 8001f16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f935 	bl	8002192 <HAL_SYSTICK_Config>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00e      	b.n	8001f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b0f      	cmp	r3, #15
 8001f36:	d80a      	bhi.n	8001f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f40:	f000 f90b 	bl	800215a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f44:	4a06      	ldr	r2, [pc, #24]	@ (8001f60 <HAL_InitTick+0x5c>)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	e000      	b.n	8001f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	20000008 	.word	0x20000008
 8001f60:	20000004 	.word	0x20000004

08001f64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f68:	4b05      	ldr	r3, [pc, #20]	@ (8001f80 <HAL_IncTick+0x1c>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <HAL_IncTick+0x20>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4413      	add	r3, r2
 8001f74:	4a03      	ldr	r2, [pc, #12]	@ (8001f84 <HAL_IncTick+0x20>)
 8001f76:	6013      	str	r3, [r2, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	20000008 	.word	0x20000008
 8001f84:	20000ec8 	.word	0x20000ec8

08001f88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f8c:	4b02      	ldr	r3, [pc, #8]	@ (8001f98 <HAL_GetTick+0x10>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr
 8001f98:	20000ec8 	.word	0x20000ec8

08001f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa4:	f7ff fff0 	bl	8001f88 <HAL_GetTick>
 8001fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb4:	d005      	beq.n	8001fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <HAL_Delay+0x44>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fc2:	bf00      	nop
 8001fc4:	f7ff ffe0 	bl	8001f88 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d8f7      	bhi.n	8001fc4 <HAL_Delay+0x28>
  {
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000008 	.word	0x20000008

08001fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002000:	4013      	ands	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800200c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002016:	4a04      	ldr	r2, [pc, #16]	@ (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	60d3      	str	r3, [r2, #12]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002030:	4b04      	ldr	r3, [pc, #16]	@ (8002044 <__NVIC_GetPriorityGrouping+0x18>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	f003 0307 	and.w	r3, r3, #7
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	6039      	str	r1, [r7, #0]
 8002052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002058:	2b00      	cmp	r3, #0
 800205a:	db0a      	blt.n	8002072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	490c      	ldr	r1, [pc, #48]	@ (8002094 <__NVIC_SetPriority+0x4c>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	0112      	lsls	r2, r2, #4
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	440b      	add	r3, r1
 800206c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002070:	e00a      	b.n	8002088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4908      	ldr	r1, [pc, #32]	@ (8002098 <__NVIC_SetPriority+0x50>)
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	3b04      	subs	r3, #4
 8002080:	0112      	lsls	r2, r2, #4
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	440b      	add	r3, r1
 8002086:	761a      	strb	r2, [r3, #24]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000e100 	.word	0xe000e100
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	@ 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f1c3 0307 	rsb	r3, r3, #7
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	bf28      	it	cs
 80020ba:	2304      	movcs	r3, #4
 80020bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3304      	adds	r3, #4
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d902      	bls.n	80020cc <NVIC_EncodePriority+0x30>
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3b03      	subs	r3, #3
 80020ca:	e000      	b.n	80020ce <NVIC_EncodePriority+0x32>
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	f04f 32ff 	mov.w	r2, #4294967295
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43da      	mvns	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	401a      	ands	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	43d9      	mvns	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	4313      	orrs	r3, r2
         );
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3724      	adds	r7, #36	@ 0x24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002110:	d301      	bcc.n	8002116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002112:	2301      	movs	r3, #1
 8002114:	e00f      	b.n	8002136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002116:	4a0a      	ldr	r2, [pc, #40]	@ (8002140 <SysTick_Config+0x40>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3b01      	subs	r3, #1
 800211c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211e:	210f      	movs	r1, #15
 8002120:	f04f 30ff 	mov.w	r0, #4294967295
 8002124:	f7ff ff90 	bl	8002048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002128:	4b05      	ldr	r3, [pc, #20]	@ (8002140 <SysTick_Config+0x40>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212e:	4b04      	ldr	r3, [pc, #16]	@ (8002140 <SysTick_Config+0x40>)
 8002130:	2207      	movs	r2, #7
 8002132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	e000e010 	.word	0xe000e010

08002144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ff49 	bl	8001fe4 <__NVIC_SetPriorityGrouping>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800215a:	b580      	push	{r7, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af00      	add	r7, sp, #0
 8002160:	4603      	mov	r3, r0
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800216c:	f7ff ff5e 	bl	800202c <__NVIC_GetPriorityGrouping>
 8002170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	6978      	ldr	r0, [r7, #20]
 8002178:	f7ff ff90 	bl	800209c <NVIC_EncodePriority>
 800217c:	4602      	mov	r2, r0
 800217e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff5f 	bl	8002048 <__NVIC_SetPriority>
}
 800218a:	bf00      	nop
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ffb0 	bl	8002100 <SysTick_Config>
 80021a0:	4603      	mov	r3, r0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b08b      	sub	sp, #44	@ 0x2c
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021ba:	2300      	movs	r3, #0
 80021bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021be:	e169      	b.n	8002494 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021c0:	2201      	movs	r2, #1
 80021c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	429a      	cmp	r2, r3
 80021da:	f040 8158 	bne.w	800248e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4a9a      	ldr	r2, [pc, #616]	@ (800244c <HAL_GPIO_Init+0x2a0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d05e      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 80021e8:	4a98      	ldr	r2, [pc, #608]	@ (800244c <HAL_GPIO_Init+0x2a0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d875      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 80021ee:	4a98      	ldr	r2, [pc, #608]	@ (8002450 <HAL_GPIO_Init+0x2a4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d058      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 80021f4:	4a96      	ldr	r2, [pc, #600]	@ (8002450 <HAL_GPIO_Init+0x2a4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d86f      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 80021fa:	4a96      	ldr	r2, [pc, #600]	@ (8002454 <HAL_GPIO_Init+0x2a8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d052      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 8002200:	4a94      	ldr	r2, [pc, #592]	@ (8002454 <HAL_GPIO_Init+0x2a8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d869      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 8002206:	4a94      	ldr	r2, [pc, #592]	@ (8002458 <HAL_GPIO_Init+0x2ac>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d04c      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 800220c:	4a92      	ldr	r2, [pc, #584]	@ (8002458 <HAL_GPIO_Init+0x2ac>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d863      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 8002212:	4a92      	ldr	r2, [pc, #584]	@ (800245c <HAL_GPIO_Init+0x2b0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d046      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 8002218:	4a90      	ldr	r2, [pc, #576]	@ (800245c <HAL_GPIO_Init+0x2b0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d85d      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 800221e:	2b12      	cmp	r3, #18
 8002220:	d82a      	bhi.n	8002278 <HAL_GPIO_Init+0xcc>
 8002222:	2b12      	cmp	r3, #18
 8002224:	d859      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 8002226:	a201      	add	r2, pc, #4	@ (adr r2, 800222c <HAL_GPIO_Init+0x80>)
 8002228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222c:	080022a7 	.word	0x080022a7
 8002230:	08002281 	.word	0x08002281
 8002234:	08002293 	.word	0x08002293
 8002238:	080022d5 	.word	0x080022d5
 800223c:	080022db 	.word	0x080022db
 8002240:	080022db 	.word	0x080022db
 8002244:	080022db 	.word	0x080022db
 8002248:	080022db 	.word	0x080022db
 800224c:	080022db 	.word	0x080022db
 8002250:	080022db 	.word	0x080022db
 8002254:	080022db 	.word	0x080022db
 8002258:	080022db 	.word	0x080022db
 800225c:	080022db 	.word	0x080022db
 8002260:	080022db 	.word	0x080022db
 8002264:	080022db 	.word	0x080022db
 8002268:	080022db 	.word	0x080022db
 800226c:	080022db 	.word	0x080022db
 8002270:	08002289 	.word	0x08002289
 8002274:	0800229d 	.word	0x0800229d
 8002278:	4a79      	ldr	r2, [pc, #484]	@ (8002460 <HAL_GPIO_Init+0x2b4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d013      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800227e:	e02c      	b.n	80022da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	623b      	str	r3, [r7, #32]
          break;
 8002286:	e029      	b.n	80022dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	3304      	adds	r3, #4
 800228e:	623b      	str	r3, [r7, #32]
          break;
 8002290:	e024      	b.n	80022dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	3308      	adds	r3, #8
 8002298:	623b      	str	r3, [r7, #32]
          break;
 800229a:	e01f      	b.n	80022dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	330c      	adds	r3, #12
 80022a2:	623b      	str	r3, [r7, #32]
          break;
 80022a4:	e01a      	b.n	80022dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d102      	bne.n	80022b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022ae:	2304      	movs	r3, #4
 80022b0:	623b      	str	r3, [r7, #32]
          break;
 80022b2:	e013      	b.n	80022dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d105      	bne.n	80022c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022bc:	2308      	movs	r3, #8
 80022be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69fa      	ldr	r2, [r7, #28]
 80022c4:	611a      	str	r2, [r3, #16]
          break;
 80022c6:	e009      	b.n	80022dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022c8:	2308      	movs	r3, #8
 80022ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	615a      	str	r2, [r3, #20]
          break;
 80022d2:	e003      	b.n	80022dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022d4:	2300      	movs	r3, #0
 80022d6:	623b      	str	r3, [r7, #32]
          break;
 80022d8:	e000      	b.n	80022dc <HAL_GPIO_Init+0x130>
          break;
 80022da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2bff      	cmp	r3, #255	@ 0xff
 80022e0:	d801      	bhi.n	80022e6 <HAL_GPIO_Init+0x13a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	e001      	b.n	80022ea <HAL_GPIO_Init+0x13e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3304      	adds	r3, #4
 80022ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	2bff      	cmp	r3, #255	@ 0xff
 80022f0:	d802      	bhi.n	80022f8 <HAL_GPIO_Init+0x14c>
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	e002      	b.n	80022fe <HAL_GPIO_Init+0x152>
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fa:	3b08      	subs	r3, #8
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	210f      	movs	r1, #15
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	401a      	ands	r2, r3
 8002310:	6a39      	ldr	r1, [r7, #32]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	fa01 f303 	lsl.w	r3, r1, r3
 8002318:	431a      	orrs	r2, r3
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 80b1 	beq.w	800248e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800232c:	4b4d      	ldr	r3, [pc, #308]	@ (8002464 <HAL_GPIO_Init+0x2b8>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	4a4c      	ldr	r2, [pc, #304]	@ (8002464 <HAL_GPIO_Init+0x2b8>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6193      	str	r3, [r2, #24]
 8002338:	4b4a      	ldr	r3, [pc, #296]	@ (8002464 <HAL_GPIO_Init+0x2b8>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002344:	4a48      	ldr	r2, [pc, #288]	@ (8002468 <HAL_GPIO_Init+0x2bc>)
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	089b      	lsrs	r3, r3, #2
 800234a:	3302      	adds	r3, #2
 800234c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002350:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	220f      	movs	r2, #15
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4013      	ands	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a40      	ldr	r2, [pc, #256]	@ (800246c <HAL_GPIO_Init+0x2c0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d013      	beq.n	8002398 <HAL_GPIO_Init+0x1ec>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a3f      	ldr	r2, [pc, #252]	@ (8002470 <HAL_GPIO_Init+0x2c4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d00d      	beq.n	8002394 <HAL_GPIO_Init+0x1e8>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a3e      	ldr	r2, [pc, #248]	@ (8002474 <HAL_GPIO_Init+0x2c8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d007      	beq.n	8002390 <HAL_GPIO_Init+0x1e4>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a3d      	ldr	r2, [pc, #244]	@ (8002478 <HAL_GPIO_Init+0x2cc>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d101      	bne.n	800238c <HAL_GPIO_Init+0x1e0>
 8002388:	2303      	movs	r3, #3
 800238a:	e006      	b.n	800239a <HAL_GPIO_Init+0x1ee>
 800238c:	2304      	movs	r3, #4
 800238e:	e004      	b.n	800239a <HAL_GPIO_Init+0x1ee>
 8002390:	2302      	movs	r3, #2
 8002392:	e002      	b.n	800239a <HAL_GPIO_Init+0x1ee>
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <HAL_GPIO_Init+0x1ee>
 8002398:	2300      	movs	r3, #0
 800239a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800239c:	f002 0203 	and.w	r2, r2, #3
 80023a0:	0092      	lsls	r2, r2, #2
 80023a2:	4093      	lsls	r3, r2
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023aa:	492f      	ldr	r1, [pc, #188]	@ (8002468 <HAL_GPIO_Init+0x2bc>)
 80023ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	3302      	adds	r3, #2
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d006      	beq.n	80023d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023c4:	4b2d      	ldr	r3, [pc, #180]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	492c      	ldr	r1, [pc, #176]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	608b      	str	r3, [r1, #8]
 80023d0:	e006      	b.n	80023e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023d2:	4b2a      	ldr	r3, [pc, #168]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	43db      	mvns	r3, r3
 80023da:	4928      	ldr	r1, [pc, #160]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 80023dc:	4013      	ands	r3, r2
 80023de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d006      	beq.n	80023fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023ec:	4b23      	ldr	r3, [pc, #140]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	4922      	ldr	r1, [pc, #136]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60cb      	str	r3, [r1, #12]
 80023f8:	e006      	b.n	8002408 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023fa:	4b20      	ldr	r3, [pc, #128]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	43db      	mvns	r3, r3
 8002402:	491e      	ldr	r1, [pc, #120]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 8002404:	4013      	ands	r3, r2
 8002406:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d006      	beq.n	8002422 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002414:	4b19      	ldr	r3, [pc, #100]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	4918      	ldr	r1, [pc, #96]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]
 8002420:	e006      	b.n	8002430 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002422:	4b16      	ldr	r3, [pc, #88]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	43db      	mvns	r3, r3
 800242a:	4914      	ldr	r1, [pc, #80]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 800242c:	4013      	ands	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d021      	beq.n	8002480 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800243c:	4b0f      	ldr	r3, [pc, #60]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	490e      	ldr	r1, [pc, #56]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]
 8002448:	e021      	b.n	800248e <HAL_GPIO_Init+0x2e2>
 800244a:	bf00      	nop
 800244c:	10320000 	.word	0x10320000
 8002450:	10310000 	.word	0x10310000
 8002454:	10220000 	.word	0x10220000
 8002458:	10210000 	.word	0x10210000
 800245c:	10120000 	.word	0x10120000
 8002460:	10110000 	.word	0x10110000
 8002464:	40021000 	.word	0x40021000
 8002468:	40010000 	.word	0x40010000
 800246c:	40010800 	.word	0x40010800
 8002470:	40010c00 	.word	0x40010c00
 8002474:	40011000 	.word	0x40011000
 8002478:	40011400 	.word	0x40011400
 800247c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002480:	4b0b      	ldr	r3, [pc, #44]	@ (80024b0 <HAL_GPIO_Init+0x304>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	43db      	mvns	r3, r3
 8002488:	4909      	ldr	r1, [pc, #36]	@ (80024b0 <HAL_GPIO_Init+0x304>)
 800248a:	4013      	ands	r3, r2
 800248c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	3301      	adds	r3, #1
 8002492:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f47f ae8e 	bne.w	80021c0 <HAL_GPIO_Init+0x14>
  }
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	372c      	adds	r7, #44	@ 0x2c
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	40010400 	.word	0x40010400

080024b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	807b      	strh	r3, [r7, #2]
 80024c0:	4613      	mov	r3, r2
 80024c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024c4:	787b      	ldrb	r3, [r7, #1]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ca:	887a      	ldrh	r2, [r7, #2]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024d0:	e003      	b.n	80024da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024d2:	887b      	ldrh	r3, [r7, #2]
 80024d4:	041a      	lsls	r2, r3, #16
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	611a      	str	r2, [r3, #16]
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e12b      	b.n	800274e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe f9d2 	bl	80008b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2224      	movs	r2, #36	@ 0x24
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0201 	bic.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002536:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002546:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002548:	f001 f832 	bl	80035b0 <HAL_RCC_GetPCLK1Freq>
 800254c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4a81      	ldr	r2, [pc, #516]	@ (8002758 <HAL_I2C_Init+0x274>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d807      	bhi.n	8002568 <HAL_I2C_Init+0x84>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4a80      	ldr	r2, [pc, #512]	@ (800275c <HAL_I2C_Init+0x278>)
 800255c:	4293      	cmp	r3, r2
 800255e:	bf94      	ite	ls
 8002560:	2301      	movls	r3, #1
 8002562:	2300      	movhi	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	e006      	b.n	8002576 <HAL_I2C_Init+0x92>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4a7d      	ldr	r2, [pc, #500]	@ (8002760 <HAL_I2C_Init+0x27c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	bf94      	ite	ls
 8002570:	2301      	movls	r3, #1
 8002572:	2300      	movhi	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e0e7      	b.n	800274e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4a78      	ldr	r2, [pc, #480]	@ (8002764 <HAL_I2C_Init+0x280>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	0c9b      	lsrs	r3, r3, #18
 8002588:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	430a      	orrs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002758 <HAL_I2C_Init+0x274>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d802      	bhi.n	80025b8 <HAL_I2C_Init+0xd4>
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	3301      	adds	r3, #1
 80025b6:	e009      	b.n	80025cc <HAL_I2C_Init+0xe8>
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80025be:	fb02 f303 	mul.w	r3, r2, r3
 80025c2:	4a69      	ldr	r2, [pc, #420]	@ (8002768 <HAL_I2C_Init+0x284>)
 80025c4:	fba2 2303 	umull	r2, r3, r2, r3
 80025c8:	099b      	lsrs	r3, r3, #6
 80025ca:	3301      	adds	r3, #1
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	430b      	orrs	r3, r1
 80025d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80025de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	495c      	ldr	r1, [pc, #368]	@ (8002758 <HAL_I2C_Init+0x274>)
 80025e8:	428b      	cmp	r3, r1
 80025ea:	d819      	bhi.n	8002620 <HAL_I2C_Init+0x13c>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1e59      	subs	r1, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80025fa:	1c59      	adds	r1, r3, #1
 80025fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002600:	400b      	ands	r3, r1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <HAL_I2C_Init+0x138>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1e59      	subs	r1, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	fbb1 f3f3 	udiv	r3, r1, r3
 8002614:	3301      	adds	r3, #1
 8002616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261a:	e051      	b.n	80026c0 <HAL_I2C_Init+0x1dc>
 800261c:	2304      	movs	r3, #4
 800261e:	e04f      	b.n	80026c0 <HAL_I2C_Init+0x1dc>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d111      	bne.n	800264c <HAL_I2C_Init+0x168>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1e58      	subs	r0, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	440b      	add	r3, r1
 8002636:	fbb0 f3f3 	udiv	r3, r0, r3
 800263a:	3301      	adds	r3, #1
 800263c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002640:	2b00      	cmp	r3, #0
 8002642:	bf0c      	ite	eq
 8002644:	2301      	moveq	r3, #1
 8002646:	2300      	movne	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	e012      	b.n	8002672 <HAL_I2C_Init+0x18e>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1e58      	subs	r0, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6859      	ldr	r1, [r3, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	0099      	lsls	r1, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002662:	3301      	adds	r3, #1
 8002664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf0c      	ite	eq
 800266c:	2301      	moveq	r3, #1
 800266e:	2300      	movne	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_I2C_Init+0x196>
 8002676:	2301      	movs	r3, #1
 8002678:	e022      	b.n	80026c0 <HAL_I2C_Init+0x1dc>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10e      	bne.n	80026a0 <HAL_I2C_Init+0x1bc>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1e58      	subs	r0, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6859      	ldr	r1, [r3, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	440b      	add	r3, r1
 8002690:	fbb0 f3f3 	udiv	r3, r0, r3
 8002694:	3301      	adds	r3, #1
 8002696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800269e:	e00f      	b.n	80026c0 <HAL_I2C_Init+0x1dc>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1e58      	subs	r0, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6859      	ldr	r1, [r3, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	0099      	lsls	r1, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b6:	3301      	adds	r3, #1
 80026b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	6809      	ldr	r1, [r1, #0]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69da      	ldr	r2, [r3, #28]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80026ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6911      	ldr	r1, [r2, #16]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68d2      	ldr	r2, [r2, #12]
 80026fa:	4311      	orrs	r1, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	430b      	orrs	r3, r1
 8002702:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695a      	ldr	r2, [r3, #20]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2220      	movs	r2, #32
 800273a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	000186a0 	.word	0x000186a0
 800275c:	001e847f 	.word	0x001e847f
 8002760:	003d08ff 	.word	0x003d08ff
 8002764:	431bde83 	.word	0x431bde83
 8002768:	10624dd3 	.word	0x10624dd3

0800276c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af02      	add	r7, sp, #8
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	461a      	mov	r2, r3
 8002778:	460b      	mov	r3, r1
 800277a:	817b      	strh	r3, [r7, #10]
 800277c:	4613      	mov	r3, r2
 800277e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002780:	f7ff fc02 	bl	8001f88 <HAL_GetTick>
 8002784:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b20      	cmp	r3, #32
 8002790:	f040 80e0 	bne.w	8002954 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	2319      	movs	r3, #25
 800279a:	2201      	movs	r2, #1
 800279c:	4970      	ldr	r1, [pc, #448]	@ (8002960 <HAL_I2C_Master_Transmit+0x1f4>)
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f964 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027aa:	2302      	movs	r3, #2
 80027ac:	e0d3      	b.n	8002956 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_I2C_Master_Transmit+0x50>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e0cc      	b.n	8002956 <HAL_I2C_Master_Transmit+0x1ea>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d007      	beq.n	80027e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f042 0201 	orr.w	r2, r2, #1
 80027e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2221      	movs	r2, #33	@ 0x21
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2210      	movs	r2, #16
 80027fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	893a      	ldrh	r2, [r7, #8]
 8002812:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4a50      	ldr	r2, [pc, #320]	@ (8002964 <HAL_I2C_Master_Transmit+0x1f8>)
 8002822:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002824:	8979      	ldrh	r1, [r7, #10]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	6a3a      	ldr	r2, [r7, #32]
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 f89c 	bl	8002968 <I2C_MasterRequestWrite>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e08d      	b.n	8002956 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002850:	e066      	b.n	8002920 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	6a39      	ldr	r1, [r7, #32]
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 fa22 	bl	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00d      	beq.n	800287e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	2b04      	cmp	r3, #4
 8002868:	d107      	bne.n	800287a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002878:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e06b      	b.n	8002956 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002882:	781a      	ldrb	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002898:	b29b      	uxth	r3, r3
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d11b      	bne.n	80028f4 <HAL_I2C_Master_Transmit+0x188>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d017      	beq.n	80028f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	781a      	ldrb	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	6a39      	ldr	r1, [r7, #32]
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fa19 	bl	8002d30 <I2C_WaitOnBTFFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00d      	beq.n	8002920 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	2b04      	cmp	r3, #4
 800290a:	d107      	bne.n	800291c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800291a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e01a      	b.n	8002956 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002924:	2b00      	cmp	r3, #0
 8002926:	d194      	bne.n	8002852 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	e000      	b.n	8002956 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002954:	2302      	movs	r3, #2
  }
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	00100002 	.word	0x00100002
 8002964:	ffff0000 	.word	0xffff0000

08002968 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	607a      	str	r2, [r7, #4]
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	460b      	mov	r3, r1
 8002976:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b08      	cmp	r3, #8
 8002982:	d006      	beq.n	8002992 <I2C_MasterRequestWrite+0x2a>
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d003      	beq.n	8002992 <I2C_MasterRequestWrite+0x2a>
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002990:	d108      	bne.n	80029a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	e00b      	b.n	80029bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a8:	2b12      	cmp	r3, #18
 80029aa:	d107      	bne.n	80029bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f84f 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00d      	beq.n	80029f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029e2:	d103      	bne.n	80029ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e035      	b.n	8002a5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029f8:	d108      	bne.n	8002a0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029fa:	897b      	ldrh	r3, [r7, #10]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a08:	611a      	str	r2, [r3, #16]
 8002a0a:	e01b      	b.n	8002a44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a0c:	897b      	ldrh	r3, [r7, #10]
 8002a0e:	11db      	asrs	r3, r3, #7
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f003 0306 	and.w	r3, r3, #6
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f063 030f 	orn	r3, r3, #15
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	490e      	ldr	r1, [pc, #56]	@ (8002a64 <I2C_MasterRequestWrite+0xfc>)
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f898 	bl	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e010      	b.n	8002a5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a3a:	897b      	ldrh	r3, [r7, #10]
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	4907      	ldr	r1, [pc, #28]	@ (8002a68 <I2C_MasterRequestWrite+0x100>)
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f888 	bl	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	00010008 	.word	0x00010008
 8002a68:	00010002 	.word	0x00010002

08002a6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a7c:	e048      	b.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a84:	d044      	beq.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a86:	f7ff fa7f 	bl	8001f88 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d302      	bcc.n	8002a9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d139      	bne.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	0c1b      	lsrs	r3, r3, #16
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d10d      	bne.n	8002ac2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	43da      	mvns	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	e00c      	b.n	8002adc <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	43da      	mvns	r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	4013      	ands	r3, r2
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	bf0c      	ite	eq
 8002ad4:	2301      	moveq	r3, #1
 8002ad6:	2300      	movne	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	461a      	mov	r2, r3
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d116      	bne.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	f043 0220 	orr.w	r2, r3, #32
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e023      	b.n	8002b58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	0c1b      	lsrs	r3, r3, #16
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d10d      	bne.n	8002b36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	43da      	mvns	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	4013      	ands	r3, r2
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2301      	moveq	r3, #1
 8002b2e:	2300      	movne	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	e00c      	b.n	8002b50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	43da      	mvns	r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	4013      	ands	r3, r2
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	bf0c      	ite	eq
 8002b48:	2301      	moveq	r3, #1
 8002b4a:	2300      	movne	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d093      	beq.n	8002a7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b6e:	e071      	b.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b7e:	d123      	bne.n	8002bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	f043 0204 	orr.w	r2, r3, #4
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e067      	b.n	8002c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bce:	d041      	beq.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd0:	f7ff f9da 	bl	8001f88 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d302      	bcc.n	8002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d136      	bne.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	0c1b      	lsrs	r3, r3, #16
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d10c      	bne.n	8002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	bf14      	ite	ne
 8002c02:	2301      	movne	r3, #1
 8002c04:	2300      	moveq	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	e00b      	b.n	8002c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	43da      	mvns	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	4013      	ands	r3, r2
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf14      	ite	ne
 8002c1c:	2301      	movne	r3, #1
 8002c1e:	2300      	moveq	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d016      	beq.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c40:	f043 0220 	orr.w	r2, r3, #32
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e021      	b.n	8002c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	0c1b      	lsrs	r3, r3, #16
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d10c      	bne.n	8002c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	43da      	mvns	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bf14      	ite	ne
 8002c70:	2301      	movne	r3, #1
 8002c72:	2300      	moveq	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	e00b      	b.n	8002c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4013      	ands	r3, r2
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	bf14      	ite	ne
 8002c8a:	2301      	movne	r3, #1
 8002c8c:	2300      	moveq	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f47f af6d 	bne.w	8002b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cac:	e034      	b.n	8002d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f886 	bl	8002dc0 <I2C_IsAcknowledgeFailed>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e034      	b.n	8002d28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d028      	beq.n	8002d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc6:	f7ff f95f 	bl	8001f88 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d302      	bcc.n	8002cdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d11d      	bne.n	8002d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce6:	2b80      	cmp	r3, #128	@ 0x80
 8002ce8:	d016      	beq.n	8002d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	f043 0220 	orr.w	r2, r3, #32
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e007      	b.n	8002d28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d22:	2b80      	cmp	r3, #128	@ 0x80
 8002d24:	d1c3      	bne.n	8002cae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d3c:	e034      	b.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f83e 	bl	8002dc0 <I2C_IsAcknowledgeFailed>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e034      	b.n	8002db8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d028      	beq.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d56:	f7ff f917 	bl	8001f88 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d302      	bcc.n	8002d6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d11d      	bne.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f003 0304 	and.w	r3, r3, #4
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d016      	beq.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d94:	f043 0220 	orr.w	r2, r3, #32
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e007      	b.n	8002db8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d1c3      	bne.n	8002d3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd6:	d11b      	bne.n	8002e10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002de0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfc:	f043 0204 	orr.w	r2, r3, #4
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e272      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8087 	beq.w	8002f4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e3c:	4b92      	ldr	r3, [pc, #584]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 030c 	and.w	r3, r3, #12
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d00c      	beq.n	8002e62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e48:	4b8f      	ldr	r3, [pc, #572]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d112      	bne.n	8002e7a <HAL_RCC_OscConfig+0x5e>
 8002e54:	4b8c      	ldr	r3, [pc, #560]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e60:	d10b      	bne.n	8002e7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e62:	4b89      	ldr	r3, [pc, #548]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d06c      	beq.n	8002f48 <HAL_RCC_OscConfig+0x12c>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d168      	bne.n	8002f48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e24c      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e82:	d106      	bne.n	8002e92 <HAL_RCC_OscConfig+0x76>
 8002e84:	4b80      	ldr	r3, [pc, #512]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a7f      	ldr	r2, [pc, #508]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	e02e      	b.n	8002ef0 <HAL_RCC_OscConfig+0xd4>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x98>
 8002e9a:	4b7b      	ldr	r3, [pc, #492]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a7a      	ldr	r2, [pc, #488]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	4b78      	ldr	r3, [pc, #480]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a77      	ldr	r2, [pc, #476]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	e01d      	b.n	8002ef0 <HAL_RCC_OscConfig+0xd4>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0xbc>
 8002ebe:	4b72      	ldr	r3, [pc, #456]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a71      	ldr	r2, [pc, #452]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	4b6f      	ldr	r3, [pc, #444]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a6e      	ldr	r2, [pc, #440]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	e00b      	b.n	8002ef0 <HAL_RCC_OscConfig+0xd4>
 8002ed8:	4b6b      	ldr	r3, [pc, #428]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a6a      	ldr	r2, [pc, #424]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	4b68      	ldr	r3, [pc, #416]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a67      	ldr	r2, [pc, #412]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002eea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d013      	beq.n	8002f20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef8:	f7ff f846 	bl	8001f88 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f00:	f7ff f842 	bl	8001f88 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b64      	cmp	r3, #100	@ 0x64
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e200      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f12:	4b5d      	ldr	r3, [pc, #372]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0xe4>
 8002f1e:	e014      	b.n	8002f4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f20:	f7ff f832 	bl	8001f88 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f28:	f7ff f82e 	bl	8001f88 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b64      	cmp	r3, #100	@ 0x64
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e1ec      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3a:	4b53      	ldr	r3, [pc, #332]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x10c>
 8002f46:	e000      	b.n	8002f4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d063      	beq.n	800301e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f56:	4b4c      	ldr	r3, [pc, #304]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00b      	beq.n	8002f7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f62:	4b49      	ldr	r3, [pc, #292]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d11c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x18c>
 8002f6e:	4b46      	ldr	r3, [pc, #280]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d116      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7a:	4b43      	ldr	r3, [pc, #268]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <HAL_RCC_OscConfig+0x176>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d001      	beq.n	8002f92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e1c0      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f92:	4b3d      	ldr	r3, [pc, #244]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	4939      	ldr	r1, [pc, #228]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa6:	e03a      	b.n	800301e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d020      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fb0:	4b36      	ldr	r3, [pc, #216]	@ (800308c <HAL_RCC_OscConfig+0x270>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb6:	f7fe ffe7 	bl	8001f88 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fbe:	f7fe ffe3 	bl	8001f88 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e1a1      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd0:	4b2d      	ldr	r3, [pc, #180]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4927      	ldr	r1, [pc, #156]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	600b      	str	r3, [r1, #0]
 8002ff0:	e015      	b.n	800301e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ff2:	4b26      	ldr	r3, [pc, #152]	@ (800308c <HAL_RCC_OscConfig+0x270>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff8:	f7fe ffc6 	bl	8001f88 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003000:	f7fe ffc2 	bl	8001f88 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e180      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003012:	4b1d      	ldr	r3, [pc, #116]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d03a      	beq.n	80030a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d019      	beq.n	8003066 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003032:	4b17      	ldr	r3, [pc, #92]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8003034:	2201      	movs	r2, #1
 8003036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003038:	f7fe ffa6 	bl	8001f88 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003040:	f7fe ffa2 	bl	8001f88 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e160      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003052:	4b0d      	ldr	r3, [pc, #52]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8003054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800305e:	2001      	movs	r0, #1
 8003060:	f000 faba 	bl	80035d8 <RCC_Delay>
 8003064:	e01c      	b.n	80030a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003066:	4b0a      	ldr	r3, [pc, #40]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306c:	f7fe ff8c 	bl	8001f88 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003072:	e00f      	b.n	8003094 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003074:	f7fe ff88 	bl	8001f88 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d908      	bls.n	8003094 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e146      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000
 800308c:	42420000 	.word	0x42420000
 8003090:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003094:	4b92      	ldr	r3, [pc, #584]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1e9      	bne.n	8003074 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 80a6 	beq.w	80031fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ae:	2300      	movs	r3, #0
 80030b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b2:	4b8b      	ldr	r3, [pc, #556]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10d      	bne.n	80030da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030be:	4b88      	ldr	r3, [pc, #544]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	4a87      	ldr	r2, [pc, #540]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80030c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030c8:	61d3      	str	r3, [r2, #28]
 80030ca:	4b85      	ldr	r3, [pc, #532]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d6:	2301      	movs	r3, #1
 80030d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030da:	4b82      	ldr	r3, [pc, #520]	@ (80032e4 <HAL_RCC_OscConfig+0x4c8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d118      	bne.n	8003118 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030e6:	4b7f      	ldr	r3, [pc, #508]	@ (80032e4 <HAL_RCC_OscConfig+0x4c8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a7e      	ldr	r2, [pc, #504]	@ (80032e4 <HAL_RCC_OscConfig+0x4c8>)
 80030ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f2:	f7fe ff49 	bl	8001f88 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030fa:	f7fe ff45 	bl	8001f88 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b64      	cmp	r3, #100	@ 0x64
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e103      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310c:	4b75      	ldr	r3, [pc, #468]	@ (80032e4 <HAL_RCC_OscConfig+0x4c8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d106      	bne.n	800312e <HAL_RCC_OscConfig+0x312>
 8003120:	4b6f      	ldr	r3, [pc, #444]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	4a6e      	ldr	r2, [pc, #440]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	6213      	str	r3, [r2, #32]
 800312c:	e02d      	b.n	800318a <HAL_RCC_OscConfig+0x36e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10c      	bne.n	8003150 <HAL_RCC_OscConfig+0x334>
 8003136:	4b6a      	ldr	r3, [pc, #424]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	4a69      	ldr	r2, [pc, #420]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 800313c:	f023 0301 	bic.w	r3, r3, #1
 8003140:	6213      	str	r3, [r2, #32]
 8003142:	4b67      	ldr	r3, [pc, #412]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	4a66      	ldr	r2, [pc, #408]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003148:	f023 0304 	bic.w	r3, r3, #4
 800314c:	6213      	str	r3, [r2, #32]
 800314e:	e01c      	b.n	800318a <HAL_RCC_OscConfig+0x36e>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b05      	cmp	r3, #5
 8003156:	d10c      	bne.n	8003172 <HAL_RCC_OscConfig+0x356>
 8003158:	4b61      	ldr	r3, [pc, #388]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	4a60      	ldr	r2, [pc, #384]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 800315e:	f043 0304 	orr.w	r3, r3, #4
 8003162:	6213      	str	r3, [r2, #32]
 8003164:	4b5e      	ldr	r3, [pc, #376]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	4a5d      	ldr	r2, [pc, #372]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	6213      	str	r3, [r2, #32]
 8003170:	e00b      	b.n	800318a <HAL_RCC_OscConfig+0x36e>
 8003172:	4b5b      	ldr	r3, [pc, #364]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	4a5a      	ldr	r2, [pc, #360]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	f023 0301 	bic.w	r3, r3, #1
 800317c:	6213      	str	r3, [r2, #32]
 800317e:	4b58      	ldr	r3, [pc, #352]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	4a57      	ldr	r2, [pc, #348]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003184:	f023 0304 	bic.w	r3, r3, #4
 8003188:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d015      	beq.n	80031be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003192:	f7fe fef9 	bl	8001f88 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003198:	e00a      	b.n	80031b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319a:	f7fe fef5 	bl	8001f88 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e0b1      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b0:	4b4b      	ldr	r3, [pc, #300]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0ee      	beq.n	800319a <HAL_RCC_OscConfig+0x37e>
 80031bc:	e014      	b.n	80031e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031be:	f7fe fee3 	bl	8001f88 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c4:	e00a      	b.n	80031dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c6:	f7fe fedf 	bl	8001f88 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e09b      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031dc:	4b40      	ldr	r3, [pc, #256]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1ee      	bne.n	80031c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031e8:	7dfb      	ldrb	r3, [r7, #23]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d105      	bne.n	80031fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ee:	4b3c      	ldr	r3, [pc, #240]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	4a3b      	ldr	r2, [pc, #236]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80031f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 8087 	beq.w	8003312 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003204:	4b36      	ldr	r3, [pc, #216]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 030c 	and.w	r3, r3, #12
 800320c:	2b08      	cmp	r3, #8
 800320e:	d061      	beq.n	80032d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d146      	bne.n	80032a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003218:	4b33      	ldr	r3, [pc, #204]	@ (80032e8 <HAL_RCC_OscConfig+0x4cc>)
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321e:	f7fe feb3 	bl	8001f88 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003226:	f7fe feaf 	bl	8001f88 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e06d      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003238:	4b29      	ldr	r3, [pc, #164]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1f0      	bne.n	8003226 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800324c:	d108      	bne.n	8003260 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800324e:	4b24      	ldr	r3, [pc, #144]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	4921      	ldr	r1, [pc, #132]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003260:	4b1f      	ldr	r3, [pc, #124]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a19      	ldr	r1, [r3, #32]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003270:	430b      	orrs	r3, r1
 8003272:	491b      	ldr	r1, [pc, #108]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003278:	4b1b      	ldr	r3, [pc, #108]	@ (80032e8 <HAL_RCC_OscConfig+0x4cc>)
 800327a:	2201      	movs	r2, #1
 800327c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327e:	f7fe fe83 	bl	8001f88 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003286:	f7fe fe7f 	bl	8001f88 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e03d      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003298:	4b11      	ldr	r3, [pc, #68]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x46a>
 80032a4:	e035      	b.n	8003312 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a6:	4b10      	ldr	r3, [pc, #64]	@ (80032e8 <HAL_RCC_OscConfig+0x4cc>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7fe fe6c 	bl	8001f88 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b4:	f7fe fe68 	bl	8001f88 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e026      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c6:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x498>
 80032d2:	e01e      	b.n	8003312 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d107      	bne.n	80032ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e019      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40007000 	.word	0x40007000
 80032e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032ec:	4b0b      	ldr	r3, [pc, #44]	@ (800331c <HAL_RCC_OscConfig+0x500>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d106      	bne.n	800330e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330a:	429a      	cmp	r2, r3
 800330c:	d001      	beq.n	8003312 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40021000 	.word	0x40021000

08003320 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0d0      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003334:	4b6a      	ldr	r3, [pc, #424]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d910      	bls.n	8003364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003342:	4b67      	ldr	r3, [pc, #412]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 0207 	bic.w	r2, r3, #7
 800334a:	4965      	ldr	r1, [pc, #404]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	4313      	orrs	r3, r2
 8003350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	4b63      	ldr	r3, [pc, #396]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0b8      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d020      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800337c:	4b59      	ldr	r3, [pc, #356]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	4a58      	ldr	r2, [pc, #352]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003382:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003386:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003394:	4b53      	ldr	r3, [pc, #332]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4a52      	ldr	r2, [pc, #328]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 800339a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800339e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a0:	4b50      	ldr	r3, [pc, #320]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	494d      	ldr	r1, [pc, #308]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d040      	beq.n	8003440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d107      	bne.n	80033d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	4b47      	ldr	r3, [pc, #284]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d115      	bne.n	80033fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e07f      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d107      	bne.n	80033ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033de:	4b41      	ldr	r3, [pc, #260]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d109      	bne.n	80033fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e073      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ee:	4b3d      	ldr	r3, [pc, #244]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e06b      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033fe:	4b39      	ldr	r3, [pc, #228]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f023 0203 	bic.w	r2, r3, #3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	4936      	ldr	r1, [pc, #216]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003410:	f7fe fdba 	bl	8001f88 <HAL_GetTick>
 8003414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003416:	e00a      	b.n	800342e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003418:	f7fe fdb6 	bl	8001f88 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003426:	4293      	cmp	r3, r2
 8003428:	d901      	bls.n	800342e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e053      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342e:	4b2d      	ldr	r3, [pc, #180]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 020c 	and.w	r2, r3, #12
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	429a      	cmp	r2, r3
 800343e:	d1eb      	bne.n	8003418 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003440:	4b27      	ldr	r3, [pc, #156]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d210      	bcs.n	8003470 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344e:	4b24      	ldr	r3, [pc, #144]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 0207 	bic.w	r2, r3, #7
 8003456:	4922      	ldr	r1, [pc, #136]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800345e:	4b20      	ldr	r3, [pc, #128]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d001      	beq.n	8003470 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e032      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800347c:	4b19      	ldr	r3, [pc, #100]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4916      	ldr	r1, [pc, #88]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	4313      	orrs	r3, r2
 800348c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800349a:	4b12      	ldr	r3, [pc, #72]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	490e      	ldr	r1, [pc, #56]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034ae:	f000 f821 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 80034b2:	4602      	mov	r2, r0
 80034b4:	4b0b      	ldr	r3, [pc, #44]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	490a      	ldr	r1, [pc, #40]	@ (80034e8 <HAL_RCC_ClockConfig+0x1c8>)
 80034c0:	5ccb      	ldrb	r3, [r1, r3]
 80034c2:	fa22 f303 	lsr.w	r3, r2, r3
 80034c6:	4a09      	ldr	r2, [pc, #36]	@ (80034ec <HAL_RCC_ClockConfig+0x1cc>)
 80034c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034ca:	4b09      	ldr	r3, [pc, #36]	@ (80034f0 <HAL_RCC_ClockConfig+0x1d0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe fd18 	bl	8001f04 <HAL_InitTick>

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40022000 	.word	0x40022000
 80034e4:	40021000 	.word	0x40021000
 80034e8:	08004b94 	.word	0x08004b94
 80034ec:	20000000 	.word	0x20000000
 80034f0:	20000004 	.word	0x20000004

080034f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	2300      	movs	r3, #0
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	2300      	movs	r3, #0
 8003508:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800350e:	4b1e      	ldr	r3, [pc, #120]	@ (8003588 <HAL_RCC_GetSysClockFreq+0x94>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b04      	cmp	r3, #4
 800351c:	d002      	beq.n	8003524 <HAL_RCC_GetSysClockFreq+0x30>
 800351e:	2b08      	cmp	r3, #8
 8003520:	d003      	beq.n	800352a <HAL_RCC_GetSysClockFreq+0x36>
 8003522:	e027      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003524:	4b19      	ldr	r3, [pc, #100]	@ (800358c <HAL_RCC_GetSysClockFreq+0x98>)
 8003526:	613b      	str	r3, [r7, #16]
      break;
 8003528:	e027      	b.n	800357a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	0c9b      	lsrs	r3, r3, #18
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	4a17      	ldr	r2, [pc, #92]	@ (8003590 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003534:	5cd3      	ldrb	r3, [r2, r3]
 8003536:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d010      	beq.n	8003564 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003542:	4b11      	ldr	r3, [pc, #68]	@ (8003588 <HAL_RCC_GetSysClockFreq+0x94>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	0c5b      	lsrs	r3, r3, #17
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	4a11      	ldr	r2, [pc, #68]	@ (8003594 <HAL_RCC_GetSysClockFreq+0xa0>)
 800354e:	5cd3      	ldrb	r3, [r2, r3]
 8003550:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a0d      	ldr	r2, [pc, #52]	@ (800358c <HAL_RCC_GetSysClockFreq+0x98>)
 8003556:	fb03 f202 	mul.w	r2, r3, r2
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	e004      	b.n	800356e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a0c      	ldr	r2, [pc, #48]	@ (8003598 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003568:	fb02 f303 	mul.w	r3, r2, r3
 800356c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	613b      	str	r3, [r7, #16]
      break;
 8003572:	e002      	b.n	800357a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003574:	4b05      	ldr	r3, [pc, #20]	@ (800358c <HAL_RCC_GetSysClockFreq+0x98>)
 8003576:	613b      	str	r3, [r7, #16]
      break;
 8003578:	bf00      	nop
    }
  }
  return sysclockfreq;
 800357a:	693b      	ldr	r3, [r7, #16]
}
 800357c:	4618      	mov	r0, r3
 800357e:	371c      	adds	r7, #28
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40021000 	.word	0x40021000
 800358c:	007a1200 	.word	0x007a1200
 8003590:	08004bac 	.word	0x08004bac
 8003594:	08004bbc 	.word	0x08004bbc
 8003598:	003d0900 	.word	0x003d0900

0800359c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035a0:	4b02      	ldr	r3, [pc, #8]	@ (80035ac <HAL_RCC_GetHCLKFreq+0x10>)
 80035a2:	681b      	ldr	r3, [r3, #0]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr
 80035ac:	20000000 	.word	0x20000000

080035b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035b4:	f7ff fff2 	bl	800359c <HAL_RCC_GetHCLKFreq>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b05      	ldr	r3, [pc, #20]	@ (80035d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	4903      	ldr	r1, [pc, #12]	@ (80035d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40021000 	.word	0x40021000
 80035d4:	08004ba4 	.word	0x08004ba4

080035d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035e0:	4b0a      	ldr	r3, [pc, #40]	@ (800360c <RCC_Delay+0x34>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003610 <RCC_Delay+0x38>)
 80035e6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ea:	0a5b      	lsrs	r3, r3, #9
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	fb02 f303 	mul.w	r3, r2, r3
 80035f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035f4:	bf00      	nop
  }
  while (Delay --);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1e5a      	subs	r2, r3, #1
 80035fa:	60fa      	str	r2, [r7, #12]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1f9      	bne.n	80035f4 <RCC_Delay+0x1c>
}
 8003600:	bf00      	nop
 8003602:	bf00      	nop
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr
 800360c:	20000000 	.word	0x20000000
 8003610:	10624dd3 	.word	0x10624dd3

08003614 <memset>:
 8003614:	4603      	mov	r3, r0
 8003616:	4402      	add	r2, r0
 8003618:	4293      	cmp	r3, r2
 800361a:	d100      	bne.n	800361e <memset+0xa>
 800361c:	4770      	bx	lr
 800361e:	f803 1b01 	strb.w	r1, [r3], #1
 8003622:	e7f9      	b.n	8003618 <memset+0x4>

08003624 <strncpy>:
 8003624:	4603      	mov	r3, r0
 8003626:	b510      	push	{r4, lr}
 8003628:	3901      	subs	r1, #1
 800362a:	b132      	cbz	r2, 800363a <strncpy+0x16>
 800362c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003630:	3a01      	subs	r2, #1
 8003632:	f803 4b01 	strb.w	r4, [r3], #1
 8003636:	2c00      	cmp	r4, #0
 8003638:	d1f7      	bne.n	800362a <strncpy+0x6>
 800363a:	2100      	movs	r1, #0
 800363c:	441a      	add	r2, r3
 800363e:	4293      	cmp	r3, r2
 8003640:	d100      	bne.n	8003644 <strncpy+0x20>
 8003642:	bd10      	pop	{r4, pc}
 8003644:	f803 1b01 	strb.w	r1, [r3], #1
 8003648:	e7f9      	b.n	800363e <strncpy+0x1a>
	...

0800364c <__errno>:
 800364c:	4b01      	ldr	r3, [pc, #4]	@ (8003654 <__errno+0x8>)
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	2000000c 	.word	0x2000000c

08003658 <__libc_init_array>:
 8003658:	b570      	push	{r4, r5, r6, lr}
 800365a:	2600      	movs	r6, #0
 800365c:	4d0c      	ldr	r5, [pc, #48]	@ (8003690 <__libc_init_array+0x38>)
 800365e:	4c0d      	ldr	r4, [pc, #52]	@ (8003694 <__libc_init_array+0x3c>)
 8003660:	1b64      	subs	r4, r4, r5
 8003662:	10a4      	asrs	r4, r4, #2
 8003664:	42a6      	cmp	r6, r4
 8003666:	d109      	bne.n	800367c <__libc_init_array+0x24>
 8003668:	f001 fa84 	bl	8004b74 <_init>
 800366c:	2600      	movs	r6, #0
 800366e:	4d0a      	ldr	r5, [pc, #40]	@ (8003698 <__libc_init_array+0x40>)
 8003670:	4c0a      	ldr	r4, [pc, #40]	@ (800369c <__libc_init_array+0x44>)
 8003672:	1b64      	subs	r4, r4, r5
 8003674:	10a4      	asrs	r4, r4, #2
 8003676:	42a6      	cmp	r6, r4
 8003678:	d105      	bne.n	8003686 <__libc_init_array+0x2e>
 800367a:	bd70      	pop	{r4, r5, r6, pc}
 800367c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003680:	4798      	blx	r3
 8003682:	3601      	adds	r6, #1
 8003684:	e7ee      	b.n	8003664 <__libc_init_array+0xc>
 8003686:	f855 3b04 	ldr.w	r3, [r5], #4
 800368a:	4798      	blx	r3
 800368c:	3601      	adds	r6, #1
 800368e:	e7f2      	b.n	8003676 <__libc_init_array+0x1e>
 8003690:	08004fb8 	.word	0x08004fb8
 8003694:	08004fb8 	.word	0x08004fb8
 8003698:	08004fb8 	.word	0x08004fb8
 800369c:	08004fbc 	.word	0x08004fbc

080036a0 <memcpy>:
 80036a0:	440a      	add	r2, r1
 80036a2:	4291      	cmp	r1, r2
 80036a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80036a8:	d100      	bne.n	80036ac <memcpy+0xc>
 80036aa:	4770      	bx	lr
 80036ac:	b510      	push	{r4, lr}
 80036ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036b2:	4291      	cmp	r1, r2
 80036b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036b8:	d1f9      	bne.n	80036ae <memcpy+0xe>
 80036ba:	bd10      	pop	{r4, pc}

080036bc <powf>:
 80036bc:	b570      	push	{r4, r5, r6, lr}
 80036be:	460c      	mov	r4, r1
 80036c0:	4606      	mov	r6, r0
 80036c2:	f000 fa43 	bl	8003b4c <__ieee754_powf>
 80036c6:	4621      	mov	r1, r4
 80036c8:	4605      	mov	r5, r0
 80036ca:	4620      	mov	r0, r4
 80036cc:	f7fd f81c 	bl	8000708 <__aeabi_fcmpun>
 80036d0:	bb68      	cbnz	r0, 800372e <powf+0x72>
 80036d2:	2100      	movs	r1, #0
 80036d4:	4630      	mov	r0, r6
 80036d6:	f7fc ffe5 	bl	80006a4 <__aeabi_fcmpeq>
 80036da:	b190      	cbz	r0, 8003702 <powf+0x46>
 80036dc:	2100      	movs	r1, #0
 80036de:	4620      	mov	r0, r4
 80036e0:	f7fc ffe0 	bl	80006a4 <__aeabi_fcmpeq>
 80036e4:	2800      	cmp	r0, #0
 80036e6:	d133      	bne.n	8003750 <powf+0x94>
 80036e8:	4620      	mov	r0, r4
 80036ea:	f000 f8c1 	bl	8003870 <finitef>
 80036ee:	b1f0      	cbz	r0, 800372e <powf+0x72>
 80036f0:	2100      	movs	r1, #0
 80036f2:	4620      	mov	r0, r4
 80036f4:	f7fc ffe0 	bl	80006b8 <__aeabi_fcmplt>
 80036f8:	b1c8      	cbz	r0, 800372e <powf+0x72>
 80036fa:	f7ff ffa7 	bl	800364c <__errno>
 80036fe:	2322      	movs	r3, #34	@ 0x22
 8003700:	e014      	b.n	800372c <powf+0x70>
 8003702:	4628      	mov	r0, r5
 8003704:	f000 f8b4 	bl	8003870 <finitef>
 8003708:	b998      	cbnz	r0, 8003732 <powf+0x76>
 800370a:	4630      	mov	r0, r6
 800370c:	f000 f8b0 	bl	8003870 <finitef>
 8003710:	b178      	cbz	r0, 8003732 <powf+0x76>
 8003712:	4620      	mov	r0, r4
 8003714:	f000 f8ac 	bl	8003870 <finitef>
 8003718:	b158      	cbz	r0, 8003732 <powf+0x76>
 800371a:	4629      	mov	r1, r5
 800371c:	4628      	mov	r0, r5
 800371e:	f7fc fff3 	bl	8000708 <__aeabi_fcmpun>
 8003722:	2800      	cmp	r0, #0
 8003724:	d0e9      	beq.n	80036fa <powf+0x3e>
 8003726:	f7ff ff91 	bl	800364c <__errno>
 800372a:	2321      	movs	r3, #33	@ 0x21
 800372c:	6003      	str	r3, [r0, #0]
 800372e:	4628      	mov	r0, r5
 8003730:	bd70      	pop	{r4, r5, r6, pc}
 8003732:	2100      	movs	r1, #0
 8003734:	4628      	mov	r0, r5
 8003736:	f7fc ffb5 	bl	80006a4 <__aeabi_fcmpeq>
 800373a:	2800      	cmp	r0, #0
 800373c:	d0f7      	beq.n	800372e <powf+0x72>
 800373e:	4630      	mov	r0, r6
 8003740:	f000 f896 	bl	8003870 <finitef>
 8003744:	2800      	cmp	r0, #0
 8003746:	d0f2      	beq.n	800372e <powf+0x72>
 8003748:	4620      	mov	r0, r4
 800374a:	f000 f891 	bl	8003870 <finitef>
 800374e:	e7d3      	b.n	80036f8 <powf+0x3c>
 8003750:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8003754:	e7eb      	b.n	800372e <powf+0x72>

08003756 <sqrtf>:
 8003756:	b538      	push	{r3, r4, r5, lr}
 8003758:	4605      	mov	r5, r0
 800375a:	f000 f891 	bl	8003880 <__ieee754_sqrtf>
 800375e:	4629      	mov	r1, r5
 8003760:	4604      	mov	r4, r0
 8003762:	4628      	mov	r0, r5
 8003764:	f7fc ffd0 	bl	8000708 <__aeabi_fcmpun>
 8003768:	b968      	cbnz	r0, 8003786 <sqrtf+0x30>
 800376a:	2100      	movs	r1, #0
 800376c:	4628      	mov	r0, r5
 800376e:	f7fc ffa3 	bl	80006b8 <__aeabi_fcmplt>
 8003772:	b140      	cbz	r0, 8003786 <sqrtf+0x30>
 8003774:	f7ff ff6a 	bl	800364c <__errno>
 8003778:	2321      	movs	r3, #33	@ 0x21
 800377a:	2100      	movs	r1, #0
 800377c:	6003      	str	r3, [r0, #0]
 800377e:	4608      	mov	r0, r1
 8003780:	f7fc feb0 	bl	80004e4 <__aeabi_fdiv>
 8003784:	4604      	mov	r4, r0
 8003786:	4620      	mov	r0, r4
 8003788:	bd38      	pop	{r3, r4, r5, pc}
	...

0800378c <cosf>:
 800378c:	b507      	push	{r0, r1, r2, lr}
 800378e:	4a1a      	ldr	r2, [pc, #104]	@ (80037f8 <cosf+0x6c>)
 8003790:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8003794:	4293      	cmp	r3, r2
 8003796:	4601      	mov	r1, r0
 8003798:	d805      	bhi.n	80037a6 <cosf+0x1a>
 800379a:	2100      	movs	r1, #0
 800379c:	b003      	add	sp, #12
 800379e:	f85d eb04 	ldr.w	lr, [sp], #4
 80037a2:	f000 b8dd 	b.w	8003960 <__kernel_cosf>
 80037a6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80037aa:	d304      	bcc.n	80037b6 <cosf+0x2a>
 80037ac:	f7fc fcdc 	bl	8000168 <__aeabi_fsub>
 80037b0:	b003      	add	sp, #12
 80037b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80037b6:	4669      	mov	r1, sp
 80037b8:	f000 fd28 	bl	800420c <__ieee754_rem_pio2f>
 80037bc:	f000 0203 	and.w	r2, r0, #3
 80037c0:	2a01      	cmp	r2, #1
 80037c2:	d007      	beq.n	80037d4 <cosf+0x48>
 80037c4:	2a02      	cmp	r2, #2
 80037c6:	d00c      	beq.n	80037e2 <cosf+0x56>
 80037c8:	b982      	cbnz	r2, 80037ec <cosf+0x60>
 80037ca:	9901      	ldr	r1, [sp, #4]
 80037cc:	9800      	ldr	r0, [sp, #0]
 80037ce:	f000 f8c7 	bl	8003960 <__kernel_cosf>
 80037d2:	e7ed      	b.n	80037b0 <cosf+0x24>
 80037d4:	9901      	ldr	r1, [sp, #4]
 80037d6:	9800      	ldr	r0, [sp, #0]
 80037d8:	f000 f942 	bl	8003a60 <__kernel_sinf>
 80037dc:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80037e0:	e7e6      	b.n	80037b0 <cosf+0x24>
 80037e2:	9901      	ldr	r1, [sp, #4]
 80037e4:	9800      	ldr	r0, [sp, #0]
 80037e6:	f000 f8bb 	bl	8003960 <__kernel_cosf>
 80037ea:	e7f7      	b.n	80037dc <cosf+0x50>
 80037ec:	2201      	movs	r2, #1
 80037ee:	9901      	ldr	r1, [sp, #4]
 80037f0:	9800      	ldr	r0, [sp, #0]
 80037f2:	f000 f935 	bl	8003a60 <__kernel_sinf>
 80037f6:	e7db      	b.n	80037b0 <cosf+0x24>
 80037f8:	3f490fd8 	.word	0x3f490fd8

080037fc <sinf>:
 80037fc:	b507      	push	{r0, r1, r2, lr}
 80037fe:	4a1b      	ldr	r2, [pc, #108]	@ (800386c <sinf+0x70>)
 8003800:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8003804:	4293      	cmp	r3, r2
 8003806:	4601      	mov	r1, r0
 8003808:	d806      	bhi.n	8003818 <sinf+0x1c>
 800380a:	2200      	movs	r2, #0
 800380c:	2100      	movs	r1, #0
 800380e:	b003      	add	sp, #12
 8003810:	f85d eb04 	ldr.w	lr, [sp], #4
 8003814:	f000 b924 	b.w	8003a60 <__kernel_sinf>
 8003818:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800381c:	d304      	bcc.n	8003828 <sinf+0x2c>
 800381e:	f7fc fca3 	bl	8000168 <__aeabi_fsub>
 8003822:	b003      	add	sp, #12
 8003824:	f85d fb04 	ldr.w	pc, [sp], #4
 8003828:	4669      	mov	r1, sp
 800382a:	f000 fcef 	bl	800420c <__ieee754_rem_pio2f>
 800382e:	f000 0003 	and.w	r0, r0, #3
 8003832:	2801      	cmp	r0, #1
 8003834:	d008      	beq.n	8003848 <sinf+0x4c>
 8003836:	2802      	cmp	r0, #2
 8003838:	d00b      	beq.n	8003852 <sinf+0x56>
 800383a:	b990      	cbnz	r0, 8003862 <sinf+0x66>
 800383c:	2201      	movs	r2, #1
 800383e:	9901      	ldr	r1, [sp, #4]
 8003840:	9800      	ldr	r0, [sp, #0]
 8003842:	f000 f90d 	bl	8003a60 <__kernel_sinf>
 8003846:	e7ec      	b.n	8003822 <sinf+0x26>
 8003848:	9901      	ldr	r1, [sp, #4]
 800384a:	9800      	ldr	r0, [sp, #0]
 800384c:	f000 f888 	bl	8003960 <__kernel_cosf>
 8003850:	e7e7      	b.n	8003822 <sinf+0x26>
 8003852:	2201      	movs	r2, #1
 8003854:	9901      	ldr	r1, [sp, #4]
 8003856:	9800      	ldr	r0, [sp, #0]
 8003858:	f000 f902 	bl	8003a60 <__kernel_sinf>
 800385c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8003860:	e7df      	b.n	8003822 <sinf+0x26>
 8003862:	9901      	ldr	r1, [sp, #4]
 8003864:	9800      	ldr	r0, [sp, #0]
 8003866:	f000 f87b 	bl	8003960 <__kernel_cosf>
 800386a:	e7f7      	b.n	800385c <sinf+0x60>
 800386c:	3f490fd8 	.word	0x3f490fd8

08003870 <finitef>:
 8003870:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003874:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8003878:	bfac      	ite	ge
 800387a:	2000      	movge	r0, #0
 800387c:	2001      	movlt	r0, #1
 800387e:	4770      	bx	lr

08003880 <__ieee754_sqrtf>:
 8003880:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8003884:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8003888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800388c:	4603      	mov	r3, r0
 800388e:	4604      	mov	r4, r0
 8003890:	d30a      	bcc.n	80038a8 <__ieee754_sqrtf+0x28>
 8003892:	4601      	mov	r1, r0
 8003894:	f7fc fd72 	bl	800037c <__aeabi_fmul>
 8003898:	4601      	mov	r1, r0
 800389a:	4620      	mov	r0, r4
 800389c:	f7fc fc66 	bl	800016c <__addsf3>
 80038a0:	4604      	mov	r4, r0
 80038a2:	4620      	mov	r0, r4
 80038a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038a8:	2a00      	cmp	r2, #0
 80038aa:	d0fa      	beq.n	80038a2 <__ieee754_sqrtf+0x22>
 80038ac:	2800      	cmp	r0, #0
 80038ae:	da06      	bge.n	80038be <__ieee754_sqrtf+0x3e>
 80038b0:	4601      	mov	r1, r0
 80038b2:	f7fc fc59 	bl	8000168 <__aeabi_fsub>
 80038b6:	4601      	mov	r1, r0
 80038b8:	f7fc fe14 	bl	80004e4 <__aeabi_fdiv>
 80038bc:	e7f0      	b.n	80038a0 <__ieee754_sqrtf+0x20>
 80038be:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 80038c2:	d03c      	beq.n	800393e <__ieee754_sqrtf+0xbe>
 80038c4:	15c2      	asrs	r2, r0, #23
 80038c6:	2400      	movs	r4, #0
 80038c8:	2019      	movs	r0, #25
 80038ca:	4626      	mov	r6, r4
 80038cc:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80038d0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80038d4:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 80038d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038dc:	07d2      	lsls	r2, r2, #31
 80038de:	bf58      	it	pl
 80038e0:	005b      	lslpl	r3, r3, #1
 80038e2:	106d      	asrs	r5, r5, #1
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	1872      	adds	r2, r6, r1
 80038e8:	429a      	cmp	r2, r3
 80038ea:	bfcf      	iteee	gt
 80038ec:	461a      	movgt	r2, r3
 80038ee:	1856      	addle	r6, r2, r1
 80038f0:	1864      	addle	r4, r4, r1
 80038f2:	1a9a      	suble	r2, r3, r2
 80038f4:	3801      	subs	r0, #1
 80038f6:	ea4f 0342 	mov.w	r3, r2, lsl #1
 80038fa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80038fe:	d1f2      	bne.n	80038e6 <__ieee754_sqrtf+0x66>
 8003900:	b1ba      	cbz	r2, 8003932 <__ieee754_sqrtf+0xb2>
 8003902:	4e15      	ldr	r6, [pc, #84]	@ (8003958 <__ieee754_sqrtf+0xd8>)
 8003904:	4f15      	ldr	r7, [pc, #84]	@ (800395c <__ieee754_sqrtf+0xdc>)
 8003906:	6830      	ldr	r0, [r6, #0]
 8003908:	6839      	ldr	r1, [r7, #0]
 800390a:	f7fc fc2d 	bl	8000168 <__aeabi_fsub>
 800390e:	f8d6 8000 	ldr.w	r8, [r6]
 8003912:	4601      	mov	r1, r0
 8003914:	4640      	mov	r0, r8
 8003916:	f7fc fed9 	bl	80006cc <__aeabi_fcmple>
 800391a:	b150      	cbz	r0, 8003932 <__ieee754_sqrtf+0xb2>
 800391c:	6830      	ldr	r0, [r6, #0]
 800391e:	6839      	ldr	r1, [r7, #0]
 8003920:	f7fc fc24 	bl	800016c <__addsf3>
 8003924:	6836      	ldr	r6, [r6, #0]
 8003926:	4601      	mov	r1, r0
 8003928:	4630      	mov	r0, r6
 800392a:	f7fc fec5 	bl	80006b8 <__aeabi_fcmplt>
 800392e:	b170      	cbz	r0, 800394e <__ieee754_sqrtf+0xce>
 8003930:	3402      	adds	r4, #2
 8003932:	1064      	asrs	r4, r4, #1
 8003934:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8003938:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800393c:	e7b1      	b.n	80038a2 <__ieee754_sqrtf+0x22>
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	0218      	lsls	r0, r3, #8
 8003942:	460a      	mov	r2, r1
 8003944:	f101 0101 	add.w	r1, r1, #1
 8003948:	d5f9      	bpl.n	800393e <__ieee754_sqrtf+0xbe>
 800394a:	4252      	negs	r2, r2
 800394c:	e7bb      	b.n	80038c6 <__ieee754_sqrtf+0x46>
 800394e:	3401      	adds	r4, #1
 8003950:	f024 0401 	bic.w	r4, r4, #1
 8003954:	e7ed      	b.n	8003932 <__ieee754_sqrtf+0xb2>
 8003956:	bf00      	nop
 8003958:	08004bc4 	.word	0x08004bc4
 800395c:	08004bc0 	.word	0x08004bc0

08003960 <__kernel_cosf>:
 8003960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003964:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8003968:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 800396c:	4606      	mov	r6, r0
 800396e:	4688      	mov	r8, r1
 8003970:	d203      	bcs.n	800397a <__kernel_cosf+0x1a>
 8003972:	f7fc fedf 	bl	8000734 <__aeabi_f2iz>
 8003976:	2800      	cmp	r0, #0
 8003978:	d05c      	beq.n	8003a34 <__kernel_cosf+0xd4>
 800397a:	4631      	mov	r1, r6
 800397c:	4630      	mov	r0, r6
 800397e:	f7fc fcfd 	bl	800037c <__aeabi_fmul>
 8003982:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003986:	4604      	mov	r4, r0
 8003988:	f7fc fcf8 	bl	800037c <__aeabi_fmul>
 800398c:	492b      	ldr	r1, [pc, #172]	@ (8003a3c <__kernel_cosf+0xdc>)
 800398e:	4607      	mov	r7, r0
 8003990:	4620      	mov	r0, r4
 8003992:	f7fc fcf3 	bl	800037c <__aeabi_fmul>
 8003996:	492a      	ldr	r1, [pc, #168]	@ (8003a40 <__kernel_cosf+0xe0>)
 8003998:	f7fc fbe8 	bl	800016c <__addsf3>
 800399c:	4621      	mov	r1, r4
 800399e:	f7fc fced 	bl	800037c <__aeabi_fmul>
 80039a2:	4928      	ldr	r1, [pc, #160]	@ (8003a44 <__kernel_cosf+0xe4>)
 80039a4:	f7fc fbe0 	bl	8000168 <__aeabi_fsub>
 80039a8:	4621      	mov	r1, r4
 80039aa:	f7fc fce7 	bl	800037c <__aeabi_fmul>
 80039ae:	4926      	ldr	r1, [pc, #152]	@ (8003a48 <__kernel_cosf+0xe8>)
 80039b0:	f7fc fbdc 	bl	800016c <__addsf3>
 80039b4:	4621      	mov	r1, r4
 80039b6:	f7fc fce1 	bl	800037c <__aeabi_fmul>
 80039ba:	4924      	ldr	r1, [pc, #144]	@ (8003a4c <__kernel_cosf+0xec>)
 80039bc:	f7fc fbd4 	bl	8000168 <__aeabi_fsub>
 80039c0:	4621      	mov	r1, r4
 80039c2:	f7fc fcdb 	bl	800037c <__aeabi_fmul>
 80039c6:	4922      	ldr	r1, [pc, #136]	@ (8003a50 <__kernel_cosf+0xf0>)
 80039c8:	f7fc fbd0 	bl	800016c <__addsf3>
 80039cc:	4621      	mov	r1, r4
 80039ce:	f7fc fcd5 	bl	800037c <__aeabi_fmul>
 80039d2:	4621      	mov	r1, r4
 80039d4:	f7fc fcd2 	bl	800037c <__aeabi_fmul>
 80039d8:	4641      	mov	r1, r8
 80039da:	4604      	mov	r4, r0
 80039dc:	4630      	mov	r0, r6
 80039de:	f7fc fccd 	bl	800037c <__aeabi_fmul>
 80039e2:	4601      	mov	r1, r0
 80039e4:	4620      	mov	r0, r4
 80039e6:	f7fc fbbf 	bl	8000168 <__aeabi_fsub>
 80039ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003a54 <__kernel_cosf+0xf4>)
 80039ec:	4604      	mov	r4, r0
 80039ee:	429d      	cmp	r5, r3
 80039f0:	d80a      	bhi.n	8003a08 <__kernel_cosf+0xa8>
 80039f2:	4601      	mov	r1, r0
 80039f4:	4638      	mov	r0, r7
 80039f6:	f7fc fbb7 	bl	8000168 <__aeabi_fsub>
 80039fa:	4601      	mov	r1, r0
 80039fc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003a00:	f7fc fbb2 	bl	8000168 <__aeabi_fsub>
 8003a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a08:	4b13      	ldr	r3, [pc, #76]	@ (8003a58 <__kernel_cosf+0xf8>)
 8003a0a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003a0e:	429d      	cmp	r5, r3
 8003a10:	bf8c      	ite	hi
 8003a12:	4d12      	ldrhi	r5, [pc, #72]	@ (8003a5c <__kernel_cosf+0xfc>)
 8003a14:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 8003a18:	4629      	mov	r1, r5
 8003a1a:	f7fc fba5 	bl	8000168 <__aeabi_fsub>
 8003a1e:	4629      	mov	r1, r5
 8003a20:	4606      	mov	r6, r0
 8003a22:	4638      	mov	r0, r7
 8003a24:	f7fc fba0 	bl	8000168 <__aeabi_fsub>
 8003a28:	4621      	mov	r1, r4
 8003a2a:	f7fc fb9d 	bl	8000168 <__aeabi_fsub>
 8003a2e:	4601      	mov	r1, r0
 8003a30:	4630      	mov	r0, r6
 8003a32:	e7e5      	b.n	8003a00 <__kernel_cosf+0xa0>
 8003a34:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003a38:	e7e4      	b.n	8003a04 <__kernel_cosf+0xa4>
 8003a3a:	bf00      	nop
 8003a3c:	ad47d74e 	.word	0xad47d74e
 8003a40:	310f74f6 	.word	0x310f74f6
 8003a44:	3493f27c 	.word	0x3493f27c
 8003a48:	37d00d01 	.word	0x37d00d01
 8003a4c:	3ab60b61 	.word	0x3ab60b61
 8003a50:	3d2aaaab 	.word	0x3d2aaaab
 8003a54:	3e999999 	.word	0x3e999999
 8003a58:	3f480000 	.word	0x3f480000
 8003a5c:	3e900000 	.word	0x3e900000

08003a60 <__kernel_sinf>:
 8003a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a64:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8003a68:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8003a6c:	4604      	mov	r4, r0
 8003a6e:	460f      	mov	r7, r1
 8003a70:	4691      	mov	r9, r2
 8003a72:	d203      	bcs.n	8003a7c <__kernel_sinf+0x1c>
 8003a74:	f7fc fe5e 	bl	8000734 <__aeabi_f2iz>
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d035      	beq.n	8003ae8 <__kernel_sinf+0x88>
 8003a7c:	4621      	mov	r1, r4
 8003a7e:	4620      	mov	r0, r4
 8003a80:	f7fc fc7c 	bl	800037c <__aeabi_fmul>
 8003a84:	4605      	mov	r5, r0
 8003a86:	4601      	mov	r1, r0
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f7fc fc77 	bl	800037c <__aeabi_fmul>
 8003a8e:	4929      	ldr	r1, [pc, #164]	@ (8003b34 <__kernel_sinf+0xd4>)
 8003a90:	4606      	mov	r6, r0
 8003a92:	4628      	mov	r0, r5
 8003a94:	f7fc fc72 	bl	800037c <__aeabi_fmul>
 8003a98:	4927      	ldr	r1, [pc, #156]	@ (8003b38 <__kernel_sinf+0xd8>)
 8003a9a:	f7fc fb65 	bl	8000168 <__aeabi_fsub>
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	f7fc fc6c 	bl	800037c <__aeabi_fmul>
 8003aa4:	4925      	ldr	r1, [pc, #148]	@ (8003b3c <__kernel_sinf+0xdc>)
 8003aa6:	f7fc fb61 	bl	800016c <__addsf3>
 8003aaa:	4629      	mov	r1, r5
 8003aac:	f7fc fc66 	bl	800037c <__aeabi_fmul>
 8003ab0:	4923      	ldr	r1, [pc, #140]	@ (8003b40 <__kernel_sinf+0xe0>)
 8003ab2:	f7fc fb59 	bl	8000168 <__aeabi_fsub>
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	f7fc fc60 	bl	800037c <__aeabi_fmul>
 8003abc:	4921      	ldr	r1, [pc, #132]	@ (8003b44 <__kernel_sinf+0xe4>)
 8003abe:	f7fc fb55 	bl	800016c <__addsf3>
 8003ac2:	4680      	mov	r8, r0
 8003ac4:	f1b9 0f00 	cmp.w	r9, #0
 8003ac8:	d111      	bne.n	8003aee <__kernel_sinf+0x8e>
 8003aca:	4601      	mov	r1, r0
 8003acc:	4628      	mov	r0, r5
 8003ace:	f7fc fc55 	bl	800037c <__aeabi_fmul>
 8003ad2:	491d      	ldr	r1, [pc, #116]	@ (8003b48 <__kernel_sinf+0xe8>)
 8003ad4:	f7fc fb48 	bl	8000168 <__aeabi_fsub>
 8003ad8:	4631      	mov	r1, r6
 8003ada:	f7fc fc4f 	bl	800037c <__aeabi_fmul>
 8003ade:	4601      	mov	r1, r0
 8003ae0:	4620      	mov	r0, r4
 8003ae2:	f7fc fb43 	bl	800016c <__addsf3>
 8003ae6:	4604      	mov	r4, r0
 8003ae8:	4620      	mov	r0, r4
 8003aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aee:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003af2:	4638      	mov	r0, r7
 8003af4:	f7fc fc42 	bl	800037c <__aeabi_fmul>
 8003af8:	4641      	mov	r1, r8
 8003afa:	4681      	mov	r9, r0
 8003afc:	4630      	mov	r0, r6
 8003afe:	f7fc fc3d 	bl	800037c <__aeabi_fmul>
 8003b02:	4601      	mov	r1, r0
 8003b04:	4648      	mov	r0, r9
 8003b06:	f7fc fb2f 	bl	8000168 <__aeabi_fsub>
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	f7fc fc36 	bl	800037c <__aeabi_fmul>
 8003b10:	4639      	mov	r1, r7
 8003b12:	f7fc fb29 	bl	8000168 <__aeabi_fsub>
 8003b16:	490c      	ldr	r1, [pc, #48]	@ (8003b48 <__kernel_sinf+0xe8>)
 8003b18:	4605      	mov	r5, r0
 8003b1a:	4630      	mov	r0, r6
 8003b1c:	f7fc fc2e 	bl	800037c <__aeabi_fmul>
 8003b20:	4601      	mov	r1, r0
 8003b22:	4628      	mov	r0, r5
 8003b24:	f7fc fb22 	bl	800016c <__addsf3>
 8003b28:	4601      	mov	r1, r0
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f7fc fb1c 	bl	8000168 <__aeabi_fsub>
 8003b30:	e7d9      	b.n	8003ae6 <__kernel_sinf+0x86>
 8003b32:	bf00      	nop
 8003b34:	2f2ec9d3 	.word	0x2f2ec9d3
 8003b38:	32d72f34 	.word	0x32d72f34
 8003b3c:	3638ef1b 	.word	0x3638ef1b
 8003b40:	39500d01 	.word	0x39500d01
 8003b44:	3c088889 	.word	0x3c088889
 8003b48:	3e2aaaab 	.word	0x3e2aaaab

08003b4c <__ieee754_powf>:
 8003b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b50:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 8003b54:	4681      	mov	r9, r0
 8003b56:	460f      	mov	r7, r1
 8003b58:	4606      	mov	r6, r0
 8003b5a:	460c      	mov	r4, r1
 8003b5c:	b087      	sub	sp, #28
 8003b5e:	d10c      	bne.n	8003b7a <__ieee754_powf+0x2e>
 8003b60:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 8003b64:	0076      	lsls	r6, r6, #1
 8003b66:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8003b6a:	f240 8310 	bls.w	800418e <__ieee754_powf+0x642>
 8003b6e:	4639      	mov	r1, r7
 8003b70:	4648      	mov	r0, r9
 8003b72:	f7fc fafb 	bl	800016c <__addsf3>
 8003b76:	4601      	mov	r1, r0
 8003b78:	e043      	b.n	8003c02 <__ieee754_powf+0xb6>
 8003b7a:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8003b7e:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8003b82:	d802      	bhi.n	8003b8a <__ieee754_powf+0x3e>
 8003b84:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8003b88:	d908      	bls.n	8003b9c <__ieee754_powf+0x50>
 8003b8a:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8003b8e:	d1ee      	bne.n	8003b6e <__ieee754_powf+0x22>
 8003b90:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8003b94:	0064      	lsls	r4, r4, #1
 8003b96:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8003b9a:	e7e6      	b.n	8003b6a <__ieee754_powf+0x1e>
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	da1f      	bge.n	8003be0 <__ieee754_powf+0x94>
 8003ba0:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 8003ba4:	f080 82f8 	bcs.w	8004198 <__ieee754_powf+0x64c>
 8003ba8:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8003bac:	d32f      	bcc.n	8003c0e <__ieee754_powf+0xc2>
 8003bae:	ea4f 53eb 	mov.w	r3, fp, asr #23
 8003bb2:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8003bb6:	fa4b f503 	asr.w	r5, fp, r3
 8003bba:	fa05 f303 	lsl.w	r3, r5, r3
 8003bbe:	455b      	cmp	r3, fp
 8003bc0:	d123      	bne.n	8003c0a <__ieee754_powf+0xbe>
 8003bc2:	f005 0501 	and.w	r5, r5, #1
 8003bc6:	f1c5 0502 	rsb	r5, r5, #2
 8003bca:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8003bce:	d11f      	bne.n	8003c10 <__ieee754_powf+0xc4>
 8003bd0:	2c00      	cmp	r4, #0
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	da15      	bge.n	8003c02 <__ieee754_powf+0xb6>
 8003bd6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003bda:	f7fc fc83 	bl	80004e4 <__aeabi_fdiv>
 8003bde:	e7ca      	b.n	8003b76 <__ieee754_powf+0x2a>
 8003be0:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8003be4:	d111      	bne.n	8003c0a <__ieee754_powf+0xbe>
 8003be6:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8003bea:	f000 82d0 	beq.w	800418e <__ieee754_powf+0x642>
 8003bee:	d904      	bls.n	8003bfa <__ieee754_powf+0xae>
 8003bf0:	2c00      	cmp	r4, #0
 8003bf2:	f280 82cf 	bge.w	8004194 <__ieee754_powf+0x648>
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	e003      	b.n	8003c02 <__ieee754_powf+0xb6>
 8003bfa:	2c00      	cmp	r4, #0
 8003bfc:	dafb      	bge.n	8003bf6 <__ieee754_powf+0xaa>
 8003bfe:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 8003c02:	4608      	mov	r0, r1
 8003c04:	b007      	add	sp, #28
 8003c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c0a:	2500      	movs	r5, #0
 8003c0c:	e7dd      	b.n	8003bca <__ieee754_powf+0x7e>
 8003c0e:	2500      	movs	r5, #0
 8003c10:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8003c14:	d104      	bne.n	8003c20 <__ieee754_powf+0xd4>
 8003c16:	4649      	mov	r1, r9
 8003c18:	4648      	mov	r0, r9
 8003c1a:	f7fc fbaf 	bl	800037c <__aeabi_fmul>
 8003c1e:	e7aa      	b.n	8003b76 <__ieee754_powf+0x2a>
 8003c20:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8003c24:	f040 82bd 	bne.w	80041a2 <__ieee754_powf+0x656>
 8003c28:	2e00      	cmp	r6, #0
 8003c2a:	f2c0 82ba 	blt.w	80041a2 <__ieee754_powf+0x656>
 8003c2e:	4648      	mov	r0, r9
 8003c30:	b007      	add	sp, #28
 8003c32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c36:	f7ff be23 	b.w	8003880 <__ieee754_sqrtf>
 8003c3a:	2d01      	cmp	r5, #1
 8003c3c:	d1e1      	bne.n	8003c02 <__ieee754_powf+0xb6>
 8003c3e:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8003c42:	e798      	b.n	8003b76 <__ieee754_powf+0x2a>
 8003c44:	0ff3      	lsrs	r3, r6, #31
 8003c46:	3b01      	subs	r3, #1
 8003c48:	9303      	str	r3, [sp, #12]
 8003c4a:	432b      	orrs	r3, r5
 8003c4c:	d101      	bne.n	8003c52 <__ieee754_powf+0x106>
 8003c4e:	4649      	mov	r1, r9
 8003c50:	e2c5      	b.n	80041de <__ieee754_powf+0x692>
 8003c52:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 8003c56:	f240 809b 	bls.w	8003d90 <__ieee754_powf+0x244>
 8003c5a:	4b46      	ldr	r3, [pc, #280]	@ (8003d74 <__ieee754_powf+0x228>)
 8003c5c:	4598      	cmp	r8, r3
 8003c5e:	d807      	bhi.n	8003c70 <__ieee754_powf+0x124>
 8003c60:	2c00      	cmp	r4, #0
 8003c62:	da0a      	bge.n	8003c7a <__ieee754_powf+0x12e>
 8003c64:	2000      	movs	r0, #0
 8003c66:	b007      	add	sp, #28
 8003c68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c6c:	f000 bc9d 	b.w	80045aa <__math_oflowf>
 8003c70:	4b41      	ldr	r3, [pc, #260]	@ (8003d78 <__ieee754_powf+0x22c>)
 8003c72:	4598      	cmp	r8, r3
 8003c74:	d907      	bls.n	8003c86 <__ieee754_powf+0x13a>
 8003c76:	2c00      	cmp	r4, #0
 8003c78:	dcf4      	bgt.n	8003c64 <__ieee754_powf+0x118>
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	b007      	add	sp, #28
 8003c7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c82:	f000 bc8e 	b.w	80045a2 <__math_uflowf>
 8003c86:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003c8a:	f7fc fa6d 	bl	8000168 <__aeabi_fsub>
 8003c8e:	493b      	ldr	r1, [pc, #236]	@ (8003d7c <__ieee754_powf+0x230>)
 8003c90:	4606      	mov	r6, r0
 8003c92:	f7fc fb73 	bl	800037c <__aeabi_fmul>
 8003c96:	493a      	ldr	r1, [pc, #232]	@ (8003d80 <__ieee754_powf+0x234>)
 8003c98:	4680      	mov	r8, r0
 8003c9a:	4630      	mov	r0, r6
 8003c9c:	f7fc fb6e 	bl	800037c <__aeabi_fmul>
 8003ca0:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8003ca4:	4681      	mov	r9, r0
 8003ca6:	4630      	mov	r0, r6
 8003ca8:	f7fc fb68 	bl	800037c <__aeabi_fmul>
 8003cac:	4601      	mov	r1, r0
 8003cae:	4835      	ldr	r0, [pc, #212]	@ (8003d84 <__ieee754_powf+0x238>)
 8003cb0:	f7fc fa5a 	bl	8000168 <__aeabi_fsub>
 8003cb4:	4631      	mov	r1, r6
 8003cb6:	f7fc fb61 	bl	800037c <__aeabi_fmul>
 8003cba:	4601      	mov	r1, r0
 8003cbc:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8003cc0:	f7fc fa52 	bl	8000168 <__aeabi_fsub>
 8003cc4:	4631      	mov	r1, r6
 8003cc6:	4682      	mov	sl, r0
 8003cc8:	4630      	mov	r0, r6
 8003cca:	f7fc fb57 	bl	800037c <__aeabi_fmul>
 8003cce:	4601      	mov	r1, r0
 8003cd0:	4650      	mov	r0, sl
 8003cd2:	f7fc fb53 	bl	800037c <__aeabi_fmul>
 8003cd6:	492c      	ldr	r1, [pc, #176]	@ (8003d88 <__ieee754_powf+0x23c>)
 8003cd8:	f7fc fb50 	bl	800037c <__aeabi_fmul>
 8003cdc:	4601      	mov	r1, r0
 8003cde:	4648      	mov	r0, r9
 8003ce0:	f7fc fa42 	bl	8000168 <__aeabi_fsub>
 8003ce4:	4601      	mov	r1, r0
 8003ce6:	4606      	mov	r6, r0
 8003ce8:	4640      	mov	r0, r8
 8003cea:	f7fc fa3f 	bl	800016c <__addsf3>
 8003cee:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8003cf2:	f02b 0b0f 	bic.w	fp, fp, #15
 8003cf6:	4641      	mov	r1, r8
 8003cf8:	4658      	mov	r0, fp
 8003cfa:	f7fc fa35 	bl	8000168 <__aeabi_fsub>
 8003cfe:	4601      	mov	r1, r0
 8003d00:	4630      	mov	r0, r6
 8003d02:	f7fc fa31 	bl	8000168 <__aeabi_fsub>
 8003d06:	9b03      	ldr	r3, [sp, #12]
 8003d08:	3d01      	subs	r5, #1
 8003d0a:	f36f 040b 	bfc	r4, #0, #12
 8003d0e:	431d      	orrs	r5, r3
 8003d10:	4606      	mov	r6, r0
 8003d12:	4621      	mov	r1, r4
 8003d14:	4638      	mov	r0, r7
 8003d16:	bf14      	ite	ne
 8003d18:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 8003d1c:	4d1b      	ldreq	r5, [pc, #108]	@ (8003d8c <__ieee754_powf+0x240>)
 8003d1e:	f7fc fa23 	bl	8000168 <__aeabi_fsub>
 8003d22:	4659      	mov	r1, fp
 8003d24:	f7fc fb2a 	bl	800037c <__aeabi_fmul>
 8003d28:	4639      	mov	r1, r7
 8003d2a:	4680      	mov	r8, r0
 8003d2c:	4630      	mov	r0, r6
 8003d2e:	f7fc fb25 	bl	800037c <__aeabi_fmul>
 8003d32:	4601      	mov	r1, r0
 8003d34:	4640      	mov	r0, r8
 8003d36:	f7fc fa19 	bl	800016c <__addsf3>
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	4606      	mov	r6, r0
 8003d3e:	4658      	mov	r0, fp
 8003d40:	f7fc fb1c 	bl	800037c <__aeabi_fmul>
 8003d44:	4601      	mov	r1, r0
 8003d46:	4607      	mov	r7, r0
 8003d48:	4630      	mov	r0, r6
 8003d4a:	f7fc fa0f 	bl	800016c <__addsf3>
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	4604      	mov	r4, r0
 8003d52:	4680      	mov	r8, r0
 8003d54:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8003d58:	f340 813f 	ble.w	8003fda <__ieee754_powf+0x48e>
 8003d5c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8003d60:	f240 8128 	bls.w	8003fb4 <__ieee754_powf+0x468>
 8003d64:	2100      	movs	r1, #0
 8003d66:	4628      	mov	r0, r5
 8003d68:	f7fc fca6 	bl	80006b8 <__aeabi_fcmplt>
 8003d6c:	3800      	subs	r0, #0
 8003d6e:	bf18      	it	ne
 8003d70:	2001      	movne	r0, #1
 8003d72:	e778      	b.n	8003c66 <__ieee754_powf+0x11a>
 8003d74:	3f7ffff3 	.word	0x3f7ffff3
 8003d78:	3f800007 	.word	0x3f800007
 8003d7c:	3fb8aa00 	.word	0x3fb8aa00
 8003d80:	36eca570 	.word	0x36eca570
 8003d84:	3eaaaaab 	.word	0x3eaaaaab
 8003d88:	3fb8aa3b 	.word	0x3fb8aa3b
 8003d8c:	bf800000 	.word	0xbf800000
 8003d90:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8003d94:	f040 810a 	bne.w	8003fac <__ieee754_powf+0x460>
 8003d98:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8003d9c:	f7fc faee 	bl	800037c <__aeabi_fmul>
 8003da0:	f06f 0217 	mvn.w	r2, #23
 8003da4:	4682      	mov	sl, r0
 8003da6:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8003daa:	3b7f      	subs	r3, #127	@ 0x7f
 8003dac:	441a      	add	r2, r3
 8003dae:	4b95      	ldr	r3, [pc, #596]	@ (8004004 <__ieee754_powf+0x4b8>)
 8003db0:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 8003db4:	459a      	cmp	sl, r3
 8003db6:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 8003dba:	dd06      	ble.n	8003dca <__ieee754_powf+0x27e>
 8003dbc:	4b92      	ldr	r3, [pc, #584]	@ (8004008 <__ieee754_powf+0x4bc>)
 8003dbe:	459a      	cmp	sl, r3
 8003dc0:	f340 80f6 	ble.w	8003fb0 <__ieee754_powf+0x464>
 8003dc4:	3201      	adds	r2, #1
 8003dc6:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 8003dca:	2300      	movs	r3, #0
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	9205      	str	r2, [sp, #20]
 8003dd0:	4b8e      	ldr	r3, [pc, #568]	@ (800400c <__ieee754_powf+0x4c0>)
 8003dd2:	9a01      	ldr	r2, [sp, #4]
 8003dd4:	4630      	mov	r0, r6
 8003dd6:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8003dda:	46b2      	mov	sl, r6
 8003ddc:	4659      	mov	r1, fp
 8003dde:	f7fc f9c3 	bl	8000168 <__aeabi_fsub>
 8003de2:	4631      	mov	r1, r6
 8003de4:	4681      	mov	r9, r0
 8003de6:	4658      	mov	r0, fp
 8003de8:	f7fc f9c0 	bl	800016c <__addsf3>
 8003dec:	4601      	mov	r1, r0
 8003dee:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003df2:	f7fc fb77 	bl	80004e4 <__aeabi_fdiv>
 8003df6:	4601      	mov	r1, r0
 8003df8:	9004      	str	r0, [sp, #16]
 8003dfa:	4648      	mov	r0, r9
 8003dfc:	f7fc fabe 	bl	800037c <__aeabi_fmul>
 8003e00:	9002      	str	r0, [sp, #8]
 8003e02:	9b02      	ldr	r3, [sp, #8]
 8003e04:	1076      	asrs	r6, r6, #1
 8003e06:	f36f 030b 	bfc	r3, #0, #12
 8003e0a:	4698      	mov	r8, r3
 8003e0c:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 8003e10:	9b01      	ldr	r3, [sp, #4]
 8003e12:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 8003e16:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 8003e1a:	4631      	mov	r1, r6
 8003e1c:	4640      	mov	r0, r8
 8003e1e:	f7fc faad 	bl	800037c <__aeabi_fmul>
 8003e22:	4601      	mov	r1, r0
 8003e24:	4648      	mov	r0, r9
 8003e26:	f7fc f99f 	bl	8000168 <__aeabi_fsub>
 8003e2a:	4659      	mov	r1, fp
 8003e2c:	4681      	mov	r9, r0
 8003e2e:	4630      	mov	r0, r6
 8003e30:	f7fc f99a 	bl	8000168 <__aeabi_fsub>
 8003e34:	4601      	mov	r1, r0
 8003e36:	4650      	mov	r0, sl
 8003e38:	f7fc f996 	bl	8000168 <__aeabi_fsub>
 8003e3c:	4641      	mov	r1, r8
 8003e3e:	f7fc fa9d 	bl	800037c <__aeabi_fmul>
 8003e42:	4601      	mov	r1, r0
 8003e44:	4648      	mov	r0, r9
 8003e46:	f7fc f98f 	bl	8000168 <__aeabi_fsub>
 8003e4a:	9b04      	ldr	r3, [sp, #16]
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	f7fc fa95 	bl	800037c <__aeabi_fmul>
 8003e52:	9902      	ldr	r1, [sp, #8]
 8003e54:	4683      	mov	fp, r0
 8003e56:	4608      	mov	r0, r1
 8003e58:	f7fc fa90 	bl	800037c <__aeabi_fmul>
 8003e5c:	4606      	mov	r6, r0
 8003e5e:	496c      	ldr	r1, [pc, #432]	@ (8004010 <__ieee754_powf+0x4c4>)
 8003e60:	f7fc fa8c 	bl	800037c <__aeabi_fmul>
 8003e64:	496b      	ldr	r1, [pc, #428]	@ (8004014 <__ieee754_powf+0x4c8>)
 8003e66:	f7fc f981 	bl	800016c <__addsf3>
 8003e6a:	4631      	mov	r1, r6
 8003e6c:	f7fc fa86 	bl	800037c <__aeabi_fmul>
 8003e70:	4969      	ldr	r1, [pc, #420]	@ (8004018 <__ieee754_powf+0x4cc>)
 8003e72:	f7fc f97b 	bl	800016c <__addsf3>
 8003e76:	4631      	mov	r1, r6
 8003e78:	f7fc fa80 	bl	800037c <__aeabi_fmul>
 8003e7c:	4967      	ldr	r1, [pc, #412]	@ (800401c <__ieee754_powf+0x4d0>)
 8003e7e:	f7fc f975 	bl	800016c <__addsf3>
 8003e82:	4631      	mov	r1, r6
 8003e84:	f7fc fa7a 	bl	800037c <__aeabi_fmul>
 8003e88:	4965      	ldr	r1, [pc, #404]	@ (8004020 <__ieee754_powf+0x4d4>)
 8003e8a:	f7fc f96f 	bl	800016c <__addsf3>
 8003e8e:	4631      	mov	r1, r6
 8003e90:	f7fc fa74 	bl	800037c <__aeabi_fmul>
 8003e94:	4963      	ldr	r1, [pc, #396]	@ (8004024 <__ieee754_powf+0x4d8>)
 8003e96:	f7fc f969 	bl	800016c <__addsf3>
 8003e9a:	4631      	mov	r1, r6
 8003e9c:	4681      	mov	r9, r0
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	f7fc fa6c 	bl	800037c <__aeabi_fmul>
 8003ea4:	4601      	mov	r1, r0
 8003ea6:	4648      	mov	r0, r9
 8003ea8:	f7fc fa68 	bl	800037c <__aeabi_fmul>
 8003eac:	4606      	mov	r6, r0
 8003eae:	4641      	mov	r1, r8
 8003eb0:	9802      	ldr	r0, [sp, #8]
 8003eb2:	f7fc f95b 	bl	800016c <__addsf3>
 8003eb6:	4659      	mov	r1, fp
 8003eb8:	f7fc fa60 	bl	800037c <__aeabi_fmul>
 8003ebc:	4631      	mov	r1, r6
 8003ebe:	f7fc f955 	bl	800016c <__addsf3>
 8003ec2:	4641      	mov	r1, r8
 8003ec4:	4681      	mov	r9, r0
 8003ec6:	4640      	mov	r0, r8
 8003ec8:	f7fc fa58 	bl	800037c <__aeabi_fmul>
 8003ecc:	4956      	ldr	r1, [pc, #344]	@ (8004028 <__ieee754_powf+0x4dc>)
 8003ece:	4682      	mov	sl, r0
 8003ed0:	f7fc f94c 	bl	800016c <__addsf3>
 8003ed4:	4649      	mov	r1, r9
 8003ed6:	f7fc f949 	bl	800016c <__addsf3>
 8003eda:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8003ede:	f026 060f 	bic.w	r6, r6, #15
 8003ee2:	4631      	mov	r1, r6
 8003ee4:	4640      	mov	r0, r8
 8003ee6:	f7fc fa49 	bl	800037c <__aeabi_fmul>
 8003eea:	494f      	ldr	r1, [pc, #316]	@ (8004028 <__ieee754_powf+0x4dc>)
 8003eec:	4680      	mov	r8, r0
 8003eee:	4630      	mov	r0, r6
 8003ef0:	f7fc f93a 	bl	8000168 <__aeabi_fsub>
 8003ef4:	4651      	mov	r1, sl
 8003ef6:	f7fc f937 	bl	8000168 <__aeabi_fsub>
 8003efa:	4601      	mov	r1, r0
 8003efc:	4648      	mov	r0, r9
 8003efe:	f7fc f933 	bl	8000168 <__aeabi_fsub>
 8003f02:	9902      	ldr	r1, [sp, #8]
 8003f04:	f7fc fa3a 	bl	800037c <__aeabi_fmul>
 8003f08:	4631      	mov	r1, r6
 8003f0a:	4681      	mov	r9, r0
 8003f0c:	4658      	mov	r0, fp
 8003f0e:	f7fc fa35 	bl	800037c <__aeabi_fmul>
 8003f12:	4601      	mov	r1, r0
 8003f14:	4648      	mov	r0, r9
 8003f16:	f7fc f929 	bl	800016c <__addsf3>
 8003f1a:	4682      	mov	sl, r0
 8003f1c:	4601      	mov	r1, r0
 8003f1e:	4640      	mov	r0, r8
 8003f20:	f7fc f924 	bl	800016c <__addsf3>
 8003f24:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8003f28:	f026 060f 	bic.w	r6, r6, #15
 8003f2c:	4630      	mov	r0, r6
 8003f2e:	493f      	ldr	r1, [pc, #252]	@ (800402c <__ieee754_powf+0x4e0>)
 8003f30:	f7fc fa24 	bl	800037c <__aeabi_fmul>
 8003f34:	4641      	mov	r1, r8
 8003f36:	4681      	mov	r9, r0
 8003f38:	4630      	mov	r0, r6
 8003f3a:	f7fc f915 	bl	8000168 <__aeabi_fsub>
 8003f3e:	4601      	mov	r1, r0
 8003f40:	4650      	mov	r0, sl
 8003f42:	f7fc f911 	bl	8000168 <__aeabi_fsub>
 8003f46:	493a      	ldr	r1, [pc, #232]	@ (8004030 <__ieee754_powf+0x4e4>)
 8003f48:	f7fc fa18 	bl	800037c <__aeabi_fmul>
 8003f4c:	4939      	ldr	r1, [pc, #228]	@ (8004034 <__ieee754_powf+0x4e8>)
 8003f4e:	4680      	mov	r8, r0
 8003f50:	4630      	mov	r0, r6
 8003f52:	f7fc fa13 	bl	800037c <__aeabi_fmul>
 8003f56:	4601      	mov	r1, r0
 8003f58:	4640      	mov	r0, r8
 8003f5a:	f7fc f907 	bl	800016c <__addsf3>
 8003f5e:	4b36      	ldr	r3, [pc, #216]	@ (8004038 <__ieee754_powf+0x4ec>)
 8003f60:	9a01      	ldr	r2, [sp, #4]
 8003f62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f66:	f7fc f901 	bl	800016c <__addsf3>
 8003f6a:	9a05      	ldr	r2, [sp, #20]
 8003f6c:	4606      	mov	r6, r0
 8003f6e:	4610      	mov	r0, r2
 8003f70:	f7fc f9b0 	bl	80002d4 <__aeabi_i2f>
 8003f74:	4680      	mov	r8, r0
 8003f76:	4b31      	ldr	r3, [pc, #196]	@ (800403c <__ieee754_powf+0x4f0>)
 8003f78:	9a01      	ldr	r2, [sp, #4]
 8003f7a:	4631      	mov	r1, r6
 8003f7c:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8003f80:	4648      	mov	r0, r9
 8003f82:	f7fc f8f3 	bl	800016c <__addsf3>
 8003f86:	4651      	mov	r1, sl
 8003f88:	f7fc f8f0 	bl	800016c <__addsf3>
 8003f8c:	4641      	mov	r1, r8
 8003f8e:	f7fc f8ed 	bl	800016c <__addsf3>
 8003f92:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8003f96:	f02b 0b0f 	bic.w	fp, fp, #15
 8003f9a:	4641      	mov	r1, r8
 8003f9c:	4658      	mov	r0, fp
 8003f9e:	f7fc f8e3 	bl	8000168 <__aeabi_fsub>
 8003fa2:	4651      	mov	r1, sl
 8003fa4:	f7fc f8e0 	bl	8000168 <__aeabi_fsub>
 8003fa8:	4649      	mov	r1, r9
 8003faa:	e6a6      	b.n	8003cfa <__ieee754_powf+0x1ae>
 8003fac:	2200      	movs	r2, #0
 8003fae:	e6fa      	b.n	8003da6 <__ieee754_powf+0x25a>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e70b      	b.n	8003dcc <__ieee754_powf+0x280>
 8003fb4:	d148      	bne.n	8004048 <__ieee754_powf+0x4fc>
 8003fb6:	4922      	ldr	r1, [pc, #136]	@ (8004040 <__ieee754_powf+0x4f4>)
 8003fb8:	4630      	mov	r0, r6
 8003fba:	f7fc f8d7 	bl	800016c <__addsf3>
 8003fbe:	4639      	mov	r1, r7
 8003fc0:	4681      	mov	r9, r0
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	f7fc f8d0 	bl	8000168 <__aeabi_fsub>
 8003fc8:	4601      	mov	r1, r0
 8003fca:	4648      	mov	r0, r9
 8003fcc:	f7fc fb92 	bl	80006f4 <__aeabi_fcmpgt>
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	f47f aec7 	bne.w	8003d64 <__ieee754_powf+0x218>
 8003fd6:	2386      	movs	r3, #134	@ 0x86
 8003fd8:	e03b      	b.n	8004052 <__ieee754_powf+0x506>
 8003fda:	4a1a      	ldr	r2, [pc, #104]	@ (8004044 <__ieee754_powf+0x4f8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d907      	bls.n	8003ff0 <__ieee754_powf+0x4a4>
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	f7fc fb68 	bl	80006b8 <__aeabi_fcmplt>
 8003fe8:	3800      	subs	r0, #0
 8003fea:	bf18      	it	ne
 8003fec:	2001      	movne	r0, #1
 8003fee:	e645      	b.n	8003c7c <__ieee754_powf+0x130>
 8003ff0:	d12a      	bne.n	8004048 <__ieee754_powf+0x4fc>
 8003ff2:	4639      	mov	r1, r7
 8003ff4:	f7fc f8b8 	bl	8000168 <__aeabi_fsub>
 8003ff8:	4631      	mov	r1, r6
 8003ffa:	f7fc fb71 	bl	80006e0 <__aeabi_fcmpge>
 8003ffe:	2800      	cmp	r0, #0
 8004000:	d0e9      	beq.n	8003fd6 <__ieee754_powf+0x48a>
 8004002:	e7ed      	b.n	8003fe0 <__ieee754_powf+0x494>
 8004004:	001cc471 	.word	0x001cc471
 8004008:	005db3d6 	.word	0x005db3d6
 800400c:	08004bd8 	.word	0x08004bd8
 8004010:	3e53f142 	.word	0x3e53f142
 8004014:	3e6c3255 	.word	0x3e6c3255
 8004018:	3e8ba305 	.word	0x3e8ba305
 800401c:	3eaaaaab 	.word	0x3eaaaaab
 8004020:	3edb6db7 	.word	0x3edb6db7
 8004024:	3f19999a 	.word	0x3f19999a
 8004028:	40400000 	.word	0x40400000
 800402c:	3f763800 	.word	0x3f763800
 8004030:	3f76384f 	.word	0x3f76384f
 8004034:	369dc3a0 	.word	0x369dc3a0
 8004038:	08004bc8 	.word	0x08004bc8
 800403c:	08004bd0 	.word	0x08004bd0
 8004040:	3338aa3c 	.word	0x3338aa3c
 8004044:	43160000 	.word	0x43160000
 8004048:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800404c:	f240 809b 	bls.w	8004186 <__ieee754_powf+0x63a>
 8004050:	15db      	asrs	r3, r3, #23
 8004052:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 8004056:	3b7e      	subs	r3, #126	@ 0x7e
 8004058:	411c      	asrs	r4, r3
 800405a:	4444      	add	r4, r8
 800405c:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8004060:	4961      	ldr	r1, [pc, #388]	@ (80041e8 <__ieee754_powf+0x69c>)
 8004062:	3b7f      	subs	r3, #127	@ 0x7f
 8004064:	4119      	asrs	r1, r3
 8004066:	4021      	ands	r1, r4
 8004068:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800406c:	f1c3 0317 	rsb	r3, r3, #23
 8004070:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 8004074:	4638      	mov	r0, r7
 8004076:	411c      	asrs	r4, r3
 8004078:	f1b8 0f00 	cmp.w	r8, #0
 800407c:	bfb8      	it	lt
 800407e:	4264      	neglt	r4, r4
 8004080:	f7fc f872 	bl	8000168 <__aeabi_fsub>
 8004084:	4607      	mov	r7, r0
 8004086:	4631      	mov	r1, r6
 8004088:	4638      	mov	r0, r7
 800408a:	f7fc f86f 	bl	800016c <__addsf3>
 800408e:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 8004092:	f028 080f 	bic.w	r8, r8, #15
 8004096:	4640      	mov	r0, r8
 8004098:	4954      	ldr	r1, [pc, #336]	@ (80041ec <__ieee754_powf+0x6a0>)
 800409a:	f7fc f96f 	bl	800037c <__aeabi_fmul>
 800409e:	4639      	mov	r1, r7
 80040a0:	4681      	mov	r9, r0
 80040a2:	4640      	mov	r0, r8
 80040a4:	f7fc f860 	bl	8000168 <__aeabi_fsub>
 80040a8:	4601      	mov	r1, r0
 80040aa:	4630      	mov	r0, r6
 80040ac:	f7fc f85c 	bl	8000168 <__aeabi_fsub>
 80040b0:	494f      	ldr	r1, [pc, #316]	@ (80041f0 <__ieee754_powf+0x6a4>)
 80040b2:	f7fc f963 	bl	800037c <__aeabi_fmul>
 80040b6:	494f      	ldr	r1, [pc, #316]	@ (80041f4 <__ieee754_powf+0x6a8>)
 80040b8:	4606      	mov	r6, r0
 80040ba:	4640      	mov	r0, r8
 80040bc:	f7fc f95e 	bl	800037c <__aeabi_fmul>
 80040c0:	4601      	mov	r1, r0
 80040c2:	4630      	mov	r0, r6
 80040c4:	f7fc f852 	bl	800016c <__addsf3>
 80040c8:	4607      	mov	r7, r0
 80040ca:	4601      	mov	r1, r0
 80040cc:	4648      	mov	r0, r9
 80040ce:	f7fc f84d 	bl	800016c <__addsf3>
 80040d2:	4649      	mov	r1, r9
 80040d4:	4606      	mov	r6, r0
 80040d6:	f7fc f847 	bl	8000168 <__aeabi_fsub>
 80040da:	4601      	mov	r1, r0
 80040dc:	4638      	mov	r0, r7
 80040de:	f7fc f843 	bl	8000168 <__aeabi_fsub>
 80040e2:	4631      	mov	r1, r6
 80040e4:	4680      	mov	r8, r0
 80040e6:	4630      	mov	r0, r6
 80040e8:	f7fc f948 	bl	800037c <__aeabi_fmul>
 80040ec:	4607      	mov	r7, r0
 80040ee:	4942      	ldr	r1, [pc, #264]	@ (80041f8 <__ieee754_powf+0x6ac>)
 80040f0:	f7fc f944 	bl	800037c <__aeabi_fmul>
 80040f4:	4941      	ldr	r1, [pc, #260]	@ (80041fc <__ieee754_powf+0x6b0>)
 80040f6:	f7fc f837 	bl	8000168 <__aeabi_fsub>
 80040fa:	4639      	mov	r1, r7
 80040fc:	f7fc f93e 	bl	800037c <__aeabi_fmul>
 8004100:	493f      	ldr	r1, [pc, #252]	@ (8004200 <__ieee754_powf+0x6b4>)
 8004102:	f7fc f833 	bl	800016c <__addsf3>
 8004106:	4639      	mov	r1, r7
 8004108:	f7fc f938 	bl	800037c <__aeabi_fmul>
 800410c:	493d      	ldr	r1, [pc, #244]	@ (8004204 <__ieee754_powf+0x6b8>)
 800410e:	f7fc f82b 	bl	8000168 <__aeabi_fsub>
 8004112:	4639      	mov	r1, r7
 8004114:	f7fc f932 	bl	800037c <__aeabi_fmul>
 8004118:	493b      	ldr	r1, [pc, #236]	@ (8004208 <__ieee754_powf+0x6bc>)
 800411a:	f7fc f827 	bl	800016c <__addsf3>
 800411e:	4639      	mov	r1, r7
 8004120:	f7fc f92c 	bl	800037c <__aeabi_fmul>
 8004124:	4601      	mov	r1, r0
 8004126:	4630      	mov	r0, r6
 8004128:	f7fc f81e 	bl	8000168 <__aeabi_fsub>
 800412c:	4607      	mov	r7, r0
 800412e:	4601      	mov	r1, r0
 8004130:	4630      	mov	r0, r6
 8004132:	f7fc f923 	bl	800037c <__aeabi_fmul>
 8004136:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800413a:	4681      	mov	r9, r0
 800413c:	4638      	mov	r0, r7
 800413e:	f7fc f813 	bl	8000168 <__aeabi_fsub>
 8004142:	4601      	mov	r1, r0
 8004144:	4648      	mov	r0, r9
 8004146:	f7fc f9cd 	bl	80004e4 <__aeabi_fdiv>
 800414a:	4641      	mov	r1, r8
 800414c:	4607      	mov	r7, r0
 800414e:	4630      	mov	r0, r6
 8004150:	f7fc f914 	bl	800037c <__aeabi_fmul>
 8004154:	4641      	mov	r1, r8
 8004156:	f7fc f809 	bl	800016c <__addsf3>
 800415a:	4601      	mov	r1, r0
 800415c:	4638      	mov	r0, r7
 800415e:	f7fc f803 	bl	8000168 <__aeabi_fsub>
 8004162:	4631      	mov	r1, r6
 8004164:	f7fc f800 	bl	8000168 <__aeabi_fsub>
 8004168:	4601      	mov	r1, r0
 800416a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800416e:	f7fb fffb 	bl	8000168 <__aeabi_fsub>
 8004172:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8004176:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800417a:	da06      	bge.n	800418a <__ieee754_powf+0x63e>
 800417c:	4621      	mov	r1, r4
 800417e:	f000 f9af 	bl	80044e0 <scalbnf>
 8004182:	4629      	mov	r1, r5
 8004184:	e549      	b.n	8003c1a <__ieee754_powf+0xce>
 8004186:	2400      	movs	r4, #0
 8004188:	e77d      	b.n	8004086 <__ieee754_powf+0x53a>
 800418a:	4618      	mov	r0, r3
 800418c:	e7f9      	b.n	8004182 <__ieee754_powf+0x636>
 800418e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004192:	e536      	b.n	8003c02 <__ieee754_powf+0xb6>
 8004194:	4639      	mov	r1, r7
 8004196:	e534      	b.n	8003c02 <__ieee754_powf+0xb6>
 8004198:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800419c:	f43f ad23 	beq.w	8003be6 <__ieee754_powf+0x9a>
 80041a0:	2502      	movs	r5, #2
 80041a2:	4648      	mov	r0, r9
 80041a4:	f000 f998 	bl	80044d8 <fabsf>
 80041a8:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80041ac:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80041b0:	46c2      	mov	sl, r8
 80041b2:	4601      	mov	r1, r0
 80041b4:	d003      	beq.n	80041be <__ieee754_powf+0x672>
 80041b6:	f1b8 0f00 	cmp.w	r8, #0
 80041ba:	f47f ad43 	bne.w	8003c44 <__ieee754_powf+0xf8>
 80041be:	2c00      	cmp	r4, #0
 80041c0:	da04      	bge.n	80041cc <__ieee754_powf+0x680>
 80041c2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80041c6:	f7fc f98d 	bl	80004e4 <__aeabi_fdiv>
 80041ca:	4601      	mov	r1, r0
 80041cc:	2e00      	cmp	r6, #0
 80041ce:	f6bf ad18 	bge.w	8003c02 <__ieee754_powf+0xb6>
 80041d2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80041d6:	ea58 0805 	orrs.w	r8, r8, r5
 80041da:	f47f ad2e 	bne.w	8003c3a <__ieee754_powf+0xee>
 80041de:	4608      	mov	r0, r1
 80041e0:	f7fb ffc2 	bl	8000168 <__aeabi_fsub>
 80041e4:	4601      	mov	r1, r0
 80041e6:	e4f8      	b.n	8003bda <__ieee754_powf+0x8e>
 80041e8:	ff800000 	.word	0xff800000
 80041ec:	3f317200 	.word	0x3f317200
 80041f0:	3f317218 	.word	0x3f317218
 80041f4:	35bfbe8c 	.word	0x35bfbe8c
 80041f8:	3331bb4c 	.word	0x3331bb4c
 80041fc:	35ddea0e 	.word	0x35ddea0e
 8004200:	388ab355 	.word	0x388ab355
 8004204:	3b360b61 	.word	0x3b360b61
 8004208:	3e2aaaab 	.word	0x3e2aaaab

0800420c <__ieee754_rem_pio2f>:
 800420c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004210:	4aa4      	ldr	r2, [pc, #656]	@ (80044a4 <__ieee754_rem_pio2f+0x298>)
 8004212:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8004216:	4590      	cmp	r8, r2
 8004218:	460c      	mov	r4, r1
 800421a:	4682      	mov	sl, r0
 800421c:	b087      	sub	sp, #28
 800421e:	d804      	bhi.n	800422a <__ieee754_rem_pio2f+0x1e>
 8004220:	2300      	movs	r3, #0
 8004222:	6008      	str	r0, [r1, #0]
 8004224:	604b      	str	r3, [r1, #4]
 8004226:	2500      	movs	r5, #0
 8004228:	e01d      	b.n	8004266 <__ieee754_rem_pio2f+0x5a>
 800422a:	4a9f      	ldr	r2, [pc, #636]	@ (80044a8 <__ieee754_rem_pio2f+0x29c>)
 800422c:	4590      	cmp	r8, r2
 800422e:	d84f      	bhi.n	80042d0 <__ieee754_rem_pio2f+0xc4>
 8004230:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8004234:	2800      	cmp	r0, #0
 8004236:	499d      	ldr	r1, [pc, #628]	@ (80044ac <__ieee754_rem_pio2f+0x2a0>)
 8004238:	4f9d      	ldr	r7, [pc, #628]	@ (80044b0 <__ieee754_rem_pio2f+0x2a4>)
 800423a:	f025 050f 	bic.w	r5, r5, #15
 800423e:	dd24      	ble.n	800428a <__ieee754_rem_pio2f+0x7e>
 8004240:	f7fb ff92 	bl	8000168 <__aeabi_fsub>
 8004244:	42bd      	cmp	r5, r7
 8004246:	4606      	mov	r6, r0
 8004248:	d011      	beq.n	800426e <__ieee754_rem_pio2f+0x62>
 800424a:	499a      	ldr	r1, [pc, #616]	@ (80044b4 <__ieee754_rem_pio2f+0x2a8>)
 800424c:	f7fb ff8c 	bl	8000168 <__aeabi_fsub>
 8004250:	4601      	mov	r1, r0
 8004252:	4605      	mov	r5, r0
 8004254:	4630      	mov	r0, r6
 8004256:	f7fb ff87 	bl	8000168 <__aeabi_fsub>
 800425a:	4996      	ldr	r1, [pc, #600]	@ (80044b4 <__ieee754_rem_pio2f+0x2a8>)
 800425c:	f7fb ff84 	bl	8000168 <__aeabi_fsub>
 8004260:	6025      	str	r5, [r4, #0]
 8004262:	2501      	movs	r5, #1
 8004264:	6060      	str	r0, [r4, #4]
 8004266:	4628      	mov	r0, r5
 8004268:	b007      	add	sp, #28
 800426a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800426e:	4992      	ldr	r1, [pc, #584]	@ (80044b8 <__ieee754_rem_pio2f+0x2ac>)
 8004270:	f7fb ff7a 	bl	8000168 <__aeabi_fsub>
 8004274:	4991      	ldr	r1, [pc, #580]	@ (80044bc <__ieee754_rem_pio2f+0x2b0>)
 8004276:	4606      	mov	r6, r0
 8004278:	f7fb ff76 	bl	8000168 <__aeabi_fsub>
 800427c:	4601      	mov	r1, r0
 800427e:	4605      	mov	r5, r0
 8004280:	4630      	mov	r0, r6
 8004282:	f7fb ff71 	bl	8000168 <__aeabi_fsub>
 8004286:	498d      	ldr	r1, [pc, #564]	@ (80044bc <__ieee754_rem_pio2f+0x2b0>)
 8004288:	e7e8      	b.n	800425c <__ieee754_rem_pio2f+0x50>
 800428a:	f7fb ff6f 	bl	800016c <__addsf3>
 800428e:	42bd      	cmp	r5, r7
 8004290:	4606      	mov	r6, r0
 8004292:	d00f      	beq.n	80042b4 <__ieee754_rem_pio2f+0xa8>
 8004294:	4987      	ldr	r1, [pc, #540]	@ (80044b4 <__ieee754_rem_pio2f+0x2a8>)
 8004296:	f7fb ff69 	bl	800016c <__addsf3>
 800429a:	4601      	mov	r1, r0
 800429c:	4605      	mov	r5, r0
 800429e:	4630      	mov	r0, r6
 80042a0:	f7fb ff62 	bl	8000168 <__aeabi_fsub>
 80042a4:	4983      	ldr	r1, [pc, #524]	@ (80044b4 <__ieee754_rem_pio2f+0x2a8>)
 80042a6:	f7fb ff61 	bl	800016c <__addsf3>
 80042aa:	6025      	str	r5, [r4, #0]
 80042ac:	6060      	str	r0, [r4, #4]
 80042ae:	f04f 35ff 	mov.w	r5, #4294967295
 80042b2:	e7d8      	b.n	8004266 <__ieee754_rem_pio2f+0x5a>
 80042b4:	4980      	ldr	r1, [pc, #512]	@ (80044b8 <__ieee754_rem_pio2f+0x2ac>)
 80042b6:	f7fb ff59 	bl	800016c <__addsf3>
 80042ba:	4980      	ldr	r1, [pc, #512]	@ (80044bc <__ieee754_rem_pio2f+0x2b0>)
 80042bc:	4606      	mov	r6, r0
 80042be:	f7fb ff55 	bl	800016c <__addsf3>
 80042c2:	4601      	mov	r1, r0
 80042c4:	4605      	mov	r5, r0
 80042c6:	4630      	mov	r0, r6
 80042c8:	f7fb ff4e 	bl	8000168 <__aeabi_fsub>
 80042cc:	497b      	ldr	r1, [pc, #492]	@ (80044bc <__ieee754_rem_pio2f+0x2b0>)
 80042ce:	e7ea      	b.n	80042a6 <__ieee754_rem_pio2f+0x9a>
 80042d0:	4a7b      	ldr	r2, [pc, #492]	@ (80044c0 <__ieee754_rem_pio2f+0x2b4>)
 80042d2:	4590      	cmp	r8, r2
 80042d4:	f200 8095 	bhi.w	8004402 <__ieee754_rem_pio2f+0x1f6>
 80042d8:	f000 f8fe 	bl	80044d8 <fabsf>
 80042dc:	4979      	ldr	r1, [pc, #484]	@ (80044c4 <__ieee754_rem_pio2f+0x2b8>)
 80042de:	4606      	mov	r6, r0
 80042e0:	f7fc f84c 	bl	800037c <__aeabi_fmul>
 80042e4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80042e8:	f7fb ff40 	bl	800016c <__addsf3>
 80042ec:	f7fc fa22 	bl	8000734 <__aeabi_f2iz>
 80042f0:	4605      	mov	r5, r0
 80042f2:	f7fb ffef 	bl	80002d4 <__aeabi_i2f>
 80042f6:	496d      	ldr	r1, [pc, #436]	@ (80044ac <__ieee754_rem_pio2f+0x2a0>)
 80042f8:	4681      	mov	r9, r0
 80042fa:	f7fc f83f 	bl	800037c <__aeabi_fmul>
 80042fe:	4601      	mov	r1, r0
 8004300:	4630      	mov	r0, r6
 8004302:	f7fb ff31 	bl	8000168 <__aeabi_fsub>
 8004306:	496b      	ldr	r1, [pc, #428]	@ (80044b4 <__ieee754_rem_pio2f+0x2a8>)
 8004308:	4607      	mov	r7, r0
 800430a:	4648      	mov	r0, r9
 800430c:	f7fc f836 	bl	800037c <__aeabi_fmul>
 8004310:	2d1f      	cmp	r5, #31
 8004312:	4606      	mov	r6, r0
 8004314:	dc0e      	bgt.n	8004334 <__ieee754_rem_pio2f+0x128>
 8004316:	4a6c      	ldr	r2, [pc, #432]	@ (80044c8 <__ieee754_rem_pio2f+0x2bc>)
 8004318:	1e69      	subs	r1, r5, #1
 800431a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800431e:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 8004322:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004326:	4293      	cmp	r3, r2
 8004328:	d004      	beq.n	8004334 <__ieee754_rem_pio2f+0x128>
 800432a:	4631      	mov	r1, r6
 800432c:	4638      	mov	r0, r7
 800432e:	f7fb ff1b 	bl	8000168 <__aeabi_fsub>
 8004332:	e00b      	b.n	800434c <__ieee754_rem_pio2f+0x140>
 8004334:	4631      	mov	r1, r6
 8004336:	4638      	mov	r0, r7
 8004338:	f7fb ff16 	bl	8000168 <__aeabi_fsub>
 800433c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8004340:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 8004344:	2b08      	cmp	r3, #8
 8004346:	ea4f 5be8 	mov.w	fp, r8, asr #23
 800434a:	dc01      	bgt.n	8004350 <__ieee754_rem_pio2f+0x144>
 800434c:	6020      	str	r0, [r4, #0]
 800434e:	e026      	b.n	800439e <__ieee754_rem_pio2f+0x192>
 8004350:	4959      	ldr	r1, [pc, #356]	@ (80044b8 <__ieee754_rem_pio2f+0x2ac>)
 8004352:	4648      	mov	r0, r9
 8004354:	f7fc f812 	bl	800037c <__aeabi_fmul>
 8004358:	4606      	mov	r6, r0
 800435a:	4601      	mov	r1, r0
 800435c:	4638      	mov	r0, r7
 800435e:	f7fb ff03 	bl	8000168 <__aeabi_fsub>
 8004362:	4601      	mov	r1, r0
 8004364:	4680      	mov	r8, r0
 8004366:	4638      	mov	r0, r7
 8004368:	f7fb fefe 	bl	8000168 <__aeabi_fsub>
 800436c:	4631      	mov	r1, r6
 800436e:	f7fb fefb 	bl	8000168 <__aeabi_fsub>
 8004372:	4606      	mov	r6, r0
 8004374:	4951      	ldr	r1, [pc, #324]	@ (80044bc <__ieee754_rem_pio2f+0x2b0>)
 8004376:	4648      	mov	r0, r9
 8004378:	f7fc f800 	bl	800037c <__aeabi_fmul>
 800437c:	4631      	mov	r1, r6
 800437e:	f7fb fef3 	bl	8000168 <__aeabi_fsub>
 8004382:	4601      	mov	r1, r0
 8004384:	4606      	mov	r6, r0
 8004386:	4640      	mov	r0, r8
 8004388:	f7fb feee 	bl	8000168 <__aeabi_fsub>
 800438c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8004390:	ebab 0b03 	sub.w	fp, fp, r3
 8004394:	f1bb 0f19 	cmp.w	fp, #25
 8004398:	dc18      	bgt.n	80043cc <__ieee754_rem_pio2f+0x1c0>
 800439a:	4647      	mov	r7, r8
 800439c:	6020      	str	r0, [r4, #0]
 800439e:	f8d4 8000 	ldr.w	r8, [r4]
 80043a2:	4638      	mov	r0, r7
 80043a4:	4641      	mov	r1, r8
 80043a6:	f7fb fedf 	bl	8000168 <__aeabi_fsub>
 80043aa:	4631      	mov	r1, r6
 80043ac:	f7fb fedc 	bl	8000168 <__aeabi_fsub>
 80043b0:	f1ba 0f00 	cmp.w	sl, #0
 80043b4:	6060      	str	r0, [r4, #4]
 80043b6:	f6bf af56 	bge.w	8004266 <__ieee754_rem_pio2f+0x5a>
 80043ba:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 80043be:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80043c2:	f8c4 8000 	str.w	r8, [r4]
 80043c6:	6060      	str	r0, [r4, #4]
 80043c8:	426d      	negs	r5, r5
 80043ca:	e74c      	b.n	8004266 <__ieee754_rem_pio2f+0x5a>
 80043cc:	493f      	ldr	r1, [pc, #252]	@ (80044cc <__ieee754_rem_pio2f+0x2c0>)
 80043ce:	4648      	mov	r0, r9
 80043d0:	f7fb ffd4 	bl	800037c <__aeabi_fmul>
 80043d4:	4606      	mov	r6, r0
 80043d6:	4601      	mov	r1, r0
 80043d8:	4640      	mov	r0, r8
 80043da:	f7fb fec5 	bl	8000168 <__aeabi_fsub>
 80043de:	4601      	mov	r1, r0
 80043e0:	4607      	mov	r7, r0
 80043e2:	4640      	mov	r0, r8
 80043e4:	f7fb fec0 	bl	8000168 <__aeabi_fsub>
 80043e8:	4631      	mov	r1, r6
 80043ea:	f7fb febd 	bl	8000168 <__aeabi_fsub>
 80043ee:	4606      	mov	r6, r0
 80043f0:	4937      	ldr	r1, [pc, #220]	@ (80044d0 <__ieee754_rem_pio2f+0x2c4>)
 80043f2:	4648      	mov	r0, r9
 80043f4:	f7fb ffc2 	bl	800037c <__aeabi_fmul>
 80043f8:	4631      	mov	r1, r6
 80043fa:	f7fb feb5 	bl	8000168 <__aeabi_fsub>
 80043fe:	4606      	mov	r6, r0
 8004400:	e793      	b.n	800432a <__ieee754_rem_pio2f+0x11e>
 8004402:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8004406:	d305      	bcc.n	8004414 <__ieee754_rem_pio2f+0x208>
 8004408:	4601      	mov	r1, r0
 800440a:	f7fb fead 	bl	8000168 <__aeabi_fsub>
 800440e:	6060      	str	r0, [r4, #4]
 8004410:	6020      	str	r0, [r4, #0]
 8004412:	e708      	b.n	8004226 <__ieee754_rem_pio2f+0x1a>
 8004414:	ea4f 56e8 	mov.w	r6, r8, asr #23
 8004418:	3e86      	subs	r6, #134	@ 0x86
 800441a:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800441e:	4640      	mov	r0, r8
 8004420:	f7fc f988 	bl	8000734 <__aeabi_f2iz>
 8004424:	f7fb ff56 	bl	80002d4 <__aeabi_i2f>
 8004428:	4601      	mov	r1, r0
 800442a:	9003      	str	r0, [sp, #12]
 800442c:	4640      	mov	r0, r8
 800442e:	f7fb fe9b 	bl	8000168 <__aeabi_fsub>
 8004432:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8004436:	f7fb ffa1 	bl	800037c <__aeabi_fmul>
 800443a:	4607      	mov	r7, r0
 800443c:	f7fc f97a 	bl	8000734 <__aeabi_f2iz>
 8004440:	f7fb ff48 	bl	80002d4 <__aeabi_i2f>
 8004444:	4601      	mov	r1, r0
 8004446:	9004      	str	r0, [sp, #16]
 8004448:	4605      	mov	r5, r0
 800444a:	4638      	mov	r0, r7
 800444c:	f7fb fe8c 	bl	8000168 <__aeabi_fsub>
 8004450:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8004454:	f7fb ff92 	bl	800037c <__aeabi_fmul>
 8004458:	2100      	movs	r1, #0
 800445a:	9005      	str	r0, [sp, #20]
 800445c:	f7fc f922 	bl	80006a4 <__aeabi_fcmpeq>
 8004460:	b1f0      	cbz	r0, 80044a0 <__ieee754_rem_pio2f+0x294>
 8004462:	2100      	movs	r1, #0
 8004464:	4628      	mov	r0, r5
 8004466:	f7fc f91d 	bl	80006a4 <__aeabi_fcmpeq>
 800446a:	2800      	cmp	r0, #0
 800446c:	bf14      	ite	ne
 800446e:	2301      	movne	r3, #1
 8004470:	2302      	moveq	r3, #2
 8004472:	4a18      	ldr	r2, [pc, #96]	@ (80044d4 <__ieee754_rem_pio2f+0x2c8>)
 8004474:	4621      	mov	r1, r4
 8004476:	9201      	str	r2, [sp, #4]
 8004478:	2202      	movs	r2, #2
 800447a:	a803      	add	r0, sp, #12
 800447c:	9200      	str	r2, [sp, #0]
 800447e:	4632      	mov	r2, r6
 8004480:	f000 f898 	bl	80045b4 <__kernel_rem_pio2f>
 8004484:	f1ba 0f00 	cmp.w	sl, #0
 8004488:	4605      	mov	r5, r0
 800448a:	f6bf aeec 	bge.w	8004266 <__ieee754_rem_pio2f+0x5a>
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004494:	6023      	str	r3, [r4, #0]
 8004496:	6863      	ldr	r3, [r4, #4]
 8004498:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800449c:	6063      	str	r3, [r4, #4]
 800449e:	e793      	b.n	80043c8 <__ieee754_rem_pio2f+0x1bc>
 80044a0:	2303      	movs	r3, #3
 80044a2:	e7e6      	b.n	8004472 <__ieee754_rem_pio2f+0x266>
 80044a4:	3f490fd8 	.word	0x3f490fd8
 80044a8:	4016cbe3 	.word	0x4016cbe3
 80044ac:	3fc90f80 	.word	0x3fc90f80
 80044b0:	3fc90fd0 	.word	0x3fc90fd0
 80044b4:	37354443 	.word	0x37354443
 80044b8:	37354400 	.word	0x37354400
 80044bc:	2e85a308 	.word	0x2e85a308
 80044c0:	43490f80 	.word	0x43490f80
 80044c4:	3f22f984 	.word	0x3f22f984
 80044c8:	08004be0 	.word	0x08004be0
 80044cc:	2e85a300 	.word	0x2e85a300
 80044d0:	248d3132 	.word	0x248d3132
 80044d4:	08004c60 	.word	0x08004c60

080044d8 <fabsf>:
 80044d8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80044dc:	4770      	bx	lr
	...

080044e0 <scalbnf>:
 80044e0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80044e4:	b538      	push	{r3, r4, r5, lr}
 80044e6:	4603      	mov	r3, r0
 80044e8:	460d      	mov	r5, r1
 80044ea:	4604      	mov	r4, r0
 80044ec:	d02e      	beq.n	800454c <scalbnf+0x6c>
 80044ee:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80044f2:	d304      	bcc.n	80044fe <scalbnf+0x1e>
 80044f4:	4601      	mov	r1, r0
 80044f6:	f7fb fe39 	bl	800016c <__addsf3>
 80044fa:	4603      	mov	r3, r0
 80044fc:	e026      	b.n	800454c <scalbnf+0x6c>
 80044fe:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8004502:	d118      	bne.n	8004536 <scalbnf+0x56>
 8004504:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8004508:	f7fb ff38 	bl	800037c <__aeabi_fmul>
 800450c:	4a17      	ldr	r2, [pc, #92]	@ (800456c <scalbnf+0x8c>)
 800450e:	4603      	mov	r3, r0
 8004510:	4295      	cmp	r5, r2
 8004512:	db0c      	blt.n	800452e <scalbnf+0x4e>
 8004514:	4604      	mov	r4, r0
 8004516:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800451a:	3a19      	subs	r2, #25
 800451c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004520:	428d      	cmp	r5, r1
 8004522:	dd0a      	ble.n	800453a <scalbnf+0x5a>
 8004524:	4912      	ldr	r1, [pc, #72]	@ (8004570 <scalbnf+0x90>)
 8004526:	4618      	mov	r0, r3
 8004528:	f361 001e 	bfi	r0, r1, #0, #31
 800452c:	e000      	b.n	8004530 <scalbnf+0x50>
 800452e:	4911      	ldr	r1, [pc, #68]	@ (8004574 <scalbnf+0x94>)
 8004530:	f7fb ff24 	bl	800037c <__aeabi_fmul>
 8004534:	e7e1      	b.n	80044fa <scalbnf+0x1a>
 8004536:	0dd2      	lsrs	r2, r2, #23
 8004538:	e7f0      	b.n	800451c <scalbnf+0x3c>
 800453a:	1951      	adds	r1, r2, r5
 800453c:	29fe      	cmp	r1, #254	@ 0xfe
 800453e:	dcf1      	bgt.n	8004524 <scalbnf+0x44>
 8004540:	2900      	cmp	r1, #0
 8004542:	dd05      	ble.n	8004550 <scalbnf+0x70>
 8004544:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8004548:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800454c:	4618      	mov	r0, r3
 800454e:	bd38      	pop	{r3, r4, r5, pc}
 8004550:	f111 0f16 	cmn.w	r1, #22
 8004554:	da01      	bge.n	800455a <scalbnf+0x7a>
 8004556:	4907      	ldr	r1, [pc, #28]	@ (8004574 <scalbnf+0x94>)
 8004558:	e7e5      	b.n	8004526 <scalbnf+0x46>
 800455a:	f101 0019 	add.w	r0, r1, #25
 800455e:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8004562:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8004566:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800456a:	e7e1      	b.n	8004530 <scalbnf+0x50>
 800456c:	ffff3cb0 	.word	0xffff3cb0
 8004570:	7149f2ca 	.word	0x7149f2ca
 8004574:	0da24260 	.word	0x0da24260

08004578 <with_errnof>:
 8004578:	b538      	push	{r3, r4, r5, lr}
 800457a:	4604      	mov	r4, r0
 800457c:	460d      	mov	r5, r1
 800457e:	f7ff f865 	bl	800364c <__errno>
 8004582:	6005      	str	r5, [r0, #0]
 8004584:	4620      	mov	r0, r4
 8004586:	bd38      	pop	{r3, r4, r5, pc}

08004588 <xflowf>:
 8004588:	b508      	push	{r3, lr}
 800458a:	b140      	cbz	r0, 800459e <xflowf+0x16>
 800458c:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8004590:	f7fb fef4 	bl	800037c <__aeabi_fmul>
 8004594:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004598:	2122      	movs	r1, #34	@ 0x22
 800459a:	f7ff bfed 	b.w	8004578 <with_errnof>
 800459e:	4608      	mov	r0, r1
 80045a0:	e7f6      	b.n	8004590 <xflowf+0x8>

080045a2 <__math_uflowf>:
 80045a2:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 80045a6:	f7ff bfef 	b.w	8004588 <xflowf>

080045aa <__math_oflowf>:
 80045aa:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 80045ae:	f7ff bfeb 	b.w	8004588 <xflowf>
	...

080045b4 <__kernel_rem_pio2f>:
 80045b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045b8:	b0db      	sub	sp, #364	@ 0x16c
 80045ba:	9202      	str	r2, [sp, #8]
 80045bc:	9304      	str	r3, [sp, #16]
 80045be:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80045c0:	4bac      	ldr	r3, [pc, #688]	@ (8004874 <__kernel_rem_pio2f+0x2c0>)
 80045c2:	9005      	str	r0, [sp, #20]
 80045c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045c8:	9100      	str	r1, [sp, #0]
 80045ca:	9301      	str	r3, [sp, #4]
 80045cc:	9b04      	ldr	r3, [sp, #16]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	9303      	str	r3, [sp, #12]
 80045d2:	9b02      	ldr	r3, [sp, #8]
 80045d4:	1d1a      	adds	r2, r3, #4
 80045d6:	f2c0 8099 	blt.w	800470c <__kernel_rem_pio2f+0x158>
 80045da:	1edc      	subs	r4, r3, #3
 80045dc:	bf48      	it	mi
 80045de:	1d1c      	addmi	r4, r3, #4
 80045e0:	10e4      	asrs	r4, r4, #3
 80045e2:	2500      	movs	r5, #0
 80045e4:	f04f 0b00 	mov.w	fp, #0
 80045e8:	1c67      	adds	r7, r4, #1
 80045ea:	00fb      	lsls	r3, r7, #3
 80045ec:	9306      	str	r3, [sp, #24]
 80045ee:	9b02      	ldr	r3, [sp, #8]
 80045f0:	9a03      	ldr	r2, [sp, #12]
 80045f2:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 80045f6:	9b01      	ldr	r3, [sp, #4]
 80045f8:	eba4 0802 	sub.w	r8, r4, r2
 80045fc:	eb03 0902 	add.w	r9, r3, r2
 8004600:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8004602:	ae1e      	add	r6, sp, #120	@ 0x78
 8004604:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8004608:	454d      	cmp	r5, r9
 800460a:	f340 8081 	ble.w	8004710 <__kernel_rem_pio2f+0x15c>
 800460e:	9a04      	ldr	r2, [sp, #16]
 8004610:	ab1e      	add	r3, sp, #120	@ 0x78
 8004612:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8004616:	f04f 0900 	mov.w	r9, #0
 800461a:	2300      	movs	r3, #0
 800461c:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8004620:	9a01      	ldr	r2, [sp, #4]
 8004622:	4591      	cmp	r9, r2
 8004624:	f340 809a 	ble.w	800475c <__kernel_rem_pio2f+0x1a8>
 8004628:	4613      	mov	r3, r2
 800462a:	aa0a      	add	r2, sp, #40	@ 0x28
 800462c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004630:	9308      	str	r3, [sp, #32]
 8004632:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8004634:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004638:	9c01      	ldr	r4, [sp, #4]
 800463a:	9307      	str	r3, [sp, #28]
 800463c:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8004640:	4646      	mov	r6, r8
 8004642:	4625      	mov	r5, r4
 8004644:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 8004648:	ab5a      	add	r3, sp, #360	@ 0x168
 800464a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800464e:	f853 bc50 	ldr.w	fp, [r3, #-80]
 8004652:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8004656:	2d00      	cmp	r5, #0
 8004658:	f300 8085 	bgt.w	8004766 <__kernel_rem_pio2f+0x1b2>
 800465c:	4639      	mov	r1, r7
 800465e:	4658      	mov	r0, fp
 8004660:	f7ff ff3e 	bl	80044e0 <scalbnf>
 8004664:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8004668:	4605      	mov	r5, r0
 800466a:	f7fb fe87 	bl	800037c <__aeabi_fmul>
 800466e:	f000 fa3f 	bl	8004af0 <floorf>
 8004672:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8004676:	f7fb fe81 	bl	800037c <__aeabi_fmul>
 800467a:	4601      	mov	r1, r0
 800467c:	4628      	mov	r0, r5
 800467e:	f7fb fd73 	bl	8000168 <__aeabi_fsub>
 8004682:	4605      	mov	r5, r0
 8004684:	f7fc f856 	bl	8000734 <__aeabi_f2iz>
 8004688:	4606      	mov	r6, r0
 800468a:	f7fb fe23 	bl	80002d4 <__aeabi_i2f>
 800468e:	4601      	mov	r1, r0
 8004690:	4628      	mov	r0, r5
 8004692:	f7fb fd69 	bl	8000168 <__aeabi_fsub>
 8004696:	2f00      	cmp	r7, #0
 8004698:	4681      	mov	r9, r0
 800469a:	f340 8081 	ble.w	80047a0 <__kernel_rem_pio2f+0x1ec>
 800469e:	1e62      	subs	r2, r4, #1
 80046a0:	ab0a      	add	r3, sp, #40	@ 0x28
 80046a2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80046a6:	f1c7 0108 	rsb	r1, r7, #8
 80046aa:	fa45 f301 	asr.w	r3, r5, r1
 80046ae:	441e      	add	r6, r3
 80046b0:	408b      	lsls	r3, r1
 80046b2:	1aed      	subs	r5, r5, r3
 80046b4:	ab0a      	add	r3, sp, #40	@ 0x28
 80046b6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80046ba:	f1c7 0307 	rsb	r3, r7, #7
 80046be:	411d      	asrs	r5, r3
 80046c0:	2d00      	cmp	r5, #0
 80046c2:	dd7a      	ble.n	80047ba <__kernel_rem_pio2f+0x206>
 80046c4:	2200      	movs	r2, #0
 80046c6:	4692      	mov	sl, r2
 80046c8:	3601      	adds	r6, #1
 80046ca:	4294      	cmp	r4, r2
 80046cc:	f300 80aa 	bgt.w	8004824 <__kernel_rem_pio2f+0x270>
 80046d0:	2f00      	cmp	r7, #0
 80046d2:	dd05      	ble.n	80046e0 <__kernel_rem_pio2f+0x12c>
 80046d4:	2f01      	cmp	r7, #1
 80046d6:	f000 80b6 	beq.w	8004846 <__kernel_rem_pio2f+0x292>
 80046da:	2f02      	cmp	r7, #2
 80046dc:	f000 80bd 	beq.w	800485a <__kernel_rem_pio2f+0x2a6>
 80046e0:	2d02      	cmp	r5, #2
 80046e2:	d16a      	bne.n	80047ba <__kernel_rem_pio2f+0x206>
 80046e4:	4649      	mov	r1, r9
 80046e6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80046ea:	f7fb fd3d 	bl	8000168 <__aeabi_fsub>
 80046ee:	4681      	mov	r9, r0
 80046f0:	f1ba 0f00 	cmp.w	sl, #0
 80046f4:	d061      	beq.n	80047ba <__kernel_rem_pio2f+0x206>
 80046f6:	4639      	mov	r1, r7
 80046f8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80046fc:	f7ff fef0 	bl	80044e0 <scalbnf>
 8004700:	4601      	mov	r1, r0
 8004702:	4648      	mov	r0, r9
 8004704:	f7fb fd30 	bl	8000168 <__aeabi_fsub>
 8004708:	4681      	mov	r9, r0
 800470a:	e056      	b.n	80047ba <__kernel_rem_pio2f+0x206>
 800470c:	2400      	movs	r4, #0
 800470e:	e768      	b.n	80045e2 <__kernel_rem_pio2f+0x2e>
 8004710:	eb18 0f05 	cmn.w	r8, r5
 8004714:	d407      	bmi.n	8004726 <__kernel_rem_pio2f+0x172>
 8004716:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800471a:	f7fb fddb 	bl	80002d4 <__aeabi_i2f>
 800471e:	f846 0b04 	str.w	r0, [r6], #4
 8004722:	3501      	adds	r5, #1
 8004724:	e770      	b.n	8004608 <__kernel_rem_pio2f+0x54>
 8004726:	4658      	mov	r0, fp
 8004728:	e7f9      	b.n	800471e <__kernel_rem_pio2f+0x16a>
 800472a:	9307      	str	r3, [sp, #28]
 800472c:	9b05      	ldr	r3, [sp, #20]
 800472e:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 8004732:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004736:	f7fb fe21 	bl	800037c <__aeabi_fmul>
 800473a:	4601      	mov	r1, r0
 800473c:	4630      	mov	r0, r6
 800473e:	f7fb fd15 	bl	800016c <__addsf3>
 8004742:	4606      	mov	r6, r0
 8004744:	9b07      	ldr	r3, [sp, #28]
 8004746:	f108 0801 	add.w	r8, r8, #1
 800474a:	9a03      	ldr	r2, [sp, #12]
 800474c:	4590      	cmp	r8, r2
 800474e:	ddec      	ble.n	800472a <__kernel_rem_pio2f+0x176>
 8004750:	f84a 6b04 	str.w	r6, [sl], #4
 8004754:	f109 0901 	add.w	r9, r9, #1
 8004758:	3504      	adds	r5, #4
 800475a:	e761      	b.n	8004620 <__kernel_rem_pio2f+0x6c>
 800475c:	46ab      	mov	fp, r5
 800475e:	461e      	mov	r6, r3
 8004760:	f04f 0800 	mov.w	r8, #0
 8004764:	e7f1      	b.n	800474a <__kernel_rem_pio2f+0x196>
 8004766:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800476a:	4658      	mov	r0, fp
 800476c:	f7fb fe06 	bl	800037c <__aeabi_fmul>
 8004770:	f7fb ffe0 	bl	8000734 <__aeabi_f2iz>
 8004774:	f7fb fdae 	bl	80002d4 <__aeabi_i2f>
 8004778:	4649      	mov	r1, r9
 800477a:	9009      	str	r0, [sp, #36]	@ 0x24
 800477c:	f7fb fdfe 	bl	800037c <__aeabi_fmul>
 8004780:	4601      	mov	r1, r0
 8004782:	4658      	mov	r0, fp
 8004784:	f7fb fcf0 	bl	8000168 <__aeabi_fsub>
 8004788:	f7fb ffd4 	bl	8000734 <__aeabi_f2iz>
 800478c:	3d01      	subs	r5, #1
 800478e:	f846 0b04 	str.w	r0, [r6], #4
 8004792:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 8004796:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004798:	f7fb fce8 	bl	800016c <__addsf3>
 800479c:	4683      	mov	fp, r0
 800479e:	e75a      	b.n	8004656 <__kernel_rem_pio2f+0xa2>
 80047a0:	d105      	bne.n	80047ae <__kernel_rem_pio2f+0x1fa>
 80047a2:	1e63      	subs	r3, r4, #1
 80047a4:	aa0a      	add	r2, sp, #40	@ 0x28
 80047a6:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80047aa:	11ed      	asrs	r5, r5, #7
 80047ac:	e788      	b.n	80046c0 <__kernel_rem_pio2f+0x10c>
 80047ae:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80047b2:	f7fb ff95 	bl	80006e0 <__aeabi_fcmpge>
 80047b6:	4605      	mov	r5, r0
 80047b8:	bb90      	cbnz	r0, 8004820 <__kernel_rem_pio2f+0x26c>
 80047ba:	2100      	movs	r1, #0
 80047bc:	4648      	mov	r0, r9
 80047be:	f7fb ff71 	bl	80006a4 <__aeabi_fcmpeq>
 80047c2:	2800      	cmp	r0, #0
 80047c4:	f000 8090 	beq.w	80048e8 <__kernel_rem_pio2f+0x334>
 80047c8:	2200      	movs	r2, #0
 80047ca:	1e63      	subs	r3, r4, #1
 80047cc:	9901      	ldr	r1, [sp, #4]
 80047ce:	428b      	cmp	r3, r1
 80047d0:	da4a      	bge.n	8004868 <__kernel_rem_pio2f+0x2b4>
 80047d2:	2a00      	cmp	r2, #0
 80047d4:	d076      	beq.n	80048c4 <__kernel_rem_pio2f+0x310>
 80047d6:	3c01      	subs	r4, #1
 80047d8:	ab0a      	add	r3, sp, #40	@ 0x28
 80047da:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80047de:	3f08      	subs	r7, #8
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0f8      	beq.n	80047d6 <__kernel_rem_pio2f+0x222>
 80047e4:	4639      	mov	r1, r7
 80047e6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80047ea:	f7ff fe79 	bl	80044e0 <scalbnf>
 80047ee:	46a2      	mov	sl, r4
 80047f0:	4607      	mov	r7, r0
 80047f2:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 80047f6:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 80047fa:	f1ba 0f00 	cmp.w	sl, #0
 80047fe:	f280 80a1 	bge.w	8004944 <__kernel_rem_pio2f+0x390>
 8004802:	4627      	mov	r7, r4
 8004804:	2200      	movs	r2, #0
 8004806:	2f00      	cmp	r7, #0
 8004808:	f2c0 80cb 	blt.w	80049a2 <__kernel_rem_pio2f+0x3ee>
 800480c:	a946      	add	r1, sp, #280	@ 0x118
 800480e:	4690      	mov	r8, r2
 8004810:	f04f 0a00 	mov.w	sl, #0
 8004814:	4b18      	ldr	r3, [pc, #96]	@ (8004878 <__kernel_rem_pio2f+0x2c4>)
 8004816:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800481a:	eba4 0907 	sub.w	r9, r4, r7
 800481e:	e0b4      	b.n	800498a <__kernel_rem_pio2f+0x3d6>
 8004820:	2502      	movs	r5, #2
 8004822:	e74f      	b.n	80046c4 <__kernel_rem_pio2f+0x110>
 8004824:	f858 3b04 	ldr.w	r3, [r8], #4
 8004828:	f1ba 0f00 	cmp.w	sl, #0
 800482c:	d108      	bne.n	8004840 <__kernel_rem_pio2f+0x28c>
 800482e:	b123      	cbz	r3, 800483a <__kernel_rem_pio2f+0x286>
 8004830:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8004834:	f848 3c04 	str.w	r3, [r8, #-4]
 8004838:	2301      	movs	r3, #1
 800483a:	469a      	mov	sl, r3
 800483c:	3201      	adds	r2, #1
 800483e:	e744      	b.n	80046ca <__kernel_rem_pio2f+0x116>
 8004840:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8004844:	e7f6      	b.n	8004834 <__kernel_rem_pio2f+0x280>
 8004846:	1e62      	subs	r2, r4, #1
 8004848:	ab0a      	add	r3, sp, #40	@ 0x28
 800484a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800484e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004852:	a90a      	add	r1, sp, #40	@ 0x28
 8004854:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004858:	e742      	b.n	80046e0 <__kernel_rem_pio2f+0x12c>
 800485a:	1e62      	subs	r2, r4, #1
 800485c:	ab0a      	add	r3, sp, #40	@ 0x28
 800485e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004862:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004866:	e7f4      	b.n	8004852 <__kernel_rem_pio2f+0x29e>
 8004868:	a90a      	add	r1, sp, #40	@ 0x28
 800486a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800486e:	3b01      	subs	r3, #1
 8004870:	430a      	orrs	r2, r1
 8004872:	e7ab      	b.n	80047cc <__kernel_rem_pio2f+0x218>
 8004874:	08004fa4 	.word	0x08004fa4
 8004878:	08004f78 	.word	0x08004f78
 800487c:	3301      	adds	r3, #1
 800487e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004882:	2900      	cmp	r1, #0
 8004884:	d0fa      	beq.n	800487c <__kernel_rem_pio2f+0x2c8>
 8004886:	9a04      	ldr	r2, [sp, #16]
 8004888:	a91e      	add	r1, sp, #120	@ 0x78
 800488a:	18a2      	adds	r2, r4, r2
 800488c:	1c66      	adds	r6, r4, #1
 800488e:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 8004892:	441c      	add	r4, r3
 8004894:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 8004898:	42b4      	cmp	r4, r6
 800489a:	f6ff aecf 	blt.w	800463c <__kernel_rem_pio2f+0x88>
 800489e:	9b07      	ldr	r3, [sp, #28]
 80048a0:	46ab      	mov	fp, r5
 80048a2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80048a6:	f7fb fd15 	bl	80002d4 <__aeabi_i2f>
 80048aa:	f04f 0a00 	mov.w	sl, #0
 80048ae:	f04f 0800 	mov.w	r8, #0
 80048b2:	6028      	str	r0, [r5, #0]
 80048b4:	9b03      	ldr	r3, [sp, #12]
 80048b6:	459a      	cmp	sl, r3
 80048b8:	dd07      	ble.n	80048ca <__kernel_rem_pio2f+0x316>
 80048ba:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 80048be:	3504      	adds	r5, #4
 80048c0:	3601      	adds	r6, #1
 80048c2:	e7e9      	b.n	8004898 <__kernel_rem_pio2f+0x2e4>
 80048c4:	2301      	movs	r3, #1
 80048c6:	9a08      	ldr	r2, [sp, #32]
 80048c8:	e7d9      	b.n	800487e <__kernel_rem_pio2f+0x2ca>
 80048ca:	9b05      	ldr	r3, [sp, #20]
 80048cc:	f85b 0904 	ldr.w	r0, [fp], #-4
 80048d0:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 80048d4:	f7fb fd52 	bl	800037c <__aeabi_fmul>
 80048d8:	4601      	mov	r1, r0
 80048da:	4640      	mov	r0, r8
 80048dc:	f7fb fc46 	bl	800016c <__addsf3>
 80048e0:	f10a 0a01 	add.w	sl, sl, #1
 80048e4:	4680      	mov	r8, r0
 80048e6:	e7e5      	b.n	80048b4 <__kernel_rem_pio2f+0x300>
 80048e8:	9b06      	ldr	r3, [sp, #24]
 80048ea:	9a02      	ldr	r2, [sp, #8]
 80048ec:	4648      	mov	r0, r9
 80048ee:	1a99      	subs	r1, r3, r2
 80048f0:	f7ff fdf6 	bl	80044e0 <scalbnf>
 80048f4:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80048f8:	4680      	mov	r8, r0
 80048fa:	f7fb fef1 	bl	80006e0 <__aeabi_fcmpge>
 80048fe:	b1f8      	cbz	r0, 8004940 <__kernel_rem_pio2f+0x38c>
 8004900:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8004904:	4640      	mov	r0, r8
 8004906:	f7fb fd39 	bl	800037c <__aeabi_fmul>
 800490a:	f7fb ff13 	bl	8000734 <__aeabi_f2iz>
 800490e:	f7fb fce1 	bl	80002d4 <__aeabi_i2f>
 8004912:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8004916:	4681      	mov	r9, r0
 8004918:	f7fb fd30 	bl	800037c <__aeabi_fmul>
 800491c:	4601      	mov	r1, r0
 800491e:	4640      	mov	r0, r8
 8004920:	f7fb fc22 	bl	8000168 <__aeabi_fsub>
 8004924:	f7fb ff06 	bl	8000734 <__aeabi_f2iz>
 8004928:	ab0a      	add	r3, sp, #40	@ 0x28
 800492a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800492e:	4648      	mov	r0, r9
 8004930:	3401      	adds	r4, #1
 8004932:	3708      	adds	r7, #8
 8004934:	f7fb fefe 	bl	8000734 <__aeabi_f2iz>
 8004938:	ab0a      	add	r3, sp, #40	@ 0x28
 800493a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800493e:	e751      	b.n	80047e4 <__kernel_rem_pio2f+0x230>
 8004940:	4640      	mov	r0, r8
 8004942:	e7f7      	b.n	8004934 <__kernel_rem_pio2f+0x380>
 8004944:	ab0a      	add	r3, sp, #40	@ 0x28
 8004946:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800494a:	f7fb fcc3 	bl	80002d4 <__aeabi_i2f>
 800494e:	4639      	mov	r1, r7
 8004950:	f7fb fd14 	bl	800037c <__aeabi_fmul>
 8004954:	4649      	mov	r1, r9
 8004956:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 800495a:	4638      	mov	r0, r7
 800495c:	f7fb fd0e 	bl	800037c <__aeabi_fmul>
 8004960:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004964:	4607      	mov	r7, r0
 8004966:	e748      	b.n	80047fa <__kernel_rem_pio2f+0x246>
 8004968:	f853 0b04 	ldr.w	r0, [r3], #4
 800496c:	f85b 1b04 	ldr.w	r1, [fp], #4
 8004970:	9203      	str	r2, [sp, #12]
 8004972:	9302      	str	r3, [sp, #8]
 8004974:	f7fb fd02 	bl	800037c <__aeabi_fmul>
 8004978:	4601      	mov	r1, r0
 800497a:	4640      	mov	r0, r8
 800497c:	f7fb fbf6 	bl	800016c <__addsf3>
 8004980:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004984:	4680      	mov	r8, r0
 8004986:	f10a 0a01 	add.w	sl, sl, #1
 800498a:	9901      	ldr	r1, [sp, #4]
 800498c:	458a      	cmp	sl, r1
 800498e:	dc01      	bgt.n	8004994 <__kernel_rem_pio2f+0x3e0>
 8004990:	45ca      	cmp	sl, r9
 8004992:	dde9      	ble.n	8004968 <__kernel_rem_pio2f+0x3b4>
 8004994:	ab5a      	add	r3, sp, #360	@ 0x168
 8004996:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800499a:	f849 8ca0 	str.w	r8, [r9, #-160]
 800499e:	3f01      	subs	r7, #1
 80049a0:	e731      	b.n	8004806 <__kernel_rem_pio2f+0x252>
 80049a2:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	dc07      	bgt.n	80049b8 <__kernel_rem_pio2f+0x404>
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	dc4e      	bgt.n	8004a4a <__kernel_rem_pio2f+0x496>
 80049ac:	d02e      	beq.n	8004a0c <__kernel_rem_pio2f+0x458>
 80049ae:	f006 0007 	and.w	r0, r6, #7
 80049b2:	b05b      	add	sp, #364	@ 0x16c
 80049b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80049ba:	2b03      	cmp	r3, #3
 80049bc:	d1f7      	bne.n	80049ae <__kernel_rem_pio2f+0x3fa>
 80049be:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 80049c2:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 80049c6:	46b8      	mov	r8, r7
 80049c8:	46a2      	mov	sl, r4
 80049ca:	f1ba 0f00 	cmp.w	sl, #0
 80049ce:	dc49      	bgt.n	8004a64 <__kernel_rem_pio2f+0x4b0>
 80049d0:	46a1      	mov	r9, r4
 80049d2:	f1b9 0f01 	cmp.w	r9, #1
 80049d6:	dc60      	bgt.n	8004a9a <__kernel_rem_pio2f+0x4e6>
 80049d8:	2000      	movs	r0, #0
 80049da:	2c01      	cmp	r4, #1
 80049dc:	dc76      	bgt.n	8004acc <__kernel_rem_pio2f+0x518>
 80049de:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 80049e0:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 80049e2:	2d00      	cmp	r5, #0
 80049e4:	d178      	bne.n	8004ad8 <__kernel_rem_pio2f+0x524>
 80049e6:	9900      	ldr	r1, [sp, #0]
 80049e8:	600a      	str	r2, [r1, #0]
 80049ea:	460a      	mov	r2, r1
 80049ec:	604b      	str	r3, [r1, #4]
 80049ee:	6090      	str	r0, [r2, #8]
 80049f0:	e7dd      	b.n	80049ae <__kernel_rem_pio2f+0x3fa>
 80049f2:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 80049f6:	f7fb fbb9 	bl	800016c <__addsf3>
 80049fa:	3c01      	subs	r4, #1
 80049fc:	2c00      	cmp	r4, #0
 80049fe:	daf8      	bge.n	80049f2 <__kernel_rem_pio2f+0x43e>
 8004a00:	b10d      	cbz	r5, 8004a06 <__kernel_rem_pio2f+0x452>
 8004a02:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8004a06:	9b00      	ldr	r3, [sp, #0]
 8004a08:	6018      	str	r0, [r3, #0]
 8004a0a:	e7d0      	b.n	80049ae <__kernel_rem_pio2f+0x3fa>
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	af32      	add	r7, sp, #200	@ 0xc8
 8004a10:	e7f4      	b.n	80049fc <__kernel_rem_pio2f+0x448>
 8004a12:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8004a16:	f7fb fba9 	bl	800016c <__addsf3>
 8004a1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a1e:	f1b8 0f00 	cmp.w	r8, #0
 8004a22:	daf6      	bge.n	8004a12 <__kernel_rem_pio2f+0x45e>
 8004a24:	b1ad      	cbz	r5, 8004a52 <__kernel_rem_pio2f+0x49e>
 8004a26:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 8004a2a:	9a00      	ldr	r2, [sp, #0]
 8004a2c:	4601      	mov	r1, r0
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8004a32:	f7fb fb99 	bl	8000168 <__aeabi_fsub>
 8004a36:	f04f 0801 	mov.w	r8, #1
 8004a3a:	4544      	cmp	r4, r8
 8004a3c:	da0b      	bge.n	8004a56 <__kernel_rem_pio2f+0x4a2>
 8004a3e:	b10d      	cbz	r5, 8004a44 <__kernel_rem_pio2f+0x490>
 8004a40:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8004a44:	9b00      	ldr	r3, [sp, #0]
 8004a46:	6058      	str	r0, [r3, #4]
 8004a48:	e7b1      	b.n	80049ae <__kernel_rem_pio2f+0x3fa>
 8004a4a:	46a0      	mov	r8, r4
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	af32      	add	r7, sp, #200	@ 0xc8
 8004a50:	e7e5      	b.n	8004a1e <__kernel_rem_pio2f+0x46a>
 8004a52:	4603      	mov	r3, r0
 8004a54:	e7e9      	b.n	8004a2a <__kernel_rem_pio2f+0x476>
 8004a56:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8004a5a:	f7fb fb87 	bl	800016c <__addsf3>
 8004a5e:	f108 0801 	add.w	r8, r8, #1
 8004a62:	e7ea      	b.n	8004a3a <__kernel_rem_pio2f+0x486>
 8004a64:	f8d8 3000 	ldr.w	r3, [r8]
 8004a68:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	9302      	str	r3, [sp, #8]
 8004a72:	9201      	str	r2, [sp, #4]
 8004a74:	f7fb fb7a 	bl	800016c <__addsf3>
 8004a78:	9a01      	ldr	r2, [sp, #4]
 8004a7a:	4601      	mov	r1, r0
 8004a7c:	4681      	mov	r9, r0
 8004a7e:	4610      	mov	r0, r2
 8004a80:	f7fb fb72 	bl	8000168 <__aeabi_fsub>
 8004a84:	9b02      	ldr	r3, [sp, #8]
 8004a86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	f7fb fb6e 	bl	800016c <__addsf3>
 8004a90:	f848 0904 	str.w	r0, [r8], #-4
 8004a94:	f8c8 9000 	str.w	r9, [r8]
 8004a98:	e797      	b.n	80049ca <__kernel_rem_pio2f+0x416>
 8004a9a:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8004a9e:	f8d7 a000 	ldr.w	sl, [r7]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	4651      	mov	r1, sl
 8004aa6:	9301      	str	r3, [sp, #4]
 8004aa8:	f7fb fb60 	bl	800016c <__addsf3>
 8004aac:	9b01      	ldr	r3, [sp, #4]
 8004aae:	4601      	mov	r1, r0
 8004ab0:	4680      	mov	r8, r0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fb fb58 	bl	8000168 <__aeabi_fsub>
 8004ab8:	4651      	mov	r1, sl
 8004aba:	f7fb fb57 	bl	800016c <__addsf3>
 8004abe:	f847 0904 	str.w	r0, [r7], #-4
 8004ac2:	f109 39ff 	add.w	r9, r9, #4294967295
 8004ac6:	f8c7 8000 	str.w	r8, [r7]
 8004aca:	e782      	b.n	80049d2 <__kernel_rem_pio2f+0x41e>
 8004acc:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8004ad0:	f7fb fb4c 	bl	800016c <__addsf3>
 8004ad4:	3c01      	subs	r4, #1
 8004ad6:	e780      	b.n	80049da <__kernel_rem_pio2f+0x426>
 8004ad8:	9900      	ldr	r1, [sp, #0]
 8004ada:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8004ade:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004ae2:	600a      	str	r2, [r1, #0]
 8004ae4:	604b      	str	r3, [r1, #4]
 8004ae6:	460a      	mov	r2, r1
 8004ae8:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8004aec:	e77f      	b.n	80049ee <__kernel_rem_pio2f+0x43a>
 8004aee:	bf00      	nop

08004af0 <floorf>:
 8004af0:	b570      	push	{r4, r5, r6, lr}
 8004af2:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8004af6:	3d7f      	subs	r5, #127	@ 0x7f
 8004af8:	2d16      	cmp	r5, #22
 8004afa:	4601      	mov	r1, r0
 8004afc:	4604      	mov	r4, r0
 8004afe:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 8004b02:	dc26      	bgt.n	8004b52 <floorf+0x62>
 8004b04:	2d00      	cmp	r5, #0
 8004b06:	da0f      	bge.n	8004b28 <floorf+0x38>
 8004b08:	4917      	ldr	r1, [pc, #92]	@ (8004b68 <floorf+0x78>)
 8004b0a:	f7fb fb2f 	bl	800016c <__addsf3>
 8004b0e:	2100      	movs	r1, #0
 8004b10:	f7fb fdf0 	bl	80006f4 <__aeabi_fcmpgt>
 8004b14:	b130      	cbz	r0, 8004b24 <floorf+0x34>
 8004b16:	2c00      	cmp	r4, #0
 8004b18:	da23      	bge.n	8004b62 <floorf+0x72>
 8004b1a:	2e00      	cmp	r6, #0
 8004b1c:	4c13      	ldr	r4, [pc, #76]	@ (8004b6c <floorf+0x7c>)
 8004b1e:	bf08      	it	eq
 8004b20:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004b24:	4621      	mov	r1, r4
 8004b26:	e01a      	b.n	8004b5e <floorf+0x6e>
 8004b28:	4e11      	ldr	r6, [pc, #68]	@ (8004b70 <floorf+0x80>)
 8004b2a:	412e      	asrs	r6, r5
 8004b2c:	4230      	tst	r0, r6
 8004b2e:	d016      	beq.n	8004b5e <floorf+0x6e>
 8004b30:	490d      	ldr	r1, [pc, #52]	@ (8004b68 <floorf+0x78>)
 8004b32:	f7fb fb1b 	bl	800016c <__addsf3>
 8004b36:	2100      	movs	r1, #0
 8004b38:	f7fb fddc 	bl	80006f4 <__aeabi_fcmpgt>
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	d0f1      	beq.n	8004b24 <floorf+0x34>
 8004b40:	2c00      	cmp	r4, #0
 8004b42:	bfbe      	ittt	lt
 8004b44:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8004b48:	412b      	asrlt	r3, r5
 8004b4a:	18e4      	addlt	r4, r4, r3
 8004b4c:	ea24 0406 	bic.w	r4, r4, r6
 8004b50:	e7e8      	b.n	8004b24 <floorf+0x34>
 8004b52:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8004b56:	d302      	bcc.n	8004b5e <floorf+0x6e>
 8004b58:	f7fb fb08 	bl	800016c <__addsf3>
 8004b5c:	4601      	mov	r1, r0
 8004b5e:	4608      	mov	r0, r1
 8004b60:	bd70      	pop	{r4, r5, r6, pc}
 8004b62:	2400      	movs	r4, #0
 8004b64:	e7de      	b.n	8004b24 <floorf+0x34>
 8004b66:	bf00      	nop
 8004b68:	7149f2ca 	.word	0x7149f2ca
 8004b6c:	bf800000 	.word	0xbf800000
 8004b70:	007fffff 	.word	0x007fffff

08004b74 <_init>:
 8004b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b76:	bf00      	nop
 8004b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7a:	bc08      	pop	{r3}
 8004b7c:	469e      	mov	lr, r3
 8004b7e:	4770      	bx	lr

08004b80 <_fini>:
 8004b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b82:	bf00      	nop
 8004b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b86:	bc08      	pop	{r3}
 8004b88:	469e      	mov	lr, r3
 8004b8a:	4770      	bx	lr
