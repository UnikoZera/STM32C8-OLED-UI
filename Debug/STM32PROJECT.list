
STM32PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000848c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  08008598  08008598  00009598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d50  08008d50  0000a074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008d50  08008d50  00009d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d58  08008d58  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d58  08008d58  00009d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d5c  08008d5c  00009d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08008d60  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f08  20000074  08008dd4  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003f7c  08008dd4  0000af7c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001066a  00000000  00000000  0000a09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ed2  00000000  00000000  0001a707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  0001d5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e13  00000000  00000000  0001e7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019bf9  00000000  00000000  0001f5c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162eb  00000000  00000000  000391bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008de1d  00000000  00000000  0004f4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd2c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054b0  00000000  00000000  000dd308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000e27b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08008580 	.word	0x08008580

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08008580 	.word	0x08008580

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_fcmpun>:
 8000718:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800071c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000720:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000724:	d102      	bne.n	800072c <__aeabi_fcmpun+0x14>
 8000726:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800072a:	d108      	bne.n	800073e <__aeabi_fcmpun+0x26>
 800072c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000730:	d102      	bne.n	8000738 <__aeabi_fcmpun+0x20>
 8000732:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000736:	d102      	bne.n	800073e <__aeabi_fcmpun+0x26>
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	4770      	bx	lr
 800073e:	f04f 0001 	mov.w	r0, #1
 8000742:	4770      	bx	lr

08000744 <__aeabi_f2iz>:
 8000744:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000748:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800074c:	d30f      	bcc.n	800076e <__aeabi_f2iz+0x2a>
 800074e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000752:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000756:	d90d      	bls.n	8000774 <__aeabi_f2iz+0x30>
 8000758:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800075c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000760:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000764:	fa23 f002 	lsr.w	r0, r3, r2
 8000768:	bf18      	it	ne
 800076a:	4240      	negne	r0, r0
 800076c:	4770      	bx	lr
 800076e:	f04f 0000 	mov.w	r0, #0
 8000772:	4770      	bx	lr
 8000774:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000778:	d101      	bne.n	800077e <__aeabi_f2iz+0x3a>
 800077a:	0242      	lsls	r2, r0, #9
 800077c:	d105      	bne.n	800078a <__aeabi_f2iz+0x46>
 800077e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000782:	bf08      	it	eq
 8000784:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000788:	4770      	bx	lr
 800078a:	f04f 0000 	mov.w	r0, #0
 800078e:	4770      	bx	lr

08000790 <__aeabi_f2uiz>:
 8000790:	0042      	lsls	r2, r0, #1
 8000792:	d20e      	bcs.n	80007b2 <__aeabi_f2uiz+0x22>
 8000794:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000798:	d30b      	bcc.n	80007b2 <__aeabi_f2uiz+0x22>
 800079a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800079e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007a2:	d409      	bmi.n	80007b8 <__aeabi_f2uiz+0x28>
 80007a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ac:	fa23 f002 	lsr.w	r0, r3, r2
 80007b0:	4770      	bx	lr
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	4770      	bx	lr
 80007b8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80007bc:	d101      	bne.n	80007c2 <__aeabi_f2uiz+0x32>
 80007be:	0242      	lsls	r2, r0, #9
 80007c0:	d102      	bne.n	80007c8 <__aeabi_f2uiz+0x38>
 80007c2:	f04f 30ff 	mov.w	r0, #4294967295
 80007c6:	4770      	bx	lr
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_DMA_Init+0x38>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a0b      	ldr	r2, [pc, #44]	@ (8000808 <MX_DMA_Init+0x38>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_DMA_Init+0x38>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	2010      	movs	r0, #16
 80007f4:	f003 fbd9 	bl	8003faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007f8:	2010      	movs	r0, #16
 80007fa:	f003 fbf2 	bl	8003fe2 <HAL_NVIC_EnableIRQ>

}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 0310 	add.w	r3, r7, #16
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000820:	4b2a      	ldr	r3, [pc, #168]	@ (80008cc <MX_GPIO_Init+0xc0>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a29      	ldr	r2, [pc, #164]	@ (80008cc <MX_GPIO_Init+0xc0>)
 8000826:	f043 0310 	orr.w	r3, r3, #16
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b27      	ldr	r3, [pc, #156]	@ (80008cc <MX_GPIO_Init+0xc0>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f003 0310 	and.w	r3, r3, #16
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000838:	4b24      	ldr	r3, [pc, #144]	@ (80008cc <MX_GPIO_Init+0xc0>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a23      	ldr	r2, [pc, #140]	@ (80008cc <MX_GPIO_Init+0xc0>)
 800083e:	f043 0320 	orr.w	r3, r3, #32
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b21      	ldr	r3, [pc, #132]	@ (80008cc <MX_GPIO_Init+0xc0>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0320 	and.w	r3, r3, #32
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000850:	4b1e      	ldr	r3, [pc, #120]	@ (80008cc <MX_GPIO_Init+0xc0>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a1d      	ldr	r2, [pc, #116]	@ (80008cc <MX_GPIO_Init+0xc0>)
 8000856:	f043 0308 	orr.w	r3, r3, #8
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b1b      	ldr	r3, [pc, #108]	@ (80008cc <MX_GPIO_Init+0xc0>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f003 0308 	and.w	r3, r3, #8
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000868:	4b18      	ldr	r3, [pc, #96]	@ (80008cc <MX_GPIO_Init+0xc0>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a17      	ldr	r2, [pc, #92]	@ (80008cc <MX_GPIO_Init+0xc0>)
 800086e:	f043 0304 	orr.w	r3, r3, #4
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <MX_GPIO_Init+0xc0>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SysWork_Light_GPIO_Port, SysWork_Light_Pin, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000886:	4812      	ldr	r0, [pc, #72]	@ (80008d0 <MX_GPIO_Init+0xc4>)
 8000888:	f003 fec1 	bl	800460e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SysWork_Light_Pin */
  GPIO_InitStruct.Pin = SysWork_Light_Pin;
 800088c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2302      	movs	r3, #2
 800089c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SysWork_Light_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	4619      	mov	r1, r3
 80008a4:	480a      	ldr	r0, [pc, #40]	@ (80008d0 <MX_GPIO_Init+0xc4>)
 80008a6:	f003 fd17 	bl	80042d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Input_Pin */
  GPIO_InitStruct.Pin = Encoder_Input_Pin;
 80008aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Encoder_Input_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	4619      	mov	r1, r3
 80008be:	4805      	ldr	r0, [pc, #20]	@ (80008d4 <MX_GPIO_Init+0xc8>)
 80008c0:	f003 fd0a 	bl	80042d8 <HAL_GPIO_Init>

}
 80008c4:	bf00      	nop
 80008c6:	3720      	adds	r7, #32
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40021000 	.word	0x40021000
 80008d0:	40011000 	.word	0x40011000
 80008d4:	40010c00 	.word	0x40010c00

080008d8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008dc:	4b12      	ldr	r3, [pc, #72]	@ (8000928 <MX_I2C1_Init+0x50>)
 80008de:	4a13      	ldr	r2, [pc, #76]	@ (800092c <MX_I2C1_Init+0x54>)
 80008e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80008e2:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <MX_I2C1_Init+0x50>)
 80008e4:	4a12      	ldr	r2, [pc, #72]	@ (8000930 <MX_I2C1_Init+0x58>)
 80008e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000928 <MX_I2C1_Init+0x50>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <MX_I2C1_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <MX_I2C1_Init+0x50>)
 80008f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000928 <MX_I2C1_Init+0x50>)
 80008fe:	2200      	movs	r2, #0
 8000900:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000902:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <MX_I2C1_Init+0x50>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000908:	4b07      	ldr	r3, [pc, #28]	@ (8000928 <MX_I2C1_Init+0x50>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <MX_I2C1_Init+0x50>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	@ (8000928 <MX_I2C1_Init+0x50>)
 8000916:	f003 fe93 	bl	8004640 <HAL_I2C_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000920:	f000 f99b 	bl	8000c5a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000090 	.word	0x20000090
 800092c:	40005400 	.word	0x40005400
 8000930:	00061a80 	.word	0x00061a80

08000934 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <MX_I2C2_Init+0x50>)
 800093a:	4a13      	ldr	r2, [pc, #76]	@ (8000988 <MX_I2C2_Init+0x54>)
 800093c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800093e:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <MX_I2C2_Init+0x50>)
 8000940:	4a12      	ldr	r2, [pc, #72]	@ (800098c <MX_I2C2_Init+0x58>)
 8000942:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <MX_I2C2_Init+0x50>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800094a:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <MX_I2C2_Init+0x50>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000950:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <MX_I2C2_Init+0x50>)
 8000952:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000956:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000958:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <MX_I2C2_Init+0x50>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <MX_I2C2_Init+0x50>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000964:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <MX_I2C2_Init+0x50>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <MX_I2C2_Init+0x50>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	@ (8000984 <MX_I2C2_Init+0x50>)
 8000972:	f003 fe65 	bl	8004640 <HAL_I2C_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800097c:	f000 f96d 	bl	8000c5a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200000e4 	.word	0x200000e4
 8000988:	40005800 	.word	0x40005800
 800098c:	00061a80 	.word	0x00061a80

08000990 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0318 	add.w	r3, r7, #24
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a3e      	ldr	r2, [pc, #248]	@ (8000aa4 <HAL_I2C_MspInit+0x114>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d14b      	bne.n	8000a48 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b0:	4b3d      	ldr	r3, [pc, #244]	@ (8000aa8 <HAL_I2C_MspInit+0x118>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a3c      	ldr	r2, [pc, #240]	@ (8000aa8 <HAL_I2C_MspInit+0x118>)
 80009b6:	f043 0308 	orr.w	r3, r3, #8
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b3a      	ldr	r3, [pc, #232]	@ (8000aa8 <HAL_I2C_MspInit+0x118>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f003 0308 	and.w	r3, r3, #8
 80009c4:	617b      	str	r3, [r7, #20]
 80009c6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 80009c8:	23c0      	movs	r3, #192	@ 0xc0
 80009ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009cc:	2312      	movs	r3, #18
 80009ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d0:	2303      	movs	r3, #3
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	f107 0318 	add.w	r3, r7, #24
 80009d8:	4619      	mov	r1, r3
 80009da:	4834      	ldr	r0, [pc, #208]	@ (8000aac <HAL_I2C_MspInit+0x11c>)
 80009dc:	f003 fc7c 	bl	80042d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009e0:	4b31      	ldr	r3, [pc, #196]	@ (8000aa8 <HAL_I2C_MspInit+0x118>)
 80009e2:	69db      	ldr	r3, [r3, #28]
 80009e4:	4a30      	ldr	r2, [pc, #192]	@ (8000aa8 <HAL_I2C_MspInit+0x118>)
 80009e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009ea:	61d3      	str	r3, [r2, #28]
 80009ec:	4b2e      	ldr	r3, [pc, #184]	@ (8000aa8 <HAL_I2C_MspInit+0x118>)
 80009ee:	69db      	ldr	r3, [r3, #28]
 80009f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80009f8:	4b2d      	ldr	r3, [pc, #180]	@ (8000ab0 <HAL_I2C_MspInit+0x120>)
 80009fa:	4a2e      	ldr	r2, [pc, #184]	@ (8000ab4 <HAL_I2C_MspInit+0x124>)
 80009fc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009fe:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab0 <HAL_I2C_MspInit+0x120>)
 8000a00:	2210      	movs	r2, #16
 8000a02:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a04:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab0 <HAL_I2C_MspInit+0x120>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a0a:	4b29      	ldr	r3, [pc, #164]	@ (8000ab0 <HAL_I2C_MspInit+0x120>)
 8000a0c:	2280      	movs	r2, #128	@ 0x80
 8000a0e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a10:	4b27      	ldr	r3, [pc, #156]	@ (8000ab0 <HAL_I2C_MspInit+0x120>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a16:	4b26      	ldr	r3, [pc, #152]	@ (8000ab0 <HAL_I2C_MspInit+0x120>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000a1c:	4b24      	ldr	r3, [pc, #144]	@ (8000ab0 <HAL_I2C_MspInit+0x120>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a22:	4b23      	ldr	r3, [pc, #140]	@ (8000ab0 <HAL_I2C_MspInit+0x120>)
 8000a24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a28:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000a2a:	4821      	ldr	r0, [pc, #132]	@ (8000ab0 <HAL_I2C_MspInit+0x120>)
 8000a2c:	f003 faf4 	bl	8004018 <HAL_DMA_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 8000a36:	f000 f910 	bl	8000c5a <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab0 <HAL_I2C_MspInit+0x120>)
 8000a3e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a40:	4a1b      	ldr	r2, [pc, #108]	@ (8000ab0 <HAL_I2C_MspInit+0x120>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000a46:	e029      	b.n	8000a9c <HAL_I2C_MspInit+0x10c>
  else if(i2cHandle->Instance==I2C2)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ab8 <HAL_I2C_MspInit+0x128>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d124      	bne.n	8000a9c <HAL_I2C_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <HAL_I2C_MspInit+0x118>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	4a14      	ldr	r2, [pc, #80]	@ (8000aa8 <HAL_I2C_MspInit+0x118>)
 8000a58:	f043 0308 	orr.w	r3, r3, #8
 8000a5c:	6193      	str	r3, [r2, #24]
 8000a5e:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <HAL_I2C_MspInit+0x118>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	f003 0308 	and.w	r3, r3, #8
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GYRO_SCL_Pin|GYRO_SDA_Pin;
 8000a6a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a70:	2312      	movs	r3, #18
 8000a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a78:	f107 0318 	add.w	r3, r7, #24
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480b      	ldr	r0, [pc, #44]	@ (8000aac <HAL_I2C_MspInit+0x11c>)
 8000a80:	f003 fc2a 	bl	80042d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a84:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <HAL_I2C_MspInit+0x118>)
 8000a86:	69db      	ldr	r3, [r3, #28]
 8000a88:	4a07      	ldr	r2, [pc, #28]	@ (8000aa8 <HAL_I2C_MspInit+0x118>)
 8000a8a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a8e:	61d3      	str	r3, [r2, #28]
 8000a90:	4b05      	ldr	r3, [pc, #20]	@ (8000aa8 <HAL_I2C_MspInit+0x118>)
 8000a92:	69db      	ldr	r3, [r3, #28]
 8000a94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
}
 8000a9c:	bf00      	nop
 8000a9e:	3728      	adds	r7, #40	@ 0x28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40005400 	.word	0x40005400
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010c00 	.word	0x40010c00
 8000ab0:	20000138 	.word	0x20000138
 8000ab4:	4002006c 	.word	0x4002006c
 8000ab8:	40005800 	.word	0x40005800

08000abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac0:	f003 f916 	bl	8003cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac4:	f000 f884 	bl	8000bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac8:	f7ff fea0 	bl	800080c <MX_GPIO_Init>
  MX_DMA_Init();
 8000acc:	f7ff fe80 	bl	80007d0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000ad0:	f7ff ff02 	bl	80008d8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000ad4:	f002 ff4c 	bl	8003970 <MX_TIM1_Init>
  MX_I2C2_Init();
 8000ad8:	f7ff ff2c 	bl	8000934 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000adc:	f002 ffea 	bl	8003ab4 <MX_TIM3_Init>
  MX_SPI2_Init();
 8000ae0:	f002 fe20 	bl	8003724 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init(); // 初始化OLED
 8000ae4:	f000 fa9c 	bl	8001020 <OLED_Init>
  OLED_InitBuffer(); // 初始化双缓冲
 8000ae8:	f000 f8be 	bl	8000c68 <OLED_InitBuffer>
  OLED_ClearBuffer(); // 清空缓冲区
 8000aec:	f000 f8f0 	bl	8000cd0 <OLED_ClearBuffer>
  
  OLED_EnableDiffMode(1);  // 启用差分更新
 8000af0:	2001      	movs	r0, #1
 8000af2:	f001 fb6f 	bl	80021d4 <OLED_EnableDiffMode>
  OLED_EnableFastUpdate(1); // 启用快速更新
 8000af6:	2001      	movs	r0, #1
 8000af8:	f001 fb8a 	bl	8002210 <OLED_EnableFastUpdate>

  
  // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // 启动PWM
 8000afc:	2104      	movs	r1, #4
 8000afe:	4829      	ldr	r0, [pc, #164]	@ (8000ba4 <main+0xe8>)
 8000b00:	f004 ff62 	bl	80059c8 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1); // 启动编码器
 8000b04:	2100      	movs	r1, #0
 8000b06:	4828      	ldr	r0, [pc, #160]	@ (8000ba8 <main+0xec>)
 8000b08:	f005 f8a2 	bl	8005c50 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2); // 启动编码器
 8000b0c:	2104      	movs	r1, #4
 8000b0e:	4826      	ldr	r0, [pc, #152]	@ (8000ba8 <main+0xec>)
 8000b10:	f005 f89e 	bl	8005c50 <HAL_TIM_Encoder_Start>

  OLED_InitAnimationManager(&g_AnimationManager); // 初始化动画管理器
 8000b14:	4825      	ldr	r0, [pc, #148]	@ (8000bac <main+0xf0>)
 8000b16:	f002 fb57 	bl	80031c8 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Menu_AnimationManager); // 初始化菜单动画管理器
 8000b1a:	4825      	ldr	r0, [pc, #148]	@ (8000bb0 <main+0xf4>)
 8000b1c:	f002 fb54 	bl	80031c8 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Games_AnimationManager); // 初始化游戏动画管理器
 8000b20:	4824      	ldr	r0, [pc, #144]	@ (8000bb4 <main+0xf8>)
 8000b22:	f002 fb51 	bl	80031c8 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Tools_AnimationManager); // 初始化工具动画管理器
 8000b26:	4824      	ldr	r0, [pc, #144]	@ (8000bb8 <main+0xfc>)
 8000b28:	f002 fb4e 	bl	80031c8 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Settings_AnimationManager); // 初始化设置动画管理器
 8000b2c:	4823      	ldr	r0, [pc, #140]	@ (8000bbc <main+0x100>)
 8000b2e:	f002 fb4b 	bl	80031c8 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&About_AnimationManager); // 初始化关于动画管理器
 8000b32:	4823      	ldr	r0, [pc, #140]	@ (8000bc0 <main+0x104>)
 8000b34:	f002 fb48 	bl	80031c8 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Status_AnimationManager); // 初始化状态动画管理器
 8000b38:	4822      	ldr	r0, [pc, #136]	@ (8000bc4 <main+0x108>)
 8000b3a:	f002 fb45 	bl	80031c8 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&g_Title_AnimationManager); // 初始化标题动画管理器
 8000b3e:	4822      	ldr	r0, [pc, #136]	@ (8000bc8 <main+0x10c>)
 8000b40:	f002 fb42 	bl	80031c8 <OLED_InitAnimationManager>
  __HAL_TIM_SET_COUNTER(&htim3, 32767);
 8000b44:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <main+0xec>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000b4c:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {    
    #pragma region OLED_UI_SETTINGS // UI设置
    OLED_ClearBuffer();
 8000b4e:	f000 f8bf 	bl	8000cd0 <OLED_ClearBuffer>
    
    System_UI_Loop(); // UI循环
 8000b52:	f000 fdb1 	bl	80016b8 <System_UI_Loop>

    
    
    
    
    OLED_OptimizedDisplayFPS(80, 56); // 显示帧率
 8000b56:	2138      	movs	r1, #56	@ 0x38
 8000b58:	2050      	movs	r0, #80	@ 0x50
 8000b5a:	f001 fc03 	bl	8002364 <OLED_OptimizedDisplayFPS>
    count = __HAL_TIM_GET_COUNTER(&htim3); // 获取编码器计数值 1圈40
 8000b5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <main+0xec>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <main+0x110>)
 8000b68:	801a      	strh	r2, [r3, #0]
    OLED_UpdateAnimationManager(&Menu_AnimationManager); // 更新菜单动画管理器
 8000b6a:	4811      	ldr	r0, [pc, #68]	@ (8000bb0 <main+0xf4>)
 8000b6c:	f002 fbde 	bl	800332c <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_AnimationManager); // 更新动画管理器
 8000b70:	480e      	ldr	r0, [pc, #56]	@ (8000bac <main+0xf0>)
 8000b72:	f002 fbdb 	bl	800332c <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Games_AnimationManager); // 更新游戏动画管理器
 8000b76:	480f      	ldr	r0, [pc, #60]	@ (8000bb4 <main+0xf8>)
 8000b78:	f002 fbd8 	bl	800332c <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Tools_AnimationManager); // 更新工具动画管理器
 8000b7c:	480e      	ldr	r0, [pc, #56]	@ (8000bb8 <main+0xfc>)
 8000b7e:	f002 fbd5 	bl	800332c <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Settings_AnimationManager); // 更新设置动画管理器
 8000b82:	480e      	ldr	r0, [pc, #56]	@ (8000bbc <main+0x100>)
 8000b84:	f002 fbd2 	bl	800332c <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&About_AnimationManager); // 更新关于动画管理器
 8000b88:	480d      	ldr	r0, [pc, #52]	@ (8000bc0 <main+0x104>)
 8000b8a:	f002 fbcf 	bl	800332c <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Status_AnimationManager); // 更新状态动画管理器
 8000b8e:	480d      	ldr	r0, [pc, #52]	@ (8000bc4 <main+0x108>)
 8000b90:	f002 fbcc 	bl	800332c <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_Title_AnimationManager); // 更新标题动画管理器
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <main+0x10c>)
 8000b96:	f002 fbc9 	bl	800332c <OLED_UpdateAnimationManager>
    OLED_SmartUpdate(); // 智能更新显示
 8000b9a:	f001 fb49 	bl	8002230 <OLED_SmartUpdate>
    OLED_ClearBuffer();
 8000b9e:	bf00      	nop
 8000ba0:	e7d5      	b.n	8000b4e <main+0x92>
 8000ba2:	bf00      	nop
 8000ba4:	20003da0 	.word	0x20003da0
 8000ba8:	20003de8 	.word	0x20003de8
 8000bac:	20003750 	.word	0x20003750
 8000bb0:	20000da4 	.word	0x20000da4
 8000bb4:	20001398 	.word	0x20001398
 8000bb8:	2000198c 	.word	0x2000198c
 8000bbc:	20001f80 	.word	0x20001f80
 8000bc0:	20002574 	.word	0x20002574
 8000bc4:	20002b68 	.word	0x20002b68
 8000bc8:	2000315c 	.word	0x2000315c
 8000bcc:	2000017c 	.word	0x2000017c

08000bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b090      	sub	sp, #64	@ 0x40
 8000bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	f107 0318 	add.w	r3, r7, #24
 8000bda:	2228      	movs	r2, #40	@ 0x28
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f005 fdd0 	bl	8006784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bfa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c00:	2301      	movs	r3, #1
 8000c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c04:	2302      	movs	r3, #2
 8000c06:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c0e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c14:	f107 0318 	add.w	r3, r7, #24
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f004 f9ad 	bl	8004f78 <HAL_RCC_OscConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c24:	f000 f819 	bl	8000c5a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c28:	230f      	movs	r3, #15
 8000c2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2102      	movs	r1, #2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f004 fc1a 	bl	800547c <HAL_RCC_ClockConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c4e:	f000 f804 	bl	8000c5a <Error_Handler>
  }
}
 8000c52:	bf00      	nop
 8000c54:	3740      	adds	r7, #64	@ 0x40
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5e:	b672      	cpsid	i
}
 8000c60:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c62:	bf00      	nop
 8000c64:	e7fd      	b.n	8000c62 <Error_Handler+0x8>
	...

08000c68 <OLED_InitBuffer>:
        0x22, 0x00, 0x07  // 页地址范围: 0-7
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000c6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c72:	2100      	movs	r1, #0
 8000c74:	4811      	ldr	r0, [pc, #68]	@ (8000cbc <OLED_InitBuffer+0x54>)
 8000c76:	f005 fd85 	bl	8006784 <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 8000c7a:	f240 4201 	movw	r2, #1025	@ 0x401
 8000c7e:	2100      	movs	r1, #0
 8000c80:	480f      	ldr	r0, [pc, #60]	@ (8000cc0 <OLED_InitBuffer+0x58>)
 8000c82:	f005 fd7f 	bl	8006784 <memset>

    // 初始化第一个字节为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <OLED_InitBuffer+0x58>)
 8000c88:	2240      	movs	r2, #64	@ 0x40
 8000c8a:	701a      	strb	r2, [r3, #0]

    // 初始化状态变量
    oled_update_flag = OLED_READY;
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc4 <OLED_InitBuffer+0x5c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
    oled_dma_busy = OLED_READY;
 8000c92:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc8 <OLED_InitBuffer+0x60>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	71fb      	strb	r3, [r7, #7]
 8000c9c:	e006      	b.n	8000cac <OLED_InitBuffer+0x44>
    {
        oled_dirty_pages[i] = 1;
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ccc <OLED_InitBuffer+0x64>)
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	71fb      	strb	r3, [r7, #7]
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	2b07      	cmp	r3, #7
 8000cb0:	d9f5      	bls.n	8000c9e <OLED_InitBuffer+0x36>
    }
}
 8000cb2:	bf00      	nop
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000190 	.word	0x20000190
 8000cc0:	20000590 	.word	0x20000590
 8000cc4:	20000184 	.word	0x20000184
 8000cc8:	20000185 	.word	0x20000185
 8000ccc:	20000188 	.word	0x20000188

08000cd0 <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000cd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cda:	2100      	movs	r1, #0
 8000cdc:	480a      	ldr	r0, [pc, #40]	@ (8000d08 <OLED_ClearBuffer+0x38>)
 8000cde:	f005 fd51 	bl	8006784 <memset>

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	71fb      	strb	r3, [r7, #7]
 8000ce6:	e006      	b.n	8000cf6 <OLED_ClearBuffer+0x26>
    {
        oled_dirty_pages[i] = 1;
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	4a08      	ldr	r2, [pc, #32]	@ (8000d0c <OLED_ClearBuffer+0x3c>)
 8000cec:	2101      	movs	r1, #1
 8000cee:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	71fb      	strb	r3, [r7, #7]
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2b07      	cmp	r3, #7
 8000cfa:	d9f5      	bls.n	8000ce8 <OLED_ClearBuffer+0x18>
    }
}
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000190 	.word	0x20000190
 8000d0c:	20000188 	.word	0x20000188

08000d10 <OLED_IsBusy>:

uint8_t OLED_IsBusy(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
    // 如果标记为忙，检查是否已经过了足够时间
    if (oled_update_flag)
 8000d16:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <OLED_IsBusy+0x44>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d007      	beq.n	8000d30 <OLED_IsBusy+0x20>
    {
        // SSD1315/SSD1306 典型帧率约为60Hz，每帧约16.7ms
        // 可以根据需要调整刷新率，减小此值可以提高帧率
        uint32_t current_time = HAL_GetTick();
 8000d20:	f003 f83e 	bl	8003da0 <HAL_GetTick>
 8000d24:	6078      	str	r0, [r7, #4]
        if (current_time - oled_last_update_time >= 0)
 8000d26:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <OLED_IsBusy+0x48>)
 8000d28:	681b      	ldr	r3, [r3, #0]
        {
            oled_update_flag = OLED_READY; // 已经过了足够时间，不再忙
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d54 <OLED_IsBusy+0x44>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
        }
    }

    // 如果DMA传输正在进行，也视为忙
    return (oled_update_flag || oled_dma_busy);
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <OLED_IsBusy+0x44>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d104      	bne.n	8000d44 <OLED_IsBusy+0x34>
 8000d3a:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <OLED_IsBusy+0x4c>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <OLED_IsBusy+0x38>
 8000d44:	2301      	movs	r3, #1
 8000d46:	e000      	b.n	8000d4a <OLED_IsBusy+0x3a>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	b2db      	uxtb	r3, r3
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000184 	.word	0x20000184
 8000d58:	20000180 	.word	0x20000180
 8000d5c:	20000185 	.word	0x20000185

08000d60 <OLED_UpdateDisplayVSync>:

void OLED_UpdateDisplayVSync(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af02      	add	r7, sp, #8
    // 等待上一次更新完成
    while (OLED_IsBusy())
 8000d66:	bf00      	nop
 8000d68:	f7ff ffd2 	bl	8000d10 <OLED_IsBusy>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d1fa      	bne.n	8000d68 <OLED_UpdateDisplayVSync+0x8>
    {
        // 可以加入短暂延时或者让出CPU，但通常不会停留很久
    }

    oled_update_flag = OLED_BUSY;
 8000d72:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <OLED_UpdateDisplayVSync+0x90>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8000d78:	f003 f812 	bl	8003da0 <HAL_GetTick>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4a1d      	ldr	r2, [pc, #116]	@ (8000df4 <OLED_UpdateDisplayVSync+0x94>)
 8000d80:	6013      	str	r3, [r2, #0]

    OLED_FrontBuffer[0] = 0x40;                                             // 数据控制字节：Co=0, D/C#=1 (数据)
 8000d82:	4b1d      	ldr	r3, [pc, #116]	@ (8000df8 <OLED_UpdateDisplayVSync+0x98>)
 8000d84:	2240      	movs	r2, #64	@ 0x40
 8000d86:	701a      	strb	r2, [r3, #0]
    memcpy(OLED_FrontBuffer + 1, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES); // 复制当前缓冲区到前缓冲区
 8000d88:	4a1c      	ldr	r2, [pc, #112]	@ (8000dfc <OLED_UpdateDisplayVSync+0x9c>)
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e00 <OLED_UpdateDisplayVSync+0xa0>)
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d94:	461a      	mov	r2, r3
 8000d96:	f005 fd3d 	bl	8006814 <memcpy>

    // 一次性发送所有命令
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	71fb      	strb	r3, [r7, #7]
 8000d9e:	e008      	b.n	8000db2 <OLED_UpdateDisplayVSync+0x52>
    {
        OLED_SendCommand(cmds[i]);
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	4a18      	ldr	r2, [pc, #96]	@ (8000e04 <OLED_UpdateDisplayVSync+0xa4>)
 8000da4:	5cd3      	ldrb	r3, [r2, r3]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 f920 	bl	8000fec <OLED_SendCommand>
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	3301      	adds	r3, #1
 8000db0:	71fb      	strb	r3, [r7, #7]
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2b07      	cmp	r3, #7
 8000db6:	d9f3      	bls.n	8000da0 <OLED_UpdateDisplayVSync+0x40>
    }


    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, OLED_WIDTH * OLED_PAGES + 1, HAL_MAX_DELAY);
 8000db8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	f240 4301 	movw	r3, #1025	@ 0x401
 8000dc2:	4a0d      	ldr	r2, [pc, #52]	@ (8000df8 <OLED_UpdateDisplayVSync+0x98>)
 8000dc4:	2178      	movs	r1, #120	@ 0x78
 8000dc6:	4810      	ldr	r0, [pc, #64]	@ (8000e08 <OLED_UpdateDisplayVSync+0xa8>)
 8000dc8:	f003 fd7e 	bl	80048c8 <HAL_I2C_Master_Transmit>

    // 重置所有脏页标记
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	71bb      	strb	r3, [r7, #6]
 8000dd0:	e006      	b.n	8000de0 <OLED_UpdateDisplayVSync+0x80>
    {
        oled_dirty_pages[i] = 0;
 8000dd2:	79bb      	ldrb	r3, [r7, #6]
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e0c <OLED_UpdateDisplayVSync+0xac>)
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000dda:	79bb      	ldrb	r3, [r7, #6]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	71bb      	strb	r3, [r7, #6]
 8000de0:	79bb      	ldrb	r3, [r7, #6]
 8000de2:	2b07      	cmp	r3, #7
 8000de4:	d9f5      	bls.n	8000dd2 <OLED_UpdateDisplayVSync+0x72>
    }
}
 8000de6:	bf00      	nop
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000184 	.word	0x20000184
 8000df4:	20000180 	.word	0x20000180
 8000df8:	20000590 	.word	0x20000590
 8000dfc:	20000591 	.word	0x20000591
 8000e00:	20000190 	.word	0x20000190
 8000e04:	080088f8 	.word	0x080088f8
 8000e08:	20000090 	.word	0x20000090
 8000e0c:	20000188 	.word	0x20000188

08000e10 <OLED_UpdateDisplayPartial>:
    }
}

// 局部更新显示函数
void OLED_UpdateDisplayPartial(uint8_t startPage, uint8_t endPage)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af02      	add	r7, sp, #8
 8000e16:	4603      	mov	r3, r0
 8000e18:	460a      	mov	r2, r1
 8000e1a:	71fb      	strb	r3, [r7, #7]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	71bb      	strb	r3, [r7, #6]
    // 边界检查
    if (startPage >= OLED_PAGES || endPage >= OLED_PAGES || startPage > endPage)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	2b07      	cmp	r3, #7
 8000e24:	d85c      	bhi.n	8000ee0 <OLED_UpdateDisplayPartial+0xd0>
 8000e26:	79bb      	ldrb	r3, [r7, #6]
 8000e28:	2b07      	cmp	r3, #7
 8000e2a:	d859      	bhi.n	8000ee0 <OLED_UpdateDisplayPartial+0xd0>
 8000e2c:	79fa      	ldrb	r2, [r7, #7]
 8000e2e:	79bb      	ldrb	r3, [r7, #6]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d855      	bhi.n	8000ee0 <OLED_UpdateDisplayPartial+0xd0>
        return;

    // 等待上一次更新完成
    while (OLED_IsBusy())
 8000e34:	bf00      	nop
 8000e36:	f7ff ff6b 	bl	8000d10 <OLED_IsBusy>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1fa      	bne.n	8000e36 <OLED_UpdateDisplayPartial+0x26>
    {
        // 可以加入短暂延时或者让出CPU
    }

    oled_update_flag = OLED_BUSY;
 8000e40:	4b29      	ldr	r3, [pc, #164]	@ (8000ee8 <OLED_UpdateDisplayPartial+0xd8>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8000e46:	f002 ffab 	bl	8003da0 <HAL_GetTick>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4a27      	ldr	r2, [pc, #156]	@ (8000eec <OLED_UpdateDisplayPartial+0xdc>)
 8000e4e:	6013      	str	r3, [r2, #0]

    // 设置页地址范围
    OLED_SendCommand(0x22);      // 页地址设置命令
 8000e50:	2022      	movs	r0, #34	@ 0x22
 8000e52:	f000 f8cb 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(startPage); // 起始页
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 f8c7 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(endPage);   // 结束页
 8000e5e:	79bb      	ldrb	r3, [r7, #6]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 f8c3 	bl	8000fec <OLED_SendCommand>

    // 设置列地址范围（总是更新整行）
    OLED_SendCommand(0x21); // 列地址设置命令
 8000e66:	2021      	movs	r0, #33	@ 0x21
 8000e68:	f000 f8c0 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0x00); // 起始列
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f000 f8bd 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0x7F); // 结束列 (127)
 8000e72:	207f      	movs	r0, #127	@ 0x7f
 8000e74:	f000 f8ba 	bl	8000fec <OLED_SendCommand>

    // 计算需要传输的数据长度
    uint16_t dataLen = OLED_WIDTH * (endPage - startPage + 1);
 8000e78:	79ba      	ldrb	r2, [r7, #6]
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	3301      	adds	r3, #1
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	01db      	lsls	r3, r3, #7
 8000e84:	81bb      	strh	r3, [r7, #12]

    // 前缓冲区的第一个字节设为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8000e86:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <OLED_UpdateDisplayPartial+0xe0>)
 8000e88:	2240      	movs	r2, #64	@ 0x40
 8000e8a:	701a      	strb	r2, [r3, #0]

    // 只复制需要更新的页
    for (uint8_t page = startPage; page <= endPage; page++)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	73fb      	strb	r3, [r7, #15]
 8000e90:	e016      	b.n	8000ec0 <OLED_UpdateDisplayPartial+0xb0>
    {
        memcpy(
            OLED_FrontBuffer + 1 + (page - startPage) * OLED_WIDTH,
 8000e92:	7bfa      	ldrb	r2, [r7, #15]
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	01db      	lsls	r3, r3, #7
 8000e9a:	3301      	adds	r3, #1
        memcpy(
 8000e9c:	4a14      	ldr	r2, [pc, #80]	@ (8000ef0 <OLED_UpdateDisplayPartial+0xe0>)
 8000e9e:	1898      	adds	r0, r3, r2
            OLED_BackBuffer + page * OLED_WIDTH,
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	01db      	lsls	r3, r3, #7
 8000ea4:	461a      	mov	r2, r3
        memcpy(
 8000ea6:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <OLED_UpdateDisplayPartial+0xe4>)
 8000ea8:	4413      	add	r3, r2
 8000eaa:	2280      	movs	r2, #128	@ 0x80
 8000eac:	4619      	mov	r1, r3
 8000eae:	f005 fcb1 	bl	8006814 <memcpy>
            OLED_WIDTH);
        oled_dirty_pages[page] = 0; // 重置脏页标记
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	4a10      	ldr	r2, [pc, #64]	@ (8000ef8 <OLED_UpdateDisplayPartial+0xe8>)
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = startPage; page <= endPage; page++)
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	73fb      	strb	r3, [r7, #15]
 8000ec0:	7bfa      	ldrb	r2, [r7, #15]
 8000ec2:	79bb      	ldrb	r3, [r7, #6]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d9e4      	bls.n	8000e92 <OLED_UpdateDisplayPartial+0x82>
    }

    // 发送数据
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, dataLen + 1, HAL_MAX_DELAY);
 8000ec8:	89bb      	ldrh	r3, [r7, #12]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed2:	9200      	str	r2, [sp, #0]
 8000ed4:	4a06      	ldr	r2, [pc, #24]	@ (8000ef0 <OLED_UpdateDisplayPartial+0xe0>)
 8000ed6:	2178      	movs	r1, #120	@ 0x78
 8000ed8:	4808      	ldr	r0, [pc, #32]	@ (8000efc <OLED_UpdateDisplayPartial+0xec>)
 8000eda:	f003 fcf5 	bl	80048c8 <HAL_I2C_Master_Transmit>
 8000ede:	e000      	b.n	8000ee2 <OLED_UpdateDisplayPartial+0xd2>
        return;
 8000ee0:	bf00      	nop
}
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000184 	.word	0x20000184
 8000eec:	20000180 	.word	0x20000180
 8000ef0:	20000590 	.word	0x20000590
 8000ef4:	20000190 	.word	0x20000190
 8000ef8:	20000188 	.word	0x20000188
 8000efc:	20000090 	.word	0x20000090

08000f00 <OLED_WritePixel>:

void OLED_WritePixel(int16_t x, int16_t y, uint8_t color)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	80bb      	strh	r3, [r7, #4]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	70fb      	strb	r3, [r7, #3]
    // 边界检查
    if (x >= OLED_WIDTH || x < 0 || y >= OLED_HEIGHT || y < 0)
 8000f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f16:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f18:	dc5e      	bgt.n	8000fd8 <OLED_WritePixel+0xd8>
 8000f1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	db5a      	blt.n	8000fd8 <OLED_WritePixel+0xd8>
 8000f22:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f26:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f28:	dc56      	bgt.n	8000fd8 <OLED_WritePixel+0xd8>
 8000f2a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db52      	blt.n	8000fd8 <OLED_WritePixel+0xd8>
        return;

    // 计算像素所在的字节位置
    uint16_t byte_index = x + (y / 8) * OLED_WIDTH;
 8000f32:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	da00      	bge.n	8000f3c <OLED_WritePixel+0x3c>
 8000f3a:	3307      	adds	r3, #7
 8000f3c:	10db      	asrs	r3, r3, #3
 8000f3e:	b21b      	sxth	r3, r3
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	01db      	lsls	r3, r3, #7
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	4413      	add	r3, r2
 8000f4a:	81fb      	strh	r3, [r7, #14]
    uint8_t bit_position = y % 8;
 8000f4c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f50:	425a      	negs	r2, r3
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	f002 0207 	and.w	r2, r2, #7
 8000f5a:	bf58      	it	pl
 8000f5c:	4253      	negpl	r3, r2
 8000f5e:	b21b      	sxth	r3, r3
 8000f60:	737b      	strb	r3, [r7, #13]
    uint8_t page = y / 8; // 计算所在页
 8000f62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	da00      	bge.n	8000f6c <OLED_WritePixel+0x6c>
 8000f6a:	3307      	adds	r3, #7
 8000f6c:	10db      	asrs	r3, r3, #3
 8000f6e:	b21b      	sxth	r3, r3
 8000f70:	733b      	strb	r3, [r7, #12]

    // 记录当前像素值
    uint8_t old_value = OLED_BackBuffer[byte_index];
 8000f72:	89fb      	ldrh	r3, [r7, #14]
 8000f74:	4a1b      	ldr	r2, [pc, #108]	@ (8000fe4 <OLED_WritePixel+0xe4>)
 8000f76:	5cd3      	ldrb	r3, [r2, r3]
 8000f78:	72fb      	strb	r3, [r7, #11]

    if (color) // 如果需要点亮像素
 8000f7a:	78fb      	ldrb	r3, [r7, #3]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00f      	beq.n	8000fa0 <OLED_WritePixel+0xa0>
        OLED_BackBuffer[byte_index] |= (1 << bit_position);
 8000f80:	89fb      	ldrh	r3, [r7, #14]
 8000f82:	4a18      	ldr	r2, [pc, #96]	@ (8000fe4 <OLED_WritePixel+0xe4>)
 8000f84:	5cd3      	ldrb	r3, [r2, r3]
 8000f86:	b25a      	sxtb	r2, r3
 8000f88:	7b7b      	ldrb	r3, [r7, #13]
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	b25a      	sxtb	r2, r3
 8000f96:	89fb      	ldrh	r3, [r7, #14]
 8000f98:	b2d1      	uxtb	r1, r2
 8000f9a:	4a12      	ldr	r2, [pc, #72]	@ (8000fe4 <OLED_WritePixel+0xe4>)
 8000f9c:	54d1      	strb	r1, [r2, r3]
 8000f9e:	e010      	b.n	8000fc2 <OLED_WritePixel+0xc2>
    else // 如果需要熄灭像素
        OLED_BackBuffer[byte_index] &= ~(1 << bit_position);
 8000fa0:	89fb      	ldrh	r3, [r7, #14]
 8000fa2:	4a10      	ldr	r2, [pc, #64]	@ (8000fe4 <OLED_WritePixel+0xe4>)
 8000fa4:	5cd3      	ldrb	r3, [r2, r3]
 8000fa6:	b25a      	sxtb	r2, r3
 8000fa8:	7b7b      	ldrb	r3, [r7, #13]
 8000faa:	2101      	movs	r1, #1
 8000fac:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	b25a      	sxtb	r2, r3
 8000fba:	89fb      	ldrh	r3, [r7, #14]
 8000fbc:	b2d1      	uxtb	r1, r2
 8000fbe:	4a09      	ldr	r2, [pc, #36]	@ (8000fe4 <OLED_WritePixel+0xe4>)
 8000fc0:	54d1      	strb	r1, [r2, r3]

    // 如果像素值发生变化，标记该页为脏
    if (old_value != OLED_BackBuffer[byte_index])
 8000fc2:	89fb      	ldrh	r3, [r7, #14]
 8000fc4:	4a07      	ldr	r2, [pc, #28]	@ (8000fe4 <OLED_WritePixel+0xe4>)
 8000fc6:	5cd3      	ldrb	r3, [r2, r3]
 8000fc8:	7afa      	ldrb	r2, [r7, #11]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d005      	beq.n	8000fda <OLED_WritePixel+0xda>
    {
        oled_dirty_pages[page] = 1;
 8000fce:	7b3b      	ldrb	r3, [r7, #12]
 8000fd0:	4a05      	ldr	r2, [pc, #20]	@ (8000fe8 <OLED_WritePixel+0xe8>)
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	54d1      	strb	r1, [r2, r3]
 8000fd6:	e000      	b.n	8000fda <OLED_WritePixel+0xda>
        return;
 8000fd8:	bf00      	nop
    }
}
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000190 	.word	0x20000190
 8000fe8:	20000188 	.word	0x20000188

08000fec <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8000ffe:	f107 020c 	add.w	r2, r7, #12
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2302      	movs	r3, #2
 800100a:	2178      	movs	r1, #120	@ 0x78
 800100c:	4803      	ldr	r0, [pc, #12]	@ (800101c <OLED_SendCommand+0x30>)
 800100e:	f003 fc5b 	bl	80048c8 <HAL_I2C_Master_Transmit>
}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000090 	.word	0x20000090

08001020 <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 8001024:	2064      	movs	r0, #100	@ 0x64
 8001026:	f002 fec5 	bl	8003db4 <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 800102a:	20ae      	movs	r0, #174	@ 0xae
 800102c:	f7ff ffde 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 8001030:	20d5      	movs	r0, #213	@ 0xd5
 8001032:	f7ff ffdb 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 8001036:	2080      	movs	r0, #128	@ 0x80
 8001038:	f7ff ffd8 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 800103c:	20a8      	movs	r0, #168	@ 0xa8
 800103e:	f7ff ffd5 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 8001042:	203f      	movs	r0, #63	@ 0x3f
 8001044:	f7ff ffd2 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8001048:	20d3      	movs	r0, #211	@ 0xd3
 800104a:	f7ff ffcf 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 800104e:	2000      	movs	r0, #0
 8001050:	f7ff ffcc 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8001054:	2040      	movs	r0, #64	@ 0x40
 8001056:	f7ff ffc9 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 800105a:	208d      	movs	r0, #141	@ 0x8d
 800105c:	f7ff ffc6 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 8001060:	2014      	movs	r0, #20
 8001062:	f7ff ffc3 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 8001066:	2020      	movs	r0, #32
 8001068:	f7ff ffc0 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 800106c:	2000      	movs	r0, #0
 800106e:	f7ff ffbd 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 8001072:	20a1      	movs	r0, #161	@ 0xa1
 8001074:	f7ff ffba 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 8001078:	20c8      	movs	r0, #200	@ 0xc8
 800107a:	f7ff ffb7 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 800107e:	20da      	movs	r0, #218	@ 0xda
 8001080:	f7ff ffb4 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8001084:	2012      	movs	r0, #18
 8001086:	f7ff ffb1 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 800108a:	2081      	movs	r0, #129	@ 0x81
 800108c:	f7ff ffae 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 8001090:	20cf      	movs	r0, #207	@ 0xcf
 8001092:	f7ff ffab 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 8001096:	20d9      	movs	r0, #217	@ 0xd9
 8001098:	f7ff ffa8 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 800109c:	20f1      	movs	r0, #241	@ 0xf1
 800109e:	f7ff ffa5 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 80010a2:	20db      	movs	r0, #219	@ 0xdb
 80010a4:	f7ff ffa2 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 80010a8:	2030      	movs	r0, #48	@ 0x30
 80010aa:	f7ff ff9f 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 80010ae:	20a4      	movs	r0, #164	@ 0xa4
 80010b0:	f7ff ff9c 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 80010b4:	20a6      	movs	r0, #166	@ 0xa6
 80010b6:	f7ff ff99 	bl	8000fec <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 80010ba:	202e      	movs	r0, #46	@ 0x2e
 80010bc:	f7ff ff96 	bl	8000fec <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 80010c0:	f7ff fdd2 	bl	8000c68 <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 80010c4:	f7ff fe04 	bl	8000cd0 <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 80010c8:	20af      	movs	r0, #175	@ 0xaf
 80010ca:	f7ff ff8f 	bl	8000fec <OLED_SendCommand>
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <OLED_InvertArea>:

// 区域反色功能 - 将指定矩形区域内的像素颜色反转 //! UPDATEDISPLAY REQUIRED
void OLED_InvertArea(int16_t x, int16_t y, uint8_t width, uint8_t height)
{
 80010d4:	b490      	push	{r4, r7}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4604      	mov	r4, r0
 80010dc:	4608      	mov	r0, r1
 80010de:	4611      	mov	r1, r2
 80010e0:	461a      	mov	r2, r3
 80010e2:	4623      	mov	r3, r4
 80010e4:	80fb      	strh	r3, [r7, #6]
 80010e6:	4603      	mov	r3, r0
 80010e8:	80bb      	strh	r3, [r7, #4]
 80010ea:	460b      	mov	r3, r1
 80010ec:	70fb      	strb	r3, [r7, #3]
 80010ee:	4613      	mov	r3, r2
 80010f0:	70bb      	strb	r3, [r7, #2]
    if (width == 0 || height == 0)
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 809d 	beq.w	8001234 <OLED_InvertArea+0x160>
 80010fa:	78bb      	ldrb	r3, [r7, #2]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 8099 	beq.w	8001234 <OLED_InvertArea+0x160>
        return;

    int16_t x_start_on_screen = x;
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	83fb      	strh	r3, [r7, #30]
    int16_t y_start_on_screen = y;
 8001106:	88bb      	ldrh	r3, [r7, #4]
 8001108:	83bb      	strh	r3, [r7, #28]
    int16_t x_end_on_screen = x + width - 1;
 800110a:	78fb      	ldrb	r3, [r7, #3]
 800110c:	b29a      	uxth	r2, r3
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	4413      	add	r3, r2
 8001112:	b29b      	uxth	r3, r3
 8001114:	3b01      	subs	r3, #1
 8001116:	b29b      	uxth	r3, r3
 8001118:	837b      	strh	r3, [r7, #26]
    int16_t y_end_on_screen = y + height - 1;
 800111a:	78bb      	ldrb	r3, [r7, #2]
 800111c:	b29a      	uxth	r2, r3
 800111e:	88bb      	ldrh	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	b29b      	uxth	r3, r3
 8001124:	3b01      	subs	r3, #1
 8001126:	b29b      	uxth	r3, r3
 8001128:	833b      	strh	r3, [r7, #24]

    // Clip to screen boundaries
    if (x_start_on_screen < 0)
 800112a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800112e:	2b00      	cmp	r3, #0
 8001130:	da01      	bge.n	8001136 <OLED_InvertArea+0x62>
        x_start_on_screen = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	83fb      	strh	r3, [r7, #30]
    if (y_start_on_screen < 0)
 8001136:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800113a:	2b00      	cmp	r3, #0
 800113c:	da01      	bge.n	8001142 <OLED_InvertArea+0x6e>
        y_start_on_screen = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	83bb      	strh	r3, [r7, #28]
    if (x_end_on_screen >= OLED_WIDTH)
 8001142:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001146:	2b7f      	cmp	r3, #127	@ 0x7f
 8001148:	dd01      	ble.n	800114e <OLED_InvertArea+0x7a>
        x_end_on_screen = OLED_WIDTH - 1;
 800114a:	237f      	movs	r3, #127	@ 0x7f
 800114c:	837b      	strh	r3, [r7, #26]
    if (y_end_on_screen >= OLED_HEIGHT)
 800114e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001152:	2b3f      	cmp	r3, #63	@ 0x3f
 8001154:	dd01      	ble.n	800115a <OLED_InvertArea+0x86>
        y_end_on_screen = OLED_HEIGHT - 1;
 8001156:	233f      	movs	r3, #63	@ 0x3f
 8001158:	833b      	strh	r3, [r7, #24]

    // If clipped area is invalid (e.g., entirely off-screen after clipping)
    if (x_start_on_screen > x_end_on_screen || y_start_on_screen > y_end_on_screen)
 800115a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800115e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001162:	429a      	cmp	r2, r3
 8001164:	dc68      	bgt.n	8001238 <OLED_InvertArea+0x164>
 8001166:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800116a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800116e:	429a      	cmp	r2, r3
 8001170:	dc62      	bgt.n	8001238 <OLED_InvertArea+0x164>
        return;

    // 计算涉及的页范围
    uint8_t start_page = y_start_on_screen / 8;
 8001172:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001176:	2b00      	cmp	r3, #0
 8001178:	da00      	bge.n	800117c <OLED_InvertArea+0xa8>
 800117a:	3307      	adds	r3, #7
 800117c:	10db      	asrs	r3, r3, #3
 800117e:	b21b      	sxth	r3, r3
 8001180:	747b      	strb	r3, [r7, #17]
    uint8_t end_page = y_end_on_screen / 8;
 8001182:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001186:	2b00      	cmp	r3, #0
 8001188:	da00      	bge.n	800118c <OLED_InvertArea+0xb8>
 800118a:	3307      	adds	r3, #7
 800118c:	10db      	asrs	r3, r3, #3
 800118e:	b21b      	sxth	r3, r3
 8001190:	743b      	strb	r3, [r7, #16]

    // 标记受影响的页为脏页
    extern volatile uint8_t oled_dirty_pages[];
    for (uint8_t page = start_page; page <= end_page; page++)
 8001192:	7c7b      	ldrb	r3, [r7, #17]
 8001194:	75fb      	strb	r3, [r7, #23]
 8001196:	e006      	b.n	80011a6 <OLED_InvertArea+0xd2>
    {
        oled_dirty_pages[page] = 1;
 8001198:	7dfb      	ldrb	r3, [r7, #23]
 800119a:	4a2a      	ldr	r2, [pc, #168]	@ (8001244 <OLED_InvertArea+0x170>)
 800119c:	2101      	movs	r1, #1
 800119e:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = start_page; page <= end_page; page++)
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
 80011a2:	3301      	adds	r3, #1
 80011a4:	75fb      	strb	r3, [r7, #23]
 80011a6:	7dfa      	ldrb	r2, [r7, #23]
 80011a8:	7c3b      	ldrb	r3, [r7, #16]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d9f4      	bls.n	8001198 <OLED_InvertArea+0xc4>
    }

    // 优化的像素更新逻辑 - 按行处理以提高缓存命中率
    for (int16_t j = y_start_on_screen; j <= y_end_on_screen; j++)
 80011ae:	8bbb      	ldrh	r3, [r7, #28]
 80011b0:	82bb      	strh	r3, [r7, #20]
 80011b2:	e038      	b.n	8001226 <OLED_InvertArea+0x152>
    {
        uint8_t page = (uint8_t)j / 8;
 80011b4:	8abb      	ldrh	r3, [r7, #20]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	08db      	lsrs	r3, r3, #3
 80011ba:	73fb      	strb	r3, [r7, #15]
        uint8_t bit_position = (uint8_t)j % 8;
 80011bc:	8abb      	ldrh	r3, [r7, #20]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	73bb      	strb	r3, [r7, #14]
        uint16_t byte_index_base = page * OLED_WIDTH;
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	01db      	lsls	r3, r3, #7
 80011cc:	81bb      	strh	r3, [r7, #12]

        // 处理当前行上的所有像素
        for (int16_t i = x_start_on_screen; i <= x_end_on_screen; i++)
 80011ce:	8bfb      	ldrh	r3, [r7, #30]
 80011d0:	827b      	strh	r3, [r7, #18]
 80011d2:	e01c      	b.n	800120e <OLED_InvertArea+0x13a>
        {
            uint16_t byte_index = byte_index_base + i;
 80011d4:	8a7a      	ldrh	r2, [r7, #18]
 80011d6:	89bb      	ldrh	r3, [r7, #12]
 80011d8:	4413      	add	r3, r2
 80011da:	817b      	strh	r3, [r7, #10]

            // 反转位
            if (byte_index < sizeof(OLED_BackBuffer))
 80011dc:	897b      	ldrh	r3, [r7, #10]
 80011de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011e2:	d20e      	bcs.n	8001202 <OLED_InvertArea+0x12e>
            {
                OLED_BackBuffer[byte_index] ^= (1 << bit_position);
 80011e4:	897b      	ldrh	r3, [r7, #10]
 80011e6:	4a18      	ldr	r2, [pc, #96]	@ (8001248 <OLED_InvertArea+0x174>)
 80011e8:	5cd3      	ldrb	r3, [r2, r3]
 80011ea:	b25a      	sxtb	r2, r3
 80011ec:	7bbb      	ldrb	r3, [r7, #14]
 80011ee:	2101      	movs	r1, #1
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	4053      	eors	r3, r2
 80011f8:	b25a      	sxtb	r2, r3
 80011fa:	897b      	ldrh	r3, [r7, #10]
 80011fc:	b2d1      	uxtb	r1, r2
 80011fe:	4a12      	ldr	r2, [pc, #72]	@ (8001248 <OLED_InvertArea+0x174>)
 8001200:	54d1      	strb	r1, [r2, r3]
        for (int16_t i = x_start_on_screen; i <= x_end_on_screen; i++)
 8001202:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001206:	b29b      	uxth	r3, r3
 8001208:	3301      	adds	r3, #1
 800120a:	b29b      	uxth	r3, r3
 800120c:	827b      	strh	r3, [r7, #18]
 800120e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001212:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001216:	429a      	cmp	r2, r3
 8001218:	dddc      	ble.n	80011d4 <OLED_InvertArea+0x100>
    for (int16_t j = y_start_on_screen; j <= y_end_on_screen; j++)
 800121a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800121e:	b29b      	uxth	r3, r3
 8001220:	3301      	adds	r3, #1
 8001222:	b29b      	uxth	r3, r3
 8001224:	82bb      	strh	r3, [r7, #20]
 8001226:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800122a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800122e:	429a      	cmp	r2, r3
 8001230:	ddc0      	ble.n	80011b4 <OLED_InvertArea+0xe0>
 8001232:	e002      	b.n	800123a <OLED_InvertArea+0x166>
        return;
 8001234:	bf00      	nop
 8001236:	e000      	b.n	800123a <OLED_InvertArea+0x166>
        return;
 8001238:	bf00      	nop
            }
        }
    }
}
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	bc90      	pop	{r4, r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000188 	.word	0x20000188
 8001248:	20000190 	.word	0x20000190

0800124c <OLED_DisplayChar>:
    OLED_SendCommand(0x00 + (x & 0x0F));        // 设置低4位列地址
    OLED_SendCommand(0x10 + ((x >> 4) & 0x0F)); // 设置高4位列地址
}

void OLED_DisplayChar(int16_t x, int16_t y, char ch) //! UPDATEDISPLAY REQUIRED
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	@ 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	80fb      	strh	r3, [r7, #6]
 8001256:	460b      	mov	r3, r1
 8001258:	80bb      	strh	r3, [r7, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	70fb      	strb	r3, [r7, #3]
    const uint8_t font_width = 6;
 800125e:	2306      	movs	r3, #6
 8001260:	773b      	strb	r3, [r7, #28]
    const uint8_t font_height = 8;
 8001262:	2308      	movs	r3, #8
 8001264:	76fb      	strb	r3, [r7, #27]

    if (ch < 32)
 8001266:	78fb      	ldrb	r3, [r7, #3]
 8001268:	2b1f      	cmp	r3, #31
 800126a:	f240 80aa 	bls.w	80013c2 <OLED_DisplayChar+0x176>
        return;

    uint8_t c = ch - 32;
 800126e:	78fb      	ldrb	r3, [r7, #3]
 8001270:	3b20      	subs	r3, #32
 8001272:	76bb      	strb	r3, [r7, #26]

    uint8_t start_page = (y >= 0) ? (y / 8) : 0;
 8001274:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db08      	blt.n	800128e <OLED_DisplayChar+0x42>
 800127c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	da00      	bge.n	8001286 <OLED_DisplayChar+0x3a>
 8001284:	3307      	adds	r3, #7
 8001286:	10db      	asrs	r3, r3, #3
 8001288:	b21b      	sxth	r3, r3
 800128a:	b2db      	uxtb	r3, r3
 800128c:	e000      	b.n	8001290 <OLED_DisplayChar+0x44>
 800128e:	2300      	movs	r3, #0
 8001290:	767b      	strb	r3, [r7, #25]
    uint8_t end_page = ((y + font_height - 1) < OLED_HEIGHT) ? ((y + font_height - 1) / 8) : (OLED_HEIGHT / 8 - 1);
 8001292:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001296:	7efb      	ldrb	r3, [r7, #27]
 8001298:	4413      	add	r3, r2
 800129a:	2b40      	cmp	r3, #64	@ 0x40
 800129c:	dc0a      	bgt.n	80012b4 <OLED_DisplayChar+0x68>
 800129e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012a2:	7efb      	ldrb	r3, [r7, #27]
 80012a4:	4413      	add	r3, r2
 80012a6:	3b01      	subs	r3, #1
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	da00      	bge.n	80012ae <OLED_DisplayChar+0x62>
 80012ac:	3307      	adds	r3, #7
 80012ae:	10db      	asrs	r3, r3, #3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	e000      	b.n	80012b6 <OLED_DisplayChar+0x6a>
 80012b4:	2307      	movs	r3, #7
 80012b6:	763b      	strb	r3, [r7, #24]

    extern volatile uint8_t oled_dirty_pages[];
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 80012b8:	7e7b      	ldrb	r3, [r7, #25]
 80012ba:	77fb      	strb	r3, [r7, #31]
 80012bc:	e006      	b.n	80012cc <OLED_DisplayChar+0x80>
    {
        oled_dirty_pages[page] = 1;
 80012be:	7ffb      	ldrb	r3, [r7, #31]
 80012c0:	4a43      	ldr	r2, [pc, #268]	@ (80013d0 <OLED_DisplayChar+0x184>)
 80012c2:	2101      	movs	r1, #1
 80012c4:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 80012c6:	7ffb      	ldrb	r3, [r7, #31]
 80012c8:	3301      	adds	r3, #1
 80012ca:	77fb      	strb	r3, [r7, #31]
 80012cc:	7ffa      	ldrb	r2, [r7, #31]
 80012ce:	7e3b      	ldrb	r3, [r7, #24]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d802      	bhi.n	80012da <OLED_DisplayChar+0x8e>
 80012d4:	7ffb      	ldrb	r3, [r7, #31]
 80012d6:	2b07      	cmp	r3, #7
 80012d8:	d9f1      	bls.n	80012be <OLED_DisplayChar+0x72>
    }
    // 按列渲染
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 80012da:	2300      	movs	r3, #0
 80012dc:	77bb      	strb	r3, [r7, #30]
 80012de:	e06b      	b.n	80013b8 <OLED_DisplayChar+0x16c>
    {
        int16_t screen_x = x + char_col;
 80012e0:	7fbb      	ldrb	r3, [r7, #30]
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	4413      	add	r3, r2
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	82fb      	strh	r3, [r7, #22]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 80012ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	db5d      	blt.n	80013b0 <OLED_DisplayChar+0x164>
 80012f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80012fa:	dc59      	bgt.n	80013b0 <OLED_DisplayChar+0x164>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 80012fc:	7ebb      	ldrb	r3, [r7, #26]
 80012fe:	7f3a      	ldrb	r2, [r7, #28]
 8001300:	fb03 f202 	mul.w	r2, r3, r2
 8001304:	7fbb      	ldrb	r3, [r7, #30]
 8001306:	4413      	add	r3, r2
 8001308:	461a      	mov	r2, r3
 800130a:	f240 2321 	movw	r3, #545	@ 0x221
 800130e:	429a      	cmp	r2, r3
 8001310:	d859      	bhi.n	80013c6 <OLED_DisplayChar+0x17a>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 8001312:	7ebb      	ldrb	r3, [r7, #26]
 8001314:	7f3a      	ldrb	r2, [r7, #28]
 8001316:	fb03 f202 	mul.w	r2, r3, r2
 800131a:	7fbb      	ldrb	r3, [r7, #30]
 800131c:	4413      	add	r3, r2
 800131e:	4a2d      	ldr	r2, [pc, #180]	@ (80013d4 <OLED_DisplayChar+0x188>)
 8001320:	5cd3      	ldrb	r3, [r2, r3]
 8001322:	757b      	strb	r3, [r7, #21]

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8001324:	2300      	movs	r3, #0
 8001326:	777b      	strb	r3, [r7, #29]
 8001328:	e03d      	b.n	80013a6 <OLED_DisplayChar+0x15a>
        {
            int16_t screen_y = y + char_row_bit;
 800132a:	7f7b      	ldrb	r3, [r7, #29]
 800132c:	b29a      	uxth	r2, r3
 800132e:	88bb      	ldrh	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	b29b      	uxth	r3, r3
 8001334:	827b      	strh	r3, [r7, #18]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 8001336:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db2f      	blt.n	800139e <OLED_DisplayChar+0x152>
 800133e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001342:	2b3f      	cmp	r3, #63	@ 0x3f
 8001344:	dc2b      	bgt.n	800139e <OLED_DisplayChar+0x152>
                continue;

            if ((font_data_col >> char_row_bit) & 0x01)
 8001346:	7d7a      	ldrb	r2, [r7, #21]
 8001348:	7f7b      	ldrb	r3, [r7, #29]
 800134a:	fa42 f303 	asr.w	r3, r2, r3
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d024      	beq.n	80013a0 <OLED_DisplayChar+0x154>
            {
                uint8_t page = (uint8_t)screen_y / 8;
 8001356:	8a7b      	ldrh	r3, [r7, #18]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	08db      	lsrs	r3, r3, #3
 800135c:	747b      	strb	r3, [r7, #17]
                uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 800135e:	8a7b      	ldrh	r3, [r7, #18]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	743b      	strb	r3, [r7, #16]
                uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 8001368:	7c7b      	ldrb	r3, [r7, #17]
 800136a:	b29b      	uxth	r3, r3
 800136c:	01db      	lsls	r3, r3, #7
 800136e:	b29a      	uxth	r2, r3
 8001370:	8afb      	ldrh	r3, [r7, #22]
 8001372:	4413      	add	r3, r2
 8001374:	81fb      	strh	r3, [r7, #14]

                if (buffer_index < sizeof(OLED_BackBuffer))
 8001376:	89fb      	ldrh	r3, [r7, #14]
 8001378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800137c:	d210      	bcs.n	80013a0 <OLED_DisplayChar+0x154>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 800137e:	89fb      	ldrh	r3, [r7, #14]
 8001380:	4a15      	ldr	r2, [pc, #84]	@ (80013d8 <OLED_DisplayChar+0x18c>)
 8001382:	5cd3      	ldrb	r3, [r2, r3]
 8001384:	b25a      	sxtb	r2, r3
 8001386:	7c3b      	ldrb	r3, [r7, #16]
 8001388:	2101      	movs	r1, #1
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	b25b      	sxtb	r3, r3
 8001390:	4313      	orrs	r3, r2
 8001392:	b25a      	sxtb	r2, r3
 8001394:	89fb      	ldrh	r3, [r7, #14]
 8001396:	b2d1      	uxtb	r1, r2
 8001398:	4a0f      	ldr	r2, [pc, #60]	@ (80013d8 <OLED_DisplayChar+0x18c>)
 800139a:	54d1      	strb	r1, [r2, r3]
 800139c:	e000      	b.n	80013a0 <OLED_DisplayChar+0x154>
                continue;
 800139e:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 80013a0:	7f7b      	ldrb	r3, [r7, #29]
 80013a2:	3301      	adds	r3, #1
 80013a4:	777b      	strb	r3, [r7, #29]
 80013a6:	7f7a      	ldrb	r2, [r7, #29]
 80013a8:	7efb      	ldrb	r3, [r7, #27]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d3bd      	bcc.n	800132a <OLED_DisplayChar+0xde>
 80013ae:	e000      	b.n	80013b2 <OLED_DisplayChar+0x166>
            continue;
 80013b0:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 80013b2:	7fbb      	ldrb	r3, [r7, #30]
 80013b4:	3301      	adds	r3, #1
 80013b6:	77bb      	strb	r3, [r7, #30]
 80013b8:	7fba      	ldrb	r2, [r7, #30]
 80013ba:	7f3b      	ldrb	r3, [r7, #28]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d38f      	bcc.n	80012e0 <OLED_DisplayChar+0x94>
 80013c0:	e002      	b.n	80013c8 <OLED_DisplayChar+0x17c>
        return;
 80013c2:	bf00      	nop
 80013c4:	e000      	b.n	80013c8 <OLED_DisplayChar+0x17c>
            break;
 80013c6:	bf00      	nop
                }
            }
        }
    }
}
 80013c8:	3724      	adds	r7, #36	@ 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	20000188 	.word	0x20000188
 80013d4:	080086d4 	.word	0x080086d4
 80013d8:	20000190 	.word	0x20000190

080013dc <OLED_DisplayCharInverted>:

void OLED_DisplayCharInverted(int16_t x, int16_t y, char ch, uint8_t inverted) //! UPDATEDISPLAY REQUIRED
{
 80013dc:	b490      	push	{r4, r7}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4604      	mov	r4, r0
 80013e4:	4608      	mov	r0, r1
 80013e6:	4611      	mov	r1, r2
 80013e8:	461a      	mov	r2, r3
 80013ea:	4623      	mov	r3, r4
 80013ec:	80fb      	strh	r3, [r7, #6]
 80013ee:	4603      	mov	r3, r0
 80013f0:	80bb      	strh	r3, [r7, #4]
 80013f2:	460b      	mov	r3, r1
 80013f4:	70fb      	strb	r3, [r7, #3]
 80013f6:	4613      	mov	r3, r2
 80013f8:	70bb      	strb	r3, [r7, #2]
    const uint8_t font_width = 6;
 80013fa:	2306      	movs	r3, #6
 80013fc:	753b      	strb	r3, [r7, #20]
    const uint8_t font_height = 8;
 80013fe:	2308      	movs	r3, #8
 8001400:	74fb      	strb	r3, [r7, #19]

    if (ch < 32)
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	2b1f      	cmp	r3, #31
 8001406:	f240 8090 	bls.w	800152a <OLED_DisplayCharInverted+0x14e>
        return;

    uint8_t c = ch - 32;
 800140a:	78fb      	ldrb	r3, [r7, #3]
 800140c:	3b20      	subs	r3, #32
 800140e:	74bb      	strb	r3, [r7, #18]

    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8001410:	2300      	movs	r3, #0
 8001412:	75fb      	strb	r3, [r7, #23]
 8001414:	e083      	b.n	800151e <OLED_DisplayCharInverted+0x142>
    {
        int16_t screen_x = x + char_col;
 8001416:	7dfb      	ldrb	r3, [r7, #23]
 8001418:	b29a      	uxth	r2, r3
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	4413      	add	r3, r2
 800141e:	b29b      	uxth	r3, r3
 8001420:	823b      	strh	r3, [r7, #16]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 8001422:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001426:	2b00      	cmp	r3, #0
 8001428:	db75      	blt.n	8001516 <OLED_DisplayCharInverted+0x13a>
 800142a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800142e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001430:	dc71      	bgt.n	8001516 <OLED_DisplayCharInverted+0x13a>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 8001432:	7cbb      	ldrb	r3, [r7, #18]
 8001434:	7d3a      	ldrb	r2, [r7, #20]
 8001436:	fb03 f202 	mul.w	r2, r3, r2
 800143a:	7dfb      	ldrb	r3, [r7, #23]
 800143c:	4413      	add	r3, r2
 800143e:	461a      	mov	r2, r3
 8001440:	f240 2321 	movw	r3, #545	@ 0x221
 8001444:	429a      	cmp	r2, r3
 8001446:	d872      	bhi.n	800152e <OLED_DisplayCharInverted+0x152>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 8001448:	7cbb      	ldrb	r3, [r7, #18]
 800144a:	7d3a      	ldrb	r2, [r7, #20]
 800144c:	fb03 f202 	mul.w	r2, r3, r2
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	4413      	add	r3, r2
 8001454:	4a38      	ldr	r2, [pc, #224]	@ (8001538 <OLED_DisplayCharInverted+0x15c>)
 8001456:	5cd3      	ldrb	r3, [r2, r3]
 8001458:	75bb      	strb	r3, [r7, #22]

        if (inverted)
 800145a:	78bb      	ldrb	r3, [r7, #2]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d002      	beq.n	8001466 <OLED_DisplayCharInverted+0x8a>
        {
            font_data_col = ~font_data_col;
 8001460:	7dbb      	ldrb	r3, [r7, #22]
 8001462:	43db      	mvns	r3, r3
 8001464:	75bb      	strb	r3, [r7, #22]
        }

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8001466:	2300      	movs	r3, #0
 8001468:	757b      	strb	r3, [r7, #21]
 800146a:	e04f      	b.n	800150c <OLED_DisplayCharInverted+0x130>
        {
            int16_t screen_y = y + char_row_bit;
 800146c:	7d7b      	ldrb	r3, [r7, #21]
 800146e:	b29a      	uxth	r2, r3
 8001470:	88bb      	ldrh	r3, [r7, #4]
 8001472:	4413      	add	r3, r2
 8001474:	b29b      	uxth	r3, r3
 8001476:	81fb      	strh	r3, [r7, #14]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 8001478:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800147c:	2b00      	cmp	r3, #0
 800147e:	db41      	blt.n	8001504 <OLED_DisplayCharInverted+0x128>
 8001480:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001484:	2b3f      	cmp	r3, #63	@ 0x3f
 8001486:	dc3d      	bgt.n	8001504 <OLED_DisplayCharInverted+0x128>
                continue;

            uint8_t page = (uint8_t)screen_y / 8;
 8001488:	89fb      	ldrh	r3, [r7, #14]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	08db      	lsrs	r3, r3, #3
 800148e:	737b      	strb	r3, [r7, #13]
            uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 8001490:	89fb      	ldrh	r3, [r7, #14]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	733b      	strb	r3, [r7, #12]
            uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 800149a:	7b7b      	ldrb	r3, [r7, #13]
 800149c:	b29b      	uxth	r3, r3
 800149e:	01db      	lsls	r3, r3, #7
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	8a3b      	ldrh	r3, [r7, #16]
 80014a4:	4413      	add	r3, r2
 80014a6:	817b      	strh	r3, [r7, #10]

            if (buffer_index < sizeof(OLED_BackBuffer))
 80014a8:	897b      	ldrh	r3, [r7, #10]
 80014aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014ae:	d22a      	bcs.n	8001506 <OLED_DisplayCharInverted+0x12a>
            {
                if ((font_data_col >> char_row_bit) & 0x01)
 80014b0:	7dba      	ldrb	r2, [r7, #22]
 80014b2:	7d7b      	ldrb	r3, [r7, #21]
 80014b4:	fa42 f303 	asr.w	r3, r2, r3
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00f      	beq.n	80014e0 <OLED_DisplayCharInverted+0x104>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 80014c0:	897b      	ldrh	r3, [r7, #10]
 80014c2:	4a1e      	ldr	r2, [pc, #120]	@ (800153c <OLED_DisplayCharInverted+0x160>)
 80014c4:	5cd3      	ldrb	r3, [r2, r3]
 80014c6:	b25a      	sxtb	r2, r3
 80014c8:	7b3b      	ldrb	r3, [r7, #12]
 80014ca:	2101      	movs	r1, #1
 80014cc:	fa01 f303 	lsl.w	r3, r1, r3
 80014d0:	b25b      	sxtb	r3, r3
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b25a      	sxtb	r2, r3
 80014d6:	897b      	ldrh	r3, [r7, #10]
 80014d8:	b2d1      	uxtb	r1, r2
 80014da:	4a18      	ldr	r2, [pc, #96]	@ (800153c <OLED_DisplayCharInverted+0x160>)
 80014dc:	54d1      	strb	r1, [r2, r3]
 80014de:	e012      	b.n	8001506 <OLED_DisplayCharInverted+0x12a>
                }
                else
                {
                    OLED_BackBuffer[buffer_index] &= ~(1 << bit_offset_in_page);
 80014e0:	897b      	ldrh	r3, [r7, #10]
 80014e2:	4a16      	ldr	r2, [pc, #88]	@ (800153c <OLED_DisplayCharInverted+0x160>)
 80014e4:	5cd3      	ldrb	r3, [r2, r3]
 80014e6:	b25a      	sxtb	r2, r3
 80014e8:	7b3b      	ldrb	r3, [r7, #12]
 80014ea:	2101      	movs	r1, #1
 80014ec:	fa01 f303 	lsl.w	r3, r1, r3
 80014f0:	b25b      	sxtb	r3, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	4013      	ands	r3, r2
 80014f8:	b25a      	sxtb	r2, r3
 80014fa:	897b      	ldrh	r3, [r7, #10]
 80014fc:	b2d1      	uxtb	r1, r2
 80014fe:	4a0f      	ldr	r2, [pc, #60]	@ (800153c <OLED_DisplayCharInverted+0x160>)
 8001500:	54d1      	strb	r1, [r2, r3]
 8001502:	e000      	b.n	8001506 <OLED_DisplayCharInverted+0x12a>
                continue;
 8001504:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8001506:	7d7b      	ldrb	r3, [r7, #21]
 8001508:	3301      	adds	r3, #1
 800150a:	757b      	strb	r3, [r7, #21]
 800150c:	7d7a      	ldrb	r2, [r7, #21]
 800150e:	7cfb      	ldrb	r3, [r7, #19]
 8001510:	429a      	cmp	r2, r3
 8001512:	d3ab      	bcc.n	800146c <OLED_DisplayCharInverted+0x90>
 8001514:	e000      	b.n	8001518 <OLED_DisplayCharInverted+0x13c>
            continue;
 8001516:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8001518:	7dfb      	ldrb	r3, [r7, #23]
 800151a:	3301      	adds	r3, #1
 800151c:	75fb      	strb	r3, [r7, #23]
 800151e:	7dfa      	ldrb	r2, [r7, #23]
 8001520:	7d3b      	ldrb	r3, [r7, #20]
 8001522:	429a      	cmp	r2, r3
 8001524:	f4ff af77 	bcc.w	8001416 <OLED_DisplayCharInverted+0x3a>
 8001528:	e002      	b.n	8001530 <OLED_DisplayCharInverted+0x154>
        return;
 800152a:	bf00      	nop
 800152c:	e000      	b.n	8001530 <OLED_DisplayCharInverted+0x154>
            break;
 800152e:	bf00      	nop
                }
            }
        }
    }
}
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bc90      	pop	{r4, r7}
 8001536:	4770      	bx	lr
 8001538:	080086d4 	.word	0x080086d4
 800153c:	20000190 	.word	0x20000190

08001540 <OLED_DisplayString>:

void OLED_DisplayString(int16_t x, int16_t y, char *str) //! UPDATEDISPLAY REQUIRED
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	603a      	str	r2, [r7, #0]
 800154a:	80fb      	strh	r3, [r7, #6]
 800154c:	460b      	mov	r3, r1
 800154e:	80bb      	strh	r3, [r7, #4]
    uint8_t j = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
    const uint8_t font_width = 6;
 8001554:	2306      	movs	r3, #6
 8001556:	73bb      	strb	r3, [r7, #14]
    const uint8_t font_height = 8;
 8001558:	2308      	movs	r3, #8
 800155a:	737b      	strb	r3, [r7, #13]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 800155c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001560:	2b3f      	cmp	r3, #63	@ 0x3f
 8001562:	dc34      	bgt.n	80015ce <OLED_DisplayString+0x8e>
 8001564:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001568:	7b7b      	ldrb	r3, [r7, #13]
 800156a:	4413      	add	r3, r2
 800156c:	2b00      	cmp	r3, #0
 800156e:	dd2e      	ble.n	80015ce <OLED_DisplayString+0x8e>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 8001570:	e026      	b.n	80015c0 <OLED_DisplayString+0x80>
    {
        current_char_x = x + (j * font_width);
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	b29b      	uxth	r3, r3
 8001576:	7bba      	ldrb	r2, [r7, #14]
 8001578:	b292      	uxth	r2, r2
 800157a:	fb02 f303 	mul.w	r3, r2, r3
 800157e:	b29a      	uxth	r2, r3
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	4413      	add	r3, r2
 8001584:	b29b      	uxth	r3, r3
 8001586:	817b      	strh	r3, [r7, #10]
        if (current_char_x >= OLED_WIDTH)
 8001588:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800158c:	2b7f      	cmp	r3, #127	@ 0x7f
 800158e:	dc20      	bgt.n	80015d2 <OLED_DisplayString+0x92>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 8001590:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001594:	7bbb      	ldrb	r3, [r7, #14]
 8001596:	4413      	add	r3, r2
 8001598:	2b00      	cmp	r3, #0
 800159a:	dc03      	bgt.n	80015a4 <OLED_DisplayString+0x64>
        {
            j++;
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	3301      	adds	r3, #1
 80015a0:	73fb      	strb	r3, [r7, #15]
            continue;
 80015a2:	e00d      	b.n	80015c0 <OLED_DisplayString+0x80>
        }
        OLED_DisplayChar(current_char_x, y, str[j]);
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	4413      	add	r3, r2
 80015aa:	781a      	ldrb	r2, [r3, #0]
 80015ac:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fe49 	bl	800124c <OLED_DisplayChar>
        j++;
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	3301      	adds	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
    while (str[j] != '\0')
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	4413      	add	r3, r2
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1d2      	bne.n	8001572 <OLED_DisplayString+0x32>
 80015cc:	e002      	b.n	80015d4 <OLED_DisplayString+0x94>
        return;
 80015ce:	bf00      	nop
 80015d0:	e000      	b.n	80015d4 <OLED_DisplayString+0x94>
            break;
 80015d2:	bf00      	nop
    }
}
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <OLED_DisplayStringInverted>:

void OLED_DisplayStringInverted(int16_t x, int16_t y, char *str, uint8_t inverted) //! UPDATEDISPLAY REQUIRED
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	60ba      	str	r2, [r7, #8]
 80015e2:	461a      	mov	r2, r3
 80015e4:	4603      	mov	r3, r0
 80015e6:	81fb      	strh	r3, [r7, #14]
 80015e8:	460b      	mov	r3, r1
 80015ea:	81bb      	strh	r3, [r7, #12]
 80015ec:	4613      	mov	r3, r2
 80015ee:	71fb      	strb	r3, [r7, #7]
    uint8_t j = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	75fb      	strb	r3, [r7, #23]
    const uint8_t font_width = 6;
 80015f4:	2306      	movs	r3, #6
 80015f6:	75bb      	strb	r3, [r7, #22]
    const uint8_t font_height = 8;
 80015f8:	2308      	movs	r3, #8
 80015fa:	757b      	strb	r3, [r7, #21]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 80015fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001600:	2b3f      	cmp	r3, #63	@ 0x3f
 8001602:	dc34      	bgt.n	800166e <OLED_DisplayStringInverted+0x94>
 8001604:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001608:	7d7b      	ldrb	r3, [r7, #21]
 800160a:	4413      	add	r3, r2
 800160c:	2b00      	cmp	r3, #0
 800160e:	dd2e      	ble.n	800166e <OLED_DisplayStringInverted+0x94>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 8001610:	e026      	b.n	8001660 <OLED_DisplayStringInverted+0x86>
    {
        current_char_x = x + (j * font_width);
 8001612:	7dfb      	ldrb	r3, [r7, #23]
 8001614:	b29b      	uxth	r3, r3
 8001616:	7dba      	ldrb	r2, [r7, #22]
 8001618:	b292      	uxth	r2, r2
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	b29a      	uxth	r2, r3
 8001620:	89fb      	ldrh	r3, [r7, #14]
 8001622:	4413      	add	r3, r2
 8001624:	b29b      	uxth	r3, r3
 8001626:	827b      	strh	r3, [r7, #18]
        if (current_char_x >= OLED_WIDTH)
 8001628:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800162c:	2b7f      	cmp	r3, #127	@ 0x7f
 800162e:	dc20      	bgt.n	8001672 <OLED_DisplayStringInverted+0x98>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 8001630:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001634:	7dbb      	ldrb	r3, [r7, #22]
 8001636:	4413      	add	r3, r2
 8001638:	2b00      	cmp	r3, #0
 800163a:	dc03      	bgt.n	8001644 <OLED_DisplayStringInverted+0x6a>
        {
            j++;
 800163c:	7dfb      	ldrb	r3, [r7, #23]
 800163e:	3301      	adds	r3, #1
 8001640:	75fb      	strb	r3, [r7, #23]
            continue;
 8001642:	e00d      	b.n	8001660 <OLED_DisplayStringInverted+0x86>
        }
        OLED_DisplayCharInverted(current_char_x, y, str[j], inverted);
 8001644:	7dfb      	ldrb	r3, [r7, #23]
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	4413      	add	r3, r2
 800164a:	781a      	ldrb	r2, [r3, #0]
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001652:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8001656:	f7ff fec1 	bl	80013dc <OLED_DisplayCharInverted>
        j++;
 800165a:	7dfb      	ldrb	r3, [r7, #23]
 800165c:	3301      	adds	r3, #1
 800165e:	75fb      	strb	r3, [r7, #23]
    while (str[j] != '\0')
 8001660:	7dfb      	ldrb	r3, [r7, #23]
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	4413      	add	r3, r2
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1d2      	bne.n	8001612 <OLED_DisplayStringInverted+0x38>
 800166c:	e002      	b.n	8001674 <OLED_DisplayStringInverted+0x9a>
        return;
 800166e:	bf00      	nop
 8001670:	e000      	b.n	8001674 <OLED_DisplayStringInverted+0x9a>
            break;
 8001672:	bf00      	nop
    }
}
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <OLED_DisplayInteger>:

void OLED_DisplayInteger(int16_t x, int16_t y, int number) //! UPDATEDISPLAY REQUIRED
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	603a      	str	r2, [r7, #0]
 8001686:	80fb      	strh	r3, [r7, #6]
 8001688:	460b      	mov	r3, r1
 800168a:	80bb      	strh	r3, [r7, #4]
    char str[12];
    sprintf(str, "%d", number);
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	4908      	ldr	r1, [pc, #32]	@ (80016b4 <OLED_DisplayInteger+0x38>)
 8001694:	4618      	mov	r0, r3
 8001696:	f005 f853 	bl	8006740 <siprintf>
    OLED_DisplayString(x, y, str);
 800169a:	f107 020c 	add.w	r2, r7, #12
 800169e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80016a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff4a 	bl	8001540 <OLED_DisplayString>
}
 80016ac:	bf00      	nop
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	08008598 	.word	0x08008598

080016b8 <System_UI_Loop>:
#define OLED_UI_GAP_Y 9 + 13
#define StartTweenTime 3000
#define TweenStyle EASE_INOUT_ELASTIC

void System_UI_Loop()
{
 80016b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ba:	b089      	sub	sp, #36	@ 0x24
 80016bc:	af04      	add	r7, sp, #16
    static bool isFirstRun = true;  
    float x, y, x1, y1;
    if (isFirstRun)
 80016be:	4ba9      	ldr	r3, [pc, #676]	@ (8001964 <System_UI_Loop+0x2ac>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 80c6 	beq.w	8001854 <System_UI_Loop+0x19c>
    {
        OLED_MoveObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 80016c8:	230f      	movs	r3, #15
 80016ca:	9303      	str	r3, [sp, #12]
 80016cc:	2301      	movs	r3, #1
 80016ce:	9302      	str	r3, [sp, #8]
 80016d0:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	4ba4      	ldr	r3, [pc, #656]	@ (8001968 <System_UI_Loop+0x2b0>)
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80016de:	4aa2      	ldr	r2, [pc, #648]	@ (8001968 <System_UI_Loop+0x2b0>)
 80016e0:	49a2      	ldr	r1, [pc, #648]	@ (800196c <System_UI_Loop+0x2b4>)
 80016e2:	48a3      	ldr	r0, [pc, #652]	@ (8001970 <System_UI_Loop+0x2b8>)
 80016e4:	f001 fdd1 	bl	800328a <OLED_MoveObject>
        OLED_MoveObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 80016e8:	230f      	movs	r3, #15
 80016ea:	9303      	str	r3, [sp, #12]
 80016ec:	2301      	movs	r3, #1
 80016ee:	9302      	str	r3, [sp, #8]
 80016f0:	4ba0      	ldr	r3, [pc, #640]	@ (8001974 <System_UI_Loop+0x2bc>)
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	4b9c      	ldr	r3, [pc, #624]	@ (8001968 <System_UI_Loop+0x2b0>)
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	4b9e      	ldr	r3, [pc, #632]	@ (8001974 <System_UI_Loop+0x2bc>)
 80016fa:	4a9b      	ldr	r2, [pc, #620]	@ (8001968 <System_UI_Loop+0x2b0>)
 80016fc:	499e      	ldr	r1, [pc, #632]	@ (8001978 <System_UI_Loop+0x2c0>)
 80016fe:	489c      	ldr	r0, [pc, #624]	@ (8001970 <System_UI_Loop+0x2b8>)
 8001700:	f001 fdc3 	bl	800328a <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, TweenStyle);
 8001704:	230f      	movs	r3, #15
 8001706:	9303      	str	r3, [sp, #12]
 8001708:	2301      	movs	r3, #1
 800170a:	9302      	str	r3, [sp, #8]
 800170c:	4b9b      	ldr	r3, [pc, #620]	@ (800197c <System_UI_Loop+0x2c4>)
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	4b95      	ldr	r3, [pc, #596]	@ (8001968 <System_UI_Loop+0x2b0>)
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	4b99      	ldr	r3, [pc, #612]	@ (800197c <System_UI_Loop+0x2c4>)
 8001716:	4a94      	ldr	r2, [pc, #592]	@ (8001968 <System_UI_Loop+0x2b0>)
 8001718:	4999      	ldr	r1, [pc, #612]	@ (8001980 <System_UI_Loop+0x2c8>)
 800171a:	489a      	ldr	r0, [pc, #616]	@ (8001984 <System_UI_Loop+0x2cc>)
 800171c:	f001 fdb5 	bl	800328a <OLED_MoveObject>

        #pragma region 主菜单动画
        OLED_MoveObject(&g_AnimationManager, "Cursor", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * menuSelection, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * menuSelection, StartTweenTime, TweenStyle);
 8001720:	4b99      	ldr	r3, [pc, #612]	@ (8001988 <System_UI_Loop+0x2d0>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4613      	mov	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4413      	add	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	3303      	adds	r3, #3
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fdd6 	bl	80002e4 <__aeabi_i2f>
 8001738:	4604      	mov	r4, r0
 800173a:	4b93      	ldr	r3, [pc, #588]	@ (8001988 <System_UI_Loop+0x2d0>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	3303      	adds	r3, #3
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fdc9 	bl	80002e4 <__aeabi_i2f>
 8001752:	4603      	mov	r3, r0
 8001754:	220f      	movs	r2, #15
 8001756:	9203      	str	r2, [sp, #12]
 8001758:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800175c:	9202      	str	r2, [sp, #8]
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	4623      	mov	r3, r4
 8001768:	4a7f      	ldr	r2, [pc, #508]	@ (8001968 <System_UI_Loop+0x2b0>)
 800176a:	4988      	ldr	r1, [pc, #544]	@ (800198c <System_UI_Loop+0x2d4>)
 800176c:	4885      	ldr	r0, [pc, #532]	@ (8001984 <System_UI_Loop+0x2cc>)
 800176e:	f001 fd8c 	bl	800328a <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "CursorScale",  0, 10, strlen("Games")*6+ 3, 10 , StartTweenTime, TweenStyle);
 8001772:	230f      	movs	r3, #15
 8001774:	9303      	str	r3, [sp, #12]
 8001776:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800177a:	9302      	str	r3, [sp, #8]
 800177c:	4b84      	ldr	r3, [pc, #528]	@ (8001990 <System_UI_Loop+0x2d8>)
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	4b84      	ldr	r3, [pc, #528]	@ (8001994 <System_UI_Loop+0x2dc>)
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	4b82      	ldr	r3, [pc, #520]	@ (8001990 <System_UI_Loop+0x2d8>)
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	4983      	ldr	r1, [pc, #524]	@ (8001998 <System_UI_Loop+0x2e0>)
 800178c:	487d      	ldr	r0, [pc, #500]	@ (8001984 <System_UI_Loop+0x2cc>)
 800178e:	f001 fd7c 	bl	800328a <OLED_MoveObject>
        OLED_MoveObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, StartTweenTime, TweenStyle);
 8001792:	230f      	movs	r3, #15
 8001794:	9303      	str	r3, [sp, #12]
 8001796:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800179a:	9302      	str	r3, [sp, #8]
 800179c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80017ac:	4a6e      	ldr	r2, [pc, #440]	@ (8001968 <System_UI_Loop+0x2b0>)
 80017ae:	497b      	ldr	r1, [pc, #492]	@ (800199c <System_UI_Loop+0x2e4>)
 80017b0:	487b      	ldr	r0, [pc, #492]	@ (80019a0 <System_UI_Loop+0x2e8>)
 80017b2:	f001 fd6a 	bl	800328a <OLED_MoveObject>
        HAL_Delay(100);
 80017b6:	2064      	movs	r0, #100	@ 0x64
 80017b8:	f002 fafc 	bl	8003db4 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, StartTweenTime, TweenStyle);
 80017bc:	230f      	movs	r3, #15
 80017be:	9303      	str	r3, [sp, #12]
 80017c0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80017c4:	9302      	str	r3, [sp, #8]
 80017c6:	4b6b      	ldr	r3, [pc, #428]	@ (8001974 <System_UI_Loop+0x2bc>)
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	4b68      	ldr	r3, [pc, #416]	@ (8001974 <System_UI_Loop+0x2bc>)
 80017d2:	4a65      	ldr	r2, [pc, #404]	@ (8001968 <System_UI_Loop+0x2b0>)
 80017d4:	4973      	ldr	r1, [pc, #460]	@ (80019a4 <System_UI_Loop+0x2ec>)
 80017d6:	4872      	ldr	r0, [pc, #456]	@ (80019a0 <System_UI_Loop+0x2e8>)
 80017d8:	f001 fd57 	bl	800328a <OLED_MoveObject>
        HAL_Delay(100);
 80017dc:	2064      	movs	r0, #100	@ 0x64
 80017de:	f002 fae9 	bl	8003db4 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, StartTweenTime, TweenStyle);
 80017e2:	230f      	movs	r3, #15
 80017e4:	9303      	str	r3, [sp, #12]
 80017e6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80017ea:	9302      	str	r3, [sp, #8]
 80017ec:	4b63      	ldr	r3, [pc, #396]	@ (800197c <System_UI_Loop+0x2c4>)
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	4b61      	ldr	r3, [pc, #388]	@ (800197c <System_UI_Loop+0x2c4>)
 80017f8:	4a5b      	ldr	r2, [pc, #364]	@ (8001968 <System_UI_Loop+0x2b0>)
 80017fa:	496b      	ldr	r1, [pc, #428]	@ (80019a8 <System_UI_Loop+0x2f0>)
 80017fc:	4868      	ldr	r0, [pc, #416]	@ (80019a0 <System_UI_Loop+0x2e8>)
 80017fe:	f001 fd44 	bl	800328a <OLED_MoveObject>
        HAL_Delay(100);
 8001802:	2064      	movs	r0, #100	@ 0x64
 8001804:	f002 fad6 	bl	8003db4 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, StartTweenTime, TweenStyle);
 8001808:	230f      	movs	r3, #15
 800180a:	9303      	str	r3, [sp, #12]
 800180c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001810:	9302      	str	r3, [sp, #8]
 8001812:	4b66      	ldr	r3, [pc, #408]	@ (80019ac <System_UI_Loop+0x2f4>)
 8001814:	9301      	str	r3, [sp, #4]
 8001816:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	4b63      	ldr	r3, [pc, #396]	@ (80019ac <System_UI_Loop+0x2f4>)
 800181e:	4a52      	ldr	r2, [pc, #328]	@ (8001968 <System_UI_Loop+0x2b0>)
 8001820:	4963      	ldr	r1, [pc, #396]	@ (80019b0 <System_UI_Loop+0x2f8>)
 8001822:	485f      	ldr	r0, [pc, #380]	@ (80019a0 <System_UI_Loop+0x2e8>)
 8001824:	f001 fd31 	bl	800328a <OLED_MoveObject>
        HAL_Delay(100);
 8001828:	2064      	movs	r0, #100	@ 0x64
 800182a:	f002 fac3 	bl	8003db4 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, StartTweenTime, TweenStyle);
 800182e:	230f      	movs	r3, #15
 8001830:	9303      	str	r3, [sp, #12]
 8001832:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	4b5e      	ldr	r3, [pc, #376]	@ (80019b4 <System_UI_Loop+0x2fc>)
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	4b5c      	ldr	r3, [pc, #368]	@ (80019b4 <System_UI_Loop+0x2fc>)
 8001844:	4a48      	ldr	r2, [pc, #288]	@ (8001968 <System_UI_Loop+0x2b0>)
 8001846:	495c      	ldr	r1, [pc, #368]	@ (80019b8 <System_UI_Loop+0x300>)
 8001848:	4855      	ldr	r0, [pc, #340]	@ (80019a0 <System_UI_Loop+0x2e8>)
 800184a:	f001 fd1e 	bl	800328a <OLED_MoveObject>
        #pragma endregion 主菜单动画

        isFirstRun = false;
 800184e:	4b45      	ldr	r3, [pc, #276]	@ (8001964 <System_UI_Loop+0x2ac>)
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
    }

    #pragma region pager

    if (menuRank == 1)
 8001854:	4b59      	ldr	r3, [pc, #356]	@ (80019bc <System_UI_Loop+0x304>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b01      	cmp	r3, #1
 800185a:	f040 80b1 	bne.w	80019c0 <System_UI_Loop+0x308>
    {
        OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton",    OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 200, EASE_IN_CIRC, true);
 800185e:	4b4a      	ldr	r3, [pc, #296]	@ (8001988 <System_UI_Loop+0x2d0>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	f1c3 0202 	rsb	r2, r3, #2
 8001866:	4613      	mov	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	3303      	adds	r3, #3
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fd36 	bl	80002e4 <__aeabi_i2f>
 8001878:	4603      	mov	r3, r0
 800187a:	2201      	movs	r2, #1
 800187c:	9202      	str	r2, [sp, #8]
 800187e:	220a      	movs	r2, #10
 8001880:	9201      	str	r2, [sp, #4]
 8001882:	22c8      	movs	r2, #200	@ 0xc8
 8001884:	9200      	str	r2, [sp, #0]
 8001886:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800188a:	4944      	ldr	r1, [pc, #272]	@ (800199c <System_UI_Loop+0x2e4>)
 800188c:	4844      	ldr	r0, [pc, #272]	@ (80019a0 <System_UI_Loop+0x2e8>)
 800188e:	f001 fd9d 	bl	80033cc <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton",    OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 200, EASE_IN_CIRC, true);
 8001892:	4b3d      	ldr	r3, [pc, #244]	@ (8001988 <System_UI_Loop+0x2d0>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	f1c3 0203 	rsb	r2, r3, #3
 800189a:	4613      	mov	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4413      	add	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	3303      	adds	r3, #3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fd1c 	bl	80002e4 <__aeabi_i2f>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2201      	movs	r2, #1
 80018b0:	9202      	str	r2, [sp, #8]
 80018b2:	220a      	movs	r2, #10
 80018b4:	9201      	str	r2, [sp, #4]
 80018b6:	22c8      	movs	r2, #200	@ 0xc8
 80018b8:	9200      	str	r2, [sp, #0]
 80018ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018be:	4939      	ldr	r1, [pc, #228]	@ (80019a4 <System_UI_Loop+0x2ec>)
 80018c0:	4837      	ldr	r0, [pc, #220]	@ (80019a0 <System_UI_Loop+0x2e8>)
 80018c2:	f001 fd83 	bl	80033cc <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton",   OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 200, EASE_IN_CIRC, true);
 80018c6:	4b30      	ldr	r3, [pc, #192]	@ (8001988 <System_UI_Loop+0x2d0>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	f1c3 0204 	rsb	r2, r3, #4
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	3303      	adds	r3, #3
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fd02 	bl	80002e4 <__aeabi_i2f>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2201      	movs	r2, #1
 80018e4:	9202      	str	r2, [sp, #8]
 80018e6:	220a      	movs	r2, #10
 80018e8:	9201      	str	r2, [sp, #4]
 80018ea:	22c8      	movs	r2, #200	@ 0xc8
 80018ec:	9200      	str	r2, [sp, #0]
 80018ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018f2:	492d      	ldr	r1, [pc, #180]	@ (80019a8 <System_UI_Loop+0x2f0>)
 80018f4:	482a      	ldr	r0, [pc, #168]	@ (80019a0 <System_UI_Loop+0x2e8>)
 80018f6:	f001 fd69 	bl	80033cc <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), 200, EASE_IN_CIRC, true);
 80018fa:	4b23      	ldr	r3, [pc, #140]	@ (8001988 <System_UI_Loop+0x2d0>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	f1c3 0205 	rsb	r2, r3, #5
 8001902:	4613      	mov	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4413      	add	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	3303      	adds	r3, #3
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fce8 	bl	80002e4 <__aeabi_i2f>
 8001914:	4603      	mov	r3, r0
 8001916:	2201      	movs	r2, #1
 8001918:	9202      	str	r2, [sp, #8]
 800191a:	220a      	movs	r2, #10
 800191c:	9201      	str	r2, [sp, #4]
 800191e:	22c8      	movs	r2, #200	@ 0xc8
 8001920:	9200      	str	r2, [sp, #0]
 8001922:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001926:	4922      	ldr	r1, [pc, #136]	@ (80019b0 <System_UI_Loop+0x2f8>)
 8001928:	481d      	ldr	r0, [pc, #116]	@ (80019a0 <System_UI_Loop+0x2e8>)
 800192a:	f001 fd4f 	bl	80033cc <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton",    OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), 200, EASE_IN_CIRC, true);
 800192e:	4b16      	ldr	r3, [pc, #88]	@ (8001988 <System_UI_Loop+0x2d0>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	f1c3 0206 	rsb	r2, r3, #6
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	3303      	adds	r3, #3
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fcce 	bl	80002e4 <__aeabi_i2f>
 8001948:	4603      	mov	r3, r0
 800194a:	2201      	movs	r2, #1
 800194c:	9202      	str	r2, [sp, #8]
 800194e:	220a      	movs	r2, #10
 8001950:	9201      	str	r2, [sp, #4]
 8001952:	22c8      	movs	r2, #200	@ 0xc8
 8001954:	9200      	str	r2, [sp, #0]
 8001956:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800195a:	4917      	ldr	r1, [pc, #92]	@ (80019b8 <System_UI_Loop+0x300>)
 800195c:	4810      	ldr	r0, [pc, #64]	@ (80019a0 <System_UI_Loop+0x2e8>)
 800195e:	f001 fd35 	bl	80033cc <OLED_DoTweenObject>
 8001962:	e0b0      	b.n	8001ac6 <System_UI_Loop+0x40e>
 8001964:	20000002 	.word	0x20000002
 8001968:	c2b40000 	.word	0xc2b40000
 800196c:	080085ac 	.word	0x080085ac
 8001970:	20001398 	.word	0x20001398
 8001974:	41e80000 	.word	0x41e80000
 8001978:	080085b4 	.word	0x080085b4
 800197c:	42280000 	.word	0x42280000
 8001980:	080085bc 	.word	0x080085bc
 8001984:	20003750 	.word	0x20003750
 8001988:	20000001 	.word	0x20000001
 800198c:	080085c8 	.word	0x080085c8
 8001990:	41200000 	.word	0x41200000
 8001994:	42040000 	.word	0x42040000
 8001998:	080085d0 	.word	0x080085d0
 800199c:	080085dc 	.word	0x080085dc
 80019a0:	20000da4 	.word	0x20000da4
 80019a4:	080085e8 	.word	0x080085e8
 80019a8:	080085f4 	.word	0x080085f4
 80019ac:	425c0000 	.word	0x425c0000
 80019b0:	08008604 	.word	0x08008604
 80019b4:	42880000 	.word	0x42880000
 80019b8:	08008614 	.word	0x08008614
 80019bc:	20000000 	.word	0x20000000
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_GAMES)
 80019c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a70 <System_UI_Loop+0x3b8>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d17e      	bne.n	8001ac6 <System_UI_Loop+0x40e>
 80019c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001a74 <System_UI_Loop+0x3bc>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	d15f      	bne.n	8001a90 <System_UI_Loop+0x3d8>
    {
        OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 200, EASE_IN_CIRC, true);
 80019d0:	4b29      	ldr	r3, [pc, #164]	@ (8001a78 <System_UI_Loop+0x3c0>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	f1c3 0202 	rsb	r2, r3, #2
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	3303      	adds	r3, #3
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fc7d 	bl	80002e4 <__aeabi_i2f>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2201      	movs	r2, #1
 80019ee:	9202      	str	r2, [sp, #8]
 80019f0:	220a      	movs	r2, #10
 80019f2:	9201      	str	r2, [sp, #4]
 80019f4:	22c8      	movs	r2, #200	@ 0xc8
 80019f6:	9200      	str	r2, [sp, #0]
 80019f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019fc:	491f      	ldr	r1, [pc, #124]	@ (8001a7c <System_UI_Loop+0x3c4>)
 80019fe:	4820      	ldr	r0, [pc, #128]	@ (8001a80 <System_UI_Loop+0x3c8>)
 8001a00:	f001 fce4 	bl	80033cc <OLED_DoTweenObject>
        OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 200, EASE_IN_CIRC, true);
 8001a04:	4b1c      	ldr	r3, [pc, #112]	@ (8001a78 <System_UI_Loop+0x3c0>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	f1c3 0203 	rsb	r2, r3, #3
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	3303      	adds	r3, #3
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fc63 	bl	80002e4 <__aeabi_i2f>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2201      	movs	r2, #1
 8001a22:	9202      	str	r2, [sp, #8]
 8001a24:	220a      	movs	r2, #10
 8001a26:	9201      	str	r2, [sp, #4]
 8001a28:	22c8      	movs	r2, #200	@ 0xc8
 8001a2a:	9200      	str	r2, [sp, #0]
 8001a2c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a30:	4914      	ldr	r1, [pc, #80]	@ (8001a84 <System_UI_Loop+0x3cc>)
 8001a32:	4813      	ldr	r0, [pc, #76]	@ (8001a80 <System_UI_Loop+0x3c8>)
 8001a34:	f001 fcca 	bl	80033cc <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 200, EASE_IN_CIRC, true);
 8001a38:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <System_UI_Loop+0x3c0>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	f1c3 0204 	rsb	r2, r3, #4
 8001a40:	4613      	mov	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	3303      	adds	r3, #3
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fc49 	bl	80002e4 <__aeabi_i2f>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2201      	movs	r2, #1
 8001a56:	9202      	str	r2, [sp, #8]
 8001a58:	220a      	movs	r2, #10
 8001a5a:	9201      	str	r2, [sp, #4]
 8001a5c:	22c8      	movs	r2, #200	@ 0xc8
 8001a5e:	9200      	str	r2, [sp, #0]
 8001a60:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a64:	4908      	ldr	r1, [pc, #32]	@ (8001a88 <System_UI_Loop+0x3d0>)
 8001a66:	4809      	ldr	r0, [pc, #36]	@ (8001a8c <System_UI_Loop+0x3d4>)
 8001a68:	f001 fcb0 	bl	80033cc <OLED_DoTweenObject>
 8001a6c:	e02b      	b.n	8001ac6 <System_UI_Loop+0x40e>
 8001a6e:	bf00      	nop
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000991 	.word	0x20000991
 8001a78:	20000001 	.word	0x20000001
 8001a7c:	080085ac 	.word	0x080085ac
 8001a80:	20001398 	.word	0x20001398
 8001a84:	080085b4 	.word	0x080085b4
 8001a88:	080085bc 	.word	0x080085bc
 8001a8c:	20003750 	.word	0x20003750
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_SETTINGS)
 8001a90:	4bb0      	ldr	r3, [pc, #704]	@ (8001d54 <System_UI_Loop+0x69c>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d116      	bne.n	8001ac6 <System_UI_Loop+0x40e>
 8001a98:	4baf      	ldr	r3, [pc, #700]	@ (8001d58 <System_UI_Loop+0x6a0>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d012      	beq.n	8001ac6 <System_UI_Loop+0x40e>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_STATUS)
 8001aa0:	4bac      	ldr	r3, [pc, #688]	@ (8001d54 <System_UI_Loop+0x69c>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d10e      	bne.n	8001ac6 <System_UI_Loop+0x40e>
 8001aa8:	4bab      	ldr	r3, [pc, #684]	@ (8001d58 <System_UI_Loop+0x6a0>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d00a      	beq.n	8001ac6 <System_UI_Loop+0x40e>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_ABOUT)
 8001ab0:	4ba8      	ldr	r3, [pc, #672]	@ (8001d54 <System_UI_Loop+0x69c>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d106      	bne.n	8001ac6 <System_UI_Loop+0x40e>
 8001ab8:	4ba7      	ldr	r3, [pc, #668]	@ (8001d58 <System_UI_Loop+0x6a0>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d002      	beq.n	8001ac6 <System_UI_Loop+0x40e>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_TOOLS)
 8001ac0:	4ba4      	ldr	r3, [pc, #656]	@ (8001d54 <System_UI_Loop+0x69c>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b02      	cmp	r3, #2


    #pragma endregion pager

    #pragma region DRAWER
    OLED_GetObjectPosition(&Menu_AnimationManager, "SettingsButton", &x, &y);
 8001ac6:	f107 0308 	add.w	r3, r7, #8
 8001aca:	f107 020c 	add.w	r2, r7, #12
 8001ace:	49a3      	ldr	r1, [pc, #652]	@ (8001d5c <System_UI_Loop+0x6a4>)
 8001ad0:	48a3      	ldr	r0, [pc, #652]	@ (8001d60 <System_UI_Loop+0x6a8>)
 8001ad2:	f001 fbb6 	bl	8003242 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Settings");
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fe33 	bl	8000744 <__aeabi_f2iz>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	b21c      	sxth	r4, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fe2d 	bl	8000744 <__aeabi_f2iz>
 8001aea:	4603      	mov	r3, r0
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	4a9d      	ldr	r2, [pc, #628]	@ (8001d64 <System_UI_Loop+0x6ac>)
 8001af0:	4619      	mov	r1, r3
 8001af2:	4620      	mov	r0, r4
 8001af4:	f7ff fd24 	bl	8001540 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "StatusButton", &x, &y);
 8001af8:	f107 0308 	add.w	r3, r7, #8
 8001afc:	f107 020c 	add.w	r2, r7, #12
 8001b00:	4999      	ldr	r1, [pc, #612]	@ (8001d68 <System_UI_Loop+0x6b0>)
 8001b02:	4897      	ldr	r0, [pc, #604]	@ (8001d60 <System_UI_Loop+0x6a8>)
 8001b04:	f001 fb9d 	bl	8003242 <OLED_GetObjectPosition>
    OLED_DisplayString(x , y, "Status");
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fe1a 	bl	8000744 <__aeabi_f2iz>
 8001b10:	4603      	mov	r3, r0
 8001b12:	b21c      	sxth	r4, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fe14 	bl	8000744 <__aeabi_f2iz>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	b21b      	sxth	r3, r3
 8001b20:	4a92      	ldr	r2, [pc, #584]	@ (8001d6c <System_UI_Loop+0x6b4>)
 8001b22:	4619      	mov	r1, r3
 8001b24:	4620      	mov	r0, r4
 8001b26:	f7ff fd0b 	bl	8001540 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "GamesButton", &x, &y);
 8001b2a:	f107 0308 	add.w	r3, r7, #8
 8001b2e:	f107 020c 	add.w	r2, r7, #12
 8001b32:	498f      	ldr	r1, [pc, #572]	@ (8001d70 <System_UI_Loop+0x6b8>)
 8001b34:	488a      	ldr	r0, [pc, #552]	@ (8001d60 <System_UI_Loop+0x6a8>)
 8001b36:	f001 fb84 	bl	8003242 <OLED_GetObjectPosition>
    OLED_DisplayString(x , y, "Games");
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fe01 	bl	8000744 <__aeabi_f2iz>
 8001b42:	4603      	mov	r3, r0
 8001b44:	b21c      	sxth	r4, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fdfb 	bl	8000744 <__aeabi_f2iz>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	b21b      	sxth	r3, r3
 8001b52:	4a88      	ldr	r2, [pc, #544]	@ (8001d74 <System_UI_Loop+0x6bc>)
 8001b54:	4619      	mov	r1, r3
 8001b56:	4620      	mov	r0, r4
 8001b58:	f7ff fcf2 	bl	8001540 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "AboutButton", &x, &y);
 8001b5c:	f107 0308 	add.w	r3, r7, #8
 8001b60:	f107 020c 	add.w	r2, r7, #12
 8001b64:	4984      	ldr	r1, [pc, #528]	@ (8001d78 <System_UI_Loop+0x6c0>)
 8001b66:	487e      	ldr	r0, [pc, #504]	@ (8001d60 <System_UI_Loop+0x6a8>)
 8001b68:	f001 fb6b 	bl	8003242 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "About");
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fde8 	bl	8000744 <__aeabi_f2iz>
 8001b74:	4603      	mov	r3, r0
 8001b76:	b21c      	sxth	r4, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fde2 	bl	8000744 <__aeabi_f2iz>
 8001b80:	4603      	mov	r3, r0
 8001b82:	b21b      	sxth	r3, r3
 8001b84:	4a7d      	ldr	r2, [pc, #500]	@ (8001d7c <System_UI_Loop+0x6c4>)
 8001b86:	4619      	mov	r1, r3
 8001b88:	4620      	mov	r0, r4
 8001b8a:	f7ff fcd9 	bl	8001540 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "ToolsButton", &x, &y);
 8001b8e:	f107 0308 	add.w	r3, r7, #8
 8001b92:	f107 020c 	add.w	r2, r7, #12
 8001b96:	497a      	ldr	r1, [pc, #488]	@ (8001d80 <System_UI_Loop+0x6c8>)
 8001b98:	4871      	ldr	r0, [pc, #452]	@ (8001d60 <System_UI_Loop+0x6a8>)
 8001b9a:	f001 fb52 	bl	8003242 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Tools");
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fdcf 	bl	8000744 <__aeabi_f2iz>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	b21c      	sxth	r4, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fdc9 	bl	8000744 <__aeabi_f2iz>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	4a73      	ldr	r2, [pc, #460]	@ (8001d84 <System_UI_Loop+0x6cc>)
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f7ff fcc0 	bl	8001540 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_AnimationManager, "Cursor", &x, &y);
 8001bc0:	f107 0308 	add.w	r3, r7, #8
 8001bc4:	f107 020c 	add.w	r2, r7, #12
 8001bc8:	496f      	ldr	r1, [pc, #444]	@ (8001d88 <System_UI_Loop+0x6d0>)
 8001bca:	4870      	ldr	r0, [pc, #448]	@ (8001d8c <System_UI_Loop+0x6d4>)
 8001bcc:	f001 fb39 	bl	8003242 <OLED_GetObjectPosition>
    OLED_GetObjectPosition(&g_AnimationManager, "CursorScale", &x1, &y1);
 8001bd0:	463b      	mov	r3, r7
 8001bd2:	1d3a      	adds	r2, r7, #4
 8001bd4:	496e      	ldr	r1, [pc, #440]	@ (8001d90 <System_UI_Loop+0x6d8>)
 8001bd6:	486d      	ldr	r0, [pc, #436]	@ (8001d8c <System_UI_Loop+0x6d4>)
 8001bd8:	f001 fb33 	bl	8003242 <OLED_GetObjectPosition>
    OLED_InvertArea(x - 2, y - 2, x1, y1); // 绘制光标
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fac8 	bl	8000178 <__aeabi_fsub>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fdaa 	bl	8000744 <__aeabi_f2iz>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	b21c      	sxth	r4, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fabc 	bl	8000178 <__aeabi_fsub>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fd9e 	bl	8000744 <__aeabi_f2iz>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	b21d      	sxth	r5, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fdbe 	bl	8000790 <__aeabi_f2uiz>
 8001c14:	4603      	mov	r3, r0
 8001c16:	b2de      	uxtb	r6, r3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fdb8 	bl	8000790 <__aeabi_f2uiz>
 8001c20:	4603      	mov	r3, r0
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	4632      	mov	r2, r6
 8001c26:	4629      	mov	r1, r5
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f7ff fa53 	bl	80010d4 <OLED_InvertArea>
    OLED_GetObjectPosition(&Games_AnimationManager, "Snake", &x, &y);
 8001c2e:	f107 0308 	add.w	r3, r7, #8
 8001c32:	f107 020c 	add.w	r2, r7, #12
 8001c36:	4957      	ldr	r1, [pc, #348]	@ (8001d94 <System_UI_Loop+0x6dc>)
 8001c38:	4857      	ldr	r0, [pc, #348]	@ (8001d98 <System_UI_Loop+0x6e0>)
 8001c3a:	f001 fb02 	bl	8003242 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Snake");
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fd7f 	bl	8000744 <__aeabi_f2iz>
 8001c46:	4603      	mov	r3, r0
 8001c48:	b21c      	sxth	r4, r3
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fd79 	bl	8000744 <__aeabi_f2iz>
 8001c52:	4603      	mov	r3, r0
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	4a4f      	ldr	r2, [pc, #316]	@ (8001d94 <System_UI_Loop+0x6dc>)
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	f7ff fc70 	bl	8001540 <OLED_DisplayString>
    OLED_GetObjectPosition(&Games_AnimationManager, "2048", &x, &y);
 8001c60:	f107 0308 	add.w	r3, r7, #8
 8001c64:	f107 020c 	add.w	r2, r7, #12
 8001c68:	494c      	ldr	r1, [pc, #304]	@ (8001d9c <System_UI_Loop+0x6e4>)
 8001c6a:	484b      	ldr	r0, [pc, #300]	@ (8001d98 <System_UI_Loop+0x6e0>)
 8001c6c:	f001 fae9 	bl	8003242 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "2048");
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fd66 	bl	8000744 <__aeabi_f2iz>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	b21c      	sxth	r4, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fd60 	bl	8000744 <__aeabi_f2iz>
 8001c84:	4603      	mov	r3, r0
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	4a44      	ldr	r2, [pc, #272]	@ (8001d9c <System_UI_Loop+0x6e4>)
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f7ff fc57 	bl	8001540 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_AnimationManager, "BackButton", &x, &y);
 8001c92:	f107 0308 	add.w	r3, r7, #8
 8001c96:	f107 020c 	add.w	r2, r7, #12
 8001c9a:	4941      	ldr	r1, [pc, #260]	@ (8001da0 <System_UI_Loop+0x6e8>)
 8001c9c:	483b      	ldr	r0, [pc, #236]	@ (8001d8c <System_UI_Loop+0x6d4>)
 8001c9e:	f001 fad0 	bl	8003242 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Back");
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fd4d 	bl	8000744 <__aeabi_f2iz>
 8001caa:	4603      	mov	r3, r0
 8001cac:	b21c      	sxth	r4, r3
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fd47 	bl	8000744 <__aeabi_f2iz>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	4a3a      	ldr	r2, [pc, #232]	@ (8001da4 <System_UI_Loop+0x6ec>)
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f7ff fc3e 	bl	8001540 <OLED_DisplayString>




    #pragma region PlayerSelection
    if (menuRank == 1)
 8001cc4:	4b23      	ldr	r3, [pc, #140]	@ (8001d54 <System_UI_Loop+0x69c>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	f040 809f 	bne.w	8001e0c <System_UI_Loop+0x754>
    {
        switch (menuSelection)
 8001cce:	4b36      	ldr	r3, [pc, #216]	@ (8001da8 <System_UI_Loop+0x6f0>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	f200 8095 	bhi.w	8001e04 <System_UI_Loop+0x74c>
 8001cda:	a201      	add	r2, pc, #4	@ (adr r2, 8001ce0 <System_UI_Loop+0x628>)
 8001cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce0:	08001cf5 	.word	0x08001cf5
 8001ce4:	08001d15 	.word	0x08001d15
 8001ce8:	08001d35 	.word	0x08001d35
 8001cec:	08001dc5 	.word	0x08001dc5
 8001cf0:	08001de5 	.word	0x08001de5
        {
        case 1:
            // OLED_DisplayString((OLED_WIDTH - strlen("Epicful Games") * 6) / 2, 0, "Epicful Games");
            OLED_DrawTitleBar("Epicful Games");
 8001cf4:	482d      	ldr	r0, [pc, #180]	@ (8001dac <System_UI_Loop+0x6f4>)
 8001cf6:	f001 fc54 	bl	80035a2 <OLED_DrawTitleBar>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Games")*6+ 3, 10, 100, EASE_INOUT_CIRC, true);
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	9302      	str	r3, [sp, #8]
 8001cfe:	230c      	movs	r3, #12
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	2364      	movs	r3, #100	@ 0x64
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	4b2a      	ldr	r3, [pc, #168]	@ (8001db0 <System_UI_Loop+0x6f8>)
 8001d08:	4a2a      	ldr	r2, [pc, #168]	@ (8001db4 <System_UI_Loop+0x6fc>)
 8001d0a:	4921      	ldr	r1, [pc, #132]	@ (8001d90 <System_UI_Loop+0x6d8>)
 8001d0c:	481f      	ldr	r0, [pc, #124]	@ (8001d8c <System_UI_Loop+0x6d4>)
 8001d0e:	f001 fb5d 	bl	80033cc <OLED_DoTweenObject>
            break;
 8001d12:	e0df      	b.n	8001ed4 <System_UI_Loop+0x81c>
        case 2:
            // OLED_DisplayString((OLED_WIDTH - strlen("Tools For You") * 6) / 2, 0, "Tools For You");
            OLED_DrawTitleBar("Tools For You");
 8001d14:	4828      	ldr	r0, [pc, #160]	@ (8001db8 <System_UI_Loop+0x700>)
 8001d16:	f001 fc44 	bl	80035a2 <OLED_DrawTitleBar>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Tools")*6+ 3, 10, 100, EASE_INOUT_CIRC, true);
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	9302      	str	r3, [sp, #8]
 8001d1e:	230c      	movs	r3, #12
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	2364      	movs	r3, #100	@ 0x64
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	4b22      	ldr	r3, [pc, #136]	@ (8001db0 <System_UI_Loop+0x6f8>)
 8001d28:	4a22      	ldr	r2, [pc, #136]	@ (8001db4 <System_UI_Loop+0x6fc>)
 8001d2a:	4919      	ldr	r1, [pc, #100]	@ (8001d90 <System_UI_Loop+0x6d8>)
 8001d2c:	4817      	ldr	r0, [pc, #92]	@ (8001d8c <System_UI_Loop+0x6d4>)
 8001d2e:	f001 fb4d 	bl	80033cc <OLED_DoTweenObject>
            break;
 8001d32:	e0cf      	b.n	8001ed4 <System_UI_Loop+0x81c>
        case 3:
            // OLED_DisplayString((OLED_WIDTH - strlen("Machine States") * 6) / 2, 0, "Machine States");
            OLED_DrawTitleBar("Machine States");
 8001d34:	4821      	ldr	r0, [pc, #132]	@ (8001dbc <System_UI_Loop+0x704>)
 8001d36:	f001 fc34 	bl	80035a2 <OLED_DrawTitleBar>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("States")*6+ 3, 10, 100, EASE_INOUT_CIRC, true);
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	9302      	str	r3, [sp, #8]
 8001d3e:	230c      	movs	r3, #12
 8001d40:	9301      	str	r3, [sp, #4]
 8001d42:	2364      	movs	r3, #100	@ 0x64
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	4b1a      	ldr	r3, [pc, #104]	@ (8001db0 <System_UI_Loop+0x6f8>)
 8001d48:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc0 <System_UI_Loop+0x708>)
 8001d4a:	4911      	ldr	r1, [pc, #68]	@ (8001d90 <System_UI_Loop+0x6d8>)
 8001d4c:	480f      	ldr	r0, [pc, #60]	@ (8001d8c <System_UI_Loop+0x6d4>)
 8001d4e:	f001 fb3d 	bl	80033cc <OLED_DoTweenObject>
            break;
 8001d52:	e0bf      	b.n	8001ed4 <System_UI_Loop+0x81c>
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000991 	.word	0x20000991
 8001d5c:	08008604 	.word	0x08008604
 8001d60:	20000da4 	.word	0x20000da4
 8001d64:	08008620 	.word	0x08008620
 8001d68:	080085f4 	.word	0x080085f4
 8001d6c:	0800862c 	.word	0x0800862c
 8001d70:	080085dc 	.word	0x080085dc
 8001d74:	08008634 	.word	0x08008634
 8001d78:	08008614 	.word	0x08008614
 8001d7c:	0800863c 	.word	0x0800863c
 8001d80:	080085e8 	.word	0x080085e8
 8001d84:	08008644 	.word	0x08008644
 8001d88:	080085c8 	.word	0x080085c8
 8001d8c:	20003750 	.word	0x20003750
 8001d90:	080085d0 	.word	0x080085d0
 8001d94:	080085ac 	.word	0x080085ac
 8001d98:	20001398 	.word	0x20001398
 8001d9c:	080085b4 	.word	0x080085b4
 8001da0:	080085bc 	.word	0x080085bc
 8001da4:	0800864c 	.word	0x0800864c
 8001da8:	20000001 	.word	0x20000001
 8001dac:	08008654 	.word	0x08008654
 8001db0:	41200000 	.word	0x41200000
 8001db4:	42040000 	.word	0x42040000
 8001db8:	08008664 	.word	0x08008664
 8001dbc:	08008674 	.word	0x08008674
 8001dc0:	421c0000 	.word	0x421c0000
        case 4:
            // OLED_DisplayString((OLED_WIDTH - strlen("Settings For STM") * 6) / 2, 0, "Settings For STM");
            OLED_DrawTitleBar("Settings For STM");
 8001dc4:	484a      	ldr	r0, [pc, #296]	@ (8001ef0 <System_UI_Loop+0x838>)
 8001dc6:	f001 fbec 	bl	80035a2 <OLED_DrawTitleBar>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Settings")*6+ 3, 10, 100, EASE_INOUT_CIRC, true);
 8001dca:	2301      	movs	r3, #1
 8001dcc:	9302      	str	r3, [sp, #8]
 8001dce:	230c      	movs	r3, #12
 8001dd0:	9301      	str	r3, [sp, #4]
 8001dd2:	2364      	movs	r3, #100	@ 0x64
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	4b47      	ldr	r3, [pc, #284]	@ (8001ef4 <System_UI_Loop+0x83c>)
 8001dd8:	4a47      	ldr	r2, [pc, #284]	@ (8001ef8 <System_UI_Loop+0x840>)
 8001dda:	4948      	ldr	r1, [pc, #288]	@ (8001efc <System_UI_Loop+0x844>)
 8001ddc:	4848      	ldr	r0, [pc, #288]	@ (8001f00 <System_UI_Loop+0x848>)
 8001dde:	f001 faf5 	bl	80033cc <OLED_DoTweenObject>
            break;
 8001de2:	e077      	b.n	8001ed4 <System_UI_Loop+0x81c>
        case 5:
            // OLED_DisplayString((OLED_WIDTH - strlen("About Developer") * 6) / 2, 0, "About Developer");
            OLED_DrawTitleBar("About Developer!");
 8001de4:	4847      	ldr	r0, [pc, #284]	@ (8001f04 <System_UI_Loop+0x84c>)
 8001de6:	f001 fbdc 	bl	80035a2 <OLED_DrawTitleBar>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("About")*6+ 3, 10, 100, EASE_INOUT_CIRC, true);
 8001dea:	2301      	movs	r3, #1
 8001dec:	9302      	str	r3, [sp, #8]
 8001dee:	230c      	movs	r3, #12
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	2364      	movs	r3, #100	@ 0x64
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ef4 <System_UI_Loop+0x83c>)
 8001df8:	4a43      	ldr	r2, [pc, #268]	@ (8001f08 <System_UI_Loop+0x850>)
 8001dfa:	4940      	ldr	r1, [pc, #256]	@ (8001efc <System_UI_Loop+0x844>)
 8001dfc:	4840      	ldr	r0, [pc, #256]	@ (8001f00 <System_UI_Loop+0x848>)
 8001dfe:	f001 fae5 	bl	80033cc <OLED_DoTweenObject>
            break;
 8001e02:	e067      	b.n	8001ed4 <System_UI_Loop+0x81c>
        default:
            OLED_DrawTitleBar("UnikoZera's UI");
 8001e04:	4841      	ldr	r0, [pc, #260]	@ (8001f0c <System_UI_Loop+0x854>)
 8001e06:	f001 fbcc 	bl	80035a2 <OLED_DrawTitleBar>
            break;
 8001e0a:	e063      	b.n	8001ed4 <System_UI_Loop+0x81c>
        }
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_SETTINGS)
 8001e0c:	4b40      	ldr	r3, [pc, #256]	@ (8001f10 <System_UI_Loop+0x858>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d103      	bne.n	8001e1c <System_UI_Loop+0x764>
 8001e14:	4b3f      	ldr	r3, [pc, #252]	@ (8001f14 <System_UI_Loop+0x85c>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d05b      	beq.n	8001ed4 <System_UI_Loop+0x81c>
    {

    }
    else if (menuRank == 2 && currentPage == UI_PAGE_STATUS)
 8001e1c:	4b3c      	ldr	r3, [pc, #240]	@ (8001f10 <System_UI_Loop+0x858>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d103      	bne.n	8001e2c <System_UI_Loop+0x774>
 8001e24:	4b3b      	ldr	r3, [pc, #236]	@ (8001f14 <System_UI_Loop+0x85c>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d053      	beq.n	8001ed4 <System_UI_Loop+0x81c>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_ABOUT)
 8001e2c:	4b38      	ldr	r3, [pc, #224]	@ (8001f10 <System_UI_Loop+0x858>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d103      	bne.n	8001e3c <System_UI_Loop+0x784>
 8001e34:	4b37      	ldr	r3, [pc, #220]	@ (8001f14 <System_UI_Loop+0x85c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d04b      	beq.n	8001ed4 <System_UI_Loop+0x81c>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_TOOLS)
 8001e3c:	4b34      	ldr	r3, [pc, #208]	@ (8001f10 <System_UI_Loop+0x858>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d103      	bne.n	8001e4c <System_UI_Loop+0x794>
 8001e44:	4b33      	ldr	r3, [pc, #204]	@ (8001f14 <System_UI_Loop+0x85c>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d043      	beq.n	8001ed4 <System_UI_Loop+0x81c>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_GAMES)
 8001e4c:	4b30      	ldr	r3, [pc, #192]	@ (8001f10 <System_UI_Loop+0x858>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d13f      	bne.n	8001ed4 <System_UI_Loop+0x81c>
 8001e54:	4b2f      	ldr	r3, [pc, #188]	@ (8001f14 <System_UI_Loop+0x85c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b05      	cmp	r3, #5
 8001e5a:	d13b      	bne.n	8001ed4 <System_UI_Loop+0x81c>
    {
        switch (menuSelection)
 8001e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f18 <System_UI_Loop+0x860>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d026      	beq.n	8001eb2 <System_UI_Loop+0x7fa>
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	dc34      	bgt.n	8001ed2 <System_UI_Loop+0x81a>
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d002      	beq.n	8001e72 <System_UI_Loop+0x7ba>
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d010      	beq.n	8001e92 <System_UI_Loop+0x7da>
            // OLED_DisplayString((OLED_WIDTH - strlen("Back") * 6) / 2, 0, "Back");
            OLED_DrawTitleBar("Back To Menu");
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back")*6+ 3, 10, 100, EASE_INOUT_CIRC, true);
            break;
        default:
            break;
 8001e70:	e02f      	b.n	8001ed2 <System_UI_Loop+0x81a>
            OLED_DrawTitleBar("Snake");
 8001e72:	482a      	ldr	r0, [pc, #168]	@ (8001f1c <System_UI_Loop+0x864>)
 8001e74:	f001 fb95 	bl	80035a2 <OLED_DrawTitleBar>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Snake")*6+ 3, 10, 100, EASE_INOUT_CIRC, true);
 8001e78:	2301      	movs	r3, #1
 8001e7a:	9302      	str	r3, [sp, #8]
 8001e7c:	230c      	movs	r3, #12
 8001e7e:	9301      	str	r3, [sp, #4]
 8001e80:	2364      	movs	r3, #100	@ 0x64
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef4 <System_UI_Loop+0x83c>)
 8001e86:	4a20      	ldr	r2, [pc, #128]	@ (8001f08 <System_UI_Loop+0x850>)
 8001e88:	491c      	ldr	r1, [pc, #112]	@ (8001efc <System_UI_Loop+0x844>)
 8001e8a:	481d      	ldr	r0, [pc, #116]	@ (8001f00 <System_UI_Loop+0x848>)
 8001e8c:	f001 fa9e 	bl	80033cc <OLED_DoTweenObject>
            break;
 8001e90:	e020      	b.n	8001ed4 <System_UI_Loop+0x81c>
            OLED_DrawTitleBar("2048");
 8001e92:	4823      	ldr	r0, [pc, #140]	@ (8001f20 <System_UI_Loop+0x868>)
 8001e94:	f001 fb85 	bl	80035a2 <OLED_DrawTitleBar>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("2048")*6+ 3, 10, 100, EASE_INOUT_CIRC, true);
 8001e98:	2301      	movs	r3, #1
 8001e9a:	9302      	str	r3, [sp, #8]
 8001e9c:	230c      	movs	r3, #12
 8001e9e:	9301      	str	r3, [sp, #4]
 8001ea0:	2364      	movs	r3, #100	@ 0x64
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	4b13      	ldr	r3, [pc, #76]	@ (8001ef4 <System_UI_Loop+0x83c>)
 8001ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8001f24 <System_UI_Loop+0x86c>)
 8001ea8:	4914      	ldr	r1, [pc, #80]	@ (8001efc <System_UI_Loop+0x844>)
 8001eaa:	4815      	ldr	r0, [pc, #84]	@ (8001f00 <System_UI_Loop+0x848>)
 8001eac:	f001 fa8e 	bl	80033cc <OLED_DoTweenObject>
            break;
 8001eb0:	e010      	b.n	8001ed4 <System_UI_Loop+0x81c>
            OLED_DrawTitleBar("Back To Menu");
 8001eb2:	481d      	ldr	r0, [pc, #116]	@ (8001f28 <System_UI_Loop+0x870>)
 8001eb4:	f001 fb75 	bl	80035a2 <OLED_DrawTitleBar>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back")*6+ 3, 10, 100, EASE_INOUT_CIRC, true);
 8001eb8:	2301      	movs	r3, #1
 8001eba:	9302      	str	r3, [sp, #8]
 8001ebc:	230c      	movs	r3, #12
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	2364      	movs	r3, #100	@ 0x64
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef4 <System_UI_Loop+0x83c>)
 8001ec6:	4a17      	ldr	r2, [pc, #92]	@ (8001f24 <System_UI_Loop+0x86c>)
 8001ec8:	490c      	ldr	r1, [pc, #48]	@ (8001efc <System_UI_Loop+0x844>)
 8001eca:	480d      	ldr	r0, [pc, #52]	@ (8001f00 <System_UI_Loop+0x848>)
 8001ecc:	f001 fa7e 	bl	80033cc <OLED_DoTweenObject>
            break;
 8001ed0:	e000      	b.n	8001ed4 <System_UI_Loop+0x81c>
            break;
 8001ed2:	bf00      	nop

    }
    #pragma endregion PlayerSelection
    
    
    SystemGetsSignal();
 8001ed4:	f000 f82a 	bl	8001f2c <SystemGetsSignal>
    OLED_DisplayInteger(32, 32, menuSelection); // 显示编码器计数值
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f18 <System_UI_Loop+0x860>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	2120      	movs	r1, #32
 8001ee0:	2020      	movs	r0, #32
 8001ee2:	f7ff fbcb 	bl	800167c <OLED_DisplayInteger>
}
 8001ee6:	bf00      	nop
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	08008684 	.word	0x08008684
 8001ef4:	41200000 	.word	0x41200000
 8001ef8:	424c0000 	.word	0x424c0000
 8001efc:	080085d0 	.word	0x080085d0
 8001f00:	20003750 	.word	0x20003750
 8001f04:	08008698 	.word	0x08008698
 8001f08:	42040000 	.word	0x42040000
 8001f0c:	080086ac 	.word	0x080086ac
 8001f10:	20000000 	.word	0x20000000
 8001f14:	20000991 	.word	0x20000991
 8001f18:	20000001 	.word	0x20000001
 8001f1c:	080085ac 	.word	0x080085ac
 8001f20:	080085b4 	.word	0x080085b4
 8001f24:	41d80000 	.word	0x41d80000
 8001f28:	080086bc 	.word	0x080086bc

08001f2c <SystemGetsSignal>:


void SystemGetsSignal() //这里是旋钮数据的获取
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af04      	add	r7, sp, #16
    static uint16_t preCount = 32767;

    if(count-preCount > 1)
 8001f32:	4b92      	ldr	r3, [pc, #584]	@ (800217c <SystemGetsSignal+0x250>)
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b91      	ldr	r3, [pc, #580]	@ (8002180 <SystemGetsSignal+0x254>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	dd13      	ble.n	8001f6a <SystemGetsSignal+0x3e>
    {
        if(menuSelection < MainMenuItemCount)
 8001f42:	4b90      	ldr	r3, [pc, #576]	@ (8002184 <SystemGetsSignal+0x258>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2205      	movs	r2, #5
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d206      	bcs.n	8001f5a <SystemGetsSignal+0x2e>
        {
            menuSelection++;
 8001f4c:	4b8d      	ldr	r3, [pc, #564]	@ (8002184 <SystemGetsSignal+0x258>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	3301      	adds	r3, #1
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	4b8b      	ldr	r3, [pc, #556]	@ (8002184 <SystemGetsSignal+0x258>)
 8001f56:	701a      	strb	r2, [r3, #0]
 8001f58:	e002      	b.n	8001f60 <SystemGetsSignal+0x34>
        }
        else
        {
            menuSelection = 1;
 8001f5a:	4b8a      	ldr	r3, [pc, #552]	@ (8002184 <SystemGetsSignal+0x258>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
        }

        preCount = count;
 8001f60:	4b86      	ldr	r3, [pc, #536]	@ (800217c <SystemGetsSignal+0x250>)
 8001f62:	881a      	ldrh	r2, [r3, #0]
 8001f64:	4b86      	ldr	r3, [pc, #536]	@ (8002180 <SystemGetsSignal+0x254>)
 8001f66:	801a      	strh	r2, [r3, #0]
 8001f68:	e01a      	b.n	8001fa0 <SystemGetsSignal+0x74>
    }
    else if(count-preCount < -1)
 8001f6a:	4b84      	ldr	r3, [pc, #528]	@ (800217c <SystemGetsSignal+0x250>)
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4b83      	ldr	r3, [pc, #524]	@ (8002180 <SystemGetsSignal+0x254>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7a:	da11      	bge.n	8001fa0 <SystemGetsSignal+0x74>
    {

        if(menuSelection > 1)
 8001f7c:	4b81      	ldr	r3, [pc, #516]	@ (8002184 <SystemGetsSignal+0x258>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d906      	bls.n	8001f92 <SystemGetsSignal+0x66>
        {
            menuSelection--;
 8001f84:	4b7f      	ldr	r3, [pc, #508]	@ (8002184 <SystemGetsSignal+0x258>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	4b7d      	ldr	r3, [pc, #500]	@ (8002184 <SystemGetsSignal+0x258>)
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	e002      	b.n	8001f98 <SystemGetsSignal+0x6c>
        }
        else
        {
            menuSelection = MainMenuItemCount;
 8001f92:	2205      	movs	r2, #5
 8001f94:	4b7b      	ldr	r3, [pc, #492]	@ (8002184 <SystemGetsSignal+0x258>)
 8001f96:	701a      	strb	r2, [r3, #0]
        }

        preCount = count;
 8001f98:	4b78      	ldr	r3, [pc, #480]	@ (800217c <SystemGetsSignal+0x250>)
 8001f9a:	881a      	ldrh	r2, [r3, #0]
 8001f9c:	4b78      	ldr	r3, [pc, #480]	@ (8002180 <SystemGetsSignal+0x254>)
 8001f9e:	801a      	strh	r2, [r3, #0]
    }

    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8001fa0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fa4:	4878      	ldr	r0, [pc, #480]	@ (8002188 <SystemGetsSignal+0x25c>)
 8001fa6:	f002 fb1b 	bl	80045e0 <HAL_GPIO_ReadPin>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f040 80e1 	bne.w	8002174 <SystemGetsSignal+0x248>
    {
        HAL_Delay(100); // 防抖动延时
 8001fb2:	2064      	movs	r0, #100	@ 0x64
 8001fb4:	f001 fefe 	bl	8003db4 <HAL_Delay>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8001fb8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fbc:	4872      	ldr	r0, [pc, #456]	@ (8002188 <SystemGetsSignal+0x25c>)
 8001fbe:	f002 fb0f 	bl	80045e0 <HAL_GPIO_ReadPin>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f040 80d5 	bne.w	8002174 <SystemGetsSignal+0x248>
        {
            if (menuRank == 1 && menuSelection == 1)
 8001fca:	4b70      	ldr	r3, [pc, #448]	@ (800218c <SystemGetsSignal+0x260>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	f040 80c7 	bne.w	8002162 <SystemGetsSignal+0x236>
 8001fd4:	4b6b      	ldr	r3, [pc, #428]	@ (8002184 <SystemGetsSignal+0x258>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	f040 80c2 	bne.w	8002162 <SystemGetsSignal+0x236>
            {
                menuRank = 2;
 8001fde:	4b6b      	ldr	r3, [pc, #428]	@ (800218c <SystemGetsSignal+0x260>)
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_SETTINGS;
 8001fe4:	4b6a      	ldr	r3, [pc, #424]	@ (8002190 <SystemGetsSignal+0x264>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 1000, EASE_IN_CIRC, false);
 8001fea:	4b66      	ldr	r3, [pc, #408]	@ (8002184 <SystemGetsSignal+0x258>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	f1c3 0202 	rsb	r2, r3, #2
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3303      	adds	r3, #3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe f970 	bl	80002e4 <__aeabi_i2f>
 8002004:	4603      	mov	r3, r0
 8002006:	2200      	movs	r2, #0
 8002008:	9202      	str	r2, [sp, #8]
 800200a:	220a      	movs	r2, #10
 800200c:	9201      	str	r2, [sp, #4]
 800200e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002012:	9200      	str	r2, [sp, #0]
 8002014:	4a5f      	ldr	r2, [pc, #380]	@ (8002194 <SystemGetsSignal+0x268>)
 8002016:	4960      	ldr	r1, [pc, #384]	@ (8002198 <SystemGetsSignal+0x26c>)
 8002018:	4860      	ldr	r0, [pc, #384]	@ (800219c <SystemGetsSignal+0x270>)
 800201a:	f001 f9d7 	bl	80033cc <OLED_DoTweenObject>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 1000, EASE_IN_CIRC, false);
 800201e:	4b59      	ldr	r3, [pc, #356]	@ (8002184 <SystemGetsSignal+0x258>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	f1c3 0203 	rsb	r2, r3, #3
 8002026:	4613      	mov	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	3303      	adds	r3, #3
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe f956 	bl	80002e4 <__aeabi_i2f>
 8002038:	4603      	mov	r3, r0
 800203a:	2200      	movs	r2, #0
 800203c:	9202      	str	r2, [sp, #8]
 800203e:	220a      	movs	r2, #10
 8002040:	9201      	str	r2, [sp, #4]
 8002042:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002046:	9200      	str	r2, [sp, #0]
 8002048:	4a52      	ldr	r2, [pc, #328]	@ (8002194 <SystemGetsSignal+0x268>)
 800204a:	4955      	ldr	r1, [pc, #340]	@ (80021a0 <SystemGetsSignal+0x274>)
 800204c:	4853      	ldr	r0, [pc, #332]	@ (800219c <SystemGetsSignal+0x270>)
 800204e:	f001 f9bd 	bl	80033cc <OLED_DoTweenObject>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 1000, EASE_IN_CIRC, false);
 8002052:	4b4c      	ldr	r3, [pc, #304]	@ (8002184 <SystemGetsSignal+0x258>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	f1c3 0204 	rsb	r2, r3, #4
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	3303      	adds	r3, #3
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe f93c 	bl	80002e4 <__aeabi_i2f>
 800206c:	4603      	mov	r3, r0
 800206e:	2200      	movs	r2, #0
 8002070:	9202      	str	r2, [sp, #8]
 8002072:	220a      	movs	r2, #10
 8002074:	9201      	str	r2, [sp, #4]
 8002076:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800207a:	9200      	str	r2, [sp, #0]
 800207c:	4a45      	ldr	r2, [pc, #276]	@ (8002194 <SystemGetsSignal+0x268>)
 800207e:	4949      	ldr	r1, [pc, #292]	@ (80021a4 <SystemGetsSignal+0x278>)
 8002080:	4846      	ldr	r0, [pc, #280]	@ (800219c <SystemGetsSignal+0x270>)
 8002082:	f001 f9a3 	bl	80033cc <OLED_DoTweenObject>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), 1000, EASE_IN_CIRC, false);
 8002086:	4b3f      	ldr	r3, [pc, #252]	@ (8002184 <SystemGetsSignal+0x258>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	f1c3 0205 	rsb	r2, r3, #5
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	3303      	adds	r3, #3
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe f922 	bl	80002e4 <__aeabi_i2f>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2200      	movs	r2, #0
 80020a4:	9202      	str	r2, [sp, #8]
 80020a6:	220a      	movs	r2, #10
 80020a8:	9201      	str	r2, [sp, #4]
 80020aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80020ae:	9200      	str	r2, [sp, #0]
 80020b0:	4a38      	ldr	r2, [pc, #224]	@ (8002194 <SystemGetsSignal+0x268>)
 80020b2:	493d      	ldr	r1, [pc, #244]	@ (80021a8 <SystemGetsSignal+0x27c>)
 80020b4:	4839      	ldr	r0, [pc, #228]	@ (800219c <SystemGetsSignal+0x270>)
 80020b6:	f001 f989 	bl	80033cc <OLED_DoTweenObject>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), 1000, EASE_IN_CIRC, false);
 80020ba:	4b32      	ldr	r3, [pc, #200]	@ (8002184 <SystemGetsSignal+0x258>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	f1c3 0206 	rsb	r2, r3, #6
 80020c2:	4613      	mov	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	3303      	adds	r3, #3
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe f908 	bl	80002e4 <__aeabi_i2f>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2200      	movs	r2, #0
 80020d8:	9202      	str	r2, [sp, #8]
 80020da:	220a      	movs	r2, #10
 80020dc:	9201      	str	r2, [sp, #4]
 80020de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80020e2:	9200      	str	r2, [sp, #0]
 80020e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002194 <SystemGetsSignal+0x268>)
 80020e6:	4931      	ldr	r1, [pc, #196]	@ (80021ac <SystemGetsSignal+0x280>)
 80020e8:	482c      	ldr	r0, [pc, #176]	@ (800219c <SystemGetsSignal+0x270>)
 80020ea:	f001 f96f 	bl	80033cc <OLED_DoTweenObject>

                // OLED_DoTweenObject(&g_AnimationManager, "Cursor", -50, 10, 100, EASE_IN_CIRC, false);
                OLED_DoTweenObjectX(&g_AnimationManager, "Cursor", -100, 1000, EASE_IN_CIRC);
 80020ee:	230a      	movs	r3, #10
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020f6:	4a2e      	ldr	r2, [pc, #184]	@ (80021b0 <SystemGetsSignal+0x284>)
 80020f8:	492e      	ldr	r1, [pc, #184]	@ (80021b4 <SystemGetsSignal+0x288>)
 80020fa:	482f      	ldr	r0, [pc, #188]	@ (80021b8 <SystemGetsSignal+0x28c>)
 80020fc:	f001 fa1c 	bl	8003538 <OLED_DoTweenObjectX>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC, false);
 8002100:	2300      	movs	r3, #0
 8002102:	9302      	str	r3, [sp, #8]
 8002104:	230a      	movs	r3, #10
 8002106:	9301      	str	r3, [sp, #4]
 8002108:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002112:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002116:	4929      	ldr	r1, [pc, #164]	@ (80021bc <SystemGetsSignal+0x290>)
 8002118:	4829      	ldr	r0, [pc, #164]	@ (80021c0 <SystemGetsSignal+0x294>)
 800211a:	f001 f957 	bl	80033cc <OLED_DoTweenObject>
                HAL_Delay(100);
 800211e:	2064      	movs	r0, #100	@ 0x64
 8002120:	f001 fe48 	bl	8003db4 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC, false);
 8002124:	2300      	movs	r3, #0
 8002126:	9302      	str	r3, [sp, #8]
 8002128:	230a      	movs	r3, #10
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	4b24      	ldr	r3, [pc, #144]	@ (80021c4 <SystemGetsSignal+0x298>)
 8002134:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002138:	4923      	ldr	r1, [pc, #140]	@ (80021c8 <SystemGetsSignal+0x29c>)
 800213a:	4821      	ldr	r0, [pc, #132]	@ (80021c0 <SystemGetsSignal+0x294>)
 800213c:	f001 f946 	bl	80033cc <OLED_DoTweenObject>
                HAL_Delay(100);
 8002140:	2064      	movs	r0, #100	@ 0x64
 8002142:	f001 fe37 	bl	8003db4 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC, false);
 8002146:	2300      	movs	r3, #0
 8002148:	9302      	str	r3, [sp, #8]
 800214a:	230a      	movs	r3, #10
 800214c:	9301      	str	r3, [sp, #4]
 800214e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	4b1d      	ldr	r3, [pc, #116]	@ (80021cc <SystemGetsSignal+0x2a0>)
 8002156:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800215a:	491d      	ldr	r1, [pc, #116]	@ (80021d0 <SystemGetsSignal+0x2a4>)
 800215c:	4816      	ldr	r0, [pc, #88]	@ (80021b8 <SystemGetsSignal+0x28c>)
 800215e:	f001 f935 	bl	80033cc <OLED_DoTweenObject>
            }
            while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8002162:	bf00      	nop
 8002164:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002168:	4807      	ldr	r0, [pc, #28]	@ (8002188 <SystemGetsSignal+0x25c>)
 800216a:	f002 fa39 	bl	80045e0 <HAL_GPIO_ReadPin>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f7      	beq.n	8002164 <SystemGetsSignal+0x238>

            }
        }
    }

}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	2000017c 	.word	0x2000017c
 8002180:	20000004 	.word	0x20000004
 8002184:	20000001 	.word	0x20000001
 8002188:	40010c00 	.word	0x40010c00
 800218c:	20000000 	.word	0x20000000
 8002190:	20000991 	.word	0x20000991
 8002194:	c2b40000 	.word	0xc2b40000
 8002198:	080085dc 	.word	0x080085dc
 800219c:	20000da4 	.word	0x20000da4
 80021a0:	080085e8 	.word	0x080085e8
 80021a4:	080085f4 	.word	0x080085f4
 80021a8:	08008604 	.word	0x08008604
 80021ac:	08008614 	.word	0x08008614
 80021b0:	c2c80000 	.word	0xc2c80000
 80021b4:	080085c8 	.word	0x080085c8
 80021b8:	20003750 	.word	0x20003750
 80021bc:	080085ac 	.word	0x080085ac
 80021c0:	20001398 	.word	0x20001398
 80021c4:	41e80000 	.word	0x41e80000
 80021c8:	080085b4 	.word	0x080085b4
 80021cc:	42280000 	.word	0x42280000
 80021d0:	080085bc 	.word	0x080085bc

080021d4 <OLED_EnableDiffMode>:
    }
}

// 启用差分更新模式
void OLED_EnableDiffMode(uint8_t enable)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
    diff_mode_enabled = enable;
 80021de:	4a09      	ldr	r2, [pc, #36]	@ (8002204 <OLED_EnableDiffMode+0x30>)
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	7013      	strb	r3, [r2, #0]
    if (enable)
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <OLED_EnableDiffMode+0x28>
    {
        memcpy(OLED_PrevBuffer, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES);
 80021ea:	4a07      	ldr	r2, [pc, #28]	@ (8002208 <OLED_EnableDiffMode+0x34>)
 80021ec:	4b07      	ldr	r3, [pc, #28]	@ (800220c <OLED_EnableDiffMode+0x38>)
 80021ee:	4610      	mov	r0, r2
 80021f0:	4619      	mov	r1, r3
 80021f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021f6:	461a      	mov	r2, r3
 80021f8:	f004 fb0c 	bl	8006814 <memcpy>
    }
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000d94 	.word	0x20000d94
 8002208:	20000994 	.word	0x20000994
 800220c:	20000190 	.word	0x20000190

08002210 <OLED_EnableFastUpdate>:

// 设置快速更新模式
void OLED_EnableFastUpdate(uint8_t enable)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
    fast_update_enabled = enable;
 800221a:	4a04      	ldr	r2, [pc, #16]	@ (800222c <OLED_EnableFastUpdate+0x1c>)
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	7013      	strb	r3, [r2, #0]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000006 	.word	0x20000006

08002230 <OLED_SmartUpdate>:

// 智能更新显示
// 选择性更新脏页，以提高帧率
void OLED_SmartUpdate(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
    // 如果OLED/DMA忙，直接返回
    if (OLED_IsBusy())
 8002236:	f7fe fd6b 	bl	8000d10 <OLED_IsBusy>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	f040 8082 	bne.w	8002346 <OLED_SmartUpdate+0x116>
    {
        return;
    }

    // 检查是否有脏页需要更新
    uint8_t has_dirty = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	73fb      	strb	r3, [r7, #15]
    uint8_t first_dirty = 255;
 8002246:	23ff      	movs	r3, #255	@ 0xff
 8002248:	73bb      	strb	r3, [r7, #14]
    uint8_t last_dirty = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	737b      	strb	r3, [r7, #13]

    // 如果启用了差分更新，检查哪些页已经变化
    if (diff_mode_enabled)
 800224e:	4b40      	ldr	r3, [pc, #256]	@ (8002350 <OLED_SmartUpdate+0x120>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d046      	beq.n	80022e4 <OLED_SmartUpdate+0xb4>
    {
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 8002256:	2300      	movs	r3, #0
 8002258:	733b      	strb	r3, [r7, #12]
 800225a:	e03f      	b.n	80022dc <OLED_SmartUpdate+0xac>
        {
            // 检查此页中是否有任何字节发生变化
            uint8_t page_changed = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	72fb      	strb	r3, [r7, #11]
            uint16_t start_idx = page * OLED_WIDTH;
 8002260:	7b3b      	ldrb	r3, [r7, #12]
 8002262:	b29b      	uxth	r3, r3
 8002264:	01db      	lsls	r3, r3, #7
 8002266:	80bb      	strh	r3, [r7, #4]

            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 8002268:	2300      	movs	r3, #0
 800226a:	813b      	strh	r3, [r7, #8]
 800226c:	e015      	b.n	800229a <OLED_SmartUpdate+0x6a>
            {
                if (OLED_BackBuffer[start_idx + i] != OLED_PrevBuffer[start_idx + i])
 800226e:	88ba      	ldrh	r2, [r7, #4]
 8002270:	893b      	ldrh	r3, [r7, #8]
 8002272:	4413      	add	r3, r2
 8002274:	4a37      	ldr	r2, [pc, #220]	@ (8002354 <OLED_SmartUpdate+0x124>)
 8002276:	5cd2      	ldrb	r2, [r2, r3]
 8002278:	88b9      	ldrh	r1, [r7, #4]
 800227a:	893b      	ldrh	r3, [r7, #8]
 800227c:	440b      	add	r3, r1
 800227e:	4936      	ldr	r1, [pc, #216]	@ (8002358 <OLED_SmartUpdate+0x128>)
 8002280:	5ccb      	ldrb	r3, [r1, r3]
 8002282:	429a      	cmp	r2, r3
 8002284:	d006      	beq.n	8002294 <OLED_SmartUpdate+0x64>
                {
                    page_changed = 1;
 8002286:	2301      	movs	r3, #1
 8002288:	72fb      	strb	r3, [r7, #11]
                    oled_dirty_pages[page] = 1;
 800228a:	7b3b      	ldrb	r3, [r7, #12]
 800228c:	4a33      	ldr	r2, [pc, #204]	@ (800235c <OLED_SmartUpdate+0x12c>)
 800228e:	2101      	movs	r1, #1
 8002290:	54d1      	strb	r1, [r2, r3]
                    break;
 8002292:	e005      	b.n	80022a0 <OLED_SmartUpdate+0x70>
            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 8002294:	893b      	ldrh	r3, [r7, #8]
 8002296:	3301      	adds	r3, #1
 8002298:	813b      	strh	r3, [r7, #8]
 800229a:	893b      	ldrh	r3, [r7, #8]
 800229c:	2b7f      	cmp	r3, #127	@ 0x7f
 800229e:	d9e6      	bls.n	800226e <OLED_SmartUpdate+0x3e>
                }
            }

            if (page_changed)
 80022a0:	7afb      	ldrb	r3, [r7, #11]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d017      	beq.n	80022d6 <OLED_SmartUpdate+0xa6>
            {
                has_dirty = 1;
 80022a6:	2301      	movs	r3, #1
 80022a8:	73fb      	strb	r3, [r7, #15]
                if (page < first_dirty)
 80022aa:	7b3a      	ldrb	r2, [r7, #12]
 80022ac:	7bbb      	ldrb	r3, [r7, #14]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d201      	bcs.n	80022b6 <OLED_SmartUpdate+0x86>
                    first_dirty = page;
 80022b2:	7b3b      	ldrb	r3, [r7, #12]
 80022b4:	73bb      	strb	r3, [r7, #14]
                if (page > last_dirty)
 80022b6:	7b3a      	ldrb	r2, [r7, #12]
 80022b8:	7b7b      	ldrb	r3, [r7, #13]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d901      	bls.n	80022c2 <OLED_SmartUpdate+0x92>
                    last_dirty = page;
 80022be:	7b3b      	ldrb	r3, [r7, #12]
 80022c0:	737b      	strb	r3, [r7, #13]

                // 更新上一帧缓存
                memcpy(
 80022c2:	88bb      	ldrh	r3, [r7, #4]
 80022c4:	4a24      	ldr	r2, [pc, #144]	@ (8002358 <OLED_SmartUpdate+0x128>)
 80022c6:	1898      	adds	r0, r3, r2
 80022c8:	88bb      	ldrh	r3, [r7, #4]
 80022ca:	4a22      	ldr	r2, [pc, #136]	@ (8002354 <OLED_SmartUpdate+0x124>)
 80022cc:	4413      	add	r3, r2
 80022ce:	2280      	movs	r2, #128	@ 0x80
 80022d0:	4619      	mov	r1, r3
 80022d2:	f004 fa9f 	bl	8006814 <memcpy>
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 80022d6:	7b3b      	ldrb	r3, [r7, #12]
 80022d8:	3301      	adds	r3, #1
 80022da:	733b      	strb	r3, [r7, #12]
 80022dc:	7b3b      	ldrb	r3, [r7, #12]
 80022de:	2b07      	cmp	r3, #7
 80022e0:	d9bc      	bls.n	800225c <OLED_SmartUpdate+0x2c>
 80022e2:	e01c      	b.n	800231e <OLED_SmartUpdate+0xee>
        }
    }
    else
    {
        // 如果未启用差分更新，使用脏页标记
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 80022e4:	2300      	movs	r3, #0
 80022e6:	71fb      	strb	r3, [r7, #7]
 80022e8:	e016      	b.n	8002318 <OLED_SmartUpdate+0xe8>
        {
            if (oled_dirty_pages[i])
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	4a1b      	ldr	r2, [pc, #108]	@ (800235c <OLED_SmartUpdate+0x12c>)
 80022ee:	5cd3      	ldrb	r3, [r2, r3]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00d      	beq.n	8002312 <OLED_SmartUpdate+0xe2>
            {
                has_dirty = 1;
 80022f6:	2301      	movs	r3, #1
 80022f8:	73fb      	strb	r3, [r7, #15]
                if (i < first_dirty)
 80022fa:	79fa      	ldrb	r2, [r7, #7]
 80022fc:	7bbb      	ldrb	r3, [r7, #14]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d201      	bcs.n	8002306 <OLED_SmartUpdate+0xd6>
                    first_dirty = i;
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	73bb      	strb	r3, [r7, #14]
                if (i > last_dirty)
 8002306:	79fa      	ldrb	r2, [r7, #7]
 8002308:	7b7b      	ldrb	r3, [r7, #13]
 800230a:	429a      	cmp	r2, r3
 800230c:	d901      	bls.n	8002312 <OLED_SmartUpdate+0xe2>
                    last_dirty = i;
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	737b      	strb	r3, [r7, #13]
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	3301      	adds	r3, #1
 8002316:	71fb      	strb	r3, [r7, #7]
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	2b07      	cmp	r3, #7
 800231c:	d9e5      	bls.n	80022ea <OLED_SmartUpdate+0xba>
            }
        }
    }

    // 如果有脏页，只更新这些页
    if (has_dirty && fast_update_enabled)
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <OLED_SmartUpdate+0x10a>
 8002324:	4b0e      	ldr	r3, [pc, #56]	@ (8002360 <OLED_SmartUpdate+0x130>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d006      	beq.n	800233a <OLED_SmartUpdate+0x10a>
    {
        OLED_UpdateDisplayPartial(first_dirty, last_dirty);
 800232c:	7b7a      	ldrb	r2, [r7, #13]
 800232e:	7bbb      	ldrb	r3, [r7, #14]
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe fd6c 	bl	8000e10 <OLED_UpdateDisplayPartial>
 8002338:	e006      	b.n	8002348 <OLED_SmartUpdate+0x118>
    }
    else if (has_dirty)
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <OLED_SmartUpdate+0x118>
    {
        OLED_UpdateDisplayVSync();
 8002340:	f7fe fd0e 	bl	8000d60 <OLED_UpdateDisplayVSync>
 8002344:	e000      	b.n	8002348 <OLED_SmartUpdate+0x118>
        return;
 8002346:	bf00      	nop
    }
}
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000d94 	.word	0x20000d94
 8002354:	20000190 	.word	0x20000190
 8002358:	20000994 	.word	0x20000994
 800235c:	20000188 	.word	0x20000188
 8002360:	20000006 	.word	0x20000006

08002364 <OLED_OptimizedDisplayFPS>:


// 显示FPS
void OLED_OptimizedDisplayFPS(int16_t x, int16_t y)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	460a      	mov	r2, r1
 800236e:	80fb      	strh	r3, [r7, #6]
 8002370:	4613      	mov	r3, r2
 8002372:	80bb      	strh	r3, [r7, #4]
    static uint32_t last_time = 0;
    static uint32_t frames = 0;
    static uint32_t fps = 0;
    static char fps_str[16] = "FPS:0";

    frames++;
 8002374:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <OLED_OptimizedDisplayFPS+0x68>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	3301      	adds	r3, #1
 800237a:	4a14      	ldr	r2, [pc, #80]	@ (80023cc <OLED_OptimizedDisplayFPS+0x68>)
 800237c:	6013      	str	r3, [r2, #0]

    // 每秒更新一次FPS
    uint32_t current_time = HAL_GetTick();
 800237e:	f001 fd0f 	bl	8003da0 <HAL_GetTick>
 8002382:	60f8      	str	r0, [r7, #12]
    if (current_time - last_time >= 1000)
 8002384:	4b12      	ldr	r3, [pc, #72]	@ (80023d0 <OLED_OptimizedDisplayFPS+0x6c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002390:	d310      	bcc.n	80023b4 <OLED_OptimizedDisplayFPS+0x50>
    {
        fps = frames;
 8002392:	4b0e      	ldr	r3, [pc, #56]	@ (80023cc <OLED_OptimizedDisplayFPS+0x68>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a0f      	ldr	r2, [pc, #60]	@ (80023d4 <OLED_OptimizedDisplayFPS+0x70>)
 8002398:	6013      	str	r3, [r2, #0]
        sprintf(fps_str, "FPS:%d", fps);
 800239a:	4b0e      	ldr	r3, [pc, #56]	@ (80023d4 <OLED_OptimizedDisplayFPS+0x70>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	490d      	ldr	r1, [pc, #52]	@ (80023d8 <OLED_OptimizedDisplayFPS+0x74>)
 80023a2:	480e      	ldr	r0, [pc, #56]	@ (80023dc <OLED_OptimizedDisplayFPS+0x78>)
 80023a4:	f004 f9cc 	bl	8006740 <siprintf>
        frames = 0;
 80023a8:	4b08      	ldr	r3, [pc, #32]	@ (80023cc <OLED_OptimizedDisplayFPS+0x68>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
        last_time = current_time;
 80023ae:	4a08      	ldr	r2, [pc, #32]	@ (80023d0 <OLED_OptimizedDisplayFPS+0x6c>)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6013      	str	r3, [r2, #0]
    }

    OLED_DisplayString(x, y, fps_str);
 80023b4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80023b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023bc:	4a07      	ldr	r2, [pc, #28]	@ (80023dc <OLED_OptimizedDisplayFPS+0x78>)
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff f8be 	bl	8001540 <OLED_DisplayString>
 80023c4:	bf00      	nop
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000d98 	.word	0x20000d98
 80023d0:	20000d9c 	.word	0x20000d9c
 80023d4:	20000da0 	.word	0x20000da0
 80023d8:	080086cc 	.word	0x080086cc
 80023dc:	20000008 	.word	0x20000008

080023e0 <EaseLinear>:
#include "stdint.h" // 添加 stdint.h 以支持标准整数类型
#include "oled_ui.h"
#pragma region TWEENS // 动画缓动函数全部在这里定义

static float EaseLinear(float t)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
    return t;
 80023e8:	687b      	ldr	r3, [r7, #4]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <EaseInQuad>:

static float EaseInQuad(float t)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
    return t * t;
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7fd ffc4 	bl	800038c <__aeabi_fmul>
 8002404:	4603      	mov	r3, r0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <EaseOutQuad>:

static float EaseOutQuad(float t)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
    return t * (2 - t);
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800241c:	f7fd feac 	bl	8000178 <__aeabi_fsub>
 8002420:	4603      	mov	r3, r0
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4618      	mov	r0, r3
 8002426:	f7fd ffb1 	bl	800038c <__aeabi_fmul>
 800242a:	4603      	mov	r3, r0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <EaseInOutQuad>:

static float EaseInOutQuad(float t)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 2 * t * t : -1 + (4 - 2 * t) * t;
 800243c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7fe f941 	bl	80006c8 <__aeabi_fcmplt>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00b      	beq.n	8002464 <EaseInOutQuad+0x30>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4619      	mov	r1, r3
 8002450:	4618      	mov	r0, r3
 8002452:	f7fd fe93 	bl	800017c <__addsf3>
 8002456:	4603      	mov	r3, r0
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4618      	mov	r0, r3
 800245c:	f7fd ff96 	bl	800038c <__aeabi_fmul>
 8002460:	4603      	mov	r3, r0
 8002462:	e016      	b.n	8002492 <EaseInOutQuad+0x5e>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4619      	mov	r1, r3
 8002468:	4618      	mov	r0, r3
 800246a:	f7fd fe87 	bl	800017c <__addsf3>
 800246e:	4603      	mov	r3, r0
 8002470:	4619      	mov	r1, r3
 8002472:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 8002476:	f7fd fe7f 	bl	8000178 <__aeabi_fsub>
 800247a:	4603      	mov	r3, r0
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fd ff84 	bl	800038c <__aeabi_fmul>
 8002484:	4603      	mov	r3, r0
 8002486:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800248a:	4618      	mov	r0, r3
 800248c:	f7fd fe74 	bl	8000178 <__aeabi_fsub>
 8002490:	4603      	mov	r3, r0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <EaseInCubic>:

static float EaseInCubic(float t)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
    return t * t * t;
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7fd ff71 	bl	800038c <__aeabi_fmul>
 80024aa:	4603      	mov	r3, r0
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fd ff6c 	bl	800038c <__aeabi_fmul>
 80024b4:	4603      	mov	r3, r0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <EaseOutCubic>:

static float EaseOutCubic(float t)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b084      	sub	sp, #16
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
    float t1 = t - 1;
 80024c6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fd fe54 	bl	8000178 <__aeabi_fsub>
 80024d0:	4603      	mov	r3, r0
 80024d2:	60fb      	str	r3, [r7, #12]
    return t1 * t1 * t1 + 1;
 80024d4:	68f9      	ldr	r1, [r7, #12]
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f7fd ff58 	bl	800038c <__aeabi_fmul>
 80024dc:	4603      	mov	r3, r0
 80024de:	68f9      	ldr	r1, [r7, #12]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fd ff53 	bl	800038c <__aeabi_fmul>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fd fe45 	bl	800017c <__addsf3>
 80024f2:	4603      	mov	r3, r0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <EaseInOutCubic>:

static float EaseInOutCubic(float t)
{
 80024fc:	b590      	push	{r4, r7, lr}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
 8002504:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7fe f8dd 	bl	80006c8 <__aeabi_fcmplt>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d010      	beq.n	8002536 <EaseInOutCubic+0x3a>
 8002514:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7fd ff37 	bl	800038c <__aeabi_fmul>
 800251e:	4603      	mov	r3, r0
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fd ff32 	bl	800038c <__aeabi_fmul>
 8002528:	4603      	mov	r3, r0
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4618      	mov	r0, r3
 800252e:	f7fd ff2d 	bl	800038c <__aeabi_fmul>
 8002532:	4603      	mov	r3, r0
 8002534:	e02f      	b.n	8002596 <EaseInOutCubic+0x9a>
 8002536:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fd fe1c 	bl	8000178 <__aeabi_fsub>
 8002540:	4603      	mov	r3, r0
 8002542:	461c      	mov	r4, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4619      	mov	r1, r3
 8002548:	4618      	mov	r0, r3
 800254a:	f7fd fe17 	bl	800017c <__addsf3>
 800254e:	4603      	mov	r3, r0
 8002550:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002554:	4618      	mov	r0, r3
 8002556:	f7fd fe0f 	bl	8000178 <__aeabi_fsub>
 800255a:	4603      	mov	r3, r0
 800255c:	4619      	mov	r1, r3
 800255e:	4620      	mov	r0, r4
 8002560:	f7fd ff14 	bl	800038c <__aeabi_fmul>
 8002564:	4603      	mov	r3, r0
 8002566:	461c      	mov	r4, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4619      	mov	r1, r3
 800256c:	4618      	mov	r0, r3
 800256e:	f7fd fe05 	bl	800017c <__addsf3>
 8002572:	4603      	mov	r3, r0
 8002574:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd fdfd 	bl	8000178 <__aeabi_fsub>
 800257e:	4603      	mov	r3, r0
 8002580:	4619      	mov	r1, r3
 8002582:	4620      	mov	r0, r4
 8002584:	f7fd ff02 	bl	800038c <__aeabi_fmul>
 8002588:	4603      	mov	r3, r0
 800258a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800258e:	4618      	mov	r0, r3
 8002590:	f7fd fdf4 	bl	800017c <__addsf3>
 8002594:	4603      	mov	r3, r0
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	bd90      	pop	{r4, r7, pc}
	...

080025a0 <EaseInExpo>:

// 在现有EaseType_t枚举中添加这些新类型
// 指数缓动
static float EaseInExpo(float t)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
    return (t == 0) ? 0 : powf(2, 10 * (t - 1));
 80025a8:	f04f 0100 	mov.w	r1, #0
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7fe f881 	bl	80006b4 <__aeabi_fcmpeq>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d111      	bne.n	80025dc <EaseInExpo+0x3c>
 80025b8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7fd fddb 	bl	8000178 <__aeabi_fsub>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4908      	ldr	r1, [pc, #32]	@ (80025e8 <EaseInExpo+0x48>)
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fd fee0 	bl	800038c <__aeabi_fmul>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4619      	mov	r1, r3
 80025d0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80025d4:	f004 fd78 	bl	80070c8 <powf>
 80025d8:	4603      	mov	r3, r0
 80025da:	e001      	b.n	80025e0 <EaseInExpo+0x40>
 80025dc:	f04f 0300 	mov.w	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	41200000 	.word	0x41200000

080025ec <EaseOutExpo>:

static float EaseOutExpo(float t)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
    return (t == 1) ? 1 : (1 - powf(2, -10 * t));
 80025f4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7fe f85b 	bl	80006b4 <__aeabi_fcmpeq>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d111      	bne.n	8002628 <EaseOutExpo+0x3c>
 8002604:	490b      	ldr	r1, [pc, #44]	@ (8002634 <EaseOutExpo+0x48>)
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fd fec0 	bl	800038c <__aeabi_fmul>
 800260c:	4603      	mov	r3, r0
 800260e:	4619      	mov	r1, r3
 8002610:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002614:	f004 fd58 	bl	80070c8 <powf>
 8002618:	4603      	mov	r3, r0
 800261a:	4619      	mov	r1, r3
 800261c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002620:	f7fd fdaa 	bl	8000178 <__aeabi_fsub>
 8002624:	4603      	mov	r3, r0
 8002626:	e001      	b.n	800262c <EaseOutExpo+0x40>
 8002628:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	c1200000 	.word	0xc1200000

08002638 <EaseInOutExpo>:

static float EaseInOutExpo(float t)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
    if (t == 0)
 8002640:	f04f 0100 	mov.w	r1, #0
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7fe f835 	bl	80006b4 <__aeabi_fcmpeq>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <EaseInOutExpo+0x1e>
        return 0;
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	e045      	b.n	80026e2 <EaseInOutExpo+0xaa>
    if (t == 1)
 8002656:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7fe f82a 	bl	80006b4 <__aeabi_fcmpeq>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <EaseInOutExpo+0x34>
        return 1;
 8002666:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800266a:	e03a      	b.n	80026e2 <EaseInOutExpo+0xaa>
    if (t < 0.5f)
 800266c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7fe f829 	bl	80006c8 <__aeabi_fcmplt>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d016      	beq.n	80026aa <EaseInOutExpo+0x72>
        return powf(2, 20 * t - 10) / 2;
 800267c:	491b      	ldr	r1, [pc, #108]	@ (80026ec <EaseInOutExpo+0xb4>)
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7fd fe84 	bl	800038c <__aeabi_fmul>
 8002684:	4603      	mov	r3, r0
 8002686:	491a      	ldr	r1, [pc, #104]	@ (80026f0 <EaseInOutExpo+0xb8>)
 8002688:	4618      	mov	r0, r3
 800268a:	f7fd fd75 	bl	8000178 <__aeabi_fsub>
 800268e:	4603      	mov	r3, r0
 8002690:	4619      	mov	r1, r3
 8002692:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002696:	f004 fd17 	bl	80070c8 <powf>
 800269a:	4603      	mov	r3, r0
 800269c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd ff27 	bl	80004f4 <__aeabi_fdiv>
 80026a6:	4603      	mov	r3, r0
 80026a8:	e01b      	b.n	80026e2 <EaseInOutExpo+0xaa>
    return (2 - powf(2, -20 * t + 10)) / 2;
 80026aa:	4912      	ldr	r1, [pc, #72]	@ (80026f4 <EaseInOutExpo+0xbc>)
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7fd fe6d 	bl	800038c <__aeabi_fmul>
 80026b2:	4603      	mov	r3, r0
 80026b4:	490e      	ldr	r1, [pc, #56]	@ (80026f0 <EaseInOutExpo+0xb8>)
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fd fd60 	bl	800017c <__addsf3>
 80026bc:	4603      	mov	r3, r0
 80026be:	4619      	mov	r1, r3
 80026c0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80026c4:	f004 fd00 	bl	80070c8 <powf>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4619      	mov	r1, r3
 80026cc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80026d0:	f7fd fd52 	bl	8000178 <__aeabi_fsub>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd ff0a 	bl	80004f4 <__aeabi_fdiv>
 80026e0:	4603      	mov	r3, r0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	41a00000 	.word	0x41a00000
 80026f0:	41200000 	.word	0x41200000
 80026f4:	c1a00000 	.word	0xc1a00000

080026f8 <EaseInCirc>:

// 圆形曲线缓动
static float EaseInCirc(float t)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
    return 1 - sqrtf(1 - t * t);
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7fd fe42 	bl	800038c <__aeabi_fmul>
 8002708:	4603      	mov	r3, r0
 800270a:	4619      	mov	r1, r3
 800270c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002710:	f7fd fd32 	bl	8000178 <__aeabi_fsub>
 8002714:	4603      	mov	r3, r0
 8002716:	4618      	mov	r0, r3
 8002718:	f004 fd23 	bl	8007162 <sqrtf>
 800271c:	4603      	mov	r3, r0
 800271e:	4619      	mov	r1, r3
 8002720:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002724:	f7fd fd28 	bl	8000178 <__aeabi_fsub>
 8002728:	4603      	mov	r3, r0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <EaseOutCirc>:

static float EaseOutCirc(float t)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
    return sqrtf(1 - powf(t - 1, 2));
 800273a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7fd fd1a 	bl	8000178 <__aeabi_fsub>
 8002744:	4603      	mov	r3, r0
 8002746:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800274a:	4618      	mov	r0, r3
 800274c:	f004 fcbc 	bl	80070c8 <powf>
 8002750:	4603      	mov	r3, r0
 8002752:	4619      	mov	r1, r3
 8002754:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002758:	f7fd fd0e 	bl	8000178 <__aeabi_fsub>
 800275c:	4603      	mov	r3, r0
 800275e:	4618      	mov	r0, r3
 8002760:	f004 fcff 	bl	8007162 <sqrtf>
 8002764:	4603      	mov	r3, r0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <EaseInOutCirc>:

static float EaseInOutCirc(float t)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 8002776:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7fd ffa4 	bl	80006c8 <__aeabi_fcmplt>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d022      	beq.n	80027cc <EaseInOutCirc+0x5e>
        return (1 - sqrtf(1 - powf(2 * t, 2))) / 2;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4619      	mov	r1, r3
 800278a:	4618      	mov	r0, r3
 800278c:	f7fd fcf6 	bl	800017c <__addsf3>
 8002790:	4603      	mov	r3, r0
 8002792:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002796:	4618      	mov	r0, r3
 8002798:	f004 fc96 	bl	80070c8 <powf>
 800279c:	4603      	mov	r3, r0
 800279e:	4619      	mov	r1, r3
 80027a0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80027a4:	f7fd fce8 	bl	8000178 <__aeabi_fsub>
 80027a8:	4603      	mov	r3, r0
 80027aa:	4618      	mov	r0, r3
 80027ac:	f004 fcd9 	bl	8007162 <sqrtf>
 80027b0:	4603      	mov	r3, r0
 80027b2:	4619      	mov	r1, r3
 80027b4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80027b8:	f7fd fcde 	bl	8000178 <__aeabi_fsub>
 80027bc:	4603      	mov	r3, r0
 80027be:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd fe96 	bl	80004f4 <__aeabi_fdiv>
 80027c8:	4603      	mov	r3, r0
 80027ca:	e027      	b.n	800281c <EaseInOutCirc+0xae>
    return (sqrtf(1 - powf(-2 * t + 2, 2)) + 1) / 2;
 80027cc:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7fd fddb 	bl	800038c <__aeabi_fmul>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fd fccd 	bl	800017c <__addsf3>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80027e8:	4618      	mov	r0, r3
 80027ea:	f004 fc6d 	bl	80070c8 <powf>
 80027ee:	4603      	mov	r3, r0
 80027f0:	4619      	mov	r1, r3
 80027f2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80027f6:	f7fd fcbf 	bl	8000178 <__aeabi_fsub>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f004 fcb0 	bl	8007162 <sqrtf>
 8002802:	4603      	mov	r3, r0
 8002804:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd fcb7 	bl	800017c <__addsf3>
 800280e:	4603      	mov	r3, r0
 8002810:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002814:	4618      	mov	r0, r3
 8002816:	f7fd fe6d 	bl	80004f4 <__aeabi_fdiv>
 800281a:	4603      	mov	r3, r0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <EaseInElastic>:

// 弹性缓动
static float EaseInElastic(float t)
{
 8002824:	b590      	push	{r4, r7, lr}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 800282c:	4b22      	ldr	r3, [pc, #136]	@ (80028b8 <EaseInElastic+0x94>)
 800282e:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8002830:	f04f 0100 	mov.w	r1, #0
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7fd ff3d 	bl	80006b4 <__aeabi_fcmpeq>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <EaseInElastic+0x22>
        return 0;
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	e034      	b.n	80028b0 <EaseInElastic+0x8c>
    if (t == 1)
 8002846:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fd ff32 	bl	80006b4 <__aeabi_fcmpeq>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <EaseInElastic+0x38>
        return 1;
 8002856:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800285a:	e029      	b.n	80028b0 <EaseInElastic+0x8c>
    return -powf(2, 10 * t - 10) * sinf((t * 10 - 10.75f) * c4);
 800285c:	4917      	ldr	r1, [pc, #92]	@ (80028bc <EaseInElastic+0x98>)
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7fd fd94 	bl	800038c <__aeabi_fmul>
 8002864:	4603      	mov	r3, r0
 8002866:	4915      	ldr	r1, [pc, #84]	@ (80028bc <EaseInElastic+0x98>)
 8002868:	4618      	mov	r0, r3
 800286a:	f7fd fc85 	bl	8000178 <__aeabi_fsub>
 800286e:	4603      	mov	r3, r0
 8002870:	4619      	mov	r1, r3
 8002872:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002876:	f004 fc27 	bl	80070c8 <powf>
 800287a:	4603      	mov	r3, r0
 800287c:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8002880:	490e      	ldr	r1, [pc, #56]	@ (80028bc <EaseInElastic+0x98>)
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fd fd82 	bl	800038c <__aeabi_fmul>
 8002888:	4603      	mov	r3, r0
 800288a:	490d      	ldr	r1, [pc, #52]	@ (80028c0 <EaseInElastic+0x9c>)
 800288c:	4618      	mov	r0, r3
 800288e:	f7fd fc73 	bl	8000178 <__aeabi_fsub>
 8002892:	4603      	mov	r3, r0
 8002894:	68f9      	ldr	r1, [r7, #12]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fd78 	bl	800038c <__aeabi_fmul>
 800289c:	4603      	mov	r3, r0
 800289e:	4618      	mov	r0, r3
 80028a0:	f004 fcb2 	bl	8007208 <sinf>
 80028a4:	4603      	mov	r3, r0
 80028a6:	4619      	mov	r1, r3
 80028a8:	4620      	mov	r0, r4
 80028aa:	f7fd fd6f 	bl	800038c <__aeabi_fmul>
 80028ae:	4603      	mov	r3, r0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd90      	pop	{r4, r7, pc}
 80028b8:	40060a8b 	.word	0x40060a8b
 80028bc:	41200000 	.word	0x41200000
 80028c0:	412c0000 	.word	0x412c0000

080028c4 <EaseOutElastic>:

static float EaseOutElastic(float t)
{
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 80028cc:	4b22      	ldr	r3, [pc, #136]	@ (8002958 <EaseOutElastic+0x94>)
 80028ce:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 80028d0:	f04f 0100 	mov.w	r1, #0
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7fd feed 	bl	80006b4 <__aeabi_fcmpeq>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <EaseOutElastic+0x22>
        return 0;
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	e034      	b.n	8002950 <EaseOutElastic+0x8c>
    if (t == 1)
 80028e6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fd fee2 	bl	80006b4 <__aeabi_fcmpeq>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <EaseOutElastic+0x38>
        return 1;
 80028f6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80028fa:	e029      	b.n	8002950 <EaseOutElastic+0x8c>
    return powf(2, -10 * t) * sinf((t * 10 - 0.75f) * c4) + 1;
 80028fc:	4917      	ldr	r1, [pc, #92]	@ (800295c <EaseOutElastic+0x98>)
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fd fd44 	bl	800038c <__aeabi_fmul>
 8002904:	4603      	mov	r3, r0
 8002906:	4619      	mov	r1, r3
 8002908:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800290c:	f004 fbdc 	bl	80070c8 <powf>
 8002910:	4604      	mov	r4, r0
 8002912:	4913      	ldr	r1, [pc, #76]	@ (8002960 <EaseOutElastic+0x9c>)
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7fd fd39 	bl	800038c <__aeabi_fmul>
 800291a:	4603      	mov	r3, r0
 800291c:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8002920:	4618      	mov	r0, r3
 8002922:	f7fd fc29 	bl	8000178 <__aeabi_fsub>
 8002926:	4603      	mov	r3, r0
 8002928:	68f9      	ldr	r1, [r7, #12]
 800292a:	4618      	mov	r0, r3
 800292c:	f7fd fd2e 	bl	800038c <__aeabi_fmul>
 8002930:	4603      	mov	r3, r0
 8002932:	4618      	mov	r0, r3
 8002934:	f004 fc68 	bl	8007208 <sinf>
 8002938:	4603      	mov	r3, r0
 800293a:	4619      	mov	r1, r3
 800293c:	4620      	mov	r0, r4
 800293e:	f7fd fd25 	bl	800038c <__aeabi_fmul>
 8002942:	4603      	mov	r3, r0
 8002944:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002948:	4618      	mov	r0, r3
 800294a:	f7fd fc17 	bl	800017c <__addsf3>
 800294e:	4603      	mov	r3, r0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	bd90      	pop	{r4, r7, pc}
 8002958:	40060a8b 	.word	0x40060a8b
 800295c:	c1200000 	.word	0xc1200000
 8002960:	41200000 	.word	0x41200000

08002964 <EaseInOutElastic>:

static float EaseInOutElastic(float t)
{
 8002964:	b590      	push	{r4, r7, lr}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
    const float c5 = (2 * 3.14159f) / 4.5f;
 800296c:	4b44      	ldr	r3, [pc, #272]	@ (8002a80 <EaseInOutElastic+0x11c>)
 800296e:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8002970:	f04f 0100 	mov.w	r1, #0
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7fd fe9d 	bl	80006b4 <__aeabi_fcmpeq>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <EaseInOutElastic+0x22>
        return 0;
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	e077      	b.n	8002a76 <EaseInOutElastic+0x112>
    if (t == 1)
 8002986:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fd fe92 	bl	80006b4 <__aeabi_fcmpeq>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <EaseInOutElastic+0x38>
        return 1;
 8002996:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800299a:	e06c      	b.n	8002a76 <EaseInOutElastic+0x112>
    if (t < 0.5f)
 800299c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7fd fe91 	bl	80006c8 <__aeabi_fcmplt>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d030      	beq.n	8002a0e <EaseInOutElastic+0xaa>
        return -(powf(2, 20 * t - 10) * sinf((20 * t - 11.125f) * c5)) / 2;
 80029ac:	4935      	ldr	r1, [pc, #212]	@ (8002a84 <EaseInOutElastic+0x120>)
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fd fcec 	bl	800038c <__aeabi_fmul>
 80029b4:	4603      	mov	r3, r0
 80029b6:	4934      	ldr	r1, [pc, #208]	@ (8002a88 <EaseInOutElastic+0x124>)
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fbdd 	bl	8000178 <__aeabi_fsub>
 80029be:	4603      	mov	r3, r0
 80029c0:	4619      	mov	r1, r3
 80029c2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80029c6:	f004 fb7f 	bl	80070c8 <powf>
 80029ca:	4604      	mov	r4, r0
 80029cc:	492d      	ldr	r1, [pc, #180]	@ (8002a84 <EaseInOutElastic+0x120>)
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7fd fcdc 	bl	800038c <__aeabi_fmul>
 80029d4:	4603      	mov	r3, r0
 80029d6:	492d      	ldr	r1, [pc, #180]	@ (8002a8c <EaseInOutElastic+0x128>)
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd fbcd 	bl	8000178 <__aeabi_fsub>
 80029de:	4603      	mov	r3, r0
 80029e0:	68f9      	ldr	r1, [r7, #12]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fcd2 	bl	800038c <__aeabi_fmul>
 80029e8:	4603      	mov	r3, r0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f004 fc0c 	bl	8007208 <sinf>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4619      	mov	r1, r3
 80029f4:	4620      	mov	r0, r4
 80029f6:	f7fd fcc9 	bl	800038c <__aeabi_fmul>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002a00:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fd fd75 	bl	80004f4 <__aeabi_fdiv>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	e033      	b.n	8002a76 <EaseInOutElastic+0x112>
    return (powf(2, -20 * t + 10) * sinf((20 * t - 11.125f) * c5)) / 2 + 1;
 8002a0e:	4920      	ldr	r1, [pc, #128]	@ (8002a90 <EaseInOutElastic+0x12c>)
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7fd fcbb 	bl	800038c <__aeabi_fmul>
 8002a16:	4603      	mov	r3, r0
 8002a18:	491b      	ldr	r1, [pc, #108]	@ (8002a88 <EaseInOutElastic+0x124>)
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fbae 	bl	800017c <__addsf3>
 8002a20:	4603      	mov	r3, r0
 8002a22:	4619      	mov	r1, r3
 8002a24:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002a28:	f004 fb4e 	bl	80070c8 <powf>
 8002a2c:	4604      	mov	r4, r0
 8002a2e:	4915      	ldr	r1, [pc, #84]	@ (8002a84 <EaseInOutElastic+0x120>)
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7fd fcab 	bl	800038c <__aeabi_fmul>
 8002a36:	4603      	mov	r3, r0
 8002a38:	4914      	ldr	r1, [pc, #80]	@ (8002a8c <EaseInOutElastic+0x128>)
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fd fb9c 	bl	8000178 <__aeabi_fsub>
 8002a40:	4603      	mov	r3, r0
 8002a42:	68f9      	ldr	r1, [r7, #12]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fd fca1 	bl	800038c <__aeabi_fmul>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f004 fbdb 	bl	8007208 <sinf>
 8002a52:	4603      	mov	r3, r0
 8002a54:	4619      	mov	r1, r3
 8002a56:	4620      	mov	r0, r4
 8002a58:	f7fd fc98 	bl	800038c <__aeabi_fmul>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fd fd46 	bl	80004f4 <__aeabi_fdiv>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fd fb84 	bl	800017c <__addsf3>
 8002a74:	4603      	mov	r3, r0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd90      	pop	{r4, r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	3fb2b8b9 	.word	0x3fb2b8b9
 8002a84:	41a00000 	.word	0x41a00000
 8002a88:	41200000 	.word	0x41200000
 8002a8c:	41320000 	.word	0x41320000
 8002a90:	c1a00000 	.word	0xc1a00000

08002a94 <EaseOutBounce>:

static float EaseOutBounce(float t)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
    const float n1 = 7.5625f;
 8002a9c:	4b45      	ldr	r3, [pc, #276]	@ (8002bb4 <EaseOutBounce+0x120>)
 8002a9e:	60fb      	str	r3, [r7, #12]
    const float d1 = 2.75f;
 8002aa0:	4b45      	ldr	r3, [pc, #276]	@ (8002bb8 <EaseOutBounce+0x124>)
 8002aa2:	60bb      	str	r3, [r7, #8]

    if (t < 1 / d1)
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002aaa:	f7fd fd23 	bl	80004f4 <__aeabi_fdiv>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7fd fe08 	bl	80006c8 <__aeabi_fcmplt>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <EaseOutBounce+0x40>
    {
        return n1 * t * t;
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f7fd fc63 	bl	800038c <__aeabi_fmul>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fd fc5e 	bl	800038c <__aeabi_fmul>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	e06a      	b.n	8002baa <EaseOutBounce+0x116>
    }
    else if (t < 2 / d1)
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002ada:	f7fd fd0b 	bl	80004f4 <__aeabi_fdiv>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fd fdf0 	bl	80006c8 <__aeabi_fcmplt>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d01c      	beq.n	8002b28 <EaseOutBounce+0x94>
    {
        t -= 1.5f / d1;
 8002aee:	68b9      	ldr	r1, [r7, #8]
 8002af0:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8002af4:	f7fd fcfe 	bl	80004f4 <__aeabi_fdiv>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4619      	mov	r1, r3
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7fd fb3b 	bl	8000178 <__aeabi_fsub>
 8002b02:	4603      	mov	r3, r0
 8002b04:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.75f;
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f7fd fc3f 	bl	800038c <__aeabi_fmul>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fd fc3a 	bl	800038c <__aeabi_fmul>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fd fb2c 	bl	800017c <__addsf3>
 8002b24:	4603      	mov	r3, r0
 8002b26:	e040      	b.n	8002baa <EaseOutBounce+0x116>
    }
    else if (t < 2.5f / d1)
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	4824      	ldr	r0, [pc, #144]	@ (8002bbc <EaseOutBounce+0x128>)
 8002b2c:	f7fd fce2 	bl	80004f4 <__aeabi_fdiv>
 8002b30:	4603      	mov	r3, r0
 8002b32:	4619      	mov	r1, r3
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7fd fdc7 	bl	80006c8 <__aeabi_fcmplt>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d01a      	beq.n	8002b76 <EaseOutBounce+0xe2>
    {
        t -= 2.25f / d1;
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	481f      	ldr	r0, [pc, #124]	@ (8002bc0 <EaseOutBounce+0x12c>)
 8002b44:	f7fd fcd6 	bl	80004f4 <__aeabi_fdiv>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f7fd fb13 	bl	8000178 <__aeabi_fsub>
 8002b52:	4603      	mov	r3, r0
 8002b54:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.9375f;
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f7fd fc17 	bl	800038c <__aeabi_fmul>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd fc12 	bl	800038c <__aeabi_fmul>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4916      	ldr	r1, [pc, #88]	@ (8002bc4 <EaseOutBounce+0x130>)
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fd fb05 	bl	800017c <__addsf3>
 8002b72:	4603      	mov	r3, r0
 8002b74:	e019      	b.n	8002baa <EaseOutBounce+0x116>
    }
    else
    {
        t -= 2.625f / d1;
 8002b76:	68b9      	ldr	r1, [r7, #8]
 8002b78:	4813      	ldr	r0, [pc, #76]	@ (8002bc8 <EaseOutBounce+0x134>)
 8002b7a:	f7fd fcbb 	bl	80004f4 <__aeabi_fdiv>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4619      	mov	r1, r3
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fd faf8 	bl	8000178 <__aeabi_fsub>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.984375f;
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f7fd fbfc 	bl	800038c <__aeabi_fmul>
 8002b94:	4603      	mov	r3, r0
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fbf7 	bl	800038c <__aeabi_fmul>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	490a      	ldr	r1, [pc, #40]	@ (8002bcc <EaseOutBounce+0x138>)
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fd faea 	bl	800017c <__addsf3>
 8002ba8:	4603      	mov	r3, r0
    }
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40f20000 	.word	0x40f20000
 8002bb8:	40300000 	.word	0x40300000
 8002bbc:	40200000 	.word	0x40200000
 8002bc0:	40100000 	.word	0x40100000
 8002bc4:	3f700000 	.word	0x3f700000
 8002bc8:	40280000 	.word	0x40280000
 8002bcc:	3f7c0000 	.word	0x3f7c0000

08002bd0 <EaseInBounce>:

// 反弹缓动
static float EaseInBounce(float t)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
    return 1 - EaseOutBounce(1 - t);
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002bde:	f7fd facb 	bl	8000178 <__aeabi_fsub>
 8002be2:	4603      	mov	r3, r0
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff55 	bl	8002a94 <EaseOutBounce>
 8002bea:	4603      	mov	r3, r0
 8002bec:	4619      	mov	r1, r3
 8002bee:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002bf2:	f7fd fac1 	bl	8000178 <__aeabi_fsub>
 8002bf6:	4603      	mov	r3, r0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <EaseInOutBounce>:

static float EaseInOutBounce(float t)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 8002c08:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7fd fd5b 	bl	80006c8 <__aeabi_fcmplt>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d010      	beq.n	8002c3a <EaseInOutBounce+0x3a>
        return EaseInBounce(t * 2) * 0.5f;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fd faad 	bl	800017c <__addsf3>
 8002c22:	4603      	mov	r3, r0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ffd3 	bl	8002bd0 <EaseInBounce>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fd fbab 	bl	800038c <__aeabi_fmul>
 8002c36:	4603      	mov	r3, r0
 8002c38:	e01b      	b.n	8002c72 <EaseInOutBounce+0x72>
    return EaseOutBounce(t * 2 - 1) * 0.5f + 0.5f;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fd fa9c 	bl	800017c <__addsf3>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fd fa94 	bl	8000178 <__aeabi_fsub>
 8002c50:	4603      	mov	r3, r0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff ff1e 	bl	8002a94 <EaseOutBounce>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fd fb94 	bl	800038c <__aeabi_fmul>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fd fa86 	bl	800017c <__addsf3>
 8002c70:	4603      	mov	r3, r0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <EaseInBack>:

// 背越式缓动
static float EaseInBack(float t)
{
 8002c7c:	b590      	push	{r4, r7, lr}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8002c84:	4b15      	ldr	r3, [pc, #84]	@ (8002cdc <EaseInBack+0x60>)
 8002c86:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8002c88:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f7fd fa75 	bl	800017c <__addsf3>
 8002c92:	4603      	mov	r3, r0
 8002c94:	60bb      	str	r3, [r7, #8]

    return c3 * t * t * t - c1 * t * t;
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	68b8      	ldr	r0, [r7, #8]
 8002c9a:	f7fd fb77 	bl	800038c <__aeabi_fmul>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fd fb72 	bl	800038c <__aeabi_fmul>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd fb6d 	bl	800038c <__aeabi_fmul>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	461c      	mov	r4, r3
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f7fd fb67 	bl	800038c <__aeabi_fmul>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fb62 	bl	800038c <__aeabi_fmul>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4620      	mov	r0, r4
 8002cce:	f7fd fa53 	bl	8000178 <__aeabi_fsub>
 8002cd2:	4603      	mov	r3, r0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd90      	pop	{r4, r7, pc}
 8002cdc:	3fd9cd60 	.word	0x3fd9cd60

08002ce0 <EaseOutBack>:

static float EaseOutBack(float t)
{
 8002ce0:	b590      	push	{r4, r7, lr}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8002ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d5c <EaseOutBack+0x7c>)
 8002cea:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8002cec:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f7fd fa43 	bl	800017c <__addsf3>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	60bb      	str	r3, [r7, #8]

    return 1 + c3 * powf(t - 1, 3) + c1 * powf(t - 1, 2);
 8002cfa:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fd fa3a 	bl	8000178 <__aeabi_fsub>
 8002d04:	4603      	mov	r3, r0
 8002d06:	4916      	ldr	r1, [pc, #88]	@ (8002d60 <EaseOutBack+0x80>)
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f004 f9dd 	bl	80070c8 <powf>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fd fb3a 	bl	800038c <__aeabi_fmul>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fa2c 	bl	800017c <__addsf3>
 8002d24:	4603      	mov	r3, r0
 8002d26:	461c      	mov	r4, r3
 8002d28:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7fd fa23 	bl	8000178 <__aeabi_fsub>
 8002d32:	4603      	mov	r3, r0
 8002d34:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f004 f9c5 	bl	80070c8 <powf>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	68f9      	ldr	r1, [r7, #12]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fd fb22 	bl	800038c <__aeabi_fmul>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	f7fd fa15 	bl	800017c <__addsf3>
 8002d52:	4603      	mov	r3, r0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd90      	pop	{r4, r7, pc}
 8002d5c:	3fd9cd60 	.word	0x3fd9cd60
 8002d60:	40400000 	.word	0x40400000

08002d64 <EaseInOutBack>:

static float EaseInOutBack(float t)
{
 8002d64:	b5b0      	push	{r4, r5, r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8002d6c:	4b40      	ldr	r3, [pc, #256]	@ (8002e70 <EaseInOutBack+0x10c>)
 8002d6e:	60fb      	str	r3, [r7, #12]
    const float c2 = c1 * 1.525f;
 8002d70:	4940      	ldr	r1, [pc, #256]	@ (8002e74 <EaseInOutBack+0x110>)
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f7fd fb0a 	bl	800038c <__aeabi_fmul>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	60bb      	str	r3, [r7, #8]

    if (t < 0.5f)
 8002d7c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7fd fca1 	bl	80006c8 <__aeabi_fcmplt>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d02c      	beq.n	8002de6 <EaseInOutBack+0x82>
        return (powf(2 * t, 2) * ((c2 + 1) * 2 * t - c2)) / 2;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fd f9f3 	bl	800017c <__addsf3>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f004 f993 	bl	80070c8 <powf>
 8002da2:	4604      	mov	r4, r0
 8002da4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002da8:	68b8      	ldr	r0, [r7, #8]
 8002daa:	f7fd f9e7 	bl	800017c <__addsf3>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4619      	mov	r1, r3
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd f9e2 	bl	800017c <__addsf3>
 8002db8:	4603      	mov	r3, r0
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fd fae5 	bl	800038c <__aeabi_fmul>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fd f9d6 	bl	8000178 <__aeabi_fsub>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	f7fd fadb 	bl	800038c <__aeabi_fmul>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fd fb89 	bl	80004f4 <__aeabi_fdiv>
 8002de2:	4603      	mov	r3, r0
 8002de4:	e03f      	b.n	8002e66 <EaseInOutBack+0x102>
    return (powf(2 * t - 2, 2) * ((c2 + 1) * (t * 2 - 2) + c2) + 2) / 2;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4619      	mov	r1, r3
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fd f9c6 	bl	800017c <__addsf3>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fd f9be 	bl	8000178 <__aeabi_fsub>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002e02:	4618      	mov	r0, r3
 8002e04:	f004 f960 	bl	80070c8 <powf>
 8002e08:	4604      	mov	r4, r0
 8002e0a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002e0e:	68b8      	ldr	r0, [r7, #8]
 8002e10:	f7fd f9b4 	bl	800017c <__addsf3>
 8002e14:	4603      	mov	r3, r0
 8002e16:	461d      	mov	r5, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd f9ad 	bl	800017c <__addsf3>
 8002e22:	4603      	mov	r3, r0
 8002e24:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fd f9a5 	bl	8000178 <__aeabi_fsub>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4619      	mov	r1, r3
 8002e32:	4628      	mov	r0, r5
 8002e34:	f7fd faaa 	bl	800038c <__aeabi_fmul>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fd f99d 	bl	800017c <__addsf3>
 8002e42:	4603      	mov	r3, r0
 8002e44:	4619      	mov	r1, r3
 8002e46:	4620      	mov	r0, r4
 8002e48:	f7fd faa0 	bl	800038c <__aeabi_fmul>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd f992 	bl	800017c <__addsf3>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fd fb48 	bl	80004f4 <__aeabi_fdiv>
 8002e64:	4603      	mov	r3, r0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	3fd9cd60 	.word	0x3fd9cd60
 8002e74:	3fc33333 	.word	0x3fc33333

08002e78 <EaseInSine>:

// 正弦缓动
static float EaseInSine(float t)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
    return 1 - cosf((t * 3.14159f) / 2);
 8002e80:	490c      	ldr	r1, [pc, #48]	@ (8002eb4 <EaseInSine+0x3c>)
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7fd fa82 	bl	800038c <__aeabi_fmul>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd fb30 	bl	80004f4 <__aeabi_fdiv>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4618      	mov	r0, r3
 8002e98:	f004 f97e 	bl	8007198 <cosf>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002ea4:	f7fd f968 	bl	8000178 <__aeabi_fsub>
 8002ea8:	4603      	mov	r3, r0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40490fd0 	.word	0x40490fd0

08002eb8 <EaseOutSine>:

static float EaseOutSine(float t)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
    return sinf((t * 3.14159f) / 2);
 8002ec0:	4909      	ldr	r1, [pc, #36]	@ (8002ee8 <EaseOutSine+0x30>)
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fd fa62 	bl	800038c <__aeabi_fmul>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fd fb10 	bl	80004f4 <__aeabi_fdiv>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f004 f996 	bl	8007208 <sinf>
 8002edc:	4603      	mov	r3, r0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40490fd0 	.word	0x40490fd0

08002eec <EaseInOutSine>:

static float EaseInOutSine(float t)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
    return -(cosf(3.14159f * t) - 1) / 2;
 8002ef4:	490d      	ldr	r1, [pc, #52]	@ (8002f2c <EaseInOutSine+0x40>)
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fd fa48 	bl	800038c <__aeabi_fmul>
 8002efc:	4603      	mov	r3, r0
 8002efe:	4618      	mov	r0, r3
 8002f00:	f004 f94a 	bl	8007198 <cosf>
 8002f04:	4603      	mov	r3, r0
 8002f06:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd f934 	bl	8000178 <__aeabi_fsub>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002f16:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd faea 	bl	80004f4 <__aeabi_fdiv>
 8002f20:	4603      	mov	r3, r0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40490fd0 	.word	0x40490fd0

08002f30 <GetEaseValue>:

static float GetEaseValue(float progress, EaseType_t easeType)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	70fb      	strb	r3, [r7, #3]
    switch (easeType)
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	2b18      	cmp	r3, #24
 8002f40:	f200 80b3 	bhi.w	80030aa <GetEaseValue+0x17a>
 8002f44:	a201      	add	r2, pc, #4	@ (adr r2, 8002f4c <GetEaseValue+0x1c>)
 8002f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4a:	bf00      	nop
 8002f4c:	08002fb1 	.word	0x08002fb1
 8002f50:	08002fbb 	.word	0x08002fbb
 8002f54:	08002fc5 	.word	0x08002fc5
 8002f58:	08002fcf 	.word	0x08002fcf
 8002f5c:	08002fd9 	.word	0x08002fd9
 8002f60:	08002fe3 	.word	0x08002fe3
 8002f64:	08002fed 	.word	0x08002fed
 8002f68:	08002ff7 	.word	0x08002ff7
 8002f6c:	08003001 	.word	0x08003001
 8002f70:	0800300b 	.word	0x0800300b
 8002f74:	08003015 	.word	0x08003015
 8002f78:	0800301f 	.word	0x0800301f
 8002f7c:	08003029 	.word	0x08003029
 8002f80:	08003033 	.word	0x08003033
 8002f84:	0800303d 	.word	0x0800303d
 8002f88:	08003047 	.word	0x08003047
 8002f8c:	08003051 	.word	0x08003051
 8002f90:	0800305b 	.word	0x0800305b
 8002f94:	08003065 	.word	0x08003065
 8002f98:	0800306f 	.word	0x0800306f
 8002f9c:	08003079 	.word	0x08003079
 8002fa0:	08003083 	.word	0x08003083
 8002fa4:	0800308d 	.word	0x0800308d
 8002fa8:	08003097 	.word	0x08003097
 8002fac:	080030a1 	.word	0x080030a1
    {
    case EASE_LINEAR:
        return EaseLinear(progress);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff fa15 	bl	80023e0 <EaseLinear>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	e078      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_IN_QUAD:
        return EaseInQuad(progress);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff fa1a 	bl	80023f4 <EaseInQuad>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	e073      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_OUT_QUAD:
        return EaseOutQuad(progress);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff fa22 	bl	800240e <EaseOutQuad>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	e06e      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_INOUT_QUAD:
        return EaseInOutQuad(progress);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff fa30 	bl	8002434 <EaseInOutQuad>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	e069      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_IN_CUBIC:
        return EaseInCubic(progress);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff fa5e 	bl	800249a <EaseInCubic>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	e064      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_OUT_CUBIC:
        return EaseOutCubic(progress);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff fa6b 	bl	80024be <EaseOutCubic>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	e05f      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_INOUT_CUBIC:
        return EaseInOutCubic(progress);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7ff fa85 	bl	80024fc <EaseInOutCubic>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	e05a      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_IN_EXPO:
        return EaseInExpo(progress);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff fad2 	bl	80025a0 <EaseInExpo>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	e055      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_OUT_EXPO:
        return EaseOutExpo(progress);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff faf3 	bl	80025ec <EaseOutExpo>
 8003006:	4603      	mov	r3, r0
 8003008:	e050      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_INOUT_EXPO:
        return EaseInOutExpo(progress);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff fb14 	bl	8002638 <EaseInOutExpo>
 8003010:	4603      	mov	r3, r0
 8003012:	e04b      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_IN_CIRC:
        return EaseInCirc(progress);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff fb6f 	bl	80026f8 <EaseInCirc>
 800301a:	4603      	mov	r3, r0
 800301c:	e046      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_OUT_CIRC:
        return EaseOutCirc(progress);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7ff fb87 	bl	8002732 <EaseOutCirc>
 8003024:	4603      	mov	r3, r0
 8003026:	e041      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_INOUT_CIRC:
        return EaseInOutCirc(progress);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff fba0 	bl	800276e <EaseInOutCirc>
 800302e:	4603      	mov	r3, r0
 8003030:	e03c      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_IN_ELASTIC:
        return EaseInElastic(progress);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff fbf6 	bl	8002824 <EaseInElastic>
 8003038:	4603      	mov	r3, r0
 800303a:	e037      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_OUT_ELASTIC:
        return EaseOutElastic(progress);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff fc41 	bl	80028c4 <EaseOutElastic>
 8003042:	4603      	mov	r3, r0
 8003044:	e032      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_INOUT_ELASTIC:
        return EaseInOutElastic(progress);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff fc8c 	bl	8002964 <EaseInOutElastic>
 800304c:	4603      	mov	r3, r0
 800304e:	e02d      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_IN_BOUNCE:
        return EaseInBounce(progress);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff fdbd 	bl	8002bd0 <EaseInBounce>
 8003056:	4603      	mov	r3, r0
 8003058:	e028      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_OUT_BOUNCE:
        return EaseOutBounce(progress);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7ff fd1a 	bl	8002a94 <EaseOutBounce>
 8003060:	4603      	mov	r3, r0
 8003062:	e023      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_INOUT_BOUNCE:
        return EaseInOutBounce(progress);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff fdcb 	bl	8002c00 <EaseInOutBounce>
 800306a:	4603      	mov	r3, r0
 800306c:	e01e      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_IN_BACK:
        return EaseInBack(progress);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7ff fe04 	bl	8002c7c <EaseInBack>
 8003074:	4603      	mov	r3, r0
 8003076:	e019      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_OUT_BACK:
        return EaseOutBack(progress);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff fe31 	bl	8002ce0 <EaseOutBack>
 800307e:	4603      	mov	r3, r0
 8003080:	e014      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_INOUT_BACK:
        return EaseInOutBack(progress);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff fe6e 	bl	8002d64 <EaseInOutBack>
 8003088:	4603      	mov	r3, r0
 800308a:	e00f      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_IN_SINE:
        return EaseInSine(progress);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff fef3 	bl	8002e78 <EaseInSine>
 8003092:	4603      	mov	r3, r0
 8003094:	e00a      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_OUT_SINE:
        return EaseOutSine(progress);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff ff0e 	bl	8002eb8 <EaseOutSine>
 800309c:	4603      	mov	r3, r0
 800309e:	e005      	b.n	80030ac <GetEaseValue+0x17c>
    case EASE_INOUT_SINE:
        return EaseInOutSine(progress);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff ff23 	bl	8002eec <EaseInOutSine>
 80030a6:	4603      	mov	r3, r0
 80030a8:	e000      	b.n	80030ac <GetEaseValue+0x17c>
    default:
        return progress;
 80030aa:	687b      	ldr	r3, [r7, #4]
    }
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <OLED_InitAnimation>:

#pragma region ANIMATIONTWEENS
// 这里是底层动画实现
void OLED_InitAnimation(Animation_t *anim, float startValue, float endValue,
                        uint32_t duration, EaseType_t easeType)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	603b      	str	r3, [r7, #0]
    anim->startTime = HAL_GetTick();
 80030c2:	f000 fe6d 	bl	8003da0 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	601a      	str	r2, [r3, #0]
    anim->duration = duration;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	605a      	str	r2, [r3, #4]
    anim->startValue = startValue;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	609a      	str	r2, [r3, #8]
    anim->endValue = endValue;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	60da      	str	r2, [r3, #12]
    anim->currentValue = startValue;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	611a      	str	r2, [r3, #16]
    anim->isActive = 1;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2201      	movs	r2, #1
 80030e8:	751a      	strb	r2, [r3, #20]
    anim->easeType = easeType;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	7e3a      	ldrb	r2, [r7, #24]
 80030ee:	755a      	strb	r2, [r3, #21]
}
 80030f0:	bf00      	nop
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <OLED_UpdateAnimation>:

// 更新动画状态，返回isActive的值
uint8_t OLED_UpdateAnimation(Animation_t *anim, uint32_t currentTime)
{
 80030f8:	b590      	push	{r4, r7, lr}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
    if (!anim->isActive)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	7d1b      	ldrb	r3, [r3, #20]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <OLED_UpdateAnimation+0x16>
        return 0;
 800310a:	2300      	movs	r3, #0
 800310c:	e04d      	b.n	80031aa <OLED_UpdateAnimation+0xb2>

    uint32_t elapsedTime = currentTime - anim->startTime;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	617b      	str	r3, [r7, #20]
    // 动画完成
    if (elapsedTime >= anim->duration || anim->currentValue == anim->endValue) // 如果我的目标在指定的点上，也关闭isActive
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	429a      	cmp	r2, r3
 8003120:	d20a      	bcs.n	8003138 <OLED_UpdateAnimation+0x40>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691a      	ldr	r2, [r3, #16]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	4619      	mov	r1, r3
 800312c:	4610      	mov	r0, r2
 800312e:	f7fd fac1 	bl	80006b4 <__aeabi_fcmpeq>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <OLED_UpdateAnimation+0x52>
    {
        anim->currentValue = anim->endValue;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	611a      	str	r2, [r3, #16]
        anim->isActive = 0;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	751a      	strb	r2, [r3, #20]
        return 0;
 8003146:	2300      	movs	r3, #0
 8003148:	e02f      	b.n	80031aa <OLED_UpdateAnimation+0xb2>
    }

    // 计算当前进度 (0.0 - 1.0)
    float progress = (float)elapsedTime / anim->duration;
 800314a:	6978      	ldr	r0, [r7, #20]
 800314c:	f7fd f8c6 	bl	80002dc <__aeabi_ui2f>
 8003150:	4604      	mov	r4, r0
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	4618      	mov	r0, r3
 8003158:	f7fd f8c0 	bl	80002dc <__aeabi_ui2f>
 800315c:	4603      	mov	r3, r0
 800315e:	4619      	mov	r1, r3
 8003160:	4620      	mov	r0, r4
 8003162:	f7fd f9c7 	bl	80004f4 <__aeabi_fdiv>
 8003166:	4603      	mov	r3, r0
 8003168:	613b      	str	r3, [r7, #16]

    // 应用缓动函数
    float easedProgress = GetEaseValue(progress, anim->easeType);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	7d5b      	ldrb	r3, [r3, #21]
 800316e:	4619      	mov	r1, r3
 8003170:	6938      	ldr	r0, [r7, #16]
 8003172:	f7ff fedd 	bl	8002f30 <GetEaseValue>
 8003176:	60f8      	str	r0, [r7, #12]

    // 计算当前值
    anim->currentValue = anim->startValue + (anim->endValue - anim->startValue) * easedProgress;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689c      	ldr	r4, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4619      	mov	r1, r3
 8003186:	4610      	mov	r0, r2
 8003188:	f7fc fff6 	bl	8000178 <__aeabi_fsub>
 800318c:	4603      	mov	r3, r0
 800318e:	68f9      	ldr	r1, [r7, #12]
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd f8fb 	bl	800038c <__aeabi_fmul>
 8003196:	4603      	mov	r3, r0
 8003198:	4619      	mov	r1, r3
 800319a:	4620      	mov	r0, r4
 800319c:	f7fc ffee 	bl	800017c <__addsf3>
 80031a0:	4603      	mov	r3, r0
 80031a2:	461a      	mov	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	611a      	str	r2, [r3, #16]

    return 1;
 80031a8:	2301      	movs	r3, #1
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	371c      	adds	r7, #28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd90      	pop	{r4, r7, pc}

080031b2 <OLED_GetAnimationValue>:

// 获取当前动画值
float OLED_GetAnimationValue(Animation_t *anim)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
    return anim->currentValue;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr

080031c8 <OLED_InitAnimationManager>:
AnimationManager_t Status_AnimationManager;
AnimationManager_t g_Title_AnimationManager; // 菜单动画管理器
AnimationManager_t g_AnimationManager; // 全局动画管理器

void OLED_InitAnimationManager(AnimationManager_t *manager) // 这是初始化一个动画管理器，填入你的manager名字，在系统初始化时候调用它
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
    manager->count = 0;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 25f0 	strb.w	r2, [r3, #1520]	@ 0x5f0
    memset(manager->taggedAnimations, 0, sizeof(manager->taggedAnimations));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f003 facf 	bl	8006784 <memset>
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <OLED_FindTaggedAnimation>:

TaggedAnimation_t *OLED_FindTaggedAnimation(AnimationManager_t *manager, const char *tag) // 查找对应manager的标签对应的动画tag
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < manager->count; i++)
 80031f8:	2300      	movs	r3, #0
 80031fa:	73fb      	strb	r3, [r7, #15]
 80031fc:	e016      	b.n	800322c <OLED_FindTaggedAnimation+0x3e>
    {
        if (strcmp(manager->taggedAnimations[i].tag, tag) == 0)
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	224c      	movs	r2, #76	@ 0x4c
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	4413      	add	r3, r2
 800320a:	6839      	ldr	r1, [r7, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7fc ff9d 	bl	800014c <strcmp>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d106      	bne.n	8003226 <OLED_FindTaggedAnimation+0x38>
        {
            return &manager->taggedAnimations[i];
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	224c      	movs	r2, #76	@ 0x4c
 800321c:	fb02 f303 	mul.w	r3, r2, r3
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	4413      	add	r3, r2
 8003224:	e009      	b.n	800323a <OLED_FindTaggedAnimation+0x4c>
    for (uint8_t i = 0; i < manager->count; i++)
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	3301      	adds	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8003232:	7bfa      	ldrb	r2, [r7, #15]
 8003234:	429a      	cmp	r2, r3
 8003236:	d3e2      	bcc.n	80031fe <OLED_FindTaggedAnimation+0x10>
        }
    }
    return NULL;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <OLED_GetObjectPosition>:

uint8_t OLED_GetObjectPosition(AnimationManager_t *manager, const char *tag, float *x, float *y) // 获取tag当前位置
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b086      	sub	sp, #24
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8003250:	68b9      	ldr	r1, [r7, #8]
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f7ff ffcb 	bl	80031ee <OLED_FindTaggedAnimation>
 8003258:	6178      	str	r0, [r7, #20]
    if (anim)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00f      	beq.n	8003280 <OLED_GetObjectPosition+0x3e>
    {
        if (x)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <OLED_GetObjectPosition+0x2c>
            *x = anim->currentX;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	601a      	str	r2, [r3, #0]
        if (y)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <OLED_GetObjectPosition+0x3a>
            *y = anim->currentY;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	601a      	str	r2, [r3, #0]
        return 1;
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <OLED_GetObjectPosition+0x40>
    }
    return 0;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <OLED_MoveObject>:

// 移动指定标签的对象
void OLED_MoveObject(AnimationManager_t *manager, const char *tag,
                     float startX, float startY, float targetX, float targetY,
                     uint32_t duration, EaseType_t easeType) // 这个函数是用来移动一个对象的，tag是对象的标签，startX和startY是起始坐标，targetX和targetY是目标坐标，duration是动画持续时间，easeType是缓动类型
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b088      	sub	sp, #32
 800328e:	af02      	add	r7, sp, #8
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	603b      	str	r3, [r7, #0]
    // 查找已存在的动画
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8003298:	68b9      	ldr	r1, [r7, #8]
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f7ff ffa7 	bl	80031ee <OLED_FindTaggedAnimation>
 80032a0:	6178      	str	r0, [r7, #20]

    // 如果没找到并且还有可用槽位，创建新的动画
    if (anim == NULL)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d122      	bne.n	80032ee <OLED_MoveObject+0x64>
    {
        if (manager->count >= MAX_ANIMATIONS)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 80032ae:	2b13      	cmp	r3, #19
 80032b0:	d838      	bhi.n	8003324 <OLED_MoveObject+0x9a>
            return; // 动画已满，无法添加

        anim = &manager->taggedAnimations[manager->count++];
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	b2d1      	uxtb	r1, r2
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	f882 15f0 	strb.w	r1, [r2, #1520]	@ 0x5f0
 80032c2:	461a      	mov	r2, r3
 80032c4:	234c      	movs	r3, #76	@ 0x4c
 80032c6:	fb02 f303 	mul.w	r3, r2, r3
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4413      	add	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]
        strncpy(anim->tag, tag, sizeof(anim->tag) - 1);
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	220f      	movs	r2, #15
 80032d4:	68b9      	ldr	r1, [r7, #8]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f003 fa5c 	bl	8006794 <strncpy>
        anim->tag[sizeof(anim->tag) - 1] = '\0'; // 确保字符串结束
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	2200      	movs	r2, #0
 80032e0:	73da      	strb	r2, [r3, #15]
        anim->currentX = startX;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = startY;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // 初始化或更新X和Y坐标的动画
    OLED_InitAnimation(&anim->xAnimation, startX, targetX, duration, easeType);
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f103 0010 	add.w	r0, r3, #16
 80032f4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032fc:	6a3a      	ldr	r2, [r7, #32]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	f7ff fed8 	bl	80030b4 <OLED_InitAnimation>
    OLED_InitAnimation(&anim->yAnimation, startY, targetY, duration, easeType);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800330a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003314:	6839      	ldr	r1, [r7, #0]
 8003316:	f7ff fecd 	bl	80030b4 <OLED_InitAnimation>
    anim->isActive = 1;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003322:	e000      	b.n	8003326 <OLED_MoveObject+0x9c>
            return; // 动画已满，无法添加
 8003324:	bf00      	nop
}
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <OLED_UpdateAnimationManager>:

// 更新manager里面的所有动画!
void OLED_UpdateAnimationManager(AnimationManager_t *manager) //! 这里需要使用OLED_UpdateDisplayVSync()来更新显示
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 8003334:	f000 fd34 	bl	8003da0 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

    for (uint8_t i = 0; i < manager->count; i++)
 800333a:	2300      	movs	r3, #0
 800333c:	75fb      	strb	r3, [r7, #23]
 800333e:	e03a      	b.n	80033b6 <OLED_UpdateAnimationManager+0x8a>
    {
        TaggedAnimation_t *anim = &manager->taggedAnimations[i];
 8003340:	7dfb      	ldrb	r3, [r7, #23]
 8003342:	224c      	movs	r2, #76	@ 0x4c
 8003344:	fb02 f303 	mul.w	r3, r2, r3
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	4413      	add	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]
        if (!anim->isActive)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d02a      	beq.n	80033ae <OLED_UpdateAnimationManager+0x82>
            continue;

        uint8_t activeX = OLED_UpdateAnimation(&anim->xAnimation, currentTime);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	3310      	adds	r3, #16
 800335c:	6939      	ldr	r1, [r7, #16]
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff feca 	bl	80030f8 <OLED_UpdateAnimation>
 8003364:	4603      	mov	r3, r0
 8003366:	72fb      	strb	r3, [r7, #11]
        uint8_t activeY = OLED_UpdateAnimation(&anim->yAnimation, currentTime);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	3328      	adds	r3, #40	@ 0x28
 800336c:	6939      	ldr	r1, [r7, #16]
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff fec2 	bl	80030f8 <OLED_UpdateAnimation>
 8003374:	4603      	mov	r3, r0
 8003376:	72bb      	strb	r3, [r7, #10]

        anim->currentX = OLED_GetAnimationValue(&anim->xAnimation);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3310      	adds	r3, #16
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff ff18 	bl	80031b2 <OLED_GetAnimationValue>
 8003382:	4602      	mov	r2, r0
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = OLED_GetAnimationValue(&anim->yAnimation);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	3328      	adds	r3, #40	@ 0x28
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff ff10 	bl	80031b2 <OLED_GetAnimationValue>
 8003392:	4602      	mov	r2, r0
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	649a      	str	r2, [r3, #72]	@ 0x48

        // 如果两个动画都结束，则标记该对象动画为非活跃
        if (!activeX && !activeY)
 8003398:	7afb      	ldrb	r3, [r7, #11]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d108      	bne.n	80033b0 <OLED_UpdateAnimationManager+0x84>
 800339e:	7abb      	ldrb	r3, [r7, #10]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d105      	bne.n	80033b0 <OLED_UpdateAnimationManager+0x84>
            anim->isActive = 0;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033ac:	e000      	b.n	80033b0 <OLED_UpdateAnimationManager+0x84>
            continue;
 80033ae:	bf00      	nop
    for (uint8_t i = 0; i < manager->count; i++)
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	3301      	adds	r3, #1
 80033b4:	75fb      	strb	r3, [r7, #23]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 80033bc:	7dfa      	ldrb	r2, [r7, #23]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d3be      	bcc.n	8003340 <OLED_UpdateAnimationManager+0x14>
    }
}
 80033c2:	bf00      	nop
 80033c4:	bf00      	nop
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <OLED_DoTweenObject>:
    return 0; // 如果没有找到，返回0表示非活跃
}

// 这个函数是用来移动一个对象的，tag是对象的标签，targetX和targetY是目标坐标，duration是动画持续时间，easeType是缓动类型 bool为是可以在while循环里面使用
void OLED_DoTweenObject(AnimationManager_t *manager, const char *tag, float targetX, float targetY, uint32_t duration, EaseType_t easeType, bool enablePrevMutiUseCalling)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08a      	sub	sp, #40	@ 0x28
 80033d0:	af04      	add	r7, sp, #16
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f7ff ff06 	bl	80031ee <OLED_FindTaggedAnimation>
 80033e2:	6178      	str	r0, [r7, #20]
    if (enablePrevMutiUseCalling)
 80033e4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01a      	beq.n	8003422 <OLED_DoTweenObject+0x56>
    {
        if (anim && !(anim->isActive)) // 找到了动画，而且它不是正在tween的时候
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d03f      	beq.n	8003472 <OLED_DoTweenObject+0xa6>
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d13a      	bne.n	8003472 <OLED_DoTweenObject+0xa6>
        {
            OLED_MoveObject(manager, tag, anim->currentX, anim->currentY, targetX, targetY, duration, easeType);
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003404:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003408:	9303      	str	r3, [sp, #12]
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	9302      	str	r3, [sp, #8]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	9301      	str	r3, [sp, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	460b      	mov	r3, r1
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f7ff ff35 	bl	800328a <OLED_MoveObject>
        if (anim && (anim->currentX != targetX || anim->currentY != targetY))
        {
            OLED_MoveObject(manager, tag, anim->currentX, anim->currentY, targetX, targetY, duration, easeType);
        }
    }
}
 8003420:	e027      	b.n	8003472 <OLED_DoTweenObject+0xa6>
        if (anim && (anim->currentX != targetX || anim->currentY != targetY))
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d024      	beq.n	8003472 <OLED_DoTweenObject+0xa6>
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342c:	4619      	mov	r1, r3
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fd f940 	bl	80006b4 <__aeabi_fcmpeq>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <OLED_DoTweenObject+0x82>
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800343e:	4619      	mov	r1, r3
 8003440:	6838      	ldr	r0, [r7, #0]
 8003442:	f7fd f937 	bl	80006b4 <__aeabi_fcmpeq>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d000      	beq.n	800344e <OLED_DoTweenObject+0x82>
}
 800344c:	e011      	b.n	8003472 <OLED_DoTweenObject+0xa6>
            OLED_MoveObject(manager, tag, anim->currentX, anim->currentY, targetX, targetY, duration, easeType);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003456:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800345a:	9303      	str	r3, [sp, #12]
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	9302      	str	r3, [sp, #8]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	460b      	mov	r3, r1
 800346a:	68b9      	ldr	r1, [r7, #8]
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f7ff ff0c 	bl	800328a <OLED_MoveObject>
}
 8003472:	bf00      	nop
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <OLED_MoveObjectAxis>:

// 为X或Y轴单独创建动画的函数
void OLED_MoveObjectAxis(AnimationManager_t *manager, const char *tag,
                         float startX, float startY, float targetX, float targetY,
                         uint32_t duration, EaseType_t easeType, bool onlyX, bool onlyY)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b088      	sub	sp, #32
 800347e:	af02      	add	r7, sp, #8
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
 8003486:	603b      	str	r3, [r7, #0]
    // 查找已存在的动画
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f7ff feaf 	bl	80031ee <OLED_FindTaggedAnimation>
 8003490:	6178      	str	r0, [r7, #20]

    // 如果没找到并且还有可用槽位，创建新的动画
    if (anim == NULL)
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d122      	bne.n	80034de <OLED_MoveObjectAxis+0x64>
    {
        if (manager->count >= MAX_ANIMATIONS)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 800349e:	2b13      	cmp	r3, #19
 80034a0:	d846      	bhi.n	8003530 <OLED_MoveObjectAxis+0xb6>
            return; // 动画已满，无法添加

        anim = &manager->taggedAnimations[manager->count++];
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	b2d1      	uxtb	r1, r2
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	f882 15f0 	strb.w	r1, [r2, #1520]	@ 0x5f0
 80034b2:	461a      	mov	r2, r3
 80034b4:	234c      	movs	r3, #76	@ 0x4c
 80034b6:	fb02 f303 	mul.w	r3, r2, r3
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4413      	add	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
        strncpy(anim->tag, tag, sizeof(anim->tag) - 1);
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	220f      	movs	r2, #15
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f003 f964 	bl	8006794 <strncpy>
        anim->tag[sizeof(anim->tag) - 1] = '\0'; // 确保字符串结束
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	2200      	movs	r2, #0
 80034d0:	73da      	strb	r2, [r3, #15]
        anim->currentX = startX;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = startY;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // 只初始化需要的轴的动画
    if (!onlyY) // 如果不是只修改Y轴，就修改X轴
 80034de:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80034e2:	f083 0301 	eor.w	r3, r3, #1
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <OLED_MoveObjectAxis+0x88>
        OLED_InitAnimation(&anim->xAnimation, startX, targetX, duration, easeType);
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f103 0010 	add.w	r0, r3, #16
 80034f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fa:	6a3a      	ldr	r2, [r7, #32]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	f7ff fdd9 	bl	80030b4 <OLED_InitAnimation>
    if (!onlyX) // 如果不是只修改X轴，就修改Y轴
 8003502:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003506:	f083 0301 	eor.w	r3, r3, #1
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00a      	beq.n	8003526 <OLED_MoveObjectAxis+0xac>
        OLED_InitAnimation(&anim->yAnimation, startY, targetY, duration, easeType);
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8003516:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003520:	6839      	ldr	r1, [r7, #0]
 8003522:	f7ff fdc7 	bl	80030b4 <OLED_InitAnimation>

    anim->isActive = 1;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800352e:	e000      	b.n	8003532 <OLED_MoveObjectAxis+0xb8>
            return; // 动画已满，无法添加
 8003530:	bf00      	nop
}
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <OLED_DoTweenObjectX>:

// 这个函数是用来移动一个对象的，tag是对象的标签，targetX是目标坐标，duration是动画持续时间，easeType是缓动类型
//! 这里不可以在while里面调用！为一次性调用
void OLED_DoTweenObjectX(AnimationManager_t *manager, const char *tag, float targetX, uint32_t duration, EaseType_t easeType)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08c      	sub	sp, #48	@ 0x30
 800353c:	af06      	add	r7, sp, #24
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8003546:	68b9      	ldr	r1, [r7, #8]
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f7ff fe50 	bl	80031ee <OLED_FindTaggedAnimation>
 800354e:	6178      	str	r0, [r7, #20]
    if (anim && anim->currentX != targetX)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d021      	beq.n	800359a <OLED_DoTweenObjectX+0x62>
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355a:	4619      	mov	r1, r3
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7fd f8a9 	bl	80006b4 <__aeabi_fcmpeq>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d000      	beq.n	800356a <OLED_DoTweenObjectX+0x32>
    {
        OLED_MoveObjectAxis(manager, tag, anim->currentX, anim->currentY, targetX, anim->currentY, duration, easeType, true, false);
    }
}
 8003568:	e017      	b.n	800359a <OLED_DoTweenObjectX+0x62>
        OLED_MoveObjectAxis(manager, tag, anim->currentX, anim->currentY, targetX, anim->currentY, duration, easeType, true, false);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003576:	2200      	movs	r2, #0
 8003578:	9205      	str	r2, [sp, #20]
 800357a:	2201      	movs	r2, #1
 800357c:	9204      	str	r2, [sp, #16]
 800357e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003582:	9203      	str	r2, [sp, #12]
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	9202      	str	r2, [sp, #8]
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	4603      	mov	r3, r0
 8003590:	460a      	mov	r2, r1
 8003592:	68b9      	ldr	r1, [r7, #8]
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f7ff ff70 	bl	800347a <OLED_MoveObjectAxis>
}
 800359a:	bf00      	nop
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <OLED_DrawTitleBar>:

#pragma region OLED_EPICFUL_UI

// 绘制UI标题栏
void OLED_DrawTitleBar(char *title) // 确保标题长度不超过22个字符 //! UPDATEDISPLAY REQUIRED
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b086      	sub	sp, #24
 80035a6:	af02      	add	r7, sp, #8
 80035a8:	6078      	str	r0, [r7, #4]
    unsigned char titleLength = strlen(title) * 6;
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fc fdd8 	bl	8000160 <strlen>
 80035b0:	4603      	mov	r3, r0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	0052      	lsls	r2, r2, #1
 80035b8:	4413      	add	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	73fb      	strb	r3, [r7, #15]

    // 绘制标题栏背景 (白色填充)
    OLED_DrawFilledRectangle(0, 0, OLED_WIDTH, 8, 1);
 80035be:	2301      	movs	r3, #1
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	2308      	movs	r3, #8
 80035c4:	2280      	movs	r2, #128	@ 0x80
 80035c6:	2100      	movs	r1, #0
 80035c8:	2000      	movs	r0, #0
 80035ca:	f000 f810 	bl	80035ee <OLED_DrawFilledRectangle>

    // 显示标题 (黑底白字，反色效果)
    OLED_DisplayStringInverted((OLED_WIDTH - titleLength) / 2, 0, title, 1);
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80035d4:	0fda      	lsrs	r2, r3, #31
 80035d6:	4413      	add	r3, r2
 80035d8:	105b      	asrs	r3, r3, #1
 80035da:	b218      	sxth	r0, r3
 80035dc:	2301      	movs	r3, #1
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	2100      	movs	r1, #0
 80035e2:	f7fd fffa 	bl	80015da <OLED_DisplayStringInverted>
}
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <OLED_DrawFilledRectangle>:
    }
}

// 绘制填充矩形
void OLED_DrawFilledRectangle(int16_t x, int16_t y, uint8_t width, uint8_t height, uint8_t color) //! UPDATEDISPLAY REQUIRED
{
 80035ee:	b590      	push	{r4, r7, lr}
 80035f0:	b087      	sub	sp, #28
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	4604      	mov	r4, r0
 80035f6:	4608      	mov	r0, r1
 80035f8:	4611      	mov	r1, r2
 80035fa:	461a      	mov	r2, r3
 80035fc:	4623      	mov	r3, r4
 80035fe:	80fb      	strh	r3, [r7, #6]
 8003600:	4603      	mov	r3, r0
 8003602:	80bb      	strh	r3, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	70fb      	strb	r3, [r7, #3]
 8003608:	4613      	mov	r3, r2
 800360a:	70bb      	strb	r3, [r7, #2]
    // Initial check for zero dimensions
    if (width == 0 || height == 0)
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d07e      	beq.n	8003710 <OLED_DrawFilledRectangle+0x122>
 8003612:	78bb      	ldrb	r3, [r7, #2]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d07b      	beq.n	8003710 <OLED_DrawFilledRectangle+0x122>
    {
        return;
    }

    // Use int16_t for width and height internally for clipping calculations
    int16_t current_width = width;
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	82fb      	strh	r3, [r7, #22]
    int16_t current_height = height;
 800361c:	78bb      	ldrb	r3, [r7, #2]
 800361e:	82bb      	strh	r3, [r7, #20]

    // Clip left edge: if x is negative, adjust width and set x to 0
    if (x < 0)
 8003620:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003624:	2b00      	cmp	r3, #0
 8003626:	da06      	bge.n	8003636 <OLED_DrawFilledRectangle+0x48>
    {
        current_width += x; // x is negative, so this reduces width
 8003628:	8afa      	ldrh	r2, [r7, #22]
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	4413      	add	r3, r2
 800362e:	b29b      	uxth	r3, r3
 8003630:	82fb      	strh	r3, [r7, #22]
        x = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	80fb      	strh	r3, [r7, #6]
    }

    // Clip top edge: if y is negative, adjust height and set y to 0
    if (y < 0)
 8003636:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	da06      	bge.n	800364c <OLED_DrawFilledRectangle+0x5e>
    {
        current_height += y; // y is negative, so this reduces height
 800363e:	8aba      	ldrh	r2, [r7, #20]
 8003640:	88bb      	ldrh	r3, [r7, #4]
 8003642:	4413      	add	r3, r2
 8003644:	b29b      	uxth	r3, r3
 8003646:	82bb      	strh	r3, [r7, #20]
        y = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	80bb      	strh	r3, [r7, #4]
    }

    // If width or height became non-positive after left/top clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 800364c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003650:	2b00      	cmp	r3, #0
 8003652:	dd5f      	ble.n	8003714 <OLED_DrawFilledRectangle+0x126>
 8003654:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	dd5b      	ble.n	8003714 <OLED_DrawFilledRectangle+0x126>
        return;
    }

    // Check if the adjusted rectangle is entirely off-screen to the right or bottom
    // At this point, x and y are >= 0.
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT)
 800365c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003660:	2b7f      	cmp	r3, #127	@ 0x7f
 8003662:	dc59      	bgt.n	8003718 <OLED_DrawFilledRectangle+0x12a>
 8003664:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003668:	2b3f      	cmp	r3, #63	@ 0x3f
 800366a:	dc55      	bgt.n	8003718 <OLED_DrawFilledRectangle+0x12a>
    {
        return;
    }

    // Clip right edge: if x + current_width extends beyond OLED_WIDTH
    if (x + current_width > OLED_WIDTH)
 800366c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003670:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003674:	4413      	add	r3, r2
 8003676:	2b80      	cmp	r3, #128	@ 0x80
 8003678:	dd04      	ble.n	8003684 <OLED_DrawFilledRectangle+0x96>
    {
        current_width = OLED_WIDTH - x;
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8003680:	b29b      	uxth	r3, r3
 8003682:	82fb      	strh	r3, [r7, #22]
    }

    // Clip bottom edge: if y + current_height extends beyond OLED_HEIGHT
    if (y + current_height > OLED_HEIGHT)
 8003684:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003688:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800368c:	4413      	add	r3, r2
 800368e:	2b40      	cmp	r3, #64	@ 0x40
 8003690:	dd04      	ble.n	800369c <OLED_DrawFilledRectangle+0xae>
    {
        current_height = OLED_HEIGHT - y;
 8003692:	88bb      	ldrh	r3, [r7, #4]
 8003694:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8003698:	b29b      	uxth	r3, r3
 800369a:	82bb      	strh	r3, [r7, #20]
    }

    // If width or height became non-positive after right/bottom clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 800369c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	dd3b      	ble.n	800371c <OLED_DrawFilledRectangle+0x12e>
 80036a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	dd37      	ble.n	800371c <OLED_DrawFilledRectangle+0x12e>
    {
        return;
    }

    // Cast coordinates and dimensions to uint8_t for drawing
    uint8_t final_x = (uint8_t)x;
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	747b      	strb	r3, [r7, #17]
    uint8_t final_y = (uint8_t)y;
 80036b0:	88bb      	ldrh	r3, [r7, #4]
 80036b2:	743b      	strb	r3, [r7, #16]
    uint8_t final_width = (uint8_t)current_width;
 80036b4:	8afb      	ldrh	r3, [r7, #22]
 80036b6:	73fb      	strb	r3, [r7, #15]
    uint8_t final_height = (uint8_t)current_height;
 80036b8:	8abb      	ldrh	r3, [r7, #20]
 80036ba:	73bb      	strb	r3, [r7, #14]

    uint8_t x2 = final_x + final_width - 1;
 80036bc:	7c7a      	ldrb	r2, [r7, #17]
 80036be:	7bfb      	ldrb	r3, [r7, #15]
 80036c0:	4413      	add	r3, r2
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	3b01      	subs	r3, #1
 80036c6:	737b      	strb	r3, [r7, #13]
    uint8_t y2 = final_y + final_height - 1;
 80036c8:	7c3a      	ldrb	r2, [r7, #16]
 80036ca:	7bbb      	ldrb	r3, [r7, #14]
 80036cc:	4413      	add	r3, r2
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	733b      	strb	r3, [r7, #12]

    // 逐像素填充
    for (uint8_t j = final_y; j <= y2; j++)
 80036d4:	7c3b      	ldrb	r3, [r7, #16]
 80036d6:	74fb      	strb	r3, [r7, #19]
 80036d8:	e015      	b.n	8003706 <OLED_DrawFilledRectangle+0x118>
    {
        for (uint8_t i = final_x; i <= x2; i++)
 80036da:	7c7b      	ldrb	r3, [r7, #17]
 80036dc:	74bb      	strb	r3, [r7, #18]
 80036de:	e00b      	b.n	80036f8 <OLED_DrawFilledRectangle+0x10a>
        {
            OLED_WritePixel(i, j, color);
 80036e0:	7cbb      	ldrb	r3, [r7, #18]
 80036e2:	b21b      	sxth	r3, r3
 80036e4:	7cfa      	ldrb	r2, [r7, #19]
 80036e6:	b211      	sxth	r1, r2
 80036e8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fd fc07 	bl	8000f00 <OLED_WritePixel>
        for (uint8_t i = final_x; i <= x2; i++)
 80036f2:	7cbb      	ldrb	r3, [r7, #18]
 80036f4:	3301      	adds	r3, #1
 80036f6:	74bb      	strb	r3, [r7, #18]
 80036f8:	7cba      	ldrb	r2, [r7, #18]
 80036fa:	7b7b      	ldrb	r3, [r7, #13]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d9ef      	bls.n	80036e0 <OLED_DrawFilledRectangle+0xf2>
    for (uint8_t j = final_y; j <= y2; j++)
 8003700:	7cfb      	ldrb	r3, [r7, #19]
 8003702:	3301      	adds	r3, #1
 8003704:	74fb      	strb	r3, [r7, #19]
 8003706:	7cfa      	ldrb	r2, [r7, #19]
 8003708:	7b3b      	ldrb	r3, [r7, #12]
 800370a:	429a      	cmp	r2, r3
 800370c:	d9e5      	bls.n	80036da <OLED_DrawFilledRectangle+0xec>
 800370e:	e006      	b.n	800371e <OLED_DrawFilledRectangle+0x130>
        return;
 8003710:	bf00      	nop
 8003712:	e004      	b.n	800371e <OLED_DrawFilledRectangle+0x130>
        return;
 8003714:	bf00      	nop
 8003716:	e002      	b.n	800371e <OLED_DrawFilledRectangle+0x130>
        return;
 8003718:	bf00      	nop
 800371a:	e000      	b.n	800371e <OLED_DrawFilledRectangle+0x130>
        return;
 800371c:	bf00      	nop
        }
    }
}
 800371e:	371c      	adds	r7, #28
 8003720:	46bd      	mov	sp, r7
 8003722:	bd90      	pop	{r4, r7, pc}

08003724 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003728:	4b17      	ldr	r3, [pc, #92]	@ (8003788 <MX_SPI2_Init+0x64>)
 800372a:	4a18      	ldr	r2, [pc, #96]	@ (800378c <MX_SPI2_Init+0x68>)
 800372c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800372e:	4b16      	ldr	r3, [pc, #88]	@ (8003788 <MX_SPI2_Init+0x64>)
 8003730:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003734:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003736:	4b14      	ldr	r3, [pc, #80]	@ (8003788 <MX_SPI2_Init+0x64>)
 8003738:	2200      	movs	r2, #0
 800373a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800373c:	4b12      	ldr	r3, [pc, #72]	@ (8003788 <MX_SPI2_Init+0x64>)
 800373e:	2200      	movs	r2, #0
 8003740:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003742:	4b11      	ldr	r3, [pc, #68]	@ (8003788 <MX_SPI2_Init+0x64>)
 8003744:	2200      	movs	r2, #0
 8003746:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003748:	4b0f      	ldr	r3, [pc, #60]	@ (8003788 <MX_SPI2_Init+0x64>)
 800374a:	2200      	movs	r2, #0
 800374c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800374e:	4b0e      	ldr	r3, [pc, #56]	@ (8003788 <MX_SPI2_Init+0x64>)
 8003750:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003754:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003756:	4b0c      	ldr	r3, [pc, #48]	@ (8003788 <MX_SPI2_Init+0x64>)
 8003758:	2200      	movs	r2, #0
 800375a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800375c:	4b0a      	ldr	r3, [pc, #40]	@ (8003788 <MX_SPI2_Init+0x64>)
 800375e:	2200      	movs	r2, #0
 8003760:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003762:	4b09      	ldr	r3, [pc, #36]	@ (8003788 <MX_SPI2_Init+0x64>)
 8003764:	2200      	movs	r2, #0
 8003766:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003768:	4b07      	ldr	r3, [pc, #28]	@ (8003788 <MX_SPI2_Init+0x64>)
 800376a:	2200      	movs	r2, #0
 800376c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800376e:	4b06      	ldr	r3, [pc, #24]	@ (8003788 <MX_SPI2_Init+0x64>)
 8003770:	220a      	movs	r2, #10
 8003772:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003774:	4804      	ldr	r0, [pc, #16]	@ (8003788 <MX_SPI2_Init+0x64>)
 8003776:	f001 fffb 	bl	8005770 <HAL_SPI_Init>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003780:	f7fd fa6b 	bl	8000c5a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003784:	bf00      	nop
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20003d44 	.word	0x20003d44
 800378c:	40003800 	.word	0x40003800

08003790 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003798:	f107 0310 	add.w	r3, r7, #16
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	609a      	str	r2, [r3, #8]
 80037a4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a1c      	ldr	r2, [pc, #112]	@ (800381c <HAL_SPI_MspInit+0x8c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d131      	bne.n	8003814 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80037b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003820 <HAL_SPI_MspInit+0x90>)
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	4a1a      	ldr	r2, [pc, #104]	@ (8003820 <HAL_SPI_MspInit+0x90>)
 80037b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037ba:	61d3      	str	r3, [r2, #28]
 80037bc:	4b18      	ldr	r3, [pc, #96]	@ (8003820 <HAL_SPI_MspInit+0x90>)
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037c8:	4b15      	ldr	r3, [pc, #84]	@ (8003820 <HAL_SPI_MspInit+0x90>)
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	4a14      	ldr	r2, [pc, #80]	@ (8003820 <HAL_SPI_MspInit+0x90>)
 80037ce:	f043 0308 	orr.w	r3, r3, #8
 80037d2:	6193      	str	r3, [r2, #24]
 80037d4:	4b12      	ldr	r3, [pc, #72]	@ (8003820 <HAL_SPI_MspInit+0x90>)
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 80037e0:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80037e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e6:	2302      	movs	r3, #2
 80037e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037ea:	2303      	movs	r3, #3
 80037ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ee:	f107 0310 	add.w	r3, r7, #16
 80037f2:	4619      	mov	r1, r3
 80037f4:	480b      	ldr	r0, [pc, #44]	@ (8003824 <HAL_SPI_MspInit+0x94>)
 80037f6:	f000 fd6f 	bl	80042d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IPS_MISO_Pin;
 80037fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80037fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003804:	2300      	movs	r3, #0
 8003806:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(IPS_MISO_GPIO_Port, &GPIO_InitStruct);
 8003808:	f107 0310 	add.w	r3, r7, #16
 800380c:	4619      	mov	r1, r3
 800380e:	4805      	ldr	r0, [pc, #20]	@ (8003824 <HAL_SPI_MspInit+0x94>)
 8003810:	f000 fd62 	bl	80042d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003814:	bf00      	nop
 8003816:	3720      	adds	r7, #32
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40003800 	.word	0x40003800
 8003820:	40021000 	.word	0x40021000
 8003824:	40010c00 	.word	0x40010c00

08003828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800382e:	4b15      	ldr	r3, [pc, #84]	@ (8003884 <HAL_MspInit+0x5c>)
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	4a14      	ldr	r2, [pc, #80]	@ (8003884 <HAL_MspInit+0x5c>)
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	6193      	str	r3, [r2, #24]
 800383a:	4b12      	ldr	r3, [pc, #72]	@ (8003884 <HAL_MspInit+0x5c>)
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	60bb      	str	r3, [r7, #8]
 8003844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003846:	4b0f      	ldr	r3, [pc, #60]	@ (8003884 <HAL_MspInit+0x5c>)
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	4a0e      	ldr	r2, [pc, #56]	@ (8003884 <HAL_MspInit+0x5c>)
 800384c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003850:	61d3      	str	r3, [r2, #28]
 8003852:	4b0c      	ldr	r3, [pc, #48]	@ (8003884 <HAL_MspInit+0x5c>)
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800385a:	607b      	str	r3, [r7, #4]
 800385c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800385e:	4b0a      	ldr	r3, [pc, #40]	@ (8003888 <HAL_MspInit+0x60>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	4a04      	ldr	r2, [pc, #16]	@ (8003888 <HAL_MspInit+0x60>)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800387a:	bf00      	nop
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr
 8003884:	40021000 	.word	0x40021000
 8003888:	40010000 	.word	0x40010000

0800388c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003890:	bf00      	nop
 8003892:	e7fd      	b.n	8003890 <NMI_Handler+0x4>

08003894 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003898:	bf00      	nop
 800389a:	e7fd      	b.n	8003898 <HardFault_Handler+0x4>

0800389c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038a0:	bf00      	nop
 80038a2:	e7fd      	b.n	80038a0 <MemManage_Handler+0x4>

080038a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038a8:	bf00      	nop
 80038aa:	e7fd      	b.n	80038a8 <BusFault_Handler+0x4>

080038ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038b0:	bf00      	nop
 80038b2:	e7fd      	b.n	80038b0 <UsageFault_Handler+0x4>

080038b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038b8:	bf00      	nop
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr

080038c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038c4:	bf00      	nop
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr

080038cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038d0:	bf00      	nop
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038dc:	f000 fa4e 	bl	8003d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038e0:	bf00      	nop
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80038e8:	4802      	ldr	r0, [pc, #8]	@ (80038f4 <DMA1_Channel6_IRQHandler+0x10>)
 80038ea:	f000 fbef 	bl	80040cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000138 	.word	0x20000138

080038f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003900:	4a14      	ldr	r2, [pc, #80]	@ (8003954 <_sbrk+0x5c>)
 8003902:	4b15      	ldr	r3, [pc, #84]	@ (8003958 <_sbrk+0x60>)
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800390c:	4b13      	ldr	r3, [pc, #76]	@ (800395c <_sbrk+0x64>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d102      	bne.n	800391a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003914:	4b11      	ldr	r3, [pc, #68]	@ (800395c <_sbrk+0x64>)
 8003916:	4a12      	ldr	r2, [pc, #72]	@ (8003960 <_sbrk+0x68>)
 8003918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800391a:	4b10      	ldr	r3, [pc, #64]	@ (800395c <_sbrk+0x64>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4413      	add	r3, r2
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	429a      	cmp	r2, r3
 8003926:	d207      	bcs.n	8003938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003928:	f002 ff48 	bl	80067bc <__errno>
 800392c:	4603      	mov	r3, r0
 800392e:	220c      	movs	r2, #12
 8003930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003932:	f04f 33ff 	mov.w	r3, #4294967295
 8003936:	e009      	b.n	800394c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003938:	4b08      	ldr	r3, [pc, #32]	@ (800395c <_sbrk+0x64>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800393e:	4b07      	ldr	r3, [pc, #28]	@ (800395c <_sbrk+0x64>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4413      	add	r3, r2
 8003946:	4a05      	ldr	r2, [pc, #20]	@ (800395c <_sbrk+0x64>)
 8003948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800394a:	68fb      	ldr	r3, [r7, #12]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20005000 	.word	0x20005000
 8003958:	00000400 	.word	0x00000400
 800395c:	20003d9c 	.word	0x20003d9c
 8003960:	20003f80 	.word	0x20003f80

08003964 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr

08003970 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b096      	sub	sp, #88	@ 0x58
 8003974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003976:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	605a      	str	r2, [r3, #4]
 8003980:	609a      	str	r2, [r3, #8]
 8003982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003984:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800398e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	605a      	str	r2, [r3, #4]
 8003998:	609a      	str	r2, [r3, #8]
 800399a:	60da      	str	r2, [r3, #12]
 800399c:	611a      	str	r2, [r3, #16]
 800399e:	615a      	str	r2, [r3, #20]
 80039a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80039a2:	1d3b      	adds	r3, r7, #4
 80039a4:	2220      	movs	r2, #32
 80039a6:	2100      	movs	r1, #0
 80039a8:	4618      	mov	r0, r3
 80039aa:	f002 feeb 	bl	8006784 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80039ae:	4b3f      	ldr	r3, [pc, #252]	@ (8003aac <MX_TIM1_Init+0x13c>)
 80039b0:	4a3f      	ldr	r2, [pc, #252]	@ (8003ab0 <MX_TIM1_Init+0x140>)
 80039b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720-1;
 80039b4:	4b3d      	ldr	r3, [pc, #244]	@ (8003aac <MX_TIM1_Init+0x13c>)
 80039b6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80039ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039bc:	4b3b      	ldr	r3, [pc, #236]	@ (8003aac <MX_TIM1_Init+0x13c>)
 80039be:	2200      	movs	r2, #0
 80039c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 80039c2:	4b3a      	ldr	r3, [pc, #232]	@ (8003aac <MX_TIM1_Init+0x13c>)
 80039c4:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80039c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039ca:	4b38      	ldr	r3, [pc, #224]	@ (8003aac <MX_TIM1_Init+0x13c>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80039d0:	4b36      	ldr	r3, [pc, #216]	@ (8003aac <MX_TIM1_Init+0x13c>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039d6:	4b35      	ldr	r3, [pc, #212]	@ (8003aac <MX_TIM1_Init+0x13c>)
 80039d8:	2200      	movs	r2, #0
 80039da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80039dc:	4833      	ldr	r0, [pc, #204]	@ (8003aac <MX_TIM1_Init+0x13c>)
 80039de:	f001 ff4b 	bl	8005878 <HAL_TIM_Base_Init>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80039e8:	f7fd f937 	bl	8000c5a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80039f2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80039f6:	4619      	mov	r1, r3
 80039f8:	482c      	ldr	r0, [pc, #176]	@ (8003aac <MX_TIM1_Init+0x13c>)
 80039fa:	f002 fa79 	bl	8005ef0 <HAL_TIM_ConfigClockSource>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003a04:	f7fd f929 	bl	8000c5a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003a08:	4828      	ldr	r0, [pc, #160]	@ (8003aac <MX_TIM1_Init+0x13c>)
 8003a0a:	f001 ff84 	bl	8005916 <HAL_TIM_PWM_Init>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003a14:	f7fd f921 	bl	8000c5a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003a20:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003a24:	4619      	mov	r1, r3
 8003a26:	4821      	ldr	r0, [pc, #132]	@ (8003aac <MX_TIM1_Init+0x13c>)
 8003a28:	f002 fdda 	bl	80065e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8003a32:	f7fd f912 	bl	8000c5a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a36:	2360      	movs	r3, #96	@ 0x60
 8003a38:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a42:	2300      	movs	r3, #0
 8003a44:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a46:	2300      	movs	r3, #0
 8003a48:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a56:	2204      	movs	r2, #4
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4814      	ldr	r0, [pc, #80]	@ (8003aac <MX_TIM1_Init+0x13c>)
 8003a5c:	f002 f986 	bl	8005d6c <HAL_TIM_PWM_ConfigChannel>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8003a66:	f7fd f8f8 	bl	8000c5a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a76:	2300      	movs	r3, #0
 8003a78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a84:	2300      	movs	r3, #0
 8003a86:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003a88:	1d3b      	adds	r3, r7, #4
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4807      	ldr	r0, [pc, #28]	@ (8003aac <MX_TIM1_Init+0x13c>)
 8003a8e:	f002 fe05 	bl	800669c <HAL_TIMEx_ConfigBreakDeadTime>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8003a98:	f7fd f8df 	bl	8000c5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003a9c:	4803      	ldr	r0, [pc, #12]	@ (8003aac <MX_TIM1_Init+0x13c>)
 8003a9e:	f000 f8cd 	bl	8003c3c <HAL_TIM_MspPostInit>

}
 8003aa2:	bf00      	nop
 8003aa4:	3758      	adds	r7, #88	@ 0x58
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20003da0 	.word	0x20003da0
 8003ab0:	40012c00 	.word	0x40012c00

08003ab4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08c      	sub	sp, #48	@ 0x30
 8003ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003aba:	f107 030c 	add.w	r3, r7, #12
 8003abe:	2224      	movs	r2, #36	@ 0x24
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f002 fe5e 	bl	8006784 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ac8:	1d3b      	adds	r3, r7, #4
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003ad0:	4b20      	ldr	r3, [pc, #128]	@ (8003b54 <MX_TIM3_Init+0xa0>)
 8003ad2:	4a21      	ldr	r2, [pc, #132]	@ (8003b58 <MX_TIM3_Init+0xa4>)
 8003ad4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8003b54 <MX_TIM3_Init+0xa0>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003adc:	4b1d      	ldr	r3, [pc, #116]	@ (8003b54 <MX_TIM3_Init+0xa0>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8003b54 <MX_TIM3_Init+0xa0>)
 8003ae4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ae8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aea:	4b1a      	ldr	r3, [pc, #104]	@ (8003b54 <MX_TIM3_Init+0xa0>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003af0:	4b18      	ldr	r3, [pc, #96]	@ (8003b54 <MX_TIM3_Init+0xa0>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003af6:	2301      	movs	r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003afa:	2300      	movs	r3, #0
 8003afc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003afe:	2301      	movs	r3, #1
 8003b00:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b12:	2300      	movs	r3, #0
 8003b14:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003b1a:	f107 030c 	add.w	r3, r7, #12
 8003b1e:	4619      	mov	r1, r3
 8003b20:	480c      	ldr	r0, [pc, #48]	@ (8003b54 <MX_TIM3_Init+0xa0>)
 8003b22:	f001 fff3 	bl	8005b0c <HAL_TIM_Encoder_Init>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003b2c:	f7fd f895 	bl	8000c5a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b30:	2300      	movs	r3, #0
 8003b32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b34:	2300      	movs	r3, #0
 8003b36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b38:	1d3b      	adds	r3, r7, #4
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4805      	ldr	r0, [pc, #20]	@ (8003b54 <MX_TIM3_Init+0xa0>)
 8003b3e:	f002 fd4f 	bl	80065e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003b48:	f7fd f887 	bl	8000c5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003b4c:	bf00      	nop
 8003b4e:	3730      	adds	r7, #48	@ 0x30
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	20003de8 	.word	0x20003de8
 8003b58:	40000400 	.word	0x40000400

08003b5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a09      	ldr	r2, [pc, #36]	@ (8003b90 <HAL_TIM_Base_MspInit+0x34>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d10b      	bne.n	8003b86 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b6e:	4b09      	ldr	r3, [pc, #36]	@ (8003b94 <HAL_TIM_Base_MspInit+0x38>)
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	4a08      	ldr	r2, [pc, #32]	@ (8003b94 <HAL_TIM_Base_MspInit+0x38>)
 8003b74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b78:	6193      	str	r3, [r2, #24]
 8003b7a:	4b06      	ldr	r3, [pc, #24]	@ (8003b94 <HAL_TIM_Base_MspInit+0x38>)
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003b86:	bf00      	nop
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr
 8003b90:	40012c00 	.word	0x40012c00
 8003b94:	40021000 	.word	0x40021000

08003b98 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08a      	sub	sp, #40	@ 0x28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba0:	f107 0314 	add.w	r3, r7, #20
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	605a      	str	r2, [r3, #4]
 8003baa:	609a      	str	r2, [r3, #8]
 8003bac:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1e      	ldr	r2, [pc, #120]	@ (8003c2c <HAL_TIM_Encoder_MspInit+0x94>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d135      	bne.n	8003c24 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c30 <HAL_TIM_Encoder_MspInit+0x98>)
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8003c30 <HAL_TIM_Encoder_MspInit+0x98>)
 8003bbe:	f043 0302 	orr.w	r3, r3, #2
 8003bc2:	61d3      	str	r3, [r2, #28]
 8003bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8003c30 <HAL_TIM_Encoder_MspInit+0x98>)
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd0:	4b17      	ldr	r3, [pc, #92]	@ (8003c30 <HAL_TIM_Encoder_MspInit+0x98>)
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	4a16      	ldr	r2, [pc, #88]	@ (8003c30 <HAL_TIM_Encoder_MspInit+0x98>)
 8003bd6:	f043 0308 	orr.w	r3, r3, #8
 8003bda:	6193      	str	r3, [r2, #24]
 8003bdc:	4b14      	ldr	r3, [pc, #80]	@ (8003c30 <HAL_TIM_Encoder_MspInit+0x98>)
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_CH1_Pin|Encoder_CH2_Pin;
 8003be8:	2330      	movs	r3, #48	@ 0x30
 8003bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bec:	2300      	movs	r3, #0
 8003bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bf4:	f107 0314 	add.w	r3, r7, #20
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	480e      	ldr	r0, [pc, #56]	@ (8003c34 <HAL_TIM_Encoder_MspInit+0x9c>)
 8003bfc:	f000 fb6c 	bl	80042d8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8003c00:	4b0d      	ldr	r3, [pc, #52]	@ (8003c38 <HAL_TIM_Encoder_MspInit+0xa0>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c10:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c1e:	4a06      	ldr	r2, [pc, #24]	@ (8003c38 <HAL_TIM_Encoder_MspInit+0xa0>)
 8003c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c22:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003c24:	bf00      	nop
 8003c26:	3728      	adds	r7, #40	@ 0x28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40000400 	.word	0x40000400
 8003c30:	40021000 	.word	0x40021000
 8003c34:	40010c00 	.word	0x40010c00
 8003c38:	40010000 	.word	0x40010000

08003c3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c44:	f107 0310 	add.w	r3, r7, #16
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a10      	ldr	r2, [pc, #64]	@ (8003c98 <HAL_TIM_MspPostInit+0x5c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d118      	bne.n	8003c8e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c9c <HAL_TIM_MspPostInit+0x60>)
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	4a0e      	ldr	r2, [pc, #56]	@ (8003c9c <HAL_TIM_MspPostInit+0x60>)
 8003c62:	f043 0304 	orr.w	r3, r3, #4
 8003c66:	6193      	str	r3, [r2, #24]
 8003c68:	4b0c      	ldr	r3, [pc, #48]	@ (8003c9c <HAL_TIM_MspPostInit+0x60>)
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c7e:	2302      	movs	r3, #2
 8003c80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c82:	f107 0310 	add.w	r3, r7, #16
 8003c86:	4619      	mov	r1, r3
 8003c88:	4805      	ldr	r0, [pc, #20]	@ (8003ca0 <HAL_TIM_MspPostInit+0x64>)
 8003c8a:	f000 fb25 	bl	80042d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003c8e:	bf00      	nop
 8003c90:	3720      	adds	r7, #32
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40012c00 	.word	0x40012c00
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40010800 	.word	0x40010800

08003ca4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ca4:	f7ff fe5e 	bl	8003964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ca8:	480b      	ldr	r0, [pc, #44]	@ (8003cd8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003caa:	490c      	ldr	r1, [pc, #48]	@ (8003cdc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003cac:	4a0c      	ldr	r2, [pc, #48]	@ (8003ce0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cb0:	e002      	b.n	8003cb8 <LoopCopyDataInit>

08003cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cb6:	3304      	adds	r3, #4

08003cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cbc:	d3f9      	bcc.n	8003cb2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cbe:	4a09      	ldr	r2, [pc, #36]	@ (8003ce4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003cc0:	4c09      	ldr	r4, [pc, #36]	@ (8003ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cc4:	e001      	b.n	8003cca <LoopFillZerobss>

08003cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cc8:	3204      	adds	r2, #4

08003cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ccc:	d3fb      	bcc.n	8003cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003cce:	f002 fd7b 	bl	80067c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003cd2:	f7fc fef3 	bl	8000abc <main>
  bx lr
 8003cd6:	4770      	bx	lr
  ldr r0, =_sdata
 8003cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cdc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003ce0:	08008d60 	.word	0x08008d60
  ldr r2, =_sbss
 8003ce4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003ce8:	20003f7c 	.word	0x20003f7c

08003cec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003cec:	e7fe      	b.n	8003cec <ADC1_2_IRQHandler>
	...

08003cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cf4:	4b08      	ldr	r3, [pc, #32]	@ (8003d18 <HAL_Init+0x28>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a07      	ldr	r2, [pc, #28]	@ (8003d18 <HAL_Init+0x28>)
 8003cfa:	f043 0310 	orr.w	r3, r3, #16
 8003cfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d00:	2003      	movs	r0, #3
 8003d02:	f000 f947 	bl	8003f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d06:	200f      	movs	r0, #15
 8003d08:	f000 f808 	bl	8003d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d0c:	f7ff fd8c 	bl	8003828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40022000 	.word	0x40022000

08003d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d24:	4b12      	ldr	r3, [pc, #72]	@ (8003d70 <HAL_InitTick+0x54>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	4b12      	ldr	r3, [pc, #72]	@ (8003d74 <HAL_InitTick+0x58>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f95f 	bl	8003ffe <HAL_SYSTICK_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e00e      	b.n	8003d68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b0f      	cmp	r3, #15
 8003d4e:	d80a      	bhi.n	8003d66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d50:	2200      	movs	r2, #0
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295
 8003d58:	f000 f927 	bl	8003faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d5c:	4a06      	ldr	r2, [pc, #24]	@ (8003d78 <HAL_InitTick+0x5c>)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	e000      	b.n	8003d68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000018 	.word	0x20000018
 8003d74:	20000020 	.word	0x20000020
 8003d78:	2000001c 	.word	0x2000001c

08003d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d80:	4b05      	ldr	r3, [pc, #20]	@ (8003d98 <HAL_IncTick+0x1c>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	4b05      	ldr	r3, [pc, #20]	@ (8003d9c <HAL_IncTick+0x20>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	4a03      	ldr	r2, [pc, #12]	@ (8003d9c <HAL_IncTick+0x20>)
 8003d8e:	6013      	str	r3, [r2, #0]
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr
 8003d98:	20000020 	.word	0x20000020
 8003d9c:	20003e30 	.word	0x20003e30

08003da0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  return uwTick;
 8003da4:	4b02      	ldr	r3, [pc, #8]	@ (8003db0 <HAL_GetTick+0x10>)
 8003da6:	681b      	ldr	r3, [r3, #0]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr
 8003db0:	20003e30 	.word	0x20003e30

08003db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dbc:	f7ff fff0 	bl	8003da0 <HAL_GetTick>
 8003dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dcc:	d005      	beq.n	8003dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dce:	4b0a      	ldr	r3, [pc, #40]	@ (8003df8 <HAL_Delay+0x44>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003dda:	bf00      	nop
 8003ddc:	f7ff ffe0 	bl	8003da0 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d8f7      	bhi.n	8003ddc <HAL_Delay+0x28>
  {
  }
}
 8003dec:	bf00      	nop
 8003dee:	bf00      	nop
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000020 	.word	0x20000020

08003dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e40 <__NVIC_SetPriorityGrouping+0x44>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e18:	4013      	ands	r3, r2
 8003e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e2e:	4a04      	ldr	r2, [pc, #16]	@ (8003e40 <__NVIC_SetPriorityGrouping+0x44>)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	60d3      	str	r3, [r2, #12]
}
 8003e34:	bf00      	nop
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc80      	pop	{r7}
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	e000ed00 	.word	0xe000ed00

08003e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e48:	4b04      	ldr	r3, [pc, #16]	@ (8003e5c <__NVIC_GetPriorityGrouping+0x18>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	0a1b      	lsrs	r3, r3, #8
 8003e4e:	f003 0307 	and.w	r3, r3, #7
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	e000ed00 	.word	0xe000ed00

08003e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	db0b      	blt.n	8003e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	f003 021f 	and.w	r2, r3, #31
 8003e78:	4906      	ldr	r1, [pc, #24]	@ (8003e94 <__NVIC_EnableIRQ+0x34>)
 8003e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	2001      	movs	r0, #1
 8003e82:	fa00 f202 	lsl.w	r2, r0, r2
 8003e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr
 8003e94:	e000e100 	.word	0xe000e100

08003e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	6039      	str	r1, [r7, #0]
 8003ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	db0a      	blt.n	8003ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	490c      	ldr	r1, [pc, #48]	@ (8003ee4 <__NVIC_SetPriority+0x4c>)
 8003eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb6:	0112      	lsls	r2, r2, #4
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	440b      	add	r3, r1
 8003ebc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ec0:	e00a      	b.n	8003ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	4908      	ldr	r1, [pc, #32]	@ (8003ee8 <__NVIC_SetPriority+0x50>)
 8003ec8:	79fb      	ldrb	r3, [r7, #7]
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	3b04      	subs	r3, #4
 8003ed0:	0112      	lsls	r2, r2, #4
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	761a      	strb	r2, [r3, #24]
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	e000e100 	.word	0xe000e100
 8003ee8:	e000ed00 	.word	0xe000ed00

08003eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b089      	sub	sp, #36	@ 0x24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f1c3 0307 	rsb	r3, r3, #7
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	bf28      	it	cs
 8003f0a:	2304      	movcs	r3, #4
 8003f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	3304      	adds	r3, #4
 8003f12:	2b06      	cmp	r3, #6
 8003f14:	d902      	bls.n	8003f1c <NVIC_EncodePriority+0x30>
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	3b03      	subs	r3, #3
 8003f1a:	e000      	b.n	8003f1e <NVIC_EncodePriority+0x32>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f20:	f04f 32ff 	mov.w	r2, #4294967295
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	43da      	mvns	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	401a      	ands	r2, r3
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f34:	f04f 31ff 	mov.w	r1, #4294967295
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3e:	43d9      	mvns	r1, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f44:	4313      	orrs	r3, r2
         );
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3724      	adds	r7, #36	@ 0x24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr

08003f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f60:	d301      	bcc.n	8003f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f62:	2301      	movs	r3, #1
 8003f64:	e00f      	b.n	8003f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f66:	4a0a      	ldr	r2, [pc, #40]	@ (8003f90 <SysTick_Config+0x40>)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f6e:	210f      	movs	r1, #15
 8003f70:	f04f 30ff 	mov.w	r0, #4294967295
 8003f74:	f7ff ff90 	bl	8003e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f78:	4b05      	ldr	r3, [pc, #20]	@ (8003f90 <SysTick_Config+0x40>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f7e:	4b04      	ldr	r3, [pc, #16]	@ (8003f90 <SysTick_Config+0x40>)
 8003f80:	2207      	movs	r2, #7
 8003f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	e000e010 	.word	0xe000e010

08003f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff ff2d 	bl	8003dfc <__NVIC_SetPriorityGrouping>
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b086      	sub	sp, #24
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	607a      	str	r2, [r7, #4]
 8003fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fbc:	f7ff ff42 	bl	8003e44 <__NVIC_GetPriorityGrouping>
 8003fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	68b9      	ldr	r1, [r7, #8]
 8003fc6:	6978      	ldr	r0, [r7, #20]
 8003fc8:	f7ff ff90 	bl	8003eec <NVIC_EncodePriority>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff ff5f 	bl	8003e98 <__NVIC_SetPriority>
}
 8003fda:	bf00      	nop
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	4603      	mov	r3, r0
 8003fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff ff35 	bl	8003e60 <__NVIC_EnableIRQ>
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff ffa2 	bl	8003f50 <SysTick_Config>
 800400c:	4603      	mov	r3, r0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e043      	b.n	80040b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	4b22      	ldr	r3, [pc, #136]	@ (80040c0 <HAL_DMA_Init+0xa8>)
 8004036:	4413      	add	r3, r2
 8004038:	4a22      	ldr	r2, [pc, #136]	@ (80040c4 <HAL_DMA_Init+0xac>)
 800403a:	fba2 2303 	umull	r2, r3, r2, r3
 800403e:	091b      	lsrs	r3, r3, #4
 8004040:	009a      	lsls	r2, r3, #2
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a1f      	ldr	r2, [pc, #124]	@ (80040c8 <HAL_DMA_Init+0xb0>)
 800404a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004062:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004066:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004070:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800407c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004088:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr
 80040c0:	bffdfff8 	.word	0xbffdfff8
 80040c4:	cccccccd 	.word	0xcccccccd
 80040c8:	40020000 	.word	0x40020000

080040cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e8:	2204      	movs	r2, #4
 80040ea:	409a      	lsls	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d04f      	beq.n	8004194 <HAL_DMA_IRQHandler+0xc8>
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d04a      	beq.n	8004194 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	2b00      	cmp	r3, #0
 800410a:	d107      	bne.n	800411c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0204 	bic.w	r2, r2, #4
 800411a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a66      	ldr	r2, [pc, #408]	@ (80042bc <HAL_DMA_IRQHandler+0x1f0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d029      	beq.n	800417a <HAL_DMA_IRQHandler+0xae>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a65      	ldr	r2, [pc, #404]	@ (80042c0 <HAL_DMA_IRQHandler+0x1f4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d022      	beq.n	8004176 <HAL_DMA_IRQHandler+0xaa>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a63      	ldr	r2, [pc, #396]	@ (80042c4 <HAL_DMA_IRQHandler+0x1f8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d01a      	beq.n	8004170 <HAL_DMA_IRQHandler+0xa4>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a62      	ldr	r2, [pc, #392]	@ (80042c8 <HAL_DMA_IRQHandler+0x1fc>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d012      	beq.n	800416a <HAL_DMA_IRQHandler+0x9e>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a60      	ldr	r2, [pc, #384]	@ (80042cc <HAL_DMA_IRQHandler+0x200>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00a      	beq.n	8004164 <HAL_DMA_IRQHandler+0x98>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a5f      	ldr	r2, [pc, #380]	@ (80042d0 <HAL_DMA_IRQHandler+0x204>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d102      	bne.n	800415e <HAL_DMA_IRQHandler+0x92>
 8004158:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800415c:	e00e      	b.n	800417c <HAL_DMA_IRQHandler+0xb0>
 800415e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004162:	e00b      	b.n	800417c <HAL_DMA_IRQHandler+0xb0>
 8004164:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004168:	e008      	b.n	800417c <HAL_DMA_IRQHandler+0xb0>
 800416a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800416e:	e005      	b.n	800417c <HAL_DMA_IRQHandler+0xb0>
 8004170:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004174:	e002      	b.n	800417c <HAL_DMA_IRQHandler+0xb0>
 8004176:	2340      	movs	r3, #64	@ 0x40
 8004178:	e000      	b.n	800417c <HAL_DMA_IRQHandler+0xb0>
 800417a:	2304      	movs	r3, #4
 800417c:	4a55      	ldr	r2, [pc, #340]	@ (80042d4 <HAL_DMA_IRQHandler+0x208>)
 800417e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 8094 	beq.w	80042b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004192:	e08e      	b.n	80042b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004198:	2202      	movs	r2, #2
 800419a:	409a      	lsls	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4013      	ands	r3, r2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d056      	beq.n	8004252 <HAL_DMA_IRQHandler+0x186>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d051      	beq.n	8004252 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10b      	bne.n	80041d4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 020a 	bic.w	r2, r2, #10
 80041ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a38      	ldr	r2, [pc, #224]	@ (80042bc <HAL_DMA_IRQHandler+0x1f0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d029      	beq.n	8004232 <HAL_DMA_IRQHandler+0x166>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a37      	ldr	r2, [pc, #220]	@ (80042c0 <HAL_DMA_IRQHandler+0x1f4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d022      	beq.n	800422e <HAL_DMA_IRQHandler+0x162>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a35      	ldr	r2, [pc, #212]	@ (80042c4 <HAL_DMA_IRQHandler+0x1f8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d01a      	beq.n	8004228 <HAL_DMA_IRQHandler+0x15c>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a34      	ldr	r2, [pc, #208]	@ (80042c8 <HAL_DMA_IRQHandler+0x1fc>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d012      	beq.n	8004222 <HAL_DMA_IRQHandler+0x156>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a32      	ldr	r2, [pc, #200]	@ (80042cc <HAL_DMA_IRQHandler+0x200>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00a      	beq.n	800421c <HAL_DMA_IRQHandler+0x150>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a31      	ldr	r2, [pc, #196]	@ (80042d0 <HAL_DMA_IRQHandler+0x204>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d102      	bne.n	8004216 <HAL_DMA_IRQHandler+0x14a>
 8004210:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004214:	e00e      	b.n	8004234 <HAL_DMA_IRQHandler+0x168>
 8004216:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800421a:	e00b      	b.n	8004234 <HAL_DMA_IRQHandler+0x168>
 800421c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004220:	e008      	b.n	8004234 <HAL_DMA_IRQHandler+0x168>
 8004222:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004226:	e005      	b.n	8004234 <HAL_DMA_IRQHandler+0x168>
 8004228:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800422c:	e002      	b.n	8004234 <HAL_DMA_IRQHandler+0x168>
 800422e:	2320      	movs	r3, #32
 8004230:	e000      	b.n	8004234 <HAL_DMA_IRQHandler+0x168>
 8004232:	2302      	movs	r3, #2
 8004234:	4a27      	ldr	r2, [pc, #156]	@ (80042d4 <HAL_DMA_IRQHandler+0x208>)
 8004236:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004244:	2b00      	cmp	r3, #0
 8004246:	d034      	beq.n	80042b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004250:	e02f      	b.n	80042b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004256:	2208      	movs	r2, #8
 8004258:	409a      	lsls	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4013      	ands	r3, r2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d028      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x1e8>
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b00      	cmp	r3, #0
 800426a:	d023      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 020e 	bic.w	r2, r2, #14
 800427a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004284:	2101      	movs	r1, #1
 8004286:	fa01 f202 	lsl.w	r2, r1, r2
 800428a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d004      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	4798      	blx	r3
    }
  }
  return;
 80042b2:	bf00      	nop
 80042b4:	bf00      	nop
}
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40020008 	.word	0x40020008
 80042c0:	4002001c 	.word	0x4002001c
 80042c4:	40020030 	.word	0x40020030
 80042c8:	40020044 	.word	0x40020044
 80042cc:	40020058 	.word	0x40020058
 80042d0:	4002006c 	.word	0x4002006c
 80042d4:	40020000 	.word	0x40020000

080042d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042d8:	b480      	push	{r7}
 80042da:	b08b      	sub	sp, #44	@ 0x2c
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042e2:	2300      	movs	r3, #0
 80042e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80042e6:	2300      	movs	r3, #0
 80042e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042ea:	e169      	b.n	80045c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80042ec:	2201      	movs	r2, #1
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69fa      	ldr	r2, [r7, #28]
 80042fc:	4013      	ands	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	429a      	cmp	r2, r3
 8004306:	f040 8158 	bne.w	80045ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4a9a      	ldr	r2, [pc, #616]	@ (8004578 <HAL_GPIO_Init+0x2a0>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d05e      	beq.n	80043d2 <HAL_GPIO_Init+0xfa>
 8004314:	4a98      	ldr	r2, [pc, #608]	@ (8004578 <HAL_GPIO_Init+0x2a0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d875      	bhi.n	8004406 <HAL_GPIO_Init+0x12e>
 800431a:	4a98      	ldr	r2, [pc, #608]	@ (800457c <HAL_GPIO_Init+0x2a4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d058      	beq.n	80043d2 <HAL_GPIO_Init+0xfa>
 8004320:	4a96      	ldr	r2, [pc, #600]	@ (800457c <HAL_GPIO_Init+0x2a4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d86f      	bhi.n	8004406 <HAL_GPIO_Init+0x12e>
 8004326:	4a96      	ldr	r2, [pc, #600]	@ (8004580 <HAL_GPIO_Init+0x2a8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d052      	beq.n	80043d2 <HAL_GPIO_Init+0xfa>
 800432c:	4a94      	ldr	r2, [pc, #592]	@ (8004580 <HAL_GPIO_Init+0x2a8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d869      	bhi.n	8004406 <HAL_GPIO_Init+0x12e>
 8004332:	4a94      	ldr	r2, [pc, #592]	@ (8004584 <HAL_GPIO_Init+0x2ac>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d04c      	beq.n	80043d2 <HAL_GPIO_Init+0xfa>
 8004338:	4a92      	ldr	r2, [pc, #584]	@ (8004584 <HAL_GPIO_Init+0x2ac>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d863      	bhi.n	8004406 <HAL_GPIO_Init+0x12e>
 800433e:	4a92      	ldr	r2, [pc, #584]	@ (8004588 <HAL_GPIO_Init+0x2b0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d046      	beq.n	80043d2 <HAL_GPIO_Init+0xfa>
 8004344:	4a90      	ldr	r2, [pc, #576]	@ (8004588 <HAL_GPIO_Init+0x2b0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d85d      	bhi.n	8004406 <HAL_GPIO_Init+0x12e>
 800434a:	2b12      	cmp	r3, #18
 800434c:	d82a      	bhi.n	80043a4 <HAL_GPIO_Init+0xcc>
 800434e:	2b12      	cmp	r3, #18
 8004350:	d859      	bhi.n	8004406 <HAL_GPIO_Init+0x12e>
 8004352:	a201      	add	r2, pc, #4	@ (adr r2, 8004358 <HAL_GPIO_Init+0x80>)
 8004354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004358:	080043d3 	.word	0x080043d3
 800435c:	080043ad 	.word	0x080043ad
 8004360:	080043bf 	.word	0x080043bf
 8004364:	08004401 	.word	0x08004401
 8004368:	08004407 	.word	0x08004407
 800436c:	08004407 	.word	0x08004407
 8004370:	08004407 	.word	0x08004407
 8004374:	08004407 	.word	0x08004407
 8004378:	08004407 	.word	0x08004407
 800437c:	08004407 	.word	0x08004407
 8004380:	08004407 	.word	0x08004407
 8004384:	08004407 	.word	0x08004407
 8004388:	08004407 	.word	0x08004407
 800438c:	08004407 	.word	0x08004407
 8004390:	08004407 	.word	0x08004407
 8004394:	08004407 	.word	0x08004407
 8004398:	08004407 	.word	0x08004407
 800439c:	080043b5 	.word	0x080043b5
 80043a0:	080043c9 	.word	0x080043c9
 80043a4:	4a79      	ldr	r2, [pc, #484]	@ (800458c <HAL_GPIO_Init+0x2b4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d013      	beq.n	80043d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80043aa:	e02c      	b.n	8004406 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	623b      	str	r3, [r7, #32]
          break;
 80043b2:	e029      	b.n	8004408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	3304      	adds	r3, #4
 80043ba:	623b      	str	r3, [r7, #32]
          break;
 80043bc:	e024      	b.n	8004408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	3308      	adds	r3, #8
 80043c4:	623b      	str	r3, [r7, #32]
          break;
 80043c6:	e01f      	b.n	8004408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	330c      	adds	r3, #12
 80043ce:	623b      	str	r3, [r7, #32]
          break;
 80043d0:	e01a      	b.n	8004408 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d102      	bne.n	80043e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80043da:	2304      	movs	r3, #4
 80043dc:	623b      	str	r3, [r7, #32]
          break;
 80043de:	e013      	b.n	8004408 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d105      	bne.n	80043f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043e8:	2308      	movs	r3, #8
 80043ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	69fa      	ldr	r2, [r7, #28]
 80043f0:	611a      	str	r2, [r3, #16]
          break;
 80043f2:	e009      	b.n	8004408 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043f4:	2308      	movs	r3, #8
 80043f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	615a      	str	r2, [r3, #20]
          break;
 80043fe:	e003      	b.n	8004408 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004400:	2300      	movs	r3, #0
 8004402:	623b      	str	r3, [r7, #32]
          break;
 8004404:	e000      	b.n	8004408 <HAL_GPIO_Init+0x130>
          break;
 8004406:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	2bff      	cmp	r3, #255	@ 0xff
 800440c:	d801      	bhi.n	8004412 <HAL_GPIO_Init+0x13a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	e001      	b.n	8004416 <HAL_GPIO_Init+0x13e>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3304      	adds	r3, #4
 8004416:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	2bff      	cmp	r3, #255	@ 0xff
 800441c:	d802      	bhi.n	8004424 <HAL_GPIO_Init+0x14c>
 800441e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	e002      	b.n	800442a <HAL_GPIO_Init+0x152>
 8004424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004426:	3b08      	subs	r3, #8
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	210f      	movs	r1, #15
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	fa01 f303 	lsl.w	r3, r1, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	401a      	ands	r2, r3
 800443c:	6a39      	ldr	r1, [r7, #32]
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	fa01 f303 	lsl.w	r3, r1, r3
 8004444:	431a      	orrs	r2, r3
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 80b1 	beq.w	80045ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004458:	4b4d      	ldr	r3, [pc, #308]	@ (8004590 <HAL_GPIO_Init+0x2b8>)
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	4a4c      	ldr	r2, [pc, #304]	@ (8004590 <HAL_GPIO_Init+0x2b8>)
 800445e:	f043 0301 	orr.w	r3, r3, #1
 8004462:	6193      	str	r3, [r2, #24]
 8004464:	4b4a      	ldr	r3, [pc, #296]	@ (8004590 <HAL_GPIO_Init+0x2b8>)
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004470:	4a48      	ldr	r2, [pc, #288]	@ (8004594 <HAL_GPIO_Init+0x2bc>)
 8004472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004474:	089b      	lsrs	r3, r3, #2
 8004476:	3302      	adds	r3, #2
 8004478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800447c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800447e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	220f      	movs	r2, #15
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	43db      	mvns	r3, r3
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	4013      	ands	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a40      	ldr	r2, [pc, #256]	@ (8004598 <HAL_GPIO_Init+0x2c0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d013      	beq.n	80044c4 <HAL_GPIO_Init+0x1ec>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a3f      	ldr	r2, [pc, #252]	@ (800459c <HAL_GPIO_Init+0x2c4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00d      	beq.n	80044c0 <HAL_GPIO_Init+0x1e8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a3e      	ldr	r2, [pc, #248]	@ (80045a0 <HAL_GPIO_Init+0x2c8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d007      	beq.n	80044bc <HAL_GPIO_Init+0x1e4>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a3d      	ldr	r2, [pc, #244]	@ (80045a4 <HAL_GPIO_Init+0x2cc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d101      	bne.n	80044b8 <HAL_GPIO_Init+0x1e0>
 80044b4:	2303      	movs	r3, #3
 80044b6:	e006      	b.n	80044c6 <HAL_GPIO_Init+0x1ee>
 80044b8:	2304      	movs	r3, #4
 80044ba:	e004      	b.n	80044c6 <HAL_GPIO_Init+0x1ee>
 80044bc:	2302      	movs	r3, #2
 80044be:	e002      	b.n	80044c6 <HAL_GPIO_Init+0x1ee>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <HAL_GPIO_Init+0x1ee>
 80044c4:	2300      	movs	r3, #0
 80044c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044c8:	f002 0203 	and.w	r2, r2, #3
 80044cc:	0092      	lsls	r2, r2, #2
 80044ce:	4093      	lsls	r3, r2
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80044d6:	492f      	ldr	r1, [pc, #188]	@ (8004594 <HAL_GPIO_Init+0x2bc>)
 80044d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044da:	089b      	lsrs	r3, r3, #2
 80044dc:	3302      	adds	r3, #2
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d006      	beq.n	80044fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80044f0:	4b2d      	ldr	r3, [pc, #180]	@ (80045a8 <HAL_GPIO_Init+0x2d0>)
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	492c      	ldr	r1, [pc, #176]	@ (80045a8 <HAL_GPIO_Init+0x2d0>)
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	608b      	str	r3, [r1, #8]
 80044fc:	e006      	b.n	800450c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80044fe:	4b2a      	ldr	r3, [pc, #168]	@ (80045a8 <HAL_GPIO_Init+0x2d0>)
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	43db      	mvns	r3, r3
 8004506:	4928      	ldr	r1, [pc, #160]	@ (80045a8 <HAL_GPIO_Init+0x2d0>)
 8004508:	4013      	ands	r3, r2
 800450a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d006      	beq.n	8004526 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004518:	4b23      	ldr	r3, [pc, #140]	@ (80045a8 <HAL_GPIO_Init+0x2d0>)
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	4922      	ldr	r1, [pc, #136]	@ (80045a8 <HAL_GPIO_Init+0x2d0>)
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	4313      	orrs	r3, r2
 8004522:	60cb      	str	r3, [r1, #12]
 8004524:	e006      	b.n	8004534 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004526:	4b20      	ldr	r3, [pc, #128]	@ (80045a8 <HAL_GPIO_Init+0x2d0>)
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	43db      	mvns	r3, r3
 800452e:	491e      	ldr	r1, [pc, #120]	@ (80045a8 <HAL_GPIO_Init+0x2d0>)
 8004530:	4013      	ands	r3, r2
 8004532:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d006      	beq.n	800454e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004540:	4b19      	ldr	r3, [pc, #100]	@ (80045a8 <HAL_GPIO_Init+0x2d0>)
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	4918      	ldr	r1, [pc, #96]	@ (80045a8 <HAL_GPIO_Init+0x2d0>)
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	4313      	orrs	r3, r2
 800454a:	604b      	str	r3, [r1, #4]
 800454c:	e006      	b.n	800455c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800454e:	4b16      	ldr	r3, [pc, #88]	@ (80045a8 <HAL_GPIO_Init+0x2d0>)
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	43db      	mvns	r3, r3
 8004556:	4914      	ldr	r1, [pc, #80]	@ (80045a8 <HAL_GPIO_Init+0x2d0>)
 8004558:	4013      	ands	r3, r2
 800455a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d021      	beq.n	80045ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004568:	4b0f      	ldr	r3, [pc, #60]	@ (80045a8 <HAL_GPIO_Init+0x2d0>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	490e      	ldr	r1, [pc, #56]	@ (80045a8 <HAL_GPIO_Init+0x2d0>)
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	4313      	orrs	r3, r2
 8004572:	600b      	str	r3, [r1, #0]
 8004574:	e021      	b.n	80045ba <HAL_GPIO_Init+0x2e2>
 8004576:	bf00      	nop
 8004578:	10320000 	.word	0x10320000
 800457c:	10310000 	.word	0x10310000
 8004580:	10220000 	.word	0x10220000
 8004584:	10210000 	.word	0x10210000
 8004588:	10120000 	.word	0x10120000
 800458c:	10110000 	.word	0x10110000
 8004590:	40021000 	.word	0x40021000
 8004594:	40010000 	.word	0x40010000
 8004598:	40010800 	.word	0x40010800
 800459c:	40010c00 	.word	0x40010c00
 80045a0:	40011000 	.word	0x40011000
 80045a4:	40011400 	.word	0x40011400
 80045a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80045ac:	4b0b      	ldr	r3, [pc, #44]	@ (80045dc <HAL_GPIO_Init+0x304>)
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	43db      	mvns	r3, r3
 80045b4:	4909      	ldr	r1, [pc, #36]	@ (80045dc <HAL_GPIO_Init+0x304>)
 80045b6:	4013      	ands	r3, r2
 80045b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045bc:	3301      	adds	r3, #1
 80045be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f47f ae8e 	bne.w	80042ec <HAL_GPIO_Init+0x14>
  }
}
 80045d0:	bf00      	nop
 80045d2:	bf00      	nop
 80045d4:	372c      	adds	r7, #44	@ 0x2c
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr
 80045dc:	40010400 	.word	0x40010400

080045e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	887b      	ldrh	r3, [r7, #2]
 80045f2:	4013      	ands	r3, r2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045f8:	2301      	movs	r3, #1
 80045fa:	73fb      	strb	r3, [r7, #15]
 80045fc:	e001      	b.n	8004602 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045fe:	2300      	movs	r3, #0
 8004600:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004602:	7bfb      	ldrb	r3, [r7, #15]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr

0800460e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	460b      	mov	r3, r1
 8004618:	807b      	strh	r3, [r7, #2]
 800461a:	4613      	mov	r3, r2
 800461c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800461e:	787b      	ldrb	r3, [r7, #1]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004624:	887a      	ldrh	r2, [r7, #2]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800462a:	e003      	b.n	8004634 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800462c:	887b      	ldrh	r3, [r7, #2]
 800462e:	041a      	lsls	r2, r3, #16
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	611a      	str	r2, [r3, #16]
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr
	...

08004640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e12b      	b.n	80048aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fc f992 	bl	8000990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2224      	movs	r2, #36	@ 0x24
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0201 	bic.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004692:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046a4:	f001 f832 	bl	800570c <HAL_RCC_GetPCLK1Freq>
 80046a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	4a81      	ldr	r2, [pc, #516]	@ (80048b4 <HAL_I2C_Init+0x274>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d807      	bhi.n	80046c4 <HAL_I2C_Init+0x84>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4a80      	ldr	r2, [pc, #512]	@ (80048b8 <HAL_I2C_Init+0x278>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	bf94      	ite	ls
 80046bc:	2301      	movls	r3, #1
 80046be:	2300      	movhi	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	e006      	b.n	80046d2 <HAL_I2C_Init+0x92>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a7d      	ldr	r2, [pc, #500]	@ (80048bc <HAL_I2C_Init+0x27c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	bf94      	ite	ls
 80046cc:	2301      	movls	r3, #1
 80046ce:	2300      	movhi	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e0e7      	b.n	80048aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4a78      	ldr	r2, [pc, #480]	@ (80048c0 <HAL_I2C_Init+0x280>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	0c9b      	lsrs	r3, r3, #18
 80046e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	4a6a      	ldr	r2, [pc, #424]	@ (80048b4 <HAL_I2C_Init+0x274>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d802      	bhi.n	8004714 <HAL_I2C_Init+0xd4>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	3301      	adds	r3, #1
 8004712:	e009      	b.n	8004728 <HAL_I2C_Init+0xe8>
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800471a:	fb02 f303 	mul.w	r3, r2, r3
 800471e:	4a69      	ldr	r2, [pc, #420]	@ (80048c4 <HAL_I2C_Init+0x284>)
 8004720:	fba2 2303 	umull	r2, r3, r2, r3
 8004724:	099b      	lsrs	r3, r3, #6
 8004726:	3301      	adds	r3, #1
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	430b      	orrs	r3, r1
 800472e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800473a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	495c      	ldr	r1, [pc, #368]	@ (80048b4 <HAL_I2C_Init+0x274>)
 8004744:	428b      	cmp	r3, r1
 8004746:	d819      	bhi.n	800477c <HAL_I2C_Init+0x13c>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	1e59      	subs	r1, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	fbb1 f3f3 	udiv	r3, r1, r3
 8004756:	1c59      	adds	r1, r3, #1
 8004758:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800475c:	400b      	ands	r3, r1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_I2C_Init+0x138>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1e59      	subs	r1, r3, #1
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004770:	3301      	adds	r3, #1
 8004772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004776:	e051      	b.n	800481c <HAL_I2C_Init+0x1dc>
 8004778:	2304      	movs	r3, #4
 800477a:	e04f      	b.n	800481c <HAL_I2C_Init+0x1dc>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d111      	bne.n	80047a8 <HAL_I2C_Init+0x168>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	1e58      	subs	r0, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6859      	ldr	r1, [r3, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	440b      	add	r3, r1
 8004792:	fbb0 f3f3 	udiv	r3, r0, r3
 8004796:	3301      	adds	r3, #1
 8004798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800479c:	2b00      	cmp	r3, #0
 800479e:	bf0c      	ite	eq
 80047a0:	2301      	moveq	r3, #1
 80047a2:	2300      	movne	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	e012      	b.n	80047ce <HAL_I2C_Init+0x18e>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	1e58      	subs	r0, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6859      	ldr	r1, [r3, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	0099      	lsls	r1, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80047be:	3301      	adds	r3, #1
 80047c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	bf0c      	ite	eq
 80047c8:	2301      	moveq	r3, #1
 80047ca:	2300      	movne	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_I2C_Init+0x196>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e022      	b.n	800481c <HAL_I2C_Init+0x1dc>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10e      	bne.n	80047fc <HAL_I2C_Init+0x1bc>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1e58      	subs	r0, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6859      	ldr	r1, [r3, #4]
 80047e6:	460b      	mov	r3, r1
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	440b      	add	r3, r1
 80047ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80047f0:	3301      	adds	r3, #1
 80047f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047fa:	e00f      	b.n	800481c <HAL_I2C_Init+0x1dc>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	1e58      	subs	r0, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6859      	ldr	r1, [r3, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	0099      	lsls	r1, r3, #2
 800480c:	440b      	add	r3, r1
 800480e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004812:	3301      	adds	r3, #1
 8004814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004818:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	6809      	ldr	r1, [r1, #0]
 8004820:	4313      	orrs	r3, r2
 8004822:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69da      	ldr	r2, [r3, #28]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800484a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6911      	ldr	r1, [r2, #16]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	68d2      	ldr	r2, [r2, #12]
 8004856:	4311      	orrs	r1, r2
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6812      	ldr	r2, [r2, #0]
 800485c:	430b      	orrs	r3, r1
 800485e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695a      	ldr	r2, [r3, #20]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	000186a0 	.word	0x000186a0
 80048b8:	001e847f 	.word	0x001e847f
 80048bc:	003d08ff 	.word	0x003d08ff
 80048c0:	431bde83 	.word	0x431bde83
 80048c4:	10624dd3 	.word	0x10624dd3

080048c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b088      	sub	sp, #32
 80048cc:	af02      	add	r7, sp, #8
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	607a      	str	r2, [r7, #4]
 80048d2:	461a      	mov	r2, r3
 80048d4:	460b      	mov	r3, r1
 80048d6:	817b      	strh	r3, [r7, #10]
 80048d8:	4613      	mov	r3, r2
 80048da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048dc:	f7ff fa60 	bl	8003da0 <HAL_GetTick>
 80048e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	f040 80e0 	bne.w	8004ab0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	2319      	movs	r3, #25
 80048f6:	2201      	movs	r2, #1
 80048f8:	4970      	ldr	r1, [pc, #448]	@ (8004abc <HAL_I2C_Master_Transmit+0x1f4>)
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 f964 	bl	8004bc8 <I2C_WaitOnFlagUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004906:	2302      	movs	r3, #2
 8004908:	e0d3      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_I2C_Master_Transmit+0x50>
 8004914:	2302      	movs	r3, #2
 8004916:	e0cc      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b01      	cmp	r3, #1
 800492c:	d007      	beq.n	800493e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0201 	orr.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800494c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2221      	movs	r2, #33	@ 0x21
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2210      	movs	r2, #16
 800495a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	893a      	ldrh	r2, [r7, #8]
 800496e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4a50      	ldr	r2, [pc, #320]	@ (8004ac0 <HAL_I2C_Master_Transmit+0x1f8>)
 800497e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004980:	8979      	ldrh	r1, [r7, #10]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	6a3a      	ldr	r2, [r7, #32]
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 f89c 	bl	8004ac4 <I2C_MasterRequestWrite>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e08d      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004996:	2300      	movs	r3, #0
 8004998:	613b      	str	r3, [r7, #16]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80049ac:	e066      	b.n	8004a7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	6a39      	ldr	r1, [r7, #32]
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 fa22 	bl	8004dfc <I2C_WaitOnTXEFlagUntilTimeout>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00d      	beq.n	80049da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d107      	bne.n	80049d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e06b      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049de:	781a      	ldrb	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d11b      	bne.n	8004a50 <HAL_I2C_Master_Transmit+0x188>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d017      	beq.n	8004a50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a24:	781a      	ldrb	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	6a39      	ldr	r1, [r7, #32]
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 fa19 	bl	8004e8c <I2C_WaitOnBTFFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00d      	beq.n	8004a7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d107      	bne.n	8004a78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e01a      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d194      	bne.n	80049ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004aac:	2300      	movs	r3, #0
 8004aae:	e000      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ab0:	2302      	movs	r3, #2
  }
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	00100002 	.word	0x00100002
 8004ac0:	ffff0000 	.word	0xffff0000

08004ac4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	607a      	str	r2, [r7, #4]
 8004ace:	603b      	str	r3, [r7, #0]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d006      	beq.n	8004aee <I2C_MasterRequestWrite+0x2a>
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d003      	beq.n	8004aee <I2C_MasterRequestWrite+0x2a>
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004aec:	d108      	bne.n	8004b00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	e00b      	b.n	8004b18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b04:	2b12      	cmp	r3, #18
 8004b06:	d107      	bne.n	8004b18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f84f 	bl	8004bc8 <I2C_WaitOnFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00d      	beq.n	8004b4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b3e:	d103      	bne.n	8004b48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e035      	b.n	8004bb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b54:	d108      	bne.n	8004b68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b56:	897b      	ldrh	r3, [r7, #10]
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b64:	611a      	str	r2, [r3, #16]
 8004b66:	e01b      	b.n	8004ba0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b68:	897b      	ldrh	r3, [r7, #10]
 8004b6a:	11db      	asrs	r3, r3, #7
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	f003 0306 	and.w	r3, r3, #6
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	f063 030f 	orn	r3, r3, #15
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	490e      	ldr	r1, [pc, #56]	@ (8004bc0 <I2C_MasterRequestWrite+0xfc>)
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f898 	bl	8004cbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e010      	b.n	8004bb8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b96:	897b      	ldrh	r3, [r7, #10]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	4907      	ldr	r1, [pc, #28]	@ (8004bc4 <I2C_MasterRequestWrite+0x100>)
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f888 	bl	8004cbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	00010008 	.word	0x00010008
 8004bc4:	00010002 	.word	0x00010002

08004bc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	603b      	str	r3, [r7, #0]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bd8:	e048      	b.n	8004c6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be0:	d044      	beq.n	8004c6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be2:	f7ff f8dd 	bl	8003da0 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d302      	bcc.n	8004bf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d139      	bne.n	8004c6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	0c1b      	lsrs	r3, r3, #16
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d10d      	bne.n	8004c1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	43da      	mvns	r2, r3
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	bf0c      	ite	eq
 8004c14:	2301      	moveq	r3, #1
 8004c16:	2300      	movne	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	e00c      	b.n	8004c38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	43da      	mvns	r2, r3
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	bf0c      	ite	eq
 8004c30:	2301      	moveq	r3, #1
 8004c32:	2300      	movne	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	461a      	mov	r2, r3
 8004c38:	79fb      	ldrb	r3, [r7, #7]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d116      	bne.n	8004c6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c58:	f043 0220 	orr.w	r2, r3, #32
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e023      	b.n	8004cb4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	0c1b      	lsrs	r3, r3, #16
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d10d      	bne.n	8004c92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	43da      	mvns	r2, r3
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	4013      	ands	r3, r2
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	bf0c      	ite	eq
 8004c88:	2301      	moveq	r3, #1
 8004c8a:	2300      	movne	r3, #0
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	461a      	mov	r2, r3
 8004c90:	e00c      	b.n	8004cac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	43da      	mvns	r2, r3
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	bf0c      	ite	eq
 8004ca4:	2301      	moveq	r3, #1
 8004ca6:	2300      	movne	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	461a      	mov	r2, r3
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d093      	beq.n	8004bda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cca:	e071      	b.n	8004db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cda:	d123      	bne.n	8004d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004cf4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d10:	f043 0204 	orr.w	r2, r3, #4
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e067      	b.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2a:	d041      	beq.n	8004db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d2c:	f7ff f838 	bl	8003da0 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d302      	bcc.n	8004d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d136      	bne.n	8004db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	0c1b      	lsrs	r3, r3, #16
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d10c      	bne.n	8004d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	43da      	mvns	r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4013      	ands	r3, r2
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	bf14      	ite	ne
 8004d5e:	2301      	movne	r3, #1
 8004d60:	2300      	moveq	r3, #0
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	e00b      	b.n	8004d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	43da      	mvns	r2, r3
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	4013      	ands	r3, r2
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	bf14      	ite	ne
 8004d78:	2301      	movne	r3, #1
 8004d7a:	2300      	moveq	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d016      	beq.n	8004db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9c:	f043 0220 	orr.w	r2, r3, #32
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e021      	b.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	0c1b      	lsrs	r3, r3, #16
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d10c      	bne.n	8004dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	43da      	mvns	r2, r3
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	bf14      	ite	ne
 8004dcc:	2301      	movne	r3, #1
 8004dce:	2300      	moveq	r3, #0
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	e00b      	b.n	8004dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	43da      	mvns	r2, r3
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	4013      	ands	r3, r2
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bf14      	ite	ne
 8004de6:	2301      	movne	r3, #1
 8004de8:	2300      	moveq	r3, #0
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f47f af6d 	bne.w	8004ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e08:	e034      	b.n	8004e74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 f886 	bl	8004f1c <I2C_IsAcknowledgeFailed>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e034      	b.n	8004e84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e20:	d028      	beq.n	8004e74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e22:	f7fe ffbd 	bl	8003da0 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d302      	bcc.n	8004e38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d11d      	bne.n	8004e74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e42:	2b80      	cmp	r3, #128	@ 0x80
 8004e44:	d016      	beq.n	8004e74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e60:	f043 0220 	orr.w	r2, r3, #32
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e007      	b.n	8004e84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e7e:	2b80      	cmp	r3, #128	@ 0x80
 8004e80:	d1c3      	bne.n	8004e0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e98:	e034      	b.n	8004f04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 f83e 	bl	8004f1c <I2C_IsAcknowledgeFailed>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e034      	b.n	8004f14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb0:	d028      	beq.n	8004f04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb2:	f7fe ff75 	bl	8003da0 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d302      	bcc.n	8004ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d11d      	bne.n	8004f04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d016      	beq.n	8004f04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef0:	f043 0220 	orr.w	r2, r3, #32
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e007      	b.n	8004f14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d1c3      	bne.n	8004e9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f32:	d11b      	bne.n	8004f6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f58:	f043 0204 	orr.w	r2, r3, #4
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e000      	b.n	8004f6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bc80      	pop	{r7}
 8004f76:	4770      	bx	lr

08004f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e272      	b.n	8005470 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 8087 	beq.w	80050a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f98:	4b92      	ldr	r3, [pc, #584]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f003 030c 	and.w	r3, r3, #12
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d00c      	beq.n	8004fbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004fa4:	4b8f      	ldr	r3, [pc, #572]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f003 030c 	and.w	r3, r3, #12
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d112      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x5e>
 8004fb0:	4b8c      	ldr	r3, [pc, #560]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fbc:	d10b      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fbe:	4b89      	ldr	r3, [pc, #548]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d06c      	beq.n	80050a4 <HAL_RCC_OscConfig+0x12c>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d168      	bne.n	80050a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e24c      	b.n	8005470 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fde:	d106      	bne.n	8004fee <HAL_RCC_OscConfig+0x76>
 8004fe0:	4b80      	ldr	r3, [pc, #512]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a7f      	ldr	r2, [pc, #508]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8004fe6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fea:	6013      	str	r3, [r2, #0]
 8004fec:	e02e      	b.n	800504c <HAL_RCC_OscConfig+0xd4>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10c      	bne.n	8005010 <HAL_RCC_OscConfig+0x98>
 8004ff6:	4b7b      	ldr	r3, [pc, #492]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a7a      	ldr	r2, [pc, #488]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8004ffc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	4b78      	ldr	r3, [pc, #480]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a77      	ldr	r2, [pc, #476]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8005008:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	e01d      	b.n	800504c <HAL_RCC_OscConfig+0xd4>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005018:	d10c      	bne.n	8005034 <HAL_RCC_OscConfig+0xbc>
 800501a:	4b72      	ldr	r3, [pc, #456]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a71      	ldr	r2, [pc, #452]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8005020:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	4b6f      	ldr	r3, [pc, #444]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a6e      	ldr	r2, [pc, #440]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 800502c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005030:	6013      	str	r3, [r2, #0]
 8005032:	e00b      	b.n	800504c <HAL_RCC_OscConfig+0xd4>
 8005034:	4b6b      	ldr	r3, [pc, #428]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a6a      	ldr	r2, [pc, #424]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 800503a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	4b68      	ldr	r3, [pc, #416]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a67      	ldr	r2, [pc, #412]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8005046:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800504a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d013      	beq.n	800507c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005054:	f7fe fea4 	bl	8003da0 <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800505c:	f7fe fea0 	bl	8003da0 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b64      	cmp	r3, #100	@ 0x64
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e200      	b.n	8005470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506e:	4b5d      	ldr	r3, [pc, #372]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0f0      	beq.n	800505c <HAL_RCC_OscConfig+0xe4>
 800507a:	e014      	b.n	80050a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507c:	f7fe fe90 	bl	8003da0 <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005084:	f7fe fe8c 	bl	8003da0 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b64      	cmp	r3, #100	@ 0x64
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e1ec      	b.n	8005470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005096:	4b53      	ldr	r3, [pc, #332]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1f0      	bne.n	8005084 <HAL_RCC_OscConfig+0x10c>
 80050a2:	e000      	b.n	80050a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d063      	beq.n	800517a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050b2:	4b4c      	ldr	r3, [pc, #304]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f003 030c 	and.w	r3, r3, #12
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00b      	beq.n	80050d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80050be:	4b49      	ldr	r3, [pc, #292]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f003 030c 	and.w	r3, r3, #12
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d11c      	bne.n	8005104 <HAL_RCC_OscConfig+0x18c>
 80050ca:	4b46      	ldr	r3, [pc, #280]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d116      	bne.n	8005104 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050d6:	4b43      	ldr	r3, [pc, #268]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d005      	beq.n	80050ee <HAL_RCC_OscConfig+0x176>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d001      	beq.n	80050ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e1c0      	b.n	8005470 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ee:	4b3d      	ldr	r3, [pc, #244]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	4939      	ldr	r1, [pc, #228]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005102:	e03a      	b.n	800517a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d020      	beq.n	800514e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800510c:	4b36      	ldr	r3, [pc, #216]	@ (80051e8 <HAL_RCC_OscConfig+0x270>)
 800510e:	2201      	movs	r2, #1
 8005110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005112:	f7fe fe45 	bl	8003da0 <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800511a:	f7fe fe41 	bl	8003da0 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e1a1      	b.n	8005470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800512c:	4b2d      	ldr	r3, [pc, #180]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0f0      	beq.n	800511a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005138:	4b2a      	ldr	r3, [pc, #168]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	4927      	ldr	r1, [pc, #156]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8005148:	4313      	orrs	r3, r2
 800514a:	600b      	str	r3, [r1, #0]
 800514c:	e015      	b.n	800517a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800514e:	4b26      	ldr	r3, [pc, #152]	@ (80051e8 <HAL_RCC_OscConfig+0x270>)
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005154:	f7fe fe24 	bl	8003da0 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800515c:	f7fe fe20 	bl	8003da0 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e180      	b.n	8005470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800516e:	4b1d      	ldr	r3, [pc, #116]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f0      	bne.n	800515c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d03a      	beq.n	80051fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d019      	beq.n	80051c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800518e:	4b17      	ldr	r3, [pc, #92]	@ (80051ec <HAL_RCC_OscConfig+0x274>)
 8005190:	2201      	movs	r2, #1
 8005192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005194:	f7fe fe04 	bl	8003da0 <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800519c:	f7fe fe00 	bl	8003da0 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e160      	b.n	8005470 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ae:	4b0d      	ldr	r3, [pc, #52]	@ (80051e4 <HAL_RCC_OscConfig+0x26c>)
 80051b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0f0      	beq.n	800519c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80051ba:	2001      	movs	r0, #1
 80051bc:	f000 faba 	bl	8005734 <RCC_Delay>
 80051c0:	e01c      	b.n	80051fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051c2:	4b0a      	ldr	r3, [pc, #40]	@ (80051ec <HAL_RCC_OscConfig+0x274>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051c8:	f7fe fdea 	bl	8003da0 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ce:	e00f      	b.n	80051f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051d0:	f7fe fde6 	bl	8003da0 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d908      	bls.n	80051f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e146      	b.n	8005470 <HAL_RCC_OscConfig+0x4f8>
 80051e2:	bf00      	nop
 80051e4:	40021000 	.word	0x40021000
 80051e8:	42420000 	.word	0x42420000
 80051ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051f0:	4b92      	ldr	r3, [pc, #584]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 80051f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1e9      	bne.n	80051d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 80a6 	beq.w	8005356 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800520a:	2300      	movs	r3, #0
 800520c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800520e:	4b8b      	ldr	r3, [pc, #556]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10d      	bne.n	8005236 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800521a:	4b88      	ldr	r3, [pc, #544]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	4a87      	ldr	r2, [pc, #540]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 8005220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005224:	61d3      	str	r3, [r2, #28]
 8005226:	4b85      	ldr	r3, [pc, #532]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800522e:	60bb      	str	r3, [r7, #8]
 8005230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005232:	2301      	movs	r3, #1
 8005234:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005236:	4b82      	ldr	r3, [pc, #520]	@ (8005440 <HAL_RCC_OscConfig+0x4c8>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800523e:	2b00      	cmp	r3, #0
 8005240:	d118      	bne.n	8005274 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005242:	4b7f      	ldr	r3, [pc, #508]	@ (8005440 <HAL_RCC_OscConfig+0x4c8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a7e      	ldr	r2, [pc, #504]	@ (8005440 <HAL_RCC_OscConfig+0x4c8>)
 8005248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800524c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800524e:	f7fe fda7 	bl	8003da0 <HAL_GetTick>
 8005252:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005254:	e008      	b.n	8005268 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005256:	f7fe fda3 	bl	8003da0 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b64      	cmp	r3, #100	@ 0x64
 8005262:	d901      	bls.n	8005268 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e103      	b.n	8005470 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005268:	4b75      	ldr	r3, [pc, #468]	@ (8005440 <HAL_RCC_OscConfig+0x4c8>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0f0      	beq.n	8005256 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d106      	bne.n	800528a <HAL_RCC_OscConfig+0x312>
 800527c:	4b6f      	ldr	r3, [pc, #444]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	4a6e      	ldr	r2, [pc, #440]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	6213      	str	r3, [r2, #32]
 8005288:	e02d      	b.n	80052e6 <HAL_RCC_OscConfig+0x36e>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10c      	bne.n	80052ac <HAL_RCC_OscConfig+0x334>
 8005292:	4b6a      	ldr	r3, [pc, #424]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	4a69      	ldr	r2, [pc, #420]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 8005298:	f023 0301 	bic.w	r3, r3, #1
 800529c:	6213      	str	r3, [r2, #32]
 800529e:	4b67      	ldr	r3, [pc, #412]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	4a66      	ldr	r2, [pc, #408]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 80052a4:	f023 0304 	bic.w	r3, r3, #4
 80052a8:	6213      	str	r3, [r2, #32]
 80052aa:	e01c      	b.n	80052e6 <HAL_RCC_OscConfig+0x36e>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	2b05      	cmp	r3, #5
 80052b2:	d10c      	bne.n	80052ce <HAL_RCC_OscConfig+0x356>
 80052b4:	4b61      	ldr	r3, [pc, #388]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	4a60      	ldr	r2, [pc, #384]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 80052ba:	f043 0304 	orr.w	r3, r3, #4
 80052be:	6213      	str	r3, [r2, #32]
 80052c0:	4b5e      	ldr	r3, [pc, #376]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	4a5d      	ldr	r2, [pc, #372]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 80052c6:	f043 0301 	orr.w	r3, r3, #1
 80052ca:	6213      	str	r3, [r2, #32]
 80052cc:	e00b      	b.n	80052e6 <HAL_RCC_OscConfig+0x36e>
 80052ce:	4b5b      	ldr	r3, [pc, #364]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	4a5a      	ldr	r2, [pc, #360]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 80052d4:	f023 0301 	bic.w	r3, r3, #1
 80052d8:	6213      	str	r3, [r2, #32]
 80052da:	4b58      	ldr	r3, [pc, #352]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	4a57      	ldr	r2, [pc, #348]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 80052e0:	f023 0304 	bic.w	r3, r3, #4
 80052e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d015      	beq.n	800531a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ee:	f7fe fd57 	bl	8003da0 <HAL_GetTick>
 80052f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f4:	e00a      	b.n	800530c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052f6:	f7fe fd53 	bl	8003da0 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005304:	4293      	cmp	r3, r2
 8005306:	d901      	bls.n	800530c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e0b1      	b.n	8005470 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800530c:	4b4b      	ldr	r3, [pc, #300]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0ee      	beq.n	80052f6 <HAL_RCC_OscConfig+0x37e>
 8005318:	e014      	b.n	8005344 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800531a:	f7fe fd41 	bl	8003da0 <HAL_GetTick>
 800531e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005320:	e00a      	b.n	8005338 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005322:	f7fe fd3d 	bl	8003da0 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005330:	4293      	cmp	r3, r2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e09b      	b.n	8005470 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005338:	4b40      	ldr	r3, [pc, #256]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1ee      	bne.n	8005322 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005344:	7dfb      	ldrb	r3, [r7, #23]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d105      	bne.n	8005356 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800534a:	4b3c      	ldr	r3, [pc, #240]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	4a3b      	ldr	r2, [pc, #236]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 8005350:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005354:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 8087 	beq.w	800546e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005360:	4b36      	ldr	r3, [pc, #216]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f003 030c 	and.w	r3, r3, #12
 8005368:	2b08      	cmp	r3, #8
 800536a:	d061      	beq.n	8005430 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	2b02      	cmp	r3, #2
 8005372:	d146      	bne.n	8005402 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005374:	4b33      	ldr	r3, [pc, #204]	@ (8005444 <HAL_RCC_OscConfig+0x4cc>)
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800537a:	f7fe fd11 	bl	8003da0 <HAL_GetTick>
 800537e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005380:	e008      	b.n	8005394 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005382:	f7fe fd0d 	bl	8003da0 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e06d      	b.n	8005470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005394:	4b29      	ldr	r3, [pc, #164]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1f0      	bne.n	8005382 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053a8:	d108      	bne.n	80053bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80053aa:	4b24      	ldr	r3, [pc, #144]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	4921      	ldr	r1, [pc, #132]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053bc:	4b1f      	ldr	r3, [pc, #124]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a19      	ldr	r1, [r3, #32]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053cc:	430b      	orrs	r3, r1
 80053ce:	491b      	ldr	r1, [pc, #108]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005444 <HAL_RCC_OscConfig+0x4cc>)
 80053d6:	2201      	movs	r2, #1
 80053d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053da:	f7fe fce1 	bl	8003da0 <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e2:	f7fe fcdd 	bl	8003da0 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e03d      	b.n	8005470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053f4:	4b11      	ldr	r3, [pc, #68]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0f0      	beq.n	80053e2 <HAL_RCC_OscConfig+0x46a>
 8005400:	e035      	b.n	800546e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005402:	4b10      	ldr	r3, [pc, #64]	@ (8005444 <HAL_RCC_OscConfig+0x4cc>)
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005408:	f7fe fcca 	bl	8003da0 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005410:	f7fe fcc6 	bl	8003da0 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e026      	b.n	8005470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005422:	4b06      	ldr	r3, [pc, #24]	@ (800543c <HAL_RCC_OscConfig+0x4c4>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1f0      	bne.n	8005410 <HAL_RCC_OscConfig+0x498>
 800542e:	e01e      	b.n	800546e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d107      	bne.n	8005448 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e019      	b.n	8005470 <HAL_RCC_OscConfig+0x4f8>
 800543c:	40021000 	.word	0x40021000
 8005440:	40007000 	.word	0x40007000
 8005444:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005448:	4b0b      	ldr	r3, [pc, #44]	@ (8005478 <HAL_RCC_OscConfig+0x500>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	429a      	cmp	r2, r3
 800545a:	d106      	bne.n	800546a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005466:	429a      	cmp	r2, r3
 8005468:	d001      	beq.n	800546e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e000      	b.n	8005470 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3718      	adds	r7, #24
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	40021000 	.word	0x40021000

0800547c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e0d0      	b.n	8005632 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005490:	4b6a      	ldr	r3, [pc, #424]	@ (800563c <HAL_RCC_ClockConfig+0x1c0>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d910      	bls.n	80054c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800549e:	4b67      	ldr	r3, [pc, #412]	@ (800563c <HAL_RCC_ClockConfig+0x1c0>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f023 0207 	bic.w	r2, r3, #7
 80054a6:	4965      	ldr	r1, [pc, #404]	@ (800563c <HAL_RCC_ClockConfig+0x1c0>)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ae:	4b63      	ldr	r3, [pc, #396]	@ (800563c <HAL_RCC_ClockConfig+0x1c0>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d001      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e0b8      	b.n	8005632 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d020      	beq.n	800550e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d005      	beq.n	80054e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054d8:	4b59      	ldr	r3, [pc, #356]	@ (8005640 <HAL_RCC_ClockConfig+0x1c4>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	4a58      	ldr	r2, [pc, #352]	@ (8005640 <HAL_RCC_ClockConfig+0x1c4>)
 80054de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80054e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054f0:	4b53      	ldr	r3, [pc, #332]	@ (8005640 <HAL_RCC_ClockConfig+0x1c4>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	4a52      	ldr	r2, [pc, #328]	@ (8005640 <HAL_RCC_ClockConfig+0x1c4>)
 80054f6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80054fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054fc:	4b50      	ldr	r3, [pc, #320]	@ (8005640 <HAL_RCC_ClockConfig+0x1c4>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	494d      	ldr	r1, [pc, #308]	@ (8005640 <HAL_RCC_ClockConfig+0x1c4>)
 800550a:	4313      	orrs	r3, r2
 800550c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d040      	beq.n	800559c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d107      	bne.n	8005532 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005522:	4b47      	ldr	r3, [pc, #284]	@ (8005640 <HAL_RCC_ClockConfig+0x1c4>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d115      	bne.n	800555a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e07f      	b.n	8005632 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b02      	cmp	r3, #2
 8005538:	d107      	bne.n	800554a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800553a:	4b41      	ldr	r3, [pc, #260]	@ (8005640 <HAL_RCC_ClockConfig+0x1c4>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d109      	bne.n	800555a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e073      	b.n	8005632 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800554a:	4b3d      	ldr	r3, [pc, #244]	@ (8005640 <HAL_RCC_ClockConfig+0x1c4>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e06b      	b.n	8005632 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800555a:	4b39      	ldr	r3, [pc, #228]	@ (8005640 <HAL_RCC_ClockConfig+0x1c4>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f023 0203 	bic.w	r2, r3, #3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	4936      	ldr	r1, [pc, #216]	@ (8005640 <HAL_RCC_ClockConfig+0x1c4>)
 8005568:	4313      	orrs	r3, r2
 800556a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800556c:	f7fe fc18 	bl	8003da0 <HAL_GetTick>
 8005570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005572:	e00a      	b.n	800558a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005574:	f7fe fc14 	bl	8003da0 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005582:	4293      	cmp	r3, r2
 8005584:	d901      	bls.n	800558a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e053      	b.n	8005632 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800558a:	4b2d      	ldr	r3, [pc, #180]	@ (8005640 <HAL_RCC_ClockConfig+0x1c4>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f003 020c 	and.w	r2, r3, #12
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	429a      	cmp	r2, r3
 800559a:	d1eb      	bne.n	8005574 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800559c:	4b27      	ldr	r3, [pc, #156]	@ (800563c <HAL_RCC_ClockConfig+0x1c0>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d210      	bcs.n	80055cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055aa:	4b24      	ldr	r3, [pc, #144]	@ (800563c <HAL_RCC_ClockConfig+0x1c0>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f023 0207 	bic.w	r2, r3, #7
 80055b2:	4922      	ldr	r1, [pc, #136]	@ (800563c <HAL_RCC_ClockConfig+0x1c0>)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ba:	4b20      	ldr	r3, [pc, #128]	@ (800563c <HAL_RCC_ClockConfig+0x1c0>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d001      	beq.n	80055cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e032      	b.n	8005632 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d008      	beq.n	80055ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055d8:	4b19      	ldr	r3, [pc, #100]	@ (8005640 <HAL_RCC_ClockConfig+0x1c4>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	4916      	ldr	r1, [pc, #88]	@ (8005640 <HAL_RCC_ClockConfig+0x1c4>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0308 	and.w	r3, r3, #8
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d009      	beq.n	800560a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055f6:	4b12      	ldr	r3, [pc, #72]	@ (8005640 <HAL_RCC_ClockConfig+0x1c4>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	490e      	ldr	r1, [pc, #56]	@ (8005640 <HAL_RCC_ClockConfig+0x1c4>)
 8005606:	4313      	orrs	r3, r2
 8005608:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800560a:	f000 f821 	bl	8005650 <HAL_RCC_GetSysClockFreq>
 800560e:	4602      	mov	r2, r0
 8005610:	4b0b      	ldr	r3, [pc, #44]	@ (8005640 <HAL_RCC_ClockConfig+0x1c4>)
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	091b      	lsrs	r3, r3, #4
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	490a      	ldr	r1, [pc, #40]	@ (8005644 <HAL_RCC_ClockConfig+0x1c8>)
 800561c:	5ccb      	ldrb	r3, [r1, r3]
 800561e:	fa22 f303 	lsr.w	r3, r2, r3
 8005622:	4a09      	ldr	r2, [pc, #36]	@ (8005648 <HAL_RCC_ClockConfig+0x1cc>)
 8005624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005626:	4b09      	ldr	r3, [pc, #36]	@ (800564c <HAL_RCC_ClockConfig+0x1d0>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f7fe fb76 	bl	8003d1c <HAL_InitTick>

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40022000 	.word	0x40022000
 8005640:	40021000 	.word	0x40021000
 8005644:	08008900 	.word	0x08008900
 8005648:	20000018 	.word	0x20000018
 800564c:	2000001c 	.word	0x2000001c

08005650 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	2300      	movs	r3, #0
 800565c:	60bb      	str	r3, [r7, #8]
 800565e:	2300      	movs	r3, #0
 8005660:	617b      	str	r3, [r7, #20]
 8005662:	2300      	movs	r3, #0
 8005664:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800566a:	4b1e      	ldr	r3, [pc, #120]	@ (80056e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f003 030c 	and.w	r3, r3, #12
 8005676:	2b04      	cmp	r3, #4
 8005678:	d002      	beq.n	8005680 <HAL_RCC_GetSysClockFreq+0x30>
 800567a:	2b08      	cmp	r3, #8
 800567c:	d003      	beq.n	8005686 <HAL_RCC_GetSysClockFreq+0x36>
 800567e:	e027      	b.n	80056d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005680:	4b19      	ldr	r3, [pc, #100]	@ (80056e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005682:	613b      	str	r3, [r7, #16]
      break;
 8005684:	e027      	b.n	80056d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	0c9b      	lsrs	r3, r3, #18
 800568a:	f003 030f 	and.w	r3, r3, #15
 800568e:	4a17      	ldr	r2, [pc, #92]	@ (80056ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8005690:	5cd3      	ldrb	r3, [r2, r3]
 8005692:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d010      	beq.n	80056c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800569e:	4b11      	ldr	r3, [pc, #68]	@ (80056e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	0c5b      	lsrs	r3, r3, #17
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	4a11      	ldr	r2, [pc, #68]	@ (80056f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80056aa:	5cd3      	ldrb	r3, [r2, r3]
 80056ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a0d      	ldr	r2, [pc, #52]	@ (80056e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80056b2:	fb03 f202 	mul.w	r2, r3, r2
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	e004      	b.n	80056ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a0c      	ldr	r2, [pc, #48]	@ (80056f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80056c4:	fb02 f303 	mul.w	r3, r2, r3
 80056c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	613b      	str	r3, [r7, #16]
      break;
 80056ce:	e002      	b.n	80056d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056d0:	4b05      	ldr	r3, [pc, #20]	@ (80056e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80056d2:	613b      	str	r3, [r7, #16]
      break;
 80056d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056d6:	693b      	ldr	r3, [r7, #16]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	371c      	adds	r7, #28
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40021000 	.word	0x40021000
 80056e8:	007a1200 	.word	0x007a1200
 80056ec:	08008918 	.word	0x08008918
 80056f0:	08008928 	.word	0x08008928
 80056f4:	003d0900 	.word	0x003d0900

080056f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056fc:	4b02      	ldr	r3, [pc, #8]	@ (8005708 <HAL_RCC_GetHCLKFreq+0x10>)
 80056fe:	681b      	ldr	r3, [r3, #0]
}
 8005700:	4618      	mov	r0, r3
 8005702:	46bd      	mov	sp, r7
 8005704:	bc80      	pop	{r7}
 8005706:	4770      	bx	lr
 8005708:	20000018 	.word	0x20000018

0800570c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005710:	f7ff fff2 	bl	80056f8 <HAL_RCC_GetHCLKFreq>
 8005714:	4602      	mov	r2, r0
 8005716:	4b05      	ldr	r3, [pc, #20]	@ (800572c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	0a1b      	lsrs	r3, r3, #8
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	4903      	ldr	r1, [pc, #12]	@ (8005730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005722:	5ccb      	ldrb	r3, [r1, r3]
 8005724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005728:	4618      	mov	r0, r3
 800572a:	bd80      	pop	{r7, pc}
 800572c:	40021000 	.word	0x40021000
 8005730:	08008910 	.word	0x08008910

08005734 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800573c:	4b0a      	ldr	r3, [pc, #40]	@ (8005768 <RCC_Delay+0x34>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a0a      	ldr	r2, [pc, #40]	@ (800576c <RCC_Delay+0x38>)
 8005742:	fba2 2303 	umull	r2, r3, r2, r3
 8005746:	0a5b      	lsrs	r3, r3, #9
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	fb02 f303 	mul.w	r3, r2, r3
 800574e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005750:	bf00      	nop
  }
  while (Delay --);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	1e5a      	subs	r2, r3, #1
 8005756:	60fa      	str	r2, [r7, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1f9      	bne.n	8005750 <RCC_Delay+0x1c>
}
 800575c:	bf00      	nop
 800575e:	bf00      	nop
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr
 8005768:	20000018 	.word	0x20000018
 800576c:	10624dd3 	.word	0x10624dd3

08005770 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e076      	b.n	8005870 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005786:	2b00      	cmp	r3, #0
 8005788:	d108      	bne.n	800579c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005792:	d009      	beq.n	80057a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	61da      	str	r2, [r3, #28]
 800579a:	e005      	b.n	80057a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d106      	bne.n	80057c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7fd ffe4 	bl	8003790 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80057f0:	431a      	orrs	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	431a      	orrs	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005818:	431a      	orrs	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800582c:	ea42 0103 	orr.w	r1, r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005834:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	0c1a      	lsrs	r2, r3, #16
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f002 0204 	and.w	r2, r2, #4
 800584e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	69da      	ldr	r2, [r3, #28]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800585e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e041      	b.n	800590e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d106      	bne.n	80058a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fe f95c 	bl	8003b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	3304      	adds	r3, #4
 80058b4:	4619      	mov	r1, r3
 80058b6:	4610      	mov	r0, r2
 80058b8:	f000 fbe2 	bl	8006080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b082      	sub	sp, #8
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e041      	b.n	80059ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d106      	bne.n	8005942 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f839 	bl	80059b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2202      	movs	r2, #2
 8005946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	3304      	adds	r3, #4
 8005952:	4619      	mov	r1, r3
 8005954:	4610      	mov	r0, r2
 8005956:	f000 fb93 	bl	8006080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bc80      	pop	{r7}
 80059c4:	4770      	bx	lr
	...

080059c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d109      	bne.n	80059ec <HAL_TIM_PWM_Start+0x24>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	bf14      	ite	ne
 80059e4:	2301      	movne	r3, #1
 80059e6:	2300      	moveq	r3, #0
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	e022      	b.n	8005a32 <HAL_TIM_PWM_Start+0x6a>
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d109      	bne.n	8005a06 <HAL_TIM_PWM_Start+0x3e>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	bf14      	ite	ne
 80059fe:	2301      	movne	r3, #1
 8005a00:	2300      	moveq	r3, #0
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	e015      	b.n	8005a32 <HAL_TIM_PWM_Start+0x6a>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d109      	bne.n	8005a20 <HAL_TIM_PWM_Start+0x58>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	bf14      	ite	ne
 8005a18:	2301      	movne	r3, #1
 8005a1a:	2300      	moveq	r3, #0
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	e008      	b.n	8005a32 <HAL_TIM_PWM_Start+0x6a>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	bf14      	ite	ne
 8005a2c:	2301      	movne	r3, #1
 8005a2e:	2300      	moveq	r3, #0
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e05e      	b.n	8005af8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d104      	bne.n	8005a4a <HAL_TIM_PWM_Start+0x82>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a48:	e013      	b.n	8005a72 <HAL_TIM_PWM_Start+0xaa>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d104      	bne.n	8005a5a <HAL_TIM_PWM_Start+0x92>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a58:	e00b      	b.n	8005a72 <HAL_TIM_PWM_Start+0xaa>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d104      	bne.n	8005a6a <HAL_TIM_PWM_Start+0xa2>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a68:	e003      	b.n	8005a72 <HAL_TIM_PWM_Start+0xaa>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2201      	movs	r2, #1
 8005a78:	6839      	ldr	r1, [r7, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fd8c 	bl	8006598 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a1e      	ldr	r2, [pc, #120]	@ (8005b00 <HAL_TIM_PWM_Start+0x138>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d107      	bne.n	8005a9a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a98:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a18      	ldr	r2, [pc, #96]	@ (8005b00 <HAL_TIM_PWM_Start+0x138>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00e      	beq.n	8005ac2 <HAL_TIM_PWM_Start+0xfa>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aac:	d009      	beq.n	8005ac2 <HAL_TIM_PWM_Start+0xfa>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a14      	ldr	r2, [pc, #80]	@ (8005b04 <HAL_TIM_PWM_Start+0x13c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d004      	beq.n	8005ac2 <HAL_TIM_PWM_Start+0xfa>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a12      	ldr	r2, [pc, #72]	@ (8005b08 <HAL_TIM_PWM_Start+0x140>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d111      	bne.n	8005ae6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2b06      	cmp	r3, #6
 8005ad2:	d010      	beq.n	8005af6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0201 	orr.w	r2, r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae4:	e007      	b.n	8005af6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f042 0201 	orr.w	r2, r2, #1
 8005af4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	40012c00 	.word	0x40012c00
 8005b04:	40000400 	.word	0x40000400
 8005b08:	40000800 	.word	0x40000800

08005b0c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e093      	b.n	8005c48 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d106      	bne.n	8005b3a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7fe f82f 	bl	8003b98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6812      	ldr	r2, [r2, #0]
 8005b4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b50:	f023 0307 	bic.w	r3, r3, #7
 8005b54:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4610      	mov	r0, r2
 8005b62:	f000 fa8d 	bl	8006080 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b8e:	f023 0303 	bic.w	r3, r3, #3
 8005b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	021b      	lsls	r3, r3, #8
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005bac:	f023 030c 	bic.w	r3, r3, #12
 8005bb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bb8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	021b      	lsls	r3, r3, #8
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	011a      	lsls	r2, r3, #4
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	031b      	lsls	r3, r3, #12
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005bea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c60:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c68:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c70:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c78:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d110      	bne.n	8005ca2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d102      	bne.n	8005c8c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c86:	7b7b      	ldrb	r3, [r7, #13]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d001      	beq.n	8005c90 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e069      	b.n	8005d64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ca0:	e031      	b.n	8005d06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b04      	cmp	r3, #4
 8005ca6:	d110      	bne.n	8005cca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ca8:	7bbb      	ldrb	r3, [r7, #14]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d102      	bne.n	8005cb4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cae:	7b3b      	ldrb	r3, [r7, #12]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d001      	beq.n	8005cb8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e055      	b.n	8005d64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005cc8:	e01d      	b.n	8005d06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cca:	7bfb      	ldrb	r3, [r7, #15]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d108      	bne.n	8005ce2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cd0:	7bbb      	ldrb	r3, [r7, #14]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d105      	bne.n	8005ce2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cd6:	7b7b      	ldrb	r3, [r7, #13]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d102      	bne.n	8005ce2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cdc:	7b3b      	ldrb	r3, [r7, #12]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d001      	beq.n	8005ce6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e03e      	b.n	8005d64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2202      	movs	r2, #2
 8005cea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2202      	movs	r2, #2
 8005d02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <HAL_TIM_Encoder_Start+0xc4>
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	2b04      	cmp	r3, #4
 8005d10:	d008      	beq.n	8005d24 <HAL_TIM_Encoder_Start+0xd4>
 8005d12:	e00f      	b.n	8005d34 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 fc3b 	bl	8006598 <TIM_CCxChannelCmd>
      break;
 8005d22:	e016      	b.n	8005d52 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	2104      	movs	r1, #4
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 fc33 	bl	8006598 <TIM_CCxChannelCmd>
      break;
 8005d32:	e00e      	b.n	8005d52 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 fc2b 	bl	8006598 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2201      	movs	r2, #1
 8005d48:	2104      	movs	r1, #4
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fc24 	bl	8006598 <TIM_CCxChannelCmd>
      break;
 8005d50:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f042 0201 	orr.w	r2, r2, #1
 8005d60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d101      	bne.n	8005d8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d86:	2302      	movs	r3, #2
 8005d88:	e0ae      	b.n	8005ee8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b0c      	cmp	r3, #12
 8005d96:	f200 809f 	bhi.w	8005ed8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005da0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da0:	08005dd5 	.word	0x08005dd5
 8005da4:	08005ed9 	.word	0x08005ed9
 8005da8:	08005ed9 	.word	0x08005ed9
 8005dac:	08005ed9 	.word	0x08005ed9
 8005db0:	08005e15 	.word	0x08005e15
 8005db4:	08005ed9 	.word	0x08005ed9
 8005db8:	08005ed9 	.word	0x08005ed9
 8005dbc:	08005ed9 	.word	0x08005ed9
 8005dc0:	08005e57 	.word	0x08005e57
 8005dc4:	08005ed9 	.word	0x08005ed9
 8005dc8:	08005ed9 	.word	0x08005ed9
 8005dcc:	08005ed9 	.word	0x08005ed9
 8005dd0:	08005e97 	.word	0x08005e97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68b9      	ldr	r1, [r7, #8]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 f9be 	bl	800615c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0208 	orr.w	r2, r2, #8
 8005dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0204 	bic.w	r2, r2, #4
 8005dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6999      	ldr	r1, [r3, #24]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	691a      	ldr	r2, [r3, #16]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	619a      	str	r2, [r3, #24]
      break;
 8005e12:	e064      	b.n	8005ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68b9      	ldr	r1, [r7, #8]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fa04 	bl	8006228 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699a      	ldr	r2, [r3, #24]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699a      	ldr	r2, [r3, #24]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6999      	ldr	r1, [r3, #24]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	021a      	lsls	r2, r3, #8
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	619a      	str	r2, [r3, #24]
      break;
 8005e54:	e043      	b.n	8005ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68b9      	ldr	r1, [r7, #8]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fa4d 	bl	80062fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f042 0208 	orr.w	r2, r2, #8
 8005e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69da      	ldr	r2, [r3, #28]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0204 	bic.w	r2, r2, #4
 8005e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69d9      	ldr	r1, [r3, #28]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	691a      	ldr	r2, [r3, #16]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	61da      	str	r2, [r3, #28]
      break;
 8005e94:	e023      	b.n	8005ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68b9      	ldr	r1, [r7, #8]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 fa97 	bl	80063d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69da      	ldr	r2, [r3, #28]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69da      	ldr	r2, [r3, #28]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69d9      	ldr	r1, [r3, #28]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	021a      	lsls	r2, r3, #8
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	61da      	str	r2, [r3, #28]
      break;
 8005ed6:	e002      	b.n	8005ede <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	75fb      	strb	r3, [r7, #23]
      break;
 8005edc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3718      	adds	r7, #24
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d101      	bne.n	8005f0c <HAL_TIM_ConfigClockSource+0x1c>
 8005f08:	2302      	movs	r3, #2
 8005f0a:	e0b4      	b.n	8006076 <HAL_TIM_ConfigClockSource+0x186>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f44:	d03e      	beq.n	8005fc4 <HAL_TIM_ConfigClockSource+0xd4>
 8005f46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f4a:	f200 8087 	bhi.w	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f52:	f000 8086 	beq.w	8006062 <HAL_TIM_ConfigClockSource+0x172>
 8005f56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f5a:	d87f      	bhi.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f5c:	2b70      	cmp	r3, #112	@ 0x70
 8005f5e:	d01a      	beq.n	8005f96 <HAL_TIM_ConfigClockSource+0xa6>
 8005f60:	2b70      	cmp	r3, #112	@ 0x70
 8005f62:	d87b      	bhi.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f64:	2b60      	cmp	r3, #96	@ 0x60
 8005f66:	d050      	beq.n	800600a <HAL_TIM_ConfigClockSource+0x11a>
 8005f68:	2b60      	cmp	r3, #96	@ 0x60
 8005f6a:	d877      	bhi.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f6c:	2b50      	cmp	r3, #80	@ 0x50
 8005f6e:	d03c      	beq.n	8005fea <HAL_TIM_ConfigClockSource+0xfa>
 8005f70:	2b50      	cmp	r3, #80	@ 0x50
 8005f72:	d873      	bhi.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f74:	2b40      	cmp	r3, #64	@ 0x40
 8005f76:	d058      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x13a>
 8005f78:	2b40      	cmp	r3, #64	@ 0x40
 8005f7a:	d86f      	bhi.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f7c:	2b30      	cmp	r3, #48	@ 0x30
 8005f7e:	d064      	beq.n	800604a <HAL_TIM_ConfigClockSource+0x15a>
 8005f80:	2b30      	cmp	r3, #48	@ 0x30
 8005f82:	d86b      	bhi.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d060      	beq.n	800604a <HAL_TIM_ConfigClockSource+0x15a>
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	d867      	bhi.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d05c      	beq.n	800604a <HAL_TIM_ConfigClockSource+0x15a>
 8005f90:	2b10      	cmp	r3, #16
 8005f92:	d05a      	beq.n	800604a <HAL_TIM_ConfigClockSource+0x15a>
 8005f94:	e062      	b.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fa6:	f000 fad8 	bl	800655a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	609a      	str	r2, [r3, #8]
      break;
 8005fc2:	e04f      	b.n	8006064 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fd4:	f000 fac1 	bl	800655a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689a      	ldr	r2, [r3, #8]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fe6:	609a      	str	r2, [r3, #8]
      break;
 8005fe8:	e03c      	b.n	8006064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f000 fa38 	bl	800646c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2150      	movs	r1, #80	@ 0x50
 8006002:	4618      	mov	r0, r3
 8006004:	f000 fa8f 	bl	8006526 <TIM_ITRx_SetConfig>
      break;
 8006008:	e02c      	b.n	8006064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006016:	461a      	mov	r2, r3
 8006018:	f000 fa56 	bl	80064c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2160      	movs	r1, #96	@ 0x60
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fa7f 	bl	8006526 <TIM_ITRx_SetConfig>
      break;
 8006028:	e01c      	b.n	8006064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006036:	461a      	mov	r2, r3
 8006038:	f000 fa18 	bl	800646c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2140      	movs	r1, #64	@ 0x40
 8006042:	4618      	mov	r0, r3
 8006044:	f000 fa6f 	bl	8006526 <TIM_ITRx_SetConfig>
      break;
 8006048:	e00c      	b.n	8006064 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4619      	mov	r1, r3
 8006054:	4610      	mov	r0, r2
 8006056:	f000 fa66 	bl	8006526 <TIM_ITRx_SetConfig>
      break;
 800605a:	e003      	b.n	8006064 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	73fb      	strb	r3, [r7, #15]
      break;
 8006060:	e000      	b.n	8006064 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006062:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006074:	7bfb      	ldrb	r3, [r7, #15]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a2f      	ldr	r2, [pc, #188]	@ (8006150 <TIM_Base_SetConfig+0xd0>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d00b      	beq.n	80060b0 <TIM_Base_SetConfig+0x30>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800609e:	d007      	beq.n	80060b0 <TIM_Base_SetConfig+0x30>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a2c      	ldr	r2, [pc, #176]	@ (8006154 <TIM_Base_SetConfig+0xd4>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d003      	beq.n	80060b0 <TIM_Base_SetConfig+0x30>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a2b      	ldr	r2, [pc, #172]	@ (8006158 <TIM_Base_SetConfig+0xd8>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d108      	bne.n	80060c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a22      	ldr	r2, [pc, #136]	@ (8006150 <TIM_Base_SetConfig+0xd0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d00b      	beq.n	80060e2 <TIM_Base_SetConfig+0x62>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060d0:	d007      	beq.n	80060e2 <TIM_Base_SetConfig+0x62>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006154 <TIM_Base_SetConfig+0xd4>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d003      	beq.n	80060e2 <TIM_Base_SetConfig+0x62>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a1e      	ldr	r2, [pc, #120]	@ (8006158 <TIM_Base_SetConfig+0xd8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d108      	bne.n	80060f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a0d      	ldr	r2, [pc, #52]	@ (8006150 <TIM_Base_SetConfig+0xd0>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d103      	bne.n	8006128 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f023 0201 	bic.w	r2, r3, #1
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	611a      	str	r2, [r3, #16]
  }
}
 8006146:	bf00      	nop
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	bc80      	pop	{r7}
 800614e:	4770      	bx	lr
 8006150:	40012c00 	.word	0x40012c00
 8006154:	40000400 	.word	0x40000400
 8006158:	40000800 	.word	0x40000800

0800615c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	f023 0201 	bic.w	r2, r3, #1
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800618a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f023 0303 	bic.w	r3, r3, #3
 8006192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4313      	orrs	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f023 0302 	bic.w	r3, r3, #2
 80061a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006224 <TIM_OC1_SetConfig+0xc8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d10c      	bne.n	80061d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	f023 0308 	bic.w	r3, r3, #8
 80061be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f023 0304 	bic.w	r3, r3, #4
 80061d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a13      	ldr	r2, [pc, #76]	@ (8006224 <TIM_OC1_SetConfig+0xc8>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d111      	bne.n	80061fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	621a      	str	r2, [r3, #32]
}
 8006218:	bf00      	nop
 800621a:	371c      	adds	r7, #28
 800621c:	46bd      	mov	sp, r7
 800621e:	bc80      	pop	{r7}
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40012c00 	.word	0x40012c00

08006228 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	f023 0210 	bic.w	r2, r3, #16
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800625e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	021b      	lsls	r3, r3, #8
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f023 0320 	bic.w	r3, r3, #32
 8006272:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	011b      	lsls	r3, r3, #4
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	4313      	orrs	r3, r2
 800627e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a1d      	ldr	r2, [pc, #116]	@ (80062f8 <TIM_OC2_SetConfig+0xd0>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d10d      	bne.n	80062a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800628e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	011b      	lsls	r3, r3, #4
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	4313      	orrs	r3, r2
 800629a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a14      	ldr	r2, [pc, #80]	@ (80062f8 <TIM_OC2_SetConfig+0xd0>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d113      	bne.n	80062d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	621a      	str	r2, [r3, #32]
}
 80062ee:	bf00      	nop
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bc80      	pop	{r7}
 80062f6:	4770      	bx	lr
 80062f8:	40012c00 	.word	0x40012c00

080062fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800632a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 0303 	bic.w	r3, r3, #3
 8006332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	021b      	lsls	r3, r3, #8
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	4313      	orrs	r3, r2
 8006350:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a1d      	ldr	r2, [pc, #116]	@ (80063cc <TIM_OC3_SetConfig+0xd0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d10d      	bne.n	8006376 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006360:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	021b      	lsls	r3, r3, #8
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	4313      	orrs	r3, r2
 800636c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a14      	ldr	r2, [pc, #80]	@ (80063cc <TIM_OC3_SetConfig+0xd0>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d113      	bne.n	80063a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800638c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	4313      	orrs	r3, r2
 8006398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	621a      	str	r2, [r3, #32]
}
 80063c0:	bf00      	nop
 80063c2:	371c      	adds	r7, #28
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bc80      	pop	{r7}
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	40012c00 	.word	0x40012c00

080063d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	021b      	lsls	r3, r3, #8
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	4313      	orrs	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800641a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	031b      	lsls	r3, r3, #12
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	4313      	orrs	r3, r2
 8006426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a0f      	ldr	r2, [pc, #60]	@ (8006468 <TIM_OC4_SetConfig+0x98>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d109      	bne.n	8006444 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006436:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	019b      	lsls	r3, r3, #6
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	4313      	orrs	r3, r2
 8006442:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	621a      	str	r2, [r3, #32]
}
 800645e:	bf00      	nop
 8006460:	371c      	adds	r7, #28
 8006462:	46bd      	mov	sp, r7
 8006464:	bc80      	pop	{r7}
 8006466:	4770      	bx	lr
 8006468:	40012c00 	.word	0x40012c00

0800646c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800646c:	b480      	push	{r7}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	f023 0201 	bic.w	r2, r3, #1
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	011b      	lsls	r3, r3, #4
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	4313      	orrs	r3, r2
 80064a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f023 030a 	bic.w	r3, r3, #10
 80064a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	621a      	str	r2, [r3, #32]
}
 80064be:	bf00      	nop
 80064c0:	371c      	adds	r7, #28
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bc80      	pop	{r7}
 80064c6:	4770      	bx	lr

080064c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	f023 0210 	bic.w	r2, r3, #16
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	031b      	lsls	r3, r3, #12
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006504:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	011b      	lsls	r3, r3, #4
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	4313      	orrs	r3, r2
 800650e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	621a      	str	r2, [r3, #32]
}
 800651c:	bf00      	nop
 800651e:	371c      	adds	r7, #28
 8006520:	46bd      	mov	sp, r7
 8006522:	bc80      	pop	{r7}
 8006524:	4770      	bx	lr

08006526 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006526:	b480      	push	{r7}
 8006528:	b085      	sub	sp, #20
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800653c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	f043 0307 	orr.w	r3, r3, #7
 8006548:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	609a      	str	r2, [r3, #8]
}
 8006550:	bf00      	nop
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	bc80      	pop	{r7}
 8006558:	4770      	bx	lr

0800655a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800655a:	b480      	push	{r7}
 800655c:	b087      	sub	sp, #28
 800655e:	af00      	add	r7, sp, #0
 8006560:	60f8      	str	r0, [r7, #12]
 8006562:	60b9      	str	r1, [r7, #8]
 8006564:	607a      	str	r2, [r7, #4]
 8006566:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006574:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	021a      	lsls	r2, r3, #8
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	431a      	orrs	r2, r3
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	4313      	orrs	r3, r2
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	4313      	orrs	r3, r2
 8006586:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	609a      	str	r2, [r3, #8]
}
 800658e:	bf00      	nop
 8006590:	371c      	adds	r7, #28
 8006592:	46bd      	mov	sp, r7
 8006594:	bc80      	pop	{r7}
 8006596:	4770      	bx	lr

08006598 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f003 031f 	and.w	r3, r3, #31
 80065aa:	2201      	movs	r2, #1
 80065ac:	fa02 f303 	lsl.w	r3, r2, r3
 80065b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a1a      	ldr	r2, [r3, #32]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	43db      	mvns	r3, r3
 80065ba:	401a      	ands	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a1a      	ldr	r2, [r3, #32]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f003 031f 	and.w	r3, r3, #31
 80065ca:	6879      	ldr	r1, [r7, #4]
 80065cc:	fa01 f303 	lsl.w	r3, r1, r3
 80065d0:	431a      	orrs	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	621a      	str	r2, [r3, #32]
}
 80065d6:	bf00      	nop
 80065d8:	371c      	adds	r7, #28
 80065da:	46bd      	mov	sp, r7
 80065dc:	bc80      	pop	{r7}
 80065de:	4770      	bx	lr

080065e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d101      	bne.n	80065f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065f4:	2302      	movs	r3, #2
 80065f6:	e046      	b.n	8006686 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800661e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a16      	ldr	r2, [pc, #88]	@ (8006690 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00e      	beq.n	800665a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006644:	d009      	beq.n	800665a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a12      	ldr	r2, [pc, #72]	@ (8006694 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d004      	beq.n	800665a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a10      	ldr	r2, [pc, #64]	@ (8006698 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d10c      	bne.n	8006674 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006660:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	4313      	orrs	r3, r2
 800666a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	bc80      	pop	{r7}
 800668e:	4770      	bx	lr
 8006690:	40012c00 	.word	0x40012c00
 8006694:	40000400 	.word	0x40000400
 8006698:	40000800 	.word	0x40000800

0800669c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d101      	bne.n	80066b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80066b4:	2302      	movs	r3, #2
 80066b6:	e03d      	b.n	8006734 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	4313      	orrs	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	4313      	orrs	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	bc80      	pop	{r7}
 800673c:	4770      	bx	lr
	...

08006740 <siprintf>:
 8006740:	b40e      	push	{r1, r2, r3}
 8006742:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006746:	b510      	push	{r4, lr}
 8006748:	2400      	movs	r4, #0
 800674a:	b09d      	sub	sp, #116	@ 0x74
 800674c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800674e:	9002      	str	r0, [sp, #8]
 8006750:	9006      	str	r0, [sp, #24]
 8006752:	9107      	str	r1, [sp, #28]
 8006754:	9104      	str	r1, [sp, #16]
 8006756:	4809      	ldr	r0, [pc, #36]	@ (800677c <siprintf+0x3c>)
 8006758:	4909      	ldr	r1, [pc, #36]	@ (8006780 <siprintf+0x40>)
 800675a:	f853 2b04 	ldr.w	r2, [r3], #4
 800675e:	9105      	str	r1, [sp, #20]
 8006760:	6800      	ldr	r0, [r0, #0]
 8006762:	a902      	add	r1, sp, #8
 8006764:	9301      	str	r3, [sp, #4]
 8006766:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006768:	f000 f9b4 	bl	8006ad4 <_svfiprintf_r>
 800676c:	9b02      	ldr	r3, [sp, #8]
 800676e:	701c      	strb	r4, [r3, #0]
 8006770:	b01d      	add	sp, #116	@ 0x74
 8006772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006776:	b003      	add	sp, #12
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	20000024 	.word	0x20000024
 8006780:	ffff0208 	.word	0xffff0208

08006784 <memset>:
 8006784:	4603      	mov	r3, r0
 8006786:	4402      	add	r2, r0
 8006788:	4293      	cmp	r3, r2
 800678a:	d100      	bne.n	800678e <memset+0xa>
 800678c:	4770      	bx	lr
 800678e:	f803 1b01 	strb.w	r1, [r3], #1
 8006792:	e7f9      	b.n	8006788 <memset+0x4>

08006794 <strncpy>:
 8006794:	4603      	mov	r3, r0
 8006796:	b510      	push	{r4, lr}
 8006798:	3901      	subs	r1, #1
 800679a:	b132      	cbz	r2, 80067aa <strncpy+0x16>
 800679c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80067a0:	3a01      	subs	r2, #1
 80067a2:	f803 4b01 	strb.w	r4, [r3], #1
 80067a6:	2c00      	cmp	r4, #0
 80067a8:	d1f7      	bne.n	800679a <strncpy+0x6>
 80067aa:	2100      	movs	r1, #0
 80067ac:	441a      	add	r2, r3
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d100      	bne.n	80067b4 <strncpy+0x20>
 80067b2:	bd10      	pop	{r4, pc}
 80067b4:	f803 1b01 	strb.w	r1, [r3], #1
 80067b8:	e7f9      	b.n	80067ae <strncpy+0x1a>
	...

080067bc <__errno>:
 80067bc:	4b01      	ldr	r3, [pc, #4]	@ (80067c4 <__errno+0x8>)
 80067be:	6818      	ldr	r0, [r3, #0]
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	20000024 	.word	0x20000024

080067c8 <__libc_init_array>:
 80067c8:	b570      	push	{r4, r5, r6, lr}
 80067ca:	2600      	movs	r6, #0
 80067cc:	4d0c      	ldr	r5, [pc, #48]	@ (8006800 <__libc_init_array+0x38>)
 80067ce:	4c0d      	ldr	r4, [pc, #52]	@ (8006804 <__libc_init_array+0x3c>)
 80067d0:	1b64      	subs	r4, r4, r5
 80067d2:	10a4      	asrs	r4, r4, #2
 80067d4:	42a6      	cmp	r6, r4
 80067d6:	d109      	bne.n	80067ec <__libc_init_array+0x24>
 80067d8:	f001 fed2 	bl	8008580 <_init>
 80067dc:	2600      	movs	r6, #0
 80067de:	4d0a      	ldr	r5, [pc, #40]	@ (8006808 <__libc_init_array+0x40>)
 80067e0:	4c0a      	ldr	r4, [pc, #40]	@ (800680c <__libc_init_array+0x44>)
 80067e2:	1b64      	subs	r4, r4, r5
 80067e4:	10a4      	asrs	r4, r4, #2
 80067e6:	42a6      	cmp	r6, r4
 80067e8:	d105      	bne.n	80067f6 <__libc_init_array+0x2e>
 80067ea:	bd70      	pop	{r4, r5, r6, pc}
 80067ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80067f0:	4798      	blx	r3
 80067f2:	3601      	adds	r6, #1
 80067f4:	e7ee      	b.n	80067d4 <__libc_init_array+0xc>
 80067f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80067fa:	4798      	blx	r3
 80067fc:	3601      	adds	r6, #1
 80067fe:	e7f2      	b.n	80067e6 <__libc_init_array+0x1e>
 8006800:	08008d58 	.word	0x08008d58
 8006804:	08008d58 	.word	0x08008d58
 8006808:	08008d58 	.word	0x08008d58
 800680c:	08008d5c 	.word	0x08008d5c

08006810 <__retarget_lock_acquire_recursive>:
 8006810:	4770      	bx	lr

08006812 <__retarget_lock_release_recursive>:
 8006812:	4770      	bx	lr

08006814 <memcpy>:
 8006814:	440a      	add	r2, r1
 8006816:	4291      	cmp	r1, r2
 8006818:	f100 33ff 	add.w	r3, r0, #4294967295
 800681c:	d100      	bne.n	8006820 <memcpy+0xc>
 800681e:	4770      	bx	lr
 8006820:	b510      	push	{r4, lr}
 8006822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006826:	4291      	cmp	r1, r2
 8006828:	f803 4f01 	strb.w	r4, [r3, #1]!
 800682c:	d1f9      	bne.n	8006822 <memcpy+0xe>
 800682e:	bd10      	pop	{r4, pc}

08006830 <_free_r>:
 8006830:	b538      	push	{r3, r4, r5, lr}
 8006832:	4605      	mov	r5, r0
 8006834:	2900      	cmp	r1, #0
 8006836:	d040      	beq.n	80068ba <_free_r+0x8a>
 8006838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800683c:	1f0c      	subs	r4, r1, #4
 800683e:	2b00      	cmp	r3, #0
 8006840:	bfb8      	it	lt
 8006842:	18e4      	addlt	r4, r4, r3
 8006844:	f000 f8de 	bl	8006a04 <__malloc_lock>
 8006848:	4a1c      	ldr	r2, [pc, #112]	@ (80068bc <_free_r+0x8c>)
 800684a:	6813      	ldr	r3, [r2, #0]
 800684c:	b933      	cbnz	r3, 800685c <_free_r+0x2c>
 800684e:	6063      	str	r3, [r4, #4]
 8006850:	6014      	str	r4, [r2, #0]
 8006852:	4628      	mov	r0, r5
 8006854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006858:	f000 b8da 	b.w	8006a10 <__malloc_unlock>
 800685c:	42a3      	cmp	r3, r4
 800685e:	d908      	bls.n	8006872 <_free_r+0x42>
 8006860:	6820      	ldr	r0, [r4, #0]
 8006862:	1821      	adds	r1, r4, r0
 8006864:	428b      	cmp	r3, r1
 8006866:	bf01      	itttt	eq
 8006868:	6819      	ldreq	r1, [r3, #0]
 800686a:	685b      	ldreq	r3, [r3, #4]
 800686c:	1809      	addeq	r1, r1, r0
 800686e:	6021      	streq	r1, [r4, #0]
 8006870:	e7ed      	b.n	800684e <_free_r+0x1e>
 8006872:	461a      	mov	r2, r3
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	b10b      	cbz	r3, 800687c <_free_r+0x4c>
 8006878:	42a3      	cmp	r3, r4
 800687a:	d9fa      	bls.n	8006872 <_free_r+0x42>
 800687c:	6811      	ldr	r1, [r2, #0]
 800687e:	1850      	adds	r0, r2, r1
 8006880:	42a0      	cmp	r0, r4
 8006882:	d10b      	bne.n	800689c <_free_r+0x6c>
 8006884:	6820      	ldr	r0, [r4, #0]
 8006886:	4401      	add	r1, r0
 8006888:	1850      	adds	r0, r2, r1
 800688a:	4283      	cmp	r3, r0
 800688c:	6011      	str	r1, [r2, #0]
 800688e:	d1e0      	bne.n	8006852 <_free_r+0x22>
 8006890:	6818      	ldr	r0, [r3, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	4408      	add	r0, r1
 8006896:	6010      	str	r0, [r2, #0]
 8006898:	6053      	str	r3, [r2, #4]
 800689a:	e7da      	b.n	8006852 <_free_r+0x22>
 800689c:	d902      	bls.n	80068a4 <_free_r+0x74>
 800689e:	230c      	movs	r3, #12
 80068a0:	602b      	str	r3, [r5, #0]
 80068a2:	e7d6      	b.n	8006852 <_free_r+0x22>
 80068a4:	6820      	ldr	r0, [r4, #0]
 80068a6:	1821      	adds	r1, r4, r0
 80068a8:	428b      	cmp	r3, r1
 80068aa:	bf01      	itttt	eq
 80068ac:	6819      	ldreq	r1, [r3, #0]
 80068ae:	685b      	ldreq	r3, [r3, #4]
 80068b0:	1809      	addeq	r1, r1, r0
 80068b2:	6021      	streq	r1, [r4, #0]
 80068b4:	6063      	str	r3, [r4, #4]
 80068b6:	6054      	str	r4, [r2, #4]
 80068b8:	e7cb      	b.n	8006852 <_free_r+0x22>
 80068ba:	bd38      	pop	{r3, r4, r5, pc}
 80068bc:	20003f78 	.word	0x20003f78

080068c0 <sbrk_aligned>:
 80068c0:	b570      	push	{r4, r5, r6, lr}
 80068c2:	4e0f      	ldr	r6, [pc, #60]	@ (8006900 <sbrk_aligned+0x40>)
 80068c4:	460c      	mov	r4, r1
 80068c6:	6831      	ldr	r1, [r6, #0]
 80068c8:	4605      	mov	r5, r0
 80068ca:	b911      	cbnz	r1, 80068d2 <sbrk_aligned+0x12>
 80068cc:	f000 fba8 	bl	8007020 <_sbrk_r>
 80068d0:	6030      	str	r0, [r6, #0]
 80068d2:	4621      	mov	r1, r4
 80068d4:	4628      	mov	r0, r5
 80068d6:	f000 fba3 	bl	8007020 <_sbrk_r>
 80068da:	1c43      	adds	r3, r0, #1
 80068dc:	d103      	bne.n	80068e6 <sbrk_aligned+0x26>
 80068de:	f04f 34ff 	mov.w	r4, #4294967295
 80068e2:	4620      	mov	r0, r4
 80068e4:	bd70      	pop	{r4, r5, r6, pc}
 80068e6:	1cc4      	adds	r4, r0, #3
 80068e8:	f024 0403 	bic.w	r4, r4, #3
 80068ec:	42a0      	cmp	r0, r4
 80068ee:	d0f8      	beq.n	80068e2 <sbrk_aligned+0x22>
 80068f0:	1a21      	subs	r1, r4, r0
 80068f2:	4628      	mov	r0, r5
 80068f4:	f000 fb94 	bl	8007020 <_sbrk_r>
 80068f8:	3001      	adds	r0, #1
 80068fa:	d1f2      	bne.n	80068e2 <sbrk_aligned+0x22>
 80068fc:	e7ef      	b.n	80068de <sbrk_aligned+0x1e>
 80068fe:	bf00      	nop
 8006900:	20003f74 	.word	0x20003f74

08006904 <_malloc_r>:
 8006904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006908:	1ccd      	adds	r5, r1, #3
 800690a:	f025 0503 	bic.w	r5, r5, #3
 800690e:	3508      	adds	r5, #8
 8006910:	2d0c      	cmp	r5, #12
 8006912:	bf38      	it	cc
 8006914:	250c      	movcc	r5, #12
 8006916:	2d00      	cmp	r5, #0
 8006918:	4606      	mov	r6, r0
 800691a:	db01      	blt.n	8006920 <_malloc_r+0x1c>
 800691c:	42a9      	cmp	r1, r5
 800691e:	d904      	bls.n	800692a <_malloc_r+0x26>
 8006920:	230c      	movs	r3, #12
 8006922:	6033      	str	r3, [r6, #0]
 8006924:	2000      	movs	r0, #0
 8006926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800692a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a00 <_malloc_r+0xfc>
 800692e:	f000 f869 	bl	8006a04 <__malloc_lock>
 8006932:	f8d8 3000 	ldr.w	r3, [r8]
 8006936:	461c      	mov	r4, r3
 8006938:	bb44      	cbnz	r4, 800698c <_malloc_r+0x88>
 800693a:	4629      	mov	r1, r5
 800693c:	4630      	mov	r0, r6
 800693e:	f7ff ffbf 	bl	80068c0 <sbrk_aligned>
 8006942:	1c43      	adds	r3, r0, #1
 8006944:	4604      	mov	r4, r0
 8006946:	d158      	bne.n	80069fa <_malloc_r+0xf6>
 8006948:	f8d8 4000 	ldr.w	r4, [r8]
 800694c:	4627      	mov	r7, r4
 800694e:	2f00      	cmp	r7, #0
 8006950:	d143      	bne.n	80069da <_malloc_r+0xd6>
 8006952:	2c00      	cmp	r4, #0
 8006954:	d04b      	beq.n	80069ee <_malloc_r+0xea>
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	4639      	mov	r1, r7
 800695a:	4630      	mov	r0, r6
 800695c:	eb04 0903 	add.w	r9, r4, r3
 8006960:	f000 fb5e 	bl	8007020 <_sbrk_r>
 8006964:	4581      	cmp	r9, r0
 8006966:	d142      	bne.n	80069ee <_malloc_r+0xea>
 8006968:	6821      	ldr	r1, [r4, #0]
 800696a:	4630      	mov	r0, r6
 800696c:	1a6d      	subs	r5, r5, r1
 800696e:	4629      	mov	r1, r5
 8006970:	f7ff ffa6 	bl	80068c0 <sbrk_aligned>
 8006974:	3001      	adds	r0, #1
 8006976:	d03a      	beq.n	80069ee <_malloc_r+0xea>
 8006978:	6823      	ldr	r3, [r4, #0]
 800697a:	442b      	add	r3, r5
 800697c:	6023      	str	r3, [r4, #0]
 800697e:	f8d8 3000 	ldr.w	r3, [r8]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	bb62      	cbnz	r2, 80069e0 <_malloc_r+0xdc>
 8006986:	f8c8 7000 	str.w	r7, [r8]
 800698a:	e00f      	b.n	80069ac <_malloc_r+0xa8>
 800698c:	6822      	ldr	r2, [r4, #0]
 800698e:	1b52      	subs	r2, r2, r5
 8006990:	d420      	bmi.n	80069d4 <_malloc_r+0xd0>
 8006992:	2a0b      	cmp	r2, #11
 8006994:	d917      	bls.n	80069c6 <_malloc_r+0xc2>
 8006996:	1961      	adds	r1, r4, r5
 8006998:	42a3      	cmp	r3, r4
 800699a:	6025      	str	r5, [r4, #0]
 800699c:	bf18      	it	ne
 800699e:	6059      	strne	r1, [r3, #4]
 80069a0:	6863      	ldr	r3, [r4, #4]
 80069a2:	bf08      	it	eq
 80069a4:	f8c8 1000 	streq.w	r1, [r8]
 80069a8:	5162      	str	r2, [r4, r5]
 80069aa:	604b      	str	r3, [r1, #4]
 80069ac:	4630      	mov	r0, r6
 80069ae:	f000 f82f 	bl	8006a10 <__malloc_unlock>
 80069b2:	f104 000b 	add.w	r0, r4, #11
 80069b6:	1d23      	adds	r3, r4, #4
 80069b8:	f020 0007 	bic.w	r0, r0, #7
 80069bc:	1ac2      	subs	r2, r0, r3
 80069be:	bf1c      	itt	ne
 80069c0:	1a1b      	subne	r3, r3, r0
 80069c2:	50a3      	strne	r3, [r4, r2]
 80069c4:	e7af      	b.n	8006926 <_malloc_r+0x22>
 80069c6:	6862      	ldr	r2, [r4, #4]
 80069c8:	42a3      	cmp	r3, r4
 80069ca:	bf0c      	ite	eq
 80069cc:	f8c8 2000 	streq.w	r2, [r8]
 80069d0:	605a      	strne	r2, [r3, #4]
 80069d2:	e7eb      	b.n	80069ac <_malloc_r+0xa8>
 80069d4:	4623      	mov	r3, r4
 80069d6:	6864      	ldr	r4, [r4, #4]
 80069d8:	e7ae      	b.n	8006938 <_malloc_r+0x34>
 80069da:	463c      	mov	r4, r7
 80069dc:	687f      	ldr	r7, [r7, #4]
 80069de:	e7b6      	b.n	800694e <_malloc_r+0x4a>
 80069e0:	461a      	mov	r2, r3
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	42a3      	cmp	r3, r4
 80069e6:	d1fb      	bne.n	80069e0 <_malloc_r+0xdc>
 80069e8:	2300      	movs	r3, #0
 80069ea:	6053      	str	r3, [r2, #4]
 80069ec:	e7de      	b.n	80069ac <_malloc_r+0xa8>
 80069ee:	230c      	movs	r3, #12
 80069f0:	4630      	mov	r0, r6
 80069f2:	6033      	str	r3, [r6, #0]
 80069f4:	f000 f80c 	bl	8006a10 <__malloc_unlock>
 80069f8:	e794      	b.n	8006924 <_malloc_r+0x20>
 80069fa:	6005      	str	r5, [r0, #0]
 80069fc:	e7d6      	b.n	80069ac <_malloc_r+0xa8>
 80069fe:	bf00      	nop
 8006a00:	20003f78 	.word	0x20003f78

08006a04 <__malloc_lock>:
 8006a04:	4801      	ldr	r0, [pc, #4]	@ (8006a0c <__malloc_lock+0x8>)
 8006a06:	f7ff bf03 	b.w	8006810 <__retarget_lock_acquire_recursive>
 8006a0a:	bf00      	nop
 8006a0c:	20003f70 	.word	0x20003f70

08006a10 <__malloc_unlock>:
 8006a10:	4801      	ldr	r0, [pc, #4]	@ (8006a18 <__malloc_unlock+0x8>)
 8006a12:	f7ff befe 	b.w	8006812 <__retarget_lock_release_recursive>
 8006a16:	bf00      	nop
 8006a18:	20003f70 	.word	0x20003f70

08006a1c <__ssputs_r>:
 8006a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a20:	461f      	mov	r7, r3
 8006a22:	688e      	ldr	r6, [r1, #8]
 8006a24:	4682      	mov	sl, r0
 8006a26:	42be      	cmp	r6, r7
 8006a28:	460c      	mov	r4, r1
 8006a2a:	4690      	mov	r8, r2
 8006a2c:	680b      	ldr	r3, [r1, #0]
 8006a2e:	d82d      	bhi.n	8006a8c <__ssputs_r+0x70>
 8006a30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006a38:	d026      	beq.n	8006a88 <__ssputs_r+0x6c>
 8006a3a:	6965      	ldr	r5, [r4, #20]
 8006a3c:	6909      	ldr	r1, [r1, #16]
 8006a3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a42:	eba3 0901 	sub.w	r9, r3, r1
 8006a46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a4a:	1c7b      	adds	r3, r7, #1
 8006a4c:	444b      	add	r3, r9
 8006a4e:	106d      	asrs	r5, r5, #1
 8006a50:	429d      	cmp	r5, r3
 8006a52:	bf38      	it	cc
 8006a54:	461d      	movcc	r5, r3
 8006a56:	0553      	lsls	r3, r2, #21
 8006a58:	d527      	bpl.n	8006aaa <__ssputs_r+0x8e>
 8006a5a:	4629      	mov	r1, r5
 8006a5c:	f7ff ff52 	bl	8006904 <_malloc_r>
 8006a60:	4606      	mov	r6, r0
 8006a62:	b360      	cbz	r0, 8006abe <__ssputs_r+0xa2>
 8006a64:	464a      	mov	r2, r9
 8006a66:	6921      	ldr	r1, [r4, #16]
 8006a68:	f7ff fed4 	bl	8006814 <memcpy>
 8006a6c:	89a3      	ldrh	r3, [r4, #12]
 8006a6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a76:	81a3      	strh	r3, [r4, #12]
 8006a78:	6126      	str	r6, [r4, #16]
 8006a7a:	444e      	add	r6, r9
 8006a7c:	6026      	str	r6, [r4, #0]
 8006a7e:	463e      	mov	r6, r7
 8006a80:	6165      	str	r5, [r4, #20]
 8006a82:	eba5 0509 	sub.w	r5, r5, r9
 8006a86:	60a5      	str	r5, [r4, #8]
 8006a88:	42be      	cmp	r6, r7
 8006a8a:	d900      	bls.n	8006a8e <__ssputs_r+0x72>
 8006a8c:	463e      	mov	r6, r7
 8006a8e:	4632      	mov	r2, r6
 8006a90:	4641      	mov	r1, r8
 8006a92:	6820      	ldr	r0, [r4, #0]
 8006a94:	f000 faaa 	bl	8006fec <memmove>
 8006a98:	2000      	movs	r0, #0
 8006a9a:	68a3      	ldr	r3, [r4, #8]
 8006a9c:	1b9b      	subs	r3, r3, r6
 8006a9e:	60a3      	str	r3, [r4, #8]
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	4433      	add	r3, r6
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aaa:	462a      	mov	r2, r5
 8006aac:	f000 fad6 	bl	800705c <_realloc_r>
 8006ab0:	4606      	mov	r6, r0
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d1e0      	bne.n	8006a78 <__ssputs_r+0x5c>
 8006ab6:	4650      	mov	r0, sl
 8006ab8:	6921      	ldr	r1, [r4, #16]
 8006aba:	f7ff feb9 	bl	8006830 <_free_r>
 8006abe:	230c      	movs	r3, #12
 8006ac0:	f8ca 3000 	str.w	r3, [sl]
 8006ac4:	89a3      	ldrh	r3, [r4, #12]
 8006ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8006aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ace:	81a3      	strh	r3, [r4, #12]
 8006ad0:	e7e9      	b.n	8006aa6 <__ssputs_r+0x8a>
	...

08006ad4 <_svfiprintf_r>:
 8006ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad8:	4698      	mov	r8, r3
 8006ada:	898b      	ldrh	r3, [r1, #12]
 8006adc:	4607      	mov	r7, r0
 8006ade:	061b      	lsls	r3, r3, #24
 8006ae0:	460d      	mov	r5, r1
 8006ae2:	4614      	mov	r4, r2
 8006ae4:	b09d      	sub	sp, #116	@ 0x74
 8006ae6:	d510      	bpl.n	8006b0a <_svfiprintf_r+0x36>
 8006ae8:	690b      	ldr	r3, [r1, #16]
 8006aea:	b973      	cbnz	r3, 8006b0a <_svfiprintf_r+0x36>
 8006aec:	2140      	movs	r1, #64	@ 0x40
 8006aee:	f7ff ff09 	bl	8006904 <_malloc_r>
 8006af2:	6028      	str	r0, [r5, #0]
 8006af4:	6128      	str	r0, [r5, #16]
 8006af6:	b930      	cbnz	r0, 8006b06 <_svfiprintf_r+0x32>
 8006af8:	230c      	movs	r3, #12
 8006afa:	603b      	str	r3, [r7, #0]
 8006afc:	f04f 30ff 	mov.w	r0, #4294967295
 8006b00:	b01d      	add	sp, #116	@ 0x74
 8006b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b06:	2340      	movs	r3, #64	@ 0x40
 8006b08:	616b      	str	r3, [r5, #20]
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b0e:	2320      	movs	r3, #32
 8006b10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b14:	2330      	movs	r3, #48	@ 0x30
 8006b16:	f04f 0901 	mov.w	r9, #1
 8006b1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b1e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006cb8 <_svfiprintf_r+0x1e4>
 8006b22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b26:	4623      	mov	r3, r4
 8006b28:	469a      	mov	sl, r3
 8006b2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b2e:	b10a      	cbz	r2, 8006b34 <_svfiprintf_r+0x60>
 8006b30:	2a25      	cmp	r2, #37	@ 0x25
 8006b32:	d1f9      	bne.n	8006b28 <_svfiprintf_r+0x54>
 8006b34:	ebba 0b04 	subs.w	fp, sl, r4
 8006b38:	d00b      	beq.n	8006b52 <_svfiprintf_r+0x7e>
 8006b3a:	465b      	mov	r3, fp
 8006b3c:	4622      	mov	r2, r4
 8006b3e:	4629      	mov	r1, r5
 8006b40:	4638      	mov	r0, r7
 8006b42:	f7ff ff6b 	bl	8006a1c <__ssputs_r>
 8006b46:	3001      	adds	r0, #1
 8006b48:	f000 80a7 	beq.w	8006c9a <_svfiprintf_r+0x1c6>
 8006b4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b4e:	445a      	add	r2, fp
 8006b50:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b52:	f89a 3000 	ldrb.w	r3, [sl]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 809f 	beq.w	8006c9a <_svfiprintf_r+0x1c6>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b66:	f10a 0a01 	add.w	sl, sl, #1
 8006b6a:	9304      	str	r3, [sp, #16]
 8006b6c:	9307      	str	r3, [sp, #28]
 8006b6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b72:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b74:	4654      	mov	r4, sl
 8006b76:	2205      	movs	r2, #5
 8006b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b7c:	484e      	ldr	r0, [pc, #312]	@ (8006cb8 <_svfiprintf_r+0x1e4>)
 8006b7e:	f000 fa5f 	bl	8007040 <memchr>
 8006b82:	9a04      	ldr	r2, [sp, #16]
 8006b84:	b9d8      	cbnz	r0, 8006bbe <_svfiprintf_r+0xea>
 8006b86:	06d0      	lsls	r0, r2, #27
 8006b88:	bf44      	itt	mi
 8006b8a:	2320      	movmi	r3, #32
 8006b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b90:	0711      	lsls	r1, r2, #28
 8006b92:	bf44      	itt	mi
 8006b94:	232b      	movmi	r3, #43	@ 0x2b
 8006b96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ba0:	d015      	beq.n	8006bce <_svfiprintf_r+0xfa>
 8006ba2:	4654      	mov	r4, sl
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	f04f 0c0a 	mov.w	ip, #10
 8006baa:	9a07      	ldr	r2, [sp, #28]
 8006bac:	4621      	mov	r1, r4
 8006bae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bb2:	3b30      	subs	r3, #48	@ 0x30
 8006bb4:	2b09      	cmp	r3, #9
 8006bb6:	d94b      	bls.n	8006c50 <_svfiprintf_r+0x17c>
 8006bb8:	b1b0      	cbz	r0, 8006be8 <_svfiprintf_r+0x114>
 8006bba:	9207      	str	r2, [sp, #28]
 8006bbc:	e014      	b.n	8006be8 <_svfiprintf_r+0x114>
 8006bbe:	eba0 0308 	sub.w	r3, r0, r8
 8006bc2:	fa09 f303 	lsl.w	r3, r9, r3
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	46a2      	mov	sl, r4
 8006bca:	9304      	str	r3, [sp, #16]
 8006bcc:	e7d2      	b.n	8006b74 <_svfiprintf_r+0xa0>
 8006bce:	9b03      	ldr	r3, [sp, #12]
 8006bd0:	1d19      	adds	r1, r3, #4
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	9103      	str	r1, [sp, #12]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	bfbb      	ittet	lt
 8006bda:	425b      	neglt	r3, r3
 8006bdc:	f042 0202 	orrlt.w	r2, r2, #2
 8006be0:	9307      	strge	r3, [sp, #28]
 8006be2:	9307      	strlt	r3, [sp, #28]
 8006be4:	bfb8      	it	lt
 8006be6:	9204      	strlt	r2, [sp, #16]
 8006be8:	7823      	ldrb	r3, [r4, #0]
 8006bea:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bec:	d10a      	bne.n	8006c04 <_svfiprintf_r+0x130>
 8006bee:	7863      	ldrb	r3, [r4, #1]
 8006bf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bf2:	d132      	bne.n	8006c5a <_svfiprintf_r+0x186>
 8006bf4:	9b03      	ldr	r3, [sp, #12]
 8006bf6:	3402      	adds	r4, #2
 8006bf8:	1d1a      	adds	r2, r3, #4
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	9203      	str	r2, [sp, #12]
 8006bfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c02:	9305      	str	r3, [sp, #20]
 8006c04:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006cbc <_svfiprintf_r+0x1e8>
 8006c08:	2203      	movs	r2, #3
 8006c0a:	4650      	mov	r0, sl
 8006c0c:	7821      	ldrb	r1, [r4, #0]
 8006c0e:	f000 fa17 	bl	8007040 <memchr>
 8006c12:	b138      	cbz	r0, 8006c24 <_svfiprintf_r+0x150>
 8006c14:	2240      	movs	r2, #64	@ 0x40
 8006c16:	9b04      	ldr	r3, [sp, #16]
 8006c18:	eba0 000a 	sub.w	r0, r0, sl
 8006c1c:	4082      	lsls	r2, r0
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	3401      	adds	r4, #1
 8006c22:	9304      	str	r3, [sp, #16]
 8006c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c28:	2206      	movs	r2, #6
 8006c2a:	4825      	ldr	r0, [pc, #148]	@ (8006cc0 <_svfiprintf_r+0x1ec>)
 8006c2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c30:	f000 fa06 	bl	8007040 <memchr>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	d036      	beq.n	8006ca6 <_svfiprintf_r+0x1d2>
 8006c38:	4b22      	ldr	r3, [pc, #136]	@ (8006cc4 <_svfiprintf_r+0x1f0>)
 8006c3a:	bb1b      	cbnz	r3, 8006c84 <_svfiprintf_r+0x1b0>
 8006c3c:	9b03      	ldr	r3, [sp, #12]
 8006c3e:	3307      	adds	r3, #7
 8006c40:	f023 0307 	bic.w	r3, r3, #7
 8006c44:	3308      	adds	r3, #8
 8006c46:	9303      	str	r3, [sp, #12]
 8006c48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c4a:	4433      	add	r3, r6
 8006c4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c4e:	e76a      	b.n	8006b26 <_svfiprintf_r+0x52>
 8006c50:	460c      	mov	r4, r1
 8006c52:	2001      	movs	r0, #1
 8006c54:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c58:	e7a8      	b.n	8006bac <_svfiprintf_r+0xd8>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f04f 0c0a 	mov.w	ip, #10
 8006c60:	4619      	mov	r1, r3
 8006c62:	3401      	adds	r4, #1
 8006c64:	9305      	str	r3, [sp, #20]
 8006c66:	4620      	mov	r0, r4
 8006c68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c6c:	3a30      	subs	r2, #48	@ 0x30
 8006c6e:	2a09      	cmp	r2, #9
 8006c70:	d903      	bls.n	8006c7a <_svfiprintf_r+0x1a6>
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d0c6      	beq.n	8006c04 <_svfiprintf_r+0x130>
 8006c76:	9105      	str	r1, [sp, #20]
 8006c78:	e7c4      	b.n	8006c04 <_svfiprintf_r+0x130>
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c82:	e7f0      	b.n	8006c66 <_svfiprintf_r+0x192>
 8006c84:	ab03      	add	r3, sp, #12
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	462a      	mov	r2, r5
 8006c8a:	4638      	mov	r0, r7
 8006c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8006cc8 <_svfiprintf_r+0x1f4>)
 8006c8e:	a904      	add	r1, sp, #16
 8006c90:	f3af 8000 	nop.w
 8006c94:	1c42      	adds	r2, r0, #1
 8006c96:	4606      	mov	r6, r0
 8006c98:	d1d6      	bne.n	8006c48 <_svfiprintf_r+0x174>
 8006c9a:	89ab      	ldrh	r3, [r5, #12]
 8006c9c:	065b      	lsls	r3, r3, #25
 8006c9e:	f53f af2d 	bmi.w	8006afc <_svfiprintf_r+0x28>
 8006ca2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ca4:	e72c      	b.n	8006b00 <_svfiprintf_r+0x2c>
 8006ca6:	ab03      	add	r3, sp, #12
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	462a      	mov	r2, r5
 8006cac:	4638      	mov	r0, r7
 8006cae:	4b06      	ldr	r3, [pc, #24]	@ (8006cc8 <_svfiprintf_r+0x1f4>)
 8006cb0:	a904      	add	r1, sp, #16
 8006cb2:	f000 f87d 	bl	8006db0 <_printf_i>
 8006cb6:	e7ed      	b.n	8006c94 <_svfiprintf_r+0x1c0>
 8006cb8:	0800892a 	.word	0x0800892a
 8006cbc:	08008930 	.word	0x08008930
 8006cc0:	08008934 	.word	0x08008934
 8006cc4:	00000000 	.word	0x00000000
 8006cc8:	08006a1d 	.word	0x08006a1d

08006ccc <_printf_common>:
 8006ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd0:	4616      	mov	r6, r2
 8006cd2:	4698      	mov	r8, r3
 8006cd4:	688a      	ldr	r2, [r1, #8]
 8006cd6:	690b      	ldr	r3, [r1, #16]
 8006cd8:	4607      	mov	r7, r0
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	bfb8      	it	lt
 8006cde:	4613      	movlt	r3, r2
 8006ce0:	6033      	str	r3, [r6, #0]
 8006ce2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006cec:	b10a      	cbz	r2, 8006cf2 <_printf_common+0x26>
 8006cee:	3301      	adds	r3, #1
 8006cf0:	6033      	str	r3, [r6, #0]
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	0699      	lsls	r1, r3, #26
 8006cf6:	bf42      	ittt	mi
 8006cf8:	6833      	ldrmi	r3, [r6, #0]
 8006cfa:	3302      	addmi	r3, #2
 8006cfc:	6033      	strmi	r3, [r6, #0]
 8006cfe:	6825      	ldr	r5, [r4, #0]
 8006d00:	f015 0506 	ands.w	r5, r5, #6
 8006d04:	d106      	bne.n	8006d14 <_printf_common+0x48>
 8006d06:	f104 0a19 	add.w	sl, r4, #25
 8006d0a:	68e3      	ldr	r3, [r4, #12]
 8006d0c:	6832      	ldr	r2, [r6, #0]
 8006d0e:	1a9b      	subs	r3, r3, r2
 8006d10:	42ab      	cmp	r3, r5
 8006d12:	dc2b      	bgt.n	8006d6c <_printf_common+0xa0>
 8006d14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d18:	6822      	ldr	r2, [r4, #0]
 8006d1a:	3b00      	subs	r3, #0
 8006d1c:	bf18      	it	ne
 8006d1e:	2301      	movne	r3, #1
 8006d20:	0692      	lsls	r2, r2, #26
 8006d22:	d430      	bmi.n	8006d86 <_printf_common+0xba>
 8006d24:	4641      	mov	r1, r8
 8006d26:	4638      	mov	r0, r7
 8006d28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d2c:	47c8      	blx	r9
 8006d2e:	3001      	adds	r0, #1
 8006d30:	d023      	beq.n	8006d7a <_printf_common+0xae>
 8006d32:	6823      	ldr	r3, [r4, #0]
 8006d34:	6922      	ldr	r2, [r4, #16]
 8006d36:	f003 0306 	and.w	r3, r3, #6
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	bf14      	ite	ne
 8006d3e:	2500      	movne	r5, #0
 8006d40:	6833      	ldreq	r3, [r6, #0]
 8006d42:	f04f 0600 	mov.w	r6, #0
 8006d46:	bf08      	it	eq
 8006d48:	68e5      	ldreq	r5, [r4, #12]
 8006d4a:	f104 041a 	add.w	r4, r4, #26
 8006d4e:	bf08      	it	eq
 8006d50:	1aed      	subeq	r5, r5, r3
 8006d52:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006d56:	bf08      	it	eq
 8006d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	bfc4      	itt	gt
 8006d60:	1a9b      	subgt	r3, r3, r2
 8006d62:	18ed      	addgt	r5, r5, r3
 8006d64:	42b5      	cmp	r5, r6
 8006d66:	d11a      	bne.n	8006d9e <_printf_common+0xd2>
 8006d68:	2000      	movs	r0, #0
 8006d6a:	e008      	b.n	8006d7e <_printf_common+0xb2>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	4652      	mov	r2, sl
 8006d70:	4641      	mov	r1, r8
 8006d72:	4638      	mov	r0, r7
 8006d74:	47c8      	blx	r9
 8006d76:	3001      	adds	r0, #1
 8006d78:	d103      	bne.n	8006d82 <_printf_common+0xb6>
 8006d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d82:	3501      	adds	r5, #1
 8006d84:	e7c1      	b.n	8006d0a <_printf_common+0x3e>
 8006d86:	2030      	movs	r0, #48	@ 0x30
 8006d88:	18e1      	adds	r1, r4, r3
 8006d8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d8e:	1c5a      	adds	r2, r3, #1
 8006d90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d94:	4422      	add	r2, r4
 8006d96:	3302      	adds	r3, #2
 8006d98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d9c:	e7c2      	b.n	8006d24 <_printf_common+0x58>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	4622      	mov	r2, r4
 8006da2:	4641      	mov	r1, r8
 8006da4:	4638      	mov	r0, r7
 8006da6:	47c8      	blx	r9
 8006da8:	3001      	adds	r0, #1
 8006daa:	d0e6      	beq.n	8006d7a <_printf_common+0xae>
 8006dac:	3601      	adds	r6, #1
 8006dae:	e7d9      	b.n	8006d64 <_printf_common+0x98>

08006db0 <_printf_i>:
 8006db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006db4:	7e0f      	ldrb	r7, [r1, #24]
 8006db6:	4691      	mov	r9, r2
 8006db8:	2f78      	cmp	r7, #120	@ 0x78
 8006dba:	4680      	mov	r8, r0
 8006dbc:	460c      	mov	r4, r1
 8006dbe:	469a      	mov	sl, r3
 8006dc0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006dc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006dc6:	d807      	bhi.n	8006dd8 <_printf_i+0x28>
 8006dc8:	2f62      	cmp	r7, #98	@ 0x62
 8006dca:	d80a      	bhi.n	8006de2 <_printf_i+0x32>
 8006dcc:	2f00      	cmp	r7, #0
 8006dce:	f000 80d1 	beq.w	8006f74 <_printf_i+0x1c4>
 8006dd2:	2f58      	cmp	r7, #88	@ 0x58
 8006dd4:	f000 80b8 	beq.w	8006f48 <_printf_i+0x198>
 8006dd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ddc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006de0:	e03a      	b.n	8006e58 <_printf_i+0xa8>
 8006de2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006de6:	2b15      	cmp	r3, #21
 8006de8:	d8f6      	bhi.n	8006dd8 <_printf_i+0x28>
 8006dea:	a101      	add	r1, pc, #4	@ (adr r1, 8006df0 <_printf_i+0x40>)
 8006dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006df0:	08006e49 	.word	0x08006e49
 8006df4:	08006e5d 	.word	0x08006e5d
 8006df8:	08006dd9 	.word	0x08006dd9
 8006dfc:	08006dd9 	.word	0x08006dd9
 8006e00:	08006dd9 	.word	0x08006dd9
 8006e04:	08006dd9 	.word	0x08006dd9
 8006e08:	08006e5d 	.word	0x08006e5d
 8006e0c:	08006dd9 	.word	0x08006dd9
 8006e10:	08006dd9 	.word	0x08006dd9
 8006e14:	08006dd9 	.word	0x08006dd9
 8006e18:	08006dd9 	.word	0x08006dd9
 8006e1c:	08006f5b 	.word	0x08006f5b
 8006e20:	08006e87 	.word	0x08006e87
 8006e24:	08006f15 	.word	0x08006f15
 8006e28:	08006dd9 	.word	0x08006dd9
 8006e2c:	08006dd9 	.word	0x08006dd9
 8006e30:	08006f7d 	.word	0x08006f7d
 8006e34:	08006dd9 	.word	0x08006dd9
 8006e38:	08006e87 	.word	0x08006e87
 8006e3c:	08006dd9 	.word	0x08006dd9
 8006e40:	08006dd9 	.word	0x08006dd9
 8006e44:	08006f1d 	.word	0x08006f1d
 8006e48:	6833      	ldr	r3, [r6, #0]
 8006e4a:	1d1a      	adds	r2, r3, #4
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6032      	str	r2, [r6, #0]
 8006e50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e09c      	b.n	8006f96 <_printf_i+0x1e6>
 8006e5c:	6833      	ldr	r3, [r6, #0]
 8006e5e:	6820      	ldr	r0, [r4, #0]
 8006e60:	1d19      	adds	r1, r3, #4
 8006e62:	6031      	str	r1, [r6, #0]
 8006e64:	0606      	lsls	r6, r0, #24
 8006e66:	d501      	bpl.n	8006e6c <_printf_i+0xbc>
 8006e68:	681d      	ldr	r5, [r3, #0]
 8006e6a:	e003      	b.n	8006e74 <_printf_i+0xc4>
 8006e6c:	0645      	lsls	r5, r0, #25
 8006e6e:	d5fb      	bpl.n	8006e68 <_printf_i+0xb8>
 8006e70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e74:	2d00      	cmp	r5, #0
 8006e76:	da03      	bge.n	8006e80 <_printf_i+0xd0>
 8006e78:	232d      	movs	r3, #45	@ 0x2d
 8006e7a:	426d      	negs	r5, r5
 8006e7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e80:	230a      	movs	r3, #10
 8006e82:	4858      	ldr	r0, [pc, #352]	@ (8006fe4 <_printf_i+0x234>)
 8006e84:	e011      	b.n	8006eaa <_printf_i+0xfa>
 8006e86:	6821      	ldr	r1, [r4, #0]
 8006e88:	6833      	ldr	r3, [r6, #0]
 8006e8a:	0608      	lsls	r0, r1, #24
 8006e8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e90:	d402      	bmi.n	8006e98 <_printf_i+0xe8>
 8006e92:	0649      	lsls	r1, r1, #25
 8006e94:	bf48      	it	mi
 8006e96:	b2ad      	uxthmi	r5, r5
 8006e98:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e9a:	6033      	str	r3, [r6, #0]
 8006e9c:	bf14      	ite	ne
 8006e9e:	230a      	movne	r3, #10
 8006ea0:	2308      	moveq	r3, #8
 8006ea2:	4850      	ldr	r0, [pc, #320]	@ (8006fe4 <_printf_i+0x234>)
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006eaa:	6866      	ldr	r6, [r4, #4]
 8006eac:	2e00      	cmp	r6, #0
 8006eae:	60a6      	str	r6, [r4, #8]
 8006eb0:	db05      	blt.n	8006ebe <_printf_i+0x10e>
 8006eb2:	6821      	ldr	r1, [r4, #0]
 8006eb4:	432e      	orrs	r6, r5
 8006eb6:	f021 0104 	bic.w	r1, r1, #4
 8006eba:	6021      	str	r1, [r4, #0]
 8006ebc:	d04b      	beq.n	8006f56 <_printf_i+0x1a6>
 8006ebe:	4616      	mov	r6, r2
 8006ec0:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ec4:	fb03 5711 	mls	r7, r3, r1, r5
 8006ec8:	5dc7      	ldrb	r7, [r0, r7]
 8006eca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ece:	462f      	mov	r7, r5
 8006ed0:	42bb      	cmp	r3, r7
 8006ed2:	460d      	mov	r5, r1
 8006ed4:	d9f4      	bls.n	8006ec0 <_printf_i+0x110>
 8006ed6:	2b08      	cmp	r3, #8
 8006ed8:	d10b      	bne.n	8006ef2 <_printf_i+0x142>
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	07df      	lsls	r7, r3, #31
 8006ede:	d508      	bpl.n	8006ef2 <_printf_i+0x142>
 8006ee0:	6923      	ldr	r3, [r4, #16]
 8006ee2:	6861      	ldr	r1, [r4, #4]
 8006ee4:	4299      	cmp	r1, r3
 8006ee6:	bfde      	ittt	le
 8006ee8:	2330      	movle	r3, #48	@ 0x30
 8006eea:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006eee:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ef2:	1b92      	subs	r2, r2, r6
 8006ef4:	6122      	str	r2, [r4, #16]
 8006ef6:	464b      	mov	r3, r9
 8006ef8:	4621      	mov	r1, r4
 8006efa:	4640      	mov	r0, r8
 8006efc:	f8cd a000 	str.w	sl, [sp]
 8006f00:	aa03      	add	r2, sp, #12
 8006f02:	f7ff fee3 	bl	8006ccc <_printf_common>
 8006f06:	3001      	adds	r0, #1
 8006f08:	d14a      	bne.n	8006fa0 <_printf_i+0x1f0>
 8006f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0e:	b004      	add	sp, #16
 8006f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	f043 0320 	orr.w	r3, r3, #32
 8006f1a:	6023      	str	r3, [r4, #0]
 8006f1c:	2778      	movs	r7, #120	@ 0x78
 8006f1e:	4832      	ldr	r0, [pc, #200]	@ (8006fe8 <_printf_i+0x238>)
 8006f20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f24:	6823      	ldr	r3, [r4, #0]
 8006f26:	6831      	ldr	r1, [r6, #0]
 8006f28:	061f      	lsls	r7, r3, #24
 8006f2a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f2e:	d402      	bmi.n	8006f36 <_printf_i+0x186>
 8006f30:	065f      	lsls	r7, r3, #25
 8006f32:	bf48      	it	mi
 8006f34:	b2ad      	uxthmi	r5, r5
 8006f36:	6031      	str	r1, [r6, #0]
 8006f38:	07d9      	lsls	r1, r3, #31
 8006f3a:	bf44      	itt	mi
 8006f3c:	f043 0320 	orrmi.w	r3, r3, #32
 8006f40:	6023      	strmi	r3, [r4, #0]
 8006f42:	b11d      	cbz	r5, 8006f4c <_printf_i+0x19c>
 8006f44:	2310      	movs	r3, #16
 8006f46:	e7ad      	b.n	8006ea4 <_printf_i+0xf4>
 8006f48:	4826      	ldr	r0, [pc, #152]	@ (8006fe4 <_printf_i+0x234>)
 8006f4a:	e7e9      	b.n	8006f20 <_printf_i+0x170>
 8006f4c:	6823      	ldr	r3, [r4, #0]
 8006f4e:	f023 0320 	bic.w	r3, r3, #32
 8006f52:	6023      	str	r3, [r4, #0]
 8006f54:	e7f6      	b.n	8006f44 <_printf_i+0x194>
 8006f56:	4616      	mov	r6, r2
 8006f58:	e7bd      	b.n	8006ed6 <_printf_i+0x126>
 8006f5a:	6833      	ldr	r3, [r6, #0]
 8006f5c:	6825      	ldr	r5, [r4, #0]
 8006f5e:	1d18      	adds	r0, r3, #4
 8006f60:	6961      	ldr	r1, [r4, #20]
 8006f62:	6030      	str	r0, [r6, #0]
 8006f64:	062e      	lsls	r6, r5, #24
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	d501      	bpl.n	8006f6e <_printf_i+0x1be>
 8006f6a:	6019      	str	r1, [r3, #0]
 8006f6c:	e002      	b.n	8006f74 <_printf_i+0x1c4>
 8006f6e:	0668      	lsls	r0, r5, #25
 8006f70:	d5fb      	bpl.n	8006f6a <_printf_i+0x1ba>
 8006f72:	8019      	strh	r1, [r3, #0]
 8006f74:	2300      	movs	r3, #0
 8006f76:	4616      	mov	r6, r2
 8006f78:	6123      	str	r3, [r4, #16]
 8006f7a:	e7bc      	b.n	8006ef6 <_printf_i+0x146>
 8006f7c:	6833      	ldr	r3, [r6, #0]
 8006f7e:	2100      	movs	r1, #0
 8006f80:	1d1a      	adds	r2, r3, #4
 8006f82:	6032      	str	r2, [r6, #0]
 8006f84:	681e      	ldr	r6, [r3, #0]
 8006f86:	6862      	ldr	r2, [r4, #4]
 8006f88:	4630      	mov	r0, r6
 8006f8a:	f000 f859 	bl	8007040 <memchr>
 8006f8e:	b108      	cbz	r0, 8006f94 <_printf_i+0x1e4>
 8006f90:	1b80      	subs	r0, r0, r6
 8006f92:	6060      	str	r0, [r4, #4]
 8006f94:	6863      	ldr	r3, [r4, #4]
 8006f96:	6123      	str	r3, [r4, #16]
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f9e:	e7aa      	b.n	8006ef6 <_printf_i+0x146>
 8006fa0:	4632      	mov	r2, r6
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	4640      	mov	r0, r8
 8006fa6:	6923      	ldr	r3, [r4, #16]
 8006fa8:	47d0      	blx	sl
 8006faa:	3001      	adds	r0, #1
 8006fac:	d0ad      	beq.n	8006f0a <_printf_i+0x15a>
 8006fae:	6823      	ldr	r3, [r4, #0]
 8006fb0:	079b      	lsls	r3, r3, #30
 8006fb2:	d413      	bmi.n	8006fdc <_printf_i+0x22c>
 8006fb4:	68e0      	ldr	r0, [r4, #12]
 8006fb6:	9b03      	ldr	r3, [sp, #12]
 8006fb8:	4298      	cmp	r0, r3
 8006fba:	bfb8      	it	lt
 8006fbc:	4618      	movlt	r0, r3
 8006fbe:	e7a6      	b.n	8006f0e <_printf_i+0x15e>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	4632      	mov	r2, r6
 8006fc4:	4649      	mov	r1, r9
 8006fc6:	4640      	mov	r0, r8
 8006fc8:	47d0      	blx	sl
 8006fca:	3001      	adds	r0, #1
 8006fcc:	d09d      	beq.n	8006f0a <_printf_i+0x15a>
 8006fce:	3501      	adds	r5, #1
 8006fd0:	68e3      	ldr	r3, [r4, #12]
 8006fd2:	9903      	ldr	r1, [sp, #12]
 8006fd4:	1a5b      	subs	r3, r3, r1
 8006fd6:	42ab      	cmp	r3, r5
 8006fd8:	dcf2      	bgt.n	8006fc0 <_printf_i+0x210>
 8006fda:	e7eb      	b.n	8006fb4 <_printf_i+0x204>
 8006fdc:	2500      	movs	r5, #0
 8006fde:	f104 0619 	add.w	r6, r4, #25
 8006fe2:	e7f5      	b.n	8006fd0 <_printf_i+0x220>
 8006fe4:	0800893b 	.word	0x0800893b
 8006fe8:	0800894c 	.word	0x0800894c

08006fec <memmove>:
 8006fec:	4288      	cmp	r0, r1
 8006fee:	b510      	push	{r4, lr}
 8006ff0:	eb01 0402 	add.w	r4, r1, r2
 8006ff4:	d902      	bls.n	8006ffc <memmove+0x10>
 8006ff6:	4284      	cmp	r4, r0
 8006ff8:	4623      	mov	r3, r4
 8006ffa:	d807      	bhi.n	800700c <memmove+0x20>
 8006ffc:	1e43      	subs	r3, r0, #1
 8006ffe:	42a1      	cmp	r1, r4
 8007000:	d008      	beq.n	8007014 <memmove+0x28>
 8007002:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007006:	f803 2f01 	strb.w	r2, [r3, #1]!
 800700a:	e7f8      	b.n	8006ffe <memmove+0x12>
 800700c:	4601      	mov	r1, r0
 800700e:	4402      	add	r2, r0
 8007010:	428a      	cmp	r2, r1
 8007012:	d100      	bne.n	8007016 <memmove+0x2a>
 8007014:	bd10      	pop	{r4, pc}
 8007016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800701a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800701e:	e7f7      	b.n	8007010 <memmove+0x24>

08007020 <_sbrk_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	2300      	movs	r3, #0
 8007024:	4d05      	ldr	r5, [pc, #20]	@ (800703c <_sbrk_r+0x1c>)
 8007026:	4604      	mov	r4, r0
 8007028:	4608      	mov	r0, r1
 800702a:	602b      	str	r3, [r5, #0]
 800702c:	f7fc fc64 	bl	80038f8 <_sbrk>
 8007030:	1c43      	adds	r3, r0, #1
 8007032:	d102      	bne.n	800703a <_sbrk_r+0x1a>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	b103      	cbz	r3, 800703a <_sbrk_r+0x1a>
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	bd38      	pop	{r3, r4, r5, pc}
 800703c:	20003f6c 	.word	0x20003f6c

08007040 <memchr>:
 8007040:	4603      	mov	r3, r0
 8007042:	b510      	push	{r4, lr}
 8007044:	b2c9      	uxtb	r1, r1
 8007046:	4402      	add	r2, r0
 8007048:	4293      	cmp	r3, r2
 800704a:	4618      	mov	r0, r3
 800704c:	d101      	bne.n	8007052 <memchr+0x12>
 800704e:	2000      	movs	r0, #0
 8007050:	e003      	b.n	800705a <memchr+0x1a>
 8007052:	7804      	ldrb	r4, [r0, #0]
 8007054:	3301      	adds	r3, #1
 8007056:	428c      	cmp	r4, r1
 8007058:	d1f6      	bne.n	8007048 <memchr+0x8>
 800705a:	bd10      	pop	{r4, pc}

0800705c <_realloc_r>:
 800705c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007060:	4607      	mov	r7, r0
 8007062:	4614      	mov	r4, r2
 8007064:	460d      	mov	r5, r1
 8007066:	b921      	cbnz	r1, 8007072 <_realloc_r+0x16>
 8007068:	4611      	mov	r1, r2
 800706a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800706e:	f7ff bc49 	b.w	8006904 <_malloc_r>
 8007072:	b92a      	cbnz	r2, 8007080 <_realloc_r+0x24>
 8007074:	f7ff fbdc 	bl	8006830 <_free_r>
 8007078:	4625      	mov	r5, r4
 800707a:	4628      	mov	r0, r5
 800707c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007080:	f000 f81a 	bl	80070b8 <_malloc_usable_size_r>
 8007084:	4284      	cmp	r4, r0
 8007086:	4606      	mov	r6, r0
 8007088:	d802      	bhi.n	8007090 <_realloc_r+0x34>
 800708a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800708e:	d8f4      	bhi.n	800707a <_realloc_r+0x1e>
 8007090:	4621      	mov	r1, r4
 8007092:	4638      	mov	r0, r7
 8007094:	f7ff fc36 	bl	8006904 <_malloc_r>
 8007098:	4680      	mov	r8, r0
 800709a:	b908      	cbnz	r0, 80070a0 <_realloc_r+0x44>
 800709c:	4645      	mov	r5, r8
 800709e:	e7ec      	b.n	800707a <_realloc_r+0x1e>
 80070a0:	42b4      	cmp	r4, r6
 80070a2:	4622      	mov	r2, r4
 80070a4:	4629      	mov	r1, r5
 80070a6:	bf28      	it	cs
 80070a8:	4632      	movcs	r2, r6
 80070aa:	f7ff fbb3 	bl	8006814 <memcpy>
 80070ae:	4629      	mov	r1, r5
 80070b0:	4638      	mov	r0, r7
 80070b2:	f7ff fbbd 	bl	8006830 <_free_r>
 80070b6:	e7f1      	b.n	800709c <_realloc_r+0x40>

080070b8 <_malloc_usable_size_r>:
 80070b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070bc:	1f18      	subs	r0, r3, #4
 80070be:	2b00      	cmp	r3, #0
 80070c0:	bfbc      	itt	lt
 80070c2:	580b      	ldrlt	r3, [r1, r0]
 80070c4:	18c0      	addlt	r0, r0, r3
 80070c6:	4770      	bx	lr

080070c8 <powf>:
 80070c8:	b570      	push	{r4, r5, r6, lr}
 80070ca:	460c      	mov	r4, r1
 80070cc:	4606      	mov	r6, r0
 80070ce:	f000 fa43 	bl	8007558 <__ieee754_powf>
 80070d2:	4621      	mov	r1, r4
 80070d4:	4605      	mov	r5, r0
 80070d6:	4620      	mov	r0, r4
 80070d8:	f7f9 fb1e 	bl	8000718 <__aeabi_fcmpun>
 80070dc:	bb68      	cbnz	r0, 800713a <powf+0x72>
 80070de:	2100      	movs	r1, #0
 80070e0:	4630      	mov	r0, r6
 80070e2:	f7f9 fae7 	bl	80006b4 <__aeabi_fcmpeq>
 80070e6:	b190      	cbz	r0, 800710e <powf+0x46>
 80070e8:	2100      	movs	r1, #0
 80070ea:	4620      	mov	r0, r4
 80070ec:	f7f9 fae2 	bl	80006b4 <__aeabi_fcmpeq>
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d133      	bne.n	800715c <powf+0x94>
 80070f4:	4620      	mov	r0, r4
 80070f6:	f000 f8c1 	bl	800727c <finitef>
 80070fa:	b1f0      	cbz	r0, 800713a <powf+0x72>
 80070fc:	2100      	movs	r1, #0
 80070fe:	4620      	mov	r0, r4
 8007100:	f7f9 fae2 	bl	80006c8 <__aeabi_fcmplt>
 8007104:	b1c8      	cbz	r0, 800713a <powf+0x72>
 8007106:	f7ff fb59 	bl	80067bc <__errno>
 800710a:	2322      	movs	r3, #34	@ 0x22
 800710c:	e014      	b.n	8007138 <powf+0x70>
 800710e:	4628      	mov	r0, r5
 8007110:	f000 f8b4 	bl	800727c <finitef>
 8007114:	b998      	cbnz	r0, 800713e <powf+0x76>
 8007116:	4630      	mov	r0, r6
 8007118:	f000 f8b0 	bl	800727c <finitef>
 800711c:	b178      	cbz	r0, 800713e <powf+0x76>
 800711e:	4620      	mov	r0, r4
 8007120:	f000 f8ac 	bl	800727c <finitef>
 8007124:	b158      	cbz	r0, 800713e <powf+0x76>
 8007126:	4629      	mov	r1, r5
 8007128:	4628      	mov	r0, r5
 800712a:	f7f9 faf5 	bl	8000718 <__aeabi_fcmpun>
 800712e:	2800      	cmp	r0, #0
 8007130:	d0e9      	beq.n	8007106 <powf+0x3e>
 8007132:	f7ff fb43 	bl	80067bc <__errno>
 8007136:	2321      	movs	r3, #33	@ 0x21
 8007138:	6003      	str	r3, [r0, #0]
 800713a:	4628      	mov	r0, r5
 800713c:	bd70      	pop	{r4, r5, r6, pc}
 800713e:	2100      	movs	r1, #0
 8007140:	4628      	mov	r0, r5
 8007142:	f7f9 fab7 	bl	80006b4 <__aeabi_fcmpeq>
 8007146:	2800      	cmp	r0, #0
 8007148:	d0f7      	beq.n	800713a <powf+0x72>
 800714a:	4630      	mov	r0, r6
 800714c:	f000 f896 	bl	800727c <finitef>
 8007150:	2800      	cmp	r0, #0
 8007152:	d0f2      	beq.n	800713a <powf+0x72>
 8007154:	4620      	mov	r0, r4
 8007156:	f000 f891 	bl	800727c <finitef>
 800715a:	e7d3      	b.n	8007104 <powf+0x3c>
 800715c:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8007160:	e7eb      	b.n	800713a <powf+0x72>

08007162 <sqrtf>:
 8007162:	b538      	push	{r3, r4, r5, lr}
 8007164:	4605      	mov	r5, r0
 8007166:	f000 f891 	bl	800728c <__ieee754_sqrtf>
 800716a:	4629      	mov	r1, r5
 800716c:	4604      	mov	r4, r0
 800716e:	4628      	mov	r0, r5
 8007170:	f7f9 fad2 	bl	8000718 <__aeabi_fcmpun>
 8007174:	b968      	cbnz	r0, 8007192 <sqrtf+0x30>
 8007176:	2100      	movs	r1, #0
 8007178:	4628      	mov	r0, r5
 800717a:	f7f9 faa5 	bl	80006c8 <__aeabi_fcmplt>
 800717e:	b140      	cbz	r0, 8007192 <sqrtf+0x30>
 8007180:	f7ff fb1c 	bl	80067bc <__errno>
 8007184:	2321      	movs	r3, #33	@ 0x21
 8007186:	2100      	movs	r1, #0
 8007188:	6003      	str	r3, [r0, #0]
 800718a:	4608      	mov	r0, r1
 800718c:	f7f9 f9b2 	bl	80004f4 <__aeabi_fdiv>
 8007190:	4604      	mov	r4, r0
 8007192:	4620      	mov	r0, r4
 8007194:	bd38      	pop	{r3, r4, r5, pc}
	...

08007198 <cosf>:
 8007198:	b507      	push	{r0, r1, r2, lr}
 800719a:	4a1a      	ldr	r2, [pc, #104]	@ (8007204 <cosf+0x6c>)
 800719c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80071a0:	4293      	cmp	r3, r2
 80071a2:	4601      	mov	r1, r0
 80071a4:	d805      	bhi.n	80071b2 <cosf+0x1a>
 80071a6:	2100      	movs	r1, #0
 80071a8:	b003      	add	sp, #12
 80071aa:	f85d eb04 	ldr.w	lr, [sp], #4
 80071ae:	f000 b8dd 	b.w	800736c <__kernel_cosf>
 80071b2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80071b6:	d304      	bcc.n	80071c2 <cosf+0x2a>
 80071b8:	f7f8 ffde 	bl	8000178 <__aeabi_fsub>
 80071bc:	b003      	add	sp, #12
 80071be:	f85d fb04 	ldr.w	pc, [sp], #4
 80071c2:	4669      	mov	r1, sp
 80071c4:	f000 fd28 	bl	8007c18 <__ieee754_rem_pio2f>
 80071c8:	f000 0203 	and.w	r2, r0, #3
 80071cc:	2a01      	cmp	r2, #1
 80071ce:	d007      	beq.n	80071e0 <cosf+0x48>
 80071d0:	2a02      	cmp	r2, #2
 80071d2:	d00c      	beq.n	80071ee <cosf+0x56>
 80071d4:	b982      	cbnz	r2, 80071f8 <cosf+0x60>
 80071d6:	9901      	ldr	r1, [sp, #4]
 80071d8:	9800      	ldr	r0, [sp, #0]
 80071da:	f000 f8c7 	bl	800736c <__kernel_cosf>
 80071de:	e7ed      	b.n	80071bc <cosf+0x24>
 80071e0:	9901      	ldr	r1, [sp, #4]
 80071e2:	9800      	ldr	r0, [sp, #0]
 80071e4:	f000 f942 	bl	800746c <__kernel_sinf>
 80071e8:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80071ec:	e7e6      	b.n	80071bc <cosf+0x24>
 80071ee:	9901      	ldr	r1, [sp, #4]
 80071f0:	9800      	ldr	r0, [sp, #0]
 80071f2:	f000 f8bb 	bl	800736c <__kernel_cosf>
 80071f6:	e7f7      	b.n	80071e8 <cosf+0x50>
 80071f8:	2201      	movs	r2, #1
 80071fa:	9901      	ldr	r1, [sp, #4]
 80071fc:	9800      	ldr	r0, [sp, #0]
 80071fe:	f000 f935 	bl	800746c <__kernel_sinf>
 8007202:	e7db      	b.n	80071bc <cosf+0x24>
 8007204:	3f490fd8 	.word	0x3f490fd8

08007208 <sinf>:
 8007208:	b507      	push	{r0, r1, r2, lr}
 800720a:	4a1b      	ldr	r2, [pc, #108]	@ (8007278 <sinf+0x70>)
 800720c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8007210:	4293      	cmp	r3, r2
 8007212:	4601      	mov	r1, r0
 8007214:	d806      	bhi.n	8007224 <sinf+0x1c>
 8007216:	2200      	movs	r2, #0
 8007218:	2100      	movs	r1, #0
 800721a:	b003      	add	sp, #12
 800721c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007220:	f000 b924 	b.w	800746c <__kernel_sinf>
 8007224:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007228:	d304      	bcc.n	8007234 <sinf+0x2c>
 800722a:	f7f8 ffa5 	bl	8000178 <__aeabi_fsub>
 800722e:	b003      	add	sp, #12
 8007230:	f85d fb04 	ldr.w	pc, [sp], #4
 8007234:	4669      	mov	r1, sp
 8007236:	f000 fcef 	bl	8007c18 <__ieee754_rem_pio2f>
 800723a:	f000 0003 	and.w	r0, r0, #3
 800723e:	2801      	cmp	r0, #1
 8007240:	d008      	beq.n	8007254 <sinf+0x4c>
 8007242:	2802      	cmp	r0, #2
 8007244:	d00b      	beq.n	800725e <sinf+0x56>
 8007246:	b990      	cbnz	r0, 800726e <sinf+0x66>
 8007248:	2201      	movs	r2, #1
 800724a:	9901      	ldr	r1, [sp, #4]
 800724c:	9800      	ldr	r0, [sp, #0]
 800724e:	f000 f90d 	bl	800746c <__kernel_sinf>
 8007252:	e7ec      	b.n	800722e <sinf+0x26>
 8007254:	9901      	ldr	r1, [sp, #4]
 8007256:	9800      	ldr	r0, [sp, #0]
 8007258:	f000 f888 	bl	800736c <__kernel_cosf>
 800725c:	e7e7      	b.n	800722e <sinf+0x26>
 800725e:	2201      	movs	r2, #1
 8007260:	9901      	ldr	r1, [sp, #4]
 8007262:	9800      	ldr	r0, [sp, #0]
 8007264:	f000 f902 	bl	800746c <__kernel_sinf>
 8007268:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800726c:	e7df      	b.n	800722e <sinf+0x26>
 800726e:	9901      	ldr	r1, [sp, #4]
 8007270:	9800      	ldr	r0, [sp, #0]
 8007272:	f000 f87b 	bl	800736c <__kernel_cosf>
 8007276:	e7f7      	b.n	8007268 <sinf+0x60>
 8007278:	3f490fd8 	.word	0x3f490fd8

0800727c <finitef>:
 800727c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007280:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8007284:	bfac      	ite	ge
 8007286:	2000      	movge	r0, #0
 8007288:	2001      	movlt	r0, #1
 800728a:	4770      	bx	lr

0800728c <__ieee754_sqrtf>:
 800728c:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8007290:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007298:	4603      	mov	r3, r0
 800729a:	4604      	mov	r4, r0
 800729c:	d30a      	bcc.n	80072b4 <__ieee754_sqrtf+0x28>
 800729e:	4601      	mov	r1, r0
 80072a0:	f7f9 f874 	bl	800038c <__aeabi_fmul>
 80072a4:	4601      	mov	r1, r0
 80072a6:	4620      	mov	r0, r4
 80072a8:	f7f8 ff68 	bl	800017c <__addsf3>
 80072ac:	4604      	mov	r4, r0
 80072ae:	4620      	mov	r0, r4
 80072b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072b4:	2a00      	cmp	r2, #0
 80072b6:	d0fa      	beq.n	80072ae <__ieee754_sqrtf+0x22>
 80072b8:	2800      	cmp	r0, #0
 80072ba:	da06      	bge.n	80072ca <__ieee754_sqrtf+0x3e>
 80072bc:	4601      	mov	r1, r0
 80072be:	f7f8 ff5b 	bl	8000178 <__aeabi_fsub>
 80072c2:	4601      	mov	r1, r0
 80072c4:	f7f9 f916 	bl	80004f4 <__aeabi_fdiv>
 80072c8:	e7f0      	b.n	80072ac <__ieee754_sqrtf+0x20>
 80072ca:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 80072ce:	d03c      	beq.n	800734a <__ieee754_sqrtf+0xbe>
 80072d0:	15c2      	asrs	r2, r0, #23
 80072d2:	2400      	movs	r4, #0
 80072d4:	2019      	movs	r0, #25
 80072d6:	4626      	mov	r6, r4
 80072d8:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80072dc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80072e0:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 80072e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80072e8:	07d2      	lsls	r2, r2, #31
 80072ea:	bf58      	it	pl
 80072ec:	005b      	lslpl	r3, r3, #1
 80072ee:	106d      	asrs	r5, r5, #1
 80072f0:	005b      	lsls	r3, r3, #1
 80072f2:	1872      	adds	r2, r6, r1
 80072f4:	429a      	cmp	r2, r3
 80072f6:	bfcf      	iteee	gt
 80072f8:	461a      	movgt	r2, r3
 80072fa:	1856      	addle	r6, r2, r1
 80072fc:	1864      	addle	r4, r4, r1
 80072fe:	1a9a      	suble	r2, r3, r2
 8007300:	3801      	subs	r0, #1
 8007302:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8007306:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800730a:	d1f2      	bne.n	80072f2 <__ieee754_sqrtf+0x66>
 800730c:	b1ba      	cbz	r2, 800733e <__ieee754_sqrtf+0xb2>
 800730e:	4e15      	ldr	r6, [pc, #84]	@ (8007364 <__ieee754_sqrtf+0xd8>)
 8007310:	4f15      	ldr	r7, [pc, #84]	@ (8007368 <__ieee754_sqrtf+0xdc>)
 8007312:	6830      	ldr	r0, [r6, #0]
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	f7f8 ff2f 	bl	8000178 <__aeabi_fsub>
 800731a:	f8d6 8000 	ldr.w	r8, [r6]
 800731e:	4601      	mov	r1, r0
 8007320:	4640      	mov	r0, r8
 8007322:	f7f9 f9db 	bl	80006dc <__aeabi_fcmple>
 8007326:	b150      	cbz	r0, 800733e <__ieee754_sqrtf+0xb2>
 8007328:	6830      	ldr	r0, [r6, #0]
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	f7f8 ff26 	bl	800017c <__addsf3>
 8007330:	6836      	ldr	r6, [r6, #0]
 8007332:	4601      	mov	r1, r0
 8007334:	4630      	mov	r0, r6
 8007336:	f7f9 f9c7 	bl	80006c8 <__aeabi_fcmplt>
 800733a:	b170      	cbz	r0, 800735a <__ieee754_sqrtf+0xce>
 800733c:	3402      	adds	r4, #2
 800733e:	1064      	asrs	r4, r4, #1
 8007340:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8007344:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8007348:	e7b1      	b.n	80072ae <__ieee754_sqrtf+0x22>
 800734a:	005b      	lsls	r3, r3, #1
 800734c:	0218      	lsls	r0, r3, #8
 800734e:	460a      	mov	r2, r1
 8007350:	f101 0101 	add.w	r1, r1, #1
 8007354:	d5f9      	bpl.n	800734a <__ieee754_sqrtf+0xbe>
 8007356:	4252      	negs	r2, r2
 8007358:	e7bb      	b.n	80072d2 <__ieee754_sqrtf+0x46>
 800735a:	3401      	adds	r4, #1
 800735c:	f024 0401 	bic.w	r4, r4, #1
 8007360:	e7ed      	b.n	800733e <__ieee754_sqrtf+0xb2>
 8007362:	bf00      	nop
 8007364:	08008964 	.word	0x08008964
 8007368:	08008960 	.word	0x08008960

0800736c <__kernel_cosf>:
 800736c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007370:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8007374:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 8007378:	4606      	mov	r6, r0
 800737a:	4688      	mov	r8, r1
 800737c:	d203      	bcs.n	8007386 <__kernel_cosf+0x1a>
 800737e:	f7f9 f9e1 	bl	8000744 <__aeabi_f2iz>
 8007382:	2800      	cmp	r0, #0
 8007384:	d05c      	beq.n	8007440 <__kernel_cosf+0xd4>
 8007386:	4631      	mov	r1, r6
 8007388:	4630      	mov	r0, r6
 800738a:	f7f8 ffff 	bl	800038c <__aeabi_fmul>
 800738e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8007392:	4604      	mov	r4, r0
 8007394:	f7f8 fffa 	bl	800038c <__aeabi_fmul>
 8007398:	492b      	ldr	r1, [pc, #172]	@ (8007448 <__kernel_cosf+0xdc>)
 800739a:	4607      	mov	r7, r0
 800739c:	4620      	mov	r0, r4
 800739e:	f7f8 fff5 	bl	800038c <__aeabi_fmul>
 80073a2:	492a      	ldr	r1, [pc, #168]	@ (800744c <__kernel_cosf+0xe0>)
 80073a4:	f7f8 feea 	bl	800017c <__addsf3>
 80073a8:	4621      	mov	r1, r4
 80073aa:	f7f8 ffef 	bl	800038c <__aeabi_fmul>
 80073ae:	4928      	ldr	r1, [pc, #160]	@ (8007450 <__kernel_cosf+0xe4>)
 80073b0:	f7f8 fee2 	bl	8000178 <__aeabi_fsub>
 80073b4:	4621      	mov	r1, r4
 80073b6:	f7f8 ffe9 	bl	800038c <__aeabi_fmul>
 80073ba:	4926      	ldr	r1, [pc, #152]	@ (8007454 <__kernel_cosf+0xe8>)
 80073bc:	f7f8 fede 	bl	800017c <__addsf3>
 80073c0:	4621      	mov	r1, r4
 80073c2:	f7f8 ffe3 	bl	800038c <__aeabi_fmul>
 80073c6:	4924      	ldr	r1, [pc, #144]	@ (8007458 <__kernel_cosf+0xec>)
 80073c8:	f7f8 fed6 	bl	8000178 <__aeabi_fsub>
 80073cc:	4621      	mov	r1, r4
 80073ce:	f7f8 ffdd 	bl	800038c <__aeabi_fmul>
 80073d2:	4922      	ldr	r1, [pc, #136]	@ (800745c <__kernel_cosf+0xf0>)
 80073d4:	f7f8 fed2 	bl	800017c <__addsf3>
 80073d8:	4621      	mov	r1, r4
 80073da:	f7f8 ffd7 	bl	800038c <__aeabi_fmul>
 80073de:	4621      	mov	r1, r4
 80073e0:	f7f8 ffd4 	bl	800038c <__aeabi_fmul>
 80073e4:	4641      	mov	r1, r8
 80073e6:	4604      	mov	r4, r0
 80073e8:	4630      	mov	r0, r6
 80073ea:	f7f8 ffcf 	bl	800038c <__aeabi_fmul>
 80073ee:	4601      	mov	r1, r0
 80073f0:	4620      	mov	r0, r4
 80073f2:	f7f8 fec1 	bl	8000178 <__aeabi_fsub>
 80073f6:	4b1a      	ldr	r3, [pc, #104]	@ (8007460 <__kernel_cosf+0xf4>)
 80073f8:	4604      	mov	r4, r0
 80073fa:	429d      	cmp	r5, r3
 80073fc:	d80a      	bhi.n	8007414 <__kernel_cosf+0xa8>
 80073fe:	4601      	mov	r1, r0
 8007400:	4638      	mov	r0, r7
 8007402:	f7f8 feb9 	bl	8000178 <__aeabi_fsub>
 8007406:	4601      	mov	r1, r0
 8007408:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800740c:	f7f8 feb4 	bl	8000178 <__aeabi_fsub>
 8007410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007414:	4b13      	ldr	r3, [pc, #76]	@ (8007464 <__kernel_cosf+0xf8>)
 8007416:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800741a:	429d      	cmp	r5, r3
 800741c:	bf8c      	ite	hi
 800741e:	4d12      	ldrhi	r5, [pc, #72]	@ (8007468 <__kernel_cosf+0xfc>)
 8007420:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 8007424:	4629      	mov	r1, r5
 8007426:	f7f8 fea7 	bl	8000178 <__aeabi_fsub>
 800742a:	4629      	mov	r1, r5
 800742c:	4606      	mov	r6, r0
 800742e:	4638      	mov	r0, r7
 8007430:	f7f8 fea2 	bl	8000178 <__aeabi_fsub>
 8007434:	4621      	mov	r1, r4
 8007436:	f7f8 fe9f 	bl	8000178 <__aeabi_fsub>
 800743a:	4601      	mov	r1, r0
 800743c:	4630      	mov	r0, r6
 800743e:	e7e5      	b.n	800740c <__kernel_cosf+0xa0>
 8007440:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007444:	e7e4      	b.n	8007410 <__kernel_cosf+0xa4>
 8007446:	bf00      	nop
 8007448:	ad47d74e 	.word	0xad47d74e
 800744c:	310f74f6 	.word	0x310f74f6
 8007450:	3493f27c 	.word	0x3493f27c
 8007454:	37d00d01 	.word	0x37d00d01
 8007458:	3ab60b61 	.word	0x3ab60b61
 800745c:	3d2aaaab 	.word	0x3d2aaaab
 8007460:	3e999999 	.word	0x3e999999
 8007464:	3f480000 	.word	0x3f480000
 8007468:	3e900000 	.word	0x3e900000

0800746c <__kernel_sinf>:
 800746c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007470:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8007474:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8007478:	4604      	mov	r4, r0
 800747a:	460f      	mov	r7, r1
 800747c:	4691      	mov	r9, r2
 800747e:	d203      	bcs.n	8007488 <__kernel_sinf+0x1c>
 8007480:	f7f9 f960 	bl	8000744 <__aeabi_f2iz>
 8007484:	2800      	cmp	r0, #0
 8007486:	d035      	beq.n	80074f4 <__kernel_sinf+0x88>
 8007488:	4621      	mov	r1, r4
 800748a:	4620      	mov	r0, r4
 800748c:	f7f8 ff7e 	bl	800038c <__aeabi_fmul>
 8007490:	4605      	mov	r5, r0
 8007492:	4601      	mov	r1, r0
 8007494:	4620      	mov	r0, r4
 8007496:	f7f8 ff79 	bl	800038c <__aeabi_fmul>
 800749a:	4929      	ldr	r1, [pc, #164]	@ (8007540 <__kernel_sinf+0xd4>)
 800749c:	4606      	mov	r6, r0
 800749e:	4628      	mov	r0, r5
 80074a0:	f7f8 ff74 	bl	800038c <__aeabi_fmul>
 80074a4:	4927      	ldr	r1, [pc, #156]	@ (8007544 <__kernel_sinf+0xd8>)
 80074a6:	f7f8 fe67 	bl	8000178 <__aeabi_fsub>
 80074aa:	4629      	mov	r1, r5
 80074ac:	f7f8 ff6e 	bl	800038c <__aeabi_fmul>
 80074b0:	4925      	ldr	r1, [pc, #148]	@ (8007548 <__kernel_sinf+0xdc>)
 80074b2:	f7f8 fe63 	bl	800017c <__addsf3>
 80074b6:	4629      	mov	r1, r5
 80074b8:	f7f8 ff68 	bl	800038c <__aeabi_fmul>
 80074bc:	4923      	ldr	r1, [pc, #140]	@ (800754c <__kernel_sinf+0xe0>)
 80074be:	f7f8 fe5b 	bl	8000178 <__aeabi_fsub>
 80074c2:	4629      	mov	r1, r5
 80074c4:	f7f8 ff62 	bl	800038c <__aeabi_fmul>
 80074c8:	4921      	ldr	r1, [pc, #132]	@ (8007550 <__kernel_sinf+0xe4>)
 80074ca:	f7f8 fe57 	bl	800017c <__addsf3>
 80074ce:	4680      	mov	r8, r0
 80074d0:	f1b9 0f00 	cmp.w	r9, #0
 80074d4:	d111      	bne.n	80074fa <__kernel_sinf+0x8e>
 80074d6:	4601      	mov	r1, r0
 80074d8:	4628      	mov	r0, r5
 80074da:	f7f8 ff57 	bl	800038c <__aeabi_fmul>
 80074de:	491d      	ldr	r1, [pc, #116]	@ (8007554 <__kernel_sinf+0xe8>)
 80074e0:	f7f8 fe4a 	bl	8000178 <__aeabi_fsub>
 80074e4:	4631      	mov	r1, r6
 80074e6:	f7f8 ff51 	bl	800038c <__aeabi_fmul>
 80074ea:	4601      	mov	r1, r0
 80074ec:	4620      	mov	r0, r4
 80074ee:	f7f8 fe45 	bl	800017c <__addsf3>
 80074f2:	4604      	mov	r4, r0
 80074f4:	4620      	mov	r0, r4
 80074f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074fa:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80074fe:	4638      	mov	r0, r7
 8007500:	f7f8 ff44 	bl	800038c <__aeabi_fmul>
 8007504:	4641      	mov	r1, r8
 8007506:	4681      	mov	r9, r0
 8007508:	4630      	mov	r0, r6
 800750a:	f7f8 ff3f 	bl	800038c <__aeabi_fmul>
 800750e:	4601      	mov	r1, r0
 8007510:	4648      	mov	r0, r9
 8007512:	f7f8 fe31 	bl	8000178 <__aeabi_fsub>
 8007516:	4629      	mov	r1, r5
 8007518:	f7f8 ff38 	bl	800038c <__aeabi_fmul>
 800751c:	4639      	mov	r1, r7
 800751e:	f7f8 fe2b 	bl	8000178 <__aeabi_fsub>
 8007522:	490c      	ldr	r1, [pc, #48]	@ (8007554 <__kernel_sinf+0xe8>)
 8007524:	4605      	mov	r5, r0
 8007526:	4630      	mov	r0, r6
 8007528:	f7f8 ff30 	bl	800038c <__aeabi_fmul>
 800752c:	4601      	mov	r1, r0
 800752e:	4628      	mov	r0, r5
 8007530:	f7f8 fe24 	bl	800017c <__addsf3>
 8007534:	4601      	mov	r1, r0
 8007536:	4620      	mov	r0, r4
 8007538:	f7f8 fe1e 	bl	8000178 <__aeabi_fsub>
 800753c:	e7d9      	b.n	80074f2 <__kernel_sinf+0x86>
 800753e:	bf00      	nop
 8007540:	2f2ec9d3 	.word	0x2f2ec9d3
 8007544:	32d72f34 	.word	0x32d72f34
 8007548:	3638ef1b 	.word	0x3638ef1b
 800754c:	39500d01 	.word	0x39500d01
 8007550:	3c088889 	.word	0x3c088889
 8007554:	3e2aaaab 	.word	0x3e2aaaab

08007558 <__ieee754_powf>:
 8007558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755c:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 8007560:	4681      	mov	r9, r0
 8007562:	460f      	mov	r7, r1
 8007564:	4606      	mov	r6, r0
 8007566:	460c      	mov	r4, r1
 8007568:	b087      	sub	sp, #28
 800756a:	d10c      	bne.n	8007586 <__ieee754_powf+0x2e>
 800756c:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 8007570:	0076      	lsls	r6, r6, #1
 8007572:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8007576:	f240 8310 	bls.w	8007b9a <__ieee754_powf+0x642>
 800757a:	4639      	mov	r1, r7
 800757c:	4648      	mov	r0, r9
 800757e:	f7f8 fdfd 	bl	800017c <__addsf3>
 8007582:	4601      	mov	r1, r0
 8007584:	e043      	b.n	800760e <__ieee754_powf+0xb6>
 8007586:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800758a:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800758e:	d802      	bhi.n	8007596 <__ieee754_powf+0x3e>
 8007590:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8007594:	d908      	bls.n	80075a8 <__ieee754_powf+0x50>
 8007596:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800759a:	d1ee      	bne.n	800757a <__ieee754_powf+0x22>
 800759c:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80075a0:	0064      	lsls	r4, r4, #1
 80075a2:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80075a6:	e7e6      	b.n	8007576 <__ieee754_powf+0x1e>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	da1f      	bge.n	80075ec <__ieee754_powf+0x94>
 80075ac:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 80075b0:	f080 82f8 	bcs.w	8007ba4 <__ieee754_powf+0x64c>
 80075b4:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 80075b8:	d32f      	bcc.n	800761a <__ieee754_powf+0xc2>
 80075ba:	ea4f 53eb 	mov.w	r3, fp, asr #23
 80075be:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80075c2:	fa4b f503 	asr.w	r5, fp, r3
 80075c6:	fa05 f303 	lsl.w	r3, r5, r3
 80075ca:	455b      	cmp	r3, fp
 80075cc:	d123      	bne.n	8007616 <__ieee754_powf+0xbe>
 80075ce:	f005 0501 	and.w	r5, r5, #1
 80075d2:	f1c5 0502 	rsb	r5, r5, #2
 80075d6:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 80075da:	d11f      	bne.n	800761c <__ieee754_powf+0xc4>
 80075dc:	2c00      	cmp	r4, #0
 80075de:	4649      	mov	r1, r9
 80075e0:	da15      	bge.n	800760e <__ieee754_powf+0xb6>
 80075e2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80075e6:	f7f8 ff85 	bl	80004f4 <__aeabi_fdiv>
 80075ea:	e7ca      	b.n	8007582 <__ieee754_powf+0x2a>
 80075ec:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 80075f0:	d111      	bne.n	8007616 <__ieee754_powf+0xbe>
 80075f2:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80075f6:	f000 82d0 	beq.w	8007b9a <__ieee754_powf+0x642>
 80075fa:	d904      	bls.n	8007606 <__ieee754_powf+0xae>
 80075fc:	2c00      	cmp	r4, #0
 80075fe:	f280 82cf 	bge.w	8007ba0 <__ieee754_powf+0x648>
 8007602:	2100      	movs	r1, #0
 8007604:	e003      	b.n	800760e <__ieee754_powf+0xb6>
 8007606:	2c00      	cmp	r4, #0
 8007608:	dafb      	bge.n	8007602 <__ieee754_powf+0xaa>
 800760a:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800760e:	4608      	mov	r0, r1
 8007610:	b007      	add	sp, #28
 8007612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007616:	2500      	movs	r5, #0
 8007618:	e7dd      	b.n	80075d6 <__ieee754_powf+0x7e>
 800761a:	2500      	movs	r5, #0
 800761c:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8007620:	d104      	bne.n	800762c <__ieee754_powf+0xd4>
 8007622:	4649      	mov	r1, r9
 8007624:	4648      	mov	r0, r9
 8007626:	f7f8 feb1 	bl	800038c <__aeabi_fmul>
 800762a:	e7aa      	b.n	8007582 <__ieee754_powf+0x2a>
 800762c:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8007630:	f040 82bd 	bne.w	8007bae <__ieee754_powf+0x656>
 8007634:	2e00      	cmp	r6, #0
 8007636:	f2c0 82ba 	blt.w	8007bae <__ieee754_powf+0x656>
 800763a:	4648      	mov	r0, r9
 800763c:	b007      	add	sp, #28
 800763e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007642:	f7ff be23 	b.w	800728c <__ieee754_sqrtf>
 8007646:	2d01      	cmp	r5, #1
 8007648:	d1e1      	bne.n	800760e <__ieee754_powf+0xb6>
 800764a:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800764e:	e798      	b.n	8007582 <__ieee754_powf+0x2a>
 8007650:	0ff3      	lsrs	r3, r6, #31
 8007652:	3b01      	subs	r3, #1
 8007654:	9303      	str	r3, [sp, #12]
 8007656:	432b      	orrs	r3, r5
 8007658:	d101      	bne.n	800765e <__ieee754_powf+0x106>
 800765a:	4649      	mov	r1, r9
 800765c:	e2c5      	b.n	8007bea <__ieee754_powf+0x692>
 800765e:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 8007662:	f240 809b 	bls.w	800779c <__ieee754_powf+0x244>
 8007666:	4b46      	ldr	r3, [pc, #280]	@ (8007780 <__ieee754_powf+0x228>)
 8007668:	4598      	cmp	r8, r3
 800766a:	d807      	bhi.n	800767c <__ieee754_powf+0x124>
 800766c:	2c00      	cmp	r4, #0
 800766e:	da0a      	bge.n	8007686 <__ieee754_powf+0x12e>
 8007670:	2000      	movs	r0, #0
 8007672:	b007      	add	sp, #28
 8007674:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007678:	f000 bc9d 	b.w	8007fb6 <__math_oflowf>
 800767c:	4b41      	ldr	r3, [pc, #260]	@ (8007784 <__ieee754_powf+0x22c>)
 800767e:	4598      	cmp	r8, r3
 8007680:	d907      	bls.n	8007692 <__ieee754_powf+0x13a>
 8007682:	2c00      	cmp	r4, #0
 8007684:	dcf4      	bgt.n	8007670 <__ieee754_powf+0x118>
 8007686:	2000      	movs	r0, #0
 8007688:	b007      	add	sp, #28
 800768a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768e:	f000 bc8e 	b.w	8007fae <__math_uflowf>
 8007692:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007696:	f7f8 fd6f 	bl	8000178 <__aeabi_fsub>
 800769a:	493b      	ldr	r1, [pc, #236]	@ (8007788 <__ieee754_powf+0x230>)
 800769c:	4606      	mov	r6, r0
 800769e:	f7f8 fe75 	bl	800038c <__aeabi_fmul>
 80076a2:	493a      	ldr	r1, [pc, #232]	@ (800778c <__ieee754_powf+0x234>)
 80076a4:	4680      	mov	r8, r0
 80076a6:	4630      	mov	r0, r6
 80076a8:	f7f8 fe70 	bl	800038c <__aeabi_fmul>
 80076ac:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 80076b0:	4681      	mov	r9, r0
 80076b2:	4630      	mov	r0, r6
 80076b4:	f7f8 fe6a 	bl	800038c <__aeabi_fmul>
 80076b8:	4601      	mov	r1, r0
 80076ba:	4835      	ldr	r0, [pc, #212]	@ (8007790 <__ieee754_powf+0x238>)
 80076bc:	f7f8 fd5c 	bl	8000178 <__aeabi_fsub>
 80076c0:	4631      	mov	r1, r6
 80076c2:	f7f8 fe63 	bl	800038c <__aeabi_fmul>
 80076c6:	4601      	mov	r1, r0
 80076c8:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 80076cc:	f7f8 fd54 	bl	8000178 <__aeabi_fsub>
 80076d0:	4631      	mov	r1, r6
 80076d2:	4682      	mov	sl, r0
 80076d4:	4630      	mov	r0, r6
 80076d6:	f7f8 fe59 	bl	800038c <__aeabi_fmul>
 80076da:	4601      	mov	r1, r0
 80076dc:	4650      	mov	r0, sl
 80076de:	f7f8 fe55 	bl	800038c <__aeabi_fmul>
 80076e2:	492c      	ldr	r1, [pc, #176]	@ (8007794 <__ieee754_powf+0x23c>)
 80076e4:	f7f8 fe52 	bl	800038c <__aeabi_fmul>
 80076e8:	4601      	mov	r1, r0
 80076ea:	4648      	mov	r0, r9
 80076ec:	f7f8 fd44 	bl	8000178 <__aeabi_fsub>
 80076f0:	4601      	mov	r1, r0
 80076f2:	4606      	mov	r6, r0
 80076f4:	4640      	mov	r0, r8
 80076f6:	f7f8 fd41 	bl	800017c <__addsf3>
 80076fa:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 80076fe:	f02b 0b0f 	bic.w	fp, fp, #15
 8007702:	4641      	mov	r1, r8
 8007704:	4658      	mov	r0, fp
 8007706:	f7f8 fd37 	bl	8000178 <__aeabi_fsub>
 800770a:	4601      	mov	r1, r0
 800770c:	4630      	mov	r0, r6
 800770e:	f7f8 fd33 	bl	8000178 <__aeabi_fsub>
 8007712:	9b03      	ldr	r3, [sp, #12]
 8007714:	3d01      	subs	r5, #1
 8007716:	f36f 040b 	bfc	r4, #0, #12
 800771a:	431d      	orrs	r5, r3
 800771c:	4606      	mov	r6, r0
 800771e:	4621      	mov	r1, r4
 8007720:	4638      	mov	r0, r7
 8007722:	bf14      	ite	ne
 8007724:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 8007728:	4d1b      	ldreq	r5, [pc, #108]	@ (8007798 <__ieee754_powf+0x240>)
 800772a:	f7f8 fd25 	bl	8000178 <__aeabi_fsub>
 800772e:	4659      	mov	r1, fp
 8007730:	f7f8 fe2c 	bl	800038c <__aeabi_fmul>
 8007734:	4639      	mov	r1, r7
 8007736:	4680      	mov	r8, r0
 8007738:	4630      	mov	r0, r6
 800773a:	f7f8 fe27 	bl	800038c <__aeabi_fmul>
 800773e:	4601      	mov	r1, r0
 8007740:	4640      	mov	r0, r8
 8007742:	f7f8 fd1b 	bl	800017c <__addsf3>
 8007746:	4621      	mov	r1, r4
 8007748:	4606      	mov	r6, r0
 800774a:	4658      	mov	r0, fp
 800774c:	f7f8 fe1e 	bl	800038c <__aeabi_fmul>
 8007750:	4601      	mov	r1, r0
 8007752:	4607      	mov	r7, r0
 8007754:	4630      	mov	r0, r6
 8007756:	f7f8 fd11 	bl	800017c <__addsf3>
 800775a:	2800      	cmp	r0, #0
 800775c:	4604      	mov	r4, r0
 800775e:	4680      	mov	r8, r0
 8007760:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8007764:	f340 813f 	ble.w	80079e6 <__ieee754_powf+0x48e>
 8007768:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800776c:	f240 8128 	bls.w	80079c0 <__ieee754_powf+0x468>
 8007770:	2100      	movs	r1, #0
 8007772:	4628      	mov	r0, r5
 8007774:	f7f8 ffa8 	bl	80006c8 <__aeabi_fcmplt>
 8007778:	3800      	subs	r0, #0
 800777a:	bf18      	it	ne
 800777c:	2001      	movne	r0, #1
 800777e:	e778      	b.n	8007672 <__ieee754_powf+0x11a>
 8007780:	3f7ffff3 	.word	0x3f7ffff3
 8007784:	3f800007 	.word	0x3f800007
 8007788:	3fb8aa00 	.word	0x3fb8aa00
 800778c:	36eca570 	.word	0x36eca570
 8007790:	3eaaaaab 	.word	0x3eaaaaab
 8007794:	3fb8aa3b 	.word	0x3fb8aa3b
 8007798:	bf800000 	.word	0xbf800000
 800779c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80077a0:	f040 810a 	bne.w	80079b8 <__ieee754_powf+0x460>
 80077a4:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 80077a8:	f7f8 fdf0 	bl	800038c <__aeabi_fmul>
 80077ac:	f06f 0217 	mvn.w	r2, #23
 80077b0:	4682      	mov	sl, r0
 80077b2:	ea4f 53ea 	mov.w	r3, sl, asr #23
 80077b6:	3b7f      	subs	r3, #127	@ 0x7f
 80077b8:	441a      	add	r2, r3
 80077ba:	4b95      	ldr	r3, [pc, #596]	@ (8007a10 <__ieee754_powf+0x4b8>)
 80077bc:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 80077c0:	459a      	cmp	sl, r3
 80077c2:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 80077c6:	dd06      	ble.n	80077d6 <__ieee754_powf+0x27e>
 80077c8:	4b92      	ldr	r3, [pc, #584]	@ (8007a14 <__ieee754_powf+0x4bc>)
 80077ca:	459a      	cmp	sl, r3
 80077cc:	f340 80f6 	ble.w	80079bc <__ieee754_powf+0x464>
 80077d0:	3201      	adds	r2, #1
 80077d2:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 80077d6:	2300      	movs	r3, #0
 80077d8:	9301      	str	r3, [sp, #4]
 80077da:	9205      	str	r2, [sp, #20]
 80077dc:	4b8e      	ldr	r3, [pc, #568]	@ (8007a18 <__ieee754_powf+0x4c0>)
 80077de:	9a01      	ldr	r2, [sp, #4]
 80077e0:	4630      	mov	r0, r6
 80077e2:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 80077e6:	46b2      	mov	sl, r6
 80077e8:	4659      	mov	r1, fp
 80077ea:	f7f8 fcc5 	bl	8000178 <__aeabi_fsub>
 80077ee:	4631      	mov	r1, r6
 80077f0:	4681      	mov	r9, r0
 80077f2:	4658      	mov	r0, fp
 80077f4:	f7f8 fcc2 	bl	800017c <__addsf3>
 80077f8:	4601      	mov	r1, r0
 80077fa:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80077fe:	f7f8 fe79 	bl	80004f4 <__aeabi_fdiv>
 8007802:	4601      	mov	r1, r0
 8007804:	9004      	str	r0, [sp, #16]
 8007806:	4648      	mov	r0, r9
 8007808:	f7f8 fdc0 	bl	800038c <__aeabi_fmul>
 800780c:	9002      	str	r0, [sp, #8]
 800780e:	9b02      	ldr	r3, [sp, #8]
 8007810:	1076      	asrs	r6, r6, #1
 8007812:	f36f 030b 	bfc	r3, #0, #12
 8007816:	4698      	mov	r8, r3
 8007818:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 800781c:	9b01      	ldr	r3, [sp, #4]
 800781e:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 8007822:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 8007826:	4631      	mov	r1, r6
 8007828:	4640      	mov	r0, r8
 800782a:	f7f8 fdaf 	bl	800038c <__aeabi_fmul>
 800782e:	4601      	mov	r1, r0
 8007830:	4648      	mov	r0, r9
 8007832:	f7f8 fca1 	bl	8000178 <__aeabi_fsub>
 8007836:	4659      	mov	r1, fp
 8007838:	4681      	mov	r9, r0
 800783a:	4630      	mov	r0, r6
 800783c:	f7f8 fc9c 	bl	8000178 <__aeabi_fsub>
 8007840:	4601      	mov	r1, r0
 8007842:	4650      	mov	r0, sl
 8007844:	f7f8 fc98 	bl	8000178 <__aeabi_fsub>
 8007848:	4641      	mov	r1, r8
 800784a:	f7f8 fd9f 	bl	800038c <__aeabi_fmul>
 800784e:	4601      	mov	r1, r0
 8007850:	4648      	mov	r0, r9
 8007852:	f7f8 fc91 	bl	8000178 <__aeabi_fsub>
 8007856:	9b04      	ldr	r3, [sp, #16]
 8007858:	4619      	mov	r1, r3
 800785a:	f7f8 fd97 	bl	800038c <__aeabi_fmul>
 800785e:	9902      	ldr	r1, [sp, #8]
 8007860:	4683      	mov	fp, r0
 8007862:	4608      	mov	r0, r1
 8007864:	f7f8 fd92 	bl	800038c <__aeabi_fmul>
 8007868:	4606      	mov	r6, r0
 800786a:	496c      	ldr	r1, [pc, #432]	@ (8007a1c <__ieee754_powf+0x4c4>)
 800786c:	f7f8 fd8e 	bl	800038c <__aeabi_fmul>
 8007870:	496b      	ldr	r1, [pc, #428]	@ (8007a20 <__ieee754_powf+0x4c8>)
 8007872:	f7f8 fc83 	bl	800017c <__addsf3>
 8007876:	4631      	mov	r1, r6
 8007878:	f7f8 fd88 	bl	800038c <__aeabi_fmul>
 800787c:	4969      	ldr	r1, [pc, #420]	@ (8007a24 <__ieee754_powf+0x4cc>)
 800787e:	f7f8 fc7d 	bl	800017c <__addsf3>
 8007882:	4631      	mov	r1, r6
 8007884:	f7f8 fd82 	bl	800038c <__aeabi_fmul>
 8007888:	4967      	ldr	r1, [pc, #412]	@ (8007a28 <__ieee754_powf+0x4d0>)
 800788a:	f7f8 fc77 	bl	800017c <__addsf3>
 800788e:	4631      	mov	r1, r6
 8007890:	f7f8 fd7c 	bl	800038c <__aeabi_fmul>
 8007894:	4965      	ldr	r1, [pc, #404]	@ (8007a2c <__ieee754_powf+0x4d4>)
 8007896:	f7f8 fc71 	bl	800017c <__addsf3>
 800789a:	4631      	mov	r1, r6
 800789c:	f7f8 fd76 	bl	800038c <__aeabi_fmul>
 80078a0:	4963      	ldr	r1, [pc, #396]	@ (8007a30 <__ieee754_powf+0x4d8>)
 80078a2:	f7f8 fc6b 	bl	800017c <__addsf3>
 80078a6:	4631      	mov	r1, r6
 80078a8:	4681      	mov	r9, r0
 80078aa:	4630      	mov	r0, r6
 80078ac:	f7f8 fd6e 	bl	800038c <__aeabi_fmul>
 80078b0:	4601      	mov	r1, r0
 80078b2:	4648      	mov	r0, r9
 80078b4:	f7f8 fd6a 	bl	800038c <__aeabi_fmul>
 80078b8:	4606      	mov	r6, r0
 80078ba:	4641      	mov	r1, r8
 80078bc:	9802      	ldr	r0, [sp, #8]
 80078be:	f7f8 fc5d 	bl	800017c <__addsf3>
 80078c2:	4659      	mov	r1, fp
 80078c4:	f7f8 fd62 	bl	800038c <__aeabi_fmul>
 80078c8:	4631      	mov	r1, r6
 80078ca:	f7f8 fc57 	bl	800017c <__addsf3>
 80078ce:	4641      	mov	r1, r8
 80078d0:	4681      	mov	r9, r0
 80078d2:	4640      	mov	r0, r8
 80078d4:	f7f8 fd5a 	bl	800038c <__aeabi_fmul>
 80078d8:	4956      	ldr	r1, [pc, #344]	@ (8007a34 <__ieee754_powf+0x4dc>)
 80078da:	4682      	mov	sl, r0
 80078dc:	f7f8 fc4e 	bl	800017c <__addsf3>
 80078e0:	4649      	mov	r1, r9
 80078e2:	f7f8 fc4b 	bl	800017c <__addsf3>
 80078e6:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 80078ea:	f026 060f 	bic.w	r6, r6, #15
 80078ee:	4631      	mov	r1, r6
 80078f0:	4640      	mov	r0, r8
 80078f2:	f7f8 fd4b 	bl	800038c <__aeabi_fmul>
 80078f6:	494f      	ldr	r1, [pc, #316]	@ (8007a34 <__ieee754_powf+0x4dc>)
 80078f8:	4680      	mov	r8, r0
 80078fa:	4630      	mov	r0, r6
 80078fc:	f7f8 fc3c 	bl	8000178 <__aeabi_fsub>
 8007900:	4651      	mov	r1, sl
 8007902:	f7f8 fc39 	bl	8000178 <__aeabi_fsub>
 8007906:	4601      	mov	r1, r0
 8007908:	4648      	mov	r0, r9
 800790a:	f7f8 fc35 	bl	8000178 <__aeabi_fsub>
 800790e:	9902      	ldr	r1, [sp, #8]
 8007910:	f7f8 fd3c 	bl	800038c <__aeabi_fmul>
 8007914:	4631      	mov	r1, r6
 8007916:	4681      	mov	r9, r0
 8007918:	4658      	mov	r0, fp
 800791a:	f7f8 fd37 	bl	800038c <__aeabi_fmul>
 800791e:	4601      	mov	r1, r0
 8007920:	4648      	mov	r0, r9
 8007922:	f7f8 fc2b 	bl	800017c <__addsf3>
 8007926:	4682      	mov	sl, r0
 8007928:	4601      	mov	r1, r0
 800792a:	4640      	mov	r0, r8
 800792c:	f7f8 fc26 	bl	800017c <__addsf3>
 8007930:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8007934:	f026 060f 	bic.w	r6, r6, #15
 8007938:	4630      	mov	r0, r6
 800793a:	493f      	ldr	r1, [pc, #252]	@ (8007a38 <__ieee754_powf+0x4e0>)
 800793c:	f7f8 fd26 	bl	800038c <__aeabi_fmul>
 8007940:	4641      	mov	r1, r8
 8007942:	4681      	mov	r9, r0
 8007944:	4630      	mov	r0, r6
 8007946:	f7f8 fc17 	bl	8000178 <__aeabi_fsub>
 800794a:	4601      	mov	r1, r0
 800794c:	4650      	mov	r0, sl
 800794e:	f7f8 fc13 	bl	8000178 <__aeabi_fsub>
 8007952:	493a      	ldr	r1, [pc, #232]	@ (8007a3c <__ieee754_powf+0x4e4>)
 8007954:	f7f8 fd1a 	bl	800038c <__aeabi_fmul>
 8007958:	4939      	ldr	r1, [pc, #228]	@ (8007a40 <__ieee754_powf+0x4e8>)
 800795a:	4680      	mov	r8, r0
 800795c:	4630      	mov	r0, r6
 800795e:	f7f8 fd15 	bl	800038c <__aeabi_fmul>
 8007962:	4601      	mov	r1, r0
 8007964:	4640      	mov	r0, r8
 8007966:	f7f8 fc09 	bl	800017c <__addsf3>
 800796a:	4b36      	ldr	r3, [pc, #216]	@ (8007a44 <__ieee754_powf+0x4ec>)
 800796c:	9a01      	ldr	r2, [sp, #4]
 800796e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007972:	f7f8 fc03 	bl	800017c <__addsf3>
 8007976:	9a05      	ldr	r2, [sp, #20]
 8007978:	4606      	mov	r6, r0
 800797a:	4610      	mov	r0, r2
 800797c:	f7f8 fcb2 	bl	80002e4 <__aeabi_i2f>
 8007980:	4680      	mov	r8, r0
 8007982:	4b31      	ldr	r3, [pc, #196]	@ (8007a48 <__ieee754_powf+0x4f0>)
 8007984:	9a01      	ldr	r2, [sp, #4]
 8007986:	4631      	mov	r1, r6
 8007988:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 800798c:	4648      	mov	r0, r9
 800798e:	f7f8 fbf5 	bl	800017c <__addsf3>
 8007992:	4651      	mov	r1, sl
 8007994:	f7f8 fbf2 	bl	800017c <__addsf3>
 8007998:	4641      	mov	r1, r8
 800799a:	f7f8 fbef 	bl	800017c <__addsf3>
 800799e:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 80079a2:	f02b 0b0f 	bic.w	fp, fp, #15
 80079a6:	4641      	mov	r1, r8
 80079a8:	4658      	mov	r0, fp
 80079aa:	f7f8 fbe5 	bl	8000178 <__aeabi_fsub>
 80079ae:	4651      	mov	r1, sl
 80079b0:	f7f8 fbe2 	bl	8000178 <__aeabi_fsub>
 80079b4:	4649      	mov	r1, r9
 80079b6:	e6a6      	b.n	8007706 <__ieee754_powf+0x1ae>
 80079b8:	2200      	movs	r2, #0
 80079ba:	e6fa      	b.n	80077b2 <__ieee754_powf+0x25a>
 80079bc:	2301      	movs	r3, #1
 80079be:	e70b      	b.n	80077d8 <__ieee754_powf+0x280>
 80079c0:	d148      	bne.n	8007a54 <__ieee754_powf+0x4fc>
 80079c2:	4922      	ldr	r1, [pc, #136]	@ (8007a4c <__ieee754_powf+0x4f4>)
 80079c4:	4630      	mov	r0, r6
 80079c6:	f7f8 fbd9 	bl	800017c <__addsf3>
 80079ca:	4639      	mov	r1, r7
 80079cc:	4681      	mov	r9, r0
 80079ce:	4620      	mov	r0, r4
 80079d0:	f7f8 fbd2 	bl	8000178 <__aeabi_fsub>
 80079d4:	4601      	mov	r1, r0
 80079d6:	4648      	mov	r0, r9
 80079d8:	f7f8 fe94 	bl	8000704 <__aeabi_fcmpgt>
 80079dc:	2800      	cmp	r0, #0
 80079de:	f47f aec7 	bne.w	8007770 <__ieee754_powf+0x218>
 80079e2:	2386      	movs	r3, #134	@ 0x86
 80079e4:	e03b      	b.n	8007a5e <__ieee754_powf+0x506>
 80079e6:	4a1a      	ldr	r2, [pc, #104]	@ (8007a50 <__ieee754_powf+0x4f8>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d907      	bls.n	80079fc <__ieee754_powf+0x4a4>
 80079ec:	2100      	movs	r1, #0
 80079ee:	4628      	mov	r0, r5
 80079f0:	f7f8 fe6a 	bl	80006c8 <__aeabi_fcmplt>
 80079f4:	3800      	subs	r0, #0
 80079f6:	bf18      	it	ne
 80079f8:	2001      	movne	r0, #1
 80079fa:	e645      	b.n	8007688 <__ieee754_powf+0x130>
 80079fc:	d12a      	bne.n	8007a54 <__ieee754_powf+0x4fc>
 80079fe:	4639      	mov	r1, r7
 8007a00:	f7f8 fbba 	bl	8000178 <__aeabi_fsub>
 8007a04:	4631      	mov	r1, r6
 8007a06:	f7f8 fe73 	bl	80006f0 <__aeabi_fcmpge>
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	d0e9      	beq.n	80079e2 <__ieee754_powf+0x48a>
 8007a0e:	e7ed      	b.n	80079ec <__ieee754_powf+0x494>
 8007a10:	001cc471 	.word	0x001cc471
 8007a14:	005db3d6 	.word	0x005db3d6
 8007a18:	08008978 	.word	0x08008978
 8007a1c:	3e53f142 	.word	0x3e53f142
 8007a20:	3e6c3255 	.word	0x3e6c3255
 8007a24:	3e8ba305 	.word	0x3e8ba305
 8007a28:	3eaaaaab 	.word	0x3eaaaaab
 8007a2c:	3edb6db7 	.word	0x3edb6db7
 8007a30:	3f19999a 	.word	0x3f19999a
 8007a34:	40400000 	.word	0x40400000
 8007a38:	3f763800 	.word	0x3f763800
 8007a3c:	3f76384f 	.word	0x3f76384f
 8007a40:	369dc3a0 	.word	0x369dc3a0
 8007a44:	08008968 	.word	0x08008968
 8007a48:	08008970 	.word	0x08008970
 8007a4c:	3338aa3c 	.word	0x3338aa3c
 8007a50:	43160000 	.word	0x43160000
 8007a54:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8007a58:	f240 809b 	bls.w	8007b92 <__ieee754_powf+0x63a>
 8007a5c:	15db      	asrs	r3, r3, #23
 8007a5e:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 8007a62:	3b7e      	subs	r3, #126	@ 0x7e
 8007a64:	411c      	asrs	r4, r3
 8007a66:	4444      	add	r4, r8
 8007a68:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8007a6c:	4961      	ldr	r1, [pc, #388]	@ (8007bf4 <__ieee754_powf+0x69c>)
 8007a6e:	3b7f      	subs	r3, #127	@ 0x7f
 8007a70:	4119      	asrs	r1, r3
 8007a72:	4021      	ands	r1, r4
 8007a74:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8007a78:	f1c3 0317 	rsb	r3, r3, #23
 8007a7c:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 8007a80:	4638      	mov	r0, r7
 8007a82:	411c      	asrs	r4, r3
 8007a84:	f1b8 0f00 	cmp.w	r8, #0
 8007a88:	bfb8      	it	lt
 8007a8a:	4264      	neglt	r4, r4
 8007a8c:	f7f8 fb74 	bl	8000178 <__aeabi_fsub>
 8007a90:	4607      	mov	r7, r0
 8007a92:	4631      	mov	r1, r6
 8007a94:	4638      	mov	r0, r7
 8007a96:	f7f8 fb71 	bl	800017c <__addsf3>
 8007a9a:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 8007a9e:	f028 080f 	bic.w	r8, r8, #15
 8007aa2:	4640      	mov	r0, r8
 8007aa4:	4954      	ldr	r1, [pc, #336]	@ (8007bf8 <__ieee754_powf+0x6a0>)
 8007aa6:	f7f8 fc71 	bl	800038c <__aeabi_fmul>
 8007aaa:	4639      	mov	r1, r7
 8007aac:	4681      	mov	r9, r0
 8007aae:	4640      	mov	r0, r8
 8007ab0:	f7f8 fb62 	bl	8000178 <__aeabi_fsub>
 8007ab4:	4601      	mov	r1, r0
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	f7f8 fb5e 	bl	8000178 <__aeabi_fsub>
 8007abc:	494f      	ldr	r1, [pc, #316]	@ (8007bfc <__ieee754_powf+0x6a4>)
 8007abe:	f7f8 fc65 	bl	800038c <__aeabi_fmul>
 8007ac2:	494f      	ldr	r1, [pc, #316]	@ (8007c00 <__ieee754_powf+0x6a8>)
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	4640      	mov	r0, r8
 8007ac8:	f7f8 fc60 	bl	800038c <__aeabi_fmul>
 8007acc:	4601      	mov	r1, r0
 8007ace:	4630      	mov	r0, r6
 8007ad0:	f7f8 fb54 	bl	800017c <__addsf3>
 8007ad4:	4607      	mov	r7, r0
 8007ad6:	4601      	mov	r1, r0
 8007ad8:	4648      	mov	r0, r9
 8007ada:	f7f8 fb4f 	bl	800017c <__addsf3>
 8007ade:	4649      	mov	r1, r9
 8007ae0:	4606      	mov	r6, r0
 8007ae2:	f7f8 fb49 	bl	8000178 <__aeabi_fsub>
 8007ae6:	4601      	mov	r1, r0
 8007ae8:	4638      	mov	r0, r7
 8007aea:	f7f8 fb45 	bl	8000178 <__aeabi_fsub>
 8007aee:	4631      	mov	r1, r6
 8007af0:	4680      	mov	r8, r0
 8007af2:	4630      	mov	r0, r6
 8007af4:	f7f8 fc4a 	bl	800038c <__aeabi_fmul>
 8007af8:	4607      	mov	r7, r0
 8007afa:	4942      	ldr	r1, [pc, #264]	@ (8007c04 <__ieee754_powf+0x6ac>)
 8007afc:	f7f8 fc46 	bl	800038c <__aeabi_fmul>
 8007b00:	4941      	ldr	r1, [pc, #260]	@ (8007c08 <__ieee754_powf+0x6b0>)
 8007b02:	f7f8 fb39 	bl	8000178 <__aeabi_fsub>
 8007b06:	4639      	mov	r1, r7
 8007b08:	f7f8 fc40 	bl	800038c <__aeabi_fmul>
 8007b0c:	493f      	ldr	r1, [pc, #252]	@ (8007c0c <__ieee754_powf+0x6b4>)
 8007b0e:	f7f8 fb35 	bl	800017c <__addsf3>
 8007b12:	4639      	mov	r1, r7
 8007b14:	f7f8 fc3a 	bl	800038c <__aeabi_fmul>
 8007b18:	493d      	ldr	r1, [pc, #244]	@ (8007c10 <__ieee754_powf+0x6b8>)
 8007b1a:	f7f8 fb2d 	bl	8000178 <__aeabi_fsub>
 8007b1e:	4639      	mov	r1, r7
 8007b20:	f7f8 fc34 	bl	800038c <__aeabi_fmul>
 8007b24:	493b      	ldr	r1, [pc, #236]	@ (8007c14 <__ieee754_powf+0x6bc>)
 8007b26:	f7f8 fb29 	bl	800017c <__addsf3>
 8007b2a:	4639      	mov	r1, r7
 8007b2c:	f7f8 fc2e 	bl	800038c <__aeabi_fmul>
 8007b30:	4601      	mov	r1, r0
 8007b32:	4630      	mov	r0, r6
 8007b34:	f7f8 fb20 	bl	8000178 <__aeabi_fsub>
 8007b38:	4607      	mov	r7, r0
 8007b3a:	4601      	mov	r1, r0
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	f7f8 fc25 	bl	800038c <__aeabi_fmul>
 8007b42:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007b46:	4681      	mov	r9, r0
 8007b48:	4638      	mov	r0, r7
 8007b4a:	f7f8 fb15 	bl	8000178 <__aeabi_fsub>
 8007b4e:	4601      	mov	r1, r0
 8007b50:	4648      	mov	r0, r9
 8007b52:	f7f8 fccf 	bl	80004f4 <__aeabi_fdiv>
 8007b56:	4641      	mov	r1, r8
 8007b58:	4607      	mov	r7, r0
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	f7f8 fc16 	bl	800038c <__aeabi_fmul>
 8007b60:	4641      	mov	r1, r8
 8007b62:	f7f8 fb0b 	bl	800017c <__addsf3>
 8007b66:	4601      	mov	r1, r0
 8007b68:	4638      	mov	r0, r7
 8007b6a:	f7f8 fb05 	bl	8000178 <__aeabi_fsub>
 8007b6e:	4631      	mov	r1, r6
 8007b70:	f7f8 fb02 	bl	8000178 <__aeabi_fsub>
 8007b74:	4601      	mov	r1, r0
 8007b76:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007b7a:	f7f8 fafd 	bl	8000178 <__aeabi_fsub>
 8007b7e:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8007b82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b86:	da06      	bge.n	8007b96 <__ieee754_powf+0x63e>
 8007b88:	4621      	mov	r1, r4
 8007b8a:	f000 f9af 	bl	8007eec <scalbnf>
 8007b8e:	4629      	mov	r1, r5
 8007b90:	e549      	b.n	8007626 <__ieee754_powf+0xce>
 8007b92:	2400      	movs	r4, #0
 8007b94:	e77d      	b.n	8007a92 <__ieee754_powf+0x53a>
 8007b96:	4618      	mov	r0, r3
 8007b98:	e7f9      	b.n	8007b8e <__ieee754_powf+0x636>
 8007b9a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007b9e:	e536      	b.n	800760e <__ieee754_powf+0xb6>
 8007ba0:	4639      	mov	r1, r7
 8007ba2:	e534      	b.n	800760e <__ieee754_powf+0xb6>
 8007ba4:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8007ba8:	f43f ad23 	beq.w	80075f2 <__ieee754_powf+0x9a>
 8007bac:	2502      	movs	r5, #2
 8007bae:	4648      	mov	r0, r9
 8007bb0:	f000 f998 	bl	8007ee4 <fabsf>
 8007bb4:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8007bb8:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8007bbc:	46c2      	mov	sl, r8
 8007bbe:	4601      	mov	r1, r0
 8007bc0:	d003      	beq.n	8007bca <__ieee754_powf+0x672>
 8007bc2:	f1b8 0f00 	cmp.w	r8, #0
 8007bc6:	f47f ad43 	bne.w	8007650 <__ieee754_powf+0xf8>
 8007bca:	2c00      	cmp	r4, #0
 8007bcc:	da04      	bge.n	8007bd8 <__ieee754_powf+0x680>
 8007bce:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007bd2:	f7f8 fc8f 	bl	80004f4 <__aeabi_fdiv>
 8007bd6:	4601      	mov	r1, r0
 8007bd8:	2e00      	cmp	r6, #0
 8007bda:	f6bf ad18 	bge.w	800760e <__ieee754_powf+0xb6>
 8007bde:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8007be2:	ea58 0805 	orrs.w	r8, r8, r5
 8007be6:	f47f ad2e 	bne.w	8007646 <__ieee754_powf+0xee>
 8007bea:	4608      	mov	r0, r1
 8007bec:	f7f8 fac4 	bl	8000178 <__aeabi_fsub>
 8007bf0:	4601      	mov	r1, r0
 8007bf2:	e4f8      	b.n	80075e6 <__ieee754_powf+0x8e>
 8007bf4:	ff800000 	.word	0xff800000
 8007bf8:	3f317200 	.word	0x3f317200
 8007bfc:	3f317218 	.word	0x3f317218
 8007c00:	35bfbe8c 	.word	0x35bfbe8c
 8007c04:	3331bb4c 	.word	0x3331bb4c
 8007c08:	35ddea0e 	.word	0x35ddea0e
 8007c0c:	388ab355 	.word	0x388ab355
 8007c10:	3b360b61 	.word	0x3b360b61
 8007c14:	3e2aaaab 	.word	0x3e2aaaab

08007c18 <__ieee754_rem_pio2f>:
 8007c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1c:	4aa4      	ldr	r2, [pc, #656]	@ (8007eb0 <__ieee754_rem_pio2f+0x298>)
 8007c1e:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8007c22:	4590      	cmp	r8, r2
 8007c24:	460c      	mov	r4, r1
 8007c26:	4682      	mov	sl, r0
 8007c28:	b087      	sub	sp, #28
 8007c2a:	d804      	bhi.n	8007c36 <__ieee754_rem_pio2f+0x1e>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	6008      	str	r0, [r1, #0]
 8007c30:	604b      	str	r3, [r1, #4]
 8007c32:	2500      	movs	r5, #0
 8007c34:	e01d      	b.n	8007c72 <__ieee754_rem_pio2f+0x5a>
 8007c36:	4a9f      	ldr	r2, [pc, #636]	@ (8007eb4 <__ieee754_rem_pio2f+0x29c>)
 8007c38:	4590      	cmp	r8, r2
 8007c3a:	d84f      	bhi.n	8007cdc <__ieee754_rem_pio2f+0xc4>
 8007c3c:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8007c40:	2800      	cmp	r0, #0
 8007c42:	499d      	ldr	r1, [pc, #628]	@ (8007eb8 <__ieee754_rem_pio2f+0x2a0>)
 8007c44:	4f9d      	ldr	r7, [pc, #628]	@ (8007ebc <__ieee754_rem_pio2f+0x2a4>)
 8007c46:	f025 050f 	bic.w	r5, r5, #15
 8007c4a:	dd24      	ble.n	8007c96 <__ieee754_rem_pio2f+0x7e>
 8007c4c:	f7f8 fa94 	bl	8000178 <__aeabi_fsub>
 8007c50:	42bd      	cmp	r5, r7
 8007c52:	4606      	mov	r6, r0
 8007c54:	d011      	beq.n	8007c7a <__ieee754_rem_pio2f+0x62>
 8007c56:	499a      	ldr	r1, [pc, #616]	@ (8007ec0 <__ieee754_rem_pio2f+0x2a8>)
 8007c58:	f7f8 fa8e 	bl	8000178 <__aeabi_fsub>
 8007c5c:	4601      	mov	r1, r0
 8007c5e:	4605      	mov	r5, r0
 8007c60:	4630      	mov	r0, r6
 8007c62:	f7f8 fa89 	bl	8000178 <__aeabi_fsub>
 8007c66:	4996      	ldr	r1, [pc, #600]	@ (8007ec0 <__ieee754_rem_pio2f+0x2a8>)
 8007c68:	f7f8 fa86 	bl	8000178 <__aeabi_fsub>
 8007c6c:	6025      	str	r5, [r4, #0]
 8007c6e:	2501      	movs	r5, #1
 8007c70:	6060      	str	r0, [r4, #4]
 8007c72:	4628      	mov	r0, r5
 8007c74:	b007      	add	sp, #28
 8007c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7a:	4992      	ldr	r1, [pc, #584]	@ (8007ec4 <__ieee754_rem_pio2f+0x2ac>)
 8007c7c:	f7f8 fa7c 	bl	8000178 <__aeabi_fsub>
 8007c80:	4991      	ldr	r1, [pc, #580]	@ (8007ec8 <__ieee754_rem_pio2f+0x2b0>)
 8007c82:	4606      	mov	r6, r0
 8007c84:	f7f8 fa78 	bl	8000178 <__aeabi_fsub>
 8007c88:	4601      	mov	r1, r0
 8007c8a:	4605      	mov	r5, r0
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f7f8 fa73 	bl	8000178 <__aeabi_fsub>
 8007c92:	498d      	ldr	r1, [pc, #564]	@ (8007ec8 <__ieee754_rem_pio2f+0x2b0>)
 8007c94:	e7e8      	b.n	8007c68 <__ieee754_rem_pio2f+0x50>
 8007c96:	f7f8 fa71 	bl	800017c <__addsf3>
 8007c9a:	42bd      	cmp	r5, r7
 8007c9c:	4606      	mov	r6, r0
 8007c9e:	d00f      	beq.n	8007cc0 <__ieee754_rem_pio2f+0xa8>
 8007ca0:	4987      	ldr	r1, [pc, #540]	@ (8007ec0 <__ieee754_rem_pio2f+0x2a8>)
 8007ca2:	f7f8 fa6b 	bl	800017c <__addsf3>
 8007ca6:	4601      	mov	r1, r0
 8007ca8:	4605      	mov	r5, r0
 8007caa:	4630      	mov	r0, r6
 8007cac:	f7f8 fa64 	bl	8000178 <__aeabi_fsub>
 8007cb0:	4983      	ldr	r1, [pc, #524]	@ (8007ec0 <__ieee754_rem_pio2f+0x2a8>)
 8007cb2:	f7f8 fa63 	bl	800017c <__addsf3>
 8007cb6:	6025      	str	r5, [r4, #0]
 8007cb8:	6060      	str	r0, [r4, #4]
 8007cba:	f04f 35ff 	mov.w	r5, #4294967295
 8007cbe:	e7d8      	b.n	8007c72 <__ieee754_rem_pio2f+0x5a>
 8007cc0:	4980      	ldr	r1, [pc, #512]	@ (8007ec4 <__ieee754_rem_pio2f+0x2ac>)
 8007cc2:	f7f8 fa5b 	bl	800017c <__addsf3>
 8007cc6:	4980      	ldr	r1, [pc, #512]	@ (8007ec8 <__ieee754_rem_pio2f+0x2b0>)
 8007cc8:	4606      	mov	r6, r0
 8007cca:	f7f8 fa57 	bl	800017c <__addsf3>
 8007cce:	4601      	mov	r1, r0
 8007cd0:	4605      	mov	r5, r0
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	f7f8 fa50 	bl	8000178 <__aeabi_fsub>
 8007cd8:	497b      	ldr	r1, [pc, #492]	@ (8007ec8 <__ieee754_rem_pio2f+0x2b0>)
 8007cda:	e7ea      	b.n	8007cb2 <__ieee754_rem_pio2f+0x9a>
 8007cdc:	4a7b      	ldr	r2, [pc, #492]	@ (8007ecc <__ieee754_rem_pio2f+0x2b4>)
 8007cde:	4590      	cmp	r8, r2
 8007ce0:	f200 8095 	bhi.w	8007e0e <__ieee754_rem_pio2f+0x1f6>
 8007ce4:	f000 f8fe 	bl	8007ee4 <fabsf>
 8007ce8:	4979      	ldr	r1, [pc, #484]	@ (8007ed0 <__ieee754_rem_pio2f+0x2b8>)
 8007cea:	4606      	mov	r6, r0
 8007cec:	f7f8 fb4e 	bl	800038c <__aeabi_fmul>
 8007cf0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8007cf4:	f7f8 fa42 	bl	800017c <__addsf3>
 8007cf8:	f7f8 fd24 	bl	8000744 <__aeabi_f2iz>
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	f7f8 faf1 	bl	80002e4 <__aeabi_i2f>
 8007d02:	496d      	ldr	r1, [pc, #436]	@ (8007eb8 <__ieee754_rem_pio2f+0x2a0>)
 8007d04:	4681      	mov	r9, r0
 8007d06:	f7f8 fb41 	bl	800038c <__aeabi_fmul>
 8007d0a:	4601      	mov	r1, r0
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	f7f8 fa33 	bl	8000178 <__aeabi_fsub>
 8007d12:	496b      	ldr	r1, [pc, #428]	@ (8007ec0 <__ieee754_rem_pio2f+0x2a8>)
 8007d14:	4607      	mov	r7, r0
 8007d16:	4648      	mov	r0, r9
 8007d18:	f7f8 fb38 	bl	800038c <__aeabi_fmul>
 8007d1c:	2d1f      	cmp	r5, #31
 8007d1e:	4606      	mov	r6, r0
 8007d20:	dc0e      	bgt.n	8007d40 <__ieee754_rem_pio2f+0x128>
 8007d22:	4a6c      	ldr	r2, [pc, #432]	@ (8007ed4 <__ieee754_rem_pio2f+0x2bc>)
 8007d24:	1e69      	subs	r1, r5, #1
 8007d26:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007d2a:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 8007d2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d004      	beq.n	8007d40 <__ieee754_rem_pio2f+0x128>
 8007d36:	4631      	mov	r1, r6
 8007d38:	4638      	mov	r0, r7
 8007d3a:	f7f8 fa1d 	bl	8000178 <__aeabi_fsub>
 8007d3e:	e00b      	b.n	8007d58 <__ieee754_rem_pio2f+0x140>
 8007d40:	4631      	mov	r1, r6
 8007d42:	4638      	mov	r0, r7
 8007d44:	f7f8 fa18 	bl	8000178 <__aeabi_fsub>
 8007d48:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007d4c:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 8007d50:	2b08      	cmp	r3, #8
 8007d52:	ea4f 5be8 	mov.w	fp, r8, asr #23
 8007d56:	dc01      	bgt.n	8007d5c <__ieee754_rem_pio2f+0x144>
 8007d58:	6020      	str	r0, [r4, #0]
 8007d5a:	e026      	b.n	8007daa <__ieee754_rem_pio2f+0x192>
 8007d5c:	4959      	ldr	r1, [pc, #356]	@ (8007ec4 <__ieee754_rem_pio2f+0x2ac>)
 8007d5e:	4648      	mov	r0, r9
 8007d60:	f7f8 fb14 	bl	800038c <__aeabi_fmul>
 8007d64:	4606      	mov	r6, r0
 8007d66:	4601      	mov	r1, r0
 8007d68:	4638      	mov	r0, r7
 8007d6a:	f7f8 fa05 	bl	8000178 <__aeabi_fsub>
 8007d6e:	4601      	mov	r1, r0
 8007d70:	4680      	mov	r8, r0
 8007d72:	4638      	mov	r0, r7
 8007d74:	f7f8 fa00 	bl	8000178 <__aeabi_fsub>
 8007d78:	4631      	mov	r1, r6
 8007d7a:	f7f8 f9fd 	bl	8000178 <__aeabi_fsub>
 8007d7e:	4606      	mov	r6, r0
 8007d80:	4951      	ldr	r1, [pc, #324]	@ (8007ec8 <__ieee754_rem_pio2f+0x2b0>)
 8007d82:	4648      	mov	r0, r9
 8007d84:	f7f8 fb02 	bl	800038c <__aeabi_fmul>
 8007d88:	4631      	mov	r1, r6
 8007d8a:	f7f8 f9f5 	bl	8000178 <__aeabi_fsub>
 8007d8e:	4601      	mov	r1, r0
 8007d90:	4606      	mov	r6, r0
 8007d92:	4640      	mov	r0, r8
 8007d94:	f7f8 f9f0 	bl	8000178 <__aeabi_fsub>
 8007d98:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007d9c:	ebab 0b03 	sub.w	fp, fp, r3
 8007da0:	f1bb 0f19 	cmp.w	fp, #25
 8007da4:	dc18      	bgt.n	8007dd8 <__ieee754_rem_pio2f+0x1c0>
 8007da6:	4647      	mov	r7, r8
 8007da8:	6020      	str	r0, [r4, #0]
 8007daa:	f8d4 8000 	ldr.w	r8, [r4]
 8007dae:	4638      	mov	r0, r7
 8007db0:	4641      	mov	r1, r8
 8007db2:	f7f8 f9e1 	bl	8000178 <__aeabi_fsub>
 8007db6:	4631      	mov	r1, r6
 8007db8:	f7f8 f9de 	bl	8000178 <__aeabi_fsub>
 8007dbc:	f1ba 0f00 	cmp.w	sl, #0
 8007dc0:	6060      	str	r0, [r4, #4]
 8007dc2:	f6bf af56 	bge.w	8007c72 <__ieee754_rem_pio2f+0x5a>
 8007dc6:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 8007dca:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8007dce:	f8c4 8000 	str.w	r8, [r4]
 8007dd2:	6060      	str	r0, [r4, #4]
 8007dd4:	426d      	negs	r5, r5
 8007dd6:	e74c      	b.n	8007c72 <__ieee754_rem_pio2f+0x5a>
 8007dd8:	493f      	ldr	r1, [pc, #252]	@ (8007ed8 <__ieee754_rem_pio2f+0x2c0>)
 8007dda:	4648      	mov	r0, r9
 8007ddc:	f7f8 fad6 	bl	800038c <__aeabi_fmul>
 8007de0:	4606      	mov	r6, r0
 8007de2:	4601      	mov	r1, r0
 8007de4:	4640      	mov	r0, r8
 8007de6:	f7f8 f9c7 	bl	8000178 <__aeabi_fsub>
 8007dea:	4601      	mov	r1, r0
 8007dec:	4607      	mov	r7, r0
 8007dee:	4640      	mov	r0, r8
 8007df0:	f7f8 f9c2 	bl	8000178 <__aeabi_fsub>
 8007df4:	4631      	mov	r1, r6
 8007df6:	f7f8 f9bf 	bl	8000178 <__aeabi_fsub>
 8007dfa:	4606      	mov	r6, r0
 8007dfc:	4937      	ldr	r1, [pc, #220]	@ (8007edc <__ieee754_rem_pio2f+0x2c4>)
 8007dfe:	4648      	mov	r0, r9
 8007e00:	f7f8 fac4 	bl	800038c <__aeabi_fmul>
 8007e04:	4631      	mov	r1, r6
 8007e06:	f7f8 f9b7 	bl	8000178 <__aeabi_fsub>
 8007e0a:	4606      	mov	r6, r0
 8007e0c:	e793      	b.n	8007d36 <__ieee754_rem_pio2f+0x11e>
 8007e0e:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8007e12:	d305      	bcc.n	8007e20 <__ieee754_rem_pio2f+0x208>
 8007e14:	4601      	mov	r1, r0
 8007e16:	f7f8 f9af 	bl	8000178 <__aeabi_fsub>
 8007e1a:	6060      	str	r0, [r4, #4]
 8007e1c:	6020      	str	r0, [r4, #0]
 8007e1e:	e708      	b.n	8007c32 <__ieee754_rem_pio2f+0x1a>
 8007e20:	ea4f 56e8 	mov.w	r6, r8, asr #23
 8007e24:	3e86      	subs	r6, #134	@ 0x86
 8007e26:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 8007e2a:	4640      	mov	r0, r8
 8007e2c:	f7f8 fc8a 	bl	8000744 <__aeabi_f2iz>
 8007e30:	f7f8 fa58 	bl	80002e4 <__aeabi_i2f>
 8007e34:	4601      	mov	r1, r0
 8007e36:	9003      	str	r0, [sp, #12]
 8007e38:	4640      	mov	r0, r8
 8007e3a:	f7f8 f99d 	bl	8000178 <__aeabi_fsub>
 8007e3e:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8007e42:	f7f8 faa3 	bl	800038c <__aeabi_fmul>
 8007e46:	4607      	mov	r7, r0
 8007e48:	f7f8 fc7c 	bl	8000744 <__aeabi_f2iz>
 8007e4c:	f7f8 fa4a 	bl	80002e4 <__aeabi_i2f>
 8007e50:	4601      	mov	r1, r0
 8007e52:	9004      	str	r0, [sp, #16]
 8007e54:	4605      	mov	r5, r0
 8007e56:	4638      	mov	r0, r7
 8007e58:	f7f8 f98e 	bl	8000178 <__aeabi_fsub>
 8007e5c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8007e60:	f7f8 fa94 	bl	800038c <__aeabi_fmul>
 8007e64:	2100      	movs	r1, #0
 8007e66:	9005      	str	r0, [sp, #20]
 8007e68:	f7f8 fc24 	bl	80006b4 <__aeabi_fcmpeq>
 8007e6c:	b1f0      	cbz	r0, 8007eac <__ieee754_rem_pio2f+0x294>
 8007e6e:	2100      	movs	r1, #0
 8007e70:	4628      	mov	r0, r5
 8007e72:	f7f8 fc1f 	bl	80006b4 <__aeabi_fcmpeq>
 8007e76:	2800      	cmp	r0, #0
 8007e78:	bf14      	ite	ne
 8007e7a:	2301      	movne	r3, #1
 8007e7c:	2302      	moveq	r3, #2
 8007e7e:	4a18      	ldr	r2, [pc, #96]	@ (8007ee0 <__ieee754_rem_pio2f+0x2c8>)
 8007e80:	4621      	mov	r1, r4
 8007e82:	9201      	str	r2, [sp, #4]
 8007e84:	2202      	movs	r2, #2
 8007e86:	a803      	add	r0, sp, #12
 8007e88:	9200      	str	r2, [sp, #0]
 8007e8a:	4632      	mov	r2, r6
 8007e8c:	f000 f898 	bl	8007fc0 <__kernel_rem_pio2f>
 8007e90:	f1ba 0f00 	cmp.w	sl, #0
 8007e94:	4605      	mov	r5, r0
 8007e96:	f6bf aeec 	bge.w	8007c72 <__ieee754_rem_pio2f+0x5a>
 8007e9a:	6823      	ldr	r3, [r4, #0]
 8007e9c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007ea0:	6023      	str	r3, [r4, #0]
 8007ea2:	6863      	ldr	r3, [r4, #4]
 8007ea4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007ea8:	6063      	str	r3, [r4, #4]
 8007eaa:	e793      	b.n	8007dd4 <__ieee754_rem_pio2f+0x1bc>
 8007eac:	2303      	movs	r3, #3
 8007eae:	e7e6      	b.n	8007e7e <__ieee754_rem_pio2f+0x266>
 8007eb0:	3f490fd8 	.word	0x3f490fd8
 8007eb4:	4016cbe3 	.word	0x4016cbe3
 8007eb8:	3fc90f80 	.word	0x3fc90f80
 8007ebc:	3fc90fd0 	.word	0x3fc90fd0
 8007ec0:	37354443 	.word	0x37354443
 8007ec4:	37354400 	.word	0x37354400
 8007ec8:	2e85a308 	.word	0x2e85a308
 8007ecc:	43490f80 	.word	0x43490f80
 8007ed0:	3f22f984 	.word	0x3f22f984
 8007ed4:	08008980 	.word	0x08008980
 8007ed8:	2e85a300 	.word	0x2e85a300
 8007edc:	248d3132 	.word	0x248d3132
 8007ee0:	08008a00 	.word	0x08008a00

08007ee4 <fabsf>:
 8007ee4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007ee8:	4770      	bx	lr
	...

08007eec <scalbnf>:
 8007eec:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	460d      	mov	r5, r1
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	d02e      	beq.n	8007f58 <scalbnf+0x6c>
 8007efa:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007efe:	d304      	bcc.n	8007f0a <scalbnf+0x1e>
 8007f00:	4601      	mov	r1, r0
 8007f02:	f7f8 f93b 	bl	800017c <__addsf3>
 8007f06:	4603      	mov	r3, r0
 8007f08:	e026      	b.n	8007f58 <scalbnf+0x6c>
 8007f0a:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8007f0e:	d118      	bne.n	8007f42 <scalbnf+0x56>
 8007f10:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8007f14:	f7f8 fa3a 	bl	800038c <__aeabi_fmul>
 8007f18:	4a17      	ldr	r2, [pc, #92]	@ (8007f78 <scalbnf+0x8c>)
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	4295      	cmp	r5, r2
 8007f1e:	db0c      	blt.n	8007f3a <scalbnf+0x4e>
 8007f20:	4604      	mov	r4, r0
 8007f22:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8007f26:	3a19      	subs	r2, #25
 8007f28:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8007f2c:	428d      	cmp	r5, r1
 8007f2e:	dd0a      	ble.n	8007f46 <scalbnf+0x5a>
 8007f30:	4912      	ldr	r1, [pc, #72]	@ (8007f7c <scalbnf+0x90>)
 8007f32:	4618      	mov	r0, r3
 8007f34:	f361 001e 	bfi	r0, r1, #0, #31
 8007f38:	e000      	b.n	8007f3c <scalbnf+0x50>
 8007f3a:	4911      	ldr	r1, [pc, #68]	@ (8007f80 <scalbnf+0x94>)
 8007f3c:	f7f8 fa26 	bl	800038c <__aeabi_fmul>
 8007f40:	e7e1      	b.n	8007f06 <scalbnf+0x1a>
 8007f42:	0dd2      	lsrs	r2, r2, #23
 8007f44:	e7f0      	b.n	8007f28 <scalbnf+0x3c>
 8007f46:	1951      	adds	r1, r2, r5
 8007f48:	29fe      	cmp	r1, #254	@ 0xfe
 8007f4a:	dcf1      	bgt.n	8007f30 <scalbnf+0x44>
 8007f4c:	2900      	cmp	r1, #0
 8007f4e:	dd05      	ble.n	8007f5c <scalbnf+0x70>
 8007f50:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8007f54:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8007f58:	4618      	mov	r0, r3
 8007f5a:	bd38      	pop	{r3, r4, r5, pc}
 8007f5c:	f111 0f16 	cmn.w	r1, #22
 8007f60:	da01      	bge.n	8007f66 <scalbnf+0x7a>
 8007f62:	4907      	ldr	r1, [pc, #28]	@ (8007f80 <scalbnf+0x94>)
 8007f64:	e7e5      	b.n	8007f32 <scalbnf+0x46>
 8007f66:	f101 0019 	add.w	r0, r1, #25
 8007f6a:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8007f6e:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8007f72:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8007f76:	e7e1      	b.n	8007f3c <scalbnf+0x50>
 8007f78:	ffff3cb0 	.word	0xffff3cb0
 8007f7c:	7149f2ca 	.word	0x7149f2ca
 8007f80:	0da24260 	.word	0x0da24260

08007f84 <with_errnof>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	4604      	mov	r4, r0
 8007f88:	460d      	mov	r5, r1
 8007f8a:	f7fe fc17 	bl	80067bc <__errno>
 8007f8e:	6005      	str	r5, [r0, #0]
 8007f90:	4620      	mov	r0, r4
 8007f92:	bd38      	pop	{r3, r4, r5, pc}

08007f94 <xflowf>:
 8007f94:	b508      	push	{r3, lr}
 8007f96:	b140      	cbz	r0, 8007faa <xflowf+0x16>
 8007f98:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8007f9c:	f7f8 f9f6 	bl	800038c <__aeabi_fmul>
 8007fa0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007fa4:	2122      	movs	r1, #34	@ 0x22
 8007fa6:	f7ff bfed 	b.w	8007f84 <with_errnof>
 8007faa:	4608      	mov	r0, r1
 8007fac:	e7f6      	b.n	8007f9c <xflowf+0x8>

08007fae <__math_uflowf>:
 8007fae:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8007fb2:	f7ff bfef 	b.w	8007f94 <xflowf>

08007fb6 <__math_oflowf>:
 8007fb6:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8007fba:	f7ff bfeb 	b.w	8007f94 <xflowf>
	...

08007fc0 <__kernel_rem_pio2f>:
 8007fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc4:	b0db      	sub	sp, #364	@ 0x16c
 8007fc6:	9202      	str	r2, [sp, #8]
 8007fc8:	9304      	str	r3, [sp, #16]
 8007fca:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8007fcc:	4bac      	ldr	r3, [pc, #688]	@ (8008280 <__kernel_rem_pio2f+0x2c0>)
 8007fce:	9005      	str	r0, [sp, #20]
 8007fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd4:	9100      	str	r1, [sp, #0]
 8007fd6:	9301      	str	r3, [sp, #4]
 8007fd8:	9b04      	ldr	r3, [sp, #16]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	9303      	str	r3, [sp, #12]
 8007fde:	9b02      	ldr	r3, [sp, #8]
 8007fe0:	1d1a      	adds	r2, r3, #4
 8007fe2:	f2c0 8099 	blt.w	8008118 <__kernel_rem_pio2f+0x158>
 8007fe6:	1edc      	subs	r4, r3, #3
 8007fe8:	bf48      	it	mi
 8007fea:	1d1c      	addmi	r4, r3, #4
 8007fec:	10e4      	asrs	r4, r4, #3
 8007fee:	2500      	movs	r5, #0
 8007ff0:	f04f 0b00 	mov.w	fp, #0
 8007ff4:	1c67      	adds	r7, r4, #1
 8007ff6:	00fb      	lsls	r3, r7, #3
 8007ff8:	9306      	str	r3, [sp, #24]
 8007ffa:	9b02      	ldr	r3, [sp, #8]
 8007ffc:	9a03      	ldr	r2, [sp, #12]
 8007ffe:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8008002:	9b01      	ldr	r3, [sp, #4]
 8008004:	eba4 0802 	sub.w	r8, r4, r2
 8008008:	eb03 0902 	add.w	r9, r3, r2
 800800c:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800800e:	ae1e      	add	r6, sp, #120	@ 0x78
 8008010:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8008014:	454d      	cmp	r5, r9
 8008016:	f340 8081 	ble.w	800811c <__kernel_rem_pio2f+0x15c>
 800801a:	9a04      	ldr	r2, [sp, #16]
 800801c:	ab1e      	add	r3, sp, #120	@ 0x78
 800801e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8008022:	f04f 0900 	mov.w	r9, #0
 8008026:	2300      	movs	r3, #0
 8008028:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800802c:	9a01      	ldr	r2, [sp, #4]
 800802e:	4591      	cmp	r9, r2
 8008030:	f340 809a 	ble.w	8008168 <__kernel_rem_pio2f+0x1a8>
 8008034:	4613      	mov	r3, r2
 8008036:	aa0a      	add	r2, sp, #40	@ 0x28
 8008038:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800803c:	9308      	str	r3, [sp, #32]
 800803e:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8008040:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008044:	9c01      	ldr	r4, [sp, #4]
 8008046:	9307      	str	r3, [sp, #28]
 8008048:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800804c:	4646      	mov	r6, r8
 800804e:	4625      	mov	r5, r4
 8008050:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 8008054:	ab5a      	add	r3, sp, #360	@ 0x168
 8008056:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800805a:	f853 bc50 	ldr.w	fp, [r3, #-80]
 800805e:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8008062:	2d00      	cmp	r5, #0
 8008064:	f300 8085 	bgt.w	8008172 <__kernel_rem_pio2f+0x1b2>
 8008068:	4639      	mov	r1, r7
 800806a:	4658      	mov	r0, fp
 800806c:	f7ff ff3e 	bl	8007eec <scalbnf>
 8008070:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8008074:	4605      	mov	r5, r0
 8008076:	f7f8 f989 	bl	800038c <__aeabi_fmul>
 800807a:	f000 fa3f 	bl	80084fc <floorf>
 800807e:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8008082:	f7f8 f983 	bl	800038c <__aeabi_fmul>
 8008086:	4601      	mov	r1, r0
 8008088:	4628      	mov	r0, r5
 800808a:	f7f8 f875 	bl	8000178 <__aeabi_fsub>
 800808e:	4605      	mov	r5, r0
 8008090:	f7f8 fb58 	bl	8000744 <__aeabi_f2iz>
 8008094:	4606      	mov	r6, r0
 8008096:	f7f8 f925 	bl	80002e4 <__aeabi_i2f>
 800809a:	4601      	mov	r1, r0
 800809c:	4628      	mov	r0, r5
 800809e:	f7f8 f86b 	bl	8000178 <__aeabi_fsub>
 80080a2:	2f00      	cmp	r7, #0
 80080a4:	4681      	mov	r9, r0
 80080a6:	f340 8081 	ble.w	80081ac <__kernel_rem_pio2f+0x1ec>
 80080aa:	1e62      	subs	r2, r4, #1
 80080ac:	ab0a      	add	r3, sp, #40	@ 0x28
 80080ae:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80080b2:	f1c7 0108 	rsb	r1, r7, #8
 80080b6:	fa45 f301 	asr.w	r3, r5, r1
 80080ba:	441e      	add	r6, r3
 80080bc:	408b      	lsls	r3, r1
 80080be:	1aed      	subs	r5, r5, r3
 80080c0:	ab0a      	add	r3, sp, #40	@ 0x28
 80080c2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80080c6:	f1c7 0307 	rsb	r3, r7, #7
 80080ca:	411d      	asrs	r5, r3
 80080cc:	2d00      	cmp	r5, #0
 80080ce:	dd7a      	ble.n	80081c6 <__kernel_rem_pio2f+0x206>
 80080d0:	2200      	movs	r2, #0
 80080d2:	4692      	mov	sl, r2
 80080d4:	3601      	adds	r6, #1
 80080d6:	4294      	cmp	r4, r2
 80080d8:	f300 80aa 	bgt.w	8008230 <__kernel_rem_pio2f+0x270>
 80080dc:	2f00      	cmp	r7, #0
 80080de:	dd05      	ble.n	80080ec <__kernel_rem_pio2f+0x12c>
 80080e0:	2f01      	cmp	r7, #1
 80080e2:	f000 80b6 	beq.w	8008252 <__kernel_rem_pio2f+0x292>
 80080e6:	2f02      	cmp	r7, #2
 80080e8:	f000 80bd 	beq.w	8008266 <__kernel_rem_pio2f+0x2a6>
 80080ec:	2d02      	cmp	r5, #2
 80080ee:	d16a      	bne.n	80081c6 <__kernel_rem_pio2f+0x206>
 80080f0:	4649      	mov	r1, r9
 80080f2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80080f6:	f7f8 f83f 	bl	8000178 <__aeabi_fsub>
 80080fa:	4681      	mov	r9, r0
 80080fc:	f1ba 0f00 	cmp.w	sl, #0
 8008100:	d061      	beq.n	80081c6 <__kernel_rem_pio2f+0x206>
 8008102:	4639      	mov	r1, r7
 8008104:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008108:	f7ff fef0 	bl	8007eec <scalbnf>
 800810c:	4601      	mov	r1, r0
 800810e:	4648      	mov	r0, r9
 8008110:	f7f8 f832 	bl	8000178 <__aeabi_fsub>
 8008114:	4681      	mov	r9, r0
 8008116:	e056      	b.n	80081c6 <__kernel_rem_pio2f+0x206>
 8008118:	2400      	movs	r4, #0
 800811a:	e768      	b.n	8007fee <__kernel_rem_pio2f+0x2e>
 800811c:	eb18 0f05 	cmn.w	r8, r5
 8008120:	d407      	bmi.n	8008132 <__kernel_rem_pio2f+0x172>
 8008122:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8008126:	f7f8 f8dd 	bl	80002e4 <__aeabi_i2f>
 800812a:	f846 0b04 	str.w	r0, [r6], #4
 800812e:	3501      	adds	r5, #1
 8008130:	e770      	b.n	8008014 <__kernel_rem_pio2f+0x54>
 8008132:	4658      	mov	r0, fp
 8008134:	e7f9      	b.n	800812a <__kernel_rem_pio2f+0x16a>
 8008136:	9307      	str	r3, [sp, #28]
 8008138:	9b05      	ldr	r3, [sp, #20]
 800813a:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 800813e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008142:	f7f8 f923 	bl	800038c <__aeabi_fmul>
 8008146:	4601      	mov	r1, r0
 8008148:	4630      	mov	r0, r6
 800814a:	f7f8 f817 	bl	800017c <__addsf3>
 800814e:	4606      	mov	r6, r0
 8008150:	9b07      	ldr	r3, [sp, #28]
 8008152:	f108 0801 	add.w	r8, r8, #1
 8008156:	9a03      	ldr	r2, [sp, #12]
 8008158:	4590      	cmp	r8, r2
 800815a:	ddec      	ble.n	8008136 <__kernel_rem_pio2f+0x176>
 800815c:	f84a 6b04 	str.w	r6, [sl], #4
 8008160:	f109 0901 	add.w	r9, r9, #1
 8008164:	3504      	adds	r5, #4
 8008166:	e761      	b.n	800802c <__kernel_rem_pio2f+0x6c>
 8008168:	46ab      	mov	fp, r5
 800816a:	461e      	mov	r6, r3
 800816c:	f04f 0800 	mov.w	r8, #0
 8008170:	e7f1      	b.n	8008156 <__kernel_rem_pio2f+0x196>
 8008172:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8008176:	4658      	mov	r0, fp
 8008178:	f7f8 f908 	bl	800038c <__aeabi_fmul>
 800817c:	f7f8 fae2 	bl	8000744 <__aeabi_f2iz>
 8008180:	f7f8 f8b0 	bl	80002e4 <__aeabi_i2f>
 8008184:	4649      	mov	r1, r9
 8008186:	9009      	str	r0, [sp, #36]	@ 0x24
 8008188:	f7f8 f900 	bl	800038c <__aeabi_fmul>
 800818c:	4601      	mov	r1, r0
 800818e:	4658      	mov	r0, fp
 8008190:	f7f7 fff2 	bl	8000178 <__aeabi_fsub>
 8008194:	f7f8 fad6 	bl	8000744 <__aeabi_f2iz>
 8008198:	3d01      	subs	r5, #1
 800819a:	f846 0b04 	str.w	r0, [r6], #4
 800819e:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 80081a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081a4:	f7f7 ffea 	bl	800017c <__addsf3>
 80081a8:	4683      	mov	fp, r0
 80081aa:	e75a      	b.n	8008062 <__kernel_rem_pio2f+0xa2>
 80081ac:	d105      	bne.n	80081ba <__kernel_rem_pio2f+0x1fa>
 80081ae:	1e63      	subs	r3, r4, #1
 80081b0:	aa0a      	add	r2, sp, #40	@ 0x28
 80081b2:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80081b6:	11ed      	asrs	r5, r5, #7
 80081b8:	e788      	b.n	80080cc <__kernel_rem_pio2f+0x10c>
 80081ba:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80081be:	f7f8 fa97 	bl	80006f0 <__aeabi_fcmpge>
 80081c2:	4605      	mov	r5, r0
 80081c4:	bb90      	cbnz	r0, 800822c <__kernel_rem_pio2f+0x26c>
 80081c6:	2100      	movs	r1, #0
 80081c8:	4648      	mov	r0, r9
 80081ca:	f7f8 fa73 	bl	80006b4 <__aeabi_fcmpeq>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	f000 8090 	beq.w	80082f4 <__kernel_rem_pio2f+0x334>
 80081d4:	2200      	movs	r2, #0
 80081d6:	1e63      	subs	r3, r4, #1
 80081d8:	9901      	ldr	r1, [sp, #4]
 80081da:	428b      	cmp	r3, r1
 80081dc:	da4a      	bge.n	8008274 <__kernel_rem_pio2f+0x2b4>
 80081de:	2a00      	cmp	r2, #0
 80081e0:	d076      	beq.n	80082d0 <__kernel_rem_pio2f+0x310>
 80081e2:	3c01      	subs	r4, #1
 80081e4:	ab0a      	add	r3, sp, #40	@ 0x28
 80081e6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80081ea:	3f08      	subs	r7, #8
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d0f8      	beq.n	80081e2 <__kernel_rem_pio2f+0x222>
 80081f0:	4639      	mov	r1, r7
 80081f2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80081f6:	f7ff fe79 	bl	8007eec <scalbnf>
 80081fa:	46a2      	mov	sl, r4
 80081fc:	4607      	mov	r7, r0
 80081fe:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 8008202:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 8008206:	f1ba 0f00 	cmp.w	sl, #0
 800820a:	f280 80a1 	bge.w	8008350 <__kernel_rem_pio2f+0x390>
 800820e:	4627      	mov	r7, r4
 8008210:	2200      	movs	r2, #0
 8008212:	2f00      	cmp	r7, #0
 8008214:	f2c0 80cb 	blt.w	80083ae <__kernel_rem_pio2f+0x3ee>
 8008218:	a946      	add	r1, sp, #280	@ 0x118
 800821a:	4690      	mov	r8, r2
 800821c:	f04f 0a00 	mov.w	sl, #0
 8008220:	4b18      	ldr	r3, [pc, #96]	@ (8008284 <__kernel_rem_pio2f+0x2c4>)
 8008222:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8008226:	eba4 0907 	sub.w	r9, r4, r7
 800822a:	e0b4      	b.n	8008396 <__kernel_rem_pio2f+0x3d6>
 800822c:	2502      	movs	r5, #2
 800822e:	e74f      	b.n	80080d0 <__kernel_rem_pio2f+0x110>
 8008230:	f858 3b04 	ldr.w	r3, [r8], #4
 8008234:	f1ba 0f00 	cmp.w	sl, #0
 8008238:	d108      	bne.n	800824c <__kernel_rem_pio2f+0x28c>
 800823a:	b123      	cbz	r3, 8008246 <__kernel_rem_pio2f+0x286>
 800823c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8008240:	f848 3c04 	str.w	r3, [r8, #-4]
 8008244:	2301      	movs	r3, #1
 8008246:	469a      	mov	sl, r3
 8008248:	3201      	adds	r2, #1
 800824a:	e744      	b.n	80080d6 <__kernel_rem_pio2f+0x116>
 800824c:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8008250:	e7f6      	b.n	8008240 <__kernel_rem_pio2f+0x280>
 8008252:	1e62      	subs	r2, r4, #1
 8008254:	ab0a      	add	r3, sp, #40	@ 0x28
 8008256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800825a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800825e:	a90a      	add	r1, sp, #40	@ 0x28
 8008260:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008264:	e742      	b.n	80080ec <__kernel_rem_pio2f+0x12c>
 8008266:	1e62      	subs	r2, r4, #1
 8008268:	ab0a      	add	r3, sp, #40	@ 0x28
 800826a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800826e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008272:	e7f4      	b.n	800825e <__kernel_rem_pio2f+0x29e>
 8008274:	a90a      	add	r1, sp, #40	@ 0x28
 8008276:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800827a:	3b01      	subs	r3, #1
 800827c:	430a      	orrs	r2, r1
 800827e:	e7ab      	b.n	80081d8 <__kernel_rem_pio2f+0x218>
 8008280:	08008d44 	.word	0x08008d44
 8008284:	08008d18 	.word	0x08008d18
 8008288:	3301      	adds	r3, #1
 800828a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800828e:	2900      	cmp	r1, #0
 8008290:	d0fa      	beq.n	8008288 <__kernel_rem_pio2f+0x2c8>
 8008292:	9a04      	ldr	r2, [sp, #16]
 8008294:	a91e      	add	r1, sp, #120	@ 0x78
 8008296:	18a2      	adds	r2, r4, r2
 8008298:	1c66      	adds	r6, r4, #1
 800829a:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800829e:	441c      	add	r4, r3
 80082a0:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 80082a4:	42b4      	cmp	r4, r6
 80082a6:	f6ff aecf 	blt.w	8008048 <__kernel_rem_pio2f+0x88>
 80082aa:	9b07      	ldr	r3, [sp, #28]
 80082ac:	46ab      	mov	fp, r5
 80082ae:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80082b2:	f7f8 f817 	bl	80002e4 <__aeabi_i2f>
 80082b6:	f04f 0a00 	mov.w	sl, #0
 80082ba:	f04f 0800 	mov.w	r8, #0
 80082be:	6028      	str	r0, [r5, #0]
 80082c0:	9b03      	ldr	r3, [sp, #12]
 80082c2:	459a      	cmp	sl, r3
 80082c4:	dd07      	ble.n	80082d6 <__kernel_rem_pio2f+0x316>
 80082c6:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 80082ca:	3504      	adds	r5, #4
 80082cc:	3601      	adds	r6, #1
 80082ce:	e7e9      	b.n	80082a4 <__kernel_rem_pio2f+0x2e4>
 80082d0:	2301      	movs	r3, #1
 80082d2:	9a08      	ldr	r2, [sp, #32]
 80082d4:	e7d9      	b.n	800828a <__kernel_rem_pio2f+0x2ca>
 80082d6:	9b05      	ldr	r3, [sp, #20]
 80082d8:	f85b 0904 	ldr.w	r0, [fp], #-4
 80082dc:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 80082e0:	f7f8 f854 	bl	800038c <__aeabi_fmul>
 80082e4:	4601      	mov	r1, r0
 80082e6:	4640      	mov	r0, r8
 80082e8:	f7f7 ff48 	bl	800017c <__addsf3>
 80082ec:	f10a 0a01 	add.w	sl, sl, #1
 80082f0:	4680      	mov	r8, r0
 80082f2:	e7e5      	b.n	80082c0 <__kernel_rem_pio2f+0x300>
 80082f4:	9b06      	ldr	r3, [sp, #24]
 80082f6:	9a02      	ldr	r2, [sp, #8]
 80082f8:	4648      	mov	r0, r9
 80082fa:	1a99      	subs	r1, r3, r2
 80082fc:	f7ff fdf6 	bl	8007eec <scalbnf>
 8008300:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8008304:	4680      	mov	r8, r0
 8008306:	f7f8 f9f3 	bl	80006f0 <__aeabi_fcmpge>
 800830a:	b1f8      	cbz	r0, 800834c <__kernel_rem_pio2f+0x38c>
 800830c:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8008310:	4640      	mov	r0, r8
 8008312:	f7f8 f83b 	bl	800038c <__aeabi_fmul>
 8008316:	f7f8 fa15 	bl	8000744 <__aeabi_f2iz>
 800831a:	f7f7 ffe3 	bl	80002e4 <__aeabi_i2f>
 800831e:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8008322:	4681      	mov	r9, r0
 8008324:	f7f8 f832 	bl	800038c <__aeabi_fmul>
 8008328:	4601      	mov	r1, r0
 800832a:	4640      	mov	r0, r8
 800832c:	f7f7 ff24 	bl	8000178 <__aeabi_fsub>
 8008330:	f7f8 fa08 	bl	8000744 <__aeabi_f2iz>
 8008334:	ab0a      	add	r3, sp, #40	@ 0x28
 8008336:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800833a:	4648      	mov	r0, r9
 800833c:	3401      	adds	r4, #1
 800833e:	3708      	adds	r7, #8
 8008340:	f7f8 fa00 	bl	8000744 <__aeabi_f2iz>
 8008344:	ab0a      	add	r3, sp, #40	@ 0x28
 8008346:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800834a:	e751      	b.n	80081f0 <__kernel_rem_pio2f+0x230>
 800834c:	4640      	mov	r0, r8
 800834e:	e7f7      	b.n	8008340 <__kernel_rem_pio2f+0x380>
 8008350:	ab0a      	add	r3, sp, #40	@ 0x28
 8008352:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008356:	f7f7 ffc5 	bl	80002e4 <__aeabi_i2f>
 800835a:	4639      	mov	r1, r7
 800835c:	f7f8 f816 	bl	800038c <__aeabi_fmul>
 8008360:	4649      	mov	r1, r9
 8008362:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 8008366:	4638      	mov	r0, r7
 8008368:	f7f8 f810 	bl	800038c <__aeabi_fmul>
 800836c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008370:	4607      	mov	r7, r0
 8008372:	e748      	b.n	8008206 <__kernel_rem_pio2f+0x246>
 8008374:	f853 0b04 	ldr.w	r0, [r3], #4
 8008378:	f85b 1b04 	ldr.w	r1, [fp], #4
 800837c:	9203      	str	r2, [sp, #12]
 800837e:	9302      	str	r3, [sp, #8]
 8008380:	f7f8 f804 	bl	800038c <__aeabi_fmul>
 8008384:	4601      	mov	r1, r0
 8008386:	4640      	mov	r0, r8
 8008388:	f7f7 fef8 	bl	800017c <__addsf3>
 800838c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008390:	4680      	mov	r8, r0
 8008392:	f10a 0a01 	add.w	sl, sl, #1
 8008396:	9901      	ldr	r1, [sp, #4]
 8008398:	458a      	cmp	sl, r1
 800839a:	dc01      	bgt.n	80083a0 <__kernel_rem_pio2f+0x3e0>
 800839c:	45ca      	cmp	sl, r9
 800839e:	dde9      	ble.n	8008374 <__kernel_rem_pio2f+0x3b4>
 80083a0:	ab5a      	add	r3, sp, #360	@ 0x168
 80083a2:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 80083a6:	f849 8ca0 	str.w	r8, [r9, #-160]
 80083aa:	3f01      	subs	r7, #1
 80083ac:	e731      	b.n	8008212 <__kernel_rem_pio2f+0x252>
 80083ae:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	dc07      	bgt.n	80083c4 <__kernel_rem_pio2f+0x404>
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	dc4e      	bgt.n	8008456 <__kernel_rem_pio2f+0x496>
 80083b8:	d02e      	beq.n	8008418 <__kernel_rem_pio2f+0x458>
 80083ba:	f006 0007 	and.w	r0, r6, #7
 80083be:	b05b      	add	sp, #364	@ 0x16c
 80083c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d1f7      	bne.n	80083ba <__kernel_rem_pio2f+0x3fa>
 80083ca:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 80083ce:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 80083d2:	46b8      	mov	r8, r7
 80083d4:	46a2      	mov	sl, r4
 80083d6:	f1ba 0f00 	cmp.w	sl, #0
 80083da:	dc49      	bgt.n	8008470 <__kernel_rem_pio2f+0x4b0>
 80083dc:	46a1      	mov	r9, r4
 80083de:	f1b9 0f01 	cmp.w	r9, #1
 80083e2:	dc60      	bgt.n	80084a6 <__kernel_rem_pio2f+0x4e6>
 80083e4:	2000      	movs	r0, #0
 80083e6:	2c01      	cmp	r4, #1
 80083e8:	dc76      	bgt.n	80084d8 <__kernel_rem_pio2f+0x518>
 80083ea:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 80083ec:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 80083ee:	2d00      	cmp	r5, #0
 80083f0:	d178      	bne.n	80084e4 <__kernel_rem_pio2f+0x524>
 80083f2:	9900      	ldr	r1, [sp, #0]
 80083f4:	600a      	str	r2, [r1, #0]
 80083f6:	460a      	mov	r2, r1
 80083f8:	604b      	str	r3, [r1, #4]
 80083fa:	6090      	str	r0, [r2, #8]
 80083fc:	e7dd      	b.n	80083ba <__kernel_rem_pio2f+0x3fa>
 80083fe:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8008402:	f7f7 febb 	bl	800017c <__addsf3>
 8008406:	3c01      	subs	r4, #1
 8008408:	2c00      	cmp	r4, #0
 800840a:	daf8      	bge.n	80083fe <__kernel_rem_pio2f+0x43e>
 800840c:	b10d      	cbz	r5, 8008412 <__kernel_rem_pio2f+0x452>
 800840e:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8008412:	9b00      	ldr	r3, [sp, #0]
 8008414:	6018      	str	r0, [r3, #0]
 8008416:	e7d0      	b.n	80083ba <__kernel_rem_pio2f+0x3fa>
 8008418:	2000      	movs	r0, #0
 800841a:	af32      	add	r7, sp, #200	@ 0xc8
 800841c:	e7f4      	b.n	8008408 <__kernel_rem_pio2f+0x448>
 800841e:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8008422:	f7f7 feab 	bl	800017c <__addsf3>
 8008426:	f108 38ff 	add.w	r8, r8, #4294967295
 800842a:	f1b8 0f00 	cmp.w	r8, #0
 800842e:	daf6      	bge.n	800841e <__kernel_rem_pio2f+0x45e>
 8008430:	b1ad      	cbz	r5, 800845e <__kernel_rem_pio2f+0x49e>
 8008432:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 8008436:	9a00      	ldr	r2, [sp, #0]
 8008438:	4601      	mov	r1, r0
 800843a:	6013      	str	r3, [r2, #0]
 800843c:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800843e:	f7f7 fe9b 	bl	8000178 <__aeabi_fsub>
 8008442:	f04f 0801 	mov.w	r8, #1
 8008446:	4544      	cmp	r4, r8
 8008448:	da0b      	bge.n	8008462 <__kernel_rem_pio2f+0x4a2>
 800844a:	b10d      	cbz	r5, 8008450 <__kernel_rem_pio2f+0x490>
 800844c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8008450:	9b00      	ldr	r3, [sp, #0]
 8008452:	6058      	str	r0, [r3, #4]
 8008454:	e7b1      	b.n	80083ba <__kernel_rem_pio2f+0x3fa>
 8008456:	46a0      	mov	r8, r4
 8008458:	2000      	movs	r0, #0
 800845a:	af32      	add	r7, sp, #200	@ 0xc8
 800845c:	e7e5      	b.n	800842a <__kernel_rem_pio2f+0x46a>
 800845e:	4603      	mov	r3, r0
 8008460:	e7e9      	b.n	8008436 <__kernel_rem_pio2f+0x476>
 8008462:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8008466:	f7f7 fe89 	bl	800017c <__addsf3>
 800846a:	f108 0801 	add.w	r8, r8, #1
 800846e:	e7ea      	b.n	8008446 <__kernel_rem_pio2f+0x486>
 8008470:	f8d8 3000 	ldr.w	r3, [r8]
 8008474:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8008478:	4619      	mov	r1, r3
 800847a:	4610      	mov	r0, r2
 800847c:	9302      	str	r3, [sp, #8]
 800847e:	9201      	str	r2, [sp, #4]
 8008480:	f7f7 fe7c 	bl	800017c <__addsf3>
 8008484:	9a01      	ldr	r2, [sp, #4]
 8008486:	4601      	mov	r1, r0
 8008488:	4681      	mov	r9, r0
 800848a:	4610      	mov	r0, r2
 800848c:	f7f7 fe74 	bl	8000178 <__aeabi_fsub>
 8008490:	9b02      	ldr	r3, [sp, #8]
 8008492:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008496:	4619      	mov	r1, r3
 8008498:	f7f7 fe70 	bl	800017c <__addsf3>
 800849c:	f848 0904 	str.w	r0, [r8], #-4
 80084a0:	f8c8 9000 	str.w	r9, [r8]
 80084a4:	e797      	b.n	80083d6 <__kernel_rem_pio2f+0x416>
 80084a6:	f857 3c04 	ldr.w	r3, [r7, #-4]
 80084aa:	f8d7 a000 	ldr.w	sl, [r7]
 80084ae:	4618      	mov	r0, r3
 80084b0:	4651      	mov	r1, sl
 80084b2:	9301      	str	r3, [sp, #4]
 80084b4:	f7f7 fe62 	bl	800017c <__addsf3>
 80084b8:	9b01      	ldr	r3, [sp, #4]
 80084ba:	4601      	mov	r1, r0
 80084bc:	4680      	mov	r8, r0
 80084be:	4618      	mov	r0, r3
 80084c0:	f7f7 fe5a 	bl	8000178 <__aeabi_fsub>
 80084c4:	4651      	mov	r1, sl
 80084c6:	f7f7 fe59 	bl	800017c <__addsf3>
 80084ca:	f847 0904 	str.w	r0, [r7], #-4
 80084ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80084d2:	f8c7 8000 	str.w	r8, [r7]
 80084d6:	e782      	b.n	80083de <__kernel_rem_pio2f+0x41e>
 80084d8:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 80084dc:	f7f7 fe4e 	bl	800017c <__addsf3>
 80084e0:	3c01      	subs	r4, #1
 80084e2:	e780      	b.n	80083e6 <__kernel_rem_pio2f+0x426>
 80084e4:	9900      	ldr	r1, [sp, #0]
 80084e6:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 80084ea:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80084ee:	600a      	str	r2, [r1, #0]
 80084f0:	604b      	str	r3, [r1, #4]
 80084f2:	460a      	mov	r2, r1
 80084f4:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80084f8:	e77f      	b.n	80083fa <__kernel_rem_pio2f+0x43a>
 80084fa:	bf00      	nop

080084fc <floorf>:
 80084fc:	b570      	push	{r4, r5, r6, lr}
 80084fe:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8008502:	3d7f      	subs	r5, #127	@ 0x7f
 8008504:	2d16      	cmp	r5, #22
 8008506:	4601      	mov	r1, r0
 8008508:	4604      	mov	r4, r0
 800850a:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800850e:	dc26      	bgt.n	800855e <floorf+0x62>
 8008510:	2d00      	cmp	r5, #0
 8008512:	da0f      	bge.n	8008534 <floorf+0x38>
 8008514:	4917      	ldr	r1, [pc, #92]	@ (8008574 <floorf+0x78>)
 8008516:	f7f7 fe31 	bl	800017c <__addsf3>
 800851a:	2100      	movs	r1, #0
 800851c:	f7f8 f8f2 	bl	8000704 <__aeabi_fcmpgt>
 8008520:	b130      	cbz	r0, 8008530 <floorf+0x34>
 8008522:	2c00      	cmp	r4, #0
 8008524:	da23      	bge.n	800856e <floorf+0x72>
 8008526:	2e00      	cmp	r6, #0
 8008528:	4c13      	ldr	r4, [pc, #76]	@ (8008578 <floorf+0x7c>)
 800852a:	bf08      	it	eq
 800852c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008530:	4621      	mov	r1, r4
 8008532:	e01a      	b.n	800856a <floorf+0x6e>
 8008534:	4e11      	ldr	r6, [pc, #68]	@ (800857c <floorf+0x80>)
 8008536:	412e      	asrs	r6, r5
 8008538:	4230      	tst	r0, r6
 800853a:	d016      	beq.n	800856a <floorf+0x6e>
 800853c:	490d      	ldr	r1, [pc, #52]	@ (8008574 <floorf+0x78>)
 800853e:	f7f7 fe1d 	bl	800017c <__addsf3>
 8008542:	2100      	movs	r1, #0
 8008544:	f7f8 f8de 	bl	8000704 <__aeabi_fcmpgt>
 8008548:	2800      	cmp	r0, #0
 800854a:	d0f1      	beq.n	8008530 <floorf+0x34>
 800854c:	2c00      	cmp	r4, #0
 800854e:	bfbe      	ittt	lt
 8008550:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8008554:	412b      	asrlt	r3, r5
 8008556:	18e4      	addlt	r4, r4, r3
 8008558:	ea24 0406 	bic.w	r4, r4, r6
 800855c:	e7e8      	b.n	8008530 <floorf+0x34>
 800855e:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8008562:	d302      	bcc.n	800856a <floorf+0x6e>
 8008564:	f7f7 fe0a 	bl	800017c <__addsf3>
 8008568:	4601      	mov	r1, r0
 800856a:	4608      	mov	r0, r1
 800856c:	bd70      	pop	{r4, r5, r6, pc}
 800856e:	2400      	movs	r4, #0
 8008570:	e7de      	b.n	8008530 <floorf+0x34>
 8008572:	bf00      	nop
 8008574:	7149f2ca 	.word	0x7149f2ca
 8008578:	bf800000 	.word	0xbf800000
 800857c:	007fffff 	.word	0x007fffff

08008580 <_init>:
 8008580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008582:	bf00      	nop
 8008584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008586:	bc08      	pop	{r3}
 8008588:	469e      	mov	lr, r3
 800858a:	4770      	bx	lr

0800858c <_fini>:
 800858c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858e:	bf00      	nop
 8008590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008592:	bc08      	pop	{r3}
 8008594:	469e      	mov	lr, r3
 8008596:	4770      	bx	lr
