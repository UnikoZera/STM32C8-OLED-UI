
STM32PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c90  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08004d9c  08004d9c  00005d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051c8  080051c8  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080051c8  080051c8  000061c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051d0  080051d0  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051d0  080051d0  000061d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051d4  080051d4  000061d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080051d8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fa8  2000005c  08005234  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001004  08005234  00008004  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007701  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019a9  00000000  00000000  0000e786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  00010130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000723  00000000  00000000  00010a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017833  00000000  00000000  0001113b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b707  00000000  00000000  0002896e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008307d  00000000  00000000  00034075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b70f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a9c  00000000  00000000  000b7138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000b9bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d84 	.word	0x08004d84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004d84 	.word	0x08004d84

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	@ 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_fmul>:
 800037c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000380:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000384:	bf1e      	ittt	ne
 8000386:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038a:	ea92 0f0c 	teqne	r2, ip
 800038e:	ea93 0f0c 	teqne	r3, ip
 8000392:	d06f      	beq.n	8000474 <__aeabi_fmul+0xf8>
 8000394:	441a      	add	r2, r3
 8000396:	ea80 0c01 	eor.w	ip, r0, r1
 800039a:	0240      	lsls	r0, r0, #9
 800039c:	bf18      	it	ne
 800039e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a2:	d01e      	beq.n	80003e2 <__aeabi_fmul+0x66>
 80003a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b0:	fba0 3101 	umull	r3, r1, r0, r1
 80003b4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003bc:	bf3e      	ittt	cc
 80003be:	0049      	lslcc	r1, r1, #1
 80003c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c4:	005b      	lslcc	r3, r3, #1
 80003c6:	ea40 0001 	orr.w	r0, r0, r1
 80003ca:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ce:	2afd      	cmp	r2, #253	@ 0xfd
 80003d0:	d81d      	bhi.n	800040e <__aeabi_fmul+0x92>
 80003d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003da:	bf08      	it	eq
 80003dc:	f020 0001 	biceq.w	r0, r0, #1
 80003e0:	4770      	bx	lr
 80003e2:	f090 0f00 	teq	r0, #0
 80003e6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003ea:	bf08      	it	eq
 80003ec:	0249      	lsleq	r1, r1, #9
 80003ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f6:	3a7f      	subs	r2, #127	@ 0x7f
 80003f8:	bfc2      	ittt	gt
 80003fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000402:	4770      	bxgt	lr
 8000404:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	3a01      	subs	r2, #1
 800040e:	dc5d      	bgt.n	80004cc <__aeabi_fmul+0x150>
 8000410:	f112 0f19 	cmn.w	r2, #25
 8000414:	bfdc      	itt	le
 8000416:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800041a:	4770      	bxle	lr
 800041c:	f1c2 0200 	rsb	r2, r2, #0
 8000420:	0041      	lsls	r1, r0, #1
 8000422:	fa21 f102 	lsr.w	r1, r1, r2
 8000426:	f1c2 0220 	rsb	r2, r2, #32
 800042a:	fa00 fc02 	lsl.w	ip, r0, r2
 800042e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000432:	f140 0000 	adc.w	r0, r0, #0
 8000436:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043a:	bf08      	it	eq
 800043c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000440:	4770      	bx	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800044a:	bf02      	ittt	eq
 800044c:	0040      	lsleq	r0, r0, #1
 800044e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000452:	3a01      	subeq	r2, #1
 8000454:	d0f9      	beq.n	800044a <__aeabi_fmul+0xce>
 8000456:	ea40 000c 	orr.w	r0, r0, ip
 800045a:	f093 0f00 	teq	r3, #0
 800045e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000462:	bf02      	ittt	eq
 8000464:	0049      	lsleq	r1, r1, #1
 8000466:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800046a:	3b01      	subeq	r3, #1
 800046c:	d0f9      	beq.n	8000462 <__aeabi_fmul+0xe6>
 800046e:	ea41 010c 	orr.w	r1, r1, ip
 8000472:	e78f      	b.n	8000394 <__aeabi_fmul+0x18>
 8000474:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000478:	ea92 0f0c 	teq	r2, ip
 800047c:	bf18      	it	ne
 800047e:	ea93 0f0c 	teqne	r3, ip
 8000482:	d00a      	beq.n	800049a <__aeabi_fmul+0x11e>
 8000484:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000488:	bf18      	it	ne
 800048a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048e:	d1d8      	bne.n	8000442 <__aeabi_fmul+0xc6>
 8000490:	ea80 0001 	eor.w	r0, r0, r1
 8000494:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000498:	4770      	bx	lr
 800049a:	f090 0f00 	teq	r0, #0
 800049e:	bf17      	itett	ne
 80004a0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a4:	4608      	moveq	r0, r1
 80004a6:	f091 0f00 	teqne	r1, #0
 80004aa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004ae:	d014      	beq.n	80004da <__aeabi_fmul+0x15e>
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	d101      	bne.n	80004ba <__aeabi_fmul+0x13e>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d10f      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004ba:	ea93 0f0c 	teq	r3, ip
 80004be:	d103      	bne.n	80004c8 <__aeabi_fmul+0x14c>
 80004c0:	024b      	lsls	r3, r1, #9
 80004c2:	bf18      	it	ne
 80004c4:	4608      	movne	r0, r1
 80004c6:	d108      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d8:	4770      	bx	lr
 80004da:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004de:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_fdiv>:
 80004e4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004ec:	bf1e      	ittt	ne
 80004ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f2:	ea92 0f0c 	teqne	r2, ip
 80004f6:	ea93 0f0c 	teqne	r3, ip
 80004fa:	d069      	beq.n	80005d0 <__aeabi_fdiv+0xec>
 80004fc:	eba2 0203 	sub.w	r2, r2, r3
 8000500:	ea80 0c01 	eor.w	ip, r0, r1
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050a:	d037      	beq.n	800057c <__aeabi_fdiv+0x98>
 800050c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000510:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000514:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000518:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800051c:	428b      	cmp	r3, r1
 800051e:	bf38      	it	cc
 8000520:	005b      	lslcc	r3, r3, #1
 8000522:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000526:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800052a:	428b      	cmp	r3, r1
 800052c:	bf24      	itt	cs
 800052e:	1a5b      	subcs	r3, r3, r1
 8000530:	ea40 000c 	orrcs.w	r0, r0, ip
 8000534:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000538:	bf24      	itt	cs
 800053a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000542:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000546:	bf24      	itt	cs
 8000548:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800054c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000550:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000554:	bf24      	itt	cs
 8000556:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	bf18      	it	ne
 8000562:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000566:	d1e0      	bne.n	800052a <__aeabi_fdiv+0x46>
 8000568:	2afd      	cmp	r2, #253	@ 0xfd
 800056a:	f63f af50 	bhi.w	800040e <__aeabi_fmul+0x92>
 800056e:	428b      	cmp	r3, r1
 8000570:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000574:	bf08      	it	eq
 8000576:	f020 0001 	biceq.w	r0, r0, #1
 800057a:	4770      	bx	lr
 800057c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000580:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000584:	327f      	adds	r2, #127	@ 0x7f
 8000586:	bfc2      	ittt	gt
 8000588:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800058c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000590:	4770      	bxgt	lr
 8000592:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	3a01      	subs	r2, #1
 800059c:	e737      	b.n	800040e <__aeabi_fmul+0x92>
 800059e:	f092 0f00 	teq	r2, #0
 80005a2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a6:	bf02      	ittt	eq
 80005a8:	0040      	lsleq	r0, r0, #1
 80005aa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005ae:	3a01      	subeq	r2, #1
 80005b0:	d0f9      	beq.n	80005a6 <__aeabi_fdiv+0xc2>
 80005b2:	ea40 000c 	orr.w	r0, r0, ip
 80005b6:	f093 0f00 	teq	r3, #0
 80005ba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0049      	lsleq	r1, r1, #1
 80005c2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c6:	3b01      	subeq	r3, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fdiv+0xda>
 80005ca:	ea41 010c 	orr.w	r1, r1, ip
 80005ce:	e795      	b.n	80004fc <__aeabi_fdiv+0x18>
 80005d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d4:	ea92 0f0c 	teq	r2, ip
 80005d8:	d108      	bne.n	80005ec <__aeabi_fdiv+0x108>
 80005da:	0242      	lsls	r2, r0, #9
 80005dc:	f47f af7d 	bne.w	80004da <__aeabi_fmul+0x15e>
 80005e0:	ea93 0f0c 	teq	r3, ip
 80005e4:	f47f af70 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fmul+0x15e>
 80005ec:	ea93 0f0c 	teq	r3, ip
 80005f0:	d104      	bne.n	80005fc <__aeabi_fdiv+0x118>
 80005f2:	024b      	lsls	r3, r1, #9
 80005f4:	f43f af4c 	beq.w	8000490 <__aeabi_fmul+0x114>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e76e      	b.n	80004da <__aeabi_fmul+0x15e>
 80005fc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000600:	bf18      	it	ne
 8000602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000606:	d1ca      	bne.n	800059e <__aeabi_fdiv+0xba>
 8000608:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800060c:	f47f af5c 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 8000610:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000614:	f47f af3c 	bne.w	8000490 <__aeabi_fmul+0x114>
 8000618:	e75f      	b.n	80004da <__aeabi_fmul+0x15e>
 800061a:	bf00      	nop

0800061c <__gesf2>:
 800061c:	f04f 3cff 	mov.w	ip, #4294967295
 8000620:	e006      	b.n	8000630 <__cmpsf2+0x4>
 8000622:	bf00      	nop

08000624 <__lesf2>:
 8000624:	f04f 0c01 	mov.w	ip, #1
 8000628:	e002      	b.n	8000630 <__cmpsf2+0x4>
 800062a:	bf00      	nop

0800062c <__cmpsf2>:
 800062c:	f04f 0c01 	mov.w	ip, #1
 8000630:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000634:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000638:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800063c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000640:	bf18      	it	ne
 8000642:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000646:	d011      	beq.n	800066c <__cmpsf2+0x40>
 8000648:	b001      	add	sp, #4
 800064a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064e:	bf18      	it	ne
 8000650:	ea90 0f01 	teqne	r0, r1
 8000654:	bf58      	it	pl
 8000656:	ebb2 0003 	subspl.w	r0, r2, r3
 800065a:	bf88      	it	hi
 800065c:	17c8      	asrhi	r0, r1, #31
 800065e:	bf38      	it	cc
 8000660:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000664:	bf18      	it	ne
 8000666:	f040 0001 	orrne.w	r0, r0, #1
 800066a:	4770      	bx	lr
 800066c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000670:	d102      	bne.n	8000678 <__cmpsf2+0x4c>
 8000672:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000676:	d105      	bne.n	8000684 <__cmpsf2+0x58>
 8000678:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800067c:	d1e4      	bne.n	8000648 <__cmpsf2+0x1c>
 800067e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000682:	d0e1      	beq.n	8000648 <__cmpsf2+0x1c>
 8000684:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <__aeabi_cfrcmple>:
 800068c:	4684      	mov	ip, r0
 800068e:	4608      	mov	r0, r1
 8000690:	4661      	mov	r1, ip
 8000692:	e7ff      	b.n	8000694 <__aeabi_cfcmpeq>

08000694 <__aeabi_cfcmpeq>:
 8000694:	b50f      	push	{r0, r1, r2, r3, lr}
 8000696:	f7ff ffc9 	bl	800062c <__cmpsf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a4 <__aeabi_fcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cfcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cfcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cfcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffd2 	bl	800068c <__aeabi_cfrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc8 	bl	800068c <__aeabi_cfrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_fcmpun>:
 8000708:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800070c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000710:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000714:	d102      	bne.n	800071c <__aeabi_fcmpun+0x14>
 8000716:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800071a:	d108      	bne.n	800072e <__aeabi_fcmpun+0x26>
 800071c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000720:	d102      	bne.n	8000728 <__aeabi_fcmpun+0x20>
 8000722:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000726:	d102      	bne.n	800072e <__aeabi_fcmpun+0x26>
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	4770      	bx	lr
 800072e:	f04f 0001 	mov.w	r0, #1
 8000732:	4770      	bx	lr

08000734 <__aeabi_f2iz>:
 8000734:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000738:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800073c:	d30f      	bcc.n	800075e <__aeabi_f2iz+0x2a>
 800073e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000742:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000746:	d90d      	bls.n	8000764 <__aeabi_f2iz+0x30>
 8000748:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800074c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000750:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000754:	fa23 f002 	lsr.w	r0, r3, r2
 8000758:	bf18      	it	ne
 800075a:	4240      	negne	r0, r0
 800075c:	4770      	bx	lr
 800075e:	f04f 0000 	mov.w	r0, #0
 8000762:	4770      	bx	lr
 8000764:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000768:	d101      	bne.n	800076e <__aeabi_f2iz+0x3a>
 800076a:	0242      	lsls	r2, r0, #9
 800076c:	d105      	bne.n	800077a <__aeabi_f2iz+0x46>
 800076e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000772:	bf08      	it	eq
 8000774:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000778:	4770      	bx	lr
 800077a:	f04f 0000 	mov.w	r0, #0
 800077e:	4770      	bx	lr

08000780 <__aeabi_f2uiz>:
 8000780:	0042      	lsls	r2, r0, #1
 8000782:	d20e      	bcs.n	80007a2 <__aeabi_f2uiz+0x22>
 8000784:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000788:	d30b      	bcc.n	80007a2 <__aeabi_f2uiz+0x22>
 800078a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800078e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000792:	d409      	bmi.n	80007a8 <__aeabi_f2uiz+0x28>
 8000794:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000798:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800079c:	fa23 f002 	lsr.w	r0, r3, r2
 80007a0:	4770      	bx	lr
 80007a2:	f04f 0000 	mov.w	r0, #0
 80007a6:	4770      	bx	lr
 80007a8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80007ac:	d101      	bne.n	80007b2 <__aeabi_f2uiz+0x32>
 80007ae:	0242      	lsls	r2, r0, #9
 80007b0:	d102      	bne.n	80007b8 <__aeabi_f2uiz+0x38>
 80007b2:	f04f 30ff 	mov.w	r0, #4294967295
 80007b6:	4770      	bx	lr
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop

080007c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 0310 	add.w	r3, r7, #16
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000850 <MX_GPIO_Init+0x90>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a1d      	ldr	r2, [pc, #116]	@ (8000850 <MX_GPIO_Init+0x90>)
 80007da:	f043 0310 	orr.w	r3, r3, #16
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000850 <MX_GPIO_Init+0x90>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0310 	and.w	r3, r3, #16
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ec:	4b18      	ldr	r3, [pc, #96]	@ (8000850 <MX_GPIO_Init+0x90>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a17      	ldr	r2, [pc, #92]	@ (8000850 <MX_GPIO_Init+0x90>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <MX_GPIO_Init+0x90>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0304 	and.w	r3, r3, #4
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000804:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <MX_GPIO_Init+0x90>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a11      	ldr	r2, [pc, #68]	@ (8000850 <MX_GPIO_Init+0x90>)
 800080a:	f043 0308 	orr.w	r3, r3, #8
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <MX_GPIO_Init+0x90>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0308 	and.w	r3, r3, #8
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000822:	480c      	ldr	r0, [pc, #48]	@ (8000854 <MX_GPIO_Init+0x94>)
 8000824:	f001 ff4e 	bl	80026c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000828:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800082c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2302      	movs	r3, #2
 8000838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	4619      	mov	r1, r3
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <MX_GPIO_Init+0x94>)
 8000842:	f001 fdbb 	bl	80023bc <HAL_GPIO_Init>

}
 8000846:	bf00      	nop
 8000848:	3720      	adds	r7, #32
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000
 8000854:	40011000 	.word	0x40011000

08000858 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800085c:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <MX_I2C1_Init+0x50>)
 800085e:	4a13      	ldr	r2, [pc, #76]	@ (80008ac <MX_I2C1_Init+0x54>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000864:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <MX_I2C1_Init+0x58>)
 8000866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000868:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000876:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800087a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087c:	4b0a      	ldr	r3, [pc, #40]	@ (80008a8 <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <MX_I2C1_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000896:	f001 ff2d 	bl	80026f4 <HAL_I2C_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008a0:	f000 f91d 	bl	8000ade <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000078 	.word	0x20000078
 80008ac:	40005400 	.word	0x40005400
 80008b0:	00061a80 	.word	0x00061a80

080008b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a15      	ldr	r2, [pc, #84]	@ (8000924 <HAL_I2C_MspInit+0x70>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d123      	bne.n	800091c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d4:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <HAL_I2C_MspInit+0x74>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a13      	ldr	r2, [pc, #76]	@ (8000928 <HAL_I2C_MspInit+0x74>)
 80008da:	f043 0308 	orr.w	r3, r3, #8
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <HAL_I2C_MspInit+0x74>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0308 	and.w	r3, r3, #8
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008ec:	23c0      	movs	r3, #192	@ 0xc0
 80008ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f0:	2312      	movs	r3, #18
 80008f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	4619      	mov	r1, r3
 80008fe:	480b      	ldr	r0, [pc, #44]	@ (800092c <HAL_I2C_MspInit+0x78>)
 8000900:	f001 fd5c 	bl	80023bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000904:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <HAL_I2C_MspInit+0x74>)
 8000906:	69db      	ldr	r3, [r3, #28]
 8000908:	4a07      	ldr	r2, [pc, #28]	@ (8000928 <HAL_I2C_MspInit+0x74>)
 800090a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800090e:	61d3      	str	r3, [r2, #28]
 8000910:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <HAL_I2C_MspInit+0x74>)
 8000912:	69db      	ldr	r3, [r3, #28]
 8000914:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800091c:	bf00      	nop
 800091e:	3720      	adds	r7, #32
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40005400 	.word	0x40005400
 8000928:	40021000 	.word	0x40021000
 800092c:	40010c00 	.word	0x40010c00

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b087      	sub	sp, #28
 8000934:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f001 fbd7 	bl	80020e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 f88f 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093e:	f7ff ff3f 	bl	80007c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000942:	f7ff ff89 	bl	8000858 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init(); // 初始化OLED
 8000946:	f000 f9cf 	bl	8000ce8 <OLED_Init>
  OLED_InitBuffer(); // 初始化双缓冲
 800094a:	f000 f8cf 	bl	8000aec <OLED_InitBuffer>
  OLED_ClearBuffer(); // 清空缓冲区
 800094e:	f000 f8e1 	bl	8000b14 <OLED_ClearBuffer>

  // InitBlockAnimation(); // 初始化方块动画
  // AnimationLoop(); // 执行动画循环

  OLED_InitAnimationManager(&g_AnimationManager); // 初始化动画管理器
 8000952:	483b      	ldr	r0, [pc, #236]	@ (8000a40 <main+0x110>)
 8000954:	f001 f981 	bl	8001c5a <OLED_InitAnimationManager>
  OLED_MoveObject(&g_AnimationManager, "player", 10, 20, 10, 20, 1, EASE_OUT_BOUNCE); // 移动对象
 8000958:	2311      	movs	r3, #17
 800095a:	9303      	str	r3, [sp, #12]
 800095c:	2301      	movs	r3, #1
 800095e:	9302      	str	r3, [sp, #8]
 8000960:	4b38      	ldr	r3, [pc, #224]	@ (8000a44 <main+0x114>)
 8000962:	9301      	str	r3, [sp, #4]
 8000964:	4b38      	ldr	r3, [pc, #224]	@ (8000a48 <main+0x118>)
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	4b36      	ldr	r3, [pc, #216]	@ (8000a44 <main+0x114>)
 800096a:	4a37      	ldr	r2, [pc, #220]	@ (8000a48 <main+0x118>)
 800096c:	4937      	ldr	r1, [pc, #220]	@ (8000a4c <main+0x11c>)
 800096e:	4834      	ldr	r0, [pc, #208]	@ (8000a40 <main+0x110>)
 8000970:	f001 f9d4 	bl	8001d1c <OLED_MoveObject>
  OLED_MoveObject(&g_AnimationManager, "player1", 10, 20, 10, 20, 1, EASE_OUT_EXPO); // 移动对象
 8000974:	2308      	movs	r3, #8
 8000976:	9303      	str	r3, [sp, #12]
 8000978:	2301      	movs	r3, #1
 800097a:	9302      	str	r3, [sp, #8]
 800097c:	4b31      	ldr	r3, [pc, #196]	@ (8000a44 <main+0x114>)
 800097e:	9301      	str	r3, [sp, #4]
 8000980:	4b31      	ldr	r3, [pc, #196]	@ (8000a48 <main+0x118>)
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	4b2f      	ldr	r3, [pc, #188]	@ (8000a44 <main+0x114>)
 8000986:	4a30      	ldr	r2, [pc, #192]	@ (8000a48 <main+0x118>)
 8000988:	4931      	ldr	r1, [pc, #196]	@ (8000a50 <main+0x120>)
 800098a:	482d      	ldr	r0, [pc, #180]	@ (8000a40 <main+0x110>)
 800098c:	f001 f9c6 	bl	8001d1c <OLED_MoveObject>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {    
    #pragma region OLED_UI_SETTINGS // UI设置
    OLED_ClearBuffer();
 8000990:	f000 f8c0 	bl	8000b14 <OLED_ClearBuffer>

    OLED_DoTweenObject(&g_AnimationManager, "player", 100, 50, 1000, EASE_OUT_BOUNCE); // 移动对象
 8000994:	2311      	movs	r3, #17
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a54 <main+0x124>)
 80009a0:	4a2d      	ldr	r2, [pc, #180]	@ (8000a58 <main+0x128>)
 80009a2:	492a      	ldr	r1, [pc, #168]	@ (8000a4c <main+0x11c>)
 80009a4:	4826      	ldr	r0, [pc, #152]	@ (8000a40 <main+0x110>)
 80009a6:	f001 fa5a 	bl	8001e5e <OLED_DoTweenObject>
    OLED_DoTweenObject(&g_AnimationManager, "player1", 50, 50, 1000, EASE_OUT_EXPO); // 移动对象
 80009aa:	2308      	movs	r3, #8
 80009ac:	9301      	str	r3, [sp, #4]
 80009ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	4b27      	ldr	r3, [pc, #156]	@ (8000a54 <main+0x124>)
 80009b6:	4a27      	ldr	r2, [pc, #156]	@ (8000a54 <main+0x124>)
 80009b8:	4925      	ldr	r1, [pc, #148]	@ (8000a50 <main+0x120>)
 80009ba:	4821      	ldr	r0, [pc, #132]	@ (8000a40 <main+0x110>)
 80009bc:	f001 fa4f 	bl	8001e5e <OLED_DoTweenObject>
    if (OLED_GetObjectPosition(&g_AnimationManager, "player", &x, &y))
 80009c0:	463b      	mov	r3, r7
 80009c2:	1d3a      	adds	r2, r7, #4
 80009c4:	4921      	ldr	r1, [pc, #132]	@ (8000a4c <main+0x11c>)
 80009c6:	481e      	ldr	r0, [pc, #120]	@ (8000a40 <main+0x110>)
 80009c8:	f001 f984 	bl	8001cd4 <OLED_GetObjectPosition>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d010      	beq.n	80009f4 <main+0xc4>
    {
        OLED_DrawRectangle((uint8_t)x, (uint8_t)y, 20, 20);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fed3 	bl	8000780 <__aeabi_f2uiz>
 80009da:	4603      	mov	r3, r0
 80009dc:	b2dc      	uxtb	r4, r3
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fecd 	bl	8000780 <__aeabi_f2uiz>
 80009e6:	4603      	mov	r3, r0
 80009e8:	b2d9      	uxtb	r1, r3
 80009ea:	2314      	movs	r3, #20
 80009ec:	2214      	movs	r2, #20
 80009ee:	4620      	mov	r0, r4
 80009f0:	f001 fa81 	bl	8001ef6 <OLED_DrawRectangle>
    }

    if (OLED_GetObjectPosition(&g_AnimationManager, "player1", &x, &y))
 80009f4:	463b      	mov	r3, r7
 80009f6:	1d3a      	adds	r2, r7, #4
 80009f8:	4915      	ldr	r1, [pc, #84]	@ (8000a50 <main+0x120>)
 80009fa:	4811      	ldr	r0, [pc, #68]	@ (8000a40 <main+0x110>)
 80009fc:	f001 f96a 	bl	8001cd4 <OLED_GetObjectPosition>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d010      	beq.n	8000a28 <main+0xf8>
    {
        OLED_DrawRectangle((uint8_t)x, (uint8_t)y, 20, 20);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff feb9 	bl	8000780 <__aeabi_f2uiz>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	b2dc      	uxtb	r4, r3
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff feb3 	bl	8000780 <__aeabi_f2uiz>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	b2d9      	uxtb	r1, r3
 8000a1e:	2314      	movs	r3, #20
 8000a20:	2214      	movs	r2, #20
 8000a22:	4620      	mov	r0, r4
 8000a24:	f001 fa67 	bl	8001ef6 <OLED_DrawRectangle>
    // {
    //     OLED_GetObjectPosition(&g_AnimationManager, "player1", &x, &y); // 获取当前坐标
    //     OLED_MoveObject(&g_AnimationManager, "player1", x, y, 10, 20, 1000, EASE_OUT_BOUNCE); // 移动对象
    // }

    OLED_InvertArea(64, 16, 64, 48); //
 8000a28:	2330      	movs	r3, #48	@ 0x30
 8000a2a:	2240      	movs	r2, #64	@ 0x40
 8000a2c:	2110      	movs	r1, #16
 8000a2e:	2040      	movs	r0, #64	@ 0x40
 8000a30:	f000 f9b4 	bl	8000d9c <OLED_InvertArea>


    OLED_UpdateAnimationManager(&g_AnimationManager); // 更新动画管理器
 8000a34:	4802      	ldr	r0, [pc, #8]	@ (8000a40 <main+0x110>)
 8000a36:	f001 f9c2 	bl	8001dbe <OLED_UpdateAnimationManager>
    OLED_UpdateDisplayVSync(); // 更新显示
 8000a3a:	f000 f897 	bl	8000b6c <OLED_UpdateDisplayVSync>
    OLED_ClearBuffer();
 8000a3e:	e7a7      	b.n	8000990 <main+0x60>
 8000a40:	200008d4 	.word	0x200008d4
 8000a44:	41a00000 	.word	0x41a00000
 8000a48:	41200000 	.word	0x41200000
 8000a4c:	08004d9c 	.word	0x08004d9c
 8000a50:	08004da4 	.word	0x08004da4
 8000a54:	42480000 	.word	0x42480000
 8000a58:	42c80000 	.word	0x42c80000

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b090      	sub	sp, #64	@ 0x40
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0318 	add.w	r3, r7, #24
 8000a66:	2228      	movs	r2, #40	@ 0x28
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f002 feda 	bl	8003824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a82:	2301      	movs	r3, #1
 8000a84:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a86:	2310      	movs	r3, #16
 8000a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a92:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a98:	f107 0318 	add.w	r3, r7, #24
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 fac5 	bl	800302c <HAL_RCC_OscConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000aa8:	f000 f819 	bl	8000ade <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aac:	230f      	movs	r3, #15
 8000aae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ab8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000abc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 fd32 	bl	8003530 <HAL_RCC_ClockConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000ad2:	f000 f804 	bl	8000ade <Error_Handler>
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	3740      	adds	r7, #64	@ 0x40
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae2:	b672      	cpsid	i
}
 8000ae4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae6:	bf00      	nop
 8000ae8:	e7fd      	b.n	8000ae6 <Error_Handler+0x8>
	...

08000aec <OLED_InitBuffer>:
    0x44, 0x64, 0x54, 0x4C, 0x44, 0x00  // z (122)
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000af0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000af4:	2100      	movs	r1, #0
 8000af6:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <OLED_InitBuffer+0x20>)
 8000af8:	f002 fe94 	bl	8003824 <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 8000afc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b00:	2100      	movs	r1, #0
 8000b02:	4803      	ldr	r0, [pc, #12]	@ (8000b10 <OLED_InitBuffer+0x24>)
 8000b04:	f002 fe8e 	bl	8003824 <memset>
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200000d4 	.word	0x200000d4
 8000b10:	200004d4 	.word	0x200004d4

08000b14 <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000b18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4802      	ldr	r0, [pc, #8]	@ (8000b28 <OLED_ClearBuffer+0x14>)
 8000b20:	f002 fe80 	bl	8003824 <memset>
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200000d4 	.word	0x200000d4

08000b2c <OLED_IsBusy>:

uint8_t OLED_IsBusy(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
    // 如果标记为忙，检查是否已经过了足够时间
    if (oled_update_flag)
 8000b32:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <OLED_IsBusy+0x38>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d00b      	beq.n	8000b54 <OLED_IsBusy+0x28>
    {
        // SSD1315/SSD1306 典型帧率约为60Hz，每帧约16.7ms
        uint32_t current_time = HAL_GetTick();
 8000b3c:	f001 fb2c 	bl	8002198 <HAL_GetTick>
 8000b40:	6078      	str	r0, [r7, #4]
        if (current_time - oled_last_update_time >= 2)
 8000b42:	4b09      	ldr	r3, [pc, #36]	@ (8000b68 <OLED_IsBusy+0x3c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d902      	bls.n	8000b54 <OLED_IsBusy+0x28>
        {
            oled_update_flag = 0; // 已经过了足够时间，不再忙
 8000b4e:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <OLED_IsBusy+0x38>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
        }
    }
    return oled_update_flag;
 8000b54:	4b03      	ldr	r3, [pc, #12]	@ (8000b64 <OLED_IsBusy+0x38>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b2db      	uxtb	r3, r3
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200000d0 	.word	0x200000d0
 8000b68:	200000cc 	.word	0x200000cc

08000b6c <OLED_UpdateDisplayVSync>:

void OLED_UpdateDisplayVSync(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b0a4      	sub	sp, #144	@ 0x90
 8000b70:	af02      	add	r7, sp, #8
    while (OLED_IsBusy()) 
 8000b72:	bf00      	nop
 8000b74:	f7ff ffda 	bl	8000b2c <OLED_IsBusy>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1fa      	bne.n	8000b74 <OLED_UpdateDisplayVSync+0x8>
    {

    }
    oled_update_flag = 1;
 8000b7e:	4b23      	ldr	r3, [pc, #140]	@ (8000c0c <OLED_UpdateDisplayVSync+0xa0>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8000b84:	f001 fb08 	bl	8002198 <HAL_GetTick>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	4a21      	ldr	r2, [pc, #132]	@ (8000c10 <OLED_UpdateDisplayVSync+0xa4>)
 8000b8c:	6013      	str	r3, [r2, #0]

    // 交换前后缓冲区
    memcpy(OLED_FrontBuffer, OLED_BackBuffer, 128 * 8); // 复制当前缓冲区到前缓冲区
 8000b8e:	4a21      	ldr	r2, [pc, #132]	@ (8000c14 <OLED_UpdateDisplayVSync+0xa8>)
 8000b90:	4b21      	ldr	r3, [pc, #132]	@ (8000c18 <OLED_UpdateDisplayVSync+0xac>)
 8000b92:	4610      	mov	r0, r2
 8000b94:	4619      	mov	r1, r3
 8000b96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	f002 fe88 	bl	80038b0 <memcpy>

    // 将前缓冲区发送到显示器
    uint8_t data[129]; // 数据缓冲区 (包括控制字节)
    data[0] = 0x40;    // 数据控制字节
 8000ba0:	2340      	movs	r3, #64	@ 0x40
 8000ba2:	713b      	strb	r3, [r7, #4]

    // 逐页发送数据，每页一次性发送整行
    for (uint8_t page = 0; page < 8; page++)
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000baa:	e025      	b.n	8000bf8 <OLED_UpdateDisplayVSync+0x8c>
    {
        // 设置页地址
        OLED_SendCommand(0xB0 + page);
 8000bac:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000bb0:	3b50      	subs	r3, #80	@ 0x50
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 f87d 	bl	8000cb4 <OLED_SendCommand>
        // 设置列起始地址
        OLED_SendCommand(0x00); // 低位地址
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f000 f87a 	bl	8000cb4 <OLED_SendCommand>
        OLED_SendCommand(0x10); // 高位地址
 8000bc0:	2010      	movs	r0, #16
 8000bc2:	f000 f877 	bl	8000cb4 <OLED_SendCommand>

        // 复制当前页到发送缓冲区
        memcpy(data + 1, &OLED_FrontBuffer[page * OLED_WIDTH], OLED_WIDTH);
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	3301      	adds	r3, #1
 8000bca:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8000bce:	01d2      	lsls	r2, r2, #7
 8000bd0:	4910      	ldr	r1, [pc, #64]	@ (8000c14 <OLED_UpdateDisplayVSync+0xa8>)
 8000bd2:	4411      	add	r1, r2
 8000bd4:	2280      	movs	r2, #128	@ 0x80
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 fe6a 	bl	80038b0 <memcpy>

        // 发送一整行数据
        HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, OLED_WIDTH + 1, HAL_MAX_DELAY);
 8000bdc:	1d3a      	adds	r2, r7, #4
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	2381      	movs	r3, #129	@ 0x81
 8000be6:	2178      	movs	r1, #120	@ 0x78
 8000be8:	480c      	ldr	r0, [pc, #48]	@ (8000c1c <OLED_UpdateDisplayVSync+0xb0>)
 8000bea:	f001 fec7 	bl	800297c <HAL_I2C_Master_Transmit>
    for (uint8_t page = 0; page < 8; page++)
 8000bee:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000bf8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000bfc:	2b07      	cmp	r3, #7
 8000bfe:	d9d5      	bls.n	8000bac <OLED_UpdateDisplayVSync+0x40>
    }
}
 8000c00:	bf00      	nop
 8000c02:	bf00      	nop
 8000c04:	3788      	adds	r7, #136	@ 0x88
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200000d0 	.word	0x200000d0
 8000c10:	200000cc 	.word	0x200000cc
 8000c14:	200004d4 	.word	0x200004d4
 8000c18:	200000d4 	.word	0x200000d4
 8000c1c:	20000078 	.word	0x20000078

08000c20 <OLED_WritePixel>:

void OLED_WritePixel(uint8_t x, uint8_t y, uint8_t color)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	71bb      	strb	r3, [r7, #6]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	717b      	strb	r3, [r7, #5]
    // 边界检查
    if (x >= 128 || y >= 64)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db34      	blt.n	8000ca4 <OLED_WritePixel+0x84>
 8000c3a:	79bb      	ldrb	r3, [r7, #6]
 8000c3c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c3e:	d831      	bhi.n	8000ca4 <OLED_WritePixel+0x84>
        return;

    // 计算像素所在的字节位置
    uint16_t byte_index = x + (y / 8) * 128;
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	79bb      	ldrb	r3, [r7, #6]
 8000c46:	08db      	lsrs	r3, r3, #3
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	01db      	lsls	r3, r3, #7
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	4413      	add	r3, r2
 8000c50:	81fb      	strh	r3, [r7, #14]
    uint8_t bit_position = y % 8;
 8000c52:	79bb      	ldrb	r3, [r7, #6]
 8000c54:	f003 0307 	and.w	r3, r3, #7
 8000c58:	737b      	strb	r3, [r7, #13]

    if (color) // 如果需要点亮像素
 8000c5a:	797b      	ldrb	r3, [r7, #5]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d00f      	beq.n	8000c80 <OLED_WritePixel+0x60>
        OLED_BackBuffer[byte_index] |= (1 << bit_position);
 8000c60:	89fb      	ldrh	r3, [r7, #14]
 8000c62:	4a13      	ldr	r2, [pc, #76]	@ (8000cb0 <OLED_WritePixel+0x90>)
 8000c64:	5cd3      	ldrb	r3, [r2, r3]
 8000c66:	b25a      	sxtb	r2, r3
 8000c68:	7b7b      	ldrb	r3, [r7, #13]
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	4313      	orrs	r3, r2
 8000c74:	b25a      	sxtb	r2, r3
 8000c76:	89fb      	ldrh	r3, [r7, #14]
 8000c78:	b2d1      	uxtb	r1, r2
 8000c7a:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb0 <OLED_WritePixel+0x90>)
 8000c7c:	54d1      	strb	r1, [r2, r3]
 8000c7e:	e012      	b.n	8000ca6 <OLED_WritePixel+0x86>
    else // 如果需要熄灭像素
        OLED_BackBuffer[byte_index] &= ~(1 << bit_position);
 8000c80:	89fb      	ldrh	r3, [r7, #14]
 8000c82:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb0 <OLED_WritePixel+0x90>)
 8000c84:	5cd3      	ldrb	r3, [r2, r3]
 8000c86:	b25a      	sxtb	r2, r3
 8000c88:	7b7b      	ldrb	r3, [r7, #13]
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c90:	b25b      	sxtb	r3, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	b25b      	sxtb	r3, r3
 8000c96:	4013      	ands	r3, r2
 8000c98:	b25a      	sxtb	r2, r3
 8000c9a:	89fb      	ldrh	r3, [r7, #14]
 8000c9c:	b2d1      	uxtb	r1, r2
 8000c9e:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <OLED_WritePixel+0x90>)
 8000ca0:	54d1      	strb	r1, [r2, r3]
 8000ca2:	e000      	b.n	8000ca6 <OLED_WritePixel+0x86>
        return;
 8000ca4:	bf00      	nop
}
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	200000d4 	.word	0x200000d4

08000cb4 <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8000cc6:	f107 020c 	add.w	r2, r7, #12
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	2178      	movs	r1, #120	@ 0x78
 8000cd4:	4803      	ldr	r0, [pc, #12]	@ (8000ce4 <OLED_SendCommand+0x30>)
 8000cd6:	f001 fe51 	bl	800297c <HAL_I2C_Master_Transmit>
}
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000078 	.word	0x20000078

08000ce8 <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 8000cec:	2064      	movs	r0, #100	@ 0x64
 8000cee:	f001 fa5d 	bl	80021ac <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 8000cf2:	20ae      	movs	r0, #174	@ 0xae
 8000cf4:	f7ff ffde 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 8000cf8:	20d5      	movs	r0, #213	@ 0xd5
 8000cfa:	f7ff ffdb 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 8000cfe:	2080      	movs	r0, #128	@ 0x80
 8000d00:	f7ff ffd8 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8000d04:	20a8      	movs	r0, #168	@ 0xa8
 8000d06:	f7ff ffd5 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 8000d0a:	203f      	movs	r0, #63	@ 0x3f
 8000d0c:	f7ff ffd2 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8000d10:	20d3      	movs	r0, #211	@ 0xd3
 8000d12:	f7ff ffcf 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff ffcc 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8000d1c:	2040      	movs	r0, #64	@ 0x40
 8000d1e:	f7ff ffc9 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 8000d22:	208d      	movs	r0, #141	@ 0x8d
 8000d24:	f7ff ffc6 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 8000d28:	2014      	movs	r0, #20
 8000d2a:	f7ff ffc3 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 8000d2e:	2020      	movs	r0, #32
 8000d30:	f7ff ffc0 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 8000d34:	2000      	movs	r0, #0
 8000d36:	f7ff ffbd 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 8000d3a:	20a1      	movs	r0, #161	@ 0xa1
 8000d3c:	f7ff ffba 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 8000d40:	20c8      	movs	r0, #200	@ 0xc8
 8000d42:	f7ff ffb7 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 8000d46:	20da      	movs	r0, #218	@ 0xda
 8000d48:	f7ff ffb4 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8000d4c:	2012      	movs	r0, #18
 8000d4e:	f7ff ffb1 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 8000d52:	2081      	movs	r0, #129	@ 0x81
 8000d54:	f7ff ffae 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 8000d58:	20cf      	movs	r0, #207	@ 0xcf
 8000d5a:	f7ff ffab 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 8000d5e:	20d9      	movs	r0, #217	@ 0xd9
 8000d60:	f7ff ffa8 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 8000d64:	20f1      	movs	r0, #241	@ 0xf1
 8000d66:	f7ff ffa5 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 8000d6a:	20db      	movs	r0, #219	@ 0xdb
 8000d6c:	f7ff ffa2 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 8000d70:	2030      	movs	r0, #48	@ 0x30
 8000d72:	f7ff ff9f 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 8000d76:	20a4      	movs	r0, #164	@ 0xa4
 8000d78:	f7ff ff9c 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 8000d7c:	20a6      	movs	r0, #166	@ 0xa6
 8000d7e:	f7ff ff99 	bl	8000cb4 <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 8000d82:	202e      	movs	r0, #46	@ 0x2e
 8000d84:	f7ff ff96 	bl	8000cb4 <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 8000d88:	f7ff feb0 	bl	8000aec <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 8000d8c:	f7ff fec2 	bl	8000b14 <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 8000d90:	20af      	movs	r0, #175	@ 0xaf
 8000d92:	f7ff ff8f 	bl	8000cb4 <OLED_SendCommand>
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <OLED_InvertArea>:

// 区域反色功能 - 将指定矩形区域内的像素颜色反转 //! UPDATEDISPLAY REQUIRED
void OLED_InvertArea(uint8_t x, uint8_t y, uint8_t width, uint8_t height)
{
 8000d9c:	b490      	push	{r4, r7}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4604      	mov	r4, r0
 8000da4:	4608      	mov	r0, r1
 8000da6:	4611      	mov	r1, r2
 8000da8:	461a      	mov	r2, r3
 8000daa:	4623      	mov	r3, r4
 8000dac:	71fb      	strb	r3, [r7, #7]
 8000dae:	4603      	mov	r3, r0
 8000db0:	71bb      	strb	r3, [r7, #6]
 8000db2:	460b      	mov	r3, r1
 8000db4:	717b      	strb	r3, [r7, #5]
 8000db6:	4613      	mov	r3, r2
 8000db8:	713b      	strb	r3, [r7, #4]
    // 边界检查和裁剪
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT || width == 0 || height == 0)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	db5a      	blt.n	8000e78 <OLED_InvertArea+0xdc>
 8000dc2:	79bb      	ldrb	r3, [r7, #6]
 8000dc4:	2b3f      	cmp	r3, #63	@ 0x3f
 8000dc6:	d857      	bhi.n	8000e78 <OLED_InvertArea+0xdc>
 8000dc8:	797b      	ldrb	r3, [r7, #5]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d054      	beq.n	8000e78 <OLED_InvertArea+0xdc>
 8000dce:	793b      	ldrb	r3, [r7, #4]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d051      	beq.n	8000e78 <OLED_InvertArea+0xdc>
        return;
    if (x + width > OLED_WIDTH)
 8000dd4:	79fa      	ldrb	r2, [r7, #7]
 8000dd6:	797b      	ldrb	r3, [r7, #5]
 8000dd8:	4413      	add	r3, r2
 8000dda:	2b80      	cmp	r3, #128	@ 0x80
 8000ddc:	dd06      	ble.n	8000dec <OLED_InvertArea+0x50>
        width = OLED_WIDTH - x;
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8000de4:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8000de8:	3380      	adds	r3, #128	@ 0x80
 8000dea:	717b      	strb	r3, [r7, #5]
    if (y + height > OLED_HEIGHT)
 8000dec:	79ba      	ldrb	r2, [r7, #6]
 8000dee:	793b      	ldrb	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	2b40      	cmp	r3, #64	@ 0x40
 8000df4:	dd03      	ble.n	8000dfe <OLED_InvertArea+0x62>
        height = OLED_HEIGHT - y;
 8000df6:	79bb      	ldrb	r3, [r7, #6]
 8000df8:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000dfc:	713b      	strb	r3, [r7, #4]

    uint8_t end_x = x + width - 1;
 8000dfe:	79fa      	ldrb	r2, [r7, #7]
 8000e00:	797b      	ldrb	r3, [r7, #5]
 8000e02:	4413      	add	r3, r2
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	3b01      	subs	r3, #1
 8000e08:	737b      	strb	r3, [r7, #13]
    uint8_t end_y = y + height - 1;
 8000e0a:	79ba      	ldrb	r2, [r7, #6]
 8000e0c:	793b      	ldrb	r3, [r7, #4]
 8000e0e:	4413      	add	r3, r2
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	3b01      	subs	r3, #1
 8000e14:	733b      	strb	r3, [r7, #12]

    // 遍历区域内的每个像素并反转
    for (uint8_t j = y; j <= end_y; j++)
 8000e16:	79bb      	ldrb	r3, [r7, #6]
 8000e18:	73fb      	strb	r3, [r7, #15]
 8000e1a:	e028      	b.n	8000e6e <OLED_InvertArea+0xd2>
    {
        for (uint8_t i = x; i <= end_x; i++)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	73bb      	strb	r3, [r7, #14]
 8000e20:	e01e      	b.n	8000e60 <OLED_InvertArea+0xc4>
        {
            // 计算当前像素在缓冲区中的位置
            uint16_t byte_index = i + (j / 8) * OLED_WIDTH;
 8000e22:	7bbb      	ldrb	r3, [r7, #14]
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	08db      	lsrs	r3, r3, #3
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	01db      	lsls	r3, r3, #7
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	4413      	add	r3, r2
 8000e32:	817b      	strh	r3, [r7, #10]
            uint8_t bit_position = j % 8;
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	727b      	strb	r3, [r7, #9]

            // 反转该像素（将0变为1，1变为0）
            OLED_BackBuffer[byte_index] ^= (1 << bit_position);
 8000e3c:	897b      	ldrh	r3, [r7, #10]
 8000e3e:	4a11      	ldr	r2, [pc, #68]	@ (8000e84 <OLED_InvertArea+0xe8>)
 8000e40:	5cd3      	ldrb	r3, [r2, r3]
 8000e42:	b25a      	sxtb	r2, r3
 8000e44:	7a7b      	ldrb	r3, [r7, #9]
 8000e46:	2101      	movs	r1, #1
 8000e48:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	4053      	eors	r3, r2
 8000e50:	b25a      	sxtb	r2, r3
 8000e52:	897b      	ldrh	r3, [r7, #10]
 8000e54:	b2d1      	uxtb	r1, r2
 8000e56:	4a0b      	ldr	r2, [pc, #44]	@ (8000e84 <OLED_InvertArea+0xe8>)
 8000e58:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = x; i <= end_x; i++)
 8000e5a:	7bbb      	ldrb	r3, [r7, #14]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	73bb      	strb	r3, [r7, #14]
 8000e60:	7bba      	ldrb	r2, [r7, #14]
 8000e62:	7b7b      	ldrb	r3, [r7, #13]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d9dc      	bls.n	8000e22 <OLED_InvertArea+0x86>
    for (uint8_t j = y; j <= end_y; j++)
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	73fb      	strb	r3, [r7, #15]
 8000e6e:	7bfa      	ldrb	r2, [r7, #15]
 8000e70:	7b3b      	ldrb	r3, [r7, #12]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d9d2      	bls.n	8000e1c <OLED_InvertArea+0x80>
 8000e76:	e000      	b.n	8000e7a <OLED_InvertArea+0xde>
        return;
 8000e78:	bf00      	nop
        }
    }
}
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc90      	pop	{r4, r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	200000d4 	.word	0x200000d4

08000e88 <EaseLinear>:
#include "stdbool.h"

#pragma region TWEENS // 动画缓动函数全部在这里定义

static float EaseLinear(float t)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
    return t;
 8000e90:	687b      	ldr	r3, [r7, #4]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <EaseInQuad>:

static float EaseInQuad(float t)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
    return t * t;
 8000ea4:	6879      	ldr	r1, [r7, #4]
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff fa68 	bl	800037c <__aeabi_fmul>
 8000eac:	4603      	mov	r3, r0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <EaseOutQuad>:

static float EaseOutQuad(float t)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
    return t * (2 - t);
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000ec4:	f7ff f950 	bl	8000168 <__aeabi_fsub>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fa55 	bl	800037c <__aeabi_fmul>
 8000ed2:	4603      	mov	r3, r0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <EaseInOutQuad>:

static float EaseInOutQuad(float t)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 2 * t * t : -1 + (4 - 2 * t) * t;
 8000ee4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff fbe5 	bl	80006b8 <__aeabi_fcmplt>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d00b      	beq.n	8000f0c <EaseInOutQuad+0x30>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff f937 	bl	800016c <__addsf3>
 8000efe:	4603      	mov	r3, r0
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fa3a 	bl	800037c <__aeabi_fmul>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	e016      	b.n	8000f3a <EaseInOutQuad+0x5e>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff f92b 	bl	800016c <__addsf3>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 8000f1e:	f7ff f923 	bl	8000168 <__aeabi_fsub>
 8000f22:	4603      	mov	r3, r0
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fa28 	bl	800037c <__aeabi_fmul>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff f918 	bl	8000168 <__aeabi_fsub>
 8000f38:	4603      	mov	r3, r0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <EaseInCubic>:

static float EaseInCubic(float t)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
    return t * t * t;
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff fa15 	bl	800037c <__aeabi_fmul>
 8000f52:	4603      	mov	r3, r0
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fa10 	bl	800037c <__aeabi_fmul>
 8000f5c:	4603      	mov	r3, r0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <EaseOutCubic>:

static float EaseOutCubic(float t)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b084      	sub	sp, #16
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
    float t1 = t - 1;
 8000f6e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff f8f8 	bl	8000168 <__aeabi_fsub>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60fb      	str	r3, [r7, #12]
    return t1 * t1 * t1 + 1;
 8000f7c:	68f9      	ldr	r1, [r7, #12]
 8000f7e:	68f8      	ldr	r0, [r7, #12]
 8000f80:	f7ff f9fc 	bl	800037c <__aeabi_fmul>
 8000f84:	4603      	mov	r3, r0
 8000f86:	68f9      	ldr	r1, [r7, #12]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff f9f7 	bl	800037c <__aeabi_fmul>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff f8e9 	bl	800016c <__addsf3>
 8000f9a:	4603      	mov	r3, r0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <EaseInOutCubic>:

static float EaseInOutCubic(float t)
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
 8000fac:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff fb81 	bl	80006b8 <__aeabi_fcmplt>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d010      	beq.n	8000fde <EaseInOutCubic+0x3a>
 8000fbc:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff f9db 	bl	800037c <__aeabi_fmul>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff f9d6 	bl	800037c <__aeabi_fmul>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff f9d1 	bl	800037c <__aeabi_fmul>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	e02f      	b.n	800103e <EaseInOutCubic+0x9a>
 8000fde:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff f8c0 	bl	8000168 <__aeabi_fsub>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461c      	mov	r4, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff f8bb 	bl	800016c <__addsf3>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff f8b3 	bl	8000168 <__aeabi_fsub>
 8001002:	4603      	mov	r3, r0
 8001004:	4619      	mov	r1, r3
 8001006:	4620      	mov	r0, r4
 8001008:	f7ff f9b8 	bl	800037c <__aeabi_fmul>
 800100c:	4603      	mov	r3, r0
 800100e:	461c      	mov	r4, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4619      	mov	r1, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff f8a9 	bl	800016c <__addsf3>
 800101a:	4603      	mov	r3, r0
 800101c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff f8a1 	bl	8000168 <__aeabi_fsub>
 8001026:	4603      	mov	r3, r0
 8001028:	4619      	mov	r1, r3
 800102a:	4620      	mov	r0, r4
 800102c:	f7ff f9a6 	bl	800037c <__aeabi_fmul>
 8001030:	4603      	mov	r3, r0
 8001032:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff f898 	bl	800016c <__addsf3>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	bd90      	pop	{r4, r7, pc}
	...

08001048 <EaseInExpo>:

// 在现有EaseType_t枚举中添加这些新类型
// 指数缓动
static float EaseInExpo(float t)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    return (t == 0) ? 0 : powf(2, 10 * (t - 1));
 8001050:	f04f 0100 	mov.w	r1, #0
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff fb25 	bl	80006a4 <__aeabi_fcmpeq>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d111      	bne.n	8001084 <EaseInExpo+0x3c>
 8001060:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff f87f 	bl	8000168 <__aeabi_fsub>
 800106a:	4603      	mov	r3, r0
 800106c:	4908      	ldr	r1, [pc, #32]	@ (8001090 <EaseInExpo+0x48>)
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff f984 	bl	800037c <__aeabi_fmul>
 8001074:	4603      	mov	r3, r0
 8001076:	4619      	mov	r1, r3
 8001078:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800107c:	f002 fc26 	bl	80038cc <powf>
 8001080:	4603      	mov	r3, r0
 8001082:	e001      	b.n	8001088 <EaseInExpo+0x40>
 8001084:	f04f 0300 	mov.w	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	41200000 	.word	0x41200000

08001094 <EaseOutExpo>:

static float EaseOutExpo(float t)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
    return (t == 1) ? 1 : (1 - powf(2, -10 * t));
 800109c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff faff 	bl	80006a4 <__aeabi_fcmpeq>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d111      	bne.n	80010d0 <EaseOutExpo+0x3c>
 80010ac:	490b      	ldr	r1, [pc, #44]	@ (80010dc <EaseOutExpo+0x48>)
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff f964 	bl	800037c <__aeabi_fmul>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4619      	mov	r1, r3
 80010b8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80010bc:	f002 fc06 	bl	80038cc <powf>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4619      	mov	r1, r3
 80010c4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80010c8:	f7ff f84e 	bl	8000168 <__aeabi_fsub>
 80010cc:	4603      	mov	r3, r0
 80010ce:	e001      	b.n	80010d4 <EaseOutExpo+0x40>
 80010d0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	c1200000 	.word	0xc1200000

080010e0 <EaseInOutExpo>:

static float EaseInOutExpo(float t)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
    if (t == 0)
 80010e8:	f04f 0100 	mov.w	r1, #0
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff fad9 	bl	80006a4 <__aeabi_fcmpeq>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <EaseInOutExpo+0x1e>
        return 0;
 80010f8:	f04f 0300 	mov.w	r3, #0
 80010fc:	e045      	b.n	800118a <EaseInOutExpo+0xaa>
    if (t == 1)
 80010fe:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff face 	bl	80006a4 <__aeabi_fcmpeq>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d002      	beq.n	8001114 <EaseInOutExpo+0x34>
        return 1;
 800110e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001112:	e03a      	b.n	800118a <EaseInOutExpo+0xaa>
    if (t < 0.5f)
 8001114:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff facd 	bl	80006b8 <__aeabi_fcmplt>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d016      	beq.n	8001152 <EaseInOutExpo+0x72>
        return powf(2, 20 * t - 10) / 2;
 8001124:	491b      	ldr	r1, [pc, #108]	@ (8001194 <EaseInOutExpo+0xb4>)
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff f928 	bl	800037c <__aeabi_fmul>
 800112c:	4603      	mov	r3, r0
 800112e:	491a      	ldr	r1, [pc, #104]	@ (8001198 <EaseInOutExpo+0xb8>)
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f819 	bl	8000168 <__aeabi_fsub>
 8001136:	4603      	mov	r3, r0
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800113e:	f002 fbc5 	bl	80038cc <powf>
 8001142:	4603      	mov	r3, r0
 8001144:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f9cb 	bl	80004e4 <__aeabi_fdiv>
 800114e:	4603      	mov	r3, r0
 8001150:	e01b      	b.n	800118a <EaseInOutExpo+0xaa>
    return (2 - powf(2, -20 * t + 10)) / 2;
 8001152:	4912      	ldr	r1, [pc, #72]	@ (800119c <EaseInOutExpo+0xbc>)
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff f911 	bl	800037c <__aeabi_fmul>
 800115a:	4603      	mov	r3, r0
 800115c:	490e      	ldr	r1, [pc, #56]	@ (8001198 <EaseInOutExpo+0xb8>)
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f804 	bl	800016c <__addsf3>
 8001164:	4603      	mov	r3, r0
 8001166:	4619      	mov	r1, r3
 8001168:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800116c:	f002 fbae 	bl	80038cc <powf>
 8001170:	4603      	mov	r3, r0
 8001172:	4619      	mov	r1, r3
 8001174:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001178:	f7fe fff6 	bl	8000168 <__aeabi_fsub>
 800117c:	4603      	mov	r3, r0
 800117e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f9ae 	bl	80004e4 <__aeabi_fdiv>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	41a00000 	.word	0x41a00000
 8001198:	41200000 	.word	0x41200000
 800119c:	c1a00000 	.word	0xc1a00000

080011a0 <EaseInCirc>:

// 圆形曲线缓动
static float EaseInCirc(float t)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
    return 1 - sqrtf(1 - t * t);
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff f8e6 	bl	800037c <__aeabi_fmul>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4619      	mov	r1, r3
 80011b4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80011b8:	f7fe ffd6 	bl	8000168 <__aeabi_fsub>
 80011bc:	4603      	mov	r3, r0
 80011be:	4618      	mov	r0, r3
 80011c0:	f002 fbd1 	bl	8003966 <sqrtf>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4619      	mov	r1, r3
 80011c8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80011cc:	f7fe ffcc 	bl	8000168 <__aeabi_fsub>
 80011d0:	4603      	mov	r3, r0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <EaseOutCirc>:

static float EaseOutCirc(float t)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
    return sqrtf(1 - powf(t - 1, 2));
 80011e2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7fe ffbe 	bl	8000168 <__aeabi_fsub>
 80011ec:	4603      	mov	r3, r0
 80011ee:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80011f2:	4618      	mov	r0, r3
 80011f4:	f002 fb6a 	bl	80038cc <powf>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4619      	mov	r1, r3
 80011fc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001200:	f7fe ffb2 	bl	8000168 <__aeabi_fsub>
 8001204:	4603      	mov	r3, r0
 8001206:	4618      	mov	r0, r3
 8001208:	f002 fbad 	bl	8003966 <sqrtf>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <EaseInOutCirc>:

static float EaseInOutCirc(float t)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 800121e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff fa48 	bl	80006b8 <__aeabi_fcmplt>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d022      	beq.n	8001274 <EaseInOutCirc+0x5e>
        return (1 - sqrtf(1 - powf(2 * t, 2))) / 2;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4619      	mov	r1, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f7fe ff9a 	bl	800016c <__addsf3>
 8001238:	4603      	mov	r3, r0
 800123a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800123e:	4618      	mov	r0, r3
 8001240:	f002 fb44 	bl	80038cc <powf>
 8001244:	4603      	mov	r3, r0
 8001246:	4619      	mov	r1, r3
 8001248:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800124c:	f7fe ff8c 	bl	8000168 <__aeabi_fsub>
 8001250:	4603      	mov	r3, r0
 8001252:	4618      	mov	r0, r3
 8001254:	f002 fb87 	bl	8003966 <sqrtf>
 8001258:	4603      	mov	r3, r0
 800125a:	4619      	mov	r1, r3
 800125c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001260:	f7fe ff82 	bl	8000168 <__aeabi_fsub>
 8001264:	4603      	mov	r3, r0
 8001266:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f93a 	bl	80004e4 <__aeabi_fdiv>
 8001270:	4603      	mov	r3, r0
 8001272:	e027      	b.n	80012c4 <EaseInOutCirc+0xae>
    return (sqrtf(1 - powf(-2 * t + 2, 2)) + 1) / 2;
 8001274:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff f87f 	bl	800037c <__aeabi_fmul>
 800127e:	4603      	mov	r3, r0
 8001280:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001284:	4618      	mov	r0, r3
 8001286:	f7fe ff71 	bl	800016c <__addsf3>
 800128a:	4603      	mov	r3, r0
 800128c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001290:	4618      	mov	r0, r3
 8001292:	f002 fb1b 	bl	80038cc <powf>
 8001296:	4603      	mov	r3, r0
 8001298:	4619      	mov	r1, r3
 800129a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800129e:	f7fe ff63 	bl	8000168 <__aeabi_fsub>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 fb5e 	bl	8003966 <sqrtf>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7fe ff5b 	bl	800016c <__addsf3>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f911 	bl	80004e4 <__aeabi_fdiv>
 80012c2:	4603      	mov	r3, r0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <EaseInElastic>:

// 弹性缓动
static float EaseInElastic(float t)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 80012d4:	4b22      	ldr	r3, [pc, #136]	@ (8001360 <EaseInElastic+0x94>)
 80012d6:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 80012d8:	f04f 0100 	mov.w	r1, #0
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff f9e1 	bl	80006a4 <__aeabi_fcmpeq>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <EaseInElastic+0x22>
        return 0;
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	e034      	b.n	8001358 <EaseInElastic+0x8c>
    if (t == 1)
 80012ee:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff f9d6 	bl	80006a4 <__aeabi_fcmpeq>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d002      	beq.n	8001304 <EaseInElastic+0x38>
        return 1;
 80012fe:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001302:	e029      	b.n	8001358 <EaseInElastic+0x8c>
    return -powf(2, 10 * t - 10) * sinf((t * 10 - 10.75f) * c4);
 8001304:	4917      	ldr	r1, [pc, #92]	@ (8001364 <EaseInElastic+0x98>)
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff f838 	bl	800037c <__aeabi_fmul>
 800130c:	4603      	mov	r3, r0
 800130e:	4915      	ldr	r1, [pc, #84]	@ (8001364 <EaseInElastic+0x98>)
 8001310:	4618      	mov	r0, r3
 8001312:	f7fe ff29 	bl	8000168 <__aeabi_fsub>
 8001316:	4603      	mov	r3, r0
 8001318:	4619      	mov	r1, r3
 800131a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800131e:	f002 fad5 	bl	80038cc <powf>
 8001322:	4603      	mov	r3, r0
 8001324:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8001328:	490e      	ldr	r1, [pc, #56]	@ (8001364 <EaseInElastic+0x98>)
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff f826 	bl	800037c <__aeabi_fmul>
 8001330:	4603      	mov	r3, r0
 8001332:	490d      	ldr	r1, [pc, #52]	@ (8001368 <EaseInElastic+0x9c>)
 8001334:	4618      	mov	r0, r3
 8001336:	f7fe ff17 	bl	8000168 <__aeabi_fsub>
 800133a:	4603      	mov	r3, r0
 800133c:	68f9      	ldr	r1, [r7, #12]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f81c 	bl	800037c <__aeabi_fmul>
 8001344:	4603      	mov	r3, r0
 8001346:	4618      	mov	r0, r3
 8001348:	f002 fb60 	bl	8003a0c <sinf>
 800134c:	4603      	mov	r3, r0
 800134e:	4619      	mov	r1, r3
 8001350:	4620      	mov	r0, r4
 8001352:	f7ff f813 	bl	800037c <__aeabi_fmul>
 8001356:	4603      	mov	r3, r0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	bd90      	pop	{r4, r7, pc}
 8001360:	40060a8b 	.word	0x40060a8b
 8001364:	41200000 	.word	0x41200000
 8001368:	412c0000 	.word	0x412c0000

0800136c <EaseOutElastic>:

static float EaseOutElastic(float t)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 8001374:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <EaseOutElastic+0x94>)
 8001376:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8001378:	f04f 0100 	mov.w	r1, #0
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff f991 	bl	80006a4 <__aeabi_fcmpeq>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <EaseOutElastic+0x22>
        return 0;
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	e034      	b.n	80013f8 <EaseOutElastic+0x8c>
    if (t == 1)
 800138e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff f986 	bl	80006a4 <__aeabi_fcmpeq>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <EaseOutElastic+0x38>
        return 1;
 800139e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80013a2:	e029      	b.n	80013f8 <EaseOutElastic+0x8c>
    return powf(2, -10 * t) * sinf((t * 10 - 0.75f) * c4) + 1;
 80013a4:	4917      	ldr	r1, [pc, #92]	@ (8001404 <EaseOutElastic+0x98>)
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7fe ffe8 	bl	800037c <__aeabi_fmul>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4619      	mov	r1, r3
 80013b0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80013b4:	f002 fa8a 	bl	80038cc <powf>
 80013b8:	4604      	mov	r4, r0
 80013ba:	4913      	ldr	r1, [pc, #76]	@ (8001408 <EaseOutElastic+0x9c>)
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7fe ffdd 	bl	800037c <__aeabi_fmul>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7fe fecd 	bl	8000168 <__aeabi_fsub>
 80013ce:	4603      	mov	r3, r0
 80013d0:	68f9      	ldr	r1, [r7, #12]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7fe ffd2 	bl	800037c <__aeabi_fmul>
 80013d8:	4603      	mov	r3, r0
 80013da:	4618      	mov	r0, r3
 80013dc:	f002 fb16 	bl	8003a0c <sinf>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4619      	mov	r1, r3
 80013e4:	4620      	mov	r0, r4
 80013e6:	f7fe ffc9 	bl	800037c <__aeabi_fmul>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7fe febb 	bl	800016c <__addsf3>
 80013f6:	4603      	mov	r3, r0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd90      	pop	{r4, r7, pc}
 8001400:	40060a8b 	.word	0x40060a8b
 8001404:	c1200000 	.word	0xc1200000
 8001408:	41200000 	.word	0x41200000

0800140c <EaseInOutElastic>:

static float EaseInOutElastic(float t)
{
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
    const float c5 = (2 * 3.14159f) / 4.5f;
 8001414:	4b44      	ldr	r3, [pc, #272]	@ (8001528 <EaseInOutElastic+0x11c>)
 8001416:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8001418:	f04f 0100 	mov.w	r1, #0
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff f941 	bl	80006a4 <__aeabi_fcmpeq>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d002      	beq.n	800142e <EaseInOutElastic+0x22>
        return 0;
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	e077      	b.n	800151e <EaseInOutElastic+0x112>
    if (t == 1)
 800142e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff f936 	bl	80006a4 <__aeabi_fcmpeq>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d002      	beq.n	8001444 <EaseInOutElastic+0x38>
        return 1;
 800143e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001442:	e06c      	b.n	800151e <EaseInOutElastic+0x112>
    if (t < 0.5f)
 8001444:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff f935 	bl	80006b8 <__aeabi_fcmplt>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d030      	beq.n	80014b6 <EaseInOutElastic+0xaa>
        return -(powf(2, 20 * t - 10) * sinf((20 * t - 11.125f) * c5)) / 2;
 8001454:	4935      	ldr	r1, [pc, #212]	@ (800152c <EaseInOutElastic+0x120>)
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7fe ff90 	bl	800037c <__aeabi_fmul>
 800145c:	4603      	mov	r3, r0
 800145e:	4934      	ldr	r1, [pc, #208]	@ (8001530 <EaseInOutElastic+0x124>)
 8001460:	4618      	mov	r0, r3
 8001462:	f7fe fe81 	bl	8000168 <__aeabi_fsub>
 8001466:	4603      	mov	r3, r0
 8001468:	4619      	mov	r1, r3
 800146a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800146e:	f002 fa2d 	bl	80038cc <powf>
 8001472:	4604      	mov	r4, r0
 8001474:	492d      	ldr	r1, [pc, #180]	@ (800152c <EaseInOutElastic+0x120>)
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7fe ff80 	bl	800037c <__aeabi_fmul>
 800147c:	4603      	mov	r3, r0
 800147e:	492d      	ldr	r1, [pc, #180]	@ (8001534 <EaseInOutElastic+0x128>)
 8001480:	4618      	mov	r0, r3
 8001482:	f7fe fe71 	bl	8000168 <__aeabi_fsub>
 8001486:	4603      	mov	r3, r0
 8001488:	68f9      	ldr	r1, [r7, #12]
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe ff76 	bl	800037c <__aeabi_fmul>
 8001490:	4603      	mov	r3, r0
 8001492:	4618      	mov	r0, r3
 8001494:	f002 faba 	bl	8003a0c <sinf>
 8001498:	4603      	mov	r3, r0
 800149a:	4619      	mov	r1, r3
 800149c:	4620      	mov	r0, r4
 800149e:	f7fe ff6d 	bl	800037c <__aeabi_fmul>
 80014a2:	4603      	mov	r3, r0
 80014a4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80014a8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f819 	bl	80004e4 <__aeabi_fdiv>
 80014b2:	4603      	mov	r3, r0
 80014b4:	e033      	b.n	800151e <EaseInOutElastic+0x112>
    return (powf(2, -20 * t + 10) * sinf((20 * t - 11.125f) * c5)) / 2 + 1;
 80014b6:	4920      	ldr	r1, [pc, #128]	@ (8001538 <EaseInOutElastic+0x12c>)
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7fe ff5f 	bl	800037c <__aeabi_fmul>
 80014be:	4603      	mov	r3, r0
 80014c0:	491b      	ldr	r1, [pc, #108]	@ (8001530 <EaseInOutElastic+0x124>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe fe52 	bl	800016c <__addsf3>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4619      	mov	r1, r3
 80014cc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80014d0:	f002 f9fc 	bl	80038cc <powf>
 80014d4:	4604      	mov	r4, r0
 80014d6:	4915      	ldr	r1, [pc, #84]	@ (800152c <EaseInOutElastic+0x120>)
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7fe ff4f 	bl	800037c <__aeabi_fmul>
 80014de:	4603      	mov	r3, r0
 80014e0:	4914      	ldr	r1, [pc, #80]	@ (8001534 <EaseInOutElastic+0x128>)
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7fe fe40 	bl	8000168 <__aeabi_fsub>
 80014e8:	4603      	mov	r3, r0
 80014ea:	68f9      	ldr	r1, [r7, #12]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe ff45 	bl	800037c <__aeabi_fmul>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f002 fa89 	bl	8003a0c <sinf>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4619      	mov	r1, r3
 80014fe:	4620      	mov	r0, r4
 8001500:	f7fe ff3c 	bl	800037c <__aeabi_fmul>
 8001504:	4603      	mov	r3, r0
 8001506:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe ffea 	bl	80004e4 <__aeabi_fdiv>
 8001510:	4603      	mov	r3, r0
 8001512:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001516:	4618      	mov	r0, r3
 8001518:	f7fe fe28 	bl	800016c <__addsf3>
 800151c:	4603      	mov	r3, r0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	bd90      	pop	{r4, r7, pc}
 8001526:	bf00      	nop
 8001528:	3fb2b8b9 	.word	0x3fb2b8b9
 800152c:	41a00000 	.word	0x41a00000
 8001530:	41200000 	.word	0x41200000
 8001534:	41320000 	.word	0x41320000
 8001538:	c1a00000 	.word	0xc1a00000

0800153c <EaseOutBounce>:

static float EaseOutBounce(float t)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
    const float n1 = 7.5625f;
 8001544:	4b45      	ldr	r3, [pc, #276]	@ (800165c <EaseOutBounce+0x120>)
 8001546:	60fb      	str	r3, [r7, #12]
    const float d1 = 2.75f;
 8001548:	4b45      	ldr	r3, [pc, #276]	@ (8001660 <EaseOutBounce+0x124>)
 800154a:	60bb      	str	r3, [r7, #8]

    if (t < 1 / d1)
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001552:	f7fe ffc7 	bl	80004e4 <__aeabi_fdiv>
 8001556:	4603      	mov	r3, r0
 8001558:	4619      	mov	r1, r3
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff f8ac 	bl	80006b8 <__aeabi_fcmplt>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00a      	beq.n	800157c <EaseOutBounce+0x40>
    {
        return n1 * t * t;
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7fe ff07 	bl	800037c <__aeabi_fmul>
 800156e:	4603      	mov	r3, r0
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ff02 	bl	800037c <__aeabi_fmul>
 8001578:	4603      	mov	r3, r0
 800157a:	e06a      	b.n	8001652 <EaseOutBounce+0x116>
    }
    else if (t < 2 / d1)
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001582:	f7fe ffaf 	bl	80004e4 <__aeabi_fdiv>
 8001586:	4603      	mov	r3, r0
 8001588:	4619      	mov	r1, r3
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff f894 	bl	80006b8 <__aeabi_fcmplt>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d01c      	beq.n	80015d0 <EaseOutBounce+0x94>
    {
        t -= 1.5f / d1;
 8001596:	68b9      	ldr	r1, [r7, #8]
 8001598:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 800159c:	f7fe ffa2 	bl	80004e4 <__aeabi_fdiv>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4619      	mov	r1, r3
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7fe fddf 	bl	8000168 <__aeabi_fsub>
 80015aa:	4603      	mov	r3, r0
 80015ac:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.75f;
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f7fe fee3 	bl	800037c <__aeabi_fmul>
 80015b6:	4603      	mov	r3, r0
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe fede 	bl	800037c <__aeabi_fmul>
 80015c0:	4603      	mov	r3, r0
 80015c2:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe fdd0 	bl	800016c <__addsf3>
 80015cc:	4603      	mov	r3, r0
 80015ce:	e040      	b.n	8001652 <EaseOutBounce+0x116>
    }
    else if (t < 2.5f / d1)
 80015d0:	68b9      	ldr	r1, [r7, #8]
 80015d2:	4824      	ldr	r0, [pc, #144]	@ (8001664 <EaseOutBounce+0x128>)
 80015d4:	f7fe ff86 	bl	80004e4 <__aeabi_fdiv>
 80015d8:	4603      	mov	r3, r0
 80015da:	4619      	mov	r1, r3
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff f86b 	bl	80006b8 <__aeabi_fcmplt>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d01a      	beq.n	800161e <EaseOutBounce+0xe2>
    {
        t -= 2.25f / d1;
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	481f      	ldr	r0, [pc, #124]	@ (8001668 <EaseOutBounce+0x12c>)
 80015ec:	f7fe ff7a 	bl	80004e4 <__aeabi_fdiv>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4619      	mov	r1, r3
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7fe fdb7 	bl	8000168 <__aeabi_fsub>
 80015fa:	4603      	mov	r3, r0
 80015fc:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.9375f;
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f7fe febb 	bl	800037c <__aeabi_fmul>
 8001606:	4603      	mov	r3, r0
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe feb6 	bl	800037c <__aeabi_fmul>
 8001610:	4603      	mov	r3, r0
 8001612:	4916      	ldr	r1, [pc, #88]	@ (800166c <EaseOutBounce+0x130>)
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe fda9 	bl	800016c <__addsf3>
 800161a:	4603      	mov	r3, r0
 800161c:	e019      	b.n	8001652 <EaseOutBounce+0x116>
    }
    else
    {
        t -= 2.625f / d1;
 800161e:	68b9      	ldr	r1, [r7, #8]
 8001620:	4813      	ldr	r0, [pc, #76]	@ (8001670 <EaseOutBounce+0x134>)
 8001622:	f7fe ff5f 	bl	80004e4 <__aeabi_fdiv>
 8001626:	4603      	mov	r3, r0
 8001628:	4619      	mov	r1, r3
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7fe fd9c 	bl	8000168 <__aeabi_fsub>
 8001630:	4603      	mov	r3, r0
 8001632:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.984375f;
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f7fe fea0 	bl	800037c <__aeabi_fmul>
 800163c:	4603      	mov	r3, r0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe fe9b 	bl	800037c <__aeabi_fmul>
 8001646:	4603      	mov	r3, r0
 8001648:	490a      	ldr	r1, [pc, #40]	@ (8001674 <EaseOutBounce+0x138>)
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe fd8e 	bl	800016c <__addsf3>
 8001650:	4603      	mov	r3, r0
    }
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40f20000 	.word	0x40f20000
 8001660:	40300000 	.word	0x40300000
 8001664:	40200000 	.word	0x40200000
 8001668:	40100000 	.word	0x40100000
 800166c:	3f700000 	.word	0x3f700000
 8001670:	40280000 	.word	0x40280000
 8001674:	3f7c0000 	.word	0x3f7c0000

08001678 <EaseInBounce>:

// 反弹缓动
static float EaseInBounce(float t)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
    return 1 - EaseOutBounce(1 - t);
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001686:	f7fe fd6f 	bl	8000168 <__aeabi_fsub>
 800168a:	4603      	mov	r3, r0
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff55 	bl	800153c <EaseOutBounce>
 8001692:	4603      	mov	r3, r0
 8001694:	4619      	mov	r1, r3
 8001696:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800169a:	f7fe fd65 	bl	8000168 <__aeabi_fsub>
 800169e:	4603      	mov	r3, r0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <EaseInOutBounce>:

static float EaseInOutBounce(float t)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 80016b0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7fe ffff 	bl	80006b8 <__aeabi_fcmplt>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d010      	beq.n	80016e2 <EaseInOutBounce+0x3a>
        return EaseInBounce(t * 2) * 0.5f;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4619      	mov	r1, r3
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe fd51 	bl	800016c <__addsf3>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ffd3 	bl	8001678 <EaseInBounce>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe fe4f 	bl	800037c <__aeabi_fmul>
 80016de:	4603      	mov	r3, r0
 80016e0:	e01b      	b.n	800171a <EaseInOutBounce+0x72>
    return EaseOutBounce(t * 2 - 1) * 0.5f + 0.5f;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4619      	mov	r1, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe fd40 	bl	800016c <__addsf3>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe fd38 	bl	8000168 <__aeabi_fsub>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ff1e 	bl	800153c <EaseOutBounce>
 8001700:	4603      	mov	r3, r0
 8001702:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe fe38 	bl	800037c <__aeabi_fmul>
 800170c:	4603      	mov	r3, r0
 800170e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe fd2a 	bl	800016c <__addsf3>
 8001718:	4603      	mov	r3, r0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <EaseInBack>:

// 背越式缓动
static float EaseInBack(float t)
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 800172c:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <EaseInBack+0x60>)
 800172e:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8001730:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f7fe fd19 	bl	800016c <__addsf3>
 800173a:	4603      	mov	r3, r0
 800173c:	60bb      	str	r3, [r7, #8]

    return c3 * t * t * t - c1 * t * t;
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	68b8      	ldr	r0, [r7, #8]
 8001742:	f7fe fe1b 	bl	800037c <__aeabi_fmul>
 8001746:	4603      	mov	r3, r0
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fe16 	bl	800037c <__aeabi_fmul>
 8001750:	4603      	mov	r3, r0
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fe11 	bl	800037c <__aeabi_fmul>
 800175a:	4603      	mov	r3, r0
 800175c:	461c      	mov	r4, r3
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f7fe fe0b 	bl	800037c <__aeabi_fmul>
 8001766:	4603      	mov	r3, r0
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe fe06 	bl	800037c <__aeabi_fmul>
 8001770:	4603      	mov	r3, r0
 8001772:	4619      	mov	r1, r3
 8001774:	4620      	mov	r0, r4
 8001776:	f7fe fcf7 	bl	8000168 <__aeabi_fsub>
 800177a:	4603      	mov	r3, r0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	bd90      	pop	{r4, r7, pc}
 8001784:	3fd9cd60 	.word	0x3fd9cd60

08001788 <EaseOutBack>:

static float EaseOutBack(float t)
{
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8001790:	4b1c      	ldr	r3, [pc, #112]	@ (8001804 <EaseOutBack+0x7c>)
 8001792:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8001794:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f7fe fce7 	bl	800016c <__addsf3>
 800179e:	4603      	mov	r3, r0
 80017a0:	60bb      	str	r3, [r7, #8]

    return 1 + c3 * powf(t - 1, 3) + c1 * powf(t - 1, 2);
 80017a2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7fe fcde 	bl	8000168 <__aeabi_fsub>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4916      	ldr	r1, [pc, #88]	@ (8001808 <EaseOutBack+0x80>)
 80017b0:	4618      	mov	r0, r3
 80017b2:	f002 f88b 	bl	80038cc <powf>
 80017b6:	4603      	mov	r3, r0
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fdde 	bl	800037c <__aeabi_fmul>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fcd0 	bl	800016c <__addsf3>
 80017cc:	4603      	mov	r3, r0
 80017ce:	461c      	mov	r4, r3
 80017d0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7fe fcc7 	bl	8000168 <__aeabi_fsub>
 80017da:	4603      	mov	r3, r0
 80017dc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 f873 	bl	80038cc <powf>
 80017e6:	4603      	mov	r3, r0
 80017e8:	68f9      	ldr	r1, [r7, #12]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe fdc6 	bl	800037c <__aeabi_fmul>
 80017f0:	4603      	mov	r3, r0
 80017f2:	4619      	mov	r1, r3
 80017f4:	4620      	mov	r0, r4
 80017f6:	f7fe fcb9 	bl	800016c <__addsf3>
 80017fa:	4603      	mov	r3, r0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	bd90      	pop	{r4, r7, pc}
 8001804:	3fd9cd60 	.word	0x3fd9cd60
 8001808:	40400000 	.word	0x40400000

0800180c <EaseInOutBack>:

static float EaseInOutBack(float t)
{
 800180c:	b5b0      	push	{r4, r5, r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8001814:	4b40      	ldr	r3, [pc, #256]	@ (8001918 <EaseInOutBack+0x10c>)
 8001816:	60fb      	str	r3, [r7, #12]
    const float c2 = c1 * 1.525f;
 8001818:	4940      	ldr	r1, [pc, #256]	@ (800191c <EaseInOutBack+0x110>)
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f7fe fdae 	bl	800037c <__aeabi_fmul>
 8001820:	4603      	mov	r3, r0
 8001822:	60bb      	str	r3, [r7, #8]

    if (t < 0.5f)
 8001824:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7fe ff45 	bl	80006b8 <__aeabi_fcmplt>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d02c      	beq.n	800188e <EaseInOutBack+0x82>
        return (powf(2 * t, 2) * ((c2 + 1) * 2 * t - c2)) / 2;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4619      	mov	r1, r3
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fc97 	bl	800016c <__addsf3>
 800183e:	4603      	mov	r3, r0
 8001840:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001844:	4618      	mov	r0, r3
 8001846:	f002 f841 	bl	80038cc <powf>
 800184a:	4604      	mov	r4, r0
 800184c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001850:	68b8      	ldr	r0, [r7, #8]
 8001852:	f7fe fc8b 	bl	800016c <__addsf3>
 8001856:	4603      	mov	r3, r0
 8001858:	4619      	mov	r1, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fc86 	bl	800016c <__addsf3>
 8001860:	4603      	mov	r3, r0
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fd89 	bl	800037c <__aeabi_fmul>
 800186a:	4603      	mov	r3, r0
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fc7a 	bl	8000168 <__aeabi_fsub>
 8001874:	4603      	mov	r3, r0
 8001876:	4619      	mov	r1, r3
 8001878:	4620      	mov	r0, r4
 800187a:	f7fe fd7f 	bl	800037c <__aeabi_fmul>
 800187e:	4603      	mov	r3, r0
 8001880:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe2d 	bl	80004e4 <__aeabi_fdiv>
 800188a:	4603      	mov	r3, r0
 800188c:	e03f      	b.n	800190e <EaseInOutBack+0x102>
    return (powf(2 * t - 2, 2) * ((c2 + 1) * (t * 2 - 2) + c2) + 2) / 2;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4619      	mov	r1, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fc6a 	bl	800016c <__addsf3>
 8001898:	4603      	mov	r3, r0
 800189a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fc62 	bl	8000168 <__aeabi_fsub>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80018aa:	4618      	mov	r0, r3
 80018ac:	f002 f80e 	bl	80038cc <powf>
 80018b0:	4604      	mov	r4, r0
 80018b2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80018b6:	68b8      	ldr	r0, [r7, #8]
 80018b8:	f7fe fc58 	bl	800016c <__addsf3>
 80018bc:	4603      	mov	r3, r0
 80018be:	461d      	mov	r5, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4619      	mov	r1, r3
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fc51 	bl	800016c <__addsf3>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fc49 	bl	8000168 <__aeabi_fsub>
 80018d6:	4603      	mov	r3, r0
 80018d8:	4619      	mov	r1, r3
 80018da:	4628      	mov	r0, r5
 80018dc:	f7fe fd4e 	bl	800037c <__aeabi_fmul>
 80018e0:	4603      	mov	r3, r0
 80018e2:	68b9      	ldr	r1, [r7, #8]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fc41 	bl	800016c <__addsf3>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4619      	mov	r1, r3
 80018ee:	4620      	mov	r0, r4
 80018f0:	f7fe fd44 	bl	800037c <__aeabi_fmul>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fc36 	bl	800016c <__addsf3>
 8001900:	4603      	mov	r3, r0
 8001902:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe fdec 	bl	80004e4 <__aeabi_fdiv>
 800190c:	4603      	mov	r3, r0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bdb0      	pop	{r4, r5, r7, pc}
 8001916:	bf00      	nop
 8001918:	3fd9cd60 	.word	0x3fd9cd60
 800191c:	3fc33333 	.word	0x3fc33333

08001920 <EaseInSine>:

// 正弦缓动
static float EaseInSine(float t)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
    return 1 - cosf((t * 3.14159f) / 2);
 8001928:	490c      	ldr	r1, [pc, #48]	@ (800195c <EaseInSine+0x3c>)
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7fe fd26 	bl	800037c <__aeabi_fmul>
 8001930:	4603      	mov	r3, r0
 8001932:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fdd4 	bl	80004e4 <__aeabi_fdiv>
 800193c:	4603      	mov	r3, r0
 800193e:	4618      	mov	r0, r3
 8001940:	f002 f82c 	bl	800399c <cosf>
 8001944:	4603      	mov	r3, r0
 8001946:	4619      	mov	r1, r3
 8001948:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800194c:	f7fe fc0c 	bl	8000168 <__aeabi_fsub>
 8001950:	4603      	mov	r3, r0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40490fd0 	.word	0x40490fd0

08001960 <EaseOutSine>:

static float EaseOutSine(float t)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
    return sinf((t * 3.14159f) / 2);
 8001968:	4909      	ldr	r1, [pc, #36]	@ (8001990 <EaseOutSine+0x30>)
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7fe fd06 	bl	800037c <__aeabi_fmul>
 8001970:	4603      	mov	r3, r0
 8001972:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fdb4 	bl	80004e4 <__aeabi_fdiv>
 800197c:	4603      	mov	r3, r0
 800197e:	4618      	mov	r0, r3
 8001980:	f002 f844 	bl	8003a0c <sinf>
 8001984:	4603      	mov	r3, r0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40490fd0 	.word	0x40490fd0

08001994 <EaseInOutSine>:

static float EaseInOutSine(float t)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
    return -(cosf(3.14159f * t) - 1) / 2;
 800199c:	490d      	ldr	r1, [pc, #52]	@ (80019d4 <EaseInOutSine+0x40>)
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7fe fcec 	bl	800037c <__aeabi_fmul>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f001 fff8 	bl	800399c <cosf>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fbd8 	bl	8000168 <__aeabi_fsub>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80019be:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fd8e 	bl	80004e4 <__aeabi_fdiv>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40490fd0 	.word	0x40490fd0

080019d8 <GetEaseValue>:

static float GetEaseValue(float progress, EaseType_t easeType)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	70fb      	strb	r3, [r7, #3]
    switch (easeType)
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	2b18      	cmp	r3, #24
 80019e8:	f200 80b3 	bhi.w	8001b52 <GetEaseValue+0x17a>
 80019ec:	a201      	add	r2, pc, #4	@ (adr r2, 80019f4 <GetEaseValue+0x1c>)
 80019ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f2:	bf00      	nop
 80019f4:	08001a59 	.word	0x08001a59
 80019f8:	08001a63 	.word	0x08001a63
 80019fc:	08001a6d 	.word	0x08001a6d
 8001a00:	08001a77 	.word	0x08001a77
 8001a04:	08001a81 	.word	0x08001a81
 8001a08:	08001a8b 	.word	0x08001a8b
 8001a0c:	08001a95 	.word	0x08001a95
 8001a10:	08001a9f 	.word	0x08001a9f
 8001a14:	08001aa9 	.word	0x08001aa9
 8001a18:	08001ab3 	.word	0x08001ab3
 8001a1c:	08001abd 	.word	0x08001abd
 8001a20:	08001ac7 	.word	0x08001ac7
 8001a24:	08001ad1 	.word	0x08001ad1
 8001a28:	08001adb 	.word	0x08001adb
 8001a2c:	08001ae5 	.word	0x08001ae5
 8001a30:	08001aef 	.word	0x08001aef
 8001a34:	08001af9 	.word	0x08001af9
 8001a38:	08001b03 	.word	0x08001b03
 8001a3c:	08001b0d 	.word	0x08001b0d
 8001a40:	08001b17 	.word	0x08001b17
 8001a44:	08001b21 	.word	0x08001b21
 8001a48:	08001b2b 	.word	0x08001b2b
 8001a4c:	08001b35 	.word	0x08001b35
 8001a50:	08001b3f 	.word	0x08001b3f
 8001a54:	08001b49 	.word	0x08001b49
    {
    case EASE_LINEAR:
        return EaseLinear(progress);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff fa15 	bl	8000e88 <EaseLinear>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	e078      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_IN_QUAD:
        return EaseInQuad(progress);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff fa1a 	bl	8000e9c <EaseInQuad>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	e073      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_OUT_QUAD:
        return EaseOutQuad(progress);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff fa22 	bl	8000eb6 <EaseOutQuad>
 8001a72:	4603      	mov	r3, r0
 8001a74:	e06e      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_INOUT_QUAD:
        return EaseInOutQuad(progress);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff fa30 	bl	8000edc <EaseInOutQuad>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	e069      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_IN_CUBIC:
        return EaseInCubic(progress);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff fa5e 	bl	8000f42 <EaseInCubic>
 8001a86:	4603      	mov	r3, r0
 8001a88:	e064      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_OUT_CUBIC:
        return EaseOutCubic(progress);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff fa6b 	bl	8000f66 <EaseOutCubic>
 8001a90:	4603      	mov	r3, r0
 8001a92:	e05f      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_INOUT_CUBIC:
        return EaseInOutCubic(progress);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff fa85 	bl	8000fa4 <EaseInOutCubic>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	e05a      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_IN_EXPO:
        return EaseInExpo(progress);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff fad2 	bl	8001048 <EaseInExpo>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	e055      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_OUT_EXPO:
        return EaseOutExpo(progress);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff faf3 	bl	8001094 <EaseOutExpo>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	e050      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_INOUT_EXPO:
        return EaseInOutExpo(progress);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff fb14 	bl	80010e0 <EaseInOutExpo>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	e04b      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_IN_CIRC:
        return EaseInCirc(progress);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff fb6f 	bl	80011a0 <EaseInCirc>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	e046      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_OUT_CIRC:
        return EaseOutCirc(progress);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff fb87 	bl	80011da <EaseOutCirc>
 8001acc:	4603      	mov	r3, r0
 8001ace:	e041      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_INOUT_CIRC:
        return EaseInOutCirc(progress);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff fba0 	bl	8001216 <EaseInOutCirc>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	e03c      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_IN_ELASTIC:
        return EaseInElastic(progress);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fbf6 	bl	80012cc <EaseInElastic>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	e037      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_OUT_ELASTIC:
        return EaseOutElastic(progress);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff fc41 	bl	800136c <EaseOutElastic>
 8001aea:	4603      	mov	r3, r0
 8001aec:	e032      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_INOUT_ELASTIC:
        return EaseInOutElastic(progress);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fc8c 	bl	800140c <EaseInOutElastic>
 8001af4:	4603      	mov	r3, r0
 8001af6:	e02d      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_IN_BOUNCE:
        return EaseInBounce(progress);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff fdbd 	bl	8001678 <EaseInBounce>
 8001afe:	4603      	mov	r3, r0
 8001b00:	e028      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_OUT_BOUNCE:
        return EaseOutBounce(progress);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fd1a 	bl	800153c <EaseOutBounce>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	e023      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_INOUT_BOUNCE:
        return EaseInOutBounce(progress);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff fdcb 	bl	80016a8 <EaseInOutBounce>
 8001b12:	4603      	mov	r3, r0
 8001b14:	e01e      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_IN_BACK:
        return EaseInBack(progress);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff fe04 	bl	8001724 <EaseInBack>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	e019      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_OUT_BACK:
        return EaseOutBack(progress);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff fe31 	bl	8001788 <EaseOutBack>
 8001b26:	4603      	mov	r3, r0
 8001b28:	e014      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_INOUT_BACK:
        return EaseInOutBack(progress);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff fe6e 	bl	800180c <EaseInOutBack>
 8001b30:	4603      	mov	r3, r0
 8001b32:	e00f      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_IN_SINE:
        return EaseInSine(progress);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff fef3 	bl	8001920 <EaseInSine>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	e00a      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_OUT_SINE:
        return EaseOutSine(progress);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ff0e 	bl	8001960 <EaseOutSine>
 8001b44:	4603      	mov	r3, r0
 8001b46:	e005      	b.n	8001b54 <GetEaseValue+0x17c>
    case EASE_INOUT_SINE:
        return EaseInOutSine(progress);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff23 	bl	8001994 <EaseInOutSine>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	e000      	b.n	8001b54 <GetEaseValue+0x17c>
    default:
        return progress;
 8001b52:	687b      	ldr	r3, [r7, #4]
    }
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <OLED_InitAnimation>:

#pragma region ANIMATIONTWEENS
// 这里是底层动画实现
void OLED_InitAnimation(Animation_t *anim, float startValue, float endValue,
                        uint32_t duration, EaseType_t easeType)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	603b      	str	r3, [r7, #0]
    anim->startTime = HAL_GetTick();
 8001b6a:	f000 fb15 	bl	8002198 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	601a      	str	r2, [r3, #0]
    anim->duration = duration;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	605a      	str	r2, [r3, #4]
    anim->startValue = startValue;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	609a      	str	r2, [r3, #8]
    anim->endValue = endValue;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	60da      	str	r2, [r3, #12]
    anim->currentValue = startValue;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	611a      	str	r2, [r3, #16]
    anim->isActive = 1;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	751a      	strb	r2, [r3, #20]
    anim->easeType = easeType;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	7e3a      	ldrb	r2, [r7, #24]
 8001b96:	755a      	strb	r2, [r3, #21]
}
 8001b98:	bf00      	nop
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <OLED_UpdateAnimation>:

// 更新动画状态
uint8_t OLED_UpdateAnimation(Animation_t *anim, uint32_t currentTime)
{
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
    if (!anim->isActive)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	7d1b      	ldrb	r3, [r3, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <OLED_UpdateAnimation+0x16>
        return 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e042      	b.n	8001c3c <OLED_UpdateAnimation+0x9c>

    uint32_t elapsedTime = currentTime - anim->startTime;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	617b      	str	r3, [r7, #20]

    // 动画完成
    if (elapsedTime >= anim->duration)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d308      	bcc.n	8001bdc <OLED_UpdateAnimation+0x3c>
    {
        anim->currentValue = anim->endValue;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	611a      	str	r2, [r3, #16]
        anim->isActive = 0;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	751a      	strb	r2, [r3, #20]
        return 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	e02f      	b.n	8001c3c <OLED_UpdateAnimation+0x9c>
    }

    // 计算当前进度 (0.0 - 1.0)
    float progress = (float)elapsedTime / anim->duration;
 8001bdc:	6978      	ldr	r0, [r7, #20]
 8001bde:	f7fe fb75 	bl	80002cc <__aeabi_ui2f>
 8001be2:	4604      	mov	r4, r0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fb6f 	bl	80002cc <__aeabi_ui2f>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f7fe fc76 	bl	80004e4 <__aeabi_fdiv>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	613b      	str	r3, [r7, #16]

    // 应用缓动函数
    float easedProgress = GetEaseValue(progress, anim->easeType);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7d5b      	ldrb	r3, [r3, #21]
 8001c00:	4619      	mov	r1, r3
 8001c02:	6938      	ldr	r0, [r7, #16]
 8001c04:	f7ff fee8 	bl	80019d8 <GetEaseValue>
 8001c08:	60f8      	str	r0, [r7, #12]

    // 计算当前值
    anim->currentValue = anim->startValue + (anim->endValue - anim->startValue) * easedProgress;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689c      	ldr	r4, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	4619      	mov	r1, r3
 8001c18:	4610      	mov	r0, r2
 8001c1a:	f7fe faa5 	bl	8000168 <__aeabi_fsub>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	68f9      	ldr	r1, [r7, #12]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fbaa 	bl	800037c <__aeabi_fmul>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	f7fe fa9d 	bl	800016c <__addsf3>
 8001c32:	4603      	mov	r3, r0
 8001c34:	461a      	mov	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	611a      	str	r2, [r3, #16]

    return 1;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	371c      	adds	r7, #28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd90      	pop	{r4, r7, pc}

08001c44 <OLED_GetAnimationValue>:

// 获取当前动画值
float OLED_GetAnimationValue(Animation_t *anim)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
    return anim->currentValue;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <OLED_InitAnimationManager>:

// 动画管理器全局管理部分
AnimationManager_t g_AnimationManager; // 声明一个全局的动画管理器

void OLED_InitAnimationManager(AnimationManager_t *manager) // 这是初始化一个动画管理器，填入你的manager名字，在系统初始化时候调用它
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
    manager->count = 0;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 25f0 	strb.w	r2, [r3, #1520]	@ 0x5f0
    memset(manager->taggedAnimations, 0, sizeof(manager->taggedAnimations));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f001 fdd6 	bl	8003824 <memset>
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <OLED_FindTaggedAnimation>:

TaggedAnimation_t *OLED_FindTaggedAnimation(AnimationManager_t *manager, const char *tag) // 查找对应manager的标签对应的动画tag
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < manager->count; i++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	73fb      	strb	r3, [r7, #15]
 8001c8e:	e016      	b.n	8001cbe <OLED_FindTaggedAnimation+0x3e>
    {
        if (strcmp(manager->taggedAnimations[i].tag, tag) == 0)
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	224c      	movs	r2, #76	@ 0x4c
 8001c94:	fb02 f303 	mul.w	r3, r2, r3
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	6839      	ldr	r1, [r7, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fa54 	bl	800014c <strcmp>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d106      	bne.n	8001cb8 <OLED_FindTaggedAnimation+0x38>
        {
            return &manager->taggedAnimations[i];
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	224c      	movs	r2, #76	@ 0x4c
 8001cae:	fb02 f303 	mul.w	r3, r2, r3
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	e009      	b.n	8001ccc <OLED_FindTaggedAnimation+0x4c>
    for (uint8_t i = 0; i < manager->count; i++)
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	73fb      	strb	r3, [r7, #15]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8001cc4:	7bfa      	ldrb	r2, [r7, #15]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d3e2      	bcc.n	8001c90 <OLED_FindTaggedAnimation+0x10>
        }
    }
    return NULL;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <OLED_GetObjectPosition>:

uint8_t OLED_GetObjectPosition(AnimationManager_t *manager, const char *tag, float *x, float *y) // 获取tag当前位置
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8001ce2:	68b9      	ldr	r1, [r7, #8]
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f7ff ffcb 	bl	8001c80 <OLED_FindTaggedAnimation>
 8001cea:	6178      	str	r0, [r7, #20]
    if (anim)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00f      	beq.n	8001d12 <OLED_GetObjectPosition+0x3e>
    {
        if (x)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <OLED_GetObjectPosition+0x2c>
            *x = anim->currentX;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	601a      	str	r2, [r3, #0]
        if (y)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <OLED_GetObjectPosition+0x3a>
            *y = anim->currentY;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	601a      	str	r2, [r3, #0]
        return 1;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <OLED_GetObjectPosition+0x40>
    }
    return 0;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <OLED_MoveObject>:

// 移动指定标签的对象
void OLED_MoveObject(AnimationManager_t *manager, const char *tag,
                     float startX, float startY, float targetX, float targetY,
                     uint32_t duration, EaseType_t easeType) // 这个函数是用来移动一个对象的，tag是对象的标签，startX和startY是起始坐标，targetX和targetY是目标坐标，duration是动画持续时间，easeType是缓动类型
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	603b      	str	r3, [r7, #0]
    // 查找已存在的动画
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8001d2a:	68b9      	ldr	r1, [r7, #8]
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f7ff ffa7 	bl	8001c80 <OLED_FindTaggedAnimation>
 8001d32:	6178      	str	r0, [r7, #20]

    // 如果没找到并且还有可用槽位，创建新的动画
    if (anim == NULL)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d122      	bne.n	8001d80 <OLED_MoveObject+0x64>
    {
        if (manager->count >= MAX_ANIMATIONS)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8001d40:	2b13      	cmp	r3, #19
 8001d42:	d838      	bhi.n	8001db6 <OLED_MoveObject+0x9a>
            return; // 动画已满，无法添加

        anim = &manager->taggedAnimations[manager->count++];
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	b2d1      	uxtb	r1, r2
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	f882 15f0 	strb.w	r1, [r2, #1520]	@ 0x5f0
 8001d54:	461a      	mov	r2, r3
 8001d56:	234c      	movs	r3, #76	@ 0x4c
 8001d58:	fb02 f303 	mul.w	r3, r2, r3
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]
        strncpy(anim->tag, tag, sizeof(anim->tag) - 1);
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	220f      	movs	r2, #15
 8001d66:	68b9      	ldr	r1, [r7, #8]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f001 fd63 	bl	8003834 <strncpy>
        anim->tag[sizeof(anim->tag) - 1] = '\0'; // 确保字符串结束
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2200      	movs	r2, #0
 8001d72:	73da      	strb	r2, [r3, #15]
        anim->currentX = startX;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = startY;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // 初始化或更新X和Y坐标的动画
    OLED_InitAnimation(&anim->xAnimation, startX, targetX, duration, easeType);
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f103 0010 	add.w	r0, r3, #16
 8001d86:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d8e:	6a3a      	ldr	r2, [r7, #32]
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	f7ff fee3 	bl	8001b5c <OLED_InitAnimation>
    OLED_InitAnimation(&anim->yAnimation, startY, targetY, duration, easeType);
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8001d9c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001da4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001da6:	6839      	ldr	r1, [r7, #0]
 8001da8:	f7ff fed8 	bl	8001b5c <OLED_InitAnimation>
    anim->isActive = 1;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001db4:	e000      	b.n	8001db8 <OLED_MoveObject+0x9c>
            return; // 动画已满，无法添加
 8001db6:	bf00      	nop
}
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <OLED_UpdateAnimationManager>:

// 更新manager里面的所有动画!
void OLED_UpdateAnimationManager(AnimationManager_t *manager) //! 这里需要使用OLED_UpdateDisplayVSync()来更新显示
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 8001dc6:	f000 f9e7 	bl	8002198 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

    for (uint8_t i = 0; i < manager->count; i++)
 8001dcc:	2300      	movs	r3, #0
 8001dce:	75fb      	strb	r3, [r7, #23]
 8001dd0:	e03a      	b.n	8001e48 <OLED_UpdateAnimationManager+0x8a>
    {
        TaggedAnimation_t *anim = &manager->taggedAnimations[i];
 8001dd2:	7dfb      	ldrb	r3, [r7, #23]
 8001dd4:	224c      	movs	r2, #76	@ 0x4c
 8001dd6:	fb02 f303 	mul.w	r3, r2, r3
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]
        if (!anim->isActive)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d02a      	beq.n	8001e40 <OLED_UpdateAnimationManager+0x82>
            continue;

        uint8_t activeX = OLED_UpdateAnimation(&anim->xAnimation, currentTime);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	3310      	adds	r3, #16
 8001dee:	6939      	ldr	r1, [r7, #16]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fed5 	bl	8001ba0 <OLED_UpdateAnimation>
 8001df6:	4603      	mov	r3, r0
 8001df8:	72fb      	strb	r3, [r7, #11]
        uint8_t activeY = OLED_UpdateAnimation(&anim->yAnimation, currentTime);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	3328      	adds	r3, #40	@ 0x28
 8001dfe:	6939      	ldr	r1, [r7, #16]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fecd 	bl	8001ba0 <OLED_UpdateAnimation>
 8001e06:	4603      	mov	r3, r0
 8001e08:	72bb      	strb	r3, [r7, #10]

        anim->currentX = OLED_GetAnimationValue(&anim->xAnimation);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	3310      	adds	r3, #16
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ff18 	bl	8001c44 <OLED_GetAnimationValue>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = OLED_GetAnimationValue(&anim->yAnimation);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	3328      	adds	r3, #40	@ 0x28
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ff10 	bl	8001c44 <OLED_GetAnimationValue>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	649a      	str	r2, [r3, #72]	@ 0x48

        // 如果两个动画都结束，则标记该对象动画为非活跃
        if (!activeX && !activeY)
 8001e2a:	7afb      	ldrb	r3, [r7, #11]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d108      	bne.n	8001e42 <OLED_UpdateAnimationManager+0x84>
 8001e30:	7abb      	ldrb	r3, [r7, #10]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d105      	bne.n	8001e42 <OLED_UpdateAnimationManager+0x84>
            anim->isActive = 0;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e3e:	e000      	b.n	8001e42 <OLED_UpdateAnimationManager+0x84>
            continue;
 8001e40:	bf00      	nop
    for (uint8_t i = 0; i < manager->count; i++)
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	3301      	adds	r3, #1
 8001e46:	75fb      	strb	r3, [r7, #23]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8001e4e:	7dfa      	ldrb	r2, [r7, #23]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d3be      	bcc.n	8001dd2 <OLED_UpdateAnimationManager+0x14>
    }
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <OLED_DoTweenObject>:
    }
    return 0; // 如果没有找到，返回0表示非活跃
}

void OLED_DoTweenObject(AnimationManager_t *manager, const char *tag, float targetX, float targetY, uint32_t duration, EaseType_t easeType) // 这个函数是用来移动一个对象的，tag是对象的标签，targetX和targetY是目标坐标，duration是动画持续时间，easeType是缓动类型
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b08a      	sub	sp, #40	@ 0x28
 8001e62:	af04      	add	r7, sp, #16
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	603b      	str	r3, [r7, #0]
    bool SWITCH; // 这个是在while里面循环并且防止死循环的开关
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8001e6c:	68b9      	ldr	r1, [r7, #8]
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f7ff ff06 	bl	8001c80 <OLED_FindTaggedAnimation>
 8001e74:	6138      	str	r0, [r7, #16]

    if (anim && (anim->currentX != targetX || anim->currentY != targetY) && !(anim->isActive))
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d019      	beq.n	8001eb0 <OLED_DoTweenObject+0x52>
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e80:	4619      	mov	r1, r3
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7fe fc0e 	bl	80006a4 <__aeabi_fcmpeq>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d008      	beq.n	8001ea0 <OLED_DoTweenObject+0x42>
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e92:	4619      	mov	r1, r3
 8001e94:	6838      	ldr	r0, [r7, #0]
 8001e96:	f7fe fc05 	bl	80006a4 <__aeabi_fcmpeq>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d107      	bne.n	8001eb0 <OLED_DoTweenObject+0x52>
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d102      	bne.n	8001eb0 <OLED_DoTweenObject+0x52>
    {
        SWITCH = 1;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	75fb      	strb	r3, [r7, #23]
 8001eae:	e001      	b.n	8001eb4 <OLED_DoTweenObject+0x56>
    }
    else
    {
        SWITCH = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	75fb      	strb	r3, [r7, #23]
    }

    if (anim && !(anim->isActive) && SWITCH) // 找到了动画，而且它不是正在tween的时候
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d019      	beq.n	8001eee <OLED_DoTweenObject+0x90>
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d114      	bne.n	8001eee <OLED_DoTweenObject+0x90>
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d011      	beq.n	8001eee <OLED_DoTweenObject+0x90>
    {
        OLED_MoveObject(manager, tag, anim->currentX, anim->currentY, targetX, targetY, duration, easeType);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001ed2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ed6:	9303      	str	r3, [sp, #12]
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	9302      	str	r3, [sp, #8]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	9301      	str	r3, [sp, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f7ff ff17 	bl	8001d1c <OLED_MoveObject>
    }
}
 8001eee:	bf00      	nop
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <OLED_DrawRectangle>:
    }
}

// 绘制空心矩形
void OLED_DrawRectangle(uint8_t x, uint8_t y, uint8_t width, uint8_t height) //! UPDATEDISPLAY REQUIRED
{
 8001ef6:	b590      	push	{r4, r7, lr}
 8001ef8:	b085      	sub	sp, #20
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4604      	mov	r4, r0
 8001efe:	4608      	mov	r0, r1
 8001f00:	4611      	mov	r1, r2
 8001f02:	461a      	mov	r2, r3
 8001f04:	4623      	mov	r3, r4
 8001f06:	71fb      	strb	r3, [r7, #7]
 8001f08:	4603      	mov	r3, r0
 8001f0a:	71bb      	strb	r3, [r7, #6]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	717b      	strb	r3, [r7, #5]
 8001f10:	4613      	mov	r3, r2
 8001f12:	713b      	strb	r3, [r7, #4]
    // 基础边界检查和裁剪
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT || width == 0 || height == 0)
 8001f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	db57      	blt.n	8001fcc <OLED_DrawRectangle+0xd6>
 8001f1c:	79bb      	ldrb	r3, [r7, #6]
 8001f1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f20:	d854      	bhi.n	8001fcc <OLED_DrawRectangle+0xd6>
 8001f22:	797b      	ldrb	r3, [r7, #5]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d051      	beq.n	8001fcc <OLED_DrawRectangle+0xd6>
 8001f28:	793b      	ldrb	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d04e      	beq.n	8001fcc <OLED_DrawRectangle+0xd6>
        return;
    if (x + width > OLED_WIDTH)
 8001f2e:	79fa      	ldrb	r2, [r7, #7]
 8001f30:	797b      	ldrb	r3, [r7, #5]
 8001f32:	4413      	add	r3, r2
 8001f34:	2b80      	cmp	r3, #128	@ 0x80
 8001f36:	dd06      	ble.n	8001f46 <OLED_DrawRectangle+0x50>
        width = OLED_WIDTH - x;
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8001f3e:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8001f42:	3380      	adds	r3, #128	@ 0x80
 8001f44:	717b      	strb	r3, [r7, #5]
    if (y + height > OLED_HEIGHT)
 8001f46:	79ba      	ldrb	r2, [r7, #6]
 8001f48:	793b      	ldrb	r3, [r7, #4]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	2b40      	cmp	r3, #64	@ 0x40
 8001f4e:	dd03      	ble.n	8001f58 <OLED_DrawRectangle+0x62>
        height = OLED_HEIGHT - y;
 8001f50:	79bb      	ldrb	r3, [r7, #6]
 8001f52:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001f56:	713b      	strb	r3, [r7, #4]

    uint8_t x2 = x + width - 1;
 8001f58:	79fa      	ldrb	r2, [r7, #7]
 8001f5a:	797b      	ldrb	r3, [r7, #5]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	3b01      	subs	r3, #1
 8001f62:	737b      	strb	r3, [r7, #13]
    uint8_t y2 = y + height - 1;
 8001f64:	79ba      	ldrb	r2, [r7, #6]
 8001f66:	793b      	ldrb	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	733b      	strb	r3, [r7, #12]

    // 绘制水平线
    for (uint8_t i = x; i <= x2; i++)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	e00e      	b.n	8001f94 <OLED_DrawRectangle+0x9e>
    {
        OLED_WritePixel(i, y, 1);  // 顶线
 8001f76:	79b9      	ldrb	r1, [r7, #6]
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fe4f 	bl	8000c20 <OLED_WritePixel>
        OLED_WritePixel(i, y2, 1); // 底线
 8001f82:	7b39      	ldrb	r1, [r7, #12]
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	2201      	movs	r2, #1
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fe49 	bl	8000c20 <OLED_WritePixel>
    for (uint8_t i = x; i <= x2; i++)
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	3301      	adds	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	7b7b      	ldrb	r3, [r7, #13]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d9ec      	bls.n	8001f76 <OLED_DrawRectangle+0x80>
    }

    // 绘制垂直线
    for (uint8_t j = y + 1; j < y2; j++)
 8001f9c:	79bb      	ldrb	r3, [r7, #6]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	73bb      	strb	r3, [r7, #14]
 8001fa2:	e00e      	b.n	8001fc2 <OLED_DrawRectangle+0xcc>
    {
        OLED_WritePixel(x, j, 1);  // 左线
 8001fa4:	7bb9      	ldrb	r1, [r7, #14]
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fe38 	bl	8000c20 <OLED_WritePixel>
        OLED_WritePixel(x2, j, 1); // 右线
 8001fb0:	7bb9      	ldrb	r1, [r7, #14]
 8001fb2:	7b7b      	ldrb	r3, [r7, #13]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fe32 	bl	8000c20 <OLED_WritePixel>
    for (uint8_t j = y + 1; j < y2; j++)
 8001fbc:	7bbb      	ldrb	r3, [r7, #14]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	73bb      	strb	r3, [r7, #14]
 8001fc2:	7bba      	ldrb	r2, [r7, #14]
 8001fc4:	7b3b      	ldrb	r3, [r7, #12]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d3ec      	bcc.n	8001fa4 <OLED_DrawRectangle+0xae>
 8001fca:	e000      	b.n	8001fce <OLED_DrawRectangle+0xd8>
        return;
 8001fcc:	bf00      	nop
    }
}
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd90      	pop	{r4, r7, pc}

08001fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fda:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <HAL_MspInit+0x5c>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	4a14      	ldr	r2, [pc, #80]	@ (8002030 <HAL_MspInit+0x5c>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6193      	str	r3, [r2, #24]
 8001fe6:	4b12      	ldr	r3, [pc, #72]	@ (8002030 <HAL_MspInit+0x5c>)
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8002030 <HAL_MspInit+0x5c>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4a0e      	ldr	r2, [pc, #56]	@ (8002030 <HAL_MspInit+0x5c>)
 8001ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ffc:	61d3      	str	r3, [r2, #28]
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8002030 <HAL_MspInit+0x5c>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800200a:	4b0a      	ldr	r3, [pc, #40]	@ (8002034 <HAL_MspInit+0x60>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	4a04      	ldr	r2, [pc, #16]	@ (8002034 <HAL_MspInit+0x60>)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	40021000 	.word	0x40021000
 8002034:	40010000 	.word	0x40010000

08002038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <NMI_Handler+0x4>

08002040 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <HardFault_Handler+0x4>

08002048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800204c:	bf00      	nop
 800204e:	e7fd      	b.n	800204c <MemManage_Handler+0x4>

08002050 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002054:	bf00      	nop
 8002056:	e7fd      	b.n	8002054 <BusFault_Handler+0x4>

08002058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800205c:	bf00      	nop
 800205e:	e7fd      	b.n	800205c <UsageFault_Handler+0x4>

08002060 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr

08002078 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr

08002084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002088:	f000 f874 	bl	8002174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}

08002090 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800209c:	f7ff fff8 	bl	8002090 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020a0:	480b      	ldr	r0, [pc, #44]	@ (80020d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020a2:	490c      	ldr	r1, [pc, #48]	@ (80020d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020a4:	4a0c      	ldr	r2, [pc, #48]	@ (80020d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80020a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a8:	e002      	b.n	80020b0 <LoopCopyDataInit>

080020aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ae:	3304      	adds	r3, #4

080020b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b4:	d3f9      	bcc.n	80020aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020b6:	4a09      	ldr	r2, [pc, #36]	@ (80020dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80020b8:	4c09      	ldr	r4, [pc, #36]	@ (80020e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020bc:	e001      	b.n	80020c2 <LoopFillZerobss>

080020be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c0:	3204      	adds	r2, #4

080020c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c4:	d3fb      	bcc.n	80020be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020c6:	f001 fbcf 	bl	8003868 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020ca:	f7fe fc31 	bl	8000930 <main>
  bx lr
 80020ce:	4770      	bx	lr
  ldr r0, =_sdata
 80020d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80020d8:	080051d8 	.word	0x080051d8
  ldr r2, =_sbss
 80020dc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80020e0:	20001004 	.word	0x20001004

080020e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020e4:	e7fe      	b.n	80020e4 <ADC1_2_IRQHandler>
	...

080020e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ec:	4b08      	ldr	r3, [pc, #32]	@ (8002110 <HAL_Init+0x28>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a07      	ldr	r2, [pc, #28]	@ (8002110 <HAL_Init+0x28>)
 80020f2:	f043 0310 	orr.w	r3, r3, #16
 80020f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f8:	2003      	movs	r0, #3
 80020fa:	f000 f92b 	bl	8002354 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020fe:	200f      	movs	r0, #15
 8002100:	f000 f808 	bl	8002114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002104:	f7ff ff66 	bl	8001fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40022000 	.word	0x40022000

08002114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800211c:	4b12      	ldr	r3, [pc, #72]	@ (8002168 <HAL_InitTick+0x54>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b12      	ldr	r3, [pc, #72]	@ (800216c <HAL_InitTick+0x58>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4619      	mov	r1, r3
 8002126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800212a:	fbb3 f3f1 	udiv	r3, r3, r1
 800212e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f935 	bl	80023a2 <HAL_SYSTICK_Config>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e00e      	b.n	8002160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b0f      	cmp	r3, #15
 8002146:	d80a      	bhi.n	800215e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002148:	2200      	movs	r2, #0
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	f04f 30ff 	mov.w	r0, #4294967295
 8002150:	f000 f90b 	bl	800236a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002154:	4a06      	ldr	r2, [pc, #24]	@ (8002170 <HAL_InitTick+0x5c>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	e000      	b.n	8002160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000000 	.word	0x20000000
 800216c:	20000008 	.word	0x20000008
 8002170:	20000004 	.word	0x20000004

08002174 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002178:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <HAL_IncTick+0x1c>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <HAL_IncTick+0x20>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4413      	add	r3, r2
 8002184:	4a03      	ldr	r2, [pc, #12]	@ (8002194 <HAL_IncTick+0x20>)
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	20000008 	.word	0x20000008
 8002194:	20000ec8 	.word	0x20000ec8

08002198 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return uwTick;
 800219c:	4b02      	ldr	r3, [pc, #8]	@ (80021a8 <HAL_GetTick+0x10>)
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	20000ec8 	.word	0x20000ec8

080021ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021b4:	f7ff fff0 	bl	8002198 <HAL_GetTick>
 80021b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c4:	d005      	beq.n	80021d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <HAL_Delay+0x44>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4413      	add	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021d2:	bf00      	nop
 80021d4:	f7ff ffe0 	bl	8002198 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d8f7      	bhi.n	80021d4 <HAL_Delay+0x28>
  {
  }
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000008 	.word	0x20000008

080021f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002204:	4b0c      	ldr	r3, [pc, #48]	@ (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002210:	4013      	ands	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800221c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002226:	4a04      	ldr	r2, [pc, #16]	@ (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	60d3      	str	r3, [r2, #12]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002240:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <__NVIC_GetPriorityGrouping+0x18>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	0a1b      	lsrs	r3, r3, #8
 8002246:	f003 0307 	and.w	r3, r3, #7
}
 800224a:	4618      	mov	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	db0a      	blt.n	8002282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	490c      	ldr	r1, [pc, #48]	@ (80022a4 <__NVIC_SetPriority+0x4c>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	0112      	lsls	r2, r2, #4
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	440b      	add	r3, r1
 800227c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002280:	e00a      	b.n	8002298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4908      	ldr	r1, [pc, #32]	@ (80022a8 <__NVIC_SetPriority+0x50>)
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	3b04      	subs	r3, #4
 8002290:	0112      	lsls	r2, r2, #4
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	440b      	add	r3, r1
 8002296:	761a      	strb	r2, [r3, #24]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000e100 	.word	0xe000e100
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b089      	sub	sp, #36	@ 0x24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f1c3 0307 	rsb	r3, r3, #7
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	bf28      	it	cs
 80022ca:	2304      	movcs	r3, #4
 80022cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3304      	adds	r3, #4
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d902      	bls.n	80022dc <NVIC_EncodePriority+0x30>
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3b03      	subs	r3, #3
 80022da:	e000      	b.n	80022de <NVIC_EncodePriority+0x32>
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	f04f 32ff 	mov.w	r2, #4294967295
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43da      	mvns	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	401a      	ands	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f4:	f04f 31ff 	mov.w	r1, #4294967295
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	43d9      	mvns	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002304:	4313      	orrs	r3, r2
         );
}
 8002306:	4618      	mov	r0, r3
 8002308:	3724      	adds	r7, #36	@ 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3b01      	subs	r3, #1
 800231c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002320:	d301      	bcc.n	8002326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002322:	2301      	movs	r3, #1
 8002324:	e00f      	b.n	8002346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002326:	4a0a      	ldr	r2, [pc, #40]	@ (8002350 <SysTick_Config+0x40>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3b01      	subs	r3, #1
 800232c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800232e:	210f      	movs	r1, #15
 8002330:	f04f 30ff 	mov.w	r0, #4294967295
 8002334:	f7ff ff90 	bl	8002258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002338:	4b05      	ldr	r3, [pc, #20]	@ (8002350 <SysTick_Config+0x40>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800233e:	4b04      	ldr	r3, [pc, #16]	@ (8002350 <SysTick_Config+0x40>)
 8002340:	2207      	movs	r2, #7
 8002342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	e000e010 	.word	0xe000e010

08002354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ff49 	bl	80021f4 <__NVIC_SetPriorityGrouping>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800237c:	f7ff ff5e 	bl	800223c <__NVIC_GetPriorityGrouping>
 8002380:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	6978      	ldr	r0, [r7, #20]
 8002388:	f7ff ff90 	bl	80022ac <NVIC_EncodePriority>
 800238c:	4602      	mov	r2, r0
 800238e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff5f 	bl	8002258 <__NVIC_SetPriority>
}
 800239a:	bf00      	nop
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff ffb0 	bl	8002310 <SysTick_Config>
 80023b0:	4603      	mov	r3, r0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023bc:	b480      	push	{r7}
 80023be:	b08b      	sub	sp, #44	@ 0x2c
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023c6:	2300      	movs	r3, #0
 80023c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023ca:	2300      	movs	r3, #0
 80023cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ce:	e169      	b.n	80026a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023d0:	2201      	movs	r2, #1
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	69fa      	ldr	r2, [r7, #28]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	f040 8158 	bne.w	800269e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	4a9a      	ldr	r2, [pc, #616]	@ (800265c <HAL_GPIO_Init+0x2a0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d05e      	beq.n	80024b6 <HAL_GPIO_Init+0xfa>
 80023f8:	4a98      	ldr	r2, [pc, #608]	@ (800265c <HAL_GPIO_Init+0x2a0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d875      	bhi.n	80024ea <HAL_GPIO_Init+0x12e>
 80023fe:	4a98      	ldr	r2, [pc, #608]	@ (8002660 <HAL_GPIO_Init+0x2a4>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d058      	beq.n	80024b6 <HAL_GPIO_Init+0xfa>
 8002404:	4a96      	ldr	r2, [pc, #600]	@ (8002660 <HAL_GPIO_Init+0x2a4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d86f      	bhi.n	80024ea <HAL_GPIO_Init+0x12e>
 800240a:	4a96      	ldr	r2, [pc, #600]	@ (8002664 <HAL_GPIO_Init+0x2a8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d052      	beq.n	80024b6 <HAL_GPIO_Init+0xfa>
 8002410:	4a94      	ldr	r2, [pc, #592]	@ (8002664 <HAL_GPIO_Init+0x2a8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d869      	bhi.n	80024ea <HAL_GPIO_Init+0x12e>
 8002416:	4a94      	ldr	r2, [pc, #592]	@ (8002668 <HAL_GPIO_Init+0x2ac>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d04c      	beq.n	80024b6 <HAL_GPIO_Init+0xfa>
 800241c:	4a92      	ldr	r2, [pc, #584]	@ (8002668 <HAL_GPIO_Init+0x2ac>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d863      	bhi.n	80024ea <HAL_GPIO_Init+0x12e>
 8002422:	4a92      	ldr	r2, [pc, #584]	@ (800266c <HAL_GPIO_Init+0x2b0>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d046      	beq.n	80024b6 <HAL_GPIO_Init+0xfa>
 8002428:	4a90      	ldr	r2, [pc, #576]	@ (800266c <HAL_GPIO_Init+0x2b0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d85d      	bhi.n	80024ea <HAL_GPIO_Init+0x12e>
 800242e:	2b12      	cmp	r3, #18
 8002430:	d82a      	bhi.n	8002488 <HAL_GPIO_Init+0xcc>
 8002432:	2b12      	cmp	r3, #18
 8002434:	d859      	bhi.n	80024ea <HAL_GPIO_Init+0x12e>
 8002436:	a201      	add	r2, pc, #4	@ (adr r2, 800243c <HAL_GPIO_Init+0x80>)
 8002438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243c:	080024b7 	.word	0x080024b7
 8002440:	08002491 	.word	0x08002491
 8002444:	080024a3 	.word	0x080024a3
 8002448:	080024e5 	.word	0x080024e5
 800244c:	080024eb 	.word	0x080024eb
 8002450:	080024eb 	.word	0x080024eb
 8002454:	080024eb 	.word	0x080024eb
 8002458:	080024eb 	.word	0x080024eb
 800245c:	080024eb 	.word	0x080024eb
 8002460:	080024eb 	.word	0x080024eb
 8002464:	080024eb 	.word	0x080024eb
 8002468:	080024eb 	.word	0x080024eb
 800246c:	080024eb 	.word	0x080024eb
 8002470:	080024eb 	.word	0x080024eb
 8002474:	080024eb 	.word	0x080024eb
 8002478:	080024eb 	.word	0x080024eb
 800247c:	080024eb 	.word	0x080024eb
 8002480:	08002499 	.word	0x08002499
 8002484:	080024ad 	.word	0x080024ad
 8002488:	4a79      	ldr	r2, [pc, #484]	@ (8002670 <HAL_GPIO_Init+0x2b4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d013      	beq.n	80024b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800248e:	e02c      	b.n	80024ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	623b      	str	r3, [r7, #32]
          break;
 8002496:	e029      	b.n	80024ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	3304      	adds	r3, #4
 800249e:	623b      	str	r3, [r7, #32]
          break;
 80024a0:	e024      	b.n	80024ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	3308      	adds	r3, #8
 80024a8:	623b      	str	r3, [r7, #32]
          break;
 80024aa:	e01f      	b.n	80024ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	330c      	adds	r3, #12
 80024b2:	623b      	str	r3, [r7, #32]
          break;
 80024b4:	e01a      	b.n	80024ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d102      	bne.n	80024c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024be:	2304      	movs	r3, #4
 80024c0:	623b      	str	r3, [r7, #32]
          break;
 80024c2:	e013      	b.n	80024ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d105      	bne.n	80024d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024cc:	2308      	movs	r3, #8
 80024ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	611a      	str	r2, [r3, #16]
          break;
 80024d6:	e009      	b.n	80024ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024d8:	2308      	movs	r3, #8
 80024da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69fa      	ldr	r2, [r7, #28]
 80024e0:	615a      	str	r2, [r3, #20]
          break;
 80024e2:	e003      	b.n	80024ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024e4:	2300      	movs	r3, #0
 80024e6:	623b      	str	r3, [r7, #32]
          break;
 80024e8:	e000      	b.n	80024ec <HAL_GPIO_Init+0x130>
          break;
 80024ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	2bff      	cmp	r3, #255	@ 0xff
 80024f0:	d801      	bhi.n	80024f6 <HAL_GPIO_Init+0x13a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	e001      	b.n	80024fa <HAL_GPIO_Init+0x13e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3304      	adds	r3, #4
 80024fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2bff      	cmp	r3, #255	@ 0xff
 8002500:	d802      	bhi.n	8002508 <HAL_GPIO_Init+0x14c>
 8002502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	e002      	b.n	800250e <HAL_GPIO_Init+0x152>
 8002508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250a:	3b08      	subs	r3, #8
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	210f      	movs	r1, #15
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	fa01 f303 	lsl.w	r3, r1, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	401a      	ands	r2, r3
 8002520:	6a39      	ldr	r1, [r7, #32]
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	fa01 f303 	lsl.w	r3, r1, r3
 8002528:	431a      	orrs	r2, r3
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 80b1 	beq.w	800269e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800253c:	4b4d      	ldr	r3, [pc, #308]	@ (8002674 <HAL_GPIO_Init+0x2b8>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	4a4c      	ldr	r2, [pc, #304]	@ (8002674 <HAL_GPIO_Init+0x2b8>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	6193      	str	r3, [r2, #24]
 8002548:	4b4a      	ldr	r3, [pc, #296]	@ (8002674 <HAL_GPIO_Init+0x2b8>)
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002554:	4a48      	ldr	r2, [pc, #288]	@ (8002678 <HAL_GPIO_Init+0x2bc>)
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	089b      	lsrs	r3, r3, #2
 800255a:	3302      	adds	r3, #2
 800255c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002560:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002564:	f003 0303 	and.w	r3, r3, #3
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	220f      	movs	r2, #15
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4013      	ands	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a40      	ldr	r2, [pc, #256]	@ (800267c <HAL_GPIO_Init+0x2c0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d013      	beq.n	80025a8 <HAL_GPIO_Init+0x1ec>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a3f      	ldr	r2, [pc, #252]	@ (8002680 <HAL_GPIO_Init+0x2c4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00d      	beq.n	80025a4 <HAL_GPIO_Init+0x1e8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a3e      	ldr	r2, [pc, #248]	@ (8002684 <HAL_GPIO_Init+0x2c8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d007      	beq.n	80025a0 <HAL_GPIO_Init+0x1e4>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a3d      	ldr	r2, [pc, #244]	@ (8002688 <HAL_GPIO_Init+0x2cc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d101      	bne.n	800259c <HAL_GPIO_Init+0x1e0>
 8002598:	2303      	movs	r3, #3
 800259a:	e006      	b.n	80025aa <HAL_GPIO_Init+0x1ee>
 800259c:	2304      	movs	r3, #4
 800259e:	e004      	b.n	80025aa <HAL_GPIO_Init+0x1ee>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e002      	b.n	80025aa <HAL_GPIO_Init+0x1ee>
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <HAL_GPIO_Init+0x1ee>
 80025a8:	2300      	movs	r3, #0
 80025aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ac:	f002 0203 	and.w	r2, r2, #3
 80025b0:	0092      	lsls	r2, r2, #2
 80025b2:	4093      	lsls	r3, r2
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025ba:	492f      	ldr	r1, [pc, #188]	@ (8002678 <HAL_GPIO_Init+0x2bc>)
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	3302      	adds	r3, #2
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d006      	beq.n	80025e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025d4:	4b2d      	ldr	r3, [pc, #180]	@ (800268c <HAL_GPIO_Init+0x2d0>)
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	492c      	ldr	r1, [pc, #176]	@ (800268c <HAL_GPIO_Init+0x2d0>)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	608b      	str	r3, [r1, #8]
 80025e0:	e006      	b.n	80025f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025e2:	4b2a      	ldr	r3, [pc, #168]	@ (800268c <HAL_GPIO_Init+0x2d0>)
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	4928      	ldr	r1, [pc, #160]	@ (800268c <HAL_GPIO_Init+0x2d0>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d006      	beq.n	800260a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025fc:	4b23      	ldr	r3, [pc, #140]	@ (800268c <HAL_GPIO_Init+0x2d0>)
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	4922      	ldr	r1, [pc, #136]	@ (800268c <HAL_GPIO_Init+0x2d0>)
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	60cb      	str	r3, [r1, #12]
 8002608:	e006      	b.n	8002618 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800260a:	4b20      	ldr	r3, [pc, #128]	@ (800268c <HAL_GPIO_Init+0x2d0>)
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	43db      	mvns	r3, r3
 8002612:	491e      	ldr	r1, [pc, #120]	@ (800268c <HAL_GPIO_Init+0x2d0>)
 8002614:	4013      	ands	r3, r2
 8002616:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d006      	beq.n	8002632 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002624:	4b19      	ldr	r3, [pc, #100]	@ (800268c <HAL_GPIO_Init+0x2d0>)
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	4918      	ldr	r1, [pc, #96]	@ (800268c <HAL_GPIO_Init+0x2d0>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
 8002630:	e006      	b.n	8002640 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002632:	4b16      	ldr	r3, [pc, #88]	@ (800268c <HAL_GPIO_Init+0x2d0>)
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	43db      	mvns	r3, r3
 800263a:	4914      	ldr	r1, [pc, #80]	@ (800268c <HAL_GPIO_Init+0x2d0>)
 800263c:	4013      	ands	r3, r2
 800263e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d021      	beq.n	8002690 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800264c:	4b0f      	ldr	r3, [pc, #60]	@ (800268c <HAL_GPIO_Init+0x2d0>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	490e      	ldr	r1, [pc, #56]	@ (800268c <HAL_GPIO_Init+0x2d0>)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	4313      	orrs	r3, r2
 8002656:	600b      	str	r3, [r1, #0]
 8002658:	e021      	b.n	800269e <HAL_GPIO_Init+0x2e2>
 800265a:	bf00      	nop
 800265c:	10320000 	.word	0x10320000
 8002660:	10310000 	.word	0x10310000
 8002664:	10220000 	.word	0x10220000
 8002668:	10210000 	.word	0x10210000
 800266c:	10120000 	.word	0x10120000
 8002670:	10110000 	.word	0x10110000
 8002674:	40021000 	.word	0x40021000
 8002678:	40010000 	.word	0x40010000
 800267c:	40010800 	.word	0x40010800
 8002680:	40010c00 	.word	0x40010c00
 8002684:	40011000 	.word	0x40011000
 8002688:	40011400 	.word	0x40011400
 800268c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002690:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <HAL_GPIO_Init+0x304>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	43db      	mvns	r3, r3
 8002698:	4909      	ldr	r1, [pc, #36]	@ (80026c0 <HAL_GPIO_Init+0x304>)
 800269a:	4013      	ands	r3, r2
 800269c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800269e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a0:	3301      	adds	r3, #1
 80026a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026aa:	fa22 f303 	lsr.w	r3, r2, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f47f ae8e 	bne.w	80023d0 <HAL_GPIO_Init+0x14>
  }
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	372c      	adds	r7, #44	@ 0x2c
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	40010400 	.word	0x40010400

080026c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	807b      	strh	r3, [r7, #2]
 80026d0:	4613      	mov	r3, r2
 80026d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026d4:	787b      	ldrb	r3, [r7, #1]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026da:	887a      	ldrh	r2, [r7, #2]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026e0:	e003      	b.n	80026ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026e2:	887b      	ldrh	r3, [r7, #2]
 80026e4:	041a      	lsls	r2, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	611a      	str	r2, [r3, #16]
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e12b      	b.n	800295e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7fe f8ca 	bl	80008b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2224      	movs	r2, #36	@ 0x24
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002746:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002756:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002758:	f001 f832 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 800275c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4a81      	ldr	r2, [pc, #516]	@ (8002968 <HAL_I2C_Init+0x274>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d807      	bhi.n	8002778 <HAL_I2C_Init+0x84>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4a80      	ldr	r2, [pc, #512]	@ (800296c <HAL_I2C_Init+0x278>)
 800276c:	4293      	cmp	r3, r2
 800276e:	bf94      	ite	ls
 8002770:	2301      	movls	r3, #1
 8002772:	2300      	movhi	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	e006      	b.n	8002786 <HAL_I2C_Init+0x92>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4a7d      	ldr	r2, [pc, #500]	@ (8002970 <HAL_I2C_Init+0x27c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	bf94      	ite	ls
 8002780:	2301      	movls	r3, #1
 8002782:	2300      	movhi	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e0e7      	b.n	800295e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4a78      	ldr	r2, [pc, #480]	@ (8002974 <HAL_I2C_Init+0x280>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	0c9b      	lsrs	r3, r3, #18
 8002798:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	4a6a      	ldr	r2, [pc, #424]	@ (8002968 <HAL_I2C_Init+0x274>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d802      	bhi.n	80027c8 <HAL_I2C_Init+0xd4>
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	3301      	adds	r3, #1
 80027c6:	e009      	b.n	80027dc <HAL_I2C_Init+0xe8>
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027ce:	fb02 f303 	mul.w	r3, r2, r3
 80027d2:	4a69      	ldr	r2, [pc, #420]	@ (8002978 <HAL_I2C_Init+0x284>)
 80027d4:	fba2 2303 	umull	r2, r3, r2, r3
 80027d8:	099b      	lsrs	r3, r3, #6
 80027da:	3301      	adds	r3, #1
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	430b      	orrs	r3, r1
 80027e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80027ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	495c      	ldr	r1, [pc, #368]	@ (8002968 <HAL_I2C_Init+0x274>)
 80027f8:	428b      	cmp	r3, r1
 80027fa:	d819      	bhi.n	8002830 <HAL_I2C_Init+0x13c>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	1e59      	subs	r1, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	fbb1 f3f3 	udiv	r3, r1, r3
 800280a:	1c59      	adds	r1, r3, #1
 800280c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002810:	400b      	ands	r3, r1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00a      	beq.n	800282c <HAL_I2C_Init+0x138>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1e59      	subs	r1, r3, #1
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	fbb1 f3f3 	udiv	r3, r1, r3
 8002824:	3301      	adds	r3, #1
 8002826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800282a:	e051      	b.n	80028d0 <HAL_I2C_Init+0x1dc>
 800282c:	2304      	movs	r3, #4
 800282e:	e04f      	b.n	80028d0 <HAL_I2C_Init+0x1dc>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d111      	bne.n	800285c <HAL_I2C_Init+0x168>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	1e58      	subs	r0, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6859      	ldr	r1, [r3, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	440b      	add	r3, r1
 8002846:	fbb0 f3f3 	udiv	r3, r0, r3
 800284a:	3301      	adds	r3, #1
 800284c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf0c      	ite	eq
 8002854:	2301      	moveq	r3, #1
 8002856:	2300      	movne	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	e012      	b.n	8002882 <HAL_I2C_Init+0x18e>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1e58      	subs	r0, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6859      	ldr	r1, [r3, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	0099      	lsls	r1, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002872:	3301      	adds	r3, #1
 8002874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_I2C_Init+0x196>
 8002886:	2301      	movs	r3, #1
 8002888:	e022      	b.n	80028d0 <HAL_I2C_Init+0x1dc>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10e      	bne.n	80028b0 <HAL_I2C_Init+0x1bc>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1e58      	subs	r0, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6859      	ldr	r1, [r3, #4]
 800289a:	460b      	mov	r3, r1
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	440b      	add	r3, r1
 80028a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a4:	3301      	adds	r3, #1
 80028a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028ae:	e00f      	b.n	80028d0 <HAL_I2C_Init+0x1dc>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1e58      	subs	r0, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6859      	ldr	r1, [r3, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	0099      	lsls	r1, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c6:	3301      	adds	r3, #1
 80028c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	6809      	ldr	r1, [r1, #0]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69da      	ldr	r2, [r3, #28]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80028fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6911      	ldr	r1, [r2, #16]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68d2      	ldr	r2, [r2, #12]
 800290a:	4311      	orrs	r1, r2
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	430b      	orrs	r3, r1
 8002912:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695a      	ldr	r2, [r3, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	000186a0 	.word	0x000186a0
 800296c:	001e847f 	.word	0x001e847f
 8002970:	003d08ff 	.word	0x003d08ff
 8002974:	431bde83 	.word	0x431bde83
 8002978:	10624dd3 	.word	0x10624dd3

0800297c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	461a      	mov	r2, r3
 8002988:	460b      	mov	r3, r1
 800298a:	817b      	strh	r3, [r7, #10]
 800298c:	4613      	mov	r3, r2
 800298e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002990:	f7ff fc02 	bl	8002198 <HAL_GetTick>
 8002994:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b20      	cmp	r3, #32
 80029a0:	f040 80e0 	bne.w	8002b64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	2319      	movs	r3, #25
 80029aa:	2201      	movs	r2, #1
 80029ac:	4970      	ldr	r1, [pc, #448]	@ (8002b70 <HAL_I2C_Master_Transmit+0x1f4>)
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f964 	bl	8002c7c <I2C_WaitOnFlagUntilTimeout>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80029ba:	2302      	movs	r3, #2
 80029bc:	e0d3      	b.n	8002b66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d101      	bne.n	80029cc <HAL_I2C_Master_Transmit+0x50>
 80029c8:	2302      	movs	r3, #2
 80029ca:	e0cc      	b.n	8002b66 <HAL_I2C_Master_Transmit+0x1ea>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d007      	beq.n	80029f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0201 	orr.w	r2, r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2221      	movs	r2, #33	@ 0x21
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2210      	movs	r2, #16
 8002a0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	893a      	ldrh	r2, [r7, #8]
 8002a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4a50      	ldr	r2, [pc, #320]	@ (8002b74 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a34:	8979      	ldrh	r1, [r7, #10]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	6a3a      	ldr	r2, [r7, #32]
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 f89c 	bl	8002b78 <I2C_MasterRequestWrite>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e08d      	b.n	8002b66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a60:	e066      	b.n	8002b30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	6a39      	ldr	r1, [r7, #32]
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 fa22 	bl	8002eb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00d      	beq.n	8002a8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d107      	bne.n	8002a8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e06b      	b.n	8002b66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a92:	781a      	ldrb	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d11b      	bne.n	8002b04 <HAL_I2C_Master_Transmit+0x188>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d017      	beq.n	8002b04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad8:	781a      	ldrb	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	6a39      	ldr	r1, [r7, #32]
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 fa19 	bl	8002f40 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00d      	beq.n	8002b30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d107      	bne.n	8002b2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e01a      	b.n	8002b66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d194      	bne.n	8002a62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	e000      	b.n	8002b66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b64:	2302      	movs	r3, #2
  }
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	00100002 	.word	0x00100002
 8002b74:	ffff0000 	.word	0xffff0000

08002b78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	607a      	str	r2, [r7, #4]
 8002b82:	603b      	str	r3, [r7, #0]
 8002b84:	460b      	mov	r3, r1
 8002b86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d006      	beq.n	8002ba2 <I2C_MasterRequestWrite+0x2a>
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d003      	beq.n	8002ba2 <I2C_MasterRequestWrite+0x2a>
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ba0:	d108      	bne.n	8002bb4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	e00b      	b.n	8002bcc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb8:	2b12      	cmp	r3, #18
 8002bba:	d107      	bne.n	8002bcc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 f84f 	bl	8002c7c <I2C_WaitOnFlagUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00d      	beq.n	8002c00 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bf2:	d103      	bne.n	8002bfc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bfa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e035      	b.n	8002c6c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c08:	d108      	bne.n	8002c1c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c0a:	897b      	ldrh	r3, [r7, #10]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c18:	611a      	str	r2, [r3, #16]
 8002c1a:	e01b      	b.n	8002c54 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c1c:	897b      	ldrh	r3, [r7, #10]
 8002c1e:	11db      	asrs	r3, r3, #7
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	f003 0306 	and.w	r3, r3, #6
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	f063 030f 	orn	r3, r3, #15
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	490e      	ldr	r1, [pc, #56]	@ (8002c74 <I2C_MasterRequestWrite+0xfc>)
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 f898 	bl	8002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e010      	b.n	8002c6c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c4a:	897b      	ldrh	r3, [r7, #10]
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	4907      	ldr	r1, [pc, #28]	@ (8002c78 <I2C_MasterRequestWrite+0x100>)
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f888 	bl	8002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	00010008 	.word	0x00010008
 8002c78:	00010002 	.word	0x00010002

08002c7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c8c:	e048      	b.n	8002d20 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c94:	d044      	beq.n	8002d20 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c96:	f7ff fa7f 	bl	8002198 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d302      	bcc.n	8002cac <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d139      	bne.n	8002d20 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	0c1b      	lsrs	r3, r3, #16
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d10d      	bne.n	8002cd2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	43da      	mvns	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2301      	moveq	r3, #1
 8002cca:	2300      	movne	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	461a      	mov	r2, r3
 8002cd0:	e00c      	b.n	8002cec <I2C_WaitOnFlagUntilTimeout+0x70>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	43da      	mvns	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	bf0c      	ite	eq
 8002ce4:	2301      	moveq	r3, #1
 8002ce6:	2300      	movne	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d116      	bne.n	8002d20 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0c:	f043 0220 	orr.w	r2, r3, #32
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e023      	b.n	8002d68 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	0c1b      	lsrs	r3, r3, #16
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d10d      	bne.n	8002d46 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	43da      	mvns	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	4013      	ands	r3, r2
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	2300      	movne	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	e00c      	b.n	8002d60 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	43da      	mvns	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4013      	ands	r3, r2
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d093      	beq.n	8002c8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d7e:	e071      	b.n	8002e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d8e:	d123      	bne.n	8002dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d9e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002da8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc4:	f043 0204 	orr.w	r2, r3, #4
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e067      	b.n	8002ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dde:	d041      	beq.n	8002e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de0:	f7ff f9da 	bl	8002198 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d302      	bcc.n	8002df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d136      	bne.n	8002e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	0c1b      	lsrs	r3, r3, #16
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d10c      	bne.n	8002e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	43da      	mvns	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	bf14      	ite	ne
 8002e12:	2301      	movne	r3, #1
 8002e14:	2300      	moveq	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	e00b      	b.n	8002e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	43da      	mvns	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4013      	ands	r3, r2
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	bf14      	ite	ne
 8002e2c:	2301      	movne	r3, #1
 8002e2e:	2300      	moveq	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d016      	beq.n	8002e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e50:	f043 0220 	orr.w	r2, r3, #32
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e021      	b.n	8002ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	0c1b      	lsrs	r3, r3, #16
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d10c      	bne.n	8002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	43da      	mvns	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	bf14      	ite	ne
 8002e80:	2301      	movne	r3, #1
 8002e82:	2300      	moveq	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	e00b      	b.n	8002ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4013      	ands	r3, r2
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	bf14      	ite	ne
 8002e9a:	2301      	movne	r3, #1
 8002e9c:	2300      	moveq	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f47f af6d 	bne.w	8002d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ebc:	e034      	b.n	8002f28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f886 	bl	8002fd0 <I2C_IsAcknowledgeFailed>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e034      	b.n	8002f38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed4:	d028      	beq.n	8002f28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed6:	f7ff f95f 	bl	8002198 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d302      	bcc.n	8002eec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d11d      	bne.n	8002f28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef6:	2b80      	cmp	r3, #128	@ 0x80
 8002ef8:	d016      	beq.n	8002f28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	f043 0220 	orr.w	r2, r3, #32
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e007      	b.n	8002f38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f32:	2b80      	cmp	r3, #128	@ 0x80
 8002f34:	d1c3      	bne.n	8002ebe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f4c:	e034      	b.n	8002fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f83e 	bl	8002fd0 <I2C_IsAcknowledgeFailed>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e034      	b.n	8002fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f64:	d028      	beq.n	8002fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f66:	f7ff f917 	bl	8002198 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d302      	bcc.n	8002f7c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d11d      	bne.n	8002fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d016      	beq.n	8002fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa4:	f043 0220 	orr.w	r2, r3, #32
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e007      	b.n	8002fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d1c3      	bne.n	8002f4e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fe6:	d11b      	bne.n	8003020 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ff0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300c:	f043 0204 	orr.w	r2, r3, #4
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e272      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 8087 	beq.w	800315a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800304c:	4b92      	ldr	r3, [pc, #584]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 030c 	and.w	r3, r3, #12
 8003054:	2b04      	cmp	r3, #4
 8003056:	d00c      	beq.n	8003072 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003058:	4b8f      	ldr	r3, [pc, #572]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 030c 	and.w	r3, r3, #12
 8003060:	2b08      	cmp	r3, #8
 8003062:	d112      	bne.n	800308a <HAL_RCC_OscConfig+0x5e>
 8003064:	4b8c      	ldr	r3, [pc, #560]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003070:	d10b      	bne.n	800308a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003072:	4b89      	ldr	r3, [pc, #548]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d06c      	beq.n	8003158 <HAL_RCC_OscConfig+0x12c>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d168      	bne.n	8003158 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e24c      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003092:	d106      	bne.n	80030a2 <HAL_RCC_OscConfig+0x76>
 8003094:	4b80      	ldr	r3, [pc, #512]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a7f      	ldr	r2, [pc, #508]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 800309a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800309e:	6013      	str	r3, [r2, #0]
 80030a0:	e02e      	b.n	8003100 <HAL_RCC_OscConfig+0xd4>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10c      	bne.n	80030c4 <HAL_RCC_OscConfig+0x98>
 80030aa:	4b7b      	ldr	r3, [pc, #492]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a7a      	ldr	r2, [pc, #488]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	4b78      	ldr	r3, [pc, #480]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a77      	ldr	r2, [pc, #476]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	e01d      	b.n	8003100 <HAL_RCC_OscConfig+0xd4>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCC_OscConfig+0xbc>
 80030ce:	4b72      	ldr	r3, [pc, #456]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a71      	ldr	r2, [pc, #452]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	4b6f      	ldr	r3, [pc, #444]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a6e      	ldr	r2, [pc, #440]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	e00b      	b.n	8003100 <HAL_RCC_OscConfig+0xd4>
 80030e8:	4b6b      	ldr	r3, [pc, #428]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a6a      	ldr	r2, [pc, #424]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	4b68      	ldr	r3, [pc, #416]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a67      	ldr	r2, [pc, #412]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d013      	beq.n	8003130 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7ff f846 	bl	8002198 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003110:	f7ff f842 	bl	8002198 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	@ 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e200      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	4b5d      	ldr	r3, [pc, #372]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0xe4>
 800312e:	e014      	b.n	800315a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7ff f832 	bl	8002198 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003138:	f7ff f82e 	bl	8002198 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	@ 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e1ec      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314a:	4b53      	ldr	r3, [pc, #332]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x10c>
 8003156:	e000      	b.n	800315a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d063      	beq.n	800322e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003166:	4b4c      	ldr	r3, [pc, #304]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00b      	beq.n	800318a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003172:	4b49      	ldr	r3, [pc, #292]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b08      	cmp	r3, #8
 800317c:	d11c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x18c>
 800317e:	4b46      	ldr	r3, [pc, #280]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d116      	bne.n	80031b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318a:	4b43      	ldr	r3, [pc, #268]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <HAL_RCC_OscConfig+0x176>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d001      	beq.n	80031a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e1c0      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4939      	ldr	r1, [pc, #228]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b6:	e03a      	b.n	800322e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d020      	beq.n	8003202 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c0:	4b36      	ldr	r3, [pc, #216]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fe ffe7 	bl	8002198 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ce:	f7fe ffe3 	bl	8002198 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e1a1      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4927      	ldr	r1, [pc, #156]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	600b      	str	r3, [r1, #0]
 8003200:	e015      	b.n	800322e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003202:	4b26      	ldr	r3, [pc, #152]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7fe ffc6 	bl	8002198 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003210:	f7fe ffc2 	bl	8002198 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e180      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003222:	4b1d      	ldr	r3, [pc, #116]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d03a      	beq.n	80032b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d019      	beq.n	8003276 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003242:	4b17      	ldr	r3, [pc, #92]	@ (80032a0 <HAL_RCC_OscConfig+0x274>)
 8003244:	2201      	movs	r2, #1
 8003246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003248:	f7fe ffa6 	bl	8002198 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003250:	f7fe ffa2 	bl	8002198 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e160      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003262:	4b0d      	ldr	r3, [pc, #52]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800326e:	2001      	movs	r0, #1
 8003270:	f000 faba 	bl	80037e8 <RCC_Delay>
 8003274:	e01c      	b.n	80032b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003276:	4b0a      	ldr	r3, [pc, #40]	@ (80032a0 <HAL_RCC_OscConfig+0x274>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327c:	f7fe ff8c 	bl	8002198 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003282:	e00f      	b.n	80032a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003284:	f7fe ff88 	bl	8002198 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d908      	bls.n	80032a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e146      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
 8003296:	bf00      	nop
 8003298:	40021000 	.word	0x40021000
 800329c:	42420000 	.word	0x42420000
 80032a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a4:	4b92      	ldr	r3, [pc, #584]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1e9      	bne.n	8003284 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80a6 	beq.w	800340a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032be:	2300      	movs	r3, #0
 80032c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c2:	4b8b      	ldr	r3, [pc, #556]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10d      	bne.n	80032ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ce:	4b88      	ldr	r3, [pc, #544]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	4a87      	ldr	r2, [pc, #540]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80032d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032d8:	61d3      	str	r3, [r2, #28]
 80032da:	4b85      	ldr	r3, [pc, #532]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e6:	2301      	movs	r3, #1
 80032e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ea:	4b82      	ldr	r3, [pc, #520]	@ (80034f4 <HAL_RCC_OscConfig+0x4c8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d118      	bne.n	8003328 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f6:	4b7f      	ldr	r3, [pc, #508]	@ (80034f4 <HAL_RCC_OscConfig+0x4c8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a7e      	ldr	r2, [pc, #504]	@ (80034f4 <HAL_RCC_OscConfig+0x4c8>)
 80032fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003302:	f7fe ff49 	bl	8002198 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330a:	f7fe ff45 	bl	8002198 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b64      	cmp	r3, #100	@ 0x64
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e103      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331c:	4b75      	ldr	r3, [pc, #468]	@ (80034f4 <HAL_RCC_OscConfig+0x4c8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d106      	bne.n	800333e <HAL_RCC_OscConfig+0x312>
 8003330:	4b6f      	ldr	r3, [pc, #444]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	4a6e      	ldr	r2, [pc, #440]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003336:	f043 0301 	orr.w	r3, r3, #1
 800333a:	6213      	str	r3, [r2, #32]
 800333c:	e02d      	b.n	800339a <HAL_RCC_OscConfig+0x36e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10c      	bne.n	8003360 <HAL_RCC_OscConfig+0x334>
 8003346:	4b6a      	ldr	r3, [pc, #424]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	4a69      	ldr	r2, [pc, #420]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 800334c:	f023 0301 	bic.w	r3, r3, #1
 8003350:	6213      	str	r3, [r2, #32]
 8003352:	4b67      	ldr	r3, [pc, #412]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	4a66      	ldr	r2, [pc, #408]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003358:	f023 0304 	bic.w	r3, r3, #4
 800335c:	6213      	str	r3, [r2, #32]
 800335e:	e01c      	b.n	800339a <HAL_RCC_OscConfig+0x36e>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	2b05      	cmp	r3, #5
 8003366:	d10c      	bne.n	8003382 <HAL_RCC_OscConfig+0x356>
 8003368:	4b61      	ldr	r3, [pc, #388]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	4a60      	ldr	r2, [pc, #384]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 800336e:	f043 0304 	orr.w	r3, r3, #4
 8003372:	6213      	str	r3, [r2, #32]
 8003374:	4b5e      	ldr	r3, [pc, #376]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	4a5d      	ldr	r2, [pc, #372]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6213      	str	r3, [r2, #32]
 8003380:	e00b      	b.n	800339a <HAL_RCC_OscConfig+0x36e>
 8003382:	4b5b      	ldr	r3, [pc, #364]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	4a5a      	ldr	r2, [pc, #360]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003388:	f023 0301 	bic.w	r3, r3, #1
 800338c:	6213      	str	r3, [r2, #32]
 800338e:	4b58      	ldr	r3, [pc, #352]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	4a57      	ldr	r2, [pc, #348]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003394:	f023 0304 	bic.w	r3, r3, #4
 8003398:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d015      	beq.n	80033ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a2:	f7fe fef9 	bl	8002198 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a8:	e00a      	b.n	80033c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033aa:	f7fe fef5 	bl	8002198 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e0b1      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c0:	4b4b      	ldr	r3, [pc, #300]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0ee      	beq.n	80033aa <HAL_RCC_OscConfig+0x37e>
 80033cc:	e014      	b.n	80033f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ce:	f7fe fee3 	bl	8002198 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d4:	e00a      	b.n	80033ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d6:	f7fe fedf 	bl	8002198 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e09b      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ec:	4b40      	ldr	r3, [pc, #256]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1ee      	bne.n	80033d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033f8:	7dfb      	ldrb	r3, [r7, #23]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d105      	bne.n	800340a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033fe:	4b3c      	ldr	r3, [pc, #240]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	4a3b      	ldr	r2, [pc, #236]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003408:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 8087 	beq.w	8003522 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003414:	4b36      	ldr	r3, [pc, #216]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 030c 	and.w	r3, r3, #12
 800341c:	2b08      	cmp	r3, #8
 800341e:	d061      	beq.n	80034e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d146      	bne.n	80034b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003428:	4b33      	ldr	r3, [pc, #204]	@ (80034f8 <HAL_RCC_OscConfig+0x4cc>)
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342e:	f7fe feb3 	bl	8002198 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003436:	f7fe feaf 	bl	8002198 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e06d      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003448:	4b29      	ldr	r3, [pc, #164]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f0      	bne.n	8003436 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800345c:	d108      	bne.n	8003470 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800345e:	4b24      	ldr	r3, [pc, #144]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	4921      	ldr	r1, [pc, #132]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 800346c:	4313      	orrs	r3, r2
 800346e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003470:	4b1f      	ldr	r3, [pc, #124]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a19      	ldr	r1, [r3, #32]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	430b      	orrs	r3, r1
 8003482:	491b      	ldr	r1, [pc, #108]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003484:	4313      	orrs	r3, r2
 8003486:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003488:	4b1b      	ldr	r3, [pc, #108]	@ (80034f8 <HAL_RCC_OscConfig+0x4cc>)
 800348a:	2201      	movs	r2, #1
 800348c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348e:	f7fe fe83 	bl	8002198 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003496:	f7fe fe7f 	bl	8002198 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e03d      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034a8:	4b11      	ldr	r3, [pc, #68]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x46a>
 80034b4:	e035      	b.n	8003522 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b6:	4b10      	ldr	r3, [pc, #64]	@ (80034f8 <HAL_RCC_OscConfig+0x4cc>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7fe fe6c 	bl	8002198 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c4:	f7fe fe68 	bl	8002198 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e026      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d6:	4b06      	ldr	r3, [pc, #24]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x498>
 80034e2:	e01e      	b.n	8003522 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d107      	bne.n	80034fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e019      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40007000 	.word	0x40007000
 80034f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034fc:	4b0b      	ldr	r3, [pc, #44]	@ (800352c <HAL_RCC_OscConfig+0x500>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	429a      	cmp	r2, r3
 800350e:	d106      	bne.n	800351e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351a:	429a      	cmp	r2, r3
 800351c:	d001      	beq.n	8003522 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40021000 	.word	0x40021000

08003530 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0d0      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003544:	4b6a      	ldr	r3, [pc, #424]	@ (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d910      	bls.n	8003574 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b67      	ldr	r3, [pc, #412]	@ (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 0207 	bic.w	r2, r3, #7
 800355a:	4965      	ldr	r1, [pc, #404]	@ (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	4b63      	ldr	r3, [pc, #396]	@ (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0b8      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d020      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800358c:	4b59      	ldr	r3, [pc, #356]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4a58      	ldr	r2, [pc, #352]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003596:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035a4:	4b53      	ldr	r3, [pc, #332]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	4a52      	ldr	r2, [pc, #328]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80035ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b0:	4b50      	ldr	r3, [pc, #320]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	494d      	ldr	r1, [pc, #308]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d040      	beq.n	8003650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	4b47      	ldr	r3, [pc, #284]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d115      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e07f      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ee:	4b41      	ldr	r3, [pc, #260]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e073      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fe:	4b3d      	ldr	r3, [pc, #244]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e06b      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800360e:	4b39      	ldr	r3, [pc, #228]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f023 0203 	bic.w	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	4936      	ldr	r1, [pc, #216]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003620:	f7fe fdba 	bl	8002198 <HAL_GetTick>
 8003624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	e00a      	b.n	800363e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003628:	f7fe fdb6 	bl	8002198 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e053      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	4b2d      	ldr	r3, [pc, #180]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 020c 	and.w	r2, r3, #12
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	429a      	cmp	r2, r3
 800364e:	d1eb      	bne.n	8003628 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003650:	4b27      	ldr	r3, [pc, #156]	@ (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d210      	bcs.n	8003680 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365e:	4b24      	ldr	r3, [pc, #144]	@ (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 0207 	bic.w	r2, r3, #7
 8003666:	4922      	ldr	r1, [pc, #136]	@ (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	4313      	orrs	r3, r2
 800366c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800366e:	4b20      	ldr	r3, [pc, #128]	@ (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d001      	beq.n	8003680 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e032      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800368c:	4b19      	ldr	r3, [pc, #100]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4916      	ldr	r1, [pc, #88]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 800369a:	4313      	orrs	r3, r2
 800369c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d009      	beq.n	80036be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036aa:	4b12      	ldr	r3, [pc, #72]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	490e      	ldr	r1, [pc, #56]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036be:	f000 f821 	bl	8003704 <HAL_RCC_GetSysClockFreq>
 80036c2:	4602      	mov	r2, r0
 80036c4:	4b0b      	ldr	r3, [pc, #44]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	490a      	ldr	r1, [pc, #40]	@ (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036d0:	5ccb      	ldrb	r3, [r1, r3]
 80036d2:	fa22 f303 	lsr.w	r3, r2, r3
 80036d6:	4a09      	ldr	r2, [pc, #36]	@ (80036fc <HAL_RCC_ClockConfig+0x1cc>)
 80036d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036da:	4b09      	ldr	r3, [pc, #36]	@ (8003700 <HAL_RCC_ClockConfig+0x1d0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fe fd18 	bl	8002114 <HAL_InitTick>

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40022000 	.word	0x40022000
 80036f4:	40021000 	.word	0x40021000
 80036f8:	08004dac 	.word	0x08004dac
 80036fc:	20000000 	.word	0x20000000
 8003700:	20000004 	.word	0x20000004

08003704 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	2300      	movs	r3, #0
 8003718:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800371e:	4b1e      	ldr	r3, [pc, #120]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x94>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b04      	cmp	r3, #4
 800372c:	d002      	beq.n	8003734 <HAL_RCC_GetSysClockFreq+0x30>
 800372e:	2b08      	cmp	r3, #8
 8003730:	d003      	beq.n	800373a <HAL_RCC_GetSysClockFreq+0x36>
 8003732:	e027      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003734:	4b19      	ldr	r3, [pc, #100]	@ (800379c <HAL_RCC_GetSysClockFreq+0x98>)
 8003736:	613b      	str	r3, [r7, #16]
      break;
 8003738:	e027      	b.n	800378a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	0c9b      	lsrs	r3, r3, #18
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	4a17      	ldr	r2, [pc, #92]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003744:	5cd3      	ldrb	r3, [r2, r3]
 8003746:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d010      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003752:	4b11      	ldr	r3, [pc, #68]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x94>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	0c5b      	lsrs	r3, r3, #17
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	4a11      	ldr	r2, [pc, #68]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800375e:	5cd3      	ldrb	r3, [r2, r3]
 8003760:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a0d      	ldr	r2, [pc, #52]	@ (800379c <HAL_RCC_GetSysClockFreq+0x98>)
 8003766:	fb03 f202 	mul.w	r2, r3, r2
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	e004      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a0c      	ldr	r2, [pc, #48]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003778:	fb02 f303 	mul.w	r3, r2, r3
 800377c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	613b      	str	r3, [r7, #16]
      break;
 8003782:	e002      	b.n	800378a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003784:	4b05      	ldr	r3, [pc, #20]	@ (800379c <HAL_RCC_GetSysClockFreq+0x98>)
 8003786:	613b      	str	r3, [r7, #16]
      break;
 8003788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800378a:	693b      	ldr	r3, [r7, #16]
}
 800378c:	4618      	mov	r0, r3
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40021000 	.word	0x40021000
 800379c:	007a1200 	.word	0x007a1200
 80037a0:	08004dc4 	.word	0x08004dc4
 80037a4:	08004dd4 	.word	0x08004dd4
 80037a8:	003d0900 	.word	0x003d0900

080037ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b0:	4b02      	ldr	r3, [pc, #8]	@ (80037bc <HAL_RCC_GetHCLKFreq+0x10>)
 80037b2:	681b      	ldr	r3, [r3, #0]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr
 80037bc:	20000000 	.word	0x20000000

080037c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037c4:	f7ff fff2 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b05      	ldr	r3, [pc, #20]	@ (80037e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	0a1b      	lsrs	r3, r3, #8
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4903      	ldr	r1, [pc, #12]	@ (80037e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40021000 	.word	0x40021000
 80037e4:	08004dbc 	.word	0x08004dbc

080037e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037f0:	4b0a      	ldr	r3, [pc, #40]	@ (800381c <RCC_Delay+0x34>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003820 <RCC_Delay+0x38>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	0a5b      	lsrs	r3, r3, #9
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	fb02 f303 	mul.w	r3, r2, r3
 8003802:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003804:	bf00      	nop
  }
  while (Delay --);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1e5a      	subs	r2, r3, #1
 800380a:	60fa      	str	r2, [r7, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f9      	bne.n	8003804 <RCC_Delay+0x1c>
}
 8003810:	bf00      	nop
 8003812:	bf00      	nop
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr
 800381c:	20000000 	.word	0x20000000
 8003820:	10624dd3 	.word	0x10624dd3

08003824 <memset>:
 8003824:	4603      	mov	r3, r0
 8003826:	4402      	add	r2, r0
 8003828:	4293      	cmp	r3, r2
 800382a:	d100      	bne.n	800382e <memset+0xa>
 800382c:	4770      	bx	lr
 800382e:	f803 1b01 	strb.w	r1, [r3], #1
 8003832:	e7f9      	b.n	8003828 <memset+0x4>

08003834 <strncpy>:
 8003834:	4603      	mov	r3, r0
 8003836:	b510      	push	{r4, lr}
 8003838:	3901      	subs	r1, #1
 800383a:	b132      	cbz	r2, 800384a <strncpy+0x16>
 800383c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003840:	3a01      	subs	r2, #1
 8003842:	f803 4b01 	strb.w	r4, [r3], #1
 8003846:	2c00      	cmp	r4, #0
 8003848:	d1f7      	bne.n	800383a <strncpy+0x6>
 800384a:	2100      	movs	r1, #0
 800384c:	441a      	add	r2, r3
 800384e:	4293      	cmp	r3, r2
 8003850:	d100      	bne.n	8003854 <strncpy+0x20>
 8003852:	bd10      	pop	{r4, pc}
 8003854:	f803 1b01 	strb.w	r1, [r3], #1
 8003858:	e7f9      	b.n	800384e <strncpy+0x1a>
	...

0800385c <__errno>:
 800385c:	4b01      	ldr	r3, [pc, #4]	@ (8003864 <__errno+0x8>)
 800385e:	6818      	ldr	r0, [r3, #0]
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	2000000c 	.word	0x2000000c

08003868 <__libc_init_array>:
 8003868:	b570      	push	{r4, r5, r6, lr}
 800386a:	2600      	movs	r6, #0
 800386c:	4d0c      	ldr	r5, [pc, #48]	@ (80038a0 <__libc_init_array+0x38>)
 800386e:	4c0d      	ldr	r4, [pc, #52]	@ (80038a4 <__libc_init_array+0x3c>)
 8003870:	1b64      	subs	r4, r4, r5
 8003872:	10a4      	asrs	r4, r4, #2
 8003874:	42a6      	cmp	r6, r4
 8003876:	d109      	bne.n	800388c <__libc_init_array+0x24>
 8003878:	f001 fa84 	bl	8004d84 <_init>
 800387c:	2600      	movs	r6, #0
 800387e:	4d0a      	ldr	r5, [pc, #40]	@ (80038a8 <__libc_init_array+0x40>)
 8003880:	4c0a      	ldr	r4, [pc, #40]	@ (80038ac <__libc_init_array+0x44>)
 8003882:	1b64      	subs	r4, r4, r5
 8003884:	10a4      	asrs	r4, r4, #2
 8003886:	42a6      	cmp	r6, r4
 8003888:	d105      	bne.n	8003896 <__libc_init_array+0x2e>
 800388a:	bd70      	pop	{r4, r5, r6, pc}
 800388c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003890:	4798      	blx	r3
 8003892:	3601      	adds	r6, #1
 8003894:	e7ee      	b.n	8003874 <__libc_init_array+0xc>
 8003896:	f855 3b04 	ldr.w	r3, [r5], #4
 800389a:	4798      	blx	r3
 800389c:	3601      	adds	r6, #1
 800389e:	e7f2      	b.n	8003886 <__libc_init_array+0x1e>
 80038a0:	080051d0 	.word	0x080051d0
 80038a4:	080051d0 	.word	0x080051d0
 80038a8:	080051d0 	.word	0x080051d0
 80038ac:	080051d4 	.word	0x080051d4

080038b0 <memcpy>:
 80038b0:	440a      	add	r2, r1
 80038b2:	4291      	cmp	r1, r2
 80038b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80038b8:	d100      	bne.n	80038bc <memcpy+0xc>
 80038ba:	4770      	bx	lr
 80038bc:	b510      	push	{r4, lr}
 80038be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038c2:	4291      	cmp	r1, r2
 80038c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038c8:	d1f9      	bne.n	80038be <memcpy+0xe>
 80038ca:	bd10      	pop	{r4, pc}

080038cc <powf>:
 80038cc:	b570      	push	{r4, r5, r6, lr}
 80038ce:	460c      	mov	r4, r1
 80038d0:	4606      	mov	r6, r0
 80038d2:	f000 fa43 	bl	8003d5c <__ieee754_powf>
 80038d6:	4621      	mov	r1, r4
 80038d8:	4605      	mov	r5, r0
 80038da:	4620      	mov	r0, r4
 80038dc:	f7fc ff14 	bl	8000708 <__aeabi_fcmpun>
 80038e0:	bb68      	cbnz	r0, 800393e <powf+0x72>
 80038e2:	2100      	movs	r1, #0
 80038e4:	4630      	mov	r0, r6
 80038e6:	f7fc fedd 	bl	80006a4 <__aeabi_fcmpeq>
 80038ea:	b190      	cbz	r0, 8003912 <powf+0x46>
 80038ec:	2100      	movs	r1, #0
 80038ee:	4620      	mov	r0, r4
 80038f0:	f7fc fed8 	bl	80006a4 <__aeabi_fcmpeq>
 80038f4:	2800      	cmp	r0, #0
 80038f6:	d133      	bne.n	8003960 <powf+0x94>
 80038f8:	4620      	mov	r0, r4
 80038fa:	f000 f8c1 	bl	8003a80 <finitef>
 80038fe:	b1f0      	cbz	r0, 800393e <powf+0x72>
 8003900:	2100      	movs	r1, #0
 8003902:	4620      	mov	r0, r4
 8003904:	f7fc fed8 	bl	80006b8 <__aeabi_fcmplt>
 8003908:	b1c8      	cbz	r0, 800393e <powf+0x72>
 800390a:	f7ff ffa7 	bl	800385c <__errno>
 800390e:	2322      	movs	r3, #34	@ 0x22
 8003910:	e014      	b.n	800393c <powf+0x70>
 8003912:	4628      	mov	r0, r5
 8003914:	f000 f8b4 	bl	8003a80 <finitef>
 8003918:	b998      	cbnz	r0, 8003942 <powf+0x76>
 800391a:	4630      	mov	r0, r6
 800391c:	f000 f8b0 	bl	8003a80 <finitef>
 8003920:	b178      	cbz	r0, 8003942 <powf+0x76>
 8003922:	4620      	mov	r0, r4
 8003924:	f000 f8ac 	bl	8003a80 <finitef>
 8003928:	b158      	cbz	r0, 8003942 <powf+0x76>
 800392a:	4629      	mov	r1, r5
 800392c:	4628      	mov	r0, r5
 800392e:	f7fc feeb 	bl	8000708 <__aeabi_fcmpun>
 8003932:	2800      	cmp	r0, #0
 8003934:	d0e9      	beq.n	800390a <powf+0x3e>
 8003936:	f7ff ff91 	bl	800385c <__errno>
 800393a:	2321      	movs	r3, #33	@ 0x21
 800393c:	6003      	str	r3, [r0, #0]
 800393e:	4628      	mov	r0, r5
 8003940:	bd70      	pop	{r4, r5, r6, pc}
 8003942:	2100      	movs	r1, #0
 8003944:	4628      	mov	r0, r5
 8003946:	f7fc fead 	bl	80006a4 <__aeabi_fcmpeq>
 800394a:	2800      	cmp	r0, #0
 800394c:	d0f7      	beq.n	800393e <powf+0x72>
 800394e:	4630      	mov	r0, r6
 8003950:	f000 f896 	bl	8003a80 <finitef>
 8003954:	2800      	cmp	r0, #0
 8003956:	d0f2      	beq.n	800393e <powf+0x72>
 8003958:	4620      	mov	r0, r4
 800395a:	f000 f891 	bl	8003a80 <finitef>
 800395e:	e7d3      	b.n	8003908 <powf+0x3c>
 8003960:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8003964:	e7eb      	b.n	800393e <powf+0x72>

08003966 <sqrtf>:
 8003966:	b538      	push	{r3, r4, r5, lr}
 8003968:	4605      	mov	r5, r0
 800396a:	f000 f891 	bl	8003a90 <__ieee754_sqrtf>
 800396e:	4629      	mov	r1, r5
 8003970:	4604      	mov	r4, r0
 8003972:	4628      	mov	r0, r5
 8003974:	f7fc fec8 	bl	8000708 <__aeabi_fcmpun>
 8003978:	b968      	cbnz	r0, 8003996 <sqrtf+0x30>
 800397a:	2100      	movs	r1, #0
 800397c:	4628      	mov	r0, r5
 800397e:	f7fc fe9b 	bl	80006b8 <__aeabi_fcmplt>
 8003982:	b140      	cbz	r0, 8003996 <sqrtf+0x30>
 8003984:	f7ff ff6a 	bl	800385c <__errno>
 8003988:	2321      	movs	r3, #33	@ 0x21
 800398a:	2100      	movs	r1, #0
 800398c:	6003      	str	r3, [r0, #0]
 800398e:	4608      	mov	r0, r1
 8003990:	f7fc fda8 	bl	80004e4 <__aeabi_fdiv>
 8003994:	4604      	mov	r4, r0
 8003996:	4620      	mov	r0, r4
 8003998:	bd38      	pop	{r3, r4, r5, pc}
	...

0800399c <cosf>:
 800399c:	b507      	push	{r0, r1, r2, lr}
 800399e:	4a1a      	ldr	r2, [pc, #104]	@ (8003a08 <cosf+0x6c>)
 80039a0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80039a4:	4293      	cmp	r3, r2
 80039a6:	4601      	mov	r1, r0
 80039a8:	d805      	bhi.n	80039b6 <cosf+0x1a>
 80039aa:	2100      	movs	r1, #0
 80039ac:	b003      	add	sp, #12
 80039ae:	f85d eb04 	ldr.w	lr, [sp], #4
 80039b2:	f000 b8dd 	b.w	8003b70 <__kernel_cosf>
 80039b6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80039ba:	d304      	bcc.n	80039c6 <cosf+0x2a>
 80039bc:	f7fc fbd4 	bl	8000168 <__aeabi_fsub>
 80039c0:	b003      	add	sp, #12
 80039c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80039c6:	4669      	mov	r1, sp
 80039c8:	f000 fd28 	bl	800441c <__ieee754_rem_pio2f>
 80039cc:	f000 0203 	and.w	r2, r0, #3
 80039d0:	2a01      	cmp	r2, #1
 80039d2:	d007      	beq.n	80039e4 <cosf+0x48>
 80039d4:	2a02      	cmp	r2, #2
 80039d6:	d00c      	beq.n	80039f2 <cosf+0x56>
 80039d8:	b982      	cbnz	r2, 80039fc <cosf+0x60>
 80039da:	9901      	ldr	r1, [sp, #4]
 80039dc:	9800      	ldr	r0, [sp, #0]
 80039de:	f000 f8c7 	bl	8003b70 <__kernel_cosf>
 80039e2:	e7ed      	b.n	80039c0 <cosf+0x24>
 80039e4:	9901      	ldr	r1, [sp, #4]
 80039e6:	9800      	ldr	r0, [sp, #0]
 80039e8:	f000 f942 	bl	8003c70 <__kernel_sinf>
 80039ec:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80039f0:	e7e6      	b.n	80039c0 <cosf+0x24>
 80039f2:	9901      	ldr	r1, [sp, #4]
 80039f4:	9800      	ldr	r0, [sp, #0]
 80039f6:	f000 f8bb 	bl	8003b70 <__kernel_cosf>
 80039fa:	e7f7      	b.n	80039ec <cosf+0x50>
 80039fc:	2201      	movs	r2, #1
 80039fe:	9901      	ldr	r1, [sp, #4]
 8003a00:	9800      	ldr	r0, [sp, #0]
 8003a02:	f000 f935 	bl	8003c70 <__kernel_sinf>
 8003a06:	e7db      	b.n	80039c0 <cosf+0x24>
 8003a08:	3f490fd8 	.word	0x3f490fd8

08003a0c <sinf>:
 8003a0c:	b507      	push	{r0, r1, r2, lr}
 8003a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8003a7c <sinf+0x70>)
 8003a10:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8003a14:	4293      	cmp	r3, r2
 8003a16:	4601      	mov	r1, r0
 8003a18:	d806      	bhi.n	8003a28 <sinf+0x1c>
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	b003      	add	sp, #12
 8003a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a24:	f000 b924 	b.w	8003c70 <__kernel_sinf>
 8003a28:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8003a2c:	d304      	bcc.n	8003a38 <sinf+0x2c>
 8003a2e:	f7fc fb9b 	bl	8000168 <__aeabi_fsub>
 8003a32:	b003      	add	sp, #12
 8003a34:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a38:	4669      	mov	r1, sp
 8003a3a:	f000 fcef 	bl	800441c <__ieee754_rem_pio2f>
 8003a3e:	f000 0003 	and.w	r0, r0, #3
 8003a42:	2801      	cmp	r0, #1
 8003a44:	d008      	beq.n	8003a58 <sinf+0x4c>
 8003a46:	2802      	cmp	r0, #2
 8003a48:	d00b      	beq.n	8003a62 <sinf+0x56>
 8003a4a:	b990      	cbnz	r0, 8003a72 <sinf+0x66>
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	9901      	ldr	r1, [sp, #4]
 8003a50:	9800      	ldr	r0, [sp, #0]
 8003a52:	f000 f90d 	bl	8003c70 <__kernel_sinf>
 8003a56:	e7ec      	b.n	8003a32 <sinf+0x26>
 8003a58:	9901      	ldr	r1, [sp, #4]
 8003a5a:	9800      	ldr	r0, [sp, #0]
 8003a5c:	f000 f888 	bl	8003b70 <__kernel_cosf>
 8003a60:	e7e7      	b.n	8003a32 <sinf+0x26>
 8003a62:	2201      	movs	r2, #1
 8003a64:	9901      	ldr	r1, [sp, #4]
 8003a66:	9800      	ldr	r0, [sp, #0]
 8003a68:	f000 f902 	bl	8003c70 <__kernel_sinf>
 8003a6c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8003a70:	e7df      	b.n	8003a32 <sinf+0x26>
 8003a72:	9901      	ldr	r1, [sp, #4]
 8003a74:	9800      	ldr	r0, [sp, #0]
 8003a76:	f000 f87b 	bl	8003b70 <__kernel_cosf>
 8003a7a:	e7f7      	b.n	8003a6c <sinf+0x60>
 8003a7c:	3f490fd8 	.word	0x3f490fd8

08003a80 <finitef>:
 8003a80:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003a84:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8003a88:	bfac      	ite	ge
 8003a8a:	2000      	movge	r0, #0
 8003a8c:	2001      	movlt	r0, #1
 8003a8e:	4770      	bx	lr

08003a90 <__ieee754_sqrtf>:
 8003a90:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8003a94:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8003a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	d30a      	bcc.n	8003ab8 <__ieee754_sqrtf+0x28>
 8003aa2:	4601      	mov	r1, r0
 8003aa4:	f7fc fc6a 	bl	800037c <__aeabi_fmul>
 8003aa8:	4601      	mov	r1, r0
 8003aaa:	4620      	mov	r0, r4
 8003aac:	f7fc fb5e 	bl	800016c <__addsf3>
 8003ab0:	4604      	mov	r4, r0
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ab8:	2a00      	cmp	r2, #0
 8003aba:	d0fa      	beq.n	8003ab2 <__ieee754_sqrtf+0x22>
 8003abc:	2800      	cmp	r0, #0
 8003abe:	da06      	bge.n	8003ace <__ieee754_sqrtf+0x3e>
 8003ac0:	4601      	mov	r1, r0
 8003ac2:	f7fc fb51 	bl	8000168 <__aeabi_fsub>
 8003ac6:	4601      	mov	r1, r0
 8003ac8:	f7fc fd0c 	bl	80004e4 <__aeabi_fdiv>
 8003acc:	e7f0      	b.n	8003ab0 <__ieee754_sqrtf+0x20>
 8003ace:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8003ad2:	d03c      	beq.n	8003b4e <__ieee754_sqrtf+0xbe>
 8003ad4:	15c2      	asrs	r2, r0, #23
 8003ad6:	2400      	movs	r4, #0
 8003ad8:	2019      	movs	r0, #25
 8003ada:	4626      	mov	r6, r4
 8003adc:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8003ae0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003ae4:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8003ae8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003aec:	07d2      	lsls	r2, r2, #31
 8003aee:	bf58      	it	pl
 8003af0:	005b      	lslpl	r3, r3, #1
 8003af2:	106d      	asrs	r5, r5, #1
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	1872      	adds	r2, r6, r1
 8003af8:	429a      	cmp	r2, r3
 8003afa:	bfcf      	iteee	gt
 8003afc:	461a      	movgt	r2, r3
 8003afe:	1856      	addle	r6, r2, r1
 8003b00:	1864      	addle	r4, r4, r1
 8003b02:	1a9a      	suble	r2, r3, r2
 8003b04:	3801      	subs	r0, #1
 8003b06:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8003b0a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003b0e:	d1f2      	bne.n	8003af6 <__ieee754_sqrtf+0x66>
 8003b10:	b1ba      	cbz	r2, 8003b42 <__ieee754_sqrtf+0xb2>
 8003b12:	4e15      	ldr	r6, [pc, #84]	@ (8003b68 <__ieee754_sqrtf+0xd8>)
 8003b14:	4f15      	ldr	r7, [pc, #84]	@ (8003b6c <__ieee754_sqrtf+0xdc>)
 8003b16:	6830      	ldr	r0, [r6, #0]
 8003b18:	6839      	ldr	r1, [r7, #0]
 8003b1a:	f7fc fb25 	bl	8000168 <__aeabi_fsub>
 8003b1e:	f8d6 8000 	ldr.w	r8, [r6]
 8003b22:	4601      	mov	r1, r0
 8003b24:	4640      	mov	r0, r8
 8003b26:	f7fc fdd1 	bl	80006cc <__aeabi_fcmple>
 8003b2a:	b150      	cbz	r0, 8003b42 <__ieee754_sqrtf+0xb2>
 8003b2c:	6830      	ldr	r0, [r6, #0]
 8003b2e:	6839      	ldr	r1, [r7, #0]
 8003b30:	f7fc fb1c 	bl	800016c <__addsf3>
 8003b34:	6836      	ldr	r6, [r6, #0]
 8003b36:	4601      	mov	r1, r0
 8003b38:	4630      	mov	r0, r6
 8003b3a:	f7fc fdbd 	bl	80006b8 <__aeabi_fcmplt>
 8003b3e:	b170      	cbz	r0, 8003b5e <__ieee754_sqrtf+0xce>
 8003b40:	3402      	adds	r4, #2
 8003b42:	1064      	asrs	r4, r4, #1
 8003b44:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8003b48:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8003b4c:	e7b1      	b.n	8003ab2 <__ieee754_sqrtf+0x22>
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	0218      	lsls	r0, r3, #8
 8003b52:	460a      	mov	r2, r1
 8003b54:	f101 0101 	add.w	r1, r1, #1
 8003b58:	d5f9      	bpl.n	8003b4e <__ieee754_sqrtf+0xbe>
 8003b5a:	4252      	negs	r2, r2
 8003b5c:	e7bb      	b.n	8003ad6 <__ieee754_sqrtf+0x46>
 8003b5e:	3401      	adds	r4, #1
 8003b60:	f024 0401 	bic.w	r4, r4, #1
 8003b64:	e7ed      	b.n	8003b42 <__ieee754_sqrtf+0xb2>
 8003b66:	bf00      	nop
 8003b68:	08004ddc 	.word	0x08004ddc
 8003b6c:	08004dd8 	.word	0x08004dd8

08003b70 <__kernel_cosf>:
 8003b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b74:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8003b78:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 8003b7c:	4606      	mov	r6, r0
 8003b7e:	4688      	mov	r8, r1
 8003b80:	d203      	bcs.n	8003b8a <__kernel_cosf+0x1a>
 8003b82:	f7fc fdd7 	bl	8000734 <__aeabi_f2iz>
 8003b86:	2800      	cmp	r0, #0
 8003b88:	d05c      	beq.n	8003c44 <__kernel_cosf+0xd4>
 8003b8a:	4631      	mov	r1, r6
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	f7fc fbf5 	bl	800037c <__aeabi_fmul>
 8003b92:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003b96:	4604      	mov	r4, r0
 8003b98:	f7fc fbf0 	bl	800037c <__aeabi_fmul>
 8003b9c:	492b      	ldr	r1, [pc, #172]	@ (8003c4c <__kernel_cosf+0xdc>)
 8003b9e:	4607      	mov	r7, r0
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f7fc fbeb 	bl	800037c <__aeabi_fmul>
 8003ba6:	492a      	ldr	r1, [pc, #168]	@ (8003c50 <__kernel_cosf+0xe0>)
 8003ba8:	f7fc fae0 	bl	800016c <__addsf3>
 8003bac:	4621      	mov	r1, r4
 8003bae:	f7fc fbe5 	bl	800037c <__aeabi_fmul>
 8003bb2:	4928      	ldr	r1, [pc, #160]	@ (8003c54 <__kernel_cosf+0xe4>)
 8003bb4:	f7fc fad8 	bl	8000168 <__aeabi_fsub>
 8003bb8:	4621      	mov	r1, r4
 8003bba:	f7fc fbdf 	bl	800037c <__aeabi_fmul>
 8003bbe:	4926      	ldr	r1, [pc, #152]	@ (8003c58 <__kernel_cosf+0xe8>)
 8003bc0:	f7fc fad4 	bl	800016c <__addsf3>
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	f7fc fbd9 	bl	800037c <__aeabi_fmul>
 8003bca:	4924      	ldr	r1, [pc, #144]	@ (8003c5c <__kernel_cosf+0xec>)
 8003bcc:	f7fc facc 	bl	8000168 <__aeabi_fsub>
 8003bd0:	4621      	mov	r1, r4
 8003bd2:	f7fc fbd3 	bl	800037c <__aeabi_fmul>
 8003bd6:	4922      	ldr	r1, [pc, #136]	@ (8003c60 <__kernel_cosf+0xf0>)
 8003bd8:	f7fc fac8 	bl	800016c <__addsf3>
 8003bdc:	4621      	mov	r1, r4
 8003bde:	f7fc fbcd 	bl	800037c <__aeabi_fmul>
 8003be2:	4621      	mov	r1, r4
 8003be4:	f7fc fbca 	bl	800037c <__aeabi_fmul>
 8003be8:	4641      	mov	r1, r8
 8003bea:	4604      	mov	r4, r0
 8003bec:	4630      	mov	r0, r6
 8003bee:	f7fc fbc5 	bl	800037c <__aeabi_fmul>
 8003bf2:	4601      	mov	r1, r0
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	f7fc fab7 	bl	8000168 <__aeabi_fsub>
 8003bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8003c64 <__kernel_cosf+0xf4>)
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	429d      	cmp	r5, r3
 8003c00:	d80a      	bhi.n	8003c18 <__kernel_cosf+0xa8>
 8003c02:	4601      	mov	r1, r0
 8003c04:	4638      	mov	r0, r7
 8003c06:	f7fc faaf 	bl	8000168 <__aeabi_fsub>
 8003c0a:	4601      	mov	r1, r0
 8003c0c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003c10:	f7fc faaa 	bl	8000168 <__aeabi_fsub>
 8003c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c18:	4b13      	ldr	r3, [pc, #76]	@ (8003c68 <__kernel_cosf+0xf8>)
 8003c1a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003c1e:	429d      	cmp	r5, r3
 8003c20:	bf8c      	ite	hi
 8003c22:	4d12      	ldrhi	r5, [pc, #72]	@ (8003c6c <__kernel_cosf+0xfc>)
 8003c24:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 8003c28:	4629      	mov	r1, r5
 8003c2a:	f7fc fa9d 	bl	8000168 <__aeabi_fsub>
 8003c2e:	4629      	mov	r1, r5
 8003c30:	4606      	mov	r6, r0
 8003c32:	4638      	mov	r0, r7
 8003c34:	f7fc fa98 	bl	8000168 <__aeabi_fsub>
 8003c38:	4621      	mov	r1, r4
 8003c3a:	f7fc fa95 	bl	8000168 <__aeabi_fsub>
 8003c3e:	4601      	mov	r1, r0
 8003c40:	4630      	mov	r0, r6
 8003c42:	e7e5      	b.n	8003c10 <__kernel_cosf+0xa0>
 8003c44:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003c48:	e7e4      	b.n	8003c14 <__kernel_cosf+0xa4>
 8003c4a:	bf00      	nop
 8003c4c:	ad47d74e 	.word	0xad47d74e
 8003c50:	310f74f6 	.word	0x310f74f6
 8003c54:	3493f27c 	.word	0x3493f27c
 8003c58:	37d00d01 	.word	0x37d00d01
 8003c5c:	3ab60b61 	.word	0x3ab60b61
 8003c60:	3d2aaaab 	.word	0x3d2aaaab
 8003c64:	3e999999 	.word	0x3e999999
 8003c68:	3f480000 	.word	0x3f480000
 8003c6c:	3e900000 	.word	0x3e900000

08003c70 <__kernel_sinf>:
 8003c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c74:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8003c78:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	460f      	mov	r7, r1
 8003c80:	4691      	mov	r9, r2
 8003c82:	d203      	bcs.n	8003c8c <__kernel_sinf+0x1c>
 8003c84:	f7fc fd56 	bl	8000734 <__aeabi_f2iz>
 8003c88:	2800      	cmp	r0, #0
 8003c8a:	d035      	beq.n	8003cf8 <__kernel_sinf+0x88>
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	4620      	mov	r0, r4
 8003c90:	f7fc fb74 	bl	800037c <__aeabi_fmul>
 8003c94:	4605      	mov	r5, r0
 8003c96:	4601      	mov	r1, r0
 8003c98:	4620      	mov	r0, r4
 8003c9a:	f7fc fb6f 	bl	800037c <__aeabi_fmul>
 8003c9e:	4929      	ldr	r1, [pc, #164]	@ (8003d44 <__kernel_sinf+0xd4>)
 8003ca0:	4606      	mov	r6, r0
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	f7fc fb6a 	bl	800037c <__aeabi_fmul>
 8003ca8:	4927      	ldr	r1, [pc, #156]	@ (8003d48 <__kernel_sinf+0xd8>)
 8003caa:	f7fc fa5d 	bl	8000168 <__aeabi_fsub>
 8003cae:	4629      	mov	r1, r5
 8003cb0:	f7fc fb64 	bl	800037c <__aeabi_fmul>
 8003cb4:	4925      	ldr	r1, [pc, #148]	@ (8003d4c <__kernel_sinf+0xdc>)
 8003cb6:	f7fc fa59 	bl	800016c <__addsf3>
 8003cba:	4629      	mov	r1, r5
 8003cbc:	f7fc fb5e 	bl	800037c <__aeabi_fmul>
 8003cc0:	4923      	ldr	r1, [pc, #140]	@ (8003d50 <__kernel_sinf+0xe0>)
 8003cc2:	f7fc fa51 	bl	8000168 <__aeabi_fsub>
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	f7fc fb58 	bl	800037c <__aeabi_fmul>
 8003ccc:	4921      	ldr	r1, [pc, #132]	@ (8003d54 <__kernel_sinf+0xe4>)
 8003cce:	f7fc fa4d 	bl	800016c <__addsf3>
 8003cd2:	4680      	mov	r8, r0
 8003cd4:	f1b9 0f00 	cmp.w	r9, #0
 8003cd8:	d111      	bne.n	8003cfe <__kernel_sinf+0x8e>
 8003cda:	4601      	mov	r1, r0
 8003cdc:	4628      	mov	r0, r5
 8003cde:	f7fc fb4d 	bl	800037c <__aeabi_fmul>
 8003ce2:	491d      	ldr	r1, [pc, #116]	@ (8003d58 <__kernel_sinf+0xe8>)
 8003ce4:	f7fc fa40 	bl	8000168 <__aeabi_fsub>
 8003ce8:	4631      	mov	r1, r6
 8003cea:	f7fc fb47 	bl	800037c <__aeabi_fmul>
 8003cee:	4601      	mov	r1, r0
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	f7fc fa3b 	bl	800016c <__addsf3>
 8003cf6:	4604      	mov	r4, r0
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cfe:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003d02:	4638      	mov	r0, r7
 8003d04:	f7fc fb3a 	bl	800037c <__aeabi_fmul>
 8003d08:	4641      	mov	r1, r8
 8003d0a:	4681      	mov	r9, r0
 8003d0c:	4630      	mov	r0, r6
 8003d0e:	f7fc fb35 	bl	800037c <__aeabi_fmul>
 8003d12:	4601      	mov	r1, r0
 8003d14:	4648      	mov	r0, r9
 8003d16:	f7fc fa27 	bl	8000168 <__aeabi_fsub>
 8003d1a:	4629      	mov	r1, r5
 8003d1c:	f7fc fb2e 	bl	800037c <__aeabi_fmul>
 8003d20:	4639      	mov	r1, r7
 8003d22:	f7fc fa21 	bl	8000168 <__aeabi_fsub>
 8003d26:	490c      	ldr	r1, [pc, #48]	@ (8003d58 <__kernel_sinf+0xe8>)
 8003d28:	4605      	mov	r5, r0
 8003d2a:	4630      	mov	r0, r6
 8003d2c:	f7fc fb26 	bl	800037c <__aeabi_fmul>
 8003d30:	4601      	mov	r1, r0
 8003d32:	4628      	mov	r0, r5
 8003d34:	f7fc fa1a 	bl	800016c <__addsf3>
 8003d38:	4601      	mov	r1, r0
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f7fc fa14 	bl	8000168 <__aeabi_fsub>
 8003d40:	e7d9      	b.n	8003cf6 <__kernel_sinf+0x86>
 8003d42:	bf00      	nop
 8003d44:	2f2ec9d3 	.word	0x2f2ec9d3
 8003d48:	32d72f34 	.word	0x32d72f34
 8003d4c:	3638ef1b 	.word	0x3638ef1b
 8003d50:	39500d01 	.word	0x39500d01
 8003d54:	3c088889 	.word	0x3c088889
 8003d58:	3e2aaaab 	.word	0x3e2aaaab

08003d5c <__ieee754_powf>:
 8003d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d60:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 8003d64:	4681      	mov	r9, r0
 8003d66:	460f      	mov	r7, r1
 8003d68:	4606      	mov	r6, r0
 8003d6a:	460c      	mov	r4, r1
 8003d6c:	b087      	sub	sp, #28
 8003d6e:	d10c      	bne.n	8003d8a <__ieee754_powf+0x2e>
 8003d70:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 8003d74:	0076      	lsls	r6, r6, #1
 8003d76:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8003d7a:	f240 8310 	bls.w	800439e <__ieee754_powf+0x642>
 8003d7e:	4639      	mov	r1, r7
 8003d80:	4648      	mov	r0, r9
 8003d82:	f7fc f9f3 	bl	800016c <__addsf3>
 8003d86:	4601      	mov	r1, r0
 8003d88:	e043      	b.n	8003e12 <__ieee754_powf+0xb6>
 8003d8a:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8003d8e:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8003d92:	d802      	bhi.n	8003d9a <__ieee754_powf+0x3e>
 8003d94:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8003d98:	d908      	bls.n	8003dac <__ieee754_powf+0x50>
 8003d9a:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8003d9e:	d1ee      	bne.n	8003d7e <__ieee754_powf+0x22>
 8003da0:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8003da4:	0064      	lsls	r4, r4, #1
 8003da6:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8003daa:	e7e6      	b.n	8003d7a <__ieee754_powf+0x1e>
 8003dac:	2800      	cmp	r0, #0
 8003dae:	da1f      	bge.n	8003df0 <__ieee754_powf+0x94>
 8003db0:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 8003db4:	f080 82f8 	bcs.w	80043a8 <__ieee754_powf+0x64c>
 8003db8:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8003dbc:	d32f      	bcc.n	8003e1e <__ieee754_powf+0xc2>
 8003dbe:	ea4f 53eb 	mov.w	r3, fp, asr #23
 8003dc2:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8003dc6:	fa4b f503 	asr.w	r5, fp, r3
 8003dca:	fa05 f303 	lsl.w	r3, r5, r3
 8003dce:	455b      	cmp	r3, fp
 8003dd0:	d123      	bne.n	8003e1a <__ieee754_powf+0xbe>
 8003dd2:	f005 0501 	and.w	r5, r5, #1
 8003dd6:	f1c5 0502 	rsb	r5, r5, #2
 8003dda:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8003dde:	d11f      	bne.n	8003e20 <__ieee754_powf+0xc4>
 8003de0:	2c00      	cmp	r4, #0
 8003de2:	4649      	mov	r1, r9
 8003de4:	da15      	bge.n	8003e12 <__ieee754_powf+0xb6>
 8003de6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003dea:	f7fc fb7b 	bl	80004e4 <__aeabi_fdiv>
 8003dee:	e7ca      	b.n	8003d86 <__ieee754_powf+0x2a>
 8003df0:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8003df4:	d111      	bne.n	8003e1a <__ieee754_powf+0xbe>
 8003df6:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8003dfa:	f000 82d0 	beq.w	800439e <__ieee754_powf+0x642>
 8003dfe:	d904      	bls.n	8003e0a <__ieee754_powf+0xae>
 8003e00:	2c00      	cmp	r4, #0
 8003e02:	f280 82cf 	bge.w	80043a4 <__ieee754_powf+0x648>
 8003e06:	2100      	movs	r1, #0
 8003e08:	e003      	b.n	8003e12 <__ieee754_powf+0xb6>
 8003e0a:	2c00      	cmp	r4, #0
 8003e0c:	dafb      	bge.n	8003e06 <__ieee754_powf+0xaa>
 8003e0e:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 8003e12:	4608      	mov	r0, r1
 8003e14:	b007      	add	sp, #28
 8003e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e1a:	2500      	movs	r5, #0
 8003e1c:	e7dd      	b.n	8003dda <__ieee754_powf+0x7e>
 8003e1e:	2500      	movs	r5, #0
 8003e20:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8003e24:	d104      	bne.n	8003e30 <__ieee754_powf+0xd4>
 8003e26:	4649      	mov	r1, r9
 8003e28:	4648      	mov	r0, r9
 8003e2a:	f7fc faa7 	bl	800037c <__aeabi_fmul>
 8003e2e:	e7aa      	b.n	8003d86 <__ieee754_powf+0x2a>
 8003e30:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8003e34:	f040 82bd 	bne.w	80043b2 <__ieee754_powf+0x656>
 8003e38:	2e00      	cmp	r6, #0
 8003e3a:	f2c0 82ba 	blt.w	80043b2 <__ieee754_powf+0x656>
 8003e3e:	4648      	mov	r0, r9
 8003e40:	b007      	add	sp, #28
 8003e42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e46:	f7ff be23 	b.w	8003a90 <__ieee754_sqrtf>
 8003e4a:	2d01      	cmp	r5, #1
 8003e4c:	d1e1      	bne.n	8003e12 <__ieee754_powf+0xb6>
 8003e4e:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8003e52:	e798      	b.n	8003d86 <__ieee754_powf+0x2a>
 8003e54:	0ff3      	lsrs	r3, r6, #31
 8003e56:	3b01      	subs	r3, #1
 8003e58:	9303      	str	r3, [sp, #12]
 8003e5a:	432b      	orrs	r3, r5
 8003e5c:	d101      	bne.n	8003e62 <__ieee754_powf+0x106>
 8003e5e:	4649      	mov	r1, r9
 8003e60:	e2c5      	b.n	80043ee <__ieee754_powf+0x692>
 8003e62:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 8003e66:	f240 809b 	bls.w	8003fa0 <__ieee754_powf+0x244>
 8003e6a:	4b46      	ldr	r3, [pc, #280]	@ (8003f84 <__ieee754_powf+0x228>)
 8003e6c:	4598      	cmp	r8, r3
 8003e6e:	d807      	bhi.n	8003e80 <__ieee754_powf+0x124>
 8003e70:	2c00      	cmp	r4, #0
 8003e72:	da0a      	bge.n	8003e8a <__ieee754_powf+0x12e>
 8003e74:	2000      	movs	r0, #0
 8003e76:	b007      	add	sp, #28
 8003e78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e7c:	f000 bc9d 	b.w	80047ba <__math_oflowf>
 8003e80:	4b41      	ldr	r3, [pc, #260]	@ (8003f88 <__ieee754_powf+0x22c>)
 8003e82:	4598      	cmp	r8, r3
 8003e84:	d907      	bls.n	8003e96 <__ieee754_powf+0x13a>
 8003e86:	2c00      	cmp	r4, #0
 8003e88:	dcf4      	bgt.n	8003e74 <__ieee754_powf+0x118>
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	b007      	add	sp, #28
 8003e8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e92:	f000 bc8e 	b.w	80047b2 <__math_uflowf>
 8003e96:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003e9a:	f7fc f965 	bl	8000168 <__aeabi_fsub>
 8003e9e:	493b      	ldr	r1, [pc, #236]	@ (8003f8c <__ieee754_powf+0x230>)
 8003ea0:	4606      	mov	r6, r0
 8003ea2:	f7fc fa6b 	bl	800037c <__aeabi_fmul>
 8003ea6:	493a      	ldr	r1, [pc, #232]	@ (8003f90 <__ieee754_powf+0x234>)
 8003ea8:	4680      	mov	r8, r0
 8003eaa:	4630      	mov	r0, r6
 8003eac:	f7fc fa66 	bl	800037c <__aeabi_fmul>
 8003eb0:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8003eb4:	4681      	mov	r9, r0
 8003eb6:	4630      	mov	r0, r6
 8003eb8:	f7fc fa60 	bl	800037c <__aeabi_fmul>
 8003ebc:	4601      	mov	r1, r0
 8003ebe:	4835      	ldr	r0, [pc, #212]	@ (8003f94 <__ieee754_powf+0x238>)
 8003ec0:	f7fc f952 	bl	8000168 <__aeabi_fsub>
 8003ec4:	4631      	mov	r1, r6
 8003ec6:	f7fc fa59 	bl	800037c <__aeabi_fmul>
 8003eca:	4601      	mov	r1, r0
 8003ecc:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8003ed0:	f7fc f94a 	bl	8000168 <__aeabi_fsub>
 8003ed4:	4631      	mov	r1, r6
 8003ed6:	4682      	mov	sl, r0
 8003ed8:	4630      	mov	r0, r6
 8003eda:	f7fc fa4f 	bl	800037c <__aeabi_fmul>
 8003ede:	4601      	mov	r1, r0
 8003ee0:	4650      	mov	r0, sl
 8003ee2:	f7fc fa4b 	bl	800037c <__aeabi_fmul>
 8003ee6:	492c      	ldr	r1, [pc, #176]	@ (8003f98 <__ieee754_powf+0x23c>)
 8003ee8:	f7fc fa48 	bl	800037c <__aeabi_fmul>
 8003eec:	4601      	mov	r1, r0
 8003eee:	4648      	mov	r0, r9
 8003ef0:	f7fc f93a 	bl	8000168 <__aeabi_fsub>
 8003ef4:	4601      	mov	r1, r0
 8003ef6:	4606      	mov	r6, r0
 8003ef8:	4640      	mov	r0, r8
 8003efa:	f7fc f937 	bl	800016c <__addsf3>
 8003efe:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8003f02:	f02b 0b0f 	bic.w	fp, fp, #15
 8003f06:	4641      	mov	r1, r8
 8003f08:	4658      	mov	r0, fp
 8003f0a:	f7fc f92d 	bl	8000168 <__aeabi_fsub>
 8003f0e:	4601      	mov	r1, r0
 8003f10:	4630      	mov	r0, r6
 8003f12:	f7fc f929 	bl	8000168 <__aeabi_fsub>
 8003f16:	9b03      	ldr	r3, [sp, #12]
 8003f18:	3d01      	subs	r5, #1
 8003f1a:	f36f 040b 	bfc	r4, #0, #12
 8003f1e:	431d      	orrs	r5, r3
 8003f20:	4606      	mov	r6, r0
 8003f22:	4621      	mov	r1, r4
 8003f24:	4638      	mov	r0, r7
 8003f26:	bf14      	ite	ne
 8003f28:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 8003f2c:	4d1b      	ldreq	r5, [pc, #108]	@ (8003f9c <__ieee754_powf+0x240>)
 8003f2e:	f7fc f91b 	bl	8000168 <__aeabi_fsub>
 8003f32:	4659      	mov	r1, fp
 8003f34:	f7fc fa22 	bl	800037c <__aeabi_fmul>
 8003f38:	4639      	mov	r1, r7
 8003f3a:	4680      	mov	r8, r0
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	f7fc fa1d 	bl	800037c <__aeabi_fmul>
 8003f42:	4601      	mov	r1, r0
 8003f44:	4640      	mov	r0, r8
 8003f46:	f7fc f911 	bl	800016c <__addsf3>
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	4606      	mov	r6, r0
 8003f4e:	4658      	mov	r0, fp
 8003f50:	f7fc fa14 	bl	800037c <__aeabi_fmul>
 8003f54:	4601      	mov	r1, r0
 8003f56:	4607      	mov	r7, r0
 8003f58:	4630      	mov	r0, r6
 8003f5a:	f7fc f907 	bl	800016c <__addsf3>
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	4604      	mov	r4, r0
 8003f62:	4680      	mov	r8, r0
 8003f64:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8003f68:	f340 813f 	ble.w	80041ea <__ieee754_powf+0x48e>
 8003f6c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8003f70:	f240 8128 	bls.w	80041c4 <__ieee754_powf+0x468>
 8003f74:	2100      	movs	r1, #0
 8003f76:	4628      	mov	r0, r5
 8003f78:	f7fc fb9e 	bl	80006b8 <__aeabi_fcmplt>
 8003f7c:	3800      	subs	r0, #0
 8003f7e:	bf18      	it	ne
 8003f80:	2001      	movne	r0, #1
 8003f82:	e778      	b.n	8003e76 <__ieee754_powf+0x11a>
 8003f84:	3f7ffff3 	.word	0x3f7ffff3
 8003f88:	3f800007 	.word	0x3f800007
 8003f8c:	3fb8aa00 	.word	0x3fb8aa00
 8003f90:	36eca570 	.word	0x36eca570
 8003f94:	3eaaaaab 	.word	0x3eaaaaab
 8003f98:	3fb8aa3b 	.word	0x3fb8aa3b
 8003f9c:	bf800000 	.word	0xbf800000
 8003fa0:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8003fa4:	f040 810a 	bne.w	80041bc <__ieee754_powf+0x460>
 8003fa8:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8003fac:	f7fc f9e6 	bl	800037c <__aeabi_fmul>
 8003fb0:	f06f 0217 	mvn.w	r2, #23
 8003fb4:	4682      	mov	sl, r0
 8003fb6:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8003fba:	3b7f      	subs	r3, #127	@ 0x7f
 8003fbc:	441a      	add	r2, r3
 8003fbe:	4b95      	ldr	r3, [pc, #596]	@ (8004214 <__ieee754_powf+0x4b8>)
 8003fc0:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 8003fc4:	459a      	cmp	sl, r3
 8003fc6:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 8003fca:	dd06      	ble.n	8003fda <__ieee754_powf+0x27e>
 8003fcc:	4b92      	ldr	r3, [pc, #584]	@ (8004218 <__ieee754_powf+0x4bc>)
 8003fce:	459a      	cmp	sl, r3
 8003fd0:	f340 80f6 	ble.w	80041c0 <__ieee754_powf+0x464>
 8003fd4:	3201      	adds	r2, #1
 8003fd6:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 8003fda:	2300      	movs	r3, #0
 8003fdc:	9301      	str	r3, [sp, #4]
 8003fde:	9205      	str	r2, [sp, #20]
 8003fe0:	4b8e      	ldr	r3, [pc, #568]	@ (800421c <__ieee754_powf+0x4c0>)
 8003fe2:	9a01      	ldr	r2, [sp, #4]
 8003fe4:	4630      	mov	r0, r6
 8003fe6:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8003fea:	46b2      	mov	sl, r6
 8003fec:	4659      	mov	r1, fp
 8003fee:	f7fc f8bb 	bl	8000168 <__aeabi_fsub>
 8003ff2:	4631      	mov	r1, r6
 8003ff4:	4681      	mov	r9, r0
 8003ff6:	4658      	mov	r0, fp
 8003ff8:	f7fc f8b8 	bl	800016c <__addsf3>
 8003ffc:	4601      	mov	r1, r0
 8003ffe:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004002:	f7fc fa6f 	bl	80004e4 <__aeabi_fdiv>
 8004006:	4601      	mov	r1, r0
 8004008:	9004      	str	r0, [sp, #16]
 800400a:	4648      	mov	r0, r9
 800400c:	f7fc f9b6 	bl	800037c <__aeabi_fmul>
 8004010:	9002      	str	r0, [sp, #8]
 8004012:	9b02      	ldr	r3, [sp, #8]
 8004014:	1076      	asrs	r6, r6, #1
 8004016:	f36f 030b 	bfc	r3, #0, #12
 800401a:	4698      	mov	r8, r3
 800401c:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 8004020:	9b01      	ldr	r3, [sp, #4]
 8004022:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 8004026:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 800402a:	4631      	mov	r1, r6
 800402c:	4640      	mov	r0, r8
 800402e:	f7fc f9a5 	bl	800037c <__aeabi_fmul>
 8004032:	4601      	mov	r1, r0
 8004034:	4648      	mov	r0, r9
 8004036:	f7fc f897 	bl	8000168 <__aeabi_fsub>
 800403a:	4659      	mov	r1, fp
 800403c:	4681      	mov	r9, r0
 800403e:	4630      	mov	r0, r6
 8004040:	f7fc f892 	bl	8000168 <__aeabi_fsub>
 8004044:	4601      	mov	r1, r0
 8004046:	4650      	mov	r0, sl
 8004048:	f7fc f88e 	bl	8000168 <__aeabi_fsub>
 800404c:	4641      	mov	r1, r8
 800404e:	f7fc f995 	bl	800037c <__aeabi_fmul>
 8004052:	4601      	mov	r1, r0
 8004054:	4648      	mov	r0, r9
 8004056:	f7fc f887 	bl	8000168 <__aeabi_fsub>
 800405a:	9b04      	ldr	r3, [sp, #16]
 800405c:	4619      	mov	r1, r3
 800405e:	f7fc f98d 	bl	800037c <__aeabi_fmul>
 8004062:	9902      	ldr	r1, [sp, #8]
 8004064:	4683      	mov	fp, r0
 8004066:	4608      	mov	r0, r1
 8004068:	f7fc f988 	bl	800037c <__aeabi_fmul>
 800406c:	4606      	mov	r6, r0
 800406e:	496c      	ldr	r1, [pc, #432]	@ (8004220 <__ieee754_powf+0x4c4>)
 8004070:	f7fc f984 	bl	800037c <__aeabi_fmul>
 8004074:	496b      	ldr	r1, [pc, #428]	@ (8004224 <__ieee754_powf+0x4c8>)
 8004076:	f7fc f879 	bl	800016c <__addsf3>
 800407a:	4631      	mov	r1, r6
 800407c:	f7fc f97e 	bl	800037c <__aeabi_fmul>
 8004080:	4969      	ldr	r1, [pc, #420]	@ (8004228 <__ieee754_powf+0x4cc>)
 8004082:	f7fc f873 	bl	800016c <__addsf3>
 8004086:	4631      	mov	r1, r6
 8004088:	f7fc f978 	bl	800037c <__aeabi_fmul>
 800408c:	4967      	ldr	r1, [pc, #412]	@ (800422c <__ieee754_powf+0x4d0>)
 800408e:	f7fc f86d 	bl	800016c <__addsf3>
 8004092:	4631      	mov	r1, r6
 8004094:	f7fc f972 	bl	800037c <__aeabi_fmul>
 8004098:	4965      	ldr	r1, [pc, #404]	@ (8004230 <__ieee754_powf+0x4d4>)
 800409a:	f7fc f867 	bl	800016c <__addsf3>
 800409e:	4631      	mov	r1, r6
 80040a0:	f7fc f96c 	bl	800037c <__aeabi_fmul>
 80040a4:	4963      	ldr	r1, [pc, #396]	@ (8004234 <__ieee754_powf+0x4d8>)
 80040a6:	f7fc f861 	bl	800016c <__addsf3>
 80040aa:	4631      	mov	r1, r6
 80040ac:	4681      	mov	r9, r0
 80040ae:	4630      	mov	r0, r6
 80040b0:	f7fc f964 	bl	800037c <__aeabi_fmul>
 80040b4:	4601      	mov	r1, r0
 80040b6:	4648      	mov	r0, r9
 80040b8:	f7fc f960 	bl	800037c <__aeabi_fmul>
 80040bc:	4606      	mov	r6, r0
 80040be:	4641      	mov	r1, r8
 80040c0:	9802      	ldr	r0, [sp, #8]
 80040c2:	f7fc f853 	bl	800016c <__addsf3>
 80040c6:	4659      	mov	r1, fp
 80040c8:	f7fc f958 	bl	800037c <__aeabi_fmul>
 80040cc:	4631      	mov	r1, r6
 80040ce:	f7fc f84d 	bl	800016c <__addsf3>
 80040d2:	4641      	mov	r1, r8
 80040d4:	4681      	mov	r9, r0
 80040d6:	4640      	mov	r0, r8
 80040d8:	f7fc f950 	bl	800037c <__aeabi_fmul>
 80040dc:	4956      	ldr	r1, [pc, #344]	@ (8004238 <__ieee754_powf+0x4dc>)
 80040de:	4682      	mov	sl, r0
 80040e0:	f7fc f844 	bl	800016c <__addsf3>
 80040e4:	4649      	mov	r1, r9
 80040e6:	f7fc f841 	bl	800016c <__addsf3>
 80040ea:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 80040ee:	f026 060f 	bic.w	r6, r6, #15
 80040f2:	4631      	mov	r1, r6
 80040f4:	4640      	mov	r0, r8
 80040f6:	f7fc f941 	bl	800037c <__aeabi_fmul>
 80040fa:	494f      	ldr	r1, [pc, #316]	@ (8004238 <__ieee754_powf+0x4dc>)
 80040fc:	4680      	mov	r8, r0
 80040fe:	4630      	mov	r0, r6
 8004100:	f7fc f832 	bl	8000168 <__aeabi_fsub>
 8004104:	4651      	mov	r1, sl
 8004106:	f7fc f82f 	bl	8000168 <__aeabi_fsub>
 800410a:	4601      	mov	r1, r0
 800410c:	4648      	mov	r0, r9
 800410e:	f7fc f82b 	bl	8000168 <__aeabi_fsub>
 8004112:	9902      	ldr	r1, [sp, #8]
 8004114:	f7fc f932 	bl	800037c <__aeabi_fmul>
 8004118:	4631      	mov	r1, r6
 800411a:	4681      	mov	r9, r0
 800411c:	4658      	mov	r0, fp
 800411e:	f7fc f92d 	bl	800037c <__aeabi_fmul>
 8004122:	4601      	mov	r1, r0
 8004124:	4648      	mov	r0, r9
 8004126:	f7fc f821 	bl	800016c <__addsf3>
 800412a:	4682      	mov	sl, r0
 800412c:	4601      	mov	r1, r0
 800412e:	4640      	mov	r0, r8
 8004130:	f7fc f81c 	bl	800016c <__addsf3>
 8004134:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8004138:	f026 060f 	bic.w	r6, r6, #15
 800413c:	4630      	mov	r0, r6
 800413e:	493f      	ldr	r1, [pc, #252]	@ (800423c <__ieee754_powf+0x4e0>)
 8004140:	f7fc f91c 	bl	800037c <__aeabi_fmul>
 8004144:	4641      	mov	r1, r8
 8004146:	4681      	mov	r9, r0
 8004148:	4630      	mov	r0, r6
 800414a:	f7fc f80d 	bl	8000168 <__aeabi_fsub>
 800414e:	4601      	mov	r1, r0
 8004150:	4650      	mov	r0, sl
 8004152:	f7fc f809 	bl	8000168 <__aeabi_fsub>
 8004156:	493a      	ldr	r1, [pc, #232]	@ (8004240 <__ieee754_powf+0x4e4>)
 8004158:	f7fc f910 	bl	800037c <__aeabi_fmul>
 800415c:	4939      	ldr	r1, [pc, #228]	@ (8004244 <__ieee754_powf+0x4e8>)
 800415e:	4680      	mov	r8, r0
 8004160:	4630      	mov	r0, r6
 8004162:	f7fc f90b 	bl	800037c <__aeabi_fmul>
 8004166:	4601      	mov	r1, r0
 8004168:	4640      	mov	r0, r8
 800416a:	f7fb ffff 	bl	800016c <__addsf3>
 800416e:	4b36      	ldr	r3, [pc, #216]	@ (8004248 <__ieee754_powf+0x4ec>)
 8004170:	9a01      	ldr	r2, [sp, #4]
 8004172:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004176:	f7fb fff9 	bl	800016c <__addsf3>
 800417a:	9a05      	ldr	r2, [sp, #20]
 800417c:	4606      	mov	r6, r0
 800417e:	4610      	mov	r0, r2
 8004180:	f7fc f8a8 	bl	80002d4 <__aeabi_i2f>
 8004184:	4680      	mov	r8, r0
 8004186:	4b31      	ldr	r3, [pc, #196]	@ (800424c <__ieee754_powf+0x4f0>)
 8004188:	9a01      	ldr	r2, [sp, #4]
 800418a:	4631      	mov	r1, r6
 800418c:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8004190:	4648      	mov	r0, r9
 8004192:	f7fb ffeb 	bl	800016c <__addsf3>
 8004196:	4651      	mov	r1, sl
 8004198:	f7fb ffe8 	bl	800016c <__addsf3>
 800419c:	4641      	mov	r1, r8
 800419e:	f7fb ffe5 	bl	800016c <__addsf3>
 80041a2:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 80041a6:	f02b 0b0f 	bic.w	fp, fp, #15
 80041aa:	4641      	mov	r1, r8
 80041ac:	4658      	mov	r0, fp
 80041ae:	f7fb ffdb 	bl	8000168 <__aeabi_fsub>
 80041b2:	4651      	mov	r1, sl
 80041b4:	f7fb ffd8 	bl	8000168 <__aeabi_fsub>
 80041b8:	4649      	mov	r1, r9
 80041ba:	e6a6      	b.n	8003f0a <__ieee754_powf+0x1ae>
 80041bc:	2200      	movs	r2, #0
 80041be:	e6fa      	b.n	8003fb6 <__ieee754_powf+0x25a>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e70b      	b.n	8003fdc <__ieee754_powf+0x280>
 80041c4:	d148      	bne.n	8004258 <__ieee754_powf+0x4fc>
 80041c6:	4922      	ldr	r1, [pc, #136]	@ (8004250 <__ieee754_powf+0x4f4>)
 80041c8:	4630      	mov	r0, r6
 80041ca:	f7fb ffcf 	bl	800016c <__addsf3>
 80041ce:	4639      	mov	r1, r7
 80041d0:	4681      	mov	r9, r0
 80041d2:	4620      	mov	r0, r4
 80041d4:	f7fb ffc8 	bl	8000168 <__aeabi_fsub>
 80041d8:	4601      	mov	r1, r0
 80041da:	4648      	mov	r0, r9
 80041dc:	f7fc fa8a 	bl	80006f4 <__aeabi_fcmpgt>
 80041e0:	2800      	cmp	r0, #0
 80041e2:	f47f aec7 	bne.w	8003f74 <__ieee754_powf+0x218>
 80041e6:	2386      	movs	r3, #134	@ 0x86
 80041e8:	e03b      	b.n	8004262 <__ieee754_powf+0x506>
 80041ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004254 <__ieee754_powf+0x4f8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d907      	bls.n	8004200 <__ieee754_powf+0x4a4>
 80041f0:	2100      	movs	r1, #0
 80041f2:	4628      	mov	r0, r5
 80041f4:	f7fc fa60 	bl	80006b8 <__aeabi_fcmplt>
 80041f8:	3800      	subs	r0, #0
 80041fa:	bf18      	it	ne
 80041fc:	2001      	movne	r0, #1
 80041fe:	e645      	b.n	8003e8c <__ieee754_powf+0x130>
 8004200:	d12a      	bne.n	8004258 <__ieee754_powf+0x4fc>
 8004202:	4639      	mov	r1, r7
 8004204:	f7fb ffb0 	bl	8000168 <__aeabi_fsub>
 8004208:	4631      	mov	r1, r6
 800420a:	f7fc fa69 	bl	80006e0 <__aeabi_fcmpge>
 800420e:	2800      	cmp	r0, #0
 8004210:	d0e9      	beq.n	80041e6 <__ieee754_powf+0x48a>
 8004212:	e7ed      	b.n	80041f0 <__ieee754_powf+0x494>
 8004214:	001cc471 	.word	0x001cc471
 8004218:	005db3d6 	.word	0x005db3d6
 800421c:	08004df0 	.word	0x08004df0
 8004220:	3e53f142 	.word	0x3e53f142
 8004224:	3e6c3255 	.word	0x3e6c3255
 8004228:	3e8ba305 	.word	0x3e8ba305
 800422c:	3eaaaaab 	.word	0x3eaaaaab
 8004230:	3edb6db7 	.word	0x3edb6db7
 8004234:	3f19999a 	.word	0x3f19999a
 8004238:	40400000 	.word	0x40400000
 800423c:	3f763800 	.word	0x3f763800
 8004240:	3f76384f 	.word	0x3f76384f
 8004244:	369dc3a0 	.word	0x369dc3a0
 8004248:	08004de0 	.word	0x08004de0
 800424c:	08004de8 	.word	0x08004de8
 8004250:	3338aa3c 	.word	0x3338aa3c
 8004254:	43160000 	.word	0x43160000
 8004258:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800425c:	f240 809b 	bls.w	8004396 <__ieee754_powf+0x63a>
 8004260:	15db      	asrs	r3, r3, #23
 8004262:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 8004266:	3b7e      	subs	r3, #126	@ 0x7e
 8004268:	411c      	asrs	r4, r3
 800426a:	4444      	add	r4, r8
 800426c:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8004270:	4961      	ldr	r1, [pc, #388]	@ (80043f8 <__ieee754_powf+0x69c>)
 8004272:	3b7f      	subs	r3, #127	@ 0x7f
 8004274:	4119      	asrs	r1, r3
 8004276:	4021      	ands	r1, r4
 8004278:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800427c:	f1c3 0317 	rsb	r3, r3, #23
 8004280:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 8004284:	4638      	mov	r0, r7
 8004286:	411c      	asrs	r4, r3
 8004288:	f1b8 0f00 	cmp.w	r8, #0
 800428c:	bfb8      	it	lt
 800428e:	4264      	neglt	r4, r4
 8004290:	f7fb ff6a 	bl	8000168 <__aeabi_fsub>
 8004294:	4607      	mov	r7, r0
 8004296:	4631      	mov	r1, r6
 8004298:	4638      	mov	r0, r7
 800429a:	f7fb ff67 	bl	800016c <__addsf3>
 800429e:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 80042a2:	f028 080f 	bic.w	r8, r8, #15
 80042a6:	4640      	mov	r0, r8
 80042a8:	4954      	ldr	r1, [pc, #336]	@ (80043fc <__ieee754_powf+0x6a0>)
 80042aa:	f7fc f867 	bl	800037c <__aeabi_fmul>
 80042ae:	4639      	mov	r1, r7
 80042b0:	4681      	mov	r9, r0
 80042b2:	4640      	mov	r0, r8
 80042b4:	f7fb ff58 	bl	8000168 <__aeabi_fsub>
 80042b8:	4601      	mov	r1, r0
 80042ba:	4630      	mov	r0, r6
 80042bc:	f7fb ff54 	bl	8000168 <__aeabi_fsub>
 80042c0:	494f      	ldr	r1, [pc, #316]	@ (8004400 <__ieee754_powf+0x6a4>)
 80042c2:	f7fc f85b 	bl	800037c <__aeabi_fmul>
 80042c6:	494f      	ldr	r1, [pc, #316]	@ (8004404 <__ieee754_powf+0x6a8>)
 80042c8:	4606      	mov	r6, r0
 80042ca:	4640      	mov	r0, r8
 80042cc:	f7fc f856 	bl	800037c <__aeabi_fmul>
 80042d0:	4601      	mov	r1, r0
 80042d2:	4630      	mov	r0, r6
 80042d4:	f7fb ff4a 	bl	800016c <__addsf3>
 80042d8:	4607      	mov	r7, r0
 80042da:	4601      	mov	r1, r0
 80042dc:	4648      	mov	r0, r9
 80042de:	f7fb ff45 	bl	800016c <__addsf3>
 80042e2:	4649      	mov	r1, r9
 80042e4:	4606      	mov	r6, r0
 80042e6:	f7fb ff3f 	bl	8000168 <__aeabi_fsub>
 80042ea:	4601      	mov	r1, r0
 80042ec:	4638      	mov	r0, r7
 80042ee:	f7fb ff3b 	bl	8000168 <__aeabi_fsub>
 80042f2:	4631      	mov	r1, r6
 80042f4:	4680      	mov	r8, r0
 80042f6:	4630      	mov	r0, r6
 80042f8:	f7fc f840 	bl	800037c <__aeabi_fmul>
 80042fc:	4607      	mov	r7, r0
 80042fe:	4942      	ldr	r1, [pc, #264]	@ (8004408 <__ieee754_powf+0x6ac>)
 8004300:	f7fc f83c 	bl	800037c <__aeabi_fmul>
 8004304:	4941      	ldr	r1, [pc, #260]	@ (800440c <__ieee754_powf+0x6b0>)
 8004306:	f7fb ff2f 	bl	8000168 <__aeabi_fsub>
 800430a:	4639      	mov	r1, r7
 800430c:	f7fc f836 	bl	800037c <__aeabi_fmul>
 8004310:	493f      	ldr	r1, [pc, #252]	@ (8004410 <__ieee754_powf+0x6b4>)
 8004312:	f7fb ff2b 	bl	800016c <__addsf3>
 8004316:	4639      	mov	r1, r7
 8004318:	f7fc f830 	bl	800037c <__aeabi_fmul>
 800431c:	493d      	ldr	r1, [pc, #244]	@ (8004414 <__ieee754_powf+0x6b8>)
 800431e:	f7fb ff23 	bl	8000168 <__aeabi_fsub>
 8004322:	4639      	mov	r1, r7
 8004324:	f7fc f82a 	bl	800037c <__aeabi_fmul>
 8004328:	493b      	ldr	r1, [pc, #236]	@ (8004418 <__ieee754_powf+0x6bc>)
 800432a:	f7fb ff1f 	bl	800016c <__addsf3>
 800432e:	4639      	mov	r1, r7
 8004330:	f7fc f824 	bl	800037c <__aeabi_fmul>
 8004334:	4601      	mov	r1, r0
 8004336:	4630      	mov	r0, r6
 8004338:	f7fb ff16 	bl	8000168 <__aeabi_fsub>
 800433c:	4607      	mov	r7, r0
 800433e:	4601      	mov	r1, r0
 8004340:	4630      	mov	r0, r6
 8004342:	f7fc f81b 	bl	800037c <__aeabi_fmul>
 8004346:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800434a:	4681      	mov	r9, r0
 800434c:	4638      	mov	r0, r7
 800434e:	f7fb ff0b 	bl	8000168 <__aeabi_fsub>
 8004352:	4601      	mov	r1, r0
 8004354:	4648      	mov	r0, r9
 8004356:	f7fc f8c5 	bl	80004e4 <__aeabi_fdiv>
 800435a:	4641      	mov	r1, r8
 800435c:	4607      	mov	r7, r0
 800435e:	4630      	mov	r0, r6
 8004360:	f7fc f80c 	bl	800037c <__aeabi_fmul>
 8004364:	4641      	mov	r1, r8
 8004366:	f7fb ff01 	bl	800016c <__addsf3>
 800436a:	4601      	mov	r1, r0
 800436c:	4638      	mov	r0, r7
 800436e:	f7fb fefb 	bl	8000168 <__aeabi_fsub>
 8004372:	4631      	mov	r1, r6
 8004374:	f7fb fef8 	bl	8000168 <__aeabi_fsub>
 8004378:	4601      	mov	r1, r0
 800437a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800437e:	f7fb fef3 	bl	8000168 <__aeabi_fsub>
 8004382:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8004386:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800438a:	da06      	bge.n	800439a <__ieee754_powf+0x63e>
 800438c:	4621      	mov	r1, r4
 800438e:	f000 f9af 	bl	80046f0 <scalbnf>
 8004392:	4629      	mov	r1, r5
 8004394:	e549      	b.n	8003e2a <__ieee754_powf+0xce>
 8004396:	2400      	movs	r4, #0
 8004398:	e77d      	b.n	8004296 <__ieee754_powf+0x53a>
 800439a:	4618      	mov	r0, r3
 800439c:	e7f9      	b.n	8004392 <__ieee754_powf+0x636>
 800439e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80043a2:	e536      	b.n	8003e12 <__ieee754_powf+0xb6>
 80043a4:	4639      	mov	r1, r7
 80043a6:	e534      	b.n	8003e12 <__ieee754_powf+0xb6>
 80043a8:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 80043ac:	f43f ad23 	beq.w	8003df6 <__ieee754_powf+0x9a>
 80043b0:	2502      	movs	r5, #2
 80043b2:	4648      	mov	r0, r9
 80043b4:	f000 f998 	bl	80046e8 <fabsf>
 80043b8:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80043bc:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80043c0:	46c2      	mov	sl, r8
 80043c2:	4601      	mov	r1, r0
 80043c4:	d003      	beq.n	80043ce <__ieee754_powf+0x672>
 80043c6:	f1b8 0f00 	cmp.w	r8, #0
 80043ca:	f47f ad43 	bne.w	8003e54 <__ieee754_powf+0xf8>
 80043ce:	2c00      	cmp	r4, #0
 80043d0:	da04      	bge.n	80043dc <__ieee754_powf+0x680>
 80043d2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80043d6:	f7fc f885 	bl	80004e4 <__aeabi_fdiv>
 80043da:	4601      	mov	r1, r0
 80043dc:	2e00      	cmp	r6, #0
 80043de:	f6bf ad18 	bge.w	8003e12 <__ieee754_powf+0xb6>
 80043e2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80043e6:	ea58 0805 	orrs.w	r8, r8, r5
 80043ea:	f47f ad2e 	bne.w	8003e4a <__ieee754_powf+0xee>
 80043ee:	4608      	mov	r0, r1
 80043f0:	f7fb feba 	bl	8000168 <__aeabi_fsub>
 80043f4:	4601      	mov	r1, r0
 80043f6:	e4f8      	b.n	8003dea <__ieee754_powf+0x8e>
 80043f8:	ff800000 	.word	0xff800000
 80043fc:	3f317200 	.word	0x3f317200
 8004400:	3f317218 	.word	0x3f317218
 8004404:	35bfbe8c 	.word	0x35bfbe8c
 8004408:	3331bb4c 	.word	0x3331bb4c
 800440c:	35ddea0e 	.word	0x35ddea0e
 8004410:	388ab355 	.word	0x388ab355
 8004414:	3b360b61 	.word	0x3b360b61
 8004418:	3e2aaaab 	.word	0x3e2aaaab

0800441c <__ieee754_rem_pio2f>:
 800441c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004420:	4aa4      	ldr	r2, [pc, #656]	@ (80046b4 <__ieee754_rem_pio2f+0x298>)
 8004422:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8004426:	4590      	cmp	r8, r2
 8004428:	460c      	mov	r4, r1
 800442a:	4682      	mov	sl, r0
 800442c:	b087      	sub	sp, #28
 800442e:	d804      	bhi.n	800443a <__ieee754_rem_pio2f+0x1e>
 8004430:	2300      	movs	r3, #0
 8004432:	6008      	str	r0, [r1, #0]
 8004434:	604b      	str	r3, [r1, #4]
 8004436:	2500      	movs	r5, #0
 8004438:	e01d      	b.n	8004476 <__ieee754_rem_pio2f+0x5a>
 800443a:	4a9f      	ldr	r2, [pc, #636]	@ (80046b8 <__ieee754_rem_pio2f+0x29c>)
 800443c:	4590      	cmp	r8, r2
 800443e:	d84f      	bhi.n	80044e0 <__ieee754_rem_pio2f+0xc4>
 8004440:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8004444:	2800      	cmp	r0, #0
 8004446:	499d      	ldr	r1, [pc, #628]	@ (80046bc <__ieee754_rem_pio2f+0x2a0>)
 8004448:	4f9d      	ldr	r7, [pc, #628]	@ (80046c0 <__ieee754_rem_pio2f+0x2a4>)
 800444a:	f025 050f 	bic.w	r5, r5, #15
 800444e:	dd24      	ble.n	800449a <__ieee754_rem_pio2f+0x7e>
 8004450:	f7fb fe8a 	bl	8000168 <__aeabi_fsub>
 8004454:	42bd      	cmp	r5, r7
 8004456:	4606      	mov	r6, r0
 8004458:	d011      	beq.n	800447e <__ieee754_rem_pio2f+0x62>
 800445a:	499a      	ldr	r1, [pc, #616]	@ (80046c4 <__ieee754_rem_pio2f+0x2a8>)
 800445c:	f7fb fe84 	bl	8000168 <__aeabi_fsub>
 8004460:	4601      	mov	r1, r0
 8004462:	4605      	mov	r5, r0
 8004464:	4630      	mov	r0, r6
 8004466:	f7fb fe7f 	bl	8000168 <__aeabi_fsub>
 800446a:	4996      	ldr	r1, [pc, #600]	@ (80046c4 <__ieee754_rem_pio2f+0x2a8>)
 800446c:	f7fb fe7c 	bl	8000168 <__aeabi_fsub>
 8004470:	6025      	str	r5, [r4, #0]
 8004472:	2501      	movs	r5, #1
 8004474:	6060      	str	r0, [r4, #4]
 8004476:	4628      	mov	r0, r5
 8004478:	b007      	add	sp, #28
 800447a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800447e:	4992      	ldr	r1, [pc, #584]	@ (80046c8 <__ieee754_rem_pio2f+0x2ac>)
 8004480:	f7fb fe72 	bl	8000168 <__aeabi_fsub>
 8004484:	4991      	ldr	r1, [pc, #580]	@ (80046cc <__ieee754_rem_pio2f+0x2b0>)
 8004486:	4606      	mov	r6, r0
 8004488:	f7fb fe6e 	bl	8000168 <__aeabi_fsub>
 800448c:	4601      	mov	r1, r0
 800448e:	4605      	mov	r5, r0
 8004490:	4630      	mov	r0, r6
 8004492:	f7fb fe69 	bl	8000168 <__aeabi_fsub>
 8004496:	498d      	ldr	r1, [pc, #564]	@ (80046cc <__ieee754_rem_pio2f+0x2b0>)
 8004498:	e7e8      	b.n	800446c <__ieee754_rem_pio2f+0x50>
 800449a:	f7fb fe67 	bl	800016c <__addsf3>
 800449e:	42bd      	cmp	r5, r7
 80044a0:	4606      	mov	r6, r0
 80044a2:	d00f      	beq.n	80044c4 <__ieee754_rem_pio2f+0xa8>
 80044a4:	4987      	ldr	r1, [pc, #540]	@ (80046c4 <__ieee754_rem_pio2f+0x2a8>)
 80044a6:	f7fb fe61 	bl	800016c <__addsf3>
 80044aa:	4601      	mov	r1, r0
 80044ac:	4605      	mov	r5, r0
 80044ae:	4630      	mov	r0, r6
 80044b0:	f7fb fe5a 	bl	8000168 <__aeabi_fsub>
 80044b4:	4983      	ldr	r1, [pc, #524]	@ (80046c4 <__ieee754_rem_pio2f+0x2a8>)
 80044b6:	f7fb fe59 	bl	800016c <__addsf3>
 80044ba:	6025      	str	r5, [r4, #0]
 80044bc:	6060      	str	r0, [r4, #4]
 80044be:	f04f 35ff 	mov.w	r5, #4294967295
 80044c2:	e7d8      	b.n	8004476 <__ieee754_rem_pio2f+0x5a>
 80044c4:	4980      	ldr	r1, [pc, #512]	@ (80046c8 <__ieee754_rem_pio2f+0x2ac>)
 80044c6:	f7fb fe51 	bl	800016c <__addsf3>
 80044ca:	4980      	ldr	r1, [pc, #512]	@ (80046cc <__ieee754_rem_pio2f+0x2b0>)
 80044cc:	4606      	mov	r6, r0
 80044ce:	f7fb fe4d 	bl	800016c <__addsf3>
 80044d2:	4601      	mov	r1, r0
 80044d4:	4605      	mov	r5, r0
 80044d6:	4630      	mov	r0, r6
 80044d8:	f7fb fe46 	bl	8000168 <__aeabi_fsub>
 80044dc:	497b      	ldr	r1, [pc, #492]	@ (80046cc <__ieee754_rem_pio2f+0x2b0>)
 80044de:	e7ea      	b.n	80044b6 <__ieee754_rem_pio2f+0x9a>
 80044e0:	4a7b      	ldr	r2, [pc, #492]	@ (80046d0 <__ieee754_rem_pio2f+0x2b4>)
 80044e2:	4590      	cmp	r8, r2
 80044e4:	f200 8095 	bhi.w	8004612 <__ieee754_rem_pio2f+0x1f6>
 80044e8:	f000 f8fe 	bl	80046e8 <fabsf>
 80044ec:	4979      	ldr	r1, [pc, #484]	@ (80046d4 <__ieee754_rem_pio2f+0x2b8>)
 80044ee:	4606      	mov	r6, r0
 80044f0:	f7fb ff44 	bl	800037c <__aeabi_fmul>
 80044f4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80044f8:	f7fb fe38 	bl	800016c <__addsf3>
 80044fc:	f7fc f91a 	bl	8000734 <__aeabi_f2iz>
 8004500:	4605      	mov	r5, r0
 8004502:	f7fb fee7 	bl	80002d4 <__aeabi_i2f>
 8004506:	496d      	ldr	r1, [pc, #436]	@ (80046bc <__ieee754_rem_pio2f+0x2a0>)
 8004508:	4681      	mov	r9, r0
 800450a:	f7fb ff37 	bl	800037c <__aeabi_fmul>
 800450e:	4601      	mov	r1, r0
 8004510:	4630      	mov	r0, r6
 8004512:	f7fb fe29 	bl	8000168 <__aeabi_fsub>
 8004516:	496b      	ldr	r1, [pc, #428]	@ (80046c4 <__ieee754_rem_pio2f+0x2a8>)
 8004518:	4607      	mov	r7, r0
 800451a:	4648      	mov	r0, r9
 800451c:	f7fb ff2e 	bl	800037c <__aeabi_fmul>
 8004520:	2d1f      	cmp	r5, #31
 8004522:	4606      	mov	r6, r0
 8004524:	dc0e      	bgt.n	8004544 <__ieee754_rem_pio2f+0x128>
 8004526:	4a6c      	ldr	r2, [pc, #432]	@ (80046d8 <__ieee754_rem_pio2f+0x2bc>)
 8004528:	1e69      	subs	r1, r5, #1
 800452a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800452e:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 8004532:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004536:	4293      	cmp	r3, r2
 8004538:	d004      	beq.n	8004544 <__ieee754_rem_pio2f+0x128>
 800453a:	4631      	mov	r1, r6
 800453c:	4638      	mov	r0, r7
 800453e:	f7fb fe13 	bl	8000168 <__aeabi_fsub>
 8004542:	e00b      	b.n	800455c <__ieee754_rem_pio2f+0x140>
 8004544:	4631      	mov	r1, r6
 8004546:	4638      	mov	r0, r7
 8004548:	f7fb fe0e 	bl	8000168 <__aeabi_fsub>
 800454c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8004550:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 8004554:	2b08      	cmp	r3, #8
 8004556:	ea4f 5be8 	mov.w	fp, r8, asr #23
 800455a:	dc01      	bgt.n	8004560 <__ieee754_rem_pio2f+0x144>
 800455c:	6020      	str	r0, [r4, #0]
 800455e:	e026      	b.n	80045ae <__ieee754_rem_pio2f+0x192>
 8004560:	4959      	ldr	r1, [pc, #356]	@ (80046c8 <__ieee754_rem_pio2f+0x2ac>)
 8004562:	4648      	mov	r0, r9
 8004564:	f7fb ff0a 	bl	800037c <__aeabi_fmul>
 8004568:	4606      	mov	r6, r0
 800456a:	4601      	mov	r1, r0
 800456c:	4638      	mov	r0, r7
 800456e:	f7fb fdfb 	bl	8000168 <__aeabi_fsub>
 8004572:	4601      	mov	r1, r0
 8004574:	4680      	mov	r8, r0
 8004576:	4638      	mov	r0, r7
 8004578:	f7fb fdf6 	bl	8000168 <__aeabi_fsub>
 800457c:	4631      	mov	r1, r6
 800457e:	f7fb fdf3 	bl	8000168 <__aeabi_fsub>
 8004582:	4606      	mov	r6, r0
 8004584:	4951      	ldr	r1, [pc, #324]	@ (80046cc <__ieee754_rem_pio2f+0x2b0>)
 8004586:	4648      	mov	r0, r9
 8004588:	f7fb fef8 	bl	800037c <__aeabi_fmul>
 800458c:	4631      	mov	r1, r6
 800458e:	f7fb fdeb 	bl	8000168 <__aeabi_fsub>
 8004592:	4601      	mov	r1, r0
 8004594:	4606      	mov	r6, r0
 8004596:	4640      	mov	r0, r8
 8004598:	f7fb fde6 	bl	8000168 <__aeabi_fsub>
 800459c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80045a0:	ebab 0b03 	sub.w	fp, fp, r3
 80045a4:	f1bb 0f19 	cmp.w	fp, #25
 80045a8:	dc18      	bgt.n	80045dc <__ieee754_rem_pio2f+0x1c0>
 80045aa:	4647      	mov	r7, r8
 80045ac:	6020      	str	r0, [r4, #0]
 80045ae:	f8d4 8000 	ldr.w	r8, [r4]
 80045b2:	4638      	mov	r0, r7
 80045b4:	4641      	mov	r1, r8
 80045b6:	f7fb fdd7 	bl	8000168 <__aeabi_fsub>
 80045ba:	4631      	mov	r1, r6
 80045bc:	f7fb fdd4 	bl	8000168 <__aeabi_fsub>
 80045c0:	f1ba 0f00 	cmp.w	sl, #0
 80045c4:	6060      	str	r0, [r4, #4]
 80045c6:	f6bf af56 	bge.w	8004476 <__ieee754_rem_pio2f+0x5a>
 80045ca:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 80045ce:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80045d2:	f8c4 8000 	str.w	r8, [r4]
 80045d6:	6060      	str	r0, [r4, #4]
 80045d8:	426d      	negs	r5, r5
 80045da:	e74c      	b.n	8004476 <__ieee754_rem_pio2f+0x5a>
 80045dc:	493f      	ldr	r1, [pc, #252]	@ (80046dc <__ieee754_rem_pio2f+0x2c0>)
 80045de:	4648      	mov	r0, r9
 80045e0:	f7fb fecc 	bl	800037c <__aeabi_fmul>
 80045e4:	4606      	mov	r6, r0
 80045e6:	4601      	mov	r1, r0
 80045e8:	4640      	mov	r0, r8
 80045ea:	f7fb fdbd 	bl	8000168 <__aeabi_fsub>
 80045ee:	4601      	mov	r1, r0
 80045f0:	4607      	mov	r7, r0
 80045f2:	4640      	mov	r0, r8
 80045f4:	f7fb fdb8 	bl	8000168 <__aeabi_fsub>
 80045f8:	4631      	mov	r1, r6
 80045fa:	f7fb fdb5 	bl	8000168 <__aeabi_fsub>
 80045fe:	4606      	mov	r6, r0
 8004600:	4937      	ldr	r1, [pc, #220]	@ (80046e0 <__ieee754_rem_pio2f+0x2c4>)
 8004602:	4648      	mov	r0, r9
 8004604:	f7fb feba 	bl	800037c <__aeabi_fmul>
 8004608:	4631      	mov	r1, r6
 800460a:	f7fb fdad 	bl	8000168 <__aeabi_fsub>
 800460e:	4606      	mov	r6, r0
 8004610:	e793      	b.n	800453a <__ieee754_rem_pio2f+0x11e>
 8004612:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8004616:	d305      	bcc.n	8004624 <__ieee754_rem_pio2f+0x208>
 8004618:	4601      	mov	r1, r0
 800461a:	f7fb fda5 	bl	8000168 <__aeabi_fsub>
 800461e:	6060      	str	r0, [r4, #4]
 8004620:	6020      	str	r0, [r4, #0]
 8004622:	e708      	b.n	8004436 <__ieee754_rem_pio2f+0x1a>
 8004624:	ea4f 56e8 	mov.w	r6, r8, asr #23
 8004628:	3e86      	subs	r6, #134	@ 0x86
 800462a:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800462e:	4640      	mov	r0, r8
 8004630:	f7fc f880 	bl	8000734 <__aeabi_f2iz>
 8004634:	f7fb fe4e 	bl	80002d4 <__aeabi_i2f>
 8004638:	4601      	mov	r1, r0
 800463a:	9003      	str	r0, [sp, #12]
 800463c:	4640      	mov	r0, r8
 800463e:	f7fb fd93 	bl	8000168 <__aeabi_fsub>
 8004642:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8004646:	f7fb fe99 	bl	800037c <__aeabi_fmul>
 800464a:	4607      	mov	r7, r0
 800464c:	f7fc f872 	bl	8000734 <__aeabi_f2iz>
 8004650:	f7fb fe40 	bl	80002d4 <__aeabi_i2f>
 8004654:	4601      	mov	r1, r0
 8004656:	9004      	str	r0, [sp, #16]
 8004658:	4605      	mov	r5, r0
 800465a:	4638      	mov	r0, r7
 800465c:	f7fb fd84 	bl	8000168 <__aeabi_fsub>
 8004660:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8004664:	f7fb fe8a 	bl	800037c <__aeabi_fmul>
 8004668:	2100      	movs	r1, #0
 800466a:	9005      	str	r0, [sp, #20]
 800466c:	f7fc f81a 	bl	80006a4 <__aeabi_fcmpeq>
 8004670:	b1f0      	cbz	r0, 80046b0 <__ieee754_rem_pio2f+0x294>
 8004672:	2100      	movs	r1, #0
 8004674:	4628      	mov	r0, r5
 8004676:	f7fc f815 	bl	80006a4 <__aeabi_fcmpeq>
 800467a:	2800      	cmp	r0, #0
 800467c:	bf14      	ite	ne
 800467e:	2301      	movne	r3, #1
 8004680:	2302      	moveq	r3, #2
 8004682:	4a18      	ldr	r2, [pc, #96]	@ (80046e4 <__ieee754_rem_pio2f+0x2c8>)
 8004684:	4621      	mov	r1, r4
 8004686:	9201      	str	r2, [sp, #4]
 8004688:	2202      	movs	r2, #2
 800468a:	a803      	add	r0, sp, #12
 800468c:	9200      	str	r2, [sp, #0]
 800468e:	4632      	mov	r2, r6
 8004690:	f000 f898 	bl	80047c4 <__kernel_rem_pio2f>
 8004694:	f1ba 0f00 	cmp.w	sl, #0
 8004698:	4605      	mov	r5, r0
 800469a:	f6bf aeec 	bge.w	8004476 <__ieee754_rem_pio2f+0x5a>
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80046a4:	6023      	str	r3, [r4, #0]
 80046a6:	6863      	ldr	r3, [r4, #4]
 80046a8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80046ac:	6063      	str	r3, [r4, #4]
 80046ae:	e793      	b.n	80045d8 <__ieee754_rem_pio2f+0x1bc>
 80046b0:	2303      	movs	r3, #3
 80046b2:	e7e6      	b.n	8004682 <__ieee754_rem_pio2f+0x266>
 80046b4:	3f490fd8 	.word	0x3f490fd8
 80046b8:	4016cbe3 	.word	0x4016cbe3
 80046bc:	3fc90f80 	.word	0x3fc90f80
 80046c0:	3fc90fd0 	.word	0x3fc90fd0
 80046c4:	37354443 	.word	0x37354443
 80046c8:	37354400 	.word	0x37354400
 80046cc:	2e85a308 	.word	0x2e85a308
 80046d0:	43490f80 	.word	0x43490f80
 80046d4:	3f22f984 	.word	0x3f22f984
 80046d8:	08004df8 	.word	0x08004df8
 80046dc:	2e85a300 	.word	0x2e85a300
 80046e0:	248d3132 	.word	0x248d3132
 80046e4:	08004e78 	.word	0x08004e78

080046e8 <fabsf>:
 80046e8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80046ec:	4770      	bx	lr
	...

080046f0 <scalbnf>:
 80046f0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80046f4:	b538      	push	{r3, r4, r5, lr}
 80046f6:	4603      	mov	r3, r0
 80046f8:	460d      	mov	r5, r1
 80046fa:	4604      	mov	r4, r0
 80046fc:	d02e      	beq.n	800475c <scalbnf+0x6c>
 80046fe:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8004702:	d304      	bcc.n	800470e <scalbnf+0x1e>
 8004704:	4601      	mov	r1, r0
 8004706:	f7fb fd31 	bl	800016c <__addsf3>
 800470a:	4603      	mov	r3, r0
 800470c:	e026      	b.n	800475c <scalbnf+0x6c>
 800470e:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8004712:	d118      	bne.n	8004746 <scalbnf+0x56>
 8004714:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8004718:	f7fb fe30 	bl	800037c <__aeabi_fmul>
 800471c:	4a17      	ldr	r2, [pc, #92]	@ (800477c <scalbnf+0x8c>)
 800471e:	4603      	mov	r3, r0
 8004720:	4295      	cmp	r5, r2
 8004722:	db0c      	blt.n	800473e <scalbnf+0x4e>
 8004724:	4604      	mov	r4, r0
 8004726:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800472a:	3a19      	subs	r2, #25
 800472c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004730:	428d      	cmp	r5, r1
 8004732:	dd0a      	ble.n	800474a <scalbnf+0x5a>
 8004734:	4912      	ldr	r1, [pc, #72]	@ (8004780 <scalbnf+0x90>)
 8004736:	4618      	mov	r0, r3
 8004738:	f361 001e 	bfi	r0, r1, #0, #31
 800473c:	e000      	b.n	8004740 <scalbnf+0x50>
 800473e:	4911      	ldr	r1, [pc, #68]	@ (8004784 <scalbnf+0x94>)
 8004740:	f7fb fe1c 	bl	800037c <__aeabi_fmul>
 8004744:	e7e1      	b.n	800470a <scalbnf+0x1a>
 8004746:	0dd2      	lsrs	r2, r2, #23
 8004748:	e7f0      	b.n	800472c <scalbnf+0x3c>
 800474a:	1951      	adds	r1, r2, r5
 800474c:	29fe      	cmp	r1, #254	@ 0xfe
 800474e:	dcf1      	bgt.n	8004734 <scalbnf+0x44>
 8004750:	2900      	cmp	r1, #0
 8004752:	dd05      	ble.n	8004760 <scalbnf+0x70>
 8004754:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8004758:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800475c:	4618      	mov	r0, r3
 800475e:	bd38      	pop	{r3, r4, r5, pc}
 8004760:	f111 0f16 	cmn.w	r1, #22
 8004764:	da01      	bge.n	800476a <scalbnf+0x7a>
 8004766:	4907      	ldr	r1, [pc, #28]	@ (8004784 <scalbnf+0x94>)
 8004768:	e7e5      	b.n	8004736 <scalbnf+0x46>
 800476a:	f101 0019 	add.w	r0, r1, #25
 800476e:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8004772:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8004776:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800477a:	e7e1      	b.n	8004740 <scalbnf+0x50>
 800477c:	ffff3cb0 	.word	0xffff3cb0
 8004780:	7149f2ca 	.word	0x7149f2ca
 8004784:	0da24260 	.word	0x0da24260

08004788 <with_errnof>:
 8004788:	b538      	push	{r3, r4, r5, lr}
 800478a:	4604      	mov	r4, r0
 800478c:	460d      	mov	r5, r1
 800478e:	f7ff f865 	bl	800385c <__errno>
 8004792:	6005      	str	r5, [r0, #0]
 8004794:	4620      	mov	r0, r4
 8004796:	bd38      	pop	{r3, r4, r5, pc}

08004798 <xflowf>:
 8004798:	b508      	push	{r3, lr}
 800479a:	b140      	cbz	r0, 80047ae <xflowf+0x16>
 800479c:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 80047a0:	f7fb fdec 	bl	800037c <__aeabi_fmul>
 80047a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80047a8:	2122      	movs	r1, #34	@ 0x22
 80047aa:	f7ff bfed 	b.w	8004788 <with_errnof>
 80047ae:	4608      	mov	r0, r1
 80047b0:	e7f6      	b.n	80047a0 <xflowf+0x8>

080047b2 <__math_uflowf>:
 80047b2:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 80047b6:	f7ff bfef 	b.w	8004798 <xflowf>

080047ba <__math_oflowf>:
 80047ba:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 80047be:	f7ff bfeb 	b.w	8004798 <xflowf>
	...

080047c4 <__kernel_rem_pio2f>:
 80047c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c8:	b0db      	sub	sp, #364	@ 0x16c
 80047ca:	9202      	str	r2, [sp, #8]
 80047cc:	9304      	str	r3, [sp, #16]
 80047ce:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80047d0:	4bac      	ldr	r3, [pc, #688]	@ (8004a84 <__kernel_rem_pio2f+0x2c0>)
 80047d2:	9005      	str	r0, [sp, #20]
 80047d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d8:	9100      	str	r1, [sp, #0]
 80047da:	9301      	str	r3, [sp, #4]
 80047dc:	9b04      	ldr	r3, [sp, #16]
 80047de:	3b01      	subs	r3, #1
 80047e0:	9303      	str	r3, [sp, #12]
 80047e2:	9b02      	ldr	r3, [sp, #8]
 80047e4:	1d1a      	adds	r2, r3, #4
 80047e6:	f2c0 8099 	blt.w	800491c <__kernel_rem_pio2f+0x158>
 80047ea:	1edc      	subs	r4, r3, #3
 80047ec:	bf48      	it	mi
 80047ee:	1d1c      	addmi	r4, r3, #4
 80047f0:	10e4      	asrs	r4, r4, #3
 80047f2:	2500      	movs	r5, #0
 80047f4:	f04f 0b00 	mov.w	fp, #0
 80047f8:	1c67      	adds	r7, r4, #1
 80047fa:	00fb      	lsls	r3, r7, #3
 80047fc:	9306      	str	r3, [sp, #24]
 80047fe:	9b02      	ldr	r3, [sp, #8]
 8004800:	9a03      	ldr	r2, [sp, #12]
 8004802:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8004806:	9b01      	ldr	r3, [sp, #4]
 8004808:	eba4 0802 	sub.w	r8, r4, r2
 800480c:	eb03 0902 	add.w	r9, r3, r2
 8004810:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8004812:	ae1e      	add	r6, sp, #120	@ 0x78
 8004814:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8004818:	454d      	cmp	r5, r9
 800481a:	f340 8081 	ble.w	8004920 <__kernel_rem_pio2f+0x15c>
 800481e:	9a04      	ldr	r2, [sp, #16]
 8004820:	ab1e      	add	r3, sp, #120	@ 0x78
 8004822:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8004826:	f04f 0900 	mov.w	r9, #0
 800482a:	2300      	movs	r3, #0
 800482c:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8004830:	9a01      	ldr	r2, [sp, #4]
 8004832:	4591      	cmp	r9, r2
 8004834:	f340 809a 	ble.w	800496c <__kernel_rem_pio2f+0x1a8>
 8004838:	4613      	mov	r3, r2
 800483a:	aa0a      	add	r2, sp, #40	@ 0x28
 800483c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004840:	9308      	str	r3, [sp, #32]
 8004842:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8004844:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004848:	9c01      	ldr	r4, [sp, #4]
 800484a:	9307      	str	r3, [sp, #28]
 800484c:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8004850:	4646      	mov	r6, r8
 8004852:	4625      	mov	r5, r4
 8004854:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 8004858:	ab5a      	add	r3, sp, #360	@ 0x168
 800485a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800485e:	f853 bc50 	ldr.w	fp, [r3, #-80]
 8004862:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8004866:	2d00      	cmp	r5, #0
 8004868:	f300 8085 	bgt.w	8004976 <__kernel_rem_pio2f+0x1b2>
 800486c:	4639      	mov	r1, r7
 800486e:	4658      	mov	r0, fp
 8004870:	f7ff ff3e 	bl	80046f0 <scalbnf>
 8004874:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8004878:	4605      	mov	r5, r0
 800487a:	f7fb fd7f 	bl	800037c <__aeabi_fmul>
 800487e:	f000 fa3f 	bl	8004d00 <floorf>
 8004882:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8004886:	f7fb fd79 	bl	800037c <__aeabi_fmul>
 800488a:	4601      	mov	r1, r0
 800488c:	4628      	mov	r0, r5
 800488e:	f7fb fc6b 	bl	8000168 <__aeabi_fsub>
 8004892:	4605      	mov	r5, r0
 8004894:	f7fb ff4e 	bl	8000734 <__aeabi_f2iz>
 8004898:	4606      	mov	r6, r0
 800489a:	f7fb fd1b 	bl	80002d4 <__aeabi_i2f>
 800489e:	4601      	mov	r1, r0
 80048a0:	4628      	mov	r0, r5
 80048a2:	f7fb fc61 	bl	8000168 <__aeabi_fsub>
 80048a6:	2f00      	cmp	r7, #0
 80048a8:	4681      	mov	r9, r0
 80048aa:	f340 8081 	ble.w	80049b0 <__kernel_rem_pio2f+0x1ec>
 80048ae:	1e62      	subs	r2, r4, #1
 80048b0:	ab0a      	add	r3, sp, #40	@ 0x28
 80048b2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80048b6:	f1c7 0108 	rsb	r1, r7, #8
 80048ba:	fa45 f301 	asr.w	r3, r5, r1
 80048be:	441e      	add	r6, r3
 80048c0:	408b      	lsls	r3, r1
 80048c2:	1aed      	subs	r5, r5, r3
 80048c4:	ab0a      	add	r3, sp, #40	@ 0x28
 80048c6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80048ca:	f1c7 0307 	rsb	r3, r7, #7
 80048ce:	411d      	asrs	r5, r3
 80048d0:	2d00      	cmp	r5, #0
 80048d2:	dd7a      	ble.n	80049ca <__kernel_rem_pio2f+0x206>
 80048d4:	2200      	movs	r2, #0
 80048d6:	4692      	mov	sl, r2
 80048d8:	3601      	adds	r6, #1
 80048da:	4294      	cmp	r4, r2
 80048dc:	f300 80aa 	bgt.w	8004a34 <__kernel_rem_pio2f+0x270>
 80048e0:	2f00      	cmp	r7, #0
 80048e2:	dd05      	ble.n	80048f0 <__kernel_rem_pio2f+0x12c>
 80048e4:	2f01      	cmp	r7, #1
 80048e6:	f000 80b6 	beq.w	8004a56 <__kernel_rem_pio2f+0x292>
 80048ea:	2f02      	cmp	r7, #2
 80048ec:	f000 80bd 	beq.w	8004a6a <__kernel_rem_pio2f+0x2a6>
 80048f0:	2d02      	cmp	r5, #2
 80048f2:	d16a      	bne.n	80049ca <__kernel_rem_pio2f+0x206>
 80048f4:	4649      	mov	r1, r9
 80048f6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80048fa:	f7fb fc35 	bl	8000168 <__aeabi_fsub>
 80048fe:	4681      	mov	r9, r0
 8004900:	f1ba 0f00 	cmp.w	sl, #0
 8004904:	d061      	beq.n	80049ca <__kernel_rem_pio2f+0x206>
 8004906:	4639      	mov	r1, r7
 8004908:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800490c:	f7ff fef0 	bl	80046f0 <scalbnf>
 8004910:	4601      	mov	r1, r0
 8004912:	4648      	mov	r0, r9
 8004914:	f7fb fc28 	bl	8000168 <__aeabi_fsub>
 8004918:	4681      	mov	r9, r0
 800491a:	e056      	b.n	80049ca <__kernel_rem_pio2f+0x206>
 800491c:	2400      	movs	r4, #0
 800491e:	e768      	b.n	80047f2 <__kernel_rem_pio2f+0x2e>
 8004920:	eb18 0f05 	cmn.w	r8, r5
 8004924:	d407      	bmi.n	8004936 <__kernel_rem_pio2f+0x172>
 8004926:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800492a:	f7fb fcd3 	bl	80002d4 <__aeabi_i2f>
 800492e:	f846 0b04 	str.w	r0, [r6], #4
 8004932:	3501      	adds	r5, #1
 8004934:	e770      	b.n	8004818 <__kernel_rem_pio2f+0x54>
 8004936:	4658      	mov	r0, fp
 8004938:	e7f9      	b.n	800492e <__kernel_rem_pio2f+0x16a>
 800493a:	9307      	str	r3, [sp, #28]
 800493c:	9b05      	ldr	r3, [sp, #20]
 800493e:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 8004942:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004946:	f7fb fd19 	bl	800037c <__aeabi_fmul>
 800494a:	4601      	mov	r1, r0
 800494c:	4630      	mov	r0, r6
 800494e:	f7fb fc0d 	bl	800016c <__addsf3>
 8004952:	4606      	mov	r6, r0
 8004954:	9b07      	ldr	r3, [sp, #28]
 8004956:	f108 0801 	add.w	r8, r8, #1
 800495a:	9a03      	ldr	r2, [sp, #12]
 800495c:	4590      	cmp	r8, r2
 800495e:	ddec      	ble.n	800493a <__kernel_rem_pio2f+0x176>
 8004960:	f84a 6b04 	str.w	r6, [sl], #4
 8004964:	f109 0901 	add.w	r9, r9, #1
 8004968:	3504      	adds	r5, #4
 800496a:	e761      	b.n	8004830 <__kernel_rem_pio2f+0x6c>
 800496c:	46ab      	mov	fp, r5
 800496e:	461e      	mov	r6, r3
 8004970:	f04f 0800 	mov.w	r8, #0
 8004974:	e7f1      	b.n	800495a <__kernel_rem_pio2f+0x196>
 8004976:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800497a:	4658      	mov	r0, fp
 800497c:	f7fb fcfe 	bl	800037c <__aeabi_fmul>
 8004980:	f7fb fed8 	bl	8000734 <__aeabi_f2iz>
 8004984:	f7fb fca6 	bl	80002d4 <__aeabi_i2f>
 8004988:	4649      	mov	r1, r9
 800498a:	9009      	str	r0, [sp, #36]	@ 0x24
 800498c:	f7fb fcf6 	bl	800037c <__aeabi_fmul>
 8004990:	4601      	mov	r1, r0
 8004992:	4658      	mov	r0, fp
 8004994:	f7fb fbe8 	bl	8000168 <__aeabi_fsub>
 8004998:	f7fb fecc 	bl	8000734 <__aeabi_f2iz>
 800499c:	3d01      	subs	r5, #1
 800499e:	f846 0b04 	str.w	r0, [r6], #4
 80049a2:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 80049a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80049a8:	f7fb fbe0 	bl	800016c <__addsf3>
 80049ac:	4683      	mov	fp, r0
 80049ae:	e75a      	b.n	8004866 <__kernel_rem_pio2f+0xa2>
 80049b0:	d105      	bne.n	80049be <__kernel_rem_pio2f+0x1fa>
 80049b2:	1e63      	subs	r3, r4, #1
 80049b4:	aa0a      	add	r2, sp, #40	@ 0x28
 80049b6:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80049ba:	11ed      	asrs	r5, r5, #7
 80049bc:	e788      	b.n	80048d0 <__kernel_rem_pio2f+0x10c>
 80049be:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80049c2:	f7fb fe8d 	bl	80006e0 <__aeabi_fcmpge>
 80049c6:	4605      	mov	r5, r0
 80049c8:	bb90      	cbnz	r0, 8004a30 <__kernel_rem_pio2f+0x26c>
 80049ca:	2100      	movs	r1, #0
 80049cc:	4648      	mov	r0, r9
 80049ce:	f7fb fe69 	bl	80006a4 <__aeabi_fcmpeq>
 80049d2:	2800      	cmp	r0, #0
 80049d4:	f000 8090 	beq.w	8004af8 <__kernel_rem_pio2f+0x334>
 80049d8:	2200      	movs	r2, #0
 80049da:	1e63      	subs	r3, r4, #1
 80049dc:	9901      	ldr	r1, [sp, #4]
 80049de:	428b      	cmp	r3, r1
 80049e0:	da4a      	bge.n	8004a78 <__kernel_rem_pio2f+0x2b4>
 80049e2:	2a00      	cmp	r2, #0
 80049e4:	d076      	beq.n	8004ad4 <__kernel_rem_pio2f+0x310>
 80049e6:	3c01      	subs	r4, #1
 80049e8:	ab0a      	add	r3, sp, #40	@ 0x28
 80049ea:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80049ee:	3f08      	subs	r7, #8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0f8      	beq.n	80049e6 <__kernel_rem_pio2f+0x222>
 80049f4:	4639      	mov	r1, r7
 80049f6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80049fa:	f7ff fe79 	bl	80046f0 <scalbnf>
 80049fe:	46a2      	mov	sl, r4
 8004a00:	4607      	mov	r7, r0
 8004a02:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 8004a06:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 8004a0a:	f1ba 0f00 	cmp.w	sl, #0
 8004a0e:	f280 80a1 	bge.w	8004b54 <__kernel_rem_pio2f+0x390>
 8004a12:	4627      	mov	r7, r4
 8004a14:	2200      	movs	r2, #0
 8004a16:	2f00      	cmp	r7, #0
 8004a18:	f2c0 80cb 	blt.w	8004bb2 <__kernel_rem_pio2f+0x3ee>
 8004a1c:	a946      	add	r1, sp, #280	@ 0x118
 8004a1e:	4690      	mov	r8, r2
 8004a20:	f04f 0a00 	mov.w	sl, #0
 8004a24:	4b18      	ldr	r3, [pc, #96]	@ (8004a88 <__kernel_rem_pio2f+0x2c4>)
 8004a26:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8004a2a:	eba4 0907 	sub.w	r9, r4, r7
 8004a2e:	e0b4      	b.n	8004b9a <__kernel_rem_pio2f+0x3d6>
 8004a30:	2502      	movs	r5, #2
 8004a32:	e74f      	b.n	80048d4 <__kernel_rem_pio2f+0x110>
 8004a34:	f858 3b04 	ldr.w	r3, [r8], #4
 8004a38:	f1ba 0f00 	cmp.w	sl, #0
 8004a3c:	d108      	bne.n	8004a50 <__kernel_rem_pio2f+0x28c>
 8004a3e:	b123      	cbz	r3, 8004a4a <__kernel_rem_pio2f+0x286>
 8004a40:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8004a44:	f848 3c04 	str.w	r3, [r8, #-4]
 8004a48:	2301      	movs	r3, #1
 8004a4a:	469a      	mov	sl, r3
 8004a4c:	3201      	adds	r2, #1
 8004a4e:	e744      	b.n	80048da <__kernel_rem_pio2f+0x116>
 8004a50:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8004a54:	e7f6      	b.n	8004a44 <__kernel_rem_pio2f+0x280>
 8004a56:	1e62      	subs	r2, r4, #1
 8004a58:	ab0a      	add	r3, sp, #40	@ 0x28
 8004a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a62:	a90a      	add	r1, sp, #40	@ 0x28
 8004a64:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004a68:	e742      	b.n	80048f0 <__kernel_rem_pio2f+0x12c>
 8004a6a:	1e62      	subs	r2, r4, #1
 8004a6c:	ab0a      	add	r3, sp, #40	@ 0x28
 8004a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a76:	e7f4      	b.n	8004a62 <__kernel_rem_pio2f+0x29e>
 8004a78:	a90a      	add	r1, sp, #40	@ 0x28
 8004a7a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	430a      	orrs	r2, r1
 8004a82:	e7ab      	b.n	80049dc <__kernel_rem_pio2f+0x218>
 8004a84:	080051bc 	.word	0x080051bc
 8004a88:	08005190 	.word	0x08005190
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004a92:	2900      	cmp	r1, #0
 8004a94:	d0fa      	beq.n	8004a8c <__kernel_rem_pio2f+0x2c8>
 8004a96:	9a04      	ldr	r2, [sp, #16]
 8004a98:	a91e      	add	r1, sp, #120	@ 0x78
 8004a9a:	18a2      	adds	r2, r4, r2
 8004a9c:	1c66      	adds	r6, r4, #1
 8004a9e:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 8004aa2:	441c      	add	r4, r3
 8004aa4:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 8004aa8:	42b4      	cmp	r4, r6
 8004aaa:	f6ff aecf 	blt.w	800484c <__kernel_rem_pio2f+0x88>
 8004aae:	9b07      	ldr	r3, [sp, #28]
 8004ab0:	46ab      	mov	fp, r5
 8004ab2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004ab6:	f7fb fc0d 	bl	80002d4 <__aeabi_i2f>
 8004aba:	f04f 0a00 	mov.w	sl, #0
 8004abe:	f04f 0800 	mov.w	r8, #0
 8004ac2:	6028      	str	r0, [r5, #0]
 8004ac4:	9b03      	ldr	r3, [sp, #12]
 8004ac6:	459a      	cmp	sl, r3
 8004ac8:	dd07      	ble.n	8004ada <__kernel_rem_pio2f+0x316>
 8004aca:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 8004ace:	3504      	adds	r5, #4
 8004ad0:	3601      	adds	r6, #1
 8004ad2:	e7e9      	b.n	8004aa8 <__kernel_rem_pio2f+0x2e4>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	9a08      	ldr	r2, [sp, #32]
 8004ad8:	e7d9      	b.n	8004a8e <__kernel_rem_pio2f+0x2ca>
 8004ada:	9b05      	ldr	r3, [sp, #20]
 8004adc:	f85b 0904 	ldr.w	r0, [fp], #-4
 8004ae0:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8004ae4:	f7fb fc4a 	bl	800037c <__aeabi_fmul>
 8004ae8:	4601      	mov	r1, r0
 8004aea:	4640      	mov	r0, r8
 8004aec:	f7fb fb3e 	bl	800016c <__addsf3>
 8004af0:	f10a 0a01 	add.w	sl, sl, #1
 8004af4:	4680      	mov	r8, r0
 8004af6:	e7e5      	b.n	8004ac4 <__kernel_rem_pio2f+0x300>
 8004af8:	9b06      	ldr	r3, [sp, #24]
 8004afa:	9a02      	ldr	r2, [sp, #8]
 8004afc:	4648      	mov	r0, r9
 8004afe:	1a99      	subs	r1, r3, r2
 8004b00:	f7ff fdf6 	bl	80046f0 <scalbnf>
 8004b04:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8004b08:	4680      	mov	r8, r0
 8004b0a:	f7fb fde9 	bl	80006e0 <__aeabi_fcmpge>
 8004b0e:	b1f8      	cbz	r0, 8004b50 <__kernel_rem_pio2f+0x38c>
 8004b10:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8004b14:	4640      	mov	r0, r8
 8004b16:	f7fb fc31 	bl	800037c <__aeabi_fmul>
 8004b1a:	f7fb fe0b 	bl	8000734 <__aeabi_f2iz>
 8004b1e:	f7fb fbd9 	bl	80002d4 <__aeabi_i2f>
 8004b22:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8004b26:	4681      	mov	r9, r0
 8004b28:	f7fb fc28 	bl	800037c <__aeabi_fmul>
 8004b2c:	4601      	mov	r1, r0
 8004b2e:	4640      	mov	r0, r8
 8004b30:	f7fb fb1a 	bl	8000168 <__aeabi_fsub>
 8004b34:	f7fb fdfe 	bl	8000734 <__aeabi_f2iz>
 8004b38:	ab0a      	add	r3, sp, #40	@ 0x28
 8004b3a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004b3e:	4648      	mov	r0, r9
 8004b40:	3401      	adds	r4, #1
 8004b42:	3708      	adds	r7, #8
 8004b44:	f7fb fdf6 	bl	8000734 <__aeabi_f2iz>
 8004b48:	ab0a      	add	r3, sp, #40	@ 0x28
 8004b4a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004b4e:	e751      	b.n	80049f4 <__kernel_rem_pio2f+0x230>
 8004b50:	4640      	mov	r0, r8
 8004b52:	e7f7      	b.n	8004b44 <__kernel_rem_pio2f+0x380>
 8004b54:	ab0a      	add	r3, sp, #40	@ 0x28
 8004b56:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004b5a:	f7fb fbbb 	bl	80002d4 <__aeabi_i2f>
 8004b5e:	4639      	mov	r1, r7
 8004b60:	f7fb fc0c 	bl	800037c <__aeabi_fmul>
 8004b64:	4649      	mov	r1, r9
 8004b66:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 8004b6a:	4638      	mov	r0, r7
 8004b6c:	f7fb fc06 	bl	800037c <__aeabi_fmul>
 8004b70:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b74:	4607      	mov	r7, r0
 8004b76:	e748      	b.n	8004a0a <__kernel_rem_pio2f+0x246>
 8004b78:	f853 0b04 	ldr.w	r0, [r3], #4
 8004b7c:	f85b 1b04 	ldr.w	r1, [fp], #4
 8004b80:	9203      	str	r2, [sp, #12]
 8004b82:	9302      	str	r3, [sp, #8]
 8004b84:	f7fb fbfa 	bl	800037c <__aeabi_fmul>
 8004b88:	4601      	mov	r1, r0
 8004b8a:	4640      	mov	r0, r8
 8004b8c:	f7fb faee 	bl	800016c <__addsf3>
 8004b90:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004b94:	4680      	mov	r8, r0
 8004b96:	f10a 0a01 	add.w	sl, sl, #1
 8004b9a:	9901      	ldr	r1, [sp, #4]
 8004b9c:	458a      	cmp	sl, r1
 8004b9e:	dc01      	bgt.n	8004ba4 <__kernel_rem_pio2f+0x3e0>
 8004ba0:	45ca      	cmp	sl, r9
 8004ba2:	dde9      	ble.n	8004b78 <__kernel_rem_pio2f+0x3b4>
 8004ba4:	ab5a      	add	r3, sp, #360	@ 0x168
 8004ba6:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8004baa:	f849 8ca0 	str.w	r8, [r9, #-160]
 8004bae:	3f01      	subs	r7, #1
 8004bb0:	e731      	b.n	8004a16 <__kernel_rem_pio2f+0x252>
 8004bb2:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	dc07      	bgt.n	8004bc8 <__kernel_rem_pio2f+0x404>
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	dc4e      	bgt.n	8004c5a <__kernel_rem_pio2f+0x496>
 8004bbc:	d02e      	beq.n	8004c1c <__kernel_rem_pio2f+0x458>
 8004bbe:	f006 0007 	and.w	r0, r6, #7
 8004bc2:	b05b      	add	sp, #364	@ 0x16c
 8004bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bc8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d1f7      	bne.n	8004bbe <__kernel_rem_pio2f+0x3fa>
 8004bce:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 8004bd2:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8004bd6:	46b8      	mov	r8, r7
 8004bd8:	46a2      	mov	sl, r4
 8004bda:	f1ba 0f00 	cmp.w	sl, #0
 8004bde:	dc49      	bgt.n	8004c74 <__kernel_rem_pio2f+0x4b0>
 8004be0:	46a1      	mov	r9, r4
 8004be2:	f1b9 0f01 	cmp.w	r9, #1
 8004be6:	dc60      	bgt.n	8004caa <__kernel_rem_pio2f+0x4e6>
 8004be8:	2000      	movs	r0, #0
 8004bea:	2c01      	cmp	r4, #1
 8004bec:	dc76      	bgt.n	8004cdc <__kernel_rem_pio2f+0x518>
 8004bee:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8004bf0:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8004bf2:	2d00      	cmp	r5, #0
 8004bf4:	d178      	bne.n	8004ce8 <__kernel_rem_pio2f+0x524>
 8004bf6:	9900      	ldr	r1, [sp, #0]
 8004bf8:	600a      	str	r2, [r1, #0]
 8004bfa:	460a      	mov	r2, r1
 8004bfc:	604b      	str	r3, [r1, #4]
 8004bfe:	6090      	str	r0, [r2, #8]
 8004c00:	e7dd      	b.n	8004bbe <__kernel_rem_pio2f+0x3fa>
 8004c02:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8004c06:	f7fb fab1 	bl	800016c <__addsf3>
 8004c0a:	3c01      	subs	r4, #1
 8004c0c:	2c00      	cmp	r4, #0
 8004c0e:	daf8      	bge.n	8004c02 <__kernel_rem_pio2f+0x43e>
 8004c10:	b10d      	cbz	r5, 8004c16 <__kernel_rem_pio2f+0x452>
 8004c12:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8004c16:	9b00      	ldr	r3, [sp, #0]
 8004c18:	6018      	str	r0, [r3, #0]
 8004c1a:	e7d0      	b.n	8004bbe <__kernel_rem_pio2f+0x3fa>
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	af32      	add	r7, sp, #200	@ 0xc8
 8004c20:	e7f4      	b.n	8004c0c <__kernel_rem_pio2f+0x448>
 8004c22:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8004c26:	f7fb faa1 	bl	800016c <__addsf3>
 8004c2a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c2e:	f1b8 0f00 	cmp.w	r8, #0
 8004c32:	daf6      	bge.n	8004c22 <__kernel_rem_pio2f+0x45e>
 8004c34:	b1ad      	cbz	r5, 8004c62 <__kernel_rem_pio2f+0x49e>
 8004c36:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 8004c3a:	9a00      	ldr	r2, [sp, #0]
 8004c3c:	4601      	mov	r1, r0
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8004c42:	f7fb fa91 	bl	8000168 <__aeabi_fsub>
 8004c46:	f04f 0801 	mov.w	r8, #1
 8004c4a:	4544      	cmp	r4, r8
 8004c4c:	da0b      	bge.n	8004c66 <__kernel_rem_pio2f+0x4a2>
 8004c4e:	b10d      	cbz	r5, 8004c54 <__kernel_rem_pio2f+0x490>
 8004c50:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8004c54:	9b00      	ldr	r3, [sp, #0]
 8004c56:	6058      	str	r0, [r3, #4]
 8004c58:	e7b1      	b.n	8004bbe <__kernel_rem_pio2f+0x3fa>
 8004c5a:	46a0      	mov	r8, r4
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	af32      	add	r7, sp, #200	@ 0xc8
 8004c60:	e7e5      	b.n	8004c2e <__kernel_rem_pio2f+0x46a>
 8004c62:	4603      	mov	r3, r0
 8004c64:	e7e9      	b.n	8004c3a <__kernel_rem_pio2f+0x476>
 8004c66:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8004c6a:	f7fb fa7f 	bl	800016c <__addsf3>
 8004c6e:	f108 0801 	add.w	r8, r8, #1
 8004c72:	e7ea      	b.n	8004c4a <__kernel_rem_pio2f+0x486>
 8004c74:	f8d8 3000 	ldr.w	r3, [r8]
 8004c78:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4610      	mov	r0, r2
 8004c80:	9302      	str	r3, [sp, #8]
 8004c82:	9201      	str	r2, [sp, #4]
 8004c84:	f7fb fa72 	bl	800016c <__addsf3>
 8004c88:	9a01      	ldr	r2, [sp, #4]
 8004c8a:	4601      	mov	r1, r0
 8004c8c:	4681      	mov	r9, r0
 8004c8e:	4610      	mov	r0, r2
 8004c90:	f7fb fa6a 	bl	8000168 <__aeabi_fsub>
 8004c94:	9b02      	ldr	r3, [sp, #8]
 8004c96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	f7fb fa66 	bl	800016c <__addsf3>
 8004ca0:	f848 0904 	str.w	r0, [r8], #-4
 8004ca4:	f8c8 9000 	str.w	r9, [r8]
 8004ca8:	e797      	b.n	8004bda <__kernel_rem_pio2f+0x416>
 8004caa:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8004cae:	f8d7 a000 	ldr.w	sl, [r7]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	4651      	mov	r1, sl
 8004cb6:	9301      	str	r3, [sp, #4]
 8004cb8:	f7fb fa58 	bl	800016c <__addsf3>
 8004cbc:	9b01      	ldr	r3, [sp, #4]
 8004cbe:	4601      	mov	r1, r0
 8004cc0:	4680      	mov	r8, r0
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fb fa50 	bl	8000168 <__aeabi_fsub>
 8004cc8:	4651      	mov	r1, sl
 8004cca:	f7fb fa4f 	bl	800016c <__addsf3>
 8004cce:	f847 0904 	str.w	r0, [r7], #-4
 8004cd2:	f109 39ff 	add.w	r9, r9, #4294967295
 8004cd6:	f8c7 8000 	str.w	r8, [r7]
 8004cda:	e782      	b.n	8004be2 <__kernel_rem_pio2f+0x41e>
 8004cdc:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8004ce0:	f7fb fa44 	bl	800016c <__addsf3>
 8004ce4:	3c01      	subs	r4, #1
 8004ce6:	e780      	b.n	8004bea <__kernel_rem_pio2f+0x426>
 8004ce8:	9900      	ldr	r1, [sp, #0]
 8004cea:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8004cee:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004cf2:	600a      	str	r2, [r1, #0]
 8004cf4:	604b      	str	r3, [r1, #4]
 8004cf6:	460a      	mov	r2, r1
 8004cf8:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8004cfc:	e77f      	b.n	8004bfe <__kernel_rem_pio2f+0x43a>
 8004cfe:	bf00      	nop

08004d00 <floorf>:
 8004d00:	b570      	push	{r4, r5, r6, lr}
 8004d02:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8004d06:	3d7f      	subs	r5, #127	@ 0x7f
 8004d08:	2d16      	cmp	r5, #22
 8004d0a:	4601      	mov	r1, r0
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 8004d12:	dc26      	bgt.n	8004d62 <floorf+0x62>
 8004d14:	2d00      	cmp	r5, #0
 8004d16:	da0f      	bge.n	8004d38 <floorf+0x38>
 8004d18:	4917      	ldr	r1, [pc, #92]	@ (8004d78 <floorf+0x78>)
 8004d1a:	f7fb fa27 	bl	800016c <__addsf3>
 8004d1e:	2100      	movs	r1, #0
 8004d20:	f7fb fce8 	bl	80006f4 <__aeabi_fcmpgt>
 8004d24:	b130      	cbz	r0, 8004d34 <floorf+0x34>
 8004d26:	2c00      	cmp	r4, #0
 8004d28:	da23      	bge.n	8004d72 <floorf+0x72>
 8004d2a:	2e00      	cmp	r6, #0
 8004d2c:	4c13      	ldr	r4, [pc, #76]	@ (8004d7c <floorf+0x7c>)
 8004d2e:	bf08      	it	eq
 8004d30:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004d34:	4621      	mov	r1, r4
 8004d36:	e01a      	b.n	8004d6e <floorf+0x6e>
 8004d38:	4e11      	ldr	r6, [pc, #68]	@ (8004d80 <floorf+0x80>)
 8004d3a:	412e      	asrs	r6, r5
 8004d3c:	4230      	tst	r0, r6
 8004d3e:	d016      	beq.n	8004d6e <floorf+0x6e>
 8004d40:	490d      	ldr	r1, [pc, #52]	@ (8004d78 <floorf+0x78>)
 8004d42:	f7fb fa13 	bl	800016c <__addsf3>
 8004d46:	2100      	movs	r1, #0
 8004d48:	f7fb fcd4 	bl	80006f4 <__aeabi_fcmpgt>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	d0f1      	beq.n	8004d34 <floorf+0x34>
 8004d50:	2c00      	cmp	r4, #0
 8004d52:	bfbe      	ittt	lt
 8004d54:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8004d58:	412b      	asrlt	r3, r5
 8004d5a:	18e4      	addlt	r4, r4, r3
 8004d5c:	ea24 0406 	bic.w	r4, r4, r6
 8004d60:	e7e8      	b.n	8004d34 <floorf+0x34>
 8004d62:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8004d66:	d302      	bcc.n	8004d6e <floorf+0x6e>
 8004d68:	f7fb fa00 	bl	800016c <__addsf3>
 8004d6c:	4601      	mov	r1, r0
 8004d6e:	4608      	mov	r0, r1
 8004d70:	bd70      	pop	{r4, r5, r6, pc}
 8004d72:	2400      	movs	r4, #0
 8004d74:	e7de      	b.n	8004d34 <floorf+0x34>
 8004d76:	bf00      	nop
 8004d78:	7149f2ca 	.word	0x7149f2ca
 8004d7c:	bf800000 	.word	0xbf800000
 8004d80:	007fffff 	.word	0x007fffff

08004d84 <_init>:
 8004d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d86:	bf00      	nop
 8004d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d8a:	bc08      	pop	{r3}
 8004d8c:	469e      	mov	lr, r3
 8004d8e:	4770      	bx	lr

08004d90 <_fini>:
 8004d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d92:	bf00      	nop
 8004d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d96:	bc08      	pop	{r3}
 8004d98:	469e      	mov	lr, r3
 8004d9a:	4770      	bx	lr
