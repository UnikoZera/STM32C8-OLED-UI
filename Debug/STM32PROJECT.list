
STM32PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db40  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab8  0800dc4c  0800dc4c  0000ec4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e704  0800e704  00010084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e704  0800e704  0000f704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e70c  0800e70c  00010084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e70c  0800e70c  0000f70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e710  0800e710  0000f710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800e714  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004134  20000084  0800e798  00010084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200041b8  0800e798  000101b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134fc  00000000  00000000  000100ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b39  00000000  00000000  000235a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  000270e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001084  00000000  00000000  00028598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a099  00000000  00000000  0002961c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aa75  00000000  00000000  000436b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090ab7  00000000  00000000  0005e12a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eebe1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065f8  00000000  00000000  000eec24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000f521c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	0800dc34 	.word	0x0800dc34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	0800dc34 	.word	0x0800dc34

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_fcmpun>:
 8000718:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800071c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000720:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000724:	d102      	bne.n	800072c <__aeabi_fcmpun+0x14>
 8000726:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800072a:	d108      	bne.n	800073e <__aeabi_fcmpun+0x26>
 800072c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000730:	d102      	bne.n	8000738 <__aeabi_fcmpun+0x20>
 8000732:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000736:	d102      	bne.n	800073e <__aeabi_fcmpun+0x26>
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	4770      	bx	lr
 800073e:	f04f 0001 	mov.w	r0, #1
 8000742:	4770      	bx	lr

08000744 <__aeabi_f2iz>:
 8000744:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000748:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800074c:	d30f      	bcc.n	800076e <__aeabi_f2iz+0x2a>
 800074e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000752:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000756:	d90d      	bls.n	8000774 <__aeabi_f2iz+0x30>
 8000758:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800075c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000760:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000764:	fa23 f002 	lsr.w	r0, r3, r2
 8000768:	bf18      	it	ne
 800076a:	4240      	negne	r0, r0
 800076c:	4770      	bx	lr
 800076e:	f04f 0000 	mov.w	r0, #0
 8000772:	4770      	bx	lr
 8000774:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000778:	d101      	bne.n	800077e <__aeabi_f2iz+0x3a>
 800077a:	0242      	lsls	r2, r0, #9
 800077c:	d105      	bne.n	800078a <__aeabi_f2iz+0x46>
 800077e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000782:	bf08      	it	eq
 8000784:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000788:	4770      	bx	lr
 800078a:	f04f 0000 	mov.w	r0, #0
 800078e:	4770      	bx	lr

08000790 <__aeabi_f2uiz>:
 8000790:	0042      	lsls	r2, r0, #1
 8000792:	d20e      	bcs.n	80007b2 <__aeabi_f2uiz+0x22>
 8000794:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000798:	d30b      	bcc.n	80007b2 <__aeabi_f2uiz+0x22>
 800079a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800079e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007a2:	d409      	bmi.n	80007b8 <__aeabi_f2uiz+0x28>
 80007a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ac:	fa23 f002 	lsr.w	r0, r3, r2
 80007b0:	4770      	bx	lr
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	4770      	bx	lr
 80007b8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80007bc:	d101      	bne.n	80007c2 <__aeabi_f2uiz+0x32>
 80007be:	0242      	lsls	r2, r0, #9
 80007c0:	d102      	bne.n	80007c8 <__aeabi_f2uiz+0x38>
 80007c2:	f04f 30ff 	mov.w	r0, #4294967295
 80007c6:	4770      	bx	lr
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_DMA_Init+0x38>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a0b      	ldr	r2, [pc, #44]	@ (8000808 <MX_DMA_Init+0x38>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_DMA_Init+0x38>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	2010      	movs	r0, #16
 80007f4:	f008 fa59 	bl	8008caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007f8:	2010      	movs	r0, #16
 80007fa:	f008 fa72 	bl	8008ce2 <HAL_NVIC_EnableIRQ>

}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <OLED_DrawLine>:
    *y_out = (int16_t)(matrix->m[1][0] * x + matrix->m[1][1] * y + matrix->m[1][2]);
}

// 画线函数（用于绘制旋转矩形的边） //! UPDATEDISPLAY REQUIRED
void OLED_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b087      	sub	sp, #28
 8000810:	af00      	add	r7, sp, #0
 8000812:	4604      	mov	r4, r0
 8000814:	4608      	mov	r0, r1
 8000816:	4611      	mov	r1, r2
 8000818:	461a      	mov	r2, r3
 800081a:	4623      	mov	r3, r4
 800081c:	80fb      	strh	r3, [r7, #6]
 800081e:	4603      	mov	r3, r0
 8000820:	80bb      	strh	r3, [r7, #4]
 8000822:	460b      	mov	r3, r1
 8000824:	807b      	strh	r3, [r7, #2]
 8000826:	4613      	mov	r3, r2
 8000828:	803b      	strh	r3, [r7, #0]
    int16_t dx = abs(x1 - x0);
 800082a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800082e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	bfb8      	it	lt
 8000838:	425b      	neglt	r3, r3
 800083a:	82bb      	strh	r3, [r7, #20]
    int16_t dy = abs(y1 - y0);
 800083c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000840:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	bfb8      	it	lt
 800084a:	425b      	neglt	r3, r3
 800084c:	827b      	strh	r3, [r7, #18]
    int16_t sx = (x0 < x1) ? 1 : -1;
 800084e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000852:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000856:	429a      	cmp	r2, r3
 8000858:	da01      	bge.n	800085e <OLED_DrawLine+0x52>
 800085a:	2301      	movs	r3, #1
 800085c:	e001      	b.n	8000862 <OLED_DrawLine+0x56>
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
 8000862:	823b      	strh	r3, [r7, #16]
    int16_t sy = (y0 < y1) ? 1 : -1;
 8000864:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000868:	f9b7 3000 	ldrsh.w	r3, [r7]
 800086c:	429a      	cmp	r2, r3
 800086e:	da01      	bge.n	8000874 <OLED_DrawLine+0x68>
 8000870:	2301      	movs	r3, #1
 8000872:	e001      	b.n	8000878 <OLED_DrawLine+0x6c>
 8000874:	f04f 33ff 	mov.w	r3, #4294967295
 8000878:	81fb      	strh	r3, [r7, #14]
    int16_t err = dx - dy;
 800087a:	8aba      	ldrh	r2, [r7, #20]
 800087c:	8a7b      	ldrh	r3, [r7, #18]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	b29b      	uxth	r3, r3
 8000882:	82fb      	strh	r3, [r7, #22]

    while (1)
    {
        OLED_WritePixel(x0, y0, 1);
 8000884:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000888:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800088c:	2201      	movs	r2, #1
 800088e:	4618      	mov	r0, r3
 8000890:	f001 ff5a 	bl	8002748 <OLED_WritePixel>

        if (x0 == x1 && y0 == y1)
 8000894:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000898:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800089c:	429a      	cmp	r2, r3
 800089e:	d105      	bne.n	80008ac <OLED_DrawLine+0xa0>
 80008a0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80008a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d025      	beq.n	80008f8 <OLED_DrawLine+0xec>
            break;

        int16_t e2 = 2 * err;
 80008ac:	8afb      	ldrh	r3, [r7, #22]
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	81bb      	strh	r3, [r7, #12]
        if (e2 > -dy)
 80008b4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80008b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80008bc:	425b      	negs	r3, r3
 80008be:	429a      	cmp	r2, r3
 80008c0:	dd09      	ble.n	80008d6 <OLED_DrawLine+0xca>
        {
            err -= dy;
 80008c2:	8afa      	ldrh	r2, [r7, #22]
 80008c4:	8a7b      	ldrh	r3, [r7, #18]
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 80008cc:	88fa      	ldrh	r2, [r7, #6]
 80008ce:	8a3b      	ldrh	r3, [r7, #16]
 80008d0:	4413      	add	r3, r2
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	80fb      	strh	r3, [r7, #6]
        }
        if (e2 < dx)
 80008d6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80008da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80008de:	429a      	cmp	r2, r3
 80008e0:	dad0      	bge.n	8000884 <OLED_DrawLine+0x78>
        {
            err += dx;
 80008e2:	8afa      	ldrh	r2, [r7, #22]
 80008e4:	8abb      	ldrh	r3, [r7, #20]
 80008e6:	4413      	add	r3, r2
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 80008ec:	88ba      	ldrh	r2, [r7, #4]
 80008ee:	89fb      	ldrh	r3, [r7, #14]
 80008f0:	4413      	add	r3, r2
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	80bb      	strh	r3, [r7, #4]
    {
 80008f6:	e7c5      	b.n	8000884 <OLED_DrawLine+0x78>
            break;
 80008f8:	bf00      	nop
        }
    }
}
 80008fa:	bf00      	nop
 80008fc:	371c      	adds	r7, #28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd90      	pop	{r4, r7, pc}
	...

08000904 <OLED_InitCube3D>:
// 3D 立方体实现
// =============================================================================

// 初始化3D立方体
void OLED_InitCube3D(OLED_Cube3D *cube, float size, int16_t center_x, int16_t center_y)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b09e      	sub	sp, #120	@ 0x78
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	4611      	mov	r1, r2
 8000910:	461a      	mov	r2, r3
 8000912:	460b      	mov	r3, r1
 8000914:	80fb      	strh	r3, [r7, #6]
 8000916:	4613      	mov	r3, r2
 8000918:	80bb      	strh	r3, [r7, #4]
    if (!cube) return;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	2b00      	cmp	r3, #0
 800091e:	f000 80e4 	beq.w	8000aea <OLED_InitCube3D+0x1e6>
    
    cube->size = size;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	68ba      	ldr	r2, [r7, #8]
 8000926:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    float half_size = size / 2.0f;
 800092a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800092e:	68b8      	ldr	r0, [r7, #8]
 8000930:	f7ff fde0 	bl	80004f4 <__aeabi_fdiv>
 8000934:	4603      	mov	r3, r0
 8000936:	677b      	str	r3, [r7, #116]	@ 0x74
    
    // 定义立方体的8个顶点 (以原点为中心)
    cube->vertices[0] = (OLED_Point3D){-half_size, -half_size, -half_size}; // 后左下
 8000938:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800093a:	f083 4000 	eor.w	r0, r3, #2147483648	@ 0x80000000
 800093e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000940:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 8000944:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000946:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	6018      	str	r0, [r3, #0]
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	6059      	str	r1, [r3, #4]
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	609a      	str	r2, [r3, #8]
    cube->vertices[1] = (OLED_Point3D){ half_size, -half_size, -half_size}; // 后右下
 8000956:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000958:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 800095c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800095e:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000966:	60d8      	str	r0, [r3, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	6119      	str	r1, [r3, #16]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	615a      	str	r2, [r3, #20]
    cube->vertices[2] = (OLED_Point3D){ half_size,  half_size, -half_size}; // 后右上
 8000970:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000972:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800097a:	6199      	str	r1, [r3, #24]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8000980:	61d9      	str	r1, [r3, #28]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	621a      	str	r2, [r3, #32]
    cube->vertices[3] = (OLED_Point3D){-half_size,  half_size, -half_size}; // 后左上
 8000986:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000988:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 800098c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800098e:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	6259      	str	r1, [r3, #36]	@ 0x24
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800099a:	6299      	str	r1, [r3, #40]	@ 0x28
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	62da      	str	r2, [r3, #44]	@ 0x2c
    cube->vertices[4] = (OLED_Point3D){-half_size, -half_size,  half_size}; // 前左下
 80009a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80009a2:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 80009a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80009a8:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	6319      	str	r1, [r3, #48]	@ 0x30
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80009b8:	639a      	str	r2, [r3, #56]	@ 0x38
    cube->vertices[5] = (OLED_Point3D){ half_size, -half_size,  half_size}; // 前右下
 80009ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80009bc:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80009c4:	63d9      	str	r1, [r3, #60]	@ 0x3c
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80009ce:	645a      	str	r2, [r3, #68]	@ 0x44
    cube->vertices[6] = (OLED_Point3D){ half_size,  half_size,  half_size}; // 前右上
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80009d4:	649a      	str	r2, [r3, #72]	@ 0x48
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80009da:	64da      	str	r2, [r3, #76]	@ 0x4c
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80009e0:	651a      	str	r2, [r3, #80]	@ 0x50
    cube->vertices[7] = (OLED_Point3D){-half_size,  half_size,  half_size}; // 前左上
 80009e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80009e4:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	655a      	str	r2, [r3, #84]	@ 0x54
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80009f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80009f6:	65da      	str	r2, [r3, #92]	@ 0x5c
    
    // 定义立方体的12条边 (连接的顶点索引)
    // 后面的4条边
    cube->edges[0][0] = 0; cube->edges[0][1] = 1;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	2200      	movs	r2, #0
 80009fc:	661a      	str	r2, [r3, #96]	@ 0x60
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	2201      	movs	r2, #1
 8000a02:	665a      	str	r2, [r3, #100]	@ 0x64
    cube->edges[1][0] = 1; cube->edges[1][1] = 2;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	2201      	movs	r2, #1
 8000a08:	669a      	str	r2, [r3, #104]	@ 0x68
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	66da      	str	r2, [r3, #108]	@ 0x6c
    cube->edges[2][0] = 2; cube->edges[2][1] = 3;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2202      	movs	r2, #2
 8000a14:	671a      	str	r2, [r3, #112]	@ 0x70
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	2203      	movs	r2, #3
 8000a1a:	675a      	str	r2, [r3, #116]	@ 0x74
    cube->edges[3][0] = 3; cube->edges[3][1] = 0;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2203      	movs	r2, #3
 8000a20:	679a      	str	r2, [r3, #120]	@ 0x78
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	2200      	movs	r2, #0
 8000a26:	67da      	str	r2, [r3, #124]	@ 0x7c
    
    // 前面的4条边
    cube->edges[4][0] = 4; cube->edges[4][1] = 5;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2205      	movs	r2, #5
 8000a34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    cube->edges[5][0] = 5; cube->edges[5][1] = 6;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	2205      	movs	r2, #5
 8000a3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2206      	movs	r2, #6
 8000a44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    cube->edges[6][0] = 6; cube->edges[6][1] = 7;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	2206      	movs	r2, #6
 8000a4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2207      	movs	r2, #7
 8000a54:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    cube->edges[7][0] = 7; cube->edges[7][1] = 4;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2207      	movs	r2, #7
 8000a5c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2204      	movs	r2, #4
 8000a64:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    
    // 连接前后面的4条边
    cube->edges[8][0] = 0; cube->edges[8][1] = 4;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2204      	movs	r2, #4
 8000a74:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    cube->edges[9][0] = 1; cube->edges[9][1] = 5;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2205      	movs	r2, #5
 8000a84:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    cube->edges[10][0] = 2; cube->edges[10][1] = 6;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	2206      	movs	r2, #6
 8000a94:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    cube->edges[11][0] = 3; cube->edges[11][1] = 7;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	2203      	movs	r2, #3
 8000a9c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	2207      	movs	r2, #7
 8000aa4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    
    // 初始化变换参数
    cube->transform.angle_x = 0.0f;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f04f 0200 	mov.w	r2, #0
 8000aae:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    cube->transform.angle_y = 0.0f;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	f04f 0200 	mov.w	r2, #0
 8000ab8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    cube->transform.angle_z = 0.0f;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f04f 0200 	mov.w	r2, #0
 8000ac2:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    cube->transform.scale = 1.0f;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000acc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    cube->transform.center_x = center_x;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	88fa      	ldrh	r2, [r7, #6]
 8000ad4:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
    cube->transform.center_y = center_y;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	88ba      	ldrh	r2, [r7, #4]
 8000adc:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
    cube->transform.distance = 100.0f; // 观察者距离
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4a04      	ldr	r2, [pc, #16]	@ (8000af4 <OLED_InitCube3D+0x1f0>)
 8000ae4:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8000ae8:	e000      	b.n	8000aec <OLED_InitCube3D+0x1e8>
    if (!cube) return;
 8000aea:	bf00      	nop
}
 8000aec:	3778      	adds	r7, #120	@ 0x78
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	42c80000 	.word	0x42c80000

08000af8 <OLED_UpdateCubeRotation>:

// 更新立方体旋转角度
void OLED_UpdateCubeRotation(OLED_Cube3D *cube, float delta_x, float delta_y, float delta_z)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
 8000b04:	603b      	str	r3, [r7, #0]
    if (!cube) return;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	f000 80b2 	beq.w	8000c72 <OLED_UpdateCubeRotation+0x17a>
    
    cube->transform.angle_x += delta_x;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000b14:	68b9      	ldr	r1, [r7, #8]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff fb30 	bl	800017c <__addsf3>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	461a      	mov	r2, r3
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    cube->transform.angle_y += delta_y;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000b2c:	6879      	ldr	r1, [r7, #4]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fb24 	bl	800017c <__addsf3>
 8000b34:	4603      	mov	r3, r0
 8000b36:	461a      	mov	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    cube->transform.angle_z += delta_z;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000b44:	6839      	ldr	r1, [r7, #0]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fb18 	bl	800017c <__addsf3>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    
    // 保持角度在 0-2π 范围内
    while (cube->transform.angle_x >= 2 * 3.14159f) cube->transform.angle_x -= 2 * 3.14159f;
 8000b56:	e00b      	b.n	8000b70 <OLED_UpdateCubeRotation+0x78>
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000b5e:	4947      	ldr	r1, [pc, #284]	@ (8000c7c <OLED_UpdateCubeRotation+0x184>)
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fb09 	bl	8000178 <__aeabi_fsub>
 8000b66:	4603      	mov	r3, r0
 8000b68:	461a      	mov	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000b76:	4941      	ldr	r1, [pc, #260]	@ (8000c7c <OLED_UpdateCubeRotation+0x184>)
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fdb9 	bl	80006f0 <__aeabi_fcmpge>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d1e9      	bne.n	8000b58 <OLED_UpdateCubeRotation+0x60>
    while (cube->transform.angle_x < 0) cube->transform.angle_x += 2 * 3.14159f;
 8000b84:	e00b      	b.n	8000b9e <OLED_UpdateCubeRotation+0xa6>
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000b8c:	493b      	ldr	r1, [pc, #236]	@ (8000c7c <OLED_UpdateCubeRotation+0x184>)
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff faf4 	bl	800017c <__addsf3>
 8000b94:	4603      	mov	r3, r0
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000ba4:	f04f 0100 	mov.w	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fd8d 	bl	80006c8 <__aeabi_fcmplt>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1e8      	bne.n	8000b86 <OLED_UpdateCubeRotation+0x8e>
    while (cube->transform.angle_y >= 2 * 3.14159f) cube->transform.angle_y -= 2 * 3.14159f;
 8000bb4:	e00b      	b.n	8000bce <OLED_UpdateCubeRotation+0xd6>
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000bbc:	492f      	ldr	r1, [pc, #188]	@ (8000c7c <OLED_UpdateCubeRotation+0x184>)
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fada 	bl	8000178 <__aeabi_fsub>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000bd4:	4929      	ldr	r1, [pc, #164]	@ (8000c7c <OLED_UpdateCubeRotation+0x184>)
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fd8a 	bl	80006f0 <__aeabi_fcmpge>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1e9      	bne.n	8000bb6 <OLED_UpdateCubeRotation+0xbe>
    while (cube->transform.angle_y < 0) cube->transform.angle_y += 2 * 3.14159f;
 8000be2:	e00b      	b.n	8000bfc <OLED_UpdateCubeRotation+0x104>
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000bea:	4924      	ldr	r1, [pc, #144]	@ (8000c7c <OLED_UpdateCubeRotation+0x184>)
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fac5 	bl	800017c <__addsf3>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000c02:	f04f 0100 	mov.w	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fd5e 	bl	80006c8 <__aeabi_fcmplt>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d1e8      	bne.n	8000be4 <OLED_UpdateCubeRotation+0xec>
    while (cube->transform.angle_z >= 2 * 3.14159f) cube->transform.angle_z -= 2 * 3.14159f;
 8000c12:	e00b      	b.n	8000c2c <OLED_UpdateCubeRotation+0x134>
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000c1a:	4918      	ldr	r1, [pc, #96]	@ (8000c7c <OLED_UpdateCubeRotation+0x184>)
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff faab 	bl	8000178 <__aeabi_fsub>
 8000c22:	4603      	mov	r3, r0
 8000c24:	461a      	mov	r2, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000c32:	4912      	ldr	r1, [pc, #72]	@ (8000c7c <OLED_UpdateCubeRotation+0x184>)
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fd5b 	bl	80006f0 <__aeabi_fcmpge>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1e9      	bne.n	8000c14 <OLED_UpdateCubeRotation+0x11c>
    while (cube->transform.angle_z < 0) cube->transform.angle_z += 2 * 3.14159f;
 8000c40:	e00b      	b.n	8000c5a <OLED_UpdateCubeRotation+0x162>
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000c48:	490c      	ldr	r1, [pc, #48]	@ (8000c7c <OLED_UpdateCubeRotation+0x184>)
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fa96 	bl	800017c <__addsf3>
 8000c50:	4603      	mov	r3, r0
 8000c52:	461a      	mov	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000c60:	f04f 0100 	mov.w	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fd2f 	bl	80006c8 <__aeabi_fcmplt>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d1e8      	bne.n	8000c42 <OLED_UpdateCubeRotation+0x14a>
 8000c70:	e000      	b.n	8000c74 <OLED_UpdateCubeRotation+0x17c>
    if (!cube) return;
 8000c72:	bf00      	nop
}
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40c90fd0 	.word	0x40c90fd0

08000c80 <OLED_RotatePointX>:
    cube->transform.scale = scale;
}

// 绕X轴旋转点
OLED_Point3D OLED_RotatePointX(OLED_Point3D point, float angle)
{
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b08b      	sub	sp, #44	@ 0x2c
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	4638      	mov	r0, r7
 8000c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    OLED_Point3D result;
    float cos_a = cosf(angle);
 8000c8e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000c90:	f00b fddc 	bl	800c84c <cosf>
 8000c94:	6278      	str	r0, [r7, #36]	@ 0x24
    float sin_a = sinf(angle);
 8000c96:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000c98:	f00b fe10 	bl	800c8bc <sinf>
 8000c9c:	6238      	str	r0, [r7, #32]
    
    result.x = point.x;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	617b      	str	r3, [r7, #20]
    result.y = point.y * cos_a - point.z * sin_a;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fb70 	bl	800038c <__aeabi_fmul>
 8000cac:	4603      	mov	r3, r0
 8000cae:	461c      	mov	r4, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	6a39      	ldr	r1, [r7, #32]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fb69 	bl	800038c <__aeabi_fmul>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4620      	mov	r0, r4
 8000cc0:	f7ff fa5a 	bl	8000178 <__aeabi_fsub>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	61bb      	str	r3, [r7, #24]
    result.z = point.y * sin_a + point.z * cos_a;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a39      	ldr	r1, [r7, #32]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fb5d 	bl	800038c <__aeabi_fmul>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	461c      	mov	r4, r3
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fb56 	bl	800038c <__aeabi_fmul>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f7ff fa49 	bl	800017c <__addsf3>
 8000cea:	4603      	mov	r3, r0
 8000cec:	61fb      	str	r3, [r7, #28]
    
    return result;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	461c      	mov	r4, r3
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000cfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000cfe:	68f8      	ldr	r0, [r7, #12]
 8000d00:	372c      	adds	r7, #44	@ 0x2c
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd90      	pop	{r4, r7, pc}

08000d06 <OLED_RotatePointY>:

// 绕Y轴旋转点
OLED_Point3D OLED_RotatePointY(OLED_Point3D point, float angle)
{
 8000d06:	b590      	push	{r4, r7, lr}
 8000d08:	b08b      	sub	sp, #44	@ 0x2c
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	4638      	mov	r0, r7
 8000d10:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    OLED_Point3D result;
    float cos_a = cosf(angle);
 8000d14:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000d16:	f00b fd99 	bl	800c84c <cosf>
 8000d1a:	6278      	str	r0, [r7, #36]	@ 0x24
    float sin_a = sinf(angle);
 8000d1c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000d1e:	f00b fdcd 	bl	800c8bc <sinf>
 8000d22:	6238      	str	r0, [r7, #32]
    
    result.x = point.x * cos_a + point.z * sin_a;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fb2f 	bl	800038c <__aeabi_fmul>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	461c      	mov	r4, r3
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	6a39      	ldr	r1, [r7, #32]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fb28 	bl	800038c <__aeabi_fmul>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4620      	mov	r0, r4
 8000d42:	f7ff fa1b 	bl	800017c <__addsf3>
 8000d46:	4603      	mov	r3, r0
 8000d48:	617b      	str	r3, [r7, #20]
    result.y = point.y;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	61bb      	str	r3, [r7, #24]
    result.z = -point.x * sin_a + point.z * cos_a;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8000d54:	6a39      	ldr	r1, [r7, #32]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fb18 	bl	800038c <__aeabi_fmul>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	461c      	mov	r4, r3
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fb11 	bl	800038c <__aeabi_fmul>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4620      	mov	r0, r4
 8000d70:	f7ff fa04 	bl	800017c <__addsf3>
 8000d74:	4603      	mov	r3, r0
 8000d76:	61fb      	str	r3, [r7, #28]
    
    return result;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	461c      	mov	r4, r3
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000d88:	68f8      	ldr	r0, [r7, #12]
 8000d8a:	372c      	adds	r7, #44	@ 0x2c
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd90      	pop	{r4, r7, pc}

08000d90 <OLED_RotatePointZ>:

// 绕Z轴旋转点
OLED_Point3D OLED_RotatePointZ(OLED_Point3D point, float angle)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b08b      	sub	sp, #44	@ 0x2c
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	4638      	mov	r0, r7
 8000d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    OLED_Point3D result;
    float cos_a = cosf(angle);
 8000d9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000da0:	f00b fd54 	bl	800c84c <cosf>
 8000da4:	6278      	str	r0, [r7, #36]	@ 0x24
    float sin_a = sinf(angle);
 8000da6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000da8:	f00b fd88 	bl	800c8bc <sinf>
 8000dac:	6238      	str	r0, [r7, #32]
    
    result.x = point.x * cos_a - point.y * sin_a;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff faea 	bl	800038c <__aeabi_fmul>
 8000db8:	4603      	mov	r3, r0
 8000dba:	461c      	mov	r4, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a39      	ldr	r1, [r7, #32]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fae3 	bl	800038c <__aeabi_fmul>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4620      	mov	r0, r4
 8000dcc:	f7ff f9d4 	bl	8000178 <__aeabi_fsub>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	617b      	str	r3, [r7, #20]
    result.y = point.x * sin_a + point.y * cos_a;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	6a39      	ldr	r1, [r7, #32]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fad7 	bl	800038c <__aeabi_fmul>
 8000dde:	4603      	mov	r3, r0
 8000de0:	461c      	mov	r4, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fad0 	bl	800038c <__aeabi_fmul>
 8000dec:	4603      	mov	r3, r0
 8000dee:	4619      	mov	r1, r3
 8000df0:	4620      	mov	r0, r4
 8000df2:	f7ff f9c3 	bl	800017c <__addsf3>
 8000df6:	4603      	mov	r3, r0
 8000df8:	61bb      	str	r3, [r7, #24]
    result.z = point.z;
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	61fb      	str	r3, [r7, #28]
    
    return result;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	461c      	mov	r4, r3
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	372c      	adds	r7, #44	@ 0x2c
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd90      	pop	{r4, r7, pc}

08000e16 <OLED_TransformPoint3D>:

// 应用3D变换
OLED_Point3D OLED_TransformPoint3D(OLED_Point3D point, OLED_Cube3D_Transform *transform)
{
 8000e16:	b590      	push	{r4, r7, lr}
 8000e18:	b08f      	sub	sp, #60	@ 0x3c
 8000e1a:	af02      	add	r7, sp, #8
 8000e1c:	61f8      	str	r0, [r7, #28]
 8000e1e:	f107 0010 	add.w	r0, r7, #16
 8000e22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    OLED_Point3D result = point;
 8000e26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e2a:	f107 0210 	add.w	r2, r7, #16
 8000e2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    
    // 应用缩放
    result.x *= transform->scale;
 8000e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	f7ff faa5 	bl	800038c <__aeabi_fmul>
 8000e42:	4603      	mov	r3, r0
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
    result.y *= transform->scale;
 8000e46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4610      	mov	r0, r2
 8000e50:	f7ff fa9c 	bl	800038c <__aeabi_fmul>
 8000e54:	4603      	mov	r3, r0
 8000e56:	62bb      	str	r3, [r7, #40]	@ 0x28
    result.z *= transform->scale;
 8000e58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4610      	mov	r0, r2
 8000e62:	f7ff fa93 	bl	800038c <__aeabi_fmul>
 8000e66:	4603      	mov	r3, r0
 8000e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    // 应用旋转 (顺序: X -> Y -> Z)
    result = OLED_RotatePointX(result, transform->angle_x);
 8000e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e7a:	f7ff ff01 	bl	8000c80 <OLED_RotatePointX>
    result = OLED_RotatePointY(result, transform->angle_y);
 8000e7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	4638      	mov	r0, r7
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e8c:	f7ff ff3b 	bl	8000d06 <OLED_RotatePointY>
 8000e90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e94:	463a      	mov	r2, r7
 8000e96:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result = OLED_RotatePointZ(result, transform->angle_z);
 8000e9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	4638      	mov	r0, r7
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eaa:	f7ff ff71 	bl	8000d90 <OLED_RotatePointZ>
 8000eae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb2:	463a      	mov	r2, r7
 8000eb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    
    return result;
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	461c      	mov	r4, r3
 8000ebe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ec6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000eca:	69f8      	ldr	r0, [r7, #28]
 8000ecc:	3734      	adds	r7, #52	@ 0x34
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd90      	pop	{r4, r7, pc}

08000ed2 <OLED_Project3DTo2D>:

// 将3D点投影到2D屏幕坐标
void OLED_Project3DTo2D(OLED_Point3D *point3d, OLED_Cube3D_Transform *transform, int16_t *x2d, int16_t *y2d)
{
 8000ed2:	b590      	push	{r4, r7, lr}
 8000ed4:	b087      	sub	sp, #28
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	60f8      	str	r0, [r7, #12]
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	603b      	str	r3, [r7, #0]
    if (!point3d || !transform || !x2d || !y2d) return;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d04e      	beq.n	8000f84 <OLED_Project3DTo2D+0xb2>
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d04b      	beq.n	8000f84 <OLED_Project3DTo2D+0xb2>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d048      	beq.n	8000f84 <OLED_Project3DTo2D+0xb2>
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d045      	beq.n	8000f84 <OLED_Project3DTo2D+0xb2>
    
    // 透视投影
    float perspective_scale = transform->distance / (transform->distance + point3d->z);
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	695c      	ldr	r4, [r3, #20]
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	695a      	ldr	r2, [r3, #20]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	4619      	mov	r1, r3
 8000f06:	4610      	mov	r0, r2
 8000f08:	f7ff f938 	bl	800017c <__addsf3>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4620      	mov	r0, r4
 8000f12:	f7ff faef 	bl	80004f4 <__aeabi_fdiv>
 8000f16:	4603      	mov	r3, r0
 8000f18:	617b      	str	r3, [r7, #20]
    
    *x2d = (int16_t)(transform->center_x + point3d->x * perspective_scale);
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff f9df 	bl	80002e4 <__aeabi_i2f>
 8000f26:	4604      	mov	r4, r0
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6979      	ldr	r1, [r7, #20]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fa2c 	bl	800038c <__aeabi_fmul>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4619      	mov	r1, r3
 8000f38:	4620      	mov	r0, r4
 8000f3a:	f7ff f91f 	bl	800017c <__addsf3>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fbff 	bl	8000744 <__aeabi_f2iz>
 8000f46:	4603      	mov	r3, r0
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	801a      	strh	r2, [r3, #0]
    *y2d = (int16_t)(transform->center_y + point3d->y * perspective_scale);
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff f9c5 	bl	80002e4 <__aeabi_i2f>
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	6979      	ldr	r1, [r7, #20]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fa12 	bl	800038c <__aeabi_fmul>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f7ff f905 	bl	800017c <__addsf3>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fbe5 	bl	8000744 <__aeabi_f2iz>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	801a      	strh	r2, [r3, #0]
 8000f82:	e000      	b.n	8000f86 <OLED_Project3DTo2D+0xb4>
    if (!point3d || !transform || !x2d || !y2d) return;
 8000f84:	bf00      	nop
}
 8000f86:	371c      	adds	r7, #28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd90      	pop	{r4, r7, pc}

08000f8c <OLED_DrawCube3D>:

// 绘制3D立方体 //! UPDATEDISPLAY REQUIRED
void OLED_DrawCube3D(OLED_Cube3D *cube)
{
 8000f8c:	b5b0      	push	{r4, r5, r7, lr}
 8000f8e:	b0ac      	sub	sp, #176	@ 0xb0
 8000f90:	af02      	add	r7, sp, #8
 8000f92:	6178      	str	r0, [r7, #20]
    if (!cube) return;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 8086 	beq.w	80010a8 <OLED_DrawCube3D+0x11c>
    
    OLED_Point3D transformed_vertices[8];
    int16_t screen_points[8][2];
    
    // 变换所有顶点
    for (int i = 0; i < 8; i++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000fa2:	e041      	b.n	8001028 <OLED_DrawCube3D+0x9c>
    {
        transformed_vertices[i] = OLED_TransformPoint3D(cube->vertices[i], &cube->transform);
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f103 01c4 	add.w	r1, r3, #196	@ 0xc4
 8000faa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8000fae:	4613      	mov	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	4413      	add	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	33a8      	adds	r3, #168	@ 0xa8
 8000fb8:	443b      	add	r3, r7
 8000fba:	f1a3 0570 	sub.w	r5, r3, #112	@ 0x70
 8000fbe:	463c      	mov	r4, r7
 8000fc0:	6978      	ldr	r0, [r7, #20]
 8000fc2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4403      	add	r3, r0
 8000fd0:	9100      	str	r1, [sp, #0]
 8000fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	f7ff ff1e 	bl	8000e16 <OLED_TransformPoint3D>
 8000fda:	462c      	mov	r4, r5
 8000fdc:	463b      	mov	r3, r7
 8000fde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000fe2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        OLED_Project3DTo2D(&transformed_vertices[i], &cube->transform, 
 8000fe6:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000fea:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	18c8      	adds	r0, r1, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f103 01c4 	add.w	r1, r3, #196	@ 0xc4
 8000ffe:	f107 0218 	add.w	r2, r7, #24
 8001002:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	18d4      	adds	r4, r2, r3
 800100a:	f107 0218 	add.w	r2, r7, #24
 800100e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	3302      	adds	r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	4622      	mov	r2, r4
 800101a:	f7ff ff5a 	bl	8000ed2 <OLED_Project3DTo2D>
    for (int i = 0; i < 8; i++)
 800101e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001022:	3301      	adds	r3, #1
 8001024:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001028:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800102c:	2b07      	cmp	r3, #7
 800102e:	ddb9      	ble.n	8000fa4 <OLED_DrawCube3D+0x18>
                          &screen_points[i][0], &screen_points[i][1]);
    }
    
    // 绘制所有边
    for (int i = 0; i < 12; i++)
 8001030:	2300      	movs	r3, #0
 8001032:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001036:	e032      	b.n	800109e <OLED_DrawCube3D+0x112>
    {
        int v1 = cube->edges[i][0];
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800103e:	320c      	adds	r2, #12
 8001040:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001044:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        int v2 = cube->edges[i][1];
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	4413      	add	r3, r2
 8001052:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001054:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        
        OLED_DrawLine(screen_points[v1][0], screen_points[v1][1],
 8001058:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	33a8      	adds	r3, #168	@ 0xa8
 8001060:	443b      	add	r3, r7
 8001062:	f933 0c90 	ldrsh.w	r0, [r3, #-144]
 8001066:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	33a8      	adds	r3, #168	@ 0xa8
 800106e:	443b      	add	r3, r7
 8001070:	f933 1c8e 	ldrsh.w	r1, [r3, #-142]
 8001074:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	33a8      	adds	r3, #168	@ 0xa8
 800107c:	443b      	add	r3, r7
 800107e:	f933 2c90 	ldrsh.w	r2, [r3, #-144]
 8001082:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	33a8      	adds	r3, #168	@ 0xa8
 800108a:	443b      	add	r3, r7
 800108c:	f933 3c8e 	ldrsh.w	r3, [r3, #-142]
 8001090:	f7ff fbbc 	bl	800080c <OLED_DrawLine>
    for (int i = 0; i < 12; i++)
 8001094:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001098:	3301      	adds	r3, #1
 800109a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800109e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80010a2:	2b0b      	cmp	r3, #11
 80010a4:	ddc8      	ble.n	8001038 <OLED_DrawCube3D+0xac>
 80010a6:	e000      	b.n	80010aa <OLED_DrawCube3D+0x11e>
    if (!cube) return;
 80010a8:	bf00      	nop
                     screen_points[v2][0], screen_points[v2][1]);
    }
 80010aa:	37a8      	adds	r7, #168	@ 0xa8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bdb0      	pop	{r4, r5, r7, pc}

080010b0 <W25Q64_Spi_Transmit>:
    HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, W25Q64_TIMEOUT);
    return rx_data;
}

static void W25Q64_Spi_Transmit(uint8_t *pData, uint16_t Size)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi2, pData, Size, W25Q64_TIMEOUT);
 80010bc:	887a      	ldrh	r2, [r7, #2]
 80010be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	4803      	ldr	r0, [pc, #12]	@ (80010d4 <W25Q64_Spi_Transmit+0x24>)
 80010c6:	f009 fa57 	bl	800a578 <HAL_SPI_Transmit>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20003fb4 	.word	0x20003fb4

080010d8 <W25Q64_Spi_Receive>:

static void W25Q64_Spi_Receive(uint8_t *pData, uint16_t Size)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi2, pData, Size, W25Q64_TIMEOUT);
 80010e4:	887a      	ldrh	r2, [r7, #2]
 80010e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	4803      	ldr	r0, [pc, #12]	@ (80010fc <W25Q64_Spi_Receive+0x24>)
 80010ee:	f009 fb87 	bl	800a800 <HAL_SPI_Receive>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20003fb4 	.word	0x20003fb4

08001100 <W25Q64_Read>:
// 读取数据
// ReadAddr: 读取地址
// pBuffer: 数据接收缓冲区
// NumByteToRead: 读取字节数
void W25Q64_Read(uint32_t ReadAddr, uint8_t *pBuffer, uint32_t NumByteToRead)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
    W25Q64_CS_LOW();
 800110c:	2200      	movs	r2, #0
 800110e:	2180      	movs	r1, #128	@ 0x80
 8001110:	4812      	ldr	r0, [pc, #72]	@ (800115c <W25Q64_Read+0x5c>)
 8001112:	f008 f8fc 	bl	800930e <HAL_GPIO_WritePin>
    uint8_t cmd[4];
    cmd[0] = W25X_ReadData;
 8001116:	2303      	movs	r3, #3
 8001118:	753b      	strb	r3, [r7, #20]
    cmd[1] = (ReadAddr & 0xFF0000) >> 16;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	0c1b      	lsrs	r3, r3, #16
 800111e:	b2db      	uxtb	r3, r3
 8001120:	757b      	strb	r3, [r7, #21]
    cmd[2] = (ReadAddr & 0x00FF00) >> 8;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	b2db      	uxtb	r3, r3
 8001128:	75bb      	strb	r3, [r7, #22]
    cmd[3] = (ReadAddr & 0x0000FF);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	75fb      	strb	r3, [r7, #23]
    W25Q64_Spi_Transmit(cmd, 4);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2104      	movs	r1, #4
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ffba 	bl	80010b0 <W25Q64_Spi_Transmit>
    W25Q64_Spi_Receive(pBuffer, NumByteToRead);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	b29b      	uxth	r3, r3
 8001140:	4619      	mov	r1, r3
 8001142:	68b8      	ldr	r0, [r7, #8]
 8001144:	f7ff ffc8 	bl	80010d8 <W25Q64_Spi_Receive>
    W25Q64_CS_HIGH();
 8001148:	2201      	movs	r2, #1
 800114a:	2180      	movs	r1, #128	@ 0x80
 800114c:	4803      	ldr	r0, [pc, #12]	@ (800115c <W25Q64_Read+0x5c>)
 800114e:	f008 f8de 	bl	800930e <HAL_GPIO_WritePin>
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40010800 	.word	0x40010800

08001160 <DrawBlock>:
#define INPUT_DEBOUNCE_MS 50             // Milliseconds for switch debounce
#define INPUT_PROCESSING_COOLDOWN_MS 200 // Minimum time between processing inputs

// Helper function to draw a block on the OLED (used by Snake)
static void DrawBlock(int16_t x, int16_t y, uint8_t color)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af02      	add	r7, sp, #8
 8001166:	4603      	mov	r3, r0
 8001168:	80fb      	strh	r3, [r7, #6]
 800116a:	460b      	mov	r3, r1
 800116c:	80bb      	strh	r3, [r7, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	70fb      	strb	r3, [r7, #3]
    OLED_DrawFilledRectangle(x * SNAKE_BLOCK_SIZE, y * SNAKE_BLOCK_SIZE, SNAKE_BLOCK_SIZE, SNAKE_BLOCK_SIZE, color);
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	b29b      	uxth	r3, r3
 8001178:	b218      	sxth	r0, r3
 800117a:	88bb      	ldrh	r3, [r7, #4]
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	b29b      	uxth	r3, r3
 8001180:	b219      	sxth	r1, r3
 8001182:	78fb      	ldrb	r3, [r7, #3]
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2304      	movs	r3, #4
 8001188:	2204      	movs	r2, #4
 800118a:	f006 fef2 	bl	8007f72 <OLED_DrawFilledRectangle>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <Snake_GenerateFood>:

// Function to generate food at a random position (used by Snake)
static void Snake_GenerateFood()
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
    bool food_on_snake;
    do
    {
        food_on_snake = false;
 800119e:	2300      	movs	r3, #0
 80011a0:	71fb      	strb	r3, [r7, #7]
        food.pos.x = rand() % GAME_AREA_WIDTH;
 80011a2:	f00a f91b 	bl	800b3dc <rand>
 80011a6:	4603      	mov	r3, r0
 80011a8:	425a      	negs	r2, r3
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	f002 021f 	and.w	r2, r2, #31
 80011b2:	bf58      	it	pl
 80011b4:	4253      	negpl	r3, r2
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	4b20      	ldr	r3, [pc, #128]	@ (800123c <Snake_GenerateFood+0xa4>)
 80011ba:	801a      	strh	r2, [r3, #0]
        food.pos.y = rand() % GAME_AREA_HEIGHT;
 80011bc:	f00a f90e 	bl	800b3dc <rand>
 80011c0:	4602      	mov	r2, r0
 80011c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <Snake_GenerateFood+0xa8>)
 80011c4:	fb83 1302 	smull	r1, r3, r3, r2
 80011c8:	4413      	add	r3, r2
 80011ca:	10d9      	asrs	r1, r3, #3
 80011cc:	17d3      	asrs	r3, r2, #31
 80011ce:	1ac9      	subs	r1, r1, r3
 80011d0:	460b      	mov	r3, r1
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	1a5b      	subs	r3, r3, r1
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	1ad1      	subs	r1, r2, r3
 80011da:	b20a      	sxth	r2, r1
 80011dc:	4b17      	ldr	r3, [pc, #92]	@ (800123c <Snake_GenerateFood+0xa4>)
 80011de:	805a      	strh	r2, [r3, #2]
        for (uint16_t i = 0; i < snake.length; i++)
 80011e0:	2300      	movs	r3, #0
 80011e2:	80bb      	strh	r3, [r7, #4]
 80011e4:	e019      	b.n	800121a <Snake_GenerateFood+0x82>
        {
            if (snake.body[i].x == food.pos.x && snake.body[i].y == food.pos.y)
 80011e6:	88bb      	ldrh	r3, [r7, #4]
 80011e8:	4a16      	ldr	r2, [pc, #88]	@ (8001244 <Snake_GenerateFood+0xac>)
 80011ea:	f932 2023 	ldrsh.w	r2, [r2, r3, lsl #2]
 80011ee:	4b13      	ldr	r3, [pc, #76]	@ (800123c <Snake_GenerateFood+0xa4>)
 80011f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d10d      	bne.n	8001214 <Snake_GenerateFood+0x7c>
 80011f8:	88bb      	ldrh	r3, [r7, #4]
 80011fa:	4a12      	ldr	r2, [pc, #72]	@ (8001244 <Snake_GenerateFood+0xac>)
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001204:	4b0d      	ldr	r3, [pc, #52]	@ (800123c <Snake_GenerateFood+0xa4>)
 8001206:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800120a:	429a      	cmp	r2, r3
 800120c:	d102      	bne.n	8001214 <Snake_GenerateFood+0x7c>
            {
                food_on_snake = true;
 800120e:	2301      	movs	r3, #1
 8001210:	71fb      	strb	r3, [r7, #7]
                break;
 8001212:	e008      	b.n	8001226 <Snake_GenerateFood+0x8e>
        for (uint16_t i = 0; i < snake.length; i++)
 8001214:	88bb      	ldrh	r3, [r7, #4]
 8001216:	3301      	adds	r3, #1
 8001218:	80bb      	strh	r3, [r7, #4]
 800121a:	4b0a      	ldr	r3, [pc, #40]	@ (8001244 <Snake_GenerateFood+0xac>)
 800121c:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8001220:	88ba      	ldrh	r2, [r7, #4]
 8001222:	429a      	cmp	r2, r3
 8001224:	d3df      	bcc.n	80011e6 <Snake_GenerateFood+0x4e>
            }
        }
    } while (food_on_snake);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1b8      	bne.n	800119e <Snake_GenerateFood+0x6>
    food.active = true;
 800122c:	4b03      	ldr	r3, [pc, #12]	@ (800123c <Snake_GenerateFood+0xa4>)
 800122e:	2201      	movs	r2, #1
 8001230:	711a      	strb	r2, [r3, #4]
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000234 	.word	0x20000234
 8001240:	92492493 	.word	0x92492493
 8001244:	200000a0 	.word	0x200000a0

08001248 <Snake_InitGame>:

void Snake_InitGame(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
    // srand(HAL_GetTick()); // Seed RNG if not done elsewhere
    gameOver = false;
 800124e:	4b28      	ldr	r3, [pc, #160]	@ (80012f0 <Snake_InitGame+0xa8>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
    snake.length = 3;
 8001254:	4b27      	ldr	r3, [pc, #156]	@ (80012f4 <Snake_InitGame+0xac>)
 8001256:	2203      	movs	r2, #3
 8001258:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
    snake.dir = DIR_RIGHT;
 800125c:	4b25      	ldr	r3, [pc, #148]	@ (80012f4 <Snake_InitGame+0xac>)
 800125e:	2203      	movs	r2, #3
 8001260:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192
    snake.body[0].x = GAME_AREA_WIDTH / 2;
 8001264:	4b23      	ldr	r3, [pc, #140]	@ (80012f4 <Snake_InitGame+0xac>)
 8001266:	2210      	movs	r2, #16
 8001268:	801a      	strh	r2, [r3, #0]
    snake.body[0].y = GAME_AREA_HEIGHT / 2;
 800126a:	4b22      	ldr	r3, [pc, #136]	@ (80012f4 <Snake_InitGame+0xac>)
 800126c:	2207      	movs	r2, #7
 800126e:	805a      	strh	r2, [r3, #2]
    snake.body[1].x = snake.body[0].x - 1;
 8001270:	4b20      	ldr	r3, [pc, #128]	@ (80012f4 <Snake_InitGame+0xac>)
 8001272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001276:	b29b      	uxth	r3, r3
 8001278:	3b01      	subs	r3, #1
 800127a:	b29b      	uxth	r3, r3
 800127c:	b21a      	sxth	r2, r3
 800127e:	4b1d      	ldr	r3, [pc, #116]	@ (80012f4 <Snake_InitGame+0xac>)
 8001280:	809a      	strh	r2, [r3, #4]
    snake.body[1].y = snake.body[0].y;
 8001282:	4b1c      	ldr	r3, [pc, #112]	@ (80012f4 <Snake_InitGame+0xac>)
 8001284:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001288:	4b1a      	ldr	r3, [pc, #104]	@ (80012f4 <Snake_InitGame+0xac>)
 800128a:	80da      	strh	r2, [r3, #6]
    snake.body[2].x = snake.body[0].x - 2;
 800128c:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <Snake_InitGame+0xac>)
 800128e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001292:	b29b      	uxth	r3, r3
 8001294:	3b02      	subs	r3, #2
 8001296:	b29b      	uxth	r3, r3
 8001298:	b21a      	sxth	r2, r3
 800129a:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <Snake_InitGame+0xac>)
 800129c:	811a      	strh	r2, [r3, #8]
    snake.body[2].y = snake.body[0].y;
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <Snake_InitGame+0xac>)
 80012a0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80012a4:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <Snake_InitGame+0xac>)
 80012a6:	815a      	strh	r2, [r3, #10]
    for (uint16_t i = snake.length; i < SNAKE_MAX_LENGTH; ++i)
 80012a8:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <Snake_InitGame+0xac>)
 80012aa:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80012ae:	80fb      	strh	r3, [r7, #6]
 80012b0:	e00f      	b.n	80012d2 <Snake_InitGame+0x8a>
    {
        snake.body[i].x = -1;
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	4a0f      	ldr	r2, [pc, #60]	@ (80012f4 <Snake_InitGame+0xac>)
 80012b6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80012ba:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
        snake.body[i].y = -1;
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	4a0c      	ldr	r2, [pc, #48]	@ (80012f4 <Snake_InitGame+0xac>)
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012ca:	805a      	strh	r2, [r3, #2]
    for (uint16_t i = snake.length; i < SNAKE_MAX_LENGTH; ++i)
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	3301      	adds	r3, #1
 80012d0:	80fb      	strh	r3, [r7, #6]
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	2b63      	cmp	r3, #99	@ 0x63
 80012d6:	d9ec      	bls.n	80012b2 <Snake_InitGame+0x6a>
    }
    Snake_GenerateFood();
 80012d8:	f7ff ff5e 	bl	8001198 <Snake_GenerateFood>
    gameTickLast = HAL_GetTick();
 80012dc:	f007 fbe0 	bl	8008aa0 <HAL_GetTick>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4a05      	ldr	r2, [pc, #20]	@ (80012f8 <Snake_InitGame+0xb0>)
 80012e4:	6013      	str	r3, [r2, #0]
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000023a 	.word	0x2000023a
 80012f4:	200000a0 	.word	0x200000a0
 80012f8:	2000023c 	.word	0x2000023c

080012fc <Snake_Draw>:

static void Snake_Draw(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
    for (uint16_t i = 0; i < snake.length; i++)
 8001302:	2300      	movs	r3, #0
 8001304:	80fb      	strh	r3, [r7, #6]
 8001306:	e010      	b.n	800132a <Snake_Draw+0x2e>
    {
        DrawBlock(snake.body[i].x, snake.body[i].y, 1);
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	4a1d      	ldr	r2, [pc, #116]	@ (8001380 <Snake_Draw+0x84>)
 800130c:	f932 0023 	ldrsh.w	r0, [r2, r3, lsl #2]
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	4a1b      	ldr	r2, [pc, #108]	@ (8001380 <Snake_Draw+0x84>)
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800131c:	2201      	movs	r2, #1
 800131e:	4619      	mov	r1, r3
 8001320:	f7ff ff1e 	bl	8001160 <DrawBlock>
    for (uint16_t i = 0; i < snake.length; i++)
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	3301      	adds	r3, #1
 8001328:	80fb      	strh	r3, [r7, #6]
 800132a:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <Snake_Draw+0x84>)
 800132c:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8001330:	88fa      	ldrh	r2, [r7, #6]
 8001332:	429a      	cmp	r2, r3
 8001334:	d3e8      	bcc.n	8001308 <Snake_Draw+0xc>
    }
    if (food.active)
 8001336:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <Snake_Draw+0x88>)
 8001338:	791b      	ldrb	r3, [r3, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d009      	beq.n	8001352 <Snake_Draw+0x56>
    {
        DrawBlock(food.pos.x, food.pos.y, 1);
 800133e:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <Snake_Draw+0x88>)
 8001340:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001344:	4a0f      	ldr	r2, [pc, #60]	@ (8001384 <Snake_Draw+0x88>)
 8001346:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800134a:	2201      	movs	r2, #1
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff07 	bl	8001160 <DrawBlock>
    }
    if (gameOver)
 8001352:	4b0d      	ldr	r3, [pc, #52]	@ (8001388 <Snake_Draw+0x8c>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00e      	beq.n	8001378 <Snake_Draw+0x7c>
    {
        OLED_DisplayString(OLED_WIDTH / 2 - 3 * 6, OLED_HEIGHT / 2 - 4, "GAME");
 800135a:	4a0c      	ldr	r2, [pc, #48]	@ (800138c <Snake_Draw+0x90>)
 800135c:	211c      	movs	r1, #28
 800135e:	202e      	movs	r0, #46	@ 0x2e
 8001360:	f001 fd0e 	bl	8002d80 <OLED_DisplayString>
        OLED_DisplayString(OLED_WIDTH / 2 - 3 * 6, OLED_HEIGHT / 2 + 4, "OVER");
 8001364:	4a0a      	ldr	r2, [pc, #40]	@ (8001390 <Snake_Draw+0x94>)
 8001366:	2124      	movs	r1, #36	@ 0x24
 8001368:	202e      	movs	r0, #46	@ 0x2e
 800136a:	f001 fd09 	bl	8002d80 <OLED_DisplayString>
        OLED_DisplayString(OLED_WIDTH / 2 - 5 * 6, OLED_HEIGHT / 2 + 12, "RST BTN=RS");
 800136e:	4a09      	ldr	r2, [pc, #36]	@ (8001394 <Snake_Draw+0x98>)
 8001370:	212c      	movs	r1, #44	@ 0x2c
 8001372:	2022      	movs	r0, #34	@ 0x22
 8001374:	f001 fd04 	bl	8002d80 <OLED_DisplayString>
    }
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200000a0 	.word	0x200000a0
 8001384:	20000234 	.word	0x20000234
 8001388:	2000023a 	.word	0x2000023a
 800138c:	0800dc4c 	.word	0x0800dc4c
 8001390:	0800dc54 	.word	0x0800dc54
 8001394:	0800dc5c 	.word	0x0800dc5c

08001398 <Snake_Update>:

static void Snake_Update(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
    if (gameOver)
 800139e:	4b5a      	ldr	r3, [pc, #360]	@ (8001508 <Snake_Update+0x170>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f040 80ab 	bne.w	80014fe <Snake_Update+0x166>
        return;

    Point new_head = snake.body[0];
 80013a8:	4b58      	ldr	r3, [pc, #352]	@ (800150c <Snake_Update+0x174>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	603b      	str	r3, [r7, #0]
    switch (snake.dir)
 80013ae:	4b57      	ldr	r3, [pc, #348]	@ (800150c <Snake_Update+0x174>)
 80013b0:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	d82b      	bhi.n	8001410 <Snake_Update+0x78>
 80013b8:	a201      	add	r2, pc, #4	@ (adr r2, 80013c0 <Snake_Update+0x28>)
 80013ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013be:	bf00      	nop
 80013c0:	080013d1 	.word	0x080013d1
 80013c4:	080013e1 	.word	0x080013e1
 80013c8:	080013f1 	.word	0x080013f1
 80013cc:	08001401 	.word	0x08001401
    {
    case DIR_UP:
        new_head.y--;
 80013d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	3b01      	subs	r3, #1
 80013d8:	b29b      	uxth	r3, r3
 80013da:	b21b      	sxth	r3, r3
 80013dc:	807b      	strh	r3, [r7, #2]
        break;
 80013de:	e017      	b.n	8001410 <Snake_Update+0x78>
    case DIR_DOWN:
        new_head.y++;
 80013e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	3301      	adds	r3, #1
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	807b      	strh	r3, [r7, #2]
        break;
 80013ee:	e00f      	b.n	8001410 <Snake_Update+0x78>
    case DIR_LEFT:
        new_head.x--;
 80013f0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	3b01      	subs	r3, #1
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	803b      	strh	r3, [r7, #0]
        break;
 80013fe:	e007      	b.n	8001410 <Snake_Update+0x78>
    case DIR_RIGHT:
        new_head.x++;
 8001400:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001404:	b29b      	uxth	r3, r3
 8001406:	3301      	adds	r3, #1
 8001408:	b29b      	uxth	r3, r3
 800140a:	b21b      	sxth	r3, r3
 800140c:	803b      	strh	r3, [r7, #0]
        break;
 800140e:	bf00      	nop
    }

    if (new_head.x < 0)
 8001410:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001414:	2b00      	cmp	r3, #0
 8001416:	da02      	bge.n	800141e <Snake_Update+0x86>
        new_head.x = GAME_AREA_WIDTH - 1;
 8001418:	231f      	movs	r3, #31
 800141a:	803b      	strh	r3, [r7, #0]
 800141c:	e005      	b.n	800142a <Snake_Update+0x92>
    else if (new_head.x >= GAME_AREA_WIDTH)
 800141e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001422:	2b1f      	cmp	r3, #31
 8001424:	dd01      	ble.n	800142a <Snake_Update+0x92>
        new_head.x = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	803b      	strh	r3, [r7, #0]
    if (new_head.y < 0)
 800142a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800142e:	2b00      	cmp	r3, #0
 8001430:	da02      	bge.n	8001438 <Snake_Update+0xa0>
        new_head.y = GAME_AREA_HEIGHT - 1;
 8001432:	230d      	movs	r3, #13
 8001434:	807b      	strh	r3, [r7, #2]
 8001436:	e005      	b.n	8001444 <Snake_Update+0xac>
    else if (new_head.y >= GAME_AREA_HEIGHT)
 8001438:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800143c:	2b0d      	cmp	r3, #13
 800143e:	dd01      	ble.n	8001444 <Snake_Update+0xac>
        new_head.y = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	807b      	strh	r3, [r7, #2]

    for (uint16_t i = 0; i < snake.length - 1; i++) // Check up to length-1
 8001444:	2300      	movs	r3, #0
 8001446:	80fb      	strh	r3, [r7, #6]
 8001448:	e018      	b.n	800147c <Snake_Update+0xe4>
    {
        if (new_head.x == snake.body[i].x && new_head.y == snake.body[i].y)
 800144a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	492e      	ldr	r1, [pc, #184]	@ (800150c <Snake_Update+0x174>)
 8001452:	f931 3023 	ldrsh.w	r3, [r1, r3, lsl #2]
 8001456:	429a      	cmp	r2, r3
 8001458:	d10d      	bne.n	8001476 <Snake_Update+0xde>
 800145a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	492a      	ldr	r1, [pc, #168]	@ (800150c <Snake_Update+0x174>)
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800146a:	429a      	cmp	r2, r3
 800146c:	d103      	bne.n	8001476 <Snake_Update+0xde>
        {
            gameOver = true;
 800146e:	4b26      	ldr	r3, [pc, #152]	@ (8001508 <Snake_Update+0x170>)
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
            return;
 8001474:	e044      	b.n	8001500 <Snake_Update+0x168>
    for (uint16_t i = 0; i < snake.length - 1; i++) // Check up to length-1
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	3301      	adds	r3, #1
 800147a:	80fb      	strh	r3, [r7, #6]
 800147c:	88fa      	ldrh	r2, [r7, #6]
 800147e:	4b23      	ldr	r3, [pc, #140]	@ (800150c <Snake_Update+0x174>)
 8001480:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8001484:	3b01      	subs	r3, #1
 8001486:	429a      	cmp	r2, r3
 8001488:	dbdf      	blt.n	800144a <Snake_Update+0xb2>
        }
    }

    if (food.active && new_head.x == food.pos.x && new_head.y == food.pos.y)
 800148a:	4b21      	ldr	r3, [pc, #132]	@ (8001510 <Snake_Update+0x178>)
 800148c:	791b      	ldrb	r3, [r3, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d01c      	beq.n	80014cc <Snake_Update+0x134>
 8001492:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001496:	4b1e      	ldr	r3, [pc, #120]	@ (8001510 <Snake_Update+0x178>)
 8001498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149c:	429a      	cmp	r2, r3
 800149e:	d115      	bne.n	80014cc <Snake_Update+0x134>
 80014a0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80014a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <Snake_Update+0x178>)
 80014a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d10e      	bne.n	80014cc <Snake_Update+0x134>
    {
        if (snake.length < SNAKE_MAX_LENGTH)
 80014ae:	4b17      	ldr	r3, [pc, #92]	@ (800150c <Snake_Update+0x174>)
 80014b0:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80014b4:	2b63      	cmp	r3, #99	@ 0x63
 80014b6:	d807      	bhi.n	80014c8 <Snake_Update+0x130>
            snake.length++;
 80014b8:	4b14      	ldr	r3, [pc, #80]	@ (800150c <Snake_Update+0x174>)
 80014ba:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80014be:	3301      	adds	r3, #1
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	4b12      	ldr	r3, [pc, #72]	@ (800150c <Snake_Update+0x174>)
 80014c4:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
        Snake_GenerateFood();
 80014c8:	f7ff fe66 	bl	8001198 <Snake_GenerateFood>
    }
    // No else needed for tail movement; body shift handles it.

    for (uint16_t i = snake.length - 1; i > 0; i--)
 80014cc:	4b0f      	ldr	r3, [pc, #60]	@ (800150c <Snake_Update+0x174>)
 80014ce:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80014d2:	3b01      	subs	r3, #1
 80014d4:	80bb      	strh	r3, [r7, #4]
 80014d6:	e00b      	b.n	80014f0 <Snake_Update+0x158>
    {
        snake.body[i] = snake.body[i - 1];
 80014d8:	88bb      	ldrh	r3, [r7, #4]
 80014da:	1e5a      	subs	r2, r3, #1
 80014dc:	88bb      	ldrh	r3, [r7, #4]
 80014de:	490b      	ldr	r1, [pc, #44]	@ (800150c <Snake_Update+0x174>)
 80014e0:	480a      	ldr	r0, [pc, #40]	@ (800150c <Snake_Update+0x174>)
 80014e2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint16_t i = snake.length - 1; i > 0; i--)
 80014ea:	88bb      	ldrh	r3, [r7, #4]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	80bb      	strh	r3, [r7, #4]
 80014f0:	88bb      	ldrh	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <Snake_Update+0x140>
    }
    snake.body[0] = new_head;
 80014f6:	4a05      	ldr	r2, [pc, #20]	@ (800150c <Snake_Update+0x174>)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	e000      	b.n	8001500 <Snake_Update+0x168>
        return;
 80014fe:	bf00      	nop
}
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	2000023a 	.word	0x2000023a
 800150c:	200000a0 	.word	0x200000a0
 8001510:	20000234 	.word	0x20000234

08001514 <Snake_HandleInput>:

void Snake_HandleInput(Direction input_dir)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
    if ((snake.dir == DIR_UP && input_dir != DIR_DOWN) ||
 800151e:	4b14      	ldr	r3, [pc, #80]	@ (8001570 <Snake_HandleInput+0x5c>)
 8001520:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <Snake_HandleInput+0x1a>
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d117      	bne.n	800155e <Snake_HandleInput+0x4a>
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <Snake_HandleInput+0x5c>)
 8001530:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
    if ((snake.dir == DIR_UP && input_dir != DIR_DOWN) ||
 8001534:	2b01      	cmp	r3, #1
 8001536:	d102      	bne.n	800153e <Snake_HandleInput+0x2a>
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10f      	bne.n	800155e <Snake_HandleInput+0x4a>
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 800153e:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <Snake_HandleInput+0x5c>)
 8001540:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8001544:	2b02      	cmp	r3, #2
 8001546:	d102      	bne.n	800154e <Snake_HandleInput+0x3a>
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	2b03      	cmp	r3, #3
 800154c:	d107      	bne.n	800155e <Snake_HandleInput+0x4a>
        (snake.dir == DIR_RIGHT && input_dir != DIR_LEFT))
 800154e:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <Snake_HandleInput+0x5c>)
 8001550:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8001554:	2b03      	cmp	r3, #3
 8001556:	d106      	bne.n	8001566 <Snake_HandleInput+0x52>
        (snake.dir == DIR_RIGHT && input_dir != DIR_LEFT))
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d003      	beq.n	8001566 <Snake_HandleInput+0x52>
    {
        snake.dir = input_dir;
 800155e:	4a04      	ldr	r2, [pc, #16]	@ (8001570 <Snake_HandleInput+0x5c>)
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	f882 3192 	strb.w	r3, [r2, #402]	@ 0x192
    }
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	200000a0 	.word	0x200000a0

08001574 <Snake_GameLoop>:

void Snake_GameLoop(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
    static uint16_t LastCount;
    static bool preMutiTurn = false;

    if (FirstRun)
 800157a:	4b60      	ldr	r3, [pc, #384]	@ (80016fc <Snake_GameLoop+0x188>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d006      	beq.n	8001590 <Snake_GameLoop+0x1c>
    {
        FirstRun = false;
 8001582:	4b5e      	ldr	r3, [pc, #376]	@ (80016fc <Snake_GameLoop+0x188>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
        LastCount = count;
 8001588:	4b5d      	ldr	r3, [pc, #372]	@ (8001700 <Snake_GameLoop+0x18c>)
 800158a:	881a      	ldrh	r2, [r3, #0]
 800158c:	4b5d      	ldr	r3, [pc, #372]	@ (8001704 <Snake_GameLoop+0x190>)
 800158e:	801a      	strh	r2, [r3, #0]
    }

    if (!preMutiTurn)
 8001590:	4b5d      	ldr	r3, [pc, #372]	@ (8001708 <Snake_GameLoop+0x194>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	f083 0301 	eor.w	r3, r3, #1
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d065      	beq.n	800166a <Snake_GameLoop+0xf6>
    {
        if (count - LastCount > 1)
 800159e:	4b58      	ldr	r3, [pc, #352]	@ (8001700 <Snake_GameLoop+0x18c>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	4b57      	ldr	r3, [pc, #348]	@ (8001704 <Snake_GameLoop+0x190>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	dd2a      	ble.n	8001604 <Snake_GameLoop+0x90>
        {
            if (snake.dir == DIR_UP)
 80015ae:	4b57      	ldr	r3, [pc, #348]	@ (800170c <Snake_GameLoop+0x198>)
 80015b0:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d103      	bne.n	80015c0 <Snake_GameLoop+0x4c>
                Snake_HandleInput(DIR_RIGHT);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f7ff ffab 	bl	8001514 <Snake_HandleInput>
 80015be:	e019      	b.n	80015f4 <Snake_GameLoop+0x80>
            else if (snake.dir == DIR_DOWN)
 80015c0:	4b52      	ldr	r3, [pc, #328]	@ (800170c <Snake_GameLoop+0x198>)
 80015c2:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d103      	bne.n	80015d2 <Snake_GameLoop+0x5e>
                Snake_HandleInput(DIR_LEFT);
 80015ca:	2002      	movs	r0, #2
 80015cc:	f7ff ffa2 	bl	8001514 <Snake_HandleInput>
 80015d0:	e010      	b.n	80015f4 <Snake_GameLoop+0x80>
            else if (snake.dir == DIR_LEFT)
 80015d2:	4b4e      	ldr	r3, [pc, #312]	@ (800170c <Snake_GameLoop+0x198>)
 80015d4:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d103      	bne.n	80015e4 <Snake_GameLoop+0x70>
                Snake_HandleInput(DIR_UP);
 80015dc:	2000      	movs	r0, #0
 80015de:	f7ff ff99 	bl	8001514 <Snake_HandleInput>
 80015e2:	e007      	b.n	80015f4 <Snake_GameLoop+0x80>
            else if (snake.dir == DIR_RIGHT)
 80015e4:	4b49      	ldr	r3, [pc, #292]	@ (800170c <Snake_GameLoop+0x198>)
 80015e6:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d102      	bne.n	80015f4 <Snake_GameLoop+0x80>
                Snake_HandleInput(DIR_DOWN);
 80015ee:	2001      	movs	r0, #1
 80015f0:	f7ff ff90 	bl	8001514 <Snake_HandleInput>

            preMutiTurn = true;
 80015f4:	4b44      	ldr	r3, [pc, #272]	@ (8001708 <Snake_GameLoop+0x194>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]
            LastCount = count;
 80015fa:	4b41      	ldr	r3, [pc, #260]	@ (8001700 <Snake_GameLoop+0x18c>)
 80015fc:	881a      	ldrh	r2, [r3, #0]
 80015fe:	4b41      	ldr	r3, [pc, #260]	@ (8001704 <Snake_GameLoop+0x190>)
 8001600:	801a      	strh	r2, [r3, #0]
 8001602:	e032      	b.n	800166a <Snake_GameLoop+0xf6>
        }
        else if (count - LastCount < -1)
 8001604:	4b3e      	ldr	r3, [pc, #248]	@ (8001700 <Snake_GameLoop+0x18c>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b3e      	ldr	r3, [pc, #248]	@ (8001704 <Snake_GameLoop+0x190>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001614:	da29      	bge.n	800166a <Snake_GameLoop+0xf6>
        {
            if (snake.dir == DIR_UP)
 8001616:	4b3d      	ldr	r3, [pc, #244]	@ (800170c <Snake_GameLoop+0x198>)
 8001618:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 800161c:	2b00      	cmp	r3, #0
 800161e:	d103      	bne.n	8001628 <Snake_GameLoop+0xb4>
                Snake_HandleInput(DIR_LEFT);
 8001620:	2002      	movs	r0, #2
 8001622:	f7ff ff77 	bl	8001514 <Snake_HandleInput>
 8001626:	e019      	b.n	800165c <Snake_GameLoop+0xe8>
            else if (snake.dir == DIR_DOWN)
 8001628:	4b38      	ldr	r3, [pc, #224]	@ (800170c <Snake_GameLoop+0x198>)
 800162a:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 800162e:	2b01      	cmp	r3, #1
 8001630:	d103      	bne.n	800163a <Snake_GameLoop+0xc6>
                Snake_HandleInput(DIR_RIGHT);
 8001632:	2003      	movs	r0, #3
 8001634:	f7ff ff6e 	bl	8001514 <Snake_HandleInput>
 8001638:	e010      	b.n	800165c <Snake_GameLoop+0xe8>
            else if (snake.dir == DIR_LEFT)
 800163a:	4b34      	ldr	r3, [pc, #208]	@ (800170c <Snake_GameLoop+0x198>)
 800163c:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8001640:	2b02      	cmp	r3, #2
 8001642:	d103      	bne.n	800164c <Snake_GameLoop+0xd8>
                Snake_HandleInput(DIR_DOWN);
 8001644:	2001      	movs	r0, #1
 8001646:	f7ff ff65 	bl	8001514 <Snake_HandleInput>
 800164a:	e007      	b.n	800165c <Snake_GameLoop+0xe8>
            else if (snake.dir == DIR_RIGHT)
 800164c:	4b2f      	ldr	r3, [pc, #188]	@ (800170c <Snake_GameLoop+0x198>)
 800164e:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8001652:	2b03      	cmp	r3, #3
 8001654:	d102      	bne.n	800165c <Snake_GameLoop+0xe8>
                Snake_HandleInput(DIR_UP);
 8001656:	2000      	movs	r0, #0
 8001658:	f7ff ff5c 	bl	8001514 <Snake_HandleInput>

            preMutiTurn = true;
 800165c:	4b2a      	ldr	r3, [pc, #168]	@ (8001708 <Snake_GameLoop+0x194>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
            LastCount = count;
 8001662:	4b27      	ldr	r3, [pc, #156]	@ (8001700 <Snake_GameLoop+0x18c>)
 8001664:	881a      	ldrh	r2, [r3, #0]
 8001666:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <Snake_GameLoop+0x190>)
 8001668:	801a      	strh	r2, [r3, #0]
        }
    }

    if (HAL_GetTick() - gameTickLast >= GAME_TICK_MS)
 800166a:	f007 fa19 	bl	8008aa0 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	4b27      	ldr	r3, [pc, #156]	@ (8001710 <Snake_GameLoop+0x19c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b63      	cmp	r3, #99	@ 0x63
 8001678:	d909      	bls.n	800168e <Snake_GameLoop+0x11a>
    {
        Snake_Update();
 800167a:	f7ff fe8d 	bl	8001398 <Snake_Update>
        gameTickLast = HAL_GetTick();
 800167e:	f007 fa0f 	bl	8008aa0 <HAL_GetTick>
 8001682:	4603      	mov	r3, r0
 8001684:	4a22      	ldr	r2, [pc, #136]	@ (8001710 <Snake_GameLoop+0x19c>)
 8001686:	6013      	str	r3, [r2, #0]
        preMutiTurn = false;
 8001688:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <Snake_GameLoop+0x194>)
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
    }
    Snake_Draw();
 800168e:	f7ff fe35 	bl	80012fc <Snake_Draw>

    if (gameOver)
 8001692:	4b20      	ldr	r3, [pc, #128]	@ (8001714 <Snake_GameLoop+0x1a0>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d01d      	beq.n	80016d6 <Snake_GameLoop+0x162>
    {
        if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 800169a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800169e:	481e      	ldr	r0, [pc, #120]	@ (8001718 <Snake_GameLoop+0x1a4>)
 80016a0:	f007 fe1e 	bl	80092e0 <HAL_GPIO_ReadPin>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d115      	bne.n	80016d6 <Snake_GameLoop+0x162>
        {
            HAL_Delay(INPUT_DEBOUNCE_MS);
 80016aa:	2032      	movs	r0, #50	@ 0x32
 80016ac:	f007 fa02 	bl	8008ab4 <HAL_Delay>
            if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 80016b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016b4:	4818      	ldr	r0, [pc, #96]	@ (8001718 <Snake_GameLoop+0x1a4>)
 80016b6:	f007 fe13 	bl	80092e0 <HAL_GPIO_ReadPin>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10a      	bne.n	80016d6 <Snake_GameLoop+0x162>
            {
                Snake_InitGame();
 80016c0:	f7ff fdc2 	bl	8001248 <Snake_InitGame>
                while (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 80016c4:	bf00      	nop
 80016c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016ca:	4813      	ldr	r0, [pc, #76]	@ (8001718 <Snake_GameLoop+0x1a4>)
 80016cc:	f007 fe08 	bl	80092e0 <HAL_GPIO_ReadPin>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f7      	beq.n	80016c6 <Snake_GameLoop+0x152>
                    ;
            }
        }
    }
    char score_str[20];
    sprintf(score_str, "Score: %d", snake.length - 3);
 80016d6:	4b0d      	ldr	r3, [pc, #52]	@ (800170c <Snake_GameLoop+0x198>)
 80016d8:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80016dc:	1eda      	subs	r2, r3, #3
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	490e      	ldr	r1, [pc, #56]	@ (800171c <Snake_GameLoop+0x1a8>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f009 ff7a 	bl	800b5dc <siprintf>
    OLED_DisplayString(0, OLED_HEIGHT-8, score_str);
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	461a      	mov	r2, r3
 80016ec:	2138      	movs	r1, #56	@ 0x38
 80016ee:	2000      	movs	r0, #0
 80016f0:	f001 fb46 	bl	8002d80 <OLED_DisplayString>
}
 80016f4:	bf00      	nop
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000000 	.word	0x20000000
 8001700:	20000308 	.word	0x20000308
 8001704:	20000268 	.word	0x20000268
 8001708:	2000026a 	.word	0x2000026a
 800170c:	200000a0 	.word	0x200000a0
 8001710:	2000023c 	.word	0x2000023c
 8001714:	2000023a 	.word	0x2000023a
 8001718:	40010c00 	.word	0x40010c00
 800171c:	0800dc68 	.word	0x0800dc68

08001720 <Game2048_AddRandomTile>:

#pragma region 2048 Game Definitions
// --- 2048 Game Implementation ---

static void Game2048_AddRandomTile()
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b092      	sub	sp, #72	@ 0x48
 8001724:	af00      	add	r7, sp, #0
    Point empty_tiles[GAME2048_BOARD_SIZE * GAME2048_BOARD_SIZE]; // Use GAME2048_BOARD_SIZE
    uint8_t num_empty_tiles = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 800172c:	2300      	movs	r3, #0
 800172e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001732:	e035      	b.n	80017a0 <Game2048_AddRandomTile+0x80>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001734:	2300      	movs	r3, #0
 8001736:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800173a:	e028      	b.n	800178e <Game2048_AddRandomTile+0x6e>
        {
            if (game2048_board[r][c].value == 0)
 800173c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8001740:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001744:	493a      	ldr	r1, [pc, #232]	@ (8001830 <Game2048_AddRandomTile+0x110>)
 8001746:	0092      	lsls	r2, r2, #2
 8001748:	4413      	add	r3, r2
 800174a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d118      	bne.n	8001784 <Game2048_AddRandomTile+0x64>
            {
                empty_tiles[num_empty_tiles].x = c;
 8001752:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001756:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800175a:	b212      	sxth	r2, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	3348      	adds	r3, #72	@ 0x48
 8001760:	443b      	add	r3, r7
 8001762:	f823 2c48 	strh.w	r2, [r3, #-72]
                empty_tiles[num_empty_tiles].y = r;
 8001766:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800176a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800176e:	b212      	sxth	r2, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	3348      	adds	r3, #72	@ 0x48
 8001774:	443b      	add	r3, r7
 8001776:	f823 2c46 	strh.w	r2, [r3, #-70]
                num_empty_tiles++;
 800177a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800177e:	3301      	adds	r3, #1
 8001780:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001784:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001788:	3301      	adds	r3, #1
 800178a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800178e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001792:	2b03      	cmp	r3, #3
 8001794:	d9d2      	bls.n	800173c <Game2048_AddRandomTile+0x1c>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001796:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800179a:	3301      	adds	r3, #1
 800179c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80017a0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d9c5      	bls.n	8001734 <Game2048_AddRandomTile+0x14>
            }
        }
    }
    if (num_empty_tiles > 0)
 80017a8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d03a      	beq.n	8001826 <Game2048_AddRandomTile+0x106>
    {
        uint16_t rand_index = rand() % num_empty_tiles;
 80017b0:	f009 fe14 	bl	800b3dc <rand>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80017ba:	fb92 f1f3 	sdiv	r1, r2, r3
 80017be:	fb01 f303 	mul.w	r3, r1, r3
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        uint8_t r_pos = empty_tiles[rand_index].y;
 80017c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	3348      	adds	r3, #72	@ 0x48
 80017d0:	443b      	add	r3, r7
 80017d2:	f933 3c46 	ldrsh.w	r3, [r3, #-70]
 80017d6:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
        uint8_t c_pos = empty_tiles[rand_index].x;
 80017da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	3348      	adds	r3, #72	@ 0x48
 80017e2:	443b      	add	r3, r7
 80017e4:	f933 3c48 	ldrsh.w	r3, [r3, #-72]
 80017e8:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
        game2048_board[r_pos][c_pos].value = (rand() % 10 == 0) ? 4 : 2;
 80017ec:	f009 fdf6 	bl	800b3dc <rand>
 80017f0:	4601      	mov	r1, r0
 80017f2:	4b10      	ldr	r3, [pc, #64]	@ (8001834 <Game2048_AddRandomTile+0x114>)
 80017f4:	fb83 2301 	smull	r2, r3, r3, r1
 80017f8:	109a      	asrs	r2, r3, #2
 80017fa:	17cb      	asrs	r3, r1, #31
 80017fc:	1ad2      	subs	r2, r2, r3
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	1aca      	subs	r2, r1, r3
 8001808:	2a00      	cmp	r2, #0
 800180a:	d101      	bne.n	8001810 <Game2048_AddRandomTile+0xf0>
 800180c:	2004      	movs	r0, #4
 800180e:	e000      	b.n	8001812 <Game2048_AddRandomTile+0xf2>
 8001810:	2002      	movs	r0, #2
 8001812:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 8001816:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800181a:	4905      	ldr	r1, [pc, #20]	@ (8001830 <Game2048_AddRandomTile+0x110>)
 800181c:	0092      	lsls	r2, r2, #2
 800181e:	4413      	add	r3, r2
 8001820:	4602      	mov	r2, r0
 8001822:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }
}
 8001826:	bf00      	nop
 8001828:	3748      	adds	r7, #72	@ 0x48
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000240 	.word	0x20000240
 8001834:	66666667 	.word	0x66666667

08001838 <Game2048_Init>:

void Game2048_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 800183e:	2300      	movs	r3, #0
 8001840:	71fb      	strb	r3, [r7, #7]
 8001842:	e013      	b.n	800186c <Game2048_Init+0x34>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001844:	2300      	movs	r3, #0
 8001846:	71bb      	strb	r3, [r7, #6]
 8001848:	e00a      	b.n	8001860 <Game2048_Init+0x28>
        {
            game2048_board[r][c].value = 0;
 800184a:	79fa      	ldrb	r2, [r7, #7]
 800184c:	79bb      	ldrb	r3, [r7, #6]
 800184e:	4914      	ldr	r1, [pc, #80]	@ (80018a0 <Game2048_Init+0x68>)
 8001850:	0092      	lsls	r2, r2, #2
 8001852:	4413      	add	r3, r2
 8001854:	2200      	movs	r2, #0
 8001856:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 800185a:	79bb      	ldrb	r3, [r7, #6]
 800185c:	3301      	adds	r3, #1
 800185e:	71bb      	strb	r3, [r7, #6]
 8001860:	79bb      	ldrb	r3, [r7, #6]
 8001862:	2b03      	cmp	r3, #3
 8001864:	d9f1      	bls.n	800184a <Game2048_Init+0x12>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	3301      	adds	r3, #1
 800186a:	71fb      	strb	r3, [r7, #7]
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	2b03      	cmp	r3, #3
 8001870:	d9e8      	bls.n	8001844 <Game2048_Init+0xc>
        }
    }
    game2048_score = 0;
 8001872:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <Game2048_Init+0x6c>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
    game2048_game_over = false;
 8001878:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <Game2048_Init+0x70>)
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
    game2048_game_won = false;
 800187e:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <Game2048_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
    game2048_move_made_this_turn = false;
 8001884:	4b0a      	ldr	r3, [pc, #40]	@ (80018b0 <Game2048_Init+0x78>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
    FirstRun = true; // Reset the first run flag
 800188a:	4b0a      	ldr	r3, [pc, #40]	@ (80018b4 <Game2048_Init+0x7c>)
 800188c:	2201      	movs	r2, #1
 800188e:	701a      	strb	r2, [r3, #0]
    Game2048_AddRandomTile();
 8001890:	f7ff ff46 	bl	8001720 <Game2048_AddRandomTile>

    OLED_UpdateDisplayVSync(); // Update display to show the initial state
 8001894:	f000 fe88 	bl	80025a8 <OLED_UpdateDisplayVSync>
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000240 	.word	0x20000240
 80018a4:	20000260 	.word	0x20000260
 80018a8:	20000264 	.word	0x20000264
 80018ac:	20000265 	.word	0x20000265
 80018b0:	20000266 	.word	0x20000266
 80018b4:	20000000 	.word	0x20000000

080018b8 <Game2048_Restart>:

void Game2048_Restart(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
    Game2048_Init();
 80018bc:	f7ff ffbc 	bl	8001838 <Game2048_Init>
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <Game2048_DrawBoard>:

void Game2048_DrawBoard(void)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b089      	sub	sp, #36	@ 0x24
 80018c8:	af02      	add	r7, sp, #8
    OLED_ClearBuffer();
 80018ca:	f000 fe25 	bl	8002518 <OLED_ClearBuffer>
    char str_buffer[10];
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 80018ce:	2300      	movs	r3, #0
 80018d0:	75fb      	strb	r3, [r7, #23]
 80018d2:	e068      	b.n	80019a6 <Game2048_DrawBoard+0xe2>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 80018d4:	2300      	movs	r3, #0
 80018d6:	75bb      	strb	r3, [r7, #22]
 80018d8:	e05f      	b.n	800199a <Game2048_DrawBoard+0xd6>
        {
            uint16_t val = game2048_board[r][c].value;
 80018da:	7dfa      	ldrb	r2, [r7, #23]
 80018dc:	7dbb      	ldrb	r3, [r7, #22]
 80018de:	494d      	ldr	r1, [pc, #308]	@ (8001a14 <Game2048_DrawBoard+0x150>)
 80018e0:	0092      	lsls	r2, r2, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80018e8:	82bb      	strh	r3, [r7, #20]
            uint8_t tile_x = c * GAME2048_TILE_WIDTH;
 80018ea:	7dbb      	ldrb	r3, [r7, #22]
 80018ec:	015b      	lsls	r3, r3, #5
 80018ee:	74fb      	strb	r3, [r7, #19]
            uint8_t tile_y = r * GAME2048_TILE_HEIGHT;
 80018f0:	7dfb      	ldrb	r3, [r7, #23]
 80018f2:	461a      	mov	r2, r3
 80018f4:	00d2      	lsls	r2, r2, #3
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	74bb      	strb	r3, [r7, #18]
            uint8_t tile_inner_width = GAME2048_TILE_WIDTH - 2 * GAME2048_TILE_PADDING;
 80018fc:	231e      	movs	r3, #30
 80018fe:	747b      	strb	r3, [r7, #17]
            uint8_t tile_inner_height = GAME2048_TILE_HEIGHT - 2 * GAME2048_TILE_PADDING;
 8001900:	230c      	movs	r3, #12
 8001902:	743b      	strb	r3, [r7, #16]

            OLED_DrawFilledRectangle(tile_x + GAME2048_TILE_PADDING,
 8001904:	7cfb      	ldrb	r3, [r7, #19]
 8001906:	b29b      	uxth	r3, r3
 8001908:	3301      	adds	r3, #1
 800190a:	b29b      	uxth	r3, r3
 800190c:	b218      	sxth	r0, r3
                                     tile_y + GAME2048_TILE_PADDING,
 800190e:	7cbb      	ldrb	r3, [r7, #18]
 8001910:	b29b      	uxth	r3, r3
 8001912:	3301      	adds	r3, #1
 8001914:	b29b      	uxth	r3, r3
            OLED_DrawFilledRectangle(tile_x + GAME2048_TILE_PADDING,
 8001916:	b219      	sxth	r1, r3
 8001918:	8abb      	ldrh	r3, [r7, #20]
 800191a:	2b00      	cmp	r3, #0
 800191c:	bf14      	ite	ne
 800191e:	2301      	movne	r3, #1
 8001920:	2300      	moveq	r3, #0
 8001922:	b2db      	uxtb	r3, r3
 8001924:	461c      	mov	r4, r3
 8001926:	7c3b      	ldrb	r3, [r7, #16]
 8001928:	7c7a      	ldrb	r2, [r7, #17]
 800192a:	9400      	str	r4, [sp, #0]
 800192c:	f006 fb21 	bl	8007f72 <OLED_DrawFilledRectangle>
                                     tile_inner_width, tile_inner_height,
                                     (val == 0) ? 0 : 1);
            if (val > 0)
 8001930:	8abb      	ldrh	r3, [r7, #20]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d02e      	beq.n	8001994 <Game2048_DrawBoard+0xd0>
            {
                sprintf(str_buffer, "%d", val);
 8001936:	8aba      	ldrh	r2, [r7, #20]
 8001938:	463b      	mov	r3, r7
 800193a:	4937      	ldr	r1, [pc, #220]	@ (8001a18 <Game2048_DrawBoard+0x154>)
 800193c:	4618      	mov	r0, r3
 800193e:	f009 fe4d 	bl	800b5dc <siprintf>
                uint8_t text_width = strlen(str_buffer) * 6;
 8001942:	463b      	mov	r3, r7
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fc0b 	bl	8000160 <strlen>
 800194a:	4603      	mov	r3, r0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	461a      	mov	r2, r3
 8001950:	0052      	lsls	r2, r2, #1
 8001952:	4413      	add	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
                uint8_t text_height = 8;
 8001958:	2308      	movs	r3, #8
 800195a:	73bb      	strb	r3, [r7, #14]
                uint8_t text_x = tile_x + (GAME2048_TILE_WIDTH - text_width) / 2;
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	f1c3 0320 	rsb	r3, r3, #32
 8001962:	0fda      	lsrs	r2, r3, #31
 8001964:	4413      	add	r3, r2
 8001966:	105b      	asrs	r3, r3, #1
 8001968:	b2da      	uxtb	r2, r3
 800196a:	7cfb      	ldrb	r3, [r7, #19]
 800196c:	4413      	add	r3, r2
 800196e:	737b      	strb	r3, [r7, #13]
                uint8_t text_y = tile_y + (GAME2048_TILE_HEIGHT - text_height) / 2;
 8001970:	7bbb      	ldrb	r3, [r7, #14]
 8001972:	f1c3 030e 	rsb	r3, r3, #14
 8001976:	0fda      	lsrs	r2, r3, #31
 8001978:	4413      	add	r3, r2
 800197a:	105b      	asrs	r3, r3, #1
 800197c:	b2da      	uxtb	r2, r3
 800197e:	7cbb      	ldrb	r3, [r7, #18]
 8001980:	4413      	add	r3, r2
 8001982:	733b      	strb	r3, [r7, #12]
                OLED_DisplayStringInverted(text_x, text_y, str_buffer, 1);
 8001984:	7b7b      	ldrb	r3, [r7, #13]
 8001986:	b218      	sxth	r0, r3
 8001988:	7b3b      	ldrb	r3, [r7, #12]
 800198a:	b219      	sxth	r1, r3
 800198c:	463a      	mov	r2, r7
 800198e:	2301      	movs	r3, #1
 8001990:	f001 fa43 	bl	8002e1a <OLED_DisplayStringInverted>
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001994:	7dbb      	ldrb	r3, [r7, #22]
 8001996:	3301      	adds	r3, #1
 8001998:	75bb      	strb	r3, [r7, #22]
 800199a:	7dbb      	ldrb	r3, [r7, #22]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d99c      	bls.n	80018da <Game2048_DrawBoard+0x16>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
 80019a2:	3301      	adds	r3, #1
 80019a4:	75fb      	strb	r3, [r7, #23]
 80019a6:	7dfb      	ldrb	r3, [r7, #23]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d993      	bls.n	80018d4 <Game2048_DrawBoard+0x10>
            }
        }
    }
    sprintf(str_buffer, "Scores:%lu", game2048_score);
 80019ac:	4b1b      	ldr	r3, [pc, #108]	@ (8001a1c <Game2048_DrawBoard+0x158>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	463b      	mov	r3, r7
 80019b2:	491b      	ldr	r1, [pc, #108]	@ (8001a20 <Game2048_DrawBoard+0x15c>)
 80019b4:	4618      	mov	r0, r3
 80019b6:	f009 fe11 	bl	800b5dc <siprintf>
    OLED_DisplayString(0, OLED_HEIGHT - 8, str_buffer);
 80019ba:	463b      	mov	r3, r7
 80019bc:	461a      	mov	r2, r3
 80019be:	2138      	movs	r1, #56	@ 0x38
 80019c0:	2000      	movs	r0, #0
 80019c2:	f001 f9dd 	bl	8002d80 <OLED_DisplayString>

    if (game2048_game_over)
 80019c6:	4b17      	ldr	r3, [pc, #92]	@ (8001a24 <Game2048_DrawBoard+0x160>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d014      	beq.n	80019f8 <Game2048_DrawBoard+0x134>
    {
        OLED_DrawFilledRectangle(0, 0, OLED_WIDTH, OLED_HEIGHT-8, 1);
 80019ce:	2301      	movs	r3, #1
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2338      	movs	r3, #56	@ 0x38
 80019d4:	2280      	movs	r2, #128	@ 0x80
 80019d6:	2100      	movs	r1, #0
 80019d8:	2000      	movs	r0, #0
 80019da:	f006 faca 	bl	8007f72 <OLED_DrawFilledRectangle>
        OLED_DisplayStringInverted((OLED_WIDTH - 8 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2 - 8, "GAME OVER", 1);
 80019de:	2301      	movs	r3, #1
 80019e0:	4a11      	ldr	r2, [pc, #68]	@ (8001a28 <Game2048_DrawBoard+0x164>)
 80019e2:	2114      	movs	r1, #20
 80019e4:	2028      	movs	r0, #40	@ 0x28
 80019e6:	f001 fa18 	bl	8002e1a <OLED_DisplayStringInverted>
        OLED_DisplayStringInverted((OLED_WIDTH - 10 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2, "RST BTN=RS", 1);
 80019ea:	2301      	movs	r3, #1
 80019ec:	4a0f      	ldr	r2, [pc, #60]	@ (8001a2c <Game2048_DrawBoard+0x168>)
 80019ee:	211c      	movs	r1, #28
 80019f0:	2022      	movs	r0, #34	@ 0x22
 80019f2:	f001 fa12 	bl	8002e1a <OLED_DisplayStringInverted>
    }
    else if (game2048_game_won)
    {
        OLED_DisplayString((OLED_WIDTH - 7 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2 - 4, "YOU WIN!");
    }
}
 80019f6:	e008      	b.n	8001a0a <Game2048_DrawBoard+0x146>
    else if (game2048_game_won)
 80019f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001a30 <Game2048_DrawBoard+0x16c>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d004      	beq.n	8001a0a <Game2048_DrawBoard+0x146>
        OLED_DisplayString((OLED_WIDTH - 7 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2 - 4, "YOU WIN!");
 8001a00:	4a0c      	ldr	r2, [pc, #48]	@ (8001a34 <Game2048_DrawBoard+0x170>)
 8001a02:	2118      	movs	r1, #24
 8001a04:	202b      	movs	r0, #43	@ 0x2b
 8001a06:	f001 f9bb 	bl	8002d80 <OLED_DisplayString>
}
 8001a0a:	bf00      	nop
 8001a0c:	371c      	adds	r7, #28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd90      	pop	{r4, r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000240 	.word	0x20000240
 8001a18:	0800dc74 	.word	0x0800dc74
 8001a1c:	20000260 	.word	0x20000260
 8001a20:	0800dc78 	.word	0x0800dc78
 8001a24:	20000264 	.word	0x20000264
 8001a28:	0800dc84 	.word	0x0800dc84
 8001a2c:	0800dc5c 	.word	0x0800dc5c
 8001a30:	20000265 	.word	0x20000265
 8001a34:	0800dc90 	.word	0x0800dc90

08001a38 <Game2048_CompactAndMerge>:

static void Game2048_CompactAndMerge(uint8_t line_idx, Direction dir, bool is_row)
{
 8001a38:	b490      	push	{r4, r7}
 8001a3a:	b08c      	sub	sp, #48	@ 0x30
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
 8001a42:	460b      	mov	r3, r1
 8001a44:	71bb      	strb	r3, [r7, #6]
 8001a46:	4613      	mov	r3, r2
 8001a48:	717b      	strb	r3, [r7, #5]
    uint8_t line_size = GAME2048_BOARD_SIZE;          // Use GAME2048_BOARD_SIZE
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint16_t temp_line[GAME2048_BOARD_SIZE] = {0};    // Use GAME2048_BOARD_SIZE
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
    uint16_t original_line_copy[GAME2048_BOARD_SIZE]; // To check if anything changed

    for (uint8_t i = 0; i < line_size; ++i)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001a60:	e01f      	b.n	8001aa2 <Game2048_CompactAndMerge+0x6a>
    {
        original_line_copy[i] = is_row ? game2048_board[line_idx][i].value : game2048_board[i][line_idx].value;
 8001a62:	797b      	ldrb	r3, [r7, #5]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <Game2048_CompactAndMerge+0x42>
 8001a68:	79fa      	ldrb	r2, [r7, #7]
 8001a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a6e:	49c2      	ldr	r1, [pc, #776]	@ (8001d78 <Game2048_CompactAndMerge+0x340>)
 8001a70:	0092      	lsls	r2, r2, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001a78:	e007      	b.n	8001a8a <Game2048_CompactAndMerge+0x52>
 8001a7a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	49bd      	ldr	r1, [pc, #756]	@ (8001d78 <Game2048_CompactAndMerge+0x340>)
 8001a82:	0092      	lsls	r2, r2, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001a8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	3330      	adds	r3, #48	@ 0x30
 8001a92:	443b      	add	r3, r7
 8001a94:	f823 2c24 	strh.w	r2, [r3, #-36]
    for (uint8_t i = 0; i < line_size; ++i)
 8001a98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001aa2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d3d9      	bcc.n	8001a62 <Game2048_CompactAndMerge+0x2a>
    }

    int8_t write_pos = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t increment = 1;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (dir == DIR_DOWN || dir == DIR_RIGHT)
 8001aba:	79bb      	ldrb	r3, [r7, #6]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d002      	beq.n	8001ac6 <Game2048_CompactAndMerge+0x8e>
 8001ac0:	79bb      	ldrb	r3, [r7, #6]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d108      	bne.n	8001ad8 <Game2048_CompactAndMerge+0xa0>
    {
        write_pos = line_size - 1;
 8001ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        increment = -1;
 8001ad2:	23ff      	movs	r3, #255	@ 0xff
 8001ad4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    }

    int8_t compact_pos = write_pos;
 8001ad8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001adc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001ae6:	e041      	b.n	8001b6c <Game2048_CompactAndMerge+0x134>
    {
        int8_t read_pos_actual = (dir == DIR_DOWN || dir == DIR_RIGHT) ? (line_size - 1 - i) : i;
 8001ae8:	79bb      	ldrb	r3, [r7, #6]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d002      	beq.n	8001af4 <Game2048_CompactAndMerge+0xbc>
 8001aee:	79bb      	ldrb	r3, [r7, #6]
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d109      	bne.n	8001b08 <Game2048_CompactAndMerge+0xd0>
 8001af4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001af8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	3b01      	subs	r3, #1
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	b25b      	sxtb	r3, r3
 8001b06:	e001      	b.n	8001b0c <Game2048_CompactAndMerge+0xd4>
 8001b08:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8001b0c:	f887 3020 	strb.w	r3, [r7, #32]
        uint16_t current_tile_value = is_row ? game2048_board[line_idx][read_pos_actual].value
 8001b10:	797b      	ldrb	r3, [r7, #5]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d008      	beq.n	8001b28 <Game2048_CompactAndMerge+0xf0>
 8001b16:	79fa      	ldrb	r2, [r7, #7]
 8001b18:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8001b1c:	4996      	ldr	r1, [pc, #600]	@ (8001d78 <Game2048_CompactAndMerge+0x340>)
 8001b1e:	0092      	lsls	r2, r2, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001b26:	e007      	b.n	8001b38 <Game2048_CompactAndMerge+0x100>
                                             : game2048_board[read_pos_actual][line_idx].value;
 8001b28:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
        uint16_t current_tile_value = is_row ? game2048_board[line_idx][read_pos_actual].value
 8001b2e:	4992      	ldr	r1, [pc, #584]	@ (8001d78 <Game2048_CompactAndMerge+0x340>)
 8001b30:	0092      	lsls	r2, r2, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001b38:	83fb      	strh	r3, [r7, #30]
        if (current_tile_value != 0)
 8001b3a:	8bfb      	ldrh	r3, [r7, #30]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00f      	beq.n	8001b60 <Game2048_CompactAndMerge+0x128>
        {
            temp_line[compact_pos] = current_tile_value;
 8001b40:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	3330      	adds	r3, #48	@ 0x30
 8001b48:	443b      	add	r3, r7
 8001b4a:	8bfa      	ldrh	r2, [r7, #30]
 8001b4c:	f823 2c1c 	strh.w	r2, [r3, #-28]
            compact_pos += increment;
 8001b50:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001b54:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001b58:	4413      	add	r3, r2
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 8001b60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001b64:	3301      	adds	r3, #1
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001b6c:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 8001b70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b74:	429a      	cmp	r2, r3
 8001b76:	dbb7      	blt.n	8001ae8 <Game2048_CompactAndMerge+0xb0>
        }
    }

    for (int8_t i = 0; i < line_size - 1; ++i)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001b7e:	e078      	b.n	8001c72 <Game2048_CompactAndMerge+0x23a>
    {
        int8_t current_idx = (dir == DIR_DOWN || dir == DIR_RIGHT) ? (line_size - 1 - i) : i;
 8001b80:	79bb      	ldrb	r3, [r7, #6]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d002      	beq.n	8001b8c <Game2048_CompactAndMerge+0x154>
 8001b86:	79bb      	ldrb	r3, [r7, #6]
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d109      	bne.n	8001ba0 <Game2048_CompactAndMerge+0x168>
 8001b8c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001b90:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	b25b      	sxtb	r3, r3
 8001b9e:	e001      	b.n	8001ba4 <Game2048_CompactAndMerge+0x16c>
 8001ba0:	f997 302a 	ldrsb.w	r3, [r7, #42]	@ 0x2a
 8001ba4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        int8_t next_idx = current_idx + increment;
 8001ba8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001bac:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        if (next_idx < 0 || next_idx >= line_size)
 8001bb8:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	db51      	blt.n	8001c64 <Game2048_CompactAndMerge+0x22c>
 8001bc0:	f997 2021 	ldrsb.w	r2, [r7, #33]	@ 0x21
 8001bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	da4b      	bge.n	8001c64 <Game2048_CompactAndMerge+0x22c>
            continue;

        if (temp_line[current_idx] != 0 && temp_line[current_idx] == temp_line[next_idx])
 8001bcc:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	3330      	adds	r3, #48	@ 0x30
 8001bd4:	443b      	add	r3, r7
 8001bd6:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d043      	beq.n	8001c66 <Game2048_CompactAndMerge+0x22e>
 8001bde:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	3330      	adds	r3, #48	@ 0x30
 8001be6:	443b      	add	r3, r7
 8001be8:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 8001bec:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	3330      	adds	r3, #48	@ 0x30
 8001bf4:	443b      	add	r3, r7
 8001bf6:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d133      	bne.n	8001c66 <Game2048_CompactAndMerge+0x22e>
        {
            temp_line[current_idx] *= 2;
 8001bfe:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	3330      	adds	r3, #48	@ 0x30
 8001c06:	443b      	add	r3, r7
 8001c08:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 8001c0c:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001c10:	0052      	lsls	r2, r2, #1
 8001c12:	b292      	uxth	r2, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	3330      	adds	r3, #48	@ 0x30
 8001c18:	443b      	add	r3, r7
 8001c1a:	f823 2c1c 	strh.w	r2, [r3, #-28]
            game2048_score += temp_line[current_idx];
 8001c1e:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	3330      	adds	r3, #48	@ 0x30
 8001c26:	443b      	add	r3, r7
 8001c28:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b53      	ldr	r3, [pc, #332]	@ (8001d7c <Game2048_CompactAndMerge+0x344>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a51      	ldr	r2, [pc, #324]	@ (8001d7c <Game2048_CompactAndMerge+0x344>)
 8001c36:	6013      	str	r3, [r2, #0]
            temp_line[next_idx] = 0;
 8001c38:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	3330      	adds	r3, #48	@ 0x30
 8001c40:	443b      	add	r3, r7
 8001c42:	2200      	movs	r2, #0
 8001c44:	f823 2c1c 	strh.w	r2, [r3, #-28]
            if (temp_line[current_idx] == 2048)
 8001c48:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	3330      	adds	r3, #48	@ 0x30
 8001c50:	443b      	add	r3, r7
 8001c52:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001c56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c5a:	d104      	bne.n	8001c66 <Game2048_CompactAndMerge+0x22e>
                game2048_game_won = true;
 8001c5c:	4b48      	ldr	r3, [pc, #288]	@ (8001d80 <Game2048_CompactAndMerge+0x348>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	e000      	b.n	8001c66 <Game2048_CompactAndMerge+0x22e>
            continue;
 8001c64:	bf00      	nop
    for (int8_t i = 0; i < line_size - 1; ++i)
 8001c66:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001c72:	f997 202a 	ldrsb.w	r2, [r7, #42]	@ 0x2a
 8001c76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	f6ff af7f 	blt.w	8001b80 <Game2048_CompactAndMerge+0x148>
        }
    }

    compact_pos = write_pos;
 8001c82:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001c86:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8001c90:	e045      	b.n	8001d1e <Game2048_CompactAndMerge+0x2e6>
    {
        int8_t read_pos_temp = (dir == DIR_DOWN || dir == DIR_RIGHT) ? (line_size - 1 - i) : i;
 8001c92:	79bb      	ldrb	r3, [r7, #6]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d002      	beq.n	8001c9e <Game2048_CompactAndMerge+0x266>
 8001c98:	79bb      	ldrb	r3, [r7, #6]
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d109      	bne.n	8001cb2 <Game2048_CompactAndMerge+0x27a>
 8001c9e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001ca2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	b25b      	sxtb	r3, r3
 8001cb0:	e001      	b.n	8001cb6 <Game2048_CompactAndMerge+0x27e>
 8001cb2:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 8001cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        // The condition "if (temp_line[read_pos_temp] != 0)" was problematic.
        // temp_line already contains the correct values, including zeros, after compaction and merging.
        // We should always write the value from temp_line to the board and advance compact_pos.
        if (is_row)
 8001cba:	797b      	ldrb	r3, [r7, #5]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d010      	beq.n	8001ce2 <Game2048_CompactAndMerge+0x2aa>
        {
            game2048_board[line_idx][compact_pos].value = temp_line[read_pos_temp];
 8001cc0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8001cc4:	79f9      	ldrb	r1, [r7, #7]
 8001cc6:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	3330      	adds	r3, #48	@ 0x30
 8001cce:	443b      	add	r3, r7
 8001cd0:	f833 4c1c 	ldrh.w	r4, [r3, #-28]
 8001cd4:	4828      	ldr	r0, [pc, #160]	@ (8001d78 <Game2048_CompactAndMerge+0x340>)
 8001cd6:	008b      	lsls	r3, r1, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	4622      	mov	r2, r4
 8001cdc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8001ce0:	e00f      	b.n	8001d02 <Game2048_CompactAndMerge+0x2ca>
        }
        else
        {
            game2048_board[compact_pos][line_idx].value = temp_line[read_pos_temp];
 8001ce2:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8001ce6:	f997 102c 	ldrsb.w	r1, [r7, #44]	@ 0x2c
 8001cea:	79fa      	ldrb	r2, [r7, #7]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	3330      	adds	r3, #48	@ 0x30
 8001cf0:	443b      	add	r3, r7
 8001cf2:	f833 4c1c 	ldrh.w	r4, [r3, #-28]
 8001cf6:	4820      	ldr	r0, [pc, #128]	@ (8001d78 <Game2048_CompactAndMerge+0x340>)
 8001cf8:	008b      	lsls	r3, r1, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	4622      	mov	r2, r4
 8001cfe:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        }
        compact_pos += increment; // compact_pos should always be updated.
 8001d02:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001d06:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001d0a:	4413      	add	r3, r2
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 8001d12:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001d16:	3301      	adds	r3, #1
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8001d1e:	f997 2029 	ldrsb.w	r2, [r7, #41]	@ 0x29
 8001d22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d26:	429a      	cmp	r2, r3
 8001d28:	dbb3      	blt.n	8001c92 <Game2048_CompactAndMerge+0x25a>
    }

    for (uint8_t i = 0; i < line_size; ++i)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8001d30:	e02f      	b.n	8001d92 <Game2048_CompactAndMerge+0x35a>
    {
        uint16_t current_val = is_row ? game2048_board[line_idx][i].value : game2048_board[i][line_idx].value;
 8001d32:	797b      	ldrb	r3, [r7, #5]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <Game2048_CompactAndMerge+0x312>
 8001d38:	79fa      	ldrb	r2, [r7, #7]
 8001d3a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001d3e:	490e      	ldr	r1, [pc, #56]	@ (8001d78 <Game2048_CompactAndMerge+0x340>)
 8001d40:	0092      	lsls	r2, r2, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d48:	e007      	b.n	8001d5a <Game2048_CompactAndMerge+0x322>
 8001d4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	4909      	ldr	r1, [pc, #36]	@ (8001d78 <Game2048_CompactAndMerge+0x340>)
 8001d52:	0092      	lsls	r2, r2, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d5a:	84bb      	strh	r3, [r7, #36]	@ 0x24
        if (original_line_copy[i] != current_val)
 8001d5c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	3330      	adds	r3, #48	@ 0x30
 8001d64:	443b      	add	r3, r7
 8001d66:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001d6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d00b      	beq.n	8001d88 <Game2048_CompactAndMerge+0x350>
        {
            game2048_move_made_this_turn = true;
 8001d70:	4b04      	ldr	r3, [pc, #16]	@ (8001d84 <Game2048_CompactAndMerge+0x34c>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]
            break;
 8001d76:	e013      	b.n	8001da0 <Game2048_CompactAndMerge+0x368>
 8001d78:	20000240 	.word	0x20000240
 8001d7c:	20000260 	.word	0x20000260
 8001d80:	20000265 	.word	0x20000265
 8001d84:	20000266 	.word	0x20000266
    for (uint8_t i = 0; i < line_size; ++i)
 8001d88:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8001d92:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001d96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d3c9      	bcc.n	8001d32 <Game2048_CompactAndMerge+0x2fa>
        }
    }
}
 8001d9e:	bf00      	nop
 8001da0:	bf00      	nop
 8001da2:	3730      	adds	r7, #48	@ 0x30
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc90      	pop	{r4, r7}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop

08001dac <Game2048_MoveUp>:

static void Game2048_MoveUp()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001db2:	2300      	movs	r3, #0
 8001db4:	71fb      	strb	r3, [r7, #7]
 8001db6:	e008      	b.n	8001dca <Game2048_MoveUp+0x1e>
    {
        Game2048_CompactAndMerge(c, DIR_UP, false);
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fe3a 	bl	8001a38 <Game2048_CompactAndMerge>
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	71fb      	strb	r3, [r7, #7]
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d9f3      	bls.n	8001db8 <Game2048_MoveUp+0xc>
    }
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <Game2048_MoveDown>:

static void Game2048_MoveDown()
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001de0:	2300      	movs	r3, #0
 8001de2:	71fb      	strb	r3, [r7, #7]
 8001de4:	e008      	b.n	8001df8 <Game2048_MoveDown+0x1e>
    {
        Game2048_CompactAndMerge(c, DIR_DOWN, false);
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	2200      	movs	r2, #0
 8001dea:	2101      	movs	r1, #1
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fe23 	bl	8001a38 <Game2048_CompactAndMerge>
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	3301      	adds	r3, #1
 8001df6:	71fb      	strb	r3, [r7, #7]
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d9f3      	bls.n	8001de6 <Game2048_MoveDown+0xc>
    }
}
 8001dfe:	bf00      	nop
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <Game2048_MoveLeft>:

static void Game2048_MoveLeft()
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001e0e:	2300      	movs	r3, #0
 8001e10:	71fb      	strb	r3, [r7, #7]
 8001e12:	e008      	b.n	8001e26 <Game2048_MoveLeft+0x1e>
    {
        Game2048_CompactAndMerge(r, DIR_LEFT, true);
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	2201      	movs	r2, #1
 8001e18:	2102      	movs	r1, #2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fe0c 	bl	8001a38 <Game2048_CompactAndMerge>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	3301      	adds	r3, #1
 8001e24:	71fb      	strb	r3, [r7, #7]
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d9f3      	bls.n	8001e14 <Game2048_MoveLeft+0xc>
    }
}
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <Game2048_MoveRight>:

static void Game2048_MoveRight()
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	71fb      	strb	r3, [r7, #7]
 8001e40:	e008      	b.n	8001e54 <Game2048_MoveRight+0x1e>
    {
        Game2048_CompactAndMerge(r, DIR_RIGHT, true);
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	2201      	movs	r2, #1
 8001e46:	2103      	movs	r1, #3
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fdf5 	bl	8001a38 <Game2048_CompactAndMerge>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	3301      	adds	r3, #1
 8001e52:	71fb      	strb	r3, [r7, #7]
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d9f3      	bls.n	8001e42 <Game2048_MoveRight+0xc>
    }
}
 8001e5a:	bf00      	nop
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <Game2048_CanMove>:

static bool Game2048_CanMove()
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	71fb      	strb	r3, [r7, #7]
 8001e6e:	e03e      	b.n	8001eee <Game2048_CanMove+0x8a>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001e70:	2300      	movs	r3, #0
 8001e72:	71bb      	strb	r3, [r7, #6]
 8001e74:	e035      	b.n	8001ee2 <Game2048_CanMove+0x7e>
        {
            if (game2048_board[r][c].value == 0)
 8001e76:	79fa      	ldrb	r2, [r7, #7]
 8001e78:	79bb      	ldrb	r3, [r7, #6]
 8001e7a:	4921      	ldr	r1, [pc, #132]	@ (8001f00 <Game2048_CanMove+0x9c>)
 8001e7c:	0092      	lsls	r2, r2, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <Game2048_CanMove+0x28>
                return true;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e034      	b.n	8001ef6 <Game2048_CanMove+0x92>
            uint16_t val = game2048_board[r][c].value;
 8001e8c:	79fa      	ldrb	r2, [r7, #7]
 8001e8e:	79bb      	ldrb	r3, [r7, #6]
 8001e90:	491b      	ldr	r1, [pc, #108]	@ (8001f00 <Game2048_CanMove+0x9c>)
 8001e92:	0092      	lsls	r2, r2, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001e9a:	80bb      	strh	r3, [r7, #4]
            if (c < GAME2048_BOARD_SIZE - 1 && game2048_board[r][c + 1].value == val) // Use GAME2048_BOARD_SIZE
 8001e9c:	79bb      	ldrb	r3, [r7, #6]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d80c      	bhi.n	8001ebc <Game2048_CanMove+0x58>
 8001ea2:	79fa      	ldrb	r2, [r7, #7]
 8001ea4:	79bb      	ldrb	r3, [r7, #6]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	4915      	ldr	r1, [pc, #84]	@ (8001f00 <Game2048_CanMove+0x9c>)
 8001eaa:	0092      	lsls	r2, r2, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001eb2:	88ba      	ldrh	r2, [r7, #4]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d101      	bne.n	8001ebc <Game2048_CanMove+0x58>
                return true;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e01c      	b.n	8001ef6 <Game2048_CanMove+0x92>
            if (r < GAME2048_BOARD_SIZE - 1 && game2048_board[r + 1][c].value == val) // Use GAME2048_BOARD_SIZE
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d80c      	bhi.n	8001edc <Game2048_CanMove+0x78>
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	79bb      	ldrb	r3, [r7, #6]
 8001ec8:	490d      	ldr	r1, [pc, #52]	@ (8001f00 <Game2048_CanMove+0x9c>)
 8001eca:	0092      	lsls	r2, r2, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ed2:	88ba      	ldrh	r2, [r7, #4]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d101      	bne.n	8001edc <Game2048_CanMove+0x78>
                return true;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e00c      	b.n	8001ef6 <Game2048_CanMove+0x92>
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001edc:	79bb      	ldrb	r3, [r7, #6]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	71bb      	strb	r3, [r7, #6]
 8001ee2:	79bb      	ldrb	r3, [r7, #6]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d9c6      	bls.n	8001e76 <Game2048_CanMove+0x12>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	3301      	adds	r3, #1
 8001eec:	71fb      	strb	r3, [r7, #7]
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d9bd      	bls.n	8001e70 <Game2048_CanMove+0xc>
        }
    }
    return false;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	20000240 	.word	0x20000240

08001f04 <Game2048_HandleInput>:

bool Game2048_HandleInput(Direction input_dir)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
    if (game2048_game_over || game2048_game_won)
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f8c <Game2048_HandleInput+0x88>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d103      	bne.n	8001f1e <Game2048_HandleInput+0x1a>
 8001f16:	4b1e      	ldr	r3, [pc, #120]	@ (8001f90 <Game2048_HandleInput+0x8c>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <Game2048_HandleInput+0x1e>
        return false;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e02f      	b.n	8001f82 <Game2048_HandleInput+0x7e>

    game2048_move_made_this_turn = false;
 8001f22:	4b1c      	ldr	r3, [pc, #112]	@ (8001f94 <Game2048_HandleInput+0x90>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]

    switch (input_dir)
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d816      	bhi.n	8001f5c <Game2048_HandleInput+0x58>
 8001f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f34 <Game2048_HandleInput+0x30>)
 8001f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f34:	08001f45 	.word	0x08001f45
 8001f38:	08001f4b 	.word	0x08001f4b
 8001f3c:	08001f51 	.word	0x08001f51
 8001f40:	08001f57 	.word	0x08001f57
    {
    case DIR_UP:
        Game2048_MoveUp();
 8001f44:	f7ff ff32 	bl	8001dac <Game2048_MoveUp>
        break;
 8001f48:	e008      	b.n	8001f5c <Game2048_HandleInput+0x58>
    case DIR_DOWN:
        Game2048_MoveDown();
 8001f4a:	f7ff ff46 	bl	8001dda <Game2048_MoveDown>
        break;
 8001f4e:	e005      	b.n	8001f5c <Game2048_HandleInput+0x58>
    case DIR_LEFT:
        Game2048_MoveLeft();
 8001f50:	f7ff ff5a 	bl	8001e08 <Game2048_MoveLeft>
        break;
 8001f54:	e002      	b.n	8001f5c <Game2048_HandleInput+0x58>
    case DIR_RIGHT:
        Game2048_MoveRight();
 8001f56:	f7ff ff6e 	bl	8001e36 <Game2048_MoveRight>
        break;
 8001f5a:	bf00      	nop
    }

    if (game2048_move_made_this_turn)
 8001f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f94 <Game2048_HandleInput+0x90>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00c      	beq.n	8001f7e <Game2048_HandleInput+0x7a>
    {
        Game2048_AddRandomTile();
 8001f64:	f7ff fbdc 	bl	8001720 <Game2048_AddRandomTile>
        if (!Game2048_CanMove())
 8001f68:	f7ff ff7c 	bl	8001e64 <Game2048_CanMove>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f083 0301 	eor.w	r3, r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d002      	beq.n	8001f7e <Game2048_HandleInput+0x7a>
        {
            game2048_game_over = true;
 8001f78:	4b04      	ldr	r3, [pc, #16]	@ (8001f8c <Game2048_HandleInput+0x88>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
        }
    }
    return game2048_move_made_this_turn;
 8001f7e:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <Game2048_HandleInput+0x90>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000264 	.word	0x20000264
 8001f90:	20000265 	.word	0x20000265
 8001f94:	20000266 	.word	0x20000266

08001f98 <Game2048_GameLoop>:

void Game2048_GameLoop(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
    static uint16_t LastCount;

    if (FirstRun)
 8001f9c:	4b48      	ldr	r3, [pc, #288]	@ (80020c0 <Game2048_GameLoop+0x128>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <Game2048_GameLoop+0x1a>
    {
        LastCount = count;
 8001fa4:	4b47      	ldr	r3, [pc, #284]	@ (80020c4 <Game2048_GameLoop+0x12c>)
 8001fa6:	881a      	ldrh	r2, [r3, #0]
 8001fa8:	4b47      	ldr	r3, [pc, #284]	@ (80020c8 <Game2048_GameLoop+0x130>)
 8001faa:	801a      	strh	r2, [r3, #0]
        FirstRun = false;
 8001fac:	4b44      	ldr	r3, [pc, #272]	@ (80020c0 <Game2048_GameLoop+0x128>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
    }

    if (count - LastCount > 1 && HAL_GPIO_ReadPin(GAME_BUTTON_PORT, GAME_BUTTON_PIN) == GPIO_PIN_SET)
 8001fb2:	4b44      	ldr	r3, [pc, #272]	@ (80020c4 <Game2048_GameLoop+0x12c>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b43      	ldr	r3, [pc, #268]	@ (80020c8 <Game2048_GameLoop+0x130>)
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	dd0f      	ble.n	8001fe2 <Game2048_GameLoop+0x4a>
 8001fc2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001fc6:	4841      	ldr	r0, [pc, #260]	@ (80020cc <Game2048_GameLoop+0x134>)
 8001fc8:	f007 f98a 	bl	80092e0 <HAL_GPIO_ReadPin>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d107      	bne.n	8001fe2 <Game2048_GameLoop+0x4a>
    {
        Game2048_HandleInput(DIR_RIGHT);
 8001fd2:	2003      	movs	r0, #3
 8001fd4:	f7ff ff96 	bl	8001f04 <Game2048_HandleInput>
        LastCount = count;
 8001fd8:	4b3a      	ldr	r3, [pc, #232]	@ (80020c4 <Game2048_GameLoop+0x12c>)
 8001fda:	881a      	ldrh	r2, [r3, #0]
 8001fdc:	4b3a      	ldr	r3, [pc, #232]	@ (80020c8 <Game2048_GameLoop+0x130>)
 8001fde:	801a      	strh	r2, [r3, #0]
 8001fe0:	e048      	b.n	8002074 <Game2048_GameLoop+0xdc>
    }
    else if (count - LastCount < -1 && HAL_GPIO_ReadPin(GAME_BUTTON_PORT, GAME_BUTTON_PIN) == GPIO_PIN_SET)
 8001fe2:	4b38      	ldr	r3, [pc, #224]	@ (80020c4 <Game2048_GameLoop+0x12c>)
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4b37      	ldr	r3, [pc, #220]	@ (80020c8 <Game2048_GameLoop+0x130>)
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff2:	da0f      	bge.n	8002014 <Game2048_GameLoop+0x7c>
 8001ff4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ff8:	4834      	ldr	r0, [pc, #208]	@ (80020cc <Game2048_GameLoop+0x134>)
 8001ffa:	f007 f971 	bl	80092e0 <HAL_GPIO_ReadPin>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b01      	cmp	r3, #1
 8002002:	d107      	bne.n	8002014 <Game2048_GameLoop+0x7c>
    {
        Game2048_HandleInput(DIR_LEFT);
 8002004:	2002      	movs	r0, #2
 8002006:	f7ff ff7d 	bl	8001f04 <Game2048_HandleInput>
        LastCount = count;
 800200a:	4b2e      	ldr	r3, [pc, #184]	@ (80020c4 <Game2048_GameLoop+0x12c>)
 800200c:	881a      	ldrh	r2, [r3, #0]
 800200e:	4b2e      	ldr	r3, [pc, #184]	@ (80020c8 <Game2048_GameLoop+0x130>)
 8002010:	801a      	strh	r2, [r3, #0]
 8002012:	e02f      	b.n	8002074 <Game2048_GameLoop+0xdc>
    }
    else if (count - LastCount > 1 && HAL_GPIO_ReadPin(GAME_BUTTON_PORT, GAME_BUTTON_PIN) == GPIO_PIN_RESET)
 8002014:	4b2b      	ldr	r3, [pc, #172]	@ (80020c4 <Game2048_GameLoop+0x12c>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	4b2b      	ldr	r3, [pc, #172]	@ (80020c8 <Game2048_GameLoop+0x130>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b01      	cmp	r3, #1
 8002022:	dd0f      	ble.n	8002044 <Game2048_GameLoop+0xac>
 8002024:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002028:	4828      	ldr	r0, [pc, #160]	@ (80020cc <Game2048_GameLoop+0x134>)
 800202a:	f007 f959 	bl	80092e0 <HAL_GPIO_ReadPin>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d107      	bne.n	8002044 <Game2048_GameLoop+0xac>
    {
        Game2048_HandleInput(DIR_UP);
 8002034:	2000      	movs	r0, #0
 8002036:	f7ff ff65 	bl	8001f04 <Game2048_HandleInput>
        LastCount = count;
 800203a:	4b22      	ldr	r3, [pc, #136]	@ (80020c4 <Game2048_GameLoop+0x12c>)
 800203c:	881a      	ldrh	r2, [r3, #0]
 800203e:	4b22      	ldr	r3, [pc, #136]	@ (80020c8 <Game2048_GameLoop+0x130>)
 8002040:	801a      	strh	r2, [r3, #0]
 8002042:	e017      	b.n	8002074 <Game2048_GameLoop+0xdc>
    }
    else if (count - LastCount < -1 && HAL_GPIO_ReadPin(GAME_BUTTON_PORT, GAME_BUTTON_PIN) == GPIO_PIN_RESET)
 8002044:	4b1f      	ldr	r3, [pc, #124]	@ (80020c4 <Game2048_GameLoop+0x12c>)
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b1f      	ldr	r3, [pc, #124]	@ (80020c8 <Game2048_GameLoop+0x130>)
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002054:	da0e      	bge.n	8002074 <Game2048_GameLoop+0xdc>
 8002056:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800205a:	481c      	ldr	r0, [pc, #112]	@ (80020cc <Game2048_GameLoop+0x134>)
 800205c:	f007 f940 	bl	80092e0 <HAL_GPIO_ReadPin>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <Game2048_GameLoop+0xdc>
    {
        Game2048_HandleInput(DIR_DOWN);
 8002066:	2001      	movs	r0, #1
 8002068:	f7ff ff4c 	bl	8001f04 <Game2048_HandleInput>
        LastCount = count;
 800206c:	4b15      	ldr	r3, [pc, #84]	@ (80020c4 <Game2048_GameLoop+0x12c>)
 800206e:	881a      	ldrh	r2, [r3, #0]
 8002070:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <Game2048_GameLoop+0x130>)
 8002072:	801a      	strh	r2, [r3, #0]
    }

    if (game2048_game_over)
 8002074:	4b16      	ldr	r3, [pc, #88]	@ (80020d0 <Game2048_GameLoop+0x138>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d01d      	beq.n	80020b8 <Game2048_GameLoop+0x120>
    {
        if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 800207c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002080:	4812      	ldr	r0, [pc, #72]	@ (80020cc <Game2048_GameLoop+0x134>)
 8002082:	f007 f92d 	bl	80092e0 <HAL_GPIO_ReadPin>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d115      	bne.n	80020b8 <Game2048_GameLoop+0x120>
        {
            HAL_Delay(INPUT_DEBOUNCE_MS);
 800208c:	2032      	movs	r0, #50	@ 0x32
 800208e:	f006 fd11 	bl	8008ab4 <HAL_Delay>
            if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8002092:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002096:	480d      	ldr	r0, [pc, #52]	@ (80020cc <Game2048_GameLoop+0x134>)
 8002098:	f007 f922 	bl	80092e0 <HAL_GPIO_ReadPin>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10a      	bne.n	80020b8 <Game2048_GameLoop+0x120>
            {
                Game2048_Restart();
 80020a2:	f7ff fc09 	bl	80018b8 <Game2048_Restart>
                while (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 80020a6:	bf00      	nop
 80020a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020ac:	4807      	ldr	r0, [pc, #28]	@ (80020cc <Game2048_GameLoop+0x134>)
 80020ae:	f007 f917 	bl	80092e0 <HAL_GPIO_ReadPin>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f7      	beq.n	80020a8 <Game2048_GameLoop+0x110>
            }
        }
    }


    Game2048_DrawBoard();
 80020b8:	f7ff fc04 	bl	80018c4 <Game2048_DrawBoard>
}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000000 	.word	0x20000000
 80020c4:	20000308 	.word	0x20000308
 80020c8:	2000026c 	.word	0x2000026c
 80020cc:	40010c00 	.word	0x40010c00
 80020d0:	20000264 	.word	0x20000264

080020d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020da:	f107 0310 	add.w	r3, r7, #16
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e8:	4b34      	ldr	r3, [pc, #208]	@ (80021bc <MX_GPIO_Init+0xe8>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4a33      	ldr	r2, [pc, #204]	@ (80021bc <MX_GPIO_Init+0xe8>)
 80020ee:	f043 0310 	orr.w	r3, r3, #16
 80020f2:	6193      	str	r3, [r2, #24]
 80020f4:	4b31      	ldr	r3, [pc, #196]	@ (80021bc <MX_GPIO_Init+0xe8>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002100:	4b2e      	ldr	r3, [pc, #184]	@ (80021bc <MX_GPIO_Init+0xe8>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	4a2d      	ldr	r2, [pc, #180]	@ (80021bc <MX_GPIO_Init+0xe8>)
 8002106:	f043 0320 	orr.w	r3, r3, #32
 800210a:	6193      	str	r3, [r2, #24]
 800210c:	4b2b      	ldr	r3, [pc, #172]	@ (80021bc <MX_GPIO_Init+0xe8>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002118:	4b28      	ldr	r3, [pc, #160]	@ (80021bc <MX_GPIO_Init+0xe8>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	4a27      	ldr	r2, [pc, #156]	@ (80021bc <MX_GPIO_Init+0xe8>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	6193      	str	r3, [r2, #24]
 8002124:	4b25      	ldr	r3, [pc, #148]	@ (80021bc <MX_GPIO_Init+0xe8>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002130:	4b22      	ldr	r3, [pc, #136]	@ (80021bc <MX_GPIO_Init+0xe8>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	4a21      	ldr	r2, [pc, #132]	@ (80021bc <MX_GPIO_Init+0xe8>)
 8002136:	f043 0308 	orr.w	r3, r3, #8
 800213a:	6193      	str	r3, [r2, #24]
 800213c:	4b1f      	ldr	r3, [pc, #124]	@ (80021bc <MX_GPIO_Init+0xe8>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	603b      	str	r3, [r7, #0]
 8002146:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SysWork_Light_GPIO_Port, SysWork_Light_Pin, GPIO_PIN_RESET);
 8002148:	2200      	movs	r2, #0
 800214a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800214e:	481c      	ldr	r0, [pc, #112]	@ (80021c0 <MX_GPIO_Init+0xec>)
 8002150:	f007 f8dd 	bl	800930e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET);
 8002154:	2200      	movs	r2, #0
 8002156:	2180      	movs	r1, #128	@ 0x80
 8002158:	481a      	ldr	r0, [pc, #104]	@ (80021c4 <MX_GPIO_Init+0xf0>)
 800215a:	f007 f8d8 	bl	800930e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SysWork_Light_Pin */
  GPIO_InitStruct.Pin = SysWork_Light_Pin;
 800215e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002162:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002164:	2301      	movs	r3, #1
 8002166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216c:	2302      	movs	r3, #2
 800216e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SysWork_Light_GPIO_Port, &GPIO_InitStruct);
 8002170:	f107 0310 	add.w	r3, r7, #16
 8002174:	4619      	mov	r1, r3
 8002176:	4812      	ldr	r0, [pc, #72]	@ (80021c0 <MX_GPIO_Init+0xec>)
 8002178:	f006 ff2e 	bl	8008fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Flash_CS_Pin */
  GPIO_InitStruct.Pin = Flash_CS_Pin;
 800217c:	2380      	movs	r3, #128	@ 0x80
 800217e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002180:	2301      	movs	r3, #1
 8002182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002184:	2301      	movs	r3, #1
 8002186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002188:	2302      	movs	r3, #2
 800218a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Flash_CS_GPIO_Port, &GPIO_InitStruct);
 800218c:	f107 0310 	add.w	r3, r7, #16
 8002190:	4619      	mov	r1, r3
 8002192:	480c      	ldr	r0, [pc, #48]	@ (80021c4 <MX_GPIO_Init+0xf0>)
 8002194:	f006 ff20 	bl	8008fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch_Input_Pin Encoder_Input_Pin */
  GPIO_InitStruct.Pin = Switch_Input_Pin|Encoder_Input_Pin;
 8002198:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800219c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021a2:	2301      	movs	r3, #1
 80021a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a6:	f107 0310 	add.w	r3, r7, #16
 80021aa:	4619      	mov	r1, r3
 80021ac:	4806      	ldr	r0, [pc, #24]	@ (80021c8 <MX_GPIO_Init+0xf4>)
 80021ae:	f006 ff13 	bl	8008fd8 <HAL_GPIO_Init>

}
 80021b2:	bf00      	nop
 80021b4:	3720      	adds	r7, #32
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40011000 	.word	0x40011000
 80021c4:	40010800 	.word	0x40010800
 80021c8:	40010c00 	.word	0x40010c00

080021cc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021d0:	4b12      	ldr	r3, [pc, #72]	@ (800221c <MX_I2C1_Init+0x50>)
 80021d2:	4a13      	ldr	r2, [pc, #76]	@ (8002220 <MX_I2C1_Init+0x54>)
 80021d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80021d6:	4b11      	ldr	r3, [pc, #68]	@ (800221c <MX_I2C1_Init+0x50>)
 80021d8:	4a12      	ldr	r2, [pc, #72]	@ (8002224 <MX_I2C1_Init+0x58>)
 80021da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021dc:	4b0f      	ldr	r3, [pc, #60]	@ (800221c <MX_I2C1_Init+0x50>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021e2:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <MX_I2C1_Init+0x50>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021e8:	4b0c      	ldr	r3, [pc, #48]	@ (800221c <MX_I2C1_Init+0x50>)
 80021ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021f0:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <MX_I2C1_Init+0x50>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021f6:	4b09      	ldr	r3, [pc, #36]	@ (800221c <MX_I2C1_Init+0x50>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021fc:	4b07      	ldr	r3, [pc, #28]	@ (800221c <MX_I2C1_Init+0x50>)
 80021fe:	2200      	movs	r2, #0
 8002200:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002202:	4b06      	ldr	r3, [pc, #24]	@ (800221c <MX_I2C1_Init+0x50>)
 8002204:	2200      	movs	r2, #0
 8002206:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002208:	4804      	ldr	r0, [pc, #16]	@ (800221c <MX_I2C1_Init+0x50>)
 800220a:	f007 f899 	bl	8009340 <HAL_I2C_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002214:	f000 f945 	bl	80024a2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000270 	.word	0x20000270
 8002220:	40005400 	.word	0x40005400
 8002224:	00061a80 	.word	0x00061a80

08002228 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 0310 	add.w	r3, r7, #16
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a29      	ldr	r2, [pc, #164]	@ (80022e8 <HAL_I2C_MspInit+0xc0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d14a      	bne.n	80022de <HAL_I2C_MspInit+0xb6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002248:	4b28      	ldr	r3, [pc, #160]	@ (80022ec <HAL_I2C_MspInit+0xc4>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	4a27      	ldr	r2, [pc, #156]	@ (80022ec <HAL_I2C_MspInit+0xc4>)
 800224e:	f043 0308 	orr.w	r3, r3, #8
 8002252:	6193      	str	r3, [r2, #24]
 8002254:	4b25      	ldr	r3, [pc, #148]	@ (80022ec <HAL_I2C_MspInit+0xc4>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8002260:	23c0      	movs	r3, #192	@ 0xc0
 8002262:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002264:	2312      	movs	r3, #18
 8002266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002268:	2303      	movs	r3, #3
 800226a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226c:	f107 0310 	add.w	r3, r7, #16
 8002270:	4619      	mov	r1, r3
 8002272:	481f      	ldr	r0, [pc, #124]	@ (80022f0 <HAL_I2C_MspInit+0xc8>)
 8002274:	f006 feb0 	bl	8008fd8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002278:	4b1c      	ldr	r3, [pc, #112]	@ (80022ec <HAL_I2C_MspInit+0xc4>)
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	4a1b      	ldr	r2, [pc, #108]	@ (80022ec <HAL_I2C_MspInit+0xc4>)
 800227e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002282:	61d3      	str	r3, [r2, #28]
 8002284:	4b19      	ldr	r3, [pc, #100]	@ (80022ec <HAL_I2C_MspInit+0xc4>)
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8002290:	4b18      	ldr	r3, [pc, #96]	@ (80022f4 <HAL_I2C_MspInit+0xcc>)
 8002292:	4a19      	ldr	r2, [pc, #100]	@ (80022f8 <HAL_I2C_MspInit+0xd0>)
 8002294:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002296:	4b17      	ldr	r3, [pc, #92]	@ (80022f4 <HAL_I2C_MspInit+0xcc>)
 8002298:	2210      	movs	r2, #16
 800229a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800229c:	4b15      	ldr	r3, [pc, #84]	@ (80022f4 <HAL_I2C_MspInit+0xcc>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022a2:	4b14      	ldr	r3, [pc, #80]	@ (80022f4 <HAL_I2C_MspInit+0xcc>)
 80022a4:	2280      	movs	r2, #128	@ 0x80
 80022a6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022a8:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <HAL_I2C_MspInit+0xcc>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022ae:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <HAL_I2C_MspInit+0xcc>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80022b4:	4b0f      	ldr	r3, [pc, #60]	@ (80022f4 <HAL_I2C_MspInit+0xcc>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80022ba:	4b0e      	ldr	r3, [pc, #56]	@ (80022f4 <HAL_I2C_MspInit+0xcc>)
 80022bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022c0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80022c2:	480c      	ldr	r0, [pc, #48]	@ (80022f4 <HAL_I2C_MspInit+0xcc>)
 80022c4:	f006 fd28 	bl	8008d18 <HAL_DMA_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 80022ce:	f000 f8e8 	bl	80024a2 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a07      	ldr	r2, [pc, #28]	@ (80022f4 <HAL_I2C_MspInit+0xcc>)
 80022d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80022d8:	4a06      	ldr	r2, [pc, #24]	@ (80022f4 <HAL_I2C_MspInit+0xcc>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80022de:	bf00      	nop
 80022e0:	3720      	adds	r7, #32
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40005400 	.word	0x40005400
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40010c00 	.word	0x40010c00
 80022f4:	200002c4 	.word	0x200002c4
 80022f8:	4002006c 	.word	0x4002006c

080022fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002300:	f006 fb76 	bl	80089f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002304:	f000 f888 	bl	8002418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002308:	f7ff fee4 	bl	80020d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800230c:	f7fe fa60 	bl	80007d0 <MX_DMA_Init>
  MX_I2C1_Init();
 8002310:	f7ff ff5c 	bl	80021cc <MX_I2C1_Init>
  MX_TIM3_Init();
 8002314:	f006 f87a 	bl	800840c <MX_TIM3_Init>
  MX_SPI2_Init();
 8002318:	f005 fec6 	bl	80080a8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  // W25Q64_Init(); // 初始化W25Q64
  OLED_Init(); // 初始化OLED
 800231c:	f000 faa4 	bl	8002868 <OLED_Init>
  OLED_InitBuffer(); // 初始化双缓冲
 8002320:	f000 f8c6 	bl	80024b0 <OLED_InitBuffer>
  OLED_ClearBuffer(); // 清空缓冲区
 8002324:	f000 f8f8 	bl	8002518 <OLED_ClearBuffer>
  
  OLED_EnableDiffMode(1);  // 启用差分更新
 8002328:	2001      	movs	r0, #1
 800232a:	f004 fb15 	bl	8006958 <OLED_EnableDiffMode>
  OLED_EnableFastUpdate(1); // 启用快速更新
 800232e:	2001      	movs	r0, #1
 8002330:	f004 fb30 	bl	8006994 <OLED_EnableFastUpdate>
  OLED_InitCube3D(&CUBE, 13.5f, 150, 10); //中心(113,10)
 8002334:	230a      	movs	r3, #10
 8002336:	2296      	movs	r2, #150	@ 0x96
 8002338:	492a      	ldr	r1, [pc, #168]	@ (80023e4 <main+0xe8>)
 800233a:	482b      	ldr	r0, [pc, #172]	@ (80023e8 <main+0xec>)
 800233c:	f7fe fae2 	bl	8000904 <OLED_InitCube3D>


  // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // 启动PWM
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1); // 启动编码器
 8002340:	2100      	movs	r1, #0
 8002342:	482a      	ldr	r0, [pc, #168]	@ (80023ec <main+0xf0>)
 8002344:	f008 fecb 	bl	800b0de <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2); // 启动编码器
 8002348:	2104      	movs	r1, #4
 800234a:	4828      	ldr	r0, [pc, #160]	@ (80023ec <main+0xf0>)
 800234c:	f008 fec7 	bl	800b0de <HAL_TIM_Encoder_Start>

  OLED_InitAnimationManager(&g_AnimationManager); // 初始化动画管理器
 8002350:	4827      	ldr	r0, [pc, #156]	@ (80023f0 <main+0xf4>)
 8002352:	f005 fafb 	bl	800794c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Menu_AnimationManager); // 初始化菜单动画管理器
 8002356:	4827      	ldr	r0, [pc, #156]	@ (80023f4 <main+0xf8>)
 8002358:	f005 faf8 	bl	800794c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Games_AnimationManager); // 初始化游戏动画管理器
 800235c:	4826      	ldr	r0, [pc, #152]	@ (80023f8 <main+0xfc>)
 800235e:	f005 faf5 	bl	800794c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Tools_AnimationManager); // 初始化工具动画管理器
 8002362:	4826      	ldr	r0, [pc, #152]	@ (80023fc <main+0x100>)
 8002364:	f005 faf2 	bl	800794c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Settings_AnimationManager); // 初始化设置动画管理器
 8002368:	4825      	ldr	r0, [pc, #148]	@ (8002400 <main+0x104>)
 800236a:	f005 faef 	bl	800794c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&About_AnimationManager); // 初始化关于动画管理器
 800236e:	4825      	ldr	r0, [pc, #148]	@ (8002404 <main+0x108>)
 8002370:	f005 faec 	bl	800794c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Status_AnimationManager); // 初始化状态动画管理器
 8002374:	4824      	ldr	r0, [pc, #144]	@ (8002408 <main+0x10c>)
 8002376:	f005 fae9 	bl	800794c <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&g_Title_AnimationManager); // 初始化标题动画管理器
 800237a:	4824      	ldr	r0, [pc, #144]	@ (800240c <main+0x110>)
 800237c:	f005 fae6 	bl	800794c <OLED_InitAnimationManager>
  __HAL_TIM_SET_COUNTER(&htim3, 32767);
 8002380:	4b1a      	ldr	r3, [pc, #104]	@ (80023ec <main+0xf0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002388:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {    
    #pragma region OLED_UI_SETTINGS // UI设置
    OLED_ClearBuffer();
 800238a:	f000 f8c5 	bl	8002518 <OLED_ClearBuffer>
    
    System_UI_Loop(); // UI循环
 800238e:	f000 fd95 	bl	8002ebc <System_UI_Loop>

    if (isShowFPS)
 8002392:	4b1f      	ldr	r3, [pc, #124]	@ (8002410 <main+0x114>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <main+0xa6>
      OLED_OptimizedDisplayFPS(80, 56); // 显示帧率
 800239a:	2138      	movs	r1, #56	@ 0x38
 800239c:	2050      	movs	r0, #80	@ 0x50
 800239e:	f004 fba3 	bl	8006ae8 <OLED_OptimizedDisplayFPS>
    count = __HAL_TIM_GET_COUNTER(&htim3); // 获取编码器计数值 1圈40
 80023a2:	4b12      	ldr	r3, [pc, #72]	@ (80023ec <main+0xf0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002414 <main+0x118>)
 80023ac:	801a      	strh	r2, [r3, #0]
    OLED_UpdateAnimationManager(&Menu_AnimationManager); // 更新菜单动画管理器
 80023ae:	4811      	ldr	r0, [pc, #68]	@ (80023f4 <main+0xf8>)
 80023b0:	f005 fb7e 	bl	8007ab0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_AnimationManager); // 更新动画管理器
 80023b4:	480e      	ldr	r0, [pc, #56]	@ (80023f0 <main+0xf4>)
 80023b6:	f005 fb7b 	bl	8007ab0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Games_AnimationManager); // 更新游戏动画管理器
 80023ba:	480f      	ldr	r0, [pc, #60]	@ (80023f8 <main+0xfc>)
 80023bc:	f005 fb78 	bl	8007ab0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Tools_AnimationManager); // 更新工具动画管理器
 80023c0:	480e      	ldr	r0, [pc, #56]	@ (80023fc <main+0x100>)
 80023c2:	f005 fb75 	bl	8007ab0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Settings_AnimationManager); // 更新设置动画管理器
 80023c6:	480e      	ldr	r0, [pc, #56]	@ (8002400 <main+0x104>)
 80023c8:	f005 fb72 	bl	8007ab0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&About_AnimationManager); // 更新关于动画管理器
 80023cc:	480d      	ldr	r0, [pc, #52]	@ (8002404 <main+0x108>)
 80023ce:	f005 fb6f 	bl	8007ab0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Status_AnimationManager); // 更新状态动画管理器
 80023d2:	480d      	ldr	r0, [pc, #52]	@ (8002408 <main+0x10c>)
 80023d4:	f005 fb6c 	bl	8007ab0 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_Title_AnimationManager); // 更新标题动画管理器
 80023d8:	480c      	ldr	r0, [pc, #48]	@ (800240c <main+0x110>)
 80023da:	f005 fb69 	bl	8007ab0 <OLED_UpdateAnimationManager>
    OLED_SmartUpdate(); // 智能更新显示
 80023de:	f004 fae9 	bl	80069b4 <OLED_SmartUpdate>
    OLED_ClearBuffer();
 80023e2:	e7d2      	b.n	800238a <main+0x8e>
 80023e4:	41580000 	.word	0x41580000
 80023e8:	20000b20 	.word	0x20000b20
 80023ec:	20004010 	.word	0x20004010
 80023f0:	200039c0 	.word	0x200039c0
 80023f4:	20001014 	.word	0x20001014
 80023f8:	20001608 	.word	0x20001608
 80023fc:	20001bfc 	.word	0x20001bfc
 8002400:	200021f0 	.word	0x200021f0
 8002404:	200027e4 	.word	0x200027e4
 8002408:	20002dd8 	.word	0x20002dd8
 800240c:	200033cc 	.word	0x200033cc
 8002410:	20000c00 	.word	0x20000c00
 8002414:	20000308 	.word	0x20000308

08002418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b090      	sub	sp, #64	@ 0x40
 800241c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800241e:	f107 0318 	add.w	r3, r7, #24
 8002422:	2228      	movs	r2, #40	@ 0x28
 8002424:	2100      	movs	r1, #0
 8002426:	4618      	mov	r0, r3
 8002428:	f009 f93d 	bl	800b6a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800242c:	1d3b      	adds	r3, r7, #4
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	605a      	str	r2, [r3, #4]
 8002434:	609a      	str	r2, [r3, #8]
 8002436:	60da      	str	r2, [r3, #12]
 8002438:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800243a:	2301      	movs	r3, #1
 800243c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800243e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002442:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002444:	2300      	movs	r3, #0
 8002446:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002448:	2301      	movs	r3, #1
 800244a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800244c:	2302      	movs	r3, #2
 800244e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002450:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002454:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002456:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800245a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800245c:	f107 0318 	add.w	r3, r7, #24
 8002460:	4618      	mov	r0, r3
 8002462:	f007 fc09 	bl	8009c78 <HAL_RCC_OscConfig>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800246c:	f000 f819 	bl	80024a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002470:	230f      	movs	r3, #15
 8002472:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002474:	2302      	movs	r3, #2
 8002476:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002478:	2300      	movs	r3, #0
 800247a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800247c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002480:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002486:	1d3b      	adds	r3, r7, #4
 8002488:	2102      	movs	r1, #2
 800248a:	4618      	mov	r0, r3
 800248c:	f007 fe76 	bl	800a17c <HAL_RCC_ClockConfig>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002496:	f000 f804 	bl	80024a2 <Error_Handler>
  }
}
 800249a:	bf00      	nop
 800249c:	3740      	adds	r7, #64	@ 0x40
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024a6:	b672      	cpsid	i
}
 80024a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024aa:	bf00      	nop
 80024ac:	e7fd      	b.n	80024aa <Error_Handler+0x8>
	...

080024b0 <OLED_InitBuffer>:
        0x22, 0x00, 0x07  // 页地址范围: 0-7
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 80024b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024ba:	2100      	movs	r1, #0
 80024bc:	4811      	ldr	r0, [pc, #68]	@ (8002504 <OLED_InitBuffer+0x54>)
 80024be:	f009 f8f2 	bl	800b6a6 <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 80024c2:	f240 4201 	movw	r2, #1025	@ 0x401
 80024c6:	2100      	movs	r1, #0
 80024c8:	480f      	ldr	r0, [pc, #60]	@ (8002508 <OLED_InitBuffer+0x58>)
 80024ca:	f009 f8ec 	bl	800b6a6 <memset>

    // 初始化第一个字节为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 80024ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002508 <OLED_InitBuffer+0x58>)
 80024d0:	2240      	movs	r2, #64	@ 0x40
 80024d2:	701a      	strb	r2, [r3, #0]

    // 初始化状态变量
    oled_update_flag = OLED_READY;
 80024d4:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <OLED_InitBuffer+0x5c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
    oled_dma_busy = OLED_READY;
 80024da:	4b0d      	ldr	r3, [pc, #52]	@ (8002510 <OLED_InitBuffer+0x60>)
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 80024e0:	2300      	movs	r3, #0
 80024e2:	71fb      	strb	r3, [r7, #7]
 80024e4:	e006      	b.n	80024f4 <OLED_InitBuffer+0x44>
    {
        oled_dirty_pages[i] = 1;
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002514 <OLED_InitBuffer+0x64>)
 80024ea:	2101      	movs	r1, #1
 80024ec:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	3301      	adds	r3, #1
 80024f2:	71fb      	strb	r3, [r7, #7]
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	2b07      	cmp	r3, #7
 80024f8:	d9f5      	bls.n	80024e6 <OLED_InitBuffer+0x36>
    }
}
 80024fa:	bf00      	nop
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	2000031c 	.word	0x2000031c
 8002508:	2000071c 	.word	0x2000071c
 800250c:	20000310 	.word	0x20000310
 8002510:	20000311 	.word	0x20000311
 8002514:	20000314 	.word	0x20000314

08002518 <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 800251e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002522:	2100      	movs	r1, #0
 8002524:	480a      	ldr	r0, [pc, #40]	@ (8002550 <OLED_ClearBuffer+0x38>)
 8002526:	f009 f8be 	bl	800b6a6 <memset>

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 800252a:	2300      	movs	r3, #0
 800252c:	71fb      	strb	r3, [r7, #7]
 800252e:	e006      	b.n	800253e <OLED_ClearBuffer+0x26>
    {
        oled_dirty_pages[i] = 1;
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	4a08      	ldr	r2, [pc, #32]	@ (8002554 <OLED_ClearBuffer+0x3c>)
 8002534:	2101      	movs	r1, #1
 8002536:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	3301      	adds	r3, #1
 800253c:	71fb      	strb	r3, [r7, #7]
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	2b07      	cmp	r3, #7
 8002542:	d9f5      	bls.n	8002530 <OLED_ClearBuffer+0x18>
    }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	2000031c 	.word	0x2000031c
 8002554:	20000314 	.word	0x20000314

08002558 <OLED_IsBusy>:

uint8_t OLED_IsBusy(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
    // 如果标记为忙，检查是否已经过了足够时间
    if (oled_update_flag)
 800255e:	4b0f      	ldr	r3, [pc, #60]	@ (800259c <OLED_IsBusy+0x44>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d007      	beq.n	8002578 <OLED_IsBusy+0x20>
    {
        // SSD1315/SSD1306 典型帧率约为60Hz，每帧约16.7ms
        // 可以根据需要调整刷新率，减小此值可以提高帧率
        uint32_t current_time = HAL_GetTick();
 8002568:	f006 fa9a 	bl	8008aa0 <HAL_GetTick>
 800256c:	6078      	str	r0, [r7, #4]
        if (current_time - oled_last_update_time >= 0)
 800256e:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <OLED_IsBusy+0x48>)
 8002570:	681b      	ldr	r3, [r3, #0]
        {
            oled_update_flag = OLED_READY; // 已经过了足够时间，不再忙
 8002572:	4b0a      	ldr	r3, [pc, #40]	@ (800259c <OLED_IsBusy+0x44>)
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
        }
    }

    // 如果DMA传输正在进行，也视为忙
    return (oled_update_flag || oled_dma_busy);
 8002578:	4b08      	ldr	r3, [pc, #32]	@ (800259c <OLED_IsBusy+0x44>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d104      	bne.n	800258c <OLED_IsBusy+0x34>
 8002582:	4b08      	ldr	r3, [pc, #32]	@ (80025a4 <OLED_IsBusy+0x4c>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <OLED_IsBusy+0x38>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <OLED_IsBusy+0x3a>
 8002590:	2300      	movs	r3, #0
 8002592:	b2db      	uxtb	r3, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000310 	.word	0x20000310
 80025a0:	2000030c 	.word	0x2000030c
 80025a4:	20000311 	.word	0x20000311

080025a8 <OLED_UpdateDisplayVSync>:

void OLED_UpdateDisplayVSync(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af02      	add	r7, sp, #8
    // 等待上一次更新完成
    while (OLED_IsBusy())
 80025ae:	bf00      	nop
 80025b0:	f7ff ffd2 	bl	8002558 <OLED_IsBusy>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1fa      	bne.n	80025b0 <OLED_UpdateDisplayVSync+0x8>
    {
        // 可以加入短暂延时或者让出CPU，但通常不会停留很久
    }

    oled_update_flag = OLED_BUSY;
 80025ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002638 <OLED_UpdateDisplayVSync+0x90>)
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 80025c0:	f006 fa6e 	bl	8008aa0 <HAL_GetTick>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4a1d      	ldr	r2, [pc, #116]	@ (800263c <OLED_UpdateDisplayVSync+0x94>)
 80025c8:	6013      	str	r3, [r2, #0]

    OLED_FrontBuffer[0] = 0x40;                                             // 数据控制字节：Co=0, D/C#=1 (数据)
 80025ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002640 <OLED_UpdateDisplayVSync+0x98>)
 80025cc:	2240      	movs	r2, #64	@ 0x40
 80025ce:	701a      	strb	r2, [r3, #0]
    memcpy(OLED_FrontBuffer + 1, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES); // 复制当前缓冲区到前缓冲区
 80025d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002644 <OLED_UpdateDisplayVSync+0x9c>)
 80025d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002648 <OLED_UpdateDisplayVSync+0xa0>)
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025dc:	461a      	mov	r2, r3
 80025de:	f009 f8f0 	bl	800b7c2 <memcpy>

    // 一次性发送所有命令
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 80025e2:	2300      	movs	r3, #0
 80025e4:	71fb      	strb	r3, [r7, #7]
 80025e6:	e008      	b.n	80025fa <OLED_UpdateDisplayVSync+0x52>
    {
        OLED_SendCommand(cmds[i]);
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	4a18      	ldr	r2, [pc, #96]	@ (800264c <OLED_UpdateDisplayVSync+0xa4>)
 80025ec:	5cd3      	ldrb	r3, [r2, r3]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f920 	bl	8002834 <OLED_SendCommand>
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	3301      	adds	r3, #1
 80025f8:	71fb      	strb	r3, [r7, #7]
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	2b07      	cmp	r3, #7
 80025fe:	d9f3      	bls.n	80025e8 <OLED_UpdateDisplayVSync+0x40>
    }


    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, OLED_WIDTH * OLED_PAGES + 1, HAL_MAX_DELAY);
 8002600:	f04f 33ff 	mov.w	r3, #4294967295
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	f240 4301 	movw	r3, #1025	@ 0x401
 800260a:	4a0d      	ldr	r2, [pc, #52]	@ (8002640 <OLED_UpdateDisplayVSync+0x98>)
 800260c:	2178      	movs	r1, #120	@ 0x78
 800260e:	4810      	ldr	r0, [pc, #64]	@ (8002650 <OLED_UpdateDisplayVSync+0xa8>)
 8002610:	f006 ffda 	bl	80095c8 <HAL_I2C_Master_Transmit>

    // 重置所有脏页标记
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8002614:	2300      	movs	r3, #0
 8002616:	71bb      	strb	r3, [r7, #6]
 8002618:	e006      	b.n	8002628 <OLED_UpdateDisplayVSync+0x80>
    {
        oled_dirty_pages[i] = 0;
 800261a:	79bb      	ldrb	r3, [r7, #6]
 800261c:	4a0d      	ldr	r2, [pc, #52]	@ (8002654 <OLED_UpdateDisplayVSync+0xac>)
 800261e:	2100      	movs	r1, #0
 8002620:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8002622:	79bb      	ldrb	r3, [r7, #6]
 8002624:	3301      	adds	r3, #1
 8002626:	71bb      	strb	r3, [r7, #6]
 8002628:	79bb      	ldrb	r3, [r7, #6]
 800262a:	2b07      	cmp	r3, #7
 800262c:	d9f5      	bls.n	800261a <OLED_UpdateDisplayVSync+0x72>
    }
}
 800262e:	bf00      	nop
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000310 	.word	0x20000310
 800263c:	2000030c 	.word	0x2000030c
 8002640:	2000071c 	.word	0x2000071c
 8002644:	2000071d 	.word	0x2000071d
 8002648:	2000031c 	.word	0x2000031c
 800264c:	0800e204 	.word	0x0800e204
 8002650:	20000270 	.word	0x20000270
 8002654:	20000314 	.word	0x20000314

08002658 <OLED_UpdateDisplayPartial>:
    }
}

// 局部更新显示函数
void OLED_UpdateDisplayPartial(uint8_t startPage, uint8_t endPage)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af02      	add	r7, sp, #8
 800265e:	4603      	mov	r3, r0
 8002660:	460a      	mov	r2, r1
 8002662:	71fb      	strb	r3, [r7, #7]
 8002664:	4613      	mov	r3, r2
 8002666:	71bb      	strb	r3, [r7, #6]
    // 边界检查
    if (startPage >= OLED_PAGES || endPage >= OLED_PAGES || startPage > endPage)
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	2b07      	cmp	r3, #7
 800266c:	d85c      	bhi.n	8002728 <OLED_UpdateDisplayPartial+0xd0>
 800266e:	79bb      	ldrb	r3, [r7, #6]
 8002670:	2b07      	cmp	r3, #7
 8002672:	d859      	bhi.n	8002728 <OLED_UpdateDisplayPartial+0xd0>
 8002674:	79fa      	ldrb	r2, [r7, #7]
 8002676:	79bb      	ldrb	r3, [r7, #6]
 8002678:	429a      	cmp	r2, r3
 800267a:	d855      	bhi.n	8002728 <OLED_UpdateDisplayPartial+0xd0>
        return;

    // 等待上一次更新完成
    while (OLED_IsBusy())
 800267c:	bf00      	nop
 800267e:	f7ff ff6b 	bl	8002558 <OLED_IsBusy>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1fa      	bne.n	800267e <OLED_UpdateDisplayPartial+0x26>
    {
        // 可以加入短暂延时或者让出CPU
    }

    oled_update_flag = OLED_BUSY;
 8002688:	4b29      	ldr	r3, [pc, #164]	@ (8002730 <OLED_UpdateDisplayPartial+0xd8>)
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 800268e:	f006 fa07 	bl	8008aa0 <HAL_GetTick>
 8002692:	4603      	mov	r3, r0
 8002694:	4a27      	ldr	r2, [pc, #156]	@ (8002734 <OLED_UpdateDisplayPartial+0xdc>)
 8002696:	6013      	str	r3, [r2, #0]

    // 设置页地址范围
    OLED_SendCommand(0x22);      // 页地址设置命令
 8002698:	2022      	movs	r0, #34	@ 0x22
 800269a:	f000 f8cb 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(startPage); // 起始页
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 f8c7 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(endPage);   // 结束页
 80026a6:	79bb      	ldrb	r3, [r7, #6]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 f8c3 	bl	8002834 <OLED_SendCommand>

    // 设置列地址范围（总是更新整行）
    OLED_SendCommand(0x21); // 列地址设置命令
 80026ae:	2021      	movs	r0, #33	@ 0x21
 80026b0:	f000 f8c0 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 起始列
 80026b4:	2000      	movs	r0, #0
 80026b6:	f000 f8bd 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x7F); // 结束列 (127)
 80026ba:	207f      	movs	r0, #127	@ 0x7f
 80026bc:	f000 f8ba 	bl	8002834 <OLED_SendCommand>

    // 计算需要传输的数据长度
    uint16_t dataLen = OLED_WIDTH * (endPage - startPage + 1);
 80026c0:	79ba      	ldrb	r2, [r7, #6]
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	3301      	adds	r3, #1
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	01db      	lsls	r3, r3, #7
 80026cc:	81bb      	strh	r3, [r7, #12]

    // 前缓冲区的第一个字节设为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 80026ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002738 <OLED_UpdateDisplayPartial+0xe0>)
 80026d0:	2240      	movs	r2, #64	@ 0x40
 80026d2:	701a      	strb	r2, [r3, #0]

    // 只复制需要更新的页
    for (uint8_t page = startPage; page <= endPage; page++)
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	73fb      	strb	r3, [r7, #15]
 80026d8:	e016      	b.n	8002708 <OLED_UpdateDisplayPartial+0xb0>
    {
        memcpy(
            OLED_FrontBuffer + 1 + (page - startPage) * OLED_WIDTH,
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	01db      	lsls	r3, r3, #7
 80026e2:	3301      	adds	r3, #1
        memcpy(
 80026e4:	4a14      	ldr	r2, [pc, #80]	@ (8002738 <OLED_UpdateDisplayPartial+0xe0>)
 80026e6:	1898      	adds	r0, r3, r2
            OLED_BackBuffer + page * OLED_WIDTH,
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	01db      	lsls	r3, r3, #7
 80026ec:	461a      	mov	r2, r3
        memcpy(
 80026ee:	4b13      	ldr	r3, [pc, #76]	@ (800273c <OLED_UpdateDisplayPartial+0xe4>)
 80026f0:	4413      	add	r3, r2
 80026f2:	2280      	movs	r2, #128	@ 0x80
 80026f4:	4619      	mov	r1, r3
 80026f6:	f009 f864 	bl	800b7c2 <memcpy>
            OLED_WIDTH);
        oled_dirty_pages[page] = 0; // 重置脏页标记
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	4a10      	ldr	r2, [pc, #64]	@ (8002740 <OLED_UpdateDisplayPartial+0xe8>)
 80026fe:	2100      	movs	r1, #0
 8002700:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = startPage; page <= endPage; page++)
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	3301      	adds	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	79bb      	ldrb	r3, [r7, #6]
 800270c:	429a      	cmp	r2, r3
 800270e:	d9e4      	bls.n	80026da <OLED_UpdateDisplayPartial+0x82>
    }

    // 发送数据
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, dataLen + 1, HAL_MAX_DELAY);
 8002710:	89bb      	ldrh	r3, [r7, #12]
 8002712:	3301      	adds	r3, #1
 8002714:	b29b      	uxth	r3, r3
 8002716:	f04f 32ff 	mov.w	r2, #4294967295
 800271a:	9200      	str	r2, [sp, #0]
 800271c:	4a06      	ldr	r2, [pc, #24]	@ (8002738 <OLED_UpdateDisplayPartial+0xe0>)
 800271e:	2178      	movs	r1, #120	@ 0x78
 8002720:	4808      	ldr	r0, [pc, #32]	@ (8002744 <OLED_UpdateDisplayPartial+0xec>)
 8002722:	f006 ff51 	bl	80095c8 <HAL_I2C_Master_Transmit>
 8002726:	e000      	b.n	800272a <OLED_UpdateDisplayPartial+0xd2>
        return;
 8002728:	bf00      	nop
}
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000310 	.word	0x20000310
 8002734:	2000030c 	.word	0x2000030c
 8002738:	2000071c 	.word	0x2000071c
 800273c:	2000031c 	.word	0x2000031c
 8002740:	20000314 	.word	0x20000314
 8002744:	20000270 	.word	0x20000270

08002748 <OLED_WritePixel>:

void OLED_WritePixel(int16_t x, int16_t y, uint8_t color)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	80fb      	strh	r3, [r7, #6]
 8002752:	460b      	mov	r3, r1
 8002754:	80bb      	strh	r3, [r7, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	70fb      	strb	r3, [r7, #3]
    // 边界检查
    if (x >= OLED_WIDTH || x < 0 || y >= OLED_HEIGHT || y < 0)
 800275a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800275e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002760:	dc5e      	bgt.n	8002820 <OLED_WritePixel+0xd8>
 8002762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002766:	2b00      	cmp	r3, #0
 8002768:	db5a      	blt.n	8002820 <OLED_WritePixel+0xd8>
 800276a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800276e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002770:	dc56      	bgt.n	8002820 <OLED_WritePixel+0xd8>
 8002772:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	db52      	blt.n	8002820 <OLED_WritePixel+0xd8>
        return;

    // 计算像素所在的字节位置
    uint16_t byte_index = x + (y / 8) * OLED_WIDTH;
 800277a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	da00      	bge.n	8002784 <OLED_WritePixel+0x3c>
 8002782:	3307      	adds	r3, #7
 8002784:	10db      	asrs	r3, r3, #3
 8002786:	b21b      	sxth	r3, r3
 8002788:	b29b      	uxth	r3, r3
 800278a:	01db      	lsls	r3, r3, #7
 800278c:	b29a      	uxth	r2, r3
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	4413      	add	r3, r2
 8002792:	81fb      	strh	r3, [r7, #14]
    uint8_t bit_position = y % 8;
 8002794:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002798:	425a      	negs	r2, r3
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	f002 0207 	and.w	r2, r2, #7
 80027a2:	bf58      	it	pl
 80027a4:	4253      	negpl	r3, r2
 80027a6:	b21b      	sxth	r3, r3
 80027a8:	737b      	strb	r3, [r7, #13]
    uint8_t page = y / 8; // 计算所在页
 80027aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	da00      	bge.n	80027b4 <OLED_WritePixel+0x6c>
 80027b2:	3307      	adds	r3, #7
 80027b4:	10db      	asrs	r3, r3, #3
 80027b6:	b21b      	sxth	r3, r3
 80027b8:	733b      	strb	r3, [r7, #12]

    // 记录当前像素值
    uint8_t old_value = OLED_BackBuffer[byte_index];
 80027ba:	89fb      	ldrh	r3, [r7, #14]
 80027bc:	4a1b      	ldr	r2, [pc, #108]	@ (800282c <OLED_WritePixel+0xe4>)
 80027be:	5cd3      	ldrb	r3, [r2, r3]
 80027c0:	72fb      	strb	r3, [r7, #11]

    if (color) // 如果需要点亮像素
 80027c2:	78fb      	ldrb	r3, [r7, #3]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00f      	beq.n	80027e8 <OLED_WritePixel+0xa0>
        OLED_BackBuffer[byte_index] |= (1 << bit_position);
 80027c8:	89fb      	ldrh	r3, [r7, #14]
 80027ca:	4a18      	ldr	r2, [pc, #96]	@ (800282c <OLED_WritePixel+0xe4>)
 80027cc:	5cd3      	ldrb	r3, [r2, r3]
 80027ce:	b25a      	sxtb	r2, r3
 80027d0:	7b7b      	ldrb	r3, [r7, #13]
 80027d2:	2101      	movs	r1, #1
 80027d4:	fa01 f303 	lsl.w	r3, r1, r3
 80027d8:	b25b      	sxtb	r3, r3
 80027da:	4313      	orrs	r3, r2
 80027dc:	b25a      	sxtb	r2, r3
 80027de:	89fb      	ldrh	r3, [r7, #14]
 80027e0:	b2d1      	uxtb	r1, r2
 80027e2:	4a12      	ldr	r2, [pc, #72]	@ (800282c <OLED_WritePixel+0xe4>)
 80027e4:	54d1      	strb	r1, [r2, r3]
 80027e6:	e010      	b.n	800280a <OLED_WritePixel+0xc2>
    else // 如果需要熄灭像素
        OLED_BackBuffer[byte_index] &= ~(1 << bit_position);
 80027e8:	89fb      	ldrh	r3, [r7, #14]
 80027ea:	4a10      	ldr	r2, [pc, #64]	@ (800282c <OLED_WritePixel+0xe4>)
 80027ec:	5cd3      	ldrb	r3, [r2, r3]
 80027ee:	b25a      	sxtb	r2, r3
 80027f0:	7b7b      	ldrb	r3, [r7, #13]
 80027f2:	2101      	movs	r1, #1
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	b25b      	sxtb	r3, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	b25b      	sxtb	r3, r3
 80027fe:	4013      	ands	r3, r2
 8002800:	b25a      	sxtb	r2, r3
 8002802:	89fb      	ldrh	r3, [r7, #14]
 8002804:	b2d1      	uxtb	r1, r2
 8002806:	4a09      	ldr	r2, [pc, #36]	@ (800282c <OLED_WritePixel+0xe4>)
 8002808:	54d1      	strb	r1, [r2, r3]

    // 如果像素值发生变化，标记该页为脏
    if (old_value != OLED_BackBuffer[byte_index])
 800280a:	89fb      	ldrh	r3, [r7, #14]
 800280c:	4a07      	ldr	r2, [pc, #28]	@ (800282c <OLED_WritePixel+0xe4>)
 800280e:	5cd3      	ldrb	r3, [r2, r3]
 8002810:	7afa      	ldrb	r2, [r7, #11]
 8002812:	429a      	cmp	r2, r3
 8002814:	d005      	beq.n	8002822 <OLED_WritePixel+0xda>
    {
        oled_dirty_pages[page] = 1;
 8002816:	7b3b      	ldrb	r3, [r7, #12]
 8002818:	4a05      	ldr	r2, [pc, #20]	@ (8002830 <OLED_WritePixel+0xe8>)
 800281a:	2101      	movs	r1, #1
 800281c:	54d1      	strb	r1, [r2, r3]
 800281e:	e000      	b.n	8002822 <OLED_WritePixel+0xda>
        return;
 8002820:	bf00      	nop
    }
}
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	2000031c 	.word	0x2000031c
 8002830:	20000314 	.word	0x20000314

08002834 <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af02      	add	r7, sp, #8
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 800283e:	2300      	movs	r3, #0
 8002840:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8002846:	f107 020c 	add.w	r2, r7, #12
 800284a:	f04f 33ff 	mov.w	r3, #4294967295
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	2302      	movs	r3, #2
 8002852:	2178      	movs	r1, #120	@ 0x78
 8002854:	4803      	ldr	r0, [pc, #12]	@ (8002864 <OLED_SendCommand+0x30>)
 8002856:	f006 feb7 	bl	80095c8 <HAL_I2C_Master_Transmit>
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000270 	.word	0x20000270

08002868 <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 800286c:	2064      	movs	r0, #100	@ 0x64
 800286e:	f006 f921 	bl	8008ab4 <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 8002872:	20ae      	movs	r0, #174	@ 0xae
 8002874:	f7ff ffde 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 8002878:	20d5      	movs	r0, #213	@ 0xd5
 800287a:	f7ff ffdb 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 800287e:	2080      	movs	r0, #128	@ 0x80
 8002880:	f7ff ffd8 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8002884:	20a8      	movs	r0, #168	@ 0xa8
 8002886:	f7ff ffd5 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 800288a:	203f      	movs	r0, #63	@ 0x3f
 800288c:	f7ff ffd2 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8002890:	20d3      	movs	r0, #211	@ 0xd3
 8002892:	f7ff ffcf 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 8002896:	2000      	movs	r0, #0
 8002898:	f7ff ffcc 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 800289c:	2040      	movs	r0, #64	@ 0x40
 800289e:	f7ff ffc9 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 80028a2:	208d      	movs	r0, #141	@ 0x8d
 80028a4:	f7ff ffc6 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 80028a8:	2014      	movs	r0, #20
 80028aa:	f7ff ffc3 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 80028ae:	2020      	movs	r0, #32
 80028b0:	f7ff ffc0 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 80028b4:	2000      	movs	r0, #0
 80028b6:	f7ff ffbd 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 80028ba:	20a1      	movs	r0, #161	@ 0xa1
 80028bc:	f7ff ffba 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 80028c0:	20c8      	movs	r0, #200	@ 0xc8
 80028c2:	f7ff ffb7 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 80028c6:	20da      	movs	r0, #218	@ 0xda
 80028c8:	f7ff ffb4 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 80028cc:	2012      	movs	r0, #18
 80028ce:	f7ff ffb1 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 80028d2:	2081      	movs	r0, #129	@ 0x81
 80028d4:	f7ff ffae 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 80028d8:	20cf      	movs	r0, #207	@ 0xcf
 80028da:	f7ff ffab 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 80028de:	20d9      	movs	r0, #217	@ 0xd9
 80028e0:	f7ff ffa8 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 80028e4:	20f1      	movs	r0, #241	@ 0xf1
 80028e6:	f7ff ffa5 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 80028ea:	20db      	movs	r0, #219	@ 0xdb
 80028ec:	f7ff ffa2 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 80028f0:	2030      	movs	r0, #48	@ 0x30
 80028f2:	f7ff ff9f 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 80028f6:	20a4      	movs	r0, #164	@ 0xa4
 80028f8:	f7ff ff9c 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 80028fc:	20a6      	movs	r0, #166	@ 0xa6
 80028fe:	f7ff ff99 	bl	8002834 <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 8002902:	202e      	movs	r0, #46	@ 0x2e
 8002904:	f7ff ff96 	bl	8002834 <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 8002908:	f7ff fdd2 	bl	80024b0 <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 800290c:	f7ff fe04 	bl	8002518 <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 8002910:	20af      	movs	r0, #175	@ 0xaf
 8002912:	f7ff ff8f 	bl	8002834 <OLED_SendCommand>
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <OLED_InvertArea>:

// 区域反色功能 - 将指定矩形区域内的像素颜色反转 //! UPDATEDISPLAY REQUIRED
void OLED_InvertArea(int16_t x, int16_t y, uint8_t width, uint8_t height)
{
 800291c:	b490      	push	{r4, r7}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
 8002922:	4604      	mov	r4, r0
 8002924:	4608      	mov	r0, r1
 8002926:	4611      	mov	r1, r2
 8002928:	461a      	mov	r2, r3
 800292a:	4623      	mov	r3, r4
 800292c:	80fb      	strh	r3, [r7, #6]
 800292e:	4603      	mov	r3, r0
 8002930:	80bb      	strh	r3, [r7, #4]
 8002932:	460b      	mov	r3, r1
 8002934:	70fb      	strb	r3, [r7, #3]
 8002936:	4613      	mov	r3, r2
 8002938:	70bb      	strb	r3, [r7, #2]
    if (width == 0 || height == 0)
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 809d 	beq.w	8002a7c <OLED_InvertArea+0x160>
 8002942:	78bb      	ldrb	r3, [r7, #2]
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 8099 	beq.w	8002a7c <OLED_InvertArea+0x160>
        return;

    int16_t x_start_on_screen = x;
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	83fb      	strh	r3, [r7, #30]
    int16_t y_start_on_screen = y;
 800294e:	88bb      	ldrh	r3, [r7, #4]
 8002950:	83bb      	strh	r3, [r7, #28]
    int16_t x_end_on_screen = x + width - 1;
 8002952:	78fb      	ldrb	r3, [r7, #3]
 8002954:	b29a      	uxth	r2, r3
 8002956:	88fb      	ldrh	r3, [r7, #6]
 8002958:	4413      	add	r3, r2
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29b      	uxth	r3, r3
 8002960:	837b      	strh	r3, [r7, #26]
    int16_t y_end_on_screen = y + height - 1;
 8002962:	78bb      	ldrb	r3, [r7, #2]
 8002964:	b29a      	uxth	r2, r3
 8002966:	88bb      	ldrh	r3, [r7, #4]
 8002968:	4413      	add	r3, r2
 800296a:	b29b      	uxth	r3, r3
 800296c:	3b01      	subs	r3, #1
 800296e:	b29b      	uxth	r3, r3
 8002970:	833b      	strh	r3, [r7, #24]

    // Clip to screen boundaries
    if (x_start_on_screen < 0)
 8002972:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002976:	2b00      	cmp	r3, #0
 8002978:	da01      	bge.n	800297e <OLED_InvertArea+0x62>
        x_start_on_screen = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	83fb      	strh	r3, [r7, #30]
    if (y_start_on_screen < 0)
 800297e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002982:	2b00      	cmp	r3, #0
 8002984:	da01      	bge.n	800298a <OLED_InvertArea+0x6e>
        y_start_on_screen = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	83bb      	strh	r3, [r7, #28]
    if (x_end_on_screen >= OLED_WIDTH)
 800298a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800298e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002990:	dd01      	ble.n	8002996 <OLED_InvertArea+0x7a>
        x_end_on_screen = OLED_WIDTH - 1;
 8002992:	237f      	movs	r3, #127	@ 0x7f
 8002994:	837b      	strh	r3, [r7, #26]
    if (y_end_on_screen >= OLED_HEIGHT)
 8002996:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800299a:	2b3f      	cmp	r3, #63	@ 0x3f
 800299c:	dd01      	ble.n	80029a2 <OLED_InvertArea+0x86>
        y_end_on_screen = OLED_HEIGHT - 1;
 800299e:	233f      	movs	r3, #63	@ 0x3f
 80029a0:	833b      	strh	r3, [r7, #24]

    // If clipped area is invalid (e.g., entirely off-screen after clipping)
    if (x_start_on_screen > x_end_on_screen || y_start_on_screen > y_end_on_screen)
 80029a2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80029a6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	dc68      	bgt.n	8002a80 <OLED_InvertArea+0x164>
 80029ae:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80029b2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	dc62      	bgt.n	8002a80 <OLED_InvertArea+0x164>
        return;

    // 计算涉及的页范围
    uint8_t start_page = y_start_on_screen / 8;
 80029ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	da00      	bge.n	80029c4 <OLED_InvertArea+0xa8>
 80029c2:	3307      	adds	r3, #7
 80029c4:	10db      	asrs	r3, r3, #3
 80029c6:	b21b      	sxth	r3, r3
 80029c8:	747b      	strb	r3, [r7, #17]
    uint8_t end_page = y_end_on_screen / 8;
 80029ca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	da00      	bge.n	80029d4 <OLED_InvertArea+0xb8>
 80029d2:	3307      	adds	r3, #7
 80029d4:	10db      	asrs	r3, r3, #3
 80029d6:	b21b      	sxth	r3, r3
 80029d8:	743b      	strb	r3, [r7, #16]

    // 标记受影响的页为脏页
    extern volatile uint8_t oled_dirty_pages[];
    for (uint8_t page = start_page; page <= end_page; page++)
 80029da:	7c7b      	ldrb	r3, [r7, #17]
 80029dc:	75fb      	strb	r3, [r7, #23]
 80029de:	e006      	b.n	80029ee <OLED_InvertArea+0xd2>
    {
        oled_dirty_pages[page] = 1;
 80029e0:	7dfb      	ldrb	r3, [r7, #23]
 80029e2:	4a2a      	ldr	r2, [pc, #168]	@ (8002a8c <OLED_InvertArea+0x170>)
 80029e4:	2101      	movs	r1, #1
 80029e6:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = start_page; page <= end_page; page++)
 80029e8:	7dfb      	ldrb	r3, [r7, #23]
 80029ea:	3301      	adds	r3, #1
 80029ec:	75fb      	strb	r3, [r7, #23]
 80029ee:	7dfa      	ldrb	r2, [r7, #23]
 80029f0:	7c3b      	ldrb	r3, [r7, #16]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d9f4      	bls.n	80029e0 <OLED_InvertArea+0xc4>
    }

    // 优化的像素更新逻辑 - 按行处理以提高缓存命中率
    for (int16_t j = y_start_on_screen; j <= y_end_on_screen; j++)
 80029f6:	8bbb      	ldrh	r3, [r7, #28]
 80029f8:	82bb      	strh	r3, [r7, #20]
 80029fa:	e038      	b.n	8002a6e <OLED_InvertArea+0x152>
    {
        uint8_t page = (uint8_t)j / 8;
 80029fc:	8abb      	ldrh	r3, [r7, #20]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	08db      	lsrs	r3, r3, #3
 8002a02:	73fb      	strb	r3, [r7, #15]
        uint8_t bit_position = (uint8_t)j % 8;
 8002a04:	8abb      	ldrh	r3, [r7, #20]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	73bb      	strb	r3, [r7, #14]
        uint16_t byte_index_base = page * OLED_WIDTH;
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	01db      	lsls	r3, r3, #7
 8002a14:	81bb      	strh	r3, [r7, #12]

        // 处理当前行上的所有像素
        for (int16_t i = x_start_on_screen; i <= x_end_on_screen; i++)
 8002a16:	8bfb      	ldrh	r3, [r7, #30]
 8002a18:	827b      	strh	r3, [r7, #18]
 8002a1a:	e01c      	b.n	8002a56 <OLED_InvertArea+0x13a>
        {
            uint16_t byte_index = byte_index_base + i;
 8002a1c:	8a7a      	ldrh	r2, [r7, #18]
 8002a1e:	89bb      	ldrh	r3, [r7, #12]
 8002a20:	4413      	add	r3, r2
 8002a22:	817b      	strh	r3, [r7, #10]

            // 反转位
            if (byte_index < sizeof(OLED_BackBuffer))
 8002a24:	897b      	ldrh	r3, [r7, #10]
 8002a26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a2a:	d20e      	bcs.n	8002a4a <OLED_InvertArea+0x12e>
            {
                OLED_BackBuffer[byte_index] ^= (1 << bit_position);
 8002a2c:	897b      	ldrh	r3, [r7, #10]
 8002a2e:	4a18      	ldr	r2, [pc, #96]	@ (8002a90 <OLED_InvertArea+0x174>)
 8002a30:	5cd3      	ldrb	r3, [r2, r3]
 8002a32:	b25a      	sxtb	r2, r3
 8002a34:	7bbb      	ldrb	r3, [r7, #14]
 8002a36:	2101      	movs	r1, #1
 8002a38:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3c:	b25b      	sxtb	r3, r3
 8002a3e:	4053      	eors	r3, r2
 8002a40:	b25a      	sxtb	r2, r3
 8002a42:	897b      	ldrh	r3, [r7, #10]
 8002a44:	b2d1      	uxtb	r1, r2
 8002a46:	4a12      	ldr	r2, [pc, #72]	@ (8002a90 <OLED_InvertArea+0x174>)
 8002a48:	54d1      	strb	r1, [r2, r3]
        for (int16_t i = x_start_on_screen; i <= x_end_on_screen; i++)
 8002a4a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3301      	adds	r3, #1
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	827b      	strh	r3, [r7, #18]
 8002a56:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002a5a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	dddc      	ble.n	8002a1c <OLED_InvertArea+0x100>
    for (int16_t j = y_start_on_screen; j <= y_end_on_screen; j++)
 8002a62:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	3301      	adds	r3, #1
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	82bb      	strh	r3, [r7, #20]
 8002a6e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002a72:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	ddc0      	ble.n	80029fc <OLED_InvertArea+0xe0>
 8002a7a:	e002      	b.n	8002a82 <OLED_InvertArea+0x166>
        return;
 8002a7c:	bf00      	nop
 8002a7e:	e000      	b.n	8002a82 <OLED_InvertArea+0x166>
        return;
 8002a80:	bf00      	nop
            }
        }
    }
}
 8002a82:	3720      	adds	r7, #32
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc90      	pop	{r4, r7}
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20000314 	.word	0x20000314
 8002a90:	2000031c 	.word	0x2000031c

08002a94 <OLED_DisplayChar>:
    OLED_SendCommand(0x00 + (x & 0x0F));        // 设置低4位列地址
    OLED_SendCommand(0x10 + ((x >> 4) & 0x0F)); // 设置高4位列地址
}

void OLED_DisplayChar(int16_t x, int16_t y, char ch) //! UPDATEDISPLAY REQUIRED
{
 8002a94:	b480      	push	{r7}
 8002a96:	b089      	sub	sp, #36	@ 0x24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	80fb      	strh	r3, [r7, #6]
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	80bb      	strh	r3, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	70fb      	strb	r3, [r7, #3]
    const uint8_t font_width = 6;
 8002aa6:	2306      	movs	r3, #6
 8002aa8:	773b      	strb	r3, [r7, #28]
    const uint8_t font_height = 8;
 8002aaa:	2308      	movs	r3, #8
 8002aac:	76fb      	strb	r3, [r7, #27]

    if (ch < 32)
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	2b1f      	cmp	r3, #31
 8002ab2:	f240 80a8 	bls.w	8002c06 <OLED_DisplayChar+0x172>
        return;

    uint8_t c = ch - 32;
 8002ab6:	78fb      	ldrb	r3, [r7, #3]
 8002ab8:	3b20      	subs	r3, #32
 8002aba:	76bb      	strb	r3, [r7, #26]

    uint8_t start_page = (y >= 0) ? (y / 8) : 0;
 8002abc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	db08      	blt.n	8002ad6 <OLED_DisplayChar+0x42>
 8002ac4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	da00      	bge.n	8002ace <OLED_DisplayChar+0x3a>
 8002acc:	3307      	adds	r3, #7
 8002ace:	10db      	asrs	r3, r3, #3
 8002ad0:	b21b      	sxth	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	e000      	b.n	8002ad8 <OLED_DisplayChar+0x44>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	767b      	strb	r3, [r7, #25]
    uint8_t end_page = ((y + font_height - 1) < OLED_HEIGHT) ? ((y + font_height - 1) / 8) : (OLED_HEIGHT / 8 - 1);
 8002ada:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002ade:	7efb      	ldrb	r3, [r7, #27]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	2b40      	cmp	r3, #64	@ 0x40
 8002ae4:	dc0a      	bgt.n	8002afc <OLED_DisplayChar+0x68>
 8002ae6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002aea:	7efb      	ldrb	r3, [r7, #27]
 8002aec:	4413      	add	r3, r2
 8002aee:	3b01      	subs	r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	da00      	bge.n	8002af6 <OLED_DisplayChar+0x62>
 8002af4:	3307      	adds	r3, #7
 8002af6:	10db      	asrs	r3, r3, #3
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	e000      	b.n	8002afe <OLED_DisplayChar+0x6a>
 8002afc:	2307      	movs	r3, #7
 8002afe:	763b      	strb	r3, [r7, #24]

    extern volatile uint8_t oled_dirty_pages[];
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 8002b00:	7e7b      	ldrb	r3, [r7, #25]
 8002b02:	77fb      	strb	r3, [r7, #31]
 8002b04:	e006      	b.n	8002b14 <OLED_DisplayChar+0x80>
    {
        oled_dirty_pages[page] = 1;
 8002b06:	7ffb      	ldrb	r3, [r7, #31]
 8002b08:	4a42      	ldr	r2, [pc, #264]	@ (8002c14 <OLED_DisplayChar+0x180>)
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 8002b0e:	7ffb      	ldrb	r3, [r7, #31]
 8002b10:	3301      	adds	r3, #1
 8002b12:	77fb      	strb	r3, [r7, #31]
 8002b14:	7ffa      	ldrb	r2, [r7, #31]
 8002b16:	7e3b      	ldrb	r3, [r7, #24]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d802      	bhi.n	8002b22 <OLED_DisplayChar+0x8e>
 8002b1c:	7ffb      	ldrb	r3, [r7, #31]
 8002b1e:	2b07      	cmp	r3, #7
 8002b20:	d9f1      	bls.n	8002b06 <OLED_DisplayChar+0x72>
    }
    // 按列渲染
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8002b22:	2300      	movs	r3, #0
 8002b24:	77bb      	strb	r3, [r7, #30]
 8002b26:	e069      	b.n	8002bfc <OLED_DisplayChar+0x168>
    {
        int16_t screen_x = x + char_col;
 8002b28:	7fbb      	ldrb	r3, [r7, #30]
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	4413      	add	r3, r2
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	82fb      	strh	r3, [r7, #22]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 8002b34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	db5b      	blt.n	8002bf4 <OLED_DisplayChar+0x160>
 8002b3c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b40:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b42:	dc57      	bgt.n	8002bf4 <OLED_DisplayChar+0x160>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 8002b44:	7ebb      	ldrb	r3, [r7, #26]
 8002b46:	7f3a      	ldrb	r2, [r7, #28]
 8002b48:	fb03 f202 	mul.w	r2, r3, r2
 8002b4c:	7fbb      	ldrb	r3, [r7, #30]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8002b54:	d259      	bcs.n	8002c0a <OLED_DisplayChar+0x176>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 8002b56:	7ebb      	ldrb	r3, [r7, #26]
 8002b58:	7f3a      	ldrb	r2, [r7, #28]
 8002b5a:	fb03 f202 	mul.w	r2, r3, r2
 8002b5e:	7fbb      	ldrb	r3, [r7, #30]
 8002b60:	4413      	add	r3, r2
 8002b62:	4a2d      	ldr	r2, [pc, #180]	@ (8002c18 <OLED_DisplayChar+0x184>)
 8002b64:	5cd3      	ldrb	r3, [r2, r3]
 8002b66:	757b      	strb	r3, [r7, #21]

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8002b68:	2300      	movs	r3, #0
 8002b6a:	777b      	strb	r3, [r7, #29]
 8002b6c:	e03d      	b.n	8002bea <OLED_DisplayChar+0x156>
        {
            int16_t screen_y = y + char_row_bit;
 8002b6e:	7f7b      	ldrb	r3, [r7, #29]
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	88bb      	ldrh	r3, [r7, #4]
 8002b74:	4413      	add	r3, r2
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	827b      	strh	r3, [r7, #18]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 8002b7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	db2f      	blt.n	8002be2 <OLED_DisplayChar+0x14e>
 8002b82:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b86:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b88:	dc2b      	bgt.n	8002be2 <OLED_DisplayChar+0x14e>
                continue;

            if ((font_data_col >> char_row_bit) & 0x01)
 8002b8a:	7d7a      	ldrb	r2, [r7, #21]
 8002b8c:	7f7b      	ldrb	r3, [r7, #29]
 8002b8e:	fa42 f303 	asr.w	r3, r2, r3
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d024      	beq.n	8002be4 <OLED_DisplayChar+0x150>
            {
                uint8_t page = (uint8_t)screen_y / 8;
 8002b9a:	8a7b      	ldrh	r3, [r7, #18]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	08db      	lsrs	r3, r3, #3
 8002ba0:	747b      	strb	r3, [r7, #17]
                uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 8002ba2:	8a7b      	ldrh	r3, [r7, #18]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	743b      	strb	r3, [r7, #16]
                uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 8002bac:	7c7b      	ldrb	r3, [r7, #17]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	01db      	lsls	r3, r3, #7
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	8afb      	ldrh	r3, [r7, #22]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	81fb      	strh	r3, [r7, #14]

                if (buffer_index < sizeof(OLED_BackBuffer))
 8002bba:	89fb      	ldrh	r3, [r7, #14]
 8002bbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bc0:	d210      	bcs.n	8002be4 <OLED_DisplayChar+0x150>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 8002bc2:	89fb      	ldrh	r3, [r7, #14]
 8002bc4:	4a15      	ldr	r2, [pc, #84]	@ (8002c1c <OLED_DisplayChar+0x188>)
 8002bc6:	5cd3      	ldrb	r3, [r2, r3]
 8002bc8:	b25a      	sxtb	r2, r3
 8002bca:	7c3b      	ldrb	r3, [r7, #16]
 8002bcc:	2101      	movs	r1, #1
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	b25b      	sxtb	r3, r3
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	b25a      	sxtb	r2, r3
 8002bd8:	89fb      	ldrh	r3, [r7, #14]
 8002bda:	b2d1      	uxtb	r1, r2
 8002bdc:	4a0f      	ldr	r2, [pc, #60]	@ (8002c1c <OLED_DisplayChar+0x188>)
 8002bde:	54d1      	strb	r1, [r2, r3]
 8002be0:	e000      	b.n	8002be4 <OLED_DisplayChar+0x150>
                continue;
 8002be2:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8002be4:	7f7b      	ldrb	r3, [r7, #29]
 8002be6:	3301      	adds	r3, #1
 8002be8:	777b      	strb	r3, [r7, #29]
 8002bea:	7f7a      	ldrb	r2, [r7, #29]
 8002bec:	7efb      	ldrb	r3, [r7, #27]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d3bd      	bcc.n	8002b6e <OLED_DisplayChar+0xda>
 8002bf2:	e000      	b.n	8002bf6 <OLED_DisplayChar+0x162>
            continue;
 8002bf4:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8002bf6:	7fbb      	ldrb	r3, [r7, #30]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	77bb      	strb	r3, [r7, #30]
 8002bfc:	7fba      	ldrb	r2, [r7, #30]
 8002bfe:	7f3b      	ldrb	r3, [r7, #28]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d391      	bcc.n	8002b28 <OLED_DisplayChar+0x94>
 8002c04:	e002      	b.n	8002c0c <OLED_DisplayChar+0x178>
        return;
 8002c06:	bf00      	nop
 8002c08:	e000      	b.n	8002c0c <OLED_DisplayChar+0x178>
            break;
 8002c0a:	bf00      	nop
                }
            }
        }
    }
}
 8002c0c:	3724      	adds	r7, #36	@ 0x24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	20000314 	.word	0x20000314
 8002c18:	0800dfc4 	.word	0x0800dfc4
 8002c1c:	2000031c 	.word	0x2000031c

08002c20 <OLED_DisplayCharInverted>:

void OLED_DisplayCharInverted(int16_t x, int16_t y, char ch, uint8_t inverted) //! UPDATEDISPLAY REQUIRED
{
 8002c20:	b490      	push	{r4, r7}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4604      	mov	r4, r0
 8002c28:	4608      	mov	r0, r1
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4623      	mov	r3, r4
 8002c30:	80fb      	strh	r3, [r7, #6]
 8002c32:	4603      	mov	r3, r0
 8002c34:	80bb      	strh	r3, [r7, #4]
 8002c36:	460b      	mov	r3, r1
 8002c38:	70fb      	strb	r3, [r7, #3]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	70bb      	strb	r3, [r7, #2]
    const uint8_t font_width = 6;
 8002c3e:	2306      	movs	r3, #6
 8002c40:	753b      	strb	r3, [r7, #20]
    const uint8_t font_height = 8;
 8002c42:	2308      	movs	r3, #8
 8002c44:	74fb      	strb	r3, [r7, #19]

    if (ch < 32)
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	2b1f      	cmp	r3, #31
 8002c4a:	f240 808e 	bls.w	8002d6a <OLED_DisplayCharInverted+0x14a>
        return;

    uint8_t c = ch - 32;
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	3b20      	subs	r3, #32
 8002c52:	74bb      	strb	r3, [r7, #18]

    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8002c54:	2300      	movs	r3, #0
 8002c56:	75fb      	strb	r3, [r7, #23]
 8002c58:	e081      	b.n	8002d5e <OLED_DisplayCharInverted+0x13e>
    {
        int16_t screen_x = x + char_col;
 8002c5a:	7dfb      	ldrb	r3, [r7, #23]
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	4413      	add	r3, r2
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	823b      	strh	r3, [r7, #16]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 8002c66:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	db73      	blt.n	8002d56 <OLED_DisplayCharInverted+0x136>
 8002c6e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c72:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c74:	dc6f      	bgt.n	8002d56 <OLED_DisplayCharInverted+0x136>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 8002c76:	7cbb      	ldrb	r3, [r7, #18]
 8002c78:	7d3a      	ldrb	r2, [r7, #20]
 8002c7a:	fb03 f202 	mul.w	r2, r3, r2
 8002c7e:	7dfb      	ldrb	r3, [r7, #23]
 8002c80:	4413      	add	r3, r2
 8002c82:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8002c86:	d272      	bcs.n	8002d6e <OLED_DisplayCharInverted+0x14e>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 8002c88:	7cbb      	ldrb	r3, [r7, #18]
 8002c8a:	7d3a      	ldrb	r2, [r7, #20]
 8002c8c:	fb03 f202 	mul.w	r2, r3, r2
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	4413      	add	r3, r2
 8002c94:	4a38      	ldr	r2, [pc, #224]	@ (8002d78 <OLED_DisplayCharInverted+0x158>)
 8002c96:	5cd3      	ldrb	r3, [r2, r3]
 8002c98:	75bb      	strb	r3, [r7, #22]

        if (inverted)
 8002c9a:	78bb      	ldrb	r3, [r7, #2]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <OLED_DisplayCharInverted+0x86>
        {
            font_data_col = ~font_data_col;
 8002ca0:	7dbb      	ldrb	r3, [r7, #22]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	75bb      	strb	r3, [r7, #22]
        }

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	757b      	strb	r3, [r7, #21]
 8002caa:	e04f      	b.n	8002d4c <OLED_DisplayCharInverted+0x12c>
        {
            int16_t screen_y = y + char_row_bit;
 8002cac:	7d7b      	ldrb	r3, [r7, #21]
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	88bb      	ldrh	r3, [r7, #4]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	81fb      	strh	r3, [r7, #14]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 8002cb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	db41      	blt.n	8002d44 <OLED_DisplayCharInverted+0x124>
 8002cc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cc4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002cc6:	dc3d      	bgt.n	8002d44 <OLED_DisplayCharInverted+0x124>
                continue;

            uint8_t page = (uint8_t)screen_y / 8;
 8002cc8:	89fb      	ldrh	r3, [r7, #14]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	08db      	lsrs	r3, r3, #3
 8002cce:	737b      	strb	r3, [r7, #13]
            uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 8002cd0:	89fb      	ldrh	r3, [r7, #14]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	733b      	strb	r3, [r7, #12]
            uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 8002cda:	7b7b      	ldrb	r3, [r7, #13]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	01db      	lsls	r3, r3, #7
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	8a3b      	ldrh	r3, [r7, #16]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	817b      	strh	r3, [r7, #10]

            if (buffer_index < sizeof(OLED_BackBuffer))
 8002ce8:	897b      	ldrh	r3, [r7, #10]
 8002cea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cee:	d22a      	bcs.n	8002d46 <OLED_DisplayCharInverted+0x126>
            {
                if ((font_data_col >> char_row_bit) & 0x01)
 8002cf0:	7dba      	ldrb	r2, [r7, #22]
 8002cf2:	7d7b      	ldrb	r3, [r7, #21]
 8002cf4:	fa42 f303 	asr.w	r3, r2, r3
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00f      	beq.n	8002d20 <OLED_DisplayCharInverted+0x100>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 8002d00:	897b      	ldrh	r3, [r7, #10]
 8002d02:	4a1e      	ldr	r2, [pc, #120]	@ (8002d7c <OLED_DisplayCharInverted+0x15c>)
 8002d04:	5cd3      	ldrb	r3, [r2, r3]
 8002d06:	b25a      	sxtb	r2, r3
 8002d08:	7b3b      	ldrb	r3, [r7, #12]
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d10:	b25b      	sxtb	r3, r3
 8002d12:	4313      	orrs	r3, r2
 8002d14:	b25a      	sxtb	r2, r3
 8002d16:	897b      	ldrh	r3, [r7, #10]
 8002d18:	b2d1      	uxtb	r1, r2
 8002d1a:	4a18      	ldr	r2, [pc, #96]	@ (8002d7c <OLED_DisplayCharInverted+0x15c>)
 8002d1c:	54d1      	strb	r1, [r2, r3]
 8002d1e:	e012      	b.n	8002d46 <OLED_DisplayCharInverted+0x126>
                }
                else
                {
                    OLED_BackBuffer[buffer_index] &= ~(1 << bit_offset_in_page);
 8002d20:	897b      	ldrh	r3, [r7, #10]
 8002d22:	4a16      	ldr	r2, [pc, #88]	@ (8002d7c <OLED_DisplayCharInverted+0x15c>)
 8002d24:	5cd3      	ldrb	r3, [r2, r3]
 8002d26:	b25a      	sxtb	r2, r3
 8002d28:	7b3b      	ldrb	r3, [r7, #12]
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d30:	b25b      	sxtb	r3, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	b25b      	sxtb	r3, r3
 8002d36:	4013      	ands	r3, r2
 8002d38:	b25a      	sxtb	r2, r3
 8002d3a:	897b      	ldrh	r3, [r7, #10]
 8002d3c:	b2d1      	uxtb	r1, r2
 8002d3e:	4a0f      	ldr	r2, [pc, #60]	@ (8002d7c <OLED_DisplayCharInverted+0x15c>)
 8002d40:	54d1      	strb	r1, [r2, r3]
 8002d42:	e000      	b.n	8002d46 <OLED_DisplayCharInverted+0x126>
                continue;
 8002d44:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8002d46:	7d7b      	ldrb	r3, [r7, #21]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	757b      	strb	r3, [r7, #21]
 8002d4c:	7d7a      	ldrb	r2, [r7, #21]
 8002d4e:	7cfb      	ldrb	r3, [r7, #19]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d3ab      	bcc.n	8002cac <OLED_DisplayCharInverted+0x8c>
 8002d54:	e000      	b.n	8002d58 <OLED_DisplayCharInverted+0x138>
            continue;
 8002d56:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8002d58:	7dfb      	ldrb	r3, [r7, #23]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	75fb      	strb	r3, [r7, #23]
 8002d5e:	7dfa      	ldrb	r2, [r7, #23]
 8002d60:	7d3b      	ldrb	r3, [r7, #20]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	f4ff af79 	bcc.w	8002c5a <OLED_DisplayCharInverted+0x3a>
 8002d68:	e002      	b.n	8002d70 <OLED_DisplayCharInverted+0x150>
        return;
 8002d6a:	bf00      	nop
 8002d6c:	e000      	b.n	8002d70 <OLED_DisplayCharInverted+0x150>
            break;
 8002d6e:	bf00      	nop
                }
            }
        }
    }
}
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc90      	pop	{r4, r7}
 8002d76:	4770      	bx	lr
 8002d78:	0800dfc4 	.word	0x0800dfc4
 8002d7c:	2000031c 	.word	0x2000031c

08002d80 <OLED_DisplayString>:

void OLED_DisplayString(int16_t x, int16_t y, char *str) //! UPDATEDISPLAY REQUIRED
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	603a      	str	r2, [r7, #0]
 8002d8a:	80fb      	strh	r3, [r7, #6]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	80bb      	strh	r3, [r7, #4]
    uint8_t j = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	73fb      	strb	r3, [r7, #15]
    const uint8_t font_width = 6;
 8002d94:	2306      	movs	r3, #6
 8002d96:	73bb      	strb	r3, [r7, #14]
    const uint8_t font_height = 8;
 8002d98:	2308      	movs	r3, #8
 8002d9a:	737b      	strb	r3, [r7, #13]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 8002d9c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002da0:	2b3f      	cmp	r3, #63	@ 0x3f
 8002da2:	dc34      	bgt.n	8002e0e <OLED_DisplayString+0x8e>
 8002da4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002da8:	7b7b      	ldrb	r3, [r7, #13]
 8002daa:	4413      	add	r3, r2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	dd2e      	ble.n	8002e0e <OLED_DisplayString+0x8e>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 8002db0:	e026      	b.n	8002e00 <OLED_DisplayString+0x80>
    {
        current_char_x = x + (j * font_width);
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	7bba      	ldrb	r2, [r7, #14]
 8002db8:	b292      	uxth	r2, r2
 8002dba:	fb02 f303 	mul.w	r3, r2, r3
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	817b      	strh	r3, [r7, #10]
        if (current_char_x >= OLED_WIDTH)
 8002dc8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002dcc:	2b7f      	cmp	r3, #127	@ 0x7f
 8002dce:	dc20      	bgt.n	8002e12 <OLED_DisplayString+0x92>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 8002dd0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002dd4:	7bbb      	ldrb	r3, [r7, #14]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	dc03      	bgt.n	8002de4 <OLED_DisplayString+0x64>
        {
            j++;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	3301      	adds	r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
            continue;
 8002de2:	e00d      	b.n	8002e00 <OLED_DisplayString+0x80>
        }
        OLED_DisplayChar(current_char_x, y, str[j]);
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	4413      	add	r3, r2
 8002dea:	781a      	ldrb	r2, [r3, #0]
 8002dec:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002df0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fe4d 	bl	8002a94 <OLED_DisplayChar>
        j++;
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
    while (str[j] != '\0')
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	4413      	add	r3, r2
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1d2      	bne.n	8002db2 <OLED_DisplayString+0x32>
 8002e0c:	e002      	b.n	8002e14 <OLED_DisplayString+0x94>
        return;
 8002e0e:	bf00      	nop
 8002e10:	e000      	b.n	8002e14 <OLED_DisplayString+0x94>
            break;
 8002e12:	bf00      	nop
    }
}
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <OLED_DisplayStringInverted>:

void OLED_DisplayStringInverted(int16_t x, int16_t y, char *str, uint8_t inverted) //! UPDATEDISPLAY REQUIRED
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60ba      	str	r2, [r7, #8]
 8002e22:	461a      	mov	r2, r3
 8002e24:	4603      	mov	r3, r0
 8002e26:	81fb      	strh	r3, [r7, #14]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	81bb      	strh	r3, [r7, #12]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	71fb      	strb	r3, [r7, #7]
    uint8_t j = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	75fb      	strb	r3, [r7, #23]
    const uint8_t font_width = 6;
 8002e34:	2306      	movs	r3, #6
 8002e36:	75bb      	strb	r3, [r7, #22]
    const uint8_t font_height = 8;
 8002e38:	2308      	movs	r3, #8
 8002e3a:	757b      	strb	r3, [r7, #21]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 8002e3c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e40:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e42:	dc34      	bgt.n	8002eae <OLED_DisplayStringInverted+0x94>
 8002e44:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002e48:	7d7b      	ldrb	r3, [r7, #21]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	dd2e      	ble.n	8002eae <OLED_DisplayStringInverted+0x94>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 8002e50:	e026      	b.n	8002ea0 <OLED_DisplayStringInverted+0x86>
    {
        current_char_x = x + (j * font_width);
 8002e52:	7dfb      	ldrb	r3, [r7, #23]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	7dba      	ldrb	r2, [r7, #22]
 8002e58:	b292      	uxth	r2, r2
 8002e5a:	fb02 f303 	mul.w	r3, r2, r3
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	89fb      	ldrh	r3, [r7, #14]
 8002e62:	4413      	add	r3, r2
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	827b      	strh	r3, [r7, #18]
        if (current_char_x >= OLED_WIDTH)
 8002e68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e6e:	dc20      	bgt.n	8002eb2 <OLED_DisplayStringInverted+0x98>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 8002e70:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002e74:	7dbb      	ldrb	r3, [r7, #22]
 8002e76:	4413      	add	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	dc03      	bgt.n	8002e84 <OLED_DisplayStringInverted+0x6a>
        {
            j++;
 8002e7c:	7dfb      	ldrb	r3, [r7, #23]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	75fb      	strb	r3, [r7, #23]
            continue;
 8002e82:	e00d      	b.n	8002ea0 <OLED_DisplayStringInverted+0x86>
        }
        OLED_DisplayCharInverted(current_char_x, y, str[j], inverted);
 8002e84:	7dfb      	ldrb	r3, [r7, #23]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	4413      	add	r3, r2
 8002e8a:	781a      	ldrb	r2, [r3, #0]
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002e92:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8002e96:	f7ff fec3 	bl	8002c20 <OLED_DisplayCharInverted>
        j++;
 8002e9a:	7dfb      	ldrb	r3, [r7, #23]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	75fb      	strb	r3, [r7, #23]
    while (str[j] != '\0')
 8002ea0:	7dfb      	ldrb	r3, [r7, #23]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1d2      	bne.n	8002e52 <OLED_DisplayStringInverted+0x38>
 8002eac:	e002      	b.n	8002eb4 <OLED_DisplayStringInverted+0x9a>
        return;
 8002eae:	bf00      	nop
 8002eb0:	e000      	b.n	8002eb4 <OLED_DisplayStringInverted+0x9a>
            break;
 8002eb2:	bf00      	nop
    }
}
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <System_UI_Loop>:
//光标动画部分
#define CURSORBG_TWEEN_TIME 350
#define CURSORBG_TWEEN_STYLE EASE_INOUT_BACK

void System_UI_Loop()
{
 8002ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ebe:	b095      	sub	sp, #84	@ 0x54
 8002ec0:	af04      	add	r7, sp, #16
    static bool isFirstRun = true;

    float x, y, x1, y1;
    if (!isFirstRun)
 8002ec2:	4b9d      	ldr	r3, [pc, #628]	@ (8003138 <System_UI_Loop+0x27c>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	f083 0301 	eor.w	r3, r3, #1
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <System_UI_Loop+0x18>
        SystemGetsSignal();
 8002ed0:	f002 f944 	bl	800515c <SystemGetsSignal>

    if (isFirstRun) //第一次启动调用，初始化部分
 8002ed4:	4b98      	ldr	r3, [pc, #608]	@ (8003138 <System_UI_Loop+0x27c>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 8286 	beq.w	80033ea <System_UI_Loop+0x52e>
    {
#pragma region 标题栏
        OLED_MoveObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_End_Y, StartTweenTime, TweenStyle);
 8002ede:	2315      	movs	r3, #21
 8002ee0:	9303      	str	r3, [sp, #12]
 8002ee2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002ee6:	9302      	str	r3, [sp, #8]
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	9301      	str	r3, [sp, #4]
 8002eee:	4b93      	ldr	r3, [pc, #588]	@ (800313c <System_UI_Loop+0x280>)
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	4b93      	ldr	r3, [pc, #588]	@ (8003140 <System_UI_Loop+0x284>)
 8002ef4:	4a91      	ldr	r2, [pc, #580]	@ (800313c <System_UI_Loop+0x280>)
 8002ef6:	4993      	ldr	r1, [pc, #588]	@ (8003144 <System_UI_Loop+0x288>)
 8002ef8:	4893      	ldr	r0, [pc, #588]	@ (8003148 <System_UI_Loop+0x28c>)
 8002efa:	f004 fd88 	bl	8007a0e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002efe:	2315      	movs	r3, #21
 8002f00:	9303      	str	r3, [sp, #12]
 8002f02:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	4b8d      	ldr	r3, [pc, #564]	@ (8003140 <System_UI_Loop+0x284>)
 8002f0a:	9301      	str	r3, [sp, #4]
 8002f0c:	4b8b      	ldr	r3, [pc, #556]	@ (800313c <System_UI_Loop+0x280>)
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	4b8b      	ldr	r3, [pc, #556]	@ (8003140 <System_UI_Loop+0x284>)
 8002f12:	4a8a      	ldr	r2, [pc, #552]	@ (800313c <System_UI_Loop+0x280>)
 8002f14:	498d      	ldr	r1, [pc, #564]	@ (800314c <System_UI_Loop+0x290>)
 8002f16:	488c      	ldr	r0, [pc, #560]	@ (8003148 <System_UI_Loop+0x28c>)
 8002f18:	f004 fd79 	bl	8007a0e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002f1c:	2315      	movs	r3, #21
 8002f1e:	9303      	str	r3, [sp, #12]
 8002f20:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002f24:	9302      	str	r3, [sp, #8]
 8002f26:	4b86      	ldr	r3, [pc, #536]	@ (8003140 <System_UI_Loop+0x284>)
 8002f28:	9301      	str	r3, [sp, #4]
 8002f2a:	4b89      	ldr	r3, [pc, #548]	@ (8003150 <System_UI_Loop+0x294>)
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	4b84      	ldr	r3, [pc, #528]	@ (8003140 <System_UI_Loop+0x284>)
 8002f30:	4a87      	ldr	r2, [pc, #540]	@ (8003150 <System_UI_Loop+0x294>)
 8002f32:	4988      	ldr	r1, [pc, #544]	@ (8003154 <System_UI_Loop+0x298>)
 8002f34:	4884      	ldr	r0, [pc, #528]	@ (8003148 <System_UI_Loop+0x28c>)
 8002f36:	f004 fd6a 	bl	8007a0e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002f3a:	2315      	movs	r3, #21
 8002f3c:	9303      	str	r3, [sp, #12]
 8002f3e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002f42:	9302      	str	r3, [sp, #8]
 8002f44:	4b7e      	ldr	r3, [pc, #504]	@ (8003140 <System_UI_Loop+0x284>)
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	4b83      	ldr	r3, [pc, #524]	@ (8003158 <System_UI_Loop+0x29c>)
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	4b7c      	ldr	r3, [pc, #496]	@ (8003140 <System_UI_Loop+0x284>)
 8002f4e:	4a82      	ldr	r2, [pc, #520]	@ (8003158 <System_UI_Loop+0x29c>)
 8002f50:	4982      	ldr	r1, [pc, #520]	@ (800315c <System_UI_Loop+0x2a0>)
 8002f52:	487d      	ldr	r0, [pc, #500]	@ (8003148 <System_UI_Loop+0x28c>)
 8002f54:	f004 fd5b 	bl	8007a0e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Developer") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002f58:	2315      	movs	r3, #21
 8002f5a:	9303      	str	r3, [sp, #12]
 8002f5c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002f60:	9302      	str	r3, [sp, #8]
 8002f62:	4b77      	ldr	r3, [pc, #476]	@ (8003140 <System_UI_Loop+0x284>)
 8002f64:	9301      	str	r3, [sp, #4]
 8002f66:	4b7e      	ldr	r3, [pc, #504]	@ (8003160 <System_UI_Loop+0x2a4>)
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	4b75      	ldr	r3, [pc, #468]	@ (8003140 <System_UI_Loop+0x284>)
 8002f6c:	4a7c      	ldr	r2, [pc, #496]	@ (8003160 <System_UI_Loop+0x2a4>)
 8002f6e:	497d      	ldr	r1, [pc, #500]	@ (8003164 <System_UI_Loop+0x2a8>)
 8002f70:	4875      	ldr	r0, [pc, #468]	@ (8003148 <System_UI_Loop+0x28c>)
 8002f72:	f004 fd4c 	bl	8007a0e <OLED_MoveObject>

        OLED_MoveObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002f76:	2315      	movs	r3, #21
 8002f78:	9303      	str	r3, [sp, #12]
 8002f7a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002f7e:	9302      	str	r3, [sp, #8]
 8002f80:	4b6f      	ldr	r3, [pc, #444]	@ (8003140 <System_UI_Loop+0x284>)
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	4b74      	ldr	r3, [pc, #464]	@ (8003158 <System_UI_Loop+0x29c>)
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	4b6d      	ldr	r3, [pc, #436]	@ (8003140 <System_UI_Loop+0x284>)
 8002f8a:	4a73      	ldr	r2, [pc, #460]	@ (8003158 <System_UI_Loop+0x29c>)
 8002f8c:	4976      	ldr	r1, [pc, #472]	@ (8003168 <System_UI_Loop+0x2ac>)
 8002f8e:	486e      	ldr	r0, [pc, #440]	@ (8003148 <System_UI_Loop+0x28c>)
 8002f90:	f004 fd3d 	bl	8007a0e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002f94:	2315      	movs	r3, #21
 8002f96:	9303      	str	r3, [sp, #12]
 8002f98:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002f9c:	9302      	str	r3, [sp, #8]
 8002f9e:	4b68      	ldr	r3, [pc, #416]	@ (8003140 <System_UI_Loop+0x284>)
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	4b66      	ldr	r3, [pc, #408]	@ (800313c <System_UI_Loop+0x280>)
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	4b66      	ldr	r3, [pc, #408]	@ (8003140 <System_UI_Loop+0x284>)
 8002fa8:	4a64      	ldr	r2, [pc, #400]	@ (800313c <System_UI_Loop+0x280>)
 8002faa:	4970      	ldr	r1, [pc, #448]	@ (800316c <System_UI_Loop+0x2b0>)
 8002fac:	4866      	ldr	r0, [pc, #408]	@ (8003148 <System_UI_Loop+0x28c>)
 8002fae:	f004 fd2e 	bl	8007a0e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002fb2:	2315      	movs	r3, #21
 8002fb4:	9303      	str	r3, [sp, #12]
 8002fb6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002fba:	9302      	str	r3, [sp, #8]
 8002fbc:	4b60      	ldr	r3, [pc, #384]	@ (8003140 <System_UI_Loop+0x284>)
 8002fbe:	9301      	str	r3, [sp, #4]
 8002fc0:	4b65      	ldr	r3, [pc, #404]	@ (8003158 <System_UI_Loop+0x29c>)
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	4b5e      	ldr	r3, [pc, #376]	@ (8003140 <System_UI_Loop+0x284>)
 8002fc6:	4a64      	ldr	r2, [pc, #400]	@ (8003158 <System_UI_Loop+0x29c>)
 8002fc8:	4969      	ldr	r1, [pc, #420]	@ (8003170 <System_UI_Loop+0x2b4>)
 8002fca:	485f      	ldr	r0, [pc, #380]	@ (8003148 <System_UI_Loop+0x28c>)
 8002fcc:	f004 fd1f 	bl	8007a0e <OLED_MoveObject>

        OLED_MoveObject(&g_Title_AnimationManager, "BAD APPLE!", (OLED_WIDTH - strlen("BAD APPLE!") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("BAD APPLE!") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002fd0:	2315      	movs	r3, #21
 8002fd2:	9303      	str	r3, [sp, #12]
 8002fd4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002fd8:	9302      	str	r3, [sp, #8]
 8002fda:	4b59      	ldr	r3, [pc, #356]	@ (8003140 <System_UI_Loop+0x284>)
 8002fdc:	9301      	str	r3, [sp, #4]
 8002fde:	4b65      	ldr	r3, [pc, #404]	@ (8003174 <System_UI_Loop+0x2b8>)
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	4b57      	ldr	r3, [pc, #348]	@ (8003140 <System_UI_Loop+0x284>)
 8002fe4:	4a63      	ldr	r2, [pc, #396]	@ (8003174 <System_UI_Loop+0x2b8>)
 8002fe6:	4964      	ldr	r1, [pc, #400]	@ (8003178 <System_UI_Loop+0x2bc>)
 8002fe8:	4857      	ldr	r0, [pc, #348]	@ (8003148 <System_UI_Loop+0x28c>)
 8002fea:	f004 fd10 	bl	8007a0e <OLED_MoveObject>

        OLED_MoveObject(&g_Title_AnimationManager, "Show FPS?", (OLED_WIDTH - strlen("Show FPS?") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Show FPS?") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002fee:	2315      	movs	r3, #21
 8002ff0:	9303      	str	r3, [sp, #12]
 8002ff2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002ff6:	9302      	str	r3, [sp, #8]
 8002ff8:	4b51      	ldr	r3, [pc, #324]	@ (8003140 <System_UI_Loop+0x284>)
 8002ffa:	9301      	str	r3, [sp, #4]
 8002ffc:	4b58      	ldr	r3, [pc, #352]	@ (8003160 <System_UI_Loop+0x2a4>)
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	4b4f      	ldr	r3, [pc, #316]	@ (8003140 <System_UI_Loop+0x284>)
 8003002:	4a57      	ldr	r2, [pc, #348]	@ (8003160 <System_UI_Loop+0x2a4>)
 8003004:	495d      	ldr	r1, [pc, #372]	@ (800317c <System_UI_Loop+0x2c0>)
 8003006:	4850      	ldr	r0, [pc, #320]	@ (8003148 <System_UI_Loop+0x28c>)
 8003008:	f004 fd01 	bl	8007a0e <OLED_MoveObject>

        OLED_MoveObject(&g_Title_AnimationManager, "TitleDeveloper", (OLED_WIDTH - strlen("DEVELOPER: UnikoZera") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("DEVELOPER: UnikoZera") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 800300c:	2315      	movs	r3, #21
 800300e:	9303      	str	r3, [sp, #12]
 8003010:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003014:	9302      	str	r3, [sp, #8]
 8003016:	4b4a      	ldr	r3, [pc, #296]	@ (8003140 <System_UI_Loop+0x284>)
 8003018:	9301      	str	r3, [sp, #4]
 800301a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	4b47      	ldr	r3, [pc, #284]	@ (8003140 <System_UI_Loop+0x284>)
 8003022:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8003026:	4956      	ldr	r1, [pc, #344]	@ (8003180 <System_UI_Loop+0x2c4>)
 8003028:	4847      	ldr	r0, [pc, #284]	@ (8003148 <System_UI_Loop+0x28c>)
 800302a:	f004 fcf0 	bl	8007a0e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleGithub", (OLED_WIDTH - strlen("Github Adress") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Github Adress") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 800302e:	2315      	movs	r3, #21
 8003030:	9303      	str	r3, [sp, #12]
 8003032:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003036:	9302      	str	r3, [sp, #8]
 8003038:	4b41      	ldr	r3, [pc, #260]	@ (8003140 <System_UI_Loop+0x284>)
 800303a:	9301      	str	r3, [sp, #4]
 800303c:	4b3f      	ldr	r3, [pc, #252]	@ (800313c <System_UI_Loop+0x280>)
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	4b3f      	ldr	r3, [pc, #252]	@ (8003140 <System_UI_Loop+0x284>)
 8003042:	4a3e      	ldr	r2, [pc, #248]	@ (800313c <System_UI_Loop+0x280>)
 8003044:	494f      	ldr	r1, [pc, #316]	@ (8003184 <System_UI_Loop+0x2c8>)
 8003046:	4840      	ldr	r0, [pc, #256]	@ (8003148 <System_UI_Loop+0x28c>)
 8003048:	f004 fce1 	bl	8007a0e <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleDonate", (OLED_WIDTH - strlen("BiliBili Space") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("TitleDonate") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 800304c:	2315      	movs	r3, #21
 800304e:	9303      	str	r3, [sp, #12]
 8003050:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003054:	9302      	str	r3, [sp, #8]
 8003056:	4b3a      	ldr	r3, [pc, #232]	@ (8003140 <System_UI_Loop+0x284>)
 8003058:	9301      	str	r3, [sp, #4]
 800305a:	4b4b      	ldr	r3, [pc, #300]	@ (8003188 <System_UI_Loop+0x2cc>)
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	4b38      	ldr	r3, [pc, #224]	@ (8003140 <System_UI_Loop+0x284>)
 8003060:	4a3b      	ldr	r2, [pc, #236]	@ (8003150 <System_UI_Loop+0x294>)
 8003062:	494a      	ldr	r1, [pc, #296]	@ (800318c <System_UI_Loop+0x2d0>)
 8003064:	4838      	ldr	r0, [pc, #224]	@ (8003148 <System_UI_Loop+0x28c>)
 8003066:	f004 fcd2 	bl	8007a0e <OLED_MoveObject>
#pragma endregion 标题栏

#pragma region 游戏栏
        OLED_MoveObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 800306a:	2315      	movs	r3, #21
 800306c:	9303      	str	r3, [sp, #12]
 800306e:	2301      	movs	r3, #1
 8003070:	9302      	str	r3, [sp, #8]
 8003072:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003076:	9301      	str	r3, [sp, #4]
 8003078:	4b45      	ldr	r3, [pc, #276]	@ (8003190 <System_UI_Loop+0x2d4>)
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003080:	4a43      	ldr	r2, [pc, #268]	@ (8003190 <System_UI_Loop+0x2d4>)
 8003082:	4944      	ldr	r1, [pc, #272]	@ (8003194 <System_UI_Loop+0x2d8>)
 8003084:	4844      	ldr	r0, [pc, #272]	@ (8003198 <System_UI_Loop+0x2dc>)
 8003086:	f004 fcc2 	bl	8007a0e <OLED_MoveObject>
        OLED_MoveObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 800308a:	2315      	movs	r3, #21
 800308c:	9303      	str	r3, [sp, #12]
 800308e:	2301      	movs	r3, #1
 8003090:	9302      	str	r3, [sp, #8]
 8003092:	4b42      	ldr	r3, [pc, #264]	@ (800319c <System_UI_Loop+0x2e0>)
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	4b3e      	ldr	r3, [pc, #248]	@ (8003190 <System_UI_Loop+0x2d4>)
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	4b40      	ldr	r3, [pc, #256]	@ (800319c <System_UI_Loop+0x2e0>)
 800309c:	4a3c      	ldr	r2, [pc, #240]	@ (8003190 <System_UI_Loop+0x2d4>)
 800309e:	4940      	ldr	r1, [pc, #256]	@ (80031a0 <System_UI_Loop+0x2e4>)
 80030a0:	483d      	ldr	r0, [pc, #244]	@ (8003198 <System_UI_Loop+0x2dc>)
 80030a2:	f004 fcb4 	bl	8007a0e <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, TweenStyle);
 80030a6:	2315      	movs	r3, #21
 80030a8:	9303      	str	r3, [sp, #12]
 80030aa:	2301      	movs	r3, #1
 80030ac:	9302      	str	r3, [sp, #8]
 80030ae:	4b3d      	ldr	r3, [pc, #244]	@ (80031a4 <System_UI_Loop+0x2e8>)
 80030b0:	9301      	str	r3, [sp, #4]
 80030b2:	4b37      	ldr	r3, [pc, #220]	@ (8003190 <System_UI_Loop+0x2d4>)
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	4b3b      	ldr	r3, [pc, #236]	@ (80031a4 <System_UI_Loop+0x2e8>)
 80030b8:	4a35      	ldr	r2, [pc, #212]	@ (8003190 <System_UI_Loop+0x2d4>)
 80030ba:	493b      	ldr	r1, [pc, #236]	@ (80031a8 <System_UI_Loop+0x2ec>)
 80030bc:	483b      	ldr	r0, [pc, #236]	@ (80031ac <System_UI_Loop+0x2f0>)
 80030be:	f004 fca6 	bl	8007a0e <OLED_MoveObject>
#pragma endregion 游戏栏

#pragma region 工具栏
        OLED_MoveObject(&Tools_AnimationManager, "VideoPlayer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 80030c2:	2315      	movs	r3, #21
 80030c4:	9303      	str	r3, [sp, #12]
 80030c6:	2301      	movs	r3, #1
 80030c8:	9302      	str	r3, [sp, #8]
 80030ca:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80030ce:	9301      	str	r3, [sp, #4]
 80030d0:	4b2f      	ldr	r3, [pc, #188]	@ (8003190 <System_UI_Loop+0x2d4>)
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	4b31      	ldr	r3, [pc, #196]	@ (800319c <System_UI_Loop+0x2e0>)
 80030d6:	4a2e      	ldr	r2, [pc, #184]	@ (8003190 <System_UI_Loop+0x2d4>)
 80030d8:	4935      	ldr	r1, [pc, #212]	@ (80031b0 <System_UI_Loop+0x2f4>)
 80030da:	4836      	ldr	r0, [pc, #216]	@ (80031b4 <System_UI_Loop+0x2f8>)
 80030dc:	f004 fc97 	bl	8007a0e <OLED_MoveObject>

#pragma endregion 工具栏

#pragma region 状态栏 //这里我想做成一个界面就好,不要选项
        OLED_MoveObject(&Status_AnimationManager, "RunningTime", 0, -10, 0, -10, 1, TweenStyle);
 80030e0:	2315      	movs	r3, #21
 80030e2:	9303      	str	r3, [sp, #12]
 80030e4:	2301      	movs	r3, #1
 80030e6:	9302      	str	r3, [sp, #8]
 80030e8:	4b15      	ldr	r3, [pc, #84]	@ (8003140 <System_UI_Loop+0x284>)
 80030ea:	9301      	str	r3, [sp, #4]
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	4b13      	ldr	r3, [pc, #76]	@ (8003140 <System_UI_Loop+0x284>)
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	492f      	ldr	r1, [pc, #188]	@ (80031b8 <System_UI_Loop+0x2fc>)
 80030fa:	4830      	ldr	r0, [pc, #192]	@ (80031bc <System_UI_Loop+0x300>)
 80030fc:	f004 fc87 	bl	8007a0e <OLED_MoveObject>
        OLED_MoveObject(&Status_AnimationManager, "Status", 0, OLED_HEIGHT, 0, OLED_HEIGHT, 1, TweenStyle);
 8003100:	2315      	movs	r3, #21
 8003102:	9303      	str	r3, [sp, #12]
 8003104:	2301      	movs	r3, #1
 8003106:	9302      	str	r3, [sp, #8]
 8003108:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 800310c:	9301      	str	r3, [sp, #4]
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	4928      	ldr	r1, [pc, #160]	@ (80031c0 <System_UI_Loop+0x304>)
 800311e:	4827      	ldr	r0, [pc, #156]	@ (80031bc <System_UI_Loop+0x300>)
 8003120:	f004 fc75 	bl	8007a0e <OLED_MoveObject>
        OLED_MoveObject(&Status_AnimationManager, "CUBE", 150, 50, 150, 50, 1, TweenStyle);
 8003124:	2315      	movs	r3, #21
 8003126:	9303      	str	r3, [sp, #12]
 8003128:	2301      	movs	r3, #1
 800312a:	9302      	str	r3, [sp, #8]
 800312c:	4b03      	ldr	r3, [pc, #12]	@ (800313c <System_UI_Loop+0x280>)
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	4b24      	ldr	r3, [pc, #144]	@ (80031c4 <System_UI_Loop+0x308>)
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	e048      	b.n	80031c8 <System_UI_Loop+0x30c>
 8003136:	bf00      	nop
 8003138:	20000004 	.word	0x20000004
 800313c:	42480000 	.word	0x42480000
 8003140:	c1200000 	.word	0xc1200000
 8003144:	0800dc9c 	.word	0x0800dc9c
 8003148:	200033cc 	.word	0x200033cc
 800314c:	0800dca8 	.word	0x0800dca8
 8003150:	42300000 	.word	0x42300000
 8003154:	0800dcb4 	.word	0x0800dcb4
 8003158:	42600000 	.word	0x42600000
 800315c:	0800dcc0 	.word	0x0800dcc0
 8003160:	42940000 	.word	0x42940000
 8003164:	0800dcd0 	.word	0x0800dcd0
 8003168:	0800dcdc 	.word	0x0800dcdc
 800316c:	0800dce8 	.word	0x0800dce8
 8003170:	0800dcf4 	.word	0x0800dcf4
 8003174:	42880000 	.word	0x42880000
 8003178:	0800dd00 	.word	0x0800dd00
 800317c:	0800dd0c 	.word	0x0800dd0c
 8003180:	0800dd18 	.word	0x0800dd18
 8003184:	0800dd28 	.word	0x0800dd28
 8003188:	42780000 	.word	0x42780000
 800318c:	0800dd34 	.word	0x0800dd34
 8003190:	c2b40000 	.word	0xc2b40000
 8003194:	0800dd40 	.word	0x0800dd40
 8003198:	20001608 	.word	0x20001608
 800319c:	41e80000 	.word	0x41e80000
 80031a0:	0800dd48 	.word	0x0800dd48
 80031a4:	42280000 	.word	0x42280000
 80031a8:	0800dd50 	.word	0x0800dd50
 80031ac:	200039c0 	.word	0x200039c0
 80031b0:	0800dd5c 	.word	0x0800dd5c
 80031b4:	20001bfc 	.word	0x20001bfc
 80031b8:	0800dd68 	.word	0x0800dd68
 80031bc:	20002dd8 	.word	0x20002dd8
 80031c0:	0800dd74 	.word	0x0800dd74
 80031c4:	43160000 	.word	0x43160000
 80031c8:	4bae      	ldr	r3, [pc, #696]	@ (8003484 <System_UI_Loop+0x5c8>)
 80031ca:	4aaf      	ldr	r2, [pc, #700]	@ (8003488 <System_UI_Loop+0x5cc>)
 80031cc:	49af      	ldr	r1, [pc, #700]	@ (800348c <System_UI_Loop+0x5d0>)
 80031ce:	48b0      	ldr	r0, [pc, #704]	@ (8003490 <System_UI_Loop+0x5d4>)
 80031d0:	f004 fc1d 	bl	8007a0e <OLED_MoveObject>
#pragma endregion 状态栏

#pragma region 设置栏
        OLED_MoveObject(&Settings_AnimationManager, "ShowFPS", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 80031d4:	2315      	movs	r3, #21
 80031d6:	9303      	str	r3, [sp, #12]
 80031d8:	2301      	movs	r3, #1
 80031da:	9302      	str	r3, [sp, #8]
 80031dc:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80031e0:	9301      	str	r3, [sp, #4]
 80031e2:	4bac      	ldr	r3, [pc, #688]	@ (8003494 <System_UI_Loop+0x5d8>)
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80031ea:	4aaa      	ldr	r2, [pc, #680]	@ (8003494 <System_UI_Loop+0x5d8>)
 80031ec:	49aa      	ldr	r1, [pc, #680]	@ (8003498 <System_UI_Loop+0x5dc>)
 80031ee:	48ab      	ldr	r0, [pc, #684]	@ (800349c <System_UI_Loop+0x5e0>)
 80031f0:	f004 fc0d 	bl	8007a0e <OLED_MoveObject>
        OLED_MoveObject(&Settings_AnimationManager, "Lightness", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 80031f4:	2315      	movs	r3, #21
 80031f6:	9303      	str	r3, [sp, #12]
 80031f8:	2301      	movs	r3, #1
 80031fa:	9302      	str	r3, [sp, #8]
 80031fc:	4ba8      	ldr	r3, [pc, #672]	@ (80034a0 <System_UI_Loop+0x5e4>)
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	4ba4      	ldr	r3, [pc, #656]	@ (8003494 <System_UI_Loop+0x5d8>)
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	4ba6      	ldr	r3, [pc, #664]	@ (80034a0 <System_UI_Loop+0x5e4>)
 8003206:	4aa3      	ldr	r2, [pc, #652]	@ (8003494 <System_UI_Loop+0x5d8>)
 8003208:	49a6      	ldr	r1, [pc, #664]	@ (80034a4 <System_UI_Loop+0x5e8>)
 800320a:	48a4      	ldr	r0, [pc, #656]	@ (800349c <System_UI_Loop+0x5e0>)
 800320c:	f004 fbff 	bl	8007a0e <OLED_MoveObject>
        OLED_MoveObject(&Settings_AnimationManager, "Bar", 5, OLED_HEIGHT + 10, 0, OLED_HEIGHT + 10, 1, TweenStyle);
 8003210:	2315      	movs	r3, #21
 8003212:	9303      	str	r3, [sp, #12]
 8003214:	2301      	movs	r3, #1
 8003216:	9302      	str	r3, [sp, #8]
 8003218:	4ba3      	ldr	r3, [pc, #652]	@ (80034a8 <System_UI_Loop+0x5ec>)
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	4ba1      	ldr	r3, [pc, #644]	@ (80034a8 <System_UI_Loop+0x5ec>)
 8003224:	4aa1      	ldr	r2, [pc, #644]	@ (80034ac <System_UI_Loop+0x5f0>)
 8003226:	49a2      	ldr	r1, [pc, #648]	@ (80034b0 <System_UI_Loop+0x5f4>)
 8003228:	489c      	ldr	r0, [pc, #624]	@ (800349c <System_UI_Loop+0x5e0>)
 800322a:	f004 fbf0 	bl	8007a0e <OLED_MoveObject>
#pragma endregion 设置栏

#pragma region 关于栏
        OLED_MoveObject(&About_AnimationManager, "Developer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 800322e:	2315      	movs	r3, #21
 8003230:	9303      	str	r3, [sp, #12]
 8003232:	2301      	movs	r3, #1
 8003234:	9302      	str	r3, [sp, #8]
 8003236:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800323a:	9301      	str	r3, [sp, #4]
 800323c:	4b95      	ldr	r3, [pc, #596]	@ (8003494 <System_UI_Loop+0x5d8>)
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003244:	4a93      	ldr	r2, [pc, #588]	@ (8003494 <System_UI_Loop+0x5d8>)
 8003246:	499b      	ldr	r1, [pc, #620]	@ (80034b4 <System_UI_Loop+0x5f8>)
 8003248:	489b      	ldr	r0, [pc, #620]	@ (80034b8 <System_UI_Loop+0x5fc>)
 800324a:	f004 fbe0 	bl	8007a0e <OLED_MoveObject>
        OLED_MoveObject(&About_AnimationManager, "Github", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 800324e:	2315      	movs	r3, #21
 8003250:	9303      	str	r3, [sp, #12]
 8003252:	2301      	movs	r3, #1
 8003254:	9302      	str	r3, [sp, #8]
 8003256:	4b92      	ldr	r3, [pc, #584]	@ (80034a0 <System_UI_Loop+0x5e4>)
 8003258:	9301      	str	r3, [sp, #4]
 800325a:	4b8e      	ldr	r3, [pc, #568]	@ (8003494 <System_UI_Loop+0x5d8>)
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	4b90      	ldr	r3, [pc, #576]	@ (80034a0 <System_UI_Loop+0x5e4>)
 8003260:	4a8c      	ldr	r2, [pc, #560]	@ (8003494 <System_UI_Loop+0x5d8>)
 8003262:	4996      	ldr	r1, [pc, #600]	@ (80034bc <System_UI_Loop+0x600>)
 8003264:	4894      	ldr	r0, [pc, #592]	@ (80034b8 <System_UI_Loop+0x5fc>)
 8003266:	f004 fbd2 	bl	8007a0e <OLED_MoveObject>
        OLED_MoveObject(&About_AnimationManager, "Donate", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, TweenStyle);
 800326a:	2315      	movs	r3, #21
 800326c:	9303      	str	r3, [sp, #12]
 800326e:	2301      	movs	r3, #1
 8003270:	9302      	str	r3, [sp, #8]
 8003272:	4b93      	ldr	r3, [pc, #588]	@ (80034c0 <System_UI_Loop+0x604>)
 8003274:	9301      	str	r3, [sp, #4]
 8003276:	4b87      	ldr	r3, [pc, #540]	@ (8003494 <System_UI_Loop+0x5d8>)
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	4b91      	ldr	r3, [pc, #580]	@ (80034c0 <System_UI_Loop+0x604>)
 800327c:	4a85      	ldr	r2, [pc, #532]	@ (8003494 <System_UI_Loop+0x5d8>)
 800327e:	4991      	ldr	r1, [pc, #580]	@ (80034c4 <System_UI_Loop+0x608>)
 8003280:	488d      	ldr	r0, [pc, #564]	@ (80034b8 <System_UI_Loop+0x5fc>)
 8003282:	f004 fbc4 	bl	8007a0e <OLED_MoveObject>
#pragma endregion 关于栏

#pragma region 主菜单动画
        OLED_MoveObject(&g_AnimationManager, "TitleBGScale", 0, 8, strlen("Epicful Games") * 6 + 3, 8, StartTweenTime, EASE_INOUT_CUBIC);
 8003286:	2306      	movs	r3, #6
 8003288:	9303      	str	r3, [sp, #12]
 800328a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800328e:	9302      	str	r3, [sp, #8]
 8003290:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	4b8c      	ldr	r3, [pc, #560]	@ (80034c8 <System_UI_Loop+0x60c>)
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	498a      	ldr	r1, [pc, #552]	@ (80034cc <System_UI_Loop+0x610>)
 80032a4:	488a      	ldr	r0, [pc, #552]	@ (80034d0 <System_UI_Loop+0x614>)
 80032a6:	f004 fbb2 	bl	8007a0e <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "Cursor", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * menuSelection, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * menuSelection, StartTweenTime, TweenStyle);
 80032aa:	4b8a      	ldr	r3, [pc, #552]	@ (80034d4 <System_UI_Loop+0x618>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	4613      	mov	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	3303      	adds	r3, #3
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fd f811 	bl	80002e4 <__aeabi_i2f>
 80032c2:	4604      	mov	r4, r0
 80032c4:	4b83      	ldr	r3, [pc, #524]	@ (80034d4 <System_UI_Loop+0x618>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	461a      	mov	r2, r3
 80032ca:	4613      	mov	r3, r2
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	3303      	adds	r3, #3
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fd f804 	bl	80002e4 <__aeabi_i2f>
 80032dc:	4603      	mov	r3, r0
 80032de:	2215      	movs	r2, #21
 80032e0:	9203      	str	r2, [sp, #12]
 80032e2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80032e6:	9202      	str	r2, [sp, #8]
 80032e8:	9301      	str	r3, [sp, #4]
 80032ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	4623      	mov	r3, r4
 80032f2:	4a68      	ldr	r2, [pc, #416]	@ (8003494 <System_UI_Loop+0x5d8>)
 80032f4:	4978      	ldr	r1, [pc, #480]	@ (80034d8 <System_UI_Loop+0x61c>)
 80032f6:	4876      	ldr	r0, [pc, #472]	@ (80034d0 <System_UI_Loop+0x614>)
 80032f8:	f004 fb89 	bl	8007a0e <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "CursorScale", 0, 10, strlen("Games") * 6 + 3, 10, StartTweenTime, TweenStyle);
 80032fc:	2315      	movs	r3, #21
 80032fe:	9303      	str	r3, [sp, #12]
 8003300:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003304:	9302      	str	r3, [sp, #8]
 8003306:	4b75      	ldr	r3, [pc, #468]	@ (80034dc <System_UI_Loop+0x620>)
 8003308:	9301      	str	r3, [sp, #4]
 800330a:	4b75      	ldr	r3, [pc, #468]	@ (80034e0 <System_UI_Loop+0x624>)
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	4b73      	ldr	r3, [pc, #460]	@ (80034dc <System_UI_Loop+0x620>)
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	4973      	ldr	r1, [pc, #460]	@ (80034e4 <System_UI_Loop+0x628>)
 8003316:	486e      	ldr	r0, [pc, #440]	@ (80034d0 <System_UI_Loop+0x614>)
 8003318:	f004 fb79 	bl	8007a0e <OLED_MoveObject>
        OLED_MoveObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, StartTweenTime, TweenStyle);
 800331c:	2315      	movs	r3, #21
 800331e:	9303      	str	r3, [sp, #12]
 8003320:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003324:	9302      	str	r3, [sp, #8]
 8003326:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800332a:	9301      	str	r3, [sp, #4]
 800332c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003336:	4a57      	ldr	r2, [pc, #348]	@ (8003494 <System_UI_Loop+0x5d8>)
 8003338:	496b      	ldr	r1, [pc, #428]	@ (80034e8 <System_UI_Loop+0x62c>)
 800333a:	486c      	ldr	r0, [pc, #432]	@ (80034ec <System_UI_Loop+0x630>)
 800333c:	f004 fb67 	bl	8007a0e <OLED_MoveObject>
        HAL_Delay(100);
 8003340:	2064      	movs	r0, #100	@ 0x64
 8003342:	f005 fbb7 	bl	8008ab4 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, StartTweenTime, TweenStyle);
 8003346:	2315      	movs	r3, #21
 8003348:	9303      	str	r3, [sp, #12]
 800334a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800334e:	9302      	str	r3, [sp, #8]
 8003350:	4b53      	ldr	r3, [pc, #332]	@ (80034a0 <System_UI_Loop+0x5e4>)
 8003352:	9301      	str	r3, [sp, #4]
 8003354:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	4b51      	ldr	r3, [pc, #324]	@ (80034a0 <System_UI_Loop+0x5e4>)
 800335c:	4a4d      	ldr	r2, [pc, #308]	@ (8003494 <System_UI_Loop+0x5d8>)
 800335e:	4964      	ldr	r1, [pc, #400]	@ (80034f0 <System_UI_Loop+0x634>)
 8003360:	4862      	ldr	r0, [pc, #392]	@ (80034ec <System_UI_Loop+0x630>)
 8003362:	f004 fb54 	bl	8007a0e <OLED_MoveObject>
        HAL_Delay(100);
 8003366:	2064      	movs	r0, #100	@ 0x64
 8003368:	f005 fba4 	bl	8008ab4 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, StartTweenTime, TweenStyle);
 800336c:	2315      	movs	r3, #21
 800336e:	9303      	str	r3, [sp, #12]
 8003370:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003374:	9302      	str	r3, [sp, #8]
 8003376:	4b52      	ldr	r3, [pc, #328]	@ (80034c0 <System_UI_Loop+0x604>)
 8003378:	9301      	str	r3, [sp, #4]
 800337a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	4b4f      	ldr	r3, [pc, #316]	@ (80034c0 <System_UI_Loop+0x604>)
 8003382:	4a44      	ldr	r2, [pc, #272]	@ (8003494 <System_UI_Loop+0x5d8>)
 8003384:	495b      	ldr	r1, [pc, #364]	@ (80034f4 <System_UI_Loop+0x638>)
 8003386:	4859      	ldr	r0, [pc, #356]	@ (80034ec <System_UI_Loop+0x630>)
 8003388:	f004 fb41 	bl	8007a0e <OLED_MoveObject>
        HAL_Delay(100);
 800338c:	2064      	movs	r0, #100	@ 0x64
 800338e:	f005 fb91 	bl	8008ab4 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, StartTweenTime, TweenStyle);
 8003392:	2315      	movs	r3, #21
 8003394:	9303      	str	r3, [sp, #12]
 8003396:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800339a:	9302      	str	r3, [sp, #8]
 800339c:	4b56      	ldr	r3, [pc, #344]	@ (80034f8 <System_UI_Loop+0x63c>)
 800339e:	9301      	str	r3, [sp, #4]
 80033a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	4b54      	ldr	r3, [pc, #336]	@ (80034f8 <System_UI_Loop+0x63c>)
 80033a8:	4a3a      	ldr	r2, [pc, #232]	@ (8003494 <System_UI_Loop+0x5d8>)
 80033aa:	4954      	ldr	r1, [pc, #336]	@ (80034fc <System_UI_Loop+0x640>)
 80033ac:	484f      	ldr	r0, [pc, #316]	@ (80034ec <System_UI_Loop+0x630>)
 80033ae:	f004 fb2e 	bl	8007a0e <OLED_MoveObject>
        HAL_Delay(100);
 80033b2:	2064      	movs	r0, #100	@ 0x64
 80033b4:	f005 fb7e 	bl	8008ab4 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, StartTweenTime, TweenStyle);
 80033b8:	2315      	movs	r3, #21
 80033ba:	9303      	str	r3, [sp, #12]
 80033bc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80033c0:	9302      	str	r3, [sp, #8]
 80033c2:	4b4f      	ldr	r3, [pc, #316]	@ (8003500 <System_UI_Loop+0x644>)
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	4b4c      	ldr	r3, [pc, #304]	@ (8003500 <System_UI_Loop+0x644>)
 80033ce:	4a31      	ldr	r2, [pc, #196]	@ (8003494 <System_UI_Loop+0x5d8>)
 80033d0:	494c      	ldr	r1, [pc, #304]	@ (8003504 <System_UI_Loop+0x648>)
 80033d2:	4846      	ldr	r0, [pc, #280]	@ (80034ec <System_UI_Loop+0x630>)
 80033d4:	f004 fb1b 	bl	8007a0e <OLED_MoveObject>
#pragma endregion 主菜单动画

        preMenuSelection = menuSelection;
 80033d8:	4b3e      	ldr	r3, [pc, #248]	@ (80034d4 <System_UI_Loop+0x618>)
 80033da:	781a      	ldrb	r2, [r3, #0]
 80033dc:	4b4a      	ldr	r3, [pc, #296]	@ (8003508 <System_UI_Loop+0x64c>)
 80033de:	701a      	strb	r2, [r3, #0]
        isFirstRun = false;
 80033e0:	4b4a      	ldr	r3, [pc, #296]	@ (800350c <System_UI_Loop+0x650>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	701a      	strb	r2, [r3, #0]
        OLED_UpdateDisplayVSync();
 80033e6:	f7ff f8df 	bl	80025a8 <OLED_UpdateDisplayVSync>
    }

#pragma region pager //翻页的函数

    if (menuRank == 1)
 80033ea:	4b49      	ldr	r3, [pc, #292]	@ (8003510 <System_UI_Loop+0x654>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	f040 80c7 	bne.w	8003582 <System_UI_Loop+0x6c6>
    {
        OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 80033f4:	4b37      	ldr	r3, [pc, #220]	@ (80034d4 <System_UI_Loop+0x618>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	f1c3 0202 	rsb	r2, r3, #2
 80033fc:	4613      	mov	r3, r2
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	4413      	add	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	3303      	adds	r3, #3
 8003408:	4618      	mov	r0, r3
 800340a:	f7fc ff6b 	bl	80002e4 <__aeabi_i2f>
 800340e:	4603      	mov	r3, r0
 8003410:	2203      	movs	r2, #3
 8003412:	9201      	str	r2, [sp, #4]
 8003414:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003418:	9200      	str	r2, [sp, #0]
 800341a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800341e:	4932      	ldr	r1, [pc, #200]	@ (80034e8 <System_UI_Loop+0x62c>)
 8003420:	4832      	ldr	r0, [pc, #200]	@ (80034ec <System_UI_Loop+0x630>)
 8003422:	f004 fbab 	bl	8007b7c <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 8003426:	4b2b      	ldr	r3, [pc, #172]	@ (80034d4 <System_UI_Loop+0x618>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	f1c3 0203 	rsb	r2, r3, #3
 800342e:	4613      	mov	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	3303      	adds	r3, #3
 800343a:	4618      	mov	r0, r3
 800343c:	f7fc ff52 	bl	80002e4 <__aeabi_i2f>
 8003440:	4603      	mov	r3, r0
 8003442:	2203      	movs	r2, #3
 8003444:	9201      	str	r2, [sp, #4]
 8003446:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800344a:	9200      	str	r2, [sp, #0]
 800344c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003450:	4927      	ldr	r1, [pc, #156]	@ (80034f0 <System_UI_Loop+0x634>)
 8003452:	4826      	ldr	r0, [pc, #152]	@ (80034ec <System_UI_Loop+0x630>)
 8003454:	f004 fb92 	bl	8007b7c <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 8003458:	4b1e      	ldr	r3, [pc, #120]	@ (80034d4 <System_UI_Loop+0x618>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	f1c3 0204 	rsb	r2, r3, #4
 8003460:	4613      	mov	r3, r2
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	3303      	adds	r3, #3
 800346c:	4618      	mov	r0, r3
 800346e:	f7fc ff39 	bl	80002e4 <__aeabi_i2f>
 8003472:	4603      	mov	r3, r0
 8003474:	2203      	movs	r2, #3
 8003476:	9201      	str	r2, [sp, #4]
 8003478:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800347c:	9200      	str	r2, [sp, #0]
 800347e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003482:	e047      	b.n	8003514 <System_UI_Loop+0x658>
 8003484:	42480000 	.word	0x42480000
 8003488:	43160000 	.word	0x43160000
 800348c:	0800dd7c 	.word	0x0800dd7c
 8003490:	20002dd8 	.word	0x20002dd8
 8003494:	c2b40000 	.word	0xc2b40000
 8003498:	0800dd84 	.word	0x0800dd84
 800349c:	200021f0 	.word	0x200021f0
 80034a0:	41e80000 	.word	0x41e80000
 80034a4:	0800dd8c 	.word	0x0800dd8c
 80034a8:	42940000 	.word	0x42940000
 80034ac:	40a00000 	.word	0x40a00000
 80034b0:	0800dd98 	.word	0x0800dd98
 80034b4:	0800dd9c 	.word	0x0800dd9c
 80034b8:	200027e4 	.word	0x200027e4
 80034bc:	0800dda8 	.word	0x0800dda8
 80034c0:	42280000 	.word	0x42280000
 80034c4:	0800ddb0 	.word	0x0800ddb0
 80034c8:	42a20000 	.word	0x42a20000
 80034cc:	0800ddb8 	.word	0x0800ddb8
 80034d0:	200039c0 	.word	0x200039c0
 80034d4:	20000002 	.word	0x20000002
 80034d8:	0800ddc8 	.word	0x0800ddc8
 80034dc:	41200000 	.word	0x41200000
 80034e0:	42040000 	.word	0x42040000
 80034e4:	0800ddd0 	.word	0x0800ddd0
 80034e8:	0800dddc 	.word	0x0800dddc
 80034ec:	20001014 	.word	0x20001014
 80034f0:	0800dde8 	.word	0x0800dde8
 80034f4:	0800ddf4 	.word	0x0800ddf4
 80034f8:	425c0000 	.word	0x425c0000
 80034fc:	0800de04 	.word	0x0800de04
 8003500:	42880000 	.word	0x42880000
 8003504:	0800de14 	.word	0x0800de14
 8003508:	20000bfd 	.word	0x20000bfd
 800350c:	20000004 	.word	0x20000004
 8003510:	20000001 	.word	0x20000001
 8003514:	498c      	ldr	r1, [pc, #560]	@ (8003748 <System_UI_Loop+0x88c>)
 8003516:	488d      	ldr	r0, [pc, #564]	@ (800374c <System_UI_Loop+0x890>)
 8003518:	f004 fb30 	bl	8007b7c <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 800351c:	4b8c      	ldr	r3, [pc, #560]	@ (8003750 <System_UI_Loop+0x894>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	f1c3 0205 	rsb	r2, r3, #5
 8003524:	4613      	mov	r3, r2
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	3303      	adds	r3, #3
 8003530:	4618      	mov	r0, r3
 8003532:	f7fc fed7 	bl	80002e4 <__aeabi_i2f>
 8003536:	4603      	mov	r3, r0
 8003538:	2203      	movs	r2, #3
 800353a:	9201      	str	r2, [sp, #4]
 800353c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003540:	9200      	str	r2, [sp, #0]
 8003542:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003546:	4983      	ldr	r1, [pc, #524]	@ (8003754 <System_UI_Loop+0x898>)
 8003548:	4880      	ldr	r0, [pc, #512]	@ (800374c <System_UI_Loop+0x890>)
 800354a:	f004 fb17 	bl	8007b7c <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 800354e:	4b80      	ldr	r3, [pc, #512]	@ (8003750 <System_UI_Loop+0x894>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	f1c3 0206 	rsb	r2, r3, #6
 8003556:	4613      	mov	r3, r2
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	3303      	adds	r3, #3
 8003562:	4618      	mov	r0, r3
 8003564:	f7fc febe 	bl	80002e4 <__aeabi_i2f>
 8003568:	4603      	mov	r3, r0
 800356a:	2203      	movs	r2, #3
 800356c:	9201      	str	r2, [sp, #4]
 800356e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003572:	9200      	str	r2, [sp, #0]
 8003574:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003578:	4977      	ldr	r1, [pc, #476]	@ (8003758 <System_UI_Loop+0x89c>)
 800357a:	4874      	ldr	r0, [pc, #464]	@ (800374c <System_UI_Loop+0x890>)
 800357c:	f004 fafe 	bl	8007b7c <OLED_DoTweenObject>
 8003580:	e170      	b.n	8003864 <System_UI_Loop+0x9a8>
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_GAMES)
 8003582:	4b76      	ldr	r3, [pc, #472]	@ (800375c <System_UI_Loop+0x8a0>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d14f      	bne.n	800362a <System_UI_Loop+0x76e>
 800358a:	4b75      	ldr	r3, [pc, #468]	@ (8003760 <System_UI_Loop+0x8a4>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b05      	cmp	r3, #5
 8003590:	d14b      	bne.n	800362a <System_UI_Loop+0x76e>
    {
        OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 8003592:	4b6f      	ldr	r3, [pc, #444]	@ (8003750 <System_UI_Loop+0x894>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	f1c3 0202 	rsb	r2, r3, #2
 800359a:	4613      	mov	r3, r2
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	3303      	adds	r3, #3
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fc fe9c 	bl	80002e4 <__aeabi_i2f>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2203      	movs	r2, #3
 80035b0:	9201      	str	r2, [sp, #4]
 80035b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80035b6:	9200      	str	r2, [sp, #0]
 80035b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80035bc:	4969      	ldr	r1, [pc, #420]	@ (8003764 <System_UI_Loop+0x8a8>)
 80035be:	486a      	ldr	r0, [pc, #424]	@ (8003768 <System_UI_Loop+0x8ac>)
 80035c0:	f004 fadc 	bl	8007b7c <OLED_DoTweenObject>
        OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 80035c4:	4b62      	ldr	r3, [pc, #392]	@ (8003750 <System_UI_Loop+0x894>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	f1c3 0203 	rsb	r2, r3, #3
 80035cc:	4613      	mov	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	3303      	adds	r3, #3
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fc fe83 	bl	80002e4 <__aeabi_i2f>
 80035de:	4603      	mov	r3, r0
 80035e0:	2203      	movs	r2, #3
 80035e2:	9201      	str	r2, [sp, #4]
 80035e4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80035e8:	9200      	str	r2, [sp, #0]
 80035ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80035ee:	495f      	ldr	r1, [pc, #380]	@ (800376c <System_UI_Loop+0x8b0>)
 80035f0:	485d      	ldr	r0, [pc, #372]	@ (8003768 <System_UI_Loop+0x8ac>)
 80035f2:	f004 fac3 	bl	8007b7c <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 80035f6:	4b56      	ldr	r3, [pc, #344]	@ (8003750 <System_UI_Loop+0x894>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	f1c3 0204 	rsb	r2, r3, #4
 80035fe:	4613      	mov	r3, r2
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	3303      	adds	r3, #3
 800360a:	4618      	mov	r0, r3
 800360c:	f7fc fe6a 	bl	80002e4 <__aeabi_i2f>
 8003610:	4603      	mov	r3, r0
 8003612:	2203      	movs	r2, #3
 8003614:	9201      	str	r2, [sp, #4]
 8003616:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800361a:	9200      	str	r2, [sp, #0]
 800361c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003620:	4953      	ldr	r1, [pc, #332]	@ (8003770 <System_UI_Loop+0x8b4>)
 8003622:	4854      	ldr	r0, [pc, #336]	@ (8003774 <System_UI_Loop+0x8b8>)
 8003624:	f004 faaa 	bl	8007b7c <OLED_DoTweenObject>
 8003628:	e11c      	b.n	8003864 <System_UI_Loop+0x9a8>
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_TOOLS)
 800362a:	4b4c      	ldr	r3, [pc, #304]	@ (800375c <System_UI_Loop+0x8a0>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d136      	bne.n	80036a0 <System_UI_Loop+0x7e4>
 8003632:	4b4b      	ldr	r3, [pc, #300]	@ (8003760 <System_UI_Loop+0x8a4>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b04      	cmp	r3, #4
 8003638:	d132      	bne.n	80036a0 <System_UI_Loop+0x7e4>
    {
        OLED_DoTweenObject(&Tools_AnimationManager, "VideoPlayer", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 800363a:	4b45      	ldr	r3, [pc, #276]	@ (8003750 <System_UI_Loop+0x894>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	f1c3 0202 	rsb	r2, r3, #2
 8003642:	4613      	mov	r3, r2
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	4413      	add	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	3303      	adds	r3, #3
 800364e:	4618      	mov	r0, r3
 8003650:	f7fc fe48 	bl	80002e4 <__aeabi_i2f>
 8003654:	4603      	mov	r3, r0
 8003656:	2203      	movs	r2, #3
 8003658:	9201      	str	r2, [sp, #4]
 800365a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800365e:	9200      	str	r2, [sp, #0]
 8003660:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003664:	4944      	ldr	r1, [pc, #272]	@ (8003778 <System_UI_Loop+0x8bc>)
 8003666:	4845      	ldr	r0, [pc, #276]	@ (800377c <System_UI_Loop+0x8c0>)
 8003668:	f004 fa88 	bl	8007b7c <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 800366c:	4b38      	ldr	r3, [pc, #224]	@ (8003750 <System_UI_Loop+0x894>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	f1c3 0203 	rsb	r2, r3, #3
 8003674:	4613      	mov	r3, r2
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	3303      	adds	r3, #3
 8003680:	4618      	mov	r0, r3
 8003682:	f7fc fe2f 	bl	80002e4 <__aeabi_i2f>
 8003686:	4603      	mov	r3, r0
 8003688:	2203      	movs	r2, #3
 800368a:	9201      	str	r2, [sp, #4]
 800368c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003690:	9200      	str	r2, [sp, #0]
 8003692:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003696:	4936      	ldr	r1, [pc, #216]	@ (8003770 <System_UI_Loop+0x8b4>)
 8003698:	4836      	ldr	r0, [pc, #216]	@ (8003774 <System_UI_Loop+0x8b8>)
 800369a:	f004 fa6f 	bl	8007b7c <OLED_DoTweenObject>
 800369e:	e0e1      	b.n	8003864 <System_UI_Loop+0x9a8>
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_SETTINGS)
 80036a0:	4b2e      	ldr	r3, [pc, #184]	@ (800375c <System_UI_Loop+0x8a0>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d171      	bne.n	800378c <System_UI_Loop+0x8d0>
 80036a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003760 <System_UI_Loop+0x8a4>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d16d      	bne.n	800378c <System_UI_Loop+0x8d0>
    {
        OLED_DoTweenObject(&Settings_AnimationManager, "ShowFPS", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 80036b0:	4b27      	ldr	r3, [pc, #156]	@ (8003750 <System_UI_Loop+0x894>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	f1c3 0202 	rsb	r2, r3, #2
 80036b8:	4613      	mov	r3, r2
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	3303      	adds	r3, #3
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fc fe0d 	bl	80002e4 <__aeabi_i2f>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2203      	movs	r2, #3
 80036ce:	9201      	str	r2, [sp, #4]
 80036d0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80036d4:	9200      	str	r2, [sp, #0]
 80036d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80036da:	4929      	ldr	r1, [pc, #164]	@ (8003780 <System_UI_Loop+0x8c4>)
 80036dc:	4829      	ldr	r0, [pc, #164]	@ (8003784 <System_UI_Loop+0x8c8>)
 80036de:	f004 fa4d 	bl	8007b7c <OLED_DoTweenObject>
        OLED_DoTweenObject(&Settings_AnimationManager, "Lightness", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 80036e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003750 <System_UI_Loop+0x894>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	f1c3 0203 	rsb	r2, r3, #3
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	3303      	adds	r3, #3
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fc fdf4 	bl	80002e4 <__aeabi_i2f>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2203      	movs	r2, #3
 8003700:	9201      	str	r2, [sp, #4]
 8003702:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003706:	9200      	str	r2, [sp, #0]
 8003708:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800370c:	491e      	ldr	r1, [pc, #120]	@ (8003788 <System_UI_Loop+0x8cc>)
 800370e:	481d      	ldr	r0, [pc, #116]	@ (8003784 <System_UI_Loop+0x8c8>)
 8003710:	f004 fa34 	bl	8007b7c <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 8003714:	4b0e      	ldr	r3, [pc, #56]	@ (8003750 <System_UI_Loop+0x894>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	f1c3 0204 	rsb	r2, r3, #4
 800371c:	4613      	mov	r3, r2
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	4413      	add	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	3303      	adds	r3, #3
 8003728:	4618      	mov	r0, r3
 800372a:	f7fc fddb 	bl	80002e4 <__aeabi_i2f>
 800372e:	4603      	mov	r3, r0
 8003730:	2203      	movs	r2, #3
 8003732:	9201      	str	r2, [sp, #4]
 8003734:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003738:	9200      	str	r2, [sp, #0]
 800373a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800373e:	490c      	ldr	r1, [pc, #48]	@ (8003770 <System_UI_Loop+0x8b4>)
 8003740:	480c      	ldr	r0, [pc, #48]	@ (8003774 <System_UI_Loop+0x8b8>)
 8003742:	f004 fa1b 	bl	8007b7c <OLED_DoTweenObject>
 8003746:	e08d      	b.n	8003864 <System_UI_Loop+0x9a8>
 8003748:	0800ddf4 	.word	0x0800ddf4
 800374c:	20001014 	.word	0x20001014
 8003750:	20000002 	.word	0x20000002
 8003754:	0800de04 	.word	0x0800de04
 8003758:	0800de14 	.word	0x0800de14
 800375c:	20000001 	.word	0x20000001
 8003760:	20000bfc 	.word	0x20000bfc
 8003764:	0800dd40 	.word	0x0800dd40
 8003768:	20001608 	.word	0x20001608
 800376c:	0800dd48 	.word	0x0800dd48
 8003770:	0800dd50 	.word	0x0800dd50
 8003774:	200039c0 	.word	0x200039c0
 8003778:	0800dd5c 	.word	0x0800dd5c
 800377c:	20001bfc 	.word	0x20001bfc
 8003780:	0800dd84 	.word	0x0800dd84
 8003784:	200021f0 	.word	0x200021f0
 8003788:	0800dd8c 	.word	0x0800dd8c
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_ABOUT)
 800378c:	4bbb      	ldr	r3, [pc, #748]	@ (8003a7c <System_UI_Loop+0xbc0>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b02      	cmp	r3, #2
 8003792:	d167      	bne.n	8003864 <System_UI_Loop+0x9a8>
 8003794:	4bba      	ldr	r3, [pc, #744]	@ (8003a80 <System_UI_Loop+0xbc4>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b03      	cmp	r3, #3
 800379a:	d163      	bne.n	8003864 <System_UI_Loop+0x9a8>
    {
        OLED_DoTweenObject(&About_AnimationManager, "Developer", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 800379c:	4bb9      	ldr	r3, [pc, #740]	@ (8003a84 <System_UI_Loop+0xbc8>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	f1c3 0202 	rsb	r2, r3, #2
 80037a4:	4613      	mov	r3, r2
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	4413      	add	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	3303      	adds	r3, #3
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fc fd97 	bl	80002e4 <__aeabi_i2f>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2203      	movs	r2, #3
 80037ba:	9201      	str	r2, [sp, #4]
 80037bc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037c0:	9200      	str	r2, [sp, #0]
 80037c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80037c6:	49b0      	ldr	r1, [pc, #704]	@ (8003a88 <System_UI_Loop+0xbcc>)
 80037c8:	48b0      	ldr	r0, [pc, #704]	@ (8003a8c <System_UI_Loop+0xbd0>)
 80037ca:	f004 f9d7 	bl	8007b7c <OLED_DoTweenObject>
        OLED_DoTweenObject(&About_AnimationManager, "Github", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 80037ce:	4bad      	ldr	r3, [pc, #692]	@ (8003a84 <System_UI_Loop+0xbc8>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	f1c3 0203 	rsb	r2, r3, #3
 80037d6:	4613      	mov	r3, r2
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	3303      	adds	r3, #3
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fc fd7e 	bl	80002e4 <__aeabi_i2f>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2203      	movs	r2, #3
 80037ec:	9201      	str	r2, [sp, #4]
 80037ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037f2:	9200      	str	r2, [sp, #0]
 80037f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80037f8:	49a5      	ldr	r1, [pc, #660]	@ (8003a90 <System_UI_Loop+0xbd4>)
 80037fa:	48a4      	ldr	r0, [pc, #656]	@ (8003a8c <System_UI_Loop+0xbd0>)
 80037fc:	f004 f9be 	bl	8007b7c <OLED_DoTweenObject>
        OLED_DoTweenObject(&About_AnimationManager, "Donate", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 8003800:	4ba0      	ldr	r3, [pc, #640]	@ (8003a84 <System_UI_Loop+0xbc8>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	f1c3 0204 	rsb	r2, r3, #4
 8003808:	4613      	mov	r3, r2
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	3303      	adds	r3, #3
 8003814:	4618      	mov	r0, r3
 8003816:	f7fc fd65 	bl	80002e4 <__aeabi_i2f>
 800381a:	4603      	mov	r3, r0
 800381c:	2203      	movs	r2, #3
 800381e:	9201      	str	r2, [sp, #4]
 8003820:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003824:	9200      	str	r2, [sp, #0]
 8003826:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800382a:	499a      	ldr	r1, [pc, #616]	@ (8003a94 <System_UI_Loop+0xbd8>)
 800382c:	4897      	ldr	r0, [pc, #604]	@ (8003a8c <System_UI_Loop+0xbd0>)
 800382e:	f004 f9a5 	bl	8007b7c <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), PAGE_TWEEN_TIME, PAGE_TWEEN_STYLE);
 8003832:	4b94      	ldr	r3, [pc, #592]	@ (8003a84 <System_UI_Loop+0xbc8>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	f1c3 0205 	rsb	r2, r3, #5
 800383a:	4613      	mov	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	3303      	adds	r3, #3
 8003846:	4618      	mov	r0, r3
 8003848:	f7fc fd4c 	bl	80002e4 <__aeabi_i2f>
 800384c:	4603      	mov	r3, r0
 800384e:	2203      	movs	r2, #3
 8003850:	9201      	str	r2, [sp, #4]
 8003852:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003856:	9200      	str	r2, [sp, #0]
 8003858:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800385c:	498e      	ldr	r1, [pc, #568]	@ (8003a98 <System_UI_Loop+0xbdc>)
 800385e:	488f      	ldr	r0, [pc, #572]	@ (8003a9c <System_UI_Loop+0xbe0>)
 8003860:	f004 f98c 	bl	8007b7c <OLED_DoTweenObject>

#pragma endregion pager

#pragma region DRAWER //画出你的UI

    OLED_GetObjectPosition(&Menu_AnimationManager, "SettingsButton", &x, &y);
 8003864:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003868:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800386c:	498c      	ldr	r1, [pc, #560]	@ (8003aa0 <System_UI_Loop+0xbe4>)
 800386e:	488d      	ldr	r0, [pc, #564]	@ (8003aa4 <System_UI_Loop+0xbe8>)
 8003870:	f004 f8a9 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Settings");
 8003874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003876:	4618      	mov	r0, r3
 8003878:	f7fc ff64 	bl	8000744 <__aeabi_f2iz>
 800387c:	4603      	mov	r3, r0
 800387e:	b21c      	sxth	r4, r3
 8003880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003882:	4618      	mov	r0, r3
 8003884:	f7fc ff5e 	bl	8000744 <__aeabi_f2iz>
 8003888:	4603      	mov	r3, r0
 800388a:	b21b      	sxth	r3, r3
 800388c:	4a86      	ldr	r2, [pc, #536]	@ (8003aa8 <System_UI_Loop+0xbec>)
 800388e:	4619      	mov	r1, r3
 8003890:	4620      	mov	r0, r4
 8003892:	f7ff fa75 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "StatusButton", &x, &y);
 8003896:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800389a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800389e:	4983      	ldr	r1, [pc, #524]	@ (8003aac <System_UI_Loop+0xbf0>)
 80038a0:	4880      	ldr	r0, [pc, #512]	@ (8003aa4 <System_UI_Loop+0xbe8>)
 80038a2:	f004 f890 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Status");
 80038a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fc ff4b 	bl	8000744 <__aeabi_f2iz>
 80038ae:	4603      	mov	r3, r0
 80038b0:	b21c      	sxth	r4, r3
 80038b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fc ff45 	bl	8000744 <__aeabi_f2iz>
 80038ba:	4603      	mov	r3, r0
 80038bc:	b21b      	sxth	r3, r3
 80038be:	4a7c      	ldr	r2, [pc, #496]	@ (8003ab0 <System_UI_Loop+0xbf4>)
 80038c0:	4619      	mov	r1, r3
 80038c2:	4620      	mov	r0, r4
 80038c4:	f7ff fa5c 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "GamesButton", &x, &y);
 80038c8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80038cc:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80038d0:	4978      	ldr	r1, [pc, #480]	@ (8003ab4 <System_UI_Loop+0xbf8>)
 80038d2:	4874      	ldr	r0, [pc, #464]	@ (8003aa4 <System_UI_Loop+0xbe8>)
 80038d4:	f004 f877 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Games");
 80038d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fc ff32 	bl	8000744 <__aeabi_f2iz>
 80038e0:	4603      	mov	r3, r0
 80038e2:	b21c      	sxth	r4, r3
 80038e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fc ff2c 	bl	8000744 <__aeabi_f2iz>
 80038ec:	4603      	mov	r3, r0
 80038ee:	b21b      	sxth	r3, r3
 80038f0:	4a71      	ldr	r2, [pc, #452]	@ (8003ab8 <System_UI_Loop+0xbfc>)
 80038f2:	4619      	mov	r1, r3
 80038f4:	4620      	mov	r0, r4
 80038f6:	f7ff fa43 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "AboutButton", &x, &y);
 80038fa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80038fe:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003902:	496e      	ldr	r1, [pc, #440]	@ (8003abc <System_UI_Loop+0xc00>)
 8003904:	4867      	ldr	r0, [pc, #412]	@ (8003aa4 <System_UI_Loop+0xbe8>)
 8003906:	f004 f85e 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "About");
 800390a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800390c:	4618      	mov	r0, r3
 800390e:	f7fc ff19 	bl	8000744 <__aeabi_f2iz>
 8003912:	4603      	mov	r3, r0
 8003914:	b21c      	sxth	r4, r3
 8003916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003918:	4618      	mov	r0, r3
 800391a:	f7fc ff13 	bl	8000744 <__aeabi_f2iz>
 800391e:	4603      	mov	r3, r0
 8003920:	b21b      	sxth	r3, r3
 8003922:	4a67      	ldr	r2, [pc, #412]	@ (8003ac0 <System_UI_Loop+0xc04>)
 8003924:	4619      	mov	r1, r3
 8003926:	4620      	mov	r0, r4
 8003928:	f7ff fa2a 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "ToolsButton", &x, &y);
 800392c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003930:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003934:	4963      	ldr	r1, [pc, #396]	@ (8003ac4 <System_UI_Loop+0xc08>)
 8003936:	485b      	ldr	r0, [pc, #364]	@ (8003aa4 <System_UI_Loop+0xbe8>)
 8003938:	f004 f845 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Tools");
 800393c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800393e:	4618      	mov	r0, r3
 8003940:	f7fc ff00 	bl	8000744 <__aeabi_f2iz>
 8003944:	4603      	mov	r3, r0
 8003946:	b21c      	sxth	r4, r3
 8003948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800394a:	4618      	mov	r0, r3
 800394c:	f7fc fefa 	bl	8000744 <__aeabi_f2iz>
 8003950:	4603      	mov	r3, r0
 8003952:	b21b      	sxth	r3, r3
 8003954:	4a5c      	ldr	r2, [pc, #368]	@ (8003ac8 <System_UI_Loop+0xc0c>)
 8003956:	4619      	mov	r1, r3
 8003958:	4620      	mov	r0, r4
 800395a:	f7ff fa11 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&Games_AnimationManager, "Snake", &x, &y);
 800395e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003962:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003966:	4959      	ldr	r1, [pc, #356]	@ (8003acc <System_UI_Loop+0xc10>)
 8003968:	4859      	ldr	r0, [pc, #356]	@ (8003ad0 <System_UI_Loop+0xc14>)
 800396a:	f004 f82c 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Snake");
 800396e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003970:	4618      	mov	r0, r3
 8003972:	f7fc fee7 	bl	8000744 <__aeabi_f2iz>
 8003976:	4603      	mov	r3, r0
 8003978:	b21c      	sxth	r4, r3
 800397a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800397c:	4618      	mov	r0, r3
 800397e:	f7fc fee1 	bl	8000744 <__aeabi_f2iz>
 8003982:	4603      	mov	r3, r0
 8003984:	b21b      	sxth	r3, r3
 8003986:	4a51      	ldr	r2, [pc, #324]	@ (8003acc <System_UI_Loop+0xc10>)
 8003988:	4619      	mov	r1, r3
 800398a:	4620      	mov	r0, r4
 800398c:	f7ff f9f8 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&Games_AnimationManager, "2048", &x, &y);
 8003990:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003994:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003998:	494e      	ldr	r1, [pc, #312]	@ (8003ad4 <System_UI_Loop+0xc18>)
 800399a:	484d      	ldr	r0, [pc, #308]	@ (8003ad0 <System_UI_Loop+0xc14>)
 800399c:	f004 f813 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "2048");
 80039a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fc fece 	bl	8000744 <__aeabi_f2iz>
 80039a8:	4603      	mov	r3, r0
 80039aa:	b21c      	sxth	r4, r3
 80039ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fc fec8 	bl	8000744 <__aeabi_f2iz>
 80039b4:	4603      	mov	r3, r0
 80039b6:	b21b      	sxth	r3, r3
 80039b8:	4a46      	ldr	r2, [pc, #280]	@ (8003ad4 <System_UI_Loop+0xc18>)
 80039ba:	4619      	mov	r1, r3
 80039bc:	4620      	mov	r0, r4
 80039be:	f7ff f9df 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_AnimationManager, "BackButton", &x, &y);
 80039c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80039c6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80039ca:	4933      	ldr	r1, [pc, #204]	@ (8003a98 <System_UI_Loop+0xbdc>)
 80039cc:	4833      	ldr	r0, [pc, #204]	@ (8003a9c <System_UI_Loop+0xbe0>)
 80039ce:	f003 fffa 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Back");
 80039d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fc feb5 	bl	8000744 <__aeabi_f2iz>
 80039da:	4603      	mov	r3, r0
 80039dc:	b21c      	sxth	r4, r3
 80039de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fc feaf 	bl	8000744 <__aeabi_f2iz>
 80039e6:	4603      	mov	r3, r0
 80039e8:	b21b      	sxth	r3, r3
 80039ea:	4a3b      	ldr	r2, [pc, #236]	@ (8003ad8 <System_UI_Loop+0xc1c>)
 80039ec:	4619      	mov	r1, r3
 80039ee:	4620      	mov	r0, r4
 80039f0:	f7ff f9c6 	bl	8002d80 <OLED_DisplayString>

    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleGames", &x, &y);
 80039f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80039f8:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80039fc:	4937      	ldr	r1, [pc, #220]	@ (8003adc <System_UI_Loop+0xc20>)
 80039fe:	4838      	ldr	r0, [pc, #224]	@ (8003ae0 <System_UI_Loop+0xc24>)
 8003a00:	f003 ffe1 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Epicful Games");
 8003a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fc fe9c 	bl	8000744 <__aeabi_f2iz>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	b21c      	sxth	r4, r3
 8003a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fc fe96 	bl	8000744 <__aeabi_f2iz>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	b21b      	sxth	r3, r3
 8003a1c:	4a31      	ldr	r2, [pc, #196]	@ (8003ae4 <System_UI_Loop+0xc28>)
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4620      	mov	r0, r4
 8003a22:	f7ff f9ad 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleTools", &x, &y);
 8003a26:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003a2a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003a2e:	492e      	ldr	r1, [pc, #184]	@ (8003ae8 <System_UI_Loop+0xc2c>)
 8003a30:	482b      	ldr	r0, [pc, #172]	@ (8003ae0 <System_UI_Loop+0xc24>)
 8003a32:	f003 ffc8 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Tools For You");
 8003a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fc fe83 	bl	8000744 <__aeabi_f2iz>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	b21c      	sxth	r4, r3
 8003a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fc fe7d 	bl	8000744 <__aeabi_f2iz>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	b21b      	sxth	r3, r3
 8003a4e:	4a27      	ldr	r2, [pc, #156]	@ (8003aec <System_UI_Loop+0xc30>)
 8003a50:	4619      	mov	r1, r3
 8003a52:	4620      	mov	r0, r4
 8003a54:	f7ff f994 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleStatus", &x, &y);
 8003a58:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003a5c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003a60:	4923      	ldr	r1, [pc, #140]	@ (8003af0 <System_UI_Loop+0xc34>)
 8003a62:	481f      	ldr	r0, [pc, #124]	@ (8003ae0 <System_UI_Loop+0xc24>)
 8003a64:	f003 ffaf 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Machine States");
 8003a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fc fe6a 	bl	8000744 <__aeabi_f2iz>
 8003a70:	4603      	mov	r3, r0
 8003a72:	b21c      	sxth	r4, r3
 8003a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a76:	4618      	mov	r0, r3
 8003a78:	e03c      	b.n	8003af4 <System_UI_Loop+0xc38>
 8003a7a:	bf00      	nop
 8003a7c:	20000001 	.word	0x20000001
 8003a80:	20000bfc 	.word	0x20000bfc
 8003a84:	20000002 	.word	0x20000002
 8003a88:	0800dd9c 	.word	0x0800dd9c
 8003a8c:	200027e4 	.word	0x200027e4
 8003a90:	0800dda8 	.word	0x0800dda8
 8003a94:	0800ddb0 	.word	0x0800ddb0
 8003a98:	0800dd50 	.word	0x0800dd50
 8003a9c:	200039c0 	.word	0x200039c0
 8003aa0:	0800de04 	.word	0x0800de04
 8003aa4:	20001014 	.word	0x20001014
 8003aa8:	0800de20 	.word	0x0800de20
 8003aac:	0800ddf4 	.word	0x0800ddf4
 8003ab0:	0800dd74 	.word	0x0800dd74
 8003ab4:	0800dddc 	.word	0x0800dddc
 8003ab8:	0800de2c 	.word	0x0800de2c
 8003abc:	0800de14 	.word	0x0800de14
 8003ac0:	0800de34 	.word	0x0800de34
 8003ac4:	0800dde8 	.word	0x0800dde8
 8003ac8:	0800de3c 	.word	0x0800de3c
 8003acc:	0800dd40 	.word	0x0800dd40
 8003ad0:	20001608 	.word	0x20001608
 8003ad4:	0800dd48 	.word	0x0800dd48
 8003ad8:	0800de44 	.word	0x0800de44
 8003adc:	0800dc9c 	.word	0x0800dc9c
 8003ae0:	200033cc 	.word	0x200033cc
 8003ae4:	0800de4c 	.word	0x0800de4c
 8003ae8:	0800dca8 	.word	0x0800dca8
 8003aec:	0800de5c 	.word	0x0800de5c
 8003af0:	0800dcb4 	.word	0x0800dcb4
 8003af4:	f7fc fe26 	bl	8000744 <__aeabi_f2iz>
 8003af8:	4603      	mov	r3, r0
 8003afa:	b21b      	sxth	r3, r3
 8003afc:	4abf      	ldr	r2, [pc, #764]	@ (8003dfc <System_UI_Loop+0xf40>)
 8003afe:	4619      	mov	r1, r3
 8003b00:	4620      	mov	r0, r4
 8003b02:	f7ff f93d 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleSettings", &x, &y);
 8003b06:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003b0a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003b0e:	49bc      	ldr	r1, [pc, #752]	@ (8003e00 <System_UI_Loop+0xf44>)
 8003b10:	48bc      	ldr	r0, [pc, #752]	@ (8003e04 <System_UI_Loop+0xf48>)
 8003b12:	f003 ff58 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "STM Settings");
 8003b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fc fe13 	bl	8000744 <__aeabi_f2iz>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	b21c      	sxth	r4, r3
 8003b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fc fe0d 	bl	8000744 <__aeabi_f2iz>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	b21b      	sxth	r3, r3
 8003b2e:	4ab6      	ldr	r2, [pc, #728]	@ (8003e08 <System_UI_Loop+0xf4c>)
 8003b30:	4619      	mov	r1, r3
 8003b32:	4620      	mov	r0, r4
 8003b34:	f7ff f924 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleAbout", &x, &y);
 8003b38:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003b3c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003b40:	49b2      	ldr	r1, [pc, #712]	@ (8003e0c <System_UI_Loop+0xf50>)
 8003b42:	48b0      	ldr	r0, [pc, #704]	@ (8003e04 <System_UI_Loop+0xf48>)
 8003b44:	f003 ff3f 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Developer!");
 8003b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fc fdfa 	bl	8000744 <__aeabi_f2iz>
 8003b50:	4603      	mov	r3, r0
 8003b52:	b21c      	sxth	r4, r3
 8003b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fc fdf4 	bl	8000744 <__aeabi_f2iz>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	b21b      	sxth	r3, r3
 8003b60:	4aab      	ldr	r2, [pc, #684]	@ (8003e10 <System_UI_Loop+0xf54>)
 8003b62:	4619      	mov	r1, r3
 8003b64:	4620      	mov	r0, r4
 8003b66:	f7ff f90b 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleSnake", &x, &y);
 8003b6a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003b6e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003b72:	49a8      	ldr	r1, [pc, #672]	@ (8003e14 <System_UI_Loop+0xf58>)
 8003b74:	48a3      	ldr	r0, [pc, #652]	@ (8003e04 <System_UI_Loop+0xf48>)
 8003b76:	f003 ff26 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Greedy Snake");
 8003b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fc fde1 	bl	8000744 <__aeabi_f2iz>
 8003b82:	4603      	mov	r3, r0
 8003b84:	b21c      	sxth	r4, r3
 8003b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fc fddb 	bl	8000744 <__aeabi_f2iz>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	b21b      	sxth	r3, r3
 8003b92:	4aa1      	ldr	r2, [pc, #644]	@ (8003e18 <System_UI_Loop+0xf5c>)
 8003b94:	4619      	mov	r1, r3
 8003b96:	4620      	mov	r0, r4
 8003b98:	f7ff f8f2 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "Title2048", &x, &y);
 8003b9c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003ba0:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003ba4:	499d      	ldr	r1, [pc, #628]	@ (8003e1c <System_UI_Loop+0xf60>)
 8003ba6:	4897      	ldr	r0, [pc, #604]	@ (8003e04 <System_UI_Loop+0xf48>)
 8003ba8:	f003 ff0d 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Here is 2048!");
 8003bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fc fdc8 	bl	8000744 <__aeabi_f2iz>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	b21c      	sxth	r4, r3
 8003bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fc fdc2 	bl	8000744 <__aeabi_f2iz>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	b21b      	sxth	r3, r3
 8003bc4:	4a96      	ldr	r2, [pc, #600]	@ (8003e20 <System_UI_Loop+0xf64>)
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f7ff f8d9 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleBack", &x, &y);
 8003bce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003bd2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003bd6:	4993      	ldr	r1, [pc, #588]	@ (8003e24 <System_UI_Loop+0xf68>)
 8003bd8:	488a      	ldr	r0, [pc, #552]	@ (8003e04 <System_UI_Loop+0xf48>)
 8003bda:	f003 fef4 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Back To Menu");
 8003bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fc fdaf 	bl	8000744 <__aeabi_f2iz>
 8003be6:	4603      	mov	r3, r0
 8003be8:	b21c      	sxth	r4, r3
 8003bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fc fda9 	bl	8000744 <__aeabi_f2iz>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	b21b      	sxth	r3, r3
 8003bf6:	4a8c      	ldr	r2, [pc, #560]	@ (8003e28 <System_UI_Loop+0xf6c>)
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	f7ff f8c0 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "BAD APPLE!", &x, &y);
 8003c00:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003c04:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003c08:	4988      	ldr	r1, [pc, #544]	@ (8003e2c <System_UI_Loop+0xf70>)
 8003c0a:	487e      	ldr	r0, [pc, #504]	@ (8003e04 <System_UI_Loop+0xf48>)
 8003c0c:	f003 fedb 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "BAD APPLE!");
 8003c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fc fd96 	bl	8000744 <__aeabi_f2iz>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	b21c      	sxth	r4, r3
 8003c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fc fd90 	bl	8000744 <__aeabi_f2iz>
 8003c24:	4603      	mov	r3, r0
 8003c26:	b21b      	sxth	r3, r3
 8003c28:	4a80      	ldr	r2, [pc, #512]	@ (8003e2c <System_UI_Loop+0xf70>)
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	f7ff f8a7 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "Show FPS?", &x, &y);
 8003c32:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003c36:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003c3a:	497d      	ldr	r1, [pc, #500]	@ (8003e30 <System_UI_Loop+0xf74>)
 8003c3c:	4871      	ldr	r0, [pc, #452]	@ (8003e04 <System_UI_Loop+0xf48>)
 8003c3e:	f003 fec2 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Show FPS?");
 8003c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fc fd7d 	bl	8000744 <__aeabi_f2iz>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	b21c      	sxth	r4, r3
 8003c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fc fd77 	bl	8000744 <__aeabi_f2iz>
 8003c56:	4603      	mov	r3, r0
 8003c58:	b21b      	sxth	r3, r3
 8003c5a:	4a75      	ldr	r2, [pc, #468]	@ (8003e30 <System_UI_Loop+0xf74>)
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4620      	mov	r0, r4
 8003c60:	f7ff f88e 	bl	8002d80 <OLED_DisplayString>

    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleDeveloper", &x, &y);    
 8003c64:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003c68:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003c6c:	4971      	ldr	r1, [pc, #452]	@ (8003e34 <System_UI_Loop+0xf78>)
 8003c6e:	4865      	ldr	r0, [pc, #404]	@ (8003e04 <System_UI_Loop+0xf48>)
 8003c70:	f003 fea9 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Developer: UnikoZera");
 8003c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fc fd64 	bl	8000744 <__aeabi_f2iz>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	b21c      	sxth	r4, r3
 8003c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fc fd5e 	bl	8000744 <__aeabi_f2iz>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	b21b      	sxth	r3, r3
 8003c8c:	4a6a      	ldr	r2, [pc, #424]	@ (8003e38 <System_UI_Loop+0xf7c>)
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4620      	mov	r0, r4
 8003c92:	f7ff f875 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleGithub", &x, &y);
 8003c96:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003c9a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003c9e:	4967      	ldr	r1, [pc, #412]	@ (8003e3c <System_UI_Loop+0xf80>)
 8003ca0:	4858      	ldr	r0, [pc, #352]	@ (8003e04 <System_UI_Loop+0xf48>)
 8003ca2:	f003 fe90 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "GH Address");
 8003ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fc fd4b 	bl	8000744 <__aeabi_f2iz>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	b21c      	sxth	r4, r3
 8003cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fc fd45 	bl	8000744 <__aeabi_f2iz>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	b21b      	sxth	r3, r3
 8003cbe:	4a60      	ldr	r2, [pc, #384]	@ (8003e40 <System_UI_Loop+0xf84>)
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	f7ff f85c 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleDonate", &x, &y);
 8003cc8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003ccc:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003cd0:	495c      	ldr	r1, [pc, #368]	@ (8003e44 <System_UI_Loop+0xf88>)
 8003cd2:	484c      	ldr	r0, [pc, #304]	@ (8003e04 <System_UI_Loop+0xf48>)
 8003cd4:	f003 fe77 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "BiliBili Space");
 8003cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fc fd32 	bl	8000744 <__aeabi_f2iz>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	b21c      	sxth	r4, r3
 8003ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fc fd2c 	bl	8000744 <__aeabi_f2iz>
 8003cec:	4603      	mov	r3, r0
 8003cee:	b21b      	sxth	r3, r3
 8003cf0:	4a55      	ldr	r2, [pc, #340]	@ (8003e48 <System_UI_Loop+0xf8c>)
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f7ff f843 	bl	8002d80 <OLED_DisplayString>

    OLED_GetObjectPosition(&Tools_AnimationManager, "VideoPlayer", &x, &y);
 8003cfa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003cfe:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003d02:	4952      	ldr	r1, [pc, #328]	@ (8003e4c <System_UI_Loop+0xf90>)
 8003d04:	4852      	ldr	r0, [pc, #328]	@ (8003e50 <System_UI_Loop+0xf94>)
 8003d06:	f003 fe5e 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Video");
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fc fd19 	bl	8000744 <__aeabi_f2iz>
 8003d12:	4603      	mov	r3, r0
 8003d14:	b21c      	sxth	r4, r3
 8003d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fc fd13 	bl	8000744 <__aeabi_f2iz>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	b21b      	sxth	r3, r3
 8003d22:	4a4c      	ldr	r2, [pc, #304]	@ (8003e54 <System_UI_Loop+0xf98>)
 8003d24:	4619      	mov	r1, r3
 8003d26:	4620      	mov	r0, r4
 8003d28:	f7ff f82a 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&Status_AnimationManager, "RunningTime", &x, &y);
 8003d2c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003d30:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003d34:	4948      	ldr	r1, [pc, #288]	@ (8003e58 <System_UI_Loop+0xf9c>)
 8003d36:	4849      	ldr	r0, [pc, #292]	@ (8003e5c <System_UI_Loop+0xfa0>)
 8003d38:	f003 fe45 	bl	80079c6 <OLED_GetObjectPosition>
    unsigned char Timer[] = "Running Time:00:00:00";
 8003d3c:	4b48      	ldr	r3, [pc, #288]	@ (8003e60 <System_UI_Loop+0xfa4>)
 8003d3e:	f107 0414 	add.w	r4, r7, #20
 8003d42:	461d      	mov	r5, r3
 8003d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d48:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003d4c:	6020      	str	r0, [r4, #0]
 8003d4e:	3404      	adds	r4, #4
 8003d50:	8021      	strh	r1, [r4, #0]
    sprintf(Timer, "Running Time:%02d:%02d:%02d", (HAL_GetTick() / 3600000) % 24, (HAL_GetTick() / 60000) % 60, (HAL_GetTick() / 1000) % 60);
 8003d52:	f004 fea5 	bl	8008aa0 <HAL_GetTick>
 8003d56:	4603      	mov	r3, r0
 8003d58:	4a42      	ldr	r2, [pc, #264]	@ (8003e64 <System_UI_Loop+0xfa8>)
 8003d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5e:	0d5a      	lsrs	r2, r3, #21
 8003d60:	4b41      	ldr	r3, [pc, #260]	@ (8003e68 <System_UI_Loop+0xfac>)
 8003d62:	fba3 1302 	umull	r1, r3, r3, r2
 8003d66:	091c      	lsrs	r4, r3, #4
 8003d68:	4623      	mov	r3, r4
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	4423      	add	r3, r4
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	1ad4      	subs	r4, r2, r3
 8003d72:	f004 fe95 	bl	8008aa0 <HAL_GetTick>
 8003d76:	4603      	mov	r3, r0
 8003d78:	4a3c      	ldr	r2, [pc, #240]	@ (8003e6c <System_UI_Loop+0xfb0>)
 8003d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7e:	0b9a      	lsrs	r2, r3, #14
 8003d80:	4b3b      	ldr	r3, [pc, #236]	@ (8003e70 <System_UI_Loop+0xfb4>)
 8003d82:	fba3 1302 	umull	r1, r3, r3, r2
 8003d86:	095d      	lsrs	r5, r3, #5
 8003d88:	462b      	mov	r3, r5
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	1b5b      	subs	r3, r3, r5
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	1ad5      	subs	r5, r2, r3
 8003d92:	f004 fe85 	bl	8008aa0 <HAL_GetTick>
 8003d96:	4603      	mov	r3, r0
 8003d98:	4a36      	ldr	r2, [pc, #216]	@ (8003e74 <System_UI_Loop+0xfb8>)
 8003d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9e:	0999      	lsrs	r1, r3, #6
 8003da0:	4b33      	ldr	r3, [pc, #204]	@ (8003e70 <System_UI_Loop+0xfb4>)
 8003da2:	fba3 2301 	umull	r2, r3, r3, r1
 8003da6:	095a      	lsrs	r2, r3, #5
 8003da8:	4613      	mov	r3, r2
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	1aca      	subs	r2, r1, r3
 8003db2:	f107 0014 	add.w	r0, r7, #20
 8003db6:	9200      	str	r2, [sp, #0]
 8003db8:	462b      	mov	r3, r5
 8003dba:	4622      	mov	r2, r4
 8003dbc:	492e      	ldr	r1, [pc, #184]	@ (8003e78 <System_UI_Loop+0xfbc>)
 8003dbe:	f007 fc0d 	bl	800b5dc <siprintf>
    OLED_DisplayString(x, y, Timer);
 8003dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fc fcbd 	bl	8000744 <__aeabi_f2iz>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	b21c      	sxth	r4, r3
 8003dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fc fcb7 	bl	8000744 <__aeabi_f2iz>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	b21b      	sxth	r3, r3
 8003dda:	f107 0214 	add.w	r2, r7, #20
 8003dde:	4619      	mov	r1, r3
 8003de0:	4620      	mov	r0, r4
 8003de2:	f7fe ffcd 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&Status_AnimationManager, "Status", &x, &y);
 8003de6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003dea:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003dee:	4923      	ldr	r1, [pc, #140]	@ (8003e7c <System_UI_Loop+0xfc0>)
 8003df0:	481a      	ldr	r0, [pc, #104]	@ (8003e5c <System_UI_Loop+0xfa0>)
 8003df2:	f003 fde8 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "MCU:STM32F103C8T6");
 8003df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df8:	4618      	mov	r0, r3
 8003dfa:	e041      	b.n	8003e80 <System_UI_Loop+0xfc4>
 8003dfc:	0800de6c 	.word	0x0800de6c
 8003e00:	0800dcc0 	.word	0x0800dcc0
 8003e04:	200033cc 	.word	0x200033cc
 8003e08:	0800de7c 	.word	0x0800de7c
 8003e0c:	0800dcd0 	.word	0x0800dcd0
 8003e10:	0800de8c 	.word	0x0800de8c
 8003e14:	0800dcdc 	.word	0x0800dcdc
 8003e18:	0800de98 	.word	0x0800de98
 8003e1c:	0800dce8 	.word	0x0800dce8
 8003e20:	0800dea8 	.word	0x0800dea8
 8003e24:	0800dcf4 	.word	0x0800dcf4
 8003e28:	0800deb8 	.word	0x0800deb8
 8003e2c:	0800dd00 	.word	0x0800dd00
 8003e30:	0800dd0c 	.word	0x0800dd0c
 8003e34:	0800dd18 	.word	0x0800dd18
 8003e38:	0800dec8 	.word	0x0800dec8
 8003e3c:	0800dd28 	.word	0x0800dd28
 8003e40:	0800dee0 	.word	0x0800dee0
 8003e44:	0800dd34 	.word	0x0800dd34
 8003e48:	0800deec 	.word	0x0800deec
 8003e4c:	0800dd5c 	.word	0x0800dd5c
 8003e50:	20001bfc 	.word	0x20001bfc
 8003e54:	0800defc 	.word	0x0800defc
 8003e58:	0800dd68 	.word	0x0800dd68
 8003e5c:	20002dd8 	.word	0x20002dd8
 8003e60:	0800df90 	.word	0x0800df90
 8003e64:	95217cb1 	.word	0x95217cb1
 8003e68:	aaaaaaab 	.word	0xaaaaaaab
 8003e6c:	45e7b273 	.word	0x45e7b273
 8003e70:	88888889 	.word	0x88888889
 8003e74:	10624dd3 	.word	0x10624dd3
 8003e78:	0800df04 	.word	0x0800df04
 8003e7c:	0800dd74 	.word	0x0800dd74
 8003e80:	f7fc fc60 	bl	8000744 <__aeabi_f2iz>
 8003e84:	4603      	mov	r3, r0
 8003e86:	b21c      	sxth	r4, r3
 8003e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fc fc5a 	bl	8000744 <__aeabi_f2iz>
 8003e90:	4603      	mov	r3, r0
 8003e92:	b21b      	sxth	r3, r3
 8003e94:	4a43      	ldr	r2, [pc, #268]	@ (8003fa4 <System_UI_Loop+0x10e8>)
 8003e96:	4619      	mov	r1, r3
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f7fe ff71 	bl	8002d80 <OLED_DisplayString>
    OLED_DisplayString(x, y + 9, "Core: Cortex-M3");
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fc fc4f 	bl	8000744 <__aeabi_f2iz>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	b21c      	sxth	r4, r3
 8003eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eac:	493e      	ldr	r1, [pc, #248]	@ (8003fa8 <System_UI_Loop+0x10ec>)
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fc f964 	bl	800017c <__addsf3>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fc fc44 	bl	8000744 <__aeabi_f2iz>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	b21b      	sxth	r3, r3
 8003ec0:	4a3a      	ldr	r2, [pc, #232]	@ (8003fac <System_UI_Loop+0x10f0>)
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	f7fe ff5b 	bl	8002d80 <OLED_DisplayString>
    OLED_DisplayString(x, y + 18, "CrystalOS v1.0");
 8003eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fc fc39 	bl	8000744 <__aeabi_f2iz>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	b21c      	sxth	r4, r3
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed8:	4935      	ldr	r1, [pc, #212]	@ (8003fb0 <System_UI_Loop+0x10f4>)
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fc f94e 	bl	800017c <__addsf3>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fc fc2e 	bl	8000744 <__aeabi_f2iz>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	b21b      	sxth	r3, r3
 8003eec:	4a31      	ldr	r2, [pc, #196]	@ (8003fb4 <System_UI_Loop+0x10f8>)
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f7fe ff45 	bl	8002d80 <OLED_DisplayString>
    OLED_DisplayString(x, y + 27, "UnikoZera Made");
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fc fc23 	bl	8000744 <__aeabi_f2iz>
 8003efe:	4603      	mov	r3, r0
 8003f00:	b21c      	sxth	r4, r3
 8003f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f04:	492c      	ldr	r1, [pc, #176]	@ (8003fb8 <System_UI_Loop+0x10fc>)
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fc f938 	bl	800017c <__addsf3>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fc fc18 	bl	8000744 <__aeabi_f2iz>
 8003f14:	4603      	mov	r3, r0
 8003f16:	b21b      	sxth	r3, r3
 8003f18:	4a28      	ldr	r2, [pc, #160]	@ (8003fbc <System_UI_Loop+0x1100>)
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f7fe ff2f 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&Status_AnimationManager, "CUBE", &x, &y);
 8003f22:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003f26:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003f2a:	4925      	ldr	r1, [pc, #148]	@ (8003fc0 <System_UI_Loop+0x1104>)
 8003f2c:	4825      	ldr	r0, [pc, #148]	@ (8003fc4 <System_UI_Loop+0x1108>)
 8003f2e:	f003 fd4a 	bl	80079c6 <OLED_GetObjectPosition>
    CUBE.transform.center_x = x;
 8003f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fc fc05 	bl	8000744 <__aeabi_f2iz>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	b21a      	sxth	r2, r3
 8003f3e:	4b22      	ldr	r3, [pc, #136]	@ (8003fc8 <System_UI_Loop+0x110c>)
 8003f40:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
    CUBE.transform.center_y = y;
 8003f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fc fbfc 	bl	8000744 <__aeabi_f2iz>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	b21a      	sxth	r2, r3
 8003f50:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc8 <System_UI_Loop+0x110c>)
 8003f52:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
    OLED_UpdateCubeRotation(&CUBE, 0.02f, 0.03f, 0.01f); // X,Y,Z轴旋转增量
 8003f56:	4b1d      	ldr	r3, [pc, #116]	@ (8003fcc <System_UI_Loop+0x1110>)
 8003f58:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd0 <System_UI_Loop+0x1114>)
 8003f5a:	491e      	ldr	r1, [pc, #120]	@ (8003fd4 <System_UI_Loop+0x1118>)
 8003f5c:	481a      	ldr	r0, [pc, #104]	@ (8003fc8 <System_UI_Loop+0x110c>)
 8003f5e:	f7fc fdcb 	bl	8000af8 <OLED_UpdateCubeRotation>
    OLED_DrawCube3D(&CUBE);
 8003f62:	4819      	ldr	r0, [pc, #100]	@ (8003fc8 <System_UI_Loop+0x110c>)
 8003f64:	f7fd f812 	bl	8000f8c <OLED_DrawCube3D>

    OLED_GetObjectPosition(&Settings_AnimationManager, "ShowFPS", &x, &y);
 8003f68:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003f6c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003f70:	4919      	ldr	r1, [pc, #100]	@ (8003fd8 <System_UI_Loop+0x111c>)
 8003f72:	481a      	ldr	r0, [pc, #104]	@ (8003fdc <System_UI_Loop+0x1120>)
 8003f74:	f003 fd27 	bl	80079c6 <OLED_GetObjectPosition>
    if (isShowFPS)
 8003f78:	4b19      	ldr	r3, [pc, #100]	@ (8003fe0 <System_UI_Loop+0x1124>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d033      	beq.n	8003fe8 <System_UI_Loop+0x112c>
    {
        OLED_DisplayString(x, y, "Show FPS:ON");
 8003f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fc fbde 	bl	8000744 <__aeabi_f2iz>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	b21c      	sxth	r4, r3
 8003f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fc fbd8 	bl	8000744 <__aeabi_f2iz>
 8003f94:	4603      	mov	r3, r0
 8003f96:	b21b      	sxth	r3, r3
 8003f98:	4a12      	ldr	r2, [pc, #72]	@ (8003fe4 <System_UI_Loop+0x1128>)
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	f7fe feef 	bl	8002d80 <OLED_DisplayString>
 8003fa2:	e032      	b.n	800400a <System_UI_Loop+0x114e>
 8003fa4:	0800df20 	.word	0x0800df20
 8003fa8:	41100000 	.word	0x41100000
 8003fac:	0800df34 	.word	0x0800df34
 8003fb0:	41900000 	.word	0x41900000
 8003fb4:	0800df44 	.word	0x0800df44
 8003fb8:	41d80000 	.word	0x41d80000
 8003fbc:	0800df54 	.word	0x0800df54
 8003fc0:	0800dd7c 	.word	0x0800dd7c
 8003fc4:	20002dd8 	.word	0x20002dd8
 8003fc8:	20000b20 	.word	0x20000b20
 8003fcc:	3c23d70a 	.word	0x3c23d70a
 8003fd0:	3cf5c28f 	.word	0x3cf5c28f
 8003fd4:	3ca3d70a 	.word	0x3ca3d70a
 8003fd8:	0800dd84 	.word	0x0800dd84
 8003fdc:	200021f0 	.word	0x200021f0
 8003fe0:	20000c00 	.word	0x20000c00
 8003fe4:	0800df64 	.word	0x0800df64
    }
    else
    {
        OLED_DisplayString(x, y, "Show FPS:OFF");
 8003fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fc fbaa 	bl	8000744 <__aeabi_f2iz>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	b21c      	sxth	r4, r3
 8003ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fc fba4 	bl	8000744 <__aeabi_f2iz>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	b21b      	sxth	r3, r3
 8004000:	4ab6      	ldr	r2, [pc, #728]	@ (80042dc <System_UI_Loop+0x1420>)
 8004002:	4619      	mov	r1, r3
 8004004:	4620      	mov	r0, r4
 8004006:	f7fe febb 	bl	8002d80 <OLED_DisplayString>
    }
    
    unsigned char Lightness[20] = "Lightness: 100%";
 800400a:	4bb5      	ldr	r3, [pc, #724]	@ (80042e0 <System_UI_Loop+0x1424>)
 800400c:	463c      	mov	r4, r7
 800400e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004010:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004014:	2300      	movs	r3, #0
 8004016:	613b      	str	r3, [r7, #16]
    int val = (brightness * 100) / 255; // 将亮度转换为百分比
 8004018:	4bb2      	ldr	r3, [pc, #712]	@ (80042e4 <System_UI_Loop+0x1428>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	2364      	movs	r3, #100	@ 0x64
 8004020:	fb02 f303 	mul.w	r3, r2, r3
 8004024:	4ab0      	ldr	r2, [pc, #704]	@ (80042e8 <System_UI_Loop+0x142c>)
 8004026:	fb82 1203 	smull	r1, r2, r2, r3
 800402a:	441a      	add	r2, r3
 800402c:	11d2      	asrs	r2, r2, #7
 800402e:	17db      	asrs	r3, r3, #31
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	63fb      	str	r3, [r7, #60]	@ 0x3c
    OLED_GetObjectPosition(&Settings_AnimationManager, "Lightness", &x, &y);
 8004034:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004038:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800403c:	49ab      	ldr	r1, [pc, #684]	@ (80042ec <System_UI_Loop+0x1430>)
 800403e:	48ac      	ldr	r0, [pc, #688]	@ (80042f0 <System_UI_Loop+0x1434>)
 8004040:	f003 fcc1 	bl	80079c6 <OLED_GetObjectPosition>
    sprintf(Lightness, "Lightness: %d%%", val);
 8004044:	463b      	mov	r3, r7
 8004046:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004048:	49aa      	ldr	r1, [pc, #680]	@ (80042f4 <System_UI_Loop+0x1438>)
 800404a:	4618      	mov	r0, r3
 800404c:	f007 fac6 	bl	800b5dc <siprintf>
    OLED_DisplayString(x, y, Lightness);
 8004050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004052:	4618      	mov	r0, r3
 8004054:	f7fc fb76 	bl	8000744 <__aeabi_f2iz>
 8004058:	4603      	mov	r3, r0
 800405a:	b21c      	sxth	r4, r3
 800405c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800405e:	4618      	mov	r0, r3
 8004060:	f7fc fb70 	bl	8000744 <__aeabi_f2iz>
 8004064:	4603      	mov	r3, r0
 8004066:	b21b      	sxth	r3, r3
 8004068:	463a      	mov	r2, r7
 800406a:	4619      	mov	r1, r3
 800406c:	4620      	mov	r0, r4
 800406e:	f7fe fe87 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&Settings_AnimationManager, "Bar", &x, &y);
 8004072:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004076:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800407a:	499f      	ldr	r1, [pc, #636]	@ (80042f8 <System_UI_Loop+0x143c>)
 800407c:	489c      	ldr	r0, [pc, #624]	@ (80042f0 <System_UI_Loop+0x1434>)
 800407e:	f003 fca2 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DrawProgressBar(x, y, 82, val);
 8004082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004084:	4618      	mov	r0, r3
 8004086:	f7fc fb5d 	bl	8000744 <__aeabi_f2iz>
 800408a:	4603      	mov	r3, r0
 800408c:	b21c      	sxth	r4, r3
 800408e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004090:	4618      	mov	r0, r3
 8004092:	f7fc fb57 	bl	8000744 <__aeabi_f2iz>
 8004096:	4603      	mov	r3, r0
 8004098:	b219      	sxth	r1, r3
 800409a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2252      	movs	r2, #82	@ 0x52
 80040a0:	4620      	mov	r0, r4
 80040a2:	f003 fe73 	bl	8007d8c <OLED_DrawProgressBar>

    OLED_GetObjectPosition(&About_AnimationManager, "Developer", &x, &y);
 80040a6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80040aa:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80040ae:	4993      	ldr	r1, [pc, #588]	@ (80042fc <System_UI_Loop+0x1440>)
 80040b0:	4893      	ldr	r0, [pc, #588]	@ (8004300 <System_UI_Loop+0x1444>)
 80040b2:	f003 fc88 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Developer");
 80040b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fc fb43 	bl	8000744 <__aeabi_f2iz>
 80040be:	4603      	mov	r3, r0
 80040c0:	b21c      	sxth	r4, r3
 80040c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fc fb3d 	bl	8000744 <__aeabi_f2iz>
 80040ca:	4603      	mov	r3, r0
 80040cc:	b21b      	sxth	r3, r3
 80040ce:	4a8b      	ldr	r2, [pc, #556]	@ (80042fc <System_UI_Loop+0x1440>)
 80040d0:	4619      	mov	r1, r3
 80040d2:	4620      	mov	r0, r4
 80040d4:	f7fe fe54 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&About_AnimationManager, "Github", &x, &y);
 80040d8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80040dc:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80040e0:	4988      	ldr	r1, [pc, #544]	@ (8004304 <System_UI_Loop+0x1448>)
 80040e2:	4887      	ldr	r0, [pc, #540]	@ (8004300 <System_UI_Loop+0x1444>)
 80040e4:	f003 fc6f 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Github");
 80040e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fc fb2a 	bl	8000744 <__aeabi_f2iz>
 80040f0:	4603      	mov	r3, r0
 80040f2:	b21c      	sxth	r4, r3
 80040f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fc fb24 	bl	8000744 <__aeabi_f2iz>
 80040fc:	4603      	mov	r3, r0
 80040fe:	b21b      	sxth	r3, r3
 8004100:	4a80      	ldr	r2, [pc, #512]	@ (8004304 <System_UI_Loop+0x1448>)
 8004102:	4619      	mov	r1, r3
 8004104:	4620      	mov	r0, r4
 8004106:	f7fe fe3b 	bl	8002d80 <OLED_DisplayString>
    OLED_GetObjectPosition(&About_AnimationManager, "Donate", &x, &y);
 800410a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800410e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8004112:	497d      	ldr	r1, [pc, #500]	@ (8004308 <System_UI_Loop+0x144c>)
 8004114:	487a      	ldr	r0, [pc, #488]	@ (8004300 <System_UI_Loop+0x1444>)
 8004116:	f003 fc56 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Donate");
 800411a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800411c:	4618      	mov	r0, r3
 800411e:	f7fc fb11 	bl	8000744 <__aeabi_f2iz>
 8004122:	4603      	mov	r3, r0
 8004124:	b21c      	sxth	r4, r3
 8004126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004128:	4618      	mov	r0, r3
 800412a:	f7fc fb0b 	bl	8000744 <__aeabi_f2iz>
 800412e:	4603      	mov	r3, r0
 8004130:	b21b      	sxth	r3, r3
 8004132:	4a75      	ldr	r2, [pc, #468]	@ (8004308 <System_UI_Loop+0x144c>)
 8004134:	4619      	mov	r1, r3
 8004136:	4620      	mov	r0, r4
 8004138:	f7fe fe22 	bl	8002d80 <OLED_DisplayString>

    OLED_GetObjectPosition(&g_AnimationManager, "TitleBGScale", &x, &y);
 800413c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004140:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8004144:	4971      	ldr	r1, [pc, #452]	@ (800430c <System_UI_Loop+0x1450>)
 8004146:	4872      	ldr	r0, [pc, #456]	@ (8004310 <System_UI_Loop+0x1454>)
 8004148:	f003 fc3d 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_InvertArea(OLED_WIDTH - x, 0, x, y);
 800414c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414e:	4619      	mov	r1, r3
 8004150:	f04f 4086 	mov.w	r0, #1124073472	@ 0x43000000
 8004154:	f7fc f810 	bl	8000178 <__aeabi_fsub>
 8004158:	4603      	mov	r3, r0
 800415a:	4618      	mov	r0, r3
 800415c:	f7fc faf2 	bl	8000744 <__aeabi_f2iz>
 8004160:	4603      	mov	r3, r0
 8004162:	b21c      	sxth	r4, r3
 8004164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004166:	4618      	mov	r0, r3
 8004168:	f7fc fb12 	bl	8000790 <__aeabi_f2uiz>
 800416c:	4603      	mov	r3, r0
 800416e:	b2dd      	uxtb	r5, r3
 8004170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004172:	4618      	mov	r0, r3
 8004174:	f7fc fb0c 	bl	8000790 <__aeabi_f2uiz>
 8004178:	4603      	mov	r3, r0
 800417a:	b2db      	uxtb	r3, r3
 800417c:	462a      	mov	r2, r5
 800417e:	2100      	movs	r1, #0
 8004180:	4620      	mov	r0, r4
 8004182:	f7fe fbcb 	bl	800291c <OLED_InvertArea>

    OLED_GetObjectPosition(&g_AnimationManager, "Cursor", &x, &y);
 8004186:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800418a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800418e:	4961      	ldr	r1, [pc, #388]	@ (8004314 <System_UI_Loop+0x1458>)
 8004190:	485f      	ldr	r0, [pc, #380]	@ (8004310 <System_UI_Loop+0x1454>)
 8004192:	f003 fc18 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_GetObjectPosition(&g_AnimationManager, "CursorScale", &x1, &y1);
 8004196:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800419a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800419e:	495e      	ldr	r1, [pc, #376]	@ (8004318 <System_UI_Loop+0x145c>)
 80041a0:	485b      	ldr	r0, [pc, #364]	@ (8004310 <System_UI_Loop+0x1454>)
 80041a2:	f003 fc10 	bl	80079c6 <OLED_GetObjectPosition>
    OLED_InvertArea(x - 2, y - 2, x1, y1); // 绘制光标
 80041a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fb ffe3 	bl	8000178 <__aeabi_fsub>
 80041b2:	4603      	mov	r3, r0
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fc fac5 	bl	8000744 <__aeabi_f2iz>
 80041ba:	4603      	mov	r3, r0
 80041bc:	b21c      	sxth	r4, r3
 80041be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041c0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fb ffd7 	bl	8000178 <__aeabi_fsub>
 80041ca:	4603      	mov	r3, r0
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fc fab9 	bl	8000744 <__aeabi_f2iz>
 80041d2:	4603      	mov	r3, r0
 80041d4:	b21d      	sxth	r5, r3
 80041d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fc fad9 	bl	8000790 <__aeabi_f2uiz>
 80041de:	4603      	mov	r3, r0
 80041e0:	b2de      	uxtb	r6, r3
 80041e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fc fad3 	bl	8000790 <__aeabi_f2uiz>
 80041ea:	4603      	mov	r3, r0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	4632      	mov	r2, r6
 80041f0:	4629      	mov	r1, r5
 80041f2:	4620      	mov	r0, r4
 80041f4:	f7fe fb92 	bl	800291c <OLED_InvertArea>
#pragma endregion DRAWER

#pragma region PlayerSelection //选择某个选项时候的详细内容
    if (menuRank == 1)
 80041f8:	4b48      	ldr	r3, [pc, #288]	@ (800431c <System_UI_Loop+0x1460>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	f040 8243 	bne.w	8004688 <System_UI_Loop+0x17cc>
    {
        switch (menuSelection)
 8004202:	4b47      	ldr	r3, [pc, #284]	@ (8004320 <System_UI_Loop+0x1464>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	3b01      	subs	r3, #1
 8004208:	2b04      	cmp	r3, #4
 800420a:	f200 86c7 	bhi.w	8004f9c <System_UI_Loop+0x20e0>
 800420e:	a201      	add	r2, pc, #4	@ (adr r2, 8004214 <System_UI_Loop+0x1358>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	08004229 	.word	0x08004229
 8004218:	08004361 	.word	0x08004361
 800421c:	08004415 	.word	0x08004415
 8004220:	080044c9 	.word	0x080044c9
 8004224:	080045d5 	.word	0x080045d5
        {
        case 1:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004228:	2300      	movs	r3, #0
 800422a:	9301      	str	r3, [sp, #4]
 800422c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	4b3c      	ldr	r3, [pc, #240]	@ (8004324 <System_UI_Loop+0x1468>)
 8004234:	4a3c      	ldr	r2, [pc, #240]	@ (8004328 <System_UI_Loop+0x146c>)
 8004236:	493d      	ldr	r1, [pc, #244]	@ (800432c <System_UI_Loop+0x1470>)
 8004238:	483d      	ldr	r0, [pc, #244]	@ (8004330 <System_UI_Loop+0x1474>)
 800423a:	f003 fc9f 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", OLED_WIDTH - strlen("Machine States") * 6, OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 800423e:	2300      	movs	r3, #0
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	2301      	movs	r3, #1
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	4b37      	ldr	r3, [pc, #220]	@ (8004324 <System_UI_Loop+0x1468>)
 8004248:	4a3a      	ldr	r2, [pc, #232]	@ (8004334 <System_UI_Loop+0x1478>)
 800424a:	493b      	ldr	r1, [pc, #236]	@ (8004338 <System_UI_Loop+0x147c>)
 800424c:	4838      	ldr	r0, [pc, #224]	@ (8004330 <System_UI_Loop+0x1474>)
 800424e:	f003 fc95 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", OLED_WIDTH - strlen("STM Settings") * 6, OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 8004252:	2300      	movs	r3, #0
 8004254:	9301      	str	r3, [sp, #4]
 8004256:	2301      	movs	r3, #1
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	4b32      	ldr	r3, [pc, #200]	@ (8004324 <System_UI_Loop+0x1468>)
 800425c:	4a32      	ldr	r2, [pc, #200]	@ (8004328 <System_UI_Loop+0x146c>)
 800425e:	4937      	ldr	r1, [pc, #220]	@ (800433c <System_UI_Loop+0x1480>)
 8004260:	4833      	ldr	r0, [pc, #204]	@ (8004330 <System_UI_Loop+0x1474>)
 8004262:	f003 fc8b 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004266:	2300      	movs	r3, #0
 8004268:	9301      	str	r3, [sp, #4]
 800426a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	4b2c      	ldr	r3, [pc, #176]	@ (8004324 <System_UI_Loop+0x1468>)
 8004272:	4a33      	ldr	r2, [pc, #204]	@ (8004340 <System_UI_Loop+0x1484>)
 8004274:	4933      	ldr	r1, [pc, #204]	@ (8004344 <System_UI_Loop+0x1488>)
 8004276:	482e      	ldr	r0, [pc, #184]	@ (8004330 <System_UI_Loop+0x1474>)
 8004278:	f003 fc80 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 800427c:	2300      	movs	r3, #0
 800427e:	9301      	str	r3, [sp, #4]
 8004280:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	4b27      	ldr	r3, [pc, #156]	@ (8004324 <System_UI_Loop+0x1468>)
 8004288:	4a2f      	ldr	r2, [pc, #188]	@ (8004348 <System_UI_Loop+0x148c>)
 800428a:	4930      	ldr	r1, [pc, #192]	@ (800434c <System_UI_Loop+0x1490>)
 800428c:	4828      	ldr	r0, [pc, #160]	@ (8004330 <System_UI_Loop+0x1474>)
 800428e:	f003 fc75 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8004292:	2304      	movs	r3, #4
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	4a29      	ldr	r2, [pc, #164]	@ (8004348 <System_UI_Loop+0x148c>)
 80042a2:	492b      	ldr	r1, [pc, #172]	@ (8004350 <System_UI_Loop+0x1494>)
 80042a4:	4822      	ldr	r0, [pc, #136]	@ (8004330 <System_UI_Loop+0x1474>)
 80042a6:	f003 fc69 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Epicful Games") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 80042aa:	2318      	movs	r3, #24
 80042ac:	9301      	str	r3, [sp, #4]
 80042ae:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80042b8:	4a26      	ldr	r2, [pc, #152]	@ (8004354 <System_UI_Loop+0x1498>)
 80042ba:	4914      	ldr	r1, [pc, #80]	@ (800430c <System_UI_Loop+0x1450>)
 80042bc:	4814      	ldr	r0, [pc, #80]	@ (8004310 <System_UI_Loop+0x1454>)
 80042be:	f003 fc5d 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Games") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 80042c2:	2315      	movs	r3, #21
 80042c4:	9301      	str	r3, [sp, #4]
 80042c6:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	4b22      	ldr	r3, [pc, #136]	@ (8004358 <System_UI_Loop+0x149c>)
 80042ce:	4a23      	ldr	r2, [pc, #140]	@ (800435c <System_UI_Loop+0x14a0>)
 80042d0:	4911      	ldr	r1, [pc, #68]	@ (8004318 <System_UI_Loop+0x145c>)
 80042d2:	480f      	ldr	r0, [pc, #60]	@ (8004310 <System_UI_Loop+0x1454>)
 80042d4:	f003 fc52 	bl	8007b7c <OLED_DoTweenObject>
            break;
 80042d8:	f000 be61 	b.w	8004f9e <System_UI_Loop+0x20e2>
 80042dc:	0800df70 	.word	0x0800df70
 80042e0:	0800dfa8 	.word	0x0800dfa8
 80042e4:	20000003 	.word	0x20000003
 80042e8:	80808081 	.word	0x80808081
 80042ec:	0800dd8c 	.word	0x0800dd8c
 80042f0:	200021f0 	.word	0x200021f0
 80042f4:	0800df80 	.word	0x0800df80
 80042f8:	0800dd98 	.word	0x0800dd98
 80042fc:	0800dd9c 	.word	0x0800dd9c
 8004300:	200027e4 	.word	0x200027e4
 8004304:	0800dda8 	.word	0x0800dda8
 8004308:	0800ddb0 	.word	0x0800ddb0
 800430c:	0800ddb8 	.word	0x0800ddb8
 8004310:	200039c0 	.word	0x200039c0
 8004314:	0800ddc8 	.word	0x0800ddc8
 8004318:	0800ddd0 	.word	0x0800ddd0
 800431c:	20000001 	.word	0x20000001
 8004320:	20000002 	.word	0x20000002
 8004324:	c1200000 	.word	0xc1200000
 8004328:	42600000 	.word	0x42600000
 800432c:	0800dcf4 	.word	0x0800dcf4
 8004330:	200033cc 	.word	0x200033cc
 8004334:	42300000 	.word	0x42300000
 8004338:	0800dcb4 	.word	0x0800dcb4
 800433c:	0800dcc0 	.word	0x0800dcc0
 8004340:	42880000 	.word	0x42880000
 8004344:	0800dcd0 	.word	0x0800dcd0
 8004348:	42480000 	.word	0x42480000
 800434c:	0800dca8 	.word	0x0800dca8
 8004350:	0800dc9c 	.word	0x0800dc9c
 8004354:	42a20000 	.word	0x42a20000
 8004358:	41200000 	.word	0x41200000
 800435c:	42040000 	.word	0x42040000
        case 2:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004360:	2300      	movs	r3, #0
 8004362:	9301      	str	r3, [sp, #4]
 8004364:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	4b84      	ldr	r3, [pc, #528]	@ (800457c <System_UI_Loop+0x16c0>)
 800436c:	4a84      	ldr	r2, [pc, #528]	@ (8004580 <System_UI_Loop+0x16c4>)
 800436e:	4985      	ldr	r1, [pc, #532]	@ (8004584 <System_UI_Loop+0x16c8>)
 8004370:	4885      	ldr	r0, [pc, #532]	@ (8004588 <System_UI_Loop+0x16cc>)
 8004372:	f003 fc03 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 8004376:	2300      	movs	r3, #0
 8004378:	9301      	str	r3, [sp, #4]
 800437a:	2301      	movs	r3, #1
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	4b7f      	ldr	r3, [pc, #508]	@ (800457c <System_UI_Loop+0x16c0>)
 8004380:	4a7f      	ldr	r2, [pc, #508]	@ (8004580 <System_UI_Loop+0x16c4>)
 8004382:	4982      	ldr	r1, [pc, #520]	@ (800458c <System_UI_Loop+0x16d0>)
 8004384:	4880      	ldr	r0, [pc, #512]	@ (8004588 <System_UI_Loop+0x16cc>)
 8004386:	f003 fbf9 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 800438a:	2300      	movs	r3, #0
 800438c:	9301      	str	r3, [sp, #4]
 800438e:	2301      	movs	r3, #1
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	4b7a      	ldr	r3, [pc, #488]	@ (800457c <System_UI_Loop+0x16c0>)
 8004394:	4a7e      	ldr	r2, [pc, #504]	@ (8004590 <System_UI_Loop+0x16d4>)
 8004396:	497f      	ldr	r1, [pc, #508]	@ (8004594 <System_UI_Loop+0x16d8>)
 8004398:	487b      	ldr	r0, [pc, #492]	@ (8004588 <System_UI_Loop+0x16cc>)
 800439a:	f003 fbef 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 800439e:	2300      	movs	r3, #0
 80043a0:	9301      	str	r3, [sp, #4]
 80043a2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	4b74      	ldr	r3, [pc, #464]	@ (800457c <System_UI_Loop+0x16c0>)
 80043aa:	4a7b      	ldr	r2, [pc, #492]	@ (8004598 <System_UI_Loop+0x16dc>)
 80043ac:	497b      	ldr	r1, [pc, #492]	@ (800459c <System_UI_Loop+0x16e0>)
 80043ae:	4876      	ldr	r0, [pc, #472]	@ (8004588 <System_UI_Loop+0x16cc>)
 80043b0:	f003 fbe4 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 80043b4:	2300      	movs	r3, #0
 80043b6:	9301      	str	r3, [sp, #4]
 80043b8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	4b6f      	ldr	r3, [pc, #444]	@ (800457c <System_UI_Loop+0x16c0>)
 80043c0:	4a77      	ldr	r2, [pc, #476]	@ (80045a0 <System_UI_Loop+0x16e4>)
 80043c2:	4978      	ldr	r1, [pc, #480]	@ (80045a4 <System_UI_Loop+0x16e8>)
 80043c4:	4870      	ldr	r0, [pc, #448]	@ (8004588 <System_UI_Loop+0x16cc>)
 80043c6:	f003 fbd9 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 80043ca:	2304      	movs	r3, #4
 80043cc:	9301      	str	r3, [sp, #4]
 80043ce:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	4a71      	ldr	r2, [pc, #452]	@ (80045a0 <System_UI_Loop+0x16e4>)
 80043da:	4973      	ldr	r1, [pc, #460]	@ (80045a8 <System_UI_Loop+0x16ec>)
 80043dc:	486a      	ldr	r0, [pc, #424]	@ (8004588 <System_UI_Loop+0x16cc>)
 80043de:	f003 fbcd 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Tools for you") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 80043e2:	2318      	movs	r3, #24
 80043e4:	9301      	str	r3, [sp, #4]
 80043e6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80043f0:	4a6e      	ldr	r2, [pc, #440]	@ (80045ac <System_UI_Loop+0x16f0>)
 80043f2:	496f      	ldr	r1, [pc, #444]	@ (80045b0 <System_UI_Loop+0x16f4>)
 80043f4:	486f      	ldr	r0, [pc, #444]	@ (80045b4 <System_UI_Loop+0x16f8>)
 80043f6:	f003 fbc1 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Tools") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 80043fa:	2315      	movs	r3, #21
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	4b6c      	ldr	r3, [pc, #432]	@ (80045b8 <System_UI_Loop+0x16fc>)
 8004406:	4a6d      	ldr	r2, [pc, #436]	@ (80045bc <System_UI_Loop+0x1700>)
 8004408:	496d      	ldr	r1, [pc, #436]	@ (80045c0 <System_UI_Loop+0x1704>)
 800440a:	486a      	ldr	r0, [pc, #424]	@ (80045b4 <System_UI_Loop+0x16f8>)
 800440c:	f003 fbb6 	bl	8007b7c <OLED_DoTweenObject>
            break;
 8004410:	f000 bdc5 	b.w	8004f9e <System_UI_Loop+0x20e2>
        case 3:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004414:	2300      	movs	r3, #0
 8004416:	9301      	str	r3, [sp, #4]
 8004418:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	4b57      	ldr	r3, [pc, #348]	@ (800457c <System_UI_Loop+0x16c0>)
 8004420:	4a57      	ldr	r2, [pc, #348]	@ (8004580 <System_UI_Loop+0x16c4>)
 8004422:	4958      	ldr	r1, [pc, #352]	@ (8004584 <System_UI_Loop+0x16c8>)
 8004424:	4858      	ldr	r0, [pc, #352]	@ (8004588 <System_UI_Loop+0x16cc>)
 8004426:	f003 fba9 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 800442a:	2300      	movs	r3, #0
 800442c:	9301      	str	r3, [sp, #4]
 800442e:	2301      	movs	r3, #1
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	4b52      	ldr	r3, [pc, #328]	@ (800457c <System_UI_Loop+0x16c0>)
 8004434:	4a5a      	ldr	r2, [pc, #360]	@ (80045a0 <System_UI_Loop+0x16e4>)
 8004436:	495b      	ldr	r1, [pc, #364]	@ (80045a4 <System_UI_Loop+0x16e8>)
 8004438:	4853      	ldr	r0, [pc, #332]	@ (8004588 <System_UI_Loop+0x16cc>)
 800443a:	f003 fb9f 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 800443e:	2300      	movs	r3, #0
 8004440:	9301      	str	r3, [sp, #4]
 8004442:	2301      	movs	r3, #1
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	4b4d      	ldr	r3, [pc, #308]	@ (800457c <System_UI_Loop+0x16c0>)
 8004448:	4a51      	ldr	r2, [pc, #324]	@ (8004590 <System_UI_Loop+0x16d4>)
 800444a:	4952      	ldr	r1, [pc, #328]	@ (8004594 <System_UI_Loop+0x16d8>)
 800444c:	484e      	ldr	r0, [pc, #312]	@ (8004588 <System_UI_Loop+0x16cc>)
 800444e:	f003 fb95 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004452:	2300      	movs	r3, #0
 8004454:	9301      	str	r3, [sp, #4]
 8004456:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	4b47      	ldr	r3, [pc, #284]	@ (800457c <System_UI_Loop+0x16c0>)
 800445e:	4a48      	ldr	r2, [pc, #288]	@ (8004580 <System_UI_Loop+0x16c4>)
 8004460:	494a      	ldr	r1, [pc, #296]	@ (800458c <System_UI_Loop+0x16d0>)
 8004462:	4849      	ldr	r0, [pc, #292]	@ (8004588 <System_UI_Loop+0x16cc>)
 8004464:	f003 fb8a 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004468:	2300      	movs	r3, #0
 800446a:	9301      	str	r3, [sp, #4]
 800446c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	4b42      	ldr	r3, [pc, #264]	@ (800457c <System_UI_Loop+0x16c0>)
 8004474:	4a4a      	ldr	r2, [pc, #296]	@ (80045a0 <System_UI_Loop+0x16e4>)
 8004476:	494c      	ldr	r1, [pc, #304]	@ (80045a8 <System_UI_Loop+0x16ec>)
 8004478:	4843      	ldr	r0, [pc, #268]	@ (8004588 <System_UI_Loop+0x16cc>)
 800447a:	f003 fb7f 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 800447e:	2304      	movs	r3, #4
 8004480:	9301      	str	r3, [sp, #4]
 8004482:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	4a42      	ldr	r2, [pc, #264]	@ (8004598 <System_UI_Loop+0x16dc>)
 800448e:	4943      	ldr	r1, [pc, #268]	@ (800459c <System_UI_Loop+0x16e0>)
 8004490:	483d      	ldr	r0, [pc, #244]	@ (8004588 <System_UI_Loop+0x16cc>)
 8004492:	f003 fb73 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Machine States") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8004496:	2318      	movs	r3, #24
 8004498:	9301      	str	r3, [sp, #4]
 800449a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80044a4:	4a47      	ldr	r2, [pc, #284]	@ (80045c4 <System_UI_Loop+0x1708>)
 80044a6:	4942      	ldr	r1, [pc, #264]	@ (80045b0 <System_UI_Loop+0x16f4>)
 80044a8:	4842      	ldr	r0, [pc, #264]	@ (80045b4 <System_UI_Loop+0x16f8>)
 80044aa:	f003 fb67 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("States") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 80044ae:	2315      	movs	r3, #21
 80044b0:	9301      	str	r3, [sp, #4]
 80044b2:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	4b3f      	ldr	r3, [pc, #252]	@ (80045b8 <System_UI_Loop+0x16fc>)
 80044ba:	4a43      	ldr	r2, [pc, #268]	@ (80045c8 <System_UI_Loop+0x170c>)
 80044bc:	4940      	ldr	r1, [pc, #256]	@ (80045c0 <System_UI_Loop+0x1704>)
 80044be:	483d      	ldr	r0, [pc, #244]	@ (80045b4 <System_UI_Loop+0x16f8>)
 80044c0:	f003 fb5c 	bl	8007b7c <OLED_DoTweenObject>
            break;
 80044c4:	f000 bd6b 	b.w	8004f9e <System_UI_Loop+0x20e2>
        case 4:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 80044c8:	2300      	movs	r3, #0
 80044ca:	9301      	str	r3, [sp, #4]
 80044cc:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	4b2a      	ldr	r3, [pc, #168]	@ (800457c <System_UI_Loop+0x16c0>)
 80044d4:	4a2a      	ldr	r2, [pc, #168]	@ (8004580 <System_UI_Loop+0x16c4>)
 80044d6:	492b      	ldr	r1, [pc, #172]	@ (8004584 <System_UI_Loop+0x16c8>)
 80044d8:	482b      	ldr	r0, [pc, #172]	@ (8004588 <System_UI_Loop+0x16cc>)
 80044da:	f003 fb4f 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 80044de:	2300      	movs	r3, #0
 80044e0:	9301      	str	r3, [sp, #4]
 80044e2:	2301      	movs	r3, #1
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	4b25      	ldr	r3, [pc, #148]	@ (800457c <System_UI_Loop+0x16c0>)
 80044e8:	4a2d      	ldr	r2, [pc, #180]	@ (80045a0 <System_UI_Loop+0x16e4>)
 80044ea:	492e      	ldr	r1, [pc, #184]	@ (80045a4 <System_UI_Loop+0x16e8>)
 80044ec:	4826      	ldr	r0, [pc, #152]	@ (8004588 <System_UI_Loop+0x16cc>)
 80044ee:	f003 fb45 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 80044f2:	2300      	movs	r3, #0
 80044f4:	9301      	str	r3, [sp, #4]
 80044f6:	2301      	movs	r3, #1
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	4b20      	ldr	r3, [pc, #128]	@ (800457c <System_UI_Loop+0x16c0>)
 80044fc:	4a28      	ldr	r2, [pc, #160]	@ (80045a0 <System_UI_Loop+0x16e4>)
 80044fe:	492a      	ldr	r1, [pc, #168]	@ (80045a8 <System_UI_Loop+0x16ec>)
 8004500:	4821      	ldr	r0, [pc, #132]	@ (8004588 <System_UI_Loop+0x16cc>)
 8004502:	f003 fb3b 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004506:	2300      	movs	r3, #0
 8004508:	9301      	str	r3, [sp, #4]
 800450a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	4b1a      	ldr	r3, [pc, #104]	@ (800457c <System_UI_Loop+0x16c0>)
 8004512:	4a21      	ldr	r2, [pc, #132]	@ (8004598 <System_UI_Loop+0x16dc>)
 8004514:	4921      	ldr	r1, [pc, #132]	@ (800459c <System_UI_Loop+0x16e0>)
 8004516:	481c      	ldr	r0, [pc, #112]	@ (8004588 <System_UI_Loop+0x16cc>)
 8004518:	f003 fb30 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 800451c:	2300      	movs	r3, #0
 800451e:	9301      	str	r3, [sp, #4]
 8004520:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	4b15      	ldr	r3, [pc, #84]	@ (800457c <System_UI_Loop+0x16c0>)
 8004528:	4a19      	ldr	r2, [pc, #100]	@ (8004590 <System_UI_Loop+0x16d4>)
 800452a:	491a      	ldr	r1, [pc, #104]	@ (8004594 <System_UI_Loop+0x16d8>)
 800452c:	4816      	ldr	r0, [pc, #88]	@ (8004588 <System_UI_Loop+0x16cc>)
 800452e:	f003 fb25 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8004532:	2304      	movs	r3, #4
 8004534:	9301      	str	r3, [sp, #4]
 8004536:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	4a0f      	ldr	r2, [pc, #60]	@ (8004580 <System_UI_Loop+0x16c4>)
 8004542:	4912      	ldr	r1, [pc, #72]	@ (800458c <System_UI_Loop+0x16d0>)
 8004544:	4810      	ldr	r0, [pc, #64]	@ (8004588 <System_UI_Loop+0x16cc>)
 8004546:	f003 fb19 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("STM Settings") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 800454a:	2318      	movs	r3, #24
 800454c:	9301      	str	r3, [sp, #4]
 800454e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004558:	4a1c      	ldr	r2, [pc, #112]	@ (80045cc <System_UI_Loop+0x1710>)
 800455a:	4915      	ldr	r1, [pc, #84]	@ (80045b0 <System_UI_Loop+0x16f4>)
 800455c:	4815      	ldr	r0, [pc, #84]	@ (80045b4 <System_UI_Loop+0x16f8>)
 800455e:	f003 fb0d 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Settings") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8004562:	2315      	movs	r3, #21
 8004564:	9301      	str	r3, [sp, #4]
 8004566:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	4b12      	ldr	r3, [pc, #72]	@ (80045b8 <System_UI_Loop+0x16fc>)
 800456e:	4a18      	ldr	r2, [pc, #96]	@ (80045d0 <System_UI_Loop+0x1714>)
 8004570:	4913      	ldr	r1, [pc, #76]	@ (80045c0 <System_UI_Loop+0x1704>)
 8004572:	4810      	ldr	r0, [pc, #64]	@ (80045b4 <System_UI_Loop+0x16f8>)
 8004574:	f003 fb02 	bl	8007b7c <OLED_DoTweenObject>
            break;
 8004578:	f000 bd11 	b.w	8004f9e <System_UI_Loop+0x20e2>
 800457c:	c1200000 	.word	0xc1200000
 8004580:	42600000 	.word	0x42600000
 8004584:	0800dcf4 	.word	0x0800dcf4
 8004588:	200033cc 	.word	0x200033cc
 800458c:	0800dcc0 	.word	0x0800dcc0
 8004590:	42880000 	.word	0x42880000
 8004594:	0800dcd0 	.word	0x0800dcd0
 8004598:	42300000 	.word	0x42300000
 800459c:	0800dcb4 	.word	0x0800dcb4
 80045a0:	42480000 	.word	0x42480000
 80045a4:	0800dc9c 	.word	0x0800dc9c
 80045a8:	0800dca8 	.word	0x0800dca8
 80045ac:	42a20000 	.word	0x42a20000
 80045b0:	0800ddb8 	.word	0x0800ddb8
 80045b4:	200039c0 	.word	0x200039c0
 80045b8:	41200000 	.word	0x41200000
 80045bc:	42040000 	.word	0x42040000
 80045c0:	0800ddd0 	.word	0x0800ddd0
 80045c4:	42ae0000 	.word	0x42ae0000
 80045c8:	421c0000 	.word	0x421c0000
 80045cc:	42960000 	.word	0x42960000
 80045d0:	424c0000 	.word	0x424c0000
        case 5:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 80045d4:	2300      	movs	r3, #0
 80045d6:	9301      	str	r3, [sp, #4]
 80045d8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	4ba7      	ldr	r3, [pc, #668]	@ (800487c <System_UI_Loop+0x19c0>)
 80045e0:	4aa7      	ldr	r2, [pc, #668]	@ (8004880 <System_UI_Loop+0x19c4>)
 80045e2:	49a8      	ldr	r1, [pc, #672]	@ (8004884 <System_UI_Loop+0x19c8>)
 80045e4:	48a8      	ldr	r0, [pc, #672]	@ (8004888 <System_UI_Loop+0x19cc>)
 80045e6:	f003 fac9 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 80045ea:	2300      	movs	r3, #0
 80045ec:	9301      	str	r3, [sp, #4]
 80045ee:	2301      	movs	r3, #1
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	4ba2      	ldr	r3, [pc, #648]	@ (800487c <System_UI_Loop+0x19c0>)
 80045f4:	4aa5      	ldr	r2, [pc, #660]	@ (800488c <System_UI_Loop+0x19d0>)
 80045f6:	49a6      	ldr	r1, [pc, #664]	@ (8004890 <System_UI_Loop+0x19d4>)
 80045f8:	48a3      	ldr	r0, [pc, #652]	@ (8004888 <System_UI_Loop+0x19cc>)
 80045fa:	f003 fabf 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 80045fe:	2300      	movs	r3, #0
 8004600:	9301      	str	r3, [sp, #4]
 8004602:	2301      	movs	r3, #1
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	4b9d      	ldr	r3, [pc, #628]	@ (800487c <System_UI_Loop+0x19c0>)
 8004608:	4aa2      	ldr	r2, [pc, #648]	@ (8004894 <System_UI_Loop+0x19d8>)
 800460a:	49a3      	ldr	r1, [pc, #652]	@ (8004898 <System_UI_Loop+0x19dc>)
 800460c:	489e      	ldr	r0, [pc, #632]	@ (8004888 <System_UI_Loop+0x19cc>)
 800460e:	f003 fab5 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004612:	2300      	movs	r3, #0
 8004614:	9301      	str	r3, [sp, #4]
 8004616:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	4b97      	ldr	r3, [pc, #604]	@ (800487c <System_UI_Loop+0x19c0>)
 800461e:	4a98      	ldr	r2, [pc, #608]	@ (8004880 <System_UI_Loop+0x19c4>)
 8004620:	499e      	ldr	r1, [pc, #632]	@ (800489c <System_UI_Loop+0x19e0>)
 8004622:	4899      	ldr	r0, [pc, #612]	@ (8004888 <System_UI_Loop+0x19cc>)
 8004624:	f003 faaa 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004628:	2300      	movs	r3, #0
 800462a:	9301      	str	r3, [sp, #4]
 800462c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	4b92      	ldr	r3, [pc, #584]	@ (800487c <System_UI_Loop+0x19c0>)
 8004634:	4a95      	ldr	r2, [pc, #596]	@ (800488c <System_UI_Loop+0x19d0>)
 8004636:	499a      	ldr	r1, [pc, #616]	@ (80048a0 <System_UI_Loop+0x19e4>)
 8004638:	4893      	ldr	r0, [pc, #588]	@ (8004888 <System_UI_Loop+0x19cc>)
 800463a:	f003 fa9f 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 800463e:	2304      	movs	r3, #4
 8004640:	9301      	str	r3, [sp, #4]
 8004642:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	4a95      	ldr	r2, [pc, #596]	@ (80048a4 <System_UI_Loop+0x19e8>)
 800464e:	4996      	ldr	r1, [pc, #600]	@ (80048a8 <System_UI_Loop+0x19ec>)
 8004650:	488d      	ldr	r0, [pc, #564]	@ (8004888 <System_UI_Loop+0x19cc>)
 8004652:	f003 fa93 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Developer!") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8004656:	2318      	movs	r3, #24
 8004658:	9301      	str	r3, [sp, #4]
 800465a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004664:	4a91      	ldr	r2, [pc, #580]	@ (80048ac <System_UI_Loop+0x19f0>)
 8004666:	4992      	ldr	r1, [pc, #584]	@ (80048b0 <System_UI_Loop+0x19f4>)
 8004668:	4892      	ldr	r0, [pc, #584]	@ (80048b4 <System_UI_Loop+0x19f8>)
 800466a:	f003 fa87 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("About") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 800466e:	2315      	movs	r3, #21
 8004670:	9301      	str	r3, [sp, #4]
 8004672:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	4b8f      	ldr	r3, [pc, #572]	@ (80048b8 <System_UI_Loop+0x19fc>)
 800467a:	4a90      	ldr	r2, [pc, #576]	@ (80048bc <System_UI_Loop+0x1a00>)
 800467c:	4990      	ldr	r1, [pc, #576]	@ (80048c0 <System_UI_Loop+0x1a04>)
 800467e:	488d      	ldr	r0, [pc, #564]	@ (80048b4 <System_UI_Loop+0x19f8>)
 8004680:	f003 fa7c 	bl	8007b7c <OLED_DoTweenObject>
            break;
 8004684:	f000 bc8b 	b.w	8004f9e <System_UI_Loop+0x20e2>
        default:
            break;
        }
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_ABOUT)
 8004688:	4b8e      	ldr	r3, [pc, #568]	@ (80048c4 <System_UI_Loop+0x1a08>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b02      	cmp	r3, #2
 800468e:	f040 8175 	bne.w	800497c <System_UI_Loop+0x1ac0>
 8004692:	4b8d      	ldr	r3, [pc, #564]	@ (80048c8 <System_UI_Loop+0x1a0c>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b03      	cmp	r3, #3
 8004698:	f040 8170 	bne.w	800497c <System_UI_Loop+0x1ac0>
    {
        switch (menuSelection)
 800469c:	4b8b      	ldr	r3, [pc, #556]	@ (80048cc <System_UI_Loop+0x1a10>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	3b01      	subs	r3, #1
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	f200 8168 	bhi.w	8004978 <System_UI_Loop+0x1abc>
 80046a8:	a201      	add	r2, pc, #4	@ (adr r2, 80046b0 <System_UI_Loop+0x17f4>)
 80046aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ae:	bf00      	nop
 80046b0:	080046c1 	.word	0x080046c1
 80046b4:	08004763 	.word	0x08004763
 80046b8:	080047ef 	.word	0x080047ef
 80046bc:	080048ed 	.word	0x080048ed
        {
        case 1:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 80046c0:	2300      	movs	r3, #0
 80046c2:	9301      	str	r3, [sp, #4]
 80046c4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	4b6c      	ldr	r3, [pc, #432]	@ (800487c <System_UI_Loop+0x19c0>)
 80046cc:	4a75      	ldr	r2, [pc, #468]	@ (80048a4 <System_UI_Loop+0x19e8>)
 80046ce:	4976      	ldr	r1, [pc, #472]	@ (80048a8 <System_UI_Loop+0x19ec>)
 80046d0:	486d      	ldr	r0, [pc, #436]	@ (8004888 <System_UI_Loop+0x19cc>)
 80046d2:	f003 fa53 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleDeveloper", (OLED_WIDTH - strlen("DEVELOPER: UnikoZera") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 80046d6:	2304      	movs	r3, #4
 80046d8:	9301      	str	r3, [sp, #4]
 80046da:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 80046e8:	4979      	ldr	r1, [pc, #484]	@ (80048d0 <System_UI_Loop+0x1a14>)
 80046ea:	4867      	ldr	r0, [pc, #412]	@ (8004888 <System_UI_Loop+0x19cc>)
 80046ec:	f003 fa46 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGithub", (OLED_WIDTH - strlen("GH Address") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 80046f0:	2300      	movs	r3, #0
 80046f2:	9301      	str	r3, [sp, #4]
 80046f4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	4b60      	ldr	r3, [pc, #384]	@ (800487c <System_UI_Loop+0x19c0>)
 80046fc:	4a69      	ldr	r2, [pc, #420]	@ (80048a4 <System_UI_Loop+0x19e8>)
 80046fe:	4975      	ldr	r1, [pc, #468]	@ (80048d4 <System_UI_Loop+0x1a18>)
 8004700:	4861      	ldr	r0, [pc, #388]	@ (8004888 <System_UI_Loop+0x19cc>)
 8004702:	f003 fa3b 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleDonate", (OLED_WIDTH - strlen("BiliBili Space") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004706:	2300      	movs	r3, #0
 8004708:	9301      	str	r3, [sp, #4]
 800470a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	4b5a      	ldr	r3, [pc, #360]	@ (800487c <System_UI_Loop+0x19c0>)
 8004712:	4a60      	ldr	r2, [pc, #384]	@ (8004894 <System_UI_Loop+0x19d8>)
 8004714:	4970      	ldr	r1, [pc, #448]	@ (80048d8 <System_UI_Loop+0x1a1c>)
 8004716:	485c      	ldr	r0, [pc, #368]	@ (8004888 <System_UI_Loop+0x19cc>)
 8004718:	f003 fa30 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 800471c:	2300      	movs	r3, #0
 800471e:	9301      	str	r3, [sp, #4]
 8004720:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	4b55      	ldr	r3, [pc, #340]	@ (800487c <System_UI_Loop+0x19c0>)
 8004728:	4a55      	ldr	r2, [pc, #340]	@ (8004880 <System_UI_Loop+0x19c4>)
 800472a:	4956      	ldr	r1, [pc, #344]	@ (8004884 <System_UI_Loop+0x19c8>)
 800472c:	4856      	ldr	r0, [pc, #344]	@ (8004888 <System_UI_Loop+0x19cc>)
 800472e:	f003 fa25 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("DEVELOPER: UnikoZera") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8004732:	2318      	movs	r3, #24
 8004734:	9301      	str	r3, [sp, #4]
 8004736:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004740:	4a66      	ldr	r2, [pc, #408]	@ (80048dc <System_UI_Loop+0x1a20>)
 8004742:	495b      	ldr	r1, [pc, #364]	@ (80048b0 <System_UI_Loop+0x19f4>)
 8004744:	485b      	ldr	r0, [pc, #364]	@ (80048b4 <System_UI_Loop+0x19f8>)
 8004746:	f003 fa19 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Developer") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 800474a:	2315      	movs	r3, #21
 800474c:	9301      	str	r3, [sp, #4]
 800474e:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	4b58      	ldr	r3, [pc, #352]	@ (80048b8 <System_UI_Loop+0x19fc>)
 8004756:	4a62      	ldr	r2, [pc, #392]	@ (80048e0 <System_UI_Loop+0x1a24>)
 8004758:	4959      	ldr	r1, [pc, #356]	@ (80048c0 <System_UI_Loop+0x1a04>)
 800475a:	4856      	ldr	r0, [pc, #344]	@ (80048b4 <System_UI_Loop+0x19f8>)
 800475c:	f003 fa0e 	bl	8007b7c <OLED_DoTweenObject>
            break;
 8004760:	e10b      	b.n	800497a <System_UI_Loop+0x1abe>
        case 2:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleDeveloper", (OLED_WIDTH - strlen("DEVELOPER: UnikoZera") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004762:	2300      	movs	r3, #0
 8004764:	9301      	str	r3, [sp, #4]
 8004766:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	4b43      	ldr	r3, [pc, #268]	@ (800487c <System_UI_Loop+0x19c0>)
 800476e:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8004772:	4957      	ldr	r1, [pc, #348]	@ (80048d0 <System_UI_Loop+0x1a14>)
 8004774:	4844      	ldr	r0, [pc, #272]	@ (8004888 <System_UI_Loop+0x19cc>)
 8004776:	f003 fa01 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGithub", (OLED_WIDTH - strlen("GH Address") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 800477a:	2304      	movs	r3, #4
 800477c:	9301      	str	r3, [sp, #4]
 800477e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	4a46      	ldr	r2, [pc, #280]	@ (80048a4 <System_UI_Loop+0x19e8>)
 800478a:	4952      	ldr	r1, [pc, #328]	@ (80048d4 <System_UI_Loop+0x1a18>)
 800478c:	483e      	ldr	r0, [pc, #248]	@ (8004888 <System_UI_Loop+0x19cc>)
 800478e:	f003 f9f5 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleDonate", (OLED_WIDTH - strlen("BiliBili Space") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004792:	2300      	movs	r3, #0
 8004794:	9301      	str	r3, [sp, #4]
 8004796:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	4b37      	ldr	r3, [pc, #220]	@ (800487c <System_UI_Loop+0x19c0>)
 800479e:	4a3d      	ldr	r2, [pc, #244]	@ (8004894 <System_UI_Loop+0x19d8>)
 80047a0:	494d      	ldr	r1, [pc, #308]	@ (80048d8 <System_UI_Loop+0x1a1c>)
 80047a2:	4839      	ldr	r0, [pc, #228]	@ (8004888 <System_UI_Loop+0x19cc>)
 80047a4:	f003 f9ea 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 80047a8:	2300      	movs	r3, #0
 80047aa:	9301      	str	r3, [sp, #4]
 80047ac:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	4b32      	ldr	r3, [pc, #200]	@ (800487c <System_UI_Loop+0x19c0>)
 80047b4:	4a32      	ldr	r2, [pc, #200]	@ (8004880 <System_UI_Loop+0x19c4>)
 80047b6:	4933      	ldr	r1, [pc, #204]	@ (8004884 <System_UI_Loop+0x19c8>)
 80047b8:	4833      	ldr	r0, [pc, #204]	@ (8004888 <System_UI_Loop+0x19cc>)
 80047ba:	f003 f9df 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("GH Address") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 80047be:	2318      	movs	r3, #24
 80047c0:	9301      	str	r3, [sp, #4]
 80047c2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80047cc:	4a37      	ldr	r2, [pc, #220]	@ (80048ac <System_UI_Loop+0x19f0>)
 80047ce:	4938      	ldr	r1, [pc, #224]	@ (80048b0 <System_UI_Loop+0x19f4>)
 80047d0:	4838      	ldr	r0, [pc, #224]	@ (80048b4 <System_UI_Loop+0x19f8>)
 80047d2:	f003 f9d3 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Github") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 80047d6:	2315      	movs	r3, #21
 80047d8:	9301      	str	r3, [sp, #4]
 80047da:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	4b35      	ldr	r3, [pc, #212]	@ (80048b8 <System_UI_Loop+0x19fc>)
 80047e2:	4a40      	ldr	r2, [pc, #256]	@ (80048e4 <System_UI_Loop+0x1a28>)
 80047e4:	4936      	ldr	r1, [pc, #216]	@ (80048c0 <System_UI_Loop+0x1a04>)
 80047e6:	4833      	ldr	r0, [pc, #204]	@ (80048b4 <System_UI_Loop+0x19f8>)
 80047e8:	f003 f9c8 	bl	8007b7c <OLED_DoTweenObject>
            break;
 80047ec:	e0c5      	b.n	800497a <System_UI_Loop+0x1abe>
        case 3:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleDeveloper", (OLED_WIDTH - strlen("DEVELOPER: UnikoZera") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 80047ee:	2300      	movs	r3, #0
 80047f0:	9301      	str	r3, [sp, #4]
 80047f2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	4b20      	ldr	r3, [pc, #128]	@ (800487c <System_UI_Loop+0x19c0>)
 80047fa:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 80047fe:	4934      	ldr	r1, [pc, #208]	@ (80048d0 <System_UI_Loop+0x1a14>)
 8004800:	4821      	ldr	r0, [pc, #132]	@ (8004888 <System_UI_Loop+0x19cc>)
 8004802:	f003 f9bb 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGithub", (OLED_WIDTH - strlen("GH Address") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004806:	2300      	movs	r3, #0
 8004808:	9301      	str	r3, [sp, #4]
 800480a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	4b1a      	ldr	r3, [pc, #104]	@ (800487c <System_UI_Loop+0x19c0>)
 8004812:	4a24      	ldr	r2, [pc, #144]	@ (80048a4 <System_UI_Loop+0x19e8>)
 8004814:	492f      	ldr	r1, [pc, #188]	@ (80048d4 <System_UI_Loop+0x1a18>)
 8004816:	481c      	ldr	r0, [pc, #112]	@ (8004888 <System_UI_Loop+0x19cc>)
 8004818:	f003 f9b0 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleDonate", (OLED_WIDTH - strlen("BiliBili Space") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 800481c:	2304      	movs	r3, #4
 800481e:	9301      	str	r3, [sp, #4]
 8004820:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	4a1a      	ldr	r2, [pc, #104]	@ (8004894 <System_UI_Loop+0x19d8>)
 800482c:	492a      	ldr	r1, [pc, #168]	@ (80048d8 <System_UI_Loop+0x1a1c>)
 800482e:	4816      	ldr	r0, [pc, #88]	@ (8004888 <System_UI_Loop+0x19cc>)
 8004830:	f003 f9a4 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004834:	2300      	movs	r3, #0
 8004836:	9301      	str	r3, [sp, #4]
 8004838:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	4b0f      	ldr	r3, [pc, #60]	@ (800487c <System_UI_Loop+0x19c0>)
 8004840:	4a0f      	ldr	r2, [pc, #60]	@ (8004880 <System_UI_Loop+0x19c4>)
 8004842:	4910      	ldr	r1, [pc, #64]	@ (8004884 <System_UI_Loop+0x19c8>)
 8004844:	4810      	ldr	r0, [pc, #64]	@ (8004888 <System_UI_Loop+0x19cc>)
 8004846:	f003 f999 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("BiliBili Space") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 800484a:	2318      	movs	r3, #24
 800484c:	9301      	str	r3, [sp, #4]
 800484e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004858:	4a23      	ldr	r2, [pc, #140]	@ (80048e8 <System_UI_Loop+0x1a2c>)
 800485a:	4915      	ldr	r1, [pc, #84]	@ (80048b0 <System_UI_Loop+0x19f4>)
 800485c:	4815      	ldr	r0, [pc, #84]	@ (80048b4 <System_UI_Loop+0x19f8>)
 800485e:	f003 f98d 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Donate") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8004862:	2315      	movs	r3, #21
 8004864:	9301      	str	r3, [sp, #4]
 8004866:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	4b12      	ldr	r3, [pc, #72]	@ (80048b8 <System_UI_Loop+0x19fc>)
 800486e:	4a1d      	ldr	r2, [pc, #116]	@ (80048e4 <System_UI_Loop+0x1a28>)
 8004870:	4913      	ldr	r1, [pc, #76]	@ (80048c0 <System_UI_Loop+0x1a04>)
 8004872:	4810      	ldr	r0, [pc, #64]	@ (80048b4 <System_UI_Loop+0x19f8>)
 8004874:	f003 f982 	bl	8007b7c <OLED_DoTweenObject>
            break;
 8004878:	e07f      	b.n	800497a <System_UI_Loop+0x1abe>
 800487a:	bf00      	nop
 800487c:	c1200000 	.word	0xc1200000
 8004880:	42600000 	.word	0x42600000
 8004884:	0800dcf4 	.word	0x0800dcf4
 8004888:	200033cc 	.word	0x200033cc
 800488c:	42480000 	.word	0x42480000
 8004890:	0800dca8 	.word	0x0800dca8
 8004894:	42300000 	.word	0x42300000
 8004898:	0800dcb4 	.word	0x0800dcb4
 800489c:	0800dcc0 	.word	0x0800dcc0
 80048a0:	0800dc9c 	.word	0x0800dc9c
 80048a4:	42880000 	.word	0x42880000
 80048a8:	0800dcd0 	.word	0x0800dcd0
 80048ac:	427c0000 	.word	0x427c0000
 80048b0:	0800ddb8 	.word	0x0800ddb8
 80048b4:	200039c0 	.word	0x200039c0
 80048b8:	41200000 	.word	0x41200000
 80048bc:	42040000 	.word	0x42040000
 80048c0:	0800ddd0 	.word	0x0800ddd0
 80048c4:	20000001 	.word	0x20000001
 80048c8:	20000bfc 	.word	0x20000bfc
 80048cc:	20000002 	.word	0x20000002
 80048d0:	0800dd18 	.word	0x0800dd18
 80048d4:	0800dd28 	.word	0x0800dd28
 80048d8:	0800dd34 	.word	0x0800dd34
 80048dc:	42f60000 	.word	0x42f60000
 80048e0:	42640000 	.word	0x42640000
 80048e4:	421c0000 	.word	0x421c0000
 80048e8:	42ae0000 	.word	0x42ae0000
        case 4:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleDeveloper", (OLED_WIDTH - strlen("DEVELOPER: UnikoZera") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 80048ec:	2300      	movs	r3, #0
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	4b92      	ldr	r3, [pc, #584]	@ (8004b40 <System_UI_Loop+0x1c84>)
 80048f8:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 80048fc:	4991      	ldr	r1, [pc, #580]	@ (8004b44 <System_UI_Loop+0x1c88>)
 80048fe:	4892      	ldr	r0, [pc, #584]	@ (8004b48 <System_UI_Loop+0x1c8c>)
 8004900:	f003 f93c 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGithub", (OLED_WIDTH - strlen("GH Address") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004904:	2300      	movs	r3, #0
 8004906:	9301      	str	r3, [sp, #4]
 8004908:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	4b8c      	ldr	r3, [pc, #560]	@ (8004b40 <System_UI_Loop+0x1c84>)
 8004910:	4a8e      	ldr	r2, [pc, #568]	@ (8004b4c <System_UI_Loop+0x1c90>)
 8004912:	498f      	ldr	r1, [pc, #572]	@ (8004b50 <System_UI_Loop+0x1c94>)
 8004914:	488c      	ldr	r0, [pc, #560]	@ (8004b48 <System_UI_Loop+0x1c8c>)
 8004916:	f003 f931 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleDonate", (OLED_WIDTH - strlen("BiliBili Space") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 800491a:	2300      	movs	r3, #0
 800491c:	9301      	str	r3, [sp, #4]
 800491e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	4b86      	ldr	r3, [pc, #536]	@ (8004b40 <System_UI_Loop+0x1c84>)
 8004926:	4a8b      	ldr	r2, [pc, #556]	@ (8004b54 <System_UI_Loop+0x1c98>)
 8004928:	498b      	ldr	r1, [pc, #556]	@ (8004b58 <System_UI_Loop+0x1c9c>)
 800492a:	4887      	ldr	r0, [pc, #540]	@ (8004b48 <System_UI_Loop+0x1c8c>)
 800492c:	f003 f926 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8004930:	2304      	movs	r3, #4
 8004932:	9301      	str	r3, [sp, #4]
 8004934:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	4a87      	ldr	r2, [pc, #540]	@ (8004b5c <System_UI_Loop+0x1ca0>)
 8004940:	4987      	ldr	r1, [pc, #540]	@ (8004b60 <System_UI_Loop+0x1ca4>)
 8004942:	4881      	ldr	r0, [pc, #516]	@ (8004b48 <System_UI_Loop+0x1c8c>)
 8004944:	f003 f91a 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8004948:	2318      	movs	r3, #24
 800494a:	9301      	str	r3, [sp, #4]
 800494c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004956:	4a83      	ldr	r2, [pc, #524]	@ (8004b64 <System_UI_Loop+0x1ca8>)
 8004958:	4983      	ldr	r1, [pc, #524]	@ (8004b68 <System_UI_Loop+0x1cac>)
 800495a:	4884      	ldr	r0, [pc, #528]	@ (8004b6c <System_UI_Loop+0x1cb0>)
 800495c:	f003 f90e 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8004960:	2315      	movs	r3, #21
 8004962:	9301      	str	r3, [sp, #4]
 8004964:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	4b81      	ldr	r3, [pc, #516]	@ (8004b70 <System_UI_Loop+0x1cb4>)
 800496c:	4a81      	ldr	r2, [pc, #516]	@ (8004b74 <System_UI_Loop+0x1cb8>)
 800496e:	4982      	ldr	r1, [pc, #520]	@ (8004b78 <System_UI_Loop+0x1cbc>)
 8004970:	487e      	ldr	r0, [pc, #504]	@ (8004b6c <System_UI_Loop+0x1cb0>)
 8004972:	f003 f903 	bl	8007b7c <OLED_DoTweenObject>
            break;
 8004976:	e000      	b.n	800497a <System_UI_Loop+0x1abe>
        default:
            break;
 8004978:	bf00      	nop
        switch (menuSelection)
 800497a:	e310      	b.n	8004f9e <System_UI_Loop+0x20e2>
        }
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_TOOLS)
 800497c:	4b7f      	ldr	r3, [pc, #508]	@ (8004b7c <System_UI_Loop+0x1cc0>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	2b02      	cmp	r3, #2
 8004982:	f040 8081 	bne.w	8004a88 <System_UI_Loop+0x1bcc>
 8004986:	4b7e      	ldr	r3, [pc, #504]	@ (8004b80 <System_UI_Loop+0x1cc4>)
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2b04      	cmp	r3, #4
 800498c:	d17c      	bne.n	8004a88 <System_UI_Loop+0x1bcc>
    {
        switch (menuSelection)
 800498e:	4b7d      	ldr	r3, [pc, #500]	@ (8004b84 <System_UI_Loop+0x1cc8>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d002      	beq.n	800499c <System_UI_Loop+0x1ae0>
 8004996:	2b02      	cmp	r3, #2
 8004998:	d046      	beq.n	8004a28 <System_UI_Loop+0x1b6c>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
            break;
        default:
            break;
 800499a:	e074      	b.n	8004a86 <System_UI_Loop+0x1bca>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 800499c:	2300      	movs	r3, #0
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	4b66      	ldr	r3, [pc, #408]	@ (8004b40 <System_UI_Loop+0x1c84>)
 80049a8:	4a77      	ldr	r2, [pc, #476]	@ (8004b88 <System_UI_Loop+0x1ccc>)
 80049aa:	4978      	ldr	r1, [pc, #480]	@ (8004b8c <System_UI_Loop+0x1cd0>)
 80049ac:	4866      	ldr	r0, [pc, #408]	@ (8004b48 <System_UI_Loop+0x1c8c>)
 80049ae:	f003 f8e5 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "BAD APPLE!", (OLED_WIDTH - strlen("BAD APPLE!") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 80049b2:	2304      	movs	r3, #4
 80049b4:	9301      	str	r3, [sp, #4]
 80049b6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	4a62      	ldr	r2, [pc, #392]	@ (8004b4c <System_UI_Loop+0x1c90>)
 80049c2:	4973      	ldr	r1, [pc, #460]	@ (8004b90 <System_UI_Loop+0x1cd4>)
 80049c4:	4860      	ldr	r0, [pc, #384]	@ (8004b48 <System_UI_Loop+0x1c8c>)
 80049c6:	f003 f8d9 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("BAD APPLE!") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 80049ca:	2300      	movs	r3, #0
 80049cc:	9301      	str	r3, [sp, #4]
 80049ce:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	4b5a      	ldr	r3, [pc, #360]	@ (8004b40 <System_UI_Loop+0x1c84>)
 80049d6:	4a61      	ldr	r2, [pc, #388]	@ (8004b5c <System_UI_Loop+0x1ca0>)
 80049d8:	4961      	ldr	r1, [pc, #388]	@ (8004b60 <System_UI_Loop+0x1ca4>)
 80049da:	485b      	ldr	r0, [pc, #364]	@ (8004b48 <System_UI_Loop+0x1c8c>)
 80049dc:	f003 f8ce 	bl	8007b7c <OLED_DoTweenObject>
 80049e0:	2304      	movs	r3, #4
 80049e2:	9301      	str	r3, [sp, #4]
 80049e4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80049ee:	4a69      	ldr	r2, [pc, #420]	@ (8004b94 <System_UI_Loop+0x1cd8>)
 80049f0:	495d      	ldr	r1, [pc, #372]	@ (8004b68 <System_UI_Loop+0x1cac>)
 80049f2:	485e      	ldr	r0, [pc, #376]	@ (8004b6c <System_UI_Loop+0x1cb0>)
 80049f4:	f003 f8c2 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("BAD APPLE!") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 80049f8:	2318      	movs	r3, #24
 80049fa:	9301      	str	r3, [sp, #4]
 80049fc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004a06:	4a63      	ldr	r2, [pc, #396]	@ (8004b94 <System_UI_Loop+0x1cd8>)
 8004a08:	4957      	ldr	r1, [pc, #348]	@ (8004b68 <System_UI_Loop+0x1cac>)
 8004a0a:	4858      	ldr	r0, [pc, #352]	@ (8004b6c <System_UI_Loop+0x1cb0>)
 8004a0c:	f003 f8b6 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Video") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8004a10:	2315      	movs	r3, #21
 8004a12:	9301      	str	r3, [sp, #4]
 8004a14:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	4b55      	ldr	r3, [pc, #340]	@ (8004b70 <System_UI_Loop+0x1cb4>)
 8004a1c:	4a5e      	ldr	r2, [pc, #376]	@ (8004b98 <System_UI_Loop+0x1cdc>)
 8004a1e:	4956      	ldr	r1, [pc, #344]	@ (8004b78 <System_UI_Loop+0x1cbc>)
 8004a20:	4852      	ldr	r0, [pc, #328]	@ (8004b6c <System_UI_Loop+0x1cb0>)
 8004a22:	f003 f8ab 	bl	8007b7c <OLED_DoTweenObject>
            break;
 8004a26:	e02e      	b.n	8004a86 <System_UI_Loop+0x1bca>
            OLED_DoTweenObject(&g_Title_AnimationManager, "BAD APPLE!", (OLED_WIDTH - strlen("BAD APPLE!") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004a28:	2300      	movs	r3, #0
 8004a2a:	9301      	str	r3, [sp, #4]
 8004a2c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	4b43      	ldr	r3, [pc, #268]	@ (8004b40 <System_UI_Loop+0x1c84>)
 8004a34:	4a45      	ldr	r2, [pc, #276]	@ (8004b4c <System_UI_Loop+0x1c90>)
 8004a36:	4956      	ldr	r1, [pc, #344]	@ (8004b90 <System_UI_Loop+0x1cd4>)
 8004a38:	4843      	ldr	r0, [pc, #268]	@ (8004b48 <System_UI_Loop+0x1c8c>)
 8004a3a:	f003 f89f 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8004a3e:	2304      	movs	r3, #4
 8004a40:	9301      	str	r3, [sp, #4]
 8004a42:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	f04f 0300 	mov.w	r3, #0
 8004a4c:	4a43      	ldr	r2, [pc, #268]	@ (8004b5c <System_UI_Loop+0x1ca0>)
 8004a4e:	4944      	ldr	r1, [pc, #272]	@ (8004b60 <System_UI_Loop+0x1ca4>)
 8004a50:	483d      	ldr	r0, [pc, #244]	@ (8004b48 <System_UI_Loop+0x1c8c>)
 8004a52:	f003 f893 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8004a56:	2318      	movs	r3, #24
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004a64:	4a3f      	ldr	r2, [pc, #252]	@ (8004b64 <System_UI_Loop+0x1ca8>)
 8004a66:	4940      	ldr	r1, [pc, #256]	@ (8004b68 <System_UI_Loop+0x1cac>)
 8004a68:	4840      	ldr	r0, [pc, #256]	@ (8004b6c <System_UI_Loop+0x1cb0>)
 8004a6a:	f003 f887 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8004a6e:	2315      	movs	r3, #21
 8004a70:	9301      	str	r3, [sp, #4]
 8004a72:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	4b3d      	ldr	r3, [pc, #244]	@ (8004b70 <System_UI_Loop+0x1cb4>)
 8004a7a:	4a3e      	ldr	r2, [pc, #248]	@ (8004b74 <System_UI_Loop+0x1cb8>)
 8004a7c:	493e      	ldr	r1, [pc, #248]	@ (8004b78 <System_UI_Loop+0x1cbc>)
 8004a7e:	483b      	ldr	r0, [pc, #236]	@ (8004b6c <System_UI_Loop+0x1cb0>)
 8004a80:	f003 f87c 	bl	8007b7c <OLED_DoTweenObject>
            break;
 8004a84:	bf00      	nop
        switch (menuSelection)
 8004a86:	e28a      	b.n	8004f9e <System_UI_Loop+0x20e2>
        }
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_GAMES)
 8004a88:	4b3c      	ldr	r3, [pc, #240]	@ (8004b7c <System_UI_Loop+0x1cc0>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	f040 8101 	bne.w	8004c94 <System_UI_Loop+0x1dd8>
 8004a92:	4b3b      	ldr	r3, [pc, #236]	@ (8004b80 <System_UI_Loop+0x1cc4>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b05      	cmp	r3, #5
 8004a98:	f040 80fc 	bne.w	8004c94 <System_UI_Loop+0x1dd8>
    {
        switch (menuSelection)
 8004a9c:	4b39      	ldr	r3, [pc, #228]	@ (8004b84 <System_UI_Loop+0x1cc8>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	f000 80bb 	beq.w	8004c1c <System_UI_Loop+0x1d60>
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	f300 80f2 	bgt.w	8004c90 <System_UI_Loop+0x1dd4>
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d002      	beq.n	8004ab6 <System_UI_Loop+0x1bfa>
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d079      	beq.n	8004ba8 <System_UI_Loop+0x1cec>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
            break;
        default:
            break;
 8004ab4:	e0ec      	b.n	8004c90 <System_UI_Loop+0x1dd4>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	9301      	str	r3, [sp, #4]
 8004aba:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8004b40 <System_UI_Loop+0x1c84>)
 8004ac2:	4a31      	ldr	r2, [pc, #196]	@ (8004b88 <System_UI_Loop+0x1ccc>)
 8004ac4:	4935      	ldr	r1, [pc, #212]	@ (8004b9c <System_UI_Loop+0x1ce0>)
 8004ac6:	4820      	ldr	r0, [pc, #128]	@ (8004b48 <System_UI_Loop+0x1c8c>)
 8004ac8:	f003 f858 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8004acc:	2304      	movs	r3, #4
 8004ace:	9301      	str	r3, [sp, #4]
 8004ad0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	4a20      	ldr	r2, [pc, #128]	@ (8004b5c <System_UI_Loop+0x1ca0>)
 8004adc:	4930      	ldr	r1, [pc, #192]	@ (8004ba0 <System_UI_Loop+0x1ce4>)
 8004ade:	481a      	ldr	r0, [pc, #104]	@ (8004b48 <System_UI_Loop+0x1c8c>)
 8004ae0:	f003 f84c 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	9301      	str	r3, [sp, #4]
 8004ae8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	4b14      	ldr	r3, [pc, #80]	@ (8004b40 <System_UI_Loop+0x1c84>)
 8004af0:	4a25      	ldr	r2, [pc, #148]	@ (8004b88 <System_UI_Loop+0x1ccc>)
 8004af2:	492c      	ldr	r1, [pc, #176]	@ (8004ba4 <System_UI_Loop+0x1ce8>)
 8004af4:	4814      	ldr	r0, [pc, #80]	@ (8004b48 <System_UI_Loop+0x1c8c>)
 8004af6:	f003 f841 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004afa:	2300      	movs	r3, #0
 8004afc:	9301      	str	r3, [sp, #4]
 8004afe:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	4b0e      	ldr	r3, [pc, #56]	@ (8004b40 <System_UI_Loop+0x1c84>)
 8004b06:	4a15      	ldr	r2, [pc, #84]	@ (8004b5c <System_UI_Loop+0x1ca0>)
 8004b08:	4915      	ldr	r1, [pc, #84]	@ (8004b60 <System_UI_Loop+0x1ca4>)
 8004b0a:	480f      	ldr	r0, [pc, #60]	@ (8004b48 <System_UI_Loop+0x1c8c>)
 8004b0c:	f003 f836 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Greedy Snake") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8004b10:	2318      	movs	r3, #24
 8004b12:	9301      	str	r3, [sp, #4]
 8004b14:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004b1e:	4a11      	ldr	r2, [pc, #68]	@ (8004b64 <System_UI_Loop+0x1ca8>)
 8004b20:	4911      	ldr	r1, [pc, #68]	@ (8004b68 <System_UI_Loop+0x1cac>)
 8004b22:	4812      	ldr	r0, [pc, #72]	@ (8004b6c <System_UI_Loop+0x1cb0>)
 8004b24:	f003 f82a 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Snake") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8004b28:	2315      	movs	r3, #21
 8004b2a:	9301      	str	r3, [sp, #4]
 8004b2c:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	4b0f      	ldr	r3, [pc, #60]	@ (8004b70 <System_UI_Loop+0x1cb4>)
 8004b34:	4a18      	ldr	r2, [pc, #96]	@ (8004b98 <System_UI_Loop+0x1cdc>)
 8004b36:	4910      	ldr	r1, [pc, #64]	@ (8004b78 <System_UI_Loop+0x1cbc>)
 8004b38:	480c      	ldr	r0, [pc, #48]	@ (8004b6c <System_UI_Loop+0x1cb0>)
 8004b3a:	f003 f81f 	bl	8007b7c <OLED_DoTweenObject>
            break;
 8004b3e:	e0a8      	b.n	8004c92 <System_UI_Loop+0x1dd6>
 8004b40:	c1200000 	.word	0xc1200000
 8004b44:	0800dd18 	.word	0x0800dd18
 8004b48:	200033cc 	.word	0x200033cc
 8004b4c:	42880000 	.word	0x42880000
 8004b50:	0800dd28 	.word	0x0800dd28
 8004b54:	42300000 	.word	0x42300000
 8004b58:	0800dd34 	.word	0x0800dd34
 8004b5c:	42600000 	.word	0x42600000
 8004b60:	0800dcf4 	.word	0x0800dcf4
 8004b64:	42960000 	.word	0x42960000
 8004b68:	0800ddb8 	.word	0x0800ddb8
 8004b6c:	200039c0 	.word	0x200039c0
 8004b70:	41200000 	.word	0x41200000
 8004b74:	41d80000 	.word	0x41d80000
 8004b78:	0800ddd0 	.word	0x0800ddd0
 8004b7c:	20000001 	.word	0x20000001
 8004b80:	20000bfc 	.word	0x20000bfc
 8004b84:	20000002 	.word	0x20000002
 8004b88:	42480000 	.word	0x42480000
 8004b8c:	0800dca8 	.word	0x0800dca8
 8004b90:	0800dd00 	.word	0x0800dd00
 8004b94:	427c0000 	.word	0x427c0000
 8004b98:	42040000 	.word	0x42040000
 8004b9c:	0800dc9c 	.word	0x0800dc9c
 8004ba0:	0800dcdc 	.word	0x0800dcdc
 8004ba4:	0800dce8 	.word	0x0800dce8
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8004ba8:	2304      	movs	r3, #4
 8004baa:	9301      	str	r3, [sp, #4]
 8004bac:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	4a9e      	ldr	r2, [pc, #632]	@ (8004e30 <System_UI_Loop+0x1f74>)
 8004bb8:	499e      	ldr	r1, [pc, #632]	@ (8004e34 <System_UI_Loop+0x1f78>)
 8004bba:	489f      	ldr	r0, [pc, #636]	@ (8004e38 <System_UI_Loop+0x1f7c>)
 8004bbc:	f002 ffde 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	9301      	str	r3, [sp, #4]
 8004bc4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	4b9c      	ldr	r3, [pc, #624]	@ (8004e3c <System_UI_Loop+0x1f80>)
 8004bcc:	4a9c      	ldr	r2, [pc, #624]	@ (8004e40 <System_UI_Loop+0x1f84>)
 8004bce:	499d      	ldr	r1, [pc, #628]	@ (8004e44 <System_UI_Loop+0x1f88>)
 8004bd0:	4899      	ldr	r0, [pc, #612]	@ (8004e38 <System_UI_Loop+0x1f7c>)
 8004bd2:	f002 ffd3 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y,TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	9301      	str	r3, [sp, #4]
 8004bda:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	4b96      	ldr	r3, [pc, #600]	@ (8004e3c <System_UI_Loop+0x1f80>)
 8004be2:	4a97      	ldr	r2, [pc, #604]	@ (8004e40 <System_UI_Loop+0x1f84>)
 8004be4:	4998      	ldr	r1, [pc, #608]	@ (8004e48 <System_UI_Loop+0x1f8c>)
 8004be6:	4894      	ldr	r0, [pc, #592]	@ (8004e38 <System_UI_Loop+0x1f7c>)
 8004be8:	f002 ffc8 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Here is 2048!") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8004bec:	2318      	movs	r3, #24
 8004bee:	9301      	str	r3, [sp, #4]
 8004bf0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004bfa:	4a94      	ldr	r2, [pc, #592]	@ (8004e4c <System_UI_Loop+0x1f90>)
 8004bfc:	4994      	ldr	r1, [pc, #592]	@ (8004e50 <System_UI_Loop+0x1f94>)
 8004bfe:	4895      	ldr	r0, [pc, #596]	@ (8004e54 <System_UI_Loop+0x1f98>)
 8004c00:	f002 ffbc 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("2048") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8004c04:	2315      	movs	r3, #21
 8004c06:	9301      	str	r3, [sp, #4]
 8004c08:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	4b92      	ldr	r3, [pc, #584]	@ (8004e58 <System_UI_Loop+0x1f9c>)
 8004c10:	4a92      	ldr	r2, [pc, #584]	@ (8004e5c <System_UI_Loop+0x1fa0>)
 8004c12:	4993      	ldr	r1, [pc, #588]	@ (8004e60 <System_UI_Loop+0x1fa4>)
 8004c14:	488f      	ldr	r0, [pc, #572]	@ (8004e54 <System_UI_Loop+0x1f98>)
 8004c16:	f002 ffb1 	bl	8007b7c <OLED_DoTweenObject>
            break;
 8004c1a:	e03a      	b.n	8004c92 <System_UI_Loop+0x1dd6>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8004c1c:	2304      	movs	r3, #4
 8004c1e:	9301      	str	r3, [sp, #4]
 8004c20:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	4a85      	ldr	r2, [pc, #532]	@ (8004e40 <System_UI_Loop+0x1f84>)
 8004c2c:	4986      	ldr	r1, [pc, #536]	@ (8004e48 <System_UI_Loop+0x1f8c>)
 8004c2e:	4882      	ldr	r0, [pc, #520]	@ (8004e38 <System_UI_Loop+0x1f7c>)
 8004c30:	f002 ffa4 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004c34:	2300      	movs	r3, #0
 8004c36:	9301      	str	r3, [sp, #4]
 8004c38:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e3c <System_UI_Loop+0x1f80>)
 8004c40:	4a7f      	ldr	r2, [pc, #508]	@ (8004e40 <System_UI_Loop+0x1f84>)
 8004c42:	4980      	ldr	r1, [pc, #512]	@ (8004e44 <System_UI_Loop+0x1f88>)
 8004c44:	487c      	ldr	r0, [pc, #496]	@ (8004e38 <System_UI_Loop+0x1f7c>)
 8004c46:	f002 ff99 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	9301      	str	r3, [sp, #4]
 8004c4e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	4b79      	ldr	r3, [pc, #484]	@ (8004e3c <System_UI_Loop+0x1f80>)
 8004c56:	4a76      	ldr	r2, [pc, #472]	@ (8004e30 <System_UI_Loop+0x1f74>)
 8004c58:	4976      	ldr	r1, [pc, #472]	@ (8004e34 <System_UI_Loop+0x1f78>)
 8004c5a:	4877      	ldr	r0, [pc, #476]	@ (8004e38 <System_UI_Loop+0x1f7c>)
 8004c5c:	f002 ff8e 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8004c60:	2318      	movs	r3, #24
 8004c62:	9301      	str	r3, [sp, #4]
 8004c64:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004c6e:	4a7d      	ldr	r2, [pc, #500]	@ (8004e64 <System_UI_Loop+0x1fa8>)
 8004c70:	4977      	ldr	r1, [pc, #476]	@ (8004e50 <System_UI_Loop+0x1f94>)
 8004c72:	4878      	ldr	r0, [pc, #480]	@ (8004e54 <System_UI_Loop+0x1f98>)
 8004c74:	f002 ff82 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8004c78:	2315      	movs	r3, #21
 8004c7a:	9301      	str	r3, [sp, #4]
 8004c7c:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	4b75      	ldr	r3, [pc, #468]	@ (8004e58 <System_UI_Loop+0x1f9c>)
 8004c84:	4a75      	ldr	r2, [pc, #468]	@ (8004e5c <System_UI_Loop+0x1fa0>)
 8004c86:	4976      	ldr	r1, [pc, #472]	@ (8004e60 <System_UI_Loop+0x1fa4>)
 8004c88:	4872      	ldr	r0, [pc, #456]	@ (8004e54 <System_UI_Loop+0x1f98>)
 8004c8a:	f002 ff77 	bl	8007b7c <OLED_DoTweenObject>
            break;
 8004c8e:	e000      	b.n	8004c92 <System_UI_Loop+0x1dd6>
            break;
 8004c90:	bf00      	nop
        switch (menuSelection)
 8004c92:	e184      	b.n	8004f9e <System_UI_Loop+0x20e2>
        }
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_GAMES && menuSelection == 1)
 8004c94:	4b74      	ldr	r3, [pc, #464]	@ (8004e68 <System_UI_Loop+0x1fac>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d10d      	bne.n	8004cb8 <System_UI_Loop+0x1dfc>
 8004c9c:	4b73      	ldr	r3, [pc, #460]	@ (8004e6c <System_UI_Loop+0x1fb0>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b05      	cmp	r3, #5
 8004ca2:	d109      	bne.n	8004cb8 <System_UI_Loop+0x1dfc>
 8004ca4:	4b72      	ldr	r3, [pc, #456]	@ (8004e70 <System_UI_Loop+0x1fb4>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d105      	bne.n	8004cb8 <System_UI_Loop+0x1dfc>
    {
        cancelSelection = true;
 8004cac:	4b71      	ldr	r3, [pc, #452]	@ (8004e74 <System_UI_Loop+0x1fb8>)
 8004cae:	2201      	movs	r2, #1
 8004cb0:	701a      	strb	r2, [r3, #0]
        Snake_GameLoop();
 8004cb2:	f7fc fc5f 	bl	8001574 <Snake_GameLoop>
 8004cb6:	e172      	b.n	8004f9e <System_UI_Loop+0x20e2>
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_GAMES && menuSelection == 2)
 8004cb8:	4b6b      	ldr	r3, [pc, #428]	@ (8004e68 <System_UI_Loop+0x1fac>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d10d      	bne.n	8004cdc <System_UI_Loop+0x1e20>
 8004cc0:	4b6a      	ldr	r3, [pc, #424]	@ (8004e6c <System_UI_Loop+0x1fb0>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b05      	cmp	r3, #5
 8004cc6:	d109      	bne.n	8004cdc <System_UI_Loop+0x1e20>
 8004cc8:	4b69      	ldr	r3, [pc, #420]	@ (8004e70 <System_UI_Loop+0x1fb4>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d105      	bne.n	8004cdc <System_UI_Loop+0x1e20>
    {
        cancelSelection = true;
 8004cd0:	4b68      	ldr	r3, [pc, #416]	@ (8004e74 <System_UI_Loop+0x1fb8>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	701a      	strb	r2, [r3, #0]
        Game2048_GameLoop();
 8004cd6:	f7fd f95f 	bl	8001f98 <Game2048_GameLoop>
 8004cda:	e160      	b.n	8004f9e <System_UI_Loop+0x20e2>
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_TOOLS && menuSelection == 1)
 8004cdc:	4b62      	ldr	r3, [pc, #392]	@ (8004e68 <System_UI_Loop+0x1fac>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	d10d      	bne.n	8004d00 <System_UI_Loop+0x1e44>
 8004ce4:	4b61      	ldr	r3, [pc, #388]	@ (8004e6c <System_UI_Loop+0x1fb0>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	d109      	bne.n	8004d00 <System_UI_Loop+0x1e44>
 8004cec:	4b60      	ldr	r3, [pc, #384]	@ (8004e70 <System_UI_Loop+0x1fb4>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d105      	bne.n	8004d00 <System_UI_Loop+0x1e44>
    {
        cancelSelection = true;
 8004cf4:	4b5f      	ldr	r3, [pc, #380]	@ (8004e74 <System_UI_Loop+0x1fb8>)
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	701a      	strb	r2, [r3, #0]
        play_video();
 8004cfa:	f003 fd2b 	bl	8008754 <play_video>
 8004cfe:	e14e      	b.n	8004f9e <System_UI_Loop+0x20e2>
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_STATUS)
 8004d00:	4b59      	ldr	r3, [pc, #356]	@ (8004e68 <System_UI_Loop+0x1fac>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d142      	bne.n	8004d8e <System_UI_Loop+0x1ed2>
 8004d08:	4b58      	ldr	r3, [pc, #352]	@ (8004e6c <System_UI_Loop+0x1fb0>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d13e      	bne.n	8004d8e <System_UI_Loop+0x1ed2>
    {
        OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8004d10:	2318      	movs	r3, #24
 8004d12:	9301      	str	r3, [sp, #4]
 8004d14:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	494b      	ldr	r1, [pc, #300]	@ (8004e50 <System_UI_Loop+0x1f94>)
 8004d24:	484b      	ldr	r0, [pc, #300]	@ (8004e54 <System_UI_Loop+0x1f98>)
 8004d26:	f002 ff29 	bl	8007b7c <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "CursorScale", 0, 8, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8004d2a:	2315      	movs	r3, #21
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	4948      	ldr	r1, [pc, #288]	@ (8004e60 <System_UI_Loop+0x1fa4>)
 8004d3e:	4845      	ldr	r0, [pc, #276]	@ (8004e54 <System_UI_Loop+0x1f98>)
 8004d40:	f002 ff1c 	bl	8007b7c <OLED_DoTweenObject>

        OLED_DoTweenObject(&Status_AnimationManager, "RunningTime", OLED_UI_END_X, 1, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8004d44:	2318      	movs	r3, #24
 8004d46:	9301      	str	r3, [sp, #4]
 8004d48:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004d52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004d56:	4948      	ldr	r1, [pc, #288]	@ (8004e78 <System_UI_Loop+0x1fbc>)
 8004d58:	4848      	ldr	r0, [pc, #288]	@ (8004e7c <System_UI_Loop+0x1fc0>)
 8004d5a:	f002 ff0f 	bl	8007b7c <OLED_DoTweenObject>
        OLED_DoTweenObject(&Status_AnimationManager, "Status", 0, OLED_UI_START_Y + OLED_UI_GAP_Y * 1 + 6, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8004d5e:	2318      	movs	r3, #24
 8004d60:	9301      	str	r3, [sp, #4]
 8004d62:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	4b45      	ldr	r3, [pc, #276]	@ (8004e80 <System_UI_Loop+0x1fc4>)
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	4945      	ldr	r1, [pc, #276]	@ (8004e84 <System_UI_Loop+0x1fc8>)
 8004d70:	4842      	ldr	r0, [pc, #264]	@ (8004e7c <System_UI_Loop+0x1fc0>)
 8004d72:	f002 ff03 	bl	8007b7c <OLED_DoTweenObject>

        OLED_DoTweenObject(&Status_AnimationManager, "CUBE", 113, 50, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8004d76:	2318      	movs	r3, #24
 8004d78:	9301      	str	r3, [sp, #4]
 8004d7a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	4b2b      	ldr	r3, [pc, #172]	@ (8004e30 <System_UI_Loop+0x1f74>)
 8004d82:	4a41      	ldr	r2, [pc, #260]	@ (8004e88 <System_UI_Loop+0x1fcc>)
 8004d84:	4941      	ldr	r1, [pc, #260]	@ (8004e8c <System_UI_Loop+0x1fd0>)
 8004d86:	483d      	ldr	r0, [pc, #244]	@ (8004e7c <System_UI_Loop+0x1fc0>)
 8004d88:	f002 fef8 	bl	8007b7c <OLED_DoTweenObject>
 8004d8c:	e107      	b.n	8004f9e <System_UI_Loop+0x20e2>
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_SETTINGS)
 8004d8e:	4b36      	ldr	r3, [pc, #216]	@ (8004e68 <System_UI_Loop+0x1fac>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	f040 80ea 	bne.w	8004f6c <System_UI_Loop+0x20b0>
 8004d98:	4b34      	ldr	r3, [pc, #208]	@ (8004e6c <System_UI_Loop+0x1fb0>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	f040 80e5 	bne.w	8004f6c <System_UI_Loop+0x20b0>
    {
        switch (menuSelection)
 8004da2:	4b33      	ldr	r3, [pc, #204]	@ (8004e70 <System_UI_Loop+0x1fb4>)
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	f000 80af 	beq.w	8004f0a <System_UI_Loop+0x204e>
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	f300 80db 	bgt.w	8004f68 <System_UI_Loop+0x20ac>
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d002      	beq.n	8004dbc <System_UI_Loop+0x1f00>
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d078      	beq.n	8004eac <System_UI_Loop+0x1ff0>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
            OLED_DoTweenObject(&Settings_AnimationManager, "Bar", 5, OLED_HEIGHT + 10, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
            break;
        default:
            break;
 8004dba:	e0d5      	b.n	8004f68 <System_UI_Loop+0x20ac>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	9301      	str	r3, [sp, #4]
 8004dc0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8004e3c <System_UI_Loop+0x1f80>)
 8004dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e40 <System_UI_Loop+0x1f84>)
 8004dca:	4931      	ldr	r1, [pc, #196]	@ (8004e90 <System_UI_Loop+0x1fd4>)
 8004dcc:	481a      	ldr	r0, [pc, #104]	@ (8004e38 <System_UI_Loop+0x1f7c>)
 8004dce:	f002 fed5 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Show FPS?", (OLED_WIDTH - strlen("Show FPS?") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8004dd2:	2304      	movs	r3, #4
 8004dd4:	9301      	str	r3, [sp, #4]
 8004dd6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	4a2c      	ldr	r2, [pc, #176]	@ (8004e94 <System_UI_Loop+0x1fd8>)
 8004de2:	492d      	ldr	r1, [pc, #180]	@ (8004e98 <System_UI_Loop+0x1fdc>)
 8004de4:	4814      	ldr	r0, [pc, #80]	@ (8004e38 <System_UI_Loop+0x1f7c>)
 8004de6:	f002 fec9 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Show FPS?") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8004dea:	2318      	movs	r3, #24
 8004dec:	9301      	str	r3, [sp, #4]
 8004dee:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004df8:	4a28      	ldr	r2, [pc, #160]	@ (8004e9c <System_UI_Loop+0x1fe0>)
 8004dfa:	4915      	ldr	r1, [pc, #84]	@ (8004e50 <System_UI_Loop+0x1f94>)
 8004dfc:	4815      	ldr	r0, [pc, #84]	@ (8004e54 <System_UI_Loop+0x1f98>)
 8004dfe:	f002 febd 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Show FPS:OFF") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8004e02:	2315      	movs	r3, #21
 8004e04:	9301      	str	r3, [sp, #4]
 8004e06:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	4b12      	ldr	r3, [pc, #72]	@ (8004e58 <System_UI_Loop+0x1f9c>)
 8004e0e:	4a15      	ldr	r2, [pc, #84]	@ (8004e64 <System_UI_Loop+0x1fa8>)
 8004e10:	4913      	ldr	r1, [pc, #76]	@ (8004e60 <System_UI_Loop+0x1fa4>)
 8004e12:	4810      	ldr	r0, [pc, #64]	@ (8004e54 <System_UI_Loop+0x1f98>)
 8004e14:	f002 feb2 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&Settings_AnimationManager, "Bar", 5, OLED_HEIGHT + 10, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8004e18:	2307      	movs	r3, #7
 8004e1a:	9301      	str	r3, [sp, #4]
 8004e1c:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	4b1c      	ldr	r3, [pc, #112]	@ (8004e94 <System_UI_Loop+0x1fd8>)
 8004e24:	4a1e      	ldr	r2, [pc, #120]	@ (8004ea0 <System_UI_Loop+0x1fe4>)
 8004e26:	491f      	ldr	r1, [pc, #124]	@ (8004ea4 <System_UI_Loop+0x1fe8>)
 8004e28:	481f      	ldr	r0, [pc, #124]	@ (8004ea8 <System_UI_Loop+0x1fec>)
 8004e2a:	f002 fea7 	bl	8007b7c <OLED_DoTweenObject>
            break;
 8004e2e:	e09c      	b.n	8004f6a <System_UI_Loop+0x20ae>
 8004e30:	42480000 	.word	0x42480000
 8004e34:	0800dce8 	.word	0x0800dce8
 8004e38:	200033cc 	.word	0x200033cc
 8004e3c:	c1200000 	.word	0xc1200000
 8004e40:	42600000 	.word	0x42600000
 8004e44:	0800dcdc 	.word	0x0800dcdc
 8004e48:	0800dcf4 	.word	0x0800dcf4
 8004e4c:	42a20000 	.word	0x42a20000
 8004e50:	0800ddb8 	.word	0x0800ddb8
 8004e54:	200039c0 	.word	0x200039c0
 8004e58:	41200000 	.word	0x41200000
 8004e5c:	41d80000 	.word	0x41d80000
 8004e60:	0800ddd0 	.word	0x0800ddd0
 8004e64:	42960000 	.word	0x42960000
 8004e68:	20000001 	.word	0x20000001
 8004e6c:	20000bfc 	.word	0x20000bfc
 8004e70:	20000002 	.word	0x20000002
 8004e74:	20000bfe 	.word	0x20000bfe
 8004e78:	0800dd68 	.word	0x0800dd68
 8004e7c:	20002dd8 	.word	0x20002dd8
 8004e80:	41b00000 	.word	0x41b00000
 8004e84:	0800dd74 	.word	0x0800dd74
 8004e88:	42e20000 	.word	0x42e20000
 8004e8c:	0800dd7c 	.word	0x0800dd7c
 8004e90:	0800dcc0 	.word	0x0800dcc0
 8004e94:	42940000 	.word	0x42940000
 8004e98:	0800dd0c 	.word	0x0800dd0c
 8004e9c:	42640000 	.word	0x42640000
 8004ea0:	40a00000 	.word	0x40a00000
 8004ea4:	0800dd98 	.word	0x0800dd98
 8004ea8:	200021f0 	.word	0x200021f0
            OLED_DoTweenObject(&g_Title_AnimationManager, "Show FPS?", (OLED_WIDTH - strlen("Show FPS?") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004eac:	2300      	movs	r3, #0
 8004eae:	9301      	str	r3, [sp, #4]
 8004eb0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	4b85      	ldr	r3, [pc, #532]	@ (80050cc <System_UI_Loop+0x2210>)
 8004eb8:	4a85      	ldr	r2, [pc, #532]	@ (80050d0 <System_UI_Loop+0x2214>)
 8004eba:	4986      	ldr	r1, [pc, #536]	@ (80050d4 <System_UI_Loop+0x2218>)
 8004ebc:	4886      	ldr	r0, [pc, #536]	@ (80050d8 <System_UI_Loop+0x221c>)
 8004ebe:	f002 fe5d 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8004ec2:	2318      	movs	r3, #24
 8004ec4:	9301      	str	r3, [sp, #4]
 8004ec6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	4981      	ldr	r1, [pc, #516]	@ (80050dc <System_UI_Loop+0x2220>)
 8004ed6:	4882      	ldr	r0, [pc, #520]	@ (80050e0 <System_UI_Loop+0x2224>)
 8004ed8:	f002 fe50 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Lightness: 100%") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8004edc:	2315      	movs	r3, #21
 8004ede:	9301      	str	r3, [sp, #4]
 8004ee0:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	4b7f      	ldr	r3, [pc, #508]	@ (80050e4 <System_UI_Loop+0x2228>)
 8004ee8:	4a7f      	ldr	r2, [pc, #508]	@ (80050e8 <System_UI_Loop+0x222c>)
 8004eea:	4980      	ldr	r1, [pc, #512]	@ (80050ec <System_UI_Loop+0x2230>)
 8004eec:	487c      	ldr	r0, [pc, #496]	@ (80050e0 <System_UI_Loop+0x2224>)
 8004eee:	f002 fe45 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&Settings_AnimationManager, "Bar", 5, OLED_HEIGHT + 10, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8004ef2:	2307      	movs	r3, #7
 8004ef4:	9301      	str	r3, [sp, #4]
 8004ef6:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	4b74      	ldr	r3, [pc, #464]	@ (80050d0 <System_UI_Loop+0x2214>)
 8004efe:	4a7c      	ldr	r2, [pc, #496]	@ (80050f0 <System_UI_Loop+0x2234>)
 8004f00:	497c      	ldr	r1, [pc, #496]	@ (80050f4 <System_UI_Loop+0x2238>)
 8004f02:	487d      	ldr	r0, [pc, #500]	@ (80050f8 <System_UI_Loop+0x223c>)
 8004f04:	f002 fe3a 	bl	8007b7c <OLED_DoTweenObject>
            break;
 8004f08:	e02f      	b.n	8004f6a <System_UI_Loop+0x20ae>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Show FPS?", (OLED_WIDTH - strlen("Show FPS?") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	4b6d      	ldr	r3, [pc, #436]	@ (80050cc <System_UI_Loop+0x2210>)
 8004f16:	4a6e      	ldr	r2, [pc, #440]	@ (80050d0 <System_UI_Loop+0x2214>)
 8004f18:	496e      	ldr	r1, [pc, #440]	@ (80050d4 <System_UI_Loop+0x2218>)
 8004f1a:	486f      	ldr	r0, [pc, #444]	@ (80050d8 <System_UI_Loop+0x221c>)
 8004f1c:	f002 fe2e 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8004f20:	2318      	movs	r3, #24
 8004f22:	9301      	str	r3, [sp, #4]
 8004f24:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	496a      	ldr	r1, [pc, #424]	@ (80050dc <System_UI_Loop+0x2220>)
 8004f34:	486a      	ldr	r0, [pc, #424]	@ (80050e0 <System_UI_Loop+0x2224>)
 8004f36:	f002 fe21 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8004f3a:	2315      	movs	r3, #21
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	4b67      	ldr	r3, [pc, #412]	@ (80050e4 <System_UI_Loop+0x2228>)
 8004f46:	4a6d      	ldr	r2, [pc, #436]	@ (80050fc <System_UI_Loop+0x2240>)
 8004f48:	4968      	ldr	r1, [pc, #416]	@ (80050ec <System_UI_Loop+0x2230>)
 8004f4a:	4865      	ldr	r0, [pc, #404]	@ (80050e0 <System_UI_Loop+0x2224>)
 8004f4c:	f002 fe16 	bl	8007b7c <OLED_DoTweenObject>
            OLED_DoTweenObject(&Settings_AnimationManager, "Bar", 5, OLED_HEIGHT + 10, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8004f50:	2307      	movs	r3, #7
 8004f52:	9301      	str	r3, [sp, #4]
 8004f54:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	4b5d      	ldr	r3, [pc, #372]	@ (80050d0 <System_UI_Loop+0x2214>)
 8004f5c:	4a64      	ldr	r2, [pc, #400]	@ (80050f0 <System_UI_Loop+0x2234>)
 8004f5e:	4965      	ldr	r1, [pc, #404]	@ (80050f4 <System_UI_Loop+0x2238>)
 8004f60:	4865      	ldr	r0, [pc, #404]	@ (80050f8 <System_UI_Loop+0x223c>)
 8004f62:	f002 fe0b 	bl	8007b7c <OLED_DoTweenObject>
            break;
 8004f66:	e000      	b.n	8004f6a <System_UI_Loop+0x20ae>
            break;
 8004f68:	bf00      	nop
        switch (menuSelection)
 8004f6a:	e018      	b.n	8004f9e <System_UI_Loop+0x20e2>
        }
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_SETTINGS && menuSelection == 2)
 8004f6c:	4b64      	ldr	r3, [pc, #400]	@ (8005100 <System_UI_Loop+0x2244>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b03      	cmp	r3, #3
 8004f72:	d114      	bne.n	8004f9e <System_UI_Loop+0x20e2>
 8004f74:	4b63      	ldr	r3, [pc, #396]	@ (8005104 <System_UI_Loop+0x2248>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d110      	bne.n	8004f9e <System_UI_Loop+0x20e2>
 8004f7c:	4b62      	ldr	r3, [pc, #392]	@ (8005108 <System_UI_Loop+0x224c>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d10c      	bne.n	8004f9e <System_UI_Loop+0x20e2>
    {
        OLED_DoTweenObject(&Settings_AnimationManager, "Bar", 5, OLED_HEIGHT - 9, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8004f84:	2318      	movs	r3, #24
 8004f86:	9301      	str	r3, [sp, #4]
 8004f88:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	4b5f      	ldr	r3, [pc, #380]	@ (800510c <System_UI_Loop+0x2250>)
 8004f90:	4a57      	ldr	r2, [pc, #348]	@ (80050f0 <System_UI_Loop+0x2234>)
 8004f92:	4958      	ldr	r1, [pc, #352]	@ (80050f4 <System_UI_Loop+0x2238>)
 8004f94:	4858      	ldr	r0, [pc, #352]	@ (80050f8 <System_UI_Loop+0x223c>)
 8004f96:	f002 fdf1 	bl	8007b7c <OLED_DoTweenObject>
 8004f9a:	e000      	b.n	8004f9e <System_UI_Loop+0x20e2>
            break;
 8004f9c:	bf00      	nop
    
#pragma endregion PlayerSelection

#pragma region ResetAnimation //完成换级时候让动画复位

    if (resetAnimation && !(OLED_GetAnimationStates(&Games_AnimationManager, "Snake") || OLED_GetAnimationStates(&Status_AnimationManager, "RunningTime") || OLED_GetAnimationStates(&Settings_AnimationManager, "ShowFPS") || OLED_GetAnimationStates(&About_AnimationManager, "Developer") || OLED_GetAnimationStates(&Tools_AnimationManager, "VideoPlayer")))
 8004f9e:	4b5c      	ldr	r3, [pc, #368]	@ (8005110 <System_UI_Loop+0x2254>)
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d079      	beq.n	800509a <System_UI_Loop+0x21de>
 8004fa6:	495b      	ldr	r1, [pc, #364]	@ (8005114 <System_UI_Loop+0x2258>)
 8004fa8:	485b      	ldr	r0, [pc, #364]	@ (8005118 <System_UI_Loop+0x225c>)
 8004faa:	f002 fdd1 	bl	8007b50 <OLED_GetAnimationStates>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d172      	bne.n	800509a <System_UI_Loop+0x21de>
 8004fb4:	4959      	ldr	r1, [pc, #356]	@ (800511c <System_UI_Loop+0x2260>)
 8004fb6:	485a      	ldr	r0, [pc, #360]	@ (8005120 <System_UI_Loop+0x2264>)
 8004fb8:	f002 fdca 	bl	8007b50 <OLED_GetAnimationStates>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d16b      	bne.n	800509a <System_UI_Loop+0x21de>
 8004fc2:	4958      	ldr	r1, [pc, #352]	@ (8005124 <System_UI_Loop+0x2268>)
 8004fc4:	484c      	ldr	r0, [pc, #304]	@ (80050f8 <System_UI_Loop+0x223c>)
 8004fc6:	f002 fdc3 	bl	8007b50 <OLED_GetAnimationStates>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d164      	bne.n	800509a <System_UI_Loop+0x21de>
 8004fd0:	4955      	ldr	r1, [pc, #340]	@ (8005128 <System_UI_Loop+0x226c>)
 8004fd2:	4856      	ldr	r0, [pc, #344]	@ (800512c <System_UI_Loop+0x2270>)
 8004fd4:	f002 fdbc 	bl	8007b50 <OLED_GetAnimationStates>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d15d      	bne.n	800509a <System_UI_Loop+0x21de>
 8004fde:	4954      	ldr	r1, [pc, #336]	@ (8005130 <System_UI_Loop+0x2274>)
 8004fe0:	4854      	ldr	r0, [pc, #336]	@ (8005134 <System_UI_Loop+0x2278>)
 8004fe2:	f002 fdb5 	bl	8007b50 <OLED_GetAnimationStates>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d156      	bne.n	800509a <System_UI_Loop+0x21de>
    {
        OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, EASE_IN_CIRC);
 8004fec:	230a      	movs	r3, #10
 8004fee:	9301      	str	r3, [sp, #4]
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8004ff8:	4a4f      	ldr	r2, [pc, #316]	@ (8005138 <System_UI_Loop+0x227c>)
 8004ffa:	4946      	ldr	r1, [pc, #280]	@ (8005114 <System_UI_Loop+0x2258>)
 8004ffc:	4846      	ldr	r0, [pc, #280]	@ (8005118 <System_UI_Loop+0x225c>)
 8004ffe:	f002 fdbd 	bl	8007b7c <OLED_DoTweenObject>
        OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, EASE_IN_CIRC);
 8005002:	230a      	movs	r3, #10
 8005004:	9301      	str	r3, [sp, #4]
 8005006:	2301      	movs	r3, #1
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	4b4c      	ldr	r3, [pc, #304]	@ (800513c <System_UI_Loop+0x2280>)
 800500c:	4a4a      	ldr	r2, [pc, #296]	@ (8005138 <System_UI_Loop+0x227c>)
 800500e:	494c      	ldr	r1, [pc, #304]	@ (8005140 <System_UI_Loop+0x2284>)
 8005010:	4841      	ldr	r0, [pc, #260]	@ (8005118 <System_UI_Loop+0x225c>)
 8005012:	f002 fdb3 	bl	8007b7c <OLED_DoTweenObject>


        OLED_DoTweenObject(&About_AnimationManager, "Developer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, EASE_IN_CIRC);
 8005016:	230a      	movs	r3, #10
 8005018:	9301      	str	r3, [sp, #4]
 800501a:	2301      	movs	r3, #1
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005022:	4a45      	ldr	r2, [pc, #276]	@ (8005138 <System_UI_Loop+0x227c>)
 8005024:	4940      	ldr	r1, [pc, #256]	@ (8005128 <System_UI_Loop+0x226c>)
 8005026:	4841      	ldr	r0, [pc, #260]	@ (800512c <System_UI_Loop+0x2270>)
 8005028:	f002 fda8 	bl	8007b7c <OLED_DoTweenObject>
        OLED_DoTweenObject(&About_AnimationManager, "Github", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, EASE_IN_CIRC);
 800502c:	230a      	movs	r3, #10
 800502e:	9301      	str	r3, [sp, #4]
 8005030:	2301      	movs	r3, #1
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	4b41      	ldr	r3, [pc, #260]	@ (800513c <System_UI_Loop+0x2280>)
 8005036:	4a40      	ldr	r2, [pc, #256]	@ (8005138 <System_UI_Loop+0x227c>)
 8005038:	4942      	ldr	r1, [pc, #264]	@ (8005144 <System_UI_Loop+0x2288>)
 800503a:	483c      	ldr	r0, [pc, #240]	@ (800512c <System_UI_Loop+0x2270>)
 800503c:	f002 fd9e 	bl	8007b7c <OLED_DoTweenObject>
        OLED_DoTweenObject(&About_AnimationManager, "Donate", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, EASE_IN_CIRC);
 8005040:	230a      	movs	r3, #10
 8005042:	9301      	str	r3, [sp, #4]
 8005044:	2301      	movs	r3, #1
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	4b3f      	ldr	r3, [pc, #252]	@ (8005148 <System_UI_Loop+0x228c>)
 800504a:	4a3b      	ldr	r2, [pc, #236]	@ (8005138 <System_UI_Loop+0x227c>)
 800504c:	493f      	ldr	r1, [pc, #252]	@ (800514c <System_UI_Loop+0x2290>)
 800504e:	4837      	ldr	r0, [pc, #220]	@ (800512c <System_UI_Loop+0x2270>)
 8005050:	f002 fd94 	bl	8007b7c <OLED_DoTweenObject>

        OLED_DoTweenObject(&Tools_AnimationManager, "VideoPlayer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, EASE_IN_CIRC);
 8005054:	230a      	movs	r3, #10
 8005056:	9301      	str	r3, [sp, #4]
 8005058:	2301      	movs	r3, #1
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005060:	4a35      	ldr	r2, [pc, #212]	@ (8005138 <System_UI_Loop+0x227c>)
 8005062:	4933      	ldr	r1, [pc, #204]	@ (8005130 <System_UI_Loop+0x2274>)
 8005064:	4833      	ldr	r0, [pc, #204]	@ (8005134 <System_UI_Loop+0x2278>)
 8005066:	f002 fd89 	bl	8007b7c <OLED_DoTweenObject>

        OLED_DoTweenObject(&Settings_AnimationManager, "ShowFPS", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, EASE_IN_CIRC);
 800506a:	230a      	movs	r3, #10
 800506c:	9301      	str	r3, [sp, #4]
 800506e:	2301      	movs	r3, #1
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005076:	4a30      	ldr	r2, [pc, #192]	@ (8005138 <System_UI_Loop+0x227c>)
 8005078:	492a      	ldr	r1, [pc, #168]	@ (8005124 <System_UI_Loop+0x2268>)
 800507a:	481f      	ldr	r0, [pc, #124]	@ (80050f8 <System_UI_Loop+0x223c>)
 800507c:	f002 fd7e 	bl	8007b7c <OLED_DoTweenObject>
        OLED_DoTweenObject(&Settings_AnimationManager, "Lightness", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, EASE_IN_CIRC);
 8005080:	230a      	movs	r3, #10
 8005082:	9301      	str	r3, [sp, #4]
 8005084:	2301      	movs	r3, #1
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	4b2c      	ldr	r3, [pc, #176]	@ (800513c <System_UI_Loop+0x2280>)
 800508a:	4a2b      	ldr	r2, [pc, #172]	@ (8005138 <System_UI_Loop+0x227c>)
 800508c:	4930      	ldr	r1, [pc, #192]	@ (8005150 <System_UI_Loop+0x2294>)
 800508e:	481a      	ldr	r0, [pc, #104]	@ (80050f8 <System_UI_Loop+0x223c>)
 8005090:	f002 fd74 	bl	8007b7c <OLED_DoTweenObject>
        resetAnimation = false;
 8005094:	4b1e      	ldr	r3, [pc, #120]	@ (8005110 <System_UI_Loop+0x2254>)
 8005096:	2200      	movs	r2, #0
 8005098:	701a      	strb	r2, [r3, #0]
    }

    if (menuRank == 3 && currentPage == UI_PAGE_SETTINGS)
 800509a:	4b19      	ldr	r3, [pc, #100]	@ (8005100 <System_UI_Loop+0x2244>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d10b      	bne.n	80050ba <System_UI_Loop+0x21fe>
 80050a2:	4b18      	ldr	r3, [pc, #96]	@ (8005104 <System_UI_Loop+0x2248>)
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d107      	bne.n	80050ba <System_UI_Loop+0x21fe>
    {
        unsigned char x;
        OLED_SendCommand(0x81); 
 80050aa:	2081      	movs	r0, #129	@ 0x81
 80050ac:	f7fd fbc2 	bl	8002834 <OLED_SendCommand>
        OLED_SendCommand(brightness); 
 80050b0:	4b28      	ldr	r3, [pc, #160]	@ (8005154 <System_UI_Loop+0x2298>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fd fbbd 	bl	8002834 <OLED_SendCommand>
    }
    

#pragma endregion ResetAnimation

    preMenuSelection = menuSelection;
 80050ba:	4b13      	ldr	r3, [pc, #76]	@ (8005108 <System_UI_Loop+0x224c>)
 80050bc:	781a      	ldrb	r2, [r3, #0]
 80050be:	4b26      	ldr	r3, [pc, #152]	@ (8005158 <System_UI_Loop+0x229c>)
 80050c0:	701a      	strb	r2, [r3, #0]
}
 80050c2:	bf00      	nop
 80050c4:	3744      	adds	r7, #68	@ 0x44
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050ca:	bf00      	nop
 80050cc:	c1200000 	.word	0xc1200000
 80050d0:	42940000 	.word	0x42940000
 80050d4:	0800dd0c 	.word	0x0800dd0c
 80050d8:	200033cc 	.word	0x200033cc
 80050dc:	0800ddb8 	.word	0x0800ddb8
 80050e0:	200039c0 	.word	0x200039c0
 80050e4:	41200000 	.word	0x41200000
 80050e8:	42ba0000 	.word	0x42ba0000
 80050ec:	0800ddd0 	.word	0x0800ddd0
 80050f0:	40a00000 	.word	0x40a00000
 80050f4:	0800dd98 	.word	0x0800dd98
 80050f8:	200021f0 	.word	0x200021f0
 80050fc:	41d80000 	.word	0x41d80000
 8005100:	20000001 	.word	0x20000001
 8005104:	20000bfc 	.word	0x20000bfc
 8005108:	20000002 	.word	0x20000002
 800510c:	425c0000 	.word	0x425c0000
 8005110:	20000bff 	.word	0x20000bff
 8005114:	0800dd40 	.word	0x0800dd40
 8005118:	20001608 	.word	0x20001608
 800511c:	0800dd68 	.word	0x0800dd68
 8005120:	20002dd8 	.word	0x20002dd8
 8005124:	0800dd84 	.word	0x0800dd84
 8005128:	0800dd9c 	.word	0x0800dd9c
 800512c:	200027e4 	.word	0x200027e4
 8005130:	0800dd5c 	.word	0x0800dd5c
 8005134:	20001bfc 	.word	0x20001bfc
 8005138:	c2b40000 	.word	0xc2b40000
 800513c:	41e80000 	.word	0x41e80000
 8005140:	0800dd48 	.word	0x0800dd48
 8005144:	0800dda8 	.word	0x0800dda8
 8005148:	42280000 	.word	0x42280000
 800514c:	0800ddb0 	.word	0x0800ddb0
 8005150:	0800dd8c 	.word	0x0800dd8c
 8005154:	20000003 	.word	0x20000003
 8005158:	20000bfd 	.word	0x20000bfd

0800515c <SystemGetsSignal>:
#define RollScale 5
void SystemGetsSignal() // 这里是旋钮数据的获取
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af02      	add	r7, sp, #8
#pragma region 管理翻页
    static uint16_t preCount = 32767;
    uint16_t pageCount;
    if (currentPage == UI_PAGE_MENU)
 8005162:	4b63      	ldr	r3, [pc, #396]	@ (80052f0 <SystemGetsSignal+0x194>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d102      	bne.n	8005170 <SystemGetsSignal+0x14>
    {
        pageCount = MainMenuItemCount;
 800516a:	2305      	movs	r3, #5
 800516c:	80fb      	strh	r3, [r7, #6]
 800516e:	e01a      	b.n	80051a6 <SystemGetsSignal+0x4a>
    }
    else if (currentPage == UI_PAGE_SETTINGS)
 8005170:	4b5f      	ldr	r3, [pc, #380]	@ (80052f0 <SystemGetsSignal+0x194>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d102      	bne.n	800517e <SystemGetsSignal+0x22>
    {
        pageCount = SettingsItemCount;
 8005178:	2303      	movs	r3, #3
 800517a:	80fb      	strh	r3, [r7, #6]
 800517c:	e013      	b.n	80051a6 <SystemGetsSignal+0x4a>
    }
    else if (currentPage == UI_PAGE_ABOUT)
 800517e:	4b5c      	ldr	r3, [pc, #368]	@ (80052f0 <SystemGetsSignal+0x194>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	2b03      	cmp	r3, #3
 8005184:	d102      	bne.n	800518c <SystemGetsSignal+0x30>
    {
        pageCount = AboutItemCount;
 8005186:	2304      	movs	r3, #4
 8005188:	80fb      	strh	r3, [r7, #6]
 800518a:	e00c      	b.n	80051a6 <SystemGetsSignal+0x4a>
    }
    else if (currentPage == UI_PAGE_TOOLS)
 800518c:	4b58      	ldr	r3, [pc, #352]	@ (80052f0 <SystemGetsSignal+0x194>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b04      	cmp	r3, #4
 8005192:	d102      	bne.n	800519a <SystemGetsSignal+0x3e>
    {
        pageCount = ToolsItemCount;
 8005194:	2302      	movs	r3, #2
 8005196:	80fb      	strh	r3, [r7, #6]
 8005198:	e005      	b.n	80051a6 <SystemGetsSignal+0x4a>
    }
    else if (currentPage == UI_PAGE_GAMES)
 800519a:	4b55      	ldr	r3, [pc, #340]	@ (80052f0 <SystemGetsSignal+0x194>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b05      	cmp	r3, #5
 80051a0:	d101      	bne.n	80051a6 <SystemGetsSignal+0x4a>
    {
        pageCount = GamesItemCount;
 80051a2:	2303      	movs	r3, #3
 80051a4:	80fb      	strh	r3, [r7, #6]
    }

    if (!cancelSelection)
 80051a6:	4b53      	ldr	r3, [pc, #332]	@ (80052f4 <SystemGetsSignal+0x198>)
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	f083 0301 	eor.w	r3, r3, #1
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d03a      	beq.n	800522a <SystemGetsSignal+0xce>
    {
        if (count - preCount > 1)
 80051b4:	4b50      	ldr	r3, [pc, #320]	@ (80052f8 <SystemGetsSignal+0x19c>)
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	4b50      	ldr	r3, [pc, #320]	@ (80052fc <SystemGetsSignal+0x1a0>)
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	dd14      	ble.n	80051ee <SystemGetsSignal+0x92>
        {
            if (menuSelection < pageCount)
 80051c4:	4b4e      	ldr	r3, [pc, #312]	@ (8005300 <SystemGetsSignal+0x1a4>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	461a      	mov	r2, r3
 80051ca:	88fb      	ldrh	r3, [r7, #6]
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d906      	bls.n	80051de <SystemGetsSignal+0x82>
            {
                menuSelection++;
 80051d0:	4b4b      	ldr	r3, [pc, #300]	@ (8005300 <SystemGetsSignal+0x1a4>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	3301      	adds	r3, #1
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	4b49      	ldr	r3, [pc, #292]	@ (8005300 <SystemGetsSignal+0x1a4>)
 80051da:	701a      	strb	r2, [r3, #0]
 80051dc:	e002      	b.n	80051e4 <SystemGetsSignal+0x88>
            }
            else
            {
                menuSelection = 1;
 80051de:	4b48      	ldr	r3, [pc, #288]	@ (8005300 <SystemGetsSignal+0x1a4>)
 80051e0:	2201      	movs	r2, #1
 80051e2:	701a      	strb	r2, [r3, #0]
            }

            preCount = count;
 80051e4:	4b44      	ldr	r3, [pc, #272]	@ (80052f8 <SystemGetsSignal+0x19c>)
 80051e6:	881a      	ldrh	r2, [r3, #0]
 80051e8:	4b44      	ldr	r3, [pc, #272]	@ (80052fc <SystemGetsSignal+0x1a0>)
 80051ea:	801a      	strh	r2, [r3, #0]
 80051ec:	e08f      	b.n	800530e <SystemGetsSignal+0x1b2>
        }
        else if (count - preCount < -1)
 80051ee:	4b42      	ldr	r3, [pc, #264]	@ (80052f8 <SystemGetsSignal+0x19c>)
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	4b41      	ldr	r3, [pc, #260]	@ (80052fc <SystemGetsSignal+0x1a0>)
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fe:	f280 8086 	bge.w	800530e <SystemGetsSignal+0x1b2>
        {

            if (menuSelection > 1)
 8005202:	4b3f      	ldr	r3, [pc, #252]	@ (8005300 <SystemGetsSignal+0x1a4>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d906      	bls.n	8005218 <SystemGetsSignal+0xbc>
            {
                menuSelection--;
 800520a:	4b3d      	ldr	r3, [pc, #244]	@ (8005300 <SystemGetsSignal+0x1a4>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	3b01      	subs	r3, #1
 8005210:	b2da      	uxtb	r2, r3
 8005212:	4b3b      	ldr	r3, [pc, #236]	@ (8005300 <SystemGetsSignal+0x1a4>)
 8005214:	701a      	strb	r2, [r3, #0]
 8005216:	e003      	b.n	8005220 <SystemGetsSignal+0xc4>
            }
            else
            {
                menuSelection = pageCount;
 8005218:	88fb      	ldrh	r3, [r7, #6]
 800521a:	b2da      	uxtb	r2, r3
 800521c:	4b38      	ldr	r3, [pc, #224]	@ (8005300 <SystemGetsSignal+0x1a4>)
 800521e:	701a      	strb	r2, [r3, #0]
            }

            preCount = count;
 8005220:	4b35      	ldr	r3, [pc, #212]	@ (80052f8 <SystemGetsSignal+0x19c>)
 8005222:	881a      	ldrh	r2, [r3, #0]
 8005224:	4b35      	ldr	r3, [pc, #212]	@ (80052fc <SystemGetsSignal+0x1a0>)
 8005226:	801a      	strh	r2, [r3, #0]
 8005228:	e071      	b.n	800530e <SystemGetsSignal+0x1b2>
        }
    }
    else if (cancelSelection && currentPage == UI_PAGE_SETTINGS && menuRank == 3)
 800522a:	4b32      	ldr	r3, [pc, #200]	@ (80052f4 <SystemGetsSignal+0x198>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d058      	beq.n	80052e4 <SystemGetsSignal+0x188>
 8005232:	4b2f      	ldr	r3, [pc, #188]	@ (80052f0 <SystemGetsSignal+0x194>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d154      	bne.n	80052e4 <SystemGetsSignal+0x188>
 800523a:	4b32      	ldr	r3, [pc, #200]	@ (8005304 <SystemGetsSignal+0x1a8>)
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	2b03      	cmp	r3, #3
 8005240:	d150      	bne.n	80052e4 <SystemGetsSignal+0x188>
    {
        if (brightness + RollScale >= 255 && count - preCount > 1)
 8005242:	4b31      	ldr	r3, [pc, #196]	@ (8005308 <SystemGetsSignal+0x1ac>)
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	2bf9      	cmp	r3, #249	@ 0xf9
 8005248:	d90f      	bls.n	800526a <SystemGetsSignal+0x10e>
 800524a:	4b2b      	ldr	r3, [pc, #172]	@ (80052f8 <SystemGetsSignal+0x19c>)
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	4b2a      	ldr	r3, [pc, #168]	@ (80052fc <SystemGetsSignal+0x1a0>)
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b01      	cmp	r3, #1
 8005258:	dd07      	ble.n	800526a <SystemGetsSignal+0x10e>
        {
            brightness = 255;
 800525a:	4b2b      	ldr	r3, [pc, #172]	@ (8005308 <SystemGetsSignal+0x1ac>)
 800525c:	22ff      	movs	r2, #255	@ 0xff
 800525e:	701a      	strb	r2, [r3, #0]
            preCount = count;
 8005260:	4b25      	ldr	r3, [pc, #148]	@ (80052f8 <SystemGetsSignal+0x19c>)
 8005262:	881a      	ldrh	r2, [r3, #0]
 8005264:	4b25      	ldr	r3, [pc, #148]	@ (80052fc <SystemGetsSignal+0x1a0>)
 8005266:	801a      	strh	r2, [r3, #0]
 8005268:	e03b      	b.n	80052e2 <SystemGetsSignal+0x186>
        }
        else if (brightness - RollScale <= 0 && count - preCount < -1)
 800526a:	4b27      	ldr	r3, [pc, #156]	@ (8005308 <SystemGetsSignal+0x1ac>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b05      	cmp	r3, #5
 8005270:	d810      	bhi.n	8005294 <SystemGetsSignal+0x138>
 8005272:	4b21      	ldr	r3, [pc, #132]	@ (80052f8 <SystemGetsSignal+0x19c>)
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	4b20      	ldr	r3, [pc, #128]	@ (80052fc <SystemGetsSignal+0x1a0>)
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005282:	da07      	bge.n	8005294 <SystemGetsSignal+0x138>
        {
            brightness = 0;
 8005284:	4b20      	ldr	r3, [pc, #128]	@ (8005308 <SystemGetsSignal+0x1ac>)
 8005286:	2200      	movs	r2, #0
 8005288:	701a      	strb	r2, [r3, #0]
            preCount = count;
 800528a:	4b1b      	ldr	r3, [pc, #108]	@ (80052f8 <SystemGetsSignal+0x19c>)
 800528c:	881a      	ldrh	r2, [r3, #0]
 800528e:	4b1b      	ldr	r3, [pc, #108]	@ (80052fc <SystemGetsSignal+0x1a0>)
 8005290:	801a      	strh	r2, [r3, #0]
 8005292:	e026      	b.n	80052e2 <SystemGetsSignal+0x186>
        }
        else if (count - preCount > 1)
 8005294:	4b18      	ldr	r3, [pc, #96]	@ (80052f8 <SystemGetsSignal+0x19c>)
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	461a      	mov	r2, r3
 800529a:	4b18      	ldr	r3, [pc, #96]	@ (80052fc <SystemGetsSignal+0x1a0>)
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	dd0a      	ble.n	80052ba <SystemGetsSignal+0x15e>
        {
            brightness += RollScale;
 80052a4:	4b18      	ldr	r3, [pc, #96]	@ (8005308 <SystemGetsSignal+0x1ac>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	3305      	adds	r3, #5
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	4b16      	ldr	r3, [pc, #88]	@ (8005308 <SystemGetsSignal+0x1ac>)
 80052ae:	701a      	strb	r2, [r3, #0]
            preCount = count;
 80052b0:	4b11      	ldr	r3, [pc, #68]	@ (80052f8 <SystemGetsSignal+0x19c>)
 80052b2:	881a      	ldrh	r2, [r3, #0]
 80052b4:	4b11      	ldr	r3, [pc, #68]	@ (80052fc <SystemGetsSignal+0x1a0>)
 80052b6:	801a      	strh	r2, [r3, #0]
        if (brightness + RollScale >= 255 && count - preCount > 1)
 80052b8:	e028      	b.n	800530c <SystemGetsSignal+0x1b0>
        }
        else if (count - preCount < -1)
 80052ba:	4b0f      	ldr	r3, [pc, #60]	@ (80052f8 <SystemGetsSignal+0x19c>)
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	4b0e      	ldr	r3, [pc, #56]	@ (80052fc <SystemGetsSignal+0x1a0>)
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ca:	da1f      	bge.n	800530c <SystemGetsSignal+0x1b0>
        {
            brightness -= RollScale;
 80052cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005308 <SystemGetsSignal+0x1ac>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	3b05      	subs	r3, #5
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005308 <SystemGetsSignal+0x1ac>)
 80052d6:	701a      	strb	r2, [r3, #0]
            preCount = count;
 80052d8:	4b07      	ldr	r3, [pc, #28]	@ (80052f8 <SystemGetsSignal+0x19c>)
 80052da:	881a      	ldrh	r2, [r3, #0]
 80052dc:	4b07      	ldr	r3, [pc, #28]	@ (80052fc <SystemGetsSignal+0x1a0>)
 80052de:	801a      	strh	r2, [r3, #0]
        if (brightness + RollScale >= 255 && count - preCount > 1)
 80052e0:	e014      	b.n	800530c <SystemGetsSignal+0x1b0>
 80052e2:	e013      	b.n	800530c <SystemGetsSignal+0x1b0>
        }
    }
    else
        preCount = count;
 80052e4:	4b04      	ldr	r3, [pc, #16]	@ (80052f8 <SystemGetsSignal+0x19c>)
 80052e6:	881a      	ldrh	r2, [r3, #0]
 80052e8:	4b04      	ldr	r3, [pc, #16]	@ (80052fc <SystemGetsSignal+0x1a0>)
 80052ea:	801a      	strh	r2, [r3, #0]
 80052ec:	e00f      	b.n	800530e <SystemGetsSignal+0x1b2>
 80052ee:	bf00      	nop
 80052f0:	20000bfc 	.word	0x20000bfc
 80052f4:	20000bfe 	.word	0x20000bfe
 80052f8:	20000308 	.word	0x20000308
 80052fc:	20000006 	.word	0x20000006
 8005300:	20000002 	.word	0x20000002
 8005304:	20000001 	.word	0x20000001
 8005308:	20000003 	.word	0x20000003
        if (brightness + RollScale >= 255 && count - preCount > 1)
 800530c:	bf00      	nop


#pragma endregion 管理翻页

    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 800530e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005312:	4876      	ldr	r0, [pc, #472]	@ (80054ec <SystemGetsSignal+0x390>)
 8005314:	f003 ffe4 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	f041 82eb 	bne.w	80068f6 <SystemGetsSignal+0x179a>
    {
        HAL_Delay(50); // 防抖动延时
 8005320:	2032      	movs	r0, #50	@ 0x32
 8005322:	f003 fbc7 	bl	8008ab4 <HAL_Delay>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && !gameOver && !game2048_game_over)
 8005326:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800532a:	4870      	ldr	r0, [pc, #448]	@ (80054ec <SystemGetsSignal+0x390>)
 800532c:	f003 ffd8 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	f041 82df 	bne.w	80068f6 <SystemGetsSignal+0x179a>
 8005338:	4b6d      	ldr	r3, [pc, #436]	@ (80054f0 <SystemGetsSignal+0x394>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	f083 0301 	eor.w	r3, r3, #1
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	f001 82d7 	beq.w	80068f6 <SystemGetsSignal+0x179a>
 8005348:	4b6a      	ldr	r3, [pc, #424]	@ (80054f4 <SystemGetsSignal+0x398>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	f083 0301 	eor.w	r3, r3, #1
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	f001 82cf 	beq.w	80068f6 <SystemGetsSignal+0x179a>
        {
// #pragma region 游戏部分
            if (menuRank == 1 && menuSelection == 1)
 8005358:	4b67      	ldr	r3, [pc, #412]	@ (80054f8 <SystemGetsSignal+0x39c>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b01      	cmp	r3, #1
 800535e:	f040 80ed 	bne.w	800553c <SystemGetsSignal+0x3e0>
 8005362:	4b66      	ldr	r3, [pc, #408]	@ (80054fc <SystemGetsSignal+0x3a0>)
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	2b01      	cmp	r3, #1
 8005368:	f040 80e8 	bne.w	800553c <SystemGetsSignal+0x3e0>
            {
                menuRank = 2;
 800536c:	4b62      	ldr	r3, [pc, #392]	@ (80054f8 <SystemGetsSignal+0x39c>)
 800536e:	2202      	movs	r2, #2
 8005370:	701a      	strb	r2, [r3, #0]
                menuSelection = 1;
 8005372:	4b62      	ldr	r3, [pc, #392]	@ (80054fc <SystemGetsSignal+0x3a0>)
 8005374:	2201      	movs	r2, #1
 8005376:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8005378:	4b61      	ldr	r3, [pc, #388]	@ (8005500 <SystemGetsSignal+0x3a4>)
 800537a:	2205      	movs	r2, #5
 800537c:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 800537e:	4b5f      	ldr	r3, [pc, #380]	@ (80054fc <SystemGetsSignal+0x3a0>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	f1c3 0202 	rsb	r2, r3, #2
 8005386:	4613      	mov	r3, r2
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	3303      	adds	r3, #3
 8005392:	4618      	mov	r0, r3
 8005394:	f7fa ffa6 	bl	80002e4 <__aeabi_i2f>
 8005398:	4603      	mov	r3, r0
 800539a:	2207      	movs	r2, #7
 800539c:	9201      	str	r2, [sp, #4]
 800539e:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80053a2:	9200      	str	r2, [sp, #0]
 80053a4:	4a57      	ldr	r2, [pc, #348]	@ (8005504 <SystemGetsSignal+0x3a8>)
 80053a6:	4958      	ldr	r1, [pc, #352]	@ (8005508 <SystemGetsSignal+0x3ac>)
 80053a8:	4858      	ldr	r0, [pc, #352]	@ (800550c <SystemGetsSignal+0x3b0>)
 80053aa:	f002 fbe7 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 80053ae:	2064      	movs	r0, #100	@ 0x64
 80053b0:	f003 fb80 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 80053b4:	4b51      	ldr	r3, [pc, #324]	@ (80054fc <SystemGetsSignal+0x3a0>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	f1c3 0203 	rsb	r2, r3, #3
 80053bc:	4613      	mov	r3, r2
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	4413      	add	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	3303      	adds	r3, #3
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fa ff8b 	bl	80002e4 <__aeabi_i2f>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2207      	movs	r2, #7
 80053d2:	9201      	str	r2, [sp, #4]
 80053d4:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80053d8:	9200      	str	r2, [sp, #0]
 80053da:	4a4a      	ldr	r2, [pc, #296]	@ (8005504 <SystemGetsSignal+0x3a8>)
 80053dc:	494c      	ldr	r1, [pc, #304]	@ (8005510 <SystemGetsSignal+0x3b4>)
 80053de:	484b      	ldr	r0, [pc, #300]	@ (800550c <SystemGetsSignal+0x3b0>)
 80053e0:	f002 fbcc 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 80053e4:	2064      	movs	r0, #100	@ 0x64
 80053e6:	f003 fb65 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 80053ea:	4b44      	ldr	r3, [pc, #272]	@ (80054fc <SystemGetsSignal+0x3a0>)
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	f1c3 0204 	rsb	r2, r3, #4
 80053f2:	4613      	mov	r3, r2
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	4413      	add	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	3303      	adds	r3, #3
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fa ff70 	bl	80002e4 <__aeabi_i2f>
 8005404:	4603      	mov	r3, r0
 8005406:	2207      	movs	r2, #7
 8005408:	9201      	str	r2, [sp, #4]
 800540a:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800540e:	9200      	str	r2, [sp, #0]
 8005410:	4a3c      	ldr	r2, [pc, #240]	@ (8005504 <SystemGetsSignal+0x3a8>)
 8005412:	4940      	ldr	r1, [pc, #256]	@ (8005514 <SystemGetsSignal+0x3b8>)
 8005414:	483d      	ldr	r0, [pc, #244]	@ (800550c <SystemGetsSignal+0x3b0>)
 8005416:	f002 fbb1 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 800541a:	2064      	movs	r0, #100	@ 0x64
 800541c:	f003 fb4a 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005420:	4b36      	ldr	r3, [pc, #216]	@ (80054fc <SystemGetsSignal+0x3a0>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	f1c3 0205 	rsb	r2, r3, #5
 8005428:	4613      	mov	r3, r2
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	4413      	add	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	3303      	adds	r3, #3
 8005434:	4618      	mov	r0, r3
 8005436:	f7fa ff55 	bl	80002e4 <__aeabi_i2f>
 800543a:	4603      	mov	r3, r0
 800543c:	2207      	movs	r2, #7
 800543e:	9201      	str	r2, [sp, #4]
 8005440:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8005444:	9200      	str	r2, [sp, #0]
 8005446:	4a2f      	ldr	r2, [pc, #188]	@ (8005504 <SystemGetsSignal+0x3a8>)
 8005448:	4933      	ldr	r1, [pc, #204]	@ (8005518 <SystemGetsSignal+0x3bc>)
 800544a:	4830      	ldr	r0, [pc, #192]	@ (800550c <SystemGetsSignal+0x3b0>)
 800544c:	f002 fb96 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005450:	2064      	movs	r0, #100	@ 0x64
 8005452:	f003 fb2f 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005456:	4b29      	ldr	r3, [pc, #164]	@ (80054fc <SystemGetsSignal+0x3a0>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	f1c3 0206 	rsb	r2, r3, #6
 800545e:	4613      	mov	r3, r2
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	4413      	add	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	3303      	adds	r3, #3
 800546a:	4618      	mov	r0, r3
 800546c:	f7fa ff3a 	bl	80002e4 <__aeabi_i2f>
 8005470:	4603      	mov	r3, r0
 8005472:	2207      	movs	r2, #7
 8005474:	9201      	str	r2, [sp, #4]
 8005476:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800547a:	9200      	str	r2, [sp, #0]
 800547c:	4a21      	ldr	r2, [pc, #132]	@ (8005504 <SystemGetsSignal+0x3a8>)
 800547e:	4927      	ldr	r1, [pc, #156]	@ (800551c <SystemGetsSignal+0x3c0>)
 8005480:	4822      	ldr	r0, [pc, #136]	@ (800550c <SystemGetsSignal+0x3b0>)
 8005482:	f002 fb7b 	bl	8007b7c <OLED_DoTweenObject>

                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005486:	2318      	movs	r3, #24
 8005488:	9301      	str	r3, [sp, #4]
 800548a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005494:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005498:	4921      	ldr	r1, [pc, #132]	@ (8005520 <SystemGetsSignal+0x3c4>)
 800549a:	4822      	ldr	r0, [pc, #136]	@ (8005524 <SystemGetsSignal+0x3c8>)
 800549c:	f002 fb6e 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 80054a0:	2064      	movs	r0, #100	@ 0x64
 80054a2:	f003 fb07 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80054a6:	2318      	movs	r3, #24
 80054a8:	9301      	str	r3, [sp, #4]
 80054aa:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005528 <SystemGetsSignal+0x3cc>)
 80054b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80054b6:	491d      	ldr	r1, [pc, #116]	@ (800552c <SystemGetsSignal+0x3d0>)
 80054b8:	481a      	ldr	r0, [pc, #104]	@ (8005524 <SystemGetsSignal+0x3c8>)
 80054ba:	f002 fb5f 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 80054be:	2064      	movs	r0, #100	@ 0x64
 80054c0:	f003 faf8 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObjectY(&g_AnimationManager, "BackButton", OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, BASIC_TWEEN_IN_STYLE);
 80054c4:	2318      	movs	r3, #24
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	2301      	movs	r3, #1
 80054ca:	4a19      	ldr	r2, [pc, #100]	@ (8005530 <SystemGetsSignal+0x3d4>)
 80054cc:	4919      	ldr	r1, [pc, #100]	@ (8005534 <SystemGetsSignal+0x3d8>)
 80054ce:	481a      	ldr	r0, [pc, #104]	@ (8005538 <SystemGetsSignal+0x3dc>)
 80054d0:	f002 fc27 	bl	8007d22 <OLED_DoTweenObjectY>
                OLED_DoTweenObjectX(&g_AnimationManager, "BackButton", OLED_UI_END_X, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80054d4:	2318      	movs	r3, #24
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80054dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80054e0:	4914      	ldr	r1, [pc, #80]	@ (8005534 <SystemGetsSignal+0x3d8>)
 80054e2:	4815      	ldr	r0, [pc, #84]	@ (8005538 <SystemGetsSignal+0x3dc>)
 80054e4:	f002 fbe8 	bl	8007cb8 <OLED_DoTweenObjectX>
 80054e8:	f001 b9fc 	b.w	80068e4 <SystemGetsSignal+0x1788>
 80054ec:	40010c00 	.word	0x40010c00
 80054f0:	2000023a 	.word	0x2000023a
 80054f4:	20000264 	.word	0x20000264
 80054f8:	20000001 	.word	0x20000001
 80054fc:	20000002 	.word	0x20000002
 8005500:	20000bfc 	.word	0x20000bfc
 8005504:	c2b40000 	.word	0xc2b40000
 8005508:	0800dddc 	.word	0x0800dddc
 800550c:	20001014 	.word	0x20001014
 8005510:	0800dde8 	.word	0x0800dde8
 8005514:	0800ddf4 	.word	0x0800ddf4
 8005518:	0800de04 	.word	0x0800de04
 800551c:	0800de14 	.word	0x0800de14
 8005520:	0800dd40 	.word	0x0800dd40
 8005524:	20001608 	.word	0x20001608
 8005528:	41e80000 	.word	0x41e80000
 800552c:	0800dd48 	.word	0x0800dd48
 8005530:	42280000 	.word	0x42280000
 8005534:	0800dd50 	.word	0x0800dd50
 8005538:	200039c0 	.word	0x200039c0
            }
            else if (menuRank == 2 && menuSelection == 3 && currentPage == UI_PAGE_GAMES)
 800553c:	4bb2      	ldr	r3, [pc, #712]	@ (8005808 <SystemGetsSignal+0x6ac>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	2b02      	cmp	r3, #2
 8005542:	f040 8088 	bne.w	8005656 <SystemGetsSignal+0x4fa>
 8005546:	4bb1      	ldr	r3, [pc, #708]	@ (800580c <SystemGetsSignal+0x6b0>)
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	2b03      	cmp	r3, #3
 800554c:	f040 8083 	bne.w	8005656 <SystemGetsSignal+0x4fa>
 8005550:	4baf      	ldr	r3, [pc, #700]	@ (8005810 <SystemGetsSignal+0x6b4>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b05      	cmp	r3, #5
 8005556:	d17e      	bne.n	8005656 <SystemGetsSignal+0x4fa>
            {
                menuRank = 1;
 8005558:	4bab      	ldr	r3, [pc, #684]	@ (8005808 <SystemGetsSignal+0x6ac>)
 800555a:	2201      	movs	r2, #1
 800555c:	701a      	strb	r2, [r3, #0]
                menuSelection = 1;
 800555e:	4bab      	ldr	r3, [pc, #684]	@ (800580c <SystemGetsSignal+0x6b0>)
 8005560:	2201      	movs	r2, #1
 8005562:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_MENU;
 8005564:	4baa      	ldr	r3, [pc, #680]	@ (8005810 <SystemGetsSignal+0x6b4>)
 8005566:	2200      	movs	r2, #0
 8005568:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 800556a:	2307      	movs	r3, #7
 800556c:	9301      	str	r3, [sp, #4]
 800556e:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	4ba7      	ldr	r3, [pc, #668]	@ (8005814 <SystemGetsSignal+0x6b8>)
 8005576:	4aa8      	ldr	r2, [pc, #672]	@ (8005818 <SystemGetsSignal+0x6bc>)
 8005578:	49a8      	ldr	r1, [pc, #672]	@ (800581c <SystemGetsSignal+0x6c0>)
 800557a:	48a9      	ldr	r0, [pc, #676]	@ (8005820 <SystemGetsSignal+0x6c4>)
 800557c:	f002 fafe 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005580:	2064      	movs	r0, #100	@ 0x64
 8005582:	f003 fa97 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005586:	2307      	movs	r3, #7
 8005588:	9301      	str	r3, [sp, #4]
 800558a:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	4ba4      	ldr	r3, [pc, #656]	@ (8005824 <SystemGetsSignal+0x6c8>)
 8005592:	4aa1      	ldr	r2, [pc, #644]	@ (8005818 <SystemGetsSignal+0x6bc>)
 8005594:	49a4      	ldr	r1, [pc, #656]	@ (8005828 <SystemGetsSignal+0x6cc>)
 8005596:	48a2      	ldr	r0, [pc, #648]	@ (8005820 <SystemGetsSignal+0x6c4>)
 8005598:	f002 faf0 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 800559c:	2064      	movs	r0, #100	@ 0x64
 800559e:	f003 fa89 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 80055a2:	2307      	movs	r3, #7
 80055a4:	9301      	str	r3, [sp, #4]
 80055a6:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80055b0:	4a99      	ldr	r2, [pc, #612]	@ (8005818 <SystemGetsSignal+0x6bc>)
 80055b2:	499e      	ldr	r1, [pc, #632]	@ (800582c <SystemGetsSignal+0x6d0>)
 80055b4:	489e      	ldr	r0, [pc, #632]	@ (8005830 <SystemGetsSignal+0x6d4>)
 80055b6:	f002 fae1 	bl	8007b7c <OLED_DoTweenObject>

                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80055ba:	2318      	movs	r3, #24
 80055bc:	9301      	str	r3, [sp, #4]
 80055be:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80055c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80055cc:	4999      	ldr	r1, [pc, #612]	@ (8005834 <SystemGetsSignal+0x6d8>)
 80055ce:	489a      	ldr	r0, [pc, #616]	@ (8005838 <SystemGetsSignal+0x6dc>)
 80055d0:	f002 fad4 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 80055d4:	2064      	movs	r0, #100	@ 0x64
 80055d6:	f003 fa6d 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80055da:	2318      	movs	r3, #24
 80055dc:	9301      	str	r3, [sp, #4]
 80055de:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	4b95      	ldr	r3, [pc, #596]	@ (800583c <SystemGetsSignal+0x6e0>)
 80055e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80055ea:	4995      	ldr	r1, [pc, #596]	@ (8005840 <SystemGetsSignal+0x6e4>)
 80055ec:	4892      	ldr	r0, [pc, #584]	@ (8005838 <SystemGetsSignal+0x6dc>)
 80055ee:	f002 fac5 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 80055f2:	2064      	movs	r0, #100	@ 0x64
 80055f4:	f003 fa5e 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80055f8:	2318      	movs	r3, #24
 80055fa:	9301      	str	r3, [sp, #4]
 80055fc:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	4b90      	ldr	r3, [pc, #576]	@ (8005844 <SystemGetsSignal+0x6e8>)
 8005604:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005608:	498f      	ldr	r1, [pc, #572]	@ (8005848 <SystemGetsSignal+0x6ec>)
 800560a:	488b      	ldr	r0, [pc, #556]	@ (8005838 <SystemGetsSignal+0x6dc>)
 800560c:	f002 fab6 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005610:	2064      	movs	r0, #100	@ 0x64
 8005612:	f003 fa4f 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005616:	2318      	movs	r3, #24
 8005618:	9301      	str	r3, [sp, #4]
 800561a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	4b8a      	ldr	r3, [pc, #552]	@ (800584c <SystemGetsSignal+0x6f0>)
 8005622:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005626:	498a      	ldr	r1, [pc, #552]	@ (8005850 <SystemGetsSignal+0x6f4>)
 8005628:	4883      	ldr	r0, [pc, #524]	@ (8005838 <SystemGetsSignal+0x6dc>)
 800562a:	f002 faa7 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 800562e:	2064      	movs	r0, #100	@ 0x64
 8005630:	f003 fa40 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005634:	2318      	movs	r3, #24
 8005636:	9301      	str	r3, [sp, #4]
 8005638:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	4b85      	ldr	r3, [pc, #532]	@ (8005854 <SystemGetsSignal+0x6f8>)
 8005640:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005644:	4984      	ldr	r1, [pc, #528]	@ (8005858 <SystemGetsSignal+0x6fc>)
 8005646:	487c      	ldr	r0, [pc, #496]	@ (8005838 <SystemGetsSignal+0x6dc>)
 8005648:	f002 fa98 	bl	8007b7c <OLED_DoTweenObject>
                resetAnimation = true;
 800564c:	4b83      	ldr	r3, [pc, #524]	@ (800585c <SystemGetsSignal+0x700>)
 800564e:	2201      	movs	r2, #1
 8005650:	701a      	strb	r2, [r3, #0]
 8005652:	f001 b947 	b.w	80068e4 <SystemGetsSignal+0x1788>
            }
            else if (menuRank == 2 && menuSelection == 1 && currentPage == UI_PAGE_GAMES)
 8005656:	4b6c      	ldr	r3, [pc, #432]	@ (8005808 <SystemGetsSignal+0x6ac>)
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	2b02      	cmp	r3, #2
 800565c:	d15e      	bne.n	800571c <SystemGetsSignal+0x5c0>
 800565e:	4b6b      	ldr	r3, [pc, #428]	@ (800580c <SystemGetsSignal+0x6b0>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d15a      	bne.n	800571c <SystemGetsSignal+0x5c0>
 8005666:	4b6a      	ldr	r3, [pc, #424]	@ (8005810 <SystemGetsSignal+0x6b4>)
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b05      	cmp	r3, #5
 800566c:	d156      	bne.n	800571c <SystemGetsSignal+0x5c0>
            {
                menuRank = 3;
 800566e:	4b66      	ldr	r3, [pc, #408]	@ (8005808 <SystemGetsSignal+0x6ac>)
 8005670:	2203      	movs	r2, #3
 8005672:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8005674:	4b66      	ldr	r3, [pc, #408]	@ (8005810 <SystemGetsSignal+0x6b4>)
 8005676:	2205      	movs	r2, #5
 8005678:	701a      	strb	r2, [r3, #0]
                Snake_InitGame();
 800567a:	f7fb fde5 	bl	8001248 <Snake_InitGame>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 800567e:	2318      	movs	r3, #24
 8005680:	9301      	str	r3, [sp, #4]
 8005682:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800568c:	f04f 0200 	mov.w	r2, #0
 8005690:	4973      	ldr	r1, [pc, #460]	@ (8005860 <SystemGetsSignal+0x704>)
 8005692:	4867      	ldr	r0, [pc, #412]	@ (8005830 <SystemGetsSignal+0x6d4>)
 8005694:	f002 fa72 	bl	8007b7c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", 0, 8, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8005698:	2315      	movs	r3, #21
 800569a:	9301      	str	r3, [sp, #4]
 800569c:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80056a6:	f04f 0200 	mov.w	r2, #0
 80056aa:	496e      	ldr	r1, [pc, #440]	@ (8005864 <SystemGetsSignal+0x708>)
 80056ac:	4860      	ldr	r0, [pc, #384]	@ (8005830 <SystemGetsSignal+0x6d4>)
 80056ae:	f002 fa65 	bl	8007b7c <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 80056b2:	2307      	movs	r3, #7
 80056b4:	9301      	str	r3, [sp, #4]
 80056b6:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80056c0:	4a55      	ldr	r2, [pc, #340]	@ (8005818 <SystemGetsSignal+0x6bc>)
 80056c2:	4956      	ldr	r1, [pc, #344]	@ (800581c <SystemGetsSignal+0x6c0>)
 80056c4:	4856      	ldr	r0, [pc, #344]	@ (8005820 <SystemGetsSignal+0x6c4>)
 80056c6:	f002 fa59 	bl	8007b7c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 80056ca:	2300      	movs	r3, #0
 80056cc:	9301      	str	r3, [sp, #4]
 80056ce:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	4b4f      	ldr	r3, [pc, #316]	@ (8005814 <SystemGetsSignal+0x6b8>)
 80056d6:	4a64      	ldr	r2, [pc, #400]	@ (8005868 <SystemGetsSignal+0x70c>)
 80056d8:	4964      	ldr	r1, [pc, #400]	@ (800586c <SystemGetsSignal+0x710>)
 80056da:	4865      	ldr	r0, [pc, #404]	@ (8005870 <SystemGetsSignal+0x714>)
 80056dc:	f002 fa4e 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 80056e0:	2064      	movs	r0, #100	@ 0x64
 80056e2:	f003 f9e7 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 80056e6:	2307      	movs	r3, #7
 80056e8:	9301      	str	r3, [sp, #4]
 80056ea:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	4b52      	ldr	r3, [pc, #328]	@ (800583c <SystemGetsSignal+0x6e0>)
 80056f2:	4a49      	ldr	r2, [pc, #292]	@ (8005818 <SystemGetsSignal+0x6bc>)
 80056f4:	494c      	ldr	r1, [pc, #304]	@ (8005828 <SystemGetsSignal+0x6cc>)
 80056f6:	484a      	ldr	r0, [pc, #296]	@ (8005820 <SystemGetsSignal+0x6c4>)
 80056f8:	f002 fa40 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 80056fc:	2064      	movs	r0, #100	@ 0x64
 80056fe:	f003 f9d9 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005702:	2307      	movs	r3, #7
 8005704:	9301      	str	r3, [sp, #4]
 8005706:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	4b4d      	ldr	r3, [pc, #308]	@ (8005844 <SystemGetsSignal+0x6e8>)
 800570e:	4a42      	ldr	r2, [pc, #264]	@ (8005818 <SystemGetsSignal+0x6bc>)
 8005710:	4946      	ldr	r1, [pc, #280]	@ (800582c <SystemGetsSignal+0x6d0>)
 8005712:	4847      	ldr	r0, [pc, #284]	@ (8005830 <SystemGetsSignal+0x6d4>)
 8005714:	f002 fa32 	bl	8007b7c <OLED_DoTweenObject>
 8005718:	f001 b8e4 	b.w	80068e4 <SystemGetsSignal+0x1788>
            }
            else if (menuRank == 3 && menuSelection == 1 && cancelSelection && UI_PAGE_GAMES && !gameOver && currentPage == UI_PAGE_GAMES)
 800571c:	4b3a      	ldr	r3, [pc, #232]	@ (8005808 <SystemGetsSignal+0x6ac>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b03      	cmp	r3, #3
 8005722:	f040 80b1 	bne.w	8005888 <SystemGetsSignal+0x72c>
 8005726:	4b39      	ldr	r3, [pc, #228]	@ (800580c <SystemGetsSignal+0x6b0>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b01      	cmp	r3, #1
 800572c:	f040 80ac 	bne.w	8005888 <SystemGetsSignal+0x72c>
 8005730:	4b50      	ldr	r3, [pc, #320]	@ (8005874 <SystemGetsSignal+0x718>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 80a7 	beq.w	8005888 <SystemGetsSignal+0x72c>
 800573a:	4b4f      	ldr	r3, [pc, #316]	@ (8005878 <SystemGetsSignal+0x71c>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	f083 0301 	eor.w	r3, r3, #1
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 809f 	beq.w	8005888 <SystemGetsSignal+0x72c>
 800574a:	4b31      	ldr	r3, [pc, #196]	@ (8005810 <SystemGetsSignal+0x6b4>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b05      	cmp	r3, #5
 8005750:	f040 809a 	bne.w	8005888 <SystemGetsSignal+0x72c>
            {
                menuRank = 2;
 8005754:	4b2c      	ldr	r3, [pc, #176]	@ (8005808 <SystemGetsSignal+0x6ac>)
 8005756:	2202      	movs	r2, #2
 8005758:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 800575a:	4b2d      	ldr	r3, [pc, #180]	@ (8005810 <SystemGetsSignal+0x6b4>)
 800575c:	2205      	movs	r2, #5
 800575e:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8005760:	2304      	movs	r3, #4
 8005762:	9301      	str	r3, [sp, #4]
 8005764:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	f04f 0300 	mov.w	r3, #0
 800576e:	4a3e      	ldr	r2, [pc, #248]	@ (8005868 <SystemGetsSignal+0x70c>)
 8005770:	493e      	ldr	r1, [pc, #248]	@ (800586c <SystemGetsSignal+0x710>)
 8005772:	483f      	ldr	r0, [pc, #252]	@ (8005870 <SystemGetsSignal+0x714>)
 8005774:	f002 fa02 	bl	8007b7c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Greedy Snake") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 8005778:	2318      	movs	r3, #24
 800577a:	9301      	str	r3, [sp, #4]
 800577c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8005786:	4a3d      	ldr	r2, [pc, #244]	@ (800587c <SystemGetsSignal+0x720>)
 8005788:	4935      	ldr	r1, [pc, #212]	@ (8005860 <SystemGetsSignal+0x704>)
 800578a:	4829      	ldr	r0, [pc, #164]	@ (8005830 <SystemGetsSignal+0x6d4>)
 800578c:	f002 f9f6 	bl	8007b7c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Snake") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8005790:	2315      	movs	r3, #21
 8005792:	9301      	str	r3, [sp, #4]
 8005794:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	4b39      	ldr	r3, [pc, #228]	@ (8005880 <SystemGetsSignal+0x724>)
 800579c:	4a39      	ldr	r2, [pc, #228]	@ (8005884 <SystemGetsSignal+0x728>)
 800579e:	4931      	ldr	r1, [pc, #196]	@ (8005864 <SystemGetsSignal+0x708>)
 80057a0:	4823      	ldr	r0, [pc, #140]	@ (8005830 <SystemGetsSignal+0x6d4>)
 80057a2:	f002 f9eb 	bl	8007b7c <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80057a6:	2318      	movs	r3, #24
 80057a8:	9301      	str	r3, [sp, #4]
 80057aa:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80057b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80057b8:	4918      	ldr	r1, [pc, #96]	@ (800581c <SystemGetsSignal+0x6c0>)
 80057ba:	4819      	ldr	r0, [pc, #100]	@ (8005820 <SystemGetsSignal+0x6c4>)
 80057bc:	f002 f9de 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 80057c0:	2064      	movs	r0, #100	@ 0x64
 80057c2:	f003 f977 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80057c6:	2318      	movs	r3, #24
 80057c8:	9301      	str	r3, [sp, #4]
 80057ca:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	4b1a      	ldr	r3, [pc, #104]	@ (800583c <SystemGetsSignal+0x6e0>)
 80057d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80057d6:	4914      	ldr	r1, [pc, #80]	@ (8005828 <SystemGetsSignal+0x6cc>)
 80057d8:	4811      	ldr	r0, [pc, #68]	@ (8005820 <SystemGetsSignal+0x6c4>)
 80057da:	f002 f9cf 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 80057de:	2064      	movs	r0, #100	@ 0x64
 80057e0:	f003 f968 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80057e4:	2318      	movs	r3, #24
 80057e6:	9301      	str	r3, [sp, #4]
 80057e8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	4b15      	ldr	r3, [pc, #84]	@ (8005844 <SystemGetsSignal+0x6e8>)
 80057f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80057f4:	490d      	ldr	r1, [pc, #52]	@ (800582c <SystemGetsSignal+0x6d0>)
 80057f6:	480e      	ldr	r0, [pc, #56]	@ (8005830 <SystemGetsSignal+0x6d4>)
 80057f8:	f002 f9c0 	bl	8007b7c <OLED_DoTweenObject>
                cancelSelection = false;
 80057fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005874 <SystemGetsSignal+0x718>)
 80057fe:	2200      	movs	r2, #0
 8005800:	701a      	strb	r2, [r3, #0]
 8005802:	f001 b86f 	b.w	80068e4 <SystemGetsSignal+0x1788>
 8005806:	bf00      	nop
 8005808:	20000001 	.word	0x20000001
 800580c:	20000002 	.word	0x20000002
 8005810:	20000bfc 	.word	0x20000bfc
 8005814:	c1200000 	.word	0xc1200000
 8005818:	c2b40000 	.word	0xc2b40000
 800581c:	0800dd40 	.word	0x0800dd40
 8005820:	20001608 	.word	0x20001608
 8005824:	40400000 	.word	0x40400000
 8005828:	0800dd48 	.word	0x0800dd48
 800582c:	0800dd50 	.word	0x0800dd50
 8005830:	200039c0 	.word	0x200039c0
 8005834:	0800dddc 	.word	0x0800dddc
 8005838:	20001014 	.word	0x20001014
 800583c:	41e80000 	.word	0x41e80000
 8005840:	0800dde8 	.word	0x0800dde8
 8005844:	42280000 	.word	0x42280000
 8005848:	0800ddf4 	.word	0x0800ddf4
 800584c:	425c0000 	.word	0x425c0000
 8005850:	0800de04 	.word	0x0800de04
 8005854:	42880000 	.word	0x42880000
 8005858:	0800de14 	.word	0x0800de14
 800585c:	20000bff 	.word	0x20000bff
 8005860:	0800ddb8 	.word	0x0800ddb8
 8005864:	0800ddd0 	.word	0x0800ddd0
 8005868:	42600000 	.word	0x42600000
 800586c:	0800dcdc 	.word	0x0800dcdc
 8005870:	200033cc 	.word	0x200033cc
 8005874:	20000bfe 	.word	0x20000bfe
 8005878:	2000023a 	.word	0x2000023a
 800587c:	42960000 	.word	0x42960000
 8005880:	41200000 	.word	0x41200000
 8005884:	42040000 	.word	0x42040000
            }
            else if (menuRank == 2 && menuSelection == 2 && currentPage == UI_PAGE_GAMES)
 8005888:	4b68      	ldr	r3, [pc, #416]	@ (8005a2c <SystemGetsSignal+0x8d0>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b02      	cmp	r3, #2
 800588e:	d158      	bne.n	8005942 <SystemGetsSignal+0x7e6>
 8005890:	4b67      	ldr	r3, [pc, #412]	@ (8005a30 <SystemGetsSignal+0x8d4>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b02      	cmp	r3, #2
 8005896:	d154      	bne.n	8005942 <SystemGetsSignal+0x7e6>
 8005898:	4b66      	ldr	r3, [pc, #408]	@ (8005a34 <SystemGetsSignal+0x8d8>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b05      	cmp	r3, #5
 800589e:	d150      	bne.n	8005942 <SystemGetsSignal+0x7e6>
            {
                menuRank = 3;
 80058a0:	4b62      	ldr	r3, [pc, #392]	@ (8005a2c <SystemGetsSignal+0x8d0>)
 80058a2:	2203      	movs	r2, #3
 80058a4:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 80058a6:	4b63      	ldr	r3, [pc, #396]	@ (8005a34 <SystemGetsSignal+0x8d8>)
 80058a8:	2205      	movs	r2, #5
 80058aa:	701a      	strb	r2, [r3, #0]
                Game2048_Init();
 80058ac:	f7fb ffc4 	bl	8001838 <Game2048_Init>
                OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 80058b0:	2300      	movs	r3, #0
 80058b2:	9301      	str	r3, [sp, #4]
 80058b4:	2301      	movs	r3, #1
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	4b5f      	ldr	r3, [pc, #380]	@ (8005a38 <SystemGetsSignal+0x8dc>)
 80058ba:	4a60      	ldr	r2, [pc, #384]	@ (8005a3c <SystemGetsSignal+0x8e0>)
 80058bc:	4960      	ldr	r1, [pc, #384]	@ (8005a40 <SystemGetsSignal+0x8e4>)
 80058be:	4861      	ldr	r0, [pc, #388]	@ (8005a44 <SystemGetsSignal+0x8e8>)
 80058c0:	f002 f95c 	bl	8007b7c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, 1, TITLE_BG_TWEEN_STYLE);
 80058c4:	2318      	movs	r3, #24
 80058c6:	9301      	str	r3, [sp, #4]
 80058c8:	2301      	movs	r3, #1
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80058d0:	f04f 0200 	mov.w	r2, #0
 80058d4:	495c      	ldr	r1, [pc, #368]	@ (8005a48 <SystemGetsSignal+0x8ec>)
 80058d6:	485d      	ldr	r0, [pc, #372]	@ (8005a4c <SystemGetsSignal+0x8f0>)
 80058d8:	f002 f950 	bl	8007b7c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", 0, 8, 1, CURSORBG_TWEEN_STYLE);
 80058dc:	2315      	movs	r3, #21
 80058de:	9301      	str	r3, [sp, #4]
 80058e0:	2301      	movs	r3, #1
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80058e8:	f04f 0200 	mov.w	r2, #0
 80058ec:	4958      	ldr	r1, [pc, #352]	@ (8005a50 <SystemGetsSignal+0x8f4>)
 80058ee:	4857      	ldr	r0, [pc, #348]	@ (8005a4c <SystemGetsSignal+0x8f0>)
 80058f0:	f002 f944 	bl	8007b7c <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, 1, BASIC_TWEEN_OUT_STYLE);
 80058f4:	2307      	movs	r3, #7
 80058f6:	9301      	str	r3, [sp, #4]
 80058f8:	2301      	movs	r3, #1
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	4b55      	ldr	r3, [pc, #340]	@ (8005a54 <SystemGetsSignal+0x8f8>)
 80058fe:	4a56      	ldr	r2, [pc, #344]	@ (8005a58 <SystemGetsSignal+0x8fc>)
 8005900:	4956      	ldr	r1, [pc, #344]	@ (8005a5c <SystemGetsSignal+0x900>)
 8005902:	4857      	ldr	r0, [pc, #348]	@ (8005a60 <SystemGetsSignal+0x904>)
 8005904:	f002 f93a 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005908:	2064      	movs	r0, #100	@ 0x64
 800590a:	f003 f8d3 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, BASIC_TWEEN_OUT_STYLE);
 800590e:	2307      	movs	r3, #7
 8005910:	9301      	str	r3, [sp, #4]
 8005912:	2301      	movs	r3, #1
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800591a:	4a4f      	ldr	r2, [pc, #316]	@ (8005a58 <SystemGetsSignal+0x8fc>)
 800591c:	4951      	ldr	r1, [pc, #324]	@ (8005a64 <SystemGetsSignal+0x908>)
 800591e:	4850      	ldr	r0, [pc, #320]	@ (8005a60 <SystemGetsSignal+0x904>)
 8005920:	f002 f92c 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005924:	2064      	movs	r0, #100	@ 0x64
 8005926:	f003 f8c5 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, BASIC_TWEEN_OUT_STYLE);
 800592a:	2307      	movs	r3, #7
 800592c:	9301      	str	r3, [sp, #4]
 800592e:	2301      	movs	r3, #1
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	4b4d      	ldr	r3, [pc, #308]	@ (8005a68 <SystemGetsSignal+0x90c>)
 8005934:	4a48      	ldr	r2, [pc, #288]	@ (8005a58 <SystemGetsSignal+0x8fc>)
 8005936:	494d      	ldr	r1, [pc, #308]	@ (8005a6c <SystemGetsSignal+0x910>)
 8005938:	4844      	ldr	r0, [pc, #272]	@ (8005a4c <SystemGetsSignal+0x8f0>)
 800593a:	f002 f91f 	bl	8007b7c <OLED_DoTweenObject>
 800593e:	f000 bfd1 	b.w	80068e4 <SystemGetsSignal+0x1788>
            }
            else if (menuRank == 3 && menuSelection == 2 && cancelSelection && UI_PAGE_GAMES && !game2048_game_over && currentPage == UI_PAGE_GAMES)
 8005942:	4b3a      	ldr	r3, [pc, #232]	@ (8005a2c <SystemGetsSignal+0x8d0>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b03      	cmp	r3, #3
 8005948:	f040 809c 	bne.w	8005a84 <SystemGetsSignal+0x928>
 800594c:	4b38      	ldr	r3, [pc, #224]	@ (8005a30 <SystemGetsSignal+0x8d4>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b02      	cmp	r3, #2
 8005952:	f040 8097 	bne.w	8005a84 <SystemGetsSignal+0x928>
 8005956:	4b46      	ldr	r3, [pc, #280]	@ (8005a70 <SystemGetsSignal+0x914>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 8092 	beq.w	8005a84 <SystemGetsSignal+0x928>
 8005960:	4b44      	ldr	r3, [pc, #272]	@ (8005a74 <SystemGetsSignal+0x918>)
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	f083 0301 	eor.w	r3, r3, #1
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 808a 	beq.w	8005a84 <SystemGetsSignal+0x928>
 8005970:	4b30      	ldr	r3, [pc, #192]	@ (8005a34 <SystemGetsSignal+0x8d8>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b05      	cmp	r3, #5
 8005976:	f040 8085 	bne.w	8005a84 <SystemGetsSignal+0x928>
            {
                menuRank = 2;
 800597a:	4b2c      	ldr	r3, [pc, #176]	@ (8005a2c <SystemGetsSignal+0x8d0>)
 800597c:	2202      	movs	r2, #2
 800597e:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8005980:	4b2c      	ldr	r3, [pc, #176]	@ (8005a34 <SystemGetsSignal+0x8d8>)
 8005982:	2205      	movs	r2, #5
 8005984:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8005986:	2304      	movs	r3, #4
 8005988:	9301      	str	r3, [sp, #4]
 800598a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	f04f 0300 	mov.w	r3, #0
 8005994:	4a29      	ldr	r2, [pc, #164]	@ (8005a3c <SystemGetsSignal+0x8e0>)
 8005996:	492a      	ldr	r1, [pc, #168]	@ (8005a40 <SystemGetsSignal+0x8e4>)
 8005998:	482a      	ldr	r0, [pc, #168]	@ (8005a44 <SystemGetsSignal+0x8e8>)
 800599a:	f002 f8ef 	bl	8007b7c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Here is 2048!") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 800599e:	2318      	movs	r3, #24
 80059a0:	9301      	str	r3, [sp, #4]
 80059a2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80059ac:	4a32      	ldr	r2, [pc, #200]	@ (8005a78 <SystemGetsSignal+0x91c>)
 80059ae:	4926      	ldr	r1, [pc, #152]	@ (8005a48 <SystemGetsSignal+0x8ec>)
 80059b0:	4826      	ldr	r0, [pc, #152]	@ (8005a4c <SystemGetsSignal+0x8f0>)
 80059b2:	f002 f8e3 	bl	8007b7c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("2048") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 80059b6:	2315      	movs	r3, #21
 80059b8:	9301      	str	r3, [sp, #4]
 80059ba:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	4b2e      	ldr	r3, [pc, #184]	@ (8005a7c <SystemGetsSignal+0x920>)
 80059c2:	4a2f      	ldr	r2, [pc, #188]	@ (8005a80 <SystemGetsSignal+0x924>)
 80059c4:	4922      	ldr	r1, [pc, #136]	@ (8005a50 <SystemGetsSignal+0x8f4>)
 80059c6:	4821      	ldr	r0, [pc, #132]	@ (8005a4c <SystemGetsSignal+0x8f0>)
 80059c8:	f002 f8d8 	bl	8007b7c <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80059cc:	2318      	movs	r3, #24
 80059ce:	9301      	str	r3, [sp, #4]
 80059d0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	4b1f      	ldr	r3, [pc, #124]	@ (8005a54 <SystemGetsSignal+0x8f8>)
 80059d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80059dc:	491f      	ldr	r1, [pc, #124]	@ (8005a5c <SystemGetsSignal+0x900>)
 80059de:	4820      	ldr	r0, [pc, #128]	@ (8005a60 <SystemGetsSignal+0x904>)
 80059e0:	f002 f8cc 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 80059e4:	2064      	movs	r0, #100	@ 0x64
 80059e6:	f003 f865 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80059ea:	2318      	movs	r3, #24
 80059ec:	9301      	str	r3, [sp, #4]
 80059ee:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80059f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80059fc:	4919      	ldr	r1, [pc, #100]	@ (8005a64 <SystemGetsSignal+0x908>)
 80059fe:	4818      	ldr	r0, [pc, #96]	@ (8005a60 <SystemGetsSignal+0x904>)
 8005a00:	f002 f8bc 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005a04:	2064      	movs	r0, #100	@ 0x64
 8005a06:	f003 f855 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005a0a:	2318      	movs	r3, #24
 8005a0c:	9301      	str	r3, [sp, #4]
 8005a0e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	4b14      	ldr	r3, [pc, #80]	@ (8005a68 <SystemGetsSignal+0x90c>)
 8005a16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005a1a:	4914      	ldr	r1, [pc, #80]	@ (8005a6c <SystemGetsSignal+0x910>)
 8005a1c:	480b      	ldr	r0, [pc, #44]	@ (8005a4c <SystemGetsSignal+0x8f0>)
 8005a1e:	f002 f8ad 	bl	8007b7c <OLED_DoTweenObject>
                cancelSelection = false;
 8005a22:	4b13      	ldr	r3, [pc, #76]	@ (8005a70 <SystemGetsSignal+0x914>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	701a      	strb	r2, [r3, #0]
 8005a28:	f000 bf5c 	b.w	80068e4 <SystemGetsSignal+0x1788>
 8005a2c:	20000001 	.word	0x20000001
 8005a30:	20000002 	.word	0x20000002
 8005a34:	20000bfc 	.word	0x20000bfc
 8005a38:	c1200000 	.word	0xc1200000
 8005a3c:	42480000 	.word	0x42480000
 8005a40:	0800dce8 	.word	0x0800dce8
 8005a44:	200033cc 	.word	0x200033cc
 8005a48:	0800ddb8 	.word	0x0800ddb8
 8005a4c:	200039c0 	.word	0x200039c0
 8005a50:	0800ddd0 	.word	0x0800ddd0
 8005a54:	40400000 	.word	0x40400000
 8005a58:	c2b40000 	.word	0xc2b40000
 8005a5c:	0800dd40 	.word	0x0800dd40
 8005a60:	20001608 	.word	0x20001608
 8005a64:	0800dd48 	.word	0x0800dd48
 8005a68:	41e80000 	.word	0x41e80000
 8005a6c:	0800dd50 	.word	0x0800dd50
 8005a70:	20000bfe 	.word	0x20000bfe
 8005a74:	20000264 	.word	0x20000264
 8005a78:	42a20000 	.word	0x42a20000
 8005a7c:	41200000 	.word	0x41200000
 8005a80:	41d80000 	.word	0x41d80000
            }
// #pragma endregion 游戏部分
// #pragma region 关于部分
            else if (menuRank == 1 && menuSelection == 5)
 8005a84:	4bba      	ldr	r3, [pc, #744]	@ (8005d70 <SystemGetsSignal+0xc14>)
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	f040 8094 	bne.w	8005bb6 <SystemGetsSignal+0xa5a>
 8005a8e:	4bb9      	ldr	r3, [pc, #740]	@ (8005d74 <SystemGetsSignal+0xc18>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b05      	cmp	r3, #5
 8005a94:	f040 808f 	bne.w	8005bb6 <SystemGetsSignal+0xa5a>
            {
                menuRank = 2;
 8005a98:	4bb5      	ldr	r3, [pc, #724]	@ (8005d70 <SystemGetsSignal+0xc14>)
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	701a      	strb	r2, [r3, #0]
                menuSelection = 1;
 8005a9e:	4bb5      	ldr	r3, [pc, #724]	@ (8005d74 <SystemGetsSignal+0xc18>)
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_ABOUT;
 8005aa4:	4bb4      	ldr	r3, [pc, #720]	@ (8005d78 <SystemGetsSignal+0xc1c>)
 8005aa6:	2203      	movs	r2, #3
 8005aa8:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -3, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005aaa:	2307      	movs	r3, #7
 8005aac:	9301      	str	r3, [sp, #4]
 8005aae:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	4bb1      	ldr	r3, [pc, #708]	@ (8005d7c <SystemGetsSignal+0xc20>)
 8005ab6:	4ab2      	ldr	r2, [pc, #712]	@ (8005d80 <SystemGetsSignal+0xc24>)
 8005ab8:	49b2      	ldr	r1, [pc, #712]	@ (8005d84 <SystemGetsSignal+0xc28>)
 8005aba:	48b3      	ldr	r0, [pc, #716]	@ (8005d88 <SystemGetsSignal+0xc2c>)
 8005abc:	f002 f85e 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005ac0:	2064      	movs	r0, #100	@ 0x64
 8005ac2:	f002 fff7 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -2, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005ac6:	2307      	movs	r3, #7
 8005ac8:	9301      	str	r3, [sp, #4]
 8005aca:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	4bae      	ldr	r3, [pc, #696]	@ (8005d8c <SystemGetsSignal+0xc30>)
 8005ad2:	4aab      	ldr	r2, [pc, #684]	@ (8005d80 <SystemGetsSignal+0xc24>)
 8005ad4:	49ae      	ldr	r1, [pc, #696]	@ (8005d90 <SystemGetsSignal+0xc34>)
 8005ad6:	48ac      	ldr	r0, [pc, #688]	@ (8005d88 <SystemGetsSignal+0xc2c>)
 8005ad8:	f002 f850 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005adc:	2064      	movs	r0, #100	@ 0x64
 8005ade:	f002 ffe9 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005ae2:	2307      	movs	r3, #7
 8005ae4:	9301      	str	r3, [sp, #4]
 8005ae6:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	4ba9      	ldr	r3, [pc, #676]	@ (8005d94 <SystemGetsSignal+0xc38>)
 8005aee:	4aa4      	ldr	r2, [pc, #656]	@ (8005d80 <SystemGetsSignal+0xc24>)
 8005af0:	49a9      	ldr	r1, [pc, #676]	@ (8005d98 <SystemGetsSignal+0xc3c>)
 8005af2:	48a5      	ldr	r0, [pc, #660]	@ (8005d88 <SystemGetsSignal+0xc2c>)
 8005af4:	f002 f842 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005af8:	2064      	movs	r0, #100	@ 0x64
 8005afa:	f002 ffdb 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005afe:	2307      	movs	r3, #7
 8005b00:	9301      	str	r3, [sp, #4]
 8005b02:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	4ba4      	ldr	r3, [pc, #656]	@ (8005d9c <SystemGetsSignal+0xc40>)
 8005b0a:	4a9d      	ldr	r2, [pc, #628]	@ (8005d80 <SystemGetsSignal+0xc24>)
 8005b0c:	49a4      	ldr	r1, [pc, #656]	@ (8005da0 <SystemGetsSignal+0xc44>)
 8005b0e:	489e      	ldr	r0, [pc, #632]	@ (8005d88 <SystemGetsSignal+0xc2c>)
 8005b10:	f002 f834 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005b14:	2064      	movs	r0, #100	@ 0x64
 8005b16:	f002 ffcd 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005b1a:	2307      	movs	r3, #7
 8005b1c:	9301      	str	r3, [sp, #4]
 8005b1e:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005b28:	4a95      	ldr	r2, [pc, #596]	@ (8005d80 <SystemGetsSignal+0xc24>)
 8005b2a:	499e      	ldr	r1, [pc, #632]	@ (8005da4 <SystemGetsSignal+0xc48>)
 8005b2c:	4896      	ldr	r0, [pc, #600]	@ (8005d88 <SystemGetsSignal+0xc2c>)
 8005b2e:	f002 f825 	bl	8007b7c <OLED_DoTweenObject>

                OLED_DoTweenObject(&About_AnimationManager, "Developer", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005b32:	2318      	movs	r3, #24
 8005b34:	9301      	str	r3, [sp, #4]
 8005b36:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005b40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005b44:	4998      	ldr	r1, [pc, #608]	@ (8005da8 <SystemGetsSignal+0xc4c>)
 8005b46:	4899      	ldr	r0, [pc, #612]	@ (8005dac <SystemGetsSignal+0xc50>)
 8005b48:	f002 f818 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005b4c:	2064      	movs	r0, #100	@ 0x64
 8005b4e:	f002 ffb1 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&About_AnimationManager, "Github", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005b52:	2318      	movs	r3, #24
 8005b54:	9301      	str	r3, [sp, #4]
 8005b56:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	4b94      	ldr	r3, [pc, #592]	@ (8005db0 <SystemGetsSignal+0xc54>)
 8005b5e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005b62:	4994      	ldr	r1, [pc, #592]	@ (8005db4 <SystemGetsSignal+0xc58>)
 8005b64:	4891      	ldr	r0, [pc, #580]	@ (8005dac <SystemGetsSignal+0xc50>)
 8005b66:	f002 f809 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005b6a:	2064      	movs	r0, #100	@ 0x64
 8005b6c:	f002 ffa2 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&About_AnimationManager, "Donate", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005b70:	2318      	movs	r3, #24
 8005b72:	9301      	str	r3, [sp, #4]
 8005b74:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	4b8f      	ldr	r3, [pc, #572]	@ (8005db8 <SystemGetsSignal+0xc5c>)
 8005b7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005b80:	498e      	ldr	r1, [pc, #568]	@ (8005dbc <SystemGetsSignal+0xc60>)
 8005b82:	488a      	ldr	r0, [pc, #552]	@ (8005dac <SystemGetsSignal+0xc50>)
 8005b84:	f001 fffa 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005b88:	2064      	movs	r0, #100	@ 0x64
 8005b8a:	f002 ff93 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObjectY(&g_AnimationManager, "BackButton", OLED_UI_START_Y + OLED_UI_GAP_Y * 4, 1, BASIC_TWEEN_IN_STYLE);
 8005b8e:	2318      	movs	r3, #24
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	2301      	movs	r3, #1
 8005b94:	4a8a      	ldr	r2, [pc, #552]	@ (8005dc0 <SystemGetsSignal+0xc64>)
 8005b96:	498b      	ldr	r1, [pc, #556]	@ (8005dc4 <SystemGetsSignal+0xc68>)
 8005b98:	488b      	ldr	r0, [pc, #556]	@ (8005dc8 <SystemGetsSignal+0xc6c>)
 8005b9a:	f002 f8c2 	bl	8007d22 <OLED_DoTweenObjectY>
                OLED_DoTweenObjectX(&g_AnimationManager, "BackButton", OLED_UI_END_X, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005b9e:	2318      	movs	r3, #24
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005ba6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005baa:	4986      	ldr	r1, [pc, #536]	@ (8005dc4 <SystemGetsSignal+0xc68>)
 8005bac:	4886      	ldr	r0, [pc, #536]	@ (8005dc8 <SystemGetsSignal+0xc6c>)
 8005bae:	f002 f883 	bl	8007cb8 <OLED_DoTweenObjectX>
 8005bb2:	f000 be97 	b.w	80068e4 <SystemGetsSignal+0x1788>
            }
            else if (menuRank == 2 && menuSelection == 4 && currentPage == UI_PAGE_ABOUT)
 8005bb6:	4b6e      	ldr	r3, [pc, #440]	@ (8005d70 <SystemGetsSignal+0xc14>)
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	f040 8108 	bne.w	8005dd0 <SystemGetsSignal+0xc74>
 8005bc0:	4b6c      	ldr	r3, [pc, #432]	@ (8005d74 <SystemGetsSignal+0xc18>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	f040 8103 	bne.w	8005dd0 <SystemGetsSignal+0xc74>
 8005bca:	4b6b      	ldr	r3, [pc, #428]	@ (8005d78 <SystemGetsSignal+0xc1c>)
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	f040 80fe 	bne.w	8005dd0 <SystemGetsSignal+0xc74>
            {
                menuRank = 1;
 8005bd4:	4b66      	ldr	r3, [pc, #408]	@ (8005d70 <SystemGetsSignal+0xc14>)
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	701a      	strb	r2, [r3, #0]
                menuSelection = 5;
 8005bda:	4b66      	ldr	r3, [pc, #408]	@ (8005d74 <SystemGetsSignal+0xc18>)
 8005bdc:	2205      	movs	r2, #5
 8005bde:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_MENU;
 8005be0:	4b65      	ldr	r3, [pc, #404]	@ (8005d78 <SystemGetsSignal+0xc1c>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&About_AnimationManager, "Developer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -2, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005be6:	2307      	movs	r3, #7
 8005be8:	9301      	str	r3, [sp, #4]
 8005bea:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	4b66      	ldr	r3, [pc, #408]	@ (8005d8c <SystemGetsSignal+0xc30>)
 8005bf2:	4a63      	ldr	r2, [pc, #396]	@ (8005d80 <SystemGetsSignal+0xc24>)
 8005bf4:	496c      	ldr	r1, [pc, #432]	@ (8005da8 <SystemGetsSignal+0xc4c>)
 8005bf6:	486d      	ldr	r0, [pc, #436]	@ (8005dac <SystemGetsSignal+0xc50>)
 8005bf8:	f001 ffc0 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005bfc:	2064      	movs	r0, #100	@ 0x64
 8005bfe:	f002 ff59 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&About_AnimationManager, "Github", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005c02:	2307      	movs	r3, #7
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	4b61      	ldr	r3, [pc, #388]	@ (8005d94 <SystemGetsSignal+0xc38>)
 8005c0e:	4a5c      	ldr	r2, [pc, #368]	@ (8005d80 <SystemGetsSignal+0xc24>)
 8005c10:	4968      	ldr	r1, [pc, #416]	@ (8005db4 <SystemGetsSignal+0xc58>)
 8005c12:	4866      	ldr	r0, [pc, #408]	@ (8005dac <SystemGetsSignal+0xc50>)
 8005c14:	f001 ffb2 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005c18:	2064      	movs	r0, #100	@ 0x64
 8005c1a:	f002 ff4b 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&About_AnimationManager, "Donate", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005c1e:	2307      	movs	r3, #7
 8005c20:	9301      	str	r3, [sp, #4]
 8005c22:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	4b5c      	ldr	r3, [pc, #368]	@ (8005d9c <SystemGetsSignal+0xc40>)
 8005c2a:	4a55      	ldr	r2, [pc, #340]	@ (8005d80 <SystemGetsSignal+0xc24>)
 8005c2c:	4963      	ldr	r1, [pc, #396]	@ (8005dbc <SystemGetsSignal+0xc60>)
 8005c2e:	485f      	ldr	r0, [pc, #380]	@ (8005dac <SystemGetsSignal+0xc50>)
 8005c30:	f001 ffa4 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005c34:	2064      	movs	r0, #100	@ 0x64
 8005c36:	f002 ff3d 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005c3a:	2307      	movs	r3, #7
 8005c3c:	9301      	str	r3, [sp, #4]
 8005c3e:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005c48:	4a4d      	ldr	r2, [pc, #308]	@ (8005d80 <SystemGetsSignal+0xc24>)
 8005c4a:	495e      	ldr	r1, [pc, #376]	@ (8005dc4 <SystemGetsSignal+0xc68>)
 8005c4c:	485e      	ldr	r0, [pc, #376]	@ (8005dc8 <SystemGetsSignal+0xc6c>)
 8005c4e:	f001 ff95 	bl	8007b7c <OLED_DoTweenObject>

                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005c52:	4b48      	ldr	r3, [pc, #288]	@ (8005d74 <SystemGetsSignal+0xc18>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	f1c3 0202 	rsb	r2, r3, #2
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	4413      	add	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	3303      	adds	r3, #3
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fa fb3c 	bl	80002e4 <__aeabi_i2f>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2218      	movs	r2, #24
 8005c70:	9201      	str	r2, [sp, #4]
 8005c72:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8005c76:	9200      	str	r2, [sp, #0]
 8005c78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005c7c:	4941      	ldr	r1, [pc, #260]	@ (8005d84 <SystemGetsSignal+0xc28>)
 8005c7e:	4842      	ldr	r0, [pc, #264]	@ (8005d88 <SystemGetsSignal+0xc2c>)
 8005c80:	f001 ff7c 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005c84:	2064      	movs	r0, #100	@ 0x64
 8005c86:	f002 ff15 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005c8a:	4b3a      	ldr	r3, [pc, #232]	@ (8005d74 <SystemGetsSignal+0xc18>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	f1c3 0203 	rsb	r2, r3, #3
 8005c92:	4613      	mov	r3, r2
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	3303      	adds	r3, #3
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fa fb20 	bl	80002e4 <__aeabi_i2f>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2218      	movs	r2, #24
 8005ca8:	9201      	str	r2, [sp, #4]
 8005caa:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8005cae:	9200      	str	r2, [sp, #0]
 8005cb0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005cb4:	4936      	ldr	r1, [pc, #216]	@ (8005d90 <SystemGetsSignal+0xc34>)
 8005cb6:	4834      	ldr	r0, [pc, #208]	@ (8005d88 <SystemGetsSignal+0xc2c>)
 8005cb8:	f001 ff60 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005cbc:	2064      	movs	r0, #100	@ 0x64
 8005cbe:	f002 fef9 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8005d74 <SystemGetsSignal+0xc18>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	f1c3 0204 	rsb	r2, r3, #4
 8005cca:	4613      	mov	r3, r2
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	4413      	add	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	3303      	adds	r3, #3
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fa fb04 	bl	80002e4 <__aeabi_i2f>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2218      	movs	r2, #24
 8005ce0:	9201      	str	r2, [sp, #4]
 8005ce2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8005ce6:	9200      	str	r2, [sp, #0]
 8005ce8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005cec:	492a      	ldr	r1, [pc, #168]	@ (8005d98 <SystemGetsSignal+0xc3c>)
 8005cee:	4826      	ldr	r0, [pc, #152]	@ (8005d88 <SystemGetsSignal+0xc2c>)
 8005cf0:	f001 ff44 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005cf4:	2064      	movs	r0, #100	@ 0x64
 8005cf6:	f002 fedd 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8005d74 <SystemGetsSignal+0xc18>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	f1c3 0205 	rsb	r2, r3, #5
 8005d02:	4613      	mov	r3, r2
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	4413      	add	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	3303      	adds	r3, #3
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fa fae8 	bl	80002e4 <__aeabi_i2f>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2218      	movs	r2, #24
 8005d18:	9201      	str	r2, [sp, #4]
 8005d1a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8005d1e:	9200      	str	r2, [sp, #0]
 8005d20:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005d24:	491e      	ldr	r1, [pc, #120]	@ (8005da0 <SystemGetsSignal+0xc44>)
 8005d26:	4818      	ldr	r0, [pc, #96]	@ (8005d88 <SystemGetsSignal+0xc2c>)
 8005d28:	f001 ff28 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005d2c:	2064      	movs	r0, #100	@ 0x64
 8005d2e:	f002 fec1 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005d32:	4b10      	ldr	r3, [pc, #64]	@ (8005d74 <SystemGetsSignal+0xc18>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	f1c3 0206 	rsb	r2, r3, #6
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	4413      	add	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	3303      	adds	r3, #3
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fa facc 	bl	80002e4 <__aeabi_i2f>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2218      	movs	r2, #24
 8005d50:	9201      	str	r2, [sp, #4]
 8005d52:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8005d56:	9200      	str	r2, [sp, #0]
 8005d58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005d5c:	4911      	ldr	r1, [pc, #68]	@ (8005da4 <SystemGetsSignal+0xc48>)
 8005d5e:	480a      	ldr	r0, [pc, #40]	@ (8005d88 <SystemGetsSignal+0xc2c>)
 8005d60:	f001 ff0c 	bl	8007b7c <OLED_DoTweenObject>
                resetAnimation = true;
 8005d64:	4b19      	ldr	r3, [pc, #100]	@ (8005dcc <SystemGetsSignal+0xc70>)
 8005d66:	2201      	movs	r2, #1
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	f000 bdbb 	b.w	80068e4 <SystemGetsSignal+0x1788>
 8005d6e:	bf00      	nop
 8005d70:	20000001 	.word	0x20000001
 8005d74:	20000002 	.word	0x20000002
 8005d78:	20000bfc 	.word	0x20000bfc
 8005d7c:	c2100000 	.word	0xc2100000
 8005d80:	c2b40000 	.word	0xc2b40000
 8005d84:	0800dddc 	.word	0x0800dddc
 8005d88:	20001014 	.word	0x20001014
 8005d8c:	c1b80000 	.word	0xc1b80000
 8005d90:	0800dde8 	.word	0x0800dde8
 8005d94:	c1200000 	.word	0xc1200000
 8005d98:	0800ddf4 	.word	0x0800ddf4
 8005d9c:	40400000 	.word	0x40400000
 8005da0:	0800de04 	.word	0x0800de04
 8005da4:	0800de14 	.word	0x0800de14
 8005da8:	0800dd9c 	.word	0x0800dd9c
 8005dac:	200027e4 	.word	0x200027e4
 8005db0:	41e80000 	.word	0x41e80000
 8005db4:	0800dda8 	.word	0x0800dda8
 8005db8:	42280000 	.word	0x42280000
 8005dbc:	0800ddb0 	.word	0x0800ddb0
 8005dc0:	425c0000 	.word	0x425c0000
 8005dc4:	0800dd50 	.word	0x0800dd50
 8005dc8:	200039c0 	.word	0x200039c0
 8005dcc:	20000bff 	.word	0x20000bff
            }
            else if (menuRank == 2 && menuSelection == 1 && currentPage == UI_PAGE_ABOUT)
 8005dd0:	4b7c      	ldr	r3, [pc, #496]	@ (8005fc4 <SystemGetsSignal+0xe68>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d108      	bne.n	8005dea <SystemGetsSignal+0xc8e>
 8005dd8:	4b7b      	ldr	r3, [pc, #492]	@ (8005fc8 <SystemGetsSignal+0xe6c>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d104      	bne.n	8005dea <SystemGetsSignal+0xc8e>
 8005de0:	4b7a      	ldr	r3, [pc, #488]	@ (8005fcc <SystemGetsSignal+0xe70>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	f000 857d 	beq.w	80068e4 <SystemGetsSignal+0x1788>
            {
                /* code */
            }
            else if (menuRank == 2 && menuSelection == 2 && currentPage == UI_PAGE_ABOUT)
 8005dea:	4b76      	ldr	r3, [pc, #472]	@ (8005fc4 <SystemGetsSignal+0xe68>)
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d108      	bne.n	8005e04 <SystemGetsSignal+0xca8>
 8005df2:	4b75      	ldr	r3, [pc, #468]	@ (8005fc8 <SystemGetsSignal+0xe6c>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d104      	bne.n	8005e04 <SystemGetsSignal+0xca8>
 8005dfa:	4b74      	ldr	r3, [pc, #464]	@ (8005fcc <SystemGetsSignal+0xe70>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	f000 8570 	beq.w	80068e4 <SystemGetsSignal+0x1788>
            {
                /* code */
            }
            else if (menuRank == 2 && menuSelection == 3 && currentPage == UI_PAGE_ABOUT)
 8005e04:	4b6f      	ldr	r3, [pc, #444]	@ (8005fc4 <SystemGetsSignal+0xe68>)
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d108      	bne.n	8005e1e <SystemGetsSignal+0xcc2>
 8005e0c:	4b6e      	ldr	r3, [pc, #440]	@ (8005fc8 <SystemGetsSignal+0xe6c>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	d104      	bne.n	8005e1e <SystemGetsSignal+0xcc2>
 8005e14:	4b6d      	ldr	r3, [pc, #436]	@ (8005fcc <SystemGetsSignal+0xe70>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	f000 8563 	beq.w	80068e4 <SystemGetsSignal+0x1788>
            {
                /* code */
            }
// #pragma endregion 关于部分
// #pragma region 工具部分
            else if (menuRank == 1 && menuSelection == 2)
 8005e1e:	4b69      	ldr	r3, [pc, #420]	@ (8005fc4 <SystemGetsSignal+0xe68>)
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d174      	bne.n	8005f10 <SystemGetsSignal+0xdb4>
 8005e26:	4b68      	ldr	r3, [pc, #416]	@ (8005fc8 <SystemGetsSignal+0xe6c>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d170      	bne.n	8005f10 <SystemGetsSignal+0xdb4>
            {
                menuRank = 2;
 8005e2e:	4b65      	ldr	r3, [pc, #404]	@ (8005fc4 <SystemGetsSignal+0xe68>)
 8005e30:	2202      	movs	r2, #2
 8005e32:	701a      	strb	r2, [r3, #0]
                menuSelection = 1;
 8005e34:	4b64      	ldr	r3, [pc, #400]	@ (8005fc8 <SystemGetsSignal+0xe6c>)
 8005e36:	2201      	movs	r2, #1
 8005e38:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_TOOLS;
 8005e3a:	4b64      	ldr	r3, [pc, #400]	@ (8005fcc <SystemGetsSignal+0xe70>)
 8005e3c:	2204      	movs	r2, #4
 8005e3e:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005e40:	2307      	movs	r3, #7
 8005e42:	9301      	str	r3, [sp, #4]
 8005e44:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	4b61      	ldr	r3, [pc, #388]	@ (8005fd0 <SystemGetsSignal+0xe74>)
 8005e4c:	4a61      	ldr	r2, [pc, #388]	@ (8005fd4 <SystemGetsSignal+0xe78>)
 8005e4e:	4962      	ldr	r1, [pc, #392]	@ (8005fd8 <SystemGetsSignal+0xe7c>)
 8005e50:	4862      	ldr	r0, [pc, #392]	@ (8005fdc <SystemGetsSignal+0xe80>)
 8005e52:	f001 fe93 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005e56:	2064      	movs	r0, #100	@ 0x64
 8005e58:	f002 fe2c 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005e5c:	2307      	movs	r3, #7
 8005e5e:	9301      	str	r3, [sp, #4]
 8005e60:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005e6a:	4a5a      	ldr	r2, [pc, #360]	@ (8005fd4 <SystemGetsSignal+0xe78>)
 8005e6c:	495c      	ldr	r1, [pc, #368]	@ (8005fe0 <SystemGetsSignal+0xe84>)
 8005e6e:	485b      	ldr	r0, [pc, #364]	@ (8005fdc <SystemGetsSignal+0xe80>)
 8005e70:	f001 fe84 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005e74:	2064      	movs	r0, #100	@ 0x64
 8005e76:	f002 fe1d 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005e7a:	2307      	movs	r3, #7
 8005e7c:	9301      	str	r3, [sp, #4]
 8005e7e:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	4b57      	ldr	r3, [pc, #348]	@ (8005fe4 <SystemGetsSignal+0xe88>)
 8005e86:	4a53      	ldr	r2, [pc, #332]	@ (8005fd4 <SystemGetsSignal+0xe78>)
 8005e88:	4957      	ldr	r1, [pc, #348]	@ (8005fe8 <SystemGetsSignal+0xe8c>)
 8005e8a:	4854      	ldr	r0, [pc, #336]	@ (8005fdc <SystemGetsSignal+0xe80>)
 8005e8c:	f001 fe76 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005e90:	2064      	movs	r0, #100	@ 0x64
 8005e92:	f002 fe0f 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005e96:	2307      	movs	r3, #7
 8005e98:	9301      	str	r3, [sp, #4]
 8005e9a:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	4b52      	ldr	r3, [pc, #328]	@ (8005fec <SystemGetsSignal+0xe90>)
 8005ea2:	4a4c      	ldr	r2, [pc, #304]	@ (8005fd4 <SystemGetsSignal+0xe78>)
 8005ea4:	4952      	ldr	r1, [pc, #328]	@ (8005ff0 <SystemGetsSignal+0xe94>)
 8005ea6:	484d      	ldr	r0, [pc, #308]	@ (8005fdc <SystemGetsSignal+0xe80>)
 8005ea8:	f001 fe68 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005eac:	2064      	movs	r0, #100	@ 0x64
 8005eae:	f002 fe01 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8005eb2:	2307      	movs	r3, #7
 8005eb4:	9301      	str	r3, [sp, #4]
 8005eb6:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	4b4d      	ldr	r3, [pc, #308]	@ (8005ff4 <SystemGetsSignal+0xe98>)
 8005ebe:	4a45      	ldr	r2, [pc, #276]	@ (8005fd4 <SystemGetsSignal+0xe78>)
 8005ec0:	494d      	ldr	r1, [pc, #308]	@ (8005ff8 <SystemGetsSignal+0xe9c>)
 8005ec2:	4846      	ldr	r0, [pc, #280]	@ (8005fdc <SystemGetsSignal+0xe80>)
 8005ec4:	f001 fe5a 	bl	8007b7c <OLED_DoTweenObject>

                OLED_DoTweenObject(&Tools_AnimationManager, "VideoPlayer", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005ec8:	2318      	movs	r3, #24
 8005eca:	9301      	str	r3, [sp, #4]
 8005ecc:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005ed6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005eda:	4948      	ldr	r1, [pc, #288]	@ (8005ffc <SystemGetsSignal+0xea0>)
 8005edc:	4848      	ldr	r0, [pc, #288]	@ (8006000 <SystemGetsSignal+0xea4>)
 8005ede:	f001 fe4d 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005ee2:	2064      	movs	r0, #100	@ 0x64
 8005ee4:	f002 fde6 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObjectY(&g_AnimationManager, "BackButton", OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, BASIC_TWEEN_IN_STYLE);
 8005ee8:	2318      	movs	r3, #24
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	2301      	movs	r3, #1
 8005eee:	4a3d      	ldr	r2, [pc, #244]	@ (8005fe4 <SystemGetsSignal+0xe88>)
 8005ef0:	4944      	ldr	r1, [pc, #272]	@ (8006004 <SystemGetsSignal+0xea8>)
 8005ef2:	4845      	ldr	r0, [pc, #276]	@ (8006008 <SystemGetsSignal+0xeac>)
 8005ef4:	f001 ff15 	bl	8007d22 <OLED_DoTweenObjectY>
                OLED_DoTweenObjectX(&g_AnimationManager, "BackButton", OLED_UI_END_X, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8005ef8:	2318      	movs	r3, #24
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005f00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005f04:	493f      	ldr	r1, [pc, #252]	@ (8006004 <SystemGetsSignal+0xea8>)
 8005f06:	4840      	ldr	r0, [pc, #256]	@ (8006008 <SystemGetsSignal+0xeac>)
 8005f08:	f001 fed6 	bl	8007cb8 <OLED_DoTweenObjectX>
 8005f0c:	f000 bcea 	b.w	80068e4 <SystemGetsSignal+0x1788>
            }
            else if (menuRank == 2 && menuSelection == 1 && currentPage == UI_PAGE_TOOLS)
 8005f10:	4b2c      	ldr	r3, [pc, #176]	@ (8005fc4 <SystemGetsSignal+0xe68>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	f040 8087 	bne.w	8006028 <SystemGetsSignal+0xecc>
 8005f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8005fc8 <SystemGetsSignal+0xe6c>)
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	f040 8082 	bne.w	8006028 <SystemGetsSignal+0xecc>
 8005f24:	4b29      	ldr	r3, [pc, #164]	@ (8005fcc <SystemGetsSignal+0xe70>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b04      	cmp	r3, #4
 8005f2a:	d17d      	bne.n	8006028 <SystemGetsSignal+0xecc>
            {
                menuRank = 3;
 8005f2c:	4b25      	ldr	r3, [pc, #148]	@ (8005fc4 <SystemGetsSignal+0xe68>)
 8005f2e:	2203      	movs	r2, #3
 8005f30:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_TOOLS;
 8005f32:	4b26      	ldr	r3, [pc, #152]	@ (8005fcc <SystemGetsSignal+0xe70>)
 8005f34:	2204      	movs	r2, #4
 8005f36:	701a      	strb	r2, [r3, #0]
                video_first_play = true;
 8005f38:	4b34      	ldr	r3, [pc, #208]	@ (800600c <SystemGetsSignal+0xeb0>)
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&g_Title_AnimationManager, "BAD APPLE!", (OLED_WIDTH - strlen("BAD APPLE!") * 6), OLED_TITLE_Start_Y, 1, TITLE_TWEEN_OUT_STYLE);
 8005f3e:	2300      	movs	r3, #0
 8005f40:	9301      	str	r3, [sp, #4]
 8005f42:	2301      	movs	r3, #1
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	4b32      	ldr	r3, [pc, #200]	@ (8006010 <SystemGetsSignal+0xeb4>)
 8005f48:	4a32      	ldr	r2, [pc, #200]	@ (8006014 <SystemGetsSignal+0xeb8>)
 8005f4a:	4933      	ldr	r1, [pc, #204]	@ (8006018 <SystemGetsSignal+0xebc>)
 8005f4c:	4833      	ldr	r0, [pc, #204]	@ (800601c <SystemGetsSignal+0xec0>)
 8005f4e:	f001 fe15 	bl	8007b7c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, 1, TITLE_BG_TWEEN_STYLE);
 8005f52:	2318      	movs	r3, #24
 8005f54:	9301      	str	r3, [sp, #4]
 8005f56:	2301      	movs	r3, #1
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8005f5e:	f04f 0200 	mov.w	r2, #0
 8005f62:	492f      	ldr	r1, [pc, #188]	@ (8006020 <SystemGetsSignal+0xec4>)
 8005f64:	4828      	ldr	r0, [pc, #160]	@ (8006008 <SystemGetsSignal+0xeac>)
 8005f66:	f001 fe09 	bl	8007b7c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", 0, 8, 1, CURSORBG_TWEEN_STYLE);
 8005f6a:	2315      	movs	r3, #21
 8005f6c:	9301      	str	r3, [sp, #4]
 8005f6e:	2301      	movs	r3, #1
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8005f76:	f04f 0200 	mov.w	r2, #0
 8005f7a:	492a      	ldr	r1, [pc, #168]	@ (8006024 <SystemGetsSignal+0xec8>)
 8005f7c:	4822      	ldr	r0, [pc, #136]	@ (8006008 <SystemGetsSignal+0xeac>)
 8005f7e:	f001 fdfd 	bl	8007b7c <OLED_DoTweenObject>
                OLED_DoTweenObject(&Tools_AnimationManager, "VideoPlayer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, BASIC_TWEEN_OUT_STYLE);
 8005f82:	2307      	movs	r3, #7
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	2301      	movs	r3, #1
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005f8e:	4a11      	ldr	r2, [pc, #68]	@ (8005fd4 <SystemGetsSignal+0xe78>)
 8005f90:	491a      	ldr	r1, [pc, #104]	@ (8005ffc <SystemGetsSignal+0xea0>)
 8005f92:	481b      	ldr	r0, [pc, #108]	@ (8006000 <SystemGetsSignal+0xea4>)
 8005f94:	f001 fdf2 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8005f98:	2064      	movs	r0, #100	@ 0x64
 8005f9a:	f002 fd8b 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObjectY(&g_AnimationManager, "BackButton", OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, BASIC_TWEEN_OUT_STYLE);
 8005f9e:	2307      	movs	r3, #7
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	4a0f      	ldr	r2, [pc, #60]	@ (8005fe4 <SystemGetsSignal+0xe88>)
 8005fa6:	4917      	ldr	r1, [pc, #92]	@ (8006004 <SystemGetsSignal+0xea8>)
 8005fa8:	4817      	ldr	r0, [pc, #92]	@ (8006008 <SystemGetsSignal+0xeac>)
 8005faa:	f001 feba 	bl	8007d22 <OLED_DoTweenObjectY>
                OLED_DoTweenObjectX(&g_AnimationManager, "BackButton", OLED_UI_START_X, 1, BASIC_TWEEN_OUT_STYLE);
 8005fae:	2307      	movs	r3, #7
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	4a07      	ldr	r2, [pc, #28]	@ (8005fd4 <SystemGetsSignal+0xe78>)
 8005fb6:	4913      	ldr	r1, [pc, #76]	@ (8006004 <SystemGetsSignal+0xea8>)
 8005fb8:	4813      	ldr	r0, [pc, #76]	@ (8006008 <SystemGetsSignal+0xeac>)
 8005fba:	f001 fe7d 	bl	8007cb8 <OLED_DoTweenObjectX>
 8005fbe:	f000 bc91 	b.w	80068e4 <SystemGetsSignal+0x1788>
 8005fc2:	bf00      	nop
 8005fc4:	20000001 	.word	0x20000001
 8005fc8:	20000002 	.word	0x20000002
 8005fcc:	20000bfc 	.word	0x20000bfc
 8005fd0:	40400000 	.word	0x40400000
 8005fd4:	c2b40000 	.word	0xc2b40000
 8005fd8:	0800dddc 	.word	0x0800dddc
 8005fdc:	20001014 	.word	0x20001014
 8005fe0:	0800dde8 	.word	0x0800dde8
 8005fe4:	41e80000 	.word	0x41e80000
 8005fe8:	0800ddf4 	.word	0x0800ddf4
 8005fec:	42280000 	.word	0x42280000
 8005ff0:	0800de04 	.word	0x0800de04
 8005ff4:	425c0000 	.word	0x425c0000
 8005ff8:	0800de14 	.word	0x0800de14
 8005ffc:	0800dd5c 	.word	0x0800dd5c
 8006000:	20001bfc 	.word	0x20001bfc
 8006004:	0800dd50 	.word	0x0800dd50
 8006008:	200039c0 	.word	0x200039c0
 800600c:	20004058 	.word	0x20004058
 8006010:	c1200000 	.word	0xc1200000
 8006014:	42880000 	.word	0x42880000
 8006018:	0800dd00 	.word	0x0800dd00
 800601c:	200033cc 	.word	0x200033cc
 8006020:	0800ddb8 	.word	0x0800ddb8
 8006024:	0800ddd0 	.word	0x0800ddd0
            }
            else if (menuRank == 3 && menuSelection == 1 && cancelSelection && currentPage == UI_PAGE_TOOLS)
 8006028:	4b8e      	ldr	r3, [pc, #568]	@ (8006264 <SystemGetsSignal+0x1108>)
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2b03      	cmp	r3, #3
 800602e:	d15a      	bne.n	80060e6 <SystemGetsSignal+0xf8a>
 8006030:	4b8d      	ldr	r3, [pc, #564]	@ (8006268 <SystemGetsSignal+0x110c>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d156      	bne.n	80060e6 <SystemGetsSignal+0xf8a>
 8006038:	4b8c      	ldr	r3, [pc, #560]	@ (800626c <SystemGetsSignal+0x1110>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d052      	beq.n	80060e6 <SystemGetsSignal+0xf8a>
 8006040:	4b8b      	ldr	r3, [pc, #556]	@ (8006270 <SystemGetsSignal+0x1114>)
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	2b04      	cmp	r3, #4
 8006046:	d14e      	bne.n	80060e6 <SystemGetsSignal+0xf8a>
            {
                menuRank = 2;
 8006048:	4b86      	ldr	r3, [pc, #536]	@ (8006264 <SystemGetsSignal+0x1108>)
 800604a:	2202      	movs	r2, #2
 800604c:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_TOOLS;
 800604e:	4b88      	ldr	r3, [pc, #544]	@ (8006270 <SystemGetsSignal+0x1114>)
 8006050:	2204      	movs	r2, #4
 8006052:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&g_Title_AnimationManager, "BAD APPLE!", (OLED_WIDTH - strlen("BAD APPLE!") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8006054:	2304      	movs	r3, #4
 8006056:	9301      	str	r3, [sp, #4]
 8006058:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	f04f 0300 	mov.w	r3, #0
 8006062:	4a84      	ldr	r2, [pc, #528]	@ (8006274 <SystemGetsSignal+0x1118>)
 8006064:	4984      	ldr	r1, [pc, #528]	@ (8006278 <SystemGetsSignal+0x111c>)
 8006066:	4885      	ldr	r0, [pc, #532]	@ (800627c <SystemGetsSignal+0x1120>)
 8006068:	f001 fd88 	bl	8007b7c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("BAD APPLE!") * 6 + 3, 8, TITLE_BG_TWEEN_TIME, TITLE_BG_TWEEN_STYLE);
 800606c:	2318      	movs	r3, #24
 800606e:	9301      	str	r3, [sp, #4]
 8006070:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800607a:	4a81      	ldr	r2, [pc, #516]	@ (8006280 <SystemGetsSignal+0x1124>)
 800607c:	4981      	ldr	r1, [pc, #516]	@ (8006284 <SystemGetsSignal+0x1128>)
 800607e:	4882      	ldr	r0, [pc, #520]	@ (8006288 <SystemGetsSignal+0x112c>)
 8006080:	f001 fd7c 	bl	8007b7c <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Video") * 6 + 3, 10, CURSORBG_TWEEN_TIME, CURSORBG_TWEEN_STYLE);
 8006084:	2315      	movs	r3, #21
 8006086:	9301      	str	r3, [sp, #4]
 8006088:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	4b7f      	ldr	r3, [pc, #508]	@ (800628c <SystemGetsSignal+0x1130>)
 8006090:	4a7f      	ldr	r2, [pc, #508]	@ (8006290 <SystemGetsSignal+0x1134>)
 8006092:	4980      	ldr	r1, [pc, #512]	@ (8006294 <SystemGetsSignal+0x1138>)
 8006094:	487c      	ldr	r0, [pc, #496]	@ (8006288 <SystemGetsSignal+0x112c>)
 8006096:	f001 fd71 	bl	8007b7c <OLED_DoTweenObject>
                OLED_DoTweenObject(&Tools_AnimationManager, "VideoPlayer", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 800609a:	2318      	movs	r3, #24
 800609c:	9301      	str	r3, [sp, #4]
 800609e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80060a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80060ac:	497a      	ldr	r1, [pc, #488]	@ (8006298 <SystemGetsSignal+0x113c>)
 80060ae:	487b      	ldr	r0, [pc, #492]	@ (800629c <SystemGetsSignal+0x1140>)
 80060b0:	f001 fd64 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 80060b4:	2064      	movs	r0, #100	@ 0x64
 80060b6:	f002 fcfd 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObjectY(&g_AnimationManager, "BackButton", OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, BASIC_TWEEN_IN_STYLE);
 80060ba:	2318      	movs	r3, #24
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	2301      	movs	r3, #1
 80060c0:	4a77      	ldr	r2, [pc, #476]	@ (80062a0 <SystemGetsSignal+0x1144>)
 80060c2:	4978      	ldr	r1, [pc, #480]	@ (80062a4 <SystemGetsSignal+0x1148>)
 80060c4:	4870      	ldr	r0, [pc, #448]	@ (8006288 <SystemGetsSignal+0x112c>)
 80060c6:	f001 fe2c 	bl	8007d22 <OLED_DoTweenObjectY>
                OLED_DoTweenObjectX(&g_AnimationManager, "BackButton", OLED_UI_END_X, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80060ca:	2318      	movs	r3, #24
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80060d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80060d6:	4973      	ldr	r1, [pc, #460]	@ (80062a4 <SystemGetsSignal+0x1148>)
 80060d8:	486b      	ldr	r0, [pc, #428]	@ (8006288 <SystemGetsSignal+0x112c>)
 80060da:	f001 fded 	bl	8007cb8 <OLED_DoTweenObjectX>
                cancelSelection = false;
 80060de:	4b63      	ldr	r3, [pc, #396]	@ (800626c <SystemGetsSignal+0x1110>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	e3fe      	b.n	80068e4 <SystemGetsSignal+0x1788>
            }
            else if (menuRank == 2 && menuSelection == 2 && currentPage == UI_PAGE_TOOLS)
 80060e6:	4b5f      	ldr	r3, [pc, #380]	@ (8006264 <SystemGetsSignal+0x1108>)
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	f040 80ee 	bne.w	80062cc <SystemGetsSignal+0x1170>
 80060f0:	4b5d      	ldr	r3, [pc, #372]	@ (8006268 <SystemGetsSignal+0x110c>)
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	f040 80e9 	bne.w	80062cc <SystemGetsSignal+0x1170>
 80060fa:	4b5d      	ldr	r3, [pc, #372]	@ (8006270 <SystemGetsSignal+0x1114>)
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b04      	cmp	r3, #4
 8006100:	f040 80e4 	bne.w	80062cc <SystemGetsSignal+0x1170>
            {
                menuRank = 1;
 8006104:	4b57      	ldr	r3, [pc, #348]	@ (8006264 <SystemGetsSignal+0x1108>)
 8006106:	2201      	movs	r2, #1
 8006108:	701a      	strb	r2, [r3, #0]
                menuSelection = 2;
 800610a:	4b57      	ldr	r3, [pc, #348]	@ (8006268 <SystemGetsSignal+0x110c>)
 800610c:	2202      	movs	r2, #2
 800610e:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_MENU;
 8006110:	4b57      	ldr	r3, [pc, #348]	@ (8006270 <SystemGetsSignal+0x1114>)
 8006112:	2200      	movs	r2, #0
 8006114:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Tools_AnimationManager, "VideoPlayer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006116:	2307      	movs	r3, #7
 8006118:	9301      	str	r3, [sp, #4]
 800611a:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	4b61      	ldr	r3, [pc, #388]	@ (80062a8 <SystemGetsSignal+0x114c>)
 8006122:	4a62      	ldr	r2, [pc, #392]	@ (80062ac <SystemGetsSignal+0x1150>)
 8006124:	495c      	ldr	r1, [pc, #368]	@ (8006298 <SystemGetsSignal+0x113c>)
 8006126:	485d      	ldr	r0, [pc, #372]	@ (800629c <SystemGetsSignal+0x1140>)
 8006128:	f001 fd28 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 800612c:	2064      	movs	r0, #100	@ 0x64
 800612e:	f002 fcc1 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006132:	2307      	movs	r3, #7
 8006134:	9301      	str	r3, [sp, #4]
 8006136:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8006140:	4a5a      	ldr	r2, [pc, #360]	@ (80062ac <SystemGetsSignal+0x1150>)
 8006142:	4958      	ldr	r1, [pc, #352]	@ (80062a4 <SystemGetsSignal+0x1148>)
 8006144:	4850      	ldr	r0, [pc, #320]	@ (8006288 <SystemGetsSignal+0x112c>)
 8006146:	f001 fd19 	bl	8007b7c <OLED_DoTweenObject>

                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 800614a:	4b47      	ldr	r3, [pc, #284]	@ (8006268 <SystemGetsSignal+0x110c>)
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	f1c3 0202 	rsb	r2, r3, #2
 8006152:	4613      	mov	r3, r2
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	4413      	add	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	3303      	adds	r3, #3
 800615e:	4618      	mov	r0, r3
 8006160:	f7fa f8c0 	bl	80002e4 <__aeabi_i2f>
 8006164:	4603      	mov	r3, r0
 8006166:	2218      	movs	r2, #24
 8006168:	9201      	str	r2, [sp, #4]
 800616a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800616e:	9200      	str	r2, [sp, #0]
 8006170:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006174:	494e      	ldr	r1, [pc, #312]	@ (80062b0 <SystemGetsSignal+0x1154>)
 8006176:	484f      	ldr	r0, [pc, #316]	@ (80062b4 <SystemGetsSignal+0x1158>)
 8006178:	f001 fd00 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 800617c:	2064      	movs	r0, #100	@ 0x64
 800617e:	f002 fc99 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8006182:	4b39      	ldr	r3, [pc, #228]	@ (8006268 <SystemGetsSignal+0x110c>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	f1c3 0203 	rsb	r2, r3, #3
 800618a:	4613      	mov	r3, r2
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	4413      	add	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	3303      	adds	r3, #3
 8006196:	4618      	mov	r0, r3
 8006198:	f7fa f8a4 	bl	80002e4 <__aeabi_i2f>
 800619c:	4603      	mov	r3, r0
 800619e:	2218      	movs	r2, #24
 80061a0:	9201      	str	r2, [sp, #4]
 80061a2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80061a6:	9200      	str	r2, [sp, #0]
 80061a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80061ac:	4942      	ldr	r1, [pc, #264]	@ (80062b8 <SystemGetsSignal+0x115c>)
 80061ae:	4841      	ldr	r0, [pc, #260]	@ (80062b4 <SystemGetsSignal+0x1158>)
 80061b0:	f001 fce4 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 80061b4:	2064      	movs	r0, #100	@ 0x64
 80061b6:	f002 fc7d 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80061ba:	4b2b      	ldr	r3, [pc, #172]	@ (8006268 <SystemGetsSignal+0x110c>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	f1c3 0204 	rsb	r2, r3, #4
 80061c2:	4613      	mov	r3, r2
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	4413      	add	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	3303      	adds	r3, #3
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fa f888 	bl	80002e4 <__aeabi_i2f>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2218      	movs	r2, #24
 80061d8:	9201      	str	r2, [sp, #4]
 80061da:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80061de:	9200      	str	r2, [sp, #0]
 80061e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80061e4:	4935      	ldr	r1, [pc, #212]	@ (80062bc <SystemGetsSignal+0x1160>)
 80061e6:	4833      	ldr	r0, [pc, #204]	@ (80062b4 <SystemGetsSignal+0x1158>)
 80061e8:	f001 fcc8 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 80061ec:	2064      	movs	r0, #100	@ 0x64
 80061ee:	f002 fc61 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80061f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006268 <SystemGetsSignal+0x110c>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	f1c3 0205 	rsb	r2, r3, #5
 80061fa:	4613      	mov	r3, r2
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	4413      	add	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	3303      	adds	r3, #3
 8006206:	4618      	mov	r0, r3
 8006208:	f7fa f86c 	bl	80002e4 <__aeabi_i2f>
 800620c:	4603      	mov	r3, r0
 800620e:	2218      	movs	r2, #24
 8006210:	9201      	str	r2, [sp, #4]
 8006212:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8006216:	9200      	str	r2, [sp, #0]
 8006218:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800621c:	4928      	ldr	r1, [pc, #160]	@ (80062c0 <SystemGetsSignal+0x1164>)
 800621e:	4825      	ldr	r0, [pc, #148]	@ (80062b4 <SystemGetsSignal+0x1158>)
 8006220:	f001 fcac 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8006224:	2064      	movs	r0, #100	@ 0x64
 8006226:	f002 fc45 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 800622a:	4b0f      	ldr	r3, [pc, #60]	@ (8006268 <SystemGetsSignal+0x110c>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	f1c3 0206 	rsb	r2, r3, #6
 8006232:	4613      	mov	r3, r2
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	4413      	add	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	3303      	adds	r3, #3
 800623e:	4618      	mov	r0, r3
 8006240:	f7fa f850 	bl	80002e4 <__aeabi_i2f>
 8006244:	4603      	mov	r3, r0
 8006246:	2218      	movs	r2, #24
 8006248:	9201      	str	r2, [sp, #4]
 800624a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800624e:	9200      	str	r2, [sp, #0]
 8006250:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006254:	491b      	ldr	r1, [pc, #108]	@ (80062c4 <SystemGetsSignal+0x1168>)
 8006256:	4817      	ldr	r0, [pc, #92]	@ (80062b4 <SystemGetsSignal+0x1158>)
 8006258:	f001 fc90 	bl	8007b7c <OLED_DoTweenObject>
                resetAnimation = true;
 800625c:	4b1a      	ldr	r3, [pc, #104]	@ (80062c8 <SystemGetsSignal+0x116c>)
 800625e:	2201      	movs	r2, #1
 8006260:	701a      	strb	r2, [r3, #0]
 8006262:	e33f      	b.n	80068e4 <SystemGetsSignal+0x1788>
 8006264:	20000001 	.word	0x20000001
 8006268:	20000002 	.word	0x20000002
 800626c:	20000bfe 	.word	0x20000bfe
 8006270:	20000bfc 	.word	0x20000bfc
 8006274:	42880000 	.word	0x42880000
 8006278:	0800dd00 	.word	0x0800dd00
 800627c:	200033cc 	.word	0x200033cc
 8006280:	427c0000 	.word	0x427c0000
 8006284:	0800ddb8 	.word	0x0800ddb8
 8006288:	200039c0 	.word	0x200039c0
 800628c:	41200000 	.word	0x41200000
 8006290:	42040000 	.word	0x42040000
 8006294:	0800ddd0 	.word	0x0800ddd0
 8006298:	0800dd5c 	.word	0x0800dd5c
 800629c:	20001bfc 	.word	0x20001bfc
 80062a0:	41e80000 	.word	0x41e80000
 80062a4:	0800dd50 	.word	0x0800dd50
 80062a8:	40400000 	.word	0x40400000
 80062ac:	c2b40000 	.word	0xc2b40000
 80062b0:	0800dddc 	.word	0x0800dddc
 80062b4:	20001014 	.word	0x20001014
 80062b8:	0800dde8 	.word	0x0800dde8
 80062bc:	0800ddf4 	.word	0x0800ddf4
 80062c0:	0800de04 	.word	0x0800de04
 80062c4:	0800de14 	.word	0x0800de14
 80062c8:	20000bff 	.word	0x20000bff
            }
// #pragma endregion 工具部分
// #pragma region 状态部分
            else if (menuRank == 1 && menuSelection == 3)
 80062cc:	4b7b      	ldr	r3, [pc, #492]	@ (80064bc <SystemGetsSignal+0x1360>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d15c      	bne.n	800638e <SystemGetsSignal+0x1232>
 80062d4:	4b7a      	ldr	r3, [pc, #488]	@ (80064c0 <SystemGetsSignal+0x1364>)
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	2b03      	cmp	r3, #3
 80062da:	d158      	bne.n	800638e <SystemGetsSignal+0x1232>
            {
                menuRank = 2;
 80062dc:	4b77      	ldr	r3, [pc, #476]	@ (80064bc <SystemGetsSignal+0x1360>)
 80062de:	2202      	movs	r2, #2
 80062e0:	701a      	strb	r2, [r3, #0]
                menuSelection = 3;
 80062e2:	4b77      	ldr	r3, [pc, #476]	@ (80064c0 <SystemGetsSignal+0x1364>)
 80062e4:	2203      	movs	r2, #3
 80062e6:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_STATUS;
 80062e8:	4b76      	ldr	r3, [pc, #472]	@ (80064c4 <SystemGetsSignal+0x1368>)
 80062ea:	2202      	movs	r2, #2
 80062ec:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 80062ee:	2300      	movs	r3, #0
 80062f0:	9301      	str	r3, [sp, #4]
 80062f2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	4b73      	ldr	r3, [pc, #460]	@ (80064c8 <SystemGetsSignal+0x136c>)
 80062fa:	4a74      	ldr	r2, [pc, #464]	@ (80064cc <SystemGetsSignal+0x1370>)
 80062fc:	4974      	ldr	r1, [pc, #464]	@ (80064d0 <SystemGetsSignal+0x1374>)
 80062fe:	4875      	ldr	r0, [pc, #468]	@ (80064d4 <SystemGetsSignal+0x1378>)
 8006300:	f001 fc3c 	bl	8007b7c <OLED_DoTweenObject>
                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006304:	2307      	movs	r3, #7
 8006306:	9301      	str	r3, [sp, #4]
 8006308:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	4b6e      	ldr	r3, [pc, #440]	@ (80064c8 <SystemGetsSignal+0x136c>)
 8006310:	4a71      	ldr	r2, [pc, #452]	@ (80064d8 <SystemGetsSignal+0x137c>)
 8006312:	4972      	ldr	r1, [pc, #456]	@ (80064dc <SystemGetsSignal+0x1380>)
 8006314:	4872      	ldr	r0, [pc, #456]	@ (80064e0 <SystemGetsSignal+0x1384>)
 8006316:	f001 fc31 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 800631a:	2064      	movs	r0, #100	@ 0x64
 800631c:	f002 fbca 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006320:	2307      	movs	r3, #7
 8006322:	9301      	str	r3, [sp, #4]
 8006324:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	4b6e      	ldr	r3, [pc, #440]	@ (80064e4 <SystemGetsSignal+0x1388>)
 800632c:	4a6a      	ldr	r2, [pc, #424]	@ (80064d8 <SystemGetsSignal+0x137c>)
 800632e:	496e      	ldr	r1, [pc, #440]	@ (80064e8 <SystemGetsSignal+0x138c>)
 8006330:	486b      	ldr	r0, [pc, #428]	@ (80064e0 <SystemGetsSignal+0x1384>)
 8006332:	f001 fc23 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8006336:	2064      	movs	r0, #100	@ 0x64
 8006338:	f002 fbbc 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 800633c:	2307      	movs	r3, #7
 800633e:	9301      	str	r3, [sp, #4]
 8006340:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800634a:	4a63      	ldr	r2, [pc, #396]	@ (80064d8 <SystemGetsSignal+0x137c>)
 800634c:	4967      	ldr	r1, [pc, #412]	@ (80064ec <SystemGetsSignal+0x1390>)
 800634e:	4864      	ldr	r0, [pc, #400]	@ (80064e0 <SystemGetsSignal+0x1384>)
 8006350:	f001 fc14 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8006354:	2064      	movs	r0, #100	@ 0x64
 8006356:	f002 fbad 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 800635a:	2307      	movs	r3, #7
 800635c:	9301      	str	r3, [sp, #4]
 800635e:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	4b62      	ldr	r3, [pc, #392]	@ (80064f0 <SystemGetsSignal+0x1394>)
 8006366:	4a5c      	ldr	r2, [pc, #368]	@ (80064d8 <SystemGetsSignal+0x137c>)
 8006368:	4962      	ldr	r1, [pc, #392]	@ (80064f4 <SystemGetsSignal+0x1398>)
 800636a:	485d      	ldr	r0, [pc, #372]	@ (80064e0 <SystemGetsSignal+0x1384>)
 800636c:	f001 fc06 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8006370:	2064      	movs	r0, #100	@ 0x64
 8006372:	f002 fb9f 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006376:	2307      	movs	r3, #7
 8006378:	9301      	str	r3, [sp, #4]
 800637a:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	4b5d      	ldr	r3, [pc, #372]	@ (80064f8 <SystemGetsSignal+0x139c>)
 8006382:	4a55      	ldr	r2, [pc, #340]	@ (80064d8 <SystemGetsSignal+0x137c>)
 8006384:	495d      	ldr	r1, [pc, #372]	@ (80064fc <SystemGetsSignal+0x13a0>)
 8006386:	4856      	ldr	r0, [pc, #344]	@ (80064e0 <SystemGetsSignal+0x1384>)
 8006388:	f001 fbf8 	bl	8007b7c <OLED_DoTweenObject>
 800638c:	e2aa      	b.n	80068e4 <SystemGetsSignal+0x1788>
            }
            else if (menuRank == 2 && currentPage == UI_PAGE_STATUS)
 800638e:	4b4b      	ldr	r3, [pc, #300]	@ (80064bc <SystemGetsSignal+0x1360>)
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b02      	cmp	r3, #2
 8006394:	f040 80c4 	bne.w	8006520 <SystemGetsSignal+0x13c4>
 8006398:	4b4a      	ldr	r3, [pc, #296]	@ (80064c4 <SystemGetsSignal+0x1368>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	2b02      	cmp	r3, #2
 800639e:	f040 80bf 	bne.w	8006520 <SystemGetsSignal+0x13c4>
            {
                menuRank = 1;
 80063a2:	4b46      	ldr	r3, [pc, #280]	@ (80064bc <SystemGetsSignal+0x1360>)
 80063a4:	2201      	movs	r2, #1
 80063a6:	701a      	strb	r2, [r3, #0]
                menuSelection = 3;
 80063a8:	4b45      	ldr	r3, [pc, #276]	@ (80064c0 <SystemGetsSignal+0x1364>)
 80063aa:	2203      	movs	r2, #3
 80063ac:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_MENU;
 80063ae:	4b45      	ldr	r3, [pc, #276]	@ (80064c4 <SystemGetsSignal+0x1368>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	701a      	strb	r2, [r3, #0]

                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Status") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 80063b4:	2304      	movs	r3, #4
 80063b6:	9301      	str	r3, [sp, #4]
 80063b8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	f04f 0300 	mov.w	r3, #0
 80063c2:	4a4f      	ldr	r2, [pc, #316]	@ (8006500 <SystemGetsSignal+0x13a4>)
 80063c4:	4942      	ldr	r1, [pc, #264]	@ (80064d0 <SystemGetsSignal+0x1374>)
 80063c6:	4843      	ldr	r0, [pc, #268]	@ (80064d4 <SystemGetsSignal+0x1378>)
 80063c8:	f001 fbd8 	bl	8007b7c <OLED_DoTweenObject>

                OLED_DoTweenObject(&Status_AnimationManager, "RunningTime", 0, -10, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 80063cc:	2307      	movs	r3, #7
 80063ce:	9301      	str	r3, [sp, #4]
 80063d0:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	4b3c      	ldr	r3, [pc, #240]	@ (80064c8 <SystemGetsSignal+0x136c>)
 80063d8:	f04f 0200 	mov.w	r2, #0
 80063dc:	4949      	ldr	r1, [pc, #292]	@ (8006504 <SystemGetsSignal+0x13a8>)
 80063de:	484a      	ldr	r0, [pc, #296]	@ (8006508 <SystemGetsSignal+0x13ac>)
 80063e0:	f001 fbcc 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 80063e4:	2064      	movs	r0, #100	@ 0x64
 80063e6:	f002 fb65 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Status_AnimationManager, "Status", 0, OLED_HEIGHT, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 80063ea:	2307      	movs	r3, #7
 80063ec:	9301      	str	r3, [sp, #4]
 80063ee:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 80063f8:	f04f 0200 	mov.w	r2, #0
 80063fc:	4943      	ldr	r1, [pc, #268]	@ (800650c <SystemGetsSignal+0x13b0>)
 80063fe:	4842      	ldr	r0, [pc, #264]	@ (8006508 <SystemGetsSignal+0x13ac>)
 8006400:	f001 fbbc 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8006404:	2064      	movs	r0, #100	@ 0x64
 8006406:	f002 fb55 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Status_AnimationManager, "CUBE", 150, 50, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 800640a:	2307      	movs	r3, #7
 800640c:	9301      	str	r3, [sp, #4]
 800640e:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	4b3e      	ldr	r3, [pc, #248]	@ (8006510 <SystemGetsSignal+0x13b4>)
 8006416:	4a3f      	ldr	r2, [pc, #252]	@ (8006514 <SystemGetsSignal+0x13b8>)
 8006418:	493f      	ldr	r1, [pc, #252]	@ (8006518 <SystemGetsSignal+0x13bc>)
 800641a:	483b      	ldr	r0, [pc, #236]	@ (8006508 <SystemGetsSignal+0x13ac>)
 800641c:	f001 fbae 	bl	8007b7c <OLED_DoTweenObject>

                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8006420:	2318      	movs	r3, #24
 8006422:	9301      	str	r3, [sp, #4]
 8006424:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	4b27      	ldr	r3, [pc, #156]	@ (80064c8 <SystemGetsSignal+0x136c>)
 800642c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006430:	492a      	ldr	r1, [pc, #168]	@ (80064dc <SystemGetsSignal+0x1380>)
 8006432:	482b      	ldr	r0, [pc, #172]	@ (80064e0 <SystemGetsSignal+0x1384>)
 8006434:	f001 fba2 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8006438:	2064      	movs	r0, #100	@ 0x64
 800643a:	f002 fb3b 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 800643e:	2318      	movs	r3, #24
 8006440:	9301      	str	r3, [sp, #4]
 8006442:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	4b26      	ldr	r3, [pc, #152]	@ (80064e4 <SystemGetsSignal+0x1388>)
 800644a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800644e:	4926      	ldr	r1, [pc, #152]	@ (80064e8 <SystemGetsSignal+0x138c>)
 8006450:	4823      	ldr	r0, [pc, #140]	@ (80064e0 <SystemGetsSignal+0x1384>)
 8006452:	f001 fb93 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8006456:	2064      	movs	r0, #100	@ 0x64
 8006458:	f002 fb2c 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 800645c:	2318      	movs	r3, #24
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800646a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800646e:	491f      	ldr	r1, [pc, #124]	@ (80064ec <SystemGetsSignal+0x1390>)
 8006470:	481b      	ldr	r0, [pc, #108]	@ (80064e0 <SystemGetsSignal+0x1384>)
 8006472:	f001 fb83 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8006476:	2064      	movs	r0, #100	@ 0x64
 8006478:	f002 fb1c 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 800647c:	2318      	movs	r3, #24
 800647e:	9301      	str	r3, [sp, #4]
 8006480:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	4b1a      	ldr	r3, [pc, #104]	@ (80064f0 <SystemGetsSignal+0x1394>)
 8006488:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800648c:	4919      	ldr	r1, [pc, #100]	@ (80064f4 <SystemGetsSignal+0x1398>)
 800648e:	4814      	ldr	r0, [pc, #80]	@ (80064e0 <SystemGetsSignal+0x1384>)
 8006490:	f001 fb74 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8006494:	2064      	movs	r0, #100	@ 0x64
 8006496:	f002 fb0d 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 800649a:	2318      	movs	r3, #24
 800649c:	9301      	str	r3, [sp, #4]
 800649e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	4b14      	ldr	r3, [pc, #80]	@ (80064f8 <SystemGetsSignal+0x139c>)
 80064a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80064aa:	4914      	ldr	r1, [pc, #80]	@ (80064fc <SystemGetsSignal+0x13a0>)
 80064ac:	480c      	ldr	r0, [pc, #48]	@ (80064e0 <SystemGetsSignal+0x1384>)
 80064ae:	f001 fb65 	bl	8007b7c <OLED_DoTweenObject>
                resetAnimation = true;
 80064b2:	4b1a      	ldr	r3, [pc, #104]	@ (800651c <SystemGetsSignal+0x13c0>)
 80064b4:	2201      	movs	r2, #1
 80064b6:	701a      	strb	r2, [r3, #0]
 80064b8:	e214      	b.n	80068e4 <SystemGetsSignal+0x1788>
 80064ba:	bf00      	nop
 80064bc:	20000001 	.word	0x20000001
 80064c0:	20000002 	.word	0x20000002
 80064c4:	20000bfc 	.word	0x20000bfc
 80064c8:	c1200000 	.word	0xc1200000
 80064cc:	42300000 	.word	0x42300000
 80064d0:	0800dcb4 	.word	0x0800dcb4
 80064d4:	200033cc 	.word	0x200033cc
 80064d8:	c2b40000 	.word	0xc2b40000
 80064dc:	0800dddc 	.word	0x0800dddc
 80064e0:	20001014 	.word	0x20001014
 80064e4:	40400000 	.word	0x40400000
 80064e8:	0800dde8 	.word	0x0800dde8
 80064ec:	0800ddf4 	.word	0x0800ddf4
 80064f0:	41e80000 	.word	0x41e80000
 80064f4:	0800de04 	.word	0x0800de04
 80064f8:	42280000 	.word	0x42280000
 80064fc:	0800de14 	.word	0x0800de14
 8006500:	42b80000 	.word	0x42b80000
 8006504:	0800dd68 	.word	0x0800dd68
 8006508:	20002dd8 	.word	0x20002dd8
 800650c:	0800dd74 	.word	0x0800dd74
 8006510:	42480000 	.word	0x42480000
 8006514:	43160000 	.word	0x43160000
 8006518:	0800dd7c 	.word	0x0800dd7c
 800651c:	20000bff 	.word	0x20000bff
            }
// #pragma endregion 状态部分
// #pragma region 设置部分
            else if (menuRank == 1 && menuSelection == 4) 
 8006520:	4b6b      	ldr	r3, [pc, #428]	@ (80066d0 <SystemGetsSignal+0x1574>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b01      	cmp	r3, #1
 8006526:	f040 808f 	bne.w	8006648 <SystemGetsSignal+0x14ec>
 800652a:	4b6a      	ldr	r3, [pc, #424]	@ (80066d4 <SystemGetsSignal+0x1578>)
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b04      	cmp	r3, #4
 8006530:	f040 808a 	bne.w	8006648 <SystemGetsSignal+0x14ec>
            {
                menuRank = 2;
 8006534:	4b66      	ldr	r3, [pc, #408]	@ (80066d0 <SystemGetsSignal+0x1574>)
 8006536:	2202      	movs	r2, #2
 8006538:	701a      	strb	r2, [r3, #0]
                menuSelection = 1;
 800653a:	4b66      	ldr	r3, [pc, #408]	@ (80066d4 <SystemGetsSignal+0x1578>)
 800653c:	2201      	movs	r2, #1
 800653e:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_SETTINGS;
 8006540:	4b65      	ldr	r3, [pc, #404]	@ (80066d8 <SystemGetsSignal+0x157c>)
 8006542:	2201      	movs	r2, #1
 8006544:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -2, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006546:	2307      	movs	r3, #7
 8006548:	9301      	str	r3, [sp, #4]
 800654a:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	4b62      	ldr	r3, [pc, #392]	@ (80066dc <SystemGetsSignal+0x1580>)
 8006552:	4a63      	ldr	r2, [pc, #396]	@ (80066e0 <SystemGetsSignal+0x1584>)
 8006554:	4963      	ldr	r1, [pc, #396]	@ (80066e4 <SystemGetsSignal+0x1588>)
 8006556:	4864      	ldr	r0, [pc, #400]	@ (80066e8 <SystemGetsSignal+0x158c>)
 8006558:	f001 fb10 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 800655c:	2064      	movs	r0, #100	@ 0x64
 800655e:	f002 faa9 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006562:	2307      	movs	r3, #7
 8006564:	9301      	str	r3, [sp, #4]
 8006566:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	4b5f      	ldr	r3, [pc, #380]	@ (80066ec <SystemGetsSignal+0x1590>)
 800656e:	4a5c      	ldr	r2, [pc, #368]	@ (80066e0 <SystemGetsSignal+0x1584>)
 8006570:	495f      	ldr	r1, [pc, #380]	@ (80066f0 <SystemGetsSignal+0x1594>)
 8006572:	485d      	ldr	r0, [pc, #372]	@ (80066e8 <SystemGetsSignal+0x158c>)
 8006574:	f001 fb02 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8006578:	2064      	movs	r0, #100	@ 0x64
 800657a:	f002 fa9b 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 800657e:	2307      	movs	r3, #7
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	4b5a      	ldr	r3, [pc, #360]	@ (80066f4 <SystemGetsSignal+0x1598>)
 800658a:	4a55      	ldr	r2, [pc, #340]	@ (80066e0 <SystemGetsSignal+0x1584>)
 800658c:	495a      	ldr	r1, [pc, #360]	@ (80066f8 <SystemGetsSignal+0x159c>)
 800658e:	4856      	ldr	r0, [pc, #344]	@ (80066e8 <SystemGetsSignal+0x158c>)
 8006590:	f001 faf4 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8006594:	2064      	movs	r0, #100	@ 0x64
 8006596:	f002 fa8d 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 800659a:	2307      	movs	r3, #7
 800659c:	9301      	str	r3, [sp, #4]
 800659e:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80065a8:	4a4d      	ldr	r2, [pc, #308]	@ (80066e0 <SystemGetsSignal+0x1584>)
 80065aa:	4954      	ldr	r1, [pc, #336]	@ (80066fc <SystemGetsSignal+0x15a0>)
 80065ac:	484e      	ldr	r0, [pc, #312]	@ (80066e8 <SystemGetsSignal+0x158c>)
 80065ae:	f001 fae5 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 80065b2:	2064      	movs	r0, #100	@ 0x64
 80065b4:	f002 fa7e 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 80065b8:	2307      	movs	r3, #7
 80065ba:	9301      	str	r3, [sp, #4]
 80065bc:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	4b4f      	ldr	r3, [pc, #316]	@ (8006700 <SystemGetsSignal+0x15a4>)
 80065c4:	4a46      	ldr	r2, [pc, #280]	@ (80066e0 <SystemGetsSignal+0x1584>)
 80065c6:	494f      	ldr	r1, [pc, #316]	@ (8006704 <SystemGetsSignal+0x15a8>)
 80065c8:	4847      	ldr	r0, [pc, #284]	@ (80066e8 <SystemGetsSignal+0x158c>)
 80065ca:	f001 fad7 	bl	8007b7c <OLED_DoTweenObject>

                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, TITLE_TWEEN_OUT_TIME, TITLE_TWEEN_OUT_STYLE);
 80065ce:	2300      	movs	r3, #0
 80065d0:	9301      	str	r3, [sp, #4]
 80065d2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	4b44      	ldr	r3, [pc, #272]	@ (80066ec <SystemGetsSignal+0x1590>)
 80065da:	4a4b      	ldr	r2, [pc, #300]	@ (8006708 <SystemGetsSignal+0x15ac>)
 80065dc:	494b      	ldr	r1, [pc, #300]	@ (800670c <SystemGetsSignal+0x15b0>)
 80065de:	484c      	ldr	r0, [pc, #304]	@ (8006710 <SystemGetsSignal+0x15b4>)
 80065e0:	f001 facc 	bl	8007b7c <OLED_DoTweenObject>
                OLED_DoTweenObject(&Settings_AnimationManager, "ShowFPS", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 80065e4:	2318      	movs	r3, #24
 80065e6:	9301      	str	r3, [sp, #4]
 80065e8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80065f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80065f6:	4947      	ldr	r1, [pc, #284]	@ (8006714 <SystemGetsSignal+0x15b8>)
 80065f8:	4847      	ldr	r0, [pc, #284]	@ (8006718 <SystemGetsSignal+0x15bc>)
 80065fa:	f001 fabf 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 80065fe:	2064      	movs	r0, #100	@ 0x64
 8006600:	f002 fa58 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Settings_AnimationManager, "Lightness", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8006604:	2318      	movs	r3, #24
 8006606:	9301      	str	r3, [sp, #4]
 8006608:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	4b3c      	ldr	r3, [pc, #240]	@ (8006700 <SystemGetsSignal+0x15a4>)
 8006610:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006614:	4941      	ldr	r1, [pc, #260]	@ (800671c <SystemGetsSignal+0x15c0>)
 8006616:	4840      	ldr	r0, [pc, #256]	@ (8006718 <SystemGetsSignal+0x15bc>)
 8006618:	f001 fab0 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 800661c:	2064      	movs	r0, #100	@ 0x64
 800661e:	f002 fa49 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObjectY(&g_AnimationManager, "BackButton", OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, BASIC_TWEEN_IN_STYLE);
 8006622:	2318      	movs	r3, #24
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	2301      	movs	r3, #1
 8006628:	4a3d      	ldr	r2, [pc, #244]	@ (8006720 <SystemGetsSignal+0x15c4>)
 800662a:	493e      	ldr	r1, [pc, #248]	@ (8006724 <SystemGetsSignal+0x15c8>)
 800662c:	483e      	ldr	r0, [pc, #248]	@ (8006728 <SystemGetsSignal+0x15cc>)
 800662e:	f001 fb78 	bl	8007d22 <OLED_DoTweenObjectY>
                OLED_DoTweenObjectX(&g_AnimationManager, "BackButton", OLED_UI_END_X, BASIC_TWEEN_IN_TIME, BASIC_TWEEN_IN_STYLE);
 8006632:	2318      	movs	r3, #24
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800663a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800663e:	4939      	ldr	r1, [pc, #228]	@ (8006724 <SystemGetsSignal+0x15c8>)
 8006640:	4839      	ldr	r0, [pc, #228]	@ (8006728 <SystemGetsSignal+0x15cc>)
 8006642:	f001 fb39 	bl	8007cb8 <OLED_DoTweenObjectX>
 8006646:	e14d      	b.n	80068e4 <SystemGetsSignal+0x1788>
            }
            else if (menuRank == 2 && menuSelection == 1 && currentPage == UI_PAGE_SETTINGS)
 8006648:	4b21      	ldr	r3, [pc, #132]	@ (80066d0 <SystemGetsSignal+0x1574>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b02      	cmp	r3, #2
 800664e:	d113      	bne.n	8006678 <SystemGetsSignal+0x151c>
 8006650:	4b20      	ldr	r3, [pc, #128]	@ (80066d4 <SystemGetsSignal+0x1578>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d10f      	bne.n	8006678 <SystemGetsSignal+0x151c>
 8006658:	4b1f      	ldr	r3, [pc, #124]	@ (80066d8 <SystemGetsSignal+0x157c>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d10b      	bne.n	8006678 <SystemGetsSignal+0x151c>
            {
                if (isShowFPS)
 8006660:	4b32      	ldr	r3, [pc, #200]	@ (800672c <SystemGetsSignal+0x15d0>)
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d003      	beq.n	8006670 <SystemGetsSignal+0x1514>
                {
                    isShowFPS = false;
 8006668:	4b30      	ldr	r3, [pc, #192]	@ (800672c <SystemGetsSignal+0x15d0>)
 800666a:	2200      	movs	r2, #0
 800666c:	701a      	strb	r2, [r3, #0]
                if (isShowFPS)
 800666e:	e139      	b.n	80068e4 <SystemGetsSignal+0x1788>
                }
                else
                {
                    isShowFPS = true;
 8006670:	4b2e      	ldr	r3, [pc, #184]	@ (800672c <SystemGetsSignal+0x15d0>)
 8006672:	2201      	movs	r2, #1
 8006674:	701a      	strb	r2, [r3, #0]
                if (isShowFPS)
 8006676:	e135      	b.n	80068e4 <SystemGetsSignal+0x1788>
                }
            }
            else if (menuRank == 2 && menuSelection == 2 && currentPage == UI_PAGE_SETTINGS)
 8006678:	4b15      	ldr	r3, [pc, #84]	@ (80066d0 <SystemGetsSignal+0x1574>)
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	2b02      	cmp	r3, #2
 800667e:	d111      	bne.n	80066a4 <SystemGetsSignal+0x1548>
 8006680:	4b14      	ldr	r3, [pc, #80]	@ (80066d4 <SystemGetsSignal+0x1578>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b02      	cmp	r3, #2
 8006686:	d10d      	bne.n	80066a4 <SystemGetsSignal+0x1548>
 8006688:	4b13      	ldr	r3, [pc, #76]	@ (80066d8 <SystemGetsSignal+0x157c>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d109      	bne.n	80066a4 <SystemGetsSignal+0x1548>
            {
                menuRank = 3;
 8006690:	4b0f      	ldr	r3, [pc, #60]	@ (80066d0 <SystemGetsSignal+0x1574>)
 8006692:	2203      	movs	r2, #3
 8006694:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_SETTINGS;
 8006696:	4b10      	ldr	r3, [pc, #64]	@ (80066d8 <SystemGetsSignal+0x157c>)
 8006698:	2201      	movs	r2, #1
 800669a:	701a      	strb	r2, [r3, #0]
                cancelSelection = true;
 800669c:	4b24      	ldr	r3, [pc, #144]	@ (8006730 <SystemGetsSignal+0x15d4>)
 800669e:	2201      	movs	r2, #1
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	e11f      	b.n	80068e4 <SystemGetsSignal+0x1788>
            }
            else if (menuRank == 3 && menuSelection == 2 && currentPage == UI_PAGE_SETTINGS)
 80066a4:	4b0a      	ldr	r3, [pc, #40]	@ (80066d0 <SystemGetsSignal+0x1574>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	2b03      	cmp	r3, #3
 80066aa:	d143      	bne.n	8006734 <SystemGetsSignal+0x15d8>
 80066ac:	4b09      	ldr	r3, [pc, #36]	@ (80066d4 <SystemGetsSignal+0x1578>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d13f      	bne.n	8006734 <SystemGetsSignal+0x15d8>
 80066b4:	4b08      	ldr	r3, [pc, #32]	@ (80066d8 <SystemGetsSignal+0x157c>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d13b      	bne.n	8006734 <SystemGetsSignal+0x15d8>
            {
                menuRank = 2;
 80066bc:	4b04      	ldr	r3, [pc, #16]	@ (80066d0 <SystemGetsSignal+0x1574>)
 80066be:	2202      	movs	r2, #2
 80066c0:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_SETTINGS;
 80066c2:	4b05      	ldr	r3, [pc, #20]	@ (80066d8 <SystemGetsSignal+0x157c>)
 80066c4:	2201      	movs	r2, #1
 80066c6:	701a      	strb	r2, [r3, #0]
                cancelSelection = false;
 80066c8:	4b19      	ldr	r3, [pc, #100]	@ (8006730 <SystemGetsSignal+0x15d4>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	e109      	b.n	80068e4 <SystemGetsSignal+0x1788>
 80066d0:	20000001 	.word	0x20000001
 80066d4:	20000002 	.word	0x20000002
 80066d8:	20000bfc 	.word	0x20000bfc
 80066dc:	c1b80000 	.word	0xc1b80000
 80066e0:	c2b40000 	.word	0xc2b40000
 80066e4:	0800dddc 	.word	0x0800dddc
 80066e8:	20001014 	.word	0x20001014
 80066ec:	c1200000 	.word	0xc1200000
 80066f0:	0800dde8 	.word	0x0800dde8
 80066f4:	40400000 	.word	0x40400000
 80066f8:	0800ddf4 	.word	0x0800ddf4
 80066fc:	0800de04 	.word	0x0800de04
 8006700:	41e80000 	.word	0x41e80000
 8006704:	0800de14 	.word	0x0800de14
 8006708:	42600000 	.word	0x42600000
 800670c:	0800dcc0 	.word	0x0800dcc0
 8006710:	200033cc 	.word	0x200033cc
 8006714:	0800dd84 	.word	0x0800dd84
 8006718:	200021f0 	.word	0x200021f0
 800671c:	0800dd8c 	.word	0x0800dd8c
 8006720:	42280000 	.word	0x42280000
 8006724:	0800dd50 	.word	0x0800dd50
 8006728:	200039c0 	.word	0x200039c0
 800672c:	20000c00 	.word	0x20000c00
 8006730:	20000bfe 	.word	0x20000bfe
            }
            else if (menuRank == 2 && menuSelection == 3 && currentPage == UI_PAGE_SETTINGS)
 8006734:	4b72      	ldr	r3, [pc, #456]	@ (8006900 <SystemGetsSignal+0x17a4>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	2b02      	cmp	r3, #2
 800673a:	f040 80d3 	bne.w	80068e4 <SystemGetsSignal+0x1788>
 800673e:	4b71      	ldr	r3, [pc, #452]	@ (8006904 <SystemGetsSignal+0x17a8>)
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	2b03      	cmp	r3, #3
 8006744:	f040 80ce 	bne.w	80068e4 <SystemGetsSignal+0x1788>
 8006748:	4b6f      	ldr	r3, [pc, #444]	@ (8006908 <SystemGetsSignal+0x17ac>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b01      	cmp	r3, #1
 800674e:	f040 80c9 	bne.w	80068e4 <SystemGetsSignal+0x1788>
            {
                menuRank = 1;
 8006752:	4b6b      	ldr	r3, [pc, #428]	@ (8006900 <SystemGetsSignal+0x17a4>)
 8006754:	2201      	movs	r2, #1
 8006756:	701a      	strb	r2, [r3, #0]
                menuSelection = 4;
 8006758:	4b6a      	ldr	r3, [pc, #424]	@ (8006904 <SystemGetsSignal+0x17a8>)
 800675a:	2204      	movs	r2, #4
 800675c:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_MENU;
 800675e:	4b6a      	ldr	r3, [pc, #424]	@ (8006908 <SystemGetsSignal+0x17ac>)
 8006760:	2200      	movs	r2, #0
 8006762:	701a      	strb	r2, [r3, #0]

                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_End_Y, TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8006764:	2304      	movs	r3, #4
 8006766:	9301      	str	r3, [sp, #4]
 8006768:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	f04f 0300 	mov.w	r3, #0
 8006772:	4a66      	ldr	r2, [pc, #408]	@ (800690c <SystemGetsSignal+0x17b0>)
 8006774:	4966      	ldr	r1, [pc, #408]	@ (8006910 <SystemGetsSignal+0x17b4>)
 8006776:	4867      	ldr	r0, [pc, #412]	@ (8006914 <SystemGetsSignal+0x17b8>)
 8006778:	f001 fa00 	bl	8007b7c <OLED_DoTweenObject>
                OLED_DoTweenObject(&Settings_AnimationManager, "ShowFPS", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 800677c:	2307      	movs	r3, #7
 800677e:	9301      	str	r3, [sp, #4]
 8006780:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	4b64      	ldr	r3, [pc, #400]	@ (8006918 <SystemGetsSignal+0x17bc>)
 8006788:	4a64      	ldr	r2, [pc, #400]	@ (800691c <SystemGetsSignal+0x17c0>)
 800678a:	4965      	ldr	r1, [pc, #404]	@ (8006920 <SystemGetsSignal+0x17c4>)
 800678c:	4865      	ldr	r0, [pc, #404]	@ (8006924 <SystemGetsSignal+0x17c8>)
 800678e:	f001 f9f5 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8006792:	2064      	movs	r0, #100	@ 0x64
 8006794:	f002 f98e 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Settings_AnimationManager, "Lightness", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 8006798:	2307      	movs	r3, #7
 800679a:	9301      	str	r3, [sp, #4]
 800679c:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	4b61      	ldr	r3, [pc, #388]	@ (8006928 <SystemGetsSignal+0x17cc>)
 80067a4:	4a5d      	ldr	r2, [pc, #372]	@ (800691c <SystemGetsSignal+0x17c0>)
 80067a6:	4961      	ldr	r1, [pc, #388]	@ (800692c <SystemGetsSignal+0x17d0>)
 80067a8:	485e      	ldr	r0, [pc, #376]	@ (8006924 <SystemGetsSignal+0x17c8>)
 80067aa:	f001 f9e7 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 80067ae:	2064      	movs	r0, #100	@ 0x64
 80067b0:	f002 f980 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, BASIC_TWEEN_OUT_TIME, BASIC_TWEEN_OUT_STYLE);
 80067b4:	2307      	movs	r3, #7
 80067b6:	9301      	str	r3, [sp, #4]
 80067b8:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80067c2:	4a56      	ldr	r2, [pc, #344]	@ (800691c <SystemGetsSignal+0x17c0>)
 80067c4:	495a      	ldr	r1, [pc, #360]	@ (8006930 <SystemGetsSignal+0x17d4>)
 80067c6:	485b      	ldr	r0, [pc, #364]	@ (8006934 <SystemGetsSignal+0x17d8>)
 80067c8:	f001 f9d8 	bl	8007b7c <OLED_DoTweenObject>

                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 80067cc:	4b4d      	ldr	r3, [pc, #308]	@ (8006904 <SystemGetsSignal+0x17a8>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	f1c3 0202 	rsb	r2, r3, #2
 80067d4:	4613      	mov	r3, r2
 80067d6:	005b      	lsls	r3, r3, #1
 80067d8:	4413      	add	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	3303      	adds	r3, #3
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7f9 fd7f 	bl	80002e4 <__aeabi_i2f>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2204      	movs	r2, #4
 80067ea:	9201      	str	r2, [sp, #4]
 80067ec:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80067f0:	9200      	str	r2, [sp, #0]
 80067f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80067f6:	4950      	ldr	r1, [pc, #320]	@ (8006938 <SystemGetsSignal+0x17dc>)
 80067f8:	4850      	ldr	r0, [pc, #320]	@ (800693c <SystemGetsSignal+0x17e0>)
 80067fa:	f001 f9bf 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 80067fe:	2064      	movs	r0, #100	@ 0x64
 8006800:	f002 f958 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8006804:	4b3f      	ldr	r3, [pc, #252]	@ (8006904 <SystemGetsSignal+0x17a8>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	f1c3 0203 	rsb	r2, r3, #3
 800680c:	4613      	mov	r3, r2
 800680e:	005b      	lsls	r3, r3, #1
 8006810:	4413      	add	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	3303      	adds	r3, #3
 8006818:	4618      	mov	r0, r3
 800681a:	f7f9 fd63 	bl	80002e4 <__aeabi_i2f>
 800681e:	4603      	mov	r3, r0
 8006820:	2204      	movs	r2, #4
 8006822:	9201      	str	r2, [sp, #4]
 8006824:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006828:	9200      	str	r2, [sp, #0]
 800682a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800682e:	4944      	ldr	r1, [pc, #272]	@ (8006940 <SystemGetsSignal+0x17e4>)
 8006830:	4842      	ldr	r0, [pc, #264]	@ (800693c <SystemGetsSignal+0x17e0>)
 8006832:	f001 f9a3 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 8006836:	2064      	movs	r0, #100	@ 0x64
 8006838:	f002 f93c 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 800683c:	4b31      	ldr	r3, [pc, #196]	@ (8006904 <SystemGetsSignal+0x17a8>)
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	f1c3 0204 	rsb	r2, r3, #4
 8006844:	4613      	mov	r3, r2
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	4413      	add	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	3303      	adds	r3, #3
 8006850:	4618      	mov	r0, r3
 8006852:	f7f9 fd47 	bl	80002e4 <__aeabi_i2f>
 8006856:	4603      	mov	r3, r0
 8006858:	2204      	movs	r2, #4
 800685a:	9201      	str	r2, [sp, #4]
 800685c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006860:	9200      	str	r2, [sp, #0]
 8006862:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006866:	4937      	ldr	r1, [pc, #220]	@ (8006944 <SystemGetsSignal+0x17e8>)
 8006868:	4834      	ldr	r0, [pc, #208]	@ (800693c <SystemGetsSignal+0x17e0>)
 800686a:	f001 f987 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 800686e:	2064      	movs	r0, #100	@ 0x64
 8006870:	f002 f920 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 8006874:	4b23      	ldr	r3, [pc, #140]	@ (8006904 <SystemGetsSignal+0x17a8>)
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	f1c3 0205 	rsb	r2, r3, #5
 800687c:	4613      	mov	r3, r2
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	4413      	add	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	3303      	adds	r3, #3
 8006888:	4618      	mov	r0, r3
 800688a:	f7f9 fd2b 	bl	80002e4 <__aeabi_i2f>
 800688e:	4603      	mov	r3, r0
 8006890:	2204      	movs	r2, #4
 8006892:	9201      	str	r2, [sp, #4]
 8006894:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006898:	9200      	str	r2, [sp, #0]
 800689a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800689e:	492a      	ldr	r1, [pc, #168]	@ (8006948 <SystemGetsSignal+0x17ec>)
 80068a0:	4826      	ldr	r0, [pc, #152]	@ (800693c <SystemGetsSignal+0x17e0>)
 80068a2:	f001 f96b 	bl	8007b7c <OLED_DoTweenObject>
                HAL_Delay(100);
 80068a6:	2064      	movs	r0, #100	@ 0x64
 80068a8:	f002 f904 	bl	8008ab4 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), TITLE_TWEEN_IN_TIME, TITLE_TWEEN_IN_STYLE);
 80068ac:	4b15      	ldr	r3, [pc, #84]	@ (8006904 <SystemGetsSignal+0x17a8>)
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	f1c3 0206 	rsb	r2, r3, #6
 80068b4:	4613      	mov	r3, r2
 80068b6:	005b      	lsls	r3, r3, #1
 80068b8:	4413      	add	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	3303      	adds	r3, #3
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7f9 fd0f 	bl	80002e4 <__aeabi_i2f>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2204      	movs	r2, #4
 80068ca:	9201      	str	r2, [sp, #4]
 80068cc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80068d0:	9200      	str	r2, [sp, #0]
 80068d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80068d6:	491d      	ldr	r1, [pc, #116]	@ (800694c <SystemGetsSignal+0x17f0>)
 80068d8:	4818      	ldr	r0, [pc, #96]	@ (800693c <SystemGetsSignal+0x17e0>)
 80068da:	f001 f94f 	bl	8007b7c <OLED_DoTweenObject>
                resetAnimation = true;
 80068de:	4b1c      	ldr	r3, [pc, #112]	@ (8006950 <SystemGetsSignal+0x17f4>)
 80068e0:	2201      	movs	r2, #1
 80068e2:	701a      	strb	r2, [r3, #0]
            }
// #pragma endregion 设置部分

            while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 80068e4:	bf00      	nop
 80068e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80068ea:	481a      	ldr	r0, [pc, #104]	@ (8006954 <SystemGetsSignal+0x17f8>)
 80068ec:	f002 fcf8 	bl	80092e0 <HAL_GPIO_ReadPin>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0f7      	beq.n	80068e6 <SystemGetsSignal+0x178a>
            {
                // 等待按钮释放
            }
        }
    }
}
 80068f6:	bf00      	nop
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	20000001 	.word	0x20000001
 8006904:	20000002 	.word	0x20000002
 8006908:	20000bfc 	.word	0x20000bfc
 800690c:	42600000 	.word	0x42600000
 8006910:	0800dcc0 	.word	0x0800dcc0
 8006914:	200033cc 	.word	0x200033cc
 8006918:	c1200000 	.word	0xc1200000
 800691c:	c2b40000 	.word	0xc2b40000
 8006920:	0800dd84 	.word	0x0800dd84
 8006924:	200021f0 	.word	0x200021f0
 8006928:	40400000 	.word	0x40400000
 800692c:	0800dd8c 	.word	0x0800dd8c
 8006930:	0800dd50 	.word	0x0800dd50
 8006934:	200039c0 	.word	0x200039c0
 8006938:	0800dddc 	.word	0x0800dddc
 800693c:	20001014 	.word	0x20001014
 8006940:	0800dde8 	.word	0x0800dde8
 8006944:	0800ddf4 	.word	0x0800ddf4
 8006948:	0800de04 	.word	0x0800de04
 800694c:	0800de14 	.word	0x0800de14
 8006950:	20000bff 	.word	0x20000bff
 8006954:	40010c00 	.word	0x40010c00

08006958 <OLED_EnableDiffMode>:
    }
}

// 启用差分更新模式
void OLED_EnableDiffMode(uint8_t enable)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	4603      	mov	r3, r0
 8006960:	71fb      	strb	r3, [r7, #7]
    diff_mode_enabled = enable;
 8006962:	4a09      	ldr	r2, [pc, #36]	@ (8006988 <OLED_EnableDiffMode+0x30>)
 8006964:	79fb      	ldrb	r3, [r7, #7]
 8006966:	7013      	strb	r3, [r2, #0]
    if (enable)
 8006968:	79fb      	ldrb	r3, [r7, #7]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d008      	beq.n	8006980 <OLED_EnableDiffMode+0x28>
    {
        memcpy(OLED_PrevBuffer, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES);
 800696e:	4a07      	ldr	r2, [pc, #28]	@ (800698c <OLED_EnableDiffMode+0x34>)
 8006970:	4b07      	ldr	r3, [pc, #28]	@ (8006990 <OLED_EnableDiffMode+0x38>)
 8006972:	4610      	mov	r0, r2
 8006974:	4619      	mov	r1, r3
 8006976:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800697a:	461a      	mov	r2, r3
 800697c:	f004 ff21 	bl	800b7c2 <memcpy>
    }
}
 8006980:	bf00      	nop
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	20001004 	.word	0x20001004
 800698c:	20000c04 	.word	0x20000c04
 8006990:	2000031c 	.word	0x2000031c

08006994 <OLED_EnableFastUpdate>:

// 设置快速更新模式
void OLED_EnableFastUpdate(uint8_t enable)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	4603      	mov	r3, r0
 800699c:	71fb      	strb	r3, [r7, #7]
    fast_update_enabled = enable;
 800699e:	4a04      	ldr	r2, [pc, #16]	@ (80069b0 <OLED_EnableFastUpdate+0x1c>)
 80069a0:	79fb      	ldrb	r3, [r7, #7]
 80069a2:	7013      	strb	r3, [r2, #0]
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bc80      	pop	{r7}
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	20000008 	.word	0x20000008

080069b4 <OLED_SmartUpdate>:

// 智能更新显示
// 选择性更新脏页，以提高帧率
void OLED_SmartUpdate(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
    // 如果OLED/DMA忙，直接返回
    if (OLED_IsBusy())
 80069ba:	f7fb fdcd 	bl	8002558 <OLED_IsBusy>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f040 8082 	bne.w	8006aca <OLED_SmartUpdate+0x116>
    {
        return;
    }

    // 检查是否有脏页需要更新
    uint8_t has_dirty = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	73fb      	strb	r3, [r7, #15]
    uint8_t first_dirty = 255;
 80069ca:	23ff      	movs	r3, #255	@ 0xff
 80069cc:	73bb      	strb	r3, [r7, #14]
    uint8_t last_dirty = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	737b      	strb	r3, [r7, #13]

    // 如果启用了差分更新，检查哪些页已经变化
    if (diff_mode_enabled)
 80069d2:	4b40      	ldr	r3, [pc, #256]	@ (8006ad4 <OLED_SmartUpdate+0x120>)
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d046      	beq.n	8006a68 <OLED_SmartUpdate+0xb4>
    {
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 80069da:	2300      	movs	r3, #0
 80069dc:	733b      	strb	r3, [r7, #12]
 80069de:	e03f      	b.n	8006a60 <OLED_SmartUpdate+0xac>
        {
            // 检查此页中是否有任何字节发生变化
            uint8_t page_changed = 0;
 80069e0:	2300      	movs	r3, #0
 80069e2:	72fb      	strb	r3, [r7, #11]
            uint16_t start_idx = page * OLED_WIDTH;
 80069e4:	7b3b      	ldrb	r3, [r7, #12]
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	01db      	lsls	r3, r3, #7
 80069ea:	80bb      	strh	r3, [r7, #4]

            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 80069ec:	2300      	movs	r3, #0
 80069ee:	813b      	strh	r3, [r7, #8]
 80069f0:	e015      	b.n	8006a1e <OLED_SmartUpdate+0x6a>
            {
                if (OLED_BackBuffer[start_idx + i] != OLED_PrevBuffer[start_idx + i])
 80069f2:	88ba      	ldrh	r2, [r7, #4]
 80069f4:	893b      	ldrh	r3, [r7, #8]
 80069f6:	4413      	add	r3, r2
 80069f8:	4a37      	ldr	r2, [pc, #220]	@ (8006ad8 <OLED_SmartUpdate+0x124>)
 80069fa:	5cd2      	ldrb	r2, [r2, r3]
 80069fc:	88b9      	ldrh	r1, [r7, #4]
 80069fe:	893b      	ldrh	r3, [r7, #8]
 8006a00:	440b      	add	r3, r1
 8006a02:	4936      	ldr	r1, [pc, #216]	@ (8006adc <OLED_SmartUpdate+0x128>)
 8006a04:	5ccb      	ldrb	r3, [r1, r3]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d006      	beq.n	8006a18 <OLED_SmartUpdate+0x64>
                {
                    page_changed = 1;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	72fb      	strb	r3, [r7, #11]
                    oled_dirty_pages[page] = 1;
 8006a0e:	7b3b      	ldrb	r3, [r7, #12]
 8006a10:	4a33      	ldr	r2, [pc, #204]	@ (8006ae0 <OLED_SmartUpdate+0x12c>)
 8006a12:	2101      	movs	r1, #1
 8006a14:	54d1      	strb	r1, [r2, r3]
                    break;
 8006a16:	e005      	b.n	8006a24 <OLED_SmartUpdate+0x70>
            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 8006a18:	893b      	ldrh	r3, [r7, #8]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	813b      	strh	r3, [r7, #8]
 8006a1e:	893b      	ldrh	r3, [r7, #8]
 8006a20:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a22:	d9e6      	bls.n	80069f2 <OLED_SmartUpdate+0x3e>
                }
            }

            if (page_changed)
 8006a24:	7afb      	ldrb	r3, [r7, #11]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d017      	beq.n	8006a5a <OLED_SmartUpdate+0xa6>
            {
                has_dirty = 1;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	73fb      	strb	r3, [r7, #15]
                if (page < first_dirty)
 8006a2e:	7b3a      	ldrb	r2, [r7, #12]
 8006a30:	7bbb      	ldrb	r3, [r7, #14]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d201      	bcs.n	8006a3a <OLED_SmartUpdate+0x86>
                    first_dirty = page;
 8006a36:	7b3b      	ldrb	r3, [r7, #12]
 8006a38:	73bb      	strb	r3, [r7, #14]
                if (page > last_dirty)
 8006a3a:	7b3a      	ldrb	r2, [r7, #12]
 8006a3c:	7b7b      	ldrb	r3, [r7, #13]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d901      	bls.n	8006a46 <OLED_SmartUpdate+0x92>
                    last_dirty = page;
 8006a42:	7b3b      	ldrb	r3, [r7, #12]
 8006a44:	737b      	strb	r3, [r7, #13]

                // 更新上一帧缓存
                memcpy(
 8006a46:	88bb      	ldrh	r3, [r7, #4]
 8006a48:	4a24      	ldr	r2, [pc, #144]	@ (8006adc <OLED_SmartUpdate+0x128>)
 8006a4a:	1898      	adds	r0, r3, r2
 8006a4c:	88bb      	ldrh	r3, [r7, #4]
 8006a4e:	4a22      	ldr	r2, [pc, #136]	@ (8006ad8 <OLED_SmartUpdate+0x124>)
 8006a50:	4413      	add	r3, r2
 8006a52:	2280      	movs	r2, #128	@ 0x80
 8006a54:	4619      	mov	r1, r3
 8006a56:	f004 feb4 	bl	800b7c2 <memcpy>
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 8006a5a:	7b3b      	ldrb	r3, [r7, #12]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	733b      	strb	r3, [r7, #12]
 8006a60:	7b3b      	ldrb	r3, [r7, #12]
 8006a62:	2b07      	cmp	r3, #7
 8006a64:	d9bc      	bls.n	80069e0 <OLED_SmartUpdate+0x2c>
 8006a66:	e01c      	b.n	8006aa2 <OLED_SmartUpdate+0xee>
        }
    }
    else
    {
        // 如果未启用差分更新，使用脏页标记
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 8006a68:	2300      	movs	r3, #0
 8006a6a:	71fb      	strb	r3, [r7, #7]
 8006a6c:	e016      	b.n	8006a9c <OLED_SmartUpdate+0xe8>
        {
            if (oled_dirty_pages[i])
 8006a6e:	79fb      	ldrb	r3, [r7, #7]
 8006a70:	4a1b      	ldr	r2, [pc, #108]	@ (8006ae0 <OLED_SmartUpdate+0x12c>)
 8006a72:	5cd3      	ldrb	r3, [r2, r3]
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00d      	beq.n	8006a96 <OLED_SmartUpdate+0xe2>
            {
                has_dirty = 1;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	73fb      	strb	r3, [r7, #15]
                if (i < first_dirty)
 8006a7e:	79fa      	ldrb	r2, [r7, #7]
 8006a80:	7bbb      	ldrb	r3, [r7, #14]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d201      	bcs.n	8006a8a <OLED_SmartUpdate+0xd6>
                    first_dirty = i;
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	73bb      	strb	r3, [r7, #14]
                if (i > last_dirty)
 8006a8a:	79fa      	ldrb	r2, [r7, #7]
 8006a8c:	7b7b      	ldrb	r3, [r7, #13]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d901      	bls.n	8006a96 <OLED_SmartUpdate+0xe2>
                    last_dirty = i;
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	737b      	strb	r3, [r7, #13]
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 8006a96:	79fb      	ldrb	r3, [r7, #7]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	71fb      	strb	r3, [r7, #7]
 8006a9c:	79fb      	ldrb	r3, [r7, #7]
 8006a9e:	2b07      	cmp	r3, #7
 8006aa0:	d9e5      	bls.n	8006a6e <OLED_SmartUpdate+0xba>
            }
        }
    }

    // 如果有脏页，只更新这些页
    if (has_dirty && fast_update_enabled)
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00a      	beq.n	8006abe <OLED_SmartUpdate+0x10a>
 8006aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8006ae4 <OLED_SmartUpdate+0x130>)
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d006      	beq.n	8006abe <OLED_SmartUpdate+0x10a>
    {
        OLED_UpdateDisplayPartial(first_dirty, last_dirty);
 8006ab0:	7b7a      	ldrb	r2, [r7, #13]
 8006ab2:	7bbb      	ldrb	r3, [r7, #14]
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fb fdce 	bl	8002658 <OLED_UpdateDisplayPartial>
 8006abc:	e006      	b.n	8006acc <OLED_SmartUpdate+0x118>
    }
    else if (has_dirty)
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d003      	beq.n	8006acc <OLED_SmartUpdate+0x118>
    {
        OLED_UpdateDisplayVSync();
 8006ac4:	f7fb fd70 	bl	80025a8 <OLED_UpdateDisplayVSync>
 8006ac8:	e000      	b.n	8006acc <OLED_SmartUpdate+0x118>
        return;
 8006aca:	bf00      	nop
    }
}
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20001004 	.word	0x20001004
 8006ad8:	2000031c 	.word	0x2000031c
 8006adc:	20000c04 	.word	0x20000c04
 8006ae0:	20000314 	.word	0x20000314
 8006ae4:	20000008 	.word	0x20000008

08006ae8 <OLED_OptimizedDisplayFPS>:


// 显示FPS
void OLED_OptimizedDisplayFPS(int16_t x, int16_t y)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	4603      	mov	r3, r0
 8006af0:	460a      	mov	r2, r1
 8006af2:	80fb      	strh	r3, [r7, #6]
 8006af4:	4613      	mov	r3, r2
 8006af6:	80bb      	strh	r3, [r7, #4]
    static uint32_t last_time = 0;
    static uint32_t frames = 0;
    static uint32_t fps = 0;
    static char fps_str[16] = "FPS:0";

    frames++;
 8006af8:	4b15      	ldr	r3, [pc, #84]	@ (8006b50 <OLED_OptimizedDisplayFPS+0x68>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3301      	adds	r3, #1
 8006afe:	4a14      	ldr	r2, [pc, #80]	@ (8006b50 <OLED_OptimizedDisplayFPS+0x68>)
 8006b00:	6013      	str	r3, [r2, #0]

    // 每秒更新一次FPS
    uint32_t current_time = HAL_GetTick();
 8006b02:	f001 ffcd 	bl	8008aa0 <HAL_GetTick>
 8006b06:	60f8      	str	r0, [r7, #12]
    if (current_time - last_time >= 1000)
 8006b08:	4b12      	ldr	r3, [pc, #72]	@ (8006b54 <OLED_OptimizedDisplayFPS+0x6c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b14:	d310      	bcc.n	8006b38 <OLED_OptimizedDisplayFPS+0x50>
    {
        fps = frames;
 8006b16:	4b0e      	ldr	r3, [pc, #56]	@ (8006b50 <OLED_OptimizedDisplayFPS+0x68>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a0f      	ldr	r2, [pc, #60]	@ (8006b58 <OLED_OptimizedDisplayFPS+0x70>)
 8006b1c:	6013      	str	r3, [r2, #0]
        sprintf(fps_str, "FPS:%d", fps);
 8006b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8006b58 <OLED_OptimizedDisplayFPS+0x70>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	461a      	mov	r2, r3
 8006b24:	490d      	ldr	r1, [pc, #52]	@ (8006b5c <OLED_OptimizedDisplayFPS+0x74>)
 8006b26:	480e      	ldr	r0, [pc, #56]	@ (8006b60 <OLED_OptimizedDisplayFPS+0x78>)
 8006b28:	f004 fd58 	bl	800b5dc <siprintf>
        frames = 0;
 8006b2c:	4b08      	ldr	r3, [pc, #32]	@ (8006b50 <OLED_OptimizedDisplayFPS+0x68>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	601a      	str	r2, [r3, #0]
        last_time = current_time;
 8006b32:	4a08      	ldr	r2, [pc, #32]	@ (8006b54 <OLED_OptimizedDisplayFPS+0x6c>)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6013      	str	r3, [r2, #0]
    }

    OLED_DisplayString(x, y, fps_str);
 8006b38:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006b3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b40:	4a07      	ldr	r2, [pc, #28]	@ (8006b60 <OLED_OptimizedDisplayFPS+0x78>)
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fc f91c 	bl	8002d80 <OLED_DisplayString>
 8006b48:	bf00      	nop
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	20001008 	.word	0x20001008
 8006b54:	2000100c 	.word	0x2000100c
 8006b58:	20001010 	.word	0x20001010
 8006b5c:	0800dfbc 	.word	0x0800dfbc
 8006b60:	2000000c 	.word	0x2000000c

08006b64 <EaseLinear>:
#include "stdint.h" // 添加 stdint.h 以支持标准整数类型
#include "oled_ui.h"
#pragma region TWEENS // 动画缓动函数全部在这里定义

static float EaseLinear(float t)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
    return t;
 8006b6c:	687b      	ldr	r3, [r7, #4]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bc80      	pop	{r7}
 8006b76:	4770      	bx	lr

08006b78 <EaseInQuad>:

static float EaseInQuad(float t)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
    return t * t;
 8006b80:	6879      	ldr	r1, [r7, #4]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7f9 fc02 	bl	800038c <__aeabi_fmul>
 8006b88:	4603      	mov	r3, r0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <EaseOutQuad>:

static float EaseOutQuad(float t)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b082      	sub	sp, #8
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
    return t * (2 - t);
 8006b9a:	6879      	ldr	r1, [r7, #4]
 8006b9c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8006ba0:	f7f9 faea 	bl	8000178 <__aeabi_fsub>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	6879      	ldr	r1, [r7, #4]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7f9 fbef 	bl	800038c <__aeabi_fmul>
 8006bae:	4603      	mov	r3, r0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <EaseInOutQuad>:

static float EaseInOutQuad(float t)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 2 * t * t : -1 + (4 - 2 * t) * t;
 8006bc0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7f9 fd7f 	bl	80006c8 <__aeabi_fcmplt>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00b      	beq.n	8006be8 <EaseInOutQuad+0x30>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7f9 fad1 	bl	800017c <__addsf3>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	6879      	ldr	r1, [r7, #4]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7f9 fbd4 	bl	800038c <__aeabi_fmul>
 8006be4:	4603      	mov	r3, r0
 8006be6:	e016      	b.n	8006c16 <EaseInOutQuad+0x5e>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4619      	mov	r1, r3
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7f9 fac5 	bl	800017c <__addsf3>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 8006bfa:	f7f9 fabd 	bl	8000178 <__aeabi_fsub>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	6879      	ldr	r1, [r7, #4]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7f9 fbc2 	bl	800038c <__aeabi_fmul>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7f9 fab2 	bl	8000178 <__aeabi_fsub>
 8006c14:	4603      	mov	r3, r0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <EaseInCubic>:

static float EaseInCubic(float t)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b082      	sub	sp, #8
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
    return t * t * t;
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7f9 fbaf 	bl	800038c <__aeabi_fmul>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	6879      	ldr	r1, [r7, #4]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7f9 fbaa 	bl	800038c <__aeabi_fmul>
 8006c38:	4603      	mov	r3, r0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <EaseOutCubic>:

static float EaseOutCubic(float t)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b084      	sub	sp, #16
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
    float t1 = t - 1;
 8006c4a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7f9 fa92 	bl	8000178 <__aeabi_fsub>
 8006c54:	4603      	mov	r3, r0
 8006c56:	60fb      	str	r3, [r7, #12]
    return t1 * t1 * t1 + 1;
 8006c58:	68f9      	ldr	r1, [r7, #12]
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f7f9 fb96 	bl	800038c <__aeabi_fmul>
 8006c60:	4603      	mov	r3, r0
 8006c62:	68f9      	ldr	r1, [r7, #12]
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7f9 fb91 	bl	800038c <__aeabi_fmul>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7f9 fa83 	bl	800017c <__addsf3>
 8006c76:	4603      	mov	r3, r0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <EaseInOutCubic>:

static float EaseInOutCubic(float t)
{
 8006c80:	b590      	push	{r4, r7, lr}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
 8006c88:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7f9 fd1b 	bl	80006c8 <__aeabi_fcmplt>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d010      	beq.n	8006cba <EaseInOutCubic+0x3a>
 8006c98:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7f9 fb75 	bl	800038c <__aeabi_fmul>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	6879      	ldr	r1, [r7, #4]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7f9 fb70 	bl	800038c <__aeabi_fmul>
 8006cac:	4603      	mov	r3, r0
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7f9 fb6b 	bl	800038c <__aeabi_fmul>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	e02f      	b.n	8006d1a <EaseInOutCubic+0x9a>
 8006cba:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7f9 fa5a 	bl	8000178 <__aeabi_fsub>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	461c      	mov	r4, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7f9 fa55 	bl	800017c <__addsf3>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7f9 fa4d 	bl	8000178 <__aeabi_fsub>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f7f9 fb52 	bl	800038c <__aeabi_fmul>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	461c      	mov	r4, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7f9 fa43 	bl	800017c <__addsf3>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7f9 fa3b 	bl	8000178 <__aeabi_fsub>
 8006d02:	4603      	mov	r3, r0
 8006d04:	4619      	mov	r1, r3
 8006d06:	4620      	mov	r0, r4
 8006d08:	f7f9 fb40 	bl	800038c <__aeabi_fmul>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7f9 fa32 	bl	800017c <__addsf3>
 8006d18:	4603      	mov	r3, r0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd90      	pop	{r4, r7, pc}
	...

08006d24 <EaseInExpo>:

// 在现有EaseType_t枚举中添加这些新类型
// 指数缓动
static float EaseInExpo(float t)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
    return (t == 0) ? 0 : powf(2, 10 * (t - 1));
 8006d2c:	f04f 0100 	mov.w	r1, #0
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7f9 fcbf 	bl	80006b4 <__aeabi_fcmpeq>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d111      	bne.n	8006d60 <EaseInExpo+0x3c>
 8006d3c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f7f9 fa19 	bl	8000178 <__aeabi_fsub>
 8006d46:	4603      	mov	r3, r0
 8006d48:	4908      	ldr	r1, [pc, #32]	@ (8006d6c <EaseInExpo+0x48>)
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7f9 fb1e 	bl	800038c <__aeabi_fmul>
 8006d50:	4603      	mov	r3, r0
 8006d52:	4619      	mov	r1, r3
 8006d54:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8006d58:	f005 fd10 	bl	800c77c <powf>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	e001      	b.n	8006d64 <EaseInExpo+0x40>
 8006d60:	f04f 0300 	mov.w	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	41200000 	.word	0x41200000

08006d70 <EaseOutExpo>:

static float EaseOutExpo(float t)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
    return (t == 1) ? 1 : (1 - powf(2, -10 * t));
 8006d78:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f7f9 fc99 	bl	80006b4 <__aeabi_fcmpeq>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d111      	bne.n	8006dac <EaseOutExpo+0x3c>
 8006d88:	490b      	ldr	r1, [pc, #44]	@ (8006db8 <EaseOutExpo+0x48>)
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7f9 fafe 	bl	800038c <__aeabi_fmul>
 8006d90:	4603      	mov	r3, r0
 8006d92:	4619      	mov	r1, r3
 8006d94:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8006d98:	f005 fcf0 	bl	800c77c <powf>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	4619      	mov	r1, r3
 8006da0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006da4:	f7f9 f9e8 	bl	8000178 <__aeabi_fsub>
 8006da8:	4603      	mov	r3, r0
 8006daa:	e001      	b.n	8006db0 <EaseOutExpo+0x40>
 8006dac:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	c1200000 	.word	0xc1200000

08006dbc <EaseInOutExpo>:

static float EaseInOutExpo(float t)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
    if (t == 0)
 8006dc4:	f04f 0100 	mov.w	r1, #0
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f7f9 fc73 	bl	80006b4 <__aeabi_fcmpeq>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d002      	beq.n	8006dda <EaseInOutExpo+0x1e>
        return 0;
 8006dd4:	f04f 0300 	mov.w	r3, #0
 8006dd8:	e045      	b.n	8006e66 <EaseInOutExpo+0xaa>
    if (t == 1)
 8006dda:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7f9 fc68 	bl	80006b4 <__aeabi_fcmpeq>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <EaseInOutExpo+0x34>
        return 1;
 8006dea:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8006dee:	e03a      	b.n	8006e66 <EaseInOutExpo+0xaa>
    if (t < 0.5f)
 8006df0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f7f9 fc67 	bl	80006c8 <__aeabi_fcmplt>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d016      	beq.n	8006e2e <EaseInOutExpo+0x72>
        return powf(2, 20 * t - 10) / 2;
 8006e00:	491b      	ldr	r1, [pc, #108]	@ (8006e70 <EaseInOutExpo+0xb4>)
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7f9 fac2 	bl	800038c <__aeabi_fmul>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	491a      	ldr	r1, [pc, #104]	@ (8006e74 <EaseInOutExpo+0xb8>)
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7f9 f9b3 	bl	8000178 <__aeabi_fsub>
 8006e12:	4603      	mov	r3, r0
 8006e14:	4619      	mov	r1, r3
 8006e16:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8006e1a:	f005 fcaf 	bl	800c77c <powf>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7f9 fb65 	bl	80004f4 <__aeabi_fdiv>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	e01b      	b.n	8006e66 <EaseInOutExpo+0xaa>
    return (2 - powf(2, -20 * t + 10)) / 2;
 8006e2e:	4912      	ldr	r1, [pc, #72]	@ (8006e78 <EaseInOutExpo+0xbc>)
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7f9 faab 	bl	800038c <__aeabi_fmul>
 8006e36:	4603      	mov	r3, r0
 8006e38:	490e      	ldr	r1, [pc, #56]	@ (8006e74 <EaseInOutExpo+0xb8>)
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7f9 f99e 	bl	800017c <__addsf3>
 8006e40:	4603      	mov	r3, r0
 8006e42:	4619      	mov	r1, r3
 8006e44:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8006e48:	f005 fc98 	bl	800c77c <powf>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	4619      	mov	r1, r3
 8006e50:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8006e54:	f7f9 f990 	bl	8000178 <__aeabi_fsub>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7f9 fb48 	bl	80004f4 <__aeabi_fdiv>
 8006e64:	4603      	mov	r3, r0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	41a00000 	.word	0x41a00000
 8006e74:	41200000 	.word	0x41200000
 8006e78:	c1a00000 	.word	0xc1a00000

08006e7c <EaseInCirc>:

// 圆形曲线缓动
static float EaseInCirc(float t)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
    return 1 - sqrtf(1 - t * t);
 8006e84:	6879      	ldr	r1, [r7, #4]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7f9 fa80 	bl	800038c <__aeabi_fmul>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	4619      	mov	r1, r3
 8006e90:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006e94:	f7f9 f970 	bl	8000178 <__aeabi_fsub>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f005 fcbb 	bl	800c816 <sqrtf>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006ea8:	f7f9 f966 	bl	8000178 <__aeabi_fsub>
 8006eac:	4603      	mov	r3, r0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <EaseOutCirc>:

static float EaseOutCirc(float t)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b082      	sub	sp, #8
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
    return sqrtf(1 - powf(t - 1, 2));
 8006ebe:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7f9 f958 	bl	8000178 <__aeabi_fsub>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f005 fc54 	bl	800c77c <powf>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006edc:	f7f9 f94c 	bl	8000178 <__aeabi_fsub>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f005 fc97 	bl	800c816 <sqrtf>
 8006ee8:	4603      	mov	r3, r0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <EaseInOutCirc>:

static float EaseInOutCirc(float t)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b082      	sub	sp, #8
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 8006efa:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7f9 fbe2 	bl	80006c8 <__aeabi_fcmplt>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d022      	beq.n	8006f50 <EaseInOutCirc+0x5e>
        return (1 - sqrtf(1 - powf(2 * t, 2))) / 2;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7f9 f934 	bl	800017c <__addsf3>
 8006f14:	4603      	mov	r3, r0
 8006f16:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f005 fc2e 	bl	800c77c <powf>
 8006f20:	4603      	mov	r3, r0
 8006f22:	4619      	mov	r1, r3
 8006f24:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006f28:	f7f9 f926 	bl	8000178 <__aeabi_fsub>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f005 fc71 	bl	800c816 <sqrtf>
 8006f34:	4603      	mov	r3, r0
 8006f36:	4619      	mov	r1, r3
 8006f38:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006f3c:	f7f9 f91c 	bl	8000178 <__aeabi_fsub>
 8006f40:	4603      	mov	r3, r0
 8006f42:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7f9 fad4 	bl	80004f4 <__aeabi_fdiv>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	e027      	b.n	8006fa0 <EaseInOutCirc+0xae>
    return (sqrtf(1 - powf(-2 * t + 2, 2)) + 1) / 2;
 8006f50:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7f9 fa19 	bl	800038c <__aeabi_fmul>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7f9 f90b 	bl	800017c <__addsf3>
 8006f66:	4603      	mov	r3, r0
 8006f68:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f005 fc05 	bl	800c77c <powf>
 8006f72:	4603      	mov	r3, r0
 8006f74:	4619      	mov	r1, r3
 8006f76:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006f7a:	f7f9 f8fd 	bl	8000178 <__aeabi_fsub>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	4618      	mov	r0, r3
 8006f82:	f005 fc48 	bl	800c816 <sqrtf>
 8006f86:	4603      	mov	r3, r0
 8006f88:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7f9 f8f5 	bl	800017c <__addsf3>
 8006f92:	4603      	mov	r3, r0
 8006f94:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7f9 faab 	bl	80004f4 <__aeabi_fdiv>
 8006f9e:	4603      	mov	r3, r0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3708      	adds	r7, #8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <EaseInElastic>:

// 弹性缓动
static float EaseInElastic(float t)
{
 8006fa8:	b590      	push	{r4, r7, lr}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 8006fb0:	4b22      	ldr	r3, [pc, #136]	@ (800703c <EaseInElastic+0x94>)
 8006fb2:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8006fb4:	f04f 0100 	mov.w	r1, #0
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f7f9 fb7b 	bl	80006b4 <__aeabi_fcmpeq>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d002      	beq.n	8006fca <EaseInElastic+0x22>
        return 0;
 8006fc4:	f04f 0300 	mov.w	r3, #0
 8006fc8:	e034      	b.n	8007034 <EaseInElastic+0x8c>
    if (t == 1)
 8006fca:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7f9 fb70 	bl	80006b4 <__aeabi_fcmpeq>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <EaseInElastic+0x38>
        return 1;
 8006fda:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8006fde:	e029      	b.n	8007034 <EaseInElastic+0x8c>
    return -powf(2, 10 * t - 10) * sinf((t * 10 - 10.75f) * c4);
 8006fe0:	4917      	ldr	r1, [pc, #92]	@ (8007040 <EaseInElastic+0x98>)
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7f9 f9d2 	bl	800038c <__aeabi_fmul>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	4915      	ldr	r1, [pc, #84]	@ (8007040 <EaseInElastic+0x98>)
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7f9 f8c3 	bl	8000178 <__aeabi_fsub>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8006ffa:	f005 fbbf 	bl	800c77c <powf>
 8006ffe:	4603      	mov	r3, r0
 8007000:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8007004:	490e      	ldr	r1, [pc, #56]	@ (8007040 <EaseInElastic+0x98>)
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7f9 f9c0 	bl	800038c <__aeabi_fmul>
 800700c:	4603      	mov	r3, r0
 800700e:	490d      	ldr	r1, [pc, #52]	@ (8007044 <EaseInElastic+0x9c>)
 8007010:	4618      	mov	r0, r3
 8007012:	f7f9 f8b1 	bl	8000178 <__aeabi_fsub>
 8007016:	4603      	mov	r3, r0
 8007018:	68f9      	ldr	r1, [r7, #12]
 800701a:	4618      	mov	r0, r3
 800701c:	f7f9 f9b6 	bl	800038c <__aeabi_fmul>
 8007020:	4603      	mov	r3, r0
 8007022:	4618      	mov	r0, r3
 8007024:	f005 fc4a 	bl	800c8bc <sinf>
 8007028:	4603      	mov	r3, r0
 800702a:	4619      	mov	r1, r3
 800702c:	4620      	mov	r0, r4
 800702e:	f7f9 f9ad 	bl	800038c <__aeabi_fmul>
 8007032:	4603      	mov	r3, r0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	bd90      	pop	{r4, r7, pc}
 800703c:	40060a8b 	.word	0x40060a8b
 8007040:	41200000 	.word	0x41200000
 8007044:	412c0000 	.word	0x412c0000

08007048 <EaseOutElastic>:

static float EaseOutElastic(float t)
{
 8007048:	b590      	push	{r4, r7, lr}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 8007050:	4b22      	ldr	r3, [pc, #136]	@ (80070dc <EaseOutElastic+0x94>)
 8007052:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8007054:	f04f 0100 	mov.w	r1, #0
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7f9 fb2b 	bl	80006b4 <__aeabi_fcmpeq>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <EaseOutElastic+0x22>
        return 0;
 8007064:	f04f 0300 	mov.w	r3, #0
 8007068:	e034      	b.n	80070d4 <EaseOutElastic+0x8c>
    if (t == 1)
 800706a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7f9 fb20 	bl	80006b4 <__aeabi_fcmpeq>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d002      	beq.n	8007080 <EaseOutElastic+0x38>
        return 1;
 800707a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800707e:	e029      	b.n	80070d4 <EaseOutElastic+0x8c>
    return powf(2, -10 * t) * sinf((t * 10 - 0.75f) * c4) + 1;
 8007080:	4917      	ldr	r1, [pc, #92]	@ (80070e0 <EaseOutElastic+0x98>)
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7f9 f982 	bl	800038c <__aeabi_fmul>
 8007088:	4603      	mov	r3, r0
 800708a:	4619      	mov	r1, r3
 800708c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8007090:	f005 fb74 	bl	800c77c <powf>
 8007094:	4604      	mov	r4, r0
 8007096:	4913      	ldr	r1, [pc, #76]	@ (80070e4 <EaseOutElastic+0x9c>)
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7f9 f977 	bl	800038c <__aeabi_fmul>
 800709e:	4603      	mov	r3, r0
 80070a0:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7f9 f867 	bl	8000178 <__aeabi_fsub>
 80070aa:	4603      	mov	r3, r0
 80070ac:	68f9      	ldr	r1, [r7, #12]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7f9 f96c 	bl	800038c <__aeabi_fmul>
 80070b4:	4603      	mov	r3, r0
 80070b6:	4618      	mov	r0, r3
 80070b8:	f005 fc00 	bl	800c8bc <sinf>
 80070bc:	4603      	mov	r3, r0
 80070be:	4619      	mov	r1, r3
 80070c0:	4620      	mov	r0, r4
 80070c2:	f7f9 f963 	bl	800038c <__aeabi_fmul>
 80070c6:	4603      	mov	r3, r0
 80070c8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7f9 f855 	bl	800017c <__addsf3>
 80070d2:	4603      	mov	r3, r0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd90      	pop	{r4, r7, pc}
 80070dc:	40060a8b 	.word	0x40060a8b
 80070e0:	c1200000 	.word	0xc1200000
 80070e4:	41200000 	.word	0x41200000

080070e8 <EaseInOutElastic>:

static float EaseInOutElastic(float t)
{
 80070e8:	b590      	push	{r4, r7, lr}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
    const float c5 = (2 * 3.14159f) / 4.5f;
 80070f0:	4b44      	ldr	r3, [pc, #272]	@ (8007204 <EaseInOutElastic+0x11c>)
 80070f2:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 80070f4:	f04f 0100 	mov.w	r1, #0
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7f9 fadb 	bl	80006b4 <__aeabi_fcmpeq>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <EaseInOutElastic+0x22>
        return 0;
 8007104:	f04f 0300 	mov.w	r3, #0
 8007108:	e077      	b.n	80071fa <EaseInOutElastic+0x112>
    if (t == 1)
 800710a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7f9 fad0 	bl	80006b4 <__aeabi_fcmpeq>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d002      	beq.n	8007120 <EaseInOutElastic+0x38>
        return 1;
 800711a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800711e:	e06c      	b.n	80071fa <EaseInOutElastic+0x112>
    if (t < 0.5f)
 8007120:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7f9 facf 	bl	80006c8 <__aeabi_fcmplt>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d030      	beq.n	8007192 <EaseInOutElastic+0xaa>
        return -(powf(2, 20 * t - 10) * sinf((20 * t - 11.125f) * c5)) / 2;
 8007130:	4935      	ldr	r1, [pc, #212]	@ (8007208 <EaseInOutElastic+0x120>)
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7f9 f92a 	bl	800038c <__aeabi_fmul>
 8007138:	4603      	mov	r3, r0
 800713a:	4934      	ldr	r1, [pc, #208]	@ (800720c <EaseInOutElastic+0x124>)
 800713c:	4618      	mov	r0, r3
 800713e:	f7f9 f81b 	bl	8000178 <__aeabi_fsub>
 8007142:	4603      	mov	r3, r0
 8007144:	4619      	mov	r1, r3
 8007146:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800714a:	f005 fb17 	bl	800c77c <powf>
 800714e:	4604      	mov	r4, r0
 8007150:	492d      	ldr	r1, [pc, #180]	@ (8007208 <EaseInOutElastic+0x120>)
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7f9 f91a 	bl	800038c <__aeabi_fmul>
 8007158:	4603      	mov	r3, r0
 800715a:	492d      	ldr	r1, [pc, #180]	@ (8007210 <EaseInOutElastic+0x128>)
 800715c:	4618      	mov	r0, r3
 800715e:	f7f9 f80b 	bl	8000178 <__aeabi_fsub>
 8007162:	4603      	mov	r3, r0
 8007164:	68f9      	ldr	r1, [r7, #12]
 8007166:	4618      	mov	r0, r3
 8007168:	f7f9 f910 	bl	800038c <__aeabi_fmul>
 800716c:	4603      	mov	r3, r0
 800716e:	4618      	mov	r0, r3
 8007170:	f005 fba4 	bl	800c8bc <sinf>
 8007174:	4603      	mov	r3, r0
 8007176:	4619      	mov	r1, r3
 8007178:	4620      	mov	r0, r4
 800717a:	f7f9 f907 	bl	800038c <__aeabi_fmul>
 800717e:	4603      	mov	r3, r0
 8007180:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007184:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007188:	4618      	mov	r0, r3
 800718a:	f7f9 f9b3 	bl	80004f4 <__aeabi_fdiv>
 800718e:	4603      	mov	r3, r0
 8007190:	e033      	b.n	80071fa <EaseInOutElastic+0x112>
    return (powf(2, -20 * t + 10) * sinf((20 * t - 11.125f) * c5)) / 2 + 1;
 8007192:	4920      	ldr	r1, [pc, #128]	@ (8007214 <EaseInOutElastic+0x12c>)
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7f9 f8f9 	bl	800038c <__aeabi_fmul>
 800719a:	4603      	mov	r3, r0
 800719c:	491b      	ldr	r1, [pc, #108]	@ (800720c <EaseInOutElastic+0x124>)
 800719e:	4618      	mov	r0, r3
 80071a0:	f7f8 ffec 	bl	800017c <__addsf3>
 80071a4:	4603      	mov	r3, r0
 80071a6:	4619      	mov	r1, r3
 80071a8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80071ac:	f005 fae6 	bl	800c77c <powf>
 80071b0:	4604      	mov	r4, r0
 80071b2:	4915      	ldr	r1, [pc, #84]	@ (8007208 <EaseInOutElastic+0x120>)
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7f9 f8e9 	bl	800038c <__aeabi_fmul>
 80071ba:	4603      	mov	r3, r0
 80071bc:	4914      	ldr	r1, [pc, #80]	@ (8007210 <EaseInOutElastic+0x128>)
 80071be:	4618      	mov	r0, r3
 80071c0:	f7f8 ffda 	bl	8000178 <__aeabi_fsub>
 80071c4:	4603      	mov	r3, r0
 80071c6:	68f9      	ldr	r1, [r7, #12]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7f9 f8df 	bl	800038c <__aeabi_fmul>
 80071ce:	4603      	mov	r3, r0
 80071d0:	4618      	mov	r0, r3
 80071d2:	f005 fb73 	bl	800c8bc <sinf>
 80071d6:	4603      	mov	r3, r0
 80071d8:	4619      	mov	r1, r3
 80071da:	4620      	mov	r0, r4
 80071dc:	f7f9 f8d6 	bl	800038c <__aeabi_fmul>
 80071e0:	4603      	mov	r3, r0
 80071e2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7f9 f984 	bl	80004f4 <__aeabi_fdiv>
 80071ec:	4603      	mov	r3, r0
 80071ee:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7f8 ffc2 	bl	800017c <__addsf3>
 80071f8:	4603      	mov	r3, r0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd90      	pop	{r4, r7, pc}
 8007202:	bf00      	nop
 8007204:	3fb2b8b9 	.word	0x3fb2b8b9
 8007208:	41a00000 	.word	0x41a00000
 800720c:	41200000 	.word	0x41200000
 8007210:	41320000 	.word	0x41320000
 8007214:	c1a00000 	.word	0xc1a00000

08007218 <EaseOutBounce>:

static float EaseOutBounce(float t)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
    const float n1 = 7.5625f;
 8007220:	4b45      	ldr	r3, [pc, #276]	@ (8007338 <EaseOutBounce+0x120>)
 8007222:	60fb      	str	r3, [r7, #12]
    const float d1 = 2.75f;
 8007224:	4b45      	ldr	r3, [pc, #276]	@ (800733c <EaseOutBounce+0x124>)
 8007226:	60bb      	str	r3, [r7, #8]

    if (t < 1 / d1)
 8007228:	68b9      	ldr	r1, [r7, #8]
 800722a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800722e:	f7f9 f961 	bl	80004f4 <__aeabi_fdiv>
 8007232:	4603      	mov	r3, r0
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7f9 fa46 	bl	80006c8 <__aeabi_fcmplt>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00a      	beq.n	8007258 <EaseOutBounce+0x40>
    {
        return n1 * t * t;
 8007242:	6879      	ldr	r1, [r7, #4]
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f7f9 f8a1 	bl	800038c <__aeabi_fmul>
 800724a:	4603      	mov	r3, r0
 800724c:	6879      	ldr	r1, [r7, #4]
 800724e:	4618      	mov	r0, r3
 8007250:	f7f9 f89c 	bl	800038c <__aeabi_fmul>
 8007254:	4603      	mov	r3, r0
 8007256:	e06a      	b.n	800732e <EaseOutBounce+0x116>
    }
    else if (t < 2 / d1)
 8007258:	68b9      	ldr	r1, [r7, #8]
 800725a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800725e:	f7f9 f949 	bl	80004f4 <__aeabi_fdiv>
 8007262:	4603      	mov	r3, r0
 8007264:	4619      	mov	r1, r3
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f7f9 fa2e 	bl	80006c8 <__aeabi_fcmplt>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d01c      	beq.n	80072ac <EaseOutBounce+0x94>
    {
        t -= 1.5f / d1;
 8007272:	68b9      	ldr	r1, [r7, #8]
 8007274:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8007278:	f7f9 f93c 	bl	80004f4 <__aeabi_fdiv>
 800727c:	4603      	mov	r3, r0
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7f8 ff79 	bl	8000178 <__aeabi_fsub>
 8007286:	4603      	mov	r3, r0
 8007288:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.75f;
 800728a:	6879      	ldr	r1, [r7, #4]
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f7f9 f87d 	bl	800038c <__aeabi_fmul>
 8007292:	4603      	mov	r3, r0
 8007294:	6879      	ldr	r1, [r7, #4]
 8007296:	4618      	mov	r0, r3
 8007298:	f7f9 f878 	bl	800038c <__aeabi_fmul>
 800729c:	4603      	mov	r3, r0
 800729e:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7f8 ff6a 	bl	800017c <__addsf3>
 80072a8:	4603      	mov	r3, r0
 80072aa:	e040      	b.n	800732e <EaseOutBounce+0x116>
    }
    else if (t < 2.5f / d1)
 80072ac:	68b9      	ldr	r1, [r7, #8]
 80072ae:	4824      	ldr	r0, [pc, #144]	@ (8007340 <EaseOutBounce+0x128>)
 80072b0:	f7f9 f920 	bl	80004f4 <__aeabi_fdiv>
 80072b4:	4603      	mov	r3, r0
 80072b6:	4619      	mov	r1, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7f9 fa05 	bl	80006c8 <__aeabi_fcmplt>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d01a      	beq.n	80072fa <EaseOutBounce+0xe2>
    {
        t -= 2.25f / d1;
 80072c4:	68b9      	ldr	r1, [r7, #8]
 80072c6:	481f      	ldr	r0, [pc, #124]	@ (8007344 <EaseOutBounce+0x12c>)
 80072c8:	f7f9 f914 	bl	80004f4 <__aeabi_fdiv>
 80072cc:	4603      	mov	r3, r0
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7f8 ff51 	bl	8000178 <__aeabi_fsub>
 80072d6:	4603      	mov	r3, r0
 80072d8:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.9375f;
 80072da:	6879      	ldr	r1, [r7, #4]
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f7f9 f855 	bl	800038c <__aeabi_fmul>
 80072e2:	4603      	mov	r3, r0
 80072e4:	6879      	ldr	r1, [r7, #4]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7f9 f850 	bl	800038c <__aeabi_fmul>
 80072ec:	4603      	mov	r3, r0
 80072ee:	4916      	ldr	r1, [pc, #88]	@ (8007348 <EaseOutBounce+0x130>)
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7f8 ff43 	bl	800017c <__addsf3>
 80072f6:	4603      	mov	r3, r0
 80072f8:	e019      	b.n	800732e <EaseOutBounce+0x116>
    }
    else
    {
        t -= 2.625f / d1;
 80072fa:	68b9      	ldr	r1, [r7, #8]
 80072fc:	4813      	ldr	r0, [pc, #76]	@ (800734c <EaseOutBounce+0x134>)
 80072fe:	f7f9 f8f9 	bl	80004f4 <__aeabi_fdiv>
 8007302:	4603      	mov	r3, r0
 8007304:	4619      	mov	r1, r3
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7f8 ff36 	bl	8000178 <__aeabi_fsub>
 800730c:	4603      	mov	r3, r0
 800730e:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.984375f;
 8007310:	6879      	ldr	r1, [r7, #4]
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f7f9 f83a 	bl	800038c <__aeabi_fmul>
 8007318:	4603      	mov	r3, r0
 800731a:	6879      	ldr	r1, [r7, #4]
 800731c:	4618      	mov	r0, r3
 800731e:	f7f9 f835 	bl	800038c <__aeabi_fmul>
 8007322:	4603      	mov	r3, r0
 8007324:	490a      	ldr	r1, [pc, #40]	@ (8007350 <EaseOutBounce+0x138>)
 8007326:	4618      	mov	r0, r3
 8007328:	f7f8 ff28 	bl	800017c <__addsf3>
 800732c:	4603      	mov	r3, r0
    }
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	40f20000 	.word	0x40f20000
 800733c:	40300000 	.word	0x40300000
 8007340:	40200000 	.word	0x40200000
 8007344:	40100000 	.word	0x40100000
 8007348:	3f700000 	.word	0x3f700000
 800734c:	40280000 	.word	0x40280000
 8007350:	3f7c0000 	.word	0x3f7c0000

08007354 <EaseInBounce>:

// 反弹缓动
static float EaseInBounce(float t)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
    return 1 - EaseOutBounce(1 - t);
 800735c:	6879      	ldr	r1, [r7, #4]
 800735e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007362:	f7f8 ff09 	bl	8000178 <__aeabi_fsub>
 8007366:	4603      	mov	r3, r0
 8007368:	4618      	mov	r0, r3
 800736a:	f7ff ff55 	bl	8007218 <EaseOutBounce>
 800736e:	4603      	mov	r3, r0
 8007370:	4619      	mov	r1, r3
 8007372:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007376:	f7f8 feff 	bl	8000178 <__aeabi_fsub>
 800737a:	4603      	mov	r3, r0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <EaseInOutBounce>:

static float EaseInOutBounce(float t)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 800738c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7f9 f999 	bl	80006c8 <__aeabi_fcmplt>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d010      	beq.n	80073be <EaseInOutBounce+0x3a>
        return EaseInBounce(t * 2) * 0.5f;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4619      	mov	r1, r3
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7f8 feeb 	bl	800017c <__addsf3>
 80073a6:	4603      	mov	r3, r0
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7ff ffd3 	bl	8007354 <EaseInBounce>
 80073ae:	4603      	mov	r3, r0
 80073b0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7f8 ffe9 	bl	800038c <__aeabi_fmul>
 80073ba:	4603      	mov	r3, r0
 80073bc:	e01b      	b.n	80073f6 <EaseInOutBounce+0x72>
    return EaseOutBounce(t * 2 - 1) * 0.5f + 0.5f;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4619      	mov	r1, r3
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7f8 feda 	bl	800017c <__addsf3>
 80073c8:	4603      	mov	r3, r0
 80073ca:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7f8 fed2 	bl	8000178 <__aeabi_fsub>
 80073d4:	4603      	mov	r3, r0
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7ff ff1e 	bl	8007218 <EaseOutBounce>
 80073dc:	4603      	mov	r3, r0
 80073de:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7f8 ffd2 	bl	800038c <__aeabi_fmul>
 80073e8:	4603      	mov	r3, r0
 80073ea:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7f8 fec4 	bl	800017c <__addsf3>
 80073f4:	4603      	mov	r3, r0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3708      	adds	r7, #8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
	...

08007400 <EaseInBack>:

// 背越式缓动
static float EaseInBack(float t)
{
 8007400:	b590      	push	{r4, r7, lr}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8007408:	4b15      	ldr	r3, [pc, #84]	@ (8007460 <EaseInBack+0x60>)
 800740a:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 800740c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f7f8 feb3 	bl	800017c <__addsf3>
 8007416:	4603      	mov	r3, r0
 8007418:	60bb      	str	r3, [r7, #8]

    return c3 * t * t * t - c1 * t * t;
 800741a:	6879      	ldr	r1, [r7, #4]
 800741c:	68b8      	ldr	r0, [r7, #8]
 800741e:	f7f8 ffb5 	bl	800038c <__aeabi_fmul>
 8007422:	4603      	mov	r3, r0
 8007424:	6879      	ldr	r1, [r7, #4]
 8007426:	4618      	mov	r0, r3
 8007428:	f7f8 ffb0 	bl	800038c <__aeabi_fmul>
 800742c:	4603      	mov	r3, r0
 800742e:	6879      	ldr	r1, [r7, #4]
 8007430:	4618      	mov	r0, r3
 8007432:	f7f8 ffab 	bl	800038c <__aeabi_fmul>
 8007436:	4603      	mov	r3, r0
 8007438:	461c      	mov	r4, r3
 800743a:	6879      	ldr	r1, [r7, #4]
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f7f8 ffa5 	bl	800038c <__aeabi_fmul>
 8007442:	4603      	mov	r3, r0
 8007444:	6879      	ldr	r1, [r7, #4]
 8007446:	4618      	mov	r0, r3
 8007448:	f7f8 ffa0 	bl	800038c <__aeabi_fmul>
 800744c:	4603      	mov	r3, r0
 800744e:	4619      	mov	r1, r3
 8007450:	4620      	mov	r0, r4
 8007452:	f7f8 fe91 	bl	8000178 <__aeabi_fsub>
 8007456:	4603      	mov	r3, r0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	bd90      	pop	{r4, r7, pc}
 8007460:	3fd9cd60 	.word	0x3fd9cd60

08007464 <EaseOutBack>:

static float EaseOutBack(float t)
{
 8007464:	b590      	push	{r4, r7, lr}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 800746c:	4b1c      	ldr	r3, [pc, #112]	@ (80074e0 <EaseOutBack+0x7c>)
 800746e:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8007470:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f7f8 fe81 	bl	800017c <__addsf3>
 800747a:	4603      	mov	r3, r0
 800747c:	60bb      	str	r3, [r7, #8]

    return 1 + c3 * powf(t - 1, 3) + c1 * powf(t - 1, 2);
 800747e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7f8 fe78 	bl	8000178 <__aeabi_fsub>
 8007488:	4603      	mov	r3, r0
 800748a:	4916      	ldr	r1, [pc, #88]	@ (80074e4 <EaseOutBack+0x80>)
 800748c:	4618      	mov	r0, r3
 800748e:	f005 f975 	bl	800c77c <powf>
 8007492:	4603      	mov	r3, r0
 8007494:	68b9      	ldr	r1, [r7, #8]
 8007496:	4618      	mov	r0, r3
 8007498:	f7f8 ff78 	bl	800038c <__aeabi_fmul>
 800749c:	4603      	mov	r3, r0
 800749e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7f8 fe6a 	bl	800017c <__addsf3>
 80074a8:	4603      	mov	r3, r0
 80074aa:	461c      	mov	r4, r3
 80074ac:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7f8 fe61 	bl	8000178 <__aeabi_fsub>
 80074b6:	4603      	mov	r3, r0
 80074b8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80074bc:	4618      	mov	r0, r3
 80074be:	f005 f95d 	bl	800c77c <powf>
 80074c2:	4603      	mov	r3, r0
 80074c4:	68f9      	ldr	r1, [r7, #12]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7f8 ff60 	bl	800038c <__aeabi_fmul>
 80074cc:	4603      	mov	r3, r0
 80074ce:	4619      	mov	r1, r3
 80074d0:	4620      	mov	r0, r4
 80074d2:	f7f8 fe53 	bl	800017c <__addsf3>
 80074d6:	4603      	mov	r3, r0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd90      	pop	{r4, r7, pc}
 80074e0:	3fd9cd60 	.word	0x3fd9cd60
 80074e4:	40400000 	.word	0x40400000

080074e8 <EaseInOutBack>:

static float EaseInOutBack(float t)
{
 80074e8:	b5b0      	push	{r4, r5, r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 80074f0:	4b40      	ldr	r3, [pc, #256]	@ (80075f4 <EaseInOutBack+0x10c>)
 80074f2:	60fb      	str	r3, [r7, #12]
    const float c2 = c1 * 1.525f;
 80074f4:	4940      	ldr	r1, [pc, #256]	@ (80075f8 <EaseInOutBack+0x110>)
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f7f8 ff48 	bl	800038c <__aeabi_fmul>
 80074fc:	4603      	mov	r3, r0
 80074fe:	60bb      	str	r3, [r7, #8]

    if (t < 0.5f)
 8007500:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7f9 f8df 	bl	80006c8 <__aeabi_fcmplt>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d02c      	beq.n	800756a <EaseInOutBack+0x82>
        return (powf(2 * t, 2) * ((c2 + 1) * 2 * t - c2)) / 2;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4619      	mov	r1, r3
 8007514:	4618      	mov	r0, r3
 8007516:	f7f8 fe31 	bl	800017c <__addsf3>
 800751a:	4603      	mov	r3, r0
 800751c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007520:	4618      	mov	r0, r3
 8007522:	f005 f92b 	bl	800c77c <powf>
 8007526:	4604      	mov	r4, r0
 8007528:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800752c:	68b8      	ldr	r0, [r7, #8]
 800752e:	f7f8 fe25 	bl	800017c <__addsf3>
 8007532:	4603      	mov	r3, r0
 8007534:	4619      	mov	r1, r3
 8007536:	4618      	mov	r0, r3
 8007538:	f7f8 fe20 	bl	800017c <__addsf3>
 800753c:	4603      	mov	r3, r0
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	4618      	mov	r0, r3
 8007542:	f7f8 ff23 	bl	800038c <__aeabi_fmul>
 8007546:	4603      	mov	r3, r0
 8007548:	68b9      	ldr	r1, [r7, #8]
 800754a:	4618      	mov	r0, r3
 800754c:	f7f8 fe14 	bl	8000178 <__aeabi_fsub>
 8007550:	4603      	mov	r3, r0
 8007552:	4619      	mov	r1, r3
 8007554:	4620      	mov	r0, r4
 8007556:	f7f8 ff19 	bl	800038c <__aeabi_fmul>
 800755a:	4603      	mov	r3, r0
 800755c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007560:	4618      	mov	r0, r3
 8007562:	f7f8 ffc7 	bl	80004f4 <__aeabi_fdiv>
 8007566:	4603      	mov	r3, r0
 8007568:	e03f      	b.n	80075ea <EaseInOutBack+0x102>
    return (powf(2 * t - 2, 2) * ((c2 + 1) * (t * 2 - 2) + c2) + 2) / 2;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4619      	mov	r1, r3
 800756e:	4618      	mov	r0, r3
 8007570:	f7f8 fe04 	bl	800017c <__addsf3>
 8007574:	4603      	mov	r3, r0
 8007576:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800757a:	4618      	mov	r0, r3
 800757c:	f7f8 fdfc 	bl	8000178 <__aeabi_fsub>
 8007580:	4603      	mov	r3, r0
 8007582:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007586:	4618      	mov	r0, r3
 8007588:	f005 f8f8 	bl	800c77c <powf>
 800758c:	4604      	mov	r4, r0
 800758e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007592:	68b8      	ldr	r0, [r7, #8]
 8007594:	f7f8 fdf2 	bl	800017c <__addsf3>
 8007598:	4603      	mov	r3, r0
 800759a:	461d      	mov	r5, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4619      	mov	r1, r3
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7f8 fdeb 	bl	800017c <__addsf3>
 80075a6:	4603      	mov	r3, r0
 80075a8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7f8 fde3 	bl	8000178 <__aeabi_fsub>
 80075b2:	4603      	mov	r3, r0
 80075b4:	4619      	mov	r1, r3
 80075b6:	4628      	mov	r0, r5
 80075b8:	f7f8 fee8 	bl	800038c <__aeabi_fmul>
 80075bc:	4603      	mov	r3, r0
 80075be:	68b9      	ldr	r1, [r7, #8]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7f8 fddb 	bl	800017c <__addsf3>
 80075c6:	4603      	mov	r3, r0
 80075c8:	4619      	mov	r1, r3
 80075ca:	4620      	mov	r0, r4
 80075cc:	f7f8 fede 	bl	800038c <__aeabi_fmul>
 80075d0:	4603      	mov	r3, r0
 80075d2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7f8 fdd0 	bl	800017c <__addsf3>
 80075dc:	4603      	mov	r3, r0
 80075de:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7f8 ff86 	bl	80004f4 <__aeabi_fdiv>
 80075e8:	4603      	mov	r3, r0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bdb0      	pop	{r4, r5, r7, pc}
 80075f2:	bf00      	nop
 80075f4:	3fd9cd60 	.word	0x3fd9cd60
 80075f8:	3fc33333 	.word	0x3fc33333

080075fc <EaseInSine>:

// 正弦缓动
static float EaseInSine(float t)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
    return 1 - cosf((t * 3.14159f) / 2);
 8007604:	490c      	ldr	r1, [pc, #48]	@ (8007638 <EaseInSine+0x3c>)
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7f8 fec0 	bl	800038c <__aeabi_fmul>
 800760c:	4603      	mov	r3, r0
 800760e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007612:	4618      	mov	r0, r3
 8007614:	f7f8 ff6e 	bl	80004f4 <__aeabi_fdiv>
 8007618:	4603      	mov	r3, r0
 800761a:	4618      	mov	r0, r3
 800761c:	f005 f916 	bl	800c84c <cosf>
 8007620:	4603      	mov	r3, r0
 8007622:	4619      	mov	r1, r3
 8007624:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007628:	f7f8 fda6 	bl	8000178 <__aeabi_fsub>
 800762c:	4603      	mov	r3, r0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	40490fd0 	.word	0x40490fd0

0800763c <EaseOutSine>:

static float EaseOutSine(float t)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
    return sinf((t * 3.14159f) / 2);
 8007644:	4909      	ldr	r1, [pc, #36]	@ (800766c <EaseOutSine+0x30>)
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7f8 fea0 	bl	800038c <__aeabi_fmul>
 800764c:	4603      	mov	r3, r0
 800764e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007652:	4618      	mov	r0, r3
 8007654:	f7f8 ff4e 	bl	80004f4 <__aeabi_fdiv>
 8007658:	4603      	mov	r3, r0
 800765a:	4618      	mov	r0, r3
 800765c:	f005 f92e 	bl	800c8bc <sinf>
 8007660:	4603      	mov	r3, r0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	40490fd0 	.word	0x40490fd0

08007670 <EaseInOutSine>:

static float EaseInOutSine(float t)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
    return -(cosf(3.14159f * t) - 1) / 2;
 8007678:	490d      	ldr	r1, [pc, #52]	@ (80076b0 <EaseInOutSine+0x40>)
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7f8 fe86 	bl	800038c <__aeabi_fmul>
 8007680:	4603      	mov	r3, r0
 8007682:	4618      	mov	r0, r3
 8007684:	f005 f8e2 	bl	800c84c <cosf>
 8007688:	4603      	mov	r3, r0
 800768a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800768e:	4618      	mov	r0, r3
 8007690:	f7f8 fd72 	bl	8000178 <__aeabi_fsub>
 8007694:	4603      	mov	r3, r0
 8007696:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800769a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800769e:	4618      	mov	r0, r3
 80076a0:	f7f8 ff28 	bl	80004f4 <__aeabi_fdiv>
 80076a4:	4603      	mov	r3, r0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	40490fd0 	.word	0x40490fd0

080076b4 <GetEaseValue>:

static float GetEaseValue(float progress, EaseType_t easeType)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	460b      	mov	r3, r1
 80076be:	70fb      	strb	r3, [r7, #3]
    switch (easeType)
 80076c0:	78fb      	ldrb	r3, [r7, #3]
 80076c2:	2b18      	cmp	r3, #24
 80076c4:	f200 80b3 	bhi.w	800782e <GetEaseValue+0x17a>
 80076c8:	a201      	add	r2, pc, #4	@ (adr r2, 80076d0 <GetEaseValue+0x1c>)
 80076ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ce:	bf00      	nop
 80076d0:	08007735 	.word	0x08007735
 80076d4:	0800773f 	.word	0x0800773f
 80076d8:	08007749 	.word	0x08007749
 80076dc:	08007753 	.word	0x08007753
 80076e0:	0800775d 	.word	0x0800775d
 80076e4:	08007767 	.word	0x08007767
 80076e8:	08007771 	.word	0x08007771
 80076ec:	0800777b 	.word	0x0800777b
 80076f0:	08007785 	.word	0x08007785
 80076f4:	0800778f 	.word	0x0800778f
 80076f8:	08007799 	.word	0x08007799
 80076fc:	080077a3 	.word	0x080077a3
 8007700:	080077ad 	.word	0x080077ad
 8007704:	080077b7 	.word	0x080077b7
 8007708:	080077c1 	.word	0x080077c1
 800770c:	080077cb 	.word	0x080077cb
 8007710:	080077d5 	.word	0x080077d5
 8007714:	080077df 	.word	0x080077df
 8007718:	080077e9 	.word	0x080077e9
 800771c:	080077f3 	.word	0x080077f3
 8007720:	080077fd 	.word	0x080077fd
 8007724:	08007807 	.word	0x08007807
 8007728:	08007811 	.word	0x08007811
 800772c:	0800781b 	.word	0x0800781b
 8007730:	08007825 	.word	0x08007825
    {
    case EASE_LINEAR:
        return EaseLinear(progress);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7ff fa15 	bl	8006b64 <EaseLinear>
 800773a:	4603      	mov	r3, r0
 800773c:	e078      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_IN_QUAD:
        return EaseInQuad(progress);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7ff fa1a 	bl	8006b78 <EaseInQuad>
 8007744:	4603      	mov	r3, r0
 8007746:	e073      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_OUT_QUAD:
        return EaseOutQuad(progress);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7ff fa22 	bl	8006b92 <EaseOutQuad>
 800774e:	4603      	mov	r3, r0
 8007750:	e06e      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_INOUT_QUAD:
        return EaseInOutQuad(progress);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7ff fa30 	bl	8006bb8 <EaseInOutQuad>
 8007758:	4603      	mov	r3, r0
 800775a:	e069      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_IN_CUBIC:
        return EaseInCubic(progress);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f7ff fa5e 	bl	8006c1e <EaseInCubic>
 8007762:	4603      	mov	r3, r0
 8007764:	e064      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_OUT_CUBIC:
        return EaseOutCubic(progress);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7ff fa6b 	bl	8006c42 <EaseOutCubic>
 800776c:	4603      	mov	r3, r0
 800776e:	e05f      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_INOUT_CUBIC:
        return EaseInOutCubic(progress);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff fa85 	bl	8006c80 <EaseInOutCubic>
 8007776:	4603      	mov	r3, r0
 8007778:	e05a      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_IN_EXPO:
        return EaseInExpo(progress);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7ff fad2 	bl	8006d24 <EaseInExpo>
 8007780:	4603      	mov	r3, r0
 8007782:	e055      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_OUT_EXPO:
        return EaseOutExpo(progress);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7ff faf3 	bl	8006d70 <EaseOutExpo>
 800778a:	4603      	mov	r3, r0
 800778c:	e050      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_INOUT_EXPO:
        return EaseInOutExpo(progress);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7ff fb14 	bl	8006dbc <EaseInOutExpo>
 8007794:	4603      	mov	r3, r0
 8007796:	e04b      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_IN_CIRC:
        return EaseInCirc(progress);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7ff fb6f 	bl	8006e7c <EaseInCirc>
 800779e:	4603      	mov	r3, r0
 80077a0:	e046      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_OUT_CIRC:
        return EaseOutCirc(progress);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7ff fb87 	bl	8006eb6 <EaseOutCirc>
 80077a8:	4603      	mov	r3, r0
 80077aa:	e041      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_INOUT_CIRC:
        return EaseInOutCirc(progress);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f7ff fba0 	bl	8006ef2 <EaseInOutCirc>
 80077b2:	4603      	mov	r3, r0
 80077b4:	e03c      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_IN_ELASTIC:
        return EaseInElastic(progress);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7ff fbf6 	bl	8006fa8 <EaseInElastic>
 80077bc:	4603      	mov	r3, r0
 80077be:	e037      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_OUT_ELASTIC:
        return EaseOutElastic(progress);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7ff fc41 	bl	8007048 <EaseOutElastic>
 80077c6:	4603      	mov	r3, r0
 80077c8:	e032      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_INOUT_ELASTIC:
        return EaseInOutElastic(progress);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7ff fc8c 	bl	80070e8 <EaseInOutElastic>
 80077d0:	4603      	mov	r3, r0
 80077d2:	e02d      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_IN_BOUNCE:
        return EaseInBounce(progress);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7ff fdbd 	bl	8007354 <EaseInBounce>
 80077da:	4603      	mov	r3, r0
 80077dc:	e028      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_OUT_BOUNCE:
        return EaseOutBounce(progress);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7ff fd1a 	bl	8007218 <EaseOutBounce>
 80077e4:	4603      	mov	r3, r0
 80077e6:	e023      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_INOUT_BOUNCE:
        return EaseInOutBounce(progress);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff fdcb 	bl	8007384 <EaseInOutBounce>
 80077ee:	4603      	mov	r3, r0
 80077f0:	e01e      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_IN_BACK:
        return EaseInBack(progress);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7ff fe04 	bl	8007400 <EaseInBack>
 80077f8:	4603      	mov	r3, r0
 80077fa:	e019      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_OUT_BACK:
        return EaseOutBack(progress);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7ff fe31 	bl	8007464 <EaseOutBack>
 8007802:	4603      	mov	r3, r0
 8007804:	e014      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_INOUT_BACK:
        return EaseInOutBack(progress);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f7ff fe6e 	bl	80074e8 <EaseInOutBack>
 800780c:	4603      	mov	r3, r0
 800780e:	e00f      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_IN_SINE:
        return EaseInSine(progress);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f7ff fef3 	bl	80075fc <EaseInSine>
 8007816:	4603      	mov	r3, r0
 8007818:	e00a      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_OUT_SINE:
        return EaseOutSine(progress);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7ff ff0e 	bl	800763c <EaseOutSine>
 8007820:	4603      	mov	r3, r0
 8007822:	e005      	b.n	8007830 <GetEaseValue+0x17c>
    case EASE_INOUT_SINE:
        return EaseInOutSine(progress);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff ff23 	bl	8007670 <EaseInOutSine>
 800782a:	4603      	mov	r3, r0
 800782c:	e000      	b.n	8007830 <GetEaseValue+0x17c>
    default:
        return progress;
 800782e:	687b      	ldr	r3, [r7, #4]
    }
}
 8007830:	4618      	mov	r0, r3
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <OLED_InitAnimation>:

#pragma region ANIMATIONTWEENS
// 这里是底层动画实现
void OLED_InitAnimation(Animation_t *anim, float startValue, float endValue,
                        uint32_t duration, EaseType_t easeType)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
 8007844:	603b      	str	r3, [r7, #0]
    anim->startTime = HAL_GetTick();
 8007846:	f001 f92b 	bl	8008aa0 <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	601a      	str	r2, [r3, #0]
    anim->duration = duration;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	605a      	str	r2, [r3, #4]
    anim->startValue = startValue;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	609a      	str	r2, [r3, #8]
    anim->endValue = endValue;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	60da      	str	r2, [r3, #12]
    anim->currentValue = startValue;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	611a      	str	r2, [r3, #16]
    anim->isActive = 1;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2201      	movs	r2, #1
 800786c:	751a      	strb	r2, [r3, #20]
    anim->easeType = easeType;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	7e3a      	ldrb	r2, [r7, #24]
 8007872:	755a      	strb	r2, [r3, #21]
}
 8007874:	bf00      	nop
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <OLED_UpdateAnimation>:

// 更新动画状态，返回isActive的值
uint8_t OLED_UpdateAnimation(Animation_t *anim, uint32_t currentTime)
{
 800787c:	b590      	push	{r4, r7, lr}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
    if (!anim->isActive)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	7d1b      	ldrb	r3, [r3, #20]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <OLED_UpdateAnimation+0x16>
        return 0;
 800788e:	2300      	movs	r3, #0
 8007890:	e04d      	b.n	800792e <OLED_UpdateAnimation+0xb2>

    uint32_t elapsedTime = currentTime - anim->startTime;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	617b      	str	r3, [r7, #20]
    // 动画完成
    if (elapsedTime >= anim->duration || anim->currentValue == anim->endValue) // 如果我的目标在指定的点上，也关闭isActive
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d20a      	bcs.n	80078bc <OLED_UpdateAnimation+0x40>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	691a      	ldr	r2, [r3, #16]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	4619      	mov	r1, r3
 80078b0:	4610      	mov	r0, r2
 80078b2:	f7f8 feff 	bl	80006b4 <__aeabi_fcmpeq>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d008      	beq.n	80078ce <OLED_UpdateAnimation+0x52>
    {
        anim->currentValue = anim->endValue;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	68da      	ldr	r2, [r3, #12]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	611a      	str	r2, [r3, #16]
        anim->isActive = 0;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	751a      	strb	r2, [r3, #20]
        return 0;
 80078ca:	2300      	movs	r3, #0
 80078cc:	e02f      	b.n	800792e <OLED_UpdateAnimation+0xb2>
    }

    // 计算当前进度 (0.0 - 1.0)
    float progress = (float)elapsedTime / anim->duration;
 80078ce:	6978      	ldr	r0, [r7, #20]
 80078d0:	f7f8 fd04 	bl	80002dc <__aeabi_ui2f>
 80078d4:	4604      	mov	r4, r0
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	4618      	mov	r0, r3
 80078dc:	f7f8 fcfe 	bl	80002dc <__aeabi_ui2f>
 80078e0:	4603      	mov	r3, r0
 80078e2:	4619      	mov	r1, r3
 80078e4:	4620      	mov	r0, r4
 80078e6:	f7f8 fe05 	bl	80004f4 <__aeabi_fdiv>
 80078ea:	4603      	mov	r3, r0
 80078ec:	613b      	str	r3, [r7, #16]

    // 应用缓动函数
    float easedProgress = GetEaseValue(progress, anim->easeType);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	7d5b      	ldrb	r3, [r3, #21]
 80078f2:	4619      	mov	r1, r3
 80078f4:	6938      	ldr	r0, [r7, #16]
 80078f6:	f7ff fedd 	bl	80076b4 <GetEaseValue>
 80078fa:	60f8      	str	r0, [r7, #12]

    // 计算当前值
    anim->currentValue = anim->startValue + (anim->endValue - anim->startValue) * easedProgress;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	689c      	ldr	r4, [r3, #8]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68da      	ldr	r2, [r3, #12]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	4619      	mov	r1, r3
 800790a:	4610      	mov	r0, r2
 800790c:	f7f8 fc34 	bl	8000178 <__aeabi_fsub>
 8007910:	4603      	mov	r3, r0
 8007912:	68f9      	ldr	r1, [r7, #12]
 8007914:	4618      	mov	r0, r3
 8007916:	f7f8 fd39 	bl	800038c <__aeabi_fmul>
 800791a:	4603      	mov	r3, r0
 800791c:	4619      	mov	r1, r3
 800791e:	4620      	mov	r0, r4
 8007920:	f7f8 fc2c 	bl	800017c <__addsf3>
 8007924:	4603      	mov	r3, r0
 8007926:	461a      	mov	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	611a      	str	r2, [r3, #16]

    return 1;
 800792c:	2301      	movs	r3, #1
}
 800792e:	4618      	mov	r0, r3
 8007930:	371c      	adds	r7, #28
 8007932:	46bd      	mov	sp, r7
 8007934:	bd90      	pop	{r4, r7, pc}

08007936 <OLED_GetAnimationValue>:

// 获取当前动画值
float OLED_GetAnimationValue(Animation_t *anim)
{
 8007936:	b480      	push	{r7}
 8007938:	b083      	sub	sp, #12
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
    return anim->currentValue;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	691b      	ldr	r3, [r3, #16]
}
 8007942:	4618      	mov	r0, r3
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	bc80      	pop	{r7}
 800794a:	4770      	bx	lr

0800794c <OLED_InitAnimationManager>:
AnimationManager_t Status_AnimationManager;
AnimationManager_t g_Title_AnimationManager; // 菜单动画管理器
AnimationManager_t g_AnimationManager; // 全局动画管理器

void OLED_InitAnimationManager(AnimationManager_t *manager) // 这是初始化一个动画管理器，填入你的manager名字，在系统初始化时候调用它
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
    manager->count = 0;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 25f0 	strb.w	r2, [r3, #1520]	@ 0x5f0
    memset(manager->taggedAnimations, 0, sizeof(manager->taggedAnimations));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 8007962:	2100      	movs	r1, #0
 8007964:	4618      	mov	r0, r3
 8007966:	f003 fe9e 	bl	800b6a6 <memset>
}
 800796a:	bf00      	nop
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <OLED_FindTaggedAnimation>:

TaggedAnimation_t *OLED_FindTaggedAnimation(AnimationManager_t *manager, const char *tag) // 查找对应manager的标签对应的动画tag
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b084      	sub	sp, #16
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
 800797a:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < manager->count; i++)
 800797c:	2300      	movs	r3, #0
 800797e:	73fb      	strb	r3, [r7, #15]
 8007980:	e016      	b.n	80079b0 <OLED_FindTaggedAnimation+0x3e>
    {
        if (strcmp(manager->taggedAnimations[i].tag, tag) == 0)
 8007982:	7bfb      	ldrb	r3, [r7, #15]
 8007984:	224c      	movs	r2, #76	@ 0x4c
 8007986:	fb02 f303 	mul.w	r3, r2, r3
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	4413      	add	r3, r2
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	4618      	mov	r0, r3
 8007992:	f7f8 fbdb 	bl	800014c <strcmp>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d106      	bne.n	80079aa <OLED_FindTaggedAnimation+0x38>
        {
            return &manager->taggedAnimations[i];
 800799c:	7bfb      	ldrb	r3, [r7, #15]
 800799e:	224c      	movs	r2, #76	@ 0x4c
 80079a0:	fb02 f303 	mul.w	r3, r2, r3
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	4413      	add	r3, r2
 80079a8:	e009      	b.n	80079be <OLED_FindTaggedAnimation+0x4c>
    for (uint8_t i = 0; i < manager->count; i++)
 80079aa:	7bfb      	ldrb	r3, [r7, #15]
 80079ac:	3301      	adds	r3, #1
 80079ae:	73fb      	strb	r3, [r7, #15]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 80079b6:	7bfa      	ldrb	r2, [r7, #15]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d3e2      	bcc.n	8007982 <OLED_FindTaggedAnimation+0x10>
        }
    }
    return NULL;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <OLED_GetObjectPosition>:

uint8_t OLED_GetObjectPosition(AnimationManager_t *manager, const char *tag, float *x, float *y) // 获取tag当前位置
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b086      	sub	sp, #24
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	60f8      	str	r0, [r7, #12]
 80079ce:	60b9      	str	r1, [r7, #8]
 80079d0:	607a      	str	r2, [r7, #4]
 80079d2:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 80079d4:	68b9      	ldr	r1, [r7, #8]
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f7ff ffcb 	bl	8007972 <OLED_FindTaggedAnimation>
 80079dc:	6178      	str	r0, [r7, #20]
    if (anim)
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00f      	beq.n	8007a04 <OLED_GetObjectPosition+0x3e>
    {
        if (x)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d003      	beq.n	80079f2 <OLED_GetObjectPosition+0x2c>
            *x = anim->currentX;
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	601a      	str	r2, [r3, #0]
        if (y)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d003      	beq.n	8007a00 <OLED_GetObjectPosition+0x3a>
            *y = anim->currentY;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	601a      	str	r2, [r3, #0]
        return 1;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e000      	b.n	8007a06 <OLED_GetObjectPosition+0x40>
    }
    return 0;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3718      	adds	r7, #24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <OLED_MoveObject>:

// 移动指定标签的对象
void OLED_MoveObject(AnimationManager_t *manager, const char *tag,
                     float startX, float startY, float targetX, float targetY,
                     uint32_t duration, EaseType_t easeType) // 这个函数是用来移动一个对象的，tag是对象的标签，startX和startY是起始坐标，targetX和targetY是目标坐标，duration是动画持续时间，easeType是缓动类型
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b088      	sub	sp, #32
 8007a12:	af02      	add	r7, sp, #8
 8007a14:	60f8      	str	r0, [r7, #12]
 8007a16:	60b9      	str	r1, [r7, #8]
 8007a18:	607a      	str	r2, [r7, #4]
 8007a1a:	603b      	str	r3, [r7, #0]
    // 查找已存在的动画
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8007a1c:	68b9      	ldr	r1, [r7, #8]
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f7ff ffa7 	bl	8007972 <OLED_FindTaggedAnimation>
 8007a24:	6178      	str	r0, [r7, #20]

    // 如果没找到并且还有可用槽位，创建新的动画
    if (anim == NULL)
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d122      	bne.n	8007a72 <OLED_MoveObject+0x64>
    {
        if (manager->count >= MAX_ANIMATIONS)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8007a32:	2b13      	cmp	r3, #19
 8007a34:	d838      	bhi.n	8007aa8 <OLED_MoveObject+0x9a>
            return; // 动画已满，无法添加

        anim = &manager->taggedAnimations[manager->count++];
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	b2d1      	uxtb	r1, r2
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	f882 15f0 	strb.w	r1, [r2, #1520]	@ 0x5f0
 8007a46:	461a      	mov	r2, r3
 8007a48:	234c      	movs	r3, #76	@ 0x4c
 8007a4a:	fb02 f303 	mul.w	r3, r2, r3
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	4413      	add	r3, r2
 8007a52:	617b      	str	r3, [r7, #20]
        strncpy(anim->tag, tag, sizeof(anim->tag) - 1);
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	220f      	movs	r2, #15
 8007a58:	68b9      	ldr	r1, [r7, #8]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f003 fe2b 	bl	800b6b6 <strncpy>
        anim->tag[sizeof(anim->tag) - 1] = '\0'; // 确保字符串结束
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	2200      	movs	r2, #0
 8007a64:	73da      	strb	r2, [r3, #15]
        anim->currentX = startX;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = startY;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // 初始化或更新X和Y坐标的动画
    OLED_InitAnimation(&anim->xAnimation, startX, targetX, duration, easeType);
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f103 0010 	add.w	r0, r3, #16
 8007a78:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a80:	6a3a      	ldr	r2, [r7, #32]
 8007a82:	6879      	ldr	r1, [r7, #4]
 8007a84:	f7ff fed8 	bl	8007838 <OLED_InitAnimation>
    OLED_InitAnimation(&anim->yAnimation, startY, targetY, duration, easeType);
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8007a8e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	f7ff fecd 	bl	8007838 <OLED_InitAnimation>
    anim->isActive = 1;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007aa6:	e000      	b.n	8007aaa <OLED_MoveObject+0x9c>
            return; // 动画已满，无法添加
 8007aa8:	bf00      	nop
}
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <OLED_UpdateAnimationManager>:

// 更新manager里面的所有动画!
void OLED_UpdateAnimationManager(AnimationManager_t *manager) //! 这里需要使用OLED_UpdateDisplayVSync()来更新显示
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 8007ab8:	f000 fff2 	bl	8008aa0 <HAL_GetTick>
 8007abc:	6138      	str	r0, [r7, #16]

    for (uint8_t i = 0; i < manager->count; i++)
 8007abe:	2300      	movs	r3, #0
 8007ac0:	75fb      	strb	r3, [r7, #23]
 8007ac2:	e03a      	b.n	8007b3a <OLED_UpdateAnimationManager+0x8a>
    {
        TaggedAnimation_t *anim = &manager->taggedAnimations[i];
 8007ac4:	7dfb      	ldrb	r3, [r7, #23]
 8007ac6:	224c      	movs	r2, #76	@ 0x4c
 8007ac8:	fb02 f303 	mul.w	r3, r2, r3
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	4413      	add	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]
        if (!anim->isActive)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d02a      	beq.n	8007b32 <OLED_UpdateAnimationManager+0x82>
            continue;

        uint8_t activeX = OLED_UpdateAnimation(&anim->xAnimation, currentTime);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	3310      	adds	r3, #16
 8007ae0:	6939      	ldr	r1, [r7, #16]
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7ff feca 	bl	800787c <OLED_UpdateAnimation>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	72fb      	strb	r3, [r7, #11]
        uint8_t activeY = OLED_UpdateAnimation(&anim->yAnimation, currentTime);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	3328      	adds	r3, #40	@ 0x28
 8007af0:	6939      	ldr	r1, [r7, #16]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7ff fec2 	bl	800787c <OLED_UpdateAnimation>
 8007af8:	4603      	mov	r3, r0
 8007afa:	72bb      	strb	r3, [r7, #10]

        anim->currentX = OLED_GetAnimationValue(&anim->xAnimation);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3310      	adds	r3, #16
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7ff ff18 	bl	8007936 <OLED_GetAnimationValue>
 8007b06:	4602      	mov	r2, r0
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = OLED_GetAnimationValue(&anim->yAnimation);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	3328      	adds	r3, #40	@ 0x28
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7ff ff10 	bl	8007936 <OLED_GetAnimationValue>
 8007b16:	4602      	mov	r2, r0
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	649a      	str	r2, [r3, #72]	@ 0x48

        // 如果两个动画都结束，则标记该对象动画为非活跃
        if (!activeX && !activeY)
 8007b1c:	7afb      	ldrb	r3, [r7, #11]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d108      	bne.n	8007b34 <OLED_UpdateAnimationManager+0x84>
 8007b22:	7abb      	ldrb	r3, [r7, #10]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d105      	bne.n	8007b34 <OLED_UpdateAnimationManager+0x84>
            anim->isActive = 0;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b30:	e000      	b.n	8007b34 <OLED_UpdateAnimationManager+0x84>
            continue;
 8007b32:	bf00      	nop
    for (uint8_t i = 0; i < manager->count; i++)
 8007b34:	7dfb      	ldrb	r3, [r7, #23]
 8007b36:	3301      	adds	r3, #1
 8007b38:	75fb      	strb	r3, [r7, #23]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8007b40:	7dfa      	ldrb	r2, [r7, #23]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d3be      	bcc.n	8007ac4 <OLED_UpdateAnimationManager+0x14>
    }
}
 8007b46:	bf00      	nop
 8007b48:	bf00      	nop
 8007b4a:	3718      	adds	r7, #24
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <OLED_GetAnimationStates>:

uint8_t OLED_GetAnimationStates(AnimationManager_t *manager, const char *tag) // 返回值是1表示活跃，0表示非活跃
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f7ff ff08 	bl	8007972 <OLED_FindTaggedAnimation>
 8007b62:	60f8      	str	r0, [r7, #12]
    if (anim)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <OLED_GetAnimationStates+0x22>
    {
        return anim->isActive;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b70:	e000      	b.n	8007b74 <OLED_GetAnimationStates+0x24>
    }
    return 0; // 如果没有找到，返回0表示非活跃
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <OLED_DoTweenObject>:

// 移动指定标签的对象到目标坐标。
// 如果对象已在向同一目标动画且动画处于活动状态，则不执行任何操作。
// 否则，它会中断当前动画（如果活动）并从当前位置开始新的动画。
void OLED_DoTweenObject(AnimationManager_t *manager, const char *tag, float targetX, float targetY, uint32_t duration, EaseType_t easeType)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b08a      	sub	sp, #40	@ 0x28
 8007b80:	af04      	add	r7, sp, #16
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
 8007b88:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8007b8a:	68b9      	ldr	r1, [r7, #8]
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f7ff fef0 	bl	8007972 <OLED_FindTaggedAnimation>
 8007b92:	6178      	str	r0, [r7, #20]

    if (anim == NULL)
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d029      	beq.n	8007bee <OLED_DoTweenObject+0x72>
        // 但这需要为新对象定义 initialX, initialY。
        return;
    }

    // 检查动画是否已处于活动状态并且已经朝向相同的目标
    if (anim->isActive &&
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d011      	beq.n	8007bc8 <OLED_DoTweenObject+0x4c>
        anim->xAnimation.endValue == targetX &&
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	69db      	ldr	r3, [r3, #28]
    if (anim->isActive &&
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7f8 fd82 	bl	80006b4 <__aeabi_fcmpeq>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d008      	beq.n	8007bc8 <OLED_DoTweenObject+0x4c>
        anim->yAnimation.endValue == targetY)
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        anim->xAnimation.endValue == targetX &&
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6838      	ldr	r0, [r7, #0]
 8007bbe:	f7f8 fd79 	bl	80006b4 <__aeabi_fcmpeq>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d114      	bne.n	8007bf2 <OLED_DoTweenObject+0x76>
        return;
    }

    // 否则，（重新）启动动画到新目标
    // OLED_MoveObject 将从 anim->currentX, anim->currentY 开始动画
    OLED_MoveObject(manager, tag, anim->currentX, anim->currentY, targetX, targetY, duration, easeType);
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8007bd0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007bd4:	9303      	str	r3, [sp, #12]
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	9302      	str	r3, [sp, #8]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	9301      	str	r3, [sp, #4]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	460b      	mov	r3, r1
 8007be4:	68b9      	ldr	r1, [r7, #8]
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f7ff ff11 	bl	8007a0e <OLED_MoveObject>
 8007bec:	e002      	b.n	8007bf4 <OLED_DoTweenObject+0x78>
        return;
 8007bee:	bf00      	nop
 8007bf0:	e000      	b.n	8007bf4 <OLED_DoTweenObject+0x78>
        return;
 8007bf2:	bf00      	nop
}
 8007bf4:	3718      	adds	r7, #24
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <OLED_MoveObjectAxis>:

// 为X或Y轴单独创建动画的函数
void OLED_MoveObjectAxis(AnimationManager_t *manager, const char *tag,
                         float startX, float startY, float targetX, float targetY,
                         uint32_t duration, EaseType_t easeType, bool onlyX, bool onlyY)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b088      	sub	sp, #32
 8007bfe:	af02      	add	r7, sp, #8
 8007c00:	60f8      	str	r0, [r7, #12]
 8007c02:	60b9      	str	r1, [r7, #8]
 8007c04:	607a      	str	r2, [r7, #4]
 8007c06:	603b      	str	r3, [r7, #0]
    // 查找已存在的动画
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8007c08:	68b9      	ldr	r1, [r7, #8]
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f7ff feb1 	bl	8007972 <OLED_FindTaggedAnimation>
 8007c10:	6178      	str	r0, [r7, #20]

    // 如果没找到并且还有可用槽位，创建新的动画
    if (anim == NULL)
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d122      	bne.n	8007c5e <OLED_MoveObjectAxis+0x64>
    {
        if (manager->count >= MAX_ANIMATIONS)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8007c1e:	2b13      	cmp	r3, #19
 8007c20:	d846      	bhi.n	8007cb0 <OLED_MoveObjectAxis+0xb6>
            return; // 动画已满，无法添加

        anim = &manager->taggedAnimations[manager->count++];
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8007c28:	1c5a      	adds	r2, r3, #1
 8007c2a:	b2d1      	uxtb	r1, r2
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	f882 15f0 	strb.w	r1, [r2, #1520]	@ 0x5f0
 8007c32:	461a      	mov	r2, r3
 8007c34:	234c      	movs	r3, #76	@ 0x4c
 8007c36:	fb02 f303 	mul.w	r3, r2, r3
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	617b      	str	r3, [r7, #20]
        strncpy(anim->tag, tag, sizeof(anim->tag) - 1);
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	220f      	movs	r2, #15
 8007c44:	68b9      	ldr	r1, [r7, #8]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f003 fd35 	bl	800b6b6 <strncpy>
        anim->tag[sizeof(anim->tag) - 1] = '\0'; // 确保字符串结束
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	73da      	strb	r2, [r3, #15]
        anim->currentX = startX;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = startY;
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // 只初始化需要的轴的动画
    if (!onlyY) // 如果不是只修改Y轴，就修改X轴
 8007c5e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8007c62:	f083 0301 	eor.w	r3, r3, #1
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00a      	beq.n	8007c82 <OLED_MoveObjectAxis+0x88>
        OLED_InitAnimation(&anim->xAnimation, startX, targetX, duration, easeType);
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	f103 0010 	add.w	r0, r3, #16
 8007c72:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7a:	6a3a      	ldr	r2, [r7, #32]
 8007c7c:	6879      	ldr	r1, [r7, #4]
 8007c7e:	f7ff fddb 	bl	8007838 <OLED_InitAnimation>
    if (!onlyX) // 如果不是只修改X轴，就修改Y轴
 8007c82:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8007c86:	f083 0301 	eor.w	r3, r3, #1
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00a      	beq.n	8007ca6 <OLED_MoveObjectAxis+0xac>
        OLED_InitAnimation(&anim->yAnimation, startY, targetY, duration, easeType);
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8007c96:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	f7ff fdc9 	bl	8007838 <OLED_InitAnimation>

    anim->isActive = 1;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cae:	e000      	b.n	8007cb2 <OLED_MoveObjectAxis+0xb8>
            return; // 动画已满，无法添加
 8007cb0:	bf00      	nop
}
 8007cb2:	3718      	adds	r7, #24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <OLED_DoTweenObjectX>:

// 这个函数是用来移动一个对象的，tag是对象的标签，targetX是目标坐标，duration是动画持续时间，easeType是缓动类型
//! 这里不可以在while里面调用！为一次性调用
void OLED_DoTweenObjectX(AnimationManager_t *manager, const char *tag, float targetX, uint32_t duration, EaseType_t easeType)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b08c      	sub	sp, #48	@ 0x30
 8007cbc:	af06      	add	r7, sp, #24
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
 8007cc4:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8007cc6:	68b9      	ldr	r1, [r7, #8]
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f7ff fe52 	bl	8007972 <OLED_FindTaggedAnimation>
 8007cce:	6178      	str	r0, [r7, #20]
    if (anim && anim->currentX != targetX)
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d021      	beq.n	8007d1a <OLED_DoTweenObjectX+0x62>
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7f8 fce9 	bl	80006b4 <__aeabi_fcmpeq>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d000      	beq.n	8007cea <OLED_DoTweenObjectX+0x32>
    {
        OLED_MoveObjectAxis(manager, tag, anim->currentX, anim->currentY, targetX, anim->currentY, duration, easeType, true, false);
    }
}
 8007ce8:	e017      	b.n	8007d1a <OLED_DoTweenObjectX+0x62>
        OLED_MoveObjectAxis(manager, tag, anim->currentX, anim->currentY, targetX, anim->currentY, duration, easeType, true, false);
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	9205      	str	r2, [sp, #20]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	9204      	str	r2, [sp, #16]
 8007cfe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007d02:	9203      	str	r2, [sp, #12]
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	9202      	str	r2, [sp, #8]
 8007d08:	9301      	str	r3, [sp, #4]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	4603      	mov	r3, r0
 8007d10:	460a      	mov	r2, r1
 8007d12:	68b9      	ldr	r1, [r7, #8]
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f7ff ff70 	bl	8007bfa <OLED_MoveObjectAxis>
}
 8007d1a:	bf00      	nop
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <OLED_DoTweenObjectY>:

// 这个函数是用来移动一个对象的，tag是对象的标签，targetY是目标坐标，duration是动画持续时间，easeType是缓动类型
//! 这里不可以在while里面调用！为一次性调用
void OLED_DoTweenObjectY(AnimationManager_t *manager, const char *tag, float targetY, uint32_t duration, EaseType_t easeType)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b08c      	sub	sp, #48	@ 0x30
 8007d26:	af06      	add	r7, sp, #24
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	607a      	str	r2, [r7, #4]
 8007d2e:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8007d30:	68b9      	ldr	r1, [r7, #8]
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f7ff fe1d 	bl	8007972 <OLED_FindTaggedAnimation>
 8007d38:	6178      	str	r0, [r7, #20]
    if (anim && anim->currentY != targetY)
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d021      	beq.n	8007d84 <OLED_DoTweenObjectY+0x62>
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d44:	4619      	mov	r1, r3
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7f8 fcb4 	bl	80006b4 <__aeabi_fcmpeq>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d000      	beq.n	8007d54 <OLED_DoTweenObjectY+0x32>
    {
        OLED_MoveObjectAxis(manager, tag, anim->currentX, anim->currentY, anim->currentX, targetY, duration, easeType, false, true);
    }
}
 8007d52:	e017      	b.n	8007d84 <OLED_DoTweenObjectY+0x62>
        OLED_MoveObjectAxis(manager, tag, anim->currentX, anim->currentY, anim->currentX, targetY, duration, easeType, false, true);
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d60:	2201      	movs	r2, #1
 8007d62:	9205      	str	r2, [sp, #20]
 8007d64:	2200      	movs	r2, #0
 8007d66:	9204      	str	r2, [sp, #16]
 8007d68:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007d6c:	9203      	str	r2, [sp, #12]
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	9202      	str	r2, [sp, #8]
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	9201      	str	r2, [sp, #4]
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	4603      	mov	r3, r0
 8007d7a:	460a      	mov	r2, r1
 8007d7c:	68b9      	ldr	r1, [r7, #8]
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f7ff ff3b 	bl	8007bfa <OLED_MoveObjectAxis>
}
 8007d84:	bf00      	nop
 8007d86:	3718      	adds	r7, #24
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <OLED_DrawProgressBar>:
    }
}

// 绘制进度条
void OLED_DrawProgressBar(int16_t x, int16_t y, uint8_t width, uint8_t progress) //! UPDATEDISPLAY REQUIRED
{
 8007d8c:	b590      	push	{r4, r7, lr}
 8007d8e:	b087      	sub	sp, #28
 8007d90:	af02      	add	r7, sp, #8
 8007d92:	4604      	mov	r4, r0
 8007d94:	4608      	mov	r0, r1
 8007d96:	4611      	mov	r1, r2
 8007d98:	461a      	mov	r2, r3
 8007d9a:	4623      	mov	r3, r4
 8007d9c:	80fb      	strh	r3, [r7, #6]
 8007d9e:	4603      	mov	r3, r0
 8007da0:	80bb      	strh	r3, [r7, #4]
 8007da2:	460b      	mov	r3, r1
 8007da4:	70fb      	strb	r3, [r7, #3]
 8007da6:	4613      	mov	r3, r2
 8007da8:	70bb      	strb	r3, [r7, #2]
    // 绘制进度条外框
    OLED_DrawRectangle(x, y, width, 6);
 8007daa:	78fa      	ldrb	r2, [r7, #3]
 8007dac:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007db0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007db4:	2306      	movs	r3, #6
 8007db6:	f000 f827 	bl	8007e08 <OLED_DrawRectangle>

    // 计算并绘制进度条填充部分
    if (progress > 0)
 8007dba:	78bb      	ldrb	r3, [r7, #2]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d01c      	beq.n	8007dfa <OLED_DrawProgressBar+0x6e>
    {
        uint8_t fillWidth = ((width - 2) * progress) / 100;
 8007dc0:	78fb      	ldrb	r3, [r7, #3]
 8007dc2:	3b02      	subs	r3, #2
 8007dc4:	78ba      	ldrb	r2, [r7, #2]
 8007dc6:	fb02 f303 	mul.w	r3, r2, r3
 8007dca:	4a0e      	ldr	r2, [pc, #56]	@ (8007e04 <OLED_DrawProgressBar+0x78>)
 8007dcc:	fb82 1203 	smull	r1, r2, r2, r3
 8007dd0:	1152      	asrs	r2, r2, #5
 8007dd2:	17db      	asrs	r3, r3, #31
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	73fb      	strb	r3, [r7, #15]
        if (fillWidth > 0)
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00d      	beq.n	8007dfa <OLED_DrawProgressBar+0x6e>
        {
            OLED_DrawFilledRectangle(x + 1, y + 1, fillWidth, 4, 1);
 8007dde:	88fb      	ldrh	r3, [r7, #6]
 8007de0:	3301      	adds	r3, #1
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	b218      	sxth	r0, r3
 8007de6:	88bb      	ldrh	r3, [r7, #4]
 8007de8:	3301      	adds	r3, #1
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	b219      	sxth	r1, r3
 8007dee:	7bfa      	ldrb	r2, [r7, #15]
 8007df0:	2301      	movs	r3, #1
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	2304      	movs	r3, #4
 8007df6:	f000 f8bc 	bl	8007f72 <OLED_DrawFilledRectangle>
        }
    }
}
 8007dfa:	bf00      	nop
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd90      	pop	{r4, r7, pc}
 8007e02:	bf00      	nop
 8007e04:	51eb851f 	.word	0x51eb851f

08007e08 <OLED_DrawRectangle>:

// 绘制空心矩形
// Parameters x and y are changed to int16_t to handle negative coordinates.
void OLED_DrawRectangle(int16_t x, int16_t y, uint8_t width, uint8_t height) //! UPDATEDISPLAY REQUIRED
{
 8007e08:	b590      	push	{r4, r7, lr}
 8007e0a:	b087      	sub	sp, #28
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	4604      	mov	r4, r0
 8007e10:	4608      	mov	r0, r1
 8007e12:	4611      	mov	r1, r2
 8007e14:	461a      	mov	r2, r3
 8007e16:	4623      	mov	r3, r4
 8007e18:	80fb      	strh	r3, [r7, #6]
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	80bb      	strh	r3, [r7, #4]
 8007e1e:	460b      	mov	r3, r1
 8007e20:	70fb      	strb	r3, [r7, #3]
 8007e22:	4613      	mov	r3, r2
 8007e24:	70bb      	strb	r3, [r7, #2]
    // Initial check for zero dimensions
    if (width == 0 || height == 0)
 8007e26:	78fb      	ldrb	r3, [r7, #3]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 8098 	beq.w	8007f5e <OLED_DrawRectangle+0x156>
 8007e2e:	78bb      	ldrb	r3, [r7, #2]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 8094 	beq.w	8007f5e <OLED_DrawRectangle+0x156>
        return;
    }

    // Use int16_t for width and height internally for clipping calculations
    // to prevent overflow and handle adjustments correctly.
    int16_t current_width = width;
 8007e36:	78fb      	ldrb	r3, [r7, #3]
 8007e38:	82fb      	strh	r3, [r7, #22]
    int16_t current_height = height;
 8007e3a:	78bb      	ldrb	r3, [r7, #2]
 8007e3c:	82bb      	strh	r3, [r7, #20]

    // Clip left edge: if x is negative, adjust width and set x to 0
    if (x < 0)
 8007e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	da06      	bge.n	8007e54 <OLED_DrawRectangle+0x4c>
    {
        current_width += x; // x is negative, so this reduces width
 8007e46:	8afa      	ldrh	r2, [r7, #22]
 8007e48:	88fb      	ldrh	r3, [r7, #6]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	82fb      	strh	r3, [r7, #22]
        x = 0;
 8007e50:	2300      	movs	r3, #0
 8007e52:	80fb      	strh	r3, [r7, #6]
    }

    // Clip top edge: if y is negative, adjust height and set y to 0
    if (y < 0)
 8007e54:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	da06      	bge.n	8007e6a <OLED_DrawRectangle+0x62>
    {
        current_height += y; // y is negative, so this reduces height
 8007e5c:	8aba      	ldrh	r2, [r7, #20]
 8007e5e:	88bb      	ldrh	r3, [r7, #4]
 8007e60:	4413      	add	r3, r2
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	82bb      	strh	r3, [r7, #20]
        y = 0;
 8007e66:	2300      	movs	r3, #0
 8007e68:	80bb      	strh	r3, [r7, #4]
    }

    // If width or height became non-positive after left/top clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 8007e6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	dd77      	ble.n	8007f62 <OLED_DrawRectangle+0x15a>
 8007e72:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	dd73      	ble.n	8007f62 <OLED_DrawRectangle+0x15a>
    }

    // Check if the adjusted rectangle is entirely off-screen to the right or bottom
    // At this point, x and y are >= 0.
    // Assuming OLED_WIDTH and OLED_HEIGHT are defined (e.g., in oled.h)
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT)
 8007e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e80:	dc71      	bgt.n	8007f66 <OLED_DrawRectangle+0x15e>
 8007e82:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007e86:	2b3f      	cmp	r3, #63	@ 0x3f
 8007e88:	dc6d      	bgt.n	8007f66 <OLED_DrawRectangle+0x15e>
    {
        return;
    }

    // Clip right edge: if x + current_width extends beyond OLED_WIDTH
    if (x + current_width > OLED_WIDTH)
 8007e8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007e8e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007e92:	4413      	add	r3, r2
 8007e94:	2b80      	cmp	r3, #128	@ 0x80
 8007e96:	dd04      	ble.n	8007ea2 <OLED_DrawRectangle+0x9a>
    {
        current_width = OLED_WIDTH - x;
 8007e98:	88fb      	ldrh	r3, [r7, #6]
 8007e9a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	82fb      	strh	r3, [r7, #22]
    }

    // Clip bottom edge: if y + current_height extends beyond OLED_HEIGHT
    if (y + current_height > OLED_HEIGHT)
 8007ea2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007ea6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007eaa:	4413      	add	r3, r2
 8007eac:	2b40      	cmp	r3, #64	@ 0x40
 8007eae:	dd04      	ble.n	8007eba <OLED_DrawRectangle+0xb2>
    {
        current_height = OLED_HEIGHT - y;
 8007eb0:	88bb      	ldrh	r3, [r7, #4]
 8007eb2:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	82bb      	strh	r3, [r7, #20]
    }

    // If width or height became non-positive after right/bottom clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 8007eba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	dd53      	ble.n	8007f6a <OLED_DrawRectangle+0x162>
 8007ec2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	dd4f      	ble.n	8007f6a <OLED_DrawRectangle+0x162>
    }

    // At this point, x, y, current_width, and current_height define the drawable part
    // of the rectangle. Cast coordinates and dimensions to uint8_t for drawing,
    // as they are now confirmed to be within valid screen bounds.
    uint8_t final_x = (uint8_t)x;
 8007eca:	88fb      	ldrh	r3, [r7, #6]
 8007ecc:	747b      	strb	r3, [r7, #17]
    uint8_t final_y = (uint8_t)y;
 8007ece:	88bb      	ldrh	r3, [r7, #4]
 8007ed0:	743b      	strb	r3, [r7, #16]
    uint8_t final_width = (uint8_t)current_width;
 8007ed2:	8afb      	ldrh	r3, [r7, #22]
 8007ed4:	73fb      	strb	r3, [r7, #15]
    uint8_t final_height = (uint8_t)current_height;
 8007ed6:	8abb      	ldrh	r3, [r7, #20]
 8007ed8:	73bb      	strb	r3, [r7, #14]

    // Calculate the bottom-right corner coordinates
    uint8_t x2 = final_x + final_width - 1;
 8007eda:	7c7a      	ldrb	r2, [r7, #17]
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
 8007ede:	4413      	add	r3, r2
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	737b      	strb	r3, [r7, #13]
    uint8_t y2 = final_y + final_height - 1;
 8007ee6:	7c3a      	ldrb	r2, [r7, #16]
 8007ee8:	7bbb      	ldrb	r3, [r7, #14]
 8007eea:	4413      	add	r3, r2
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	733b      	strb	r3, [r7, #12]

    // Draw horizontal lines
    for (uint8_t i = final_x; i <= x2; i++)
 8007ef2:	7c7b      	ldrb	r3, [r7, #17]
 8007ef4:	74fb      	strb	r3, [r7, #19]
 8007ef6:	e012      	b.n	8007f1e <OLED_DrawRectangle+0x116>
    {
        OLED_WritePixel(i, final_y, 1); // Top line
 8007ef8:	7cfb      	ldrb	r3, [r7, #19]
 8007efa:	b21b      	sxth	r3, r3
 8007efc:	7c3a      	ldrb	r2, [r7, #16]
 8007efe:	b211      	sxth	r1, r2
 8007f00:	2201      	movs	r2, #1
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fa fc20 	bl	8002748 <OLED_WritePixel>
        OLED_WritePixel(i, y2, 1);      // Bottom line
 8007f08:	7cfb      	ldrb	r3, [r7, #19]
 8007f0a:	b21b      	sxth	r3, r3
 8007f0c:	7b3a      	ldrb	r2, [r7, #12]
 8007f0e:	b211      	sxth	r1, r2
 8007f10:	2201      	movs	r2, #1
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fa fc18 	bl	8002748 <OLED_WritePixel>
    for (uint8_t i = final_x; i <= x2; i++)
 8007f18:	7cfb      	ldrb	r3, [r7, #19]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	74fb      	strb	r3, [r7, #19]
 8007f1e:	7cfa      	ldrb	r2, [r7, #19]
 8007f20:	7b7b      	ldrb	r3, [r7, #13]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d9e8      	bls.n	8007ef8 <OLED_DrawRectangle+0xf0>
    }

    // Draw vertical lines
    // Loop from final_y + 1 to y2 - 1 to avoid double-drawing corners
    // and to correctly handle height = 1 or 2.
    for (uint8_t j = final_y + 1; j < y2; j++)
 8007f26:	7c3b      	ldrb	r3, [r7, #16]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	74bb      	strb	r3, [r7, #18]
 8007f2c:	e012      	b.n	8007f54 <OLED_DrawRectangle+0x14c>
    {
        OLED_WritePixel(final_x, j, 1); // Left line
 8007f2e:	7c7b      	ldrb	r3, [r7, #17]
 8007f30:	b21b      	sxth	r3, r3
 8007f32:	7cba      	ldrb	r2, [r7, #18]
 8007f34:	b211      	sxth	r1, r2
 8007f36:	2201      	movs	r2, #1
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7fa fc05 	bl	8002748 <OLED_WritePixel>
        OLED_WritePixel(x2, j, 1);      // Right line
 8007f3e:	7b7b      	ldrb	r3, [r7, #13]
 8007f40:	b21b      	sxth	r3, r3
 8007f42:	7cba      	ldrb	r2, [r7, #18]
 8007f44:	b211      	sxth	r1, r2
 8007f46:	2201      	movs	r2, #1
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fa fbfd 	bl	8002748 <OLED_WritePixel>
    for (uint8_t j = final_y + 1; j < y2; j++)
 8007f4e:	7cbb      	ldrb	r3, [r7, #18]
 8007f50:	3301      	adds	r3, #1
 8007f52:	74bb      	strb	r3, [r7, #18]
 8007f54:	7cba      	ldrb	r2, [r7, #18]
 8007f56:	7b3b      	ldrb	r3, [r7, #12]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d3e8      	bcc.n	8007f2e <OLED_DrawRectangle+0x126>
 8007f5c:	e006      	b.n	8007f6c <OLED_DrawRectangle+0x164>
        return;
 8007f5e:	bf00      	nop
 8007f60:	e004      	b.n	8007f6c <OLED_DrawRectangle+0x164>
        return;
 8007f62:	bf00      	nop
 8007f64:	e002      	b.n	8007f6c <OLED_DrawRectangle+0x164>
        return;
 8007f66:	bf00      	nop
 8007f68:	e000      	b.n	8007f6c <OLED_DrawRectangle+0x164>
        return;
 8007f6a:	bf00      	nop
    }
}
 8007f6c:	371c      	adds	r7, #28
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd90      	pop	{r4, r7, pc}

08007f72 <OLED_DrawFilledRectangle>:

// 绘制填充矩形
void OLED_DrawFilledRectangle(int16_t x, int16_t y, uint8_t width, uint8_t height, uint8_t color) //! UPDATEDISPLAY REQUIRED
{
 8007f72:	b590      	push	{r4, r7, lr}
 8007f74:	b087      	sub	sp, #28
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	4604      	mov	r4, r0
 8007f7a:	4608      	mov	r0, r1
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	461a      	mov	r2, r3
 8007f80:	4623      	mov	r3, r4
 8007f82:	80fb      	strh	r3, [r7, #6]
 8007f84:	4603      	mov	r3, r0
 8007f86:	80bb      	strh	r3, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	70bb      	strb	r3, [r7, #2]
    // Initial check for zero dimensions
    if (width == 0 || height == 0)
 8007f90:	78fb      	ldrb	r3, [r7, #3]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d07e      	beq.n	8008094 <OLED_DrawFilledRectangle+0x122>
 8007f96:	78bb      	ldrb	r3, [r7, #2]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d07b      	beq.n	8008094 <OLED_DrawFilledRectangle+0x122>
    {
        return;
    }

    // Use int16_t for width and height internally for clipping calculations
    int16_t current_width = width;
 8007f9c:	78fb      	ldrb	r3, [r7, #3]
 8007f9e:	82fb      	strh	r3, [r7, #22]
    int16_t current_height = height;
 8007fa0:	78bb      	ldrb	r3, [r7, #2]
 8007fa2:	82bb      	strh	r3, [r7, #20]

    // Clip left edge: if x is negative, adjust width and set x to 0
    if (x < 0)
 8007fa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	da06      	bge.n	8007fba <OLED_DrawFilledRectangle+0x48>
    {
        current_width += x; // x is negative, so this reduces width
 8007fac:	8afa      	ldrh	r2, [r7, #22]
 8007fae:	88fb      	ldrh	r3, [r7, #6]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	82fb      	strh	r3, [r7, #22]
        x = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	80fb      	strh	r3, [r7, #6]
    }

    // Clip top edge: if y is negative, adjust height and set y to 0
    if (y < 0)
 8007fba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	da06      	bge.n	8007fd0 <OLED_DrawFilledRectangle+0x5e>
    {
        current_height += y; // y is negative, so this reduces height
 8007fc2:	8aba      	ldrh	r2, [r7, #20]
 8007fc4:	88bb      	ldrh	r3, [r7, #4]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	82bb      	strh	r3, [r7, #20]
        y = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	80bb      	strh	r3, [r7, #4]
    }

    // If width or height became non-positive after left/top clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 8007fd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	dd5f      	ble.n	8008098 <OLED_DrawFilledRectangle+0x126>
 8007fd8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	dd5b      	ble.n	8008098 <OLED_DrawFilledRectangle+0x126>
        return;
    }

    // Check if the adjusted rectangle is entirely off-screen to the right or bottom
    // At this point, x and y are >= 0.
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT)
 8007fe0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007fe4:	2b7f      	cmp	r3, #127	@ 0x7f
 8007fe6:	dc59      	bgt.n	800809c <OLED_DrawFilledRectangle+0x12a>
 8007fe8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007fec:	2b3f      	cmp	r3, #63	@ 0x3f
 8007fee:	dc55      	bgt.n	800809c <OLED_DrawFilledRectangle+0x12a>
    {
        return;
    }

    // Clip right edge: if x + current_width extends beyond OLED_WIDTH
    if (x + current_width > OLED_WIDTH)
 8007ff0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007ff4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	2b80      	cmp	r3, #128	@ 0x80
 8007ffc:	dd04      	ble.n	8008008 <OLED_DrawFilledRectangle+0x96>
    {
        current_width = OLED_WIDTH - x;
 8007ffe:	88fb      	ldrh	r3, [r7, #6]
 8008000:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8008004:	b29b      	uxth	r3, r3
 8008006:	82fb      	strh	r3, [r7, #22]
    }

    // Clip bottom edge: if y + current_height extends beyond OLED_HEIGHT
    if (y + current_height > OLED_HEIGHT)
 8008008:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800800c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008010:	4413      	add	r3, r2
 8008012:	2b40      	cmp	r3, #64	@ 0x40
 8008014:	dd04      	ble.n	8008020 <OLED_DrawFilledRectangle+0xae>
    {
        current_height = OLED_HEIGHT - y;
 8008016:	88bb      	ldrh	r3, [r7, #4]
 8008018:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800801c:	b29b      	uxth	r3, r3
 800801e:	82bb      	strh	r3, [r7, #20]
    }

    // If width or height became non-positive after right/bottom clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 8008020:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008024:	2b00      	cmp	r3, #0
 8008026:	dd3b      	ble.n	80080a0 <OLED_DrawFilledRectangle+0x12e>
 8008028:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800802c:	2b00      	cmp	r3, #0
 800802e:	dd37      	ble.n	80080a0 <OLED_DrawFilledRectangle+0x12e>
    {
        return;
    }

    // Cast coordinates and dimensions to uint8_t for drawing
    uint8_t final_x = (uint8_t)x;
 8008030:	88fb      	ldrh	r3, [r7, #6]
 8008032:	747b      	strb	r3, [r7, #17]
    uint8_t final_y = (uint8_t)y;
 8008034:	88bb      	ldrh	r3, [r7, #4]
 8008036:	743b      	strb	r3, [r7, #16]
    uint8_t final_width = (uint8_t)current_width;
 8008038:	8afb      	ldrh	r3, [r7, #22]
 800803a:	73fb      	strb	r3, [r7, #15]
    uint8_t final_height = (uint8_t)current_height;
 800803c:	8abb      	ldrh	r3, [r7, #20]
 800803e:	73bb      	strb	r3, [r7, #14]

    uint8_t x2 = final_x + final_width - 1;
 8008040:	7c7a      	ldrb	r2, [r7, #17]
 8008042:	7bfb      	ldrb	r3, [r7, #15]
 8008044:	4413      	add	r3, r2
 8008046:	b2db      	uxtb	r3, r3
 8008048:	3b01      	subs	r3, #1
 800804a:	737b      	strb	r3, [r7, #13]
    uint8_t y2 = final_y + final_height - 1;
 800804c:	7c3a      	ldrb	r2, [r7, #16]
 800804e:	7bbb      	ldrb	r3, [r7, #14]
 8008050:	4413      	add	r3, r2
 8008052:	b2db      	uxtb	r3, r3
 8008054:	3b01      	subs	r3, #1
 8008056:	733b      	strb	r3, [r7, #12]

    // 逐像素填充
    for (uint8_t j = final_y; j <= y2; j++)
 8008058:	7c3b      	ldrb	r3, [r7, #16]
 800805a:	74fb      	strb	r3, [r7, #19]
 800805c:	e015      	b.n	800808a <OLED_DrawFilledRectangle+0x118>
    {
        for (uint8_t i = final_x; i <= x2; i++)
 800805e:	7c7b      	ldrb	r3, [r7, #17]
 8008060:	74bb      	strb	r3, [r7, #18]
 8008062:	e00b      	b.n	800807c <OLED_DrawFilledRectangle+0x10a>
        {
            OLED_WritePixel(i, j, color);
 8008064:	7cbb      	ldrb	r3, [r7, #18]
 8008066:	b21b      	sxth	r3, r3
 8008068:	7cfa      	ldrb	r2, [r7, #19]
 800806a:	b211      	sxth	r1, r2
 800806c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8008070:	4618      	mov	r0, r3
 8008072:	f7fa fb69 	bl	8002748 <OLED_WritePixel>
        for (uint8_t i = final_x; i <= x2; i++)
 8008076:	7cbb      	ldrb	r3, [r7, #18]
 8008078:	3301      	adds	r3, #1
 800807a:	74bb      	strb	r3, [r7, #18]
 800807c:	7cba      	ldrb	r2, [r7, #18]
 800807e:	7b7b      	ldrb	r3, [r7, #13]
 8008080:	429a      	cmp	r2, r3
 8008082:	d9ef      	bls.n	8008064 <OLED_DrawFilledRectangle+0xf2>
    for (uint8_t j = final_y; j <= y2; j++)
 8008084:	7cfb      	ldrb	r3, [r7, #19]
 8008086:	3301      	adds	r3, #1
 8008088:	74fb      	strb	r3, [r7, #19]
 800808a:	7cfa      	ldrb	r2, [r7, #19]
 800808c:	7b3b      	ldrb	r3, [r7, #12]
 800808e:	429a      	cmp	r2, r3
 8008090:	d9e5      	bls.n	800805e <OLED_DrawFilledRectangle+0xec>
 8008092:	e006      	b.n	80080a2 <OLED_DrawFilledRectangle+0x130>
        return;
 8008094:	bf00      	nop
 8008096:	e004      	b.n	80080a2 <OLED_DrawFilledRectangle+0x130>
        return;
 8008098:	bf00      	nop
 800809a:	e002      	b.n	80080a2 <OLED_DrawFilledRectangle+0x130>
        return;
 800809c:	bf00      	nop
 800809e:	e000      	b.n	80080a2 <OLED_DrawFilledRectangle+0x130>
        return;
 80080a0:	bf00      	nop
        }
    }
}
 80080a2:	371c      	adds	r7, #28
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd90      	pop	{r4, r7, pc}

080080a8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80080ac:	4b17      	ldr	r3, [pc, #92]	@ (800810c <MX_SPI2_Init+0x64>)
 80080ae:	4a18      	ldr	r2, [pc, #96]	@ (8008110 <MX_SPI2_Init+0x68>)
 80080b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80080b2:	4b16      	ldr	r3, [pc, #88]	@ (800810c <MX_SPI2_Init+0x64>)
 80080b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80080b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80080ba:	4b14      	ldr	r3, [pc, #80]	@ (800810c <MX_SPI2_Init+0x64>)
 80080bc:	2200      	movs	r2, #0
 80080be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80080c0:	4b12      	ldr	r3, [pc, #72]	@ (800810c <MX_SPI2_Init+0x64>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80080c6:	4b11      	ldr	r3, [pc, #68]	@ (800810c <MX_SPI2_Init+0x64>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80080cc:	4b0f      	ldr	r3, [pc, #60]	@ (800810c <MX_SPI2_Init+0x64>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80080d2:	4b0e      	ldr	r3, [pc, #56]	@ (800810c <MX_SPI2_Init+0x64>)
 80080d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80080da:	4b0c      	ldr	r3, [pc, #48]	@ (800810c <MX_SPI2_Init+0x64>)
 80080dc:	2200      	movs	r2, #0
 80080de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80080e0:	4b0a      	ldr	r3, [pc, #40]	@ (800810c <MX_SPI2_Init+0x64>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80080e6:	4b09      	ldr	r3, [pc, #36]	@ (800810c <MX_SPI2_Init+0x64>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80080ec:	4b07      	ldr	r3, [pc, #28]	@ (800810c <MX_SPI2_Init+0x64>)
 80080ee:	2200      	movs	r2, #0
 80080f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80080f2:	4b06      	ldr	r3, [pc, #24]	@ (800810c <MX_SPI2_Init+0x64>)
 80080f4:	220a      	movs	r2, #10
 80080f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80080f8:	4804      	ldr	r0, [pc, #16]	@ (800810c <MX_SPI2_Init+0x64>)
 80080fa:	f002 f9b9 	bl	800a470 <HAL_SPI_Init>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8008104:	f7fa f9cd 	bl	80024a2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8008108:	bf00      	nop
 800810a:	bd80      	pop	{r7, pc}
 800810c:	20003fb4 	.word	0x20003fb4
 8008110:	40003800 	.word	0x40003800

08008114 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b088      	sub	sp, #32
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800811c:	f107 0310 	add.w	r3, r7, #16
 8008120:	2200      	movs	r2, #0
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	605a      	str	r2, [r3, #4]
 8008126:	609a      	str	r2, [r3, #8]
 8008128:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a1c      	ldr	r2, [pc, #112]	@ (80081a0 <HAL_SPI_MspInit+0x8c>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d131      	bne.n	8008198 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008134:	4b1b      	ldr	r3, [pc, #108]	@ (80081a4 <HAL_SPI_MspInit+0x90>)
 8008136:	69db      	ldr	r3, [r3, #28]
 8008138:	4a1a      	ldr	r2, [pc, #104]	@ (80081a4 <HAL_SPI_MspInit+0x90>)
 800813a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800813e:	61d3      	str	r3, [r2, #28]
 8008140:	4b18      	ldr	r3, [pc, #96]	@ (80081a4 <HAL_SPI_MspInit+0x90>)
 8008142:	69db      	ldr	r3, [r3, #28]
 8008144:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008148:	60fb      	str	r3, [r7, #12]
 800814a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800814c:	4b15      	ldr	r3, [pc, #84]	@ (80081a4 <HAL_SPI_MspInit+0x90>)
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	4a14      	ldr	r2, [pc, #80]	@ (80081a4 <HAL_SPI_MspInit+0x90>)
 8008152:	f043 0308 	orr.w	r3, r3, #8
 8008156:	6193      	str	r3, [r2, #24]
 8008158:	4b12      	ldr	r3, [pc, #72]	@ (80081a4 <HAL_SPI_MspInit+0x90>)
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	f003 0308 	and.w	r3, r3, #8
 8008160:	60bb      	str	r3, [r7, #8]
 8008162:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = Flash_SCK_Pin|Flash_MOSI_Pin;
 8008164:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8008168:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800816a:	2302      	movs	r3, #2
 800816c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800816e:	2303      	movs	r3, #3
 8008170:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008172:	f107 0310 	add.w	r3, r7, #16
 8008176:	4619      	mov	r1, r3
 8008178:	480b      	ldr	r0, [pc, #44]	@ (80081a8 <HAL_SPI_MspInit+0x94>)
 800817a:	f000 ff2d 	bl	8008fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Flash_MISO_Pin;
 800817e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008182:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008184:	2300      	movs	r3, #0
 8008186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008188:	2300      	movs	r3, #0
 800818a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Flash_MISO_GPIO_Port, &GPIO_InitStruct);
 800818c:	f107 0310 	add.w	r3, r7, #16
 8008190:	4619      	mov	r1, r3
 8008192:	4805      	ldr	r0, [pc, #20]	@ (80081a8 <HAL_SPI_MspInit+0x94>)
 8008194:	f000 ff20 	bl	8008fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8008198:	bf00      	nop
 800819a:	3720      	adds	r7, #32
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	40003800 	.word	0x40003800
 80081a4:	40021000 	.word	0x40021000
 80081a8:	40010c00 	.word	0x40010c00

080081ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80081b2:	4b15      	ldr	r3, [pc, #84]	@ (8008208 <HAL_MspInit+0x5c>)
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	4a14      	ldr	r2, [pc, #80]	@ (8008208 <HAL_MspInit+0x5c>)
 80081b8:	f043 0301 	orr.w	r3, r3, #1
 80081bc:	6193      	str	r3, [r2, #24]
 80081be:	4b12      	ldr	r3, [pc, #72]	@ (8008208 <HAL_MspInit+0x5c>)
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	60bb      	str	r3, [r7, #8]
 80081c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80081ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008208 <HAL_MspInit+0x5c>)
 80081cc:	69db      	ldr	r3, [r3, #28]
 80081ce:	4a0e      	ldr	r2, [pc, #56]	@ (8008208 <HAL_MspInit+0x5c>)
 80081d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081d4:	61d3      	str	r3, [r2, #28]
 80081d6:	4b0c      	ldr	r3, [pc, #48]	@ (8008208 <HAL_MspInit+0x5c>)
 80081d8:	69db      	ldr	r3, [r3, #28]
 80081da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081de:	607b      	str	r3, [r7, #4]
 80081e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80081e2:	4b0a      	ldr	r3, [pc, #40]	@ (800820c <HAL_MspInit+0x60>)
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	60fb      	str	r3, [r7, #12]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80081ee:	60fb      	str	r3, [r7, #12]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	4a04      	ldr	r2, [pc, #16]	@ (800820c <HAL_MspInit+0x60>)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80081fe:	bf00      	nop
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	bc80      	pop	{r7}
 8008206:	4770      	bx	lr
 8008208:	40021000 	.word	0x40021000
 800820c:	40010000 	.word	0x40010000

08008210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008210:	b480      	push	{r7}
 8008212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008214:	bf00      	nop
 8008216:	e7fd      	b.n	8008214 <NMI_Handler+0x4>

08008218 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008218:	b480      	push	{r7}
 800821a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800821c:	bf00      	nop
 800821e:	e7fd      	b.n	800821c <HardFault_Handler+0x4>

08008220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008220:	b480      	push	{r7}
 8008222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008224:	bf00      	nop
 8008226:	e7fd      	b.n	8008224 <MemManage_Handler+0x4>

08008228 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008228:	b480      	push	{r7}
 800822a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800822c:	bf00      	nop
 800822e:	e7fd      	b.n	800822c <BusFault_Handler+0x4>

08008230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008230:	b480      	push	{r7}
 8008232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008234:	bf00      	nop
 8008236:	e7fd      	b.n	8008234 <UsageFault_Handler+0x4>

08008238 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008238:	b480      	push	{r7}
 800823a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800823c:	bf00      	nop
 800823e:	46bd      	mov	sp, r7
 8008240:	bc80      	pop	{r7}
 8008242:	4770      	bx	lr

08008244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008244:	b480      	push	{r7}
 8008246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008248:	bf00      	nop
 800824a:	46bd      	mov	sp, r7
 800824c:	bc80      	pop	{r7}
 800824e:	4770      	bx	lr

08008250 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008250:	b480      	push	{r7}
 8008252:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008254:	bf00      	nop
 8008256:	46bd      	mov	sp, r7
 8008258:	bc80      	pop	{r7}
 800825a:	4770      	bx	lr

0800825c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008260:	f000 fc0c 	bl	8008a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008264:	bf00      	nop
 8008266:	bd80      	pop	{r7, pc}

08008268 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800826c:	4802      	ldr	r0, [pc, #8]	@ (8008278 <DMA1_Channel6_IRQHandler+0x10>)
 800826e:	f000 fdad 	bl	8008dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8008272:	bf00      	nop
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	200002c4 	.word	0x200002c4

0800827c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800827c:	b480      	push	{r7}
 800827e:	af00      	add	r7, sp, #0
  return 1;
 8008280:	2301      	movs	r3, #1
}
 8008282:	4618      	mov	r0, r3
 8008284:	46bd      	mov	sp, r7
 8008286:	bc80      	pop	{r7}
 8008288:	4770      	bx	lr

0800828a <_kill>:

int _kill(int pid, int sig)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b082      	sub	sp, #8
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008294:	f003 fa68 	bl	800b768 <__errno>
 8008298:	4603      	mov	r3, r0
 800829a:	2216      	movs	r2, #22
 800829c:	601a      	str	r2, [r3, #0]
  return -1;
 800829e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <_exit>:

void _exit (int status)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b082      	sub	sp, #8
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80082b2:	f04f 31ff 	mov.w	r1, #4294967295
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7ff ffe7 	bl	800828a <_kill>
  while (1) {}    /* Make sure we hang here */
 80082bc:	bf00      	nop
 80082be:	e7fd      	b.n	80082bc <_exit+0x12>

080082c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082cc:	2300      	movs	r3, #0
 80082ce:	617b      	str	r3, [r7, #20]
 80082d0:	e00a      	b.n	80082e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80082d2:	f3af 8000 	nop.w
 80082d6:	4601      	mov	r1, r0
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	1c5a      	adds	r2, r3, #1
 80082dc:	60ba      	str	r2, [r7, #8]
 80082de:	b2ca      	uxtb	r2, r1
 80082e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	3301      	adds	r3, #1
 80082e6:	617b      	str	r3, [r7, #20]
 80082e8:	697a      	ldr	r2, [r7, #20]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	dbf0      	blt.n	80082d2 <_read+0x12>
  }

  return len;
 80082f0:	687b      	ldr	r3, [r7, #4]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3718      	adds	r7, #24
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b086      	sub	sp, #24
 80082fe:	af00      	add	r7, sp, #0
 8008300:	60f8      	str	r0, [r7, #12]
 8008302:	60b9      	str	r1, [r7, #8]
 8008304:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008306:	2300      	movs	r3, #0
 8008308:	617b      	str	r3, [r7, #20]
 800830a:	e009      	b.n	8008320 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	1c5a      	adds	r2, r3, #1
 8008310:	60ba      	str	r2, [r7, #8]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	4618      	mov	r0, r3
 8008316:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	3301      	adds	r3, #1
 800831e:	617b      	str	r3, [r7, #20]
 8008320:	697a      	ldr	r2, [r7, #20]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	429a      	cmp	r2, r3
 8008326:	dbf1      	blt.n	800830c <_write+0x12>
  }
  return len;
 8008328:	687b      	ldr	r3, [r7, #4]
}
 800832a:	4618      	mov	r0, r3
 800832c:	3718      	adds	r7, #24
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <_close>:

int _close(int file)
{
 8008332:	b480      	push	{r7}
 8008334:	b083      	sub	sp, #12
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800833a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800833e:	4618      	mov	r0, r3
 8008340:	370c      	adds	r7, #12
 8008342:	46bd      	mov	sp, r7
 8008344:	bc80      	pop	{r7}
 8008346:	4770      	bx	lr

08008348 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008358:	605a      	str	r2, [r3, #4]
  return 0;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	bc80      	pop	{r7}
 8008364:	4770      	bx	lr

08008366 <_isatty>:

int _isatty(int file)
{
 8008366:	b480      	push	{r7}
 8008368:	b083      	sub	sp, #12
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800836e:	2301      	movs	r3, #1
}
 8008370:	4618      	mov	r0, r3
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	bc80      	pop	{r7}
 8008378:	4770      	bx	lr

0800837a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800837a:	b480      	push	{r7}
 800837c:	b085      	sub	sp, #20
 800837e:	af00      	add	r7, sp, #0
 8008380:	60f8      	str	r0, [r7, #12]
 8008382:	60b9      	str	r1, [r7, #8]
 8008384:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3714      	adds	r7, #20
 800838c:	46bd      	mov	sp, r7
 800838e:	bc80      	pop	{r7}
 8008390:	4770      	bx	lr
	...

08008394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800839c:	4a14      	ldr	r2, [pc, #80]	@ (80083f0 <_sbrk+0x5c>)
 800839e:	4b15      	ldr	r3, [pc, #84]	@ (80083f4 <_sbrk+0x60>)
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80083a8:	4b13      	ldr	r3, [pc, #76]	@ (80083f8 <_sbrk+0x64>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d102      	bne.n	80083b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80083b0:	4b11      	ldr	r3, [pc, #68]	@ (80083f8 <_sbrk+0x64>)
 80083b2:	4a12      	ldr	r2, [pc, #72]	@ (80083fc <_sbrk+0x68>)
 80083b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80083b6:	4b10      	ldr	r3, [pc, #64]	@ (80083f8 <_sbrk+0x64>)
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4413      	add	r3, r2
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d207      	bcs.n	80083d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80083c4:	f003 f9d0 	bl	800b768 <__errno>
 80083c8:	4603      	mov	r3, r0
 80083ca:	220c      	movs	r2, #12
 80083cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80083ce:	f04f 33ff 	mov.w	r3, #4294967295
 80083d2:	e009      	b.n	80083e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80083d4:	4b08      	ldr	r3, [pc, #32]	@ (80083f8 <_sbrk+0x64>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80083da:	4b07      	ldr	r3, [pc, #28]	@ (80083f8 <_sbrk+0x64>)
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4413      	add	r3, r2
 80083e2:	4a05      	ldr	r2, [pc, #20]	@ (80083f8 <_sbrk+0x64>)
 80083e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80083e6:	68fb      	ldr	r3, [r7, #12]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3718      	adds	r7, #24
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	20005000 	.word	0x20005000
 80083f4:	00000400 	.word	0x00000400
 80083f8:	2000400c 	.word	0x2000400c
 80083fc:	200041b8 	.word	0x200041b8

08008400 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008400:	b480      	push	{r7}
 8008402:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008404:	bf00      	nop
 8008406:	46bd      	mov	sp, r7
 8008408:	bc80      	pop	{r7}
 800840a:	4770      	bx	lr

0800840c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b08c      	sub	sp, #48	@ 0x30
 8008410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8008412:	f107 030c 	add.w	r3, r7, #12
 8008416:	2224      	movs	r2, #36	@ 0x24
 8008418:	2100      	movs	r1, #0
 800841a:	4618      	mov	r0, r3
 800841c:	f003 f943 	bl	800b6a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008420:	1d3b      	adds	r3, r7, #4
 8008422:	2200      	movs	r2, #0
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008428:	4b20      	ldr	r3, [pc, #128]	@ (80084ac <MX_TIM3_Init+0xa0>)
 800842a:	4a21      	ldr	r2, [pc, #132]	@ (80084b0 <MX_TIM3_Init+0xa4>)
 800842c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800842e:	4b1f      	ldr	r3, [pc, #124]	@ (80084ac <MX_TIM3_Init+0xa0>)
 8008430:	2200      	movs	r2, #0
 8008432:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008434:	4b1d      	ldr	r3, [pc, #116]	@ (80084ac <MX_TIM3_Init+0xa0>)
 8008436:	2200      	movs	r2, #0
 8008438:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800843a:	4b1c      	ldr	r3, [pc, #112]	@ (80084ac <MX_TIM3_Init+0xa0>)
 800843c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008440:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008442:	4b1a      	ldr	r3, [pc, #104]	@ (80084ac <MX_TIM3_Init+0xa0>)
 8008444:	2200      	movs	r2, #0
 8008446:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008448:	4b18      	ldr	r3, [pc, #96]	@ (80084ac <MX_TIM3_Init+0xa0>)
 800844a:	2200      	movs	r2, #0
 800844c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800844e:	2301      	movs	r3, #1
 8008450:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008452:	2300      	movs	r3, #0
 8008454:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008456:	2301      	movs	r3, #1
 8008458:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800845a:	2300      	movs	r3, #0
 800845c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800845e:	2300      	movs	r3, #0
 8008460:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8008462:	2300      	movs	r3, #0
 8008464:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008466:	2301      	movs	r3, #1
 8008468:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800846a:	2300      	movs	r3, #0
 800846c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800846e:	2300      	movs	r3, #0
 8008470:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8008472:	f107 030c 	add.w	r3, r7, #12
 8008476:	4619      	mov	r1, r3
 8008478:	480c      	ldr	r0, [pc, #48]	@ (80084ac <MX_TIM3_Init+0xa0>)
 800847a:	f002 fd8e 	bl	800af9a <HAL_TIM_Encoder_Init>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d001      	beq.n	8008488 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8008484:	f7fa f80d 	bl	80024a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008488:	2300      	movs	r3, #0
 800848a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800848c:	2300      	movs	r3, #0
 800848e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008490:	1d3b      	adds	r3, r7, #4
 8008492:	4619      	mov	r1, r3
 8008494:	4805      	ldr	r0, [pc, #20]	@ (80084ac <MX_TIM3_Init+0xa0>)
 8008496:	f002 ff43 	bl	800b320 <HAL_TIMEx_MasterConfigSynchronization>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80084a0:	f7f9 ffff 	bl	80024a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80084a4:	bf00      	nop
 80084a6:	3730      	adds	r7, #48	@ 0x30
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	20004010 	.word	0x20004010
 80084b0:	40000400 	.word	0x40000400

080084b4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b08a      	sub	sp, #40	@ 0x28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084bc:	f107 0314 	add.w	r3, r7, #20
 80084c0:	2200      	movs	r2, #0
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	605a      	str	r2, [r3, #4]
 80084c6:	609a      	str	r2, [r3, #8]
 80084c8:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a1e      	ldr	r2, [pc, #120]	@ (8008548 <HAL_TIM_Encoder_MspInit+0x94>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d135      	bne.n	8008540 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80084d4:	4b1d      	ldr	r3, [pc, #116]	@ (800854c <HAL_TIM_Encoder_MspInit+0x98>)
 80084d6:	69db      	ldr	r3, [r3, #28]
 80084d8:	4a1c      	ldr	r2, [pc, #112]	@ (800854c <HAL_TIM_Encoder_MspInit+0x98>)
 80084da:	f043 0302 	orr.w	r3, r3, #2
 80084de:	61d3      	str	r3, [r2, #28]
 80084e0:	4b1a      	ldr	r3, [pc, #104]	@ (800854c <HAL_TIM_Encoder_MspInit+0x98>)
 80084e2:	69db      	ldr	r3, [r3, #28]
 80084e4:	f003 0302 	and.w	r3, r3, #2
 80084e8:	613b      	str	r3, [r7, #16]
 80084ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084ec:	4b17      	ldr	r3, [pc, #92]	@ (800854c <HAL_TIM_Encoder_MspInit+0x98>)
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	4a16      	ldr	r2, [pc, #88]	@ (800854c <HAL_TIM_Encoder_MspInit+0x98>)
 80084f2:	f043 0308 	orr.w	r3, r3, #8
 80084f6:	6193      	str	r3, [r2, #24]
 80084f8:	4b14      	ldr	r3, [pc, #80]	@ (800854c <HAL_TIM_Encoder_MspInit+0x98>)
 80084fa:	699b      	ldr	r3, [r3, #24]
 80084fc:	f003 0308 	and.w	r3, r3, #8
 8008500:	60fb      	str	r3, [r7, #12]
 8008502:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_CH1_Pin|Encoder_CH2_Pin;
 8008504:	2330      	movs	r3, #48	@ 0x30
 8008506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008508:	2300      	movs	r3, #0
 800850a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800850c:	2300      	movs	r3, #0
 800850e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008510:	f107 0314 	add.w	r3, r7, #20
 8008514:	4619      	mov	r1, r3
 8008516:	480e      	ldr	r0, [pc, #56]	@ (8008550 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008518:	f000 fd5e 	bl	8008fd8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800851c:	4b0d      	ldr	r3, [pc, #52]	@ (8008554 <HAL_TIM_Encoder_MspInit+0xa0>)
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	627b      	str	r3, [r7, #36]	@ 0x24
 8008522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008524:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008528:	627b      	str	r3, [r7, #36]	@ 0x24
 800852a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800852c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8008530:	627b      	str	r3, [r7, #36]	@ 0x24
 8008532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008534:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008538:	627b      	str	r3, [r7, #36]	@ 0x24
 800853a:	4a06      	ldr	r2, [pc, #24]	@ (8008554 <HAL_TIM_Encoder_MspInit+0xa0>)
 800853c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8008540:	bf00      	nop
 8008542:	3728      	adds	r7, #40	@ 0x28
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	40000400 	.word	0x40000400
 800854c:	40021000 	.word	0x40021000
 8008550:	40010c00 	.word	0x40010c00
 8008554:	40010000 	.word	0x40010000

08008558 <lz77_decompress>:

#define Video_Basic_Addr 0x00000000 // Base address for video data
bool video_first_play;

int lz77_decompress(const uint8_t *input, size_t input_size, uint8_t *output, size_t output_size)
{
 8008558:	b480      	push	{r7}
 800855a:	b08f      	sub	sp, #60	@ 0x3c
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
 8008564:	603b      	str	r3, [r7, #0]
    const uint8_t *input_end = input + input_size;
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	4413      	add	r3, r2
 800856c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t *output_end = output + output_size;
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	4413      	add	r3, r2
 8008574:	623b      	str	r3, [r7, #32]
    uint8_t *output_ptr = output;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	637b      	str	r3, [r7, #52]	@ 0x34

    while (input < input_end)
 800857a:	e07d      	b.n	8008678 <lz77_decompress+0x120>
    {
        uint8_t flag = *input++;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	1c5a      	adds	r2, r3, #1
 8008580:	60fa      	str	r2, [r7, #12]
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	77fb      	strb	r3, [r7, #31]
        if (flag < 0x80)
 8008586:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800858a:	2b00      	cmp	r3, #0
 800858c:	db25      	blt.n	80085da <lz77_decompress+0x82>
        {
            // Literal run
            size_t len = flag & 0x7F;
 800858e:	7ffb      	ldrb	r3, [r7, #31]
 8008590:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008594:	617b      	str	r3, [r7, #20]
            if (input + len > input_end || output_ptr + len > output_end)
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	4413      	add	r3, r2
 800859c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800859e:	429a      	cmp	r2, r3
 80085a0:	d305      	bcc.n	80085ae <lz77_decompress+0x56>
 80085a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	4413      	add	r3, r2
 80085a8:	6a3a      	ldr	r2, [r7, #32]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d202      	bcs.n	80085b4 <lz77_decompress+0x5c>
            {
                return -1; // Overflow check
 80085ae:	f04f 33ff 	mov.w	r3, #4294967295
 80085b2:	e069      	b.n	8008688 <lz77_decompress+0x130>
            }
            for (size_t i = 0; i < len; i++)
 80085b4:	2300      	movs	r3, #0
 80085b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80085b8:	e00a      	b.n	80085d0 <lz77_decompress+0x78>
            {
                *output_ptr++ = *input++;
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	1c53      	adds	r3, r2, #1
 80085be:	60fb      	str	r3, [r7, #12]
 80085c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085c2:	1c59      	adds	r1, r3, #1
 80085c4:	6379      	str	r1, [r7, #52]	@ 0x34
 80085c6:	7812      	ldrb	r2, [r2, #0]
 80085c8:	701a      	strb	r2, [r3, #0]
            for (size_t i = 0; i < len; i++)
 80085ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085cc:	3301      	adds	r3, #1
 80085ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80085d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d3f0      	bcc.n	80085ba <lz77_decompress+0x62>
 80085d8:	e04e      	b.n	8008678 <lz77_decompress+0x120>
            }
        }
        else
        {
            // Back reference
            if (input + 2 > input_end)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	3302      	adds	r3, #2
 80085de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d202      	bcs.n	80085ea <lz77_decompress+0x92>
            {
                return -2; // Input overflow
 80085e4:	f06f 0301 	mvn.w	r3, #1
 80085e8:	e04e      	b.n	8008688 <lz77_decompress+0x130>
            }
            uint16_t offset = ((flag & 0x7F) << 8) | *input++;
 80085ea:	7ffb      	ldrb	r3, [r7, #31]
 80085ec:	b21b      	sxth	r3, r3
 80085ee:	021b      	lsls	r3, r3, #8
 80085f0:	b21b      	sxth	r3, r3
 80085f2:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 80085f6:	b21a      	sxth	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	1c59      	adds	r1, r3, #1
 80085fc:	60f9      	str	r1, [r7, #12]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	b21b      	sxth	r3, r3
 8008602:	4313      	orrs	r3, r2
 8008604:	b21b      	sxth	r3, r3
 8008606:	83bb      	strh	r3, [r7, #28]
            offset += 1; // Offset starts from 1
 8008608:	8bbb      	ldrh	r3, [r7, #28]
 800860a:	3301      	adds	r3, #1
 800860c:	83bb      	strh	r3, [r7, #28]
            uint8_t length = *input++;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	1c5a      	adds	r2, r3, #1
 8008612:	60fa      	str	r2, [r7, #12]
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	76fb      	strb	r3, [r7, #27]
            if (length == 0 || offset > (size_t)(output_ptr - output))
 8008618:	7efb      	ldrb	r3, [r7, #27]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d005      	beq.n	800862a <lz77_decompress+0xd2>
 800861e:	8bbb      	ldrh	r3, [r7, #28]
 8008620:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	1a8a      	subs	r2, r1, r2
 8008626:	4293      	cmp	r3, r2
 8008628:	d902      	bls.n	8008630 <lz77_decompress+0xd8>
            {
                return -3; // Invalid length or offset
 800862a:	f06f 0302 	mvn.w	r3, #2
 800862e:	e02b      	b.n	8008688 <lz77_decompress+0x130>
            }
            uint8_t *src = output_ptr - offset;
 8008630:	8bbb      	ldrh	r3, [r7, #28]
 8008632:	425b      	negs	r3, r3
 8008634:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008636:	4413      	add	r3, r2
 8008638:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (output_ptr + length > output_end)
 800863a:	7efb      	ldrb	r3, [r7, #27]
 800863c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800863e:	4413      	add	r3, r2
 8008640:	6a3a      	ldr	r2, [r7, #32]
 8008642:	429a      	cmp	r2, r3
 8008644:	d202      	bcs.n	800864c <lz77_decompress+0xf4>
            {
                return -4; // Output overflow
 8008646:	f06f 0303 	mvn.w	r3, #3
 800864a:	e01d      	b.n	8008688 <lz77_decompress+0x130>
            }
            for (uint8_t i = 0; i < length; i++)
 800864c:	2300      	movs	r3, #0
 800864e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008652:	e00c      	b.n	800866e <lz77_decompress+0x116>
            {
                *output_ptr++ = *src++;
 8008654:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008656:	1c53      	adds	r3, r2, #1
 8008658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800865a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800865c:	1c59      	adds	r1, r3, #1
 800865e:	6379      	str	r1, [r7, #52]	@ 0x34
 8008660:	7812      	ldrb	r2, [r2, #0]
 8008662:	701a      	strb	r2, [r3, #0]
            for (uint8_t i = 0; i < length; i++)
 8008664:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008668:	3301      	adds	r3, #1
 800866a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800866e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8008672:	7efb      	ldrb	r3, [r7, #27]
 8008674:	429a      	cmp	r2, r3
 8008676:	d3ed      	bcc.n	8008654 <lz77_decompress+0xfc>
    while (input < input_end)
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867c:	429a      	cmp	r2, r3
 800867e:	f4ff af7d 	bcc.w	800857c <lz77_decompress+0x24>
            }
        }
    }
    return (int)(output_ptr - output);
 8008682:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	1ad3      	subs	r3, r2, r3
}
 8008688:	4618      	mov	r0, r3
 800868a:	373c      	adds	r7, #60	@ 0x3c
 800868c:	46bd      	mov	sp, r7
 800868e:	bc80      	pop	{r7}
 8008690:	4770      	bx	lr
	...

08008694 <display_frame_oled>:

// Declare the goodapple data if not in goodapple.h (it should be)
// extern const unsigned char goodapple[]; // Ensure this is available

void display_frame_oled(unsigned char *frame)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b086      	sub	sp, #24
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
    // OLED_ClearBuffer();
    for (int i = 0; i < 114 * 64; i++)
 800869c:	2300      	movs	r3, #0
 800869e:	617b      	str	r3, [r7, #20]
 80086a0:	e03d      	b.n	800871e <display_frame_oled+0x8a>
    { // Assuming OLED is 128x64, video is 114x64
        bool pixel = (frame[i / 8] & (1 << (i % 8))) != 0;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	da00      	bge.n	80086aa <display_frame_oled+0x16>
 80086a8:	3307      	adds	r3, #7
 80086aa:	10db      	asrs	r3, r3, #3
 80086ac:	461a      	mov	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4413      	add	r3, r2
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	461a      	mov	r2, r3
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f003 0307 	and.w	r3, r3, #7
 80086bc:	fa42 f303 	asr.w	r3, r2, r3
 80086c0:	f003 0301 	and.w	r3, r3, #1
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	bf14      	ite	ne
 80086c8:	2301      	movne	r3, #1
 80086ca:	2300      	moveq	r3, #0
 80086cc:	74fb      	strb	r3, [r7, #19]
        // Adjust x-coordinate to center the 114-width video on a 128-width screen
        int x = (i % 114) + (OLED_WIDTH - 114) / 2;
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	4a17      	ldr	r2, [pc, #92]	@ (8008730 <display_frame_oled+0x9c>)
 80086d2:	fb82 1203 	smull	r1, r2, r2, r3
 80086d6:	441a      	add	r2, r3
 80086d8:	1191      	asrs	r1, r2, #6
 80086da:	17da      	asrs	r2, r3, #31
 80086dc:	1a8a      	subs	r2, r1, r2
 80086de:	2172      	movs	r1, #114	@ 0x72
 80086e0:	fb01 f202 	mul.w	r2, r1, r2
 80086e4:	1a9a      	subs	r2, r3, r2
 80086e6:	1dd3      	adds	r3, r2, #7
 80086e8:	60fb      	str	r3, [r7, #12]
        int y = i / 114;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	4a10      	ldr	r2, [pc, #64]	@ (8008730 <display_frame_oled+0x9c>)
 80086ee:	fb82 1203 	smull	r1, r2, r2, r3
 80086f2:	441a      	add	r2, r3
 80086f4:	1192      	asrs	r2, r2, #6
 80086f6:	17db      	asrs	r3, r3, #31
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	60bb      	str	r3, [r7, #8]
        if (x < OLED_WIDTH && y < OLED_HEIGHT)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8008700:	dc0a      	bgt.n	8008718 <display_frame_oled+0x84>
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	2b3f      	cmp	r3, #63	@ 0x3f
 8008706:	dc07      	bgt.n	8008718 <display_frame_oled+0x84>
        {                                         // Boundary check
            OLED_WritePixel(x, y, pixel ? 1 : 0); // Draw pixel (1 for white, 0 for black)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	b21b      	sxth	r3, r3
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	b211      	sxth	r1, r2
 8008710:	7cfa      	ldrb	r2, [r7, #19]
 8008712:	4618      	mov	r0, r3
 8008714:	f7fa f818 	bl	8002748 <OLED_WritePixel>
    for (int i = 0; i < 114 * 64; i++)
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	3301      	adds	r3, #1
 800871c:	617b      	str	r3, [r7, #20]
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	f5b3 5fe4 	cmp.w	r3, #7296	@ 0x1c80
 8008724:	dbbd      	blt.n	80086a2 <display_frame_oled+0xe>
        }
    }
    // OLED_SmartUpdate();
}
 8008726:	bf00      	nop
 8008728:	bf00      	nop
 800872a:	3718      	adds	r7, #24
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	8fb823ef 	.word	0x8fb823ef

08008734 <video_player_init>:

void video_player_init()
{
 8008734:	b580      	push	{r7, lr}
 8008736:	af00      	add	r7, sp, #0
    W25Q64_Read(Video_Basic_Addr, (uint8_t *)&total_frames, sizeof(total_frames)); // Read the frame count from the flash memory, cast to uint8_t* and use sizeof
 8008738:	2204      	movs	r2, #4
 800873a:	4904      	ldr	r1, [pc, #16]	@ (800874c <video_player_init+0x18>)
 800873c:	2000      	movs	r0, #0
 800873e:	f7f8 fcdf 	bl	8001100 <W25Q64_Read>
    current_frame_index = 0;
 8008742:	4b03      	ldr	r3, [pc, #12]	@ (8008750 <video_player_init+0x1c>)
 8008744:	2200      	movs	r2, #0
 8008746:	601a      	str	r2, [r3, #0]
}
 8008748:	bf00      	nop
 800874a:	bd80      	pop	{r7, pc}
 800874c:	20004060 	.word	0x20004060
 8008750:	2000405c 	.word	0x2000405c

08008754 <play_video>:

void play_video()
{
 8008754:	b580      	push	{r7, lr}
 8008756:	f5ad 7d66 	sub.w	sp, sp, #920	@ 0x398
 800875a:	af00      	add	r7, sp, #0
    static uint16_t LastCount_video = 0;


    if (video_first_play)
 800875c:	4b28      	ldr	r3, [pc, #160]	@ (8008800 <play_video+0xac>)
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d008      	beq.n	8008776 <play_video+0x22>
    {
        video_first_play = false;
 8008764:	4b26      	ldr	r3, [pc, #152]	@ (8008800 <play_video+0xac>)
 8008766:	2200      	movs	r2, #0
 8008768:	701a      	strb	r2, [r3, #0]
        LastCount_video = count; // Initialize LastCount_video
 800876a:	4b26      	ldr	r3, [pc, #152]	@ (8008804 <play_video+0xb0>)
 800876c:	881a      	ldrh	r2, [r3, #0]
 800876e:	4b26      	ldr	r3, [pc, #152]	@ (8008808 <play_video+0xb4>)
 8008770:	801a      	strh	r2, [r3, #0]
        video_player_init();
 8008772:	f7ff ffdf 	bl	8008734 <video_player_init>
    }


    unsigned char frame_buffer[920]; // Buffer for one decompressed frame (114*64/8 = 912, rounded up)

    if (total_frames == 0)
 8008776:	4b25      	ldr	r3, [pc, #148]	@ (800880c <play_video+0xb8>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <play_video+0x2e>
    {
        video_player_init();
 800877e:	f7ff ffd9 	bl	8008734 <video_player_init>
    }

    if (current_frame_index >= total_frames)
 8008782:	4b23      	ldr	r3, [pc, #140]	@ (8008810 <play_video+0xbc>)
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	4b21      	ldr	r3, [pc, #132]	@ (800880c <play_video+0xb8>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	429a      	cmp	r2, r3
 800878c:	d302      	bcc.n	8008794 <play_video+0x40>
    {
        current_frame_index = 0;
 800878e:	4b20      	ldr	r3, [pc, #128]	@ (8008810 <play_video+0xbc>)
 8008790:	2200      	movs	r2, #0
 8008792:	601a      	str	r2, [r3, #0]
    }

    get_target_frame_index(current_frame_index, frame_buffer, sizeof(frame_buffer));
 8008794:	4b1e      	ldr	r3, [pc, #120]	@ (8008810 <play_video+0xbc>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4639      	mov	r1, r7
 800879a:	f44f 7266 	mov.w	r2, #920	@ 0x398
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 f880 	bl	80088a4 <get_target_frame_index>

    display_frame_oled(frame_buffer);
 80087a4:	463b      	mov	r3, r7
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7ff ff74 	bl	8008694 <display_frame_oled>

    current_frame_index++;
 80087ac:	4b18      	ldr	r3, [pc, #96]	@ (8008810 <play_video+0xbc>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3301      	adds	r3, #1
 80087b2:	4a17      	ldr	r2, [pc, #92]	@ (8008810 <play_video+0xbc>)
 80087b4:	6013      	str	r3, [r2, #0]

    if(count - LastCount_video >= 2)
 80087b6:	4b13      	ldr	r3, [pc, #76]	@ (8008804 <play_video+0xb0>)
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	461a      	mov	r2, r3
 80087bc:	4b12      	ldr	r3, [pc, #72]	@ (8008808 <play_video+0xb4>)
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	dd07      	ble.n	80087d6 <play_video+0x82>
    {
        video_fast_forward(10);
 80087c6:	200a      	movs	r0, #10
 80087c8:	f000 f824 	bl	8008814 <video_fast_forward>
        LastCount_video = count;
 80087cc:	4b0d      	ldr	r3, [pc, #52]	@ (8008804 <play_video+0xb0>)
 80087ce:	881a      	ldrh	r2, [r3, #0]
 80087d0:	4b0d      	ldr	r3, [pc, #52]	@ (8008808 <play_video+0xb4>)
 80087d2:	801a      	strh	r2, [r3, #0]
    else if (count - LastCount_video <= -2)
    {
        video_rewind(10);
        LastCount_video = count;
    }
}
 80087d4:	e00f      	b.n	80087f6 <play_video+0xa2>
    else if (count - LastCount_video <= -2)
 80087d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008804 <play_video+0xb0>)
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	461a      	mov	r2, r3
 80087dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008808 <play_video+0xb4>)
 80087de:	881b      	ldrh	r3, [r3, #0]
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e6:	da06      	bge.n	80087f6 <play_video+0xa2>
        video_rewind(10);
 80087e8:	200a      	movs	r0, #10
 80087ea:	f000 f837 	bl	800885c <video_rewind>
        LastCount_video = count;
 80087ee:	4b05      	ldr	r3, [pc, #20]	@ (8008804 <play_video+0xb0>)
 80087f0:	881a      	ldrh	r2, [r3, #0]
 80087f2:	4b05      	ldr	r3, [pc, #20]	@ (8008808 <play_video+0xb4>)
 80087f4:	801a      	strh	r2, [r3, #0]
}
 80087f6:	bf00      	nop
 80087f8:	f507 7766 	add.w	r7, r7, #920	@ 0x398
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	20004058 	.word	0x20004058
 8008804:	20000308 	.word	0x20000308
 8008808:	20004064 	.word	0x20004064
 800880c:	20004060 	.word	0x20004060
 8008810:	2000405c 	.word	0x2000405c

08008814 <video_fast_forward>:

void video_fast_forward(int frames_to_skip)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
    if (total_frames == 0)
 800881c:	4b0d      	ldr	r3, [pc, #52]	@ (8008854 <video_fast_forward+0x40>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d101      	bne.n	8008828 <video_fast_forward+0x14>
        video_player_init(); // Ensure total_frames is initialized
 8008824:	f7ff ff86 	bl	8008734 <video_player_init>
    current_frame_index += frames_to_skip;
 8008828:	4b0b      	ldr	r3, [pc, #44]	@ (8008858 <video_fast_forward+0x44>)
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4413      	add	r3, r2
 8008830:	4a09      	ldr	r2, [pc, #36]	@ (8008858 <video_fast_forward+0x44>)
 8008832:	6013      	str	r3, [r2, #0]
    if (current_frame_index >= total_frames)
 8008834:	4b08      	ldr	r3, [pc, #32]	@ (8008858 <video_fast_forward+0x44>)
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	4b06      	ldr	r3, [pc, #24]	@ (8008854 <video_fast_forward+0x40>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	429a      	cmp	r2, r3
 800883e:	d304      	bcc.n	800884a <video_fast_forward+0x36>
    {
        current_frame_index = total_frames - 1; // Go to last frame
 8008840:	4b04      	ldr	r3, [pc, #16]	@ (8008854 <video_fast_forward+0x40>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3b01      	subs	r3, #1
 8008846:	4a04      	ldr	r2, [pc, #16]	@ (8008858 <video_fast_forward+0x44>)
 8008848:	6013      	str	r3, [r2, #0]
    }
    if (current_frame_index < 0) // Should not happen with fast forward, but good practice
    {
        current_frame_index = 0;
    }
}
 800884a:	bf00      	nop
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20004060 	.word	0x20004060
 8008858:	2000405c 	.word	0x2000405c

0800885c <video_rewind>:

void video_rewind(int frames_to_skip)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
    if (total_frames == 0)
 8008864:	4b0d      	ldr	r3, [pc, #52]	@ (800889c <video_rewind+0x40>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d101      	bne.n	8008870 <video_rewind+0x14>
        video_player_init(); // Ensure total_frames is initialized
 800886c:	f7ff ff62 	bl	8008734 <video_player_init>

    if ((int)current_frame_index - frames_to_skip < 0) // Check before subtraction to prevent underflow with unsigned int
 8008870:	4b0b      	ldr	r3, [pc, #44]	@ (80088a0 <video_rewind+0x44>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	461a      	mov	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	2b00      	cmp	r3, #0
 800887c:	da03      	bge.n	8008886 <video_rewind+0x2a>
    {
        current_frame_index = 0; // Go to first frame
 800887e:	4b08      	ldr	r3, [pc, #32]	@ (80088a0 <video_rewind+0x44>)
 8008880:	2200      	movs	r2, #0
 8008882:	601a      	str	r2, [r3, #0]
    }
    else
    {
        current_frame_index -= frames_to_skip;
    }
}
 8008884:	e005      	b.n	8008892 <video_rewind+0x36>
        current_frame_index -= frames_to_skip;
 8008886:	4b06      	ldr	r3, [pc, #24]	@ (80088a0 <video_rewind+0x44>)
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	4a04      	ldr	r2, [pc, #16]	@ (80088a0 <video_rewind+0x44>)
 8008890:	6013      	str	r3, [r2, #0]
}
 8008892:	bf00      	nop
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	20004060 	.word	0x20004060
 80088a0:	2000405c 	.word	0x2000405c

080088a4 <get_target_frame_index>:
        current_frame_index = 0;
    }
}

int get_target_frame_index(unsigned int index, uint8_t *dst, size_t output_size)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	f5ad 7d70 	sub.w	sp, sp, #960	@ 0x3c0
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 80088b0:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 80088b4:	6018      	str	r0, [r3, #0]
 80088b6:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 80088ba:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 80088be:	6019      	str	r1, [r3, #0]
 80088c0:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 80088c4:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 80088c8:	601a      	str	r2, [r3, #0]
    unsigned char temp[920];
    uint32_t compressed_length;
    uint32_t picture_start_offset;
    uint32_t total_frames_from_flash;

    W25Q64_Read(Video_Basic_Addr, (uint8_t *)&total_frames_from_flash, sizeof(total_frames_from_flash));
 80088ca:	f107 0310 	add.w	r3, r7, #16
 80088ce:	2204      	movs	r2, #4
 80088d0:	4619      	mov	r1, r3
 80088d2:	2000      	movs	r0, #0
 80088d4:	f7f8 fc14 	bl	8001100 <W25Q64_Read>
    picture_start_offset = sizeof(uint32_t) + (total_frames_from_flash + 1) * sizeof(uint32_t);
 80088d8:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 80088dc:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	3302      	adds	r3, #2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
    W25Q64_Read(Video_Basic_Addr + sizeof(uint32_t) + (index * sizeof(uint32_t)), (uint8_t *)&target_ptr_val, sizeof(target_ptr_val));
 80088ea:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 80088ee:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3301      	adds	r3, #1
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	f507 716c 	add.w	r1, r7, #944	@ 0x3b0
 80088fc:	2204      	movs	r2, #4
 80088fe:	4618      	mov	r0, r3
 8008900:	f7f8 fbfe 	bl	8001100 <W25Q64_Read>
    W25Q64_Read(Video_Basic_Addr + sizeof(uint32_t) + ((index + 1) * sizeof(uint32_t)), (uint8_t *)&next_ptr_val, sizeof(next_ptr_val));
 8008904:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8008908:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	3302      	adds	r3, #2
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	f507 716b 	add.w	r1, r7, #940	@ 0x3ac
 8008916:	2204      	movs	r2, #4
 8008918:	4618      	mov	r0, r3
 800891a:	f7f8 fbf1 	bl	8001100 <W25Q64_Read>

    compressed_length = next_ptr_val - target_ptr_val;
 800891e:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 8008922:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8

    if (compressed_length == 0)
 800892c:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8008930:	2b00      	cmp	r3, #0
 8008932:	d101      	bne.n	8008938 <get_target_frame_index+0x94>
    {
        return 0;
 8008934:	2300      	movs	r3, #0
 8008936:	e030      	b.n	800899a <get_target_frame_index+0xf6>
    }
    if (next_ptr_val < target_ptr_val)
 8008938:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 800893c:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8008940:	429a      	cmp	r2, r3
 8008942:	d202      	bcs.n	800894a <get_target_frame_index+0xa6>
    {
        return -2;
 8008944:	f06f 0301 	mvn.w	r3, #1
 8008948:	e027      	b.n	800899a <get_target_frame_index+0xf6>
    }
    if (compressed_length > sizeof(temp))
 800894a:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 800894e:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8008952:	d902      	bls.n	800895a <get_target_frame_index+0xb6>
    {
        return -1;
 8008954:	f04f 33ff 	mov.w	r3, #4294967295
 8008958:	e01f      	b.n	800899a <get_target_frame_index+0xf6>
    }

    W25Q64_Read(Video_Basic_Addr + picture_start_offset + target_ptr_val, temp, compressed_length);
 800895a:	f8d7 23b0 	ldr.w	r2, [r7, #944]	@ 0x3b0
 800895e:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 8008962:	4413      	add	r3, r2
 8008964:	f107 0114 	add.w	r1, r7, #20
 8008968:	f8d7 23b8 	ldr.w	r2, [r7, #952]	@ 0x3b8
 800896c:	4618      	mov	r0, r3
 800896e:	f7f8 fbc7 	bl	8001100 <W25Q64_Read>

    int decompressed_bytes = lz77_decompress(temp, compressed_length, dst, output_size);
 8008972:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8008976:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 800897a:	f507 7270 	add.w	r2, r7, #960	@ 0x3c0
 800897e:	f5a2 726e 	sub.w	r2, r2, #952	@ 0x3b8
 8008982:	f107 0014 	add.w	r0, r7, #20
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6812      	ldr	r2, [r2, #0]
 800898a:	f8d7 13b8 	ldr.w	r1, [r7, #952]	@ 0x3b8
 800898e:	f7ff fde3 	bl	8008558 <lz77_decompress>
 8008992:	f8c7 03b4 	str.w	r0, [r7, #948]	@ 0x3b4
    return decompressed_bytes;
 8008996:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
}
 800899a:	4618      	mov	r0, r3
 800899c:	f507 7770 	add.w	r7, r7, #960	@ 0x3c0
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80089a4:	f7ff fd2c 	bl	8008400 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80089a8:	480b      	ldr	r0, [pc, #44]	@ (80089d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80089aa:	490c      	ldr	r1, [pc, #48]	@ (80089dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80089ac:	4a0c      	ldr	r2, [pc, #48]	@ (80089e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80089ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80089b0:	e002      	b.n	80089b8 <LoopCopyDataInit>

080089b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80089b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80089b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80089b6:	3304      	adds	r3, #4

080089b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80089b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80089ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80089bc:	d3f9      	bcc.n	80089b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80089be:	4a09      	ldr	r2, [pc, #36]	@ (80089e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80089c0:	4c09      	ldr	r4, [pc, #36]	@ (80089e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80089c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80089c4:	e001      	b.n	80089ca <LoopFillZerobss>

080089c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80089c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80089c8:	3204      	adds	r2, #4

080089ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80089ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80089cc:	d3fb      	bcc.n	80089c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80089ce:	f002 fed1 	bl	800b774 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80089d2:	f7f9 fc93 	bl	80022fc <main>
  bx lr
 80089d6:	4770      	bx	lr
  ldr r0, =_sdata
 80089d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80089dc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80089e0:	0800e714 	.word	0x0800e714
  ldr r2, =_sbss
 80089e4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80089e8:	200041b8 	.word	0x200041b8

080089ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80089ec:	e7fe      	b.n	80089ec <ADC1_2_IRQHandler>
	...

080089f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80089f4:	4b08      	ldr	r3, [pc, #32]	@ (8008a18 <HAL_Init+0x28>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a07      	ldr	r2, [pc, #28]	@ (8008a18 <HAL_Init+0x28>)
 80089fa:	f043 0310 	orr.w	r3, r3, #16
 80089fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008a00:	2003      	movs	r0, #3
 8008a02:	f000 f947 	bl	8008c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008a06:	200f      	movs	r0, #15
 8008a08:	f000 f808 	bl	8008a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008a0c:	f7ff fbce 	bl	80081ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	40022000 	.word	0x40022000

08008a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008a24:	4b12      	ldr	r3, [pc, #72]	@ (8008a70 <HAL_InitTick+0x54>)
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	4b12      	ldr	r3, [pc, #72]	@ (8008a74 <HAL_InitTick+0x58>)
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 f95f 	bl	8008cfe <HAL_SYSTICK_Config>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e00e      	b.n	8008a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b0f      	cmp	r3, #15
 8008a4e:	d80a      	bhi.n	8008a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008a50:	2200      	movs	r2, #0
 8008a52:	6879      	ldr	r1, [r7, #4]
 8008a54:	f04f 30ff 	mov.w	r0, #4294967295
 8008a58:	f000 f927 	bl	8008caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008a5c:	4a06      	ldr	r2, [pc, #24]	@ (8008a78 <HAL_InitTick+0x5c>)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	e000      	b.n	8008a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3708      	adds	r7, #8
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	2000001c 	.word	0x2000001c
 8008a74:	20000024 	.word	0x20000024
 8008a78:	20000020 	.word	0x20000020

08008a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008a80:	4b05      	ldr	r3, [pc, #20]	@ (8008a98 <HAL_IncTick+0x1c>)
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	461a      	mov	r2, r3
 8008a86:	4b05      	ldr	r3, [pc, #20]	@ (8008a9c <HAL_IncTick+0x20>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	4a03      	ldr	r2, [pc, #12]	@ (8008a9c <HAL_IncTick+0x20>)
 8008a8e:	6013      	str	r3, [r2, #0]
}
 8008a90:	bf00      	nop
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bc80      	pop	{r7}
 8008a96:	4770      	bx	lr
 8008a98:	20000024 	.word	0x20000024
 8008a9c:	20004068 	.word	0x20004068

08008aa0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8008aa4:	4b02      	ldr	r3, [pc, #8]	@ (8008ab0 <HAL_GetTick+0x10>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bc80      	pop	{r7}
 8008aae:	4770      	bx	lr
 8008ab0:	20004068 	.word	0x20004068

08008ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008abc:	f7ff fff0 	bl	8008aa0 <HAL_GetTick>
 8008ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008acc:	d005      	beq.n	8008ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008ace:	4b0a      	ldr	r3, [pc, #40]	@ (8008af8 <HAL_Delay+0x44>)
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008ada:	bf00      	nop
 8008adc:	f7ff ffe0 	bl	8008aa0 <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d8f7      	bhi.n	8008adc <HAL_Delay+0x28>
  {
  }
}
 8008aec:	bf00      	nop
 8008aee:	bf00      	nop
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20000024 	.word	0x20000024

08008afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f003 0307 	and.w	r3, r3, #7
 8008b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8008b40 <__NVIC_SetPriorityGrouping+0x44>)
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008b12:	68ba      	ldr	r2, [r7, #8]
 8008b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008b18:	4013      	ands	r3, r2
 8008b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008b2e:	4a04      	ldr	r2, [pc, #16]	@ (8008b40 <__NVIC_SetPriorityGrouping+0x44>)
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	60d3      	str	r3, [r2, #12]
}
 8008b34:	bf00      	nop
 8008b36:	3714      	adds	r7, #20
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bc80      	pop	{r7}
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	e000ed00 	.word	0xe000ed00

08008b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008b44:	b480      	push	{r7}
 8008b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008b48:	4b04      	ldr	r3, [pc, #16]	@ (8008b5c <__NVIC_GetPriorityGrouping+0x18>)
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	0a1b      	lsrs	r3, r3, #8
 8008b4e:	f003 0307 	and.w	r3, r3, #7
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bc80      	pop	{r7}
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	e000ed00 	.word	0xe000ed00

08008b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	4603      	mov	r3, r0
 8008b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	db0b      	blt.n	8008b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b72:	79fb      	ldrb	r3, [r7, #7]
 8008b74:	f003 021f 	and.w	r2, r3, #31
 8008b78:	4906      	ldr	r1, [pc, #24]	@ (8008b94 <__NVIC_EnableIRQ+0x34>)
 8008b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b7e:	095b      	lsrs	r3, r3, #5
 8008b80:	2001      	movs	r0, #1
 8008b82:	fa00 f202 	lsl.w	r2, r0, r2
 8008b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008b8a:	bf00      	nop
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bc80      	pop	{r7}
 8008b92:	4770      	bx	lr
 8008b94:	e000e100 	.word	0xe000e100

08008b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	6039      	str	r1, [r7, #0]
 8008ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	db0a      	blt.n	8008bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	b2da      	uxtb	r2, r3
 8008bb0:	490c      	ldr	r1, [pc, #48]	@ (8008be4 <__NVIC_SetPriority+0x4c>)
 8008bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bb6:	0112      	lsls	r2, r2, #4
 8008bb8:	b2d2      	uxtb	r2, r2
 8008bba:	440b      	add	r3, r1
 8008bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008bc0:	e00a      	b.n	8008bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	4908      	ldr	r1, [pc, #32]	@ (8008be8 <__NVIC_SetPriority+0x50>)
 8008bc8:	79fb      	ldrb	r3, [r7, #7]
 8008bca:	f003 030f 	and.w	r3, r3, #15
 8008bce:	3b04      	subs	r3, #4
 8008bd0:	0112      	lsls	r2, r2, #4
 8008bd2:	b2d2      	uxtb	r2, r2
 8008bd4:	440b      	add	r3, r1
 8008bd6:	761a      	strb	r2, [r3, #24]
}
 8008bd8:	bf00      	nop
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bc80      	pop	{r7}
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	e000e100 	.word	0xe000e100
 8008be8:	e000ed00 	.word	0xe000ed00

08008bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b089      	sub	sp, #36	@ 0x24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f003 0307 	and.w	r3, r3, #7
 8008bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	f1c3 0307 	rsb	r3, r3, #7
 8008c06:	2b04      	cmp	r3, #4
 8008c08:	bf28      	it	cs
 8008c0a:	2304      	movcs	r3, #4
 8008c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	3304      	adds	r3, #4
 8008c12:	2b06      	cmp	r3, #6
 8008c14:	d902      	bls.n	8008c1c <NVIC_EncodePriority+0x30>
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	3b03      	subs	r3, #3
 8008c1a:	e000      	b.n	8008c1e <NVIC_EncodePriority+0x32>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c20:	f04f 32ff 	mov.w	r2, #4294967295
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2a:	43da      	mvns	r2, r3
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	401a      	ands	r2, r3
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008c34:	f04f 31ff 	mov.w	r1, #4294967295
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8008c3e:	43d9      	mvns	r1, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c44:	4313      	orrs	r3, r2
         );
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3724      	adds	r7, #36	@ 0x24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bc80      	pop	{r7}
 8008c4e:	4770      	bx	lr

08008c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c60:	d301      	bcc.n	8008c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008c62:	2301      	movs	r3, #1
 8008c64:	e00f      	b.n	8008c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008c66:	4a0a      	ldr	r2, [pc, #40]	@ (8008c90 <SysTick_Config+0x40>)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008c6e:	210f      	movs	r1, #15
 8008c70:	f04f 30ff 	mov.w	r0, #4294967295
 8008c74:	f7ff ff90 	bl	8008b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008c78:	4b05      	ldr	r3, [pc, #20]	@ (8008c90 <SysTick_Config+0x40>)
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008c7e:	4b04      	ldr	r3, [pc, #16]	@ (8008c90 <SysTick_Config+0x40>)
 8008c80:	2207      	movs	r2, #7
 8008c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	e000e010 	.word	0xe000e010

08008c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7ff ff2d 	bl	8008afc <__NVIC_SetPriorityGrouping>
}
 8008ca2:	bf00      	nop
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b086      	sub	sp, #24
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	60b9      	str	r1, [r7, #8]
 8008cb4:	607a      	str	r2, [r7, #4]
 8008cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008cbc:	f7ff ff42 	bl	8008b44 <__NVIC_GetPriorityGrouping>
 8008cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	68b9      	ldr	r1, [r7, #8]
 8008cc6:	6978      	ldr	r0, [r7, #20]
 8008cc8:	f7ff ff90 	bl	8008bec <NVIC_EncodePriority>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7ff ff5f 	bl	8008b98 <__NVIC_SetPriority>
}
 8008cda:	bf00      	nop
 8008cdc:	3718      	adds	r7, #24
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b082      	sub	sp, #8
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	4603      	mov	r3, r0
 8008cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7ff ff35 	bl	8008b60 <__NVIC_EnableIRQ>
}
 8008cf6:	bf00      	nop
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b082      	sub	sp, #8
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7ff ffa2 	bl	8008c50 <SysTick_Config>
 8008d0c:	4603      	mov	r3, r0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
	...

08008d18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008d20:	2300      	movs	r3, #0
 8008d22:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d101      	bne.n	8008d2e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e043      	b.n	8008db6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	461a      	mov	r2, r3
 8008d34:	4b22      	ldr	r3, [pc, #136]	@ (8008dc0 <HAL_DMA_Init+0xa8>)
 8008d36:	4413      	add	r3, r2
 8008d38:	4a22      	ldr	r2, [pc, #136]	@ (8008dc4 <HAL_DMA_Init+0xac>)
 8008d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d3e:	091b      	lsrs	r3, r3, #4
 8008d40:	009a      	lsls	r2, r3, #2
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a1f      	ldr	r2, [pc, #124]	@ (8008dc8 <HAL_DMA_Init+0xb0>)
 8008d4a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2202      	movs	r2, #2
 8008d50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8008d62:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8008d66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8008d70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	69db      	ldr	r3, [r3, #28]
 8008d8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3714      	adds	r7, #20
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bc80      	pop	{r7}
 8008dbe:	4770      	bx	lr
 8008dc0:	bffdfff8 	.word	0xbffdfff8
 8008dc4:	cccccccd 	.word	0xcccccccd
 8008dc8:	40020000 	.word	0x40020000

08008dcc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008de8:	2204      	movs	r2, #4
 8008dea:	409a      	lsls	r2, r3
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	4013      	ands	r3, r2
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d04f      	beq.n	8008e94 <HAL_DMA_IRQHandler+0xc8>
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	f003 0304 	and.w	r3, r3, #4
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d04a      	beq.n	8008e94 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 0320 	and.w	r3, r3, #32
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d107      	bne.n	8008e1c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f022 0204 	bic.w	r2, r2, #4
 8008e1a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a66      	ldr	r2, [pc, #408]	@ (8008fbc <HAL_DMA_IRQHandler+0x1f0>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d029      	beq.n	8008e7a <HAL_DMA_IRQHandler+0xae>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a65      	ldr	r2, [pc, #404]	@ (8008fc0 <HAL_DMA_IRQHandler+0x1f4>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d022      	beq.n	8008e76 <HAL_DMA_IRQHandler+0xaa>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a63      	ldr	r2, [pc, #396]	@ (8008fc4 <HAL_DMA_IRQHandler+0x1f8>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d01a      	beq.n	8008e70 <HAL_DMA_IRQHandler+0xa4>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a62      	ldr	r2, [pc, #392]	@ (8008fc8 <HAL_DMA_IRQHandler+0x1fc>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d012      	beq.n	8008e6a <HAL_DMA_IRQHandler+0x9e>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a60      	ldr	r2, [pc, #384]	@ (8008fcc <HAL_DMA_IRQHandler+0x200>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d00a      	beq.n	8008e64 <HAL_DMA_IRQHandler+0x98>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a5f      	ldr	r2, [pc, #380]	@ (8008fd0 <HAL_DMA_IRQHandler+0x204>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d102      	bne.n	8008e5e <HAL_DMA_IRQHandler+0x92>
 8008e58:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008e5c:	e00e      	b.n	8008e7c <HAL_DMA_IRQHandler+0xb0>
 8008e5e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008e62:	e00b      	b.n	8008e7c <HAL_DMA_IRQHandler+0xb0>
 8008e64:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8008e68:	e008      	b.n	8008e7c <HAL_DMA_IRQHandler+0xb0>
 8008e6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008e6e:	e005      	b.n	8008e7c <HAL_DMA_IRQHandler+0xb0>
 8008e70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e74:	e002      	b.n	8008e7c <HAL_DMA_IRQHandler+0xb0>
 8008e76:	2340      	movs	r3, #64	@ 0x40
 8008e78:	e000      	b.n	8008e7c <HAL_DMA_IRQHandler+0xb0>
 8008e7a:	2304      	movs	r3, #4
 8008e7c:	4a55      	ldr	r2, [pc, #340]	@ (8008fd4 <HAL_DMA_IRQHandler+0x208>)
 8008e7e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f000 8094 	beq.w	8008fb2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8008e92:	e08e      	b.n	8008fb2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e98:	2202      	movs	r2, #2
 8008e9a:	409a      	lsls	r2, r3
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d056      	beq.n	8008f52 <HAL_DMA_IRQHandler+0x186>
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	f003 0302 	and.w	r3, r3, #2
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d051      	beq.n	8008f52 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 0320 	and.w	r3, r3, #32
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10b      	bne.n	8008ed4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f022 020a 	bic.w	r2, r2, #10
 8008eca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a38      	ldr	r2, [pc, #224]	@ (8008fbc <HAL_DMA_IRQHandler+0x1f0>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d029      	beq.n	8008f32 <HAL_DMA_IRQHandler+0x166>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a37      	ldr	r2, [pc, #220]	@ (8008fc0 <HAL_DMA_IRQHandler+0x1f4>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d022      	beq.n	8008f2e <HAL_DMA_IRQHandler+0x162>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a35      	ldr	r2, [pc, #212]	@ (8008fc4 <HAL_DMA_IRQHandler+0x1f8>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d01a      	beq.n	8008f28 <HAL_DMA_IRQHandler+0x15c>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a34      	ldr	r2, [pc, #208]	@ (8008fc8 <HAL_DMA_IRQHandler+0x1fc>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d012      	beq.n	8008f22 <HAL_DMA_IRQHandler+0x156>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a32      	ldr	r2, [pc, #200]	@ (8008fcc <HAL_DMA_IRQHandler+0x200>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d00a      	beq.n	8008f1c <HAL_DMA_IRQHandler+0x150>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a31      	ldr	r2, [pc, #196]	@ (8008fd0 <HAL_DMA_IRQHandler+0x204>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d102      	bne.n	8008f16 <HAL_DMA_IRQHandler+0x14a>
 8008f10:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008f14:	e00e      	b.n	8008f34 <HAL_DMA_IRQHandler+0x168>
 8008f16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008f1a:	e00b      	b.n	8008f34 <HAL_DMA_IRQHandler+0x168>
 8008f1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008f20:	e008      	b.n	8008f34 <HAL_DMA_IRQHandler+0x168>
 8008f22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008f26:	e005      	b.n	8008f34 <HAL_DMA_IRQHandler+0x168>
 8008f28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f2c:	e002      	b.n	8008f34 <HAL_DMA_IRQHandler+0x168>
 8008f2e:	2320      	movs	r3, #32
 8008f30:	e000      	b.n	8008f34 <HAL_DMA_IRQHandler+0x168>
 8008f32:	2302      	movs	r3, #2
 8008f34:	4a27      	ldr	r2, [pc, #156]	@ (8008fd4 <HAL_DMA_IRQHandler+0x208>)
 8008f36:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d034      	beq.n	8008fb2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008f50:	e02f      	b.n	8008fb2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f56:	2208      	movs	r2, #8
 8008f58:	409a      	lsls	r2, r3
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d028      	beq.n	8008fb4 <HAL_DMA_IRQHandler+0x1e8>
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	f003 0308 	and.w	r3, r3, #8
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d023      	beq.n	8008fb4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f022 020e 	bic.w	r2, r2, #14
 8008f7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f84:	2101      	movs	r1, #1
 8008f86:	fa01 f202 	lsl.w	r2, r1, r2
 8008f8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d004      	beq.n	8008fb4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	4798      	blx	r3
    }
  }
  return;
 8008fb2:	bf00      	nop
 8008fb4:	bf00      	nop
}
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	40020008 	.word	0x40020008
 8008fc0:	4002001c 	.word	0x4002001c
 8008fc4:	40020030 	.word	0x40020030
 8008fc8:	40020044 	.word	0x40020044
 8008fcc:	40020058 	.word	0x40020058
 8008fd0:	4002006c 	.word	0x4002006c
 8008fd4:	40020000 	.word	0x40020000

08008fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b08b      	sub	sp, #44	@ 0x2c
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008fea:	e169      	b.n	80092c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008fec:	2201      	movs	r2, #1
 8008fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	69fa      	ldr	r2, [r7, #28]
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009000:	69ba      	ldr	r2, [r7, #24]
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	429a      	cmp	r2, r3
 8009006:	f040 8158 	bne.w	80092ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	4a9a      	ldr	r2, [pc, #616]	@ (8009278 <HAL_GPIO_Init+0x2a0>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d05e      	beq.n	80090d2 <HAL_GPIO_Init+0xfa>
 8009014:	4a98      	ldr	r2, [pc, #608]	@ (8009278 <HAL_GPIO_Init+0x2a0>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d875      	bhi.n	8009106 <HAL_GPIO_Init+0x12e>
 800901a:	4a98      	ldr	r2, [pc, #608]	@ (800927c <HAL_GPIO_Init+0x2a4>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d058      	beq.n	80090d2 <HAL_GPIO_Init+0xfa>
 8009020:	4a96      	ldr	r2, [pc, #600]	@ (800927c <HAL_GPIO_Init+0x2a4>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d86f      	bhi.n	8009106 <HAL_GPIO_Init+0x12e>
 8009026:	4a96      	ldr	r2, [pc, #600]	@ (8009280 <HAL_GPIO_Init+0x2a8>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d052      	beq.n	80090d2 <HAL_GPIO_Init+0xfa>
 800902c:	4a94      	ldr	r2, [pc, #592]	@ (8009280 <HAL_GPIO_Init+0x2a8>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d869      	bhi.n	8009106 <HAL_GPIO_Init+0x12e>
 8009032:	4a94      	ldr	r2, [pc, #592]	@ (8009284 <HAL_GPIO_Init+0x2ac>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d04c      	beq.n	80090d2 <HAL_GPIO_Init+0xfa>
 8009038:	4a92      	ldr	r2, [pc, #584]	@ (8009284 <HAL_GPIO_Init+0x2ac>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d863      	bhi.n	8009106 <HAL_GPIO_Init+0x12e>
 800903e:	4a92      	ldr	r2, [pc, #584]	@ (8009288 <HAL_GPIO_Init+0x2b0>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d046      	beq.n	80090d2 <HAL_GPIO_Init+0xfa>
 8009044:	4a90      	ldr	r2, [pc, #576]	@ (8009288 <HAL_GPIO_Init+0x2b0>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d85d      	bhi.n	8009106 <HAL_GPIO_Init+0x12e>
 800904a:	2b12      	cmp	r3, #18
 800904c:	d82a      	bhi.n	80090a4 <HAL_GPIO_Init+0xcc>
 800904e:	2b12      	cmp	r3, #18
 8009050:	d859      	bhi.n	8009106 <HAL_GPIO_Init+0x12e>
 8009052:	a201      	add	r2, pc, #4	@ (adr r2, 8009058 <HAL_GPIO_Init+0x80>)
 8009054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009058:	080090d3 	.word	0x080090d3
 800905c:	080090ad 	.word	0x080090ad
 8009060:	080090bf 	.word	0x080090bf
 8009064:	08009101 	.word	0x08009101
 8009068:	08009107 	.word	0x08009107
 800906c:	08009107 	.word	0x08009107
 8009070:	08009107 	.word	0x08009107
 8009074:	08009107 	.word	0x08009107
 8009078:	08009107 	.word	0x08009107
 800907c:	08009107 	.word	0x08009107
 8009080:	08009107 	.word	0x08009107
 8009084:	08009107 	.word	0x08009107
 8009088:	08009107 	.word	0x08009107
 800908c:	08009107 	.word	0x08009107
 8009090:	08009107 	.word	0x08009107
 8009094:	08009107 	.word	0x08009107
 8009098:	08009107 	.word	0x08009107
 800909c:	080090b5 	.word	0x080090b5
 80090a0:	080090c9 	.word	0x080090c9
 80090a4:	4a79      	ldr	r2, [pc, #484]	@ (800928c <HAL_GPIO_Init+0x2b4>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d013      	beq.n	80090d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80090aa:	e02c      	b.n	8009106 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	623b      	str	r3, [r7, #32]
          break;
 80090b2:	e029      	b.n	8009108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	3304      	adds	r3, #4
 80090ba:	623b      	str	r3, [r7, #32]
          break;
 80090bc:	e024      	b.n	8009108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	3308      	adds	r3, #8
 80090c4:	623b      	str	r3, [r7, #32]
          break;
 80090c6:	e01f      	b.n	8009108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	330c      	adds	r3, #12
 80090ce:	623b      	str	r3, [r7, #32]
          break;
 80090d0:	e01a      	b.n	8009108 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d102      	bne.n	80090e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80090da:	2304      	movs	r3, #4
 80090dc:	623b      	str	r3, [r7, #32]
          break;
 80090de:	e013      	b.n	8009108 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d105      	bne.n	80090f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80090e8:	2308      	movs	r3, #8
 80090ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	69fa      	ldr	r2, [r7, #28]
 80090f0:	611a      	str	r2, [r3, #16]
          break;
 80090f2:	e009      	b.n	8009108 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80090f4:	2308      	movs	r3, #8
 80090f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	69fa      	ldr	r2, [r7, #28]
 80090fc:	615a      	str	r2, [r3, #20]
          break;
 80090fe:	e003      	b.n	8009108 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009100:	2300      	movs	r3, #0
 8009102:	623b      	str	r3, [r7, #32]
          break;
 8009104:	e000      	b.n	8009108 <HAL_GPIO_Init+0x130>
          break;
 8009106:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	2bff      	cmp	r3, #255	@ 0xff
 800910c:	d801      	bhi.n	8009112 <HAL_GPIO_Init+0x13a>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	e001      	b.n	8009116 <HAL_GPIO_Init+0x13e>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	3304      	adds	r3, #4
 8009116:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	2bff      	cmp	r3, #255	@ 0xff
 800911c:	d802      	bhi.n	8009124 <HAL_GPIO_Init+0x14c>
 800911e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	e002      	b.n	800912a <HAL_GPIO_Init+0x152>
 8009124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009126:	3b08      	subs	r3, #8
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	210f      	movs	r1, #15
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	fa01 f303 	lsl.w	r3, r1, r3
 8009138:	43db      	mvns	r3, r3
 800913a:	401a      	ands	r2, r3
 800913c:	6a39      	ldr	r1, [r7, #32]
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	fa01 f303 	lsl.w	r3, r1, r3
 8009144:	431a      	orrs	r2, r3
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009152:	2b00      	cmp	r3, #0
 8009154:	f000 80b1 	beq.w	80092ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009158:	4b4d      	ldr	r3, [pc, #308]	@ (8009290 <HAL_GPIO_Init+0x2b8>)
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	4a4c      	ldr	r2, [pc, #304]	@ (8009290 <HAL_GPIO_Init+0x2b8>)
 800915e:	f043 0301 	orr.w	r3, r3, #1
 8009162:	6193      	str	r3, [r2, #24]
 8009164:	4b4a      	ldr	r3, [pc, #296]	@ (8009290 <HAL_GPIO_Init+0x2b8>)
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	f003 0301 	and.w	r3, r3, #1
 800916c:	60bb      	str	r3, [r7, #8]
 800916e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009170:	4a48      	ldr	r2, [pc, #288]	@ (8009294 <HAL_GPIO_Init+0x2bc>)
 8009172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009174:	089b      	lsrs	r3, r3, #2
 8009176:	3302      	adds	r3, #2
 8009178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800917c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800917e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009180:	f003 0303 	and.w	r3, r3, #3
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	220f      	movs	r2, #15
 8009188:	fa02 f303 	lsl.w	r3, r2, r3
 800918c:	43db      	mvns	r3, r3
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	4013      	ands	r3, r2
 8009192:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4a40      	ldr	r2, [pc, #256]	@ (8009298 <HAL_GPIO_Init+0x2c0>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d013      	beq.n	80091c4 <HAL_GPIO_Init+0x1ec>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4a3f      	ldr	r2, [pc, #252]	@ (800929c <HAL_GPIO_Init+0x2c4>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d00d      	beq.n	80091c0 <HAL_GPIO_Init+0x1e8>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a3e      	ldr	r2, [pc, #248]	@ (80092a0 <HAL_GPIO_Init+0x2c8>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d007      	beq.n	80091bc <HAL_GPIO_Init+0x1e4>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a3d      	ldr	r2, [pc, #244]	@ (80092a4 <HAL_GPIO_Init+0x2cc>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d101      	bne.n	80091b8 <HAL_GPIO_Init+0x1e0>
 80091b4:	2303      	movs	r3, #3
 80091b6:	e006      	b.n	80091c6 <HAL_GPIO_Init+0x1ee>
 80091b8:	2304      	movs	r3, #4
 80091ba:	e004      	b.n	80091c6 <HAL_GPIO_Init+0x1ee>
 80091bc:	2302      	movs	r3, #2
 80091be:	e002      	b.n	80091c6 <HAL_GPIO_Init+0x1ee>
 80091c0:	2301      	movs	r3, #1
 80091c2:	e000      	b.n	80091c6 <HAL_GPIO_Init+0x1ee>
 80091c4:	2300      	movs	r3, #0
 80091c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091c8:	f002 0203 	and.w	r2, r2, #3
 80091cc:	0092      	lsls	r2, r2, #2
 80091ce:	4093      	lsls	r3, r2
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80091d6:	492f      	ldr	r1, [pc, #188]	@ (8009294 <HAL_GPIO_Init+0x2bc>)
 80091d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091da:	089b      	lsrs	r3, r3, #2
 80091dc:	3302      	adds	r3, #2
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d006      	beq.n	80091fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80091f0:	4b2d      	ldr	r3, [pc, #180]	@ (80092a8 <HAL_GPIO_Init+0x2d0>)
 80091f2:	689a      	ldr	r2, [r3, #8]
 80091f4:	492c      	ldr	r1, [pc, #176]	@ (80092a8 <HAL_GPIO_Init+0x2d0>)
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	608b      	str	r3, [r1, #8]
 80091fc:	e006      	b.n	800920c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80091fe:	4b2a      	ldr	r3, [pc, #168]	@ (80092a8 <HAL_GPIO_Init+0x2d0>)
 8009200:	689a      	ldr	r2, [r3, #8]
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	43db      	mvns	r3, r3
 8009206:	4928      	ldr	r1, [pc, #160]	@ (80092a8 <HAL_GPIO_Init+0x2d0>)
 8009208:	4013      	ands	r3, r2
 800920a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d006      	beq.n	8009226 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009218:	4b23      	ldr	r3, [pc, #140]	@ (80092a8 <HAL_GPIO_Init+0x2d0>)
 800921a:	68da      	ldr	r2, [r3, #12]
 800921c:	4922      	ldr	r1, [pc, #136]	@ (80092a8 <HAL_GPIO_Init+0x2d0>)
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	4313      	orrs	r3, r2
 8009222:	60cb      	str	r3, [r1, #12]
 8009224:	e006      	b.n	8009234 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009226:	4b20      	ldr	r3, [pc, #128]	@ (80092a8 <HAL_GPIO_Init+0x2d0>)
 8009228:	68da      	ldr	r2, [r3, #12]
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	43db      	mvns	r3, r3
 800922e:	491e      	ldr	r1, [pc, #120]	@ (80092a8 <HAL_GPIO_Init+0x2d0>)
 8009230:	4013      	ands	r3, r2
 8009232:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800923c:	2b00      	cmp	r3, #0
 800923e:	d006      	beq.n	800924e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009240:	4b19      	ldr	r3, [pc, #100]	@ (80092a8 <HAL_GPIO_Init+0x2d0>)
 8009242:	685a      	ldr	r2, [r3, #4]
 8009244:	4918      	ldr	r1, [pc, #96]	@ (80092a8 <HAL_GPIO_Init+0x2d0>)
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	4313      	orrs	r3, r2
 800924a:	604b      	str	r3, [r1, #4]
 800924c:	e006      	b.n	800925c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800924e:	4b16      	ldr	r3, [pc, #88]	@ (80092a8 <HAL_GPIO_Init+0x2d0>)
 8009250:	685a      	ldr	r2, [r3, #4]
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	43db      	mvns	r3, r3
 8009256:	4914      	ldr	r1, [pc, #80]	@ (80092a8 <HAL_GPIO_Init+0x2d0>)
 8009258:	4013      	ands	r3, r2
 800925a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009264:	2b00      	cmp	r3, #0
 8009266:	d021      	beq.n	80092ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009268:	4b0f      	ldr	r3, [pc, #60]	@ (80092a8 <HAL_GPIO_Init+0x2d0>)
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	490e      	ldr	r1, [pc, #56]	@ (80092a8 <HAL_GPIO_Init+0x2d0>)
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	4313      	orrs	r3, r2
 8009272:	600b      	str	r3, [r1, #0]
 8009274:	e021      	b.n	80092ba <HAL_GPIO_Init+0x2e2>
 8009276:	bf00      	nop
 8009278:	10320000 	.word	0x10320000
 800927c:	10310000 	.word	0x10310000
 8009280:	10220000 	.word	0x10220000
 8009284:	10210000 	.word	0x10210000
 8009288:	10120000 	.word	0x10120000
 800928c:	10110000 	.word	0x10110000
 8009290:	40021000 	.word	0x40021000
 8009294:	40010000 	.word	0x40010000
 8009298:	40010800 	.word	0x40010800
 800929c:	40010c00 	.word	0x40010c00
 80092a0:	40011000 	.word	0x40011000
 80092a4:	40011400 	.word	0x40011400
 80092a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80092ac:	4b0b      	ldr	r3, [pc, #44]	@ (80092dc <HAL_GPIO_Init+0x304>)
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	43db      	mvns	r3, r3
 80092b4:	4909      	ldr	r1, [pc, #36]	@ (80092dc <HAL_GPIO_Init+0x304>)
 80092b6:	4013      	ands	r3, r2
 80092b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80092ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092bc:	3301      	adds	r3, #1
 80092be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c6:	fa22 f303 	lsr.w	r3, r2, r3
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f47f ae8e 	bne.w	8008fec <HAL_GPIO_Init+0x14>
  }
}
 80092d0:	bf00      	nop
 80092d2:	bf00      	nop
 80092d4:	372c      	adds	r7, #44	@ 0x2c
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bc80      	pop	{r7}
 80092da:	4770      	bx	lr
 80092dc:	40010400 	.word	0x40010400

080092e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	460b      	mov	r3, r1
 80092ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	689a      	ldr	r2, [r3, #8]
 80092f0:	887b      	ldrh	r3, [r7, #2]
 80092f2:	4013      	ands	r3, r2
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d002      	beq.n	80092fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80092f8:	2301      	movs	r3, #1
 80092fa:	73fb      	strb	r3, [r7, #15]
 80092fc:	e001      	b.n	8009302 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80092fe:	2300      	movs	r3, #0
 8009300:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009302:	7bfb      	ldrb	r3, [r7, #15]
}
 8009304:	4618      	mov	r0, r3
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	bc80      	pop	{r7}
 800930c:	4770      	bx	lr

0800930e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800930e:	b480      	push	{r7}
 8009310:	b083      	sub	sp, #12
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	460b      	mov	r3, r1
 8009318:	807b      	strh	r3, [r7, #2]
 800931a:	4613      	mov	r3, r2
 800931c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800931e:	787b      	ldrb	r3, [r7, #1]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d003      	beq.n	800932c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009324:	887a      	ldrh	r2, [r7, #2]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800932a:	e003      	b.n	8009334 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800932c:	887b      	ldrh	r3, [r7, #2]
 800932e:	041a      	lsls	r2, r3, #16
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	611a      	str	r2, [r3, #16]
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	bc80      	pop	{r7}
 800933c:	4770      	bx	lr
	...

08009340 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d101      	bne.n	8009352 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e12b      	b.n	80095aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009358:	b2db      	uxtb	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d106      	bne.n	800936c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7f8 ff5e 	bl	8002228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2224      	movs	r2, #36	@ 0x24
 8009370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f022 0201 	bic.w	r2, r2, #1
 8009382:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009392:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80093a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80093a4:	f001 f832 	bl	800a40c <HAL_RCC_GetPCLK1Freq>
 80093a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	4a81      	ldr	r2, [pc, #516]	@ (80095b4 <HAL_I2C_Init+0x274>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d807      	bhi.n	80093c4 <HAL_I2C_Init+0x84>
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	4a80      	ldr	r2, [pc, #512]	@ (80095b8 <HAL_I2C_Init+0x278>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	bf94      	ite	ls
 80093bc:	2301      	movls	r3, #1
 80093be:	2300      	movhi	r3, #0
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	e006      	b.n	80093d2 <HAL_I2C_Init+0x92>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	4a7d      	ldr	r2, [pc, #500]	@ (80095bc <HAL_I2C_Init+0x27c>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	bf94      	ite	ls
 80093cc:	2301      	movls	r3, #1
 80093ce:	2300      	movhi	r3, #0
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d001      	beq.n	80093da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	e0e7      	b.n	80095aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	4a78      	ldr	r2, [pc, #480]	@ (80095c0 <HAL_I2C_Init+0x280>)
 80093de:	fba2 2303 	umull	r2, r3, r2, r3
 80093e2:	0c9b      	lsrs	r3, r3, #18
 80093e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	68ba      	ldr	r2, [r7, #8]
 80093f6:	430a      	orrs	r2, r1
 80093f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	6a1b      	ldr	r3, [r3, #32]
 8009400:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	4a6a      	ldr	r2, [pc, #424]	@ (80095b4 <HAL_I2C_Init+0x274>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d802      	bhi.n	8009414 <HAL_I2C_Init+0xd4>
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	3301      	adds	r3, #1
 8009412:	e009      	b.n	8009428 <HAL_I2C_Init+0xe8>
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800941a:	fb02 f303 	mul.w	r3, r2, r3
 800941e:	4a69      	ldr	r2, [pc, #420]	@ (80095c4 <HAL_I2C_Init+0x284>)
 8009420:	fba2 2303 	umull	r2, r3, r2, r3
 8009424:	099b      	lsrs	r3, r3, #6
 8009426:	3301      	adds	r3, #1
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	6812      	ldr	r2, [r2, #0]
 800942c:	430b      	orrs	r3, r1
 800942e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	69db      	ldr	r3, [r3, #28]
 8009436:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800943a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	495c      	ldr	r1, [pc, #368]	@ (80095b4 <HAL_I2C_Init+0x274>)
 8009444:	428b      	cmp	r3, r1
 8009446:	d819      	bhi.n	800947c <HAL_I2C_Init+0x13c>
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	1e59      	subs	r1, r3, #1
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	005b      	lsls	r3, r3, #1
 8009452:	fbb1 f3f3 	udiv	r3, r1, r3
 8009456:	1c59      	adds	r1, r3, #1
 8009458:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800945c:	400b      	ands	r3, r1
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00a      	beq.n	8009478 <HAL_I2C_Init+0x138>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	1e59      	subs	r1, r3, #1
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	005b      	lsls	r3, r3, #1
 800946c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009470:	3301      	adds	r3, #1
 8009472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009476:	e051      	b.n	800951c <HAL_I2C_Init+0x1dc>
 8009478:	2304      	movs	r3, #4
 800947a:	e04f      	b.n	800951c <HAL_I2C_Init+0x1dc>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d111      	bne.n	80094a8 <HAL_I2C_Init+0x168>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	1e58      	subs	r0, r3, #1
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6859      	ldr	r1, [r3, #4]
 800948c:	460b      	mov	r3, r1
 800948e:	005b      	lsls	r3, r3, #1
 8009490:	440b      	add	r3, r1
 8009492:	fbb0 f3f3 	udiv	r3, r0, r3
 8009496:	3301      	adds	r3, #1
 8009498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800949c:	2b00      	cmp	r3, #0
 800949e:	bf0c      	ite	eq
 80094a0:	2301      	moveq	r3, #1
 80094a2:	2300      	movne	r3, #0
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	e012      	b.n	80094ce <HAL_I2C_Init+0x18e>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	1e58      	subs	r0, r3, #1
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6859      	ldr	r1, [r3, #4]
 80094b0:	460b      	mov	r3, r1
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	440b      	add	r3, r1
 80094b6:	0099      	lsls	r1, r3, #2
 80094b8:	440b      	add	r3, r1
 80094ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80094be:	3301      	adds	r3, #1
 80094c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	bf0c      	ite	eq
 80094c8:	2301      	moveq	r3, #1
 80094ca:	2300      	movne	r3, #0
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <HAL_I2C_Init+0x196>
 80094d2:	2301      	movs	r3, #1
 80094d4:	e022      	b.n	800951c <HAL_I2C_Init+0x1dc>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10e      	bne.n	80094fc <HAL_I2C_Init+0x1bc>
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	1e58      	subs	r0, r3, #1
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6859      	ldr	r1, [r3, #4]
 80094e6:	460b      	mov	r3, r1
 80094e8:	005b      	lsls	r3, r3, #1
 80094ea:	440b      	add	r3, r1
 80094ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80094f0:	3301      	adds	r3, #1
 80094f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094fa:	e00f      	b.n	800951c <HAL_I2C_Init+0x1dc>
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	1e58      	subs	r0, r3, #1
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6859      	ldr	r1, [r3, #4]
 8009504:	460b      	mov	r3, r1
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	440b      	add	r3, r1
 800950a:	0099      	lsls	r1, r3, #2
 800950c:	440b      	add	r3, r1
 800950e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009512:	3301      	adds	r3, #1
 8009514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009518:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800951c:	6879      	ldr	r1, [r7, #4]
 800951e:	6809      	ldr	r1, [r1, #0]
 8009520:	4313      	orrs	r3, r2
 8009522:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	69da      	ldr	r2, [r3, #28]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	431a      	orrs	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	430a      	orrs	r2, r1
 800953e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800954a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	6911      	ldr	r1, [r2, #16]
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	68d2      	ldr	r2, [r2, #12]
 8009556:	4311      	orrs	r1, r2
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	6812      	ldr	r2, [r2, #0]
 800955c:	430b      	orrs	r3, r1
 800955e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	695a      	ldr	r2, [r3, #20]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	431a      	orrs	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	430a      	orrs	r2, r1
 800957a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f042 0201 	orr.w	r2, r2, #1
 800958a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2220      	movs	r2, #32
 8009596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	000186a0 	.word	0x000186a0
 80095b8:	001e847f 	.word	0x001e847f
 80095bc:	003d08ff 	.word	0x003d08ff
 80095c0:	431bde83 	.word	0x431bde83
 80095c4:	10624dd3 	.word	0x10624dd3

080095c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b088      	sub	sp, #32
 80095cc:	af02      	add	r7, sp, #8
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	607a      	str	r2, [r7, #4]
 80095d2:	461a      	mov	r2, r3
 80095d4:	460b      	mov	r3, r1
 80095d6:	817b      	strh	r3, [r7, #10]
 80095d8:	4613      	mov	r3, r2
 80095da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80095dc:	f7ff fa60 	bl	8008aa0 <HAL_GetTick>
 80095e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	2b20      	cmp	r3, #32
 80095ec:	f040 80e0 	bne.w	80097b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	2319      	movs	r3, #25
 80095f6:	2201      	movs	r2, #1
 80095f8:	4970      	ldr	r1, [pc, #448]	@ (80097bc <HAL_I2C_Master_Transmit+0x1f4>)
 80095fa:	68f8      	ldr	r0, [r7, #12]
 80095fc:	f000 f964 	bl	80098c8 <I2C_WaitOnFlagUntilTimeout>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009606:	2302      	movs	r3, #2
 8009608:	e0d3      	b.n	80097b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009610:	2b01      	cmp	r3, #1
 8009612:	d101      	bne.n	8009618 <HAL_I2C_Master_Transmit+0x50>
 8009614:	2302      	movs	r3, #2
 8009616:	e0cc      	b.n	80097b2 <HAL_I2C_Master_Transmit+0x1ea>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f003 0301 	and.w	r3, r3, #1
 800962a:	2b01      	cmp	r3, #1
 800962c:	d007      	beq.n	800963e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f042 0201 	orr.w	r2, r2, #1
 800963c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800964c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2221      	movs	r2, #33	@ 0x21
 8009652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2210      	movs	r2, #16
 800965a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	893a      	ldrh	r2, [r7, #8]
 800966e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009674:	b29a      	uxth	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	4a50      	ldr	r2, [pc, #320]	@ (80097c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800967e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009680:	8979      	ldrh	r1, [r7, #10]
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	6a3a      	ldr	r2, [r7, #32]
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f000 f89c 	bl	80097c4 <I2C_MasterRequestWrite>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d001      	beq.n	8009696 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e08d      	b.n	80097b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009696:	2300      	movs	r3, #0
 8009698:	613b      	str	r3, [r7, #16]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	695b      	ldr	r3, [r3, #20]
 80096a0:	613b      	str	r3, [r7, #16]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	613b      	str	r3, [r7, #16]
 80096aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80096ac:	e066      	b.n	800977c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	6a39      	ldr	r1, [r7, #32]
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f000 fa22 	bl	8009afc <I2C_WaitOnTXEFlagUntilTimeout>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00d      	beq.n	80096da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096c2:	2b04      	cmp	r3, #4
 80096c4:	d107      	bne.n	80096d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80096d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e06b      	b.n	80097b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096de:	781a      	ldrb	r2, [r3, #0]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ea:	1c5a      	adds	r2, r3, #1
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	3b01      	subs	r3, #1
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009702:	3b01      	subs	r3, #1
 8009704:	b29a      	uxth	r2, r3
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	695b      	ldr	r3, [r3, #20]
 8009710:	f003 0304 	and.w	r3, r3, #4
 8009714:	2b04      	cmp	r3, #4
 8009716:	d11b      	bne.n	8009750 <HAL_I2C_Master_Transmit+0x188>
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800971c:	2b00      	cmp	r3, #0
 800971e:	d017      	beq.n	8009750 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009724:	781a      	ldrb	r2, [r3, #0]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009730:	1c5a      	adds	r2, r3, #1
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800973a:	b29b      	uxth	r3, r3
 800973c:	3b01      	subs	r3, #1
 800973e:	b29a      	uxth	r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009748:	3b01      	subs	r3, #1
 800974a:	b29a      	uxth	r2, r3
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	6a39      	ldr	r1, [r7, #32]
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	f000 fa19 	bl	8009b8c <I2C_WaitOnBTFFlagUntilTimeout>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00d      	beq.n	800977c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009764:	2b04      	cmp	r3, #4
 8009766:	d107      	bne.n	8009778 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009776:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	e01a      	b.n	80097b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009780:	2b00      	cmp	r3, #0
 8009782:	d194      	bne.n	80096ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2220      	movs	r2, #32
 8009798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80097ac:	2300      	movs	r3, #0
 80097ae:	e000      	b.n	80097b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80097b0:	2302      	movs	r3, #2
  }
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3718      	adds	r7, #24
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	00100002 	.word	0x00100002
 80097c0:	ffff0000 	.word	0xffff0000

080097c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b088      	sub	sp, #32
 80097c8:	af02      	add	r7, sp, #8
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	607a      	str	r2, [r7, #4]
 80097ce:	603b      	str	r3, [r7, #0]
 80097d0:	460b      	mov	r3, r1
 80097d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	2b08      	cmp	r3, #8
 80097de:	d006      	beq.n	80097ee <I2C_MasterRequestWrite+0x2a>
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d003      	beq.n	80097ee <I2C_MasterRequestWrite+0x2a>
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80097ec:	d108      	bne.n	8009800 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80097fc:	601a      	str	r2, [r3, #0]
 80097fe:	e00b      	b.n	8009818 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009804:	2b12      	cmp	r3, #18
 8009806:	d107      	bne.n	8009818 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009816:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f000 f84f 	bl	80098c8 <I2C_WaitOnFlagUntilTimeout>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00d      	beq.n	800984c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800983a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800983e:	d103      	bne.n	8009848 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009846:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009848:	2303      	movs	r3, #3
 800984a:	e035      	b.n	80098b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009854:	d108      	bne.n	8009868 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009856:	897b      	ldrh	r3, [r7, #10]
 8009858:	b2db      	uxtb	r3, r3
 800985a:	461a      	mov	r2, r3
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009864:	611a      	str	r2, [r3, #16]
 8009866:	e01b      	b.n	80098a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009868:	897b      	ldrh	r3, [r7, #10]
 800986a:	11db      	asrs	r3, r3, #7
 800986c:	b2db      	uxtb	r3, r3
 800986e:	f003 0306 	and.w	r3, r3, #6
 8009872:	b2db      	uxtb	r3, r3
 8009874:	f063 030f 	orn	r3, r3, #15
 8009878:	b2da      	uxtb	r2, r3
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	490e      	ldr	r1, [pc, #56]	@ (80098c0 <I2C_MasterRequestWrite+0xfc>)
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f000 f898 	bl	80099bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e010      	b.n	80098b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009896:	897b      	ldrh	r3, [r7, #10]
 8009898:	b2da      	uxtb	r2, r3
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	4907      	ldr	r1, [pc, #28]	@ (80098c4 <I2C_MasterRequestWrite+0x100>)
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f000 f888 	bl	80099bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e000      	b.n	80098b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3718      	adds	r7, #24
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	00010008 	.word	0x00010008
 80098c4:	00010002 	.word	0x00010002

080098c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	603b      	str	r3, [r7, #0]
 80098d4:	4613      	mov	r3, r2
 80098d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098d8:	e048      	b.n	800996c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e0:	d044      	beq.n	800996c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098e2:	f7ff f8dd 	bl	8008aa0 <HAL_GetTick>
 80098e6:	4602      	mov	r2, r0
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	683a      	ldr	r2, [r7, #0]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d302      	bcc.n	80098f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d139      	bne.n	800996c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	0c1b      	lsrs	r3, r3, #16
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d10d      	bne.n	800991e <I2C_WaitOnFlagUntilTimeout+0x56>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	695b      	ldr	r3, [r3, #20]
 8009908:	43da      	mvns	r2, r3
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	4013      	ands	r3, r2
 800990e:	b29b      	uxth	r3, r3
 8009910:	2b00      	cmp	r3, #0
 8009912:	bf0c      	ite	eq
 8009914:	2301      	moveq	r3, #1
 8009916:	2300      	movne	r3, #0
 8009918:	b2db      	uxtb	r3, r3
 800991a:	461a      	mov	r2, r3
 800991c:	e00c      	b.n	8009938 <I2C_WaitOnFlagUntilTimeout+0x70>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	699b      	ldr	r3, [r3, #24]
 8009924:	43da      	mvns	r2, r3
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	4013      	ands	r3, r2
 800992a:	b29b      	uxth	r3, r3
 800992c:	2b00      	cmp	r3, #0
 800992e:	bf0c      	ite	eq
 8009930:	2301      	moveq	r3, #1
 8009932:	2300      	movne	r3, #0
 8009934:	b2db      	uxtb	r3, r3
 8009936:	461a      	mov	r2, r3
 8009938:	79fb      	ldrb	r3, [r7, #7]
 800993a:	429a      	cmp	r2, r3
 800993c:	d116      	bne.n	800996c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2220      	movs	r2, #32
 8009948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2200      	movs	r2, #0
 8009950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009958:	f043 0220 	orr.w	r2, r3, #32
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009968:	2301      	movs	r3, #1
 800996a:	e023      	b.n	80099b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	0c1b      	lsrs	r3, r3, #16
 8009970:	b2db      	uxtb	r3, r3
 8009972:	2b01      	cmp	r3, #1
 8009974:	d10d      	bne.n	8009992 <I2C_WaitOnFlagUntilTimeout+0xca>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	695b      	ldr	r3, [r3, #20]
 800997c:	43da      	mvns	r2, r3
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	4013      	ands	r3, r2
 8009982:	b29b      	uxth	r3, r3
 8009984:	2b00      	cmp	r3, #0
 8009986:	bf0c      	ite	eq
 8009988:	2301      	moveq	r3, #1
 800998a:	2300      	movne	r3, #0
 800998c:	b2db      	uxtb	r3, r3
 800998e:	461a      	mov	r2, r3
 8009990:	e00c      	b.n	80099ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	43da      	mvns	r2, r3
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	4013      	ands	r3, r2
 800999e:	b29b      	uxth	r3, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	bf0c      	ite	eq
 80099a4:	2301      	moveq	r3, #1
 80099a6:	2300      	movne	r3, #0
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	461a      	mov	r2, r3
 80099ac:	79fb      	ldrb	r3, [r7, #7]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d093      	beq.n	80098da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	607a      	str	r2, [r7, #4]
 80099c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80099ca:	e071      	b.n	8009ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	695b      	ldr	r3, [r3, #20]
 80099d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099da:	d123      	bne.n	8009a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80099ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80099f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2220      	movs	r2, #32
 8009a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a10:	f043 0204 	orr.w	r2, r3, #4
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	e067      	b.n	8009af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a2a:	d041      	beq.n	8009ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a2c:	f7ff f838 	bl	8008aa0 <HAL_GetTick>
 8009a30:	4602      	mov	r2, r0
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d302      	bcc.n	8009a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d136      	bne.n	8009ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	0c1b      	lsrs	r3, r3, #16
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d10c      	bne.n	8009a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	695b      	ldr	r3, [r3, #20]
 8009a52:	43da      	mvns	r2, r3
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	4013      	ands	r3, r2
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	bf14      	ite	ne
 8009a5e:	2301      	movne	r3, #1
 8009a60:	2300      	moveq	r3, #0
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	e00b      	b.n	8009a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	699b      	ldr	r3, [r3, #24]
 8009a6c:	43da      	mvns	r2, r3
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	4013      	ands	r3, r2
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	bf14      	ite	ne
 8009a78:	2301      	movne	r3, #1
 8009a7a:	2300      	moveq	r3, #0
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d016      	beq.n	8009ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2220      	movs	r2, #32
 8009a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a9c:	f043 0220 	orr.w	r2, r3, #32
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	e021      	b.n	8009af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	0c1b      	lsrs	r3, r3, #16
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d10c      	bne.n	8009ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	695b      	ldr	r3, [r3, #20]
 8009ac0:	43da      	mvns	r2, r3
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	4013      	ands	r3, r2
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	bf14      	ite	ne
 8009acc:	2301      	movne	r3, #1
 8009ace:	2300      	moveq	r3, #0
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	e00b      	b.n	8009aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	43da      	mvns	r2, r3
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	4013      	ands	r3, r2
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	bf14      	ite	ne
 8009ae6:	2301      	movne	r3, #1
 8009ae8:	2300      	moveq	r3, #0
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f47f af6d 	bne.w	80099cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b08:	e034      	b.n	8009b74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f000 f886 	bl	8009c1c <I2C_IsAcknowledgeFailed>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d001      	beq.n	8009b1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	e034      	b.n	8009b84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b20:	d028      	beq.n	8009b74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b22:	f7fe ffbd 	bl	8008aa0 <HAL_GetTick>
 8009b26:	4602      	mov	r2, r0
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d302      	bcc.n	8009b38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d11d      	bne.n	8009b74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	695b      	ldr	r3, [r3, #20]
 8009b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b42:	2b80      	cmp	r3, #128	@ 0x80
 8009b44:	d016      	beq.n	8009b74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2220      	movs	r2, #32
 8009b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b60:	f043 0220 	orr.w	r2, r3, #32
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009b70:	2301      	movs	r3, #1
 8009b72:	e007      	b.n	8009b84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	695b      	ldr	r3, [r3, #20]
 8009b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b7e:	2b80      	cmp	r3, #128	@ 0x80
 8009b80:	d1c3      	bne.n	8009b0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009b98:	e034      	b.n	8009c04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f000 f83e 	bl	8009c1c <I2C_IsAcknowledgeFailed>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d001      	beq.n	8009baa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e034      	b.n	8009c14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb0:	d028      	beq.n	8009c04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bb2:	f7fe ff75 	bl	8008aa0 <HAL_GetTick>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	68ba      	ldr	r2, [r7, #8]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d302      	bcc.n	8009bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d11d      	bne.n	8009c04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	695b      	ldr	r3, [r3, #20]
 8009bce:	f003 0304 	and.w	r3, r3, #4
 8009bd2:	2b04      	cmp	r3, #4
 8009bd4:	d016      	beq.n	8009c04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2220      	movs	r2, #32
 8009be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bf0:	f043 0220 	orr.w	r2, r3, #32
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009c00:	2301      	movs	r3, #1
 8009c02:	e007      	b.n	8009c14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	695b      	ldr	r3, [r3, #20]
 8009c0a:	f003 0304 	and.w	r3, r3, #4
 8009c0e:	2b04      	cmp	r3, #4
 8009c10:	d1c3      	bne.n	8009b9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009c12:	2300      	movs	r3, #0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3710      	adds	r7, #16
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	695b      	ldr	r3, [r3, #20]
 8009c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c32:	d11b      	bne.n	8009c6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009c3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2220      	movs	r2, #32
 8009c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c58:	f043 0204 	orr.w	r2, r3, #4
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e000      	b.n	8009c6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	370c      	adds	r7, #12
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bc80      	pop	{r7}
 8009c76:	4770      	bx	lr

08009c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b086      	sub	sp, #24
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d101      	bne.n	8009c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	e272      	b.n	800a170 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f003 0301 	and.w	r3, r3, #1
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f000 8087 	beq.w	8009da6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009c98:	4b92      	ldr	r3, [pc, #584]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	f003 030c 	and.w	r3, r3, #12
 8009ca0:	2b04      	cmp	r3, #4
 8009ca2:	d00c      	beq.n	8009cbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009ca4:	4b8f      	ldr	r3, [pc, #572]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	f003 030c 	and.w	r3, r3, #12
 8009cac:	2b08      	cmp	r3, #8
 8009cae:	d112      	bne.n	8009cd6 <HAL_RCC_OscConfig+0x5e>
 8009cb0:	4b8c      	ldr	r3, [pc, #560]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cbc:	d10b      	bne.n	8009cd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009cbe:	4b89      	ldr	r3, [pc, #548]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d06c      	beq.n	8009da4 <HAL_RCC_OscConfig+0x12c>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d168      	bne.n	8009da4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e24c      	b.n	800a170 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cde:	d106      	bne.n	8009cee <HAL_RCC_OscConfig+0x76>
 8009ce0:	4b80      	ldr	r3, [pc, #512]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a7f      	ldr	r2, [pc, #508]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009cea:	6013      	str	r3, [r2, #0]
 8009cec:	e02e      	b.n	8009d4c <HAL_RCC_OscConfig+0xd4>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d10c      	bne.n	8009d10 <HAL_RCC_OscConfig+0x98>
 8009cf6:	4b7b      	ldr	r3, [pc, #492]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a7a      	ldr	r2, [pc, #488]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009cfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d00:	6013      	str	r3, [r2, #0]
 8009d02:	4b78      	ldr	r3, [pc, #480]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a77      	ldr	r2, [pc, #476]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009d08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009d0c:	6013      	str	r3, [r2, #0]
 8009d0e:	e01d      	b.n	8009d4c <HAL_RCC_OscConfig+0xd4>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009d18:	d10c      	bne.n	8009d34 <HAL_RCC_OscConfig+0xbc>
 8009d1a:	4b72      	ldr	r3, [pc, #456]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a71      	ldr	r2, [pc, #452]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009d20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009d24:	6013      	str	r3, [r2, #0]
 8009d26:	4b6f      	ldr	r3, [pc, #444]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a6e      	ldr	r2, [pc, #440]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d30:	6013      	str	r3, [r2, #0]
 8009d32:	e00b      	b.n	8009d4c <HAL_RCC_OscConfig+0xd4>
 8009d34:	4b6b      	ldr	r3, [pc, #428]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a6a      	ldr	r2, [pc, #424]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d3e:	6013      	str	r3, [r2, #0]
 8009d40:	4b68      	ldr	r3, [pc, #416]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a67      	ldr	r2, [pc, #412]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009d4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d013      	beq.n	8009d7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d54:	f7fe fea4 	bl	8008aa0 <HAL_GetTick>
 8009d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d5a:	e008      	b.n	8009d6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d5c:	f7fe fea0 	bl	8008aa0 <HAL_GetTick>
 8009d60:	4602      	mov	r2, r0
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	2b64      	cmp	r3, #100	@ 0x64
 8009d68:	d901      	bls.n	8009d6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009d6a:	2303      	movs	r3, #3
 8009d6c:	e200      	b.n	800a170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d6e:	4b5d      	ldr	r3, [pc, #372]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d0f0      	beq.n	8009d5c <HAL_RCC_OscConfig+0xe4>
 8009d7a:	e014      	b.n	8009da6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d7c:	f7fe fe90 	bl	8008aa0 <HAL_GetTick>
 8009d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d82:	e008      	b.n	8009d96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d84:	f7fe fe8c 	bl	8008aa0 <HAL_GetTick>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	1ad3      	subs	r3, r2, r3
 8009d8e:	2b64      	cmp	r3, #100	@ 0x64
 8009d90:	d901      	bls.n	8009d96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009d92:	2303      	movs	r3, #3
 8009d94:	e1ec      	b.n	800a170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d96:	4b53      	ldr	r3, [pc, #332]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1f0      	bne.n	8009d84 <HAL_RCC_OscConfig+0x10c>
 8009da2:	e000      	b.n	8009da6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 0302 	and.w	r3, r3, #2
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d063      	beq.n	8009e7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009db2:	4b4c      	ldr	r3, [pc, #304]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	f003 030c 	and.w	r3, r3, #12
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00b      	beq.n	8009dd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009dbe:	4b49      	ldr	r3, [pc, #292]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	f003 030c 	and.w	r3, r3, #12
 8009dc6:	2b08      	cmp	r3, #8
 8009dc8:	d11c      	bne.n	8009e04 <HAL_RCC_OscConfig+0x18c>
 8009dca:	4b46      	ldr	r3, [pc, #280]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d116      	bne.n	8009e04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009dd6:	4b43      	ldr	r3, [pc, #268]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f003 0302 	and.w	r3, r3, #2
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d005      	beq.n	8009dee <HAL_RCC_OscConfig+0x176>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d001      	beq.n	8009dee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e1c0      	b.n	800a170 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009dee:	4b3d      	ldr	r3, [pc, #244]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	695b      	ldr	r3, [r3, #20]
 8009dfa:	00db      	lsls	r3, r3, #3
 8009dfc:	4939      	ldr	r1, [pc, #228]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009e02:	e03a      	b.n	8009e7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d020      	beq.n	8009e4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009e0c:	4b36      	ldr	r3, [pc, #216]	@ (8009ee8 <HAL_RCC_OscConfig+0x270>)
 8009e0e:	2201      	movs	r2, #1
 8009e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e12:	f7fe fe45 	bl	8008aa0 <HAL_GetTick>
 8009e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e18:	e008      	b.n	8009e2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e1a:	f7fe fe41 	bl	8008aa0 <HAL_GetTick>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	1ad3      	subs	r3, r2, r3
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d901      	bls.n	8009e2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009e28:	2303      	movs	r3, #3
 8009e2a:	e1a1      	b.n	800a170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e2c:	4b2d      	ldr	r3, [pc, #180]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 0302 	and.w	r3, r3, #2
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d0f0      	beq.n	8009e1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e38:	4b2a      	ldr	r3, [pc, #168]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	695b      	ldr	r3, [r3, #20]
 8009e44:	00db      	lsls	r3, r3, #3
 8009e46:	4927      	ldr	r1, [pc, #156]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	600b      	str	r3, [r1, #0]
 8009e4c:	e015      	b.n	8009e7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009e4e:	4b26      	ldr	r3, [pc, #152]	@ (8009ee8 <HAL_RCC_OscConfig+0x270>)
 8009e50:	2200      	movs	r2, #0
 8009e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e54:	f7fe fe24 	bl	8008aa0 <HAL_GetTick>
 8009e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e5a:	e008      	b.n	8009e6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e5c:	f7fe fe20 	bl	8008aa0 <HAL_GetTick>
 8009e60:	4602      	mov	r2, r0
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	1ad3      	subs	r3, r2, r3
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d901      	bls.n	8009e6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8009e6a:	2303      	movs	r3, #3
 8009e6c:	e180      	b.n	800a170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f003 0302 	and.w	r3, r3, #2
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1f0      	bne.n	8009e5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 0308 	and.w	r3, r3, #8
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d03a      	beq.n	8009efc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	699b      	ldr	r3, [r3, #24]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d019      	beq.n	8009ec2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e8e:	4b17      	ldr	r3, [pc, #92]	@ (8009eec <HAL_RCC_OscConfig+0x274>)
 8009e90:	2201      	movs	r2, #1
 8009e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e94:	f7fe fe04 	bl	8008aa0 <HAL_GetTick>
 8009e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e9a:	e008      	b.n	8009eae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e9c:	f7fe fe00 	bl	8008aa0 <HAL_GetTick>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d901      	bls.n	8009eae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	e160      	b.n	800a170 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009eae:	4b0d      	ldr	r3, [pc, #52]	@ (8009ee4 <HAL_RCC_OscConfig+0x26c>)
 8009eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb2:	f003 0302 	and.w	r3, r3, #2
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d0f0      	beq.n	8009e9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8009eba:	2001      	movs	r0, #1
 8009ebc:	f000 faba 	bl	800a434 <RCC_Delay>
 8009ec0:	e01c      	b.n	8009efc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8009eec <HAL_RCC_OscConfig+0x274>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ec8:	f7fe fdea 	bl	8008aa0 <HAL_GetTick>
 8009ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ece:	e00f      	b.n	8009ef0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ed0:	f7fe fde6 	bl	8008aa0 <HAL_GetTick>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	1ad3      	subs	r3, r2, r3
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	d908      	bls.n	8009ef0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e146      	b.n	800a170 <HAL_RCC_OscConfig+0x4f8>
 8009ee2:	bf00      	nop
 8009ee4:	40021000 	.word	0x40021000
 8009ee8:	42420000 	.word	0x42420000
 8009eec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ef0:	4b92      	ldr	r3, [pc, #584]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 8009ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ef4:	f003 0302 	and.w	r3, r3, #2
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d1e9      	bne.n	8009ed0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 0304 	and.w	r3, r3, #4
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 80a6 	beq.w	800a056 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009f0e:	4b8b      	ldr	r3, [pc, #556]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 8009f10:	69db      	ldr	r3, [r3, #28]
 8009f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d10d      	bne.n	8009f36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f1a:	4b88      	ldr	r3, [pc, #544]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 8009f1c:	69db      	ldr	r3, [r3, #28]
 8009f1e:	4a87      	ldr	r2, [pc, #540]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 8009f20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f24:	61d3      	str	r3, [r2, #28]
 8009f26:	4b85      	ldr	r3, [pc, #532]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 8009f28:	69db      	ldr	r3, [r3, #28]
 8009f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f2e:	60bb      	str	r3, [r7, #8]
 8009f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009f32:	2301      	movs	r3, #1
 8009f34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f36:	4b82      	ldr	r3, [pc, #520]	@ (800a140 <HAL_RCC_OscConfig+0x4c8>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d118      	bne.n	8009f74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009f42:	4b7f      	ldr	r3, [pc, #508]	@ (800a140 <HAL_RCC_OscConfig+0x4c8>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a7e      	ldr	r2, [pc, #504]	@ (800a140 <HAL_RCC_OscConfig+0x4c8>)
 8009f48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009f4e:	f7fe fda7 	bl	8008aa0 <HAL_GetTick>
 8009f52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f54:	e008      	b.n	8009f68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f56:	f7fe fda3 	bl	8008aa0 <HAL_GetTick>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	2b64      	cmp	r3, #100	@ 0x64
 8009f62:	d901      	bls.n	8009f68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8009f64:	2303      	movs	r3, #3
 8009f66:	e103      	b.n	800a170 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f68:	4b75      	ldr	r3, [pc, #468]	@ (800a140 <HAL_RCC_OscConfig+0x4c8>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d0f0      	beq.n	8009f56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d106      	bne.n	8009f8a <HAL_RCC_OscConfig+0x312>
 8009f7c:	4b6f      	ldr	r3, [pc, #444]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 8009f7e:	6a1b      	ldr	r3, [r3, #32]
 8009f80:	4a6e      	ldr	r2, [pc, #440]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 8009f82:	f043 0301 	orr.w	r3, r3, #1
 8009f86:	6213      	str	r3, [r2, #32]
 8009f88:	e02d      	b.n	8009fe6 <HAL_RCC_OscConfig+0x36e>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d10c      	bne.n	8009fac <HAL_RCC_OscConfig+0x334>
 8009f92:	4b6a      	ldr	r3, [pc, #424]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 8009f94:	6a1b      	ldr	r3, [r3, #32]
 8009f96:	4a69      	ldr	r2, [pc, #420]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 8009f98:	f023 0301 	bic.w	r3, r3, #1
 8009f9c:	6213      	str	r3, [r2, #32]
 8009f9e:	4b67      	ldr	r3, [pc, #412]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 8009fa0:	6a1b      	ldr	r3, [r3, #32]
 8009fa2:	4a66      	ldr	r2, [pc, #408]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 8009fa4:	f023 0304 	bic.w	r3, r3, #4
 8009fa8:	6213      	str	r3, [r2, #32]
 8009faa:	e01c      	b.n	8009fe6 <HAL_RCC_OscConfig+0x36e>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	2b05      	cmp	r3, #5
 8009fb2:	d10c      	bne.n	8009fce <HAL_RCC_OscConfig+0x356>
 8009fb4:	4b61      	ldr	r3, [pc, #388]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 8009fb6:	6a1b      	ldr	r3, [r3, #32]
 8009fb8:	4a60      	ldr	r2, [pc, #384]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 8009fba:	f043 0304 	orr.w	r3, r3, #4
 8009fbe:	6213      	str	r3, [r2, #32]
 8009fc0:	4b5e      	ldr	r3, [pc, #376]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 8009fc2:	6a1b      	ldr	r3, [r3, #32]
 8009fc4:	4a5d      	ldr	r2, [pc, #372]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 8009fc6:	f043 0301 	orr.w	r3, r3, #1
 8009fca:	6213      	str	r3, [r2, #32]
 8009fcc:	e00b      	b.n	8009fe6 <HAL_RCC_OscConfig+0x36e>
 8009fce:	4b5b      	ldr	r3, [pc, #364]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 8009fd0:	6a1b      	ldr	r3, [r3, #32]
 8009fd2:	4a5a      	ldr	r2, [pc, #360]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 8009fd4:	f023 0301 	bic.w	r3, r3, #1
 8009fd8:	6213      	str	r3, [r2, #32]
 8009fda:	4b58      	ldr	r3, [pc, #352]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 8009fdc:	6a1b      	ldr	r3, [r3, #32]
 8009fde:	4a57      	ldr	r2, [pc, #348]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 8009fe0:	f023 0304 	bic.w	r3, r3, #4
 8009fe4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d015      	beq.n	800a01a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009fee:	f7fe fd57 	bl	8008aa0 <HAL_GetTick>
 8009ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ff4:	e00a      	b.n	800a00c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ff6:	f7fe fd53 	bl	8008aa0 <HAL_GetTick>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	1ad3      	subs	r3, r2, r3
 800a000:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a004:	4293      	cmp	r3, r2
 800a006:	d901      	bls.n	800a00c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a008:	2303      	movs	r3, #3
 800a00a:	e0b1      	b.n	800a170 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a00c:	4b4b      	ldr	r3, [pc, #300]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 800a00e:	6a1b      	ldr	r3, [r3, #32]
 800a010:	f003 0302 	and.w	r3, r3, #2
 800a014:	2b00      	cmp	r3, #0
 800a016:	d0ee      	beq.n	8009ff6 <HAL_RCC_OscConfig+0x37e>
 800a018:	e014      	b.n	800a044 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a01a:	f7fe fd41 	bl	8008aa0 <HAL_GetTick>
 800a01e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a020:	e00a      	b.n	800a038 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a022:	f7fe fd3d 	bl	8008aa0 <HAL_GetTick>
 800a026:	4602      	mov	r2, r0
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	1ad3      	subs	r3, r2, r3
 800a02c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a030:	4293      	cmp	r3, r2
 800a032:	d901      	bls.n	800a038 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a034:	2303      	movs	r3, #3
 800a036:	e09b      	b.n	800a170 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a038:	4b40      	ldr	r3, [pc, #256]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 800a03a:	6a1b      	ldr	r3, [r3, #32]
 800a03c:	f003 0302 	and.w	r3, r3, #2
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1ee      	bne.n	800a022 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a044:	7dfb      	ldrb	r3, [r7, #23]
 800a046:	2b01      	cmp	r3, #1
 800a048:	d105      	bne.n	800a056 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a04a:	4b3c      	ldr	r3, [pc, #240]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 800a04c:	69db      	ldr	r3, [r3, #28]
 800a04e:	4a3b      	ldr	r2, [pc, #236]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 800a050:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a054:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	69db      	ldr	r3, [r3, #28]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f000 8087 	beq.w	800a16e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a060:	4b36      	ldr	r3, [pc, #216]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	f003 030c 	and.w	r3, r3, #12
 800a068:	2b08      	cmp	r3, #8
 800a06a:	d061      	beq.n	800a130 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	69db      	ldr	r3, [r3, #28]
 800a070:	2b02      	cmp	r3, #2
 800a072:	d146      	bne.n	800a102 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a074:	4b33      	ldr	r3, [pc, #204]	@ (800a144 <HAL_RCC_OscConfig+0x4cc>)
 800a076:	2200      	movs	r2, #0
 800a078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a07a:	f7fe fd11 	bl	8008aa0 <HAL_GetTick>
 800a07e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a080:	e008      	b.n	800a094 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a082:	f7fe fd0d 	bl	8008aa0 <HAL_GetTick>
 800a086:	4602      	mov	r2, r0
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	d901      	bls.n	800a094 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a090:	2303      	movs	r3, #3
 800a092:	e06d      	b.n	800a170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a094:	4b29      	ldr	r3, [pc, #164]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d1f0      	bne.n	800a082 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6a1b      	ldr	r3, [r3, #32]
 800a0a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0a8:	d108      	bne.n	800a0bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a0aa:	4b24      	ldr	r3, [pc, #144]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	4921      	ldr	r1, [pc, #132]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a0bc:	4b1f      	ldr	r3, [pc, #124]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6a19      	ldr	r1, [r3, #32]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0cc:	430b      	orrs	r3, r1
 800a0ce:	491b      	ldr	r1, [pc, #108]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a0d4:	4b1b      	ldr	r3, [pc, #108]	@ (800a144 <HAL_RCC_OscConfig+0x4cc>)
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0da:	f7fe fce1 	bl	8008aa0 <HAL_GetTick>
 800a0de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a0e0:	e008      	b.n	800a0f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0e2:	f7fe fcdd 	bl	8008aa0 <HAL_GetTick>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	1ad3      	subs	r3, r2, r3
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	d901      	bls.n	800a0f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	e03d      	b.n	800a170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a0f4:	4b11      	ldr	r3, [pc, #68]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d0f0      	beq.n	800a0e2 <HAL_RCC_OscConfig+0x46a>
 800a100:	e035      	b.n	800a16e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a102:	4b10      	ldr	r3, [pc, #64]	@ (800a144 <HAL_RCC_OscConfig+0x4cc>)
 800a104:	2200      	movs	r2, #0
 800a106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a108:	f7fe fcca 	bl	8008aa0 <HAL_GetTick>
 800a10c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a10e:	e008      	b.n	800a122 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a110:	f7fe fcc6 	bl	8008aa0 <HAL_GetTick>
 800a114:	4602      	mov	r2, r0
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	d901      	bls.n	800a122 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a11e:	2303      	movs	r3, #3
 800a120:	e026      	b.n	800a170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a122:	4b06      	ldr	r3, [pc, #24]	@ (800a13c <HAL_RCC_OscConfig+0x4c4>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1f0      	bne.n	800a110 <HAL_RCC_OscConfig+0x498>
 800a12e:	e01e      	b.n	800a16e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	69db      	ldr	r3, [r3, #28]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d107      	bne.n	800a148 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	e019      	b.n	800a170 <HAL_RCC_OscConfig+0x4f8>
 800a13c:	40021000 	.word	0x40021000
 800a140:	40007000 	.word	0x40007000
 800a144:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a148:	4b0b      	ldr	r3, [pc, #44]	@ (800a178 <HAL_RCC_OscConfig+0x500>)
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6a1b      	ldr	r3, [r3, #32]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d106      	bne.n	800a16a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a166:	429a      	cmp	r2, r3
 800a168:	d001      	beq.n	800a16e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	e000      	b.n	800a170 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3718      	adds	r7, #24
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	40021000 	.word	0x40021000

0800a17c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d101      	bne.n	800a190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	e0d0      	b.n	800a332 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a190:	4b6a      	ldr	r3, [pc, #424]	@ (800a33c <HAL_RCC_ClockConfig+0x1c0>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f003 0307 	and.w	r3, r3, #7
 800a198:	683a      	ldr	r2, [r7, #0]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d910      	bls.n	800a1c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a19e:	4b67      	ldr	r3, [pc, #412]	@ (800a33c <HAL_RCC_ClockConfig+0x1c0>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f023 0207 	bic.w	r2, r3, #7
 800a1a6:	4965      	ldr	r1, [pc, #404]	@ (800a33c <HAL_RCC_ClockConfig+0x1c0>)
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1ae:	4b63      	ldr	r3, [pc, #396]	@ (800a33c <HAL_RCC_ClockConfig+0x1c0>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f003 0307 	and.w	r3, r3, #7
 800a1b6:	683a      	ldr	r2, [r7, #0]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d001      	beq.n	800a1c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	e0b8      	b.n	800a332 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f003 0302 	and.w	r3, r3, #2
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d020      	beq.n	800a20e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f003 0304 	and.w	r3, r3, #4
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d005      	beq.n	800a1e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a1d8:	4b59      	ldr	r3, [pc, #356]	@ (800a340 <HAL_RCC_ClockConfig+0x1c4>)
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	4a58      	ldr	r2, [pc, #352]	@ (800a340 <HAL_RCC_ClockConfig+0x1c4>)
 800a1de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a1e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f003 0308 	and.w	r3, r3, #8
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d005      	beq.n	800a1fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a1f0:	4b53      	ldr	r3, [pc, #332]	@ (800a340 <HAL_RCC_ClockConfig+0x1c4>)
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	4a52      	ldr	r2, [pc, #328]	@ (800a340 <HAL_RCC_ClockConfig+0x1c4>)
 800a1f6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800a1fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a1fc:	4b50      	ldr	r3, [pc, #320]	@ (800a340 <HAL_RCC_ClockConfig+0x1c4>)
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	494d      	ldr	r1, [pc, #308]	@ (800a340 <HAL_RCC_ClockConfig+0x1c4>)
 800a20a:	4313      	orrs	r3, r2
 800a20c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f003 0301 	and.w	r3, r3, #1
 800a216:	2b00      	cmp	r3, #0
 800a218:	d040      	beq.n	800a29c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d107      	bne.n	800a232 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a222:	4b47      	ldr	r3, [pc, #284]	@ (800a340 <HAL_RCC_ClockConfig+0x1c4>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d115      	bne.n	800a25a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	e07f      	b.n	800a332 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	2b02      	cmp	r3, #2
 800a238:	d107      	bne.n	800a24a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a23a:	4b41      	ldr	r3, [pc, #260]	@ (800a340 <HAL_RCC_ClockConfig+0x1c4>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a242:	2b00      	cmp	r3, #0
 800a244:	d109      	bne.n	800a25a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	e073      	b.n	800a332 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a24a:	4b3d      	ldr	r3, [pc, #244]	@ (800a340 <HAL_RCC_ClockConfig+0x1c4>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f003 0302 	and.w	r3, r3, #2
 800a252:	2b00      	cmp	r3, #0
 800a254:	d101      	bne.n	800a25a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	e06b      	b.n	800a332 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a25a:	4b39      	ldr	r3, [pc, #228]	@ (800a340 <HAL_RCC_ClockConfig+0x1c4>)
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	f023 0203 	bic.w	r2, r3, #3
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	4936      	ldr	r1, [pc, #216]	@ (800a340 <HAL_RCC_ClockConfig+0x1c4>)
 800a268:	4313      	orrs	r3, r2
 800a26a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a26c:	f7fe fc18 	bl	8008aa0 <HAL_GetTick>
 800a270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a272:	e00a      	b.n	800a28a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a274:	f7fe fc14 	bl	8008aa0 <HAL_GetTick>
 800a278:	4602      	mov	r2, r0
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	1ad3      	subs	r3, r2, r3
 800a27e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a282:	4293      	cmp	r3, r2
 800a284:	d901      	bls.n	800a28a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	e053      	b.n	800a332 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a28a:	4b2d      	ldr	r3, [pc, #180]	@ (800a340 <HAL_RCC_ClockConfig+0x1c4>)
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	f003 020c 	and.w	r2, r3, #12
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	429a      	cmp	r2, r3
 800a29a:	d1eb      	bne.n	800a274 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a29c:	4b27      	ldr	r3, [pc, #156]	@ (800a33c <HAL_RCC_ClockConfig+0x1c0>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f003 0307 	and.w	r3, r3, #7
 800a2a4:	683a      	ldr	r2, [r7, #0]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d210      	bcs.n	800a2cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2aa:	4b24      	ldr	r3, [pc, #144]	@ (800a33c <HAL_RCC_ClockConfig+0x1c0>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f023 0207 	bic.w	r2, r3, #7
 800a2b2:	4922      	ldr	r1, [pc, #136]	@ (800a33c <HAL_RCC_ClockConfig+0x1c0>)
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2ba:	4b20      	ldr	r3, [pc, #128]	@ (800a33c <HAL_RCC_ClockConfig+0x1c0>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f003 0307 	and.w	r3, r3, #7
 800a2c2:	683a      	ldr	r2, [r7, #0]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d001      	beq.n	800a2cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e032      	b.n	800a332 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 0304 	and.w	r3, r3, #4
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d008      	beq.n	800a2ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a2d8:	4b19      	ldr	r3, [pc, #100]	@ (800a340 <HAL_RCC_ClockConfig+0x1c4>)
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	4916      	ldr	r1, [pc, #88]	@ (800a340 <HAL_RCC_ClockConfig+0x1c4>)
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f003 0308 	and.w	r3, r3, #8
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d009      	beq.n	800a30a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a2f6:	4b12      	ldr	r3, [pc, #72]	@ (800a340 <HAL_RCC_ClockConfig+0x1c4>)
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	00db      	lsls	r3, r3, #3
 800a304:	490e      	ldr	r1, [pc, #56]	@ (800a340 <HAL_RCC_ClockConfig+0x1c4>)
 800a306:	4313      	orrs	r3, r2
 800a308:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a30a:	f000 f821 	bl	800a350 <HAL_RCC_GetSysClockFreq>
 800a30e:	4602      	mov	r2, r0
 800a310:	4b0b      	ldr	r3, [pc, #44]	@ (800a340 <HAL_RCC_ClockConfig+0x1c4>)
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	091b      	lsrs	r3, r3, #4
 800a316:	f003 030f 	and.w	r3, r3, #15
 800a31a:	490a      	ldr	r1, [pc, #40]	@ (800a344 <HAL_RCC_ClockConfig+0x1c8>)
 800a31c:	5ccb      	ldrb	r3, [r1, r3]
 800a31e:	fa22 f303 	lsr.w	r3, r2, r3
 800a322:	4a09      	ldr	r2, [pc, #36]	@ (800a348 <HAL_RCC_ClockConfig+0x1cc>)
 800a324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a326:	4b09      	ldr	r3, [pc, #36]	@ (800a34c <HAL_RCC_ClockConfig+0x1d0>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fe fb76 	bl	8008a1c <HAL_InitTick>

  return HAL_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	40022000 	.word	0x40022000
 800a340:	40021000 	.word	0x40021000
 800a344:	0800e20c 	.word	0x0800e20c
 800a348:	2000001c 	.word	0x2000001c
 800a34c:	20000020 	.word	0x20000020

0800a350 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a350:	b480      	push	{r7}
 800a352:	b087      	sub	sp, #28
 800a354:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a356:	2300      	movs	r3, #0
 800a358:	60fb      	str	r3, [r7, #12]
 800a35a:	2300      	movs	r3, #0
 800a35c:	60bb      	str	r3, [r7, #8]
 800a35e:	2300      	movs	r3, #0
 800a360:	617b      	str	r3, [r7, #20]
 800a362:	2300      	movs	r3, #0
 800a364:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a366:	2300      	movs	r3, #0
 800a368:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a36a:	4b1e      	ldr	r3, [pc, #120]	@ (800a3e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f003 030c 	and.w	r3, r3, #12
 800a376:	2b04      	cmp	r3, #4
 800a378:	d002      	beq.n	800a380 <HAL_RCC_GetSysClockFreq+0x30>
 800a37a:	2b08      	cmp	r3, #8
 800a37c:	d003      	beq.n	800a386 <HAL_RCC_GetSysClockFreq+0x36>
 800a37e:	e027      	b.n	800a3d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a380:	4b19      	ldr	r3, [pc, #100]	@ (800a3e8 <HAL_RCC_GetSysClockFreq+0x98>)
 800a382:	613b      	str	r3, [r7, #16]
      break;
 800a384:	e027      	b.n	800a3d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	0c9b      	lsrs	r3, r3, #18
 800a38a:	f003 030f 	and.w	r3, r3, #15
 800a38e:	4a17      	ldr	r2, [pc, #92]	@ (800a3ec <HAL_RCC_GetSysClockFreq+0x9c>)
 800a390:	5cd3      	ldrb	r3, [r2, r3]
 800a392:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d010      	beq.n	800a3c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a39e:	4b11      	ldr	r3, [pc, #68]	@ (800a3e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	0c5b      	lsrs	r3, r3, #17
 800a3a4:	f003 0301 	and.w	r3, r3, #1
 800a3a8:	4a11      	ldr	r2, [pc, #68]	@ (800a3f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a3aa:	5cd3      	ldrb	r3, [r2, r3]
 800a3ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4a0d      	ldr	r2, [pc, #52]	@ (800a3e8 <HAL_RCC_GetSysClockFreq+0x98>)
 800a3b2:	fb03 f202 	mul.w	r2, r3, r2
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3bc:	617b      	str	r3, [r7, #20]
 800a3be:	e004      	b.n	800a3ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4a0c      	ldr	r2, [pc, #48]	@ (800a3f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a3c4:	fb02 f303 	mul.w	r3, r2, r3
 800a3c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	613b      	str	r3, [r7, #16]
      break;
 800a3ce:	e002      	b.n	800a3d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a3d0:	4b05      	ldr	r3, [pc, #20]	@ (800a3e8 <HAL_RCC_GetSysClockFreq+0x98>)
 800a3d2:	613b      	str	r3, [r7, #16]
      break;
 800a3d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a3d6:	693b      	ldr	r3, [r7, #16]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	371c      	adds	r7, #28
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bc80      	pop	{r7}
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	40021000 	.word	0x40021000
 800a3e8:	007a1200 	.word	0x007a1200
 800a3ec:	0800e224 	.word	0x0800e224
 800a3f0:	0800e234 	.word	0x0800e234
 800a3f4:	003d0900 	.word	0x003d0900

0800a3f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a3fc:	4b02      	ldr	r3, [pc, #8]	@ (800a408 <HAL_RCC_GetHCLKFreq+0x10>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
}
 800a400:	4618      	mov	r0, r3
 800a402:	46bd      	mov	sp, r7
 800a404:	bc80      	pop	{r7}
 800a406:	4770      	bx	lr
 800a408:	2000001c 	.word	0x2000001c

0800a40c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a410:	f7ff fff2 	bl	800a3f8 <HAL_RCC_GetHCLKFreq>
 800a414:	4602      	mov	r2, r0
 800a416:	4b05      	ldr	r3, [pc, #20]	@ (800a42c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	0a1b      	lsrs	r3, r3, #8
 800a41c:	f003 0307 	and.w	r3, r3, #7
 800a420:	4903      	ldr	r1, [pc, #12]	@ (800a430 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a422:	5ccb      	ldrb	r3, [r1, r3]
 800a424:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a428:	4618      	mov	r0, r3
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	40021000 	.word	0x40021000
 800a430:	0800e21c 	.word	0x0800e21c

0800a434 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a43c:	4b0a      	ldr	r3, [pc, #40]	@ (800a468 <RCC_Delay+0x34>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a0a      	ldr	r2, [pc, #40]	@ (800a46c <RCC_Delay+0x38>)
 800a442:	fba2 2303 	umull	r2, r3, r2, r3
 800a446:	0a5b      	lsrs	r3, r3, #9
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	fb02 f303 	mul.w	r3, r2, r3
 800a44e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a450:	bf00      	nop
  }
  while (Delay --);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	1e5a      	subs	r2, r3, #1
 800a456:	60fa      	str	r2, [r7, #12]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d1f9      	bne.n	800a450 <RCC_Delay+0x1c>
}
 800a45c:	bf00      	nop
 800a45e:	bf00      	nop
 800a460:	3714      	adds	r7, #20
 800a462:	46bd      	mov	sp, r7
 800a464:	bc80      	pop	{r7}
 800a466:	4770      	bx	lr
 800a468:	2000001c 	.word	0x2000001c
 800a46c:	10624dd3 	.word	0x10624dd3

0800a470 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d101      	bne.n	800a482 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	e076      	b.n	800a570 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a486:	2b00      	cmp	r3, #0
 800a488:	d108      	bne.n	800a49c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a492:	d009      	beq.n	800a4a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	61da      	str	r2, [r3, #28]
 800a49a:	e005      	b.n	800a4a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d106      	bne.n	800a4c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f7fd fe26 	bl	8008114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2202      	movs	r2, #2
 800a4cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a4de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a4f0:	431a      	orrs	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a4fa:	431a      	orrs	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	691b      	ldr	r3, [r3, #16]
 800a500:	f003 0302 	and.w	r3, r3, #2
 800a504:	431a      	orrs	r2, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	f003 0301 	and.w	r3, r3, #1
 800a50e:	431a      	orrs	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	699b      	ldr	r3, [r3, #24]
 800a514:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a518:	431a      	orrs	r2, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	69db      	ldr	r3, [r3, #28]
 800a51e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a522:	431a      	orrs	r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6a1b      	ldr	r3, [r3, #32]
 800a528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a52c:	ea42 0103 	orr.w	r1, r2, r3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a534:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	430a      	orrs	r2, r1
 800a53e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	699b      	ldr	r3, [r3, #24]
 800a544:	0c1a      	lsrs	r2, r3, #16
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f002 0204 	and.w	r2, r2, #4
 800a54e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	69da      	ldr	r2, [r3, #28]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a55e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3708      	adds	r7, #8
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b088      	sub	sp, #32
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	603b      	str	r3, [r7, #0]
 800a584:	4613      	mov	r3, r2
 800a586:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a588:	f7fe fa8a 	bl	8008aa0 <HAL_GetTick>
 800a58c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800a58e:	88fb      	ldrh	r3, [r7, #6]
 800a590:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d001      	beq.n	800a5a2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800a59e:	2302      	movs	r3, #2
 800a5a0:	e12a      	b.n	800a7f8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d002      	beq.n	800a5ae <HAL_SPI_Transmit+0x36>
 800a5a8:	88fb      	ldrh	r3, [r7, #6]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d101      	bne.n	800a5b2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e122      	b.n	800a7f8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d101      	bne.n	800a5c0 <HAL_SPI_Transmit+0x48>
 800a5bc:	2302      	movs	r3, #2
 800a5be:	e11b      	b.n	800a7f8 <HAL_SPI_Transmit+0x280>
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2203      	movs	r2, #3
 800a5cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	88fa      	ldrh	r2, [r7, #6]
 800a5e0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	88fa      	ldrh	r2, [r7, #6]
 800a5e6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2200      	movs	r2, #0
 800a604:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a60e:	d10f      	bne.n	800a630 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a61e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a62e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a63a:	2b40      	cmp	r3, #64	@ 0x40
 800a63c:	d007      	beq.n	800a64e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a64c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a656:	d152      	bne.n	800a6fe <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d002      	beq.n	800a666 <HAL_SPI_Transmit+0xee>
 800a660:	8b7b      	ldrh	r3, [r7, #26]
 800a662:	2b01      	cmp	r3, #1
 800a664:	d145      	bne.n	800a6f2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a66a:	881a      	ldrh	r2, [r3, #0]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a676:	1c9a      	adds	r2, r3, #2
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a680:	b29b      	uxth	r3, r3
 800a682:	3b01      	subs	r3, #1
 800a684:	b29a      	uxth	r2, r3
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a68a:	e032      	b.n	800a6f2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	f003 0302 	and.w	r3, r3, #2
 800a696:	2b02      	cmp	r3, #2
 800a698:	d112      	bne.n	800a6c0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a69e:	881a      	ldrh	r2, [r3, #0]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6aa:	1c9a      	adds	r2, r3, #2
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	3b01      	subs	r3, #1
 800a6b8:	b29a      	uxth	r2, r3
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a6be:	e018      	b.n	800a6f2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a6c0:	f7fe f9ee 	bl	8008aa0 <HAL_GetTick>
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	1ad3      	subs	r3, r2, r3
 800a6ca:	683a      	ldr	r2, [r7, #0]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d803      	bhi.n	800a6d8 <HAL_SPI_Transmit+0x160>
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d6:	d102      	bne.n	800a6de <HAL_SPI_Transmit+0x166>
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d109      	bne.n	800a6f2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e082      	b.n	800a7f8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1c7      	bne.n	800a68c <HAL_SPI_Transmit+0x114>
 800a6fc:	e053      	b.n	800a7a6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d002      	beq.n	800a70c <HAL_SPI_Transmit+0x194>
 800a706:	8b7b      	ldrh	r3, [r7, #26]
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d147      	bne.n	800a79c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	330c      	adds	r3, #12
 800a716:	7812      	ldrb	r2, [r2, #0]
 800a718:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a71e:	1c5a      	adds	r2, r3, #1
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a728:	b29b      	uxth	r3, r3
 800a72a:	3b01      	subs	r3, #1
 800a72c:	b29a      	uxth	r2, r3
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a732:	e033      	b.n	800a79c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	f003 0302 	and.w	r3, r3, #2
 800a73e:	2b02      	cmp	r3, #2
 800a740:	d113      	bne.n	800a76a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	330c      	adds	r3, #12
 800a74c:	7812      	ldrb	r2, [r2, #0]
 800a74e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a754:	1c5a      	adds	r2, r3, #1
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a75e:	b29b      	uxth	r3, r3
 800a760:	3b01      	subs	r3, #1
 800a762:	b29a      	uxth	r2, r3
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a768:	e018      	b.n	800a79c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a76a:	f7fe f999 	bl	8008aa0 <HAL_GetTick>
 800a76e:	4602      	mov	r2, r0
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	1ad3      	subs	r3, r2, r3
 800a774:	683a      	ldr	r2, [r7, #0]
 800a776:	429a      	cmp	r2, r3
 800a778:	d803      	bhi.n	800a782 <HAL_SPI_Transmit+0x20a>
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a780:	d102      	bne.n	800a788 <HAL_SPI_Transmit+0x210>
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d109      	bne.n	800a79c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800a798:	2303      	movs	r3, #3
 800a79a:	e02d      	b.n	800a7f8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d1c6      	bne.n	800a734 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a7a6:	69fa      	ldr	r2, [r7, #28]
 800a7a8:	6839      	ldr	r1, [r7, #0]
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	f000 fbc4 	bl	800af38 <SPI_EndRxTxTransaction>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d002      	beq.n	800a7bc <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2220      	movs	r2, #32
 800a7ba:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d10a      	bne.n	800a7da <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	617b      	str	r3, [r7, #20]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	617b      	str	r3, [r7, #20]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	617b      	str	r3, [r7, #20]
 800a7d8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2201      	movs	r2, #1
 800a7de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d001      	beq.n	800a7f6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e000      	b.n	800a7f8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800a7f6:	2300      	movs	r3, #0
  }
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3720      	adds	r7, #32
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b088      	sub	sp, #32
 800a804:	af02      	add	r7, sp, #8
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	603b      	str	r3, [r7, #0]
 800a80c:	4613      	mov	r3, r2
 800a80e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a816:	b2db      	uxtb	r3, r3
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d001      	beq.n	800a820 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800a81c:	2302      	movs	r3, #2
 800a81e:	e104      	b.n	800aa2a <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a828:	d112      	bne.n	800a850 <HAL_SPI_Receive+0x50>
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d10e      	bne.n	800a850 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2204      	movs	r2, #4
 800a836:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a83a:	88fa      	ldrh	r2, [r7, #6]
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	9300      	str	r3, [sp, #0]
 800a840:	4613      	mov	r3, r2
 800a842:	68ba      	ldr	r2, [r7, #8]
 800a844:	68b9      	ldr	r1, [r7, #8]
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f000 f8f3 	bl	800aa32 <HAL_SPI_TransmitReceive>
 800a84c:	4603      	mov	r3, r0
 800a84e:	e0ec      	b.n	800aa2a <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a850:	f7fe f926 	bl	8008aa0 <HAL_GetTick>
 800a854:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d002      	beq.n	800a862 <HAL_SPI_Receive+0x62>
 800a85c:	88fb      	ldrh	r3, [r7, #6]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d101      	bne.n	800a866 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	e0e1      	b.n	800aa2a <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d101      	bne.n	800a874 <HAL_SPI_Receive+0x74>
 800a870:	2302      	movs	r3, #2
 800a872:	e0da      	b.n	800aa2a <HAL_SPI_Receive+0x22a>
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2204      	movs	r2, #4
 800a880:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	88fa      	ldrh	r2, [r7, #6]
 800a894:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	88fa      	ldrh	r2, [r7, #6]
 800a89a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a8c2:	d10f      	bne.n	800a8e4 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a8d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a8e2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8ee:	2b40      	cmp	r3, #64	@ 0x40
 800a8f0:	d007      	beq.n	800a902 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a900:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	68db      	ldr	r3, [r3, #12]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d170      	bne.n	800a9ec <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a90a:	e035      	b.n	800a978 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	f003 0301 	and.w	r3, r3, #1
 800a916:	2b01      	cmp	r3, #1
 800a918:	d115      	bne.n	800a946 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f103 020c 	add.w	r2, r3, #12
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a926:	7812      	ldrb	r2, [r2, #0]
 800a928:	b2d2      	uxtb	r2, r2
 800a92a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a930:	1c5a      	adds	r2, r3, #1
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	3b01      	subs	r3, #1
 800a93e:	b29a      	uxth	r2, r3
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a944:	e018      	b.n	800a978 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a946:	f7fe f8ab 	bl	8008aa0 <HAL_GetTick>
 800a94a:	4602      	mov	r2, r0
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	1ad3      	subs	r3, r2, r3
 800a950:	683a      	ldr	r2, [r7, #0]
 800a952:	429a      	cmp	r2, r3
 800a954:	d803      	bhi.n	800a95e <HAL_SPI_Receive+0x15e>
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a95c:	d102      	bne.n	800a964 <HAL_SPI_Receive+0x164>
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d109      	bne.n	800a978 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2201      	movs	r2, #1
 800a968:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2200      	movs	r2, #0
 800a970:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800a974:	2303      	movs	r3, #3
 800a976:	e058      	b.n	800aa2a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d1c4      	bne.n	800a90c <HAL_SPI_Receive+0x10c>
 800a982:	e038      	b.n	800a9f6 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	f003 0301 	and.w	r3, r3, #1
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d113      	bne.n	800a9ba <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	68da      	ldr	r2, [r3, #12]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a99c:	b292      	uxth	r2, r2
 800a99e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9a4:	1c9a      	adds	r2, r3, #2
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a9b8:	e018      	b.n	800a9ec <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9ba:	f7fe f871 	bl	8008aa0 <HAL_GetTick>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	1ad3      	subs	r3, r2, r3
 800a9c4:	683a      	ldr	r2, [r7, #0]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d803      	bhi.n	800a9d2 <HAL_SPI_Receive+0x1d2>
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d0:	d102      	bne.n	800a9d8 <HAL_SPI_Receive+0x1d8>
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d109      	bne.n	800a9ec <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800a9e8:	2303      	movs	r3, #3
 800a9ea:	e01e      	b.n	800aa2a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d1c6      	bne.n	800a984 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a9f6:	697a      	ldr	r2, [r7, #20]
 800a9f8:	6839      	ldr	r1, [r7, #0]
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f000 fa4a 	bl	800ae94 <SPI_EndRxTransaction>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d002      	beq.n	800aa0c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2220      	movs	r2, #32
 800aa0a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d001      	beq.n	800aa28 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	e000      	b.n	800aa2a <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800aa28:	2300      	movs	r3, #0
  }
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3718      	adds	r7, #24
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b08a      	sub	sp, #40	@ 0x28
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	60f8      	str	r0, [r7, #12]
 800aa3a:	60b9      	str	r1, [r7, #8]
 800aa3c:	607a      	str	r2, [r7, #4]
 800aa3e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800aa40:	2301      	movs	r3, #1
 800aa42:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa44:	f7fe f82c 	bl	8008aa0 <HAL_GetTick>
 800aa48:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800aa50:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800aa58:	887b      	ldrh	r3, [r7, #2]
 800aa5a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800aa5c:	7ffb      	ldrb	r3, [r7, #31]
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d00c      	beq.n	800aa7c <HAL_SPI_TransmitReceive+0x4a>
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aa68:	d106      	bne.n	800aa78 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d102      	bne.n	800aa78 <HAL_SPI_TransmitReceive+0x46>
 800aa72:	7ffb      	ldrb	r3, [r7, #31]
 800aa74:	2b04      	cmp	r3, #4
 800aa76:	d001      	beq.n	800aa7c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800aa78:	2302      	movs	r3, #2
 800aa7a:	e17f      	b.n	800ad7c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d005      	beq.n	800aa8e <HAL_SPI_TransmitReceive+0x5c>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d002      	beq.n	800aa8e <HAL_SPI_TransmitReceive+0x5c>
 800aa88:	887b      	ldrh	r3, [r7, #2]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d101      	bne.n	800aa92 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e174      	b.n	800ad7c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d101      	bne.n	800aaa0 <HAL_SPI_TransmitReceive+0x6e>
 800aa9c:	2302      	movs	r3, #2
 800aa9e:	e16d      	b.n	800ad7c <HAL_SPI_TransmitReceive+0x34a>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	2b04      	cmp	r3, #4
 800aab2:	d003      	beq.n	800aabc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2205      	movs	r2, #5
 800aab8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2200      	movs	r2, #0
 800aac0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	887a      	ldrh	r2, [r7, #2]
 800aacc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	887a      	ldrh	r2, [r7, #2]
 800aad2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	68ba      	ldr	r2, [r7, #8]
 800aad8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	887a      	ldrh	r2, [r7, #2]
 800aade:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	887a      	ldrh	r2, [r7, #2]
 800aae4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2200      	movs	r2, #0
 800aaea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aafc:	2b40      	cmp	r3, #64	@ 0x40
 800aafe:	d007      	beq.n	800ab10 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab18:	d17e      	bne.n	800ac18 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d002      	beq.n	800ab28 <HAL_SPI_TransmitReceive+0xf6>
 800ab22:	8afb      	ldrh	r3, [r7, #22]
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d16c      	bne.n	800ac02 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab2c:	881a      	ldrh	r2, [r3, #0]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab38:	1c9a      	adds	r2, r3, #2
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	3b01      	subs	r3, #1
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab4c:	e059      	b.n	800ac02 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	f003 0302 	and.w	r3, r3, #2
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	d11b      	bne.n	800ab94 <HAL_SPI_TransmitReceive+0x162>
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d016      	beq.n	800ab94 <HAL_SPI_TransmitReceive+0x162>
 800ab66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d113      	bne.n	800ab94 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab70:	881a      	ldrh	r2, [r3, #0]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab7c:	1c9a      	adds	r2, r3, #2
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	b29a      	uxth	r2, r3
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ab90:	2300      	movs	r3, #0
 800ab92:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	f003 0301 	and.w	r3, r3, #1
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d119      	bne.n	800abd6 <HAL_SPI_TransmitReceive+0x1a4>
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d014      	beq.n	800abd6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	68da      	ldr	r2, [r3, #12]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abb6:	b292      	uxth	r2, r2
 800abb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abbe:	1c9a      	adds	r2, r3, #2
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800abc8:	b29b      	uxth	r3, r3
 800abca:	3b01      	subs	r3, #1
 800abcc:	b29a      	uxth	r2, r3
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800abd2:	2301      	movs	r3, #1
 800abd4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800abd6:	f7fd ff63 	bl	8008aa0 <HAL_GetTick>
 800abda:	4602      	mov	r2, r0
 800abdc:	6a3b      	ldr	r3, [r7, #32]
 800abde:	1ad3      	subs	r3, r2, r3
 800abe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d80d      	bhi.n	800ac02 <HAL_SPI_TransmitReceive+0x1d0>
 800abe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abec:	d009      	beq.n	800ac02 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2201      	movs	r2, #1
 800abf2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800abfe:	2303      	movs	r3, #3
 800ac00:	e0bc      	b.n	800ad7c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1a0      	bne.n	800ab4e <HAL_SPI_TransmitReceive+0x11c>
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d19b      	bne.n	800ab4e <HAL_SPI_TransmitReceive+0x11c>
 800ac16:	e082      	b.n	800ad1e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d002      	beq.n	800ac26 <HAL_SPI_TransmitReceive+0x1f4>
 800ac20:	8afb      	ldrh	r3, [r7, #22]
 800ac22:	2b01      	cmp	r3, #1
 800ac24:	d171      	bne.n	800ad0a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	330c      	adds	r3, #12
 800ac30:	7812      	ldrb	r2, [r2, #0]
 800ac32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac38:	1c5a      	adds	r2, r3, #1
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	3b01      	subs	r3, #1
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac4c:	e05d      	b.n	800ad0a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	f003 0302 	and.w	r3, r3, #2
 800ac58:	2b02      	cmp	r3, #2
 800ac5a:	d11c      	bne.n	800ac96 <HAL_SPI_TransmitReceive+0x264>
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d017      	beq.n	800ac96 <HAL_SPI_TransmitReceive+0x264>
 800ac66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d114      	bne.n	800ac96 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	330c      	adds	r3, #12
 800ac76:	7812      	ldrb	r2, [r2, #0]
 800ac78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac7e:	1c5a      	adds	r2, r3, #1
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	3b01      	subs	r3, #1
 800ac8c:	b29a      	uxth	r2, r3
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ac92:	2300      	movs	r3, #0
 800ac94:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	f003 0301 	and.w	r3, r3, #1
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d119      	bne.n	800acd8 <HAL_SPI_TransmitReceive+0x2a6>
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d014      	beq.n	800acd8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	68da      	ldr	r2, [r3, #12]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acb8:	b2d2      	uxtb	r2, r2
 800acba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acc0:	1c5a      	adds	r2, r3, #1
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800acca:	b29b      	uxth	r3, r3
 800accc:	3b01      	subs	r3, #1
 800acce:	b29a      	uxth	r2, r3
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800acd4:	2301      	movs	r3, #1
 800acd6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800acd8:	f7fd fee2 	bl	8008aa0 <HAL_GetTick>
 800acdc:	4602      	mov	r2, r0
 800acde:	6a3b      	ldr	r3, [r7, #32]
 800ace0:	1ad3      	subs	r3, r2, r3
 800ace2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d803      	bhi.n	800acf0 <HAL_SPI_TransmitReceive+0x2be>
 800ace8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acee:	d102      	bne.n	800acf6 <HAL_SPI_TransmitReceive+0x2c4>
 800acf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d109      	bne.n	800ad0a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2201      	movs	r2, #1
 800acfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800ad06:	2303      	movs	r3, #3
 800ad08:	e038      	b.n	800ad7c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d19c      	bne.n	800ac4e <HAL_SPI_TransmitReceive+0x21c>
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d197      	bne.n	800ac4e <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ad1e:	6a3a      	ldr	r2, [r7, #32]
 800ad20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f000 f908 	bl	800af38 <SPI_EndRxTxTransaction>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d008      	beq.n	800ad40 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2220      	movs	r2, #32
 800ad32:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e01d      	b.n	800ad7c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d10a      	bne.n	800ad5e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad48:	2300      	movs	r3, #0
 800ad4a:	613b      	str	r3, [r7, #16]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	68db      	ldr	r3, [r3, #12]
 800ad52:	613b      	str	r3, [r7, #16]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	613b      	str	r3, [r7, #16]
 800ad5c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2201      	movs	r2, #1
 800ad62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d001      	beq.n	800ad7a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800ad76:	2301      	movs	r3, #1
 800ad78:	e000      	b.n	800ad7c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800ad7a:	2300      	movs	r3, #0
  }
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3728      	adds	r7, #40	@ 0x28
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b088      	sub	sp, #32
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	60b9      	str	r1, [r7, #8]
 800ad8e:	603b      	str	r3, [r7, #0]
 800ad90:	4613      	mov	r3, r2
 800ad92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ad94:	f7fd fe84 	bl	8008aa0 <HAL_GetTick>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad9c:	1a9b      	subs	r3, r3, r2
 800ad9e:	683a      	ldr	r2, [r7, #0]
 800ada0:	4413      	add	r3, r2
 800ada2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ada4:	f7fd fe7c 	bl	8008aa0 <HAL_GetTick>
 800ada8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800adaa:	4b39      	ldr	r3, [pc, #228]	@ (800ae90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	015b      	lsls	r3, r3, #5
 800adb0:	0d1b      	lsrs	r3, r3, #20
 800adb2:	69fa      	ldr	r2, [r7, #28]
 800adb4:	fb02 f303 	mul.w	r3, r2, r3
 800adb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800adba:	e054      	b.n	800ae66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc2:	d050      	beq.n	800ae66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800adc4:	f7fd fe6c 	bl	8008aa0 <HAL_GetTick>
 800adc8:	4602      	mov	r2, r0
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	1ad3      	subs	r3, r2, r3
 800adce:	69fa      	ldr	r2, [r7, #28]
 800add0:	429a      	cmp	r2, r3
 800add2:	d902      	bls.n	800adda <SPI_WaitFlagStateUntilTimeout+0x56>
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d13d      	bne.n	800ae56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	685a      	ldr	r2, [r3, #4]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ade8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800adf2:	d111      	bne.n	800ae18 <SPI_WaitFlagStateUntilTimeout+0x94>
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800adfc:	d004      	beq.n	800ae08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae06:	d107      	bne.n	800ae18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ae16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae20:	d10f      	bne.n	800ae42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ae30:	601a      	str	r2, [r3, #0]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ae40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2201      	movs	r2, #1
 800ae46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800ae52:	2303      	movs	r3, #3
 800ae54:	e017      	b.n	800ae86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d101      	bne.n	800ae60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	3b01      	subs	r3, #1
 800ae64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	689a      	ldr	r2, [r3, #8]
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	4013      	ands	r3, r2
 800ae70:	68ba      	ldr	r2, [r7, #8]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	bf0c      	ite	eq
 800ae76:	2301      	moveq	r3, #1
 800ae78:	2300      	movne	r3, #0
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	79fb      	ldrb	r3, [r7, #7]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d19b      	bne.n	800adbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ae84:	2300      	movs	r3, #0
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3720      	adds	r7, #32
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	2000001c 	.word	0x2000001c

0800ae94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af02      	add	r7, sp, #8
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aea8:	d111      	bne.n	800aece <SPI_EndRxTransaction+0x3a>
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aeb2:	d004      	beq.n	800aebe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aebc:	d107      	bne.n	800aece <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aecc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aed6:	d117      	bne.n	800af08 <SPI_EndRxTransaction+0x74>
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aee0:	d112      	bne.n	800af08 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	2200      	movs	r2, #0
 800aeea:	2101      	movs	r1, #1
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f7ff ff49 	bl	800ad84 <SPI_WaitFlagStateUntilTimeout>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d01a      	beq.n	800af2e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aefc:	f043 0220 	orr.w	r2, r3, #32
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800af04:	2303      	movs	r3, #3
 800af06:	e013      	b.n	800af30 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	9300      	str	r3, [sp, #0]
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	2200      	movs	r2, #0
 800af10:	2180      	movs	r1, #128	@ 0x80
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f7ff ff36 	bl	800ad84 <SPI_WaitFlagStateUntilTimeout>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d007      	beq.n	800af2e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af22:	f043 0220 	orr.w	r2, r3, #32
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800af2a:	2303      	movs	r3, #3
 800af2c:	e000      	b.n	800af30 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b086      	sub	sp, #24
 800af3c:	af02      	add	r7, sp, #8
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	2201      	movs	r2, #1
 800af4c:	2102      	movs	r1, #2
 800af4e:	68f8      	ldr	r0, [r7, #12]
 800af50:	f7ff ff18 	bl	800ad84 <SPI_WaitFlagStateUntilTimeout>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d007      	beq.n	800af6a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af5e:	f043 0220 	orr.w	r2, r3, #32
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800af66:	2303      	movs	r3, #3
 800af68:	e013      	b.n	800af92 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	9300      	str	r3, [sp, #0]
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	2200      	movs	r2, #0
 800af72:	2180      	movs	r1, #128	@ 0x80
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f7ff ff05 	bl	800ad84 <SPI_WaitFlagStateUntilTimeout>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d007      	beq.n	800af90 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af84:	f043 0220 	orr.w	r2, r3, #32
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800af8c:	2303      	movs	r3, #3
 800af8e:	e000      	b.n	800af92 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b086      	sub	sp, #24
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
 800afa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d101      	bne.n	800afae <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800afaa:	2301      	movs	r3, #1
 800afac:	e093      	b.n	800b0d6 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d106      	bne.n	800afc8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2200      	movs	r2, #0
 800afbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f7fd fa76 	bl	80084b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2202      	movs	r2, #2
 800afcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	6812      	ldr	r2, [r2, #0]
 800afda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800afde:	f023 0307 	bic.w	r3, r3, #7
 800afe2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	3304      	adds	r3, #4
 800afec:	4619      	mov	r1, r3
 800afee:	4610      	mov	r0, r2
 800aff0:	f000 f904 	bl	800b1fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	699b      	ldr	r3, [r3, #24]
 800b002:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	6a1b      	ldr	r3, [r3, #32]
 800b00a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	697a      	ldr	r2, [r7, #20]
 800b012:	4313      	orrs	r3, r2
 800b014:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b01c:	f023 0303 	bic.w	r3, r3, #3
 800b020:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	689a      	ldr	r2, [r3, #8]
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	699b      	ldr	r3, [r3, #24]
 800b02a:	021b      	lsls	r3, r3, #8
 800b02c:	4313      	orrs	r3, r2
 800b02e:	693a      	ldr	r2, [r7, #16]
 800b030:	4313      	orrs	r3, r2
 800b032:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800b03a:	f023 030c 	bic.w	r3, r3, #12
 800b03e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b046:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b04a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	68da      	ldr	r2, [r3, #12]
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	69db      	ldr	r3, [r3, #28]
 800b054:	021b      	lsls	r3, r3, #8
 800b056:	4313      	orrs	r3, r2
 800b058:	693a      	ldr	r2, [r7, #16]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	011a      	lsls	r2, r3, #4
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	6a1b      	ldr	r3, [r3, #32]
 800b068:	031b      	lsls	r3, r3, #12
 800b06a:	4313      	orrs	r3, r2
 800b06c:	693a      	ldr	r2, [r7, #16]
 800b06e:	4313      	orrs	r3, r2
 800b070:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b078:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	685a      	ldr	r2, [r3, #4]
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	695b      	ldr	r3, [r3, #20]
 800b082:	011b      	lsls	r3, r3, #4
 800b084:	4313      	orrs	r3, r2
 800b086:	68fa      	ldr	r2, [r7, #12]
 800b088:	4313      	orrs	r3, r2
 800b08a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	697a      	ldr	r2, [r7, #20]
 800b092:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	693a      	ldr	r2, [r7, #16]
 800b09a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	68fa      	ldr	r2, [r7, #12]
 800b0a2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3718      	adds	r7, #24
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b084      	sub	sp, #16
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
 800b0e6:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b0ee:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b0f6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b0fe:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b106:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d110      	bne.n	800b130 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b10e:	7bfb      	ldrb	r3, [r7, #15]
 800b110:	2b01      	cmp	r3, #1
 800b112:	d102      	bne.n	800b11a <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b114:	7b7b      	ldrb	r3, [r7, #13]
 800b116:	2b01      	cmp	r3, #1
 800b118:	d001      	beq.n	800b11e <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	e069      	b.n	800b1f2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2202      	movs	r2, #2
 800b122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2202      	movs	r2, #2
 800b12a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b12e:	e031      	b.n	800b194 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	2b04      	cmp	r3, #4
 800b134:	d110      	bne.n	800b158 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b136:	7bbb      	ldrb	r3, [r7, #14]
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d102      	bne.n	800b142 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b13c:	7b3b      	ldrb	r3, [r7, #12]
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d001      	beq.n	800b146 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b142:	2301      	movs	r3, #1
 800b144:	e055      	b.n	800b1f2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2202      	movs	r2, #2
 800b14a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2202      	movs	r2, #2
 800b152:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b156:	e01d      	b.n	800b194 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b158:	7bfb      	ldrb	r3, [r7, #15]
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d108      	bne.n	800b170 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b15e:	7bbb      	ldrb	r3, [r7, #14]
 800b160:	2b01      	cmp	r3, #1
 800b162:	d105      	bne.n	800b170 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b164:	7b7b      	ldrb	r3, [r7, #13]
 800b166:	2b01      	cmp	r3, #1
 800b168:	d102      	bne.n	800b170 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b16a:	7b3b      	ldrb	r3, [r7, #12]
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d001      	beq.n	800b174 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	e03e      	b.n	800b1f2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2202      	movs	r2, #2
 800b178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2202      	movs	r2, #2
 800b180:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2202      	movs	r2, #2
 800b188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2202      	movs	r2, #2
 800b190:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d003      	beq.n	800b1a2 <HAL_TIM_Encoder_Start+0xc4>
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	2b04      	cmp	r3, #4
 800b19e:	d008      	beq.n	800b1b2 <HAL_TIM_Encoder_Start+0xd4>
 800b1a0:	e00f      	b.n	800b1c2 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f000 f894 	bl	800b2d8 <TIM_CCxChannelCmd>
      break;
 800b1b0:	e016      	b.n	800b1e0 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	2104      	movs	r1, #4
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f000 f88c 	bl	800b2d8 <TIM_CCxChannelCmd>
      break;
 800b1c0:	e00e      	b.n	800b1e0 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f000 f884 	bl	800b2d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	2104      	movs	r1, #4
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f000 f87d 	bl	800b2d8 <TIM_CCxChannelCmd>
      break;
 800b1de:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	681a      	ldr	r2, [r3, #0]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f042 0201 	orr.w	r2, r2, #1
 800b1ee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b1f0:	2300      	movs	r3, #0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
	...

0800b1fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4a2f      	ldr	r2, [pc, #188]	@ (800b2cc <TIM_Base_SetConfig+0xd0>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d00b      	beq.n	800b22c <TIM_Base_SetConfig+0x30>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b21a:	d007      	beq.n	800b22c <TIM_Base_SetConfig+0x30>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	4a2c      	ldr	r2, [pc, #176]	@ (800b2d0 <TIM_Base_SetConfig+0xd4>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d003      	beq.n	800b22c <TIM_Base_SetConfig+0x30>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a2b      	ldr	r2, [pc, #172]	@ (800b2d4 <TIM_Base_SetConfig+0xd8>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d108      	bne.n	800b23e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	68fa      	ldr	r2, [r7, #12]
 800b23a:	4313      	orrs	r3, r2
 800b23c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	4a22      	ldr	r2, [pc, #136]	@ (800b2cc <TIM_Base_SetConfig+0xd0>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d00b      	beq.n	800b25e <TIM_Base_SetConfig+0x62>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b24c:	d007      	beq.n	800b25e <TIM_Base_SetConfig+0x62>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	4a1f      	ldr	r2, [pc, #124]	@ (800b2d0 <TIM_Base_SetConfig+0xd4>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d003      	beq.n	800b25e <TIM_Base_SetConfig+0x62>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4a1e      	ldr	r2, [pc, #120]	@ (800b2d4 <TIM_Base_SetConfig+0xd8>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d108      	bne.n	800b270 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	4313      	orrs	r3, r2
 800b26e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	695b      	ldr	r3, [r3, #20]
 800b27a:	4313      	orrs	r3, r2
 800b27c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	689a      	ldr	r2, [r3, #8]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	4a0d      	ldr	r2, [pc, #52]	@ (800b2cc <TIM_Base_SetConfig+0xd0>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d103      	bne.n	800b2a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	691a      	ldr	r2, [r3, #16]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	691b      	ldr	r3, [r3, #16]
 800b2ae:	f003 0301 	and.w	r3, r3, #1
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d005      	beq.n	800b2c2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	691b      	ldr	r3, [r3, #16]
 800b2ba:	f023 0201 	bic.w	r2, r3, #1
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	611a      	str	r2, [r3, #16]
  }
}
 800b2c2:	bf00      	nop
 800b2c4:	3714      	adds	r7, #20
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bc80      	pop	{r7}
 800b2ca:	4770      	bx	lr
 800b2cc:	40012c00 	.word	0x40012c00
 800b2d0:	40000400 	.word	0x40000400
 800b2d4:	40000800 	.word	0x40000800

0800b2d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b087      	sub	sp, #28
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	60b9      	str	r1, [r7, #8]
 800b2e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	f003 031f 	and.w	r3, r3, #31
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b2f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6a1a      	ldr	r2, [r3, #32]
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	43db      	mvns	r3, r3
 800b2fa:	401a      	ands	r2, r3
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6a1a      	ldr	r2, [r3, #32]
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	f003 031f 	and.w	r3, r3, #31
 800b30a:	6879      	ldr	r1, [r7, #4]
 800b30c:	fa01 f303 	lsl.w	r3, r1, r3
 800b310:	431a      	orrs	r2, r3
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	621a      	str	r2, [r3, #32]
}
 800b316:	bf00      	nop
 800b318:	371c      	adds	r7, #28
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bc80      	pop	{r7}
 800b31e:	4770      	bx	lr

0800b320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b320:	b480      	push	{r7}
 800b322:	b085      	sub	sp, #20
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b330:	2b01      	cmp	r3, #1
 800b332:	d101      	bne.n	800b338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b334:	2302      	movs	r3, #2
 800b336:	e046      	b.n	800b3c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2202      	movs	r2, #2
 800b344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b35e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	68fa      	ldr	r2, [r7, #12]
 800b366:	4313      	orrs	r3, r2
 800b368:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	68fa      	ldr	r2, [r7, #12]
 800b370:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a16      	ldr	r2, [pc, #88]	@ (800b3d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d00e      	beq.n	800b39a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b384:	d009      	beq.n	800b39a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a12      	ldr	r2, [pc, #72]	@ (800b3d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d004      	beq.n	800b39a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a10      	ldr	r2, [pc, #64]	@ (800b3d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d10c      	bne.n	800b3b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b3a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	68ba      	ldr	r2, [r7, #8]
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3714      	adds	r7, #20
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bc80      	pop	{r7}
 800b3ce:	4770      	bx	lr
 800b3d0:	40012c00 	.word	0x40012c00
 800b3d4:	40000400 	.word	0x40000400
 800b3d8:	40000800 	.word	0x40000800

0800b3dc <rand>:
 800b3dc:	4b16      	ldr	r3, [pc, #88]	@ (800b438 <rand+0x5c>)
 800b3de:	b510      	push	{r4, lr}
 800b3e0:	681c      	ldr	r4, [r3, #0]
 800b3e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b3e4:	b9b3      	cbnz	r3, 800b414 <rand+0x38>
 800b3e6:	2018      	movs	r0, #24
 800b3e8:	f000 fa60 	bl	800b8ac <malloc>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	6320      	str	r0, [r4, #48]	@ 0x30
 800b3f0:	b920      	cbnz	r0, 800b3fc <rand+0x20>
 800b3f2:	2152      	movs	r1, #82	@ 0x52
 800b3f4:	4b11      	ldr	r3, [pc, #68]	@ (800b43c <rand+0x60>)
 800b3f6:	4812      	ldr	r0, [pc, #72]	@ (800b440 <rand+0x64>)
 800b3f8:	f000 f9f2 	bl	800b7e0 <__assert_func>
 800b3fc:	4911      	ldr	r1, [pc, #68]	@ (800b444 <rand+0x68>)
 800b3fe:	4b12      	ldr	r3, [pc, #72]	@ (800b448 <rand+0x6c>)
 800b400:	e9c0 1300 	strd	r1, r3, [r0]
 800b404:	4b11      	ldr	r3, [pc, #68]	@ (800b44c <rand+0x70>)
 800b406:	2100      	movs	r1, #0
 800b408:	6083      	str	r3, [r0, #8]
 800b40a:	230b      	movs	r3, #11
 800b40c:	8183      	strh	r3, [r0, #12]
 800b40e:	2001      	movs	r0, #1
 800b410:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b414:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b416:	480e      	ldr	r0, [pc, #56]	@ (800b450 <rand+0x74>)
 800b418:	690b      	ldr	r3, [r1, #16]
 800b41a:	694c      	ldr	r4, [r1, #20]
 800b41c:	4358      	muls	r0, r3
 800b41e:	4a0d      	ldr	r2, [pc, #52]	@ (800b454 <rand+0x78>)
 800b420:	fb02 0004 	mla	r0, r2, r4, r0
 800b424:	fba3 3202 	umull	r3, r2, r3, r2
 800b428:	3301      	adds	r3, #1
 800b42a:	eb40 0002 	adc.w	r0, r0, r2
 800b42e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b432:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800b436:	bd10      	pop	{r4, pc}
 800b438:	20000034 	.word	0x20000034
 800b43c:	0800e236 	.word	0x0800e236
 800b440:	0800e24d 	.word	0x0800e24d
 800b444:	abcd330e 	.word	0xabcd330e
 800b448:	e66d1234 	.word	0xe66d1234
 800b44c:	0005deec 	.word	0x0005deec
 800b450:	5851f42d 	.word	0x5851f42d
 800b454:	4c957f2d 	.word	0x4c957f2d

0800b458 <std>:
 800b458:	2300      	movs	r3, #0
 800b45a:	b510      	push	{r4, lr}
 800b45c:	4604      	mov	r4, r0
 800b45e:	e9c0 3300 	strd	r3, r3, [r0]
 800b462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b466:	6083      	str	r3, [r0, #8]
 800b468:	8181      	strh	r1, [r0, #12]
 800b46a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b46c:	81c2      	strh	r2, [r0, #14]
 800b46e:	6183      	str	r3, [r0, #24]
 800b470:	4619      	mov	r1, r3
 800b472:	2208      	movs	r2, #8
 800b474:	305c      	adds	r0, #92	@ 0x5c
 800b476:	f000 f916 	bl	800b6a6 <memset>
 800b47a:	4b0d      	ldr	r3, [pc, #52]	@ (800b4b0 <std+0x58>)
 800b47c:	6224      	str	r4, [r4, #32]
 800b47e:	6263      	str	r3, [r4, #36]	@ 0x24
 800b480:	4b0c      	ldr	r3, [pc, #48]	@ (800b4b4 <std+0x5c>)
 800b482:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b484:	4b0c      	ldr	r3, [pc, #48]	@ (800b4b8 <std+0x60>)
 800b486:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b488:	4b0c      	ldr	r3, [pc, #48]	@ (800b4bc <std+0x64>)
 800b48a:	6323      	str	r3, [r4, #48]	@ 0x30
 800b48c:	4b0c      	ldr	r3, [pc, #48]	@ (800b4c0 <std+0x68>)
 800b48e:	429c      	cmp	r4, r3
 800b490:	d006      	beq.n	800b4a0 <std+0x48>
 800b492:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b496:	4294      	cmp	r4, r2
 800b498:	d002      	beq.n	800b4a0 <std+0x48>
 800b49a:	33d0      	adds	r3, #208	@ 0xd0
 800b49c:	429c      	cmp	r4, r3
 800b49e:	d105      	bne.n	800b4ac <std+0x54>
 800b4a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b4a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4a8:	f000 b988 	b.w	800b7bc <__retarget_lock_init_recursive>
 800b4ac:	bd10      	pop	{r4, pc}
 800b4ae:	bf00      	nop
 800b4b0:	0800b621 	.word	0x0800b621
 800b4b4:	0800b643 	.word	0x0800b643
 800b4b8:	0800b67b 	.word	0x0800b67b
 800b4bc:	0800b69f 	.word	0x0800b69f
 800b4c0:	2000406c 	.word	0x2000406c

0800b4c4 <stdio_exit_handler>:
 800b4c4:	4a02      	ldr	r2, [pc, #8]	@ (800b4d0 <stdio_exit_handler+0xc>)
 800b4c6:	4903      	ldr	r1, [pc, #12]	@ (800b4d4 <stdio_exit_handler+0x10>)
 800b4c8:	4803      	ldr	r0, [pc, #12]	@ (800b4d8 <stdio_exit_handler+0x14>)
 800b4ca:	f000 b869 	b.w	800b5a0 <_fwalk_sglue>
 800b4ce:	bf00      	nop
 800b4d0:	20000028 	.word	0x20000028
 800b4d4:	0800c0e9 	.word	0x0800c0e9
 800b4d8:	20000038 	.word	0x20000038

0800b4dc <cleanup_stdio>:
 800b4dc:	6841      	ldr	r1, [r0, #4]
 800b4de:	4b0c      	ldr	r3, [pc, #48]	@ (800b510 <cleanup_stdio+0x34>)
 800b4e0:	b510      	push	{r4, lr}
 800b4e2:	4299      	cmp	r1, r3
 800b4e4:	4604      	mov	r4, r0
 800b4e6:	d001      	beq.n	800b4ec <cleanup_stdio+0x10>
 800b4e8:	f000 fdfe 	bl	800c0e8 <_fflush_r>
 800b4ec:	68a1      	ldr	r1, [r4, #8]
 800b4ee:	4b09      	ldr	r3, [pc, #36]	@ (800b514 <cleanup_stdio+0x38>)
 800b4f0:	4299      	cmp	r1, r3
 800b4f2:	d002      	beq.n	800b4fa <cleanup_stdio+0x1e>
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	f000 fdf7 	bl	800c0e8 <_fflush_r>
 800b4fa:	68e1      	ldr	r1, [r4, #12]
 800b4fc:	4b06      	ldr	r3, [pc, #24]	@ (800b518 <cleanup_stdio+0x3c>)
 800b4fe:	4299      	cmp	r1, r3
 800b500:	d004      	beq.n	800b50c <cleanup_stdio+0x30>
 800b502:	4620      	mov	r0, r4
 800b504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b508:	f000 bdee 	b.w	800c0e8 <_fflush_r>
 800b50c:	bd10      	pop	{r4, pc}
 800b50e:	bf00      	nop
 800b510:	2000406c 	.word	0x2000406c
 800b514:	200040d4 	.word	0x200040d4
 800b518:	2000413c 	.word	0x2000413c

0800b51c <global_stdio_init.part.0>:
 800b51c:	b510      	push	{r4, lr}
 800b51e:	4b0b      	ldr	r3, [pc, #44]	@ (800b54c <global_stdio_init.part.0+0x30>)
 800b520:	4c0b      	ldr	r4, [pc, #44]	@ (800b550 <global_stdio_init.part.0+0x34>)
 800b522:	4a0c      	ldr	r2, [pc, #48]	@ (800b554 <global_stdio_init.part.0+0x38>)
 800b524:	4620      	mov	r0, r4
 800b526:	601a      	str	r2, [r3, #0]
 800b528:	2104      	movs	r1, #4
 800b52a:	2200      	movs	r2, #0
 800b52c:	f7ff ff94 	bl	800b458 <std>
 800b530:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b534:	2201      	movs	r2, #1
 800b536:	2109      	movs	r1, #9
 800b538:	f7ff ff8e 	bl	800b458 <std>
 800b53c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b540:	2202      	movs	r2, #2
 800b542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b546:	2112      	movs	r1, #18
 800b548:	f7ff bf86 	b.w	800b458 <std>
 800b54c:	200041a4 	.word	0x200041a4
 800b550:	2000406c 	.word	0x2000406c
 800b554:	0800b4c5 	.word	0x0800b4c5

0800b558 <__sfp_lock_acquire>:
 800b558:	4801      	ldr	r0, [pc, #4]	@ (800b560 <__sfp_lock_acquire+0x8>)
 800b55a:	f000 b930 	b.w	800b7be <__retarget_lock_acquire_recursive>
 800b55e:	bf00      	nop
 800b560:	200041ad 	.word	0x200041ad

0800b564 <__sfp_lock_release>:
 800b564:	4801      	ldr	r0, [pc, #4]	@ (800b56c <__sfp_lock_release+0x8>)
 800b566:	f000 b92b 	b.w	800b7c0 <__retarget_lock_release_recursive>
 800b56a:	bf00      	nop
 800b56c:	200041ad 	.word	0x200041ad

0800b570 <__sinit>:
 800b570:	b510      	push	{r4, lr}
 800b572:	4604      	mov	r4, r0
 800b574:	f7ff fff0 	bl	800b558 <__sfp_lock_acquire>
 800b578:	6a23      	ldr	r3, [r4, #32]
 800b57a:	b11b      	cbz	r3, 800b584 <__sinit+0x14>
 800b57c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b580:	f7ff bff0 	b.w	800b564 <__sfp_lock_release>
 800b584:	4b04      	ldr	r3, [pc, #16]	@ (800b598 <__sinit+0x28>)
 800b586:	6223      	str	r3, [r4, #32]
 800b588:	4b04      	ldr	r3, [pc, #16]	@ (800b59c <__sinit+0x2c>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d1f5      	bne.n	800b57c <__sinit+0xc>
 800b590:	f7ff ffc4 	bl	800b51c <global_stdio_init.part.0>
 800b594:	e7f2      	b.n	800b57c <__sinit+0xc>
 800b596:	bf00      	nop
 800b598:	0800b4dd 	.word	0x0800b4dd
 800b59c:	200041a4 	.word	0x200041a4

0800b5a0 <_fwalk_sglue>:
 800b5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5a4:	4607      	mov	r7, r0
 800b5a6:	4688      	mov	r8, r1
 800b5a8:	4614      	mov	r4, r2
 800b5aa:	2600      	movs	r6, #0
 800b5ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5b0:	f1b9 0901 	subs.w	r9, r9, #1
 800b5b4:	d505      	bpl.n	800b5c2 <_fwalk_sglue+0x22>
 800b5b6:	6824      	ldr	r4, [r4, #0]
 800b5b8:	2c00      	cmp	r4, #0
 800b5ba:	d1f7      	bne.n	800b5ac <_fwalk_sglue+0xc>
 800b5bc:	4630      	mov	r0, r6
 800b5be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5c2:	89ab      	ldrh	r3, [r5, #12]
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d907      	bls.n	800b5d8 <_fwalk_sglue+0x38>
 800b5c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	d003      	beq.n	800b5d8 <_fwalk_sglue+0x38>
 800b5d0:	4629      	mov	r1, r5
 800b5d2:	4638      	mov	r0, r7
 800b5d4:	47c0      	blx	r8
 800b5d6:	4306      	orrs	r6, r0
 800b5d8:	3568      	adds	r5, #104	@ 0x68
 800b5da:	e7e9      	b.n	800b5b0 <_fwalk_sglue+0x10>

0800b5dc <siprintf>:
 800b5dc:	b40e      	push	{r1, r2, r3}
 800b5de:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b5e2:	b510      	push	{r4, lr}
 800b5e4:	2400      	movs	r4, #0
 800b5e6:	b09d      	sub	sp, #116	@ 0x74
 800b5e8:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b5ea:	9002      	str	r0, [sp, #8]
 800b5ec:	9006      	str	r0, [sp, #24]
 800b5ee:	9107      	str	r1, [sp, #28]
 800b5f0:	9104      	str	r1, [sp, #16]
 800b5f2:	4809      	ldr	r0, [pc, #36]	@ (800b618 <siprintf+0x3c>)
 800b5f4:	4909      	ldr	r1, [pc, #36]	@ (800b61c <siprintf+0x40>)
 800b5f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5fa:	9105      	str	r1, [sp, #20]
 800b5fc:	6800      	ldr	r0, [r0, #0]
 800b5fe:	a902      	add	r1, sp, #8
 800b600:	9301      	str	r3, [sp, #4]
 800b602:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b604:	f000 fa64 	bl	800bad0 <_svfiprintf_r>
 800b608:	9b02      	ldr	r3, [sp, #8]
 800b60a:	701c      	strb	r4, [r3, #0]
 800b60c:	b01d      	add	sp, #116	@ 0x74
 800b60e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b612:	b003      	add	sp, #12
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop
 800b618:	20000034 	.word	0x20000034
 800b61c:	ffff0208 	.word	0xffff0208

0800b620 <__sread>:
 800b620:	b510      	push	{r4, lr}
 800b622:	460c      	mov	r4, r1
 800b624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b628:	f000 f87a 	bl	800b720 <_read_r>
 800b62c:	2800      	cmp	r0, #0
 800b62e:	bfab      	itete	ge
 800b630:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b632:	89a3      	ldrhlt	r3, [r4, #12]
 800b634:	181b      	addge	r3, r3, r0
 800b636:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b63a:	bfac      	ite	ge
 800b63c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b63e:	81a3      	strhlt	r3, [r4, #12]
 800b640:	bd10      	pop	{r4, pc}

0800b642 <__swrite>:
 800b642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b646:	461f      	mov	r7, r3
 800b648:	898b      	ldrh	r3, [r1, #12]
 800b64a:	4605      	mov	r5, r0
 800b64c:	05db      	lsls	r3, r3, #23
 800b64e:	460c      	mov	r4, r1
 800b650:	4616      	mov	r6, r2
 800b652:	d505      	bpl.n	800b660 <__swrite+0x1e>
 800b654:	2302      	movs	r3, #2
 800b656:	2200      	movs	r2, #0
 800b658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b65c:	f000 f84e 	bl	800b6fc <_lseek_r>
 800b660:	89a3      	ldrh	r3, [r4, #12]
 800b662:	4632      	mov	r2, r6
 800b664:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b668:	81a3      	strh	r3, [r4, #12]
 800b66a:	4628      	mov	r0, r5
 800b66c:	463b      	mov	r3, r7
 800b66e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b676:	f000 b865 	b.w	800b744 <_write_r>

0800b67a <__sseek>:
 800b67a:	b510      	push	{r4, lr}
 800b67c:	460c      	mov	r4, r1
 800b67e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b682:	f000 f83b 	bl	800b6fc <_lseek_r>
 800b686:	1c43      	adds	r3, r0, #1
 800b688:	89a3      	ldrh	r3, [r4, #12]
 800b68a:	bf15      	itete	ne
 800b68c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b68e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b692:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b696:	81a3      	strheq	r3, [r4, #12]
 800b698:	bf18      	it	ne
 800b69a:	81a3      	strhne	r3, [r4, #12]
 800b69c:	bd10      	pop	{r4, pc}

0800b69e <__sclose>:
 800b69e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6a2:	f000 b81b 	b.w	800b6dc <_close_r>

0800b6a6 <memset>:
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	4402      	add	r2, r0
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d100      	bne.n	800b6b0 <memset+0xa>
 800b6ae:	4770      	bx	lr
 800b6b0:	f803 1b01 	strb.w	r1, [r3], #1
 800b6b4:	e7f9      	b.n	800b6aa <memset+0x4>

0800b6b6 <strncpy>:
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	b510      	push	{r4, lr}
 800b6ba:	3901      	subs	r1, #1
 800b6bc:	b132      	cbz	r2, 800b6cc <strncpy+0x16>
 800b6be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b6c2:	3a01      	subs	r2, #1
 800b6c4:	f803 4b01 	strb.w	r4, [r3], #1
 800b6c8:	2c00      	cmp	r4, #0
 800b6ca:	d1f7      	bne.n	800b6bc <strncpy+0x6>
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	441a      	add	r2, r3
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d100      	bne.n	800b6d6 <strncpy+0x20>
 800b6d4:	bd10      	pop	{r4, pc}
 800b6d6:	f803 1b01 	strb.w	r1, [r3], #1
 800b6da:	e7f9      	b.n	800b6d0 <strncpy+0x1a>

0800b6dc <_close_r>:
 800b6dc:	b538      	push	{r3, r4, r5, lr}
 800b6de:	2300      	movs	r3, #0
 800b6e0:	4d05      	ldr	r5, [pc, #20]	@ (800b6f8 <_close_r+0x1c>)
 800b6e2:	4604      	mov	r4, r0
 800b6e4:	4608      	mov	r0, r1
 800b6e6:	602b      	str	r3, [r5, #0]
 800b6e8:	f7fc fe23 	bl	8008332 <_close>
 800b6ec:	1c43      	adds	r3, r0, #1
 800b6ee:	d102      	bne.n	800b6f6 <_close_r+0x1a>
 800b6f0:	682b      	ldr	r3, [r5, #0]
 800b6f2:	b103      	cbz	r3, 800b6f6 <_close_r+0x1a>
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	bd38      	pop	{r3, r4, r5, pc}
 800b6f8:	200041a8 	.word	0x200041a8

0800b6fc <_lseek_r>:
 800b6fc:	b538      	push	{r3, r4, r5, lr}
 800b6fe:	4604      	mov	r4, r0
 800b700:	4608      	mov	r0, r1
 800b702:	4611      	mov	r1, r2
 800b704:	2200      	movs	r2, #0
 800b706:	4d05      	ldr	r5, [pc, #20]	@ (800b71c <_lseek_r+0x20>)
 800b708:	602a      	str	r2, [r5, #0]
 800b70a:	461a      	mov	r2, r3
 800b70c:	f7fc fe35 	bl	800837a <_lseek>
 800b710:	1c43      	adds	r3, r0, #1
 800b712:	d102      	bne.n	800b71a <_lseek_r+0x1e>
 800b714:	682b      	ldr	r3, [r5, #0]
 800b716:	b103      	cbz	r3, 800b71a <_lseek_r+0x1e>
 800b718:	6023      	str	r3, [r4, #0]
 800b71a:	bd38      	pop	{r3, r4, r5, pc}
 800b71c:	200041a8 	.word	0x200041a8

0800b720 <_read_r>:
 800b720:	b538      	push	{r3, r4, r5, lr}
 800b722:	4604      	mov	r4, r0
 800b724:	4608      	mov	r0, r1
 800b726:	4611      	mov	r1, r2
 800b728:	2200      	movs	r2, #0
 800b72a:	4d05      	ldr	r5, [pc, #20]	@ (800b740 <_read_r+0x20>)
 800b72c:	602a      	str	r2, [r5, #0]
 800b72e:	461a      	mov	r2, r3
 800b730:	f7fc fdc6 	bl	80082c0 <_read>
 800b734:	1c43      	adds	r3, r0, #1
 800b736:	d102      	bne.n	800b73e <_read_r+0x1e>
 800b738:	682b      	ldr	r3, [r5, #0]
 800b73a:	b103      	cbz	r3, 800b73e <_read_r+0x1e>
 800b73c:	6023      	str	r3, [r4, #0]
 800b73e:	bd38      	pop	{r3, r4, r5, pc}
 800b740:	200041a8 	.word	0x200041a8

0800b744 <_write_r>:
 800b744:	b538      	push	{r3, r4, r5, lr}
 800b746:	4604      	mov	r4, r0
 800b748:	4608      	mov	r0, r1
 800b74a:	4611      	mov	r1, r2
 800b74c:	2200      	movs	r2, #0
 800b74e:	4d05      	ldr	r5, [pc, #20]	@ (800b764 <_write_r+0x20>)
 800b750:	602a      	str	r2, [r5, #0]
 800b752:	461a      	mov	r2, r3
 800b754:	f7fc fdd1 	bl	80082fa <_write>
 800b758:	1c43      	adds	r3, r0, #1
 800b75a:	d102      	bne.n	800b762 <_write_r+0x1e>
 800b75c:	682b      	ldr	r3, [r5, #0]
 800b75e:	b103      	cbz	r3, 800b762 <_write_r+0x1e>
 800b760:	6023      	str	r3, [r4, #0]
 800b762:	bd38      	pop	{r3, r4, r5, pc}
 800b764:	200041a8 	.word	0x200041a8

0800b768 <__errno>:
 800b768:	4b01      	ldr	r3, [pc, #4]	@ (800b770 <__errno+0x8>)
 800b76a:	6818      	ldr	r0, [r3, #0]
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	20000034 	.word	0x20000034

0800b774 <__libc_init_array>:
 800b774:	b570      	push	{r4, r5, r6, lr}
 800b776:	2600      	movs	r6, #0
 800b778:	4d0c      	ldr	r5, [pc, #48]	@ (800b7ac <__libc_init_array+0x38>)
 800b77a:	4c0d      	ldr	r4, [pc, #52]	@ (800b7b0 <__libc_init_array+0x3c>)
 800b77c:	1b64      	subs	r4, r4, r5
 800b77e:	10a4      	asrs	r4, r4, #2
 800b780:	42a6      	cmp	r6, r4
 800b782:	d109      	bne.n	800b798 <__libc_init_array+0x24>
 800b784:	f002 fa56 	bl	800dc34 <_init>
 800b788:	2600      	movs	r6, #0
 800b78a:	4d0a      	ldr	r5, [pc, #40]	@ (800b7b4 <__libc_init_array+0x40>)
 800b78c:	4c0a      	ldr	r4, [pc, #40]	@ (800b7b8 <__libc_init_array+0x44>)
 800b78e:	1b64      	subs	r4, r4, r5
 800b790:	10a4      	asrs	r4, r4, #2
 800b792:	42a6      	cmp	r6, r4
 800b794:	d105      	bne.n	800b7a2 <__libc_init_array+0x2e>
 800b796:	bd70      	pop	{r4, r5, r6, pc}
 800b798:	f855 3b04 	ldr.w	r3, [r5], #4
 800b79c:	4798      	blx	r3
 800b79e:	3601      	adds	r6, #1
 800b7a0:	e7ee      	b.n	800b780 <__libc_init_array+0xc>
 800b7a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7a6:	4798      	blx	r3
 800b7a8:	3601      	adds	r6, #1
 800b7aa:	e7f2      	b.n	800b792 <__libc_init_array+0x1e>
 800b7ac:	0800e70c 	.word	0x0800e70c
 800b7b0:	0800e70c 	.word	0x0800e70c
 800b7b4:	0800e70c 	.word	0x0800e70c
 800b7b8:	0800e710 	.word	0x0800e710

0800b7bc <__retarget_lock_init_recursive>:
 800b7bc:	4770      	bx	lr

0800b7be <__retarget_lock_acquire_recursive>:
 800b7be:	4770      	bx	lr

0800b7c0 <__retarget_lock_release_recursive>:
 800b7c0:	4770      	bx	lr

0800b7c2 <memcpy>:
 800b7c2:	440a      	add	r2, r1
 800b7c4:	4291      	cmp	r1, r2
 800b7c6:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7ca:	d100      	bne.n	800b7ce <memcpy+0xc>
 800b7cc:	4770      	bx	lr
 800b7ce:	b510      	push	{r4, lr}
 800b7d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7d4:	4291      	cmp	r1, r2
 800b7d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7da:	d1f9      	bne.n	800b7d0 <memcpy+0xe>
 800b7dc:	bd10      	pop	{r4, pc}
	...

0800b7e0 <__assert_func>:
 800b7e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7e2:	4614      	mov	r4, r2
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	4b09      	ldr	r3, [pc, #36]	@ (800b80c <__assert_func+0x2c>)
 800b7e8:	4605      	mov	r5, r0
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	68d8      	ldr	r0, [r3, #12]
 800b7ee:	b14c      	cbz	r4, 800b804 <__assert_func+0x24>
 800b7f0:	4b07      	ldr	r3, [pc, #28]	@ (800b810 <__assert_func+0x30>)
 800b7f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7f6:	9100      	str	r1, [sp, #0]
 800b7f8:	462b      	mov	r3, r5
 800b7fa:	4906      	ldr	r1, [pc, #24]	@ (800b814 <__assert_func+0x34>)
 800b7fc:	f000 fc9c 	bl	800c138 <fiprintf>
 800b800:	f000 fce4 	bl	800c1cc <abort>
 800b804:	4b04      	ldr	r3, [pc, #16]	@ (800b818 <__assert_func+0x38>)
 800b806:	461c      	mov	r4, r3
 800b808:	e7f3      	b.n	800b7f2 <__assert_func+0x12>
 800b80a:	bf00      	nop
 800b80c:	20000034 	.word	0x20000034
 800b810:	0800e2a5 	.word	0x0800e2a5
 800b814:	0800e2b2 	.word	0x0800e2b2
 800b818:	0800e2e0 	.word	0x0800e2e0

0800b81c <_free_r>:
 800b81c:	b538      	push	{r3, r4, r5, lr}
 800b81e:	4605      	mov	r5, r0
 800b820:	2900      	cmp	r1, #0
 800b822:	d040      	beq.n	800b8a6 <_free_r+0x8a>
 800b824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b828:	1f0c      	subs	r4, r1, #4
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	bfb8      	it	lt
 800b82e:	18e4      	addlt	r4, r4, r3
 800b830:	f000 f8e6 	bl	800ba00 <__malloc_lock>
 800b834:	4a1c      	ldr	r2, [pc, #112]	@ (800b8a8 <_free_r+0x8c>)
 800b836:	6813      	ldr	r3, [r2, #0]
 800b838:	b933      	cbnz	r3, 800b848 <_free_r+0x2c>
 800b83a:	6063      	str	r3, [r4, #4]
 800b83c:	6014      	str	r4, [r2, #0]
 800b83e:	4628      	mov	r0, r5
 800b840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b844:	f000 b8e2 	b.w	800ba0c <__malloc_unlock>
 800b848:	42a3      	cmp	r3, r4
 800b84a:	d908      	bls.n	800b85e <_free_r+0x42>
 800b84c:	6820      	ldr	r0, [r4, #0]
 800b84e:	1821      	adds	r1, r4, r0
 800b850:	428b      	cmp	r3, r1
 800b852:	bf01      	itttt	eq
 800b854:	6819      	ldreq	r1, [r3, #0]
 800b856:	685b      	ldreq	r3, [r3, #4]
 800b858:	1809      	addeq	r1, r1, r0
 800b85a:	6021      	streq	r1, [r4, #0]
 800b85c:	e7ed      	b.n	800b83a <_free_r+0x1e>
 800b85e:	461a      	mov	r2, r3
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	b10b      	cbz	r3, 800b868 <_free_r+0x4c>
 800b864:	42a3      	cmp	r3, r4
 800b866:	d9fa      	bls.n	800b85e <_free_r+0x42>
 800b868:	6811      	ldr	r1, [r2, #0]
 800b86a:	1850      	adds	r0, r2, r1
 800b86c:	42a0      	cmp	r0, r4
 800b86e:	d10b      	bne.n	800b888 <_free_r+0x6c>
 800b870:	6820      	ldr	r0, [r4, #0]
 800b872:	4401      	add	r1, r0
 800b874:	1850      	adds	r0, r2, r1
 800b876:	4283      	cmp	r3, r0
 800b878:	6011      	str	r1, [r2, #0]
 800b87a:	d1e0      	bne.n	800b83e <_free_r+0x22>
 800b87c:	6818      	ldr	r0, [r3, #0]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	4408      	add	r0, r1
 800b882:	6010      	str	r0, [r2, #0]
 800b884:	6053      	str	r3, [r2, #4]
 800b886:	e7da      	b.n	800b83e <_free_r+0x22>
 800b888:	d902      	bls.n	800b890 <_free_r+0x74>
 800b88a:	230c      	movs	r3, #12
 800b88c:	602b      	str	r3, [r5, #0]
 800b88e:	e7d6      	b.n	800b83e <_free_r+0x22>
 800b890:	6820      	ldr	r0, [r4, #0]
 800b892:	1821      	adds	r1, r4, r0
 800b894:	428b      	cmp	r3, r1
 800b896:	bf01      	itttt	eq
 800b898:	6819      	ldreq	r1, [r3, #0]
 800b89a:	685b      	ldreq	r3, [r3, #4]
 800b89c:	1809      	addeq	r1, r1, r0
 800b89e:	6021      	streq	r1, [r4, #0]
 800b8a0:	6063      	str	r3, [r4, #4]
 800b8a2:	6054      	str	r4, [r2, #4]
 800b8a4:	e7cb      	b.n	800b83e <_free_r+0x22>
 800b8a6:	bd38      	pop	{r3, r4, r5, pc}
 800b8a8:	200041b4 	.word	0x200041b4

0800b8ac <malloc>:
 800b8ac:	4b02      	ldr	r3, [pc, #8]	@ (800b8b8 <malloc+0xc>)
 800b8ae:	4601      	mov	r1, r0
 800b8b0:	6818      	ldr	r0, [r3, #0]
 800b8b2:	f000 b825 	b.w	800b900 <_malloc_r>
 800b8b6:	bf00      	nop
 800b8b8:	20000034 	.word	0x20000034

0800b8bc <sbrk_aligned>:
 800b8bc:	b570      	push	{r4, r5, r6, lr}
 800b8be:	4e0f      	ldr	r6, [pc, #60]	@ (800b8fc <sbrk_aligned+0x40>)
 800b8c0:	460c      	mov	r4, r1
 800b8c2:	6831      	ldr	r1, [r6, #0]
 800b8c4:	4605      	mov	r5, r0
 800b8c6:	b911      	cbnz	r1, 800b8ce <sbrk_aligned+0x12>
 800b8c8:	f000 fc62 	bl	800c190 <_sbrk_r>
 800b8cc:	6030      	str	r0, [r6, #0]
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	f000 fc5d 	bl	800c190 <_sbrk_r>
 800b8d6:	1c43      	adds	r3, r0, #1
 800b8d8:	d103      	bne.n	800b8e2 <sbrk_aligned+0x26>
 800b8da:	f04f 34ff 	mov.w	r4, #4294967295
 800b8de:	4620      	mov	r0, r4
 800b8e0:	bd70      	pop	{r4, r5, r6, pc}
 800b8e2:	1cc4      	adds	r4, r0, #3
 800b8e4:	f024 0403 	bic.w	r4, r4, #3
 800b8e8:	42a0      	cmp	r0, r4
 800b8ea:	d0f8      	beq.n	800b8de <sbrk_aligned+0x22>
 800b8ec:	1a21      	subs	r1, r4, r0
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	f000 fc4e 	bl	800c190 <_sbrk_r>
 800b8f4:	3001      	adds	r0, #1
 800b8f6:	d1f2      	bne.n	800b8de <sbrk_aligned+0x22>
 800b8f8:	e7ef      	b.n	800b8da <sbrk_aligned+0x1e>
 800b8fa:	bf00      	nop
 800b8fc:	200041b0 	.word	0x200041b0

0800b900 <_malloc_r>:
 800b900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b904:	1ccd      	adds	r5, r1, #3
 800b906:	f025 0503 	bic.w	r5, r5, #3
 800b90a:	3508      	adds	r5, #8
 800b90c:	2d0c      	cmp	r5, #12
 800b90e:	bf38      	it	cc
 800b910:	250c      	movcc	r5, #12
 800b912:	2d00      	cmp	r5, #0
 800b914:	4606      	mov	r6, r0
 800b916:	db01      	blt.n	800b91c <_malloc_r+0x1c>
 800b918:	42a9      	cmp	r1, r5
 800b91a:	d904      	bls.n	800b926 <_malloc_r+0x26>
 800b91c:	230c      	movs	r3, #12
 800b91e:	6033      	str	r3, [r6, #0]
 800b920:	2000      	movs	r0, #0
 800b922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b926:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b9fc <_malloc_r+0xfc>
 800b92a:	f000 f869 	bl	800ba00 <__malloc_lock>
 800b92e:	f8d8 3000 	ldr.w	r3, [r8]
 800b932:	461c      	mov	r4, r3
 800b934:	bb44      	cbnz	r4, 800b988 <_malloc_r+0x88>
 800b936:	4629      	mov	r1, r5
 800b938:	4630      	mov	r0, r6
 800b93a:	f7ff ffbf 	bl	800b8bc <sbrk_aligned>
 800b93e:	1c43      	adds	r3, r0, #1
 800b940:	4604      	mov	r4, r0
 800b942:	d158      	bne.n	800b9f6 <_malloc_r+0xf6>
 800b944:	f8d8 4000 	ldr.w	r4, [r8]
 800b948:	4627      	mov	r7, r4
 800b94a:	2f00      	cmp	r7, #0
 800b94c:	d143      	bne.n	800b9d6 <_malloc_r+0xd6>
 800b94e:	2c00      	cmp	r4, #0
 800b950:	d04b      	beq.n	800b9ea <_malloc_r+0xea>
 800b952:	6823      	ldr	r3, [r4, #0]
 800b954:	4639      	mov	r1, r7
 800b956:	4630      	mov	r0, r6
 800b958:	eb04 0903 	add.w	r9, r4, r3
 800b95c:	f000 fc18 	bl	800c190 <_sbrk_r>
 800b960:	4581      	cmp	r9, r0
 800b962:	d142      	bne.n	800b9ea <_malloc_r+0xea>
 800b964:	6821      	ldr	r1, [r4, #0]
 800b966:	4630      	mov	r0, r6
 800b968:	1a6d      	subs	r5, r5, r1
 800b96a:	4629      	mov	r1, r5
 800b96c:	f7ff ffa6 	bl	800b8bc <sbrk_aligned>
 800b970:	3001      	adds	r0, #1
 800b972:	d03a      	beq.n	800b9ea <_malloc_r+0xea>
 800b974:	6823      	ldr	r3, [r4, #0]
 800b976:	442b      	add	r3, r5
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	f8d8 3000 	ldr.w	r3, [r8]
 800b97e:	685a      	ldr	r2, [r3, #4]
 800b980:	bb62      	cbnz	r2, 800b9dc <_malloc_r+0xdc>
 800b982:	f8c8 7000 	str.w	r7, [r8]
 800b986:	e00f      	b.n	800b9a8 <_malloc_r+0xa8>
 800b988:	6822      	ldr	r2, [r4, #0]
 800b98a:	1b52      	subs	r2, r2, r5
 800b98c:	d420      	bmi.n	800b9d0 <_malloc_r+0xd0>
 800b98e:	2a0b      	cmp	r2, #11
 800b990:	d917      	bls.n	800b9c2 <_malloc_r+0xc2>
 800b992:	1961      	adds	r1, r4, r5
 800b994:	42a3      	cmp	r3, r4
 800b996:	6025      	str	r5, [r4, #0]
 800b998:	bf18      	it	ne
 800b99a:	6059      	strne	r1, [r3, #4]
 800b99c:	6863      	ldr	r3, [r4, #4]
 800b99e:	bf08      	it	eq
 800b9a0:	f8c8 1000 	streq.w	r1, [r8]
 800b9a4:	5162      	str	r2, [r4, r5]
 800b9a6:	604b      	str	r3, [r1, #4]
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	f000 f82f 	bl	800ba0c <__malloc_unlock>
 800b9ae:	f104 000b 	add.w	r0, r4, #11
 800b9b2:	1d23      	adds	r3, r4, #4
 800b9b4:	f020 0007 	bic.w	r0, r0, #7
 800b9b8:	1ac2      	subs	r2, r0, r3
 800b9ba:	bf1c      	itt	ne
 800b9bc:	1a1b      	subne	r3, r3, r0
 800b9be:	50a3      	strne	r3, [r4, r2]
 800b9c0:	e7af      	b.n	800b922 <_malloc_r+0x22>
 800b9c2:	6862      	ldr	r2, [r4, #4]
 800b9c4:	42a3      	cmp	r3, r4
 800b9c6:	bf0c      	ite	eq
 800b9c8:	f8c8 2000 	streq.w	r2, [r8]
 800b9cc:	605a      	strne	r2, [r3, #4]
 800b9ce:	e7eb      	b.n	800b9a8 <_malloc_r+0xa8>
 800b9d0:	4623      	mov	r3, r4
 800b9d2:	6864      	ldr	r4, [r4, #4]
 800b9d4:	e7ae      	b.n	800b934 <_malloc_r+0x34>
 800b9d6:	463c      	mov	r4, r7
 800b9d8:	687f      	ldr	r7, [r7, #4]
 800b9da:	e7b6      	b.n	800b94a <_malloc_r+0x4a>
 800b9dc:	461a      	mov	r2, r3
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	42a3      	cmp	r3, r4
 800b9e2:	d1fb      	bne.n	800b9dc <_malloc_r+0xdc>
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	6053      	str	r3, [r2, #4]
 800b9e8:	e7de      	b.n	800b9a8 <_malloc_r+0xa8>
 800b9ea:	230c      	movs	r3, #12
 800b9ec:	4630      	mov	r0, r6
 800b9ee:	6033      	str	r3, [r6, #0]
 800b9f0:	f000 f80c 	bl	800ba0c <__malloc_unlock>
 800b9f4:	e794      	b.n	800b920 <_malloc_r+0x20>
 800b9f6:	6005      	str	r5, [r0, #0]
 800b9f8:	e7d6      	b.n	800b9a8 <_malloc_r+0xa8>
 800b9fa:	bf00      	nop
 800b9fc:	200041b4 	.word	0x200041b4

0800ba00 <__malloc_lock>:
 800ba00:	4801      	ldr	r0, [pc, #4]	@ (800ba08 <__malloc_lock+0x8>)
 800ba02:	f7ff bedc 	b.w	800b7be <__retarget_lock_acquire_recursive>
 800ba06:	bf00      	nop
 800ba08:	200041ac 	.word	0x200041ac

0800ba0c <__malloc_unlock>:
 800ba0c:	4801      	ldr	r0, [pc, #4]	@ (800ba14 <__malloc_unlock+0x8>)
 800ba0e:	f7ff bed7 	b.w	800b7c0 <__retarget_lock_release_recursive>
 800ba12:	bf00      	nop
 800ba14:	200041ac 	.word	0x200041ac

0800ba18 <__ssputs_r>:
 800ba18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba1c:	461f      	mov	r7, r3
 800ba1e:	688e      	ldr	r6, [r1, #8]
 800ba20:	4682      	mov	sl, r0
 800ba22:	42be      	cmp	r6, r7
 800ba24:	460c      	mov	r4, r1
 800ba26:	4690      	mov	r8, r2
 800ba28:	680b      	ldr	r3, [r1, #0]
 800ba2a:	d82d      	bhi.n	800ba88 <__ssputs_r+0x70>
 800ba2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ba34:	d026      	beq.n	800ba84 <__ssputs_r+0x6c>
 800ba36:	6965      	ldr	r5, [r4, #20]
 800ba38:	6909      	ldr	r1, [r1, #16]
 800ba3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba3e:	eba3 0901 	sub.w	r9, r3, r1
 800ba42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba46:	1c7b      	adds	r3, r7, #1
 800ba48:	444b      	add	r3, r9
 800ba4a:	106d      	asrs	r5, r5, #1
 800ba4c:	429d      	cmp	r5, r3
 800ba4e:	bf38      	it	cc
 800ba50:	461d      	movcc	r5, r3
 800ba52:	0553      	lsls	r3, r2, #21
 800ba54:	d527      	bpl.n	800baa6 <__ssputs_r+0x8e>
 800ba56:	4629      	mov	r1, r5
 800ba58:	f7ff ff52 	bl	800b900 <_malloc_r>
 800ba5c:	4606      	mov	r6, r0
 800ba5e:	b360      	cbz	r0, 800baba <__ssputs_r+0xa2>
 800ba60:	464a      	mov	r2, r9
 800ba62:	6921      	ldr	r1, [r4, #16]
 800ba64:	f7ff fead 	bl	800b7c2 <memcpy>
 800ba68:	89a3      	ldrh	r3, [r4, #12]
 800ba6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ba6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba72:	81a3      	strh	r3, [r4, #12]
 800ba74:	6126      	str	r6, [r4, #16]
 800ba76:	444e      	add	r6, r9
 800ba78:	6026      	str	r6, [r4, #0]
 800ba7a:	463e      	mov	r6, r7
 800ba7c:	6165      	str	r5, [r4, #20]
 800ba7e:	eba5 0509 	sub.w	r5, r5, r9
 800ba82:	60a5      	str	r5, [r4, #8]
 800ba84:	42be      	cmp	r6, r7
 800ba86:	d900      	bls.n	800ba8a <__ssputs_r+0x72>
 800ba88:	463e      	mov	r6, r7
 800ba8a:	4632      	mov	r2, r6
 800ba8c:	4641      	mov	r1, r8
 800ba8e:	6820      	ldr	r0, [r4, #0]
 800ba90:	f000 fb64 	bl	800c15c <memmove>
 800ba94:	2000      	movs	r0, #0
 800ba96:	68a3      	ldr	r3, [r4, #8]
 800ba98:	1b9b      	subs	r3, r3, r6
 800ba9a:	60a3      	str	r3, [r4, #8]
 800ba9c:	6823      	ldr	r3, [r4, #0]
 800ba9e:	4433      	add	r3, r6
 800baa0:	6023      	str	r3, [r4, #0]
 800baa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baa6:	462a      	mov	r2, r5
 800baa8:	f000 fb97 	bl	800c1da <_realloc_r>
 800baac:	4606      	mov	r6, r0
 800baae:	2800      	cmp	r0, #0
 800bab0:	d1e0      	bne.n	800ba74 <__ssputs_r+0x5c>
 800bab2:	4650      	mov	r0, sl
 800bab4:	6921      	ldr	r1, [r4, #16]
 800bab6:	f7ff feb1 	bl	800b81c <_free_r>
 800baba:	230c      	movs	r3, #12
 800babc:	f8ca 3000 	str.w	r3, [sl]
 800bac0:	89a3      	ldrh	r3, [r4, #12]
 800bac2:	f04f 30ff 	mov.w	r0, #4294967295
 800bac6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800baca:	81a3      	strh	r3, [r4, #12]
 800bacc:	e7e9      	b.n	800baa2 <__ssputs_r+0x8a>
	...

0800bad0 <_svfiprintf_r>:
 800bad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad4:	4698      	mov	r8, r3
 800bad6:	898b      	ldrh	r3, [r1, #12]
 800bad8:	4607      	mov	r7, r0
 800bada:	061b      	lsls	r3, r3, #24
 800badc:	460d      	mov	r5, r1
 800bade:	4614      	mov	r4, r2
 800bae0:	b09d      	sub	sp, #116	@ 0x74
 800bae2:	d510      	bpl.n	800bb06 <_svfiprintf_r+0x36>
 800bae4:	690b      	ldr	r3, [r1, #16]
 800bae6:	b973      	cbnz	r3, 800bb06 <_svfiprintf_r+0x36>
 800bae8:	2140      	movs	r1, #64	@ 0x40
 800baea:	f7ff ff09 	bl	800b900 <_malloc_r>
 800baee:	6028      	str	r0, [r5, #0]
 800baf0:	6128      	str	r0, [r5, #16]
 800baf2:	b930      	cbnz	r0, 800bb02 <_svfiprintf_r+0x32>
 800baf4:	230c      	movs	r3, #12
 800baf6:	603b      	str	r3, [r7, #0]
 800baf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bafc:	b01d      	add	sp, #116	@ 0x74
 800bafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb02:	2340      	movs	r3, #64	@ 0x40
 800bb04:	616b      	str	r3, [r5, #20]
 800bb06:	2300      	movs	r3, #0
 800bb08:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb0a:	2320      	movs	r3, #32
 800bb0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb10:	2330      	movs	r3, #48	@ 0x30
 800bb12:	f04f 0901 	mov.w	r9, #1
 800bb16:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb1a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800bcb4 <_svfiprintf_r+0x1e4>
 800bb1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb22:	4623      	mov	r3, r4
 800bb24:	469a      	mov	sl, r3
 800bb26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb2a:	b10a      	cbz	r2, 800bb30 <_svfiprintf_r+0x60>
 800bb2c:	2a25      	cmp	r2, #37	@ 0x25
 800bb2e:	d1f9      	bne.n	800bb24 <_svfiprintf_r+0x54>
 800bb30:	ebba 0b04 	subs.w	fp, sl, r4
 800bb34:	d00b      	beq.n	800bb4e <_svfiprintf_r+0x7e>
 800bb36:	465b      	mov	r3, fp
 800bb38:	4622      	mov	r2, r4
 800bb3a:	4629      	mov	r1, r5
 800bb3c:	4638      	mov	r0, r7
 800bb3e:	f7ff ff6b 	bl	800ba18 <__ssputs_r>
 800bb42:	3001      	adds	r0, #1
 800bb44:	f000 80a7 	beq.w	800bc96 <_svfiprintf_r+0x1c6>
 800bb48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb4a:	445a      	add	r2, fp
 800bb4c:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb4e:	f89a 3000 	ldrb.w	r3, [sl]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	f000 809f 	beq.w	800bc96 <_svfiprintf_r+0x1c6>
 800bb58:	2300      	movs	r3, #0
 800bb5a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb62:	f10a 0a01 	add.w	sl, sl, #1
 800bb66:	9304      	str	r3, [sp, #16]
 800bb68:	9307      	str	r3, [sp, #28]
 800bb6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb6e:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb70:	4654      	mov	r4, sl
 800bb72:	2205      	movs	r2, #5
 800bb74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb78:	484e      	ldr	r0, [pc, #312]	@ (800bcb4 <_svfiprintf_r+0x1e4>)
 800bb7a:	f000 fb19 	bl	800c1b0 <memchr>
 800bb7e:	9a04      	ldr	r2, [sp, #16]
 800bb80:	b9d8      	cbnz	r0, 800bbba <_svfiprintf_r+0xea>
 800bb82:	06d0      	lsls	r0, r2, #27
 800bb84:	bf44      	itt	mi
 800bb86:	2320      	movmi	r3, #32
 800bb88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb8c:	0711      	lsls	r1, r2, #28
 800bb8e:	bf44      	itt	mi
 800bb90:	232b      	movmi	r3, #43	@ 0x2b
 800bb92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb96:	f89a 3000 	ldrb.w	r3, [sl]
 800bb9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb9c:	d015      	beq.n	800bbca <_svfiprintf_r+0xfa>
 800bb9e:	4654      	mov	r4, sl
 800bba0:	2000      	movs	r0, #0
 800bba2:	f04f 0c0a 	mov.w	ip, #10
 800bba6:	9a07      	ldr	r2, [sp, #28]
 800bba8:	4621      	mov	r1, r4
 800bbaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbae:	3b30      	subs	r3, #48	@ 0x30
 800bbb0:	2b09      	cmp	r3, #9
 800bbb2:	d94b      	bls.n	800bc4c <_svfiprintf_r+0x17c>
 800bbb4:	b1b0      	cbz	r0, 800bbe4 <_svfiprintf_r+0x114>
 800bbb6:	9207      	str	r2, [sp, #28]
 800bbb8:	e014      	b.n	800bbe4 <_svfiprintf_r+0x114>
 800bbba:	eba0 0308 	sub.w	r3, r0, r8
 800bbbe:	fa09 f303 	lsl.w	r3, r9, r3
 800bbc2:	4313      	orrs	r3, r2
 800bbc4:	46a2      	mov	sl, r4
 800bbc6:	9304      	str	r3, [sp, #16]
 800bbc8:	e7d2      	b.n	800bb70 <_svfiprintf_r+0xa0>
 800bbca:	9b03      	ldr	r3, [sp, #12]
 800bbcc:	1d19      	adds	r1, r3, #4
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	9103      	str	r1, [sp, #12]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	bfbb      	ittet	lt
 800bbd6:	425b      	neglt	r3, r3
 800bbd8:	f042 0202 	orrlt.w	r2, r2, #2
 800bbdc:	9307      	strge	r3, [sp, #28]
 800bbde:	9307      	strlt	r3, [sp, #28]
 800bbe0:	bfb8      	it	lt
 800bbe2:	9204      	strlt	r2, [sp, #16]
 800bbe4:	7823      	ldrb	r3, [r4, #0]
 800bbe6:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbe8:	d10a      	bne.n	800bc00 <_svfiprintf_r+0x130>
 800bbea:	7863      	ldrb	r3, [r4, #1]
 800bbec:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbee:	d132      	bne.n	800bc56 <_svfiprintf_r+0x186>
 800bbf0:	9b03      	ldr	r3, [sp, #12]
 800bbf2:	3402      	adds	r4, #2
 800bbf4:	1d1a      	adds	r2, r3, #4
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	9203      	str	r2, [sp, #12]
 800bbfa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbfe:	9305      	str	r3, [sp, #20]
 800bc00:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800bcb8 <_svfiprintf_r+0x1e8>
 800bc04:	2203      	movs	r2, #3
 800bc06:	4650      	mov	r0, sl
 800bc08:	7821      	ldrb	r1, [r4, #0]
 800bc0a:	f000 fad1 	bl	800c1b0 <memchr>
 800bc0e:	b138      	cbz	r0, 800bc20 <_svfiprintf_r+0x150>
 800bc10:	2240      	movs	r2, #64	@ 0x40
 800bc12:	9b04      	ldr	r3, [sp, #16]
 800bc14:	eba0 000a 	sub.w	r0, r0, sl
 800bc18:	4082      	lsls	r2, r0
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	3401      	adds	r4, #1
 800bc1e:	9304      	str	r3, [sp, #16]
 800bc20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc24:	2206      	movs	r2, #6
 800bc26:	4825      	ldr	r0, [pc, #148]	@ (800bcbc <_svfiprintf_r+0x1ec>)
 800bc28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc2c:	f000 fac0 	bl	800c1b0 <memchr>
 800bc30:	2800      	cmp	r0, #0
 800bc32:	d036      	beq.n	800bca2 <_svfiprintf_r+0x1d2>
 800bc34:	4b22      	ldr	r3, [pc, #136]	@ (800bcc0 <_svfiprintf_r+0x1f0>)
 800bc36:	bb1b      	cbnz	r3, 800bc80 <_svfiprintf_r+0x1b0>
 800bc38:	9b03      	ldr	r3, [sp, #12]
 800bc3a:	3307      	adds	r3, #7
 800bc3c:	f023 0307 	bic.w	r3, r3, #7
 800bc40:	3308      	adds	r3, #8
 800bc42:	9303      	str	r3, [sp, #12]
 800bc44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc46:	4433      	add	r3, r6
 800bc48:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc4a:	e76a      	b.n	800bb22 <_svfiprintf_r+0x52>
 800bc4c:	460c      	mov	r4, r1
 800bc4e:	2001      	movs	r0, #1
 800bc50:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc54:	e7a8      	b.n	800bba8 <_svfiprintf_r+0xd8>
 800bc56:	2300      	movs	r3, #0
 800bc58:	f04f 0c0a 	mov.w	ip, #10
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	3401      	adds	r4, #1
 800bc60:	9305      	str	r3, [sp, #20]
 800bc62:	4620      	mov	r0, r4
 800bc64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc68:	3a30      	subs	r2, #48	@ 0x30
 800bc6a:	2a09      	cmp	r2, #9
 800bc6c:	d903      	bls.n	800bc76 <_svfiprintf_r+0x1a6>
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d0c6      	beq.n	800bc00 <_svfiprintf_r+0x130>
 800bc72:	9105      	str	r1, [sp, #20]
 800bc74:	e7c4      	b.n	800bc00 <_svfiprintf_r+0x130>
 800bc76:	4604      	mov	r4, r0
 800bc78:	2301      	movs	r3, #1
 800bc7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc7e:	e7f0      	b.n	800bc62 <_svfiprintf_r+0x192>
 800bc80:	ab03      	add	r3, sp, #12
 800bc82:	9300      	str	r3, [sp, #0]
 800bc84:	462a      	mov	r2, r5
 800bc86:	4638      	mov	r0, r7
 800bc88:	4b0e      	ldr	r3, [pc, #56]	@ (800bcc4 <_svfiprintf_r+0x1f4>)
 800bc8a:	a904      	add	r1, sp, #16
 800bc8c:	f3af 8000 	nop.w
 800bc90:	1c42      	adds	r2, r0, #1
 800bc92:	4606      	mov	r6, r0
 800bc94:	d1d6      	bne.n	800bc44 <_svfiprintf_r+0x174>
 800bc96:	89ab      	ldrh	r3, [r5, #12]
 800bc98:	065b      	lsls	r3, r3, #25
 800bc9a:	f53f af2d 	bmi.w	800baf8 <_svfiprintf_r+0x28>
 800bc9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bca0:	e72c      	b.n	800bafc <_svfiprintf_r+0x2c>
 800bca2:	ab03      	add	r3, sp, #12
 800bca4:	9300      	str	r3, [sp, #0]
 800bca6:	462a      	mov	r2, r5
 800bca8:	4638      	mov	r0, r7
 800bcaa:	4b06      	ldr	r3, [pc, #24]	@ (800bcc4 <_svfiprintf_r+0x1f4>)
 800bcac:	a904      	add	r1, sp, #16
 800bcae:	f000 f87d 	bl	800bdac <_printf_i>
 800bcb2:	e7ed      	b.n	800bc90 <_svfiprintf_r+0x1c0>
 800bcb4:	0800e2e1 	.word	0x0800e2e1
 800bcb8:	0800e2e7 	.word	0x0800e2e7
 800bcbc:	0800e2eb 	.word	0x0800e2eb
 800bcc0:	00000000 	.word	0x00000000
 800bcc4:	0800ba19 	.word	0x0800ba19

0800bcc8 <_printf_common>:
 800bcc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bccc:	4616      	mov	r6, r2
 800bcce:	4698      	mov	r8, r3
 800bcd0:	688a      	ldr	r2, [r1, #8]
 800bcd2:	690b      	ldr	r3, [r1, #16]
 800bcd4:	4607      	mov	r7, r0
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	bfb8      	it	lt
 800bcda:	4613      	movlt	r3, r2
 800bcdc:	6033      	str	r3, [r6, #0]
 800bcde:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bce2:	460c      	mov	r4, r1
 800bce4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bce8:	b10a      	cbz	r2, 800bcee <_printf_common+0x26>
 800bcea:	3301      	adds	r3, #1
 800bcec:	6033      	str	r3, [r6, #0]
 800bcee:	6823      	ldr	r3, [r4, #0]
 800bcf0:	0699      	lsls	r1, r3, #26
 800bcf2:	bf42      	ittt	mi
 800bcf4:	6833      	ldrmi	r3, [r6, #0]
 800bcf6:	3302      	addmi	r3, #2
 800bcf8:	6033      	strmi	r3, [r6, #0]
 800bcfa:	6825      	ldr	r5, [r4, #0]
 800bcfc:	f015 0506 	ands.w	r5, r5, #6
 800bd00:	d106      	bne.n	800bd10 <_printf_common+0x48>
 800bd02:	f104 0a19 	add.w	sl, r4, #25
 800bd06:	68e3      	ldr	r3, [r4, #12]
 800bd08:	6832      	ldr	r2, [r6, #0]
 800bd0a:	1a9b      	subs	r3, r3, r2
 800bd0c:	42ab      	cmp	r3, r5
 800bd0e:	dc2b      	bgt.n	800bd68 <_printf_common+0xa0>
 800bd10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bd14:	6822      	ldr	r2, [r4, #0]
 800bd16:	3b00      	subs	r3, #0
 800bd18:	bf18      	it	ne
 800bd1a:	2301      	movne	r3, #1
 800bd1c:	0692      	lsls	r2, r2, #26
 800bd1e:	d430      	bmi.n	800bd82 <_printf_common+0xba>
 800bd20:	4641      	mov	r1, r8
 800bd22:	4638      	mov	r0, r7
 800bd24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bd28:	47c8      	blx	r9
 800bd2a:	3001      	adds	r0, #1
 800bd2c:	d023      	beq.n	800bd76 <_printf_common+0xae>
 800bd2e:	6823      	ldr	r3, [r4, #0]
 800bd30:	6922      	ldr	r2, [r4, #16]
 800bd32:	f003 0306 	and.w	r3, r3, #6
 800bd36:	2b04      	cmp	r3, #4
 800bd38:	bf14      	ite	ne
 800bd3a:	2500      	movne	r5, #0
 800bd3c:	6833      	ldreq	r3, [r6, #0]
 800bd3e:	f04f 0600 	mov.w	r6, #0
 800bd42:	bf08      	it	eq
 800bd44:	68e5      	ldreq	r5, [r4, #12]
 800bd46:	f104 041a 	add.w	r4, r4, #26
 800bd4a:	bf08      	it	eq
 800bd4c:	1aed      	subeq	r5, r5, r3
 800bd4e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bd52:	bf08      	it	eq
 800bd54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	bfc4      	itt	gt
 800bd5c:	1a9b      	subgt	r3, r3, r2
 800bd5e:	18ed      	addgt	r5, r5, r3
 800bd60:	42b5      	cmp	r5, r6
 800bd62:	d11a      	bne.n	800bd9a <_printf_common+0xd2>
 800bd64:	2000      	movs	r0, #0
 800bd66:	e008      	b.n	800bd7a <_printf_common+0xb2>
 800bd68:	2301      	movs	r3, #1
 800bd6a:	4652      	mov	r2, sl
 800bd6c:	4641      	mov	r1, r8
 800bd6e:	4638      	mov	r0, r7
 800bd70:	47c8      	blx	r9
 800bd72:	3001      	adds	r0, #1
 800bd74:	d103      	bne.n	800bd7e <_printf_common+0xb6>
 800bd76:	f04f 30ff 	mov.w	r0, #4294967295
 800bd7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd7e:	3501      	adds	r5, #1
 800bd80:	e7c1      	b.n	800bd06 <_printf_common+0x3e>
 800bd82:	2030      	movs	r0, #48	@ 0x30
 800bd84:	18e1      	adds	r1, r4, r3
 800bd86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bd8a:	1c5a      	adds	r2, r3, #1
 800bd8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bd90:	4422      	add	r2, r4
 800bd92:	3302      	adds	r3, #2
 800bd94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bd98:	e7c2      	b.n	800bd20 <_printf_common+0x58>
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	4622      	mov	r2, r4
 800bd9e:	4641      	mov	r1, r8
 800bda0:	4638      	mov	r0, r7
 800bda2:	47c8      	blx	r9
 800bda4:	3001      	adds	r0, #1
 800bda6:	d0e6      	beq.n	800bd76 <_printf_common+0xae>
 800bda8:	3601      	adds	r6, #1
 800bdaa:	e7d9      	b.n	800bd60 <_printf_common+0x98>

0800bdac <_printf_i>:
 800bdac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bdb0:	7e0f      	ldrb	r7, [r1, #24]
 800bdb2:	4691      	mov	r9, r2
 800bdb4:	2f78      	cmp	r7, #120	@ 0x78
 800bdb6:	4680      	mov	r8, r0
 800bdb8:	460c      	mov	r4, r1
 800bdba:	469a      	mov	sl, r3
 800bdbc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bdbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bdc2:	d807      	bhi.n	800bdd4 <_printf_i+0x28>
 800bdc4:	2f62      	cmp	r7, #98	@ 0x62
 800bdc6:	d80a      	bhi.n	800bdde <_printf_i+0x32>
 800bdc8:	2f00      	cmp	r7, #0
 800bdca:	f000 80d1 	beq.w	800bf70 <_printf_i+0x1c4>
 800bdce:	2f58      	cmp	r7, #88	@ 0x58
 800bdd0:	f000 80b8 	beq.w	800bf44 <_printf_i+0x198>
 800bdd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bdd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bddc:	e03a      	b.n	800be54 <_printf_i+0xa8>
 800bdde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bde2:	2b15      	cmp	r3, #21
 800bde4:	d8f6      	bhi.n	800bdd4 <_printf_i+0x28>
 800bde6:	a101      	add	r1, pc, #4	@ (adr r1, 800bdec <_printf_i+0x40>)
 800bde8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bdec:	0800be45 	.word	0x0800be45
 800bdf0:	0800be59 	.word	0x0800be59
 800bdf4:	0800bdd5 	.word	0x0800bdd5
 800bdf8:	0800bdd5 	.word	0x0800bdd5
 800bdfc:	0800bdd5 	.word	0x0800bdd5
 800be00:	0800bdd5 	.word	0x0800bdd5
 800be04:	0800be59 	.word	0x0800be59
 800be08:	0800bdd5 	.word	0x0800bdd5
 800be0c:	0800bdd5 	.word	0x0800bdd5
 800be10:	0800bdd5 	.word	0x0800bdd5
 800be14:	0800bdd5 	.word	0x0800bdd5
 800be18:	0800bf57 	.word	0x0800bf57
 800be1c:	0800be83 	.word	0x0800be83
 800be20:	0800bf11 	.word	0x0800bf11
 800be24:	0800bdd5 	.word	0x0800bdd5
 800be28:	0800bdd5 	.word	0x0800bdd5
 800be2c:	0800bf79 	.word	0x0800bf79
 800be30:	0800bdd5 	.word	0x0800bdd5
 800be34:	0800be83 	.word	0x0800be83
 800be38:	0800bdd5 	.word	0x0800bdd5
 800be3c:	0800bdd5 	.word	0x0800bdd5
 800be40:	0800bf19 	.word	0x0800bf19
 800be44:	6833      	ldr	r3, [r6, #0]
 800be46:	1d1a      	adds	r2, r3, #4
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	6032      	str	r2, [r6, #0]
 800be4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800be54:	2301      	movs	r3, #1
 800be56:	e09c      	b.n	800bf92 <_printf_i+0x1e6>
 800be58:	6833      	ldr	r3, [r6, #0]
 800be5a:	6820      	ldr	r0, [r4, #0]
 800be5c:	1d19      	adds	r1, r3, #4
 800be5e:	6031      	str	r1, [r6, #0]
 800be60:	0606      	lsls	r6, r0, #24
 800be62:	d501      	bpl.n	800be68 <_printf_i+0xbc>
 800be64:	681d      	ldr	r5, [r3, #0]
 800be66:	e003      	b.n	800be70 <_printf_i+0xc4>
 800be68:	0645      	lsls	r5, r0, #25
 800be6a:	d5fb      	bpl.n	800be64 <_printf_i+0xb8>
 800be6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800be70:	2d00      	cmp	r5, #0
 800be72:	da03      	bge.n	800be7c <_printf_i+0xd0>
 800be74:	232d      	movs	r3, #45	@ 0x2d
 800be76:	426d      	negs	r5, r5
 800be78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be7c:	230a      	movs	r3, #10
 800be7e:	4858      	ldr	r0, [pc, #352]	@ (800bfe0 <_printf_i+0x234>)
 800be80:	e011      	b.n	800bea6 <_printf_i+0xfa>
 800be82:	6821      	ldr	r1, [r4, #0]
 800be84:	6833      	ldr	r3, [r6, #0]
 800be86:	0608      	lsls	r0, r1, #24
 800be88:	f853 5b04 	ldr.w	r5, [r3], #4
 800be8c:	d402      	bmi.n	800be94 <_printf_i+0xe8>
 800be8e:	0649      	lsls	r1, r1, #25
 800be90:	bf48      	it	mi
 800be92:	b2ad      	uxthmi	r5, r5
 800be94:	2f6f      	cmp	r7, #111	@ 0x6f
 800be96:	6033      	str	r3, [r6, #0]
 800be98:	bf14      	ite	ne
 800be9a:	230a      	movne	r3, #10
 800be9c:	2308      	moveq	r3, #8
 800be9e:	4850      	ldr	r0, [pc, #320]	@ (800bfe0 <_printf_i+0x234>)
 800bea0:	2100      	movs	r1, #0
 800bea2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bea6:	6866      	ldr	r6, [r4, #4]
 800bea8:	2e00      	cmp	r6, #0
 800beaa:	60a6      	str	r6, [r4, #8]
 800beac:	db05      	blt.n	800beba <_printf_i+0x10e>
 800beae:	6821      	ldr	r1, [r4, #0]
 800beb0:	432e      	orrs	r6, r5
 800beb2:	f021 0104 	bic.w	r1, r1, #4
 800beb6:	6021      	str	r1, [r4, #0]
 800beb8:	d04b      	beq.n	800bf52 <_printf_i+0x1a6>
 800beba:	4616      	mov	r6, r2
 800bebc:	fbb5 f1f3 	udiv	r1, r5, r3
 800bec0:	fb03 5711 	mls	r7, r3, r1, r5
 800bec4:	5dc7      	ldrb	r7, [r0, r7]
 800bec6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800beca:	462f      	mov	r7, r5
 800becc:	42bb      	cmp	r3, r7
 800bece:	460d      	mov	r5, r1
 800bed0:	d9f4      	bls.n	800bebc <_printf_i+0x110>
 800bed2:	2b08      	cmp	r3, #8
 800bed4:	d10b      	bne.n	800beee <_printf_i+0x142>
 800bed6:	6823      	ldr	r3, [r4, #0]
 800bed8:	07df      	lsls	r7, r3, #31
 800beda:	d508      	bpl.n	800beee <_printf_i+0x142>
 800bedc:	6923      	ldr	r3, [r4, #16]
 800bede:	6861      	ldr	r1, [r4, #4]
 800bee0:	4299      	cmp	r1, r3
 800bee2:	bfde      	ittt	le
 800bee4:	2330      	movle	r3, #48	@ 0x30
 800bee6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800beea:	f106 36ff 	addle.w	r6, r6, #4294967295
 800beee:	1b92      	subs	r2, r2, r6
 800bef0:	6122      	str	r2, [r4, #16]
 800bef2:	464b      	mov	r3, r9
 800bef4:	4621      	mov	r1, r4
 800bef6:	4640      	mov	r0, r8
 800bef8:	f8cd a000 	str.w	sl, [sp]
 800befc:	aa03      	add	r2, sp, #12
 800befe:	f7ff fee3 	bl	800bcc8 <_printf_common>
 800bf02:	3001      	adds	r0, #1
 800bf04:	d14a      	bne.n	800bf9c <_printf_i+0x1f0>
 800bf06:	f04f 30ff 	mov.w	r0, #4294967295
 800bf0a:	b004      	add	sp, #16
 800bf0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf10:	6823      	ldr	r3, [r4, #0]
 800bf12:	f043 0320 	orr.w	r3, r3, #32
 800bf16:	6023      	str	r3, [r4, #0]
 800bf18:	2778      	movs	r7, #120	@ 0x78
 800bf1a:	4832      	ldr	r0, [pc, #200]	@ (800bfe4 <_printf_i+0x238>)
 800bf1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bf20:	6823      	ldr	r3, [r4, #0]
 800bf22:	6831      	ldr	r1, [r6, #0]
 800bf24:	061f      	lsls	r7, r3, #24
 800bf26:	f851 5b04 	ldr.w	r5, [r1], #4
 800bf2a:	d402      	bmi.n	800bf32 <_printf_i+0x186>
 800bf2c:	065f      	lsls	r7, r3, #25
 800bf2e:	bf48      	it	mi
 800bf30:	b2ad      	uxthmi	r5, r5
 800bf32:	6031      	str	r1, [r6, #0]
 800bf34:	07d9      	lsls	r1, r3, #31
 800bf36:	bf44      	itt	mi
 800bf38:	f043 0320 	orrmi.w	r3, r3, #32
 800bf3c:	6023      	strmi	r3, [r4, #0]
 800bf3e:	b11d      	cbz	r5, 800bf48 <_printf_i+0x19c>
 800bf40:	2310      	movs	r3, #16
 800bf42:	e7ad      	b.n	800bea0 <_printf_i+0xf4>
 800bf44:	4826      	ldr	r0, [pc, #152]	@ (800bfe0 <_printf_i+0x234>)
 800bf46:	e7e9      	b.n	800bf1c <_printf_i+0x170>
 800bf48:	6823      	ldr	r3, [r4, #0]
 800bf4a:	f023 0320 	bic.w	r3, r3, #32
 800bf4e:	6023      	str	r3, [r4, #0]
 800bf50:	e7f6      	b.n	800bf40 <_printf_i+0x194>
 800bf52:	4616      	mov	r6, r2
 800bf54:	e7bd      	b.n	800bed2 <_printf_i+0x126>
 800bf56:	6833      	ldr	r3, [r6, #0]
 800bf58:	6825      	ldr	r5, [r4, #0]
 800bf5a:	1d18      	adds	r0, r3, #4
 800bf5c:	6961      	ldr	r1, [r4, #20]
 800bf5e:	6030      	str	r0, [r6, #0]
 800bf60:	062e      	lsls	r6, r5, #24
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	d501      	bpl.n	800bf6a <_printf_i+0x1be>
 800bf66:	6019      	str	r1, [r3, #0]
 800bf68:	e002      	b.n	800bf70 <_printf_i+0x1c4>
 800bf6a:	0668      	lsls	r0, r5, #25
 800bf6c:	d5fb      	bpl.n	800bf66 <_printf_i+0x1ba>
 800bf6e:	8019      	strh	r1, [r3, #0]
 800bf70:	2300      	movs	r3, #0
 800bf72:	4616      	mov	r6, r2
 800bf74:	6123      	str	r3, [r4, #16]
 800bf76:	e7bc      	b.n	800bef2 <_printf_i+0x146>
 800bf78:	6833      	ldr	r3, [r6, #0]
 800bf7a:	2100      	movs	r1, #0
 800bf7c:	1d1a      	adds	r2, r3, #4
 800bf7e:	6032      	str	r2, [r6, #0]
 800bf80:	681e      	ldr	r6, [r3, #0]
 800bf82:	6862      	ldr	r2, [r4, #4]
 800bf84:	4630      	mov	r0, r6
 800bf86:	f000 f913 	bl	800c1b0 <memchr>
 800bf8a:	b108      	cbz	r0, 800bf90 <_printf_i+0x1e4>
 800bf8c:	1b80      	subs	r0, r0, r6
 800bf8e:	6060      	str	r0, [r4, #4]
 800bf90:	6863      	ldr	r3, [r4, #4]
 800bf92:	6123      	str	r3, [r4, #16]
 800bf94:	2300      	movs	r3, #0
 800bf96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf9a:	e7aa      	b.n	800bef2 <_printf_i+0x146>
 800bf9c:	4632      	mov	r2, r6
 800bf9e:	4649      	mov	r1, r9
 800bfa0:	4640      	mov	r0, r8
 800bfa2:	6923      	ldr	r3, [r4, #16]
 800bfa4:	47d0      	blx	sl
 800bfa6:	3001      	adds	r0, #1
 800bfa8:	d0ad      	beq.n	800bf06 <_printf_i+0x15a>
 800bfaa:	6823      	ldr	r3, [r4, #0]
 800bfac:	079b      	lsls	r3, r3, #30
 800bfae:	d413      	bmi.n	800bfd8 <_printf_i+0x22c>
 800bfb0:	68e0      	ldr	r0, [r4, #12]
 800bfb2:	9b03      	ldr	r3, [sp, #12]
 800bfb4:	4298      	cmp	r0, r3
 800bfb6:	bfb8      	it	lt
 800bfb8:	4618      	movlt	r0, r3
 800bfba:	e7a6      	b.n	800bf0a <_printf_i+0x15e>
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	4632      	mov	r2, r6
 800bfc0:	4649      	mov	r1, r9
 800bfc2:	4640      	mov	r0, r8
 800bfc4:	47d0      	blx	sl
 800bfc6:	3001      	adds	r0, #1
 800bfc8:	d09d      	beq.n	800bf06 <_printf_i+0x15a>
 800bfca:	3501      	adds	r5, #1
 800bfcc:	68e3      	ldr	r3, [r4, #12]
 800bfce:	9903      	ldr	r1, [sp, #12]
 800bfd0:	1a5b      	subs	r3, r3, r1
 800bfd2:	42ab      	cmp	r3, r5
 800bfd4:	dcf2      	bgt.n	800bfbc <_printf_i+0x210>
 800bfd6:	e7eb      	b.n	800bfb0 <_printf_i+0x204>
 800bfd8:	2500      	movs	r5, #0
 800bfda:	f104 0619 	add.w	r6, r4, #25
 800bfde:	e7f5      	b.n	800bfcc <_printf_i+0x220>
 800bfe0:	0800e2f2 	.word	0x0800e2f2
 800bfe4:	0800e303 	.word	0x0800e303

0800bfe8 <__sflush_r>:
 800bfe8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bfec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfee:	0716      	lsls	r6, r2, #28
 800bff0:	4605      	mov	r5, r0
 800bff2:	460c      	mov	r4, r1
 800bff4:	d454      	bmi.n	800c0a0 <__sflush_r+0xb8>
 800bff6:	684b      	ldr	r3, [r1, #4]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	dc02      	bgt.n	800c002 <__sflush_r+0x1a>
 800bffc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bffe:	2b00      	cmp	r3, #0
 800c000:	dd48      	ble.n	800c094 <__sflush_r+0xac>
 800c002:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c004:	2e00      	cmp	r6, #0
 800c006:	d045      	beq.n	800c094 <__sflush_r+0xac>
 800c008:	2300      	movs	r3, #0
 800c00a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c00e:	682f      	ldr	r7, [r5, #0]
 800c010:	6a21      	ldr	r1, [r4, #32]
 800c012:	602b      	str	r3, [r5, #0]
 800c014:	d030      	beq.n	800c078 <__sflush_r+0x90>
 800c016:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c018:	89a3      	ldrh	r3, [r4, #12]
 800c01a:	0759      	lsls	r1, r3, #29
 800c01c:	d505      	bpl.n	800c02a <__sflush_r+0x42>
 800c01e:	6863      	ldr	r3, [r4, #4]
 800c020:	1ad2      	subs	r2, r2, r3
 800c022:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c024:	b10b      	cbz	r3, 800c02a <__sflush_r+0x42>
 800c026:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c028:	1ad2      	subs	r2, r2, r3
 800c02a:	2300      	movs	r3, #0
 800c02c:	4628      	mov	r0, r5
 800c02e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c030:	6a21      	ldr	r1, [r4, #32]
 800c032:	47b0      	blx	r6
 800c034:	1c43      	adds	r3, r0, #1
 800c036:	89a3      	ldrh	r3, [r4, #12]
 800c038:	d106      	bne.n	800c048 <__sflush_r+0x60>
 800c03a:	6829      	ldr	r1, [r5, #0]
 800c03c:	291d      	cmp	r1, #29
 800c03e:	d82b      	bhi.n	800c098 <__sflush_r+0xb0>
 800c040:	4a28      	ldr	r2, [pc, #160]	@ (800c0e4 <__sflush_r+0xfc>)
 800c042:	40ca      	lsrs	r2, r1
 800c044:	07d6      	lsls	r6, r2, #31
 800c046:	d527      	bpl.n	800c098 <__sflush_r+0xb0>
 800c048:	2200      	movs	r2, #0
 800c04a:	6062      	str	r2, [r4, #4]
 800c04c:	6922      	ldr	r2, [r4, #16]
 800c04e:	04d9      	lsls	r1, r3, #19
 800c050:	6022      	str	r2, [r4, #0]
 800c052:	d504      	bpl.n	800c05e <__sflush_r+0x76>
 800c054:	1c42      	adds	r2, r0, #1
 800c056:	d101      	bne.n	800c05c <__sflush_r+0x74>
 800c058:	682b      	ldr	r3, [r5, #0]
 800c05a:	b903      	cbnz	r3, 800c05e <__sflush_r+0x76>
 800c05c:	6560      	str	r0, [r4, #84]	@ 0x54
 800c05e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c060:	602f      	str	r7, [r5, #0]
 800c062:	b1b9      	cbz	r1, 800c094 <__sflush_r+0xac>
 800c064:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c068:	4299      	cmp	r1, r3
 800c06a:	d002      	beq.n	800c072 <__sflush_r+0x8a>
 800c06c:	4628      	mov	r0, r5
 800c06e:	f7ff fbd5 	bl	800b81c <_free_r>
 800c072:	2300      	movs	r3, #0
 800c074:	6363      	str	r3, [r4, #52]	@ 0x34
 800c076:	e00d      	b.n	800c094 <__sflush_r+0xac>
 800c078:	2301      	movs	r3, #1
 800c07a:	4628      	mov	r0, r5
 800c07c:	47b0      	blx	r6
 800c07e:	4602      	mov	r2, r0
 800c080:	1c50      	adds	r0, r2, #1
 800c082:	d1c9      	bne.n	800c018 <__sflush_r+0x30>
 800c084:	682b      	ldr	r3, [r5, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d0c6      	beq.n	800c018 <__sflush_r+0x30>
 800c08a:	2b1d      	cmp	r3, #29
 800c08c:	d001      	beq.n	800c092 <__sflush_r+0xaa>
 800c08e:	2b16      	cmp	r3, #22
 800c090:	d11d      	bne.n	800c0ce <__sflush_r+0xe6>
 800c092:	602f      	str	r7, [r5, #0]
 800c094:	2000      	movs	r0, #0
 800c096:	e021      	b.n	800c0dc <__sflush_r+0xf4>
 800c098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c09c:	b21b      	sxth	r3, r3
 800c09e:	e01a      	b.n	800c0d6 <__sflush_r+0xee>
 800c0a0:	690f      	ldr	r7, [r1, #16]
 800c0a2:	2f00      	cmp	r7, #0
 800c0a4:	d0f6      	beq.n	800c094 <__sflush_r+0xac>
 800c0a6:	0793      	lsls	r3, r2, #30
 800c0a8:	bf18      	it	ne
 800c0aa:	2300      	movne	r3, #0
 800c0ac:	680e      	ldr	r6, [r1, #0]
 800c0ae:	bf08      	it	eq
 800c0b0:	694b      	ldreq	r3, [r1, #20]
 800c0b2:	1bf6      	subs	r6, r6, r7
 800c0b4:	600f      	str	r7, [r1, #0]
 800c0b6:	608b      	str	r3, [r1, #8]
 800c0b8:	2e00      	cmp	r6, #0
 800c0ba:	ddeb      	ble.n	800c094 <__sflush_r+0xac>
 800c0bc:	4633      	mov	r3, r6
 800c0be:	463a      	mov	r2, r7
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	6a21      	ldr	r1, [r4, #32]
 800c0c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c0c8:	47e0      	blx	ip
 800c0ca:	2800      	cmp	r0, #0
 800c0cc:	dc07      	bgt.n	800c0de <__sflush_r+0xf6>
 800c0ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0da:	81a3      	strh	r3, [r4, #12]
 800c0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0de:	4407      	add	r7, r0
 800c0e0:	1a36      	subs	r6, r6, r0
 800c0e2:	e7e9      	b.n	800c0b8 <__sflush_r+0xd0>
 800c0e4:	20400001 	.word	0x20400001

0800c0e8 <_fflush_r>:
 800c0e8:	b538      	push	{r3, r4, r5, lr}
 800c0ea:	690b      	ldr	r3, [r1, #16]
 800c0ec:	4605      	mov	r5, r0
 800c0ee:	460c      	mov	r4, r1
 800c0f0:	b913      	cbnz	r3, 800c0f8 <_fflush_r+0x10>
 800c0f2:	2500      	movs	r5, #0
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	bd38      	pop	{r3, r4, r5, pc}
 800c0f8:	b118      	cbz	r0, 800c102 <_fflush_r+0x1a>
 800c0fa:	6a03      	ldr	r3, [r0, #32]
 800c0fc:	b90b      	cbnz	r3, 800c102 <_fflush_r+0x1a>
 800c0fe:	f7ff fa37 	bl	800b570 <__sinit>
 800c102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d0f3      	beq.n	800c0f2 <_fflush_r+0xa>
 800c10a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c10c:	07d0      	lsls	r0, r2, #31
 800c10e:	d404      	bmi.n	800c11a <_fflush_r+0x32>
 800c110:	0599      	lsls	r1, r3, #22
 800c112:	d402      	bmi.n	800c11a <_fflush_r+0x32>
 800c114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c116:	f7ff fb52 	bl	800b7be <__retarget_lock_acquire_recursive>
 800c11a:	4628      	mov	r0, r5
 800c11c:	4621      	mov	r1, r4
 800c11e:	f7ff ff63 	bl	800bfe8 <__sflush_r>
 800c122:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c124:	4605      	mov	r5, r0
 800c126:	07da      	lsls	r2, r3, #31
 800c128:	d4e4      	bmi.n	800c0f4 <_fflush_r+0xc>
 800c12a:	89a3      	ldrh	r3, [r4, #12]
 800c12c:	059b      	lsls	r3, r3, #22
 800c12e:	d4e1      	bmi.n	800c0f4 <_fflush_r+0xc>
 800c130:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c132:	f7ff fb45 	bl	800b7c0 <__retarget_lock_release_recursive>
 800c136:	e7dd      	b.n	800c0f4 <_fflush_r+0xc>

0800c138 <fiprintf>:
 800c138:	b40e      	push	{r1, r2, r3}
 800c13a:	b503      	push	{r0, r1, lr}
 800c13c:	4601      	mov	r1, r0
 800c13e:	ab03      	add	r3, sp, #12
 800c140:	4805      	ldr	r0, [pc, #20]	@ (800c158 <fiprintf+0x20>)
 800c142:	f853 2b04 	ldr.w	r2, [r3], #4
 800c146:	6800      	ldr	r0, [r0, #0]
 800c148:	9301      	str	r3, [sp, #4]
 800c14a:	f000 f89b 	bl	800c284 <_vfiprintf_r>
 800c14e:	b002      	add	sp, #8
 800c150:	f85d eb04 	ldr.w	lr, [sp], #4
 800c154:	b003      	add	sp, #12
 800c156:	4770      	bx	lr
 800c158:	20000034 	.word	0x20000034

0800c15c <memmove>:
 800c15c:	4288      	cmp	r0, r1
 800c15e:	b510      	push	{r4, lr}
 800c160:	eb01 0402 	add.w	r4, r1, r2
 800c164:	d902      	bls.n	800c16c <memmove+0x10>
 800c166:	4284      	cmp	r4, r0
 800c168:	4623      	mov	r3, r4
 800c16a:	d807      	bhi.n	800c17c <memmove+0x20>
 800c16c:	1e43      	subs	r3, r0, #1
 800c16e:	42a1      	cmp	r1, r4
 800c170:	d008      	beq.n	800c184 <memmove+0x28>
 800c172:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c176:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c17a:	e7f8      	b.n	800c16e <memmove+0x12>
 800c17c:	4601      	mov	r1, r0
 800c17e:	4402      	add	r2, r0
 800c180:	428a      	cmp	r2, r1
 800c182:	d100      	bne.n	800c186 <memmove+0x2a>
 800c184:	bd10      	pop	{r4, pc}
 800c186:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c18a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c18e:	e7f7      	b.n	800c180 <memmove+0x24>

0800c190 <_sbrk_r>:
 800c190:	b538      	push	{r3, r4, r5, lr}
 800c192:	2300      	movs	r3, #0
 800c194:	4d05      	ldr	r5, [pc, #20]	@ (800c1ac <_sbrk_r+0x1c>)
 800c196:	4604      	mov	r4, r0
 800c198:	4608      	mov	r0, r1
 800c19a:	602b      	str	r3, [r5, #0]
 800c19c:	f7fc f8fa 	bl	8008394 <_sbrk>
 800c1a0:	1c43      	adds	r3, r0, #1
 800c1a2:	d102      	bne.n	800c1aa <_sbrk_r+0x1a>
 800c1a4:	682b      	ldr	r3, [r5, #0]
 800c1a6:	b103      	cbz	r3, 800c1aa <_sbrk_r+0x1a>
 800c1a8:	6023      	str	r3, [r4, #0]
 800c1aa:	bd38      	pop	{r3, r4, r5, pc}
 800c1ac:	200041a8 	.word	0x200041a8

0800c1b0 <memchr>:
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	b510      	push	{r4, lr}
 800c1b4:	b2c9      	uxtb	r1, r1
 800c1b6:	4402      	add	r2, r0
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	d101      	bne.n	800c1c2 <memchr+0x12>
 800c1be:	2000      	movs	r0, #0
 800c1c0:	e003      	b.n	800c1ca <memchr+0x1a>
 800c1c2:	7804      	ldrb	r4, [r0, #0]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	428c      	cmp	r4, r1
 800c1c8:	d1f6      	bne.n	800c1b8 <memchr+0x8>
 800c1ca:	bd10      	pop	{r4, pc}

0800c1cc <abort>:
 800c1cc:	2006      	movs	r0, #6
 800c1ce:	b508      	push	{r3, lr}
 800c1d0:	f000 fa2c 	bl	800c62c <raise>
 800c1d4:	2001      	movs	r0, #1
 800c1d6:	f7fc f868 	bl	80082aa <_exit>

0800c1da <_realloc_r>:
 800c1da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1de:	4607      	mov	r7, r0
 800c1e0:	4614      	mov	r4, r2
 800c1e2:	460d      	mov	r5, r1
 800c1e4:	b921      	cbnz	r1, 800c1f0 <_realloc_r+0x16>
 800c1e6:	4611      	mov	r1, r2
 800c1e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ec:	f7ff bb88 	b.w	800b900 <_malloc_r>
 800c1f0:	b92a      	cbnz	r2, 800c1fe <_realloc_r+0x24>
 800c1f2:	f7ff fb13 	bl	800b81c <_free_r>
 800c1f6:	4625      	mov	r5, r4
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1fe:	f000 fa31 	bl	800c664 <_malloc_usable_size_r>
 800c202:	4284      	cmp	r4, r0
 800c204:	4606      	mov	r6, r0
 800c206:	d802      	bhi.n	800c20e <_realloc_r+0x34>
 800c208:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c20c:	d8f4      	bhi.n	800c1f8 <_realloc_r+0x1e>
 800c20e:	4621      	mov	r1, r4
 800c210:	4638      	mov	r0, r7
 800c212:	f7ff fb75 	bl	800b900 <_malloc_r>
 800c216:	4680      	mov	r8, r0
 800c218:	b908      	cbnz	r0, 800c21e <_realloc_r+0x44>
 800c21a:	4645      	mov	r5, r8
 800c21c:	e7ec      	b.n	800c1f8 <_realloc_r+0x1e>
 800c21e:	42b4      	cmp	r4, r6
 800c220:	4622      	mov	r2, r4
 800c222:	4629      	mov	r1, r5
 800c224:	bf28      	it	cs
 800c226:	4632      	movcs	r2, r6
 800c228:	f7ff facb 	bl	800b7c2 <memcpy>
 800c22c:	4629      	mov	r1, r5
 800c22e:	4638      	mov	r0, r7
 800c230:	f7ff faf4 	bl	800b81c <_free_r>
 800c234:	e7f1      	b.n	800c21a <_realloc_r+0x40>

0800c236 <__sfputc_r>:
 800c236:	6893      	ldr	r3, [r2, #8]
 800c238:	b410      	push	{r4}
 800c23a:	3b01      	subs	r3, #1
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	6093      	str	r3, [r2, #8]
 800c240:	da07      	bge.n	800c252 <__sfputc_r+0x1c>
 800c242:	6994      	ldr	r4, [r2, #24]
 800c244:	42a3      	cmp	r3, r4
 800c246:	db01      	blt.n	800c24c <__sfputc_r+0x16>
 800c248:	290a      	cmp	r1, #10
 800c24a:	d102      	bne.n	800c252 <__sfputc_r+0x1c>
 800c24c:	bc10      	pop	{r4}
 800c24e:	f000 b931 	b.w	800c4b4 <__swbuf_r>
 800c252:	6813      	ldr	r3, [r2, #0]
 800c254:	1c58      	adds	r0, r3, #1
 800c256:	6010      	str	r0, [r2, #0]
 800c258:	7019      	strb	r1, [r3, #0]
 800c25a:	4608      	mov	r0, r1
 800c25c:	bc10      	pop	{r4}
 800c25e:	4770      	bx	lr

0800c260 <__sfputs_r>:
 800c260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c262:	4606      	mov	r6, r0
 800c264:	460f      	mov	r7, r1
 800c266:	4614      	mov	r4, r2
 800c268:	18d5      	adds	r5, r2, r3
 800c26a:	42ac      	cmp	r4, r5
 800c26c:	d101      	bne.n	800c272 <__sfputs_r+0x12>
 800c26e:	2000      	movs	r0, #0
 800c270:	e007      	b.n	800c282 <__sfputs_r+0x22>
 800c272:	463a      	mov	r2, r7
 800c274:	4630      	mov	r0, r6
 800c276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c27a:	f7ff ffdc 	bl	800c236 <__sfputc_r>
 800c27e:	1c43      	adds	r3, r0, #1
 800c280:	d1f3      	bne.n	800c26a <__sfputs_r+0xa>
 800c282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c284 <_vfiprintf_r>:
 800c284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c288:	460d      	mov	r5, r1
 800c28a:	4614      	mov	r4, r2
 800c28c:	4698      	mov	r8, r3
 800c28e:	4606      	mov	r6, r0
 800c290:	b09d      	sub	sp, #116	@ 0x74
 800c292:	b118      	cbz	r0, 800c29c <_vfiprintf_r+0x18>
 800c294:	6a03      	ldr	r3, [r0, #32]
 800c296:	b90b      	cbnz	r3, 800c29c <_vfiprintf_r+0x18>
 800c298:	f7ff f96a 	bl	800b570 <__sinit>
 800c29c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c29e:	07d9      	lsls	r1, r3, #31
 800c2a0:	d405      	bmi.n	800c2ae <_vfiprintf_r+0x2a>
 800c2a2:	89ab      	ldrh	r3, [r5, #12]
 800c2a4:	059a      	lsls	r2, r3, #22
 800c2a6:	d402      	bmi.n	800c2ae <_vfiprintf_r+0x2a>
 800c2a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2aa:	f7ff fa88 	bl	800b7be <__retarget_lock_acquire_recursive>
 800c2ae:	89ab      	ldrh	r3, [r5, #12]
 800c2b0:	071b      	lsls	r3, r3, #28
 800c2b2:	d501      	bpl.n	800c2b8 <_vfiprintf_r+0x34>
 800c2b4:	692b      	ldr	r3, [r5, #16]
 800c2b6:	b99b      	cbnz	r3, 800c2e0 <_vfiprintf_r+0x5c>
 800c2b8:	4629      	mov	r1, r5
 800c2ba:	4630      	mov	r0, r6
 800c2bc:	f000 f938 	bl	800c530 <__swsetup_r>
 800c2c0:	b170      	cbz	r0, 800c2e0 <_vfiprintf_r+0x5c>
 800c2c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c2c4:	07dc      	lsls	r4, r3, #31
 800c2c6:	d504      	bpl.n	800c2d2 <_vfiprintf_r+0x4e>
 800c2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2cc:	b01d      	add	sp, #116	@ 0x74
 800c2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d2:	89ab      	ldrh	r3, [r5, #12]
 800c2d4:	0598      	lsls	r0, r3, #22
 800c2d6:	d4f7      	bmi.n	800c2c8 <_vfiprintf_r+0x44>
 800c2d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2da:	f7ff fa71 	bl	800b7c0 <__retarget_lock_release_recursive>
 800c2de:	e7f3      	b.n	800c2c8 <_vfiprintf_r+0x44>
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2e4:	2320      	movs	r3, #32
 800c2e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2ea:	2330      	movs	r3, #48	@ 0x30
 800c2ec:	f04f 0901 	mov.w	r9, #1
 800c2f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2f4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c4a0 <_vfiprintf_r+0x21c>
 800c2f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2fc:	4623      	mov	r3, r4
 800c2fe:	469a      	mov	sl, r3
 800c300:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c304:	b10a      	cbz	r2, 800c30a <_vfiprintf_r+0x86>
 800c306:	2a25      	cmp	r2, #37	@ 0x25
 800c308:	d1f9      	bne.n	800c2fe <_vfiprintf_r+0x7a>
 800c30a:	ebba 0b04 	subs.w	fp, sl, r4
 800c30e:	d00b      	beq.n	800c328 <_vfiprintf_r+0xa4>
 800c310:	465b      	mov	r3, fp
 800c312:	4622      	mov	r2, r4
 800c314:	4629      	mov	r1, r5
 800c316:	4630      	mov	r0, r6
 800c318:	f7ff ffa2 	bl	800c260 <__sfputs_r>
 800c31c:	3001      	adds	r0, #1
 800c31e:	f000 80a7 	beq.w	800c470 <_vfiprintf_r+0x1ec>
 800c322:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c324:	445a      	add	r2, fp
 800c326:	9209      	str	r2, [sp, #36]	@ 0x24
 800c328:	f89a 3000 	ldrb.w	r3, [sl]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f000 809f 	beq.w	800c470 <_vfiprintf_r+0x1ec>
 800c332:	2300      	movs	r3, #0
 800c334:	f04f 32ff 	mov.w	r2, #4294967295
 800c338:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c33c:	f10a 0a01 	add.w	sl, sl, #1
 800c340:	9304      	str	r3, [sp, #16]
 800c342:	9307      	str	r3, [sp, #28]
 800c344:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c348:	931a      	str	r3, [sp, #104]	@ 0x68
 800c34a:	4654      	mov	r4, sl
 800c34c:	2205      	movs	r2, #5
 800c34e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c352:	4853      	ldr	r0, [pc, #332]	@ (800c4a0 <_vfiprintf_r+0x21c>)
 800c354:	f7ff ff2c 	bl	800c1b0 <memchr>
 800c358:	9a04      	ldr	r2, [sp, #16]
 800c35a:	b9d8      	cbnz	r0, 800c394 <_vfiprintf_r+0x110>
 800c35c:	06d1      	lsls	r1, r2, #27
 800c35e:	bf44      	itt	mi
 800c360:	2320      	movmi	r3, #32
 800c362:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c366:	0713      	lsls	r3, r2, #28
 800c368:	bf44      	itt	mi
 800c36a:	232b      	movmi	r3, #43	@ 0x2b
 800c36c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c370:	f89a 3000 	ldrb.w	r3, [sl]
 800c374:	2b2a      	cmp	r3, #42	@ 0x2a
 800c376:	d015      	beq.n	800c3a4 <_vfiprintf_r+0x120>
 800c378:	4654      	mov	r4, sl
 800c37a:	2000      	movs	r0, #0
 800c37c:	f04f 0c0a 	mov.w	ip, #10
 800c380:	9a07      	ldr	r2, [sp, #28]
 800c382:	4621      	mov	r1, r4
 800c384:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c388:	3b30      	subs	r3, #48	@ 0x30
 800c38a:	2b09      	cmp	r3, #9
 800c38c:	d94b      	bls.n	800c426 <_vfiprintf_r+0x1a2>
 800c38e:	b1b0      	cbz	r0, 800c3be <_vfiprintf_r+0x13a>
 800c390:	9207      	str	r2, [sp, #28]
 800c392:	e014      	b.n	800c3be <_vfiprintf_r+0x13a>
 800c394:	eba0 0308 	sub.w	r3, r0, r8
 800c398:	fa09 f303 	lsl.w	r3, r9, r3
 800c39c:	4313      	orrs	r3, r2
 800c39e:	46a2      	mov	sl, r4
 800c3a0:	9304      	str	r3, [sp, #16]
 800c3a2:	e7d2      	b.n	800c34a <_vfiprintf_r+0xc6>
 800c3a4:	9b03      	ldr	r3, [sp, #12]
 800c3a6:	1d19      	adds	r1, r3, #4
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	9103      	str	r1, [sp, #12]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	bfbb      	ittet	lt
 800c3b0:	425b      	neglt	r3, r3
 800c3b2:	f042 0202 	orrlt.w	r2, r2, #2
 800c3b6:	9307      	strge	r3, [sp, #28]
 800c3b8:	9307      	strlt	r3, [sp, #28]
 800c3ba:	bfb8      	it	lt
 800c3bc:	9204      	strlt	r2, [sp, #16]
 800c3be:	7823      	ldrb	r3, [r4, #0]
 800c3c0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3c2:	d10a      	bne.n	800c3da <_vfiprintf_r+0x156>
 800c3c4:	7863      	ldrb	r3, [r4, #1]
 800c3c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3c8:	d132      	bne.n	800c430 <_vfiprintf_r+0x1ac>
 800c3ca:	9b03      	ldr	r3, [sp, #12]
 800c3cc:	3402      	adds	r4, #2
 800c3ce:	1d1a      	adds	r2, r3, #4
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	9203      	str	r2, [sp, #12]
 800c3d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3d8:	9305      	str	r3, [sp, #20]
 800c3da:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c4a4 <_vfiprintf_r+0x220>
 800c3de:	2203      	movs	r2, #3
 800c3e0:	4650      	mov	r0, sl
 800c3e2:	7821      	ldrb	r1, [r4, #0]
 800c3e4:	f7ff fee4 	bl	800c1b0 <memchr>
 800c3e8:	b138      	cbz	r0, 800c3fa <_vfiprintf_r+0x176>
 800c3ea:	2240      	movs	r2, #64	@ 0x40
 800c3ec:	9b04      	ldr	r3, [sp, #16]
 800c3ee:	eba0 000a 	sub.w	r0, r0, sl
 800c3f2:	4082      	lsls	r2, r0
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	3401      	adds	r4, #1
 800c3f8:	9304      	str	r3, [sp, #16]
 800c3fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3fe:	2206      	movs	r2, #6
 800c400:	4829      	ldr	r0, [pc, #164]	@ (800c4a8 <_vfiprintf_r+0x224>)
 800c402:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c406:	f7ff fed3 	bl	800c1b0 <memchr>
 800c40a:	2800      	cmp	r0, #0
 800c40c:	d03f      	beq.n	800c48e <_vfiprintf_r+0x20a>
 800c40e:	4b27      	ldr	r3, [pc, #156]	@ (800c4ac <_vfiprintf_r+0x228>)
 800c410:	bb1b      	cbnz	r3, 800c45a <_vfiprintf_r+0x1d6>
 800c412:	9b03      	ldr	r3, [sp, #12]
 800c414:	3307      	adds	r3, #7
 800c416:	f023 0307 	bic.w	r3, r3, #7
 800c41a:	3308      	adds	r3, #8
 800c41c:	9303      	str	r3, [sp, #12]
 800c41e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c420:	443b      	add	r3, r7
 800c422:	9309      	str	r3, [sp, #36]	@ 0x24
 800c424:	e76a      	b.n	800c2fc <_vfiprintf_r+0x78>
 800c426:	460c      	mov	r4, r1
 800c428:	2001      	movs	r0, #1
 800c42a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c42e:	e7a8      	b.n	800c382 <_vfiprintf_r+0xfe>
 800c430:	2300      	movs	r3, #0
 800c432:	f04f 0c0a 	mov.w	ip, #10
 800c436:	4619      	mov	r1, r3
 800c438:	3401      	adds	r4, #1
 800c43a:	9305      	str	r3, [sp, #20]
 800c43c:	4620      	mov	r0, r4
 800c43e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c442:	3a30      	subs	r2, #48	@ 0x30
 800c444:	2a09      	cmp	r2, #9
 800c446:	d903      	bls.n	800c450 <_vfiprintf_r+0x1cc>
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d0c6      	beq.n	800c3da <_vfiprintf_r+0x156>
 800c44c:	9105      	str	r1, [sp, #20]
 800c44e:	e7c4      	b.n	800c3da <_vfiprintf_r+0x156>
 800c450:	4604      	mov	r4, r0
 800c452:	2301      	movs	r3, #1
 800c454:	fb0c 2101 	mla	r1, ip, r1, r2
 800c458:	e7f0      	b.n	800c43c <_vfiprintf_r+0x1b8>
 800c45a:	ab03      	add	r3, sp, #12
 800c45c:	9300      	str	r3, [sp, #0]
 800c45e:	462a      	mov	r2, r5
 800c460:	4630      	mov	r0, r6
 800c462:	4b13      	ldr	r3, [pc, #76]	@ (800c4b0 <_vfiprintf_r+0x22c>)
 800c464:	a904      	add	r1, sp, #16
 800c466:	f3af 8000 	nop.w
 800c46a:	4607      	mov	r7, r0
 800c46c:	1c78      	adds	r0, r7, #1
 800c46e:	d1d6      	bne.n	800c41e <_vfiprintf_r+0x19a>
 800c470:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c472:	07d9      	lsls	r1, r3, #31
 800c474:	d405      	bmi.n	800c482 <_vfiprintf_r+0x1fe>
 800c476:	89ab      	ldrh	r3, [r5, #12]
 800c478:	059a      	lsls	r2, r3, #22
 800c47a:	d402      	bmi.n	800c482 <_vfiprintf_r+0x1fe>
 800c47c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c47e:	f7ff f99f 	bl	800b7c0 <__retarget_lock_release_recursive>
 800c482:	89ab      	ldrh	r3, [r5, #12]
 800c484:	065b      	lsls	r3, r3, #25
 800c486:	f53f af1f 	bmi.w	800c2c8 <_vfiprintf_r+0x44>
 800c48a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c48c:	e71e      	b.n	800c2cc <_vfiprintf_r+0x48>
 800c48e:	ab03      	add	r3, sp, #12
 800c490:	9300      	str	r3, [sp, #0]
 800c492:	462a      	mov	r2, r5
 800c494:	4630      	mov	r0, r6
 800c496:	4b06      	ldr	r3, [pc, #24]	@ (800c4b0 <_vfiprintf_r+0x22c>)
 800c498:	a904      	add	r1, sp, #16
 800c49a:	f7ff fc87 	bl	800bdac <_printf_i>
 800c49e:	e7e4      	b.n	800c46a <_vfiprintf_r+0x1e6>
 800c4a0:	0800e2e1 	.word	0x0800e2e1
 800c4a4:	0800e2e7 	.word	0x0800e2e7
 800c4a8:	0800e2eb 	.word	0x0800e2eb
 800c4ac:	00000000 	.word	0x00000000
 800c4b0:	0800c261 	.word	0x0800c261

0800c4b4 <__swbuf_r>:
 800c4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4b6:	460e      	mov	r6, r1
 800c4b8:	4614      	mov	r4, r2
 800c4ba:	4605      	mov	r5, r0
 800c4bc:	b118      	cbz	r0, 800c4c6 <__swbuf_r+0x12>
 800c4be:	6a03      	ldr	r3, [r0, #32]
 800c4c0:	b90b      	cbnz	r3, 800c4c6 <__swbuf_r+0x12>
 800c4c2:	f7ff f855 	bl	800b570 <__sinit>
 800c4c6:	69a3      	ldr	r3, [r4, #24]
 800c4c8:	60a3      	str	r3, [r4, #8]
 800c4ca:	89a3      	ldrh	r3, [r4, #12]
 800c4cc:	071a      	lsls	r2, r3, #28
 800c4ce:	d501      	bpl.n	800c4d4 <__swbuf_r+0x20>
 800c4d0:	6923      	ldr	r3, [r4, #16]
 800c4d2:	b943      	cbnz	r3, 800c4e6 <__swbuf_r+0x32>
 800c4d4:	4621      	mov	r1, r4
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	f000 f82a 	bl	800c530 <__swsetup_r>
 800c4dc:	b118      	cbz	r0, 800c4e6 <__swbuf_r+0x32>
 800c4de:	f04f 37ff 	mov.w	r7, #4294967295
 800c4e2:	4638      	mov	r0, r7
 800c4e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4e6:	6823      	ldr	r3, [r4, #0]
 800c4e8:	6922      	ldr	r2, [r4, #16]
 800c4ea:	b2f6      	uxtb	r6, r6
 800c4ec:	1a98      	subs	r0, r3, r2
 800c4ee:	6963      	ldr	r3, [r4, #20]
 800c4f0:	4637      	mov	r7, r6
 800c4f2:	4283      	cmp	r3, r0
 800c4f4:	dc05      	bgt.n	800c502 <__swbuf_r+0x4e>
 800c4f6:	4621      	mov	r1, r4
 800c4f8:	4628      	mov	r0, r5
 800c4fa:	f7ff fdf5 	bl	800c0e8 <_fflush_r>
 800c4fe:	2800      	cmp	r0, #0
 800c500:	d1ed      	bne.n	800c4de <__swbuf_r+0x2a>
 800c502:	68a3      	ldr	r3, [r4, #8]
 800c504:	3b01      	subs	r3, #1
 800c506:	60a3      	str	r3, [r4, #8]
 800c508:	6823      	ldr	r3, [r4, #0]
 800c50a:	1c5a      	adds	r2, r3, #1
 800c50c:	6022      	str	r2, [r4, #0]
 800c50e:	701e      	strb	r6, [r3, #0]
 800c510:	6962      	ldr	r2, [r4, #20]
 800c512:	1c43      	adds	r3, r0, #1
 800c514:	429a      	cmp	r2, r3
 800c516:	d004      	beq.n	800c522 <__swbuf_r+0x6e>
 800c518:	89a3      	ldrh	r3, [r4, #12]
 800c51a:	07db      	lsls	r3, r3, #31
 800c51c:	d5e1      	bpl.n	800c4e2 <__swbuf_r+0x2e>
 800c51e:	2e0a      	cmp	r6, #10
 800c520:	d1df      	bne.n	800c4e2 <__swbuf_r+0x2e>
 800c522:	4621      	mov	r1, r4
 800c524:	4628      	mov	r0, r5
 800c526:	f7ff fddf 	bl	800c0e8 <_fflush_r>
 800c52a:	2800      	cmp	r0, #0
 800c52c:	d0d9      	beq.n	800c4e2 <__swbuf_r+0x2e>
 800c52e:	e7d6      	b.n	800c4de <__swbuf_r+0x2a>

0800c530 <__swsetup_r>:
 800c530:	b538      	push	{r3, r4, r5, lr}
 800c532:	4b29      	ldr	r3, [pc, #164]	@ (800c5d8 <__swsetup_r+0xa8>)
 800c534:	4605      	mov	r5, r0
 800c536:	6818      	ldr	r0, [r3, #0]
 800c538:	460c      	mov	r4, r1
 800c53a:	b118      	cbz	r0, 800c544 <__swsetup_r+0x14>
 800c53c:	6a03      	ldr	r3, [r0, #32]
 800c53e:	b90b      	cbnz	r3, 800c544 <__swsetup_r+0x14>
 800c540:	f7ff f816 	bl	800b570 <__sinit>
 800c544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c548:	0719      	lsls	r1, r3, #28
 800c54a:	d422      	bmi.n	800c592 <__swsetup_r+0x62>
 800c54c:	06da      	lsls	r2, r3, #27
 800c54e:	d407      	bmi.n	800c560 <__swsetup_r+0x30>
 800c550:	2209      	movs	r2, #9
 800c552:	602a      	str	r2, [r5, #0]
 800c554:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c558:	f04f 30ff 	mov.w	r0, #4294967295
 800c55c:	81a3      	strh	r3, [r4, #12]
 800c55e:	e033      	b.n	800c5c8 <__swsetup_r+0x98>
 800c560:	0758      	lsls	r0, r3, #29
 800c562:	d512      	bpl.n	800c58a <__swsetup_r+0x5a>
 800c564:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c566:	b141      	cbz	r1, 800c57a <__swsetup_r+0x4a>
 800c568:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c56c:	4299      	cmp	r1, r3
 800c56e:	d002      	beq.n	800c576 <__swsetup_r+0x46>
 800c570:	4628      	mov	r0, r5
 800c572:	f7ff f953 	bl	800b81c <_free_r>
 800c576:	2300      	movs	r3, #0
 800c578:	6363      	str	r3, [r4, #52]	@ 0x34
 800c57a:	89a3      	ldrh	r3, [r4, #12]
 800c57c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c580:	81a3      	strh	r3, [r4, #12]
 800c582:	2300      	movs	r3, #0
 800c584:	6063      	str	r3, [r4, #4]
 800c586:	6923      	ldr	r3, [r4, #16]
 800c588:	6023      	str	r3, [r4, #0]
 800c58a:	89a3      	ldrh	r3, [r4, #12]
 800c58c:	f043 0308 	orr.w	r3, r3, #8
 800c590:	81a3      	strh	r3, [r4, #12]
 800c592:	6923      	ldr	r3, [r4, #16]
 800c594:	b94b      	cbnz	r3, 800c5aa <__swsetup_r+0x7a>
 800c596:	89a3      	ldrh	r3, [r4, #12]
 800c598:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c59c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5a0:	d003      	beq.n	800c5aa <__swsetup_r+0x7a>
 800c5a2:	4621      	mov	r1, r4
 800c5a4:	4628      	mov	r0, r5
 800c5a6:	f000 f88a 	bl	800c6be <__smakebuf_r>
 800c5aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5ae:	f013 0201 	ands.w	r2, r3, #1
 800c5b2:	d00a      	beq.n	800c5ca <__swsetup_r+0x9a>
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	60a2      	str	r2, [r4, #8]
 800c5b8:	6962      	ldr	r2, [r4, #20]
 800c5ba:	4252      	negs	r2, r2
 800c5bc:	61a2      	str	r2, [r4, #24]
 800c5be:	6922      	ldr	r2, [r4, #16]
 800c5c0:	b942      	cbnz	r2, 800c5d4 <__swsetup_r+0xa4>
 800c5c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c5c6:	d1c5      	bne.n	800c554 <__swsetup_r+0x24>
 800c5c8:	bd38      	pop	{r3, r4, r5, pc}
 800c5ca:	0799      	lsls	r1, r3, #30
 800c5cc:	bf58      	it	pl
 800c5ce:	6962      	ldrpl	r2, [r4, #20]
 800c5d0:	60a2      	str	r2, [r4, #8]
 800c5d2:	e7f4      	b.n	800c5be <__swsetup_r+0x8e>
 800c5d4:	2000      	movs	r0, #0
 800c5d6:	e7f7      	b.n	800c5c8 <__swsetup_r+0x98>
 800c5d8:	20000034 	.word	0x20000034

0800c5dc <_raise_r>:
 800c5dc:	291f      	cmp	r1, #31
 800c5de:	b538      	push	{r3, r4, r5, lr}
 800c5e0:	4605      	mov	r5, r0
 800c5e2:	460c      	mov	r4, r1
 800c5e4:	d904      	bls.n	800c5f0 <_raise_r+0x14>
 800c5e6:	2316      	movs	r3, #22
 800c5e8:	6003      	str	r3, [r0, #0]
 800c5ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ee:	bd38      	pop	{r3, r4, r5, pc}
 800c5f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c5f2:	b112      	cbz	r2, 800c5fa <_raise_r+0x1e>
 800c5f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5f8:	b94b      	cbnz	r3, 800c60e <_raise_r+0x32>
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	f000 f830 	bl	800c660 <_getpid_r>
 800c600:	4622      	mov	r2, r4
 800c602:	4601      	mov	r1, r0
 800c604:	4628      	mov	r0, r5
 800c606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c60a:	f000 b817 	b.w	800c63c <_kill_r>
 800c60e:	2b01      	cmp	r3, #1
 800c610:	d00a      	beq.n	800c628 <_raise_r+0x4c>
 800c612:	1c59      	adds	r1, r3, #1
 800c614:	d103      	bne.n	800c61e <_raise_r+0x42>
 800c616:	2316      	movs	r3, #22
 800c618:	6003      	str	r3, [r0, #0]
 800c61a:	2001      	movs	r0, #1
 800c61c:	e7e7      	b.n	800c5ee <_raise_r+0x12>
 800c61e:	2100      	movs	r1, #0
 800c620:	4620      	mov	r0, r4
 800c622:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c626:	4798      	blx	r3
 800c628:	2000      	movs	r0, #0
 800c62a:	e7e0      	b.n	800c5ee <_raise_r+0x12>

0800c62c <raise>:
 800c62c:	4b02      	ldr	r3, [pc, #8]	@ (800c638 <raise+0xc>)
 800c62e:	4601      	mov	r1, r0
 800c630:	6818      	ldr	r0, [r3, #0]
 800c632:	f7ff bfd3 	b.w	800c5dc <_raise_r>
 800c636:	bf00      	nop
 800c638:	20000034 	.word	0x20000034

0800c63c <_kill_r>:
 800c63c:	b538      	push	{r3, r4, r5, lr}
 800c63e:	2300      	movs	r3, #0
 800c640:	4d06      	ldr	r5, [pc, #24]	@ (800c65c <_kill_r+0x20>)
 800c642:	4604      	mov	r4, r0
 800c644:	4608      	mov	r0, r1
 800c646:	4611      	mov	r1, r2
 800c648:	602b      	str	r3, [r5, #0]
 800c64a:	f7fb fe1e 	bl	800828a <_kill>
 800c64e:	1c43      	adds	r3, r0, #1
 800c650:	d102      	bne.n	800c658 <_kill_r+0x1c>
 800c652:	682b      	ldr	r3, [r5, #0]
 800c654:	b103      	cbz	r3, 800c658 <_kill_r+0x1c>
 800c656:	6023      	str	r3, [r4, #0]
 800c658:	bd38      	pop	{r3, r4, r5, pc}
 800c65a:	bf00      	nop
 800c65c:	200041a8 	.word	0x200041a8

0800c660 <_getpid_r>:
 800c660:	f7fb be0c 	b.w	800827c <_getpid>

0800c664 <_malloc_usable_size_r>:
 800c664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c668:	1f18      	subs	r0, r3, #4
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	bfbc      	itt	lt
 800c66e:	580b      	ldrlt	r3, [r1, r0]
 800c670:	18c0      	addlt	r0, r0, r3
 800c672:	4770      	bx	lr

0800c674 <__swhatbuf_r>:
 800c674:	b570      	push	{r4, r5, r6, lr}
 800c676:	460c      	mov	r4, r1
 800c678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c67c:	4615      	mov	r5, r2
 800c67e:	2900      	cmp	r1, #0
 800c680:	461e      	mov	r6, r3
 800c682:	b096      	sub	sp, #88	@ 0x58
 800c684:	da0c      	bge.n	800c6a0 <__swhatbuf_r+0x2c>
 800c686:	89a3      	ldrh	r3, [r4, #12]
 800c688:	2100      	movs	r1, #0
 800c68a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c68e:	bf14      	ite	ne
 800c690:	2340      	movne	r3, #64	@ 0x40
 800c692:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c696:	2000      	movs	r0, #0
 800c698:	6031      	str	r1, [r6, #0]
 800c69a:	602b      	str	r3, [r5, #0]
 800c69c:	b016      	add	sp, #88	@ 0x58
 800c69e:	bd70      	pop	{r4, r5, r6, pc}
 800c6a0:	466a      	mov	r2, sp
 800c6a2:	f000 f849 	bl	800c738 <_fstat_r>
 800c6a6:	2800      	cmp	r0, #0
 800c6a8:	dbed      	blt.n	800c686 <__swhatbuf_r+0x12>
 800c6aa:	9901      	ldr	r1, [sp, #4]
 800c6ac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c6b0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c6b4:	4259      	negs	r1, r3
 800c6b6:	4159      	adcs	r1, r3
 800c6b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6bc:	e7eb      	b.n	800c696 <__swhatbuf_r+0x22>

0800c6be <__smakebuf_r>:
 800c6be:	898b      	ldrh	r3, [r1, #12]
 800c6c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6c2:	079d      	lsls	r5, r3, #30
 800c6c4:	4606      	mov	r6, r0
 800c6c6:	460c      	mov	r4, r1
 800c6c8:	d507      	bpl.n	800c6da <__smakebuf_r+0x1c>
 800c6ca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c6ce:	6023      	str	r3, [r4, #0]
 800c6d0:	6123      	str	r3, [r4, #16]
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	6163      	str	r3, [r4, #20]
 800c6d6:	b003      	add	sp, #12
 800c6d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6da:	466a      	mov	r2, sp
 800c6dc:	ab01      	add	r3, sp, #4
 800c6de:	f7ff ffc9 	bl	800c674 <__swhatbuf_r>
 800c6e2:	9f00      	ldr	r7, [sp, #0]
 800c6e4:	4605      	mov	r5, r0
 800c6e6:	4639      	mov	r1, r7
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	f7ff f909 	bl	800b900 <_malloc_r>
 800c6ee:	b948      	cbnz	r0, 800c704 <__smakebuf_r+0x46>
 800c6f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6f4:	059a      	lsls	r2, r3, #22
 800c6f6:	d4ee      	bmi.n	800c6d6 <__smakebuf_r+0x18>
 800c6f8:	f023 0303 	bic.w	r3, r3, #3
 800c6fc:	f043 0302 	orr.w	r3, r3, #2
 800c700:	81a3      	strh	r3, [r4, #12]
 800c702:	e7e2      	b.n	800c6ca <__smakebuf_r+0xc>
 800c704:	89a3      	ldrh	r3, [r4, #12]
 800c706:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c70a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c70e:	81a3      	strh	r3, [r4, #12]
 800c710:	9b01      	ldr	r3, [sp, #4]
 800c712:	6020      	str	r0, [r4, #0]
 800c714:	b15b      	cbz	r3, 800c72e <__smakebuf_r+0x70>
 800c716:	4630      	mov	r0, r6
 800c718:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c71c:	f000 f81e 	bl	800c75c <_isatty_r>
 800c720:	b128      	cbz	r0, 800c72e <__smakebuf_r+0x70>
 800c722:	89a3      	ldrh	r3, [r4, #12]
 800c724:	f023 0303 	bic.w	r3, r3, #3
 800c728:	f043 0301 	orr.w	r3, r3, #1
 800c72c:	81a3      	strh	r3, [r4, #12]
 800c72e:	89a3      	ldrh	r3, [r4, #12]
 800c730:	431d      	orrs	r5, r3
 800c732:	81a5      	strh	r5, [r4, #12]
 800c734:	e7cf      	b.n	800c6d6 <__smakebuf_r+0x18>
	...

0800c738 <_fstat_r>:
 800c738:	b538      	push	{r3, r4, r5, lr}
 800c73a:	2300      	movs	r3, #0
 800c73c:	4d06      	ldr	r5, [pc, #24]	@ (800c758 <_fstat_r+0x20>)
 800c73e:	4604      	mov	r4, r0
 800c740:	4608      	mov	r0, r1
 800c742:	4611      	mov	r1, r2
 800c744:	602b      	str	r3, [r5, #0]
 800c746:	f7fb fdff 	bl	8008348 <_fstat>
 800c74a:	1c43      	adds	r3, r0, #1
 800c74c:	d102      	bne.n	800c754 <_fstat_r+0x1c>
 800c74e:	682b      	ldr	r3, [r5, #0]
 800c750:	b103      	cbz	r3, 800c754 <_fstat_r+0x1c>
 800c752:	6023      	str	r3, [r4, #0]
 800c754:	bd38      	pop	{r3, r4, r5, pc}
 800c756:	bf00      	nop
 800c758:	200041a8 	.word	0x200041a8

0800c75c <_isatty_r>:
 800c75c:	b538      	push	{r3, r4, r5, lr}
 800c75e:	2300      	movs	r3, #0
 800c760:	4d05      	ldr	r5, [pc, #20]	@ (800c778 <_isatty_r+0x1c>)
 800c762:	4604      	mov	r4, r0
 800c764:	4608      	mov	r0, r1
 800c766:	602b      	str	r3, [r5, #0]
 800c768:	f7fb fdfd 	bl	8008366 <_isatty>
 800c76c:	1c43      	adds	r3, r0, #1
 800c76e:	d102      	bne.n	800c776 <_isatty_r+0x1a>
 800c770:	682b      	ldr	r3, [r5, #0]
 800c772:	b103      	cbz	r3, 800c776 <_isatty_r+0x1a>
 800c774:	6023      	str	r3, [r4, #0]
 800c776:	bd38      	pop	{r3, r4, r5, pc}
 800c778:	200041a8 	.word	0x200041a8

0800c77c <powf>:
 800c77c:	b570      	push	{r4, r5, r6, lr}
 800c77e:	460c      	mov	r4, r1
 800c780:	4606      	mov	r6, r0
 800c782:	f000 fa43 	bl	800cc0c <__ieee754_powf>
 800c786:	4621      	mov	r1, r4
 800c788:	4605      	mov	r5, r0
 800c78a:	4620      	mov	r0, r4
 800c78c:	f7f3 ffc4 	bl	8000718 <__aeabi_fcmpun>
 800c790:	bb68      	cbnz	r0, 800c7ee <powf+0x72>
 800c792:	2100      	movs	r1, #0
 800c794:	4630      	mov	r0, r6
 800c796:	f7f3 ff8d 	bl	80006b4 <__aeabi_fcmpeq>
 800c79a:	b190      	cbz	r0, 800c7c2 <powf+0x46>
 800c79c:	2100      	movs	r1, #0
 800c79e:	4620      	mov	r0, r4
 800c7a0:	f7f3 ff88 	bl	80006b4 <__aeabi_fcmpeq>
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	d133      	bne.n	800c810 <powf+0x94>
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	f000 f8c1 	bl	800c930 <finitef>
 800c7ae:	b1f0      	cbz	r0, 800c7ee <powf+0x72>
 800c7b0:	2100      	movs	r1, #0
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	f7f3 ff88 	bl	80006c8 <__aeabi_fcmplt>
 800c7b8:	b1c8      	cbz	r0, 800c7ee <powf+0x72>
 800c7ba:	f7fe ffd5 	bl	800b768 <__errno>
 800c7be:	2322      	movs	r3, #34	@ 0x22
 800c7c0:	e014      	b.n	800c7ec <powf+0x70>
 800c7c2:	4628      	mov	r0, r5
 800c7c4:	f000 f8b4 	bl	800c930 <finitef>
 800c7c8:	b998      	cbnz	r0, 800c7f2 <powf+0x76>
 800c7ca:	4630      	mov	r0, r6
 800c7cc:	f000 f8b0 	bl	800c930 <finitef>
 800c7d0:	b178      	cbz	r0, 800c7f2 <powf+0x76>
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	f000 f8ac 	bl	800c930 <finitef>
 800c7d8:	b158      	cbz	r0, 800c7f2 <powf+0x76>
 800c7da:	4629      	mov	r1, r5
 800c7dc:	4628      	mov	r0, r5
 800c7de:	f7f3 ff9b 	bl	8000718 <__aeabi_fcmpun>
 800c7e2:	2800      	cmp	r0, #0
 800c7e4:	d0e9      	beq.n	800c7ba <powf+0x3e>
 800c7e6:	f7fe ffbf 	bl	800b768 <__errno>
 800c7ea:	2321      	movs	r3, #33	@ 0x21
 800c7ec:	6003      	str	r3, [r0, #0]
 800c7ee:	4628      	mov	r0, r5
 800c7f0:	bd70      	pop	{r4, r5, r6, pc}
 800c7f2:	2100      	movs	r1, #0
 800c7f4:	4628      	mov	r0, r5
 800c7f6:	f7f3 ff5d 	bl	80006b4 <__aeabi_fcmpeq>
 800c7fa:	2800      	cmp	r0, #0
 800c7fc:	d0f7      	beq.n	800c7ee <powf+0x72>
 800c7fe:	4630      	mov	r0, r6
 800c800:	f000 f896 	bl	800c930 <finitef>
 800c804:	2800      	cmp	r0, #0
 800c806:	d0f2      	beq.n	800c7ee <powf+0x72>
 800c808:	4620      	mov	r0, r4
 800c80a:	f000 f891 	bl	800c930 <finitef>
 800c80e:	e7d3      	b.n	800c7b8 <powf+0x3c>
 800c810:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 800c814:	e7eb      	b.n	800c7ee <powf+0x72>

0800c816 <sqrtf>:
 800c816:	b538      	push	{r3, r4, r5, lr}
 800c818:	4605      	mov	r5, r0
 800c81a:	f000 f891 	bl	800c940 <__ieee754_sqrtf>
 800c81e:	4629      	mov	r1, r5
 800c820:	4604      	mov	r4, r0
 800c822:	4628      	mov	r0, r5
 800c824:	f7f3 ff78 	bl	8000718 <__aeabi_fcmpun>
 800c828:	b968      	cbnz	r0, 800c846 <sqrtf+0x30>
 800c82a:	2100      	movs	r1, #0
 800c82c:	4628      	mov	r0, r5
 800c82e:	f7f3 ff4b 	bl	80006c8 <__aeabi_fcmplt>
 800c832:	b140      	cbz	r0, 800c846 <sqrtf+0x30>
 800c834:	f7fe ff98 	bl	800b768 <__errno>
 800c838:	2321      	movs	r3, #33	@ 0x21
 800c83a:	2100      	movs	r1, #0
 800c83c:	6003      	str	r3, [r0, #0]
 800c83e:	4608      	mov	r0, r1
 800c840:	f7f3 fe58 	bl	80004f4 <__aeabi_fdiv>
 800c844:	4604      	mov	r4, r0
 800c846:	4620      	mov	r0, r4
 800c848:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c84c <cosf>:
 800c84c:	b507      	push	{r0, r1, r2, lr}
 800c84e:	4a1a      	ldr	r2, [pc, #104]	@ (800c8b8 <cosf+0x6c>)
 800c850:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800c854:	4293      	cmp	r3, r2
 800c856:	4601      	mov	r1, r0
 800c858:	d805      	bhi.n	800c866 <cosf+0x1a>
 800c85a:	2100      	movs	r1, #0
 800c85c:	b003      	add	sp, #12
 800c85e:	f85d eb04 	ldr.w	lr, [sp], #4
 800c862:	f000 b8dd 	b.w	800ca20 <__kernel_cosf>
 800c866:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c86a:	d304      	bcc.n	800c876 <cosf+0x2a>
 800c86c:	f7f3 fc84 	bl	8000178 <__aeabi_fsub>
 800c870:	b003      	add	sp, #12
 800c872:	f85d fb04 	ldr.w	pc, [sp], #4
 800c876:	4669      	mov	r1, sp
 800c878:	f000 fd28 	bl	800d2cc <__ieee754_rem_pio2f>
 800c87c:	f000 0203 	and.w	r2, r0, #3
 800c880:	2a01      	cmp	r2, #1
 800c882:	d007      	beq.n	800c894 <cosf+0x48>
 800c884:	2a02      	cmp	r2, #2
 800c886:	d00c      	beq.n	800c8a2 <cosf+0x56>
 800c888:	b982      	cbnz	r2, 800c8ac <cosf+0x60>
 800c88a:	9901      	ldr	r1, [sp, #4]
 800c88c:	9800      	ldr	r0, [sp, #0]
 800c88e:	f000 f8c7 	bl	800ca20 <__kernel_cosf>
 800c892:	e7ed      	b.n	800c870 <cosf+0x24>
 800c894:	9901      	ldr	r1, [sp, #4]
 800c896:	9800      	ldr	r0, [sp, #0]
 800c898:	f000 f942 	bl	800cb20 <__kernel_sinf>
 800c89c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800c8a0:	e7e6      	b.n	800c870 <cosf+0x24>
 800c8a2:	9901      	ldr	r1, [sp, #4]
 800c8a4:	9800      	ldr	r0, [sp, #0]
 800c8a6:	f000 f8bb 	bl	800ca20 <__kernel_cosf>
 800c8aa:	e7f7      	b.n	800c89c <cosf+0x50>
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	9901      	ldr	r1, [sp, #4]
 800c8b0:	9800      	ldr	r0, [sp, #0]
 800c8b2:	f000 f935 	bl	800cb20 <__kernel_sinf>
 800c8b6:	e7db      	b.n	800c870 <cosf+0x24>
 800c8b8:	3f490fd8 	.word	0x3f490fd8

0800c8bc <sinf>:
 800c8bc:	b507      	push	{r0, r1, r2, lr}
 800c8be:	4a1b      	ldr	r2, [pc, #108]	@ (800c92c <sinf+0x70>)
 800c8c0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	4601      	mov	r1, r0
 800c8c8:	d806      	bhi.n	800c8d8 <sinf+0x1c>
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	2100      	movs	r1, #0
 800c8ce:	b003      	add	sp, #12
 800c8d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8d4:	f000 b924 	b.w	800cb20 <__kernel_sinf>
 800c8d8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c8dc:	d304      	bcc.n	800c8e8 <sinf+0x2c>
 800c8de:	f7f3 fc4b 	bl	8000178 <__aeabi_fsub>
 800c8e2:	b003      	add	sp, #12
 800c8e4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c8e8:	4669      	mov	r1, sp
 800c8ea:	f000 fcef 	bl	800d2cc <__ieee754_rem_pio2f>
 800c8ee:	f000 0003 	and.w	r0, r0, #3
 800c8f2:	2801      	cmp	r0, #1
 800c8f4:	d008      	beq.n	800c908 <sinf+0x4c>
 800c8f6:	2802      	cmp	r0, #2
 800c8f8:	d00b      	beq.n	800c912 <sinf+0x56>
 800c8fa:	b990      	cbnz	r0, 800c922 <sinf+0x66>
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	9901      	ldr	r1, [sp, #4]
 800c900:	9800      	ldr	r0, [sp, #0]
 800c902:	f000 f90d 	bl	800cb20 <__kernel_sinf>
 800c906:	e7ec      	b.n	800c8e2 <sinf+0x26>
 800c908:	9901      	ldr	r1, [sp, #4]
 800c90a:	9800      	ldr	r0, [sp, #0]
 800c90c:	f000 f888 	bl	800ca20 <__kernel_cosf>
 800c910:	e7e7      	b.n	800c8e2 <sinf+0x26>
 800c912:	2201      	movs	r2, #1
 800c914:	9901      	ldr	r1, [sp, #4]
 800c916:	9800      	ldr	r0, [sp, #0]
 800c918:	f000 f902 	bl	800cb20 <__kernel_sinf>
 800c91c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800c920:	e7df      	b.n	800c8e2 <sinf+0x26>
 800c922:	9901      	ldr	r1, [sp, #4]
 800c924:	9800      	ldr	r0, [sp, #0]
 800c926:	f000 f87b 	bl	800ca20 <__kernel_cosf>
 800c92a:	e7f7      	b.n	800c91c <sinf+0x60>
 800c92c:	3f490fd8 	.word	0x3f490fd8

0800c930 <finitef>:
 800c930:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800c934:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800c938:	bfac      	ite	ge
 800c93a:	2000      	movge	r0, #0
 800c93c:	2001      	movlt	r0, #1
 800c93e:	4770      	bx	lr

0800c940 <__ieee754_sqrtf>:
 800c940:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800c944:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c94c:	4603      	mov	r3, r0
 800c94e:	4604      	mov	r4, r0
 800c950:	d30a      	bcc.n	800c968 <__ieee754_sqrtf+0x28>
 800c952:	4601      	mov	r1, r0
 800c954:	f7f3 fd1a 	bl	800038c <__aeabi_fmul>
 800c958:	4601      	mov	r1, r0
 800c95a:	4620      	mov	r0, r4
 800c95c:	f7f3 fc0e 	bl	800017c <__addsf3>
 800c960:	4604      	mov	r4, r0
 800c962:	4620      	mov	r0, r4
 800c964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c968:	2a00      	cmp	r2, #0
 800c96a:	d0fa      	beq.n	800c962 <__ieee754_sqrtf+0x22>
 800c96c:	2800      	cmp	r0, #0
 800c96e:	da06      	bge.n	800c97e <__ieee754_sqrtf+0x3e>
 800c970:	4601      	mov	r1, r0
 800c972:	f7f3 fc01 	bl	8000178 <__aeabi_fsub>
 800c976:	4601      	mov	r1, r0
 800c978:	f7f3 fdbc 	bl	80004f4 <__aeabi_fdiv>
 800c97c:	e7f0      	b.n	800c960 <__ieee754_sqrtf+0x20>
 800c97e:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 800c982:	d03c      	beq.n	800c9fe <__ieee754_sqrtf+0xbe>
 800c984:	15c2      	asrs	r2, r0, #23
 800c986:	2400      	movs	r4, #0
 800c988:	2019      	movs	r0, #25
 800c98a:	4626      	mov	r6, r4
 800c98c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800c990:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c994:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 800c998:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c99c:	07d2      	lsls	r2, r2, #31
 800c99e:	bf58      	it	pl
 800c9a0:	005b      	lslpl	r3, r3, #1
 800c9a2:	106d      	asrs	r5, r5, #1
 800c9a4:	005b      	lsls	r3, r3, #1
 800c9a6:	1872      	adds	r2, r6, r1
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	bfcf      	iteee	gt
 800c9ac:	461a      	movgt	r2, r3
 800c9ae:	1856      	addle	r6, r2, r1
 800c9b0:	1864      	addle	r4, r4, r1
 800c9b2:	1a9a      	suble	r2, r3, r2
 800c9b4:	3801      	subs	r0, #1
 800c9b6:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800c9ba:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c9be:	d1f2      	bne.n	800c9a6 <__ieee754_sqrtf+0x66>
 800c9c0:	b1ba      	cbz	r2, 800c9f2 <__ieee754_sqrtf+0xb2>
 800c9c2:	4e15      	ldr	r6, [pc, #84]	@ (800ca18 <__ieee754_sqrtf+0xd8>)
 800c9c4:	4f15      	ldr	r7, [pc, #84]	@ (800ca1c <__ieee754_sqrtf+0xdc>)
 800c9c6:	6830      	ldr	r0, [r6, #0]
 800c9c8:	6839      	ldr	r1, [r7, #0]
 800c9ca:	f7f3 fbd5 	bl	8000178 <__aeabi_fsub>
 800c9ce:	f8d6 8000 	ldr.w	r8, [r6]
 800c9d2:	4601      	mov	r1, r0
 800c9d4:	4640      	mov	r0, r8
 800c9d6:	f7f3 fe81 	bl	80006dc <__aeabi_fcmple>
 800c9da:	b150      	cbz	r0, 800c9f2 <__ieee754_sqrtf+0xb2>
 800c9dc:	6830      	ldr	r0, [r6, #0]
 800c9de:	6839      	ldr	r1, [r7, #0]
 800c9e0:	f7f3 fbcc 	bl	800017c <__addsf3>
 800c9e4:	6836      	ldr	r6, [r6, #0]
 800c9e6:	4601      	mov	r1, r0
 800c9e8:	4630      	mov	r0, r6
 800c9ea:	f7f3 fe6d 	bl	80006c8 <__aeabi_fcmplt>
 800c9ee:	b170      	cbz	r0, 800ca0e <__ieee754_sqrtf+0xce>
 800c9f0:	3402      	adds	r4, #2
 800c9f2:	1064      	asrs	r4, r4, #1
 800c9f4:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800c9f8:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800c9fc:	e7b1      	b.n	800c962 <__ieee754_sqrtf+0x22>
 800c9fe:	005b      	lsls	r3, r3, #1
 800ca00:	0218      	lsls	r0, r3, #8
 800ca02:	460a      	mov	r2, r1
 800ca04:	f101 0101 	add.w	r1, r1, #1
 800ca08:	d5f9      	bpl.n	800c9fe <__ieee754_sqrtf+0xbe>
 800ca0a:	4252      	negs	r2, r2
 800ca0c:	e7bb      	b.n	800c986 <__ieee754_sqrtf+0x46>
 800ca0e:	3401      	adds	r4, #1
 800ca10:	f024 0401 	bic.w	r4, r4, #1
 800ca14:	e7ed      	b.n	800c9f2 <__ieee754_sqrtf+0xb2>
 800ca16:	bf00      	nop
 800ca18:	0800e318 	.word	0x0800e318
 800ca1c:	0800e314 	.word	0x0800e314

0800ca20 <__kernel_cosf>:
 800ca20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca24:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800ca28:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 800ca2c:	4606      	mov	r6, r0
 800ca2e:	4688      	mov	r8, r1
 800ca30:	d203      	bcs.n	800ca3a <__kernel_cosf+0x1a>
 800ca32:	f7f3 fe87 	bl	8000744 <__aeabi_f2iz>
 800ca36:	2800      	cmp	r0, #0
 800ca38:	d05c      	beq.n	800caf4 <__kernel_cosf+0xd4>
 800ca3a:	4631      	mov	r1, r6
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	f7f3 fca5 	bl	800038c <__aeabi_fmul>
 800ca42:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800ca46:	4604      	mov	r4, r0
 800ca48:	f7f3 fca0 	bl	800038c <__aeabi_fmul>
 800ca4c:	492b      	ldr	r1, [pc, #172]	@ (800cafc <__kernel_cosf+0xdc>)
 800ca4e:	4607      	mov	r7, r0
 800ca50:	4620      	mov	r0, r4
 800ca52:	f7f3 fc9b 	bl	800038c <__aeabi_fmul>
 800ca56:	492a      	ldr	r1, [pc, #168]	@ (800cb00 <__kernel_cosf+0xe0>)
 800ca58:	f7f3 fb90 	bl	800017c <__addsf3>
 800ca5c:	4621      	mov	r1, r4
 800ca5e:	f7f3 fc95 	bl	800038c <__aeabi_fmul>
 800ca62:	4928      	ldr	r1, [pc, #160]	@ (800cb04 <__kernel_cosf+0xe4>)
 800ca64:	f7f3 fb88 	bl	8000178 <__aeabi_fsub>
 800ca68:	4621      	mov	r1, r4
 800ca6a:	f7f3 fc8f 	bl	800038c <__aeabi_fmul>
 800ca6e:	4926      	ldr	r1, [pc, #152]	@ (800cb08 <__kernel_cosf+0xe8>)
 800ca70:	f7f3 fb84 	bl	800017c <__addsf3>
 800ca74:	4621      	mov	r1, r4
 800ca76:	f7f3 fc89 	bl	800038c <__aeabi_fmul>
 800ca7a:	4924      	ldr	r1, [pc, #144]	@ (800cb0c <__kernel_cosf+0xec>)
 800ca7c:	f7f3 fb7c 	bl	8000178 <__aeabi_fsub>
 800ca80:	4621      	mov	r1, r4
 800ca82:	f7f3 fc83 	bl	800038c <__aeabi_fmul>
 800ca86:	4922      	ldr	r1, [pc, #136]	@ (800cb10 <__kernel_cosf+0xf0>)
 800ca88:	f7f3 fb78 	bl	800017c <__addsf3>
 800ca8c:	4621      	mov	r1, r4
 800ca8e:	f7f3 fc7d 	bl	800038c <__aeabi_fmul>
 800ca92:	4621      	mov	r1, r4
 800ca94:	f7f3 fc7a 	bl	800038c <__aeabi_fmul>
 800ca98:	4641      	mov	r1, r8
 800ca9a:	4604      	mov	r4, r0
 800ca9c:	4630      	mov	r0, r6
 800ca9e:	f7f3 fc75 	bl	800038c <__aeabi_fmul>
 800caa2:	4601      	mov	r1, r0
 800caa4:	4620      	mov	r0, r4
 800caa6:	f7f3 fb67 	bl	8000178 <__aeabi_fsub>
 800caaa:	4b1a      	ldr	r3, [pc, #104]	@ (800cb14 <__kernel_cosf+0xf4>)
 800caac:	4604      	mov	r4, r0
 800caae:	429d      	cmp	r5, r3
 800cab0:	d80a      	bhi.n	800cac8 <__kernel_cosf+0xa8>
 800cab2:	4601      	mov	r1, r0
 800cab4:	4638      	mov	r0, r7
 800cab6:	f7f3 fb5f 	bl	8000178 <__aeabi_fsub>
 800caba:	4601      	mov	r1, r0
 800cabc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800cac0:	f7f3 fb5a 	bl	8000178 <__aeabi_fsub>
 800cac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cac8:	4b13      	ldr	r3, [pc, #76]	@ (800cb18 <__kernel_cosf+0xf8>)
 800caca:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800cace:	429d      	cmp	r5, r3
 800cad0:	bf8c      	ite	hi
 800cad2:	4d12      	ldrhi	r5, [pc, #72]	@ (800cb1c <__kernel_cosf+0xfc>)
 800cad4:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 800cad8:	4629      	mov	r1, r5
 800cada:	f7f3 fb4d 	bl	8000178 <__aeabi_fsub>
 800cade:	4629      	mov	r1, r5
 800cae0:	4606      	mov	r6, r0
 800cae2:	4638      	mov	r0, r7
 800cae4:	f7f3 fb48 	bl	8000178 <__aeabi_fsub>
 800cae8:	4621      	mov	r1, r4
 800caea:	f7f3 fb45 	bl	8000178 <__aeabi_fsub>
 800caee:	4601      	mov	r1, r0
 800caf0:	4630      	mov	r0, r6
 800caf2:	e7e5      	b.n	800cac0 <__kernel_cosf+0xa0>
 800caf4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800caf8:	e7e4      	b.n	800cac4 <__kernel_cosf+0xa4>
 800cafa:	bf00      	nop
 800cafc:	ad47d74e 	.word	0xad47d74e
 800cb00:	310f74f6 	.word	0x310f74f6
 800cb04:	3493f27c 	.word	0x3493f27c
 800cb08:	37d00d01 	.word	0x37d00d01
 800cb0c:	3ab60b61 	.word	0x3ab60b61
 800cb10:	3d2aaaab 	.word	0x3d2aaaab
 800cb14:	3e999999 	.word	0x3e999999
 800cb18:	3f480000 	.word	0x3f480000
 800cb1c:	3e900000 	.word	0x3e900000

0800cb20 <__kernel_sinf>:
 800cb20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb24:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800cb28:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800cb2c:	4604      	mov	r4, r0
 800cb2e:	460f      	mov	r7, r1
 800cb30:	4691      	mov	r9, r2
 800cb32:	d203      	bcs.n	800cb3c <__kernel_sinf+0x1c>
 800cb34:	f7f3 fe06 	bl	8000744 <__aeabi_f2iz>
 800cb38:	2800      	cmp	r0, #0
 800cb3a:	d035      	beq.n	800cba8 <__kernel_sinf+0x88>
 800cb3c:	4621      	mov	r1, r4
 800cb3e:	4620      	mov	r0, r4
 800cb40:	f7f3 fc24 	bl	800038c <__aeabi_fmul>
 800cb44:	4605      	mov	r5, r0
 800cb46:	4601      	mov	r1, r0
 800cb48:	4620      	mov	r0, r4
 800cb4a:	f7f3 fc1f 	bl	800038c <__aeabi_fmul>
 800cb4e:	4929      	ldr	r1, [pc, #164]	@ (800cbf4 <__kernel_sinf+0xd4>)
 800cb50:	4606      	mov	r6, r0
 800cb52:	4628      	mov	r0, r5
 800cb54:	f7f3 fc1a 	bl	800038c <__aeabi_fmul>
 800cb58:	4927      	ldr	r1, [pc, #156]	@ (800cbf8 <__kernel_sinf+0xd8>)
 800cb5a:	f7f3 fb0d 	bl	8000178 <__aeabi_fsub>
 800cb5e:	4629      	mov	r1, r5
 800cb60:	f7f3 fc14 	bl	800038c <__aeabi_fmul>
 800cb64:	4925      	ldr	r1, [pc, #148]	@ (800cbfc <__kernel_sinf+0xdc>)
 800cb66:	f7f3 fb09 	bl	800017c <__addsf3>
 800cb6a:	4629      	mov	r1, r5
 800cb6c:	f7f3 fc0e 	bl	800038c <__aeabi_fmul>
 800cb70:	4923      	ldr	r1, [pc, #140]	@ (800cc00 <__kernel_sinf+0xe0>)
 800cb72:	f7f3 fb01 	bl	8000178 <__aeabi_fsub>
 800cb76:	4629      	mov	r1, r5
 800cb78:	f7f3 fc08 	bl	800038c <__aeabi_fmul>
 800cb7c:	4921      	ldr	r1, [pc, #132]	@ (800cc04 <__kernel_sinf+0xe4>)
 800cb7e:	f7f3 fafd 	bl	800017c <__addsf3>
 800cb82:	4680      	mov	r8, r0
 800cb84:	f1b9 0f00 	cmp.w	r9, #0
 800cb88:	d111      	bne.n	800cbae <__kernel_sinf+0x8e>
 800cb8a:	4601      	mov	r1, r0
 800cb8c:	4628      	mov	r0, r5
 800cb8e:	f7f3 fbfd 	bl	800038c <__aeabi_fmul>
 800cb92:	491d      	ldr	r1, [pc, #116]	@ (800cc08 <__kernel_sinf+0xe8>)
 800cb94:	f7f3 faf0 	bl	8000178 <__aeabi_fsub>
 800cb98:	4631      	mov	r1, r6
 800cb9a:	f7f3 fbf7 	bl	800038c <__aeabi_fmul>
 800cb9e:	4601      	mov	r1, r0
 800cba0:	4620      	mov	r0, r4
 800cba2:	f7f3 faeb 	bl	800017c <__addsf3>
 800cba6:	4604      	mov	r4, r0
 800cba8:	4620      	mov	r0, r4
 800cbaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbae:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800cbb2:	4638      	mov	r0, r7
 800cbb4:	f7f3 fbea 	bl	800038c <__aeabi_fmul>
 800cbb8:	4641      	mov	r1, r8
 800cbba:	4681      	mov	r9, r0
 800cbbc:	4630      	mov	r0, r6
 800cbbe:	f7f3 fbe5 	bl	800038c <__aeabi_fmul>
 800cbc2:	4601      	mov	r1, r0
 800cbc4:	4648      	mov	r0, r9
 800cbc6:	f7f3 fad7 	bl	8000178 <__aeabi_fsub>
 800cbca:	4629      	mov	r1, r5
 800cbcc:	f7f3 fbde 	bl	800038c <__aeabi_fmul>
 800cbd0:	4639      	mov	r1, r7
 800cbd2:	f7f3 fad1 	bl	8000178 <__aeabi_fsub>
 800cbd6:	490c      	ldr	r1, [pc, #48]	@ (800cc08 <__kernel_sinf+0xe8>)
 800cbd8:	4605      	mov	r5, r0
 800cbda:	4630      	mov	r0, r6
 800cbdc:	f7f3 fbd6 	bl	800038c <__aeabi_fmul>
 800cbe0:	4601      	mov	r1, r0
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	f7f3 faca 	bl	800017c <__addsf3>
 800cbe8:	4601      	mov	r1, r0
 800cbea:	4620      	mov	r0, r4
 800cbec:	f7f3 fac4 	bl	8000178 <__aeabi_fsub>
 800cbf0:	e7d9      	b.n	800cba6 <__kernel_sinf+0x86>
 800cbf2:	bf00      	nop
 800cbf4:	2f2ec9d3 	.word	0x2f2ec9d3
 800cbf8:	32d72f34 	.word	0x32d72f34
 800cbfc:	3638ef1b 	.word	0x3638ef1b
 800cc00:	39500d01 	.word	0x39500d01
 800cc04:	3c088889 	.word	0x3c088889
 800cc08:	3e2aaaab 	.word	0x3e2aaaab

0800cc0c <__ieee754_powf>:
 800cc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc10:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 800cc14:	4681      	mov	r9, r0
 800cc16:	460f      	mov	r7, r1
 800cc18:	4606      	mov	r6, r0
 800cc1a:	460c      	mov	r4, r1
 800cc1c:	b087      	sub	sp, #28
 800cc1e:	d10c      	bne.n	800cc3a <__ieee754_powf+0x2e>
 800cc20:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 800cc24:	0076      	lsls	r6, r6, #1
 800cc26:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800cc2a:	f240 8310 	bls.w	800d24e <__ieee754_powf+0x642>
 800cc2e:	4639      	mov	r1, r7
 800cc30:	4648      	mov	r0, r9
 800cc32:	f7f3 faa3 	bl	800017c <__addsf3>
 800cc36:	4601      	mov	r1, r0
 800cc38:	e043      	b.n	800ccc2 <__ieee754_powf+0xb6>
 800cc3a:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800cc3e:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800cc42:	d802      	bhi.n	800cc4a <__ieee754_powf+0x3e>
 800cc44:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800cc48:	d908      	bls.n	800cc5c <__ieee754_powf+0x50>
 800cc4a:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800cc4e:	d1ee      	bne.n	800cc2e <__ieee754_powf+0x22>
 800cc50:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800cc54:	0064      	lsls	r4, r4, #1
 800cc56:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800cc5a:	e7e6      	b.n	800cc2a <__ieee754_powf+0x1e>
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	da1f      	bge.n	800cca0 <__ieee754_powf+0x94>
 800cc60:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 800cc64:	f080 82f8 	bcs.w	800d258 <__ieee754_powf+0x64c>
 800cc68:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800cc6c:	d32f      	bcc.n	800ccce <__ieee754_powf+0xc2>
 800cc6e:	ea4f 53eb 	mov.w	r3, fp, asr #23
 800cc72:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800cc76:	fa4b f503 	asr.w	r5, fp, r3
 800cc7a:	fa05 f303 	lsl.w	r3, r5, r3
 800cc7e:	455b      	cmp	r3, fp
 800cc80:	d123      	bne.n	800ccca <__ieee754_powf+0xbe>
 800cc82:	f005 0501 	and.w	r5, r5, #1
 800cc86:	f1c5 0502 	rsb	r5, r5, #2
 800cc8a:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800cc8e:	d11f      	bne.n	800ccd0 <__ieee754_powf+0xc4>
 800cc90:	2c00      	cmp	r4, #0
 800cc92:	4649      	mov	r1, r9
 800cc94:	da15      	bge.n	800ccc2 <__ieee754_powf+0xb6>
 800cc96:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800cc9a:	f7f3 fc2b 	bl	80004f4 <__aeabi_fdiv>
 800cc9e:	e7ca      	b.n	800cc36 <__ieee754_powf+0x2a>
 800cca0:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800cca4:	d111      	bne.n	800ccca <__ieee754_powf+0xbe>
 800cca6:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800ccaa:	f000 82d0 	beq.w	800d24e <__ieee754_powf+0x642>
 800ccae:	d904      	bls.n	800ccba <__ieee754_powf+0xae>
 800ccb0:	2c00      	cmp	r4, #0
 800ccb2:	f280 82cf 	bge.w	800d254 <__ieee754_powf+0x648>
 800ccb6:	2100      	movs	r1, #0
 800ccb8:	e003      	b.n	800ccc2 <__ieee754_powf+0xb6>
 800ccba:	2c00      	cmp	r4, #0
 800ccbc:	dafb      	bge.n	800ccb6 <__ieee754_powf+0xaa>
 800ccbe:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800ccc2:	4608      	mov	r0, r1
 800ccc4:	b007      	add	sp, #28
 800ccc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccca:	2500      	movs	r5, #0
 800cccc:	e7dd      	b.n	800cc8a <__ieee754_powf+0x7e>
 800ccce:	2500      	movs	r5, #0
 800ccd0:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800ccd4:	d104      	bne.n	800cce0 <__ieee754_powf+0xd4>
 800ccd6:	4649      	mov	r1, r9
 800ccd8:	4648      	mov	r0, r9
 800ccda:	f7f3 fb57 	bl	800038c <__aeabi_fmul>
 800ccde:	e7aa      	b.n	800cc36 <__ieee754_powf+0x2a>
 800cce0:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800cce4:	f040 82bd 	bne.w	800d262 <__ieee754_powf+0x656>
 800cce8:	2e00      	cmp	r6, #0
 800ccea:	f2c0 82ba 	blt.w	800d262 <__ieee754_powf+0x656>
 800ccee:	4648      	mov	r0, r9
 800ccf0:	b007      	add	sp, #28
 800ccf2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf6:	f7ff be23 	b.w	800c940 <__ieee754_sqrtf>
 800ccfa:	2d01      	cmp	r5, #1
 800ccfc:	d1e1      	bne.n	800ccc2 <__ieee754_powf+0xb6>
 800ccfe:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800cd02:	e798      	b.n	800cc36 <__ieee754_powf+0x2a>
 800cd04:	0ff3      	lsrs	r3, r6, #31
 800cd06:	3b01      	subs	r3, #1
 800cd08:	9303      	str	r3, [sp, #12]
 800cd0a:	432b      	orrs	r3, r5
 800cd0c:	d101      	bne.n	800cd12 <__ieee754_powf+0x106>
 800cd0e:	4649      	mov	r1, r9
 800cd10:	e2c5      	b.n	800d29e <__ieee754_powf+0x692>
 800cd12:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 800cd16:	f240 809b 	bls.w	800ce50 <__ieee754_powf+0x244>
 800cd1a:	4b46      	ldr	r3, [pc, #280]	@ (800ce34 <__ieee754_powf+0x228>)
 800cd1c:	4598      	cmp	r8, r3
 800cd1e:	d807      	bhi.n	800cd30 <__ieee754_powf+0x124>
 800cd20:	2c00      	cmp	r4, #0
 800cd22:	da0a      	bge.n	800cd3a <__ieee754_powf+0x12e>
 800cd24:	2000      	movs	r0, #0
 800cd26:	b007      	add	sp, #28
 800cd28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd2c:	f000 bc9d 	b.w	800d66a <__math_oflowf>
 800cd30:	4b41      	ldr	r3, [pc, #260]	@ (800ce38 <__ieee754_powf+0x22c>)
 800cd32:	4598      	cmp	r8, r3
 800cd34:	d907      	bls.n	800cd46 <__ieee754_powf+0x13a>
 800cd36:	2c00      	cmp	r4, #0
 800cd38:	dcf4      	bgt.n	800cd24 <__ieee754_powf+0x118>
 800cd3a:	2000      	movs	r0, #0
 800cd3c:	b007      	add	sp, #28
 800cd3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd42:	f000 bc8e 	b.w	800d662 <__math_uflowf>
 800cd46:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800cd4a:	f7f3 fa15 	bl	8000178 <__aeabi_fsub>
 800cd4e:	493b      	ldr	r1, [pc, #236]	@ (800ce3c <__ieee754_powf+0x230>)
 800cd50:	4606      	mov	r6, r0
 800cd52:	f7f3 fb1b 	bl	800038c <__aeabi_fmul>
 800cd56:	493a      	ldr	r1, [pc, #232]	@ (800ce40 <__ieee754_powf+0x234>)
 800cd58:	4680      	mov	r8, r0
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	f7f3 fb16 	bl	800038c <__aeabi_fmul>
 800cd60:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800cd64:	4681      	mov	r9, r0
 800cd66:	4630      	mov	r0, r6
 800cd68:	f7f3 fb10 	bl	800038c <__aeabi_fmul>
 800cd6c:	4601      	mov	r1, r0
 800cd6e:	4835      	ldr	r0, [pc, #212]	@ (800ce44 <__ieee754_powf+0x238>)
 800cd70:	f7f3 fa02 	bl	8000178 <__aeabi_fsub>
 800cd74:	4631      	mov	r1, r6
 800cd76:	f7f3 fb09 	bl	800038c <__aeabi_fmul>
 800cd7a:	4601      	mov	r1, r0
 800cd7c:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800cd80:	f7f3 f9fa 	bl	8000178 <__aeabi_fsub>
 800cd84:	4631      	mov	r1, r6
 800cd86:	4682      	mov	sl, r0
 800cd88:	4630      	mov	r0, r6
 800cd8a:	f7f3 faff 	bl	800038c <__aeabi_fmul>
 800cd8e:	4601      	mov	r1, r0
 800cd90:	4650      	mov	r0, sl
 800cd92:	f7f3 fafb 	bl	800038c <__aeabi_fmul>
 800cd96:	492c      	ldr	r1, [pc, #176]	@ (800ce48 <__ieee754_powf+0x23c>)
 800cd98:	f7f3 faf8 	bl	800038c <__aeabi_fmul>
 800cd9c:	4601      	mov	r1, r0
 800cd9e:	4648      	mov	r0, r9
 800cda0:	f7f3 f9ea 	bl	8000178 <__aeabi_fsub>
 800cda4:	4601      	mov	r1, r0
 800cda6:	4606      	mov	r6, r0
 800cda8:	4640      	mov	r0, r8
 800cdaa:	f7f3 f9e7 	bl	800017c <__addsf3>
 800cdae:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800cdb2:	f02b 0b0f 	bic.w	fp, fp, #15
 800cdb6:	4641      	mov	r1, r8
 800cdb8:	4658      	mov	r0, fp
 800cdba:	f7f3 f9dd 	bl	8000178 <__aeabi_fsub>
 800cdbe:	4601      	mov	r1, r0
 800cdc0:	4630      	mov	r0, r6
 800cdc2:	f7f3 f9d9 	bl	8000178 <__aeabi_fsub>
 800cdc6:	9b03      	ldr	r3, [sp, #12]
 800cdc8:	3d01      	subs	r5, #1
 800cdca:	f36f 040b 	bfc	r4, #0, #12
 800cdce:	431d      	orrs	r5, r3
 800cdd0:	4606      	mov	r6, r0
 800cdd2:	4621      	mov	r1, r4
 800cdd4:	4638      	mov	r0, r7
 800cdd6:	bf14      	ite	ne
 800cdd8:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 800cddc:	4d1b      	ldreq	r5, [pc, #108]	@ (800ce4c <__ieee754_powf+0x240>)
 800cdde:	f7f3 f9cb 	bl	8000178 <__aeabi_fsub>
 800cde2:	4659      	mov	r1, fp
 800cde4:	f7f3 fad2 	bl	800038c <__aeabi_fmul>
 800cde8:	4639      	mov	r1, r7
 800cdea:	4680      	mov	r8, r0
 800cdec:	4630      	mov	r0, r6
 800cdee:	f7f3 facd 	bl	800038c <__aeabi_fmul>
 800cdf2:	4601      	mov	r1, r0
 800cdf4:	4640      	mov	r0, r8
 800cdf6:	f7f3 f9c1 	bl	800017c <__addsf3>
 800cdfa:	4621      	mov	r1, r4
 800cdfc:	4606      	mov	r6, r0
 800cdfe:	4658      	mov	r0, fp
 800ce00:	f7f3 fac4 	bl	800038c <__aeabi_fmul>
 800ce04:	4601      	mov	r1, r0
 800ce06:	4607      	mov	r7, r0
 800ce08:	4630      	mov	r0, r6
 800ce0a:	f7f3 f9b7 	bl	800017c <__addsf3>
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	4604      	mov	r4, r0
 800ce12:	4680      	mov	r8, r0
 800ce14:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800ce18:	f340 813f 	ble.w	800d09a <__ieee754_powf+0x48e>
 800ce1c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800ce20:	f240 8128 	bls.w	800d074 <__ieee754_powf+0x468>
 800ce24:	2100      	movs	r1, #0
 800ce26:	4628      	mov	r0, r5
 800ce28:	f7f3 fc4e 	bl	80006c8 <__aeabi_fcmplt>
 800ce2c:	3800      	subs	r0, #0
 800ce2e:	bf18      	it	ne
 800ce30:	2001      	movne	r0, #1
 800ce32:	e778      	b.n	800cd26 <__ieee754_powf+0x11a>
 800ce34:	3f7ffff3 	.word	0x3f7ffff3
 800ce38:	3f800007 	.word	0x3f800007
 800ce3c:	3fb8aa00 	.word	0x3fb8aa00
 800ce40:	36eca570 	.word	0x36eca570
 800ce44:	3eaaaaab 	.word	0x3eaaaaab
 800ce48:	3fb8aa3b 	.word	0x3fb8aa3b
 800ce4c:	bf800000 	.word	0xbf800000
 800ce50:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800ce54:	f040 810a 	bne.w	800d06c <__ieee754_powf+0x460>
 800ce58:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 800ce5c:	f7f3 fa96 	bl	800038c <__aeabi_fmul>
 800ce60:	f06f 0217 	mvn.w	r2, #23
 800ce64:	4682      	mov	sl, r0
 800ce66:	ea4f 53ea 	mov.w	r3, sl, asr #23
 800ce6a:	3b7f      	subs	r3, #127	@ 0x7f
 800ce6c:	441a      	add	r2, r3
 800ce6e:	4b95      	ldr	r3, [pc, #596]	@ (800d0c4 <__ieee754_powf+0x4b8>)
 800ce70:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 800ce74:	459a      	cmp	sl, r3
 800ce76:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 800ce7a:	dd06      	ble.n	800ce8a <__ieee754_powf+0x27e>
 800ce7c:	4b92      	ldr	r3, [pc, #584]	@ (800d0c8 <__ieee754_powf+0x4bc>)
 800ce7e:	459a      	cmp	sl, r3
 800ce80:	f340 80f6 	ble.w	800d070 <__ieee754_powf+0x464>
 800ce84:	3201      	adds	r2, #1
 800ce86:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	9301      	str	r3, [sp, #4]
 800ce8e:	9205      	str	r2, [sp, #20]
 800ce90:	4b8e      	ldr	r3, [pc, #568]	@ (800d0cc <__ieee754_powf+0x4c0>)
 800ce92:	9a01      	ldr	r2, [sp, #4]
 800ce94:	4630      	mov	r0, r6
 800ce96:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 800ce9a:	46b2      	mov	sl, r6
 800ce9c:	4659      	mov	r1, fp
 800ce9e:	f7f3 f96b 	bl	8000178 <__aeabi_fsub>
 800cea2:	4631      	mov	r1, r6
 800cea4:	4681      	mov	r9, r0
 800cea6:	4658      	mov	r0, fp
 800cea8:	f7f3 f968 	bl	800017c <__addsf3>
 800ceac:	4601      	mov	r1, r0
 800ceae:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800ceb2:	f7f3 fb1f 	bl	80004f4 <__aeabi_fdiv>
 800ceb6:	4601      	mov	r1, r0
 800ceb8:	9004      	str	r0, [sp, #16]
 800ceba:	4648      	mov	r0, r9
 800cebc:	f7f3 fa66 	bl	800038c <__aeabi_fmul>
 800cec0:	9002      	str	r0, [sp, #8]
 800cec2:	9b02      	ldr	r3, [sp, #8]
 800cec4:	1076      	asrs	r6, r6, #1
 800cec6:	f36f 030b 	bfc	r3, #0, #12
 800ceca:	4698      	mov	r8, r3
 800cecc:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 800ced0:	9b01      	ldr	r3, [sp, #4]
 800ced2:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 800ced6:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 800ceda:	4631      	mov	r1, r6
 800cedc:	4640      	mov	r0, r8
 800cede:	f7f3 fa55 	bl	800038c <__aeabi_fmul>
 800cee2:	4601      	mov	r1, r0
 800cee4:	4648      	mov	r0, r9
 800cee6:	f7f3 f947 	bl	8000178 <__aeabi_fsub>
 800ceea:	4659      	mov	r1, fp
 800ceec:	4681      	mov	r9, r0
 800ceee:	4630      	mov	r0, r6
 800cef0:	f7f3 f942 	bl	8000178 <__aeabi_fsub>
 800cef4:	4601      	mov	r1, r0
 800cef6:	4650      	mov	r0, sl
 800cef8:	f7f3 f93e 	bl	8000178 <__aeabi_fsub>
 800cefc:	4641      	mov	r1, r8
 800cefe:	f7f3 fa45 	bl	800038c <__aeabi_fmul>
 800cf02:	4601      	mov	r1, r0
 800cf04:	4648      	mov	r0, r9
 800cf06:	f7f3 f937 	bl	8000178 <__aeabi_fsub>
 800cf0a:	9b04      	ldr	r3, [sp, #16]
 800cf0c:	4619      	mov	r1, r3
 800cf0e:	f7f3 fa3d 	bl	800038c <__aeabi_fmul>
 800cf12:	9902      	ldr	r1, [sp, #8]
 800cf14:	4683      	mov	fp, r0
 800cf16:	4608      	mov	r0, r1
 800cf18:	f7f3 fa38 	bl	800038c <__aeabi_fmul>
 800cf1c:	4606      	mov	r6, r0
 800cf1e:	496c      	ldr	r1, [pc, #432]	@ (800d0d0 <__ieee754_powf+0x4c4>)
 800cf20:	f7f3 fa34 	bl	800038c <__aeabi_fmul>
 800cf24:	496b      	ldr	r1, [pc, #428]	@ (800d0d4 <__ieee754_powf+0x4c8>)
 800cf26:	f7f3 f929 	bl	800017c <__addsf3>
 800cf2a:	4631      	mov	r1, r6
 800cf2c:	f7f3 fa2e 	bl	800038c <__aeabi_fmul>
 800cf30:	4969      	ldr	r1, [pc, #420]	@ (800d0d8 <__ieee754_powf+0x4cc>)
 800cf32:	f7f3 f923 	bl	800017c <__addsf3>
 800cf36:	4631      	mov	r1, r6
 800cf38:	f7f3 fa28 	bl	800038c <__aeabi_fmul>
 800cf3c:	4967      	ldr	r1, [pc, #412]	@ (800d0dc <__ieee754_powf+0x4d0>)
 800cf3e:	f7f3 f91d 	bl	800017c <__addsf3>
 800cf42:	4631      	mov	r1, r6
 800cf44:	f7f3 fa22 	bl	800038c <__aeabi_fmul>
 800cf48:	4965      	ldr	r1, [pc, #404]	@ (800d0e0 <__ieee754_powf+0x4d4>)
 800cf4a:	f7f3 f917 	bl	800017c <__addsf3>
 800cf4e:	4631      	mov	r1, r6
 800cf50:	f7f3 fa1c 	bl	800038c <__aeabi_fmul>
 800cf54:	4963      	ldr	r1, [pc, #396]	@ (800d0e4 <__ieee754_powf+0x4d8>)
 800cf56:	f7f3 f911 	bl	800017c <__addsf3>
 800cf5a:	4631      	mov	r1, r6
 800cf5c:	4681      	mov	r9, r0
 800cf5e:	4630      	mov	r0, r6
 800cf60:	f7f3 fa14 	bl	800038c <__aeabi_fmul>
 800cf64:	4601      	mov	r1, r0
 800cf66:	4648      	mov	r0, r9
 800cf68:	f7f3 fa10 	bl	800038c <__aeabi_fmul>
 800cf6c:	4606      	mov	r6, r0
 800cf6e:	4641      	mov	r1, r8
 800cf70:	9802      	ldr	r0, [sp, #8]
 800cf72:	f7f3 f903 	bl	800017c <__addsf3>
 800cf76:	4659      	mov	r1, fp
 800cf78:	f7f3 fa08 	bl	800038c <__aeabi_fmul>
 800cf7c:	4631      	mov	r1, r6
 800cf7e:	f7f3 f8fd 	bl	800017c <__addsf3>
 800cf82:	4641      	mov	r1, r8
 800cf84:	4681      	mov	r9, r0
 800cf86:	4640      	mov	r0, r8
 800cf88:	f7f3 fa00 	bl	800038c <__aeabi_fmul>
 800cf8c:	4956      	ldr	r1, [pc, #344]	@ (800d0e8 <__ieee754_powf+0x4dc>)
 800cf8e:	4682      	mov	sl, r0
 800cf90:	f7f3 f8f4 	bl	800017c <__addsf3>
 800cf94:	4649      	mov	r1, r9
 800cf96:	f7f3 f8f1 	bl	800017c <__addsf3>
 800cf9a:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800cf9e:	f026 060f 	bic.w	r6, r6, #15
 800cfa2:	4631      	mov	r1, r6
 800cfa4:	4640      	mov	r0, r8
 800cfa6:	f7f3 f9f1 	bl	800038c <__aeabi_fmul>
 800cfaa:	494f      	ldr	r1, [pc, #316]	@ (800d0e8 <__ieee754_powf+0x4dc>)
 800cfac:	4680      	mov	r8, r0
 800cfae:	4630      	mov	r0, r6
 800cfb0:	f7f3 f8e2 	bl	8000178 <__aeabi_fsub>
 800cfb4:	4651      	mov	r1, sl
 800cfb6:	f7f3 f8df 	bl	8000178 <__aeabi_fsub>
 800cfba:	4601      	mov	r1, r0
 800cfbc:	4648      	mov	r0, r9
 800cfbe:	f7f3 f8db 	bl	8000178 <__aeabi_fsub>
 800cfc2:	9902      	ldr	r1, [sp, #8]
 800cfc4:	f7f3 f9e2 	bl	800038c <__aeabi_fmul>
 800cfc8:	4631      	mov	r1, r6
 800cfca:	4681      	mov	r9, r0
 800cfcc:	4658      	mov	r0, fp
 800cfce:	f7f3 f9dd 	bl	800038c <__aeabi_fmul>
 800cfd2:	4601      	mov	r1, r0
 800cfd4:	4648      	mov	r0, r9
 800cfd6:	f7f3 f8d1 	bl	800017c <__addsf3>
 800cfda:	4682      	mov	sl, r0
 800cfdc:	4601      	mov	r1, r0
 800cfde:	4640      	mov	r0, r8
 800cfe0:	f7f3 f8cc 	bl	800017c <__addsf3>
 800cfe4:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800cfe8:	f026 060f 	bic.w	r6, r6, #15
 800cfec:	4630      	mov	r0, r6
 800cfee:	493f      	ldr	r1, [pc, #252]	@ (800d0ec <__ieee754_powf+0x4e0>)
 800cff0:	f7f3 f9cc 	bl	800038c <__aeabi_fmul>
 800cff4:	4641      	mov	r1, r8
 800cff6:	4681      	mov	r9, r0
 800cff8:	4630      	mov	r0, r6
 800cffa:	f7f3 f8bd 	bl	8000178 <__aeabi_fsub>
 800cffe:	4601      	mov	r1, r0
 800d000:	4650      	mov	r0, sl
 800d002:	f7f3 f8b9 	bl	8000178 <__aeabi_fsub>
 800d006:	493a      	ldr	r1, [pc, #232]	@ (800d0f0 <__ieee754_powf+0x4e4>)
 800d008:	f7f3 f9c0 	bl	800038c <__aeabi_fmul>
 800d00c:	4939      	ldr	r1, [pc, #228]	@ (800d0f4 <__ieee754_powf+0x4e8>)
 800d00e:	4680      	mov	r8, r0
 800d010:	4630      	mov	r0, r6
 800d012:	f7f3 f9bb 	bl	800038c <__aeabi_fmul>
 800d016:	4601      	mov	r1, r0
 800d018:	4640      	mov	r0, r8
 800d01a:	f7f3 f8af 	bl	800017c <__addsf3>
 800d01e:	4b36      	ldr	r3, [pc, #216]	@ (800d0f8 <__ieee754_powf+0x4ec>)
 800d020:	9a01      	ldr	r2, [sp, #4]
 800d022:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d026:	f7f3 f8a9 	bl	800017c <__addsf3>
 800d02a:	9a05      	ldr	r2, [sp, #20]
 800d02c:	4606      	mov	r6, r0
 800d02e:	4610      	mov	r0, r2
 800d030:	f7f3 f958 	bl	80002e4 <__aeabi_i2f>
 800d034:	4680      	mov	r8, r0
 800d036:	4b31      	ldr	r3, [pc, #196]	@ (800d0fc <__ieee754_powf+0x4f0>)
 800d038:	9a01      	ldr	r2, [sp, #4]
 800d03a:	4631      	mov	r1, r6
 800d03c:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 800d040:	4648      	mov	r0, r9
 800d042:	f7f3 f89b 	bl	800017c <__addsf3>
 800d046:	4651      	mov	r1, sl
 800d048:	f7f3 f898 	bl	800017c <__addsf3>
 800d04c:	4641      	mov	r1, r8
 800d04e:	f7f3 f895 	bl	800017c <__addsf3>
 800d052:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800d056:	f02b 0b0f 	bic.w	fp, fp, #15
 800d05a:	4641      	mov	r1, r8
 800d05c:	4658      	mov	r0, fp
 800d05e:	f7f3 f88b 	bl	8000178 <__aeabi_fsub>
 800d062:	4651      	mov	r1, sl
 800d064:	f7f3 f888 	bl	8000178 <__aeabi_fsub>
 800d068:	4649      	mov	r1, r9
 800d06a:	e6a6      	b.n	800cdba <__ieee754_powf+0x1ae>
 800d06c:	2200      	movs	r2, #0
 800d06e:	e6fa      	b.n	800ce66 <__ieee754_powf+0x25a>
 800d070:	2301      	movs	r3, #1
 800d072:	e70b      	b.n	800ce8c <__ieee754_powf+0x280>
 800d074:	d148      	bne.n	800d108 <__ieee754_powf+0x4fc>
 800d076:	4922      	ldr	r1, [pc, #136]	@ (800d100 <__ieee754_powf+0x4f4>)
 800d078:	4630      	mov	r0, r6
 800d07a:	f7f3 f87f 	bl	800017c <__addsf3>
 800d07e:	4639      	mov	r1, r7
 800d080:	4681      	mov	r9, r0
 800d082:	4620      	mov	r0, r4
 800d084:	f7f3 f878 	bl	8000178 <__aeabi_fsub>
 800d088:	4601      	mov	r1, r0
 800d08a:	4648      	mov	r0, r9
 800d08c:	f7f3 fb3a 	bl	8000704 <__aeabi_fcmpgt>
 800d090:	2800      	cmp	r0, #0
 800d092:	f47f aec7 	bne.w	800ce24 <__ieee754_powf+0x218>
 800d096:	2386      	movs	r3, #134	@ 0x86
 800d098:	e03b      	b.n	800d112 <__ieee754_powf+0x506>
 800d09a:	4a1a      	ldr	r2, [pc, #104]	@ (800d104 <__ieee754_powf+0x4f8>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d907      	bls.n	800d0b0 <__ieee754_powf+0x4a4>
 800d0a0:	2100      	movs	r1, #0
 800d0a2:	4628      	mov	r0, r5
 800d0a4:	f7f3 fb10 	bl	80006c8 <__aeabi_fcmplt>
 800d0a8:	3800      	subs	r0, #0
 800d0aa:	bf18      	it	ne
 800d0ac:	2001      	movne	r0, #1
 800d0ae:	e645      	b.n	800cd3c <__ieee754_powf+0x130>
 800d0b0:	d12a      	bne.n	800d108 <__ieee754_powf+0x4fc>
 800d0b2:	4639      	mov	r1, r7
 800d0b4:	f7f3 f860 	bl	8000178 <__aeabi_fsub>
 800d0b8:	4631      	mov	r1, r6
 800d0ba:	f7f3 fb19 	bl	80006f0 <__aeabi_fcmpge>
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	d0e9      	beq.n	800d096 <__ieee754_powf+0x48a>
 800d0c2:	e7ed      	b.n	800d0a0 <__ieee754_powf+0x494>
 800d0c4:	001cc471 	.word	0x001cc471
 800d0c8:	005db3d6 	.word	0x005db3d6
 800d0cc:	0800e32c 	.word	0x0800e32c
 800d0d0:	3e53f142 	.word	0x3e53f142
 800d0d4:	3e6c3255 	.word	0x3e6c3255
 800d0d8:	3e8ba305 	.word	0x3e8ba305
 800d0dc:	3eaaaaab 	.word	0x3eaaaaab
 800d0e0:	3edb6db7 	.word	0x3edb6db7
 800d0e4:	3f19999a 	.word	0x3f19999a
 800d0e8:	40400000 	.word	0x40400000
 800d0ec:	3f763800 	.word	0x3f763800
 800d0f0:	3f76384f 	.word	0x3f76384f
 800d0f4:	369dc3a0 	.word	0x369dc3a0
 800d0f8:	0800e31c 	.word	0x0800e31c
 800d0fc:	0800e324 	.word	0x0800e324
 800d100:	3338aa3c 	.word	0x3338aa3c
 800d104:	43160000 	.word	0x43160000
 800d108:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800d10c:	f240 809b 	bls.w	800d246 <__ieee754_powf+0x63a>
 800d110:	15db      	asrs	r3, r3, #23
 800d112:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 800d116:	3b7e      	subs	r3, #126	@ 0x7e
 800d118:	411c      	asrs	r4, r3
 800d11a:	4444      	add	r4, r8
 800d11c:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 800d120:	4961      	ldr	r1, [pc, #388]	@ (800d2a8 <__ieee754_powf+0x69c>)
 800d122:	3b7f      	subs	r3, #127	@ 0x7f
 800d124:	4119      	asrs	r1, r3
 800d126:	4021      	ands	r1, r4
 800d128:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800d12c:	f1c3 0317 	rsb	r3, r3, #23
 800d130:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 800d134:	4638      	mov	r0, r7
 800d136:	411c      	asrs	r4, r3
 800d138:	f1b8 0f00 	cmp.w	r8, #0
 800d13c:	bfb8      	it	lt
 800d13e:	4264      	neglt	r4, r4
 800d140:	f7f3 f81a 	bl	8000178 <__aeabi_fsub>
 800d144:	4607      	mov	r7, r0
 800d146:	4631      	mov	r1, r6
 800d148:	4638      	mov	r0, r7
 800d14a:	f7f3 f817 	bl	800017c <__addsf3>
 800d14e:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 800d152:	f028 080f 	bic.w	r8, r8, #15
 800d156:	4640      	mov	r0, r8
 800d158:	4954      	ldr	r1, [pc, #336]	@ (800d2ac <__ieee754_powf+0x6a0>)
 800d15a:	f7f3 f917 	bl	800038c <__aeabi_fmul>
 800d15e:	4639      	mov	r1, r7
 800d160:	4681      	mov	r9, r0
 800d162:	4640      	mov	r0, r8
 800d164:	f7f3 f808 	bl	8000178 <__aeabi_fsub>
 800d168:	4601      	mov	r1, r0
 800d16a:	4630      	mov	r0, r6
 800d16c:	f7f3 f804 	bl	8000178 <__aeabi_fsub>
 800d170:	494f      	ldr	r1, [pc, #316]	@ (800d2b0 <__ieee754_powf+0x6a4>)
 800d172:	f7f3 f90b 	bl	800038c <__aeabi_fmul>
 800d176:	494f      	ldr	r1, [pc, #316]	@ (800d2b4 <__ieee754_powf+0x6a8>)
 800d178:	4606      	mov	r6, r0
 800d17a:	4640      	mov	r0, r8
 800d17c:	f7f3 f906 	bl	800038c <__aeabi_fmul>
 800d180:	4601      	mov	r1, r0
 800d182:	4630      	mov	r0, r6
 800d184:	f7f2 fffa 	bl	800017c <__addsf3>
 800d188:	4607      	mov	r7, r0
 800d18a:	4601      	mov	r1, r0
 800d18c:	4648      	mov	r0, r9
 800d18e:	f7f2 fff5 	bl	800017c <__addsf3>
 800d192:	4649      	mov	r1, r9
 800d194:	4606      	mov	r6, r0
 800d196:	f7f2 ffef 	bl	8000178 <__aeabi_fsub>
 800d19a:	4601      	mov	r1, r0
 800d19c:	4638      	mov	r0, r7
 800d19e:	f7f2 ffeb 	bl	8000178 <__aeabi_fsub>
 800d1a2:	4631      	mov	r1, r6
 800d1a4:	4680      	mov	r8, r0
 800d1a6:	4630      	mov	r0, r6
 800d1a8:	f7f3 f8f0 	bl	800038c <__aeabi_fmul>
 800d1ac:	4607      	mov	r7, r0
 800d1ae:	4942      	ldr	r1, [pc, #264]	@ (800d2b8 <__ieee754_powf+0x6ac>)
 800d1b0:	f7f3 f8ec 	bl	800038c <__aeabi_fmul>
 800d1b4:	4941      	ldr	r1, [pc, #260]	@ (800d2bc <__ieee754_powf+0x6b0>)
 800d1b6:	f7f2 ffdf 	bl	8000178 <__aeabi_fsub>
 800d1ba:	4639      	mov	r1, r7
 800d1bc:	f7f3 f8e6 	bl	800038c <__aeabi_fmul>
 800d1c0:	493f      	ldr	r1, [pc, #252]	@ (800d2c0 <__ieee754_powf+0x6b4>)
 800d1c2:	f7f2 ffdb 	bl	800017c <__addsf3>
 800d1c6:	4639      	mov	r1, r7
 800d1c8:	f7f3 f8e0 	bl	800038c <__aeabi_fmul>
 800d1cc:	493d      	ldr	r1, [pc, #244]	@ (800d2c4 <__ieee754_powf+0x6b8>)
 800d1ce:	f7f2 ffd3 	bl	8000178 <__aeabi_fsub>
 800d1d2:	4639      	mov	r1, r7
 800d1d4:	f7f3 f8da 	bl	800038c <__aeabi_fmul>
 800d1d8:	493b      	ldr	r1, [pc, #236]	@ (800d2c8 <__ieee754_powf+0x6bc>)
 800d1da:	f7f2 ffcf 	bl	800017c <__addsf3>
 800d1de:	4639      	mov	r1, r7
 800d1e0:	f7f3 f8d4 	bl	800038c <__aeabi_fmul>
 800d1e4:	4601      	mov	r1, r0
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	f7f2 ffc6 	bl	8000178 <__aeabi_fsub>
 800d1ec:	4607      	mov	r7, r0
 800d1ee:	4601      	mov	r1, r0
 800d1f0:	4630      	mov	r0, r6
 800d1f2:	f7f3 f8cb 	bl	800038c <__aeabi_fmul>
 800d1f6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800d1fa:	4681      	mov	r9, r0
 800d1fc:	4638      	mov	r0, r7
 800d1fe:	f7f2 ffbb 	bl	8000178 <__aeabi_fsub>
 800d202:	4601      	mov	r1, r0
 800d204:	4648      	mov	r0, r9
 800d206:	f7f3 f975 	bl	80004f4 <__aeabi_fdiv>
 800d20a:	4641      	mov	r1, r8
 800d20c:	4607      	mov	r7, r0
 800d20e:	4630      	mov	r0, r6
 800d210:	f7f3 f8bc 	bl	800038c <__aeabi_fmul>
 800d214:	4641      	mov	r1, r8
 800d216:	f7f2 ffb1 	bl	800017c <__addsf3>
 800d21a:	4601      	mov	r1, r0
 800d21c:	4638      	mov	r0, r7
 800d21e:	f7f2 ffab 	bl	8000178 <__aeabi_fsub>
 800d222:	4631      	mov	r1, r6
 800d224:	f7f2 ffa8 	bl	8000178 <__aeabi_fsub>
 800d228:	4601      	mov	r1, r0
 800d22a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800d22e:	f7f2 ffa3 	bl	8000178 <__aeabi_fsub>
 800d232:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800d236:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d23a:	da06      	bge.n	800d24a <__ieee754_powf+0x63e>
 800d23c:	4621      	mov	r1, r4
 800d23e:	f000 f9af 	bl	800d5a0 <scalbnf>
 800d242:	4629      	mov	r1, r5
 800d244:	e549      	b.n	800ccda <__ieee754_powf+0xce>
 800d246:	2400      	movs	r4, #0
 800d248:	e77d      	b.n	800d146 <__ieee754_powf+0x53a>
 800d24a:	4618      	mov	r0, r3
 800d24c:	e7f9      	b.n	800d242 <__ieee754_powf+0x636>
 800d24e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800d252:	e536      	b.n	800ccc2 <__ieee754_powf+0xb6>
 800d254:	4639      	mov	r1, r7
 800d256:	e534      	b.n	800ccc2 <__ieee754_powf+0xb6>
 800d258:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800d25c:	f43f ad23 	beq.w	800cca6 <__ieee754_powf+0x9a>
 800d260:	2502      	movs	r5, #2
 800d262:	4648      	mov	r0, r9
 800d264:	f000 f998 	bl	800d598 <fabsf>
 800d268:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800d26c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800d270:	46c2      	mov	sl, r8
 800d272:	4601      	mov	r1, r0
 800d274:	d003      	beq.n	800d27e <__ieee754_powf+0x672>
 800d276:	f1b8 0f00 	cmp.w	r8, #0
 800d27a:	f47f ad43 	bne.w	800cd04 <__ieee754_powf+0xf8>
 800d27e:	2c00      	cmp	r4, #0
 800d280:	da04      	bge.n	800d28c <__ieee754_powf+0x680>
 800d282:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800d286:	f7f3 f935 	bl	80004f4 <__aeabi_fdiv>
 800d28a:	4601      	mov	r1, r0
 800d28c:	2e00      	cmp	r6, #0
 800d28e:	f6bf ad18 	bge.w	800ccc2 <__ieee754_powf+0xb6>
 800d292:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800d296:	ea58 0805 	orrs.w	r8, r8, r5
 800d29a:	f47f ad2e 	bne.w	800ccfa <__ieee754_powf+0xee>
 800d29e:	4608      	mov	r0, r1
 800d2a0:	f7f2 ff6a 	bl	8000178 <__aeabi_fsub>
 800d2a4:	4601      	mov	r1, r0
 800d2a6:	e4f8      	b.n	800cc9a <__ieee754_powf+0x8e>
 800d2a8:	ff800000 	.word	0xff800000
 800d2ac:	3f317200 	.word	0x3f317200
 800d2b0:	3f317218 	.word	0x3f317218
 800d2b4:	35bfbe8c 	.word	0x35bfbe8c
 800d2b8:	3331bb4c 	.word	0x3331bb4c
 800d2bc:	35ddea0e 	.word	0x35ddea0e
 800d2c0:	388ab355 	.word	0x388ab355
 800d2c4:	3b360b61 	.word	0x3b360b61
 800d2c8:	3e2aaaab 	.word	0x3e2aaaab

0800d2cc <__ieee754_rem_pio2f>:
 800d2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d0:	4aa4      	ldr	r2, [pc, #656]	@ (800d564 <__ieee754_rem_pio2f+0x298>)
 800d2d2:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800d2d6:	4590      	cmp	r8, r2
 800d2d8:	460c      	mov	r4, r1
 800d2da:	4682      	mov	sl, r0
 800d2dc:	b087      	sub	sp, #28
 800d2de:	d804      	bhi.n	800d2ea <__ieee754_rem_pio2f+0x1e>
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	6008      	str	r0, [r1, #0]
 800d2e4:	604b      	str	r3, [r1, #4]
 800d2e6:	2500      	movs	r5, #0
 800d2e8:	e01d      	b.n	800d326 <__ieee754_rem_pio2f+0x5a>
 800d2ea:	4a9f      	ldr	r2, [pc, #636]	@ (800d568 <__ieee754_rem_pio2f+0x29c>)
 800d2ec:	4590      	cmp	r8, r2
 800d2ee:	d84f      	bhi.n	800d390 <__ieee754_rem_pio2f+0xc4>
 800d2f0:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	499d      	ldr	r1, [pc, #628]	@ (800d56c <__ieee754_rem_pio2f+0x2a0>)
 800d2f8:	4f9d      	ldr	r7, [pc, #628]	@ (800d570 <__ieee754_rem_pio2f+0x2a4>)
 800d2fa:	f025 050f 	bic.w	r5, r5, #15
 800d2fe:	dd24      	ble.n	800d34a <__ieee754_rem_pio2f+0x7e>
 800d300:	f7f2 ff3a 	bl	8000178 <__aeabi_fsub>
 800d304:	42bd      	cmp	r5, r7
 800d306:	4606      	mov	r6, r0
 800d308:	d011      	beq.n	800d32e <__ieee754_rem_pio2f+0x62>
 800d30a:	499a      	ldr	r1, [pc, #616]	@ (800d574 <__ieee754_rem_pio2f+0x2a8>)
 800d30c:	f7f2 ff34 	bl	8000178 <__aeabi_fsub>
 800d310:	4601      	mov	r1, r0
 800d312:	4605      	mov	r5, r0
 800d314:	4630      	mov	r0, r6
 800d316:	f7f2 ff2f 	bl	8000178 <__aeabi_fsub>
 800d31a:	4996      	ldr	r1, [pc, #600]	@ (800d574 <__ieee754_rem_pio2f+0x2a8>)
 800d31c:	f7f2 ff2c 	bl	8000178 <__aeabi_fsub>
 800d320:	6025      	str	r5, [r4, #0]
 800d322:	2501      	movs	r5, #1
 800d324:	6060      	str	r0, [r4, #4]
 800d326:	4628      	mov	r0, r5
 800d328:	b007      	add	sp, #28
 800d32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d32e:	4992      	ldr	r1, [pc, #584]	@ (800d578 <__ieee754_rem_pio2f+0x2ac>)
 800d330:	f7f2 ff22 	bl	8000178 <__aeabi_fsub>
 800d334:	4991      	ldr	r1, [pc, #580]	@ (800d57c <__ieee754_rem_pio2f+0x2b0>)
 800d336:	4606      	mov	r6, r0
 800d338:	f7f2 ff1e 	bl	8000178 <__aeabi_fsub>
 800d33c:	4601      	mov	r1, r0
 800d33e:	4605      	mov	r5, r0
 800d340:	4630      	mov	r0, r6
 800d342:	f7f2 ff19 	bl	8000178 <__aeabi_fsub>
 800d346:	498d      	ldr	r1, [pc, #564]	@ (800d57c <__ieee754_rem_pio2f+0x2b0>)
 800d348:	e7e8      	b.n	800d31c <__ieee754_rem_pio2f+0x50>
 800d34a:	f7f2 ff17 	bl	800017c <__addsf3>
 800d34e:	42bd      	cmp	r5, r7
 800d350:	4606      	mov	r6, r0
 800d352:	d00f      	beq.n	800d374 <__ieee754_rem_pio2f+0xa8>
 800d354:	4987      	ldr	r1, [pc, #540]	@ (800d574 <__ieee754_rem_pio2f+0x2a8>)
 800d356:	f7f2 ff11 	bl	800017c <__addsf3>
 800d35a:	4601      	mov	r1, r0
 800d35c:	4605      	mov	r5, r0
 800d35e:	4630      	mov	r0, r6
 800d360:	f7f2 ff0a 	bl	8000178 <__aeabi_fsub>
 800d364:	4983      	ldr	r1, [pc, #524]	@ (800d574 <__ieee754_rem_pio2f+0x2a8>)
 800d366:	f7f2 ff09 	bl	800017c <__addsf3>
 800d36a:	6025      	str	r5, [r4, #0]
 800d36c:	6060      	str	r0, [r4, #4]
 800d36e:	f04f 35ff 	mov.w	r5, #4294967295
 800d372:	e7d8      	b.n	800d326 <__ieee754_rem_pio2f+0x5a>
 800d374:	4980      	ldr	r1, [pc, #512]	@ (800d578 <__ieee754_rem_pio2f+0x2ac>)
 800d376:	f7f2 ff01 	bl	800017c <__addsf3>
 800d37a:	4980      	ldr	r1, [pc, #512]	@ (800d57c <__ieee754_rem_pio2f+0x2b0>)
 800d37c:	4606      	mov	r6, r0
 800d37e:	f7f2 fefd 	bl	800017c <__addsf3>
 800d382:	4601      	mov	r1, r0
 800d384:	4605      	mov	r5, r0
 800d386:	4630      	mov	r0, r6
 800d388:	f7f2 fef6 	bl	8000178 <__aeabi_fsub>
 800d38c:	497b      	ldr	r1, [pc, #492]	@ (800d57c <__ieee754_rem_pio2f+0x2b0>)
 800d38e:	e7ea      	b.n	800d366 <__ieee754_rem_pio2f+0x9a>
 800d390:	4a7b      	ldr	r2, [pc, #492]	@ (800d580 <__ieee754_rem_pio2f+0x2b4>)
 800d392:	4590      	cmp	r8, r2
 800d394:	f200 8095 	bhi.w	800d4c2 <__ieee754_rem_pio2f+0x1f6>
 800d398:	f000 f8fe 	bl	800d598 <fabsf>
 800d39c:	4979      	ldr	r1, [pc, #484]	@ (800d584 <__ieee754_rem_pio2f+0x2b8>)
 800d39e:	4606      	mov	r6, r0
 800d3a0:	f7f2 fff4 	bl	800038c <__aeabi_fmul>
 800d3a4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800d3a8:	f7f2 fee8 	bl	800017c <__addsf3>
 800d3ac:	f7f3 f9ca 	bl	8000744 <__aeabi_f2iz>
 800d3b0:	4605      	mov	r5, r0
 800d3b2:	f7f2 ff97 	bl	80002e4 <__aeabi_i2f>
 800d3b6:	496d      	ldr	r1, [pc, #436]	@ (800d56c <__ieee754_rem_pio2f+0x2a0>)
 800d3b8:	4681      	mov	r9, r0
 800d3ba:	f7f2 ffe7 	bl	800038c <__aeabi_fmul>
 800d3be:	4601      	mov	r1, r0
 800d3c0:	4630      	mov	r0, r6
 800d3c2:	f7f2 fed9 	bl	8000178 <__aeabi_fsub>
 800d3c6:	496b      	ldr	r1, [pc, #428]	@ (800d574 <__ieee754_rem_pio2f+0x2a8>)
 800d3c8:	4607      	mov	r7, r0
 800d3ca:	4648      	mov	r0, r9
 800d3cc:	f7f2 ffde 	bl	800038c <__aeabi_fmul>
 800d3d0:	2d1f      	cmp	r5, #31
 800d3d2:	4606      	mov	r6, r0
 800d3d4:	dc0e      	bgt.n	800d3f4 <__ieee754_rem_pio2f+0x128>
 800d3d6:	4a6c      	ldr	r2, [pc, #432]	@ (800d588 <__ieee754_rem_pio2f+0x2bc>)
 800d3d8:	1e69      	subs	r1, r5, #1
 800d3da:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d3de:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 800d3e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d004      	beq.n	800d3f4 <__ieee754_rem_pio2f+0x128>
 800d3ea:	4631      	mov	r1, r6
 800d3ec:	4638      	mov	r0, r7
 800d3ee:	f7f2 fec3 	bl	8000178 <__aeabi_fsub>
 800d3f2:	e00b      	b.n	800d40c <__ieee754_rem_pio2f+0x140>
 800d3f4:	4631      	mov	r1, r6
 800d3f6:	4638      	mov	r0, r7
 800d3f8:	f7f2 febe 	bl	8000178 <__aeabi_fsub>
 800d3fc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d400:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 800d404:	2b08      	cmp	r3, #8
 800d406:	ea4f 5be8 	mov.w	fp, r8, asr #23
 800d40a:	dc01      	bgt.n	800d410 <__ieee754_rem_pio2f+0x144>
 800d40c:	6020      	str	r0, [r4, #0]
 800d40e:	e026      	b.n	800d45e <__ieee754_rem_pio2f+0x192>
 800d410:	4959      	ldr	r1, [pc, #356]	@ (800d578 <__ieee754_rem_pio2f+0x2ac>)
 800d412:	4648      	mov	r0, r9
 800d414:	f7f2 ffba 	bl	800038c <__aeabi_fmul>
 800d418:	4606      	mov	r6, r0
 800d41a:	4601      	mov	r1, r0
 800d41c:	4638      	mov	r0, r7
 800d41e:	f7f2 feab 	bl	8000178 <__aeabi_fsub>
 800d422:	4601      	mov	r1, r0
 800d424:	4680      	mov	r8, r0
 800d426:	4638      	mov	r0, r7
 800d428:	f7f2 fea6 	bl	8000178 <__aeabi_fsub>
 800d42c:	4631      	mov	r1, r6
 800d42e:	f7f2 fea3 	bl	8000178 <__aeabi_fsub>
 800d432:	4606      	mov	r6, r0
 800d434:	4951      	ldr	r1, [pc, #324]	@ (800d57c <__ieee754_rem_pio2f+0x2b0>)
 800d436:	4648      	mov	r0, r9
 800d438:	f7f2 ffa8 	bl	800038c <__aeabi_fmul>
 800d43c:	4631      	mov	r1, r6
 800d43e:	f7f2 fe9b 	bl	8000178 <__aeabi_fsub>
 800d442:	4601      	mov	r1, r0
 800d444:	4606      	mov	r6, r0
 800d446:	4640      	mov	r0, r8
 800d448:	f7f2 fe96 	bl	8000178 <__aeabi_fsub>
 800d44c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d450:	ebab 0b03 	sub.w	fp, fp, r3
 800d454:	f1bb 0f19 	cmp.w	fp, #25
 800d458:	dc18      	bgt.n	800d48c <__ieee754_rem_pio2f+0x1c0>
 800d45a:	4647      	mov	r7, r8
 800d45c:	6020      	str	r0, [r4, #0]
 800d45e:	f8d4 8000 	ldr.w	r8, [r4]
 800d462:	4638      	mov	r0, r7
 800d464:	4641      	mov	r1, r8
 800d466:	f7f2 fe87 	bl	8000178 <__aeabi_fsub>
 800d46a:	4631      	mov	r1, r6
 800d46c:	f7f2 fe84 	bl	8000178 <__aeabi_fsub>
 800d470:	f1ba 0f00 	cmp.w	sl, #0
 800d474:	6060      	str	r0, [r4, #4]
 800d476:	f6bf af56 	bge.w	800d326 <__ieee754_rem_pio2f+0x5a>
 800d47a:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 800d47e:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800d482:	f8c4 8000 	str.w	r8, [r4]
 800d486:	6060      	str	r0, [r4, #4]
 800d488:	426d      	negs	r5, r5
 800d48a:	e74c      	b.n	800d326 <__ieee754_rem_pio2f+0x5a>
 800d48c:	493f      	ldr	r1, [pc, #252]	@ (800d58c <__ieee754_rem_pio2f+0x2c0>)
 800d48e:	4648      	mov	r0, r9
 800d490:	f7f2 ff7c 	bl	800038c <__aeabi_fmul>
 800d494:	4606      	mov	r6, r0
 800d496:	4601      	mov	r1, r0
 800d498:	4640      	mov	r0, r8
 800d49a:	f7f2 fe6d 	bl	8000178 <__aeabi_fsub>
 800d49e:	4601      	mov	r1, r0
 800d4a0:	4607      	mov	r7, r0
 800d4a2:	4640      	mov	r0, r8
 800d4a4:	f7f2 fe68 	bl	8000178 <__aeabi_fsub>
 800d4a8:	4631      	mov	r1, r6
 800d4aa:	f7f2 fe65 	bl	8000178 <__aeabi_fsub>
 800d4ae:	4606      	mov	r6, r0
 800d4b0:	4937      	ldr	r1, [pc, #220]	@ (800d590 <__ieee754_rem_pio2f+0x2c4>)
 800d4b2:	4648      	mov	r0, r9
 800d4b4:	f7f2 ff6a 	bl	800038c <__aeabi_fmul>
 800d4b8:	4631      	mov	r1, r6
 800d4ba:	f7f2 fe5d 	bl	8000178 <__aeabi_fsub>
 800d4be:	4606      	mov	r6, r0
 800d4c0:	e793      	b.n	800d3ea <__ieee754_rem_pio2f+0x11e>
 800d4c2:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800d4c6:	d305      	bcc.n	800d4d4 <__ieee754_rem_pio2f+0x208>
 800d4c8:	4601      	mov	r1, r0
 800d4ca:	f7f2 fe55 	bl	8000178 <__aeabi_fsub>
 800d4ce:	6060      	str	r0, [r4, #4]
 800d4d0:	6020      	str	r0, [r4, #0]
 800d4d2:	e708      	b.n	800d2e6 <__ieee754_rem_pio2f+0x1a>
 800d4d4:	ea4f 56e8 	mov.w	r6, r8, asr #23
 800d4d8:	3e86      	subs	r6, #134	@ 0x86
 800d4da:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800d4de:	4640      	mov	r0, r8
 800d4e0:	f7f3 f930 	bl	8000744 <__aeabi_f2iz>
 800d4e4:	f7f2 fefe 	bl	80002e4 <__aeabi_i2f>
 800d4e8:	4601      	mov	r1, r0
 800d4ea:	9003      	str	r0, [sp, #12]
 800d4ec:	4640      	mov	r0, r8
 800d4ee:	f7f2 fe43 	bl	8000178 <__aeabi_fsub>
 800d4f2:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800d4f6:	f7f2 ff49 	bl	800038c <__aeabi_fmul>
 800d4fa:	4607      	mov	r7, r0
 800d4fc:	f7f3 f922 	bl	8000744 <__aeabi_f2iz>
 800d500:	f7f2 fef0 	bl	80002e4 <__aeabi_i2f>
 800d504:	4601      	mov	r1, r0
 800d506:	9004      	str	r0, [sp, #16]
 800d508:	4605      	mov	r5, r0
 800d50a:	4638      	mov	r0, r7
 800d50c:	f7f2 fe34 	bl	8000178 <__aeabi_fsub>
 800d510:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800d514:	f7f2 ff3a 	bl	800038c <__aeabi_fmul>
 800d518:	2100      	movs	r1, #0
 800d51a:	9005      	str	r0, [sp, #20]
 800d51c:	f7f3 f8ca 	bl	80006b4 <__aeabi_fcmpeq>
 800d520:	b1f0      	cbz	r0, 800d560 <__ieee754_rem_pio2f+0x294>
 800d522:	2100      	movs	r1, #0
 800d524:	4628      	mov	r0, r5
 800d526:	f7f3 f8c5 	bl	80006b4 <__aeabi_fcmpeq>
 800d52a:	2800      	cmp	r0, #0
 800d52c:	bf14      	ite	ne
 800d52e:	2301      	movne	r3, #1
 800d530:	2302      	moveq	r3, #2
 800d532:	4a18      	ldr	r2, [pc, #96]	@ (800d594 <__ieee754_rem_pio2f+0x2c8>)
 800d534:	4621      	mov	r1, r4
 800d536:	9201      	str	r2, [sp, #4]
 800d538:	2202      	movs	r2, #2
 800d53a:	a803      	add	r0, sp, #12
 800d53c:	9200      	str	r2, [sp, #0]
 800d53e:	4632      	mov	r2, r6
 800d540:	f000 f898 	bl	800d674 <__kernel_rem_pio2f>
 800d544:	f1ba 0f00 	cmp.w	sl, #0
 800d548:	4605      	mov	r5, r0
 800d54a:	f6bf aeec 	bge.w	800d326 <__ieee754_rem_pio2f+0x5a>
 800d54e:	6823      	ldr	r3, [r4, #0]
 800d550:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d554:	6023      	str	r3, [r4, #0]
 800d556:	6863      	ldr	r3, [r4, #4]
 800d558:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d55c:	6063      	str	r3, [r4, #4]
 800d55e:	e793      	b.n	800d488 <__ieee754_rem_pio2f+0x1bc>
 800d560:	2303      	movs	r3, #3
 800d562:	e7e6      	b.n	800d532 <__ieee754_rem_pio2f+0x266>
 800d564:	3f490fd8 	.word	0x3f490fd8
 800d568:	4016cbe3 	.word	0x4016cbe3
 800d56c:	3fc90f80 	.word	0x3fc90f80
 800d570:	3fc90fd0 	.word	0x3fc90fd0
 800d574:	37354443 	.word	0x37354443
 800d578:	37354400 	.word	0x37354400
 800d57c:	2e85a308 	.word	0x2e85a308
 800d580:	43490f80 	.word	0x43490f80
 800d584:	3f22f984 	.word	0x3f22f984
 800d588:	0800e334 	.word	0x0800e334
 800d58c:	2e85a300 	.word	0x2e85a300
 800d590:	248d3132 	.word	0x248d3132
 800d594:	0800e3b4 	.word	0x0800e3b4

0800d598 <fabsf>:
 800d598:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800d59c:	4770      	bx	lr
	...

0800d5a0 <scalbnf>:
 800d5a0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800d5a4:	b538      	push	{r3, r4, r5, lr}
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	460d      	mov	r5, r1
 800d5aa:	4604      	mov	r4, r0
 800d5ac:	d02e      	beq.n	800d60c <scalbnf+0x6c>
 800d5ae:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d5b2:	d304      	bcc.n	800d5be <scalbnf+0x1e>
 800d5b4:	4601      	mov	r1, r0
 800d5b6:	f7f2 fde1 	bl	800017c <__addsf3>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	e026      	b.n	800d60c <scalbnf+0x6c>
 800d5be:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800d5c2:	d118      	bne.n	800d5f6 <scalbnf+0x56>
 800d5c4:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800d5c8:	f7f2 fee0 	bl	800038c <__aeabi_fmul>
 800d5cc:	4a17      	ldr	r2, [pc, #92]	@ (800d62c <scalbnf+0x8c>)
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	4295      	cmp	r5, r2
 800d5d2:	db0c      	blt.n	800d5ee <scalbnf+0x4e>
 800d5d4:	4604      	mov	r4, r0
 800d5d6:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800d5da:	3a19      	subs	r2, #25
 800d5dc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d5e0:	428d      	cmp	r5, r1
 800d5e2:	dd0a      	ble.n	800d5fa <scalbnf+0x5a>
 800d5e4:	4912      	ldr	r1, [pc, #72]	@ (800d630 <scalbnf+0x90>)
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f361 001e 	bfi	r0, r1, #0, #31
 800d5ec:	e000      	b.n	800d5f0 <scalbnf+0x50>
 800d5ee:	4911      	ldr	r1, [pc, #68]	@ (800d634 <scalbnf+0x94>)
 800d5f0:	f7f2 fecc 	bl	800038c <__aeabi_fmul>
 800d5f4:	e7e1      	b.n	800d5ba <scalbnf+0x1a>
 800d5f6:	0dd2      	lsrs	r2, r2, #23
 800d5f8:	e7f0      	b.n	800d5dc <scalbnf+0x3c>
 800d5fa:	1951      	adds	r1, r2, r5
 800d5fc:	29fe      	cmp	r1, #254	@ 0xfe
 800d5fe:	dcf1      	bgt.n	800d5e4 <scalbnf+0x44>
 800d600:	2900      	cmp	r1, #0
 800d602:	dd05      	ble.n	800d610 <scalbnf+0x70>
 800d604:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800d608:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800d60c:	4618      	mov	r0, r3
 800d60e:	bd38      	pop	{r3, r4, r5, pc}
 800d610:	f111 0f16 	cmn.w	r1, #22
 800d614:	da01      	bge.n	800d61a <scalbnf+0x7a>
 800d616:	4907      	ldr	r1, [pc, #28]	@ (800d634 <scalbnf+0x94>)
 800d618:	e7e5      	b.n	800d5e6 <scalbnf+0x46>
 800d61a:	f101 0019 	add.w	r0, r1, #25
 800d61e:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800d622:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 800d626:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800d62a:	e7e1      	b.n	800d5f0 <scalbnf+0x50>
 800d62c:	ffff3cb0 	.word	0xffff3cb0
 800d630:	7149f2ca 	.word	0x7149f2ca
 800d634:	0da24260 	.word	0x0da24260

0800d638 <with_errnof>:
 800d638:	b538      	push	{r3, r4, r5, lr}
 800d63a:	4604      	mov	r4, r0
 800d63c:	460d      	mov	r5, r1
 800d63e:	f7fe f893 	bl	800b768 <__errno>
 800d642:	6005      	str	r5, [r0, #0]
 800d644:	4620      	mov	r0, r4
 800d646:	bd38      	pop	{r3, r4, r5, pc}

0800d648 <xflowf>:
 800d648:	b508      	push	{r3, lr}
 800d64a:	b140      	cbz	r0, 800d65e <xflowf+0x16>
 800d64c:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800d650:	f7f2 fe9c 	bl	800038c <__aeabi_fmul>
 800d654:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d658:	2122      	movs	r1, #34	@ 0x22
 800d65a:	f7ff bfed 	b.w	800d638 <with_errnof>
 800d65e:	4608      	mov	r0, r1
 800d660:	e7f6      	b.n	800d650 <xflowf+0x8>

0800d662 <__math_uflowf>:
 800d662:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800d666:	f7ff bfef 	b.w	800d648 <xflowf>

0800d66a <__math_oflowf>:
 800d66a:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800d66e:	f7ff bfeb 	b.w	800d648 <xflowf>
	...

0800d674 <__kernel_rem_pio2f>:
 800d674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d678:	b0db      	sub	sp, #364	@ 0x16c
 800d67a:	9202      	str	r2, [sp, #8]
 800d67c:	9304      	str	r3, [sp, #16]
 800d67e:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800d680:	4bac      	ldr	r3, [pc, #688]	@ (800d934 <__kernel_rem_pio2f+0x2c0>)
 800d682:	9005      	str	r0, [sp, #20]
 800d684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d688:	9100      	str	r1, [sp, #0]
 800d68a:	9301      	str	r3, [sp, #4]
 800d68c:	9b04      	ldr	r3, [sp, #16]
 800d68e:	3b01      	subs	r3, #1
 800d690:	9303      	str	r3, [sp, #12]
 800d692:	9b02      	ldr	r3, [sp, #8]
 800d694:	1d1a      	adds	r2, r3, #4
 800d696:	f2c0 8099 	blt.w	800d7cc <__kernel_rem_pio2f+0x158>
 800d69a:	1edc      	subs	r4, r3, #3
 800d69c:	bf48      	it	mi
 800d69e:	1d1c      	addmi	r4, r3, #4
 800d6a0:	10e4      	asrs	r4, r4, #3
 800d6a2:	2500      	movs	r5, #0
 800d6a4:	f04f 0b00 	mov.w	fp, #0
 800d6a8:	1c67      	adds	r7, r4, #1
 800d6aa:	00fb      	lsls	r3, r7, #3
 800d6ac:	9306      	str	r3, [sp, #24]
 800d6ae:	9b02      	ldr	r3, [sp, #8]
 800d6b0:	9a03      	ldr	r2, [sp, #12]
 800d6b2:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800d6b6:	9b01      	ldr	r3, [sp, #4]
 800d6b8:	eba4 0802 	sub.w	r8, r4, r2
 800d6bc:	eb03 0902 	add.w	r9, r3, r2
 800d6c0:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800d6c2:	ae1e      	add	r6, sp, #120	@ 0x78
 800d6c4:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 800d6c8:	454d      	cmp	r5, r9
 800d6ca:	f340 8081 	ble.w	800d7d0 <__kernel_rem_pio2f+0x15c>
 800d6ce:	9a04      	ldr	r2, [sp, #16]
 800d6d0:	ab1e      	add	r3, sp, #120	@ 0x78
 800d6d2:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800d6d6:	f04f 0900 	mov.w	r9, #0
 800d6da:	2300      	movs	r3, #0
 800d6dc:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800d6e0:	9a01      	ldr	r2, [sp, #4]
 800d6e2:	4591      	cmp	r9, r2
 800d6e4:	f340 809a 	ble.w	800d81c <__kernel_rem_pio2f+0x1a8>
 800d6e8:	4613      	mov	r3, r2
 800d6ea:	aa0a      	add	r2, sp, #40	@ 0x28
 800d6ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d6f0:	9308      	str	r3, [sp, #32]
 800d6f2:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800d6f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d6f8:	9c01      	ldr	r4, [sp, #4]
 800d6fa:	9307      	str	r3, [sp, #28]
 800d6fc:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800d700:	4646      	mov	r6, r8
 800d702:	4625      	mov	r5, r4
 800d704:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 800d708:	ab5a      	add	r3, sp, #360	@ 0x168
 800d70a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d70e:	f853 bc50 	ldr.w	fp, [r3, #-80]
 800d712:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800d716:	2d00      	cmp	r5, #0
 800d718:	f300 8085 	bgt.w	800d826 <__kernel_rem_pio2f+0x1b2>
 800d71c:	4639      	mov	r1, r7
 800d71e:	4658      	mov	r0, fp
 800d720:	f7ff ff3e 	bl	800d5a0 <scalbnf>
 800d724:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 800d728:	4605      	mov	r5, r0
 800d72a:	f7f2 fe2f 	bl	800038c <__aeabi_fmul>
 800d72e:	f000 fa3f 	bl	800dbb0 <floorf>
 800d732:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800d736:	f7f2 fe29 	bl	800038c <__aeabi_fmul>
 800d73a:	4601      	mov	r1, r0
 800d73c:	4628      	mov	r0, r5
 800d73e:	f7f2 fd1b 	bl	8000178 <__aeabi_fsub>
 800d742:	4605      	mov	r5, r0
 800d744:	f7f2 fffe 	bl	8000744 <__aeabi_f2iz>
 800d748:	4606      	mov	r6, r0
 800d74a:	f7f2 fdcb 	bl	80002e4 <__aeabi_i2f>
 800d74e:	4601      	mov	r1, r0
 800d750:	4628      	mov	r0, r5
 800d752:	f7f2 fd11 	bl	8000178 <__aeabi_fsub>
 800d756:	2f00      	cmp	r7, #0
 800d758:	4681      	mov	r9, r0
 800d75a:	f340 8081 	ble.w	800d860 <__kernel_rem_pio2f+0x1ec>
 800d75e:	1e62      	subs	r2, r4, #1
 800d760:	ab0a      	add	r3, sp, #40	@ 0x28
 800d762:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800d766:	f1c7 0108 	rsb	r1, r7, #8
 800d76a:	fa45 f301 	asr.w	r3, r5, r1
 800d76e:	441e      	add	r6, r3
 800d770:	408b      	lsls	r3, r1
 800d772:	1aed      	subs	r5, r5, r3
 800d774:	ab0a      	add	r3, sp, #40	@ 0x28
 800d776:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d77a:	f1c7 0307 	rsb	r3, r7, #7
 800d77e:	411d      	asrs	r5, r3
 800d780:	2d00      	cmp	r5, #0
 800d782:	dd7a      	ble.n	800d87a <__kernel_rem_pio2f+0x206>
 800d784:	2200      	movs	r2, #0
 800d786:	4692      	mov	sl, r2
 800d788:	3601      	adds	r6, #1
 800d78a:	4294      	cmp	r4, r2
 800d78c:	f300 80aa 	bgt.w	800d8e4 <__kernel_rem_pio2f+0x270>
 800d790:	2f00      	cmp	r7, #0
 800d792:	dd05      	ble.n	800d7a0 <__kernel_rem_pio2f+0x12c>
 800d794:	2f01      	cmp	r7, #1
 800d796:	f000 80b6 	beq.w	800d906 <__kernel_rem_pio2f+0x292>
 800d79a:	2f02      	cmp	r7, #2
 800d79c:	f000 80bd 	beq.w	800d91a <__kernel_rem_pio2f+0x2a6>
 800d7a0:	2d02      	cmp	r5, #2
 800d7a2:	d16a      	bne.n	800d87a <__kernel_rem_pio2f+0x206>
 800d7a4:	4649      	mov	r1, r9
 800d7a6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800d7aa:	f7f2 fce5 	bl	8000178 <__aeabi_fsub>
 800d7ae:	4681      	mov	r9, r0
 800d7b0:	f1ba 0f00 	cmp.w	sl, #0
 800d7b4:	d061      	beq.n	800d87a <__kernel_rem_pio2f+0x206>
 800d7b6:	4639      	mov	r1, r7
 800d7b8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800d7bc:	f7ff fef0 	bl	800d5a0 <scalbnf>
 800d7c0:	4601      	mov	r1, r0
 800d7c2:	4648      	mov	r0, r9
 800d7c4:	f7f2 fcd8 	bl	8000178 <__aeabi_fsub>
 800d7c8:	4681      	mov	r9, r0
 800d7ca:	e056      	b.n	800d87a <__kernel_rem_pio2f+0x206>
 800d7cc:	2400      	movs	r4, #0
 800d7ce:	e768      	b.n	800d6a2 <__kernel_rem_pio2f+0x2e>
 800d7d0:	eb18 0f05 	cmn.w	r8, r5
 800d7d4:	d407      	bmi.n	800d7e6 <__kernel_rem_pio2f+0x172>
 800d7d6:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800d7da:	f7f2 fd83 	bl	80002e4 <__aeabi_i2f>
 800d7de:	f846 0b04 	str.w	r0, [r6], #4
 800d7e2:	3501      	adds	r5, #1
 800d7e4:	e770      	b.n	800d6c8 <__kernel_rem_pio2f+0x54>
 800d7e6:	4658      	mov	r0, fp
 800d7e8:	e7f9      	b.n	800d7de <__kernel_rem_pio2f+0x16a>
 800d7ea:	9307      	str	r3, [sp, #28]
 800d7ec:	9b05      	ldr	r3, [sp, #20]
 800d7ee:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 800d7f2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d7f6:	f7f2 fdc9 	bl	800038c <__aeabi_fmul>
 800d7fa:	4601      	mov	r1, r0
 800d7fc:	4630      	mov	r0, r6
 800d7fe:	f7f2 fcbd 	bl	800017c <__addsf3>
 800d802:	4606      	mov	r6, r0
 800d804:	9b07      	ldr	r3, [sp, #28]
 800d806:	f108 0801 	add.w	r8, r8, #1
 800d80a:	9a03      	ldr	r2, [sp, #12]
 800d80c:	4590      	cmp	r8, r2
 800d80e:	ddec      	ble.n	800d7ea <__kernel_rem_pio2f+0x176>
 800d810:	f84a 6b04 	str.w	r6, [sl], #4
 800d814:	f109 0901 	add.w	r9, r9, #1
 800d818:	3504      	adds	r5, #4
 800d81a:	e761      	b.n	800d6e0 <__kernel_rem_pio2f+0x6c>
 800d81c:	46ab      	mov	fp, r5
 800d81e:	461e      	mov	r6, r3
 800d820:	f04f 0800 	mov.w	r8, #0
 800d824:	e7f1      	b.n	800d80a <__kernel_rem_pio2f+0x196>
 800d826:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800d82a:	4658      	mov	r0, fp
 800d82c:	f7f2 fdae 	bl	800038c <__aeabi_fmul>
 800d830:	f7f2 ff88 	bl	8000744 <__aeabi_f2iz>
 800d834:	f7f2 fd56 	bl	80002e4 <__aeabi_i2f>
 800d838:	4649      	mov	r1, r9
 800d83a:	9009      	str	r0, [sp, #36]	@ 0x24
 800d83c:	f7f2 fda6 	bl	800038c <__aeabi_fmul>
 800d840:	4601      	mov	r1, r0
 800d842:	4658      	mov	r0, fp
 800d844:	f7f2 fc98 	bl	8000178 <__aeabi_fsub>
 800d848:	f7f2 ff7c 	bl	8000744 <__aeabi_f2iz>
 800d84c:	3d01      	subs	r5, #1
 800d84e:	f846 0b04 	str.w	r0, [r6], #4
 800d852:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 800d856:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d858:	f7f2 fc90 	bl	800017c <__addsf3>
 800d85c:	4683      	mov	fp, r0
 800d85e:	e75a      	b.n	800d716 <__kernel_rem_pio2f+0xa2>
 800d860:	d105      	bne.n	800d86e <__kernel_rem_pio2f+0x1fa>
 800d862:	1e63      	subs	r3, r4, #1
 800d864:	aa0a      	add	r2, sp, #40	@ 0x28
 800d866:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800d86a:	11ed      	asrs	r5, r5, #7
 800d86c:	e788      	b.n	800d780 <__kernel_rem_pio2f+0x10c>
 800d86e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800d872:	f7f2 ff3d 	bl	80006f0 <__aeabi_fcmpge>
 800d876:	4605      	mov	r5, r0
 800d878:	bb90      	cbnz	r0, 800d8e0 <__kernel_rem_pio2f+0x26c>
 800d87a:	2100      	movs	r1, #0
 800d87c:	4648      	mov	r0, r9
 800d87e:	f7f2 ff19 	bl	80006b4 <__aeabi_fcmpeq>
 800d882:	2800      	cmp	r0, #0
 800d884:	f000 8090 	beq.w	800d9a8 <__kernel_rem_pio2f+0x334>
 800d888:	2200      	movs	r2, #0
 800d88a:	1e63      	subs	r3, r4, #1
 800d88c:	9901      	ldr	r1, [sp, #4]
 800d88e:	428b      	cmp	r3, r1
 800d890:	da4a      	bge.n	800d928 <__kernel_rem_pio2f+0x2b4>
 800d892:	2a00      	cmp	r2, #0
 800d894:	d076      	beq.n	800d984 <__kernel_rem_pio2f+0x310>
 800d896:	3c01      	subs	r4, #1
 800d898:	ab0a      	add	r3, sp, #40	@ 0x28
 800d89a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d89e:	3f08      	subs	r7, #8
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d0f8      	beq.n	800d896 <__kernel_rem_pio2f+0x222>
 800d8a4:	4639      	mov	r1, r7
 800d8a6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800d8aa:	f7ff fe79 	bl	800d5a0 <scalbnf>
 800d8ae:	46a2      	mov	sl, r4
 800d8b0:	4607      	mov	r7, r0
 800d8b2:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 800d8b6:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 800d8ba:	f1ba 0f00 	cmp.w	sl, #0
 800d8be:	f280 80a1 	bge.w	800da04 <__kernel_rem_pio2f+0x390>
 800d8c2:	4627      	mov	r7, r4
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	2f00      	cmp	r7, #0
 800d8c8:	f2c0 80cb 	blt.w	800da62 <__kernel_rem_pio2f+0x3ee>
 800d8cc:	a946      	add	r1, sp, #280	@ 0x118
 800d8ce:	4690      	mov	r8, r2
 800d8d0:	f04f 0a00 	mov.w	sl, #0
 800d8d4:	4b18      	ldr	r3, [pc, #96]	@ (800d938 <__kernel_rem_pio2f+0x2c4>)
 800d8d6:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800d8da:	eba4 0907 	sub.w	r9, r4, r7
 800d8de:	e0b4      	b.n	800da4a <__kernel_rem_pio2f+0x3d6>
 800d8e0:	2502      	movs	r5, #2
 800d8e2:	e74f      	b.n	800d784 <__kernel_rem_pio2f+0x110>
 800d8e4:	f858 3b04 	ldr.w	r3, [r8], #4
 800d8e8:	f1ba 0f00 	cmp.w	sl, #0
 800d8ec:	d108      	bne.n	800d900 <__kernel_rem_pio2f+0x28c>
 800d8ee:	b123      	cbz	r3, 800d8fa <__kernel_rem_pio2f+0x286>
 800d8f0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800d8f4:	f848 3c04 	str.w	r3, [r8, #-4]
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	469a      	mov	sl, r3
 800d8fc:	3201      	adds	r2, #1
 800d8fe:	e744      	b.n	800d78a <__kernel_rem_pio2f+0x116>
 800d900:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800d904:	e7f6      	b.n	800d8f4 <__kernel_rem_pio2f+0x280>
 800d906:	1e62      	subs	r2, r4, #1
 800d908:	ab0a      	add	r3, sp, #40	@ 0x28
 800d90a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d90e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d912:	a90a      	add	r1, sp, #40	@ 0x28
 800d914:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d918:	e742      	b.n	800d7a0 <__kernel_rem_pio2f+0x12c>
 800d91a:	1e62      	subs	r2, r4, #1
 800d91c:	ab0a      	add	r3, sp, #40	@ 0x28
 800d91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d922:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d926:	e7f4      	b.n	800d912 <__kernel_rem_pio2f+0x29e>
 800d928:	a90a      	add	r1, sp, #40	@ 0x28
 800d92a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d92e:	3b01      	subs	r3, #1
 800d930:	430a      	orrs	r2, r1
 800d932:	e7ab      	b.n	800d88c <__kernel_rem_pio2f+0x218>
 800d934:	0800e6f8 	.word	0x0800e6f8
 800d938:	0800e6cc 	.word	0x0800e6cc
 800d93c:	3301      	adds	r3, #1
 800d93e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d942:	2900      	cmp	r1, #0
 800d944:	d0fa      	beq.n	800d93c <__kernel_rem_pio2f+0x2c8>
 800d946:	9a04      	ldr	r2, [sp, #16]
 800d948:	a91e      	add	r1, sp, #120	@ 0x78
 800d94a:	18a2      	adds	r2, r4, r2
 800d94c:	1c66      	adds	r6, r4, #1
 800d94e:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800d952:	441c      	add	r4, r3
 800d954:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 800d958:	42b4      	cmp	r4, r6
 800d95a:	f6ff aecf 	blt.w	800d6fc <__kernel_rem_pio2f+0x88>
 800d95e:	9b07      	ldr	r3, [sp, #28]
 800d960:	46ab      	mov	fp, r5
 800d962:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d966:	f7f2 fcbd 	bl	80002e4 <__aeabi_i2f>
 800d96a:	f04f 0a00 	mov.w	sl, #0
 800d96e:	f04f 0800 	mov.w	r8, #0
 800d972:	6028      	str	r0, [r5, #0]
 800d974:	9b03      	ldr	r3, [sp, #12]
 800d976:	459a      	cmp	sl, r3
 800d978:	dd07      	ble.n	800d98a <__kernel_rem_pio2f+0x316>
 800d97a:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 800d97e:	3504      	adds	r5, #4
 800d980:	3601      	adds	r6, #1
 800d982:	e7e9      	b.n	800d958 <__kernel_rem_pio2f+0x2e4>
 800d984:	2301      	movs	r3, #1
 800d986:	9a08      	ldr	r2, [sp, #32]
 800d988:	e7d9      	b.n	800d93e <__kernel_rem_pio2f+0x2ca>
 800d98a:	9b05      	ldr	r3, [sp, #20]
 800d98c:	f85b 0904 	ldr.w	r0, [fp], #-4
 800d990:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800d994:	f7f2 fcfa 	bl	800038c <__aeabi_fmul>
 800d998:	4601      	mov	r1, r0
 800d99a:	4640      	mov	r0, r8
 800d99c:	f7f2 fbee 	bl	800017c <__addsf3>
 800d9a0:	f10a 0a01 	add.w	sl, sl, #1
 800d9a4:	4680      	mov	r8, r0
 800d9a6:	e7e5      	b.n	800d974 <__kernel_rem_pio2f+0x300>
 800d9a8:	9b06      	ldr	r3, [sp, #24]
 800d9aa:	9a02      	ldr	r2, [sp, #8]
 800d9ac:	4648      	mov	r0, r9
 800d9ae:	1a99      	subs	r1, r3, r2
 800d9b0:	f7ff fdf6 	bl	800d5a0 <scalbnf>
 800d9b4:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800d9b8:	4680      	mov	r8, r0
 800d9ba:	f7f2 fe99 	bl	80006f0 <__aeabi_fcmpge>
 800d9be:	b1f8      	cbz	r0, 800da00 <__kernel_rem_pio2f+0x38c>
 800d9c0:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800d9c4:	4640      	mov	r0, r8
 800d9c6:	f7f2 fce1 	bl	800038c <__aeabi_fmul>
 800d9ca:	f7f2 febb 	bl	8000744 <__aeabi_f2iz>
 800d9ce:	f7f2 fc89 	bl	80002e4 <__aeabi_i2f>
 800d9d2:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800d9d6:	4681      	mov	r9, r0
 800d9d8:	f7f2 fcd8 	bl	800038c <__aeabi_fmul>
 800d9dc:	4601      	mov	r1, r0
 800d9de:	4640      	mov	r0, r8
 800d9e0:	f7f2 fbca 	bl	8000178 <__aeabi_fsub>
 800d9e4:	f7f2 feae 	bl	8000744 <__aeabi_f2iz>
 800d9e8:	ab0a      	add	r3, sp, #40	@ 0x28
 800d9ea:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d9ee:	4648      	mov	r0, r9
 800d9f0:	3401      	adds	r4, #1
 800d9f2:	3708      	adds	r7, #8
 800d9f4:	f7f2 fea6 	bl	8000744 <__aeabi_f2iz>
 800d9f8:	ab0a      	add	r3, sp, #40	@ 0x28
 800d9fa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d9fe:	e751      	b.n	800d8a4 <__kernel_rem_pio2f+0x230>
 800da00:	4640      	mov	r0, r8
 800da02:	e7f7      	b.n	800d9f4 <__kernel_rem_pio2f+0x380>
 800da04:	ab0a      	add	r3, sp, #40	@ 0x28
 800da06:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800da0a:	f7f2 fc6b 	bl	80002e4 <__aeabi_i2f>
 800da0e:	4639      	mov	r1, r7
 800da10:	f7f2 fcbc 	bl	800038c <__aeabi_fmul>
 800da14:	4649      	mov	r1, r9
 800da16:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 800da1a:	4638      	mov	r0, r7
 800da1c:	f7f2 fcb6 	bl	800038c <__aeabi_fmul>
 800da20:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da24:	4607      	mov	r7, r0
 800da26:	e748      	b.n	800d8ba <__kernel_rem_pio2f+0x246>
 800da28:	f853 0b04 	ldr.w	r0, [r3], #4
 800da2c:	f85b 1b04 	ldr.w	r1, [fp], #4
 800da30:	9203      	str	r2, [sp, #12]
 800da32:	9302      	str	r3, [sp, #8]
 800da34:	f7f2 fcaa 	bl	800038c <__aeabi_fmul>
 800da38:	4601      	mov	r1, r0
 800da3a:	4640      	mov	r0, r8
 800da3c:	f7f2 fb9e 	bl	800017c <__addsf3>
 800da40:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800da44:	4680      	mov	r8, r0
 800da46:	f10a 0a01 	add.w	sl, sl, #1
 800da4a:	9901      	ldr	r1, [sp, #4]
 800da4c:	458a      	cmp	sl, r1
 800da4e:	dc01      	bgt.n	800da54 <__kernel_rem_pio2f+0x3e0>
 800da50:	45ca      	cmp	sl, r9
 800da52:	dde9      	ble.n	800da28 <__kernel_rem_pio2f+0x3b4>
 800da54:	ab5a      	add	r3, sp, #360	@ 0x168
 800da56:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800da5a:	f849 8ca0 	str.w	r8, [r9, #-160]
 800da5e:	3f01      	subs	r7, #1
 800da60:	e731      	b.n	800d8c6 <__kernel_rem_pio2f+0x252>
 800da62:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800da64:	2b02      	cmp	r3, #2
 800da66:	dc07      	bgt.n	800da78 <__kernel_rem_pio2f+0x404>
 800da68:	2b00      	cmp	r3, #0
 800da6a:	dc4e      	bgt.n	800db0a <__kernel_rem_pio2f+0x496>
 800da6c:	d02e      	beq.n	800dacc <__kernel_rem_pio2f+0x458>
 800da6e:	f006 0007 	and.w	r0, r6, #7
 800da72:	b05b      	add	sp, #364	@ 0x16c
 800da74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da78:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800da7a:	2b03      	cmp	r3, #3
 800da7c:	d1f7      	bne.n	800da6e <__kernel_rem_pio2f+0x3fa>
 800da7e:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 800da82:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800da86:	46b8      	mov	r8, r7
 800da88:	46a2      	mov	sl, r4
 800da8a:	f1ba 0f00 	cmp.w	sl, #0
 800da8e:	dc49      	bgt.n	800db24 <__kernel_rem_pio2f+0x4b0>
 800da90:	46a1      	mov	r9, r4
 800da92:	f1b9 0f01 	cmp.w	r9, #1
 800da96:	dc60      	bgt.n	800db5a <__kernel_rem_pio2f+0x4e6>
 800da98:	2000      	movs	r0, #0
 800da9a:	2c01      	cmp	r4, #1
 800da9c:	dc76      	bgt.n	800db8c <__kernel_rem_pio2f+0x518>
 800da9e:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800daa0:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800daa2:	2d00      	cmp	r5, #0
 800daa4:	d178      	bne.n	800db98 <__kernel_rem_pio2f+0x524>
 800daa6:	9900      	ldr	r1, [sp, #0]
 800daa8:	600a      	str	r2, [r1, #0]
 800daaa:	460a      	mov	r2, r1
 800daac:	604b      	str	r3, [r1, #4]
 800daae:	6090      	str	r0, [r2, #8]
 800dab0:	e7dd      	b.n	800da6e <__kernel_rem_pio2f+0x3fa>
 800dab2:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800dab6:	f7f2 fb61 	bl	800017c <__addsf3>
 800daba:	3c01      	subs	r4, #1
 800dabc:	2c00      	cmp	r4, #0
 800dabe:	daf8      	bge.n	800dab2 <__kernel_rem_pio2f+0x43e>
 800dac0:	b10d      	cbz	r5, 800dac6 <__kernel_rem_pio2f+0x452>
 800dac2:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800dac6:	9b00      	ldr	r3, [sp, #0]
 800dac8:	6018      	str	r0, [r3, #0]
 800daca:	e7d0      	b.n	800da6e <__kernel_rem_pio2f+0x3fa>
 800dacc:	2000      	movs	r0, #0
 800dace:	af32      	add	r7, sp, #200	@ 0xc8
 800dad0:	e7f4      	b.n	800dabc <__kernel_rem_pio2f+0x448>
 800dad2:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800dad6:	f7f2 fb51 	bl	800017c <__addsf3>
 800dada:	f108 38ff 	add.w	r8, r8, #4294967295
 800dade:	f1b8 0f00 	cmp.w	r8, #0
 800dae2:	daf6      	bge.n	800dad2 <__kernel_rem_pio2f+0x45e>
 800dae4:	b1ad      	cbz	r5, 800db12 <__kernel_rem_pio2f+0x49e>
 800dae6:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 800daea:	9a00      	ldr	r2, [sp, #0]
 800daec:	4601      	mov	r1, r0
 800daee:	6013      	str	r3, [r2, #0]
 800daf0:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800daf2:	f7f2 fb41 	bl	8000178 <__aeabi_fsub>
 800daf6:	f04f 0801 	mov.w	r8, #1
 800dafa:	4544      	cmp	r4, r8
 800dafc:	da0b      	bge.n	800db16 <__kernel_rem_pio2f+0x4a2>
 800dafe:	b10d      	cbz	r5, 800db04 <__kernel_rem_pio2f+0x490>
 800db00:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800db04:	9b00      	ldr	r3, [sp, #0]
 800db06:	6058      	str	r0, [r3, #4]
 800db08:	e7b1      	b.n	800da6e <__kernel_rem_pio2f+0x3fa>
 800db0a:	46a0      	mov	r8, r4
 800db0c:	2000      	movs	r0, #0
 800db0e:	af32      	add	r7, sp, #200	@ 0xc8
 800db10:	e7e5      	b.n	800dade <__kernel_rem_pio2f+0x46a>
 800db12:	4603      	mov	r3, r0
 800db14:	e7e9      	b.n	800daea <__kernel_rem_pio2f+0x476>
 800db16:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800db1a:	f7f2 fb2f 	bl	800017c <__addsf3>
 800db1e:	f108 0801 	add.w	r8, r8, #1
 800db22:	e7ea      	b.n	800dafa <__kernel_rem_pio2f+0x486>
 800db24:	f8d8 3000 	ldr.w	r3, [r8]
 800db28:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800db2c:	4619      	mov	r1, r3
 800db2e:	4610      	mov	r0, r2
 800db30:	9302      	str	r3, [sp, #8]
 800db32:	9201      	str	r2, [sp, #4]
 800db34:	f7f2 fb22 	bl	800017c <__addsf3>
 800db38:	9a01      	ldr	r2, [sp, #4]
 800db3a:	4601      	mov	r1, r0
 800db3c:	4681      	mov	r9, r0
 800db3e:	4610      	mov	r0, r2
 800db40:	f7f2 fb1a 	bl	8000178 <__aeabi_fsub>
 800db44:	9b02      	ldr	r3, [sp, #8]
 800db46:	f10a 3aff 	add.w	sl, sl, #4294967295
 800db4a:	4619      	mov	r1, r3
 800db4c:	f7f2 fb16 	bl	800017c <__addsf3>
 800db50:	f848 0904 	str.w	r0, [r8], #-4
 800db54:	f8c8 9000 	str.w	r9, [r8]
 800db58:	e797      	b.n	800da8a <__kernel_rem_pio2f+0x416>
 800db5a:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800db5e:	f8d7 a000 	ldr.w	sl, [r7]
 800db62:	4618      	mov	r0, r3
 800db64:	4651      	mov	r1, sl
 800db66:	9301      	str	r3, [sp, #4]
 800db68:	f7f2 fb08 	bl	800017c <__addsf3>
 800db6c:	9b01      	ldr	r3, [sp, #4]
 800db6e:	4601      	mov	r1, r0
 800db70:	4680      	mov	r8, r0
 800db72:	4618      	mov	r0, r3
 800db74:	f7f2 fb00 	bl	8000178 <__aeabi_fsub>
 800db78:	4651      	mov	r1, sl
 800db7a:	f7f2 faff 	bl	800017c <__addsf3>
 800db7e:	f847 0904 	str.w	r0, [r7], #-4
 800db82:	f109 39ff 	add.w	r9, r9, #4294967295
 800db86:	f8c7 8000 	str.w	r8, [r7]
 800db8a:	e782      	b.n	800da92 <__kernel_rem_pio2f+0x41e>
 800db8c:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800db90:	f7f2 faf4 	bl	800017c <__addsf3>
 800db94:	3c01      	subs	r4, #1
 800db96:	e780      	b.n	800da9a <__kernel_rem_pio2f+0x426>
 800db98:	9900      	ldr	r1, [sp, #0]
 800db9a:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800db9e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800dba2:	600a      	str	r2, [r1, #0]
 800dba4:	604b      	str	r3, [r1, #4]
 800dba6:	460a      	mov	r2, r1
 800dba8:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800dbac:	e77f      	b.n	800daae <__kernel_rem_pio2f+0x43a>
 800dbae:	bf00      	nop

0800dbb0 <floorf>:
 800dbb0:	b570      	push	{r4, r5, r6, lr}
 800dbb2:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800dbb6:	3d7f      	subs	r5, #127	@ 0x7f
 800dbb8:	2d16      	cmp	r5, #22
 800dbba:	4601      	mov	r1, r0
 800dbbc:	4604      	mov	r4, r0
 800dbbe:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800dbc2:	dc26      	bgt.n	800dc12 <floorf+0x62>
 800dbc4:	2d00      	cmp	r5, #0
 800dbc6:	da0f      	bge.n	800dbe8 <floorf+0x38>
 800dbc8:	4917      	ldr	r1, [pc, #92]	@ (800dc28 <floorf+0x78>)
 800dbca:	f7f2 fad7 	bl	800017c <__addsf3>
 800dbce:	2100      	movs	r1, #0
 800dbd0:	f7f2 fd98 	bl	8000704 <__aeabi_fcmpgt>
 800dbd4:	b130      	cbz	r0, 800dbe4 <floorf+0x34>
 800dbd6:	2c00      	cmp	r4, #0
 800dbd8:	da23      	bge.n	800dc22 <floorf+0x72>
 800dbda:	2e00      	cmp	r6, #0
 800dbdc:	4c13      	ldr	r4, [pc, #76]	@ (800dc2c <floorf+0x7c>)
 800dbde:	bf08      	it	eq
 800dbe0:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800dbe4:	4621      	mov	r1, r4
 800dbe6:	e01a      	b.n	800dc1e <floorf+0x6e>
 800dbe8:	4e11      	ldr	r6, [pc, #68]	@ (800dc30 <floorf+0x80>)
 800dbea:	412e      	asrs	r6, r5
 800dbec:	4230      	tst	r0, r6
 800dbee:	d016      	beq.n	800dc1e <floorf+0x6e>
 800dbf0:	490d      	ldr	r1, [pc, #52]	@ (800dc28 <floorf+0x78>)
 800dbf2:	f7f2 fac3 	bl	800017c <__addsf3>
 800dbf6:	2100      	movs	r1, #0
 800dbf8:	f7f2 fd84 	bl	8000704 <__aeabi_fcmpgt>
 800dbfc:	2800      	cmp	r0, #0
 800dbfe:	d0f1      	beq.n	800dbe4 <floorf+0x34>
 800dc00:	2c00      	cmp	r4, #0
 800dc02:	bfbe      	ittt	lt
 800dc04:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 800dc08:	412b      	asrlt	r3, r5
 800dc0a:	18e4      	addlt	r4, r4, r3
 800dc0c:	ea24 0406 	bic.w	r4, r4, r6
 800dc10:	e7e8      	b.n	800dbe4 <floorf+0x34>
 800dc12:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800dc16:	d302      	bcc.n	800dc1e <floorf+0x6e>
 800dc18:	f7f2 fab0 	bl	800017c <__addsf3>
 800dc1c:	4601      	mov	r1, r0
 800dc1e:	4608      	mov	r0, r1
 800dc20:	bd70      	pop	{r4, r5, r6, pc}
 800dc22:	2400      	movs	r4, #0
 800dc24:	e7de      	b.n	800dbe4 <floorf+0x34>
 800dc26:	bf00      	nop
 800dc28:	7149f2ca 	.word	0x7149f2ca
 800dc2c:	bf800000 	.word	0xbf800000
 800dc30:	007fffff 	.word	0x007fffff

0800dc34 <_init>:
 800dc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc36:	bf00      	nop
 800dc38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc3a:	bc08      	pop	{r3}
 800dc3c:	469e      	mov	lr, r3
 800dc3e:	4770      	bx	lr

0800dc40 <_fini>:
 800dc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc42:	bf00      	nop
 800dc44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc46:	bc08      	pop	{r3}
 800dc48:	469e      	mov	lr, r3
 800dc4a:	4770      	bx	lr
