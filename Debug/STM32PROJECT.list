
STM32PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e3c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08002f48  08002f48  00003f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031a8  080031a8  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080031a8  080031a8  000041a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031b0  080031b0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031b0  080031b0  000041b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031b4  080031b4  000041b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080031b8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  2000000c  080031c4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  080031c4  000054f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1b8  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d79  00000000  00000000  0000f1ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00010f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000084f  00000000  00000000  000119b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e6b  00000000  00000000  000121ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd91  00000000  00000000  0002a06a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085120  00000000  00000000  00037dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bcf1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002acc  00000000  00000000  000bcf60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000bfa2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f30 	.word	0x08002f30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002f30 	.word	0x08002f30

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	@ 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ca:	2afd      	cmp	r2, #253	@ 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	@ 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	@ 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	@ 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__gesf2>:
 8000618:	f04f 3cff 	mov.w	ip, #4294967295
 800061c:	e006      	b.n	800062c <__cmpsf2+0x4>
 800061e:	bf00      	nop

08000620 <__lesf2>:
 8000620:	f04f 0c01 	mov.w	ip, #1
 8000624:	e002      	b.n	800062c <__cmpsf2+0x4>
 8000626:	bf00      	nop

08000628 <__cmpsf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000630:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000634:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000638:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800063c:	bf18      	it	ne
 800063e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000642:	d011      	beq.n	8000668 <__cmpsf2+0x40>
 8000644:	b001      	add	sp, #4
 8000646:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064a:	bf18      	it	ne
 800064c:	ea90 0f01 	teqne	r0, r1
 8000650:	bf58      	it	pl
 8000652:	ebb2 0003 	subspl.w	r0, r2, r3
 8000656:	bf88      	it	hi
 8000658:	17c8      	asrhi	r0, r1, #31
 800065a:	bf38      	it	cc
 800065c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000660:	bf18      	it	ne
 8000662:	f040 0001 	orrne.w	r0, r0, #1
 8000666:	4770      	bx	lr
 8000668:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800066c:	d102      	bne.n	8000674 <__cmpsf2+0x4c>
 800066e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000672:	d105      	bne.n	8000680 <__cmpsf2+0x58>
 8000674:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000678:	d1e4      	bne.n	8000644 <__cmpsf2+0x1c>
 800067a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800067e:	d0e1      	beq.n	8000644 <__cmpsf2+0x1c>
 8000680:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <__aeabi_cfrcmple>:
 8000688:	4684      	mov	ip, r0
 800068a:	4608      	mov	r0, r1
 800068c:	4661      	mov	r1, ip
 800068e:	e7ff      	b.n	8000690 <__aeabi_cfcmpeq>

08000690 <__aeabi_cfcmpeq>:
 8000690:	b50f      	push	{r0, r1, r2, r3, lr}
 8000692:	f7ff ffc9 	bl	8000628 <__cmpsf2>
 8000696:	2800      	cmp	r0, #0
 8000698:	bf48      	it	mi
 800069a:	f110 0f00 	cmnmi.w	r0, #0
 800069e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a0 <__aeabi_fcmpeq>:
 80006a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a4:	f7ff fff4 	bl	8000690 <__aeabi_cfcmpeq>
 80006a8:	bf0c      	ite	eq
 80006aa:	2001      	moveq	r0, #1
 80006ac:	2000      	movne	r0, #0
 80006ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b2:	bf00      	nop

080006b4 <__aeabi_fcmplt>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff ffea 	bl	8000690 <__aeabi_cfcmpeq>
 80006bc:	bf34      	ite	cc
 80006be:	2001      	movcc	r0, #1
 80006c0:	2000      	movcs	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmple>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffe0 	bl	8000690 <__aeabi_cfcmpeq>
 80006d0:	bf94      	ite	ls
 80006d2:	2001      	movls	r0, #1
 80006d4:	2000      	movhi	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmpge>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffd2 	bl	8000688 <__aeabi_cfrcmple>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpgt>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffc8 	bl	8000688 <__aeabi_cfrcmple>
 80006f8:	bf34      	ite	cc
 80006fa:	2001      	movcc	r0, #1
 80006fc:	2000      	movcs	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_f2uiz>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	d20e      	bcs.n	8000726 <__aeabi_f2uiz+0x22>
 8000708:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800070c:	d30b      	bcc.n	8000726 <__aeabi_f2uiz+0x22>
 800070e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000712:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000716:	d409      	bmi.n	800072c <__aeabi_f2uiz+0x28>
 8000718:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800071c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000720:	fa23 f002 	lsr.w	r0, r3, r2
 8000724:	4770      	bx	lr
 8000726:	f04f 0000 	mov.w	r0, #0
 800072a:	4770      	bx	lr
 800072c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000730:	d101      	bne.n	8000736 <__aeabi_f2uiz+0x32>
 8000732:	0242      	lsls	r2, r0, #9
 8000734:	d102      	bne.n	800073c <__aeabi_f2uiz+0x38>
 8000736:	f04f 30ff 	mov.w	r0, #4294967295
 800073a:	4770      	bx	lr
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop

08000744 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 0310 	add.w	r3, r7, #16
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000758:	4b1e      	ldr	r3, [pc, #120]	@ (80007d4 <MX_GPIO_Init+0x90>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a1d      	ldr	r2, [pc, #116]	@ (80007d4 <MX_GPIO_Init+0x90>)
 800075e:	f043 0310 	orr.w	r3, r3, #16
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <MX_GPIO_Init+0x90>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0310 	and.w	r3, r3, #16
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000770:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <MX_GPIO_Init+0x90>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a17      	ldr	r2, [pc, #92]	@ (80007d4 <MX_GPIO_Init+0x90>)
 8000776:	f043 0304 	orr.w	r3, r3, #4
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <MX_GPIO_Init+0x90>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f003 0304 	and.w	r3, r3, #4
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000788:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <MX_GPIO_Init+0x90>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a11      	ldr	r2, [pc, #68]	@ (80007d4 <MX_GPIO_Init+0x90>)
 800078e:	f043 0308 	orr.w	r3, r3, #8
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <MX_GPIO_Init+0x90>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0308 	and.w	r3, r3, #8
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007a6:	480c      	ldr	r0, [pc, #48]	@ (80007d8 <MX_GPIO_Init+0x94>)
 80007a8:	f001 f9e6 	bl	8001b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007be:	f107 0310 	add.w	r3, r7, #16
 80007c2:	4619      	mov	r1, r3
 80007c4:	4804      	ldr	r0, [pc, #16]	@ (80007d8 <MX_GPIO_Init+0x94>)
 80007c6:	f001 f853 	bl	8001870 <HAL_GPIO_Init>

}
 80007ca:	bf00      	nop
 80007cc:	3720      	adds	r7, #32
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40011000 	.word	0x40011000

080007dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e0:	4b12      	ldr	r3, [pc, #72]	@ (800082c <MX_I2C1_Init+0x50>)
 80007e2:	4a13      	ldr	r2, [pc, #76]	@ (8000830 <MX_I2C1_Init+0x54>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007e6:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_I2C1_Init+0x50>)
 80007e8:	4a12      	ldr	r2, [pc, #72]	@ (8000834 <MX_I2C1_Init+0x58>)
 80007ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <MX_I2C1_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_I2C1_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_I2C1_Init+0x50>)
 80007fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000800:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <MX_I2C1_Init+0x50>)
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000806:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_I2C1_Init+0x50>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800080c:	4b07      	ldr	r3, [pc, #28]	@ (800082c <MX_I2C1_Init+0x50>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_I2C1_Init+0x50>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	@ (800082c <MX_I2C1_Init+0x50>)
 800081a:	f001 f9c5 	bl	8001ba8 <HAL_I2C_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000824:	f000 f8a3 	bl	800096e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000028 	.word	0x20000028
 8000830:	40005400 	.word	0x40005400
 8000834:	00061a80 	.word	0x00061a80

08000838 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a15      	ldr	r2, [pc, #84]	@ (80008a8 <HAL_I2C_MspInit+0x70>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d123      	bne.n	80008a0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000858:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <HAL_I2C_MspInit+0x74>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a13      	ldr	r2, [pc, #76]	@ (80008ac <HAL_I2C_MspInit+0x74>)
 800085e:	f043 0308 	orr.w	r3, r3, #8
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <HAL_I2C_MspInit+0x74>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0308 	and.w	r3, r3, #8
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000870:	23c0      	movs	r3, #192	@ 0xc0
 8000872:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000874:	2312      	movs	r3, #18
 8000876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	4619      	mov	r1, r3
 8000882:	480b      	ldr	r0, [pc, #44]	@ (80008b0 <HAL_I2C_MspInit+0x78>)
 8000884:	f000 fff4 	bl	8001870 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000888:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <HAL_I2C_MspInit+0x74>)
 800088a:	69db      	ldr	r3, [r3, #28]
 800088c:	4a07      	ldr	r2, [pc, #28]	@ (80008ac <HAL_I2C_MspInit+0x74>)
 800088e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000892:	61d3      	str	r3, [r2, #28]
 8000894:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <HAL_I2C_MspInit+0x74>)
 8000896:	69db      	ldr	r3, [r3, #28]
 8000898:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40005400 	.word	0x40005400
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40010c00 	.word	0x40010c00

080008b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b8:	f000 fe70 	bl	800159c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008bc:	f000 f81c 	bl	80008f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c0:	f7ff ff40 	bl	8000744 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008c4:	f7ff ff8a 	bl	80007dc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80008c8:	f000 fdcc 	bl	8001464 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init(); // 初始化OLED
 80008cc:	f000 f90e 	bl	8000aec <OLED_Init>
  OLED_InitBuffer(); // 初始化双缓冲
 80008d0:	f000 f854 	bl	800097c <OLED_InitBuffer>
  OLED_ClearBuffer(); // 清空缓冲区
 80008d4:	f000 f85e 	bl	8000994 <OLED_ClearBuffer>

  InitBlockAnimation(); // 初始化方块动画
 80008d8:	f000 fc00 	bl	80010dc <InitBlockAnimation>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {    
    // 清屏并绘制一些文本
    OLED_ClearBuffer();
 80008dc:	f000 f85a 	bl	8000994 <OLED_ClearBuffer>

    OLED_DrawTitleBar("STM32 OLED Demo"); // 绘制标题栏
 80008e0:	4804      	ldr	r0, [pc, #16]	@ (80008f4 <main+0x40>)
 80008e2:	f000 fc69 	bl	80011b8 <OLED_DrawTitleBar>
    //   OLED_ClearBuffer(); // 清空缓冲区
    //   OLED_DrawRectangle(i, 32, 64, 16); // 绘制矩形
    //   OLED_UpdateDisplay(); // 更新显示
    // }
    // OLED_DrawLine(23, 14, 127, 63); // 绘制对角线
    AnimationLoop(); // 执行动画循环
 80008e6:	f000 fc4d 	bl	8001184 <AnimationLoop>

    OLED_UpdateDisplay();
 80008ea:	f000 f8a9 	bl	8000a40 <OLED_UpdateDisplay>
    OLED_ClearBuffer();
 80008ee:	bf00      	nop
 80008f0:	e7f4      	b.n	80008dc <main+0x28>
 80008f2:	bf00      	nop
 80008f4:	08002f48 	.word	0x08002f48

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b090      	sub	sp, #64	@ 0x40
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0318 	add.w	r3, r7, #24
 8000902:	2228      	movs	r2, #40	@ 0x28
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f002 fad8 	bl	8002ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800091a:	2302      	movs	r3, #2
 800091c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800091e:	2301      	movs	r3, #1
 8000920:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000922:	2310      	movs	r3, #16
 8000924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000926:	2300      	movs	r3, #0
 8000928:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092a:	f107 0318 	add.w	r3, r7, #24
 800092e:	4618      	mov	r0, r3
 8000930:	f001 fdd6 	bl	80024e0 <HAL_RCC_OscConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800093a:	f000 f818 	bl	800096e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093e:	230f      	movs	r3, #15
 8000940:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f002 f844 	bl	80029e4 <HAL_RCC_ClockConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000962:	f000 f804 	bl	800096e <Error_Handler>
  }
}
 8000966:	bf00      	nop
 8000968:	3740      	adds	r7, #64	@ 0x40
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000972:	b672      	cpsid	i
}
 8000974:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000976:	bf00      	nop
 8000978:	e7fd      	b.n	8000976 <Error_Handler+0x8>
	...

0800097c <OLED_InitBuffer>:
    0x44, 0x64, 0x54, 0x4C, 0x44, 0x00  // z (122)
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_Buffer, 0, sizeof(OLED_Buffer));
 8000980:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000984:	2100      	movs	r1, #0
 8000986:	4802      	ldr	r0, [pc, #8]	@ (8000990 <OLED_InitBuffer+0x14>)
 8000988:	f002 fa98 	bl	8002ebc <memset>
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2000007c 	.word	0x2000007c

08000994 <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_Buffer, 0, sizeof(OLED_Buffer));
 8000998:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800099c:	2100      	movs	r1, #0
 800099e:	4802      	ldr	r0, [pc, #8]	@ (80009a8 <OLED_ClearBuffer+0x14>)
 80009a0:	f002 fa8c 	bl	8002ebc <memset>
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000007c 	.word	0x2000007c

080009ac <OLED_WritePixel>:

// 向缓冲区写入单个像素
void OLED_WritePixel(uint8_t x, uint8_t y, uint8_t color)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
 80009b6:	460b      	mov	r3, r1
 80009b8:	71bb      	strb	r3, [r7, #6]
 80009ba:	4613      	mov	r3, r2
 80009bc:	717b      	strb	r3, [r7, #5]
    // 边界检查
    if (x >= 128 || y >= 64)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	db34      	blt.n	8000a30 <OLED_WritePixel+0x84>
 80009c6:	79bb      	ldrb	r3, [r7, #6]
 80009c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80009ca:	d831      	bhi.n	8000a30 <OLED_WritePixel+0x84>
        return;

    // 计算像素所在的字节位置
    uint16_t byte_index = x + (y / 8) * 128;
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	79bb      	ldrb	r3, [r7, #6]
 80009d2:	08db      	lsrs	r3, r3, #3
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	01db      	lsls	r3, r3, #7
 80009d8:	b29b      	uxth	r3, r3
 80009da:	4413      	add	r3, r2
 80009dc:	81fb      	strh	r3, [r7, #14]
    uint8_t bit_position = y % 8;
 80009de:	79bb      	ldrb	r3, [r7, #6]
 80009e0:	f003 0307 	and.w	r3, r3, #7
 80009e4:	737b      	strb	r3, [r7, #13]

    if (color) // 如果需要点亮像素
 80009e6:	797b      	ldrb	r3, [r7, #5]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d00f      	beq.n	8000a0c <OLED_WritePixel+0x60>
        OLED_Buffer[byte_index] |= (1 << bit_position);
 80009ec:	89fb      	ldrh	r3, [r7, #14]
 80009ee:	4a13      	ldr	r2, [pc, #76]	@ (8000a3c <OLED_WritePixel+0x90>)
 80009f0:	5cd3      	ldrb	r3, [r2, r3]
 80009f2:	b25a      	sxtb	r2, r3
 80009f4:	7b7b      	ldrb	r3, [r7, #13]
 80009f6:	2101      	movs	r1, #1
 80009f8:	fa01 f303 	lsl.w	r3, r1, r3
 80009fc:	b25b      	sxtb	r3, r3
 80009fe:	4313      	orrs	r3, r2
 8000a00:	b25a      	sxtb	r2, r3
 8000a02:	89fb      	ldrh	r3, [r7, #14]
 8000a04:	b2d1      	uxtb	r1, r2
 8000a06:	4a0d      	ldr	r2, [pc, #52]	@ (8000a3c <OLED_WritePixel+0x90>)
 8000a08:	54d1      	strb	r1, [r2, r3]
 8000a0a:	e012      	b.n	8000a32 <OLED_WritePixel+0x86>
    else // 如果需要熄灭像素
        OLED_Buffer[byte_index] &= ~(1 << bit_position);
 8000a0c:	89fb      	ldrh	r3, [r7, #14]
 8000a0e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a3c <OLED_WritePixel+0x90>)
 8000a10:	5cd3      	ldrb	r3, [r2, r3]
 8000a12:	b25a      	sxtb	r2, r3
 8000a14:	7b7b      	ldrb	r3, [r7, #13]
 8000a16:	2101      	movs	r1, #1
 8000a18:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1c:	b25b      	sxtb	r3, r3
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	b25b      	sxtb	r3, r3
 8000a22:	4013      	ands	r3, r2
 8000a24:	b25a      	sxtb	r2, r3
 8000a26:	89fb      	ldrh	r3, [r7, #14]
 8000a28:	b2d1      	uxtb	r1, r2
 8000a2a:	4a04      	ldr	r2, [pc, #16]	@ (8000a3c <OLED_WritePixel+0x90>)
 8000a2c:	54d1      	strb	r1, [r2, r3]
 8000a2e:	e000      	b.n	8000a32 <OLED_WritePixel+0x86>
        return;
 8000a30:	bf00      	nop
}
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	2000007c 	.word	0x2000007c

08000a40 <OLED_UpdateDisplay>:

// 将缓冲区内容更新到屏幕
void OLED_UpdateDisplay(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b0a4      	sub	sp, #144	@ 0x90
 8000a44:	af02      	add	r7, sp, #8
    uint8_t data[129]; // 数据缓冲区 (包括控制字节)
    data[0] = 0x40;    // 数据控制字节
 8000a46:	2340      	movs	r3, #64	@ 0x40
 8000a48:	713b      	strb	r3, [r7, #4]

    // 逐页发送数据，每页一次性发送整行
    for (uint8_t page = 0; page < 8; page++)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000a50:	e025      	b.n	8000a9e <OLED_UpdateDisplay+0x5e>
    {
        // 设置页地址和起始列地址
        OLED_SendCommand(0xB0 + page);
 8000a52:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000a56:	3b50      	subs	r3, #80	@ 0x50
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f82c 	bl	8000ab8 <OLED_SendCommand>
        OLED_SendCommand(0x00); // 列起始地址低4位
 8000a60:	2000      	movs	r0, #0
 8000a62:	f000 f829 	bl	8000ab8 <OLED_SendCommand>
        OLED_SendCommand(0x10); // 列起始地址高4位
 8000a66:	2010      	movs	r0, #16
 8000a68:	f000 f826 	bl	8000ab8 <OLED_SendCommand>

        // 复制这一页的数据到传输缓冲区
        memcpy(&data[1], &OLED_Buffer[page * 128], 128);
 8000a6c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000a70:	01db      	lsls	r3, r3, #7
 8000a72:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab0 <OLED_UpdateDisplay+0x70>)
 8000a74:	1899      	adds	r1, r3, r2
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	3301      	adds	r3, #1
 8000a7a:	2280      	movs	r2, #128	@ 0x80
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f002 fa49 	bl	8002f14 <memcpy>

        // 一次性发送整页数据
        HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 129, HAL_MAX_DELAY);
 8000a82:	1d3a      	adds	r2, r7, #4
 8000a84:	f04f 33ff 	mov.w	r3, #4294967295
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	2381      	movs	r3, #129	@ 0x81
 8000a8c:	2178      	movs	r1, #120	@ 0x78
 8000a8e:	4809      	ldr	r0, [pc, #36]	@ (8000ab4 <OLED_UpdateDisplay+0x74>)
 8000a90:	f001 f9ce 	bl	8001e30 <HAL_I2C_Master_Transmit>
    for (uint8_t page = 0; page < 8; page++)
 8000a94:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000a98:	3301      	adds	r3, #1
 8000a9a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000a9e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000aa2:	2b07      	cmp	r3, #7
 8000aa4:	d9d5      	bls.n	8000a52 <OLED_UpdateDisplay+0x12>
    }
}
 8000aa6:	bf00      	nop
 8000aa8:	bf00      	nop
 8000aaa:	3788      	adds	r7, #136	@ 0x88
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000007c 	.word	0x2000007c
 8000ab4:	20000028 	.word	0x20000028

08000ab8 <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af02      	add	r7, sp, #8
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8000aca:	f107 020c 	add.w	r2, r7, #12
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	2178      	movs	r1, #120	@ 0x78
 8000ad8:	4803      	ldr	r0, [pc, #12]	@ (8000ae8 <OLED_SendCommand+0x30>)
 8000ada:	f001 f9a9 	bl	8001e30 <HAL_I2C_Master_Transmit>
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000028 	.word	0x20000028

08000aec <OLED_Init>:
    OLED_UpdateDisplay();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 8000af0:	2064      	movs	r0, #100	@ 0x64
 8000af2:	f000 fdb5 	bl	8001660 <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 8000af6:	20ae      	movs	r0, #174	@ 0xae
 8000af8:	f7ff ffde 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 8000afc:	20d5      	movs	r0, #213	@ 0xd5
 8000afe:	f7ff ffdb 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 8000b02:	2080      	movs	r0, #128	@ 0x80
 8000b04:	f7ff ffd8 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8000b08:	20a8      	movs	r0, #168	@ 0xa8
 8000b0a:	f7ff ffd5 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 8000b0e:	203f      	movs	r0, #63	@ 0x3f
 8000b10:	f7ff ffd2 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8000b14:	20d3      	movs	r0, #211	@ 0xd3
 8000b16:	f7ff ffcf 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff ffcc 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8000b20:	2040      	movs	r0, #64	@ 0x40
 8000b22:	f7ff ffc9 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 8000b26:	208d      	movs	r0, #141	@ 0x8d
 8000b28:	f7ff ffc6 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 8000b2c:	2014      	movs	r0, #20
 8000b2e:	f7ff ffc3 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 8000b32:	2020      	movs	r0, #32
 8000b34:	f7ff ffc0 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f7ff ffbd 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 8000b3e:	20a1      	movs	r0, #161	@ 0xa1
 8000b40:	f7ff ffba 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 8000b44:	20c8      	movs	r0, #200	@ 0xc8
 8000b46:	f7ff ffb7 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 8000b4a:	20da      	movs	r0, #218	@ 0xda
 8000b4c:	f7ff ffb4 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8000b50:	2012      	movs	r0, #18
 8000b52:	f7ff ffb1 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 8000b56:	2081      	movs	r0, #129	@ 0x81
 8000b58:	f7ff ffae 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 8000b5c:	20cf      	movs	r0, #207	@ 0xcf
 8000b5e:	f7ff ffab 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 8000b62:	20d9      	movs	r0, #217	@ 0xd9
 8000b64:	f7ff ffa8 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 8000b68:	20f1      	movs	r0, #241	@ 0xf1
 8000b6a:	f7ff ffa5 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 8000b6e:	20db      	movs	r0, #219	@ 0xdb
 8000b70:	f7ff ffa2 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 8000b74:	2030      	movs	r0, #48	@ 0x30
 8000b76:	f7ff ff9f 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 8000b7a:	20a4      	movs	r0, #164	@ 0xa4
 8000b7c:	f7ff ff9c 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 8000b80:	20a6      	movs	r0, #166	@ 0xa6
 8000b82:	f7ff ff99 	bl	8000ab8 <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 8000b86:	202e      	movs	r0, #46	@ 0x2e
 8000b88:	f7ff ff96 	bl	8000ab8 <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 8000b8c:	f7ff fef6 	bl	800097c <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 8000b90:	f7ff ff00 	bl	8000994 <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 8000b94:	20af      	movs	r0, #175	@ 0xaf
 8000b96:	f7ff ff8f 	bl	8000ab8 <OLED_SendCommand>
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <OLED_DisplayCharInverted>:
        }
    }
}

void OLED_DisplayCharInverted(uint8_t x, uint8_t y, char ch, uint8_t inverted) //! UPDATEDISPLAY REQUIRED
{
 8000ba0:	b490      	push	{r4, r7}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	4608      	mov	r0, r1
 8000baa:	4611      	mov	r1, r2
 8000bac:	461a      	mov	r2, r3
 8000bae:	4623      	mov	r3, r4
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71bb      	strb	r3, [r7, #6]
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	717b      	strb	r3, [r7, #5]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	713b      	strb	r3, [r7, #4]
    // 边界检查
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT || ch < 32)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f2c0 80a8 	blt.w	8000d18 <OLED_DisplayCharInverted+0x178>
 8000bc8:	79bb      	ldrb	r3, [r7, #6]
 8000bca:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bcc:	f200 80a4 	bhi.w	8000d18 <OLED_DisplayCharInverted+0x178>
 8000bd0:	797b      	ldrb	r3, [r7, #5]
 8000bd2:	2b1f      	cmp	r3, #31
 8000bd4:	f240 80a0 	bls.w	8000d18 <OLED_DisplayCharInverted+0x178>
        return;

    uint8_t c = ch - 32;    // 获取字体数组中的索引
 8000bd8:	797b      	ldrb	r3, [r7, #5]
 8000bda:	3b20      	subs	r3, #32
 8000bdc:	733b      	strb	r3, [r7, #12]
    uint8_t font_width = 6; // 6x8字体宽度
 8000bde:	2306      	movs	r3, #6
 8000be0:	73fb      	strb	r3, [r7, #15]

    // 防止越界
    if (x + font_width > OLED_WIDTH)
 8000be2:	79fa      	ldrb	r2, [r7, #7]
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	4413      	add	r3, r2
 8000be8:	2b80      	cmp	r3, #128	@ 0x80
 8000bea:	dd06      	ble.n	8000bfa <OLED_DisplayCharInverted+0x5a>
    {
        font_width = OLED_WIDTH - x;
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8000bf2:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8000bf6:	3380      	adds	r3, #128	@ 0x80
 8000bf8:	73fb      	strb	r3, [r7, #15]
    }

    // 获取字符所在页
    uint8_t page = y / 8;
 8000bfa:	79bb      	ldrb	r3, [r7, #6]
 8000bfc:	08db      	lsrs	r3, r3, #3
 8000bfe:	72fb      	strb	r3, [r7, #11]
    uint8_t bit_offset = y % 8;
 8000c00:	79bb      	ldrb	r3, [r7, #6]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	72bb      	strb	r3, [r7, #10]

    // 将字体数据写入缓冲区
    for (uint8_t i = 0; i < font_width; i++)
 8000c08:	2300      	movs	r3, #0
 8000c0a:	73bb      	strb	r3, [r7, #14]
 8000c0c:	e07e      	b.n	8000d0c <OLED_DisplayCharInverted+0x16c>
    {
        if ((c * 6 + i) >= sizeof(OLED_FONT_6x8))
 8000c0e:	7b3a      	ldrb	r2, [r7, #12]
 8000c10:	4613      	mov	r3, r2
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	4413      	add	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	461a      	mov	r2, r3
 8000c1a:	7bbb      	ldrb	r3, [r7, #14]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	461a      	mov	r2, r3
 8000c20:	f240 2321 	movw	r3, #545	@ 0x221
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d879      	bhi.n	8000d1c <OLED_DisplayCharInverted+0x17c>
            break; // 安全检查

        uint8_t font_data = OLED_FONT_6x8[c * 6 + i];
 8000c28:	7b3a      	ldrb	r2, [r7, #12]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	4413      	add	r3, r2
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	461a      	mov	r2, r3
 8000c34:	7bbb      	ldrb	r3, [r7, #14]
 8000c36:	4413      	add	r3, r2
 8000c38:	4a3b      	ldr	r2, [pc, #236]	@ (8000d28 <OLED_DisplayCharInverted+0x188>)
 8000c3a:	5cd3      	ldrb	r3, [r2, r3]
 8000c3c:	737b      	strb	r3, [r7, #13]
        // 如果需要反色显示，对字体数据取反
        if (inverted)
 8000c3e:	793b      	ldrb	r3, [r7, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d002      	beq.n	8000c4a <OLED_DisplayCharInverted+0xaa>
        {
            font_data = ~font_data;
 8000c44:	7b7b      	ldrb	r3, [r7, #13]
 8000c46:	43db      	mvns	r3, r3
 8000c48:	737b      	strb	r3, [r7, #13]
        }

        // 如果字符跨页，需要分别处理上下两页
        uint16_t buffer_index = x + i + (page * OLED_WIDTH);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	7bbb      	ldrb	r3, [r7, #14]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	4413      	add	r3, r2
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	7afb      	ldrb	r3, [r7, #11]
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	01db      	lsls	r3, r3, #7
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	4413      	add	r3, r2
 8000c60:	813b      	strh	r3, [r7, #8]

        if (bit_offset == 0)
 8000c62:	7abb      	ldrb	r3, [r7, #10]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d104      	bne.n	8000c72 <OLED_DisplayCharInverted+0xd2>
        {
            // 字符刚好在页的起始位置，直接写入
            OLED_Buffer[buffer_index] = font_data;
 8000c68:	893b      	ldrh	r3, [r7, #8]
 8000c6a:	4930      	ldr	r1, [pc, #192]	@ (8000d2c <OLED_DisplayCharInverted+0x18c>)
 8000c6c:	7b7a      	ldrb	r2, [r7, #13]
 8000c6e:	54ca      	strb	r2, [r1, r3]
 8000c70:	e049      	b.n	8000d06 <OLED_DisplayCharInverted+0x166>
        }
        else
        {
            // 字符跨页，分别处理上下两页
            // 当前页 - 先清除当前位置，再写入
            OLED_Buffer[buffer_index] &= ~(0xFF << bit_offset);
 8000c72:	893b      	ldrh	r3, [r7, #8]
 8000c74:	4a2d      	ldr	r2, [pc, #180]	@ (8000d2c <OLED_DisplayCharInverted+0x18c>)
 8000c76:	5cd3      	ldrb	r3, [r2, r3]
 8000c78:	b25a      	sxtb	r2, r3
 8000c7a:	7abb      	ldrb	r3, [r7, #10]
 8000c7c:	21ff      	movs	r1, #255	@ 0xff
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	b25b      	sxtb	r3, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	b25b      	sxtb	r3, r3
 8000c88:	4013      	ands	r3, r2
 8000c8a:	b25a      	sxtb	r2, r3
 8000c8c:	893b      	ldrh	r3, [r7, #8]
 8000c8e:	b2d1      	uxtb	r1, r2
 8000c90:	4a26      	ldr	r2, [pc, #152]	@ (8000d2c <OLED_DisplayCharInverted+0x18c>)
 8000c92:	54d1      	strb	r1, [r2, r3]
            OLED_Buffer[buffer_index] |= font_data << bit_offset;
 8000c94:	893b      	ldrh	r3, [r7, #8]
 8000c96:	4a25      	ldr	r2, [pc, #148]	@ (8000d2c <OLED_DisplayCharInverted+0x18c>)
 8000c98:	5cd3      	ldrb	r3, [r2, r3]
 8000c9a:	b25a      	sxtb	r2, r3
 8000c9c:	7b79      	ldrb	r1, [r7, #13]
 8000c9e:	7abb      	ldrb	r3, [r7, #10]
 8000ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	b25a      	sxtb	r2, r3
 8000caa:	893b      	ldrh	r3, [r7, #8]
 8000cac:	b2d1      	uxtb	r1, r2
 8000cae:	4a1f      	ldr	r2, [pc, #124]	@ (8000d2c <OLED_DisplayCharInverted+0x18c>)
 8000cb0:	54d1      	strb	r1, [r2, r3]

            // 下一页（如果有） - 先清除当前位置，再写入
            if (page < OLED_PAGES - 1)
 8000cb2:	7afb      	ldrb	r3, [r7, #11]
 8000cb4:	2b06      	cmp	r3, #6
 8000cb6:	d826      	bhi.n	8000d06 <OLED_DisplayCharInverted+0x166>
            {
                OLED_Buffer[buffer_index + OLED_WIDTH] &= ~(0xFF >> (8 - bit_offset));
 8000cb8:	893b      	ldrh	r3, [r7, #8]
 8000cba:	3380      	adds	r3, #128	@ 0x80
 8000cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d2c <OLED_DisplayCharInverted+0x18c>)
 8000cbe:	5cd3      	ldrb	r3, [r2, r3]
 8000cc0:	b25a      	sxtb	r2, r3
 8000cc2:	7abb      	ldrb	r3, [r7, #10]
 8000cc4:	f1c3 0308 	rsb	r3, r3, #8
 8000cc8:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 8000ccc:	fa41 f303 	asr.w	r3, r1, r3
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	b25a      	sxtb	r2, r3
 8000cd6:	893b      	ldrh	r3, [r7, #8]
 8000cd8:	3380      	adds	r3, #128	@ 0x80
 8000cda:	b2d1      	uxtb	r1, r2
 8000cdc:	4a13      	ldr	r2, [pc, #76]	@ (8000d2c <OLED_DisplayCharInverted+0x18c>)
 8000cde:	54d1      	strb	r1, [r2, r3]
                OLED_Buffer[buffer_index + OLED_WIDTH] |= font_data >> (8 - bit_offset);
 8000ce0:	893b      	ldrh	r3, [r7, #8]
 8000ce2:	3380      	adds	r3, #128	@ 0x80
 8000ce4:	4a11      	ldr	r2, [pc, #68]	@ (8000d2c <OLED_DisplayCharInverted+0x18c>)
 8000ce6:	5cd3      	ldrb	r3, [r2, r3]
 8000ce8:	b25a      	sxtb	r2, r3
 8000cea:	7b79      	ldrb	r1, [r7, #13]
 8000cec:	7abb      	ldrb	r3, [r7, #10]
 8000cee:	f1c3 0308 	rsb	r3, r3, #8
 8000cf2:	fa41 f303 	asr.w	r3, r1, r3
 8000cf6:	b25b      	sxtb	r3, r3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	b25a      	sxtb	r2, r3
 8000cfc:	893b      	ldrh	r3, [r7, #8]
 8000cfe:	3380      	adds	r3, #128	@ 0x80
 8000d00:	b2d1      	uxtb	r1, r2
 8000d02:	4a0a      	ldr	r2, [pc, #40]	@ (8000d2c <OLED_DisplayCharInverted+0x18c>)
 8000d04:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < font_width; i++)
 8000d06:	7bbb      	ldrb	r3, [r7, #14]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	73bb      	strb	r3, [r7, #14]
 8000d0c:	7bba      	ldrb	r2, [r7, #14]
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f4ff af7c 	bcc.w	8000c0e <OLED_DisplayCharInverted+0x6e>
 8000d16:	e002      	b.n	8000d1e <OLED_DisplayCharInverted+0x17e>
        return;
 8000d18:	bf00      	nop
 8000d1a:	e000      	b.n	8000d1e <OLED_DisplayCharInverted+0x17e>
            break; // 安全检查
 8000d1c:	bf00      	nop
            }
        }
    }
}
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc90      	pop	{r4, r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	08002f58 	.word	0x08002f58
 8000d2c:	2000007c 	.word	0x2000007c

08000d30 <OLED_DisplayStringInverted>:
        j++;
    }
}

void OLED_DisplayStringInverted(uint8_t x, uint8_t y, char *str, uint8_t inverted) //! UPDATEDISPLAY REQUIRED
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	603a      	str	r2, [r7, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	71bb      	strb	r3, [r7, #6]
 8000d42:	4613      	mov	r3, r2
 8000d44:	717b      	strb	r3, [r7, #5]
    uint8_t j = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	73fb      	strb	r3, [r7, #15]
    uint8_t font_width = 6; // 6x8字体宽度
 8000d4a:	2306      	movs	r3, #6
 8000d4c:	73bb      	strb	r3, [r7, #14]

    while (str[j] != '\0')
 8000d4e:	e017      	b.n	8000d80 <OLED_DisplayStringInverted+0x50>
    {
        uint8_t current_x = x + (j * font_width);
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	7bba      	ldrb	r2, [r7, #14]
 8000d54:	fb02 f303 	mul.w	r3, r2, r3
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	737b      	strb	r3, [r7, #13]
        // 如果字符起始位置超出屏幕，则停止
        if (current_x >= OLED_WIDTH)
 8000d60:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db12      	blt.n	8000d8e <OLED_DisplayStringInverted+0x5e>
            break;
        OLED_DisplayCharInverted(current_x, y, str[j], inverted);
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	683a      	ldr	r2, [r7, #0]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	781a      	ldrb	r2, [r3, #0]
 8000d70:	797b      	ldrb	r3, [r7, #5]
 8000d72:	79b9      	ldrb	r1, [r7, #6]
 8000d74:	7b78      	ldrb	r0, [r7, #13]
 8000d76:	f7ff ff13 	bl	8000ba0 <OLED_DisplayCharInverted>
        j++;
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	73fb      	strb	r3, [r7, #15]
    while (str[j] != '\0')
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d1e1      	bne.n	8000d50 <OLED_DisplayStringInverted+0x20>
    }
}
 8000d8c:	e000      	b.n	8000d90 <OLED_DisplayStringInverted+0x60>
            break;
 8000d8e:	bf00      	nop
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <EaseLinear>:
#include "oled_ui.h"

#pragma region TWEENS

static float EaseLinear(float t)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
    return t;
 8000da0:	687b      	ldr	r3, [r7, #4]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <EaseInQuad>:

static float EaseInQuad(float t)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
    return t * t;
 8000db4:	6879      	ldr	r1, [r7, #4]
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff fade 	bl	8000378 <__aeabi_fmul>
 8000dbc:	4603      	mov	r3, r0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <EaseOutQuad>:

static float EaseOutQuad(float t)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
    return t * (2 - t);
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000dd4:	f7ff f9c6 	bl	8000164 <__aeabi_fsub>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff facb 	bl	8000378 <__aeabi_fmul>
 8000de2:	4603      	mov	r3, r0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <EaseInOutQuad>:

static float EaseInOutQuad(float t)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 2 * t * t : -1 + (4 - 2 * t) * t;
 8000df4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff fc5b 	bl	80006b4 <__aeabi_fcmplt>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d00b      	beq.n	8000e1c <EaseInOutQuad+0x30>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4619      	mov	r1, r3
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff f9ad 	bl	8000168 <__addsf3>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6879      	ldr	r1, [r7, #4]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fab0 	bl	8000378 <__aeabi_fmul>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	e016      	b.n	8000e4a <EaseInOutQuad+0x5e>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff f9a1 	bl	8000168 <__addsf3>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 8000e2e:	f7ff f999 	bl	8000164 <__aeabi_fsub>
 8000e32:	4603      	mov	r3, r0
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fa9e 	bl	8000378 <__aeabi_fmul>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff f98e 	bl	8000164 <__aeabi_fsub>
 8000e48:	4603      	mov	r3, r0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <EaseInCubic>:

static float EaseInCubic(float t)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
    return t * t * t;
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff fa8b 	bl	8000378 <__aeabi_fmul>
 8000e62:	4603      	mov	r3, r0
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fa86 	bl	8000378 <__aeabi_fmul>
 8000e6c:	4603      	mov	r3, r0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <EaseOutCubic>:

static float EaseOutCubic(float t)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
    float t1 = t - 1;
 8000e7e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff f96e 	bl	8000164 <__aeabi_fsub>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	60fb      	str	r3, [r7, #12]
    return t1 * t1 * t1 + 1;
 8000e8c:	68f9      	ldr	r1, [r7, #12]
 8000e8e:	68f8      	ldr	r0, [r7, #12]
 8000e90:	f7ff fa72 	bl	8000378 <__aeabi_fmul>
 8000e94:	4603      	mov	r3, r0
 8000e96:	68f9      	ldr	r1, [r7, #12]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fa6d 	bl	8000378 <__aeabi_fmul>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff f95f 	bl	8000168 <__addsf3>
 8000eaa:	4603      	mov	r3, r0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <EaseInOutCubic>:

static float EaseInOutCubic(float t)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
 8000ebc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff fbf7 	bl	80006b4 <__aeabi_fcmplt>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d010      	beq.n	8000eee <EaseInOutCubic+0x3a>
 8000ecc:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff fa51 	bl	8000378 <__aeabi_fmul>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fa4c 	bl	8000378 <__aeabi_fmul>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fa47 	bl	8000378 <__aeabi_fmul>
 8000eea:	4603      	mov	r3, r0
 8000eec:	e02f      	b.n	8000f4e <EaseInOutCubic+0x9a>
 8000eee:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff f936 	bl	8000164 <__aeabi_fsub>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	461c      	mov	r4, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4619      	mov	r1, r3
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff f931 	bl	8000168 <__addsf3>
 8000f06:	4603      	mov	r3, r0
 8000f08:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff f929 	bl	8000164 <__aeabi_fsub>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4619      	mov	r1, r3
 8000f16:	4620      	mov	r0, r4
 8000f18:	f7ff fa2e 	bl	8000378 <__aeabi_fmul>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	461c      	mov	r4, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4619      	mov	r1, r3
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff f91f 	bl	8000168 <__addsf3>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff f917 	bl	8000164 <__aeabi_fsub>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	f7ff fa1c 	bl	8000378 <__aeabi_fmul>
 8000f40:	4603      	mov	r3, r0
 8000f42:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff f90e 	bl	8000168 <__addsf3>
 8000f4c:	4603      	mov	r3, r0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd90      	pop	{r4, r7, pc}
	...

08000f58 <GetEaseValue>:

// 获取缓动值
static float GetEaseValue(float progress, EaseType_t easeType)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	70fb      	strb	r3, [r7, #3]
    switch (easeType)
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d833      	bhi.n	8000fd2 <GetEaseValue+0x7a>
 8000f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f70 <GetEaseValue+0x18>)
 8000f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f70:	08000f8d 	.word	0x08000f8d
 8000f74:	08000f97 	.word	0x08000f97
 8000f78:	08000fa1 	.word	0x08000fa1
 8000f7c:	08000fab 	.word	0x08000fab
 8000f80:	08000fb5 	.word	0x08000fb5
 8000f84:	08000fbf 	.word	0x08000fbf
 8000f88:	08000fc9 	.word	0x08000fc9
    {
    case EASE_LINEAR:
        return EaseLinear(progress);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ff03 	bl	8000d98 <EaseLinear>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e01e      	b.n	8000fd4 <GetEaseValue+0x7c>
    case EASE_IN_QUAD:
        return EaseInQuad(progress);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ff08 	bl	8000dac <EaseInQuad>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	e019      	b.n	8000fd4 <GetEaseValue+0x7c>
    case EASE_OUT_QUAD:
        return EaseOutQuad(progress);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ff10 	bl	8000dc6 <EaseOutQuad>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	e014      	b.n	8000fd4 <GetEaseValue+0x7c>
    case EASE_INOUT_QUAD:
        return EaseInOutQuad(progress);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ff1e 	bl	8000dec <EaseInOutQuad>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	e00f      	b.n	8000fd4 <GetEaseValue+0x7c>
    case EASE_IN_CUBIC:
        return EaseInCubic(progress);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ff4c 	bl	8000e52 <EaseInCubic>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	e00a      	b.n	8000fd4 <GetEaseValue+0x7c>
    case EASE_OUT_CUBIC:
        return EaseOutCubic(progress);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ff59 	bl	8000e76 <EaseOutCubic>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	e005      	b.n	8000fd4 <GetEaseValue+0x7c>
    case EASE_INOUT_CUBIC:
        return EaseInOutCubic(progress);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff73 	bl	8000eb4 <EaseInOutCubic>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e000      	b.n	8000fd4 <GetEaseValue+0x7c>
    default:
        return progress;
 8000fd2:	687b      	ldr	r3, [r7, #4]
    }
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <OLED_InitAnimation>:

// 初始化动画
void OLED_InitAnimation(Animation_t *anim, float startValue, float endValue,
                        uint32_t duration, EaseType_t easeType)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
    anim->startTime = HAL_GetTick();
 8000fea:	f000 fb2f 	bl	800164c <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	601a      	str	r2, [r3, #0]
    anim->duration = duration;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
    anim->startValue = startValue;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	609a      	str	r2, [r3, #8]
    anim->endValue = endValue;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	60da      	str	r2, [r3, #12]
    anim->currentValue = startValue;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	611a      	str	r2, [r3, #16]
    anim->isActive = 1;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2201      	movs	r2, #1
 8001010:	751a      	strb	r2, [r3, #20]
    anim->easeType = easeType;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	7e3a      	ldrb	r2, [r7, #24]
 8001016:	755a      	strb	r2, [r3, #21]
}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <OLED_UpdateAnimation>:

// 更新动画状态
uint8_t OLED_UpdateAnimation(Animation_t *anim, uint32_t currentTime)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b087      	sub	sp, #28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
    if (!anim->isActive)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7d1b      	ldrb	r3, [r3, #20]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <OLED_UpdateAnimation+0x16>
        return 0;
 8001032:	2300      	movs	r3, #0
 8001034:	e042      	b.n	80010bc <OLED_UpdateAnimation+0x9c>

    uint32_t elapsedTime = currentTime - anim->startTime;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	617b      	str	r3, [r7, #20]

    // 动画完成
    if (elapsedTime >= anim->duration)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	429a      	cmp	r2, r3
 8001048:	d308      	bcc.n	800105c <OLED_UpdateAnimation+0x3c>
    {
        anim->currentValue = anim->endValue;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68da      	ldr	r2, [r3, #12]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	611a      	str	r2, [r3, #16]
        anim->isActive = 0;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	751a      	strb	r2, [r3, #20]
        return 0;
 8001058:	2300      	movs	r3, #0
 800105a:	e02f      	b.n	80010bc <OLED_UpdateAnimation+0x9c>
    }

    // 计算当前进度 (0.0 - 1.0)
    float progress = (float)elapsedTime / anim->duration;
 800105c:	6978      	ldr	r0, [r7, #20]
 800105e:	f7ff f933 	bl	80002c8 <__aeabi_ui2f>
 8001062:	4604      	mov	r4, r0
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff f92d 	bl	80002c8 <__aeabi_ui2f>
 800106e:	4603      	mov	r3, r0
 8001070:	4619      	mov	r1, r3
 8001072:	4620      	mov	r0, r4
 8001074:	f7ff fa34 	bl	80004e0 <__aeabi_fdiv>
 8001078:	4603      	mov	r3, r0
 800107a:	613b      	str	r3, [r7, #16]

    // 应用缓动函数
    float easedProgress = GetEaseValue(progress, anim->easeType);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7d5b      	ldrb	r3, [r3, #21]
 8001080:	4619      	mov	r1, r3
 8001082:	6938      	ldr	r0, [r7, #16]
 8001084:	f7ff ff68 	bl	8000f58 <GetEaseValue>
 8001088:	60f8      	str	r0, [r7, #12]

    // 计算当前值
    anim->currentValue = anim->startValue + (anim->endValue - anim->startValue) * easedProgress;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689c      	ldr	r4, [r3, #8]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	4619      	mov	r1, r3
 8001098:	4610      	mov	r0, r2
 800109a:	f7ff f863 	bl	8000164 <__aeabi_fsub>
 800109e:	4603      	mov	r3, r0
 80010a0:	68f9      	ldr	r1, [r7, #12]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff f968 	bl	8000378 <__aeabi_fmul>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4619      	mov	r1, r3
 80010ac:	4620      	mov	r0, r4
 80010ae:	f7ff f85b 	bl	8000168 <__addsf3>
 80010b2:	4603      	mov	r3, r0
 80010b4:	461a      	mov	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	611a      	str	r2, [r3, #16]

    return 1;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	371c      	adds	r7, #28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd90      	pop	{r4, r7, pc}

080010c4 <OLED_GetAnimationValue>:

// 获取当前动画值
float OLED_GetAnimationValue(Animation_t *anim)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
    return anim->currentValue;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	691b      	ldr	r3, [r3, #16]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
	...

080010dc <InitBlockAnimation>:

Animation_t blockXAnim, blockYAnim;
// 初始化方块动画
void InitBlockAnimation()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af02      	add	r7, sp, #8
    // 设置方块从(0,0)移动到(100,40)，持续2秒，使用缓出三次方缓动
    OLED_InitAnimation(&blockXAnim, 0, 100, 2000, EASE_IN_QUAD);
 80010e2:	2301      	movs	r3, #1
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80010ea:	4a09      	ldr	r2, [pc, #36]	@ (8001110 <InitBlockAnimation+0x34>)
 80010ec:	f04f 0100 	mov.w	r1, #0
 80010f0:	4808      	ldr	r0, [pc, #32]	@ (8001114 <InitBlockAnimation+0x38>)
 80010f2:	f7ff ff73 	bl	8000fdc <OLED_InitAnimation>
    OLED_InitAnimation(&blockYAnim, 0, 40, 2000, EASE_OUT_CUBIC);
 80010f6:	2305      	movs	r3, #5
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80010fe:	4a06      	ldr	r2, [pc, #24]	@ (8001118 <InitBlockAnimation+0x3c>)
 8001100:	f04f 0100 	mov.w	r1, #0
 8001104:	4805      	ldr	r0, [pc, #20]	@ (800111c <InitBlockAnimation+0x40>)
 8001106:	f7ff ff69 	bl	8000fdc <OLED_InitAnimation>
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	42c80000 	.word	0x42c80000
 8001114:	2000047c 	.word	0x2000047c
 8001118:	42200000 	.word	0x42200000
 800111c:	20000494 	.word	0x20000494

08001120 <UpdateAndDrawBlock>:

// 更新并绘制方块
void UpdateAndDrawBlock()
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
    uint32_t currentTime = HAL_GetTick();
 8001126:	f000 fa91 	bl	800164c <HAL_GetTick>
 800112a:	6078      	str	r0, [r7, #4]

    // 更新动画
    OLED_UpdateAnimation(&blockXAnim, currentTime);
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	4813      	ldr	r0, [pc, #76]	@ (800117c <UpdateAndDrawBlock+0x5c>)
 8001130:	f7ff ff76 	bl	8001020 <OLED_UpdateAnimation>
    OLED_UpdateAnimation(&blockYAnim, currentTime);
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	4812      	ldr	r0, [pc, #72]	@ (8001180 <UpdateAndDrawBlock+0x60>)
 8001138:	f7ff ff72 	bl	8001020 <OLED_UpdateAnimation>

    // 获取当前位置
    uint8_t x = (uint8_t)OLED_GetAnimationValue(&blockXAnim);
 800113c:	480f      	ldr	r0, [pc, #60]	@ (800117c <UpdateAndDrawBlock+0x5c>)
 800113e:	f7ff ffc1 	bl	80010c4 <OLED_GetAnimationValue>
 8001142:	4603      	mov	r3, r0
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fadd 	bl	8000704 <__aeabi_f2uiz>
 800114a:	4603      	mov	r3, r0
 800114c:	70fb      	strb	r3, [r7, #3]
    uint8_t y = (uint8_t)OLED_GetAnimationValue(&blockYAnim);
 800114e:	480c      	ldr	r0, [pc, #48]	@ (8001180 <UpdateAndDrawBlock+0x60>)
 8001150:	f7ff ffb8 	bl	80010c4 <OLED_GetAnimationValue>
 8001154:	4603      	mov	r3, r0
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fad4 	bl	8000704 <__aeabi_f2uiz>
 800115c:	4603      	mov	r3, r0
 800115e:	70bb      	strb	r3, [r7, #2]

    // 清空缓冲区
    OLED_ClearBuffer();
 8001160:	f7ff fc18 	bl	8000994 <OLED_ClearBuffer>

    // 绘制方块
    OLED_DrawRectangle(x, y, 20, 20); // 绘制方块
 8001164:	78b9      	ldrb	r1, [r7, #2]
 8001166:	78f8      	ldrb	r0, [r7, #3]
 8001168:	2314      	movs	r3, #20
 800116a:	2214      	movs	r2, #20
 800116c:	f000 f84a 	bl	8001204 <OLED_DrawRectangle>

    // 更新显示
    OLED_UpdateDisplay();
 8001170:	f7ff fc66 	bl	8000a40 <OLED_UpdateDisplay>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	2000047c 	.word	0x2000047c
 8001180:	20000494 	.word	0x20000494

08001184 <AnimationLoop>:

// 在主循环中调用
void AnimationLoop()
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
    InitBlockAnimation();
 8001188:	f7ff ffa8 	bl	80010dc <InitBlockAnimation>

    while (1)
    {
        UpdateAndDrawBlock();
 800118c:	f7ff ffc8 	bl	8001120 <UpdateAndDrawBlock>
        HAL_Delay(10); // 约60FPS的刷新率
 8001190:	200a      	movs	r0, #10
 8001192:	f000 fa65 	bl	8001660 <HAL_Delay>

        // 如果动画已完成，可以重新开始或执行其他操作
        if (!blockXAnim.isActive && !blockYAnim.isActive)
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <AnimationLoop+0x2c>)
 8001198:	7d1b      	ldrb	r3, [r3, #20]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f6      	bne.n	800118c <AnimationLoop+0x8>
 800119e:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <AnimationLoop+0x30>)
 80011a0:	7d1b      	ldrb	r3, [r3, #20]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d000      	beq.n	80011a8 <AnimationLoop+0x24>
        UpdateAndDrawBlock();
 80011a6:	e7f1      	b.n	800118c <AnimationLoop+0x8>
        {
            // 重新开始动画或执行其他操作
            // InitBlockAnimation();
            break;
 80011a8:	bf00      	nop
        }
    }
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	2000047c 	.word	0x2000047c
 80011b4:	20000494 	.word	0x20000494

080011b8 <OLED_DrawTitleBar>:
uint8_t settingsSelection = 0;        // 设置页面选择项
uint8_t dataIndex = 0;                // 数据索引

// 绘制UI标题栏
void OLED_DrawTitleBar(char *title) // 确保标题长度不超过22个字符 //! UPDATEDISPLAY REQUIRED
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af02      	add	r7, sp, #8
 80011be:	6078      	str	r0, [r7, #4]
    unsigned char titleLength = strlen(title) * 6;
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7fe ffc3 	bl	800014c <strlen>
 80011c6:	4603      	mov	r3, r0
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	461a      	mov	r2, r3
 80011cc:	0052      	lsls	r2, r2, #1
 80011ce:	4413      	add	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	73fb      	strb	r3, [r7, #15]

    // 绘制标题栏背景 (白色填充)
    OLED_DrawFilledRectangle(0, 0, OLED_WIDTH, 8, 1);
 80011d4:	2301      	movs	r3, #1
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2308      	movs	r3, #8
 80011da:	2280      	movs	r2, #128	@ 0x80
 80011dc:	2100      	movs	r1, #0
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 f87f 	bl	80012e2 <OLED_DrawFilledRectangle>

    // 显示标题 (黑底白字，反色效果)
    OLED_DisplayStringInverted((OLED_WIDTH - titleLength) / 2, 0, title, 1);
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80011ea:	0fda      	lsrs	r2, r3, #31
 80011ec:	4413      	add	r3, r2
 80011ee:	105b      	asrs	r3, r3, #1
 80011f0:	b2d8      	uxtb	r0, r3
 80011f2:	2301      	movs	r3, #1
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	2100      	movs	r1, #0
 80011f8:	f7ff fd9a 	bl	8000d30 <OLED_DisplayStringInverted>
}
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <OLED_DrawRectangle>:
    }
}

// 绘制空心矩形
void OLED_DrawRectangle(uint8_t x, uint8_t y, uint8_t width, uint8_t height) //! UPDATEDISPLAY REQUIRED
{
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	4604      	mov	r4, r0
 800120c:	4608      	mov	r0, r1
 800120e:	4611      	mov	r1, r2
 8001210:	461a      	mov	r2, r3
 8001212:	4623      	mov	r3, r4
 8001214:	71fb      	strb	r3, [r7, #7]
 8001216:	4603      	mov	r3, r0
 8001218:	71bb      	strb	r3, [r7, #6]
 800121a:	460b      	mov	r3, r1
 800121c:	717b      	strb	r3, [r7, #5]
 800121e:	4613      	mov	r3, r2
 8001220:	713b      	strb	r3, [r7, #4]
    // 基础边界检查和裁剪
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT || width == 0 || height == 0)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	db57      	blt.n	80012da <OLED_DrawRectangle+0xd6>
 800122a:	79bb      	ldrb	r3, [r7, #6]
 800122c:	2b3f      	cmp	r3, #63	@ 0x3f
 800122e:	d854      	bhi.n	80012da <OLED_DrawRectangle+0xd6>
 8001230:	797b      	ldrb	r3, [r7, #5]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d051      	beq.n	80012da <OLED_DrawRectangle+0xd6>
 8001236:	793b      	ldrb	r3, [r7, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d04e      	beq.n	80012da <OLED_DrawRectangle+0xd6>
        return;
    if (x + width > OLED_WIDTH)
 800123c:	79fa      	ldrb	r2, [r7, #7]
 800123e:	797b      	ldrb	r3, [r7, #5]
 8001240:	4413      	add	r3, r2
 8001242:	2b80      	cmp	r3, #128	@ 0x80
 8001244:	dd06      	ble.n	8001254 <OLED_DrawRectangle+0x50>
        width = OLED_WIDTH - x;
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 800124c:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8001250:	3380      	adds	r3, #128	@ 0x80
 8001252:	717b      	strb	r3, [r7, #5]
    if (y + height > OLED_HEIGHT)
 8001254:	79ba      	ldrb	r2, [r7, #6]
 8001256:	793b      	ldrb	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	2b40      	cmp	r3, #64	@ 0x40
 800125c:	dd03      	ble.n	8001266 <OLED_DrawRectangle+0x62>
        height = OLED_HEIGHT - y;
 800125e:	79bb      	ldrb	r3, [r7, #6]
 8001260:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001264:	713b      	strb	r3, [r7, #4]

    uint8_t x2 = x + width - 1;
 8001266:	79fa      	ldrb	r2, [r7, #7]
 8001268:	797b      	ldrb	r3, [r7, #5]
 800126a:	4413      	add	r3, r2
 800126c:	b2db      	uxtb	r3, r3
 800126e:	3b01      	subs	r3, #1
 8001270:	737b      	strb	r3, [r7, #13]
    uint8_t y2 = y + height - 1;
 8001272:	79ba      	ldrb	r2, [r7, #6]
 8001274:	793b      	ldrb	r3, [r7, #4]
 8001276:	4413      	add	r3, r2
 8001278:	b2db      	uxtb	r3, r3
 800127a:	3b01      	subs	r3, #1
 800127c:	733b      	strb	r3, [r7, #12]

    // 绘制水平线
    for (uint8_t i = x; i <= x2; i++)
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	73fb      	strb	r3, [r7, #15]
 8001282:	e00e      	b.n	80012a2 <OLED_DrawRectangle+0x9e>
    {
        OLED_WritePixel(i, y, 1);  // 顶线
 8001284:	79b9      	ldrb	r1, [r7, #6]
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	2201      	movs	r2, #1
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fb8e 	bl	80009ac <OLED_WritePixel>
        OLED_WritePixel(i, y2, 1); // 底线
 8001290:	7b39      	ldrb	r1, [r7, #12]
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	2201      	movs	r2, #1
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fb88 	bl	80009ac <OLED_WritePixel>
    for (uint8_t i = x; i <= x2; i++)
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	3301      	adds	r3, #1
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	7bfa      	ldrb	r2, [r7, #15]
 80012a4:	7b7b      	ldrb	r3, [r7, #13]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d9ec      	bls.n	8001284 <OLED_DrawRectangle+0x80>
    }

    // 绘制垂直线
    for (uint8_t j = y + 1; j < y2; j++)
 80012aa:	79bb      	ldrb	r3, [r7, #6]
 80012ac:	3301      	adds	r3, #1
 80012ae:	73bb      	strb	r3, [r7, #14]
 80012b0:	e00e      	b.n	80012d0 <OLED_DrawRectangle+0xcc>
    {
        OLED_WritePixel(x, j, 1);  // 左线
 80012b2:	7bb9      	ldrb	r1, [r7, #14]
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	2201      	movs	r2, #1
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fb77 	bl	80009ac <OLED_WritePixel>
        OLED_WritePixel(x2, j, 1); // 右线
 80012be:	7bb9      	ldrb	r1, [r7, #14]
 80012c0:	7b7b      	ldrb	r3, [r7, #13]
 80012c2:	2201      	movs	r2, #1
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fb71 	bl	80009ac <OLED_WritePixel>
    for (uint8_t j = y + 1; j < y2; j++)
 80012ca:	7bbb      	ldrb	r3, [r7, #14]
 80012cc:	3301      	adds	r3, #1
 80012ce:	73bb      	strb	r3, [r7, #14]
 80012d0:	7bba      	ldrb	r2, [r7, #14]
 80012d2:	7b3b      	ldrb	r3, [r7, #12]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d3ec      	bcc.n	80012b2 <OLED_DrawRectangle+0xae>
 80012d8:	e000      	b.n	80012dc <OLED_DrawRectangle+0xd8>
        return;
 80012da:	bf00      	nop
    }
}
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd90      	pop	{r4, r7, pc}

080012e2 <OLED_DrawFilledRectangle>:

// 绘制填充矩形
void OLED_DrawFilledRectangle(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t color) //! UPDATEDISPLAY REQUIRED
{
 80012e2:	b590      	push	{r4, r7, lr}
 80012e4:	b085      	sub	sp, #20
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4604      	mov	r4, r0
 80012ea:	4608      	mov	r0, r1
 80012ec:	4611      	mov	r1, r2
 80012ee:	461a      	mov	r2, r3
 80012f0:	4623      	mov	r3, r4
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	4603      	mov	r3, r0
 80012f6:	71bb      	strb	r3, [r7, #6]
 80012f8:	460b      	mov	r3, r1
 80012fa:	717b      	strb	r3, [r7, #5]
 80012fc:	4613      	mov	r3, r2
 80012fe:	713b      	strb	r3, [r7, #4]
    // 边界检查和裁剪
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT || width == 0 || height == 0)
 8001300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	db45      	blt.n	8001394 <OLED_DrawFilledRectangle+0xb2>
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	2b3f      	cmp	r3, #63	@ 0x3f
 800130c:	d842      	bhi.n	8001394 <OLED_DrawFilledRectangle+0xb2>
 800130e:	797b      	ldrb	r3, [r7, #5]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d03f      	beq.n	8001394 <OLED_DrawFilledRectangle+0xb2>
 8001314:	793b      	ldrb	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d03c      	beq.n	8001394 <OLED_DrawFilledRectangle+0xb2>
        return;
    if (x + width > OLED_WIDTH)
 800131a:	79fa      	ldrb	r2, [r7, #7]
 800131c:	797b      	ldrb	r3, [r7, #5]
 800131e:	4413      	add	r3, r2
 8001320:	2b80      	cmp	r3, #128	@ 0x80
 8001322:	dd06      	ble.n	8001332 <OLED_DrawFilledRectangle+0x50>
        width = OLED_WIDTH - x;
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 800132a:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800132e:	3380      	adds	r3, #128	@ 0x80
 8001330:	717b      	strb	r3, [r7, #5]
    if (y + height > OLED_HEIGHT)
 8001332:	79ba      	ldrb	r2, [r7, #6]
 8001334:	793b      	ldrb	r3, [r7, #4]
 8001336:	4413      	add	r3, r2
 8001338:	2b40      	cmp	r3, #64	@ 0x40
 800133a:	dd03      	ble.n	8001344 <OLED_DrawFilledRectangle+0x62>
        height = OLED_HEIGHT - y;
 800133c:	79bb      	ldrb	r3, [r7, #6]
 800133e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001342:	713b      	strb	r3, [r7, #4]

    uint8_t x2 = x + width - 1;
 8001344:	79fa      	ldrb	r2, [r7, #7]
 8001346:	797b      	ldrb	r3, [r7, #5]
 8001348:	4413      	add	r3, r2
 800134a:	b2db      	uxtb	r3, r3
 800134c:	3b01      	subs	r3, #1
 800134e:	737b      	strb	r3, [r7, #13]
    uint8_t y2 = y + height - 1;
 8001350:	79ba      	ldrb	r2, [r7, #6]
 8001352:	793b      	ldrb	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	b2db      	uxtb	r3, r3
 8001358:	3b01      	subs	r3, #1
 800135a:	733b      	strb	r3, [r7, #12]

    // 逐像素填充
    for (uint8_t j = y; j <= y2; j++)
 800135c:	79bb      	ldrb	r3, [r7, #6]
 800135e:	73fb      	strb	r3, [r7, #15]
 8001360:	e013      	b.n	800138a <OLED_DrawFilledRectangle+0xa8>
    {
        for (uint8_t i = x; i <= x2; i++)
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	73bb      	strb	r3, [r7, #14]
 8001366:	e009      	b.n	800137c <OLED_DrawFilledRectangle+0x9a>
        {
            OLED_WritePixel(i, j, color);
 8001368:	f897 2020 	ldrb.w	r2, [r7, #32]
 800136c:	7bf9      	ldrb	r1, [r7, #15]
 800136e:	7bbb      	ldrb	r3, [r7, #14]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fb1b 	bl	80009ac <OLED_WritePixel>
        for (uint8_t i = x; i <= x2; i++)
 8001376:	7bbb      	ldrb	r3, [r7, #14]
 8001378:	3301      	adds	r3, #1
 800137a:	73bb      	strb	r3, [r7, #14]
 800137c:	7bba      	ldrb	r2, [r7, #14]
 800137e:	7b7b      	ldrb	r3, [r7, #13]
 8001380:	429a      	cmp	r2, r3
 8001382:	d9f1      	bls.n	8001368 <OLED_DrawFilledRectangle+0x86>
    for (uint8_t j = y; j <= y2; j++)
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	3301      	adds	r3, #1
 8001388:	73fb      	strb	r3, [r7, #15]
 800138a:	7bfa      	ldrb	r2, [r7, #15]
 800138c:	7b3b      	ldrb	r3, [r7, #12]
 800138e:	429a      	cmp	r2, r3
 8001390:	d9e7      	bls.n	8001362 <OLED_DrawFilledRectangle+0x80>
 8001392:	e000      	b.n	8001396 <OLED_DrawFilledRectangle+0xb4>
        return;
 8001394:	bf00      	nop
        }
    }
}
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	bd90      	pop	{r4, r7, pc}

0800139c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013a2:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <HAL_MspInit+0x5c>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	4a14      	ldr	r2, [pc, #80]	@ (80013f8 <HAL_MspInit+0x5c>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6193      	str	r3, [r2, #24]
 80013ae:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <HAL_MspInit+0x5c>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <HAL_MspInit+0x5c>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	4a0e      	ldr	r2, [pc, #56]	@ (80013f8 <HAL_MspInit+0x5c>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c4:	61d3      	str	r3, [r2, #28]
 80013c6:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <HAL_MspInit+0x5c>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013d2:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <HAL_MspInit+0x60>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	4a04      	ldr	r2, [pc, #16]	@ (80013fc <HAL_MspInit+0x60>)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ee:	bf00      	nop
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010000 	.word	0x40010000

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <NMI_Handler+0x4>

08001408 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <HardFault_Handler+0x4>

08001410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <MemManage_Handler+0x4>

08001418 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <BusFault_Handler+0x4>

08001420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <UsageFault_Handler+0x4>

08001428 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001450:	f000 f8ea 	bl	8001628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001468:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <MX_USART1_UART_Init+0x4c>)
 800146a:	4a12      	ldr	r2, [pc, #72]	@ (80014b4 <MX_USART1_UART_Init+0x50>)
 800146c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800146e:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <MX_USART1_UART_Init+0x4c>)
 8001470:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001474:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001476:	4b0e      	ldr	r3, [pc, #56]	@ (80014b0 <MX_USART1_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800147c:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <MX_USART1_UART_Init+0x4c>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001482:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <MX_USART1_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001488:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <MX_USART1_UART_Init+0x4c>)
 800148a:	220c      	movs	r2, #12
 800148c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148e:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <MX_USART1_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001494:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <MX_USART1_UART_Init+0x4c>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800149a:	4805      	ldr	r0, [pc, #20]	@ (80014b0 <MX_USART1_UART_Init+0x4c>)
 800149c:	f001 fc30 	bl	8002d00 <HAL_UART_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014a6:	f7ff fa62 	bl	800096e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200004ac 	.word	0x200004ac
 80014b4:	40013800 	.word	0x40013800

080014b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001544 <HAL_UART_MspInit+0x8c>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d131      	bne.n	800153c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001548 <HAL_UART_MspInit+0x90>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001548 <HAL_UART_MspInit+0x90>)
 80014de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e2:	6193      	str	r3, [r2, #24]
 80014e4:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <HAL_UART_MspInit+0x90>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f0:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <HAL_UART_MspInit+0x90>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a14      	ldr	r2, [pc, #80]	@ (8001548 <HAL_UART_MspInit+0x90>)
 80014f6:	f043 0304 	orr.w	r3, r3, #4
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <HAL_UART_MspInit+0x90>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001508:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800150c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 0310 	add.w	r3, r7, #16
 800151a:	4619      	mov	r1, r3
 800151c:	480b      	ldr	r0, [pc, #44]	@ (800154c <HAL_UART_MspInit+0x94>)
 800151e:	f000 f9a7 	bl	8001870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001522:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001526:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	4619      	mov	r1, r3
 8001536:	4805      	ldr	r0, [pc, #20]	@ (800154c <HAL_UART_MspInit+0x94>)
 8001538:	f000 f99a 	bl	8001870 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800153c:	bf00      	nop
 800153e:	3720      	adds	r7, #32
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40013800 	.word	0x40013800
 8001548:	40021000 	.word	0x40021000
 800154c:	40010800 	.word	0x40010800

08001550 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001550:	f7ff ff82 	bl	8001458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001554:	480b      	ldr	r0, [pc, #44]	@ (8001584 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001556:	490c      	ldr	r1, [pc, #48]	@ (8001588 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001558:	4a0c      	ldr	r2, [pc, #48]	@ (800158c <LoopFillZerobss+0x16>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800155c:	e002      	b.n	8001564 <LoopCopyDataInit>

0800155e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800155e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001562:	3304      	adds	r3, #4

08001564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001568:	d3f9      	bcc.n	800155e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156a:	4a09      	ldr	r2, [pc, #36]	@ (8001590 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800156c:	4c09      	ldr	r4, [pc, #36]	@ (8001594 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001570:	e001      	b.n	8001576 <LoopFillZerobss>

08001572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001574:	3204      	adds	r2, #4

08001576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001578:	d3fb      	bcc.n	8001572 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800157a:	f001 fca7 	bl	8002ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800157e:	f7ff f999 	bl	80008b4 <main>
  bx lr
 8001582:	4770      	bx	lr
  ldr r0, =_sdata
 8001584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001588:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800158c:	080031b8 	.word	0x080031b8
  ldr r2, =_sbss
 8001590:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001594:	200004f8 	.word	0x200004f8

08001598 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001598:	e7fe      	b.n	8001598 <ADC1_2_IRQHandler>
	...

0800159c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a0:	4b08      	ldr	r3, [pc, #32]	@ (80015c4 <HAL_Init+0x28>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a07      	ldr	r2, [pc, #28]	@ (80015c4 <HAL_Init+0x28>)
 80015a6:	f043 0310 	orr.w	r3, r3, #16
 80015aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ac:	2003      	movs	r0, #3
 80015ae:	f000 f92b 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b2:	200f      	movs	r0, #15
 80015b4:	f000 f808 	bl	80015c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b8:	f7ff fef0 	bl	800139c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40022000 	.word	0x40022000

080015c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <HAL_InitTick+0x54>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <HAL_InitTick+0x58>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015de:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f935 	bl	8001856 <HAL_SYSTICK_Config>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00e      	b.n	8001614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d80a      	bhi.n	8001612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fc:	2200      	movs	r2, #0
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f000 f90b 	bl	800181e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001608:	4a06      	ldr	r2, [pc, #24]	@ (8001624 <HAL_InitTick+0x5c>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e000      	b.n	8001614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000000 	.word	0x20000000
 8001620:	20000008 	.word	0x20000008
 8001624:	20000004 	.word	0x20000004

08001628 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800162c:	4b05      	ldr	r3, [pc, #20]	@ (8001644 <HAL_IncTick+0x1c>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <HAL_IncTick+0x20>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a03      	ldr	r2, [pc, #12]	@ (8001648 <HAL_IncTick+0x20>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	20000008 	.word	0x20000008
 8001648:	200004f4 	.word	0x200004f4

0800164c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b02      	ldr	r3, [pc, #8]	@ (800165c <HAL_GetTick+0x10>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	200004f4 	.word	0x200004f4

08001660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff fff0 	bl	800164c <HAL_GetTick>
 800166c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001678:	d005      	beq.n	8001686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167a:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <HAL_Delay+0x44>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001686:	bf00      	nop
 8001688:	f7ff ffe0 	bl	800164c <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	429a      	cmp	r2, r3
 8001696:	d8f7      	bhi.n	8001688 <HAL_Delay+0x28>
  {
  }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000008 	.word	0x20000008

080016a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	@ (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f4:	4b04      	ldr	r3, [pc, #16]	@ (8001708 <__NVIC_GetPriorityGrouping+0x18>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0307 	and.w	r3, r3, #7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	db0a      	blt.n	8001736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	b2da      	uxtb	r2, r3
 8001724:	490c      	ldr	r1, [pc, #48]	@ (8001758 <__NVIC_SetPriority+0x4c>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	0112      	lsls	r2, r2, #4
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	440b      	add	r3, r1
 8001730:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001734:	e00a      	b.n	800174c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4908      	ldr	r1, [pc, #32]	@ (800175c <__NVIC_SetPriority+0x50>)
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	3b04      	subs	r3, #4
 8001744:	0112      	lsls	r2, r2, #4
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	440b      	add	r3, r1
 800174a:	761a      	strb	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000e100 	.word	0xe000e100
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	@ 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f1c3 0307 	rsb	r3, r3, #7
 800177a:	2b04      	cmp	r3, #4
 800177c:	bf28      	it	cs
 800177e:	2304      	movcs	r3, #4
 8001780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3304      	adds	r3, #4
 8001786:	2b06      	cmp	r3, #6
 8001788:	d902      	bls.n	8001790 <NVIC_EncodePriority+0x30>
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3b03      	subs	r3, #3
 800178e:	e000      	b.n	8001792 <NVIC_EncodePriority+0x32>
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	f04f 32ff 	mov.w	r2, #4294967295
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43da      	mvns	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	401a      	ands	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	43d9      	mvns	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	4313      	orrs	r3, r2
         );
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3724      	adds	r7, #36	@ 0x24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017d4:	d301      	bcc.n	80017da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00f      	b.n	80017fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017da:	4a0a      	ldr	r2, [pc, #40]	@ (8001804 <SysTick_Config+0x40>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e2:	210f      	movs	r1, #15
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f7ff ff90 	bl	800170c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ec:	4b05      	ldr	r3, [pc, #20]	@ (8001804 <SysTick_Config+0x40>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f2:	4b04      	ldr	r3, [pc, #16]	@ (8001804 <SysTick_Config+0x40>)
 80017f4:	2207      	movs	r2, #7
 80017f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	e000e010 	.word	0xe000e010

08001808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff49 	bl	80016a8 <__NVIC_SetPriorityGrouping>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001830:	f7ff ff5e 	bl	80016f0 <__NVIC_GetPriorityGrouping>
 8001834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	6978      	ldr	r0, [r7, #20]
 800183c:	f7ff ff90 	bl	8001760 <NVIC_EncodePriority>
 8001840:	4602      	mov	r2, r0
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff5f 	bl	800170c <__NVIC_SetPriority>
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ffb0 	bl	80017c4 <SysTick_Config>
 8001864:	4603      	mov	r3, r0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001870:	b480      	push	{r7}
 8001872:	b08b      	sub	sp, #44	@ 0x2c
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800187e:	2300      	movs	r3, #0
 8001880:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001882:	e169      	b.n	8001b58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001884:	2201      	movs	r2, #1
 8001886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	429a      	cmp	r2, r3
 800189e:	f040 8158 	bne.w	8001b52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4a9a      	ldr	r2, [pc, #616]	@ (8001b10 <HAL_GPIO_Init+0x2a0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d05e      	beq.n	800196a <HAL_GPIO_Init+0xfa>
 80018ac:	4a98      	ldr	r2, [pc, #608]	@ (8001b10 <HAL_GPIO_Init+0x2a0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d875      	bhi.n	800199e <HAL_GPIO_Init+0x12e>
 80018b2:	4a98      	ldr	r2, [pc, #608]	@ (8001b14 <HAL_GPIO_Init+0x2a4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d058      	beq.n	800196a <HAL_GPIO_Init+0xfa>
 80018b8:	4a96      	ldr	r2, [pc, #600]	@ (8001b14 <HAL_GPIO_Init+0x2a4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d86f      	bhi.n	800199e <HAL_GPIO_Init+0x12e>
 80018be:	4a96      	ldr	r2, [pc, #600]	@ (8001b18 <HAL_GPIO_Init+0x2a8>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d052      	beq.n	800196a <HAL_GPIO_Init+0xfa>
 80018c4:	4a94      	ldr	r2, [pc, #592]	@ (8001b18 <HAL_GPIO_Init+0x2a8>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d869      	bhi.n	800199e <HAL_GPIO_Init+0x12e>
 80018ca:	4a94      	ldr	r2, [pc, #592]	@ (8001b1c <HAL_GPIO_Init+0x2ac>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d04c      	beq.n	800196a <HAL_GPIO_Init+0xfa>
 80018d0:	4a92      	ldr	r2, [pc, #584]	@ (8001b1c <HAL_GPIO_Init+0x2ac>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d863      	bhi.n	800199e <HAL_GPIO_Init+0x12e>
 80018d6:	4a92      	ldr	r2, [pc, #584]	@ (8001b20 <HAL_GPIO_Init+0x2b0>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d046      	beq.n	800196a <HAL_GPIO_Init+0xfa>
 80018dc:	4a90      	ldr	r2, [pc, #576]	@ (8001b20 <HAL_GPIO_Init+0x2b0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d85d      	bhi.n	800199e <HAL_GPIO_Init+0x12e>
 80018e2:	2b12      	cmp	r3, #18
 80018e4:	d82a      	bhi.n	800193c <HAL_GPIO_Init+0xcc>
 80018e6:	2b12      	cmp	r3, #18
 80018e8:	d859      	bhi.n	800199e <HAL_GPIO_Init+0x12e>
 80018ea:	a201      	add	r2, pc, #4	@ (adr r2, 80018f0 <HAL_GPIO_Init+0x80>)
 80018ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f0:	0800196b 	.word	0x0800196b
 80018f4:	08001945 	.word	0x08001945
 80018f8:	08001957 	.word	0x08001957
 80018fc:	08001999 	.word	0x08001999
 8001900:	0800199f 	.word	0x0800199f
 8001904:	0800199f 	.word	0x0800199f
 8001908:	0800199f 	.word	0x0800199f
 800190c:	0800199f 	.word	0x0800199f
 8001910:	0800199f 	.word	0x0800199f
 8001914:	0800199f 	.word	0x0800199f
 8001918:	0800199f 	.word	0x0800199f
 800191c:	0800199f 	.word	0x0800199f
 8001920:	0800199f 	.word	0x0800199f
 8001924:	0800199f 	.word	0x0800199f
 8001928:	0800199f 	.word	0x0800199f
 800192c:	0800199f 	.word	0x0800199f
 8001930:	0800199f 	.word	0x0800199f
 8001934:	0800194d 	.word	0x0800194d
 8001938:	08001961 	.word	0x08001961
 800193c:	4a79      	ldr	r2, [pc, #484]	@ (8001b24 <HAL_GPIO_Init+0x2b4>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d013      	beq.n	800196a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001942:	e02c      	b.n	800199e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	623b      	str	r3, [r7, #32]
          break;
 800194a:	e029      	b.n	80019a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	3304      	adds	r3, #4
 8001952:	623b      	str	r3, [r7, #32]
          break;
 8001954:	e024      	b.n	80019a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	3308      	adds	r3, #8
 800195c:	623b      	str	r3, [r7, #32]
          break;
 800195e:	e01f      	b.n	80019a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	330c      	adds	r3, #12
 8001966:	623b      	str	r3, [r7, #32]
          break;
 8001968:	e01a      	b.n	80019a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d102      	bne.n	8001978 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001972:	2304      	movs	r3, #4
 8001974:	623b      	str	r3, [r7, #32]
          break;
 8001976:	e013      	b.n	80019a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d105      	bne.n	800198c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001980:	2308      	movs	r3, #8
 8001982:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	611a      	str	r2, [r3, #16]
          break;
 800198a:	e009      	b.n	80019a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800198c:	2308      	movs	r3, #8
 800198e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69fa      	ldr	r2, [r7, #28]
 8001994:	615a      	str	r2, [r3, #20]
          break;
 8001996:	e003      	b.n	80019a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
          break;
 800199c:	e000      	b.n	80019a0 <HAL_GPIO_Init+0x130>
          break;
 800199e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	2bff      	cmp	r3, #255	@ 0xff
 80019a4:	d801      	bhi.n	80019aa <HAL_GPIO_Init+0x13a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	e001      	b.n	80019ae <HAL_GPIO_Init+0x13e>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3304      	adds	r3, #4
 80019ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2bff      	cmp	r3, #255	@ 0xff
 80019b4:	d802      	bhi.n	80019bc <HAL_GPIO_Init+0x14c>
 80019b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	e002      	b.n	80019c2 <HAL_GPIO_Init+0x152>
 80019bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019be:	3b08      	subs	r3, #8
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	210f      	movs	r1, #15
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	fa01 f303 	lsl.w	r3, r1, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	401a      	ands	r2, r3
 80019d4:	6a39      	ldr	r1, [r7, #32]
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	fa01 f303 	lsl.w	r3, r1, r3
 80019dc:	431a      	orrs	r2, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 80b1 	beq.w	8001b52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001b28 <HAL_GPIO_Init+0x2b8>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001b28 <HAL_GPIO_Init+0x2b8>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6193      	str	r3, [r2, #24]
 80019fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001b28 <HAL_GPIO_Init+0x2b8>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a08:	4a48      	ldr	r2, [pc, #288]	@ (8001b2c <HAL_GPIO_Init+0x2bc>)
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	3302      	adds	r3, #2
 8001a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	220f      	movs	r2, #15
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a40      	ldr	r2, [pc, #256]	@ (8001b30 <HAL_GPIO_Init+0x2c0>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d013      	beq.n	8001a5c <HAL_GPIO_Init+0x1ec>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a3f      	ldr	r2, [pc, #252]	@ (8001b34 <HAL_GPIO_Init+0x2c4>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d00d      	beq.n	8001a58 <HAL_GPIO_Init+0x1e8>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b38 <HAL_GPIO_Init+0x2c8>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d007      	beq.n	8001a54 <HAL_GPIO_Init+0x1e4>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a3d      	ldr	r2, [pc, #244]	@ (8001b3c <HAL_GPIO_Init+0x2cc>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d101      	bne.n	8001a50 <HAL_GPIO_Init+0x1e0>
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e006      	b.n	8001a5e <HAL_GPIO_Init+0x1ee>
 8001a50:	2304      	movs	r3, #4
 8001a52:	e004      	b.n	8001a5e <HAL_GPIO_Init+0x1ee>
 8001a54:	2302      	movs	r3, #2
 8001a56:	e002      	b.n	8001a5e <HAL_GPIO_Init+0x1ee>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <HAL_GPIO_Init+0x1ee>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a60:	f002 0203 	and.w	r2, r2, #3
 8001a64:	0092      	lsls	r2, r2, #2
 8001a66:	4093      	lsls	r3, r2
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a6e:	492f      	ldr	r1, [pc, #188]	@ (8001b2c <HAL_GPIO_Init+0x2bc>)
 8001a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a72:	089b      	lsrs	r3, r3, #2
 8001a74:	3302      	adds	r3, #2
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d006      	beq.n	8001a96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a88:	4b2d      	ldr	r3, [pc, #180]	@ (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	492c      	ldr	r1, [pc, #176]	@ (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	608b      	str	r3, [r1, #8]
 8001a94:	e006      	b.n	8001aa4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a96:	4b2a      	ldr	r3, [pc, #168]	@ (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	4928      	ldr	r1, [pc, #160]	@ (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d006      	beq.n	8001abe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ab0:	4b23      	ldr	r3, [pc, #140]	@ (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	4922      	ldr	r1, [pc, #136]	@ (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	60cb      	str	r3, [r1, #12]
 8001abc:	e006      	b.n	8001acc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001abe:	4b20      	ldr	r3, [pc, #128]	@ (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	491e      	ldr	r1, [pc, #120]	@ (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d006      	beq.n	8001ae6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ad8:	4b19      	ldr	r3, [pc, #100]	@ (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	4918      	ldr	r1, [pc, #96]	@ (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
 8001ae4:	e006      	b.n	8001af4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ae6:	4b16      	ldr	r3, [pc, #88]	@ (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	4914      	ldr	r1, [pc, #80]	@ (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d021      	beq.n	8001b44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b00:	4b0f      	ldr	r3, [pc, #60]	@ (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	490e      	ldr	r1, [pc, #56]	@ (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]
 8001b0c:	e021      	b.n	8001b52 <HAL_GPIO_Init+0x2e2>
 8001b0e:	bf00      	nop
 8001b10:	10320000 	.word	0x10320000
 8001b14:	10310000 	.word	0x10310000
 8001b18:	10220000 	.word	0x10220000
 8001b1c:	10210000 	.word	0x10210000
 8001b20:	10120000 	.word	0x10120000
 8001b24:	10110000 	.word	0x10110000
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	40010800 	.word	0x40010800
 8001b34:	40010c00 	.word	0x40010c00
 8001b38:	40011000 	.word	0x40011000
 8001b3c:	40011400 	.word	0x40011400
 8001b40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_GPIO_Init+0x304>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	4909      	ldr	r1, [pc, #36]	@ (8001b74 <HAL_GPIO_Init+0x304>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b54:	3301      	adds	r3, #1
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f47f ae8e 	bne.w	8001884 <HAL_GPIO_Init+0x14>
  }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	372c      	adds	r7, #44	@ 0x2c
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr
 8001b74:	40010400 	.word	0x40010400

08001b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	807b      	strh	r3, [r7, #2]
 8001b84:	4613      	mov	r3, r2
 8001b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b88:	787b      	ldrb	r3, [r7, #1]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b8e:	887a      	ldrh	r2, [r7, #2]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b94:	e003      	b.n	8001b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b96:	887b      	ldrh	r3, [r7, #2]
 8001b98:	041a      	lsls	r2, r3, #16
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	611a      	str	r2, [r3, #16]
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e12b      	b.n	8001e12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d106      	bne.n	8001bd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7fe fe32 	bl	8000838 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2224      	movs	r2, #36	@ 0x24
 8001bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0201 	bic.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001bfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c0c:	f001 f832 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 8001c10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4a81      	ldr	r2, [pc, #516]	@ (8001e1c <HAL_I2C_Init+0x274>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d807      	bhi.n	8001c2c <HAL_I2C_Init+0x84>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4a80      	ldr	r2, [pc, #512]	@ (8001e20 <HAL_I2C_Init+0x278>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	bf94      	ite	ls
 8001c24:	2301      	movls	r3, #1
 8001c26:	2300      	movhi	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	e006      	b.n	8001c3a <HAL_I2C_Init+0x92>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4a7d      	ldr	r2, [pc, #500]	@ (8001e24 <HAL_I2C_Init+0x27c>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	bf94      	ite	ls
 8001c34:	2301      	movls	r3, #1
 8001c36:	2300      	movhi	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e0e7      	b.n	8001e12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4a78      	ldr	r2, [pc, #480]	@ (8001e28 <HAL_I2C_Init+0x280>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	0c9b      	lsrs	r3, r3, #18
 8001c4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	4a6a      	ldr	r2, [pc, #424]	@ (8001e1c <HAL_I2C_Init+0x274>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d802      	bhi.n	8001c7c <HAL_I2C_Init+0xd4>
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	e009      	b.n	8001c90 <HAL_I2C_Init+0xe8>
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	4a69      	ldr	r2, [pc, #420]	@ (8001e2c <HAL_I2C_Init+0x284>)
 8001c88:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8c:	099b      	lsrs	r3, r3, #6
 8001c8e:	3301      	adds	r3, #1
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	430b      	orrs	r3, r1
 8001c96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001ca2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	495c      	ldr	r1, [pc, #368]	@ (8001e1c <HAL_I2C_Init+0x274>)
 8001cac:	428b      	cmp	r3, r1
 8001cae:	d819      	bhi.n	8001ce4 <HAL_I2C_Init+0x13c>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	1e59      	subs	r1, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cbe:	1c59      	adds	r1, r3, #1
 8001cc0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001cc4:	400b      	ands	r3, r1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00a      	beq.n	8001ce0 <HAL_I2C_Init+0x138>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1e59      	subs	r1, r3, #1
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cd8:	3301      	adds	r3, #1
 8001cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cde:	e051      	b.n	8001d84 <HAL_I2C_Init+0x1dc>
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	e04f      	b.n	8001d84 <HAL_I2C_Init+0x1dc>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d111      	bne.n	8001d10 <HAL_I2C_Init+0x168>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1e58      	subs	r0, r3, #1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	440b      	add	r3, r1
 8001cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cfe:	3301      	adds	r3, #1
 8001d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf0c      	ite	eq
 8001d08:	2301      	moveq	r3, #1
 8001d0a:	2300      	movne	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	e012      	b.n	8001d36 <HAL_I2C_Init+0x18e>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1e58      	subs	r0, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6859      	ldr	r1, [r3, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	0099      	lsls	r1, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d26:	3301      	adds	r3, #1
 8001d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	bf0c      	ite	eq
 8001d30:	2301      	moveq	r3, #1
 8001d32:	2300      	movne	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_I2C_Init+0x196>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e022      	b.n	8001d84 <HAL_I2C_Init+0x1dc>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10e      	bne.n	8001d64 <HAL_I2C_Init+0x1bc>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1e58      	subs	r0, r3, #1
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6859      	ldr	r1, [r3, #4]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	440b      	add	r3, r1
 8001d54:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d58:	3301      	adds	r3, #1
 8001d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d62:	e00f      	b.n	8001d84 <HAL_I2C_Init+0x1dc>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	1e58      	subs	r0, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6859      	ldr	r1, [r3, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	0099      	lsls	r1, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	6809      	ldr	r1, [r1, #0]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69da      	ldr	r2, [r3, #28]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001db2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6911      	ldr	r1, [r2, #16]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68d2      	ldr	r2, [r2, #12]
 8001dbe:	4311      	orrs	r1, r2
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	430b      	orrs	r3, r1
 8001dc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695a      	ldr	r2, [r3, #20]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0201 	orr.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	000186a0 	.word	0x000186a0
 8001e20:	001e847f 	.word	0x001e847f
 8001e24:	003d08ff 	.word	0x003d08ff
 8001e28:	431bde83 	.word	0x431bde83
 8001e2c:	10624dd3 	.word	0x10624dd3

08001e30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	817b      	strh	r3, [r7, #10]
 8001e40:	4613      	mov	r3, r2
 8001e42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff fc02 	bl	800164c <HAL_GetTick>
 8001e48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b20      	cmp	r3, #32
 8001e54:	f040 80e0 	bne.w	8002018 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	2319      	movs	r3, #25
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4970      	ldr	r1, [pc, #448]	@ (8002024 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 f964 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e0d3      	b.n	800201a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_I2C_Master_Transmit+0x50>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e0cc      	b.n	800201a <HAL_I2C_Master_Transmit+0x1ea>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d007      	beq.n	8001ea6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0201 	orr.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2221      	movs	r2, #33	@ 0x21
 8001eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	893a      	ldrh	r2, [r7, #8]
 8001ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4a50      	ldr	r2, [pc, #320]	@ (8002028 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ee6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ee8:	8979      	ldrh	r1, [r7, #10]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	6a3a      	ldr	r2, [r7, #32]
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 f89c 	bl	800202c <I2C_MasterRequestWrite>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e08d      	b.n	800201a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f14:	e066      	b.n	8001fe4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	6a39      	ldr	r1, [r7, #32]
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 fa22 	bl	8002364 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00d      	beq.n	8001f42 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d107      	bne.n	8001f3e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e06b      	b.n	800201a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f46:	781a      	ldrb	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d11b      	bne.n	8001fb8 <HAL_I2C_Master_Transmit+0x188>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d017      	beq.n	8001fb8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8c:	781a      	ldrb	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	6a39      	ldr	r1, [r7, #32]
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 fa19 	bl	80023f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00d      	beq.n	8001fe4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d107      	bne.n	8001fe0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fde:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e01a      	b.n	800201a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d194      	bne.n	8001f16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ffa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2220      	movs	r2, #32
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002014:	2300      	movs	r3, #0
 8002016:	e000      	b.n	800201a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002018:	2302      	movs	r3, #2
  }
}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	00100002 	.word	0x00100002
 8002028:	ffff0000 	.word	0xffff0000

0800202c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af02      	add	r7, sp, #8
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	460b      	mov	r3, r1
 800203a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002040:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2b08      	cmp	r3, #8
 8002046:	d006      	beq.n	8002056 <I2C_MasterRequestWrite+0x2a>
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d003      	beq.n	8002056 <I2C_MasterRequestWrite+0x2a>
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002054:	d108      	bne.n	8002068 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	e00b      	b.n	8002080 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206c:	2b12      	cmp	r3, #18
 800206e:	d107      	bne.n	8002080 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800207e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f000 f84f 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00d      	beq.n	80020b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020a6:	d103      	bne.n	80020b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e035      	b.n	8002120 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020bc:	d108      	bne.n	80020d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020be:	897b      	ldrh	r3, [r7, #10]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	461a      	mov	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80020cc:	611a      	str	r2, [r3, #16]
 80020ce:	e01b      	b.n	8002108 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020d0:	897b      	ldrh	r3, [r7, #10]
 80020d2:	11db      	asrs	r3, r3, #7
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	f003 0306 	and.w	r3, r3, #6
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f063 030f 	orn	r3, r3, #15
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	490e      	ldr	r1, [pc, #56]	@ (8002128 <I2C_MasterRequestWrite+0xfc>)
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f898 	bl	8002224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e010      	b.n	8002120 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020fe:	897b      	ldrh	r3, [r7, #10]
 8002100:	b2da      	uxtb	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	4907      	ldr	r1, [pc, #28]	@ (800212c <I2C_MasterRequestWrite+0x100>)
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f888 	bl	8002224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	00010008 	.word	0x00010008
 800212c:	00010002 	.word	0x00010002

08002130 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	4613      	mov	r3, r2
 800213e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002140:	e048      	b.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d044      	beq.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800214a:	f7ff fa7f 	bl	800164c <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d302      	bcc.n	8002160 <I2C_WaitOnFlagUntilTimeout+0x30>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d139      	bne.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	0c1b      	lsrs	r3, r3, #16
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b01      	cmp	r3, #1
 8002168:	d10d      	bne.n	8002186 <I2C_WaitOnFlagUntilTimeout+0x56>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	43da      	mvns	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	4013      	ands	r3, r2
 8002176:	b29b      	uxth	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	e00c      	b.n	80021a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	43da      	mvns	r2, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	4013      	ands	r3, r2
 8002192:	b29b      	uxth	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf0c      	ite	eq
 8002198:	2301      	moveq	r3, #1
 800219a:	2300      	movne	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d116      	bne.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c0:	f043 0220 	orr.w	r2, r3, #32
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e023      	b.n	800221c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	0c1b      	lsrs	r3, r3, #16
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d10d      	bne.n	80021fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	43da      	mvns	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	4013      	ands	r3, r2
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	e00c      	b.n	8002214 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	43da      	mvns	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	4013      	ands	r3, r2
 8002206:	b29b      	uxth	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf0c      	ite	eq
 800220c:	2301      	moveq	r3, #1
 800220e:	2300      	movne	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	429a      	cmp	r2, r3
 8002218:	d093      	beq.n	8002142 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002232:	e071      	b.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800223e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002242:	d123      	bne.n	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002252:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800225c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002278:	f043 0204 	orr.w	r2, r3, #4
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e067      	b.n	800235c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002292:	d041      	beq.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002294:	f7ff f9da 	bl	800164c <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d302      	bcc.n	80022aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d136      	bne.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	0c1b      	lsrs	r3, r3, #16
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d10c      	bne.n	80022ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	43da      	mvns	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	4013      	ands	r3, r2
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bf14      	ite	ne
 80022c6:	2301      	movne	r3, #1
 80022c8:	2300      	moveq	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	e00b      	b.n	80022e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	43da      	mvns	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	4013      	ands	r3, r2
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf14      	ite	ne
 80022e0:	2301      	movne	r3, #1
 80022e2:	2300      	moveq	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d016      	beq.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	f043 0220 	orr.w	r2, r3, #32
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e021      	b.n	800235c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	0c1b      	lsrs	r3, r3, #16
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b01      	cmp	r3, #1
 8002320:	d10c      	bne.n	800233c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	43da      	mvns	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	4013      	ands	r3, r2
 800232e:	b29b      	uxth	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	bf14      	ite	ne
 8002334:	2301      	movne	r3, #1
 8002336:	2300      	moveq	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	e00b      	b.n	8002354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	43da      	mvns	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4013      	ands	r3, r2
 8002348:	b29b      	uxth	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	bf14      	ite	ne
 800234e:	2301      	movne	r3, #1
 8002350:	2300      	moveq	r3, #0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	f47f af6d 	bne.w	8002234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002370:	e034      	b.n	80023dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 f886 	bl	8002484 <I2C_IsAcknowledgeFailed>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e034      	b.n	80023ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002388:	d028      	beq.n	80023dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800238a:	f7ff f95f 	bl	800164c <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	429a      	cmp	r2, r3
 8002398:	d302      	bcc.n	80023a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d11d      	bne.n	80023dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023aa:	2b80      	cmp	r3, #128	@ 0x80
 80023ac:	d016      	beq.n	80023dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	f043 0220 	orr.w	r2, r3, #32
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e007      	b.n	80023ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e6:	2b80      	cmp	r3, #128	@ 0x80
 80023e8:	d1c3      	bne.n	8002372 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002400:	e034      	b.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 f83e 	bl	8002484 <I2C_IsAcknowledgeFailed>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e034      	b.n	800247c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002418:	d028      	beq.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800241a:	f7ff f917 	bl	800164c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	429a      	cmp	r2, r3
 8002428:	d302      	bcc.n	8002430 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d11d      	bne.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	2b04      	cmp	r3, #4
 800243c:	d016      	beq.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002458:	f043 0220 	orr.w	r2, r3, #32
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e007      	b.n	800247c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b04      	cmp	r3, #4
 8002478:	d1c3      	bne.n	8002402 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800249a:	d11b      	bne.n	80024d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c0:	f043 0204 	orr.w	r2, r3, #4
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e272      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 8087 	beq.w	800260e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002500:	4b92      	ldr	r3, [pc, #584]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	2b04      	cmp	r3, #4
 800250a:	d00c      	beq.n	8002526 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800250c:	4b8f      	ldr	r3, [pc, #572]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b08      	cmp	r3, #8
 8002516:	d112      	bne.n	800253e <HAL_RCC_OscConfig+0x5e>
 8002518:	4b8c      	ldr	r3, [pc, #560]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002524:	d10b      	bne.n	800253e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002526:	4b89      	ldr	r3, [pc, #548]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d06c      	beq.n	800260c <HAL_RCC_OscConfig+0x12c>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d168      	bne.n	800260c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e24c      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002546:	d106      	bne.n	8002556 <HAL_RCC_OscConfig+0x76>
 8002548:	4b80      	ldr	r3, [pc, #512]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a7f      	ldr	r2, [pc, #508]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 800254e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	e02e      	b.n	80025b4 <HAL_RCC_OscConfig+0xd4>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0x98>
 800255e:	4b7b      	ldr	r3, [pc, #492]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a7a      	ldr	r2, [pc, #488]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002564:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b78      	ldr	r3, [pc, #480]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a77      	ldr	r2, [pc, #476]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002570:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e01d      	b.n	80025b4 <HAL_RCC_OscConfig+0xd4>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0xbc>
 8002582:	4b72      	ldr	r3, [pc, #456]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a71      	ldr	r2, [pc, #452]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002588:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	4b6f      	ldr	r3, [pc, #444]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a6e      	ldr	r2, [pc, #440]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e00b      	b.n	80025b4 <HAL_RCC_OscConfig+0xd4>
 800259c:	4b6b      	ldr	r3, [pc, #428]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a6a      	ldr	r2, [pc, #424]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 80025a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	4b68      	ldr	r3, [pc, #416]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a67      	ldr	r2, [pc, #412]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 80025ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d013      	beq.n	80025e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7ff f846 	bl	800164c <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c4:	f7ff f842 	bl	800164c <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	@ 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e200      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	4b5d      	ldr	r3, [pc, #372]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0xe4>
 80025e2:	e014      	b.n	800260e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7ff f832 	bl	800164c <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ec:	f7ff f82e 	bl	800164c <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	@ 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e1ec      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fe:	4b53      	ldr	r3, [pc, #332]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x10c>
 800260a:	e000      	b.n	800260e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d063      	beq.n	80026e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800261a:	4b4c      	ldr	r3, [pc, #304]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00b      	beq.n	800263e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002626:	4b49      	ldr	r3, [pc, #292]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b08      	cmp	r3, #8
 8002630:	d11c      	bne.n	800266c <HAL_RCC_OscConfig+0x18c>
 8002632:	4b46      	ldr	r3, [pc, #280]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d116      	bne.n	800266c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263e:	4b43      	ldr	r3, [pc, #268]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_RCC_OscConfig+0x176>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d001      	beq.n	8002656 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e1c0      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002656:	4b3d      	ldr	r3, [pc, #244]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4939      	ldr	r1, [pc, #228]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266a:	e03a      	b.n	80026e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d020      	beq.n	80026b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002674:	4b36      	ldr	r3, [pc, #216]	@ (8002750 <HAL_RCC_OscConfig+0x270>)
 8002676:	2201      	movs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267a:	f7fe ffe7 	bl	800164c <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002682:	f7fe ffe3 	bl	800164c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e1a1      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002694:	4b2d      	ldr	r3, [pc, #180]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a0:	4b2a      	ldr	r3, [pc, #168]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4927      	ldr	r1, [pc, #156]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	600b      	str	r3, [r1, #0]
 80026b4:	e015      	b.n	80026e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b6:	4b26      	ldr	r3, [pc, #152]	@ (8002750 <HAL_RCC_OscConfig+0x270>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7fe ffc6 	bl	800164c <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c4:	f7fe ffc2 	bl	800164c <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e180      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d6:	4b1d      	ldr	r3, [pc, #116]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d03a      	beq.n	8002764 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d019      	beq.n	800272a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f6:	4b17      	ldr	r3, [pc, #92]	@ (8002754 <HAL_RCC_OscConfig+0x274>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fc:	f7fe ffa6 	bl	800164c <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002704:	f7fe ffa2 	bl	800164c <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e160      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002716:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002722:	2001      	movs	r0, #1
 8002724:	f000 face 	bl	8002cc4 <RCC_Delay>
 8002728:	e01c      	b.n	8002764 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800272a:	4b0a      	ldr	r3, [pc, #40]	@ (8002754 <HAL_RCC_OscConfig+0x274>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002730:	f7fe ff8c 	bl	800164c <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002736:	e00f      	b.n	8002758 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002738:	f7fe ff88 	bl	800164c <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d908      	bls.n	8002758 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e146      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	42420000 	.word	0x42420000
 8002754:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002758:	4b92      	ldr	r3, [pc, #584]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1e9      	bne.n	8002738 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 80a6 	beq.w	80028be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002772:	2300      	movs	r3, #0
 8002774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002776:	4b8b      	ldr	r3, [pc, #556]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10d      	bne.n	800279e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	4b88      	ldr	r3, [pc, #544]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	4a87      	ldr	r2, [pc, #540]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800278c:	61d3      	str	r3, [r2, #28]
 800278e:	4b85      	ldr	r3, [pc, #532]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279a:	2301      	movs	r3, #1
 800279c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279e:	4b82      	ldr	r3, [pc, #520]	@ (80029a8 <HAL_RCC_OscConfig+0x4c8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d118      	bne.n	80027dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027aa:	4b7f      	ldr	r3, [pc, #508]	@ (80029a8 <HAL_RCC_OscConfig+0x4c8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a7e      	ldr	r2, [pc, #504]	@ (80029a8 <HAL_RCC_OscConfig+0x4c8>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b6:	f7fe ff49 	bl	800164c <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027be:	f7fe ff45 	bl	800164c <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b64      	cmp	r3, #100	@ 0x64
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e103      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d0:	4b75      	ldr	r3, [pc, #468]	@ (80029a8 <HAL_RCC_OscConfig+0x4c8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d106      	bne.n	80027f2 <HAL_RCC_OscConfig+0x312>
 80027e4:	4b6f      	ldr	r3, [pc, #444]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	4a6e      	ldr	r2, [pc, #440]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6213      	str	r3, [r2, #32]
 80027f0:	e02d      	b.n	800284e <HAL_RCC_OscConfig+0x36e>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10c      	bne.n	8002814 <HAL_RCC_OscConfig+0x334>
 80027fa:	4b6a      	ldr	r3, [pc, #424]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	4a69      	ldr	r2, [pc, #420]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	6213      	str	r3, [r2, #32]
 8002806:	4b67      	ldr	r3, [pc, #412]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	4a66      	ldr	r2, [pc, #408]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800280c:	f023 0304 	bic.w	r3, r3, #4
 8002810:	6213      	str	r3, [r2, #32]
 8002812:	e01c      	b.n	800284e <HAL_RCC_OscConfig+0x36e>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	2b05      	cmp	r3, #5
 800281a:	d10c      	bne.n	8002836 <HAL_RCC_OscConfig+0x356>
 800281c:	4b61      	ldr	r3, [pc, #388]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	4a60      	ldr	r2, [pc, #384]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002822:	f043 0304 	orr.w	r3, r3, #4
 8002826:	6213      	str	r3, [r2, #32]
 8002828:	4b5e      	ldr	r3, [pc, #376]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	4a5d      	ldr	r2, [pc, #372]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6213      	str	r3, [r2, #32]
 8002834:	e00b      	b.n	800284e <HAL_RCC_OscConfig+0x36e>
 8002836:	4b5b      	ldr	r3, [pc, #364]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	4a5a      	ldr	r2, [pc, #360]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800283c:	f023 0301 	bic.w	r3, r3, #1
 8002840:	6213      	str	r3, [r2, #32]
 8002842:	4b58      	ldr	r3, [pc, #352]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	4a57      	ldr	r2, [pc, #348]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	f023 0304 	bic.w	r3, r3, #4
 800284c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d015      	beq.n	8002882 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002856:	f7fe fef9 	bl	800164c <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285c:	e00a      	b.n	8002874 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7fe fef5 	bl	800164c <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286c:	4293      	cmp	r3, r2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e0b1      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002874:	4b4b      	ldr	r3, [pc, #300]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0ee      	beq.n	800285e <HAL_RCC_OscConfig+0x37e>
 8002880:	e014      	b.n	80028ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002882:	f7fe fee3 	bl	800164c <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002888:	e00a      	b.n	80028a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288a:	f7fe fedf 	bl	800164c <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e09b      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a0:	4b40      	ldr	r3, [pc, #256]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1ee      	bne.n	800288a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d105      	bne.n	80028be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b2:	4b3c      	ldr	r3, [pc, #240]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	4a3b      	ldr	r2, [pc, #236]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8087 	beq.w	80029d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c8:	4b36      	ldr	r3, [pc, #216]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d061      	beq.n	8002998 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d146      	bne.n	800296a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028dc:	4b33      	ldr	r3, [pc, #204]	@ (80029ac <HAL_RCC_OscConfig+0x4cc>)
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7fe feb3 	bl	800164c <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ea:	f7fe feaf 	bl	800164c <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e06d      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028fc:	4b29      	ldr	r3, [pc, #164]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f0      	bne.n	80028ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002910:	d108      	bne.n	8002924 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002912:	4b24      	ldr	r3, [pc, #144]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	4921      	ldr	r1, [pc, #132]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002924:	4b1f      	ldr	r3, [pc, #124]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a19      	ldr	r1, [r3, #32]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	430b      	orrs	r3, r1
 8002936:	491b      	ldr	r1, [pc, #108]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800293c:	4b1b      	ldr	r3, [pc, #108]	@ (80029ac <HAL_RCC_OscConfig+0x4cc>)
 800293e:	2201      	movs	r2, #1
 8002940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002942:	f7fe fe83 	bl	800164c <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294a:	f7fe fe7f 	bl	800164c <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e03d      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800295c:	4b11      	ldr	r3, [pc, #68]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0f0      	beq.n	800294a <HAL_RCC_OscConfig+0x46a>
 8002968:	e035      	b.n	80029d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296a:	4b10      	ldr	r3, [pc, #64]	@ (80029ac <HAL_RCC_OscConfig+0x4cc>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7fe fe6c 	bl	800164c <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002978:	f7fe fe68 	bl	800164c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e026      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800298a:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x498>
 8002996:	e01e      	b.n	80029d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d107      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e019      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40007000 	.word	0x40007000
 80029ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029b0:	4b0b      	ldr	r3, [pc, #44]	@ (80029e0 <HAL_RCC_OscConfig+0x500>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d106      	bne.n	80029d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d001      	beq.n	80029d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000

080029e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0d0      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029f8:	4b6a      	ldr	r3, [pc, #424]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d910      	bls.n	8002a28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a06:	4b67      	ldr	r3, [pc, #412]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 0207 	bic.w	r2, r3, #7
 8002a0e:	4965      	ldr	r1, [pc, #404]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a16:	4b63      	ldr	r3, [pc, #396]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0b8      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d020      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a40:	4b59      	ldr	r3, [pc, #356]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4a58      	ldr	r2, [pc, #352]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a58:	4b53      	ldr	r3, [pc, #332]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4a52      	ldr	r2, [pc, #328]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a64:	4b50      	ldr	r3, [pc, #320]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	494d      	ldr	r1, [pc, #308]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d040      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d107      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	4b47      	ldr	r3, [pc, #284]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d115      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e07f      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa2:	4b41      	ldr	r3, [pc, #260]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e073      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e06b      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ac2:	4b39      	ldr	r3, [pc, #228]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f023 0203 	bic.w	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4936      	ldr	r1, [pc, #216]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad4:	f7fe fdba 	bl	800164c <HAL_GetTick>
 8002ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ada:	e00a      	b.n	8002af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002adc:	f7fe fdb6 	bl	800164c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e053      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af2:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 020c 	and.w	r2, r3, #12
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d1eb      	bne.n	8002adc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b04:	4b27      	ldr	r3, [pc, #156]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d210      	bcs.n	8002b34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b12:	4b24      	ldr	r3, [pc, #144]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 0207 	bic.w	r2, r3, #7
 8002b1a:	4922      	ldr	r1, [pc, #136]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b22:	4b20      	ldr	r3, [pc, #128]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e032      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b40:	4b19      	ldr	r3, [pc, #100]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4916      	ldr	r1, [pc, #88]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b5e:	4b12      	ldr	r3, [pc, #72]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	490e      	ldr	r1, [pc, #56]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b72:	f000 f821 	bl	8002bb8 <HAL_RCC_GetSysClockFreq>
 8002b76:	4602      	mov	r2, r0
 8002b78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	091b      	lsrs	r3, r3, #4
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	490a      	ldr	r1, [pc, #40]	@ (8002bac <HAL_RCC_ClockConfig+0x1c8>)
 8002b84:	5ccb      	ldrb	r3, [r1, r3]
 8002b86:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8a:	4a09      	ldr	r2, [pc, #36]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1cc>)
 8002b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b8e:	4b09      	ldr	r3, [pc, #36]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1d0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe fd18 	bl	80015c8 <HAL_InitTick>

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40022000 	.word	0x40022000
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	0800317c 	.word	0x0800317c
 8002bb0:	20000000 	.word	0x20000000
 8002bb4:	20000004 	.word	0x20000004

08002bb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d002      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0x30>
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d003      	beq.n	8002bee <HAL_RCC_GetSysClockFreq+0x36>
 8002be6:	e027      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002be8:	4b19      	ldr	r3, [pc, #100]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bea:	613b      	str	r3, [r7, #16]
      break;
 8002bec:	e027      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	0c9b      	lsrs	r3, r3, #18
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	4a17      	ldr	r2, [pc, #92]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bf8:	5cd3      	ldrb	r3, [r2, r3]
 8002bfa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d010      	beq.n	8002c28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c06:	4b11      	ldr	r3, [pc, #68]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	0c5b      	lsrs	r3, r3, #17
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	4a11      	ldr	r2, [pc, #68]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c12:	5cd3      	ldrb	r3, [r2, r3]
 8002c14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a0d      	ldr	r2, [pc, #52]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c1a:	fb03 f202 	mul.w	r2, r3, r2
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	e004      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c2c:	fb02 f303 	mul.w	r3, r2, r3
 8002c30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	613b      	str	r3, [r7, #16]
      break;
 8002c36:	e002      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c38:	4b05      	ldr	r3, [pc, #20]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c3a:	613b      	str	r3, [r7, #16]
      break;
 8002c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c3e:	693b      	ldr	r3, [r7, #16]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	007a1200 	.word	0x007a1200
 8002c54:	08003194 	.word	0x08003194
 8002c58:	080031a4 	.word	0x080031a4
 8002c5c:	003d0900 	.word	0x003d0900

08002c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c64:	4b02      	ldr	r3, [pc, #8]	@ (8002c70 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c66:	681b      	ldr	r3, [r3, #0]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr
 8002c70:	20000000 	.word	0x20000000

08002c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c78:	f7ff fff2 	bl	8002c60 <HAL_RCC_GetHCLKFreq>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	4b05      	ldr	r3, [pc, #20]	@ (8002c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	0a1b      	lsrs	r3, r3, #8
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	4903      	ldr	r1, [pc, #12]	@ (8002c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c8a:	5ccb      	ldrb	r3, [r1, r3]
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40021000 	.word	0x40021000
 8002c98:	0800318c 	.word	0x0800318c

08002c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ca0:	f7ff ffde 	bl	8002c60 <HAL_RCC_GetHCLKFreq>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4b05      	ldr	r3, [pc, #20]	@ (8002cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	0adb      	lsrs	r3, r3, #11
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	4903      	ldr	r1, [pc, #12]	@ (8002cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cb2:	5ccb      	ldrb	r3, [r1, r3]
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	0800318c 	.word	0x0800318c

08002cc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf8 <RCC_Delay+0x34>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002cfc <RCC_Delay+0x38>)
 8002cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd6:	0a5b      	lsrs	r3, r3, #9
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	fb02 f303 	mul.w	r3, r2, r3
 8002cde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ce0:	bf00      	nop
  }
  while (Delay --);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1e5a      	subs	r2, r3, #1
 8002ce6:	60fa      	str	r2, [r7, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f9      	bne.n	8002ce0 <RCC_Delay+0x1c>
}
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	20000000 	.word	0x20000000
 8002cfc:	10624dd3 	.word	0x10624dd3

08002d00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e042      	b.n	8002d98 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fe fbc6 	bl	80014b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2224      	movs	r2, #36	@ 0x24
 8002d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f82b 	bl	8002da0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	691a      	ldr	r2, [r3, #16]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695a      	ldr	r2, [r3, #20]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002dda:	f023 030c 	bic.w	r3, r3, #12
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6812      	ldr	r2, [r2, #0]
 8002de2:	68b9      	ldr	r1, [r7, #8]
 8002de4:	430b      	orrs	r3, r1
 8002de6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699a      	ldr	r2, [r3, #24]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a2c      	ldr	r2, [pc, #176]	@ (8002eb4 <UART_SetConfig+0x114>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d103      	bne.n	8002e10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e08:	f7ff ff48 	bl	8002c9c <HAL_RCC_GetPCLK2Freq>
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	e002      	b.n	8002e16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e10:	f7ff ff30 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 8002e14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009a      	lsls	r2, r3, #2
 8002e20:	441a      	add	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2c:	4a22      	ldr	r2, [pc, #136]	@ (8002eb8 <UART_SetConfig+0x118>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	0119      	lsls	r1, r3, #4
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009a      	lsls	r2, r3, #2
 8002e40:	441a      	add	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb8 <UART_SetConfig+0x118>)
 8002e4e:	fba3 0302 	umull	r0, r3, r3, r2
 8002e52:	095b      	lsrs	r3, r3, #5
 8002e54:	2064      	movs	r0, #100	@ 0x64
 8002e56:	fb00 f303 	mul.w	r3, r0, r3
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	3332      	adds	r3, #50	@ 0x32
 8002e60:	4a15      	ldr	r2, [pc, #84]	@ (8002eb8 <UART_SetConfig+0x118>)
 8002e62:	fba2 2303 	umull	r2, r3, r2, r3
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e6c:	4419      	add	r1, r3
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	009a      	lsls	r2, r3, #2
 8002e78:	441a      	add	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e84:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb8 <UART_SetConfig+0x118>)
 8002e86:	fba3 0302 	umull	r0, r3, r3, r2
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	2064      	movs	r0, #100	@ 0x64
 8002e8e:	fb00 f303 	mul.w	r3, r0, r3
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	3332      	adds	r3, #50	@ 0x32
 8002e98:	4a07      	ldr	r2, [pc, #28]	@ (8002eb8 <UART_SetConfig+0x118>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	f003 020f 	and.w	r2, r3, #15
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	440a      	add	r2, r1
 8002eaa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002eac:	bf00      	nop
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40013800 	.word	0x40013800
 8002eb8:	51eb851f 	.word	0x51eb851f

08002ebc <memset>:
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	4402      	add	r2, r0
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d100      	bne.n	8002ec6 <memset+0xa>
 8002ec4:	4770      	bx	lr
 8002ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eca:	e7f9      	b.n	8002ec0 <memset+0x4>

08002ecc <__libc_init_array>:
 8002ecc:	b570      	push	{r4, r5, r6, lr}
 8002ece:	2600      	movs	r6, #0
 8002ed0:	4d0c      	ldr	r5, [pc, #48]	@ (8002f04 <__libc_init_array+0x38>)
 8002ed2:	4c0d      	ldr	r4, [pc, #52]	@ (8002f08 <__libc_init_array+0x3c>)
 8002ed4:	1b64      	subs	r4, r4, r5
 8002ed6:	10a4      	asrs	r4, r4, #2
 8002ed8:	42a6      	cmp	r6, r4
 8002eda:	d109      	bne.n	8002ef0 <__libc_init_array+0x24>
 8002edc:	f000 f828 	bl	8002f30 <_init>
 8002ee0:	2600      	movs	r6, #0
 8002ee2:	4d0a      	ldr	r5, [pc, #40]	@ (8002f0c <__libc_init_array+0x40>)
 8002ee4:	4c0a      	ldr	r4, [pc, #40]	@ (8002f10 <__libc_init_array+0x44>)
 8002ee6:	1b64      	subs	r4, r4, r5
 8002ee8:	10a4      	asrs	r4, r4, #2
 8002eea:	42a6      	cmp	r6, r4
 8002eec:	d105      	bne.n	8002efa <__libc_init_array+0x2e>
 8002eee:	bd70      	pop	{r4, r5, r6, pc}
 8002ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef4:	4798      	blx	r3
 8002ef6:	3601      	adds	r6, #1
 8002ef8:	e7ee      	b.n	8002ed8 <__libc_init_array+0xc>
 8002efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002efe:	4798      	blx	r3
 8002f00:	3601      	adds	r6, #1
 8002f02:	e7f2      	b.n	8002eea <__libc_init_array+0x1e>
 8002f04:	080031b0 	.word	0x080031b0
 8002f08:	080031b0 	.word	0x080031b0
 8002f0c:	080031b0 	.word	0x080031b0
 8002f10:	080031b4 	.word	0x080031b4

08002f14 <memcpy>:
 8002f14:	440a      	add	r2, r1
 8002f16:	4291      	cmp	r1, r2
 8002f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f1c:	d100      	bne.n	8002f20 <memcpy+0xc>
 8002f1e:	4770      	bx	lr
 8002f20:	b510      	push	{r4, lr}
 8002f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f26:	4291      	cmp	r1, r2
 8002f28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f2c:	d1f9      	bne.n	8002f22 <memcpy+0xe>
 8002f2e:	bd10      	pop	{r4, pc}

08002f30 <_init>:
 8002f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f32:	bf00      	nop
 8002f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f36:	bc08      	pop	{r3}
 8002f38:	469e      	mov	lr, r3
 8002f3a:	4770      	bx	lr

08002f3c <_fini>:
 8002f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3e:	bf00      	nop
 8002f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f42:	bc08      	pop	{r3}
 8002f44:	469e      	mov	lr, r3
 8002f46:	4770      	bx	lr
