
STM32PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006268  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08006374  08006374  00007374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067a0  080067a0  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080067a0  080067a0  000077a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067a8  080067a8  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067a8  080067a8  000077a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067ac  080067ac  000077ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080067b0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010ec  2000005c  0800680c  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001148  0800680c  00008148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5e6  00000000  00000000  00008085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025d5  00000000  00000000  0001666b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00018c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d44  00000000  00000000  00019cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dfe  00000000  00000000  0001aa14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013644  00000000  00000000  00033812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d15e  00000000  00000000  00046e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3fb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cc4  00000000  00000000  000d3ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000d8cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800635c 	.word	0x0800635c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800635c 	.word	0x0800635c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	@ 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_fmul>:
 800037c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000380:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000384:	bf1e      	ittt	ne
 8000386:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038a:	ea92 0f0c 	teqne	r2, ip
 800038e:	ea93 0f0c 	teqne	r3, ip
 8000392:	d06f      	beq.n	8000474 <__aeabi_fmul+0xf8>
 8000394:	441a      	add	r2, r3
 8000396:	ea80 0c01 	eor.w	ip, r0, r1
 800039a:	0240      	lsls	r0, r0, #9
 800039c:	bf18      	it	ne
 800039e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a2:	d01e      	beq.n	80003e2 <__aeabi_fmul+0x66>
 80003a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b0:	fba0 3101 	umull	r3, r1, r0, r1
 80003b4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003bc:	bf3e      	ittt	cc
 80003be:	0049      	lslcc	r1, r1, #1
 80003c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c4:	005b      	lslcc	r3, r3, #1
 80003c6:	ea40 0001 	orr.w	r0, r0, r1
 80003ca:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ce:	2afd      	cmp	r2, #253	@ 0xfd
 80003d0:	d81d      	bhi.n	800040e <__aeabi_fmul+0x92>
 80003d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003da:	bf08      	it	eq
 80003dc:	f020 0001 	biceq.w	r0, r0, #1
 80003e0:	4770      	bx	lr
 80003e2:	f090 0f00 	teq	r0, #0
 80003e6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003ea:	bf08      	it	eq
 80003ec:	0249      	lsleq	r1, r1, #9
 80003ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f6:	3a7f      	subs	r2, #127	@ 0x7f
 80003f8:	bfc2      	ittt	gt
 80003fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000402:	4770      	bxgt	lr
 8000404:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	3a01      	subs	r2, #1
 800040e:	dc5d      	bgt.n	80004cc <__aeabi_fmul+0x150>
 8000410:	f112 0f19 	cmn.w	r2, #25
 8000414:	bfdc      	itt	le
 8000416:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800041a:	4770      	bxle	lr
 800041c:	f1c2 0200 	rsb	r2, r2, #0
 8000420:	0041      	lsls	r1, r0, #1
 8000422:	fa21 f102 	lsr.w	r1, r1, r2
 8000426:	f1c2 0220 	rsb	r2, r2, #32
 800042a:	fa00 fc02 	lsl.w	ip, r0, r2
 800042e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000432:	f140 0000 	adc.w	r0, r0, #0
 8000436:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043a:	bf08      	it	eq
 800043c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000440:	4770      	bx	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800044a:	bf02      	ittt	eq
 800044c:	0040      	lsleq	r0, r0, #1
 800044e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000452:	3a01      	subeq	r2, #1
 8000454:	d0f9      	beq.n	800044a <__aeabi_fmul+0xce>
 8000456:	ea40 000c 	orr.w	r0, r0, ip
 800045a:	f093 0f00 	teq	r3, #0
 800045e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000462:	bf02      	ittt	eq
 8000464:	0049      	lsleq	r1, r1, #1
 8000466:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800046a:	3b01      	subeq	r3, #1
 800046c:	d0f9      	beq.n	8000462 <__aeabi_fmul+0xe6>
 800046e:	ea41 010c 	orr.w	r1, r1, ip
 8000472:	e78f      	b.n	8000394 <__aeabi_fmul+0x18>
 8000474:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000478:	ea92 0f0c 	teq	r2, ip
 800047c:	bf18      	it	ne
 800047e:	ea93 0f0c 	teqne	r3, ip
 8000482:	d00a      	beq.n	800049a <__aeabi_fmul+0x11e>
 8000484:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000488:	bf18      	it	ne
 800048a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048e:	d1d8      	bne.n	8000442 <__aeabi_fmul+0xc6>
 8000490:	ea80 0001 	eor.w	r0, r0, r1
 8000494:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000498:	4770      	bx	lr
 800049a:	f090 0f00 	teq	r0, #0
 800049e:	bf17      	itett	ne
 80004a0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a4:	4608      	moveq	r0, r1
 80004a6:	f091 0f00 	teqne	r1, #0
 80004aa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004ae:	d014      	beq.n	80004da <__aeabi_fmul+0x15e>
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	d101      	bne.n	80004ba <__aeabi_fmul+0x13e>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d10f      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004ba:	ea93 0f0c 	teq	r3, ip
 80004be:	d103      	bne.n	80004c8 <__aeabi_fmul+0x14c>
 80004c0:	024b      	lsls	r3, r1, #9
 80004c2:	bf18      	it	ne
 80004c4:	4608      	movne	r0, r1
 80004c6:	d108      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d8:	4770      	bx	lr
 80004da:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004de:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_fdiv>:
 80004e4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004ec:	bf1e      	ittt	ne
 80004ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f2:	ea92 0f0c 	teqne	r2, ip
 80004f6:	ea93 0f0c 	teqne	r3, ip
 80004fa:	d069      	beq.n	80005d0 <__aeabi_fdiv+0xec>
 80004fc:	eba2 0203 	sub.w	r2, r2, r3
 8000500:	ea80 0c01 	eor.w	ip, r0, r1
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050a:	d037      	beq.n	800057c <__aeabi_fdiv+0x98>
 800050c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000510:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000514:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000518:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800051c:	428b      	cmp	r3, r1
 800051e:	bf38      	it	cc
 8000520:	005b      	lslcc	r3, r3, #1
 8000522:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000526:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800052a:	428b      	cmp	r3, r1
 800052c:	bf24      	itt	cs
 800052e:	1a5b      	subcs	r3, r3, r1
 8000530:	ea40 000c 	orrcs.w	r0, r0, ip
 8000534:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000538:	bf24      	itt	cs
 800053a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000542:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000546:	bf24      	itt	cs
 8000548:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800054c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000550:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000554:	bf24      	itt	cs
 8000556:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	bf18      	it	ne
 8000562:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000566:	d1e0      	bne.n	800052a <__aeabi_fdiv+0x46>
 8000568:	2afd      	cmp	r2, #253	@ 0xfd
 800056a:	f63f af50 	bhi.w	800040e <__aeabi_fmul+0x92>
 800056e:	428b      	cmp	r3, r1
 8000570:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000574:	bf08      	it	eq
 8000576:	f020 0001 	biceq.w	r0, r0, #1
 800057a:	4770      	bx	lr
 800057c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000580:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000584:	327f      	adds	r2, #127	@ 0x7f
 8000586:	bfc2      	ittt	gt
 8000588:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800058c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000590:	4770      	bxgt	lr
 8000592:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	3a01      	subs	r2, #1
 800059c:	e737      	b.n	800040e <__aeabi_fmul+0x92>
 800059e:	f092 0f00 	teq	r2, #0
 80005a2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a6:	bf02      	ittt	eq
 80005a8:	0040      	lsleq	r0, r0, #1
 80005aa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005ae:	3a01      	subeq	r2, #1
 80005b0:	d0f9      	beq.n	80005a6 <__aeabi_fdiv+0xc2>
 80005b2:	ea40 000c 	orr.w	r0, r0, ip
 80005b6:	f093 0f00 	teq	r3, #0
 80005ba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0049      	lsleq	r1, r1, #1
 80005c2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c6:	3b01      	subeq	r3, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fdiv+0xda>
 80005ca:	ea41 010c 	orr.w	r1, r1, ip
 80005ce:	e795      	b.n	80004fc <__aeabi_fdiv+0x18>
 80005d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d4:	ea92 0f0c 	teq	r2, ip
 80005d8:	d108      	bne.n	80005ec <__aeabi_fdiv+0x108>
 80005da:	0242      	lsls	r2, r0, #9
 80005dc:	f47f af7d 	bne.w	80004da <__aeabi_fmul+0x15e>
 80005e0:	ea93 0f0c 	teq	r3, ip
 80005e4:	f47f af70 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fmul+0x15e>
 80005ec:	ea93 0f0c 	teq	r3, ip
 80005f0:	d104      	bne.n	80005fc <__aeabi_fdiv+0x118>
 80005f2:	024b      	lsls	r3, r1, #9
 80005f4:	f43f af4c 	beq.w	8000490 <__aeabi_fmul+0x114>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e76e      	b.n	80004da <__aeabi_fmul+0x15e>
 80005fc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000600:	bf18      	it	ne
 8000602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000606:	d1ca      	bne.n	800059e <__aeabi_fdiv+0xba>
 8000608:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800060c:	f47f af5c 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 8000610:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000614:	f47f af3c 	bne.w	8000490 <__aeabi_fmul+0x114>
 8000618:	e75f      	b.n	80004da <__aeabi_fmul+0x15e>
 800061a:	bf00      	nop

0800061c <__gesf2>:
 800061c:	f04f 3cff 	mov.w	ip, #4294967295
 8000620:	e006      	b.n	8000630 <__cmpsf2+0x4>
 8000622:	bf00      	nop

08000624 <__lesf2>:
 8000624:	f04f 0c01 	mov.w	ip, #1
 8000628:	e002      	b.n	8000630 <__cmpsf2+0x4>
 800062a:	bf00      	nop

0800062c <__cmpsf2>:
 800062c:	f04f 0c01 	mov.w	ip, #1
 8000630:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000634:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000638:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800063c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000640:	bf18      	it	ne
 8000642:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000646:	d011      	beq.n	800066c <__cmpsf2+0x40>
 8000648:	b001      	add	sp, #4
 800064a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064e:	bf18      	it	ne
 8000650:	ea90 0f01 	teqne	r0, r1
 8000654:	bf58      	it	pl
 8000656:	ebb2 0003 	subspl.w	r0, r2, r3
 800065a:	bf88      	it	hi
 800065c:	17c8      	asrhi	r0, r1, #31
 800065e:	bf38      	it	cc
 8000660:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000664:	bf18      	it	ne
 8000666:	f040 0001 	orrne.w	r0, r0, #1
 800066a:	4770      	bx	lr
 800066c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000670:	d102      	bne.n	8000678 <__cmpsf2+0x4c>
 8000672:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000676:	d105      	bne.n	8000684 <__cmpsf2+0x58>
 8000678:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800067c:	d1e4      	bne.n	8000648 <__cmpsf2+0x1c>
 800067e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000682:	d0e1      	beq.n	8000648 <__cmpsf2+0x1c>
 8000684:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <__aeabi_cfrcmple>:
 800068c:	4684      	mov	ip, r0
 800068e:	4608      	mov	r0, r1
 8000690:	4661      	mov	r1, ip
 8000692:	e7ff      	b.n	8000694 <__aeabi_cfcmpeq>

08000694 <__aeabi_cfcmpeq>:
 8000694:	b50f      	push	{r0, r1, r2, r3, lr}
 8000696:	f7ff ffc9 	bl	800062c <__cmpsf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a4 <__aeabi_fcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cfcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cfcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cfcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffd2 	bl	800068c <__aeabi_cfrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc8 	bl	800068c <__aeabi_cfrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_fcmpun>:
 8000708:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800070c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000710:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000714:	d102      	bne.n	800071c <__aeabi_fcmpun+0x14>
 8000716:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800071a:	d108      	bne.n	800072e <__aeabi_fcmpun+0x26>
 800071c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000720:	d102      	bne.n	8000728 <__aeabi_fcmpun+0x20>
 8000722:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000726:	d102      	bne.n	800072e <__aeabi_fcmpun+0x26>
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	4770      	bx	lr
 800072e:	f04f 0001 	mov.w	r0, #1
 8000732:	4770      	bx	lr

08000734 <__aeabi_f2iz>:
 8000734:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000738:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800073c:	d30f      	bcc.n	800075e <__aeabi_f2iz+0x2a>
 800073e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000742:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000746:	d90d      	bls.n	8000764 <__aeabi_f2iz+0x30>
 8000748:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800074c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000750:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000754:	fa23 f002 	lsr.w	r0, r3, r2
 8000758:	bf18      	it	ne
 800075a:	4240      	negne	r0, r0
 800075c:	4770      	bx	lr
 800075e:	f04f 0000 	mov.w	r0, #0
 8000762:	4770      	bx	lr
 8000764:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000768:	d101      	bne.n	800076e <__aeabi_f2iz+0x3a>
 800076a:	0242      	lsls	r2, r0, #9
 800076c:	d105      	bne.n	800077a <__aeabi_f2iz+0x46>
 800076e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000772:	bf08      	it	eq
 8000774:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000778:	4770      	bx	lr
 800077a:	f04f 0000 	mov.w	r0, #0
 800077e:	4770      	bx	lr

08000780 <__aeabi_f2uiz>:
 8000780:	0042      	lsls	r2, r0, #1
 8000782:	d20e      	bcs.n	80007a2 <__aeabi_f2uiz+0x22>
 8000784:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000788:	d30b      	bcc.n	80007a2 <__aeabi_f2uiz+0x22>
 800078a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800078e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000792:	d409      	bmi.n	80007a8 <__aeabi_f2uiz+0x28>
 8000794:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000798:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800079c:	fa23 f002 	lsr.w	r0, r3, r2
 80007a0:	4770      	bx	lr
 80007a2:	f04f 0000 	mov.w	r0, #0
 80007a6:	4770      	bx	lr
 80007a8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80007ac:	d101      	bne.n	80007b2 <__aeabi_f2uiz+0x32>
 80007ae:	0242      	lsls	r2, r0, #9
 80007b0:	d102      	bne.n	80007b8 <__aeabi_f2uiz+0x38>
 80007b2:	f04f 30ff 	mov.w	r0, #4294967295
 80007b6:	4770      	bx	lr
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop

080007c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 0310 	add.w	r3, r7, #16
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d4:	4b24      	ldr	r3, [pc, #144]	@ (8000868 <MX_GPIO_Init+0xa8>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a23      	ldr	r2, [pc, #140]	@ (8000868 <MX_GPIO_Init+0xa8>)
 80007da:	f043 0310 	orr.w	r3, r3, #16
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <MX_GPIO_Init+0xa8>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0310 	and.w	r3, r3, #16
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <MX_GPIO_Init+0xa8>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000868 <MX_GPIO_Init+0xa8>)
 80007f2:	f043 0320 	orr.w	r3, r3, #32
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <MX_GPIO_Init+0xa8>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0320 	and.w	r3, r3, #32
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000804:	4b18      	ldr	r3, [pc, #96]	@ (8000868 <MX_GPIO_Init+0xa8>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a17      	ldr	r2, [pc, #92]	@ (8000868 <MX_GPIO_Init+0xa8>)
 800080a:	f043 0308 	orr.w	r3, r3, #8
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <MX_GPIO_Init+0xa8>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0308 	and.w	r3, r3, #8
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <MX_GPIO_Init+0xa8>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a11      	ldr	r2, [pc, #68]	@ (8000868 <MX_GPIO_Init+0xa8>)
 8000822:	f043 0304 	orr.w	r3, r3, #4
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_GPIO_Init+0xa8>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f003 0304 	and.w	r3, r3, #4
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800083a:	480c      	ldr	r0, [pc, #48]	@ (800086c <MX_GPIO_Init+0xac>)
 800083c:	f002 fad6 	bl	8002dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000840:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2302      	movs	r3, #2
 8000850:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000852:	f107 0310 	add.w	r3, r7, #16
 8000856:	4619      	mov	r1, r3
 8000858:	4804      	ldr	r0, [pc, #16]	@ (800086c <MX_GPIO_Init+0xac>)
 800085a:	f002 f943 	bl	8002ae4 <HAL_GPIO_Init>

}
 800085e:	bf00      	nop
 8000860:	3720      	adds	r7, #32
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000
 800086c:	40011000 	.word	0x40011000

08000870 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_I2C1_Init+0x50>)
 8000876:	4a13      	ldr	r2, [pc, #76]	@ (80008c4 <MX_I2C1_Init+0x54>)
 8000878:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_I2C1_Init+0x50>)
 800087c:	4a12      	ldr	r2, [pc, #72]	@ (80008c8 <MX_I2C1_Init+0x58>)
 800087e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_I2C1_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <MX_I2C1_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088c:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <MX_I2C1_Init+0x50>)
 800088e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000892:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000894:	4b0a      	ldr	r3, [pc, #40]	@ (80008c0 <MX_I2C1_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <MX_I2C1_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a0:	4b07      	ldr	r3, [pc, #28]	@ (80008c0 <MX_I2C1_Init+0x50>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <MX_I2C1_Init+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <MX_I2C1_Init+0x50>)
 80008ae:	f002 fab5 	bl	8002e1c <HAL_I2C_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008b8:	f000 f9a9 	bl	8000c0e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000078 	.word	0x20000078
 80008c4:	40005400 	.word	0x40005400
 80008c8:	00061a80 	.word	0x00061a80

080008cc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008d0:	4b12      	ldr	r3, [pc, #72]	@ (800091c <MX_I2C2_Init+0x50>)
 80008d2:	4a13      	ldr	r2, [pc, #76]	@ (8000920 <MX_I2C2_Init+0x54>)
 80008d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80008d6:	4b11      	ldr	r3, [pc, #68]	@ (800091c <MX_I2C2_Init+0x50>)
 80008d8:	4a12      	ldr	r2, [pc, #72]	@ (8000924 <MX_I2C2_Init+0x58>)
 80008da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	@ (800091c <MX_I2C2_Init+0x50>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <MX_I2C2_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <MX_I2C2_Init+0x50>)
 80008ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f0:	4b0a      	ldr	r3, [pc, #40]	@ (800091c <MX_I2C2_Init+0x50>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80008f6:	4b09      	ldr	r3, [pc, #36]	@ (800091c <MX_I2C2_Init+0x50>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fc:	4b07      	ldr	r3, [pc, #28]	@ (800091c <MX_I2C2_Init+0x50>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000902:	4b06      	ldr	r3, [pc, #24]	@ (800091c <MX_I2C2_Init+0x50>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000908:	4804      	ldr	r0, [pc, #16]	@ (800091c <MX_I2C2_Init+0x50>)
 800090a:	f002 fa87 	bl	8002e1c <HAL_I2C_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000914:	f000 f97b 	bl	8000c0e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200000cc 	.word	0x200000cc
 8000920:	40005800 	.word	0x40005800
 8000924:	00061a80 	.word	0x00061a80

08000928 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	@ 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0318 	add.w	r3, r7, #24
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a2b      	ldr	r2, [pc, #172]	@ (80009f0 <HAL_I2C_MspInit+0xc8>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d124      	bne.n	8000992 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000948:	4b2a      	ldr	r3, [pc, #168]	@ (80009f4 <HAL_I2C_MspInit+0xcc>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a29      	ldr	r2, [pc, #164]	@ (80009f4 <HAL_I2C_MspInit+0xcc>)
 800094e:	f043 0308 	orr.w	r3, r3, #8
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b27      	ldr	r3, [pc, #156]	@ (80009f4 <HAL_I2C_MspInit+0xcc>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0308 	and.w	r3, r3, #8
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8000960:	23c0      	movs	r3, #192	@ 0xc0
 8000962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000964:	2312      	movs	r3, #18
 8000966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096c:	f107 0318 	add.w	r3, r7, #24
 8000970:	4619      	mov	r1, r3
 8000972:	4821      	ldr	r0, [pc, #132]	@ (80009f8 <HAL_I2C_MspInit+0xd0>)
 8000974:	f002 f8b6 	bl	8002ae4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000978:	4b1e      	ldr	r3, [pc, #120]	@ (80009f4 <HAL_I2C_MspInit+0xcc>)
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	4a1d      	ldr	r2, [pc, #116]	@ (80009f4 <HAL_I2C_MspInit+0xcc>)
 800097e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000982:	61d3      	str	r3, [r2, #28]
 8000984:	4b1b      	ldr	r3, [pc, #108]	@ (80009f4 <HAL_I2C_MspInit+0xcc>)
 8000986:	69db      	ldr	r3, [r3, #28]
 8000988:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000990:	e029      	b.n	80009e6 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a19      	ldr	r2, [pc, #100]	@ (80009fc <HAL_I2C_MspInit+0xd4>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d124      	bne.n	80009e6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099c:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <HAL_I2C_MspInit+0xcc>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a14      	ldr	r2, [pc, #80]	@ (80009f4 <HAL_I2C_MspInit+0xcc>)
 80009a2:	f043 0308 	orr.w	r3, r3, #8
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <HAL_I2C_MspInit+0xcc>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0308 	and.w	r3, r3, #8
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GYRO_SCL_Pin|GYRO_SDA_Pin;
 80009b4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ba:	2312      	movs	r3, #18
 80009bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c2:	f107 0318 	add.w	r3, r7, #24
 80009c6:	4619      	mov	r1, r3
 80009c8:	480b      	ldr	r0, [pc, #44]	@ (80009f8 <HAL_I2C_MspInit+0xd0>)
 80009ca:	f002 f88b 	bl	8002ae4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009ce:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <HAL_I2C_MspInit+0xcc>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	4a08      	ldr	r2, [pc, #32]	@ (80009f4 <HAL_I2C_MspInit+0xcc>)
 80009d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009d8:	61d3      	str	r3, [r2, #28]
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_I2C_MspInit+0xcc>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	@ 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40005400 	.word	0x40005400
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40010c00 	.word	0x40010c00
 80009fc:	40005800 	.word	0x40005800

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b087      	sub	sp, #28
 8000a04:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a06:	f001 ff03 	bl	8002810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0a:	f000 f8bb 	bl	8000b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0e:	f7ff fed7 	bl	80007c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a12:	f7ff ff2d 	bl	8000870 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000a16:	f001 fd3b 	bl	8002490 <MX_TIM1_Init>
  MX_I2C2_Init();
 8000a1a:	f7ff ff57 	bl	80008cc <MX_I2C2_Init>
  MX_SPI2_Init();
 8000a1e:	f001 fc51 	bl	80022c4 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000a22:	f001 fdd7 	bl	80025d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init(); // 初始化OLED
 8000a26:	f000 f9f7 	bl	8000e18 <OLED_Init>
  OLED_InitBuffer(); // 初始化双缓冲
 8000a2a:	f000 f8f7 	bl	8000c1c <OLED_InitBuffer>
  OLED_ClearBuffer(); // 清空缓冲区
 8000a2e:	f000 f909 	bl	8000c44 <OLED_ClearBuffer>

  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // 启动PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // 启动PWM
 8000a32:	2104      	movs	r1, #4
 8000a34:	484b      	ldr	r0, [pc, #300]	@ (8000b64 <main+0x164>)
 8000a36:	f003 fbb5 	bl	80041a4 <HAL_TIM_PWM_Start>
  // InitBlockAnimation(); // 初始化方块动画
  // AnimationLoop(); // 执行动画循环

  OLED_InitAnimationManager(&g_AnimationManager); // 初始化动画管理器
 8000a3a:	484b      	ldr	r0, [pc, #300]	@ (8000b68 <main+0x168>)
 8000a3c:	f001 f9b0 	bl	8001da0 <OLED_InitAnimationManager>
  OLED_MoveObject(&g_AnimationManager, "player", 0, 0, 0, 0, 1, EASE_OUT_BOUNCE); // 这里可以是初始化
 8000a40:	2311      	movs	r3, #17
 8000a42:	9303      	str	r3, [sp, #12]
 8000a44:	2301      	movs	r3, #1
 8000a46:	9302      	str	r3, [sp, #8]
 8000a48:	f04f 0300 	mov.w	r3, #0
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	f04f 0300 	mov.w	r3, #0
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	f04f 0300 	mov.w	r3, #0
 8000a58:	f04f 0200 	mov.w	r2, #0
 8000a5c:	4943      	ldr	r1, [pc, #268]	@ (8000b6c <main+0x16c>)
 8000a5e:	4842      	ldr	r0, [pc, #264]	@ (8000b68 <main+0x168>)
 8000a60:	f001 f9ff 	bl	8001e62 <OLED_MoveObject>
  OLED_MoveObject(&g_AnimationManager, "player1", 128, 64, 100, 30, 1, EASE_IN_BOUNCE); // 这里可以是初始化
 8000a64:	2310      	movs	r3, #16
 8000a66:	9303      	str	r3, [sp, #12]
 8000a68:	2301      	movs	r3, #1
 8000a6a:	9302      	str	r3, [sp, #8]
 8000a6c:	4b40      	ldr	r3, [pc, #256]	@ (8000b70 <main+0x170>)
 8000a6e:	9301      	str	r3, [sp, #4]
 8000a70:	4b40      	ldr	r3, [pc, #256]	@ (8000b74 <main+0x174>)
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8000a78:	f04f 4286 	mov.w	r2, #1124073472	@ 0x43000000
 8000a7c:	493e      	ldr	r1, [pc, #248]	@ (8000b78 <main+0x178>)
 8000a7e:	483a      	ldr	r0, [pc, #232]	@ (8000b68 <main+0x168>)
 8000a80:	f001 f9ef 	bl	8001e62 <OLED_MoveObject>

  bool loop = true; // 循环标志
 8000a84:	2301      	movs	r3, #1
 8000a86:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {    
    #pragma region OLED_UI_SETTINGS // UI设置
    OLED_ClearBuffer();
 8000a88:	f000 f8dc 	bl	8000c44 <OLED_ClearBuffer>
    
    OLED_DoTweenObject(&g_AnimationManager, "player", 128, 64, 4000, EASE_INOUT_BOUNCE, true);
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	9302      	str	r3, [sp, #8]
 8000a90:	2312      	movs	r3, #18
 8000a92:	9301      	str	r3, [sp, #4]
 8000a94:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8000a9e:	f04f 4286 	mov.w	r2, #1124073472	@ 0x43000000
 8000aa2:	4932      	ldr	r1, [pc, #200]	@ (8000b6c <main+0x16c>)
 8000aa4:	4830      	ldr	r0, [pc, #192]	@ (8000b68 <main+0x168>)
 8000aa6:	f001 fa7d 	bl	8001fa4 <OLED_DoTweenObject>

    if (loop)
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d015      	beq.n	8000adc <main+0xdc>
    {
      OLED_DoTweenObjectX(&g_AnimationManager, "player1", 0, 4000, EASE_INOUT_BOUNCE);
 8000ab0:	2312      	movs	r3, #18
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000ab8:	f04f 0200 	mov.w	r2, #0
 8000abc:	492e      	ldr	r1, [pc, #184]	@ (8000b78 <main+0x178>)
 8000abe:	482a      	ldr	r0, [pc, #168]	@ (8000b68 <main+0x168>)
 8000ac0:	f001 fb26 	bl	8002110 <OLED_DoTweenObjectX>
      OLED_DoTweenObjectY(&g_AnimationManager, "player1", 0, 4000, EASE_INOUT_BOUNCE);
 8000ac4:	2312      	movs	r3, #18
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000acc:	f04f 0200 	mov.w	r2, #0
 8000ad0:	4929      	ldr	r1, [pc, #164]	@ (8000b78 <main+0x178>)
 8000ad2:	4825      	ldr	r0, [pc, #148]	@ (8000b68 <main+0x168>)
 8000ad4:	f001 fb51 	bl	800217a <OLED_DoTweenObjectY>
      loop = false;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	71fb      	strb	r3, [r7, #7]
    }



    if (OLED_GetObjectPosition(&g_AnimationManager, "player", &x, &y))
 8000adc:	4b27      	ldr	r3, [pc, #156]	@ (8000b7c <main+0x17c>)
 8000ade:	4a28      	ldr	r2, [pc, #160]	@ (8000b80 <main+0x180>)
 8000ae0:	4922      	ldr	r1, [pc, #136]	@ (8000b6c <main+0x16c>)
 8000ae2:	4821      	ldr	r0, [pc, #132]	@ (8000b68 <main+0x168>)
 8000ae4:	f001 f999 	bl	8001e1a <OLED_GetObjectPosition>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d012      	beq.n	8000b14 <main+0x114>
    {
        OLED_DrawRectangle((uint8_t)x, (uint8_t)y, 20, 20);
 8000aee:	4b24      	ldr	r3, [pc, #144]	@ (8000b80 <main+0x180>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fe44 	bl	8000780 <__aeabi_f2uiz>
 8000af8:	4603      	mov	r3, r0
 8000afa:	b2dc      	uxtb	r4, r3
 8000afc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <main+0x17c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fe3d 	bl	8000780 <__aeabi_f2uiz>
 8000b06:	4603      	mov	r3, r0
 8000b08:	b2d9      	uxtb	r1, r3
 8000b0a:	2314      	movs	r3, #20
 8000b0c:	2214      	movs	r2, #20
 8000b0e:	4620      	mov	r0, r4
 8000b10:	f001 fb68 	bl	80021e4 <OLED_DrawRectangle>
    }

    if (OLED_GetObjectPosition(&g_AnimationManager, "player1", &x, &y))
 8000b14:	4b19      	ldr	r3, [pc, #100]	@ (8000b7c <main+0x17c>)
 8000b16:	4a1a      	ldr	r2, [pc, #104]	@ (8000b80 <main+0x180>)
 8000b18:	4917      	ldr	r1, [pc, #92]	@ (8000b78 <main+0x178>)
 8000b1a:	4813      	ldr	r0, [pc, #76]	@ (8000b68 <main+0x168>)
 8000b1c:	f001 f97d 	bl	8001e1a <OLED_GetObjectPosition>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d012      	beq.n	8000b4c <main+0x14c>
    {
        OLED_DrawRectangle((uint8_t)x, (uint8_t)y, 20, 20);
 8000b26:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <main+0x180>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fe28 	bl	8000780 <__aeabi_f2uiz>
 8000b30:	4603      	mov	r3, r0
 8000b32:	b2dc      	uxtb	r4, r3
 8000b34:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <main+0x17c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fe21 	bl	8000780 <__aeabi_f2uiz>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	b2d9      	uxtb	r1, r3
 8000b42:	2314      	movs	r3, #20
 8000b44:	2214      	movs	r2, #20
 8000b46:	4620      	mov	r0, r4
 8000b48:	f001 fb4c 	bl	80021e4 <OLED_DrawRectangle>
    }

    OLED_InvertArea(64, 16, 64, 48); //
 8000b4c:	2330      	movs	r3, #48	@ 0x30
 8000b4e:	2240      	movs	r2, #64	@ 0x40
 8000b50:	2110      	movs	r1, #16
 8000b52:	2040      	movs	r0, #64	@ 0x40
 8000b54:	f000 f9ba 	bl	8000ecc <OLED_InvertArea>


    OLED_UpdateAnimationManager(&g_AnimationManager); // 更新动画管理器
 8000b58:	4803      	ldr	r0, [pc, #12]	@ (8000b68 <main+0x168>)
 8000b5a:	f001 f9d3 	bl	8001f04 <OLED_UpdateAnimationManager>
    OLED_UpdateDisplayVSync(); // 更新显示
 8000b5e:	f000 f89d 	bl	8000c9c <OLED_UpdateDisplayVSync>
    OLED_ClearBuffer();
 8000b62:	e791      	b.n	8000a88 <main+0x88>
 8000b64:	20000f7c 	.word	0x20000f7c
 8000b68:	20000930 	.word	0x20000930
 8000b6c:	08006374 	.word	0x08006374
 8000b70:	41f00000 	.word	0x41f00000
 8000b74:	42c80000 	.word	0x42c80000
 8000b78:	0800637c 	.word	0x0800637c
 8000b7c:	20000124 	.word	0x20000124
 8000b80:	20000120 	.word	0x20000120

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b090      	sub	sp, #64	@ 0x40
 8000b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8a:	f107 0318 	add.w	r3, r7, #24
 8000b8e:	2228      	movs	r2, #40	@ 0x28
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f004 f933 	bl	8004dfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000baa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bc2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc8:	f107 0318 	add.w	r3, r7, #24
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f002 fdc1 	bl	8003754 <HAL_RCC_OscConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000bd8:	f000 f819 	bl	8000c0e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bdc:	230f      	movs	r3, #15
 8000bde:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be0:	2302      	movs	r3, #2
 8000be2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000be8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 f82e 	bl	8003c58 <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c02:	f000 f804 	bl	8000c0e <Error_Handler>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3740      	adds	r7, #64	@ 0x40
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c12:	b672      	cpsid	i
}
 8000c14:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c16:	bf00      	nop
 8000c18:	e7fd      	b.n	8000c16 <Error_Handler+0x8>
	...

08000c1c <OLED_InitBuffer>:
    0x44, 0x64, 0x54, 0x4C, 0x44, 0x00  // z (122)
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000c20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c24:	2100      	movs	r1, #0
 8000c26:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <OLED_InitBuffer+0x20>)
 8000c28:	f004 f8e9 	bl	8004dfe <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 8000c2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c30:	2100      	movs	r1, #0
 8000c32:	4803      	ldr	r0, [pc, #12]	@ (8000c40 <OLED_InitBuffer+0x24>)
 8000c34:	f004 f8e3 	bl	8004dfe <memset>
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000130 	.word	0x20000130
 8000c40:	20000530 	.word	0x20000530

08000c44 <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000c48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4802      	ldr	r0, [pc, #8]	@ (8000c58 <OLED_ClearBuffer+0x14>)
 8000c50:	f004 f8d5 	bl	8004dfe <memset>
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000130 	.word	0x20000130

08000c5c <OLED_IsBusy>:

uint8_t OLED_IsBusy(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
    // 如果标记为忙，检查是否已经过了足够时间
    if (oled_update_flag)
 8000c62:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <OLED_IsBusy+0x38>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d00b      	beq.n	8000c84 <OLED_IsBusy+0x28>
    {
        // SSD1315/SSD1306 典型帧率约为60Hz，每帧约16.7ms
        uint32_t current_time = HAL_GetTick();
 8000c6c:	f001 fe28 	bl	80028c0 <HAL_GetTick>
 8000c70:	6078      	str	r0, [r7, #4]
        if (current_time - oled_last_update_time >= 2)
 8000c72:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <OLED_IsBusy+0x3c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d902      	bls.n	8000c84 <OLED_IsBusy+0x28>
        {
            oled_update_flag = 0; // 已经过了足够时间，不再忙
 8000c7e:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <OLED_IsBusy+0x38>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
        }
    }
    return oled_update_flag;
 8000c84:	4b03      	ldr	r3, [pc, #12]	@ (8000c94 <OLED_IsBusy+0x38>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b2db      	uxtb	r3, r3
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	2000012c 	.word	0x2000012c
 8000c98:	20000128 	.word	0x20000128

08000c9c <OLED_UpdateDisplayVSync>:

void OLED_UpdateDisplayVSync(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b0a4      	sub	sp, #144	@ 0x90
 8000ca0:	af02      	add	r7, sp, #8
    while (OLED_IsBusy()) 
 8000ca2:	bf00      	nop
 8000ca4:	f7ff ffda 	bl	8000c5c <OLED_IsBusy>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1fa      	bne.n	8000ca4 <OLED_UpdateDisplayVSync+0x8>
    {

    }
    oled_update_flag = 1;
 8000cae:	4b23      	ldr	r3, [pc, #140]	@ (8000d3c <OLED_UpdateDisplayVSync+0xa0>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8000cb4:	f001 fe04 	bl	80028c0 <HAL_GetTick>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	4a21      	ldr	r2, [pc, #132]	@ (8000d40 <OLED_UpdateDisplayVSync+0xa4>)
 8000cbc:	6013      	str	r3, [r2, #0]

    // 交换前后缓冲区
    memcpy(OLED_FrontBuffer, OLED_BackBuffer, 128 * 8); // 复制当前缓冲区到前缓冲区
 8000cbe:	4a21      	ldr	r2, [pc, #132]	@ (8000d44 <OLED_UpdateDisplayVSync+0xa8>)
 8000cc0:	4b21      	ldr	r3, [pc, #132]	@ (8000d48 <OLED_UpdateDisplayVSync+0xac>)
 8000cc2:	4610      	mov	r0, r2
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cca:	461a      	mov	r2, r3
 8000ccc:	f004 f8dc 	bl	8004e88 <memcpy>

    // 将前缓冲区发送到显示器
    uint8_t data[129]; // 数据缓冲区 (包括控制字节)
    data[0] = 0x40;    // 数据控制字节
 8000cd0:	2340      	movs	r3, #64	@ 0x40
 8000cd2:	713b      	strb	r3, [r7, #4]

    // 逐页发送数据，每页一次性发送整行
    for (uint8_t page = 0; page < 8; page++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000cda:	e025      	b.n	8000d28 <OLED_UpdateDisplayVSync+0x8c>
    {
        // 设置页地址
        OLED_SendCommand(0xB0 + page);
 8000cdc:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000ce0:	3b50      	subs	r3, #80	@ 0x50
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 f87d 	bl	8000de4 <OLED_SendCommand>
        // 设置列起始地址
        OLED_SendCommand(0x00); // 低位地址
 8000cea:	2000      	movs	r0, #0
 8000cec:	f000 f87a 	bl	8000de4 <OLED_SendCommand>
        OLED_SendCommand(0x10); // 高位地址
 8000cf0:	2010      	movs	r0, #16
 8000cf2:	f000 f877 	bl	8000de4 <OLED_SendCommand>

        // 复制当前页到发送缓冲区
        memcpy(data + 1, &OLED_FrontBuffer[page * OLED_WIDTH], OLED_WIDTH);
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8000cfe:	01d2      	lsls	r2, r2, #7
 8000d00:	4910      	ldr	r1, [pc, #64]	@ (8000d44 <OLED_UpdateDisplayVSync+0xa8>)
 8000d02:	4411      	add	r1, r2
 8000d04:	2280      	movs	r2, #128	@ 0x80
 8000d06:	4618      	mov	r0, r3
 8000d08:	f004 f8be 	bl	8004e88 <memcpy>

        // 发送一整行数据
        HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, OLED_WIDTH + 1, HAL_MAX_DELAY);
 8000d0c:	1d3a      	adds	r2, r7, #4
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2381      	movs	r3, #129	@ 0x81
 8000d16:	2178      	movs	r1, #120	@ 0x78
 8000d18:	480c      	ldr	r0, [pc, #48]	@ (8000d4c <OLED_UpdateDisplayVSync+0xb0>)
 8000d1a:	f002 f9c3 	bl	80030a4 <HAL_I2C_Master_Transmit>
    for (uint8_t page = 0; page < 8; page++)
 8000d1e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000d22:	3301      	adds	r3, #1
 8000d24:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000d28:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000d2c:	2b07      	cmp	r3, #7
 8000d2e:	d9d5      	bls.n	8000cdc <OLED_UpdateDisplayVSync+0x40>
    }
}
 8000d30:	bf00      	nop
 8000d32:	bf00      	nop
 8000d34:	3788      	adds	r7, #136	@ 0x88
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000012c 	.word	0x2000012c
 8000d40:	20000128 	.word	0x20000128
 8000d44:	20000530 	.word	0x20000530
 8000d48:	20000130 	.word	0x20000130
 8000d4c:	20000078 	.word	0x20000078

08000d50 <OLED_WritePixel>:

void OLED_WritePixel(uint8_t x, uint8_t y, uint8_t color)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	71bb      	strb	r3, [r7, #6]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	717b      	strb	r3, [r7, #5]
    // 边界检查
    if (x >= 128 || y >= 64)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	db34      	blt.n	8000dd4 <OLED_WritePixel+0x84>
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d6e:	d831      	bhi.n	8000dd4 <OLED_WritePixel+0x84>
        return;

    // 计算像素所在的字节位置
    uint16_t byte_index = x + (y / 8) * 128;
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	79bb      	ldrb	r3, [r7, #6]
 8000d76:	08db      	lsrs	r3, r3, #3
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	01db      	lsls	r3, r3, #7
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	4413      	add	r3, r2
 8000d80:	81fb      	strh	r3, [r7, #14]
    uint8_t bit_position = y % 8;
 8000d82:	79bb      	ldrb	r3, [r7, #6]
 8000d84:	f003 0307 	and.w	r3, r3, #7
 8000d88:	737b      	strb	r3, [r7, #13]

    if (color) // 如果需要点亮像素
 8000d8a:	797b      	ldrb	r3, [r7, #5]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d00f      	beq.n	8000db0 <OLED_WritePixel+0x60>
        OLED_BackBuffer[byte_index] |= (1 << bit_position);
 8000d90:	89fb      	ldrh	r3, [r7, #14]
 8000d92:	4a13      	ldr	r2, [pc, #76]	@ (8000de0 <OLED_WritePixel+0x90>)
 8000d94:	5cd3      	ldrb	r3, [r2, r3]
 8000d96:	b25a      	sxtb	r2, r3
 8000d98:	7b7b      	ldrb	r3, [r7, #13]
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	4313      	orrs	r3, r2
 8000da4:	b25a      	sxtb	r2, r3
 8000da6:	89fb      	ldrh	r3, [r7, #14]
 8000da8:	b2d1      	uxtb	r1, r2
 8000daa:	4a0d      	ldr	r2, [pc, #52]	@ (8000de0 <OLED_WritePixel+0x90>)
 8000dac:	54d1      	strb	r1, [r2, r3]
 8000dae:	e012      	b.n	8000dd6 <OLED_WritePixel+0x86>
    else // 如果需要熄灭像素
        OLED_BackBuffer[byte_index] &= ~(1 << bit_position);
 8000db0:	89fb      	ldrh	r3, [r7, #14]
 8000db2:	4a0b      	ldr	r2, [pc, #44]	@ (8000de0 <OLED_WritePixel+0x90>)
 8000db4:	5cd3      	ldrb	r3, [r2, r3]
 8000db6:	b25a      	sxtb	r2, r3
 8000db8:	7b7b      	ldrb	r3, [r7, #13]
 8000dba:	2101      	movs	r1, #1
 8000dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc0:	b25b      	sxtb	r3, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	b25b      	sxtb	r3, r3
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	b25a      	sxtb	r2, r3
 8000dca:	89fb      	ldrh	r3, [r7, #14]
 8000dcc:	b2d1      	uxtb	r1, r2
 8000dce:	4a04      	ldr	r2, [pc, #16]	@ (8000de0 <OLED_WritePixel+0x90>)
 8000dd0:	54d1      	strb	r1, [r2, r3]
 8000dd2:	e000      	b.n	8000dd6 <OLED_WritePixel+0x86>
        return;
 8000dd4:	bf00      	nop
}
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000130 	.word	0x20000130

08000de4 <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af02      	add	r7, sp, #8
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 8000dee:	2300      	movs	r3, #0
 8000df0:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8000df6:	f107 020c 	add.w	r2, r7, #12
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2302      	movs	r3, #2
 8000e02:	2178      	movs	r1, #120	@ 0x78
 8000e04:	4803      	ldr	r0, [pc, #12]	@ (8000e14 <OLED_SendCommand+0x30>)
 8000e06:	f002 f94d 	bl	80030a4 <HAL_I2C_Master_Transmit>
}
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000078 	.word	0x20000078

08000e18 <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 8000e1c:	2064      	movs	r0, #100	@ 0x64
 8000e1e:	f001 fd59 	bl	80028d4 <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 8000e22:	20ae      	movs	r0, #174	@ 0xae
 8000e24:	f7ff ffde 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 8000e28:	20d5      	movs	r0, #213	@ 0xd5
 8000e2a:	f7ff ffdb 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 8000e2e:	2080      	movs	r0, #128	@ 0x80
 8000e30:	f7ff ffd8 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8000e34:	20a8      	movs	r0, #168	@ 0xa8
 8000e36:	f7ff ffd5 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 8000e3a:	203f      	movs	r0, #63	@ 0x3f
 8000e3c:	f7ff ffd2 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8000e40:	20d3      	movs	r0, #211	@ 0xd3
 8000e42:	f7ff ffcf 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 8000e46:	2000      	movs	r0, #0
 8000e48:	f7ff ffcc 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8000e4c:	2040      	movs	r0, #64	@ 0x40
 8000e4e:	f7ff ffc9 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 8000e52:	208d      	movs	r0, #141	@ 0x8d
 8000e54:	f7ff ffc6 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 8000e58:	2014      	movs	r0, #20
 8000e5a:	f7ff ffc3 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 8000e5e:	2020      	movs	r0, #32
 8000e60:	f7ff ffc0 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 8000e64:	2000      	movs	r0, #0
 8000e66:	f7ff ffbd 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 8000e6a:	20a1      	movs	r0, #161	@ 0xa1
 8000e6c:	f7ff ffba 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 8000e70:	20c8      	movs	r0, #200	@ 0xc8
 8000e72:	f7ff ffb7 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 8000e76:	20da      	movs	r0, #218	@ 0xda
 8000e78:	f7ff ffb4 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8000e7c:	2012      	movs	r0, #18
 8000e7e:	f7ff ffb1 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 8000e82:	2081      	movs	r0, #129	@ 0x81
 8000e84:	f7ff ffae 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 8000e88:	20cf      	movs	r0, #207	@ 0xcf
 8000e8a:	f7ff ffab 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 8000e8e:	20d9      	movs	r0, #217	@ 0xd9
 8000e90:	f7ff ffa8 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 8000e94:	20f1      	movs	r0, #241	@ 0xf1
 8000e96:	f7ff ffa5 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 8000e9a:	20db      	movs	r0, #219	@ 0xdb
 8000e9c:	f7ff ffa2 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 8000ea0:	2030      	movs	r0, #48	@ 0x30
 8000ea2:	f7ff ff9f 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 8000ea6:	20a4      	movs	r0, #164	@ 0xa4
 8000ea8:	f7ff ff9c 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 8000eac:	20a6      	movs	r0, #166	@ 0xa6
 8000eae:	f7ff ff99 	bl	8000de4 <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 8000eb2:	202e      	movs	r0, #46	@ 0x2e
 8000eb4:	f7ff ff96 	bl	8000de4 <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 8000eb8:	f7ff feb0 	bl	8000c1c <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 8000ebc:	f7ff fec2 	bl	8000c44 <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 8000ec0:	20af      	movs	r0, #175	@ 0xaf
 8000ec2:	f7ff ff8f 	bl	8000de4 <OLED_SendCommand>
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <OLED_InvertArea>:

// 区域反色功能 - 将指定矩形区域内的像素颜色反转 //! UPDATEDISPLAY REQUIRED
void OLED_InvertArea(uint8_t x, uint8_t y, uint8_t width, uint8_t height)
{
 8000ecc:	b490      	push	{r4, r7}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4604      	mov	r4, r0
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4623      	mov	r3, r4
 8000edc:	71fb      	strb	r3, [r7, #7]
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71bb      	strb	r3, [r7, #6]
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	717b      	strb	r3, [r7, #5]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	713b      	strb	r3, [r7, #4]
    // 边界检查和裁剪
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT || width == 0 || height == 0)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	db5a      	blt.n	8000fa8 <OLED_InvertArea+0xdc>
 8000ef2:	79bb      	ldrb	r3, [r7, #6]
 8000ef4:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ef6:	d857      	bhi.n	8000fa8 <OLED_InvertArea+0xdc>
 8000ef8:	797b      	ldrb	r3, [r7, #5]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d054      	beq.n	8000fa8 <OLED_InvertArea+0xdc>
 8000efe:	793b      	ldrb	r3, [r7, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d051      	beq.n	8000fa8 <OLED_InvertArea+0xdc>
        return;
    if (x + width > OLED_WIDTH)
 8000f04:	79fa      	ldrb	r2, [r7, #7]
 8000f06:	797b      	ldrb	r3, [r7, #5]
 8000f08:	4413      	add	r3, r2
 8000f0a:	2b80      	cmp	r3, #128	@ 0x80
 8000f0c:	dd06      	ble.n	8000f1c <OLED_InvertArea+0x50>
        width = OLED_WIDTH - x;
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8000f14:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8000f18:	3380      	adds	r3, #128	@ 0x80
 8000f1a:	717b      	strb	r3, [r7, #5]
    if (y + height > OLED_HEIGHT)
 8000f1c:	79ba      	ldrb	r2, [r7, #6]
 8000f1e:	793b      	ldrb	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	2b40      	cmp	r3, #64	@ 0x40
 8000f24:	dd03      	ble.n	8000f2e <OLED_InvertArea+0x62>
        height = OLED_HEIGHT - y;
 8000f26:	79bb      	ldrb	r3, [r7, #6]
 8000f28:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000f2c:	713b      	strb	r3, [r7, #4]

    uint8_t end_x = x + width - 1;
 8000f2e:	79fa      	ldrb	r2, [r7, #7]
 8000f30:	797b      	ldrb	r3, [r7, #5]
 8000f32:	4413      	add	r3, r2
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	3b01      	subs	r3, #1
 8000f38:	737b      	strb	r3, [r7, #13]
    uint8_t end_y = y + height - 1;
 8000f3a:	79ba      	ldrb	r2, [r7, #6]
 8000f3c:	793b      	ldrb	r3, [r7, #4]
 8000f3e:	4413      	add	r3, r2
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	3b01      	subs	r3, #1
 8000f44:	733b      	strb	r3, [r7, #12]

    // 遍历区域内的每个像素并反转
    for (uint8_t j = y; j <= end_y; j++)
 8000f46:	79bb      	ldrb	r3, [r7, #6]
 8000f48:	73fb      	strb	r3, [r7, #15]
 8000f4a:	e028      	b.n	8000f9e <OLED_InvertArea+0xd2>
    {
        for (uint8_t i = x; i <= end_x; i++)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	73bb      	strb	r3, [r7, #14]
 8000f50:	e01e      	b.n	8000f90 <OLED_InvertArea+0xc4>
        {
            // 计算当前像素在缓冲区中的位置
            uint16_t byte_index = i + (j / 8) * OLED_WIDTH;
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	08db      	lsrs	r3, r3, #3
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	01db      	lsls	r3, r3, #7
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	4413      	add	r3, r2
 8000f62:	817b      	strh	r3, [r7, #10]
            uint8_t bit_position = j % 8;
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	727b      	strb	r3, [r7, #9]

            // 反转该像素（将0变为1，1变为0）
            OLED_BackBuffer[byte_index] ^= (1 << bit_position);
 8000f6c:	897b      	ldrh	r3, [r7, #10]
 8000f6e:	4a11      	ldr	r2, [pc, #68]	@ (8000fb4 <OLED_InvertArea+0xe8>)
 8000f70:	5cd3      	ldrb	r3, [r2, r3]
 8000f72:	b25a      	sxtb	r2, r3
 8000f74:	7a7b      	ldrb	r3, [r7, #9]
 8000f76:	2101      	movs	r1, #1
 8000f78:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7c:	b25b      	sxtb	r3, r3
 8000f7e:	4053      	eors	r3, r2
 8000f80:	b25a      	sxtb	r2, r3
 8000f82:	897b      	ldrh	r3, [r7, #10]
 8000f84:	b2d1      	uxtb	r1, r2
 8000f86:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb4 <OLED_InvertArea+0xe8>)
 8000f88:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = x; i <= end_x; i++)
 8000f8a:	7bbb      	ldrb	r3, [r7, #14]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	73bb      	strb	r3, [r7, #14]
 8000f90:	7bba      	ldrb	r2, [r7, #14]
 8000f92:	7b7b      	ldrb	r3, [r7, #13]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d9dc      	bls.n	8000f52 <OLED_InvertArea+0x86>
    for (uint8_t j = y; j <= end_y; j++)
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	73fb      	strb	r3, [r7, #15]
 8000f9e:	7bfa      	ldrb	r2, [r7, #15]
 8000fa0:	7b3b      	ldrb	r3, [r7, #12]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d9d2      	bls.n	8000f4c <OLED_InvertArea+0x80>
 8000fa6:	e000      	b.n	8000faa <OLED_InvertArea+0xde>
        return;
 8000fa8:	bf00      	nop
        }
    }
}
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc90      	pop	{r4, r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000130 	.word	0x20000130

08000fb8 <EaseLinear>:
#include "oled_ui.h"

#pragma region TWEENS // 动画缓动函数全部在这里定义

static float EaseLinear(float t)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    return t;
 8000fc0:	687b      	ldr	r3, [r7, #4]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <EaseInQuad>:

static float EaseInQuad(float t)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
    return t * t;
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff f9d0 	bl	800037c <__aeabi_fmul>
 8000fdc:	4603      	mov	r3, r0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <EaseOutQuad>:

static float EaseOutQuad(float t)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
    return t * (2 - t);
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000ff4:	f7ff f8b8 	bl	8000168 <__aeabi_fsub>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff f9bd 	bl	800037c <__aeabi_fmul>
 8001002:	4603      	mov	r3, r0
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <EaseInOutQuad>:

static float EaseInOutQuad(float t)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 2 * t * t : -1 + (4 - 2 * t) * t;
 8001014:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff fb4d 	bl	80006b8 <__aeabi_fcmplt>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00b      	beq.n	800103c <EaseInOutQuad+0x30>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4619      	mov	r1, r3
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff f89f 	bl	800016c <__addsf3>
 800102e:	4603      	mov	r3, r0
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff f9a2 	bl	800037c <__aeabi_fmul>
 8001038:	4603      	mov	r3, r0
 800103a:	e016      	b.n	800106a <EaseInOutQuad+0x5e>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4619      	mov	r1, r3
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff f893 	bl	800016c <__addsf3>
 8001046:	4603      	mov	r3, r0
 8001048:	4619      	mov	r1, r3
 800104a:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 800104e:	f7ff f88b 	bl	8000168 <__aeabi_fsub>
 8001052:	4603      	mov	r3, r0
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff f990 	bl	800037c <__aeabi_fmul>
 800105c:	4603      	mov	r3, r0
 800105e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff f880 	bl	8000168 <__aeabi_fsub>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <EaseInCubic>:

static float EaseInCubic(float t)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
    return t * t * t;
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff f97d 	bl	800037c <__aeabi_fmul>
 8001082:	4603      	mov	r3, r0
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff f978 	bl	800037c <__aeabi_fmul>
 800108c:	4603      	mov	r3, r0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <EaseOutCubic>:

static float EaseOutCubic(float t)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
    float t1 = t - 1;
 800109e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff f860 	bl	8000168 <__aeabi_fsub>
 80010a8:	4603      	mov	r3, r0
 80010aa:	60fb      	str	r3, [r7, #12]
    return t1 * t1 * t1 + 1;
 80010ac:	68f9      	ldr	r1, [r7, #12]
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f7ff f964 	bl	800037c <__aeabi_fmul>
 80010b4:	4603      	mov	r3, r0
 80010b6:	68f9      	ldr	r1, [r7, #12]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff f95f 	bl	800037c <__aeabi_fmul>
 80010be:	4603      	mov	r3, r0
 80010c0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff f851 	bl	800016c <__addsf3>
 80010ca:	4603      	mov	r3, r0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <EaseInOutCubic>:

static float EaseInOutCubic(float t)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
 80010dc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff fae9 	bl	80006b8 <__aeabi_fcmplt>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d010      	beq.n	800110e <EaseInOutCubic+0x3a>
 80010ec:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff f943 	bl	800037c <__aeabi_fmul>
 80010f6:	4603      	mov	r3, r0
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f93e 	bl	800037c <__aeabi_fmul>
 8001100:	4603      	mov	r3, r0
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff f939 	bl	800037c <__aeabi_fmul>
 800110a:	4603      	mov	r3, r0
 800110c:	e02f      	b.n	800116e <EaseInOutCubic+0x9a>
 800110e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff f828 	bl	8000168 <__aeabi_fsub>
 8001118:	4603      	mov	r3, r0
 800111a:	461c      	mov	r4, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4619      	mov	r1, r3
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f823 	bl	800016c <__addsf3>
 8001126:	4603      	mov	r3, r0
 8001128:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f81b 	bl	8000168 <__aeabi_fsub>
 8001132:	4603      	mov	r3, r0
 8001134:	4619      	mov	r1, r3
 8001136:	4620      	mov	r0, r4
 8001138:	f7ff f920 	bl	800037c <__aeabi_fmul>
 800113c:	4603      	mov	r3, r0
 800113e:	461c      	mov	r4, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4619      	mov	r1, r3
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f811 	bl	800016c <__addsf3>
 800114a:	4603      	mov	r3, r0
 800114c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f809 	bl	8000168 <__aeabi_fsub>
 8001156:	4603      	mov	r3, r0
 8001158:	4619      	mov	r1, r3
 800115a:	4620      	mov	r0, r4
 800115c:	f7ff f90e 	bl	800037c <__aeabi_fmul>
 8001160:	4603      	mov	r3, r0
 8001162:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f800 	bl	800016c <__addsf3>
 800116c:	4603      	mov	r3, r0
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	bd90      	pop	{r4, r7, pc}
	...

08001178 <EaseInExpo>:

// 在现有EaseType_t枚举中添加这些新类型
// 指数缓动
static float EaseInExpo(float t)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
    return (t == 0) ? 0 : powf(2, 10 * (t - 1));
 8001180:	f04f 0100 	mov.w	r1, #0
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff fa8d 	bl	80006a4 <__aeabi_fcmpeq>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d111      	bne.n	80011b4 <EaseInExpo+0x3c>
 8001190:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7fe ffe7 	bl	8000168 <__aeabi_fsub>
 800119a:	4603      	mov	r3, r0
 800119c:	4908      	ldr	r1, [pc, #32]	@ (80011c0 <EaseInExpo+0x48>)
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f8ec 	bl	800037c <__aeabi_fmul>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4619      	mov	r1, r3
 80011a8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80011ac:	f003 fe7a 	bl	8004ea4 <powf>
 80011b0:	4603      	mov	r3, r0
 80011b2:	e001      	b.n	80011b8 <EaseInExpo+0x40>
 80011b4:	f04f 0300 	mov.w	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	41200000 	.word	0x41200000

080011c4 <EaseOutExpo>:

static float EaseOutExpo(float t)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
    return (t == 1) ? 1 : (1 - powf(2, -10 * t));
 80011cc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff fa67 	bl	80006a4 <__aeabi_fcmpeq>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d111      	bne.n	8001200 <EaseOutExpo+0x3c>
 80011dc:	490b      	ldr	r1, [pc, #44]	@ (800120c <EaseOutExpo+0x48>)
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff f8cc 	bl	800037c <__aeabi_fmul>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4619      	mov	r1, r3
 80011e8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80011ec:	f003 fe5a 	bl	8004ea4 <powf>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80011f8:	f7fe ffb6 	bl	8000168 <__aeabi_fsub>
 80011fc:	4603      	mov	r3, r0
 80011fe:	e001      	b.n	8001204 <EaseOutExpo+0x40>
 8001200:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	c1200000 	.word	0xc1200000

08001210 <EaseInOutExpo>:

static float EaseInOutExpo(float t)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
    if (t == 0)
 8001218:	f04f 0100 	mov.w	r1, #0
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff fa41 	bl	80006a4 <__aeabi_fcmpeq>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <EaseInOutExpo+0x1e>
        return 0;
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	e045      	b.n	80012ba <EaseInOutExpo+0xaa>
    if (t == 1)
 800122e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff fa36 	bl	80006a4 <__aeabi_fcmpeq>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <EaseInOutExpo+0x34>
        return 1;
 800123e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001242:	e03a      	b.n	80012ba <EaseInOutExpo+0xaa>
    if (t < 0.5f)
 8001244:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff fa35 	bl	80006b8 <__aeabi_fcmplt>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d016      	beq.n	8001282 <EaseInOutExpo+0x72>
        return powf(2, 20 * t - 10) / 2;
 8001254:	491b      	ldr	r1, [pc, #108]	@ (80012c4 <EaseInOutExpo+0xb4>)
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff f890 	bl	800037c <__aeabi_fmul>
 800125c:	4603      	mov	r3, r0
 800125e:	491a      	ldr	r1, [pc, #104]	@ (80012c8 <EaseInOutExpo+0xb8>)
 8001260:	4618      	mov	r0, r3
 8001262:	f7fe ff81 	bl	8000168 <__aeabi_fsub>
 8001266:	4603      	mov	r3, r0
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800126e:	f003 fe19 	bl	8004ea4 <powf>
 8001272:	4603      	mov	r3, r0
 8001274:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f933 	bl	80004e4 <__aeabi_fdiv>
 800127e:	4603      	mov	r3, r0
 8001280:	e01b      	b.n	80012ba <EaseInOutExpo+0xaa>
    return (2 - powf(2, -20 * t + 10)) / 2;
 8001282:	4912      	ldr	r1, [pc, #72]	@ (80012cc <EaseInOutExpo+0xbc>)
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff f879 	bl	800037c <__aeabi_fmul>
 800128a:	4603      	mov	r3, r0
 800128c:	490e      	ldr	r1, [pc, #56]	@ (80012c8 <EaseInOutExpo+0xb8>)
 800128e:	4618      	mov	r0, r3
 8001290:	f7fe ff6c 	bl	800016c <__addsf3>
 8001294:	4603      	mov	r3, r0
 8001296:	4619      	mov	r1, r3
 8001298:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800129c:	f003 fe02 	bl	8004ea4 <powf>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4619      	mov	r1, r3
 80012a4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80012a8:	f7fe ff5e 	bl	8000168 <__aeabi_fsub>
 80012ac:	4603      	mov	r3, r0
 80012ae:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f916 	bl	80004e4 <__aeabi_fdiv>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	41a00000 	.word	0x41a00000
 80012c8:	41200000 	.word	0x41200000
 80012cc:	c1a00000 	.word	0xc1a00000

080012d0 <EaseInCirc>:

// 圆形曲线缓动
static float EaseInCirc(float t)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
    return 1 - sqrtf(1 - t * t);
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff f84e 	bl	800037c <__aeabi_fmul>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4619      	mov	r1, r3
 80012e4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80012e8:	f7fe ff3e 	bl	8000168 <__aeabi_fsub>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f003 fe25 	bl	8004f3e <sqrtf>
 80012f4:	4603      	mov	r3, r0
 80012f6:	4619      	mov	r1, r3
 80012f8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80012fc:	f7fe ff34 	bl	8000168 <__aeabi_fsub>
 8001300:	4603      	mov	r3, r0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <EaseOutCirc>:

static float EaseOutCirc(float t)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
    return sqrtf(1 - powf(t - 1, 2));
 8001312:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7fe ff26 	bl	8000168 <__aeabi_fsub>
 800131c:	4603      	mov	r3, r0
 800131e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001322:	4618      	mov	r0, r3
 8001324:	f003 fdbe 	bl	8004ea4 <powf>
 8001328:	4603      	mov	r3, r0
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001330:	f7fe ff1a 	bl	8000168 <__aeabi_fsub>
 8001334:	4603      	mov	r3, r0
 8001336:	4618      	mov	r0, r3
 8001338:	f003 fe01 	bl	8004f3e <sqrtf>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <EaseInOutCirc>:

static float EaseInOutCirc(float t)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 800134e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff f9b0 	bl	80006b8 <__aeabi_fcmplt>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d022      	beq.n	80013a4 <EaseInOutCirc+0x5e>
        return (1 - sqrtf(1 - powf(2 * t, 2))) / 2;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4619      	mov	r1, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f7fe ff02 	bl	800016c <__addsf3>
 8001368:	4603      	mov	r3, r0
 800136a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800136e:	4618      	mov	r0, r3
 8001370:	f003 fd98 	bl	8004ea4 <powf>
 8001374:	4603      	mov	r3, r0
 8001376:	4619      	mov	r1, r3
 8001378:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800137c:	f7fe fef4 	bl	8000168 <__aeabi_fsub>
 8001380:	4603      	mov	r3, r0
 8001382:	4618      	mov	r0, r3
 8001384:	f003 fddb 	bl	8004f3e <sqrtf>
 8001388:	4603      	mov	r3, r0
 800138a:	4619      	mov	r1, r3
 800138c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001390:	f7fe feea 	bl	8000168 <__aeabi_fsub>
 8001394:	4603      	mov	r3, r0
 8001396:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f8a2 	bl	80004e4 <__aeabi_fdiv>
 80013a0:	4603      	mov	r3, r0
 80013a2:	e027      	b.n	80013f4 <EaseInOutCirc+0xae>
    return (sqrtf(1 - powf(-2 * t + 2, 2)) + 1) / 2;
 80013a4:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7fe ffe7 	bl	800037c <__aeabi_fmul>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7fe fed9 	bl	800016c <__addsf3>
 80013ba:	4603      	mov	r3, r0
 80013bc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80013c0:	4618      	mov	r0, r3
 80013c2:	f003 fd6f 	bl	8004ea4 <powf>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4619      	mov	r1, r3
 80013ca:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80013ce:	f7fe fecb 	bl	8000168 <__aeabi_fsub>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f003 fdb2 	bl	8004f3e <sqrtf>
 80013da:	4603      	mov	r3, r0
 80013dc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7fe fec3 	bl	800016c <__addsf3>
 80013e6:	4603      	mov	r3, r0
 80013e8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f879 	bl	80004e4 <__aeabi_fdiv>
 80013f2:	4603      	mov	r3, r0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <EaseInElastic>:

// 弹性缓动
static float EaseInElastic(float t)
{
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 8001404:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <EaseInElastic+0x94>)
 8001406:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8001408:	f04f 0100 	mov.w	r1, #0
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff f949 	bl	80006a4 <__aeabi_fcmpeq>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d002      	beq.n	800141e <EaseInElastic+0x22>
        return 0;
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	e034      	b.n	8001488 <EaseInElastic+0x8c>
    if (t == 1)
 800141e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff f93e 	bl	80006a4 <__aeabi_fcmpeq>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <EaseInElastic+0x38>
        return 1;
 800142e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001432:	e029      	b.n	8001488 <EaseInElastic+0x8c>
    return -powf(2, 10 * t - 10) * sinf((t * 10 - 10.75f) * c4);
 8001434:	4917      	ldr	r1, [pc, #92]	@ (8001494 <EaseInElastic+0x98>)
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7fe ffa0 	bl	800037c <__aeabi_fmul>
 800143c:	4603      	mov	r3, r0
 800143e:	4915      	ldr	r1, [pc, #84]	@ (8001494 <EaseInElastic+0x98>)
 8001440:	4618      	mov	r0, r3
 8001442:	f7fe fe91 	bl	8000168 <__aeabi_fsub>
 8001446:	4603      	mov	r3, r0
 8001448:	4619      	mov	r1, r3
 800144a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800144e:	f003 fd29 	bl	8004ea4 <powf>
 8001452:	4603      	mov	r3, r0
 8001454:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8001458:	490e      	ldr	r1, [pc, #56]	@ (8001494 <EaseInElastic+0x98>)
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7fe ff8e 	bl	800037c <__aeabi_fmul>
 8001460:	4603      	mov	r3, r0
 8001462:	490d      	ldr	r1, [pc, #52]	@ (8001498 <EaseInElastic+0x9c>)
 8001464:	4618      	mov	r0, r3
 8001466:	f7fe fe7f 	bl	8000168 <__aeabi_fsub>
 800146a:	4603      	mov	r3, r0
 800146c:	68f9      	ldr	r1, [r7, #12]
 800146e:	4618      	mov	r0, r3
 8001470:	f7fe ff84 	bl	800037c <__aeabi_fmul>
 8001474:	4603      	mov	r3, r0
 8001476:	4618      	mov	r0, r3
 8001478:	f003 fdb4 	bl	8004fe4 <sinf>
 800147c:	4603      	mov	r3, r0
 800147e:	4619      	mov	r1, r3
 8001480:	4620      	mov	r0, r4
 8001482:	f7fe ff7b 	bl	800037c <__aeabi_fmul>
 8001486:	4603      	mov	r3, r0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	bd90      	pop	{r4, r7, pc}
 8001490:	40060a8b 	.word	0x40060a8b
 8001494:	41200000 	.word	0x41200000
 8001498:	412c0000 	.word	0x412c0000

0800149c <EaseOutElastic>:

static float EaseOutElastic(float t)
{
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 80014a4:	4b22      	ldr	r3, [pc, #136]	@ (8001530 <EaseOutElastic+0x94>)
 80014a6:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 80014a8:	f04f 0100 	mov.w	r1, #0
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff f8f9 	bl	80006a4 <__aeabi_fcmpeq>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d002      	beq.n	80014be <EaseOutElastic+0x22>
        return 0;
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	e034      	b.n	8001528 <EaseOutElastic+0x8c>
    if (t == 1)
 80014be:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff f8ee 	bl	80006a4 <__aeabi_fcmpeq>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d002      	beq.n	80014d4 <EaseOutElastic+0x38>
        return 1;
 80014ce:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80014d2:	e029      	b.n	8001528 <EaseOutElastic+0x8c>
    return powf(2, -10 * t) * sinf((t * 10 - 0.75f) * c4) + 1;
 80014d4:	4917      	ldr	r1, [pc, #92]	@ (8001534 <EaseOutElastic+0x98>)
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7fe ff50 	bl	800037c <__aeabi_fmul>
 80014dc:	4603      	mov	r3, r0
 80014de:	4619      	mov	r1, r3
 80014e0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80014e4:	f003 fcde 	bl	8004ea4 <powf>
 80014e8:	4604      	mov	r4, r0
 80014ea:	4913      	ldr	r1, [pc, #76]	@ (8001538 <EaseOutElastic+0x9c>)
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7fe ff45 	bl	800037c <__aeabi_fmul>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7fe fe35 	bl	8000168 <__aeabi_fsub>
 80014fe:	4603      	mov	r3, r0
 8001500:	68f9      	ldr	r1, [r7, #12]
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe ff3a 	bl	800037c <__aeabi_fmul>
 8001508:	4603      	mov	r3, r0
 800150a:	4618      	mov	r0, r3
 800150c:	f003 fd6a 	bl	8004fe4 <sinf>
 8001510:	4603      	mov	r3, r0
 8001512:	4619      	mov	r1, r3
 8001514:	4620      	mov	r0, r4
 8001516:	f7fe ff31 	bl	800037c <__aeabi_fmul>
 800151a:	4603      	mov	r3, r0
 800151c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe fe23 	bl	800016c <__addsf3>
 8001526:	4603      	mov	r3, r0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	bd90      	pop	{r4, r7, pc}
 8001530:	40060a8b 	.word	0x40060a8b
 8001534:	c1200000 	.word	0xc1200000
 8001538:	41200000 	.word	0x41200000

0800153c <EaseInOutElastic>:

static float EaseInOutElastic(float t)
{
 800153c:	b590      	push	{r4, r7, lr}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
    const float c5 = (2 * 3.14159f) / 4.5f;
 8001544:	4b44      	ldr	r3, [pc, #272]	@ (8001658 <EaseInOutElastic+0x11c>)
 8001546:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8001548:	f04f 0100 	mov.w	r1, #0
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff f8a9 	bl	80006a4 <__aeabi_fcmpeq>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d002      	beq.n	800155e <EaseInOutElastic+0x22>
        return 0;
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	e077      	b.n	800164e <EaseInOutElastic+0x112>
    if (t == 1)
 800155e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff f89e 	bl	80006a4 <__aeabi_fcmpeq>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <EaseInOutElastic+0x38>
        return 1;
 800156e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001572:	e06c      	b.n	800164e <EaseInOutElastic+0x112>
    if (t < 0.5f)
 8001574:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff f89d 	bl	80006b8 <__aeabi_fcmplt>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d030      	beq.n	80015e6 <EaseInOutElastic+0xaa>
        return -(powf(2, 20 * t - 10) * sinf((20 * t - 11.125f) * c5)) / 2;
 8001584:	4935      	ldr	r1, [pc, #212]	@ (800165c <EaseInOutElastic+0x120>)
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7fe fef8 	bl	800037c <__aeabi_fmul>
 800158c:	4603      	mov	r3, r0
 800158e:	4934      	ldr	r1, [pc, #208]	@ (8001660 <EaseInOutElastic+0x124>)
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe fde9 	bl	8000168 <__aeabi_fsub>
 8001596:	4603      	mov	r3, r0
 8001598:	4619      	mov	r1, r3
 800159a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800159e:	f003 fc81 	bl	8004ea4 <powf>
 80015a2:	4604      	mov	r4, r0
 80015a4:	492d      	ldr	r1, [pc, #180]	@ (800165c <EaseInOutElastic+0x120>)
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7fe fee8 	bl	800037c <__aeabi_fmul>
 80015ac:	4603      	mov	r3, r0
 80015ae:	492d      	ldr	r1, [pc, #180]	@ (8001664 <EaseInOutElastic+0x128>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe fdd9 	bl	8000168 <__aeabi_fsub>
 80015b6:	4603      	mov	r3, r0
 80015b8:	68f9      	ldr	r1, [r7, #12]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe fede 	bl	800037c <__aeabi_fmul>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 fd0e 	bl	8004fe4 <sinf>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4619      	mov	r1, r3
 80015cc:	4620      	mov	r0, r4
 80015ce:	f7fe fed5 	bl	800037c <__aeabi_fmul>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80015d8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ff81 	bl	80004e4 <__aeabi_fdiv>
 80015e2:	4603      	mov	r3, r0
 80015e4:	e033      	b.n	800164e <EaseInOutElastic+0x112>
    return (powf(2, -20 * t + 10) * sinf((20 * t - 11.125f) * c5)) / 2 + 1;
 80015e6:	4920      	ldr	r1, [pc, #128]	@ (8001668 <EaseInOutElastic+0x12c>)
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7fe fec7 	bl	800037c <__aeabi_fmul>
 80015ee:	4603      	mov	r3, r0
 80015f0:	491b      	ldr	r1, [pc, #108]	@ (8001660 <EaseInOutElastic+0x124>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe fdba 	bl	800016c <__addsf3>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4619      	mov	r1, r3
 80015fc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001600:	f003 fc50 	bl	8004ea4 <powf>
 8001604:	4604      	mov	r4, r0
 8001606:	4915      	ldr	r1, [pc, #84]	@ (800165c <EaseInOutElastic+0x120>)
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7fe feb7 	bl	800037c <__aeabi_fmul>
 800160e:	4603      	mov	r3, r0
 8001610:	4914      	ldr	r1, [pc, #80]	@ (8001664 <EaseInOutElastic+0x128>)
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe fda8 	bl	8000168 <__aeabi_fsub>
 8001618:	4603      	mov	r3, r0
 800161a:	68f9      	ldr	r1, [r7, #12]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe fead 	bl	800037c <__aeabi_fmul>
 8001622:	4603      	mov	r3, r0
 8001624:	4618      	mov	r0, r3
 8001626:	f003 fcdd 	bl	8004fe4 <sinf>
 800162a:	4603      	mov	r3, r0
 800162c:	4619      	mov	r1, r3
 800162e:	4620      	mov	r0, r4
 8001630:	f7fe fea4 	bl	800037c <__aeabi_fmul>
 8001634:	4603      	mov	r3, r0
 8001636:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ff52 	bl	80004e4 <__aeabi_fdiv>
 8001640:	4603      	mov	r3, r0
 8001642:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe fd90 	bl	800016c <__addsf3>
 800164c:	4603      	mov	r3, r0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	bd90      	pop	{r4, r7, pc}
 8001656:	bf00      	nop
 8001658:	3fb2b8b9 	.word	0x3fb2b8b9
 800165c:	41a00000 	.word	0x41a00000
 8001660:	41200000 	.word	0x41200000
 8001664:	41320000 	.word	0x41320000
 8001668:	c1a00000 	.word	0xc1a00000

0800166c <EaseOutBounce>:

static float EaseOutBounce(float t)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
    const float n1 = 7.5625f;
 8001674:	4b45      	ldr	r3, [pc, #276]	@ (800178c <EaseOutBounce+0x120>)
 8001676:	60fb      	str	r3, [r7, #12]
    const float d1 = 2.75f;
 8001678:	4b45      	ldr	r3, [pc, #276]	@ (8001790 <EaseOutBounce+0x124>)
 800167a:	60bb      	str	r3, [r7, #8]

    if (t < 1 / d1)
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001682:	f7fe ff2f 	bl	80004e4 <__aeabi_fdiv>
 8001686:	4603      	mov	r3, r0
 8001688:	4619      	mov	r1, r3
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff f814 	bl	80006b8 <__aeabi_fcmplt>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00a      	beq.n	80016ac <EaseOutBounce+0x40>
    {
        return n1 * t * t;
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f7fe fe6f 	bl	800037c <__aeabi_fmul>
 800169e:	4603      	mov	r3, r0
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe fe6a 	bl	800037c <__aeabi_fmul>
 80016a8:	4603      	mov	r3, r0
 80016aa:	e06a      	b.n	8001782 <EaseOutBounce+0x116>
    }
    else if (t < 2 / d1)
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016b2:	f7fe ff17 	bl	80004e4 <__aeabi_fdiv>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4619      	mov	r1, r3
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7fe fffc 	bl	80006b8 <__aeabi_fcmplt>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d01c      	beq.n	8001700 <EaseOutBounce+0x94>
    {
        t -= 1.5f / d1;
 80016c6:	68b9      	ldr	r1, [r7, #8]
 80016c8:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 80016cc:	f7fe ff0a 	bl	80004e4 <__aeabi_fdiv>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4619      	mov	r1, r3
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7fe fd47 	bl	8000168 <__aeabi_fsub>
 80016da:	4603      	mov	r3, r0
 80016dc:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.75f;
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f7fe fe4b 	bl	800037c <__aeabi_fmul>
 80016e6:	4603      	mov	r3, r0
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe fe46 	bl	800037c <__aeabi_fmul>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe fd38 	bl	800016c <__addsf3>
 80016fc:	4603      	mov	r3, r0
 80016fe:	e040      	b.n	8001782 <EaseOutBounce+0x116>
    }
    else if (t < 2.5f / d1)
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	4824      	ldr	r0, [pc, #144]	@ (8001794 <EaseOutBounce+0x128>)
 8001704:	f7fe feee 	bl	80004e4 <__aeabi_fdiv>
 8001708:	4603      	mov	r3, r0
 800170a:	4619      	mov	r1, r3
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7fe ffd3 	bl	80006b8 <__aeabi_fcmplt>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d01a      	beq.n	800174e <EaseOutBounce+0xe2>
    {
        t -= 2.25f / d1;
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	481f      	ldr	r0, [pc, #124]	@ (8001798 <EaseOutBounce+0x12c>)
 800171c:	f7fe fee2 	bl	80004e4 <__aeabi_fdiv>
 8001720:	4603      	mov	r3, r0
 8001722:	4619      	mov	r1, r3
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7fe fd1f 	bl	8000168 <__aeabi_fsub>
 800172a:	4603      	mov	r3, r0
 800172c:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.9375f;
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f7fe fe23 	bl	800037c <__aeabi_fmul>
 8001736:	4603      	mov	r3, r0
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe fe1e 	bl	800037c <__aeabi_fmul>
 8001740:	4603      	mov	r3, r0
 8001742:	4916      	ldr	r1, [pc, #88]	@ (800179c <EaseOutBounce+0x130>)
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe fd11 	bl	800016c <__addsf3>
 800174a:	4603      	mov	r3, r0
 800174c:	e019      	b.n	8001782 <EaseOutBounce+0x116>
    }
    else
    {
        t -= 2.625f / d1;
 800174e:	68b9      	ldr	r1, [r7, #8]
 8001750:	4813      	ldr	r0, [pc, #76]	@ (80017a0 <EaseOutBounce+0x134>)
 8001752:	f7fe fec7 	bl	80004e4 <__aeabi_fdiv>
 8001756:	4603      	mov	r3, r0
 8001758:	4619      	mov	r1, r3
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7fe fd04 	bl	8000168 <__aeabi_fsub>
 8001760:	4603      	mov	r3, r0
 8001762:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.984375f;
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f7fe fe08 	bl	800037c <__aeabi_fmul>
 800176c:	4603      	mov	r3, r0
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fe03 	bl	800037c <__aeabi_fmul>
 8001776:	4603      	mov	r3, r0
 8001778:	490a      	ldr	r1, [pc, #40]	@ (80017a4 <EaseOutBounce+0x138>)
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fcf6 	bl	800016c <__addsf3>
 8001780:	4603      	mov	r3, r0
    }
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40f20000 	.word	0x40f20000
 8001790:	40300000 	.word	0x40300000
 8001794:	40200000 	.word	0x40200000
 8001798:	40100000 	.word	0x40100000
 800179c:	3f700000 	.word	0x3f700000
 80017a0:	40280000 	.word	0x40280000
 80017a4:	3f7c0000 	.word	0x3f7c0000

080017a8 <EaseInBounce>:

// 反弹缓动
static float EaseInBounce(float t)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
    return 1 - EaseOutBounce(1 - t);
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80017b6:	f7fe fcd7 	bl	8000168 <__aeabi_fsub>
 80017ba:	4603      	mov	r3, r0
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff55 	bl	800166c <EaseOutBounce>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4619      	mov	r1, r3
 80017c6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80017ca:	f7fe fccd 	bl	8000168 <__aeabi_fsub>
 80017ce:	4603      	mov	r3, r0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <EaseInOutBounce>:

static float EaseInOutBounce(float t)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 80017e0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7fe ff67 	bl	80006b8 <__aeabi_fcmplt>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d010      	beq.n	8001812 <EaseInOutBounce+0x3a>
        return EaseInBounce(t * 2) * 0.5f;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4619      	mov	r1, r3
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fcb9 	bl	800016c <__addsf3>
 80017fa:	4603      	mov	r3, r0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ffd3 	bl	80017a8 <EaseInBounce>
 8001802:	4603      	mov	r3, r0
 8001804:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fdb7 	bl	800037c <__aeabi_fmul>
 800180e:	4603      	mov	r3, r0
 8001810:	e01b      	b.n	800184a <EaseInOutBounce+0x72>
    return EaseOutBounce(t * 2 - 1) * 0.5f + 0.5f;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4619      	mov	r1, r3
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fca8 	bl	800016c <__addsf3>
 800181c:	4603      	mov	r3, r0
 800181e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fca0 	bl	8000168 <__aeabi_fsub>
 8001828:	4603      	mov	r3, r0
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ff1e 	bl	800166c <EaseOutBounce>
 8001830:	4603      	mov	r3, r0
 8001832:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fda0 	bl	800037c <__aeabi_fmul>
 800183c:	4603      	mov	r3, r0
 800183e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fc92 	bl	800016c <__addsf3>
 8001848:	4603      	mov	r3, r0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <EaseInBack>:

// 背越式缓动
static float EaseInBack(float t)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 800185c:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <EaseInBack+0x60>)
 800185e:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8001860:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f7fe fc81 	bl	800016c <__addsf3>
 800186a:	4603      	mov	r3, r0
 800186c:	60bb      	str	r3, [r7, #8]

    return c3 * t * t * t - c1 * t * t;
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	68b8      	ldr	r0, [r7, #8]
 8001872:	f7fe fd83 	bl	800037c <__aeabi_fmul>
 8001876:	4603      	mov	r3, r0
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fd7e 	bl	800037c <__aeabi_fmul>
 8001880:	4603      	mov	r3, r0
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fd79 	bl	800037c <__aeabi_fmul>
 800188a:	4603      	mov	r3, r0
 800188c:	461c      	mov	r4, r3
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f7fe fd73 	bl	800037c <__aeabi_fmul>
 8001896:	4603      	mov	r3, r0
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fd6e 	bl	800037c <__aeabi_fmul>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4619      	mov	r1, r3
 80018a4:	4620      	mov	r0, r4
 80018a6:	f7fe fc5f 	bl	8000168 <__aeabi_fsub>
 80018aa:	4603      	mov	r3, r0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd90      	pop	{r4, r7, pc}
 80018b4:	3fd9cd60 	.word	0x3fd9cd60

080018b8 <EaseOutBack>:

static float EaseOutBack(float t)
{
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 80018c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001934 <EaseOutBack+0x7c>)
 80018c2:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 80018c4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f7fe fc4f 	bl	800016c <__addsf3>
 80018ce:	4603      	mov	r3, r0
 80018d0:	60bb      	str	r3, [r7, #8]

    return 1 + c3 * powf(t - 1, 3) + c1 * powf(t - 1, 2);
 80018d2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7fe fc46 	bl	8000168 <__aeabi_fsub>
 80018dc:	4603      	mov	r3, r0
 80018de:	4916      	ldr	r1, [pc, #88]	@ (8001938 <EaseOutBack+0x80>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f003 fadf 	bl	8004ea4 <powf>
 80018e6:	4603      	mov	r3, r0
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fd46 	bl	800037c <__aeabi_fmul>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fc38 	bl	800016c <__addsf3>
 80018fc:	4603      	mov	r3, r0
 80018fe:	461c      	mov	r4, r3
 8001900:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7fe fc2f 	bl	8000168 <__aeabi_fsub>
 800190a:	4603      	mov	r3, r0
 800190c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001910:	4618      	mov	r0, r3
 8001912:	f003 fac7 	bl	8004ea4 <powf>
 8001916:	4603      	mov	r3, r0
 8001918:	68f9      	ldr	r1, [r7, #12]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fd2e 	bl	800037c <__aeabi_fmul>
 8001920:	4603      	mov	r3, r0
 8001922:	4619      	mov	r1, r3
 8001924:	4620      	mov	r0, r4
 8001926:	f7fe fc21 	bl	800016c <__addsf3>
 800192a:	4603      	mov	r3, r0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	bd90      	pop	{r4, r7, pc}
 8001934:	3fd9cd60 	.word	0x3fd9cd60
 8001938:	40400000 	.word	0x40400000

0800193c <EaseInOutBack>:

static float EaseInOutBack(float t)
{
 800193c:	b5b0      	push	{r4, r5, r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8001944:	4b40      	ldr	r3, [pc, #256]	@ (8001a48 <EaseInOutBack+0x10c>)
 8001946:	60fb      	str	r3, [r7, #12]
    const float c2 = c1 * 1.525f;
 8001948:	4940      	ldr	r1, [pc, #256]	@ (8001a4c <EaseInOutBack+0x110>)
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f7fe fd16 	bl	800037c <__aeabi_fmul>
 8001950:	4603      	mov	r3, r0
 8001952:	60bb      	str	r3, [r7, #8]

    if (t < 0.5f)
 8001954:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7fe fead 	bl	80006b8 <__aeabi_fcmplt>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d02c      	beq.n	80019be <EaseInOutBack+0x82>
        return (powf(2 * t, 2) * ((c2 + 1) * 2 * t - c2)) / 2;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4619      	mov	r1, r3
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fbff 	bl	800016c <__addsf3>
 800196e:	4603      	mov	r3, r0
 8001970:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001974:	4618      	mov	r0, r3
 8001976:	f003 fa95 	bl	8004ea4 <powf>
 800197a:	4604      	mov	r4, r0
 800197c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001980:	68b8      	ldr	r0, [r7, #8]
 8001982:	f7fe fbf3 	bl	800016c <__addsf3>
 8001986:	4603      	mov	r3, r0
 8001988:	4619      	mov	r1, r3
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fbee 	bl	800016c <__addsf3>
 8001990:	4603      	mov	r3, r0
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fcf1 	bl	800037c <__aeabi_fmul>
 800199a:	4603      	mov	r3, r0
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fbe2 	bl	8000168 <__aeabi_fsub>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4619      	mov	r1, r3
 80019a8:	4620      	mov	r0, r4
 80019aa:	f7fe fce7 	bl	800037c <__aeabi_fmul>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fd95 	bl	80004e4 <__aeabi_fdiv>
 80019ba:	4603      	mov	r3, r0
 80019bc:	e03f      	b.n	8001a3e <EaseInOutBack+0x102>
    return (powf(2 * t - 2, 2) * ((c2 + 1) * (t * 2 - 2) + c2) + 2) / 2;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4619      	mov	r1, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fbd2 	bl	800016c <__addsf3>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fbca 	bl	8000168 <__aeabi_fsub>
 80019d4:	4603      	mov	r3, r0
 80019d6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80019da:	4618      	mov	r0, r3
 80019dc:	f003 fa62 	bl	8004ea4 <powf>
 80019e0:	4604      	mov	r4, r0
 80019e2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80019e6:	68b8      	ldr	r0, [r7, #8]
 80019e8:	f7fe fbc0 	bl	800016c <__addsf3>
 80019ec:	4603      	mov	r3, r0
 80019ee:	461d      	mov	r5, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4619      	mov	r1, r3
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fbb9 	bl	800016c <__addsf3>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fbb1 	bl	8000168 <__aeabi_fsub>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4628      	mov	r0, r5
 8001a0c:	f7fe fcb6 	bl	800037c <__aeabi_fmul>
 8001a10:	4603      	mov	r3, r0
 8001a12:	68b9      	ldr	r1, [r7, #8]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fba9 	bl	800016c <__addsf3>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f7fe fcac 	bl	800037c <__aeabi_fmul>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fb9e 	bl	800016c <__addsf3>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fd54 	bl	80004e4 <__aeabi_fdiv>
 8001a3c:	4603      	mov	r3, r0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bdb0      	pop	{r4, r5, r7, pc}
 8001a46:	bf00      	nop
 8001a48:	3fd9cd60 	.word	0x3fd9cd60
 8001a4c:	3fc33333 	.word	0x3fc33333

08001a50 <EaseInSine>:

// 正弦缓动
static float EaseInSine(float t)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
    return 1 - cosf((t * 3.14159f) / 2);
 8001a58:	490c      	ldr	r1, [pc, #48]	@ (8001a8c <EaseInSine+0x3c>)
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7fe fc8e 	bl	800037c <__aeabi_fmul>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fd3c 	bl	80004e4 <__aeabi_fdiv>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f003 fa80 	bl	8004f74 <cosf>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4619      	mov	r1, r3
 8001a78:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001a7c:	f7fe fb74 	bl	8000168 <__aeabi_fsub>
 8001a80:	4603      	mov	r3, r0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40490fd0 	.word	0x40490fd0

08001a90 <EaseOutSine>:

static float EaseOutSine(float t)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
    return sinf((t * 3.14159f) / 2);
 8001a98:	4909      	ldr	r1, [pc, #36]	@ (8001ac0 <EaseOutSine+0x30>)
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7fe fc6e 	bl	800037c <__aeabi_fmul>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fd1c 	bl	80004e4 <__aeabi_fdiv>
 8001aac:	4603      	mov	r3, r0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 fa98 	bl	8004fe4 <sinf>
 8001ab4:	4603      	mov	r3, r0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40490fd0 	.word	0x40490fd0

08001ac4 <EaseInOutSine>:

static float EaseInOutSine(float t)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
    return -(cosf(3.14159f * t) - 1) / 2;
 8001acc:	490d      	ldr	r1, [pc, #52]	@ (8001b04 <EaseInOutSine+0x40>)
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7fe fc54 	bl	800037c <__aeabi_fmul>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f003 fa4c 	bl	8004f74 <cosf>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fb40 	bl	8000168 <__aeabi_fsub>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001aee:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fcf6 	bl	80004e4 <__aeabi_fdiv>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40490fd0 	.word	0x40490fd0

08001b08 <GetEaseValue>:

static float GetEaseValue(float progress, EaseType_t easeType)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	70fb      	strb	r3, [r7, #3]
    switch (easeType)
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	2b18      	cmp	r3, #24
 8001b18:	f200 80b3 	bhi.w	8001c82 <GetEaseValue+0x17a>
 8001b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b24 <GetEaseValue+0x1c>)
 8001b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b22:	bf00      	nop
 8001b24:	08001b89 	.word	0x08001b89
 8001b28:	08001b93 	.word	0x08001b93
 8001b2c:	08001b9d 	.word	0x08001b9d
 8001b30:	08001ba7 	.word	0x08001ba7
 8001b34:	08001bb1 	.word	0x08001bb1
 8001b38:	08001bbb 	.word	0x08001bbb
 8001b3c:	08001bc5 	.word	0x08001bc5
 8001b40:	08001bcf 	.word	0x08001bcf
 8001b44:	08001bd9 	.word	0x08001bd9
 8001b48:	08001be3 	.word	0x08001be3
 8001b4c:	08001bed 	.word	0x08001bed
 8001b50:	08001bf7 	.word	0x08001bf7
 8001b54:	08001c01 	.word	0x08001c01
 8001b58:	08001c0b 	.word	0x08001c0b
 8001b5c:	08001c15 	.word	0x08001c15
 8001b60:	08001c1f 	.word	0x08001c1f
 8001b64:	08001c29 	.word	0x08001c29
 8001b68:	08001c33 	.word	0x08001c33
 8001b6c:	08001c3d 	.word	0x08001c3d
 8001b70:	08001c47 	.word	0x08001c47
 8001b74:	08001c51 	.word	0x08001c51
 8001b78:	08001c5b 	.word	0x08001c5b
 8001b7c:	08001c65 	.word	0x08001c65
 8001b80:	08001c6f 	.word	0x08001c6f
 8001b84:	08001c79 	.word	0x08001c79
    {
    case EASE_LINEAR:
        return EaseLinear(progress);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff fa15 	bl	8000fb8 <EaseLinear>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	e078      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_IN_QUAD:
        return EaseInQuad(progress);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff fa1a 	bl	8000fcc <EaseInQuad>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	e073      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_OUT_QUAD:
        return EaseOutQuad(progress);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff fa22 	bl	8000fe6 <EaseOutQuad>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	e06e      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_INOUT_QUAD:
        return EaseInOutQuad(progress);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff fa30 	bl	800100c <EaseInOutQuad>
 8001bac:	4603      	mov	r3, r0
 8001bae:	e069      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_IN_CUBIC:
        return EaseInCubic(progress);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff fa5e 	bl	8001072 <EaseInCubic>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	e064      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_OUT_CUBIC:
        return EaseOutCubic(progress);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff fa6b 	bl	8001096 <EaseOutCubic>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	e05f      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_INOUT_CUBIC:
        return EaseInOutCubic(progress);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff fa85 	bl	80010d4 <EaseInOutCubic>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	e05a      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_IN_EXPO:
        return EaseInExpo(progress);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff fad2 	bl	8001178 <EaseInExpo>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	e055      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_OUT_EXPO:
        return EaseOutExpo(progress);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff faf3 	bl	80011c4 <EaseOutExpo>
 8001bde:	4603      	mov	r3, r0
 8001be0:	e050      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_INOUT_EXPO:
        return EaseInOutExpo(progress);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff fb14 	bl	8001210 <EaseInOutExpo>
 8001be8:	4603      	mov	r3, r0
 8001bea:	e04b      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_IN_CIRC:
        return EaseInCirc(progress);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff fb6f 	bl	80012d0 <EaseInCirc>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	e046      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_OUT_CIRC:
        return EaseOutCirc(progress);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff fb87 	bl	800130a <EaseOutCirc>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	e041      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_INOUT_CIRC:
        return EaseInOutCirc(progress);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff fba0 	bl	8001346 <EaseInOutCirc>
 8001c06:	4603      	mov	r3, r0
 8001c08:	e03c      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_IN_ELASTIC:
        return EaseInElastic(progress);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff fbf6 	bl	80013fc <EaseInElastic>
 8001c10:	4603      	mov	r3, r0
 8001c12:	e037      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_OUT_ELASTIC:
        return EaseOutElastic(progress);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff fc41 	bl	800149c <EaseOutElastic>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	e032      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_INOUT_ELASTIC:
        return EaseInOutElastic(progress);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff fc8c 	bl	800153c <EaseInOutElastic>
 8001c24:	4603      	mov	r3, r0
 8001c26:	e02d      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_IN_BOUNCE:
        return EaseInBounce(progress);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff fdbd 	bl	80017a8 <EaseInBounce>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	e028      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_OUT_BOUNCE:
        return EaseOutBounce(progress);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff fd1a 	bl	800166c <EaseOutBounce>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	e023      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_INOUT_BOUNCE:
        return EaseInOutBounce(progress);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff fdcb 	bl	80017d8 <EaseInOutBounce>
 8001c42:	4603      	mov	r3, r0
 8001c44:	e01e      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_IN_BACK:
        return EaseInBack(progress);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff fe04 	bl	8001854 <EaseInBack>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	e019      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_OUT_BACK:
        return EaseOutBack(progress);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff fe31 	bl	80018b8 <EaseOutBack>
 8001c56:	4603      	mov	r3, r0
 8001c58:	e014      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_INOUT_BACK:
        return EaseInOutBack(progress);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff fe6e 	bl	800193c <EaseInOutBack>
 8001c60:	4603      	mov	r3, r0
 8001c62:	e00f      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_IN_SINE:
        return EaseInSine(progress);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff fef3 	bl	8001a50 <EaseInSine>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	e00a      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_OUT_SINE:
        return EaseOutSine(progress);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ff0e 	bl	8001a90 <EaseOutSine>
 8001c74:	4603      	mov	r3, r0
 8001c76:	e005      	b.n	8001c84 <GetEaseValue+0x17c>
    case EASE_INOUT_SINE:
        return EaseInOutSine(progress);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ff23 	bl	8001ac4 <EaseInOutSine>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	e000      	b.n	8001c84 <GetEaseValue+0x17c>
    default:
        return progress;
 8001c82:	687b      	ldr	r3, [r7, #4]
    }
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <OLED_InitAnimation>:

#pragma region ANIMATIONTWEENS
// 这里是底层动画实现
void OLED_InitAnimation(Animation_t *anim, float startValue, float endValue,
                        uint32_t duration, EaseType_t easeType)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]
    anim->startTime = HAL_GetTick();
 8001c9a:	f000 fe11 	bl	80028c0 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	601a      	str	r2, [r3, #0]
    anim->duration = duration;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
    anim->startValue = startValue;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	609a      	str	r2, [r3, #8]
    anim->endValue = endValue;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	60da      	str	r2, [r3, #12]
    anim->currentValue = startValue;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	611a      	str	r2, [r3, #16]
    anim->isActive = 1;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	751a      	strb	r2, [r3, #20]
    anim->easeType = easeType;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	7e3a      	ldrb	r2, [r7, #24]
 8001cc6:	755a      	strb	r2, [r3, #21]
}
 8001cc8:	bf00      	nop
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <OLED_UpdateAnimation>:

// 更新动画状态，返回isActive的值
uint8_t OLED_UpdateAnimation(Animation_t *anim, uint32_t currentTime)
{
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
    if (!anim->isActive)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	7d1b      	ldrb	r3, [r3, #20]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <OLED_UpdateAnimation+0x16>
        return 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e04d      	b.n	8001d82 <OLED_UpdateAnimation+0xb2>

    uint32_t elapsedTime = currentTime - anim->startTime;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	617b      	str	r3, [r7, #20]

    // 动画完成
    if (elapsedTime >= anim->duration || anim->currentValue == anim->endValue) // 如果我的目标在指定的点上，也关闭isActive
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d20a      	bcs.n	8001d10 <OLED_UpdateAnimation+0x40>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691a      	ldr	r2, [r3, #16]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	4619      	mov	r1, r3
 8001d04:	4610      	mov	r0, r2
 8001d06:	f7fe fccd 	bl	80006a4 <__aeabi_fcmpeq>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <OLED_UpdateAnimation+0x52>
    {
        anim->currentValue = anim->endValue;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	611a      	str	r2, [r3, #16]
        anim->isActive = 0;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	751a      	strb	r2, [r3, #20]
        return 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e02f      	b.n	8001d82 <OLED_UpdateAnimation+0xb2>
    }

    // 计算当前进度 (0.0 - 1.0)
    float progress = (float)elapsedTime / anim->duration;
 8001d22:	6978      	ldr	r0, [r7, #20]
 8001d24:	f7fe fad2 	bl	80002cc <__aeabi_ui2f>
 8001d28:	4604      	mov	r4, r0
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe facc 	bl	80002cc <__aeabi_ui2f>
 8001d34:	4603      	mov	r3, r0
 8001d36:	4619      	mov	r1, r3
 8001d38:	4620      	mov	r0, r4
 8001d3a:	f7fe fbd3 	bl	80004e4 <__aeabi_fdiv>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	613b      	str	r3, [r7, #16]

    // 应用缓动函数
    float easedProgress = GetEaseValue(progress, anim->easeType);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	7d5b      	ldrb	r3, [r3, #21]
 8001d46:	4619      	mov	r1, r3
 8001d48:	6938      	ldr	r0, [r7, #16]
 8001d4a:	f7ff fedd 	bl	8001b08 <GetEaseValue>
 8001d4e:	60f8      	str	r0, [r7, #12]

    // 计算当前值
    anim->currentValue = anim->startValue + (anim->endValue - anim->startValue) * easedProgress;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689c      	ldr	r4, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4610      	mov	r0, r2
 8001d60:	f7fe fa02 	bl	8000168 <__aeabi_fsub>
 8001d64:	4603      	mov	r3, r0
 8001d66:	68f9      	ldr	r1, [r7, #12]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fb07 	bl	800037c <__aeabi_fmul>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4619      	mov	r1, r3
 8001d72:	4620      	mov	r0, r4
 8001d74:	f7fe f9fa 	bl	800016c <__addsf3>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	611a      	str	r2, [r3, #16]

    return 1;
 8001d80:	2301      	movs	r3, #1
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd90      	pop	{r4, r7, pc}

08001d8a <OLED_GetAnimationValue>:

// 获取当前动画值
float OLED_GetAnimationValue(Animation_t *anim)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
    return anim->currentValue;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr

08001da0 <OLED_InitAnimationManager>:

// 动画管理器全局管理部分
AnimationManager_t g_AnimationManager; // 声明一个全局的动画管理器

void OLED_InitAnimationManager(AnimationManager_t *manager) // 这是初始化一个动画管理器，填入你的manager名字，在系统初始化时候调用它
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
    manager->count = 0;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 25f0 	strb.w	r2, [r3, #1520]	@ 0x5f0
    memset(manager->taggedAnimations, 0, sizeof(manager->taggedAnimations));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 8001db6:	2100      	movs	r1, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 f820 	bl	8004dfe <memset>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <OLED_FindTaggedAnimation>:

TaggedAnimation_t *OLED_FindTaggedAnimation(AnimationManager_t *manager, const char *tag) // 查找对应manager的标签对应的动画tag
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < manager->count; i++)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	e016      	b.n	8001e04 <OLED_FindTaggedAnimation+0x3e>
    {
        if (strcmp(manager->taggedAnimations[i].tag, tag) == 0)
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	224c      	movs	r2, #76	@ 0x4c
 8001dda:	fb02 f303 	mul.w	r3, r2, r3
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	6839      	ldr	r1, [r7, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe f9b1 	bl	800014c <strcmp>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d106      	bne.n	8001dfe <OLED_FindTaggedAnimation+0x38>
        {
            return &manager->taggedAnimations[i];
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	224c      	movs	r2, #76	@ 0x4c
 8001df4:	fb02 f303 	mul.w	r3, r2, r3
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	e009      	b.n	8001e12 <OLED_FindTaggedAnimation+0x4c>
    for (uint8_t i = 0; i < manager->count; i++)
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	3301      	adds	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8001e0a:	7bfa      	ldrb	r2, [r7, #15]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d3e2      	bcc.n	8001dd6 <OLED_FindTaggedAnimation+0x10>
        }
    }
    return NULL;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <OLED_GetObjectPosition>:

uint8_t OLED_GetObjectPosition(AnimationManager_t *manager, const char *tag, float *x, float *y) // 获取tag当前位置
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f7ff ffcb 	bl	8001dc6 <OLED_FindTaggedAnimation>
 8001e30:	6178      	str	r0, [r7, #20]
    if (anim)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00f      	beq.n	8001e58 <OLED_GetObjectPosition+0x3e>
    {
        if (x)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <OLED_GetObjectPosition+0x2c>
            *x = anim->currentX;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	601a      	str	r2, [r3, #0]
        if (y)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <OLED_GetObjectPosition+0x3a>
            *y = anim->currentY;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	601a      	str	r2, [r3, #0]
        return 1;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <OLED_GetObjectPosition+0x40>
    }
    return 0;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <OLED_MoveObject>:

// 移动指定标签的对象
void OLED_MoveObject(AnimationManager_t *manager, const char *tag,
                     float startX, float startY, float targetX, float targetY,
                     uint32_t duration, EaseType_t easeType) // 这个函数是用来移动一个对象的，tag是对象的标签，startX和startY是起始坐标，targetX和targetY是目标坐标，duration是动画持续时间，easeType是缓动类型
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b088      	sub	sp, #32
 8001e66:	af02      	add	r7, sp, #8
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	603b      	str	r3, [r7, #0]
    // 查找已存在的动画
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f7ff ffa7 	bl	8001dc6 <OLED_FindTaggedAnimation>
 8001e78:	6178      	str	r0, [r7, #20]

    // 如果没找到并且还有可用槽位，创建新的动画
    if (anim == NULL)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d122      	bne.n	8001ec6 <OLED_MoveObject+0x64>
    {
        if (manager->count >= MAX_ANIMATIONS)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8001e86:	2b13      	cmp	r3, #19
 8001e88:	d838      	bhi.n	8001efc <OLED_MoveObject+0x9a>
            return; // 动画已满，无法添加

        anim = &manager->taggedAnimations[manager->count++];
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	b2d1      	uxtb	r1, r2
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	f882 15f0 	strb.w	r1, [r2, #1520]	@ 0x5f0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	234c      	movs	r3, #76	@ 0x4c
 8001e9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]
        strncpy(anim->tag, tag, sizeof(anim->tag) - 1);
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	220f      	movs	r2, #15
 8001eac:	68b9      	ldr	r1, [r7, #8]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f002 ffad 	bl	8004e0e <strncpy>
        anim->tag[sizeof(anim->tag) - 1] = '\0'; // 确保字符串结束
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	73da      	strb	r2, [r3, #15]
        anim->currentX = startX;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = startY;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // 初始化或更新X和Y坐标的动画
    OLED_InitAnimation(&anim->xAnimation, startX, targetX, duration, easeType);
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f103 0010 	add.w	r0, r3, #16
 8001ecc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ed4:	6a3a      	ldr	r2, [r7, #32]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	f7ff fed8 	bl	8001c8c <OLED_InitAnimation>
    OLED_InitAnimation(&anim->yAnimation, startY, targetY, duration, easeType);
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8001ee2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eec:	6839      	ldr	r1, [r7, #0]
 8001eee:	f7ff fecd 	bl	8001c8c <OLED_InitAnimation>
    anim->isActive = 1;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001efa:	e000      	b.n	8001efe <OLED_MoveObject+0x9c>
            return; // 动画已满，无法添加
 8001efc:	bf00      	nop
}
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <OLED_UpdateAnimationManager>:

// 更新manager里面的所有动画!
void OLED_UpdateAnimationManager(AnimationManager_t *manager) //! 这里需要使用OLED_UpdateDisplayVSync()来更新显示
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 8001f0c:	f000 fcd8 	bl	80028c0 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

    for (uint8_t i = 0; i < manager->count; i++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	75fb      	strb	r3, [r7, #23]
 8001f16:	e03a      	b.n	8001f8e <OLED_UpdateAnimationManager+0x8a>
    {
        TaggedAnimation_t *anim = &manager->taggedAnimations[i];
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
 8001f1a:	224c      	movs	r2, #76	@ 0x4c
 8001f1c:	fb02 f303 	mul.w	r3, r2, r3
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	4413      	add	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
        if (!anim->isActive)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d02a      	beq.n	8001f86 <OLED_UpdateAnimationManager+0x82>
            continue;

        uint8_t activeX = OLED_UpdateAnimation(&anim->xAnimation, currentTime);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	3310      	adds	r3, #16
 8001f34:	6939      	ldr	r1, [r7, #16]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff feca 	bl	8001cd0 <OLED_UpdateAnimation>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	72fb      	strb	r3, [r7, #11]
        uint8_t activeY = OLED_UpdateAnimation(&anim->yAnimation, currentTime);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3328      	adds	r3, #40	@ 0x28
 8001f44:	6939      	ldr	r1, [r7, #16]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fec2 	bl	8001cd0 <OLED_UpdateAnimation>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	72bb      	strb	r3, [r7, #10]

        anim->currentX = OLED_GetAnimationValue(&anim->xAnimation);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	3310      	adds	r3, #16
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff18 	bl	8001d8a <OLED_GetAnimationValue>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = OLED_GetAnimationValue(&anim->yAnimation);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	3328      	adds	r3, #40	@ 0x28
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff10 	bl	8001d8a <OLED_GetAnimationValue>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	649a      	str	r2, [r3, #72]	@ 0x48

        // 如果两个动画都结束，则标记该对象动画为非活跃
        if (!activeX && !activeY)
 8001f70:	7afb      	ldrb	r3, [r7, #11]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d108      	bne.n	8001f88 <OLED_UpdateAnimationManager+0x84>
 8001f76:	7abb      	ldrb	r3, [r7, #10]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d105      	bne.n	8001f88 <OLED_UpdateAnimationManager+0x84>
            anim->isActive = 0;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f84:	e000      	b.n	8001f88 <OLED_UpdateAnimationManager+0x84>
            continue;
 8001f86:	bf00      	nop
    for (uint8_t i = 0; i < manager->count; i++)
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	75fb      	strb	r3, [r7, #23]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8001f94:	7dfa      	ldrb	r2, [r7, #23]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d3be      	bcc.n	8001f18 <OLED_UpdateAnimationManager+0x14>
    }
}
 8001f9a:	bf00      	nop
 8001f9c:	bf00      	nop
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <OLED_DoTweenObject>:
    return 0; // 如果没有找到，返回0表示非活跃
}

// 这个函数是用来移动一个对象的，tag是对象的标签，targetX和targetY是目标坐标，duration是动画持续时间，easeType是缓动类型 bool为是可以在while循环里面使用，如果不使用就不需要函数OLED_UpdateAnimationManager就可以使用
void OLED_DoTweenObject(AnimationManager_t *manager, const char *tag, float targetX, float targetY, uint32_t duration, EaseType_t easeType, bool enablePrevMutiUseCalling)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	@ 0x28
 8001fa8:	af04      	add	r7, sp, #16
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8001fb2:	68b9      	ldr	r1, [r7, #8]
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f7ff ff06 	bl	8001dc6 <OLED_FindTaggedAnimation>
 8001fba:	6178      	str	r0, [r7, #20]
    if (enablePrevMutiUseCalling)
 8001fbc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d01a      	beq.n	8001ffa <OLED_DoTweenObject+0x56>
    {
        if (anim && !(anim->isActive)) // 找到了动画，而且它不是正在tween的时候
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d03f      	beq.n	800204a <OLED_DoTweenObject+0xa6>
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d13a      	bne.n	800204a <OLED_DoTweenObject+0xa6>
        {
            OLED_MoveObject(manager, tag, anim->currentX, anim->currentY, targetX, targetY, duration, easeType);
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001fdc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001fe0:	9303      	str	r3, [sp, #12]
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	9302      	str	r3, [sp, #8]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	9301      	str	r3, [sp, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f7ff ff35 	bl	8001e62 <OLED_MoveObject>
        if (anim && (anim->currentX != targetX || anim->currentY != targetY))
        {
            OLED_MoveObject(manager, tag, anim->currentX, anim->currentY, targetX, targetY, duration, easeType);
        }
    }
}
 8001ff8:	e027      	b.n	800204a <OLED_DoTweenObject+0xa6>
        if (anim && (anim->currentX != targetX || anim->currentY != targetY))
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d024      	beq.n	800204a <OLED_DoTweenObject+0xa6>
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002004:	4619      	mov	r1, r3
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7fe fb4c 	bl	80006a4 <__aeabi_fcmpeq>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <OLED_DoTweenObject+0x82>
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002016:	4619      	mov	r1, r3
 8002018:	6838      	ldr	r0, [r7, #0]
 800201a:	f7fe fb43 	bl	80006a4 <__aeabi_fcmpeq>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d000      	beq.n	8002026 <OLED_DoTweenObject+0x82>
}
 8002024:	e011      	b.n	800204a <OLED_DoTweenObject+0xa6>
            OLED_MoveObject(manager, tag, anim->currentX, anim->currentY, targetX, targetY, duration, easeType);
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800202e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002032:	9303      	str	r3, [sp, #12]
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	9302      	str	r3, [sp, #8]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	460b      	mov	r3, r1
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f7ff ff0c 	bl	8001e62 <OLED_MoveObject>
}
 800204a:	bf00      	nop
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <OLED_MoveObjectAxis>:

// 为X或Y轴单独创建动画的函数
void OLED_MoveObjectAxis(AnimationManager_t *manager, const char *tag,
                         float startX, float startY, float targetX, float targetY,
                         uint32_t duration, EaseType_t easeType, bool onlyX, bool onlyY)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b088      	sub	sp, #32
 8002056:	af02      	add	r7, sp, #8
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	603b      	str	r3, [r7, #0]
    // 查找已存在的动画
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f7ff feaf 	bl	8001dc6 <OLED_FindTaggedAnimation>
 8002068:	6178      	str	r0, [r7, #20]

    // 如果没找到并且还有可用槽位，创建新的动画
    if (anim == NULL)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d122      	bne.n	80020b6 <OLED_MoveObjectAxis+0x64>
    {
        if (manager->count >= MAX_ANIMATIONS)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8002076:	2b13      	cmp	r3, #19
 8002078:	d846      	bhi.n	8002108 <OLED_MoveObjectAxis+0xb6>
            return; // 动画已满，无法添加

        anim = &manager->taggedAnimations[manager->count++];
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	b2d1      	uxtb	r1, r2
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	f882 15f0 	strb.w	r1, [r2, #1520]	@ 0x5f0
 800208a:	461a      	mov	r2, r3
 800208c:	234c      	movs	r3, #76	@ 0x4c
 800208e:	fb02 f303 	mul.w	r3, r2, r3
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4413      	add	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
        strncpy(anim->tag, tag, sizeof(anim->tag) - 1);
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	220f      	movs	r2, #15
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	4618      	mov	r0, r3
 80020a0:	f002 feb5 	bl	8004e0e <strncpy>
        anim->tag[sizeof(anim->tag) - 1] = '\0'; // 确保字符串结束
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	2200      	movs	r2, #0
 80020a8:	73da      	strb	r2, [r3, #15]
        anim->currentX = startX;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = startY;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // 只初始化需要的轴的动画
    if (!onlyY) // 如果不是只修改Y轴，就修改X轴
 80020b6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80020ba:	f083 0301 	eor.w	r3, r3, #1
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00a      	beq.n	80020da <OLED_MoveObjectAxis+0x88>
        OLED_InitAnimation(&anim->xAnimation, startX, targetX, duration, easeType);
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f103 0010 	add.w	r0, r3, #16
 80020ca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d2:	6a3a      	ldr	r2, [r7, #32]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	f7ff fdd9 	bl	8001c8c <OLED_InitAnimation>
    if (!onlyX) // 如果不是只修改X轴，就修改Y轴
 80020da:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80020de:	f083 0301 	eor.w	r3, r3, #1
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00a      	beq.n	80020fe <OLED_MoveObjectAxis+0xac>
        OLED_InitAnimation(&anim->yAnimation, startY, targetY, duration, easeType);
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80020ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020f8:	6839      	ldr	r1, [r7, #0]
 80020fa:	f7ff fdc7 	bl	8001c8c <OLED_InitAnimation>

    anim->isActive = 1;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002106:	e000      	b.n	800210a <OLED_MoveObjectAxis+0xb8>
            return; // 动画已满，无法添加
 8002108:	bf00      	nop
}
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <OLED_DoTweenObjectX>:

// 这个函数是用来移动一个对象的，tag是对象的标签，targetX是目标坐标，duration是动画持续时间，easeType是缓动类型
//!这里不可以在while里面调用！为一次性调用，不需要OLED_UpdateAnimationManager
void OLED_DoTweenObjectX(AnimationManager_t *manager, const char *tag, float targetX, uint32_t duration, EaseType_t easeType)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08c      	sub	sp, #48	@ 0x30
 8002114:	af06      	add	r7, sp, #24
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 800211e:	68b9      	ldr	r1, [r7, #8]
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f7ff fe50 	bl	8001dc6 <OLED_FindTaggedAnimation>
 8002126:	6178      	str	r0, [r7, #20]
    if (anim && anim->currentX != targetX)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d021      	beq.n	8002172 <OLED_DoTweenObjectX+0x62>
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002132:	4619      	mov	r1, r3
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7fe fab5 	bl	80006a4 <__aeabi_fcmpeq>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d000      	beq.n	8002142 <OLED_DoTweenObjectX+0x32>
    {
        OLED_MoveObjectAxis(manager, tag, anim->currentX, anim->currentY, targetX, anim->currentY, duration, easeType, true, false);
    }
}
 8002140:	e017      	b.n	8002172 <OLED_DoTweenObjectX+0x62>
        OLED_MoveObjectAxis(manager, tag, anim->currentX, anim->currentY, targetX, anim->currentY, duration, easeType, true, false);
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800214e:	2200      	movs	r2, #0
 8002150:	9205      	str	r2, [sp, #20]
 8002152:	2201      	movs	r2, #1
 8002154:	9204      	str	r2, [sp, #16]
 8002156:	f897 2020 	ldrb.w	r2, [r7, #32]
 800215a:	9203      	str	r2, [sp, #12]
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	9202      	str	r2, [sp, #8]
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	4603      	mov	r3, r0
 8002168:	460a      	mov	r2, r1
 800216a:	68b9      	ldr	r1, [r7, #8]
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f7ff ff70 	bl	8002052 <OLED_MoveObjectAxis>
}
 8002172:	bf00      	nop
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <OLED_DoTweenObjectY>:

// 这个函数是用来移动一个对象的，tag是对象的标签，targetY是目标坐标，duration是动画持续时间，easeType是缓动类型
//!这里不可以在while里面调用！为一次性调用，不需要OLED_UpdateAnimationManager
void OLED_DoTweenObjectY(AnimationManager_t *manager, const char *tag, float targetY, uint32_t duration, EaseType_t easeType)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b08c      	sub	sp, #48	@ 0x30
 800217e:	af06      	add	r7, sp, #24
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
 8002186:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f7ff fe1b 	bl	8001dc6 <OLED_FindTaggedAnimation>
 8002190:	6178      	str	r0, [r7, #20]
    if (anim && anim->currentY != targetY)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d021      	beq.n	80021dc <OLED_DoTweenObjectY+0x62>
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800219c:	4619      	mov	r1, r3
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe fa80 	bl	80006a4 <__aeabi_fcmpeq>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d000      	beq.n	80021ac <OLED_DoTweenObjectY+0x32>
    {
        OLED_MoveObjectAxis(manager, tag, anim->currentX, anim->currentY, anim->currentX, targetY, duration, easeType, false, true);
    }
}
 80021aa:	e017      	b.n	80021dc <OLED_DoTweenObjectY+0x62>
        OLED_MoveObjectAxis(manager, tag, anim->currentX, anim->currentY, anim->currentX, targetY, duration, easeType, false, true);
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b8:	2201      	movs	r2, #1
 80021ba:	9205      	str	r2, [sp, #20]
 80021bc:	2200      	movs	r2, #0
 80021be:	9204      	str	r2, [sp, #16]
 80021c0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021c4:	9203      	str	r2, [sp, #12]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	9202      	str	r2, [sp, #8]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	9201      	str	r2, [sp, #4]
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	4603      	mov	r3, r0
 80021d2:	460a      	mov	r2, r1
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f7ff ff3b 	bl	8002052 <OLED_MoveObjectAxis>
}
 80021dc:	bf00      	nop
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <OLED_DrawRectangle>:
    }
}

// 绘制空心矩形
void OLED_DrawRectangle(uint8_t x, uint8_t y, uint8_t width, uint8_t height) //! UPDATEDISPLAY REQUIRED
{
 80021e4:	b590      	push	{r4, r7, lr}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4604      	mov	r4, r0
 80021ec:	4608      	mov	r0, r1
 80021ee:	4611      	mov	r1, r2
 80021f0:	461a      	mov	r2, r3
 80021f2:	4623      	mov	r3, r4
 80021f4:	71fb      	strb	r3, [r7, #7]
 80021f6:	4603      	mov	r3, r0
 80021f8:	71bb      	strb	r3, [r7, #6]
 80021fa:	460b      	mov	r3, r1
 80021fc:	717b      	strb	r3, [r7, #5]
 80021fe:	4613      	mov	r3, r2
 8002200:	713b      	strb	r3, [r7, #4]
    // 基础边界检查和裁剪
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT || width == 0 || height == 0)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	2b00      	cmp	r3, #0
 8002208:	db57      	blt.n	80022ba <OLED_DrawRectangle+0xd6>
 800220a:	79bb      	ldrb	r3, [r7, #6]
 800220c:	2b3f      	cmp	r3, #63	@ 0x3f
 800220e:	d854      	bhi.n	80022ba <OLED_DrawRectangle+0xd6>
 8002210:	797b      	ldrb	r3, [r7, #5]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d051      	beq.n	80022ba <OLED_DrawRectangle+0xd6>
 8002216:	793b      	ldrb	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d04e      	beq.n	80022ba <OLED_DrawRectangle+0xd6>
        return;
    if (x + width > OLED_WIDTH)
 800221c:	79fa      	ldrb	r2, [r7, #7]
 800221e:	797b      	ldrb	r3, [r7, #5]
 8002220:	4413      	add	r3, r2
 8002222:	2b80      	cmp	r3, #128	@ 0x80
 8002224:	dd06      	ble.n	8002234 <OLED_DrawRectangle+0x50>
        width = OLED_WIDTH - x;
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 800222c:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8002230:	3380      	adds	r3, #128	@ 0x80
 8002232:	717b      	strb	r3, [r7, #5]
    if (y + height > OLED_HEIGHT)
 8002234:	79ba      	ldrb	r2, [r7, #6]
 8002236:	793b      	ldrb	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	2b40      	cmp	r3, #64	@ 0x40
 800223c:	dd03      	ble.n	8002246 <OLED_DrawRectangle+0x62>
        height = OLED_HEIGHT - y;
 800223e:	79bb      	ldrb	r3, [r7, #6]
 8002240:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8002244:	713b      	strb	r3, [r7, #4]

    uint8_t x2 = x + width - 1;
 8002246:	79fa      	ldrb	r2, [r7, #7]
 8002248:	797b      	ldrb	r3, [r7, #5]
 800224a:	4413      	add	r3, r2
 800224c:	b2db      	uxtb	r3, r3
 800224e:	3b01      	subs	r3, #1
 8002250:	737b      	strb	r3, [r7, #13]
    uint8_t y2 = y + height - 1;
 8002252:	79ba      	ldrb	r2, [r7, #6]
 8002254:	793b      	ldrb	r3, [r7, #4]
 8002256:	4413      	add	r3, r2
 8002258:	b2db      	uxtb	r3, r3
 800225a:	3b01      	subs	r3, #1
 800225c:	733b      	strb	r3, [r7, #12]

    // 绘制水平线
    for (uint8_t i = x; i <= x2; i++)
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	73fb      	strb	r3, [r7, #15]
 8002262:	e00e      	b.n	8002282 <OLED_DrawRectangle+0x9e>
    {
        OLED_WritePixel(i, y, 1);  // 顶线
 8002264:	79b9      	ldrb	r1, [r7, #6]
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	2201      	movs	r2, #1
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe fd70 	bl	8000d50 <OLED_WritePixel>
        OLED_WritePixel(i, y2, 1); // 底线
 8002270:	7b39      	ldrb	r1, [r7, #12]
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	2201      	movs	r2, #1
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe fd6a 	bl	8000d50 <OLED_WritePixel>
    for (uint8_t i = x; i <= x2; i++)
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	3301      	adds	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	7b7b      	ldrb	r3, [r7, #13]
 8002286:	429a      	cmp	r2, r3
 8002288:	d9ec      	bls.n	8002264 <OLED_DrawRectangle+0x80>
    }

    // 绘制垂直线
    for (uint8_t j = y + 1; j < y2; j++)
 800228a:	79bb      	ldrb	r3, [r7, #6]
 800228c:	3301      	adds	r3, #1
 800228e:	73bb      	strb	r3, [r7, #14]
 8002290:	e00e      	b.n	80022b0 <OLED_DrawRectangle+0xcc>
    {
        OLED_WritePixel(x, j, 1);  // 左线
 8002292:	7bb9      	ldrb	r1, [r7, #14]
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	2201      	movs	r2, #1
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe fd59 	bl	8000d50 <OLED_WritePixel>
        OLED_WritePixel(x2, j, 1); // 右线
 800229e:	7bb9      	ldrb	r1, [r7, #14]
 80022a0:	7b7b      	ldrb	r3, [r7, #13]
 80022a2:	2201      	movs	r2, #1
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe fd53 	bl	8000d50 <OLED_WritePixel>
    for (uint8_t j = y + 1; j < y2; j++)
 80022aa:	7bbb      	ldrb	r3, [r7, #14]
 80022ac:	3301      	adds	r3, #1
 80022ae:	73bb      	strb	r3, [r7, #14]
 80022b0:	7bba      	ldrb	r2, [r7, #14]
 80022b2:	7b3b      	ldrb	r3, [r7, #12]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d3ec      	bcc.n	8002292 <OLED_DrawRectangle+0xae>
 80022b8:	e000      	b.n	80022bc <OLED_DrawRectangle+0xd8>
        return;
 80022ba:	bf00      	nop
    }
}
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd90      	pop	{r4, r7, pc}
	...

080022c4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80022c8:	4b17      	ldr	r3, [pc, #92]	@ (8002328 <MX_SPI2_Init+0x64>)
 80022ca:	4a18      	ldr	r2, [pc, #96]	@ (800232c <MX_SPI2_Init+0x68>)
 80022cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80022ce:	4b16      	ldr	r3, [pc, #88]	@ (8002328 <MX_SPI2_Init+0x64>)
 80022d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80022d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80022d6:	4b14      	ldr	r3, [pc, #80]	@ (8002328 <MX_SPI2_Init+0x64>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80022dc:	4b12      	ldr	r3, [pc, #72]	@ (8002328 <MX_SPI2_Init+0x64>)
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022e2:	4b11      	ldr	r3, [pc, #68]	@ (8002328 <MX_SPI2_Init+0x64>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002328 <MX_SPI2_Init+0x64>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80022ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002328 <MX_SPI2_Init+0x64>)
 80022f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002328 <MX_SPI2_Init+0x64>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002328 <MX_SPI2_Init+0x64>)
 80022fe:	2200      	movs	r2, #0
 8002300:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002302:	4b09      	ldr	r3, [pc, #36]	@ (8002328 <MX_SPI2_Init+0x64>)
 8002304:	2200      	movs	r2, #0
 8002306:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002308:	4b07      	ldr	r3, [pc, #28]	@ (8002328 <MX_SPI2_Init+0x64>)
 800230a:	2200      	movs	r2, #0
 800230c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800230e:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <MX_SPI2_Init+0x64>)
 8002310:	220a      	movs	r2, #10
 8002312:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002314:	4804      	ldr	r0, [pc, #16]	@ (8002328 <MX_SPI2_Init+0x64>)
 8002316:	f001 fe19 	bl	8003f4c <HAL_SPI_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002320:	f7fe fc75 	bl	8000c0e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000f24 	.word	0x20000f24
 800232c:	40003800 	.word	0x40003800

08002330 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 0310 	add.w	r3, r7, #16
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a1c      	ldr	r2, [pc, #112]	@ (80023bc <HAL_SPI_MspInit+0x8c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d131      	bne.n	80023b4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002350:	4b1b      	ldr	r3, [pc, #108]	@ (80023c0 <HAL_SPI_MspInit+0x90>)
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	4a1a      	ldr	r2, [pc, #104]	@ (80023c0 <HAL_SPI_MspInit+0x90>)
 8002356:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800235a:	61d3      	str	r3, [r2, #28]
 800235c:	4b18      	ldr	r3, [pc, #96]	@ (80023c0 <HAL_SPI_MspInit+0x90>)
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002368:	4b15      	ldr	r3, [pc, #84]	@ (80023c0 <HAL_SPI_MspInit+0x90>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	4a14      	ldr	r2, [pc, #80]	@ (80023c0 <HAL_SPI_MspInit+0x90>)
 800236e:	f043 0308 	orr.w	r3, r3, #8
 8002372:	6193      	str	r3, [r2, #24]
 8002374:	4b12      	ldr	r3, [pc, #72]	@ (80023c0 <HAL_SPI_MspInit+0x90>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002380:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002384:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800238a:	2303      	movs	r3, #3
 800238c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238e:	f107 0310 	add.w	r3, r7, #16
 8002392:	4619      	mov	r1, r3
 8002394:	480b      	ldr	r0, [pc, #44]	@ (80023c4 <HAL_SPI_MspInit+0x94>)
 8002396:	f000 fba5 	bl	8002ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800239a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800239e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a8:	f107 0310 	add.w	r3, r7, #16
 80023ac:	4619      	mov	r1, r3
 80023ae:	4805      	ldr	r0, [pc, #20]	@ (80023c4 <HAL_SPI_MspInit+0x94>)
 80023b0:	f000 fb98 	bl	8002ae4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80023b4:	bf00      	nop
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40003800 	.word	0x40003800
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40010c00 	.word	0x40010c00

080023c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023ce:	4b15      	ldr	r3, [pc, #84]	@ (8002424 <HAL_MspInit+0x5c>)
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	4a14      	ldr	r2, [pc, #80]	@ (8002424 <HAL_MspInit+0x5c>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6193      	str	r3, [r2, #24]
 80023da:	4b12      	ldr	r3, [pc, #72]	@ (8002424 <HAL_MspInit+0x5c>)
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002424 <HAL_MspInit+0x5c>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002424 <HAL_MspInit+0x5c>)
 80023ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023f0:	61d3      	str	r3, [r2, #28]
 80023f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002424 <HAL_MspInit+0x5c>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023fa:	607b      	str	r3, [r7, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002428 <HAL_MspInit+0x60>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	4a04      	ldr	r2, [pc, #16]	@ (8002428 <HAL_MspInit+0x60>)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800241a:	bf00      	nop
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	40021000 	.word	0x40021000
 8002428:	40010000 	.word	0x40010000

0800242c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <NMI_Handler+0x4>

08002434 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <HardFault_Handler+0x4>

0800243c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <MemManage_Handler+0x4>

08002444 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002448:	bf00      	nop
 800244a:	e7fd      	b.n	8002448 <BusFault_Handler+0x4>

0800244c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002450:	bf00      	nop
 8002452:	e7fd      	b.n	8002450 <UsageFault_Handler+0x4>

08002454 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800247c:	f000 fa0e 	bl	800289c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002480:	bf00      	nop
 8002482:	bd80      	pop	{r7, pc}

08002484 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b096      	sub	sp, #88	@ 0x58
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002496:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	60da      	str	r2, [r3, #12]
 80024bc:	611a      	str	r2, [r3, #16]
 80024be:	615a      	str	r2, [r3, #20]
 80024c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	2220      	movs	r2, #32
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f002 fc98 	bl	8004dfe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024ce:	4b3f      	ldr	r3, [pc, #252]	@ (80025cc <MX_TIM1_Init+0x13c>)
 80024d0:	4a3f      	ldr	r2, [pc, #252]	@ (80025d0 <MX_TIM1_Init+0x140>)
 80024d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720-1;
 80024d4:	4b3d      	ldr	r3, [pc, #244]	@ (80025cc <MX_TIM1_Init+0x13c>)
 80024d6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80024da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024dc:	4b3b      	ldr	r3, [pc, #236]	@ (80025cc <MX_TIM1_Init+0x13c>)
 80024de:	2200      	movs	r2, #0
 80024e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 80024e2:	4b3a      	ldr	r3, [pc, #232]	@ (80025cc <MX_TIM1_Init+0x13c>)
 80024e4:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80024e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ea:	4b38      	ldr	r3, [pc, #224]	@ (80025cc <MX_TIM1_Init+0x13c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024f0:	4b36      	ldr	r3, [pc, #216]	@ (80025cc <MX_TIM1_Init+0x13c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f6:	4b35      	ldr	r3, [pc, #212]	@ (80025cc <MX_TIM1_Init+0x13c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024fc:	4833      	ldr	r0, [pc, #204]	@ (80025cc <MX_TIM1_Init+0x13c>)
 80024fe:	f001 fda9 	bl	8004054 <HAL_TIM_Base_Init>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002508:	f7fe fb81 	bl	8000c0e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800250c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002510:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002512:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002516:	4619      	mov	r1, r3
 8002518:	482c      	ldr	r0, [pc, #176]	@ (80025cc <MX_TIM1_Init+0x13c>)
 800251a:	f002 f849 	bl	80045b0 <HAL_TIM_ConfigClockSource>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002524:	f7fe fb73 	bl	8000c0e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002528:	4828      	ldr	r0, [pc, #160]	@ (80025cc <MX_TIM1_Init+0x13c>)
 800252a:	f001 fde2 	bl	80040f2 <HAL_TIM_PWM_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002534:	f7fe fb6b 	bl	8000c0e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002538:	2300      	movs	r3, #0
 800253a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253c:	2300      	movs	r3, #0
 800253e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002540:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002544:	4619      	mov	r1, r3
 8002546:	4821      	ldr	r0, [pc, #132]	@ (80025cc <MX_TIM1_Init+0x13c>)
 8002548:	f002 fbaa 	bl	8004ca0 <HAL_TIMEx_MasterConfigSynchronization>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8002552:	f7fe fb5c 	bl	8000c0e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002556:	2360      	movs	r3, #96	@ 0x60
 8002558:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800255e:	2300      	movs	r3, #0
 8002560:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002562:	2300      	movs	r3, #0
 8002564:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002566:	2300      	movs	r3, #0
 8002568:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800256a:	2300      	movs	r3, #0
 800256c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800256e:	2300      	movs	r3, #0
 8002570:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002576:	2204      	movs	r2, #4
 8002578:	4619      	mov	r1, r3
 800257a:	4814      	ldr	r0, [pc, #80]	@ (80025cc <MX_TIM1_Init+0x13c>)
 800257c:	f001 ff56 	bl	800442c <HAL_TIM_PWM_ConfigChannel>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8002586:	f7fe fb42 	bl	8000c0e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800258a:	2300      	movs	r3, #0
 800258c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800258e:	2300      	movs	r3, #0
 8002590:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800259e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025a4:	2300      	movs	r3, #0
 80025a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80025a8:	1d3b      	adds	r3, r7, #4
 80025aa:	4619      	mov	r1, r3
 80025ac:	4807      	ldr	r0, [pc, #28]	@ (80025cc <MX_TIM1_Init+0x13c>)
 80025ae:	f002 fbd5 	bl	8004d5c <HAL_TIMEx_ConfigBreakDeadTime>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80025b8:	f7fe fb29 	bl	8000c0e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80025bc:	4803      	ldr	r0, [pc, #12]	@ (80025cc <MX_TIM1_Init+0x13c>)
 80025be:	f000 f8cd 	bl	800275c <HAL_TIM_MspPostInit>

}
 80025c2:	bf00      	nop
 80025c4:	3758      	adds	r7, #88	@ 0x58
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000f7c 	.word	0x20000f7c
 80025d0:	40012c00 	.word	0x40012c00

080025d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08c      	sub	sp, #48	@ 0x30
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025da:	f107 030c 	add.w	r3, r7, #12
 80025de:	2224      	movs	r2, #36	@ 0x24
 80025e0:	2100      	movs	r1, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f002 fc0b 	bl	8004dfe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e8:	1d3b      	adds	r3, r7, #4
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025f0:	4b20      	ldr	r3, [pc, #128]	@ (8002674 <MX_TIM3_Init+0xa0>)
 80025f2:	4a21      	ldr	r2, [pc, #132]	@ (8002678 <MX_TIM3_Init+0xa4>)
 80025f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80025f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002674 <MX_TIM3_Init+0xa0>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002674 <MX_TIM3_Init+0xa0>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002602:	4b1c      	ldr	r3, [pc, #112]	@ (8002674 <MX_TIM3_Init+0xa0>)
 8002604:	2264      	movs	r2, #100	@ 0x64
 8002606:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002608:	4b1a      	ldr	r3, [pc, #104]	@ (8002674 <MX_TIM3_Init+0xa0>)
 800260a:	2200      	movs	r2, #0
 800260c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800260e:	4b19      	ldr	r3, [pc, #100]	@ (8002674 <MX_TIM3_Init+0xa0>)
 8002610:	2200      	movs	r2, #0
 8002612:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002614:	2301      	movs	r3, #1
 8002616:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002618:	2300      	movs	r3, #0
 800261a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800261c:	2301      	movs	r3, #1
 800261e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002620:	2300      	movs	r3, #0
 8002622:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002624:	230a      	movs	r3, #10
 8002626:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002628:	2300      	movs	r3, #0
 800262a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800262c:	2301      	movs	r3, #1
 800262e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002630:	2300      	movs	r3, #0
 8002632:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8002634:	230a      	movs	r3, #10
 8002636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002638:	f107 030c 	add.w	r3, r7, #12
 800263c:	4619      	mov	r1, r3
 800263e:	480d      	ldr	r0, [pc, #52]	@ (8002674 <MX_TIM3_Init+0xa0>)
 8002640:	f001 fe52 	bl	80042e8 <HAL_TIM_Encoder_Init>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800264a:	f7fe fae0 	bl	8000c0e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002652:	2300      	movs	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	4619      	mov	r1, r3
 800265a:	4806      	ldr	r0, [pc, #24]	@ (8002674 <MX_TIM3_Init+0xa0>)
 800265c:	f002 fb20 	bl	8004ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002666:	f7fe fad2 	bl	8000c0e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800266a:	bf00      	nop
 800266c:	3730      	adds	r7, #48	@ 0x30
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000fc4 	.word	0x20000fc4
 8002678:	40000400 	.word	0x40000400

0800267c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a09      	ldr	r2, [pc, #36]	@ (80026b0 <HAL_TIM_Base_MspInit+0x34>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d10b      	bne.n	80026a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800268e:	4b09      	ldr	r3, [pc, #36]	@ (80026b4 <HAL_TIM_Base_MspInit+0x38>)
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	4a08      	ldr	r2, [pc, #32]	@ (80026b4 <HAL_TIM_Base_MspInit+0x38>)
 8002694:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002698:	6193      	str	r3, [r2, #24]
 800269a:	4b06      	ldr	r3, [pc, #24]	@ (80026b4 <HAL_TIM_Base_MspInit+0x38>)
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80026a6:	bf00      	nop
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr
 80026b0:	40012c00 	.word	0x40012c00
 80026b4:	40021000 	.word	0x40021000

080026b8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	@ 0x28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a1e      	ldr	r2, [pc, #120]	@ (800274c <HAL_TIM_Encoder_MspInit+0x94>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d135      	bne.n	8002744 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002750 <HAL_TIM_Encoder_MspInit+0x98>)
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002750 <HAL_TIM_Encoder_MspInit+0x98>)
 80026de:	f043 0302 	orr.w	r3, r3, #2
 80026e2:	61d3      	str	r3, [r2, #28]
 80026e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002750 <HAL_TIM_Encoder_MspInit+0x98>)
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f0:	4b17      	ldr	r3, [pc, #92]	@ (8002750 <HAL_TIM_Encoder_MspInit+0x98>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	4a16      	ldr	r2, [pc, #88]	@ (8002750 <HAL_TIM_Encoder_MspInit+0x98>)
 80026f6:	f043 0308 	orr.w	r3, r3, #8
 80026fa:	6193      	str	r3, [r2, #24]
 80026fc:	4b14      	ldr	r3, [pc, #80]	@ (8002750 <HAL_TIM_Encoder_MspInit+0x98>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_CH1_Pin|Encoder_CH2_Pin;
 8002708:	2330      	movs	r3, #48	@ 0x30
 800270a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800270c:	2300      	movs	r3, #0
 800270e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002714:	f107 0314 	add.w	r3, r7, #20
 8002718:	4619      	mov	r1, r3
 800271a:	480e      	ldr	r0, [pc, #56]	@ (8002754 <HAL_TIM_Encoder_MspInit+0x9c>)
 800271c:	f000 f9e2 	bl	8002ae4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002720:	4b0d      	ldr	r3, [pc, #52]	@ (8002758 <HAL_TIM_Encoder_MspInit+0xa0>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	627b      	str	r3, [r7, #36]	@ 0x24
 8002726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002728:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800272c:	627b      	str	r3, [r7, #36]	@ 0x24
 800272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002730:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002734:	627b      	str	r3, [r7, #36]	@ 0x24
 8002736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002738:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800273c:	627b      	str	r3, [r7, #36]	@ 0x24
 800273e:	4a06      	ldr	r2, [pc, #24]	@ (8002758 <HAL_TIM_Encoder_MspInit+0xa0>)
 8002740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002742:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002744:	bf00      	nop
 8002746:	3728      	adds	r7, #40	@ 0x28
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40000400 	.word	0x40000400
 8002750:	40021000 	.word	0x40021000
 8002754:	40010c00 	.word	0x40010c00
 8002758:	40010000 	.word	0x40010000

0800275c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b088      	sub	sp, #32
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 0310 	add.w	r3, r7, #16
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a10      	ldr	r2, [pc, #64]	@ (80027b8 <HAL_TIM_MspPostInit+0x5c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d118      	bne.n	80027ae <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277c:	4b0f      	ldr	r3, [pc, #60]	@ (80027bc <HAL_TIM_MspPostInit+0x60>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	4a0e      	ldr	r2, [pc, #56]	@ (80027bc <HAL_TIM_MspPostInit+0x60>)
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	6193      	str	r3, [r2, #24]
 8002788:	4b0c      	ldr	r3, [pc, #48]	@ (80027bc <HAL_TIM_MspPostInit+0x60>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002794:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002798:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279e:	2302      	movs	r3, #2
 80027a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a2:	f107 0310 	add.w	r3, r7, #16
 80027a6:	4619      	mov	r1, r3
 80027a8:	4805      	ldr	r0, [pc, #20]	@ (80027c0 <HAL_TIM_MspPostInit+0x64>)
 80027aa:	f000 f99b 	bl	8002ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80027ae:	bf00      	nop
 80027b0:	3720      	adds	r7, #32
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40012c00 	.word	0x40012c00
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40010800 	.word	0x40010800

080027c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027c4:	f7ff fe5e 	bl	8002484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027c8:	480b      	ldr	r0, [pc, #44]	@ (80027f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027ca:	490c      	ldr	r1, [pc, #48]	@ (80027fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002800 <LoopFillZerobss+0x16>)
  movs r3, #0
 80027ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027d0:	e002      	b.n	80027d8 <LoopCopyDataInit>

080027d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027d6:	3304      	adds	r3, #4

080027d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027dc:	d3f9      	bcc.n	80027d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027de:	4a09      	ldr	r2, [pc, #36]	@ (8002804 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027e0:	4c09      	ldr	r4, [pc, #36]	@ (8002808 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027e4:	e001      	b.n	80027ea <LoopFillZerobss>

080027e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027e8:	3204      	adds	r2, #4

080027ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027ec:	d3fb      	bcc.n	80027e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027ee:	f002 fb27 	bl	8004e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027f2:	f7fe f905 	bl	8000a00 <main>
  bx lr
 80027f6:	4770      	bx	lr
  ldr r0, =_sdata
 80027f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027fc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002800:	080067b0 	.word	0x080067b0
  ldr r2, =_sbss
 8002804:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002808:	20001148 	.word	0x20001148

0800280c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800280c:	e7fe      	b.n	800280c <ADC1_2_IRQHandler>
	...

08002810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002814:	4b08      	ldr	r3, [pc, #32]	@ (8002838 <HAL_Init+0x28>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a07      	ldr	r2, [pc, #28]	@ (8002838 <HAL_Init+0x28>)
 800281a:	f043 0310 	orr.w	r3, r3, #16
 800281e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002820:	2003      	movs	r0, #3
 8002822:	f000 f92b 	bl	8002a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002826:	200f      	movs	r0, #15
 8002828:	f000 f808 	bl	800283c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800282c:	f7ff fdcc 	bl	80023c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40022000 	.word	0x40022000

0800283c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002844:	4b12      	ldr	r3, [pc, #72]	@ (8002890 <HAL_InitTick+0x54>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b12      	ldr	r3, [pc, #72]	@ (8002894 <HAL_InitTick+0x58>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	4619      	mov	r1, r3
 800284e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002852:	fbb3 f3f1 	udiv	r3, r3, r1
 8002856:	fbb2 f3f3 	udiv	r3, r2, r3
 800285a:	4618      	mov	r0, r3
 800285c:	f000 f935 	bl	8002aca <HAL_SYSTICK_Config>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e00e      	b.n	8002888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b0f      	cmp	r3, #15
 800286e:	d80a      	bhi.n	8002886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002870:	2200      	movs	r2, #0
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	f04f 30ff 	mov.w	r0, #4294967295
 8002878:	f000 f90b 	bl	8002a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800287c:	4a06      	ldr	r2, [pc, #24]	@ (8002898 <HAL_InitTick+0x5c>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	e000      	b.n	8002888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
}
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000000 	.word	0x20000000
 8002894:	20000008 	.word	0x20000008
 8002898:	20000004 	.word	0x20000004

0800289c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a0:	4b05      	ldr	r3, [pc, #20]	@ (80028b8 <HAL_IncTick+0x1c>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <HAL_IncTick+0x20>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4413      	add	r3, r2
 80028ac:	4a03      	ldr	r2, [pc, #12]	@ (80028bc <HAL_IncTick+0x20>)
 80028ae:	6013      	str	r3, [r2, #0]
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	20000008 	.word	0x20000008
 80028bc:	2000100c 	.word	0x2000100c

080028c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return uwTick;
 80028c4:	4b02      	ldr	r3, [pc, #8]	@ (80028d0 <HAL_GetTick+0x10>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	2000100c 	.word	0x2000100c

080028d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7ff fff0 	bl	80028c0 <HAL_GetTick>
 80028e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ec:	d005      	beq.n	80028fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002918 <HAL_Delay+0x44>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4413      	add	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028fa:	bf00      	nop
 80028fc:	f7ff ffe0 	bl	80028c0 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	429a      	cmp	r2, r3
 800290a:	d8f7      	bhi.n	80028fc <HAL_Delay+0x28>
  {
  }
}
 800290c:	bf00      	nop
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20000008 	.word	0x20000008

0800291c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800292c:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002938:	4013      	ands	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002944:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800294c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294e:	4a04      	ldr	r2, [pc, #16]	@ (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	60d3      	str	r3, [r2, #12]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002968:	4b04      	ldr	r3, [pc, #16]	@ (800297c <__NVIC_GetPriorityGrouping+0x18>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	f003 0307 	and.w	r3, r3, #7
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	6039      	str	r1, [r7, #0]
 800298a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002990:	2b00      	cmp	r3, #0
 8002992:	db0a      	blt.n	80029aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	b2da      	uxtb	r2, r3
 8002998:	490c      	ldr	r1, [pc, #48]	@ (80029cc <__NVIC_SetPriority+0x4c>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	0112      	lsls	r2, r2, #4
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	440b      	add	r3, r1
 80029a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a8:	e00a      	b.n	80029c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	4908      	ldr	r1, [pc, #32]	@ (80029d0 <__NVIC_SetPriority+0x50>)
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	3b04      	subs	r3, #4
 80029b8:	0112      	lsls	r2, r2, #4
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	440b      	add	r3, r1
 80029be:	761a      	strb	r2, [r3, #24]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	e000e100 	.word	0xe000e100
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b089      	sub	sp, #36	@ 0x24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f1c3 0307 	rsb	r3, r3, #7
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	bf28      	it	cs
 80029f2:	2304      	movcs	r3, #4
 80029f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3304      	adds	r3, #4
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d902      	bls.n	8002a04 <NVIC_EncodePriority+0x30>
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3b03      	subs	r3, #3
 8002a02:	e000      	b.n	8002a06 <NVIC_EncodePriority+0x32>
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a08:	f04f 32ff 	mov.w	r2, #4294967295
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43da      	mvns	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	401a      	ands	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	fa01 f303 	lsl.w	r3, r1, r3
 8002a26:	43d9      	mvns	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	4313      	orrs	r3, r2
         );
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3724      	adds	r7, #36	@ 0x24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a48:	d301      	bcc.n	8002a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e00f      	b.n	8002a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a78 <SysTick_Config+0x40>)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a56:	210f      	movs	r1, #15
 8002a58:	f04f 30ff 	mov.w	r0, #4294967295
 8002a5c:	f7ff ff90 	bl	8002980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a60:	4b05      	ldr	r3, [pc, #20]	@ (8002a78 <SysTick_Config+0x40>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a66:	4b04      	ldr	r3, [pc, #16]	@ (8002a78 <SysTick_Config+0x40>)
 8002a68:	2207      	movs	r2, #7
 8002a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	e000e010 	.word	0xe000e010

08002a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff ff49 	bl	800291c <__NVIC_SetPriorityGrouping>
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b086      	sub	sp, #24
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4603      	mov	r3, r0
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa4:	f7ff ff5e 	bl	8002964 <__NVIC_GetPriorityGrouping>
 8002aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	6978      	ldr	r0, [r7, #20]
 8002ab0:	f7ff ff90 	bl	80029d4 <NVIC_EncodePriority>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff5f 	bl	8002980 <__NVIC_SetPriority>
}
 8002ac2:	bf00      	nop
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff ffb0 	bl	8002a38 <SysTick_Config>
 8002ad8:	4603      	mov	r3, r0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b08b      	sub	sp, #44	@ 0x2c
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aee:	2300      	movs	r3, #0
 8002af0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002af2:	2300      	movs	r3, #0
 8002af4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af6:	e169      	b.n	8002dcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002af8:	2201      	movs	r2, #1
 8002afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	f040 8158 	bne.w	8002dc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4a9a      	ldr	r2, [pc, #616]	@ (8002d84 <HAL_GPIO_Init+0x2a0>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d05e      	beq.n	8002bde <HAL_GPIO_Init+0xfa>
 8002b20:	4a98      	ldr	r2, [pc, #608]	@ (8002d84 <HAL_GPIO_Init+0x2a0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d875      	bhi.n	8002c12 <HAL_GPIO_Init+0x12e>
 8002b26:	4a98      	ldr	r2, [pc, #608]	@ (8002d88 <HAL_GPIO_Init+0x2a4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d058      	beq.n	8002bde <HAL_GPIO_Init+0xfa>
 8002b2c:	4a96      	ldr	r2, [pc, #600]	@ (8002d88 <HAL_GPIO_Init+0x2a4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d86f      	bhi.n	8002c12 <HAL_GPIO_Init+0x12e>
 8002b32:	4a96      	ldr	r2, [pc, #600]	@ (8002d8c <HAL_GPIO_Init+0x2a8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d052      	beq.n	8002bde <HAL_GPIO_Init+0xfa>
 8002b38:	4a94      	ldr	r2, [pc, #592]	@ (8002d8c <HAL_GPIO_Init+0x2a8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d869      	bhi.n	8002c12 <HAL_GPIO_Init+0x12e>
 8002b3e:	4a94      	ldr	r2, [pc, #592]	@ (8002d90 <HAL_GPIO_Init+0x2ac>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d04c      	beq.n	8002bde <HAL_GPIO_Init+0xfa>
 8002b44:	4a92      	ldr	r2, [pc, #584]	@ (8002d90 <HAL_GPIO_Init+0x2ac>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d863      	bhi.n	8002c12 <HAL_GPIO_Init+0x12e>
 8002b4a:	4a92      	ldr	r2, [pc, #584]	@ (8002d94 <HAL_GPIO_Init+0x2b0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d046      	beq.n	8002bde <HAL_GPIO_Init+0xfa>
 8002b50:	4a90      	ldr	r2, [pc, #576]	@ (8002d94 <HAL_GPIO_Init+0x2b0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d85d      	bhi.n	8002c12 <HAL_GPIO_Init+0x12e>
 8002b56:	2b12      	cmp	r3, #18
 8002b58:	d82a      	bhi.n	8002bb0 <HAL_GPIO_Init+0xcc>
 8002b5a:	2b12      	cmp	r3, #18
 8002b5c:	d859      	bhi.n	8002c12 <HAL_GPIO_Init+0x12e>
 8002b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b64 <HAL_GPIO_Init+0x80>)
 8002b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b64:	08002bdf 	.word	0x08002bdf
 8002b68:	08002bb9 	.word	0x08002bb9
 8002b6c:	08002bcb 	.word	0x08002bcb
 8002b70:	08002c0d 	.word	0x08002c0d
 8002b74:	08002c13 	.word	0x08002c13
 8002b78:	08002c13 	.word	0x08002c13
 8002b7c:	08002c13 	.word	0x08002c13
 8002b80:	08002c13 	.word	0x08002c13
 8002b84:	08002c13 	.word	0x08002c13
 8002b88:	08002c13 	.word	0x08002c13
 8002b8c:	08002c13 	.word	0x08002c13
 8002b90:	08002c13 	.word	0x08002c13
 8002b94:	08002c13 	.word	0x08002c13
 8002b98:	08002c13 	.word	0x08002c13
 8002b9c:	08002c13 	.word	0x08002c13
 8002ba0:	08002c13 	.word	0x08002c13
 8002ba4:	08002c13 	.word	0x08002c13
 8002ba8:	08002bc1 	.word	0x08002bc1
 8002bac:	08002bd5 	.word	0x08002bd5
 8002bb0:	4a79      	ldr	r2, [pc, #484]	@ (8002d98 <HAL_GPIO_Init+0x2b4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d013      	beq.n	8002bde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bb6:	e02c      	b.n	8002c12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	623b      	str	r3, [r7, #32]
          break;
 8002bbe:	e029      	b.n	8002c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	623b      	str	r3, [r7, #32]
          break;
 8002bc8:	e024      	b.n	8002c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	3308      	adds	r3, #8
 8002bd0:	623b      	str	r3, [r7, #32]
          break;
 8002bd2:	e01f      	b.n	8002c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	330c      	adds	r3, #12
 8002bda:	623b      	str	r3, [r7, #32]
          break;
 8002bdc:	e01a      	b.n	8002c14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d102      	bne.n	8002bec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002be6:	2304      	movs	r3, #4
 8002be8:	623b      	str	r3, [r7, #32]
          break;
 8002bea:	e013      	b.n	8002c14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d105      	bne.n	8002c00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bf4:	2308      	movs	r3, #8
 8002bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	611a      	str	r2, [r3, #16]
          break;
 8002bfe:	e009      	b.n	8002c14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c00:	2308      	movs	r3, #8
 8002c02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	615a      	str	r2, [r3, #20]
          break;
 8002c0a:	e003      	b.n	8002c14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	623b      	str	r3, [r7, #32]
          break;
 8002c10:	e000      	b.n	8002c14 <HAL_GPIO_Init+0x130>
          break;
 8002c12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	2bff      	cmp	r3, #255	@ 0xff
 8002c18:	d801      	bhi.n	8002c1e <HAL_GPIO_Init+0x13a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	e001      	b.n	8002c22 <HAL_GPIO_Init+0x13e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3304      	adds	r3, #4
 8002c22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	2bff      	cmp	r3, #255	@ 0xff
 8002c28:	d802      	bhi.n	8002c30 <HAL_GPIO_Init+0x14c>
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	e002      	b.n	8002c36 <HAL_GPIO_Init+0x152>
 8002c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c32:	3b08      	subs	r3, #8
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	210f      	movs	r1, #15
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	fa01 f303 	lsl.w	r3, r1, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	401a      	ands	r2, r3
 8002c48:	6a39      	ldr	r1, [r7, #32]
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c50:	431a      	orrs	r2, r3
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 80b1 	beq.w	8002dc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c64:	4b4d      	ldr	r3, [pc, #308]	@ (8002d9c <HAL_GPIO_Init+0x2b8>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	4a4c      	ldr	r2, [pc, #304]	@ (8002d9c <HAL_GPIO_Init+0x2b8>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6193      	str	r3, [r2, #24]
 8002c70:	4b4a      	ldr	r3, [pc, #296]	@ (8002d9c <HAL_GPIO_Init+0x2b8>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c7c:	4a48      	ldr	r2, [pc, #288]	@ (8002da0 <HAL_GPIO_Init+0x2bc>)
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	089b      	lsrs	r3, r3, #2
 8002c82:	3302      	adds	r3, #2
 8002c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	220f      	movs	r2, #15
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a40      	ldr	r2, [pc, #256]	@ (8002da4 <HAL_GPIO_Init+0x2c0>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d013      	beq.n	8002cd0 <HAL_GPIO_Init+0x1ec>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a3f      	ldr	r2, [pc, #252]	@ (8002da8 <HAL_GPIO_Init+0x2c4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00d      	beq.n	8002ccc <HAL_GPIO_Init+0x1e8>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a3e      	ldr	r2, [pc, #248]	@ (8002dac <HAL_GPIO_Init+0x2c8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d007      	beq.n	8002cc8 <HAL_GPIO_Init+0x1e4>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a3d      	ldr	r2, [pc, #244]	@ (8002db0 <HAL_GPIO_Init+0x2cc>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d101      	bne.n	8002cc4 <HAL_GPIO_Init+0x1e0>
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e006      	b.n	8002cd2 <HAL_GPIO_Init+0x1ee>
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	e004      	b.n	8002cd2 <HAL_GPIO_Init+0x1ee>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e002      	b.n	8002cd2 <HAL_GPIO_Init+0x1ee>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <HAL_GPIO_Init+0x1ee>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd4:	f002 0203 	and.w	r2, r2, #3
 8002cd8:	0092      	lsls	r2, r2, #2
 8002cda:	4093      	lsls	r3, r2
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ce2:	492f      	ldr	r1, [pc, #188]	@ (8002da0 <HAL_GPIO_Init+0x2bc>)
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce6:	089b      	lsrs	r3, r3, #2
 8002ce8:	3302      	adds	r3, #2
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d006      	beq.n	8002d0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	492c      	ldr	r1, [pc, #176]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	608b      	str	r3, [r1, #8]
 8002d08:	e006      	b.n	8002d18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	43db      	mvns	r3, r3
 8002d12:	4928      	ldr	r1, [pc, #160]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d006      	beq.n	8002d32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d24:	4b23      	ldr	r3, [pc, #140]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	4922      	ldr	r1, [pc, #136]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60cb      	str	r3, [r1, #12]
 8002d30:	e006      	b.n	8002d40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d32:	4b20      	ldr	r3, [pc, #128]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	491e      	ldr	r1, [pc, #120]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d006      	beq.n	8002d5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d4c:	4b19      	ldr	r3, [pc, #100]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	4918      	ldr	r1, [pc, #96]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
 8002d58:	e006      	b.n	8002d68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d5a:	4b16      	ldr	r3, [pc, #88]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	4914      	ldr	r1, [pc, #80]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d021      	beq.n	8002db8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d74:	4b0f      	ldr	r3, [pc, #60]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	490e      	ldr	r1, [pc, #56]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]
 8002d80:	e021      	b.n	8002dc6 <HAL_GPIO_Init+0x2e2>
 8002d82:	bf00      	nop
 8002d84:	10320000 	.word	0x10320000
 8002d88:	10310000 	.word	0x10310000
 8002d8c:	10220000 	.word	0x10220000
 8002d90:	10210000 	.word	0x10210000
 8002d94:	10120000 	.word	0x10120000
 8002d98:	10110000 	.word	0x10110000
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40010000 	.word	0x40010000
 8002da4:	40010800 	.word	0x40010800
 8002da8:	40010c00 	.word	0x40010c00
 8002dac:	40011000 	.word	0x40011000
 8002db0:	40011400 	.word	0x40011400
 8002db4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002db8:	4b0b      	ldr	r3, [pc, #44]	@ (8002de8 <HAL_GPIO_Init+0x304>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	4909      	ldr	r1, [pc, #36]	@ (8002de8 <HAL_GPIO_Init+0x304>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc8:	3301      	adds	r3, #1
 8002dca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f47f ae8e 	bne.w	8002af8 <HAL_GPIO_Init+0x14>
  }
}
 8002ddc:	bf00      	nop
 8002dde:	bf00      	nop
 8002de0:	372c      	adds	r7, #44	@ 0x2c
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	40010400 	.word	0x40010400

08002dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	807b      	strh	r3, [r7, #2]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dfc:	787b      	ldrb	r3, [r7, #1]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e02:	887a      	ldrh	r2, [r7, #2]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e08:	e003      	b.n	8002e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e0a:	887b      	ldrh	r3, [r7, #2]
 8002e0c:	041a      	lsls	r2, r3, #16
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	611a      	str	r2, [r3, #16]
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e12b      	b.n	8003086 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fd fd70 	bl	8000928 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2224      	movs	r2, #36	@ 0x24
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0201 	bic.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e80:	f001 f832 	bl	8003ee8 <HAL_RCC_GetPCLK1Freq>
 8002e84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4a81      	ldr	r2, [pc, #516]	@ (8003090 <HAL_I2C_Init+0x274>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d807      	bhi.n	8002ea0 <HAL_I2C_Init+0x84>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4a80      	ldr	r2, [pc, #512]	@ (8003094 <HAL_I2C_Init+0x278>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	bf94      	ite	ls
 8002e98:	2301      	movls	r3, #1
 8002e9a:	2300      	movhi	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	e006      	b.n	8002eae <HAL_I2C_Init+0x92>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4a7d      	ldr	r2, [pc, #500]	@ (8003098 <HAL_I2C_Init+0x27c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	bf94      	ite	ls
 8002ea8:	2301      	movls	r3, #1
 8002eaa:	2300      	movhi	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e0e7      	b.n	8003086 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4a78      	ldr	r2, [pc, #480]	@ (800309c <HAL_I2C_Init+0x280>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	0c9b      	lsrs	r3, r3, #18
 8002ec0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4a6a      	ldr	r2, [pc, #424]	@ (8003090 <HAL_I2C_Init+0x274>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d802      	bhi.n	8002ef0 <HAL_I2C_Init+0xd4>
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	3301      	adds	r3, #1
 8002eee:	e009      	b.n	8002f04 <HAL_I2C_Init+0xe8>
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	4a69      	ldr	r2, [pc, #420]	@ (80030a0 <HAL_I2C_Init+0x284>)
 8002efc:	fba2 2303 	umull	r2, r3, r2, r3
 8002f00:	099b      	lsrs	r3, r3, #6
 8002f02:	3301      	adds	r3, #1
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f16:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	495c      	ldr	r1, [pc, #368]	@ (8003090 <HAL_I2C_Init+0x274>)
 8002f20:	428b      	cmp	r3, r1
 8002f22:	d819      	bhi.n	8002f58 <HAL_I2C_Init+0x13c>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1e59      	subs	r1, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f32:	1c59      	adds	r1, r3, #1
 8002f34:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f38:	400b      	ands	r3, r1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_I2C_Init+0x138>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1e59      	subs	r1, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f52:	e051      	b.n	8002ff8 <HAL_I2C_Init+0x1dc>
 8002f54:	2304      	movs	r3, #4
 8002f56:	e04f      	b.n	8002ff8 <HAL_I2C_Init+0x1dc>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d111      	bne.n	8002f84 <HAL_I2C_Init+0x168>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	1e58      	subs	r0, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	440b      	add	r3, r1
 8002f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f72:	3301      	adds	r3, #1
 8002f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2301      	moveq	r3, #1
 8002f7e:	2300      	movne	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	e012      	b.n	8002faa <HAL_I2C_Init+0x18e>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1e58      	subs	r0, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	0099      	lsls	r1, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_Init+0x196>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e022      	b.n	8002ff8 <HAL_I2C_Init+0x1dc>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_I2C_Init+0x1bc>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1e58      	subs	r0, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6859      	ldr	r1, [r3, #4]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	440b      	add	r3, r1
 8002fc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fcc:	3301      	adds	r3, #1
 8002fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fd6:	e00f      	b.n	8002ff8 <HAL_I2C_Init+0x1dc>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	1e58      	subs	r0, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6859      	ldr	r1, [r3, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	0099      	lsls	r1, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	6809      	ldr	r1, [r1, #0]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69da      	ldr	r2, [r3, #28]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003026:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6911      	ldr	r1, [r2, #16]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68d2      	ldr	r2, [r2, #12]
 8003032:	4311      	orrs	r1, r2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	430b      	orrs	r3, r1
 800303a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	000186a0 	.word	0x000186a0
 8003094:	001e847f 	.word	0x001e847f
 8003098:	003d08ff 	.word	0x003d08ff
 800309c:	431bde83 	.word	0x431bde83
 80030a0:	10624dd3 	.word	0x10624dd3

080030a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	461a      	mov	r2, r3
 80030b0:	460b      	mov	r3, r1
 80030b2:	817b      	strh	r3, [r7, #10]
 80030b4:	4613      	mov	r3, r2
 80030b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030b8:	f7ff fc02 	bl	80028c0 <HAL_GetTick>
 80030bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	f040 80e0 	bne.w	800328c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	2319      	movs	r3, #25
 80030d2:	2201      	movs	r2, #1
 80030d4:	4970      	ldr	r1, [pc, #448]	@ (8003298 <HAL_I2C_Master_Transmit+0x1f4>)
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f964 	bl	80033a4 <I2C_WaitOnFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030e2:	2302      	movs	r3, #2
 80030e4:	e0d3      	b.n	800328e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_I2C_Master_Transmit+0x50>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e0cc      	b.n	800328e <HAL_I2C_Master_Transmit+0x1ea>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b01      	cmp	r3, #1
 8003108:	d007      	beq.n	800311a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0201 	orr.w	r2, r2, #1
 8003118:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003128:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2221      	movs	r2, #33	@ 0x21
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2210      	movs	r2, #16
 8003136:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	893a      	ldrh	r2, [r7, #8]
 800314a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4a50      	ldr	r2, [pc, #320]	@ (800329c <HAL_I2C_Master_Transmit+0x1f8>)
 800315a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800315c:	8979      	ldrh	r1, [r7, #10]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	6a3a      	ldr	r2, [r7, #32]
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f89c 	bl	80032a0 <I2C_MasterRequestWrite>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e08d      	b.n	800328e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003188:	e066      	b.n	8003258 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	6a39      	ldr	r1, [r7, #32]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 fa22 	bl	80035d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00d      	beq.n	80031b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d107      	bne.n	80031b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e06b      	b.n	800328e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ba:	781a      	ldrb	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d11b      	bne.n	800322c <HAL_I2C_Master_Transmit+0x188>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d017      	beq.n	800322c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003200:	781a      	ldrb	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	6a39      	ldr	r1, [r7, #32]
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 fa19 	bl	8003668 <I2C_WaitOnBTFFlagUntilTimeout>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00d      	beq.n	8003258 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	2b04      	cmp	r3, #4
 8003242:	d107      	bne.n	8003254 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003252:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e01a      	b.n	800328e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800325c:	2b00      	cmp	r3, #0
 800325e:	d194      	bne.n	800318a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800326e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003288:	2300      	movs	r3, #0
 800328a:	e000      	b.n	800328e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800328c:	2302      	movs	r3, #2
  }
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	00100002 	.word	0x00100002
 800329c:	ffff0000 	.word	0xffff0000

080032a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	607a      	str	r2, [r7, #4]
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	460b      	mov	r3, r1
 80032ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d006      	beq.n	80032ca <I2C_MasterRequestWrite+0x2a>
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d003      	beq.n	80032ca <I2C_MasterRequestWrite+0x2a>
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032c8:	d108      	bne.n	80032dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	e00b      	b.n	80032f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e0:	2b12      	cmp	r3, #18
 80032e2:	d107      	bne.n	80032f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f84f 	bl	80033a4 <I2C_WaitOnFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00d      	beq.n	8003328 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003316:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800331a:	d103      	bne.n	8003324 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003322:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e035      	b.n	8003394 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003330:	d108      	bne.n	8003344 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003332:	897b      	ldrh	r3, [r7, #10]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	461a      	mov	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003340:	611a      	str	r2, [r3, #16]
 8003342:	e01b      	b.n	800337c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003344:	897b      	ldrh	r3, [r7, #10]
 8003346:	11db      	asrs	r3, r3, #7
 8003348:	b2db      	uxtb	r3, r3
 800334a:	f003 0306 	and.w	r3, r3, #6
 800334e:	b2db      	uxtb	r3, r3
 8003350:	f063 030f 	orn	r3, r3, #15
 8003354:	b2da      	uxtb	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	490e      	ldr	r1, [pc, #56]	@ (800339c <I2C_MasterRequestWrite+0xfc>)
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f898 	bl	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e010      	b.n	8003394 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003372:	897b      	ldrh	r3, [r7, #10]
 8003374:	b2da      	uxtb	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	4907      	ldr	r1, [pc, #28]	@ (80033a0 <I2C_MasterRequestWrite+0x100>)
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f888 	bl	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	00010008 	.word	0x00010008
 80033a0:	00010002 	.word	0x00010002

080033a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	4613      	mov	r3, r2
 80033b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033b4:	e048      	b.n	8003448 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d044      	beq.n	8003448 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033be:	f7ff fa7f 	bl	80028c0 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d302      	bcc.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d139      	bne.n	8003448 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	0c1b      	lsrs	r3, r3, #16
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d10d      	bne.n	80033fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	43da      	mvns	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	4013      	ands	r3, r2
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf0c      	ite	eq
 80033f0:	2301      	moveq	r3, #1
 80033f2:	2300      	movne	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	e00c      	b.n	8003414 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	43da      	mvns	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4013      	ands	r3, r2
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	429a      	cmp	r2, r3
 8003418:	d116      	bne.n	8003448 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003434:	f043 0220 	orr.w	r2, r3, #32
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e023      	b.n	8003490 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	0c1b      	lsrs	r3, r3, #16
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b01      	cmp	r3, #1
 8003450:	d10d      	bne.n	800346e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	43da      	mvns	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	4013      	ands	r3, r2
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf0c      	ite	eq
 8003464:	2301      	moveq	r3, #1
 8003466:	2300      	movne	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	e00c      	b.n	8003488 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	43da      	mvns	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4013      	ands	r3, r2
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	429a      	cmp	r2, r3
 800348c:	d093      	beq.n	80033b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034a6:	e071      	b.n	800358c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034b6:	d123      	bne.n	8003500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ec:	f043 0204 	orr.w	r2, r3, #4
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e067      	b.n	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003506:	d041      	beq.n	800358c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003508:	f7ff f9da 	bl	80028c0 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	429a      	cmp	r2, r3
 8003516:	d302      	bcc.n	800351e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d136      	bne.n	800358c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	0c1b      	lsrs	r3, r3, #16
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b01      	cmp	r3, #1
 8003526:	d10c      	bne.n	8003542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	43da      	mvns	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4013      	ands	r3, r2
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	bf14      	ite	ne
 800353a:	2301      	movne	r3, #1
 800353c:	2300      	moveq	r3, #0
 800353e:	b2db      	uxtb	r3, r3
 8003540:	e00b      	b.n	800355a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	43da      	mvns	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	4013      	ands	r3, r2
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	bf14      	ite	ne
 8003554:	2301      	movne	r3, #1
 8003556:	2300      	moveq	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d016      	beq.n	800358c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003578:	f043 0220 	orr.w	r2, r3, #32
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e021      	b.n	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	0c1b      	lsrs	r3, r3, #16
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b01      	cmp	r3, #1
 8003594:	d10c      	bne.n	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	43da      	mvns	r2, r3
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	4013      	ands	r3, r2
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf14      	ite	ne
 80035a8:	2301      	movne	r3, #1
 80035aa:	2300      	moveq	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	e00b      	b.n	80035c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	43da      	mvns	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4013      	ands	r3, r2
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	bf14      	ite	ne
 80035c2:	2301      	movne	r3, #1
 80035c4:	2300      	moveq	r3, #0
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f47f af6d 	bne.w	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e4:	e034      	b.n	8003650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f886 	bl	80036f8 <I2C_IsAcknowledgeFailed>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e034      	b.n	8003660 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fc:	d028      	beq.n	8003650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fe:	f7ff f95f 	bl	80028c0 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	429a      	cmp	r2, r3
 800360c:	d302      	bcc.n	8003614 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d11d      	bne.n	8003650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800361e:	2b80      	cmp	r3, #128	@ 0x80
 8003620:	d016      	beq.n	8003650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e007      	b.n	8003660 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800365a:	2b80      	cmp	r3, #128	@ 0x80
 800365c:	d1c3      	bne.n	80035e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003674:	e034      	b.n	80036e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f83e 	bl	80036f8 <I2C_IsAcknowledgeFailed>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e034      	b.n	80036f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368c:	d028      	beq.n	80036e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368e:	f7ff f917 	bl	80028c0 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	429a      	cmp	r2, r3
 800369c:	d302      	bcc.n	80036a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d11d      	bne.n	80036e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d016      	beq.n	80036e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036cc:	f043 0220 	orr.w	r2, r3, #32
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e007      	b.n	80036f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d1c3      	bne.n	8003676 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800370a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800370e:	d11b      	bne.n	8003748 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003718:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003734:	f043 0204 	orr.w	r2, r3, #4
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr

08003754 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e272      	b.n	8003c4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 8087 	beq.w	8003882 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003774:	4b92      	ldr	r3, [pc, #584]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 030c 	and.w	r3, r3, #12
 800377c:	2b04      	cmp	r3, #4
 800377e:	d00c      	beq.n	800379a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003780:	4b8f      	ldr	r3, [pc, #572]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 030c 	and.w	r3, r3, #12
 8003788:	2b08      	cmp	r3, #8
 800378a:	d112      	bne.n	80037b2 <HAL_RCC_OscConfig+0x5e>
 800378c:	4b8c      	ldr	r3, [pc, #560]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003798:	d10b      	bne.n	80037b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800379a:	4b89      	ldr	r3, [pc, #548]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d06c      	beq.n	8003880 <HAL_RCC_OscConfig+0x12c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d168      	bne.n	8003880 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e24c      	b.n	8003c4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ba:	d106      	bne.n	80037ca <HAL_RCC_OscConfig+0x76>
 80037bc:	4b80      	ldr	r3, [pc, #512]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a7f      	ldr	r2, [pc, #508]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80037c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	e02e      	b.n	8003828 <HAL_RCC_OscConfig+0xd4>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10c      	bne.n	80037ec <HAL_RCC_OscConfig+0x98>
 80037d2:	4b7b      	ldr	r3, [pc, #492]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a7a      	ldr	r2, [pc, #488]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80037d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	4b78      	ldr	r3, [pc, #480]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a77      	ldr	r2, [pc, #476]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	e01d      	b.n	8003828 <HAL_RCC_OscConfig+0xd4>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037f4:	d10c      	bne.n	8003810 <HAL_RCC_OscConfig+0xbc>
 80037f6:	4b72      	ldr	r3, [pc, #456]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a71      	ldr	r2, [pc, #452]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	4b6f      	ldr	r3, [pc, #444]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a6e      	ldr	r2, [pc, #440]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 8003808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	e00b      	b.n	8003828 <HAL_RCC_OscConfig+0xd4>
 8003810:	4b6b      	ldr	r3, [pc, #428]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a6a      	ldr	r2, [pc, #424]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 8003816:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	4b68      	ldr	r3, [pc, #416]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a67      	ldr	r2, [pc, #412]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 8003822:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003826:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d013      	beq.n	8003858 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003830:	f7ff f846 	bl	80028c0 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003838:	f7ff f842 	bl	80028c0 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b64      	cmp	r3, #100	@ 0x64
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e200      	b.n	8003c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384a:	4b5d      	ldr	r3, [pc, #372]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0xe4>
 8003856:	e014      	b.n	8003882 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003858:	f7ff f832 	bl	80028c0 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003860:	f7ff f82e 	bl	80028c0 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b64      	cmp	r3, #100	@ 0x64
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e1ec      	b.n	8003c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003872:	4b53      	ldr	r3, [pc, #332]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f0      	bne.n	8003860 <HAL_RCC_OscConfig+0x10c>
 800387e:	e000      	b.n	8003882 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d063      	beq.n	8003956 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800388e:	4b4c      	ldr	r3, [pc, #304]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f003 030c 	and.w	r3, r3, #12
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00b      	beq.n	80038b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800389a:	4b49      	ldr	r3, [pc, #292]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f003 030c 	and.w	r3, r3, #12
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d11c      	bne.n	80038e0 <HAL_RCC_OscConfig+0x18c>
 80038a6:	4b46      	ldr	r3, [pc, #280]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d116      	bne.n	80038e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b2:	4b43      	ldr	r3, [pc, #268]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d005      	beq.n	80038ca <HAL_RCC_OscConfig+0x176>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d001      	beq.n	80038ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e1c0      	b.n	8003c4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ca:	4b3d      	ldr	r3, [pc, #244]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	4939      	ldr	r1, [pc, #228]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038de:	e03a      	b.n	8003956 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d020      	beq.n	800392a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038e8:	4b36      	ldr	r3, [pc, #216]	@ (80039c4 <HAL_RCC_OscConfig+0x270>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ee:	f7fe ffe7 	bl	80028c0 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f6:	f7fe ffe3 	bl	80028c0 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e1a1      	b.n	8003c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003908:	4b2d      	ldr	r3, [pc, #180]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0f0      	beq.n	80038f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003914:	4b2a      	ldr	r3, [pc, #168]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	4927      	ldr	r1, [pc, #156]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 8003924:	4313      	orrs	r3, r2
 8003926:	600b      	str	r3, [r1, #0]
 8003928:	e015      	b.n	8003956 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800392a:	4b26      	ldr	r3, [pc, #152]	@ (80039c4 <HAL_RCC_OscConfig+0x270>)
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003930:	f7fe ffc6 	bl	80028c0 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003938:	f7fe ffc2 	bl	80028c0 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e180      	b.n	8003c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800394a:	4b1d      	ldr	r3, [pc, #116]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f0      	bne.n	8003938 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d03a      	beq.n	80039d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d019      	beq.n	800399e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800396a:	4b17      	ldr	r3, [pc, #92]	@ (80039c8 <HAL_RCC_OscConfig+0x274>)
 800396c:	2201      	movs	r2, #1
 800396e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003970:	f7fe ffa6 	bl	80028c0 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003978:	f7fe ffa2 	bl	80028c0 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e160      	b.n	8003c4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800398a:	4b0d      	ldr	r3, [pc, #52]	@ (80039c0 <HAL_RCC_OscConfig+0x26c>)
 800398c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003996:	2001      	movs	r0, #1
 8003998:	f000 faba 	bl	8003f10 <RCC_Delay>
 800399c:	e01c      	b.n	80039d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800399e:	4b0a      	ldr	r3, [pc, #40]	@ (80039c8 <HAL_RCC_OscConfig+0x274>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a4:	f7fe ff8c 	bl	80028c0 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039aa:	e00f      	b.n	80039cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ac:	f7fe ff88 	bl	80028c0 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d908      	bls.n	80039cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e146      	b.n	8003c4c <HAL_RCC_OscConfig+0x4f8>
 80039be:	bf00      	nop
 80039c0:	40021000 	.word	0x40021000
 80039c4:	42420000 	.word	0x42420000
 80039c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039cc:	4b92      	ldr	r3, [pc, #584]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1e9      	bne.n	80039ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 80a6 	beq.w	8003b32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e6:	2300      	movs	r3, #0
 80039e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ea:	4b8b      	ldr	r3, [pc, #556]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10d      	bne.n	8003a12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f6:	4b88      	ldr	r3, [pc, #544]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	4a87      	ldr	r2, [pc, #540]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 80039fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a00:	61d3      	str	r3, [r2, #28]
 8003a02:	4b85      	ldr	r3, [pc, #532]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a0a:	60bb      	str	r3, [r7, #8]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a12:	4b82      	ldr	r3, [pc, #520]	@ (8003c1c <HAL_RCC_OscConfig+0x4c8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d118      	bne.n	8003a50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a1e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c1c <HAL_RCC_OscConfig+0x4c8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a7e      	ldr	r2, [pc, #504]	@ (8003c1c <HAL_RCC_OscConfig+0x4c8>)
 8003a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a2a:	f7fe ff49 	bl	80028c0 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a32:	f7fe ff45 	bl	80028c0 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b64      	cmp	r3, #100	@ 0x64
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e103      	b.n	8003c4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a44:	4b75      	ldr	r3, [pc, #468]	@ (8003c1c <HAL_RCC_OscConfig+0x4c8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d106      	bne.n	8003a66 <HAL_RCC_OscConfig+0x312>
 8003a58:	4b6f      	ldr	r3, [pc, #444]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	4a6e      	ldr	r2, [pc, #440]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	6213      	str	r3, [r2, #32]
 8003a64:	e02d      	b.n	8003ac2 <HAL_RCC_OscConfig+0x36e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10c      	bne.n	8003a88 <HAL_RCC_OscConfig+0x334>
 8003a6e:	4b6a      	ldr	r3, [pc, #424]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	4a69      	ldr	r2, [pc, #420]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003a74:	f023 0301 	bic.w	r3, r3, #1
 8003a78:	6213      	str	r3, [r2, #32]
 8003a7a:	4b67      	ldr	r3, [pc, #412]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	4a66      	ldr	r2, [pc, #408]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003a80:	f023 0304 	bic.w	r3, r3, #4
 8003a84:	6213      	str	r3, [r2, #32]
 8003a86:	e01c      	b.n	8003ac2 <HAL_RCC_OscConfig+0x36e>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2b05      	cmp	r3, #5
 8003a8e:	d10c      	bne.n	8003aaa <HAL_RCC_OscConfig+0x356>
 8003a90:	4b61      	ldr	r3, [pc, #388]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	4a60      	ldr	r2, [pc, #384]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003a96:	f043 0304 	orr.w	r3, r3, #4
 8003a9a:	6213      	str	r3, [r2, #32]
 8003a9c:	4b5e      	ldr	r3, [pc, #376]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	4a5d      	ldr	r2, [pc, #372]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003aa2:	f043 0301 	orr.w	r3, r3, #1
 8003aa6:	6213      	str	r3, [r2, #32]
 8003aa8:	e00b      	b.n	8003ac2 <HAL_RCC_OscConfig+0x36e>
 8003aaa:	4b5b      	ldr	r3, [pc, #364]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	4a5a      	ldr	r2, [pc, #360]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003ab0:	f023 0301 	bic.w	r3, r3, #1
 8003ab4:	6213      	str	r3, [r2, #32]
 8003ab6:	4b58      	ldr	r3, [pc, #352]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	4a57      	ldr	r2, [pc, #348]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003abc:	f023 0304 	bic.w	r3, r3, #4
 8003ac0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d015      	beq.n	8003af6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aca:	f7fe fef9 	bl	80028c0 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad0:	e00a      	b.n	8003ae8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad2:	f7fe fef5 	bl	80028c0 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e0b1      	b.n	8003c4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae8:	4b4b      	ldr	r3, [pc, #300]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ee      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x37e>
 8003af4:	e014      	b.n	8003b20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af6:	f7fe fee3 	bl	80028c0 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003afc:	e00a      	b.n	8003b14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afe:	f7fe fedf 	bl	80028c0 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e09b      	b.n	8003c4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b14:	4b40      	ldr	r3, [pc, #256]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1ee      	bne.n	8003afe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d105      	bne.n	8003b32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b26:	4b3c      	ldr	r3, [pc, #240]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	4a3b      	ldr	r2, [pc, #236]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003b2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 8087 	beq.w	8003c4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b3c:	4b36      	ldr	r3, [pc, #216]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f003 030c 	and.w	r3, r3, #12
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d061      	beq.n	8003c0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d146      	bne.n	8003bde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b50:	4b33      	ldr	r3, [pc, #204]	@ (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b56:	f7fe feb3 	bl	80028c0 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b5e:	f7fe feaf 	bl	80028c0 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e06d      	b.n	8003c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b70:	4b29      	ldr	r3, [pc, #164]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1f0      	bne.n	8003b5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b84:	d108      	bne.n	8003b98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b86:	4b24      	ldr	r3, [pc, #144]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	4921      	ldr	r1, [pc, #132]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b98:	4b1f      	ldr	r3, [pc, #124]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a19      	ldr	r1, [r3, #32]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	491b      	ldr	r1, [pc, #108]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb6:	f7fe fe83 	bl	80028c0 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bbe:	f7fe fe7f 	bl	80028c0 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e03d      	b.n	8003c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bd0:	4b11      	ldr	r3, [pc, #68]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0f0      	beq.n	8003bbe <HAL_RCC_OscConfig+0x46a>
 8003bdc:	e035      	b.n	8003c4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bde:	4b10      	ldr	r3, [pc, #64]	@ (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be4:	f7fe fe6c 	bl	80028c0 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bec:	f7fe fe68 	bl	80028c0 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e026      	b.n	8003c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bfe:	4b06      	ldr	r3, [pc, #24]	@ (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x498>
 8003c0a:	e01e      	b.n	8003c4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d107      	bne.n	8003c24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e019      	b.n	8003c4c <HAL_RCC_OscConfig+0x4f8>
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40007000 	.word	0x40007000
 8003c20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c24:	4b0b      	ldr	r3, [pc, #44]	@ (8003c54 <HAL_RCC_OscConfig+0x500>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d106      	bne.n	8003c46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d001      	beq.n	8003c4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40021000 	.word	0x40021000

08003c58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0d0      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c6c:	4b6a      	ldr	r3, [pc, #424]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c0>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d910      	bls.n	8003c9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7a:	4b67      	ldr	r3, [pc, #412]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 0207 	bic.w	r2, r3, #7
 8003c82:	4965      	ldr	r1, [pc, #404]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c0>)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8a:	4b63      	ldr	r3, [pc, #396]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d001      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0b8      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d020      	beq.n	8003cea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cb4:	4b59      	ldr	r3, [pc, #356]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	4a58      	ldr	r2, [pc, #352]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003cba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003cbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ccc:	4b53      	ldr	r3, [pc, #332]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4a52      	ldr	r2, [pc, #328]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003cd2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003cd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd8:	4b50      	ldr	r3, [pc, #320]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	494d      	ldr	r1, [pc, #308]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d040      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d107      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	4b47      	ldr	r3, [pc, #284]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d115      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e07f      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d16:	4b41      	ldr	r3, [pc, #260]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e073      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d26:	4b3d      	ldr	r3, [pc, #244]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e06b      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d36:	4b39      	ldr	r3, [pc, #228]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f023 0203 	bic.w	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	4936      	ldr	r1, [pc, #216]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d48:	f7fe fdba 	bl	80028c0 <HAL_GetTick>
 8003d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4e:	e00a      	b.n	8003d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d50:	f7fe fdb6 	bl	80028c0 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e053      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d66:	4b2d      	ldr	r3, [pc, #180]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f003 020c 	and.w	r2, r3, #12
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d1eb      	bne.n	8003d50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d78:	4b27      	ldr	r3, [pc, #156]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c0>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d210      	bcs.n	8003da8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d86:	4b24      	ldr	r3, [pc, #144]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c0>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f023 0207 	bic.w	r2, r3, #7
 8003d8e:	4922      	ldr	r1, [pc, #136]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c0>)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d96:	4b20      	ldr	r3, [pc, #128]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d001      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e032      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db4:	4b19      	ldr	r3, [pc, #100]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	4916      	ldr	r1, [pc, #88]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d009      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dd2:	4b12      	ldr	r3, [pc, #72]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	490e      	ldr	r1, [pc, #56]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003de6:	f000 f821 	bl	8003e2c <HAL_RCC_GetSysClockFreq>
 8003dea:	4602      	mov	r2, r0
 8003dec:	4b0b      	ldr	r3, [pc, #44]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	091b      	lsrs	r3, r3, #4
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	490a      	ldr	r1, [pc, #40]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003df8:	5ccb      	ldrb	r3, [r1, r3]
 8003dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfe:	4a09      	ldr	r2, [pc, #36]	@ (8003e24 <HAL_RCC_ClockConfig+0x1cc>)
 8003e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e02:	4b09      	ldr	r3, [pc, #36]	@ (8003e28 <HAL_RCC_ClockConfig+0x1d0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe fd18 	bl	800283c <HAL_InitTick>

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40022000 	.word	0x40022000
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	08006384 	.word	0x08006384
 8003e24:	20000000 	.word	0x20000000
 8003e28:	20000004 	.word	0x20000004

08003e2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	2300      	movs	r3, #0
 8003e38:	60bb      	str	r3, [r7, #8]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	2300      	movs	r3, #0
 8003e40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e46:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f003 030c 	and.w	r3, r3, #12
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d002      	beq.n	8003e5c <HAL_RCC_GetSysClockFreq+0x30>
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d003      	beq.n	8003e62 <HAL_RCC_GetSysClockFreq+0x36>
 8003e5a:	e027      	b.n	8003eac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e5c:	4b19      	ldr	r3, [pc, #100]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e5e:	613b      	str	r3, [r7, #16]
      break;
 8003e60:	e027      	b.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	0c9b      	lsrs	r3, r3, #18
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	4a17      	ldr	r2, [pc, #92]	@ (8003ec8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e6c:	5cd3      	ldrb	r3, [r2, r3]
 8003e6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d010      	beq.n	8003e9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e7a:	4b11      	ldr	r3, [pc, #68]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	0c5b      	lsrs	r3, r3, #17
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	4a11      	ldr	r2, [pc, #68]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e86:	5cd3      	ldrb	r3, [r2, r3]
 8003e88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e8e:	fb03 f202 	mul.w	r2, r3, r2
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	e004      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a0c      	ldr	r2, [pc, #48]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ea0:	fb02 f303 	mul.w	r3, r2, r3
 8003ea4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	613b      	str	r3, [r7, #16]
      break;
 8003eaa:	e002      	b.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003eac:	4b05      	ldr	r3, [pc, #20]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003eae:	613b      	str	r3, [r7, #16]
      break;
 8003eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eb2:	693b      	ldr	r3, [r7, #16]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	371c      	adds	r7, #28
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	007a1200 	.word	0x007a1200
 8003ec8:	0800639c 	.word	0x0800639c
 8003ecc:	080063ac 	.word	0x080063ac
 8003ed0:	003d0900 	.word	0x003d0900

08003ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed8:	4b02      	ldr	r3, [pc, #8]	@ (8003ee4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003eda:	681b      	ldr	r3, [r3, #0]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr
 8003ee4:	20000000 	.word	0x20000000

08003ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003eec:	f7ff fff2 	bl	8003ed4 <HAL_RCC_GetHCLKFreq>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	4b05      	ldr	r3, [pc, #20]	@ (8003f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	0a1b      	lsrs	r3, r3, #8
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	4903      	ldr	r1, [pc, #12]	@ (8003f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003efe:	5ccb      	ldrb	r3, [r1, r3]
 8003f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	08006394 	.word	0x08006394

08003f10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f18:	4b0a      	ldr	r3, [pc, #40]	@ (8003f44 <RCC_Delay+0x34>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003f48 <RCC_Delay+0x38>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	0a5b      	lsrs	r3, r3, #9
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	fb02 f303 	mul.w	r3, r2, r3
 8003f2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f2c:	bf00      	nop
  }
  while (Delay --);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	1e5a      	subs	r2, r3, #1
 8003f32:	60fa      	str	r2, [r7, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f9      	bne.n	8003f2c <RCC_Delay+0x1c>
}
 8003f38:	bf00      	nop
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr
 8003f44:	20000000 	.word	0x20000000
 8003f48:	10624dd3 	.word	0x10624dd3

08003f4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e076      	b.n	800404c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d108      	bne.n	8003f78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f6e:	d009      	beq.n	8003f84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	61da      	str	r2, [r3, #28]
 8003f76:	e005      	b.n	8003f84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fe f9c6 	bl	8002330 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004008:	ea42 0103 	orr.w	r1, r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004010:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	0c1a      	lsrs	r2, r3, #16
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f002 0204 	and.w	r2, r2, #4
 800402a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	69da      	ldr	r2, [r3, #28]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800403a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e041      	b.n	80040ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fe fafe 	bl	800267c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3304      	adds	r3, #4
 8004090:	4619      	mov	r1, r3
 8004092:	4610      	mov	r0, r2
 8004094:	f000 fb54 	bl	8004740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b082      	sub	sp, #8
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e041      	b.n	8004188 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d106      	bne.n	800411e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f839 	bl	8004190 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2202      	movs	r2, #2
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	3304      	adds	r3, #4
 800412e:	4619      	mov	r1, r3
 8004130:	4610      	mov	r0, r2
 8004132:	f000 fb05 	bl	8004740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr
	...

080041a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d109      	bne.n	80041c8 <HAL_TIM_PWM_Start+0x24>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b01      	cmp	r3, #1
 80041be:	bf14      	ite	ne
 80041c0:	2301      	movne	r3, #1
 80041c2:	2300      	moveq	r3, #0
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	e022      	b.n	800420e <HAL_TIM_PWM_Start+0x6a>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d109      	bne.n	80041e2 <HAL_TIM_PWM_Start+0x3e>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	bf14      	ite	ne
 80041da:	2301      	movne	r3, #1
 80041dc:	2300      	moveq	r3, #0
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	e015      	b.n	800420e <HAL_TIM_PWM_Start+0x6a>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d109      	bne.n	80041fc <HAL_TIM_PWM_Start+0x58>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	bf14      	ite	ne
 80041f4:	2301      	movne	r3, #1
 80041f6:	2300      	moveq	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	e008      	b.n	800420e <HAL_TIM_PWM_Start+0x6a>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b01      	cmp	r3, #1
 8004206:	bf14      	ite	ne
 8004208:	2301      	movne	r3, #1
 800420a:	2300      	moveq	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e05e      	b.n	80042d4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d104      	bne.n	8004226 <HAL_TIM_PWM_Start+0x82>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004224:	e013      	b.n	800424e <HAL_TIM_PWM_Start+0xaa>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b04      	cmp	r3, #4
 800422a:	d104      	bne.n	8004236 <HAL_TIM_PWM_Start+0x92>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004234:	e00b      	b.n	800424e <HAL_TIM_PWM_Start+0xaa>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b08      	cmp	r3, #8
 800423a:	d104      	bne.n	8004246 <HAL_TIM_PWM_Start+0xa2>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004244:	e003      	b.n	800424e <HAL_TIM_PWM_Start+0xaa>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2202      	movs	r2, #2
 800424a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2201      	movs	r2, #1
 8004254:	6839      	ldr	r1, [r7, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fcfe 	bl	8004c58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1e      	ldr	r2, [pc, #120]	@ (80042dc <HAL_TIM_PWM_Start+0x138>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d107      	bne.n	8004276 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004274:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a18      	ldr	r2, [pc, #96]	@ (80042dc <HAL_TIM_PWM_Start+0x138>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d00e      	beq.n	800429e <HAL_TIM_PWM_Start+0xfa>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004288:	d009      	beq.n	800429e <HAL_TIM_PWM_Start+0xfa>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a14      	ldr	r2, [pc, #80]	@ (80042e0 <HAL_TIM_PWM_Start+0x13c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d004      	beq.n	800429e <HAL_TIM_PWM_Start+0xfa>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a12      	ldr	r2, [pc, #72]	@ (80042e4 <HAL_TIM_PWM_Start+0x140>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d111      	bne.n	80042c2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2b06      	cmp	r3, #6
 80042ae:	d010      	beq.n	80042d2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c0:	e007      	b.n	80042d2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0201 	orr.w	r2, r2, #1
 80042d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40012c00 	.word	0x40012c00
 80042e0:	40000400 	.word	0x40000400
 80042e4:	40000800 	.word	0x40000800

080042e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e093      	b.n	8004424 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d106      	bne.n	8004316 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7fe f9d1 	bl	80026b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2202      	movs	r2, #2
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800432c:	f023 0307 	bic.w	r3, r3, #7
 8004330:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3304      	adds	r3, #4
 800433a:	4619      	mov	r1, r3
 800433c:	4610      	mov	r0, r2
 800433e:	f000 f9ff 	bl	8004740 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800436a:	f023 0303 	bic.w	r3, r3, #3
 800436e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	021b      	lsls	r3, r3, #8
 800437a:	4313      	orrs	r3, r2
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004388:	f023 030c 	bic.w	r3, r3, #12
 800438c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004394:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004398:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	021b      	lsls	r3, r3, #8
 80043a4:	4313      	orrs	r3, r2
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	011a      	lsls	r2, r3, #4
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	031b      	lsls	r3, r3, #12
 80043b8:	4313      	orrs	r3, r2
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80043c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	4313      	orrs	r3, r2
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004438:	2300      	movs	r3, #0
 800443a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004442:	2b01      	cmp	r3, #1
 8004444:	d101      	bne.n	800444a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004446:	2302      	movs	r3, #2
 8004448:	e0ae      	b.n	80045a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b0c      	cmp	r3, #12
 8004456:	f200 809f 	bhi.w	8004598 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800445a:	a201      	add	r2, pc, #4	@ (adr r2, 8004460 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800445c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004460:	08004495 	.word	0x08004495
 8004464:	08004599 	.word	0x08004599
 8004468:	08004599 	.word	0x08004599
 800446c:	08004599 	.word	0x08004599
 8004470:	080044d5 	.word	0x080044d5
 8004474:	08004599 	.word	0x08004599
 8004478:	08004599 	.word	0x08004599
 800447c:	08004599 	.word	0x08004599
 8004480:	08004517 	.word	0x08004517
 8004484:	08004599 	.word	0x08004599
 8004488:	08004599 	.word	0x08004599
 800448c:	08004599 	.word	0x08004599
 8004490:	08004557 	.word	0x08004557
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68b9      	ldr	r1, [r7, #8]
 800449a:	4618      	mov	r0, r3
 800449c:	f000 f9be 	bl	800481c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0208 	orr.w	r2, r2, #8
 80044ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699a      	ldr	r2, [r3, #24]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0204 	bic.w	r2, r2, #4
 80044be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6999      	ldr	r1, [r3, #24]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	691a      	ldr	r2, [r3, #16]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	619a      	str	r2, [r3, #24]
      break;
 80044d2:	e064      	b.n	800459e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68b9      	ldr	r1, [r7, #8]
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fa04 	bl	80048e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699a      	ldr	r2, [r3, #24]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699a      	ldr	r2, [r3, #24]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6999      	ldr	r1, [r3, #24]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	021a      	lsls	r2, r3, #8
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	619a      	str	r2, [r3, #24]
      break;
 8004514:	e043      	b.n	800459e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68b9      	ldr	r1, [r7, #8]
 800451c:	4618      	mov	r0, r3
 800451e:	f000 fa4d 	bl	80049bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69da      	ldr	r2, [r3, #28]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f042 0208 	orr.w	r2, r2, #8
 8004530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	69da      	ldr	r2, [r3, #28]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0204 	bic.w	r2, r2, #4
 8004540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69d9      	ldr	r1, [r3, #28]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	61da      	str	r2, [r3, #28]
      break;
 8004554:	e023      	b.n	800459e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68b9      	ldr	r1, [r7, #8]
 800455c:	4618      	mov	r0, r3
 800455e:	f000 fa97 	bl	8004a90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69da      	ldr	r2, [r3, #28]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69da      	ldr	r2, [r3, #28]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69d9      	ldr	r1, [r3, #28]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	021a      	lsls	r2, r3, #8
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	61da      	str	r2, [r3, #28]
      break;
 8004596:	e002      	b.n	800459e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	75fb      	strb	r3, [r7, #23]
      break;
 800459c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <HAL_TIM_ConfigClockSource+0x1c>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e0b4      	b.n	8004736 <HAL_TIM_ConfigClockSource+0x186>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80045ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004604:	d03e      	beq.n	8004684 <HAL_TIM_ConfigClockSource+0xd4>
 8004606:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800460a:	f200 8087 	bhi.w	800471c <HAL_TIM_ConfigClockSource+0x16c>
 800460e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004612:	f000 8086 	beq.w	8004722 <HAL_TIM_ConfigClockSource+0x172>
 8004616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800461a:	d87f      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x16c>
 800461c:	2b70      	cmp	r3, #112	@ 0x70
 800461e:	d01a      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0xa6>
 8004620:	2b70      	cmp	r3, #112	@ 0x70
 8004622:	d87b      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x16c>
 8004624:	2b60      	cmp	r3, #96	@ 0x60
 8004626:	d050      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0x11a>
 8004628:	2b60      	cmp	r3, #96	@ 0x60
 800462a:	d877      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x16c>
 800462c:	2b50      	cmp	r3, #80	@ 0x50
 800462e:	d03c      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0xfa>
 8004630:	2b50      	cmp	r3, #80	@ 0x50
 8004632:	d873      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x16c>
 8004634:	2b40      	cmp	r3, #64	@ 0x40
 8004636:	d058      	beq.n	80046ea <HAL_TIM_ConfigClockSource+0x13a>
 8004638:	2b40      	cmp	r3, #64	@ 0x40
 800463a:	d86f      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x16c>
 800463c:	2b30      	cmp	r3, #48	@ 0x30
 800463e:	d064      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x15a>
 8004640:	2b30      	cmp	r3, #48	@ 0x30
 8004642:	d86b      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x16c>
 8004644:	2b20      	cmp	r3, #32
 8004646:	d060      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x15a>
 8004648:	2b20      	cmp	r3, #32
 800464a:	d867      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x16c>
 800464c:	2b00      	cmp	r3, #0
 800464e:	d05c      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x15a>
 8004650:	2b10      	cmp	r3, #16
 8004652:	d05a      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x15a>
 8004654:	e062      	b.n	800471c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004666:	f000 fad8 	bl	8004c1a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004678:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	609a      	str	r2, [r3, #8]
      break;
 8004682:	e04f      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004694:	f000 fac1 	bl	8004c1a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689a      	ldr	r2, [r3, #8]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046a6:	609a      	str	r2, [r3, #8]
      break;
 80046a8:	e03c      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046b6:	461a      	mov	r2, r3
 80046b8:	f000 fa38 	bl	8004b2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2150      	movs	r1, #80	@ 0x50
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fa8f 	bl	8004be6 <TIM_ITRx_SetConfig>
      break;
 80046c8:	e02c      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046d6:	461a      	mov	r2, r3
 80046d8:	f000 fa56 	bl	8004b88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2160      	movs	r1, #96	@ 0x60
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fa7f 	bl	8004be6 <TIM_ITRx_SetConfig>
      break;
 80046e8:	e01c      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046f6:	461a      	mov	r2, r3
 80046f8:	f000 fa18 	bl	8004b2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2140      	movs	r1, #64	@ 0x40
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fa6f 	bl	8004be6 <TIM_ITRx_SetConfig>
      break;
 8004708:	e00c      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4619      	mov	r1, r3
 8004714:	4610      	mov	r0, r2
 8004716:	f000 fa66 	bl	8004be6 <TIM_ITRx_SetConfig>
      break;
 800471a:	e003      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	73fb      	strb	r3, [r7, #15]
      break;
 8004720:	e000      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004722:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004734:	7bfb      	ldrb	r3, [r7, #15]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a2f      	ldr	r2, [pc, #188]	@ (8004810 <TIM_Base_SetConfig+0xd0>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00b      	beq.n	8004770 <TIM_Base_SetConfig+0x30>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800475e:	d007      	beq.n	8004770 <TIM_Base_SetConfig+0x30>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a2c      	ldr	r2, [pc, #176]	@ (8004814 <TIM_Base_SetConfig+0xd4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d003      	beq.n	8004770 <TIM_Base_SetConfig+0x30>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a2b      	ldr	r2, [pc, #172]	@ (8004818 <TIM_Base_SetConfig+0xd8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d108      	bne.n	8004782 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a22      	ldr	r2, [pc, #136]	@ (8004810 <TIM_Base_SetConfig+0xd0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00b      	beq.n	80047a2 <TIM_Base_SetConfig+0x62>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004790:	d007      	beq.n	80047a2 <TIM_Base_SetConfig+0x62>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a1f      	ldr	r2, [pc, #124]	@ (8004814 <TIM_Base_SetConfig+0xd4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d003      	beq.n	80047a2 <TIM_Base_SetConfig+0x62>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a1e      	ldr	r2, [pc, #120]	@ (8004818 <TIM_Base_SetConfig+0xd8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d108      	bne.n	80047b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a0d      	ldr	r2, [pc, #52]	@ (8004810 <TIM_Base_SetConfig+0xd0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d103      	bne.n	80047e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d005      	beq.n	8004806 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	f023 0201 	bic.w	r2, r3, #1
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	611a      	str	r2, [r3, #16]
  }
}
 8004806:	bf00      	nop
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr
 8004810:	40012c00 	.word	0x40012c00
 8004814:	40000400 	.word	0x40000400
 8004818:	40000800 	.word	0x40000800

0800481c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	f023 0201 	bic.w	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800484a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0303 	bic.w	r3, r3, #3
 8004852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f023 0302 	bic.w	r3, r3, #2
 8004864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	4313      	orrs	r3, r2
 800486e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a1c      	ldr	r2, [pc, #112]	@ (80048e4 <TIM_OC1_SetConfig+0xc8>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d10c      	bne.n	8004892 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f023 0308 	bic.w	r3, r3, #8
 800487e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	4313      	orrs	r3, r2
 8004888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f023 0304 	bic.w	r3, r3, #4
 8004890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a13      	ldr	r2, [pc, #76]	@ (80048e4 <TIM_OC1_SetConfig+0xc8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d111      	bne.n	80048be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	621a      	str	r2, [r3, #32]
}
 80048d8:	bf00      	nop
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40012c00 	.word	0x40012c00

080048e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	f023 0210 	bic.w	r2, r3, #16
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800491e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	021b      	lsls	r3, r3, #8
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f023 0320 	bic.w	r3, r3, #32
 8004932:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a1d      	ldr	r2, [pc, #116]	@ (80049b8 <TIM_OC2_SetConfig+0xd0>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d10d      	bne.n	8004964 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800494e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004962:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a14      	ldr	r2, [pc, #80]	@ (80049b8 <TIM_OC2_SetConfig+0xd0>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d113      	bne.n	8004994 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004972:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800497a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	621a      	str	r2, [r3, #32]
}
 80049ae:	bf00      	nop
 80049b0:	371c      	adds	r7, #28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr
 80049b8:	40012c00 	.word	0x40012c00

080049bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 0303 	bic.w	r3, r3, #3
 80049f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	021b      	lsls	r3, r3, #8
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a1d      	ldr	r2, [pc, #116]	@ (8004a8c <TIM_OC3_SetConfig+0xd0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d10d      	bne.n	8004a36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a14      	ldr	r2, [pc, #80]	@ (8004a8c <TIM_OC3_SetConfig+0xd0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d113      	bne.n	8004a66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	621a      	str	r2, [r3, #32]
}
 8004a80:	bf00      	nop
 8004a82:	371c      	adds	r7, #28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40012c00 	.word	0x40012c00

08004a90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	021b      	lsls	r3, r3, #8
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ada:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	031b      	lsls	r3, r3, #12
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a0f      	ldr	r2, [pc, #60]	@ (8004b28 <TIM_OC4_SetConfig+0x98>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d109      	bne.n	8004b04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004af6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	019b      	lsls	r3, r3, #6
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	621a      	str	r2, [r3, #32]
}
 8004b1e:	bf00      	nop
 8004b20:	371c      	adds	r7, #28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr
 8004b28:	40012c00 	.word	0x40012c00

08004b2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	f023 0201 	bic.w	r2, r3, #1
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f023 030a 	bic.w	r3, r3, #10
 8004b68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	621a      	str	r2, [r3, #32]
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr

08004b88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	f023 0210 	bic.w	r2, r3, #16
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	031b      	lsls	r3, r3, #12
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004bc4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	011b      	lsls	r3, r3, #4
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	621a      	str	r2, [r3, #32]
}
 8004bdc:	bf00      	nop
 8004bde:	371c      	adds	r7, #28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bc80      	pop	{r7}
 8004be4:	4770      	bx	lr

08004be6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b085      	sub	sp, #20
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f043 0307 	orr.w	r3, r3, #7
 8004c08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	609a      	str	r2, [r3, #8]
}
 8004c10:	bf00      	nop
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bc80      	pop	{r7}
 8004c18:	4770      	bx	lr

08004c1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b087      	sub	sp, #28
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	607a      	str	r2, [r7, #4]
 8004c26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	021a      	lsls	r2, r3, #8
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	609a      	str	r2, [r3, #8]
}
 8004c4e:	bf00      	nop
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc80      	pop	{r7}
 8004c56:	4770      	bx	lr

08004c58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f003 031f 	and.w	r3, r3, #31
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a1a      	ldr	r2, [r3, #32]
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	401a      	ands	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a1a      	ldr	r2, [r3, #32]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f003 031f 	and.w	r3, r3, #31
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c90:	431a      	orrs	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	621a      	str	r2, [r3, #32]
}
 8004c96:	bf00      	nop
 8004c98:	371c      	adds	r7, #28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e046      	b.n	8004d46 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a16      	ldr	r2, [pc, #88]	@ (8004d50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00e      	beq.n	8004d1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d04:	d009      	beq.n	8004d1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a12      	ldr	r2, [pc, #72]	@ (8004d54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d004      	beq.n	8004d1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a10      	ldr	r2, [pc, #64]	@ (8004d58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d10c      	bne.n	8004d34 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr
 8004d50:	40012c00 	.word	0x40012c00
 8004d54:	40000400 	.word	0x40000400
 8004d58:	40000800 	.word	0x40000800

08004d5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e03d      	b.n	8004df4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bc80      	pop	{r7}
 8004dfc:	4770      	bx	lr

08004dfe <memset>:
 8004dfe:	4603      	mov	r3, r0
 8004e00:	4402      	add	r2, r0
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d100      	bne.n	8004e08 <memset+0xa>
 8004e06:	4770      	bx	lr
 8004e08:	f803 1b01 	strb.w	r1, [r3], #1
 8004e0c:	e7f9      	b.n	8004e02 <memset+0x4>

08004e0e <strncpy>:
 8004e0e:	4603      	mov	r3, r0
 8004e10:	b510      	push	{r4, lr}
 8004e12:	3901      	subs	r1, #1
 8004e14:	b132      	cbz	r2, 8004e24 <strncpy+0x16>
 8004e16:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004e1a:	3a01      	subs	r2, #1
 8004e1c:	f803 4b01 	strb.w	r4, [r3], #1
 8004e20:	2c00      	cmp	r4, #0
 8004e22:	d1f7      	bne.n	8004e14 <strncpy+0x6>
 8004e24:	2100      	movs	r1, #0
 8004e26:	441a      	add	r2, r3
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d100      	bne.n	8004e2e <strncpy+0x20>
 8004e2c:	bd10      	pop	{r4, pc}
 8004e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e32:	e7f9      	b.n	8004e28 <strncpy+0x1a>

08004e34 <__errno>:
 8004e34:	4b01      	ldr	r3, [pc, #4]	@ (8004e3c <__errno+0x8>)
 8004e36:	6818      	ldr	r0, [r3, #0]
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	2000000c 	.word	0x2000000c

08004e40 <__libc_init_array>:
 8004e40:	b570      	push	{r4, r5, r6, lr}
 8004e42:	2600      	movs	r6, #0
 8004e44:	4d0c      	ldr	r5, [pc, #48]	@ (8004e78 <__libc_init_array+0x38>)
 8004e46:	4c0d      	ldr	r4, [pc, #52]	@ (8004e7c <__libc_init_array+0x3c>)
 8004e48:	1b64      	subs	r4, r4, r5
 8004e4a:	10a4      	asrs	r4, r4, #2
 8004e4c:	42a6      	cmp	r6, r4
 8004e4e:	d109      	bne.n	8004e64 <__libc_init_array+0x24>
 8004e50:	f001 fa84 	bl	800635c <_init>
 8004e54:	2600      	movs	r6, #0
 8004e56:	4d0a      	ldr	r5, [pc, #40]	@ (8004e80 <__libc_init_array+0x40>)
 8004e58:	4c0a      	ldr	r4, [pc, #40]	@ (8004e84 <__libc_init_array+0x44>)
 8004e5a:	1b64      	subs	r4, r4, r5
 8004e5c:	10a4      	asrs	r4, r4, #2
 8004e5e:	42a6      	cmp	r6, r4
 8004e60:	d105      	bne.n	8004e6e <__libc_init_array+0x2e>
 8004e62:	bd70      	pop	{r4, r5, r6, pc}
 8004e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e68:	4798      	blx	r3
 8004e6a:	3601      	adds	r6, #1
 8004e6c:	e7ee      	b.n	8004e4c <__libc_init_array+0xc>
 8004e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e72:	4798      	blx	r3
 8004e74:	3601      	adds	r6, #1
 8004e76:	e7f2      	b.n	8004e5e <__libc_init_array+0x1e>
 8004e78:	080067a8 	.word	0x080067a8
 8004e7c:	080067a8 	.word	0x080067a8
 8004e80:	080067a8 	.word	0x080067a8
 8004e84:	080067ac 	.word	0x080067ac

08004e88 <memcpy>:
 8004e88:	440a      	add	r2, r1
 8004e8a:	4291      	cmp	r1, r2
 8004e8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e90:	d100      	bne.n	8004e94 <memcpy+0xc>
 8004e92:	4770      	bx	lr
 8004e94:	b510      	push	{r4, lr}
 8004e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e9a:	4291      	cmp	r1, r2
 8004e9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ea0:	d1f9      	bne.n	8004e96 <memcpy+0xe>
 8004ea2:	bd10      	pop	{r4, pc}

08004ea4 <powf>:
 8004ea4:	b570      	push	{r4, r5, r6, lr}
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	4606      	mov	r6, r0
 8004eaa:	f000 fa43 	bl	8005334 <__ieee754_powf>
 8004eae:	4621      	mov	r1, r4
 8004eb0:	4605      	mov	r5, r0
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	f7fb fc28 	bl	8000708 <__aeabi_fcmpun>
 8004eb8:	bb68      	cbnz	r0, 8004f16 <powf+0x72>
 8004eba:	2100      	movs	r1, #0
 8004ebc:	4630      	mov	r0, r6
 8004ebe:	f7fb fbf1 	bl	80006a4 <__aeabi_fcmpeq>
 8004ec2:	b190      	cbz	r0, 8004eea <powf+0x46>
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	f7fb fbec 	bl	80006a4 <__aeabi_fcmpeq>
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d133      	bne.n	8004f38 <powf+0x94>
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f000 f8c1 	bl	8005058 <finitef>
 8004ed6:	b1f0      	cbz	r0, 8004f16 <powf+0x72>
 8004ed8:	2100      	movs	r1, #0
 8004eda:	4620      	mov	r0, r4
 8004edc:	f7fb fbec 	bl	80006b8 <__aeabi_fcmplt>
 8004ee0:	b1c8      	cbz	r0, 8004f16 <powf+0x72>
 8004ee2:	f7ff ffa7 	bl	8004e34 <__errno>
 8004ee6:	2322      	movs	r3, #34	@ 0x22
 8004ee8:	e014      	b.n	8004f14 <powf+0x70>
 8004eea:	4628      	mov	r0, r5
 8004eec:	f000 f8b4 	bl	8005058 <finitef>
 8004ef0:	b998      	cbnz	r0, 8004f1a <powf+0x76>
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	f000 f8b0 	bl	8005058 <finitef>
 8004ef8:	b178      	cbz	r0, 8004f1a <powf+0x76>
 8004efa:	4620      	mov	r0, r4
 8004efc:	f000 f8ac 	bl	8005058 <finitef>
 8004f00:	b158      	cbz	r0, 8004f1a <powf+0x76>
 8004f02:	4629      	mov	r1, r5
 8004f04:	4628      	mov	r0, r5
 8004f06:	f7fb fbff 	bl	8000708 <__aeabi_fcmpun>
 8004f0a:	2800      	cmp	r0, #0
 8004f0c:	d0e9      	beq.n	8004ee2 <powf+0x3e>
 8004f0e:	f7ff ff91 	bl	8004e34 <__errno>
 8004f12:	2321      	movs	r3, #33	@ 0x21
 8004f14:	6003      	str	r3, [r0, #0]
 8004f16:	4628      	mov	r0, r5
 8004f18:	bd70      	pop	{r4, r5, r6, pc}
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	f7fb fbc1 	bl	80006a4 <__aeabi_fcmpeq>
 8004f22:	2800      	cmp	r0, #0
 8004f24:	d0f7      	beq.n	8004f16 <powf+0x72>
 8004f26:	4630      	mov	r0, r6
 8004f28:	f000 f896 	bl	8005058 <finitef>
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	d0f2      	beq.n	8004f16 <powf+0x72>
 8004f30:	4620      	mov	r0, r4
 8004f32:	f000 f891 	bl	8005058 <finitef>
 8004f36:	e7d3      	b.n	8004ee0 <powf+0x3c>
 8004f38:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8004f3c:	e7eb      	b.n	8004f16 <powf+0x72>

08004f3e <sqrtf>:
 8004f3e:	b538      	push	{r3, r4, r5, lr}
 8004f40:	4605      	mov	r5, r0
 8004f42:	f000 f891 	bl	8005068 <__ieee754_sqrtf>
 8004f46:	4629      	mov	r1, r5
 8004f48:	4604      	mov	r4, r0
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	f7fb fbdc 	bl	8000708 <__aeabi_fcmpun>
 8004f50:	b968      	cbnz	r0, 8004f6e <sqrtf+0x30>
 8004f52:	2100      	movs	r1, #0
 8004f54:	4628      	mov	r0, r5
 8004f56:	f7fb fbaf 	bl	80006b8 <__aeabi_fcmplt>
 8004f5a:	b140      	cbz	r0, 8004f6e <sqrtf+0x30>
 8004f5c:	f7ff ff6a 	bl	8004e34 <__errno>
 8004f60:	2321      	movs	r3, #33	@ 0x21
 8004f62:	2100      	movs	r1, #0
 8004f64:	6003      	str	r3, [r0, #0]
 8004f66:	4608      	mov	r0, r1
 8004f68:	f7fb fabc 	bl	80004e4 <__aeabi_fdiv>
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	4620      	mov	r0, r4
 8004f70:	bd38      	pop	{r3, r4, r5, pc}
	...

08004f74 <cosf>:
 8004f74:	b507      	push	{r0, r1, r2, lr}
 8004f76:	4a1a      	ldr	r2, [pc, #104]	@ (8004fe0 <cosf+0x6c>)
 8004f78:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	4601      	mov	r1, r0
 8004f80:	d805      	bhi.n	8004f8e <cosf+0x1a>
 8004f82:	2100      	movs	r1, #0
 8004f84:	b003      	add	sp, #12
 8004f86:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f8a:	f000 b8dd 	b.w	8005148 <__kernel_cosf>
 8004f8e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004f92:	d304      	bcc.n	8004f9e <cosf+0x2a>
 8004f94:	f7fb f8e8 	bl	8000168 <__aeabi_fsub>
 8004f98:	b003      	add	sp, #12
 8004f9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f9e:	4669      	mov	r1, sp
 8004fa0:	f000 fd28 	bl	80059f4 <__ieee754_rem_pio2f>
 8004fa4:	f000 0203 	and.w	r2, r0, #3
 8004fa8:	2a01      	cmp	r2, #1
 8004faa:	d007      	beq.n	8004fbc <cosf+0x48>
 8004fac:	2a02      	cmp	r2, #2
 8004fae:	d00c      	beq.n	8004fca <cosf+0x56>
 8004fb0:	b982      	cbnz	r2, 8004fd4 <cosf+0x60>
 8004fb2:	9901      	ldr	r1, [sp, #4]
 8004fb4:	9800      	ldr	r0, [sp, #0]
 8004fb6:	f000 f8c7 	bl	8005148 <__kernel_cosf>
 8004fba:	e7ed      	b.n	8004f98 <cosf+0x24>
 8004fbc:	9901      	ldr	r1, [sp, #4]
 8004fbe:	9800      	ldr	r0, [sp, #0]
 8004fc0:	f000 f942 	bl	8005248 <__kernel_sinf>
 8004fc4:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8004fc8:	e7e6      	b.n	8004f98 <cosf+0x24>
 8004fca:	9901      	ldr	r1, [sp, #4]
 8004fcc:	9800      	ldr	r0, [sp, #0]
 8004fce:	f000 f8bb 	bl	8005148 <__kernel_cosf>
 8004fd2:	e7f7      	b.n	8004fc4 <cosf+0x50>
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	9901      	ldr	r1, [sp, #4]
 8004fd8:	9800      	ldr	r0, [sp, #0]
 8004fda:	f000 f935 	bl	8005248 <__kernel_sinf>
 8004fde:	e7db      	b.n	8004f98 <cosf+0x24>
 8004fe0:	3f490fd8 	.word	0x3f490fd8

08004fe4 <sinf>:
 8004fe4:	b507      	push	{r0, r1, r2, lr}
 8004fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8005054 <sinf+0x70>)
 8004fe8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8004fec:	4293      	cmp	r3, r2
 8004fee:	4601      	mov	r1, r0
 8004ff0:	d806      	bhi.n	8005000 <sinf+0x1c>
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	b003      	add	sp, #12
 8004ff8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ffc:	f000 b924 	b.w	8005248 <__kernel_sinf>
 8005000:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005004:	d304      	bcc.n	8005010 <sinf+0x2c>
 8005006:	f7fb f8af 	bl	8000168 <__aeabi_fsub>
 800500a:	b003      	add	sp, #12
 800500c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005010:	4669      	mov	r1, sp
 8005012:	f000 fcef 	bl	80059f4 <__ieee754_rem_pio2f>
 8005016:	f000 0003 	and.w	r0, r0, #3
 800501a:	2801      	cmp	r0, #1
 800501c:	d008      	beq.n	8005030 <sinf+0x4c>
 800501e:	2802      	cmp	r0, #2
 8005020:	d00b      	beq.n	800503a <sinf+0x56>
 8005022:	b990      	cbnz	r0, 800504a <sinf+0x66>
 8005024:	2201      	movs	r2, #1
 8005026:	9901      	ldr	r1, [sp, #4]
 8005028:	9800      	ldr	r0, [sp, #0]
 800502a:	f000 f90d 	bl	8005248 <__kernel_sinf>
 800502e:	e7ec      	b.n	800500a <sinf+0x26>
 8005030:	9901      	ldr	r1, [sp, #4]
 8005032:	9800      	ldr	r0, [sp, #0]
 8005034:	f000 f888 	bl	8005148 <__kernel_cosf>
 8005038:	e7e7      	b.n	800500a <sinf+0x26>
 800503a:	2201      	movs	r2, #1
 800503c:	9901      	ldr	r1, [sp, #4]
 800503e:	9800      	ldr	r0, [sp, #0]
 8005040:	f000 f902 	bl	8005248 <__kernel_sinf>
 8005044:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8005048:	e7df      	b.n	800500a <sinf+0x26>
 800504a:	9901      	ldr	r1, [sp, #4]
 800504c:	9800      	ldr	r0, [sp, #0]
 800504e:	f000 f87b 	bl	8005148 <__kernel_cosf>
 8005052:	e7f7      	b.n	8005044 <sinf+0x60>
 8005054:	3f490fd8 	.word	0x3f490fd8

08005058 <finitef>:
 8005058:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800505c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8005060:	bfac      	ite	ge
 8005062:	2000      	movge	r0, #0
 8005064:	2001      	movlt	r0, #1
 8005066:	4770      	bx	lr

08005068 <__ieee754_sqrtf>:
 8005068:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800506c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8005070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005074:	4603      	mov	r3, r0
 8005076:	4604      	mov	r4, r0
 8005078:	d30a      	bcc.n	8005090 <__ieee754_sqrtf+0x28>
 800507a:	4601      	mov	r1, r0
 800507c:	f7fb f97e 	bl	800037c <__aeabi_fmul>
 8005080:	4601      	mov	r1, r0
 8005082:	4620      	mov	r0, r4
 8005084:	f7fb f872 	bl	800016c <__addsf3>
 8005088:	4604      	mov	r4, r0
 800508a:	4620      	mov	r0, r4
 800508c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005090:	2a00      	cmp	r2, #0
 8005092:	d0fa      	beq.n	800508a <__ieee754_sqrtf+0x22>
 8005094:	2800      	cmp	r0, #0
 8005096:	da06      	bge.n	80050a6 <__ieee754_sqrtf+0x3e>
 8005098:	4601      	mov	r1, r0
 800509a:	f7fb f865 	bl	8000168 <__aeabi_fsub>
 800509e:	4601      	mov	r1, r0
 80050a0:	f7fb fa20 	bl	80004e4 <__aeabi_fdiv>
 80050a4:	e7f0      	b.n	8005088 <__ieee754_sqrtf+0x20>
 80050a6:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 80050aa:	d03c      	beq.n	8005126 <__ieee754_sqrtf+0xbe>
 80050ac:	15c2      	asrs	r2, r0, #23
 80050ae:	2400      	movs	r4, #0
 80050b0:	2019      	movs	r0, #25
 80050b2:	4626      	mov	r6, r4
 80050b4:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80050b8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80050bc:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 80050c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80050c4:	07d2      	lsls	r2, r2, #31
 80050c6:	bf58      	it	pl
 80050c8:	005b      	lslpl	r3, r3, #1
 80050ca:	106d      	asrs	r5, r5, #1
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	1872      	adds	r2, r6, r1
 80050d0:	429a      	cmp	r2, r3
 80050d2:	bfcf      	iteee	gt
 80050d4:	461a      	movgt	r2, r3
 80050d6:	1856      	addle	r6, r2, r1
 80050d8:	1864      	addle	r4, r4, r1
 80050da:	1a9a      	suble	r2, r3, r2
 80050dc:	3801      	subs	r0, #1
 80050de:	ea4f 0342 	mov.w	r3, r2, lsl #1
 80050e2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80050e6:	d1f2      	bne.n	80050ce <__ieee754_sqrtf+0x66>
 80050e8:	b1ba      	cbz	r2, 800511a <__ieee754_sqrtf+0xb2>
 80050ea:	4e15      	ldr	r6, [pc, #84]	@ (8005140 <__ieee754_sqrtf+0xd8>)
 80050ec:	4f15      	ldr	r7, [pc, #84]	@ (8005144 <__ieee754_sqrtf+0xdc>)
 80050ee:	6830      	ldr	r0, [r6, #0]
 80050f0:	6839      	ldr	r1, [r7, #0]
 80050f2:	f7fb f839 	bl	8000168 <__aeabi_fsub>
 80050f6:	f8d6 8000 	ldr.w	r8, [r6]
 80050fa:	4601      	mov	r1, r0
 80050fc:	4640      	mov	r0, r8
 80050fe:	f7fb fae5 	bl	80006cc <__aeabi_fcmple>
 8005102:	b150      	cbz	r0, 800511a <__ieee754_sqrtf+0xb2>
 8005104:	6830      	ldr	r0, [r6, #0]
 8005106:	6839      	ldr	r1, [r7, #0]
 8005108:	f7fb f830 	bl	800016c <__addsf3>
 800510c:	6836      	ldr	r6, [r6, #0]
 800510e:	4601      	mov	r1, r0
 8005110:	4630      	mov	r0, r6
 8005112:	f7fb fad1 	bl	80006b8 <__aeabi_fcmplt>
 8005116:	b170      	cbz	r0, 8005136 <__ieee754_sqrtf+0xce>
 8005118:	3402      	adds	r4, #2
 800511a:	1064      	asrs	r4, r4, #1
 800511c:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8005120:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8005124:	e7b1      	b.n	800508a <__ieee754_sqrtf+0x22>
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	0218      	lsls	r0, r3, #8
 800512a:	460a      	mov	r2, r1
 800512c:	f101 0101 	add.w	r1, r1, #1
 8005130:	d5f9      	bpl.n	8005126 <__ieee754_sqrtf+0xbe>
 8005132:	4252      	negs	r2, r2
 8005134:	e7bb      	b.n	80050ae <__ieee754_sqrtf+0x46>
 8005136:	3401      	adds	r4, #1
 8005138:	f024 0401 	bic.w	r4, r4, #1
 800513c:	e7ed      	b.n	800511a <__ieee754_sqrtf+0xb2>
 800513e:	bf00      	nop
 8005140:	080063b4 	.word	0x080063b4
 8005144:	080063b0 	.word	0x080063b0

08005148 <__kernel_cosf>:
 8005148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800514c:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8005150:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 8005154:	4606      	mov	r6, r0
 8005156:	4688      	mov	r8, r1
 8005158:	d203      	bcs.n	8005162 <__kernel_cosf+0x1a>
 800515a:	f7fb faeb 	bl	8000734 <__aeabi_f2iz>
 800515e:	2800      	cmp	r0, #0
 8005160:	d05c      	beq.n	800521c <__kernel_cosf+0xd4>
 8005162:	4631      	mov	r1, r6
 8005164:	4630      	mov	r0, r6
 8005166:	f7fb f909 	bl	800037c <__aeabi_fmul>
 800516a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800516e:	4604      	mov	r4, r0
 8005170:	f7fb f904 	bl	800037c <__aeabi_fmul>
 8005174:	492b      	ldr	r1, [pc, #172]	@ (8005224 <__kernel_cosf+0xdc>)
 8005176:	4607      	mov	r7, r0
 8005178:	4620      	mov	r0, r4
 800517a:	f7fb f8ff 	bl	800037c <__aeabi_fmul>
 800517e:	492a      	ldr	r1, [pc, #168]	@ (8005228 <__kernel_cosf+0xe0>)
 8005180:	f7fa fff4 	bl	800016c <__addsf3>
 8005184:	4621      	mov	r1, r4
 8005186:	f7fb f8f9 	bl	800037c <__aeabi_fmul>
 800518a:	4928      	ldr	r1, [pc, #160]	@ (800522c <__kernel_cosf+0xe4>)
 800518c:	f7fa ffec 	bl	8000168 <__aeabi_fsub>
 8005190:	4621      	mov	r1, r4
 8005192:	f7fb f8f3 	bl	800037c <__aeabi_fmul>
 8005196:	4926      	ldr	r1, [pc, #152]	@ (8005230 <__kernel_cosf+0xe8>)
 8005198:	f7fa ffe8 	bl	800016c <__addsf3>
 800519c:	4621      	mov	r1, r4
 800519e:	f7fb f8ed 	bl	800037c <__aeabi_fmul>
 80051a2:	4924      	ldr	r1, [pc, #144]	@ (8005234 <__kernel_cosf+0xec>)
 80051a4:	f7fa ffe0 	bl	8000168 <__aeabi_fsub>
 80051a8:	4621      	mov	r1, r4
 80051aa:	f7fb f8e7 	bl	800037c <__aeabi_fmul>
 80051ae:	4922      	ldr	r1, [pc, #136]	@ (8005238 <__kernel_cosf+0xf0>)
 80051b0:	f7fa ffdc 	bl	800016c <__addsf3>
 80051b4:	4621      	mov	r1, r4
 80051b6:	f7fb f8e1 	bl	800037c <__aeabi_fmul>
 80051ba:	4621      	mov	r1, r4
 80051bc:	f7fb f8de 	bl	800037c <__aeabi_fmul>
 80051c0:	4641      	mov	r1, r8
 80051c2:	4604      	mov	r4, r0
 80051c4:	4630      	mov	r0, r6
 80051c6:	f7fb f8d9 	bl	800037c <__aeabi_fmul>
 80051ca:	4601      	mov	r1, r0
 80051cc:	4620      	mov	r0, r4
 80051ce:	f7fa ffcb 	bl	8000168 <__aeabi_fsub>
 80051d2:	4b1a      	ldr	r3, [pc, #104]	@ (800523c <__kernel_cosf+0xf4>)
 80051d4:	4604      	mov	r4, r0
 80051d6:	429d      	cmp	r5, r3
 80051d8:	d80a      	bhi.n	80051f0 <__kernel_cosf+0xa8>
 80051da:	4601      	mov	r1, r0
 80051dc:	4638      	mov	r0, r7
 80051de:	f7fa ffc3 	bl	8000168 <__aeabi_fsub>
 80051e2:	4601      	mov	r1, r0
 80051e4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80051e8:	f7fa ffbe 	bl	8000168 <__aeabi_fsub>
 80051ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051f0:	4b13      	ldr	r3, [pc, #76]	@ (8005240 <__kernel_cosf+0xf8>)
 80051f2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80051f6:	429d      	cmp	r5, r3
 80051f8:	bf8c      	ite	hi
 80051fa:	4d12      	ldrhi	r5, [pc, #72]	@ (8005244 <__kernel_cosf+0xfc>)
 80051fc:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 8005200:	4629      	mov	r1, r5
 8005202:	f7fa ffb1 	bl	8000168 <__aeabi_fsub>
 8005206:	4629      	mov	r1, r5
 8005208:	4606      	mov	r6, r0
 800520a:	4638      	mov	r0, r7
 800520c:	f7fa ffac 	bl	8000168 <__aeabi_fsub>
 8005210:	4621      	mov	r1, r4
 8005212:	f7fa ffa9 	bl	8000168 <__aeabi_fsub>
 8005216:	4601      	mov	r1, r0
 8005218:	4630      	mov	r0, r6
 800521a:	e7e5      	b.n	80051e8 <__kernel_cosf+0xa0>
 800521c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005220:	e7e4      	b.n	80051ec <__kernel_cosf+0xa4>
 8005222:	bf00      	nop
 8005224:	ad47d74e 	.word	0xad47d74e
 8005228:	310f74f6 	.word	0x310f74f6
 800522c:	3493f27c 	.word	0x3493f27c
 8005230:	37d00d01 	.word	0x37d00d01
 8005234:	3ab60b61 	.word	0x3ab60b61
 8005238:	3d2aaaab 	.word	0x3d2aaaab
 800523c:	3e999999 	.word	0x3e999999
 8005240:	3f480000 	.word	0x3f480000
 8005244:	3e900000 	.word	0x3e900000

08005248 <__kernel_sinf>:
 8005248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800524c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8005250:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8005254:	4604      	mov	r4, r0
 8005256:	460f      	mov	r7, r1
 8005258:	4691      	mov	r9, r2
 800525a:	d203      	bcs.n	8005264 <__kernel_sinf+0x1c>
 800525c:	f7fb fa6a 	bl	8000734 <__aeabi_f2iz>
 8005260:	2800      	cmp	r0, #0
 8005262:	d035      	beq.n	80052d0 <__kernel_sinf+0x88>
 8005264:	4621      	mov	r1, r4
 8005266:	4620      	mov	r0, r4
 8005268:	f7fb f888 	bl	800037c <__aeabi_fmul>
 800526c:	4605      	mov	r5, r0
 800526e:	4601      	mov	r1, r0
 8005270:	4620      	mov	r0, r4
 8005272:	f7fb f883 	bl	800037c <__aeabi_fmul>
 8005276:	4929      	ldr	r1, [pc, #164]	@ (800531c <__kernel_sinf+0xd4>)
 8005278:	4606      	mov	r6, r0
 800527a:	4628      	mov	r0, r5
 800527c:	f7fb f87e 	bl	800037c <__aeabi_fmul>
 8005280:	4927      	ldr	r1, [pc, #156]	@ (8005320 <__kernel_sinf+0xd8>)
 8005282:	f7fa ff71 	bl	8000168 <__aeabi_fsub>
 8005286:	4629      	mov	r1, r5
 8005288:	f7fb f878 	bl	800037c <__aeabi_fmul>
 800528c:	4925      	ldr	r1, [pc, #148]	@ (8005324 <__kernel_sinf+0xdc>)
 800528e:	f7fa ff6d 	bl	800016c <__addsf3>
 8005292:	4629      	mov	r1, r5
 8005294:	f7fb f872 	bl	800037c <__aeabi_fmul>
 8005298:	4923      	ldr	r1, [pc, #140]	@ (8005328 <__kernel_sinf+0xe0>)
 800529a:	f7fa ff65 	bl	8000168 <__aeabi_fsub>
 800529e:	4629      	mov	r1, r5
 80052a0:	f7fb f86c 	bl	800037c <__aeabi_fmul>
 80052a4:	4921      	ldr	r1, [pc, #132]	@ (800532c <__kernel_sinf+0xe4>)
 80052a6:	f7fa ff61 	bl	800016c <__addsf3>
 80052aa:	4680      	mov	r8, r0
 80052ac:	f1b9 0f00 	cmp.w	r9, #0
 80052b0:	d111      	bne.n	80052d6 <__kernel_sinf+0x8e>
 80052b2:	4601      	mov	r1, r0
 80052b4:	4628      	mov	r0, r5
 80052b6:	f7fb f861 	bl	800037c <__aeabi_fmul>
 80052ba:	491d      	ldr	r1, [pc, #116]	@ (8005330 <__kernel_sinf+0xe8>)
 80052bc:	f7fa ff54 	bl	8000168 <__aeabi_fsub>
 80052c0:	4631      	mov	r1, r6
 80052c2:	f7fb f85b 	bl	800037c <__aeabi_fmul>
 80052c6:	4601      	mov	r1, r0
 80052c8:	4620      	mov	r0, r4
 80052ca:	f7fa ff4f 	bl	800016c <__addsf3>
 80052ce:	4604      	mov	r4, r0
 80052d0:	4620      	mov	r0, r4
 80052d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052d6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80052da:	4638      	mov	r0, r7
 80052dc:	f7fb f84e 	bl	800037c <__aeabi_fmul>
 80052e0:	4641      	mov	r1, r8
 80052e2:	4681      	mov	r9, r0
 80052e4:	4630      	mov	r0, r6
 80052e6:	f7fb f849 	bl	800037c <__aeabi_fmul>
 80052ea:	4601      	mov	r1, r0
 80052ec:	4648      	mov	r0, r9
 80052ee:	f7fa ff3b 	bl	8000168 <__aeabi_fsub>
 80052f2:	4629      	mov	r1, r5
 80052f4:	f7fb f842 	bl	800037c <__aeabi_fmul>
 80052f8:	4639      	mov	r1, r7
 80052fa:	f7fa ff35 	bl	8000168 <__aeabi_fsub>
 80052fe:	490c      	ldr	r1, [pc, #48]	@ (8005330 <__kernel_sinf+0xe8>)
 8005300:	4605      	mov	r5, r0
 8005302:	4630      	mov	r0, r6
 8005304:	f7fb f83a 	bl	800037c <__aeabi_fmul>
 8005308:	4601      	mov	r1, r0
 800530a:	4628      	mov	r0, r5
 800530c:	f7fa ff2e 	bl	800016c <__addsf3>
 8005310:	4601      	mov	r1, r0
 8005312:	4620      	mov	r0, r4
 8005314:	f7fa ff28 	bl	8000168 <__aeabi_fsub>
 8005318:	e7d9      	b.n	80052ce <__kernel_sinf+0x86>
 800531a:	bf00      	nop
 800531c:	2f2ec9d3 	.word	0x2f2ec9d3
 8005320:	32d72f34 	.word	0x32d72f34
 8005324:	3638ef1b 	.word	0x3638ef1b
 8005328:	39500d01 	.word	0x39500d01
 800532c:	3c088889 	.word	0x3c088889
 8005330:	3e2aaaab 	.word	0x3e2aaaab

08005334 <__ieee754_powf>:
 8005334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005338:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 800533c:	4681      	mov	r9, r0
 800533e:	460f      	mov	r7, r1
 8005340:	4606      	mov	r6, r0
 8005342:	460c      	mov	r4, r1
 8005344:	b087      	sub	sp, #28
 8005346:	d10c      	bne.n	8005362 <__ieee754_powf+0x2e>
 8005348:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 800534c:	0076      	lsls	r6, r6, #1
 800534e:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8005352:	f240 8310 	bls.w	8005976 <__ieee754_powf+0x642>
 8005356:	4639      	mov	r1, r7
 8005358:	4648      	mov	r0, r9
 800535a:	f7fa ff07 	bl	800016c <__addsf3>
 800535e:	4601      	mov	r1, r0
 8005360:	e043      	b.n	80053ea <__ieee754_powf+0xb6>
 8005362:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8005366:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800536a:	d802      	bhi.n	8005372 <__ieee754_powf+0x3e>
 800536c:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8005370:	d908      	bls.n	8005384 <__ieee754_powf+0x50>
 8005372:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8005376:	d1ee      	bne.n	8005356 <__ieee754_powf+0x22>
 8005378:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800537c:	0064      	lsls	r4, r4, #1
 800537e:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8005382:	e7e6      	b.n	8005352 <__ieee754_powf+0x1e>
 8005384:	2800      	cmp	r0, #0
 8005386:	da1f      	bge.n	80053c8 <__ieee754_powf+0x94>
 8005388:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 800538c:	f080 82f8 	bcs.w	8005980 <__ieee754_powf+0x64c>
 8005390:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8005394:	d32f      	bcc.n	80053f6 <__ieee754_powf+0xc2>
 8005396:	ea4f 53eb 	mov.w	r3, fp, asr #23
 800539a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800539e:	fa4b f503 	asr.w	r5, fp, r3
 80053a2:	fa05 f303 	lsl.w	r3, r5, r3
 80053a6:	455b      	cmp	r3, fp
 80053a8:	d123      	bne.n	80053f2 <__ieee754_powf+0xbe>
 80053aa:	f005 0501 	and.w	r5, r5, #1
 80053ae:	f1c5 0502 	rsb	r5, r5, #2
 80053b2:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 80053b6:	d11f      	bne.n	80053f8 <__ieee754_powf+0xc4>
 80053b8:	2c00      	cmp	r4, #0
 80053ba:	4649      	mov	r1, r9
 80053bc:	da15      	bge.n	80053ea <__ieee754_powf+0xb6>
 80053be:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80053c2:	f7fb f88f 	bl	80004e4 <__aeabi_fdiv>
 80053c6:	e7ca      	b.n	800535e <__ieee754_powf+0x2a>
 80053c8:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 80053cc:	d111      	bne.n	80053f2 <__ieee754_powf+0xbe>
 80053ce:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80053d2:	f000 82d0 	beq.w	8005976 <__ieee754_powf+0x642>
 80053d6:	d904      	bls.n	80053e2 <__ieee754_powf+0xae>
 80053d8:	2c00      	cmp	r4, #0
 80053da:	f280 82cf 	bge.w	800597c <__ieee754_powf+0x648>
 80053de:	2100      	movs	r1, #0
 80053e0:	e003      	b.n	80053ea <__ieee754_powf+0xb6>
 80053e2:	2c00      	cmp	r4, #0
 80053e4:	dafb      	bge.n	80053de <__ieee754_powf+0xaa>
 80053e6:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 80053ea:	4608      	mov	r0, r1
 80053ec:	b007      	add	sp, #28
 80053ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f2:	2500      	movs	r5, #0
 80053f4:	e7dd      	b.n	80053b2 <__ieee754_powf+0x7e>
 80053f6:	2500      	movs	r5, #0
 80053f8:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80053fc:	d104      	bne.n	8005408 <__ieee754_powf+0xd4>
 80053fe:	4649      	mov	r1, r9
 8005400:	4648      	mov	r0, r9
 8005402:	f7fa ffbb 	bl	800037c <__aeabi_fmul>
 8005406:	e7aa      	b.n	800535e <__ieee754_powf+0x2a>
 8005408:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800540c:	f040 82bd 	bne.w	800598a <__ieee754_powf+0x656>
 8005410:	2e00      	cmp	r6, #0
 8005412:	f2c0 82ba 	blt.w	800598a <__ieee754_powf+0x656>
 8005416:	4648      	mov	r0, r9
 8005418:	b007      	add	sp, #28
 800541a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800541e:	f7ff be23 	b.w	8005068 <__ieee754_sqrtf>
 8005422:	2d01      	cmp	r5, #1
 8005424:	d1e1      	bne.n	80053ea <__ieee754_powf+0xb6>
 8005426:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800542a:	e798      	b.n	800535e <__ieee754_powf+0x2a>
 800542c:	0ff3      	lsrs	r3, r6, #31
 800542e:	3b01      	subs	r3, #1
 8005430:	9303      	str	r3, [sp, #12]
 8005432:	432b      	orrs	r3, r5
 8005434:	d101      	bne.n	800543a <__ieee754_powf+0x106>
 8005436:	4649      	mov	r1, r9
 8005438:	e2c5      	b.n	80059c6 <__ieee754_powf+0x692>
 800543a:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 800543e:	f240 809b 	bls.w	8005578 <__ieee754_powf+0x244>
 8005442:	4b46      	ldr	r3, [pc, #280]	@ (800555c <__ieee754_powf+0x228>)
 8005444:	4598      	cmp	r8, r3
 8005446:	d807      	bhi.n	8005458 <__ieee754_powf+0x124>
 8005448:	2c00      	cmp	r4, #0
 800544a:	da0a      	bge.n	8005462 <__ieee754_powf+0x12e>
 800544c:	2000      	movs	r0, #0
 800544e:	b007      	add	sp, #28
 8005450:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005454:	f000 bc9d 	b.w	8005d92 <__math_oflowf>
 8005458:	4b41      	ldr	r3, [pc, #260]	@ (8005560 <__ieee754_powf+0x22c>)
 800545a:	4598      	cmp	r8, r3
 800545c:	d907      	bls.n	800546e <__ieee754_powf+0x13a>
 800545e:	2c00      	cmp	r4, #0
 8005460:	dcf4      	bgt.n	800544c <__ieee754_powf+0x118>
 8005462:	2000      	movs	r0, #0
 8005464:	b007      	add	sp, #28
 8005466:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800546a:	f000 bc8e 	b.w	8005d8a <__math_uflowf>
 800546e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005472:	f7fa fe79 	bl	8000168 <__aeabi_fsub>
 8005476:	493b      	ldr	r1, [pc, #236]	@ (8005564 <__ieee754_powf+0x230>)
 8005478:	4606      	mov	r6, r0
 800547a:	f7fa ff7f 	bl	800037c <__aeabi_fmul>
 800547e:	493a      	ldr	r1, [pc, #232]	@ (8005568 <__ieee754_powf+0x234>)
 8005480:	4680      	mov	r8, r0
 8005482:	4630      	mov	r0, r6
 8005484:	f7fa ff7a 	bl	800037c <__aeabi_fmul>
 8005488:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800548c:	4681      	mov	r9, r0
 800548e:	4630      	mov	r0, r6
 8005490:	f7fa ff74 	bl	800037c <__aeabi_fmul>
 8005494:	4601      	mov	r1, r0
 8005496:	4835      	ldr	r0, [pc, #212]	@ (800556c <__ieee754_powf+0x238>)
 8005498:	f7fa fe66 	bl	8000168 <__aeabi_fsub>
 800549c:	4631      	mov	r1, r6
 800549e:	f7fa ff6d 	bl	800037c <__aeabi_fmul>
 80054a2:	4601      	mov	r1, r0
 80054a4:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 80054a8:	f7fa fe5e 	bl	8000168 <__aeabi_fsub>
 80054ac:	4631      	mov	r1, r6
 80054ae:	4682      	mov	sl, r0
 80054b0:	4630      	mov	r0, r6
 80054b2:	f7fa ff63 	bl	800037c <__aeabi_fmul>
 80054b6:	4601      	mov	r1, r0
 80054b8:	4650      	mov	r0, sl
 80054ba:	f7fa ff5f 	bl	800037c <__aeabi_fmul>
 80054be:	492c      	ldr	r1, [pc, #176]	@ (8005570 <__ieee754_powf+0x23c>)
 80054c0:	f7fa ff5c 	bl	800037c <__aeabi_fmul>
 80054c4:	4601      	mov	r1, r0
 80054c6:	4648      	mov	r0, r9
 80054c8:	f7fa fe4e 	bl	8000168 <__aeabi_fsub>
 80054cc:	4601      	mov	r1, r0
 80054ce:	4606      	mov	r6, r0
 80054d0:	4640      	mov	r0, r8
 80054d2:	f7fa fe4b 	bl	800016c <__addsf3>
 80054d6:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 80054da:	f02b 0b0f 	bic.w	fp, fp, #15
 80054de:	4641      	mov	r1, r8
 80054e0:	4658      	mov	r0, fp
 80054e2:	f7fa fe41 	bl	8000168 <__aeabi_fsub>
 80054e6:	4601      	mov	r1, r0
 80054e8:	4630      	mov	r0, r6
 80054ea:	f7fa fe3d 	bl	8000168 <__aeabi_fsub>
 80054ee:	9b03      	ldr	r3, [sp, #12]
 80054f0:	3d01      	subs	r5, #1
 80054f2:	f36f 040b 	bfc	r4, #0, #12
 80054f6:	431d      	orrs	r5, r3
 80054f8:	4606      	mov	r6, r0
 80054fa:	4621      	mov	r1, r4
 80054fc:	4638      	mov	r0, r7
 80054fe:	bf14      	ite	ne
 8005500:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 8005504:	4d1b      	ldreq	r5, [pc, #108]	@ (8005574 <__ieee754_powf+0x240>)
 8005506:	f7fa fe2f 	bl	8000168 <__aeabi_fsub>
 800550a:	4659      	mov	r1, fp
 800550c:	f7fa ff36 	bl	800037c <__aeabi_fmul>
 8005510:	4639      	mov	r1, r7
 8005512:	4680      	mov	r8, r0
 8005514:	4630      	mov	r0, r6
 8005516:	f7fa ff31 	bl	800037c <__aeabi_fmul>
 800551a:	4601      	mov	r1, r0
 800551c:	4640      	mov	r0, r8
 800551e:	f7fa fe25 	bl	800016c <__addsf3>
 8005522:	4621      	mov	r1, r4
 8005524:	4606      	mov	r6, r0
 8005526:	4658      	mov	r0, fp
 8005528:	f7fa ff28 	bl	800037c <__aeabi_fmul>
 800552c:	4601      	mov	r1, r0
 800552e:	4607      	mov	r7, r0
 8005530:	4630      	mov	r0, r6
 8005532:	f7fa fe1b 	bl	800016c <__addsf3>
 8005536:	2800      	cmp	r0, #0
 8005538:	4604      	mov	r4, r0
 800553a:	4680      	mov	r8, r0
 800553c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8005540:	f340 813f 	ble.w	80057c2 <__ieee754_powf+0x48e>
 8005544:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8005548:	f240 8128 	bls.w	800579c <__ieee754_powf+0x468>
 800554c:	2100      	movs	r1, #0
 800554e:	4628      	mov	r0, r5
 8005550:	f7fb f8b2 	bl	80006b8 <__aeabi_fcmplt>
 8005554:	3800      	subs	r0, #0
 8005556:	bf18      	it	ne
 8005558:	2001      	movne	r0, #1
 800555a:	e778      	b.n	800544e <__ieee754_powf+0x11a>
 800555c:	3f7ffff3 	.word	0x3f7ffff3
 8005560:	3f800007 	.word	0x3f800007
 8005564:	3fb8aa00 	.word	0x3fb8aa00
 8005568:	36eca570 	.word	0x36eca570
 800556c:	3eaaaaab 	.word	0x3eaaaaab
 8005570:	3fb8aa3b 	.word	0x3fb8aa3b
 8005574:	bf800000 	.word	0xbf800000
 8005578:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800557c:	f040 810a 	bne.w	8005794 <__ieee754_powf+0x460>
 8005580:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8005584:	f7fa fefa 	bl	800037c <__aeabi_fmul>
 8005588:	f06f 0217 	mvn.w	r2, #23
 800558c:	4682      	mov	sl, r0
 800558e:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8005592:	3b7f      	subs	r3, #127	@ 0x7f
 8005594:	441a      	add	r2, r3
 8005596:	4b95      	ldr	r3, [pc, #596]	@ (80057ec <__ieee754_powf+0x4b8>)
 8005598:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 800559c:	459a      	cmp	sl, r3
 800559e:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 80055a2:	dd06      	ble.n	80055b2 <__ieee754_powf+0x27e>
 80055a4:	4b92      	ldr	r3, [pc, #584]	@ (80057f0 <__ieee754_powf+0x4bc>)
 80055a6:	459a      	cmp	sl, r3
 80055a8:	f340 80f6 	ble.w	8005798 <__ieee754_powf+0x464>
 80055ac:	3201      	adds	r2, #1
 80055ae:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 80055b2:	2300      	movs	r3, #0
 80055b4:	9301      	str	r3, [sp, #4]
 80055b6:	9205      	str	r2, [sp, #20]
 80055b8:	4b8e      	ldr	r3, [pc, #568]	@ (80057f4 <__ieee754_powf+0x4c0>)
 80055ba:	9a01      	ldr	r2, [sp, #4]
 80055bc:	4630      	mov	r0, r6
 80055be:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 80055c2:	46b2      	mov	sl, r6
 80055c4:	4659      	mov	r1, fp
 80055c6:	f7fa fdcf 	bl	8000168 <__aeabi_fsub>
 80055ca:	4631      	mov	r1, r6
 80055cc:	4681      	mov	r9, r0
 80055ce:	4658      	mov	r0, fp
 80055d0:	f7fa fdcc 	bl	800016c <__addsf3>
 80055d4:	4601      	mov	r1, r0
 80055d6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80055da:	f7fa ff83 	bl	80004e4 <__aeabi_fdiv>
 80055de:	4601      	mov	r1, r0
 80055e0:	9004      	str	r0, [sp, #16]
 80055e2:	4648      	mov	r0, r9
 80055e4:	f7fa feca 	bl	800037c <__aeabi_fmul>
 80055e8:	9002      	str	r0, [sp, #8]
 80055ea:	9b02      	ldr	r3, [sp, #8]
 80055ec:	1076      	asrs	r6, r6, #1
 80055ee:	f36f 030b 	bfc	r3, #0, #12
 80055f2:	4698      	mov	r8, r3
 80055f4:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 80055f8:	9b01      	ldr	r3, [sp, #4]
 80055fa:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 80055fe:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 8005602:	4631      	mov	r1, r6
 8005604:	4640      	mov	r0, r8
 8005606:	f7fa feb9 	bl	800037c <__aeabi_fmul>
 800560a:	4601      	mov	r1, r0
 800560c:	4648      	mov	r0, r9
 800560e:	f7fa fdab 	bl	8000168 <__aeabi_fsub>
 8005612:	4659      	mov	r1, fp
 8005614:	4681      	mov	r9, r0
 8005616:	4630      	mov	r0, r6
 8005618:	f7fa fda6 	bl	8000168 <__aeabi_fsub>
 800561c:	4601      	mov	r1, r0
 800561e:	4650      	mov	r0, sl
 8005620:	f7fa fda2 	bl	8000168 <__aeabi_fsub>
 8005624:	4641      	mov	r1, r8
 8005626:	f7fa fea9 	bl	800037c <__aeabi_fmul>
 800562a:	4601      	mov	r1, r0
 800562c:	4648      	mov	r0, r9
 800562e:	f7fa fd9b 	bl	8000168 <__aeabi_fsub>
 8005632:	9b04      	ldr	r3, [sp, #16]
 8005634:	4619      	mov	r1, r3
 8005636:	f7fa fea1 	bl	800037c <__aeabi_fmul>
 800563a:	9902      	ldr	r1, [sp, #8]
 800563c:	4683      	mov	fp, r0
 800563e:	4608      	mov	r0, r1
 8005640:	f7fa fe9c 	bl	800037c <__aeabi_fmul>
 8005644:	4606      	mov	r6, r0
 8005646:	496c      	ldr	r1, [pc, #432]	@ (80057f8 <__ieee754_powf+0x4c4>)
 8005648:	f7fa fe98 	bl	800037c <__aeabi_fmul>
 800564c:	496b      	ldr	r1, [pc, #428]	@ (80057fc <__ieee754_powf+0x4c8>)
 800564e:	f7fa fd8d 	bl	800016c <__addsf3>
 8005652:	4631      	mov	r1, r6
 8005654:	f7fa fe92 	bl	800037c <__aeabi_fmul>
 8005658:	4969      	ldr	r1, [pc, #420]	@ (8005800 <__ieee754_powf+0x4cc>)
 800565a:	f7fa fd87 	bl	800016c <__addsf3>
 800565e:	4631      	mov	r1, r6
 8005660:	f7fa fe8c 	bl	800037c <__aeabi_fmul>
 8005664:	4967      	ldr	r1, [pc, #412]	@ (8005804 <__ieee754_powf+0x4d0>)
 8005666:	f7fa fd81 	bl	800016c <__addsf3>
 800566a:	4631      	mov	r1, r6
 800566c:	f7fa fe86 	bl	800037c <__aeabi_fmul>
 8005670:	4965      	ldr	r1, [pc, #404]	@ (8005808 <__ieee754_powf+0x4d4>)
 8005672:	f7fa fd7b 	bl	800016c <__addsf3>
 8005676:	4631      	mov	r1, r6
 8005678:	f7fa fe80 	bl	800037c <__aeabi_fmul>
 800567c:	4963      	ldr	r1, [pc, #396]	@ (800580c <__ieee754_powf+0x4d8>)
 800567e:	f7fa fd75 	bl	800016c <__addsf3>
 8005682:	4631      	mov	r1, r6
 8005684:	4681      	mov	r9, r0
 8005686:	4630      	mov	r0, r6
 8005688:	f7fa fe78 	bl	800037c <__aeabi_fmul>
 800568c:	4601      	mov	r1, r0
 800568e:	4648      	mov	r0, r9
 8005690:	f7fa fe74 	bl	800037c <__aeabi_fmul>
 8005694:	4606      	mov	r6, r0
 8005696:	4641      	mov	r1, r8
 8005698:	9802      	ldr	r0, [sp, #8]
 800569a:	f7fa fd67 	bl	800016c <__addsf3>
 800569e:	4659      	mov	r1, fp
 80056a0:	f7fa fe6c 	bl	800037c <__aeabi_fmul>
 80056a4:	4631      	mov	r1, r6
 80056a6:	f7fa fd61 	bl	800016c <__addsf3>
 80056aa:	4641      	mov	r1, r8
 80056ac:	4681      	mov	r9, r0
 80056ae:	4640      	mov	r0, r8
 80056b0:	f7fa fe64 	bl	800037c <__aeabi_fmul>
 80056b4:	4956      	ldr	r1, [pc, #344]	@ (8005810 <__ieee754_powf+0x4dc>)
 80056b6:	4682      	mov	sl, r0
 80056b8:	f7fa fd58 	bl	800016c <__addsf3>
 80056bc:	4649      	mov	r1, r9
 80056be:	f7fa fd55 	bl	800016c <__addsf3>
 80056c2:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 80056c6:	f026 060f 	bic.w	r6, r6, #15
 80056ca:	4631      	mov	r1, r6
 80056cc:	4640      	mov	r0, r8
 80056ce:	f7fa fe55 	bl	800037c <__aeabi_fmul>
 80056d2:	494f      	ldr	r1, [pc, #316]	@ (8005810 <__ieee754_powf+0x4dc>)
 80056d4:	4680      	mov	r8, r0
 80056d6:	4630      	mov	r0, r6
 80056d8:	f7fa fd46 	bl	8000168 <__aeabi_fsub>
 80056dc:	4651      	mov	r1, sl
 80056de:	f7fa fd43 	bl	8000168 <__aeabi_fsub>
 80056e2:	4601      	mov	r1, r0
 80056e4:	4648      	mov	r0, r9
 80056e6:	f7fa fd3f 	bl	8000168 <__aeabi_fsub>
 80056ea:	9902      	ldr	r1, [sp, #8]
 80056ec:	f7fa fe46 	bl	800037c <__aeabi_fmul>
 80056f0:	4631      	mov	r1, r6
 80056f2:	4681      	mov	r9, r0
 80056f4:	4658      	mov	r0, fp
 80056f6:	f7fa fe41 	bl	800037c <__aeabi_fmul>
 80056fa:	4601      	mov	r1, r0
 80056fc:	4648      	mov	r0, r9
 80056fe:	f7fa fd35 	bl	800016c <__addsf3>
 8005702:	4682      	mov	sl, r0
 8005704:	4601      	mov	r1, r0
 8005706:	4640      	mov	r0, r8
 8005708:	f7fa fd30 	bl	800016c <__addsf3>
 800570c:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8005710:	f026 060f 	bic.w	r6, r6, #15
 8005714:	4630      	mov	r0, r6
 8005716:	493f      	ldr	r1, [pc, #252]	@ (8005814 <__ieee754_powf+0x4e0>)
 8005718:	f7fa fe30 	bl	800037c <__aeabi_fmul>
 800571c:	4641      	mov	r1, r8
 800571e:	4681      	mov	r9, r0
 8005720:	4630      	mov	r0, r6
 8005722:	f7fa fd21 	bl	8000168 <__aeabi_fsub>
 8005726:	4601      	mov	r1, r0
 8005728:	4650      	mov	r0, sl
 800572a:	f7fa fd1d 	bl	8000168 <__aeabi_fsub>
 800572e:	493a      	ldr	r1, [pc, #232]	@ (8005818 <__ieee754_powf+0x4e4>)
 8005730:	f7fa fe24 	bl	800037c <__aeabi_fmul>
 8005734:	4939      	ldr	r1, [pc, #228]	@ (800581c <__ieee754_powf+0x4e8>)
 8005736:	4680      	mov	r8, r0
 8005738:	4630      	mov	r0, r6
 800573a:	f7fa fe1f 	bl	800037c <__aeabi_fmul>
 800573e:	4601      	mov	r1, r0
 8005740:	4640      	mov	r0, r8
 8005742:	f7fa fd13 	bl	800016c <__addsf3>
 8005746:	4b36      	ldr	r3, [pc, #216]	@ (8005820 <__ieee754_powf+0x4ec>)
 8005748:	9a01      	ldr	r2, [sp, #4]
 800574a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800574e:	f7fa fd0d 	bl	800016c <__addsf3>
 8005752:	9a05      	ldr	r2, [sp, #20]
 8005754:	4606      	mov	r6, r0
 8005756:	4610      	mov	r0, r2
 8005758:	f7fa fdbc 	bl	80002d4 <__aeabi_i2f>
 800575c:	4680      	mov	r8, r0
 800575e:	4b31      	ldr	r3, [pc, #196]	@ (8005824 <__ieee754_powf+0x4f0>)
 8005760:	9a01      	ldr	r2, [sp, #4]
 8005762:	4631      	mov	r1, r6
 8005764:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8005768:	4648      	mov	r0, r9
 800576a:	f7fa fcff 	bl	800016c <__addsf3>
 800576e:	4651      	mov	r1, sl
 8005770:	f7fa fcfc 	bl	800016c <__addsf3>
 8005774:	4641      	mov	r1, r8
 8005776:	f7fa fcf9 	bl	800016c <__addsf3>
 800577a:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800577e:	f02b 0b0f 	bic.w	fp, fp, #15
 8005782:	4641      	mov	r1, r8
 8005784:	4658      	mov	r0, fp
 8005786:	f7fa fcef 	bl	8000168 <__aeabi_fsub>
 800578a:	4651      	mov	r1, sl
 800578c:	f7fa fcec 	bl	8000168 <__aeabi_fsub>
 8005790:	4649      	mov	r1, r9
 8005792:	e6a6      	b.n	80054e2 <__ieee754_powf+0x1ae>
 8005794:	2200      	movs	r2, #0
 8005796:	e6fa      	b.n	800558e <__ieee754_powf+0x25a>
 8005798:	2301      	movs	r3, #1
 800579a:	e70b      	b.n	80055b4 <__ieee754_powf+0x280>
 800579c:	d148      	bne.n	8005830 <__ieee754_powf+0x4fc>
 800579e:	4922      	ldr	r1, [pc, #136]	@ (8005828 <__ieee754_powf+0x4f4>)
 80057a0:	4630      	mov	r0, r6
 80057a2:	f7fa fce3 	bl	800016c <__addsf3>
 80057a6:	4639      	mov	r1, r7
 80057a8:	4681      	mov	r9, r0
 80057aa:	4620      	mov	r0, r4
 80057ac:	f7fa fcdc 	bl	8000168 <__aeabi_fsub>
 80057b0:	4601      	mov	r1, r0
 80057b2:	4648      	mov	r0, r9
 80057b4:	f7fa ff9e 	bl	80006f4 <__aeabi_fcmpgt>
 80057b8:	2800      	cmp	r0, #0
 80057ba:	f47f aec7 	bne.w	800554c <__ieee754_powf+0x218>
 80057be:	2386      	movs	r3, #134	@ 0x86
 80057c0:	e03b      	b.n	800583a <__ieee754_powf+0x506>
 80057c2:	4a1a      	ldr	r2, [pc, #104]	@ (800582c <__ieee754_powf+0x4f8>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d907      	bls.n	80057d8 <__ieee754_powf+0x4a4>
 80057c8:	2100      	movs	r1, #0
 80057ca:	4628      	mov	r0, r5
 80057cc:	f7fa ff74 	bl	80006b8 <__aeabi_fcmplt>
 80057d0:	3800      	subs	r0, #0
 80057d2:	bf18      	it	ne
 80057d4:	2001      	movne	r0, #1
 80057d6:	e645      	b.n	8005464 <__ieee754_powf+0x130>
 80057d8:	d12a      	bne.n	8005830 <__ieee754_powf+0x4fc>
 80057da:	4639      	mov	r1, r7
 80057dc:	f7fa fcc4 	bl	8000168 <__aeabi_fsub>
 80057e0:	4631      	mov	r1, r6
 80057e2:	f7fa ff7d 	bl	80006e0 <__aeabi_fcmpge>
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d0e9      	beq.n	80057be <__ieee754_powf+0x48a>
 80057ea:	e7ed      	b.n	80057c8 <__ieee754_powf+0x494>
 80057ec:	001cc471 	.word	0x001cc471
 80057f0:	005db3d6 	.word	0x005db3d6
 80057f4:	080063c8 	.word	0x080063c8
 80057f8:	3e53f142 	.word	0x3e53f142
 80057fc:	3e6c3255 	.word	0x3e6c3255
 8005800:	3e8ba305 	.word	0x3e8ba305
 8005804:	3eaaaaab 	.word	0x3eaaaaab
 8005808:	3edb6db7 	.word	0x3edb6db7
 800580c:	3f19999a 	.word	0x3f19999a
 8005810:	40400000 	.word	0x40400000
 8005814:	3f763800 	.word	0x3f763800
 8005818:	3f76384f 	.word	0x3f76384f
 800581c:	369dc3a0 	.word	0x369dc3a0
 8005820:	080063b8 	.word	0x080063b8
 8005824:	080063c0 	.word	0x080063c0
 8005828:	3338aa3c 	.word	0x3338aa3c
 800582c:	43160000 	.word	0x43160000
 8005830:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8005834:	f240 809b 	bls.w	800596e <__ieee754_powf+0x63a>
 8005838:	15db      	asrs	r3, r3, #23
 800583a:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 800583e:	3b7e      	subs	r3, #126	@ 0x7e
 8005840:	411c      	asrs	r4, r3
 8005842:	4444      	add	r4, r8
 8005844:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8005848:	4961      	ldr	r1, [pc, #388]	@ (80059d0 <__ieee754_powf+0x69c>)
 800584a:	3b7f      	subs	r3, #127	@ 0x7f
 800584c:	4119      	asrs	r1, r3
 800584e:	4021      	ands	r1, r4
 8005850:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8005854:	f1c3 0317 	rsb	r3, r3, #23
 8005858:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 800585c:	4638      	mov	r0, r7
 800585e:	411c      	asrs	r4, r3
 8005860:	f1b8 0f00 	cmp.w	r8, #0
 8005864:	bfb8      	it	lt
 8005866:	4264      	neglt	r4, r4
 8005868:	f7fa fc7e 	bl	8000168 <__aeabi_fsub>
 800586c:	4607      	mov	r7, r0
 800586e:	4631      	mov	r1, r6
 8005870:	4638      	mov	r0, r7
 8005872:	f7fa fc7b 	bl	800016c <__addsf3>
 8005876:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 800587a:	f028 080f 	bic.w	r8, r8, #15
 800587e:	4640      	mov	r0, r8
 8005880:	4954      	ldr	r1, [pc, #336]	@ (80059d4 <__ieee754_powf+0x6a0>)
 8005882:	f7fa fd7b 	bl	800037c <__aeabi_fmul>
 8005886:	4639      	mov	r1, r7
 8005888:	4681      	mov	r9, r0
 800588a:	4640      	mov	r0, r8
 800588c:	f7fa fc6c 	bl	8000168 <__aeabi_fsub>
 8005890:	4601      	mov	r1, r0
 8005892:	4630      	mov	r0, r6
 8005894:	f7fa fc68 	bl	8000168 <__aeabi_fsub>
 8005898:	494f      	ldr	r1, [pc, #316]	@ (80059d8 <__ieee754_powf+0x6a4>)
 800589a:	f7fa fd6f 	bl	800037c <__aeabi_fmul>
 800589e:	494f      	ldr	r1, [pc, #316]	@ (80059dc <__ieee754_powf+0x6a8>)
 80058a0:	4606      	mov	r6, r0
 80058a2:	4640      	mov	r0, r8
 80058a4:	f7fa fd6a 	bl	800037c <__aeabi_fmul>
 80058a8:	4601      	mov	r1, r0
 80058aa:	4630      	mov	r0, r6
 80058ac:	f7fa fc5e 	bl	800016c <__addsf3>
 80058b0:	4607      	mov	r7, r0
 80058b2:	4601      	mov	r1, r0
 80058b4:	4648      	mov	r0, r9
 80058b6:	f7fa fc59 	bl	800016c <__addsf3>
 80058ba:	4649      	mov	r1, r9
 80058bc:	4606      	mov	r6, r0
 80058be:	f7fa fc53 	bl	8000168 <__aeabi_fsub>
 80058c2:	4601      	mov	r1, r0
 80058c4:	4638      	mov	r0, r7
 80058c6:	f7fa fc4f 	bl	8000168 <__aeabi_fsub>
 80058ca:	4631      	mov	r1, r6
 80058cc:	4680      	mov	r8, r0
 80058ce:	4630      	mov	r0, r6
 80058d0:	f7fa fd54 	bl	800037c <__aeabi_fmul>
 80058d4:	4607      	mov	r7, r0
 80058d6:	4942      	ldr	r1, [pc, #264]	@ (80059e0 <__ieee754_powf+0x6ac>)
 80058d8:	f7fa fd50 	bl	800037c <__aeabi_fmul>
 80058dc:	4941      	ldr	r1, [pc, #260]	@ (80059e4 <__ieee754_powf+0x6b0>)
 80058de:	f7fa fc43 	bl	8000168 <__aeabi_fsub>
 80058e2:	4639      	mov	r1, r7
 80058e4:	f7fa fd4a 	bl	800037c <__aeabi_fmul>
 80058e8:	493f      	ldr	r1, [pc, #252]	@ (80059e8 <__ieee754_powf+0x6b4>)
 80058ea:	f7fa fc3f 	bl	800016c <__addsf3>
 80058ee:	4639      	mov	r1, r7
 80058f0:	f7fa fd44 	bl	800037c <__aeabi_fmul>
 80058f4:	493d      	ldr	r1, [pc, #244]	@ (80059ec <__ieee754_powf+0x6b8>)
 80058f6:	f7fa fc37 	bl	8000168 <__aeabi_fsub>
 80058fa:	4639      	mov	r1, r7
 80058fc:	f7fa fd3e 	bl	800037c <__aeabi_fmul>
 8005900:	493b      	ldr	r1, [pc, #236]	@ (80059f0 <__ieee754_powf+0x6bc>)
 8005902:	f7fa fc33 	bl	800016c <__addsf3>
 8005906:	4639      	mov	r1, r7
 8005908:	f7fa fd38 	bl	800037c <__aeabi_fmul>
 800590c:	4601      	mov	r1, r0
 800590e:	4630      	mov	r0, r6
 8005910:	f7fa fc2a 	bl	8000168 <__aeabi_fsub>
 8005914:	4607      	mov	r7, r0
 8005916:	4601      	mov	r1, r0
 8005918:	4630      	mov	r0, r6
 800591a:	f7fa fd2f 	bl	800037c <__aeabi_fmul>
 800591e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005922:	4681      	mov	r9, r0
 8005924:	4638      	mov	r0, r7
 8005926:	f7fa fc1f 	bl	8000168 <__aeabi_fsub>
 800592a:	4601      	mov	r1, r0
 800592c:	4648      	mov	r0, r9
 800592e:	f7fa fdd9 	bl	80004e4 <__aeabi_fdiv>
 8005932:	4641      	mov	r1, r8
 8005934:	4607      	mov	r7, r0
 8005936:	4630      	mov	r0, r6
 8005938:	f7fa fd20 	bl	800037c <__aeabi_fmul>
 800593c:	4641      	mov	r1, r8
 800593e:	f7fa fc15 	bl	800016c <__addsf3>
 8005942:	4601      	mov	r1, r0
 8005944:	4638      	mov	r0, r7
 8005946:	f7fa fc0f 	bl	8000168 <__aeabi_fsub>
 800594a:	4631      	mov	r1, r6
 800594c:	f7fa fc0c 	bl	8000168 <__aeabi_fsub>
 8005950:	4601      	mov	r1, r0
 8005952:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005956:	f7fa fc07 	bl	8000168 <__aeabi_fsub>
 800595a:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800595e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005962:	da06      	bge.n	8005972 <__ieee754_powf+0x63e>
 8005964:	4621      	mov	r1, r4
 8005966:	f000 f9af 	bl	8005cc8 <scalbnf>
 800596a:	4629      	mov	r1, r5
 800596c:	e549      	b.n	8005402 <__ieee754_powf+0xce>
 800596e:	2400      	movs	r4, #0
 8005970:	e77d      	b.n	800586e <__ieee754_powf+0x53a>
 8005972:	4618      	mov	r0, r3
 8005974:	e7f9      	b.n	800596a <__ieee754_powf+0x636>
 8005976:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800597a:	e536      	b.n	80053ea <__ieee754_powf+0xb6>
 800597c:	4639      	mov	r1, r7
 800597e:	e534      	b.n	80053ea <__ieee754_powf+0xb6>
 8005980:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8005984:	f43f ad23 	beq.w	80053ce <__ieee754_powf+0x9a>
 8005988:	2502      	movs	r5, #2
 800598a:	4648      	mov	r0, r9
 800598c:	f000 f998 	bl	8005cc0 <fabsf>
 8005990:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8005994:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8005998:	46c2      	mov	sl, r8
 800599a:	4601      	mov	r1, r0
 800599c:	d003      	beq.n	80059a6 <__ieee754_powf+0x672>
 800599e:	f1b8 0f00 	cmp.w	r8, #0
 80059a2:	f47f ad43 	bne.w	800542c <__ieee754_powf+0xf8>
 80059a6:	2c00      	cmp	r4, #0
 80059a8:	da04      	bge.n	80059b4 <__ieee754_powf+0x680>
 80059aa:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80059ae:	f7fa fd99 	bl	80004e4 <__aeabi_fdiv>
 80059b2:	4601      	mov	r1, r0
 80059b4:	2e00      	cmp	r6, #0
 80059b6:	f6bf ad18 	bge.w	80053ea <__ieee754_powf+0xb6>
 80059ba:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80059be:	ea58 0805 	orrs.w	r8, r8, r5
 80059c2:	f47f ad2e 	bne.w	8005422 <__ieee754_powf+0xee>
 80059c6:	4608      	mov	r0, r1
 80059c8:	f7fa fbce 	bl	8000168 <__aeabi_fsub>
 80059cc:	4601      	mov	r1, r0
 80059ce:	e4f8      	b.n	80053c2 <__ieee754_powf+0x8e>
 80059d0:	ff800000 	.word	0xff800000
 80059d4:	3f317200 	.word	0x3f317200
 80059d8:	3f317218 	.word	0x3f317218
 80059dc:	35bfbe8c 	.word	0x35bfbe8c
 80059e0:	3331bb4c 	.word	0x3331bb4c
 80059e4:	35ddea0e 	.word	0x35ddea0e
 80059e8:	388ab355 	.word	0x388ab355
 80059ec:	3b360b61 	.word	0x3b360b61
 80059f0:	3e2aaaab 	.word	0x3e2aaaab

080059f4 <__ieee754_rem_pio2f>:
 80059f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f8:	4aa4      	ldr	r2, [pc, #656]	@ (8005c8c <__ieee754_rem_pio2f+0x298>)
 80059fa:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 80059fe:	4590      	cmp	r8, r2
 8005a00:	460c      	mov	r4, r1
 8005a02:	4682      	mov	sl, r0
 8005a04:	b087      	sub	sp, #28
 8005a06:	d804      	bhi.n	8005a12 <__ieee754_rem_pio2f+0x1e>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	6008      	str	r0, [r1, #0]
 8005a0c:	604b      	str	r3, [r1, #4]
 8005a0e:	2500      	movs	r5, #0
 8005a10:	e01d      	b.n	8005a4e <__ieee754_rem_pio2f+0x5a>
 8005a12:	4a9f      	ldr	r2, [pc, #636]	@ (8005c90 <__ieee754_rem_pio2f+0x29c>)
 8005a14:	4590      	cmp	r8, r2
 8005a16:	d84f      	bhi.n	8005ab8 <__ieee754_rem_pio2f+0xc4>
 8005a18:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	499d      	ldr	r1, [pc, #628]	@ (8005c94 <__ieee754_rem_pio2f+0x2a0>)
 8005a20:	4f9d      	ldr	r7, [pc, #628]	@ (8005c98 <__ieee754_rem_pio2f+0x2a4>)
 8005a22:	f025 050f 	bic.w	r5, r5, #15
 8005a26:	dd24      	ble.n	8005a72 <__ieee754_rem_pio2f+0x7e>
 8005a28:	f7fa fb9e 	bl	8000168 <__aeabi_fsub>
 8005a2c:	42bd      	cmp	r5, r7
 8005a2e:	4606      	mov	r6, r0
 8005a30:	d011      	beq.n	8005a56 <__ieee754_rem_pio2f+0x62>
 8005a32:	499a      	ldr	r1, [pc, #616]	@ (8005c9c <__ieee754_rem_pio2f+0x2a8>)
 8005a34:	f7fa fb98 	bl	8000168 <__aeabi_fsub>
 8005a38:	4601      	mov	r1, r0
 8005a3a:	4605      	mov	r5, r0
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	f7fa fb93 	bl	8000168 <__aeabi_fsub>
 8005a42:	4996      	ldr	r1, [pc, #600]	@ (8005c9c <__ieee754_rem_pio2f+0x2a8>)
 8005a44:	f7fa fb90 	bl	8000168 <__aeabi_fsub>
 8005a48:	6025      	str	r5, [r4, #0]
 8005a4a:	2501      	movs	r5, #1
 8005a4c:	6060      	str	r0, [r4, #4]
 8005a4e:	4628      	mov	r0, r5
 8005a50:	b007      	add	sp, #28
 8005a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a56:	4992      	ldr	r1, [pc, #584]	@ (8005ca0 <__ieee754_rem_pio2f+0x2ac>)
 8005a58:	f7fa fb86 	bl	8000168 <__aeabi_fsub>
 8005a5c:	4991      	ldr	r1, [pc, #580]	@ (8005ca4 <__ieee754_rem_pio2f+0x2b0>)
 8005a5e:	4606      	mov	r6, r0
 8005a60:	f7fa fb82 	bl	8000168 <__aeabi_fsub>
 8005a64:	4601      	mov	r1, r0
 8005a66:	4605      	mov	r5, r0
 8005a68:	4630      	mov	r0, r6
 8005a6a:	f7fa fb7d 	bl	8000168 <__aeabi_fsub>
 8005a6e:	498d      	ldr	r1, [pc, #564]	@ (8005ca4 <__ieee754_rem_pio2f+0x2b0>)
 8005a70:	e7e8      	b.n	8005a44 <__ieee754_rem_pio2f+0x50>
 8005a72:	f7fa fb7b 	bl	800016c <__addsf3>
 8005a76:	42bd      	cmp	r5, r7
 8005a78:	4606      	mov	r6, r0
 8005a7a:	d00f      	beq.n	8005a9c <__ieee754_rem_pio2f+0xa8>
 8005a7c:	4987      	ldr	r1, [pc, #540]	@ (8005c9c <__ieee754_rem_pio2f+0x2a8>)
 8005a7e:	f7fa fb75 	bl	800016c <__addsf3>
 8005a82:	4601      	mov	r1, r0
 8005a84:	4605      	mov	r5, r0
 8005a86:	4630      	mov	r0, r6
 8005a88:	f7fa fb6e 	bl	8000168 <__aeabi_fsub>
 8005a8c:	4983      	ldr	r1, [pc, #524]	@ (8005c9c <__ieee754_rem_pio2f+0x2a8>)
 8005a8e:	f7fa fb6d 	bl	800016c <__addsf3>
 8005a92:	6025      	str	r5, [r4, #0]
 8005a94:	6060      	str	r0, [r4, #4]
 8005a96:	f04f 35ff 	mov.w	r5, #4294967295
 8005a9a:	e7d8      	b.n	8005a4e <__ieee754_rem_pio2f+0x5a>
 8005a9c:	4980      	ldr	r1, [pc, #512]	@ (8005ca0 <__ieee754_rem_pio2f+0x2ac>)
 8005a9e:	f7fa fb65 	bl	800016c <__addsf3>
 8005aa2:	4980      	ldr	r1, [pc, #512]	@ (8005ca4 <__ieee754_rem_pio2f+0x2b0>)
 8005aa4:	4606      	mov	r6, r0
 8005aa6:	f7fa fb61 	bl	800016c <__addsf3>
 8005aaa:	4601      	mov	r1, r0
 8005aac:	4605      	mov	r5, r0
 8005aae:	4630      	mov	r0, r6
 8005ab0:	f7fa fb5a 	bl	8000168 <__aeabi_fsub>
 8005ab4:	497b      	ldr	r1, [pc, #492]	@ (8005ca4 <__ieee754_rem_pio2f+0x2b0>)
 8005ab6:	e7ea      	b.n	8005a8e <__ieee754_rem_pio2f+0x9a>
 8005ab8:	4a7b      	ldr	r2, [pc, #492]	@ (8005ca8 <__ieee754_rem_pio2f+0x2b4>)
 8005aba:	4590      	cmp	r8, r2
 8005abc:	f200 8095 	bhi.w	8005bea <__ieee754_rem_pio2f+0x1f6>
 8005ac0:	f000 f8fe 	bl	8005cc0 <fabsf>
 8005ac4:	4979      	ldr	r1, [pc, #484]	@ (8005cac <__ieee754_rem_pio2f+0x2b8>)
 8005ac6:	4606      	mov	r6, r0
 8005ac8:	f7fa fc58 	bl	800037c <__aeabi_fmul>
 8005acc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005ad0:	f7fa fb4c 	bl	800016c <__addsf3>
 8005ad4:	f7fa fe2e 	bl	8000734 <__aeabi_f2iz>
 8005ad8:	4605      	mov	r5, r0
 8005ada:	f7fa fbfb 	bl	80002d4 <__aeabi_i2f>
 8005ade:	496d      	ldr	r1, [pc, #436]	@ (8005c94 <__ieee754_rem_pio2f+0x2a0>)
 8005ae0:	4681      	mov	r9, r0
 8005ae2:	f7fa fc4b 	bl	800037c <__aeabi_fmul>
 8005ae6:	4601      	mov	r1, r0
 8005ae8:	4630      	mov	r0, r6
 8005aea:	f7fa fb3d 	bl	8000168 <__aeabi_fsub>
 8005aee:	496b      	ldr	r1, [pc, #428]	@ (8005c9c <__ieee754_rem_pio2f+0x2a8>)
 8005af0:	4607      	mov	r7, r0
 8005af2:	4648      	mov	r0, r9
 8005af4:	f7fa fc42 	bl	800037c <__aeabi_fmul>
 8005af8:	2d1f      	cmp	r5, #31
 8005afa:	4606      	mov	r6, r0
 8005afc:	dc0e      	bgt.n	8005b1c <__ieee754_rem_pio2f+0x128>
 8005afe:	4a6c      	ldr	r2, [pc, #432]	@ (8005cb0 <__ieee754_rem_pio2f+0x2bc>)
 8005b00:	1e69      	subs	r1, r5, #1
 8005b02:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005b06:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 8005b0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d004      	beq.n	8005b1c <__ieee754_rem_pio2f+0x128>
 8005b12:	4631      	mov	r1, r6
 8005b14:	4638      	mov	r0, r7
 8005b16:	f7fa fb27 	bl	8000168 <__aeabi_fsub>
 8005b1a:	e00b      	b.n	8005b34 <__ieee754_rem_pio2f+0x140>
 8005b1c:	4631      	mov	r1, r6
 8005b1e:	4638      	mov	r0, r7
 8005b20:	f7fa fb22 	bl	8000168 <__aeabi_fsub>
 8005b24:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005b28:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	ea4f 5be8 	mov.w	fp, r8, asr #23
 8005b32:	dc01      	bgt.n	8005b38 <__ieee754_rem_pio2f+0x144>
 8005b34:	6020      	str	r0, [r4, #0]
 8005b36:	e026      	b.n	8005b86 <__ieee754_rem_pio2f+0x192>
 8005b38:	4959      	ldr	r1, [pc, #356]	@ (8005ca0 <__ieee754_rem_pio2f+0x2ac>)
 8005b3a:	4648      	mov	r0, r9
 8005b3c:	f7fa fc1e 	bl	800037c <__aeabi_fmul>
 8005b40:	4606      	mov	r6, r0
 8005b42:	4601      	mov	r1, r0
 8005b44:	4638      	mov	r0, r7
 8005b46:	f7fa fb0f 	bl	8000168 <__aeabi_fsub>
 8005b4a:	4601      	mov	r1, r0
 8005b4c:	4680      	mov	r8, r0
 8005b4e:	4638      	mov	r0, r7
 8005b50:	f7fa fb0a 	bl	8000168 <__aeabi_fsub>
 8005b54:	4631      	mov	r1, r6
 8005b56:	f7fa fb07 	bl	8000168 <__aeabi_fsub>
 8005b5a:	4606      	mov	r6, r0
 8005b5c:	4951      	ldr	r1, [pc, #324]	@ (8005ca4 <__ieee754_rem_pio2f+0x2b0>)
 8005b5e:	4648      	mov	r0, r9
 8005b60:	f7fa fc0c 	bl	800037c <__aeabi_fmul>
 8005b64:	4631      	mov	r1, r6
 8005b66:	f7fa faff 	bl	8000168 <__aeabi_fsub>
 8005b6a:	4601      	mov	r1, r0
 8005b6c:	4606      	mov	r6, r0
 8005b6e:	4640      	mov	r0, r8
 8005b70:	f7fa fafa 	bl	8000168 <__aeabi_fsub>
 8005b74:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005b78:	ebab 0b03 	sub.w	fp, fp, r3
 8005b7c:	f1bb 0f19 	cmp.w	fp, #25
 8005b80:	dc18      	bgt.n	8005bb4 <__ieee754_rem_pio2f+0x1c0>
 8005b82:	4647      	mov	r7, r8
 8005b84:	6020      	str	r0, [r4, #0]
 8005b86:	f8d4 8000 	ldr.w	r8, [r4]
 8005b8a:	4638      	mov	r0, r7
 8005b8c:	4641      	mov	r1, r8
 8005b8e:	f7fa faeb 	bl	8000168 <__aeabi_fsub>
 8005b92:	4631      	mov	r1, r6
 8005b94:	f7fa fae8 	bl	8000168 <__aeabi_fsub>
 8005b98:	f1ba 0f00 	cmp.w	sl, #0
 8005b9c:	6060      	str	r0, [r4, #4]
 8005b9e:	f6bf af56 	bge.w	8005a4e <__ieee754_rem_pio2f+0x5a>
 8005ba2:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 8005ba6:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8005baa:	f8c4 8000 	str.w	r8, [r4]
 8005bae:	6060      	str	r0, [r4, #4]
 8005bb0:	426d      	negs	r5, r5
 8005bb2:	e74c      	b.n	8005a4e <__ieee754_rem_pio2f+0x5a>
 8005bb4:	493f      	ldr	r1, [pc, #252]	@ (8005cb4 <__ieee754_rem_pio2f+0x2c0>)
 8005bb6:	4648      	mov	r0, r9
 8005bb8:	f7fa fbe0 	bl	800037c <__aeabi_fmul>
 8005bbc:	4606      	mov	r6, r0
 8005bbe:	4601      	mov	r1, r0
 8005bc0:	4640      	mov	r0, r8
 8005bc2:	f7fa fad1 	bl	8000168 <__aeabi_fsub>
 8005bc6:	4601      	mov	r1, r0
 8005bc8:	4607      	mov	r7, r0
 8005bca:	4640      	mov	r0, r8
 8005bcc:	f7fa facc 	bl	8000168 <__aeabi_fsub>
 8005bd0:	4631      	mov	r1, r6
 8005bd2:	f7fa fac9 	bl	8000168 <__aeabi_fsub>
 8005bd6:	4606      	mov	r6, r0
 8005bd8:	4937      	ldr	r1, [pc, #220]	@ (8005cb8 <__ieee754_rem_pio2f+0x2c4>)
 8005bda:	4648      	mov	r0, r9
 8005bdc:	f7fa fbce 	bl	800037c <__aeabi_fmul>
 8005be0:	4631      	mov	r1, r6
 8005be2:	f7fa fac1 	bl	8000168 <__aeabi_fsub>
 8005be6:	4606      	mov	r6, r0
 8005be8:	e793      	b.n	8005b12 <__ieee754_rem_pio2f+0x11e>
 8005bea:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8005bee:	d305      	bcc.n	8005bfc <__ieee754_rem_pio2f+0x208>
 8005bf0:	4601      	mov	r1, r0
 8005bf2:	f7fa fab9 	bl	8000168 <__aeabi_fsub>
 8005bf6:	6060      	str	r0, [r4, #4]
 8005bf8:	6020      	str	r0, [r4, #0]
 8005bfa:	e708      	b.n	8005a0e <__ieee754_rem_pio2f+0x1a>
 8005bfc:	ea4f 56e8 	mov.w	r6, r8, asr #23
 8005c00:	3e86      	subs	r6, #134	@ 0x86
 8005c02:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 8005c06:	4640      	mov	r0, r8
 8005c08:	f7fa fd94 	bl	8000734 <__aeabi_f2iz>
 8005c0c:	f7fa fb62 	bl	80002d4 <__aeabi_i2f>
 8005c10:	4601      	mov	r1, r0
 8005c12:	9003      	str	r0, [sp, #12]
 8005c14:	4640      	mov	r0, r8
 8005c16:	f7fa faa7 	bl	8000168 <__aeabi_fsub>
 8005c1a:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8005c1e:	f7fa fbad 	bl	800037c <__aeabi_fmul>
 8005c22:	4607      	mov	r7, r0
 8005c24:	f7fa fd86 	bl	8000734 <__aeabi_f2iz>
 8005c28:	f7fa fb54 	bl	80002d4 <__aeabi_i2f>
 8005c2c:	4601      	mov	r1, r0
 8005c2e:	9004      	str	r0, [sp, #16]
 8005c30:	4605      	mov	r5, r0
 8005c32:	4638      	mov	r0, r7
 8005c34:	f7fa fa98 	bl	8000168 <__aeabi_fsub>
 8005c38:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8005c3c:	f7fa fb9e 	bl	800037c <__aeabi_fmul>
 8005c40:	2100      	movs	r1, #0
 8005c42:	9005      	str	r0, [sp, #20]
 8005c44:	f7fa fd2e 	bl	80006a4 <__aeabi_fcmpeq>
 8005c48:	b1f0      	cbz	r0, 8005c88 <__ieee754_rem_pio2f+0x294>
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	f7fa fd29 	bl	80006a4 <__aeabi_fcmpeq>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	bf14      	ite	ne
 8005c56:	2301      	movne	r3, #1
 8005c58:	2302      	moveq	r3, #2
 8005c5a:	4a18      	ldr	r2, [pc, #96]	@ (8005cbc <__ieee754_rem_pio2f+0x2c8>)
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	9201      	str	r2, [sp, #4]
 8005c60:	2202      	movs	r2, #2
 8005c62:	a803      	add	r0, sp, #12
 8005c64:	9200      	str	r2, [sp, #0]
 8005c66:	4632      	mov	r2, r6
 8005c68:	f000 f898 	bl	8005d9c <__kernel_rem_pio2f>
 8005c6c:	f1ba 0f00 	cmp.w	sl, #0
 8005c70:	4605      	mov	r5, r0
 8005c72:	f6bf aeec 	bge.w	8005a4e <__ieee754_rem_pio2f+0x5a>
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	6863      	ldr	r3, [r4, #4]
 8005c80:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005c84:	6063      	str	r3, [r4, #4]
 8005c86:	e793      	b.n	8005bb0 <__ieee754_rem_pio2f+0x1bc>
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e7e6      	b.n	8005c5a <__ieee754_rem_pio2f+0x266>
 8005c8c:	3f490fd8 	.word	0x3f490fd8
 8005c90:	4016cbe3 	.word	0x4016cbe3
 8005c94:	3fc90f80 	.word	0x3fc90f80
 8005c98:	3fc90fd0 	.word	0x3fc90fd0
 8005c9c:	37354443 	.word	0x37354443
 8005ca0:	37354400 	.word	0x37354400
 8005ca4:	2e85a308 	.word	0x2e85a308
 8005ca8:	43490f80 	.word	0x43490f80
 8005cac:	3f22f984 	.word	0x3f22f984
 8005cb0:	080063d0 	.word	0x080063d0
 8005cb4:	2e85a300 	.word	0x2e85a300
 8005cb8:	248d3132 	.word	0x248d3132
 8005cbc:	08006450 	.word	0x08006450

08005cc0 <fabsf>:
 8005cc0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005cc4:	4770      	bx	lr
	...

08005cc8 <scalbnf>:
 8005cc8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8005ccc:	b538      	push	{r3, r4, r5, lr}
 8005cce:	4603      	mov	r3, r0
 8005cd0:	460d      	mov	r5, r1
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	d02e      	beq.n	8005d34 <scalbnf+0x6c>
 8005cd6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8005cda:	d304      	bcc.n	8005ce6 <scalbnf+0x1e>
 8005cdc:	4601      	mov	r1, r0
 8005cde:	f7fa fa45 	bl	800016c <__addsf3>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	e026      	b.n	8005d34 <scalbnf+0x6c>
 8005ce6:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8005cea:	d118      	bne.n	8005d1e <scalbnf+0x56>
 8005cec:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8005cf0:	f7fa fb44 	bl	800037c <__aeabi_fmul>
 8005cf4:	4a17      	ldr	r2, [pc, #92]	@ (8005d54 <scalbnf+0x8c>)
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	4295      	cmp	r5, r2
 8005cfa:	db0c      	blt.n	8005d16 <scalbnf+0x4e>
 8005cfc:	4604      	mov	r4, r0
 8005cfe:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8005d02:	3a19      	subs	r2, #25
 8005d04:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8005d08:	428d      	cmp	r5, r1
 8005d0a:	dd0a      	ble.n	8005d22 <scalbnf+0x5a>
 8005d0c:	4912      	ldr	r1, [pc, #72]	@ (8005d58 <scalbnf+0x90>)
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f361 001e 	bfi	r0, r1, #0, #31
 8005d14:	e000      	b.n	8005d18 <scalbnf+0x50>
 8005d16:	4911      	ldr	r1, [pc, #68]	@ (8005d5c <scalbnf+0x94>)
 8005d18:	f7fa fb30 	bl	800037c <__aeabi_fmul>
 8005d1c:	e7e1      	b.n	8005ce2 <scalbnf+0x1a>
 8005d1e:	0dd2      	lsrs	r2, r2, #23
 8005d20:	e7f0      	b.n	8005d04 <scalbnf+0x3c>
 8005d22:	1951      	adds	r1, r2, r5
 8005d24:	29fe      	cmp	r1, #254	@ 0xfe
 8005d26:	dcf1      	bgt.n	8005d0c <scalbnf+0x44>
 8005d28:	2900      	cmp	r1, #0
 8005d2a:	dd05      	ble.n	8005d38 <scalbnf+0x70>
 8005d2c:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8005d30:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8005d34:	4618      	mov	r0, r3
 8005d36:	bd38      	pop	{r3, r4, r5, pc}
 8005d38:	f111 0f16 	cmn.w	r1, #22
 8005d3c:	da01      	bge.n	8005d42 <scalbnf+0x7a>
 8005d3e:	4907      	ldr	r1, [pc, #28]	@ (8005d5c <scalbnf+0x94>)
 8005d40:	e7e5      	b.n	8005d0e <scalbnf+0x46>
 8005d42:	f101 0019 	add.w	r0, r1, #25
 8005d46:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8005d4a:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8005d4e:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8005d52:	e7e1      	b.n	8005d18 <scalbnf+0x50>
 8005d54:	ffff3cb0 	.word	0xffff3cb0
 8005d58:	7149f2ca 	.word	0x7149f2ca
 8005d5c:	0da24260 	.word	0x0da24260

08005d60 <with_errnof>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	4604      	mov	r4, r0
 8005d64:	460d      	mov	r5, r1
 8005d66:	f7ff f865 	bl	8004e34 <__errno>
 8005d6a:	6005      	str	r5, [r0, #0]
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	bd38      	pop	{r3, r4, r5, pc}

08005d70 <xflowf>:
 8005d70:	b508      	push	{r3, lr}
 8005d72:	b140      	cbz	r0, 8005d86 <xflowf+0x16>
 8005d74:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8005d78:	f7fa fb00 	bl	800037c <__aeabi_fmul>
 8005d7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005d80:	2122      	movs	r1, #34	@ 0x22
 8005d82:	f7ff bfed 	b.w	8005d60 <with_errnof>
 8005d86:	4608      	mov	r0, r1
 8005d88:	e7f6      	b.n	8005d78 <xflowf+0x8>

08005d8a <__math_uflowf>:
 8005d8a:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8005d8e:	f7ff bfef 	b.w	8005d70 <xflowf>

08005d92 <__math_oflowf>:
 8005d92:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8005d96:	f7ff bfeb 	b.w	8005d70 <xflowf>
	...

08005d9c <__kernel_rem_pio2f>:
 8005d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da0:	b0db      	sub	sp, #364	@ 0x16c
 8005da2:	9202      	str	r2, [sp, #8]
 8005da4:	9304      	str	r3, [sp, #16]
 8005da6:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8005da8:	4bac      	ldr	r3, [pc, #688]	@ (800605c <__kernel_rem_pio2f+0x2c0>)
 8005daa:	9005      	str	r0, [sp, #20]
 8005dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db0:	9100      	str	r1, [sp, #0]
 8005db2:	9301      	str	r3, [sp, #4]
 8005db4:	9b04      	ldr	r3, [sp, #16]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	9303      	str	r3, [sp, #12]
 8005dba:	9b02      	ldr	r3, [sp, #8]
 8005dbc:	1d1a      	adds	r2, r3, #4
 8005dbe:	f2c0 8099 	blt.w	8005ef4 <__kernel_rem_pio2f+0x158>
 8005dc2:	1edc      	subs	r4, r3, #3
 8005dc4:	bf48      	it	mi
 8005dc6:	1d1c      	addmi	r4, r3, #4
 8005dc8:	10e4      	asrs	r4, r4, #3
 8005dca:	2500      	movs	r5, #0
 8005dcc:	f04f 0b00 	mov.w	fp, #0
 8005dd0:	1c67      	adds	r7, r4, #1
 8005dd2:	00fb      	lsls	r3, r7, #3
 8005dd4:	9306      	str	r3, [sp, #24]
 8005dd6:	9b02      	ldr	r3, [sp, #8]
 8005dd8:	9a03      	ldr	r2, [sp, #12]
 8005dda:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8005dde:	9b01      	ldr	r3, [sp, #4]
 8005de0:	eba4 0802 	sub.w	r8, r4, r2
 8005de4:	eb03 0902 	add.w	r9, r3, r2
 8005de8:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8005dea:	ae1e      	add	r6, sp, #120	@ 0x78
 8005dec:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8005df0:	454d      	cmp	r5, r9
 8005df2:	f340 8081 	ble.w	8005ef8 <__kernel_rem_pio2f+0x15c>
 8005df6:	9a04      	ldr	r2, [sp, #16]
 8005df8:	ab1e      	add	r3, sp, #120	@ 0x78
 8005dfa:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8005dfe:	f04f 0900 	mov.w	r9, #0
 8005e02:	2300      	movs	r3, #0
 8005e04:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8005e08:	9a01      	ldr	r2, [sp, #4]
 8005e0a:	4591      	cmp	r9, r2
 8005e0c:	f340 809a 	ble.w	8005f44 <__kernel_rem_pio2f+0x1a8>
 8005e10:	4613      	mov	r3, r2
 8005e12:	aa0a      	add	r2, sp, #40	@ 0x28
 8005e14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005e18:	9308      	str	r3, [sp, #32]
 8005e1a:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8005e1c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005e20:	9c01      	ldr	r4, [sp, #4]
 8005e22:	9307      	str	r3, [sp, #28]
 8005e24:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8005e28:	4646      	mov	r6, r8
 8005e2a:	4625      	mov	r5, r4
 8005e2c:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 8005e30:	ab5a      	add	r3, sp, #360	@ 0x168
 8005e32:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005e36:	f853 bc50 	ldr.w	fp, [r3, #-80]
 8005e3a:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8005e3e:	2d00      	cmp	r5, #0
 8005e40:	f300 8085 	bgt.w	8005f4e <__kernel_rem_pio2f+0x1b2>
 8005e44:	4639      	mov	r1, r7
 8005e46:	4658      	mov	r0, fp
 8005e48:	f7ff ff3e 	bl	8005cc8 <scalbnf>
 8005e4c:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8005e50:	4605      	mov	r5, r0
 8005e52:	f7fa fa93 	bl	800037c <__aeabi_fmul>
 8005e56:	f000 fa3f 	bl	80062d8 <floorf>
 8005e5a:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8005e5e:	f7fa fa8d 	bl	800037c <__aeabi_fmul>
 8005e62:	4601      	mov	r1, r0
 8005e64:	4628      	mov	r0, r5
 8005e66:	f7fa f97f 	bl	8000168 <__aeabi_fsub>
 8005e6a:	4605      	mov	r5, r0
 8005e6c:	f7fa fc62 	bl	8000734 <__aeabi_f2iz>
 8005e70:	4606      	mov	r6, r0
 8005e72:	f7fa fa2f 	bl	80002d4 <__aeabi_i2f>
 8005e76:	4601      	mov	r1, r0
 8005e78:	4628      	mov	r0, r5
 8005e7a:	f7fa f975 	bl	8000168 <__aeabi_fsub>
 8005e7e:	2f00      	cmp	r7, #0
 8005e80:	4681      	mov	r9, r0
 8005e82:	f340 8081 	ble.w	8005f88 <__kernel_rem_pio2f+0x1ec>
 8005e86:	1e62      	subs	r2, r4, #1
 8005e88:	ab0a      	add	r3, sp, #40	@ 0x28
 8005e8a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8005e8e:	f1c7 0108 	rsb	r1, r7, #8
 8005e92:	fa45 f301 	asr.w	r3, r5, r1
 8005e96:	441e      	add	r6, r3
 8005e98:	408b      	lsls	r3, r1
 8005e9a:	1aed      	subs	r5, r5, r3
 8005e9c:	ab0a      	add	r3, sp, #40	@ 0x28
 8005e9e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005ea2:	f1c7 0307 	rsb	r3, r7, #7
 8005ea6:	411d      	asrs	r5, r3
 8005ea8:	2d00      	cmp	r5, #0
 8005eaa:	dd7a      	ble.n	8005fa2 <__kernel_rem_pio2f+0x206>
 8005eac:	2200      	movs	r2, #0
 8005eae:	4692      	mov	sl, r2
 8005eb0:	3601      	adds	r6, #1
 8005eb2:	4294      	cmp	r4, r2
 8005eb4:	f300 80aa 	bgt.w	800600c <__kernel_rem_pio2f+0x270>
 8005eb8:	2f00      	cmp	r7, #0
 8005eba:	dd05      	ble.n	8005ec8 <__kernel_rem_pio2f+0x12c>
 8005ebc:	2f01      	cmp	r7, #1
 8005ebe:	f000 80b6 	beq.w	800602e <__kernel_rem_pio2f+0x292>
 8005ec2:	2f02      	cmp	r7, #2
 8005ec4:	f000 80bd 	beq.w	8006042 <__kernel_rem_pio2f+0x2a6>
 8005ec8:	2d02      	cmp	r5, #2
 8005eca:	d16a      	bne.n	8005fa2 <__kernel_rem_pio2f+0x206>
 8005ecc:	4649      	mov	r1, r9
 8005ece:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005ed2:	f7fa f949 	bl	8000168 <__aeabi_fsub>
 8005ed6:	4681      	mov	r9, r0
 8005ed8:	f1ba 0f00 	cmp.w	sl, #0
 8005edc:	d061      	beq.n	8005fa2 <__kernel_rem_pio2f+0x206>
 8005ede:	4639      	mov	r1, r7
 8005ee0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005ee4:	f7ff fef0 	bl	8005cc8 <scalbnf>
 8005ee8:	4601      	mov	r1, r0
 8005eea:	4648      	mov	r0, r9
 8005eec:	f7fa f93c 	bl	8000168 <__aeabi_fsub>
 8005ef0:	4681      	mov	r9, r0
 8005ef2:	e056      	b.n	8005fa2 <__kernel_rem_pio2f+0x206>
 8005ef4:	2400      	movs	r4, #0
 8005ef6:	e768      	b.n	8005dca <__kernel_rem_pio2f+0x2e>
 8005ef8:	eb18 0f05 	cmn.w	r8, r5
 8005efc:	d407      	bmi.n	8005f0e <__kernel_rem_pio2f+0x172>
 8005efe:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8005f02:	f7fa f9e7 	bl	80002d4 <__aeabi_i2f>
 8005f06:	f846 0b04 	str.w	r0, [r6], #4
 8005f0a:	3501      	adds	r5, #1
 8005f0c:	e770      	b.n	8005df0 <__kernel_rem_pio2f+0x54>
 8005f0e:	4658      	mov	r0, fp
 8005f10:	e7f9      	b.n	8005f06 <__kernel_rem_pio2f+0x16a>
 8005f12:	9307      	str	r3, [sp, #28]
 8005f14:	9b05      	ldr	r3, [sp, #20]
 8005f16:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 8005f1a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005f1e:	f7fa fa2d 	bl	800037c <__aeabi_fmul>
 8005f22:	4601      	mov	r1, r0
 8005f24:	4630      	mov	r0, r6
 8005f26:	f7fa f921 	bl	800016c <__addsf3>
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	9b07      	ldr	r3, [sp, #28]
 8005f2e:	f108 0801 	add.w	r8, r8, #1
 8005f32:	9a03      	ldr	r2, [sp, #12]
 8005f34:	4590      	cmp	r8, r2
 8005f36:	ddec      	ble.n	8005f12 <__kernel_rem_pio2f+0x176>
 8005f38:	f84a 6b04 	str.w	r6, [sl], #4
 8005f3c:	f109 0901 	add.w	r9, r9, #1
 8005f40:	3504      	adds	r5, #4
 8005f42:	e761      	b.n	8005e08 <__kernel_rem_pio2f+0x6c>
 8005f44:	46ab      	mov	fp, r5
 8005f46:	461e      	mov	r6, r3
 8005f48:	f04f 0800 	mov.w	r8, #0
 8005f4c:	e7f1      	b.n	8005f32 <__kernel_rem_pio2f+0x196>
 8005f4e:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8005f52:	4658      	mov	r0, fp
 8005f54:	f7fa fa12 	bl	800037c <__aeabi_fmul>
 8005f58:	f7fa fbec 	bl	8000734 <__aeabi_f2iz>
 8005f5c:	f7fa f9ba 	bl	80002d4 <__aeabi_i2f>
 8005f60:	4649      	mov	r1, r9
 8005f62:	9009      	str	r0, [sp, #36]	@ 0x24
 8005f64:	f7fa fa0a 	bl	800037c <__aeabi_fmul>
 8005f68:	4601      	mov	r1, r0
 8005f6a:	4658      	mov	r0, fp
 8005f6c:	f7fa f8fc 	bl	8000168 <__aeabi_fsub>
 8005f70:	f7fa fbe0 	bl	8000734 <__aeabi_f2iz>
 8005f74:	3d01      	subs	r5, #1
 8005f76:	f846 0b04 	str.w	r0, [r6], #4
 8005f7a:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 8005f7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f80:	f7fa f8f4 	bl	800016c <__addsf3>
 8005f84:	4683      	mov	fp, r0
 8005f86:	e75a      	b.n	8005e3e <__kernel_rem_pio2f+0xa2>
 8005f88:	d105      	bne.n	8005f96 <__kernel_rem_pio2f+0x1fa>
 8005f8a:	1e63      	subs	r3, r4, #1
 8005f8c:	aa0a      	add	r2, sp, #40	@ 0x28
 8005f8e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8005f92:	11ed      	asrs	r5, r5, #7
 8005f94:	e788      	b.n	8005ea8 <__kernel_rem_pio2f+0x10c>
 8005f96:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005f9a:	f7fa fba1 	bl	80006e0 <__aeabi_fcmpge>
 8005f9e:	4605      	mov	r5, r0
 8005fa0:	bb90      	cbnz	r0, 8006008 <__kernel_rem_pio2f+0x26c>
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	4648      	mov	r0, r9
 8005fa6:	f7fa fb7d 	bl	80006a4 <__aeabi_fcmpeq>
 8005faa:	2800      	cmp	r0, #0
 8005fac:	f000 8090 	beq.w	80060d0 <__kernel_rem_pio2f+0x334>
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	1e63      	subs	r3, r4, #1
 8005fb4:	9901      	ldr	r1, [sp, #4]
 8005fb6:	428b      	cmp	r3, r1
 8005fb8:	da4a      	bge.n	8006050 <__kernel_rem_pio2f+0x2b4>
 8005fba:	2a00      	cmp	r2, #0
 8005fbc:	d076      	beq.n	80060ac <__kernel_rem_pio2f+0x310>
 8005fbe:	3c01      	subs	r4, #1
 8005fc0:	ab0a      	add	r3, sp, #40	@ 0x28
 8005fc2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005fc6:	3f08      	subs	r7, #8
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0f8      	beq.n	8005fbe <__kernel_rem_pio2f+0x222>
 8005fcc:	4639      	mov	r1, r7
 8005fce:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005fd2:	f7ff fe79 	bl	8005cc8 <scalbnf>
 8005fd6:	46a2      	mov	sl, r4
 8005fd8:	4607      	mov	r7, r0
 8005fda:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 8005fde:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 8005fe2:	f1ba 0f00 	cmp.w	sl, #0
 8005fe6:	f280 80a1 	bge.w	800612c <__kernel_rem_pio2f+0x390>
 8005fea:	4627      	mov	r7, r4
 8005fec:	2200      	movs	r2, #0
 8005fee:	2f00      	cmp	r7, #0
 8005ff0:	f2c0 80cb 	blt.w	800618a <__kernel_rem_pio2f+0x3ee>
 8005ff4:	a946      	add	r1, sp, #280	@ 0x118
 8005ff6:	4690      	mov	r8, r2
 8005ff8:	f04f 0a00 	mov.w	sl, #0
 8005ffc:	4b18      	ldr	r3, [pc, #96]	@ (8006060 <__kernel_rem_pio2f+0x2c4>)
 8005ffe:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8006002:	eba4 0907 	sub.w	r9, r4, r7
 8006006:	e0b4      	b.n	8006172 <__kernel_rem_pio2f+0x3d6>
 8006008:	2502      	movs	r5, #2
 800600a:	e74f      	b.n	8005eac <__kernel_rem_pio2f+0x110>
 800600c:	f858 3b04 	ldr.w	r3, [r8], #4
 8006010:	f1ba 0f00 	cmp.w	sl, #0
 8006014:	d108      	bne.n	8006028 <__kernel_rem_pio2f+0x28c>
 8006016:	b123      	cbz	r3, 8006022 <__kernel_rem_pio2f+0x286>
 8006018:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800601c:	f848 3c04 	str.w	r3, [r8, #-4]
 8006020:	2301      	movs	r3, #1
 8006022:	469a      	mov	sl, r3
 8006024:	3201      	adds	r2, #1
 8006026:	e744      	b.n	8005eb2 <__kernel_rem_pio2f+0x116>
 8006028:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800602c:	e7f6      	b.n	800601c <__kernel_rem_pio2f+0x280>
 800602e:	1e62      	subs	r2, r4, #1
 8006030:	ab0a      	add	r3, sp, #40	@ 0x28
 8006032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006036:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800603a:	a90a      	add	r1, sp, #40	@ 0x28
 800603c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006040:	e742      	b.n	8005ec8 <__kernel_rem_pio2f+0x12c>
 8006042:	1e62      	subs	r2, r4, #1
 8006044:	ab0a      	add	r3, sp, #40	@ 0x28
 8006046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800604a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800604e:	e7f4      	b.n	800603a <__kernel_rem_pio2f+0x29e>
 8006050:	a90a      	add	r1, sp, #40	@ 0x28
 8006052:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006056:	3b01      	subs	r3, #1
 8006058:	430a      	orrs	r2, r1
 800605a:	e7ab      	b.n	8005fb4 <__kernel_rem_pio2f+0x218>
 800605c:	08006794 	.word	0x08006794
 8006060:	08006768 	.word	0x08006768
 8006064:	3301      	adds	r3, #1
 8006066:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800606a:	2900      	cmp	r1, #0
 800606c:	d0fa      	beq.n	8006064 <__kernel_rem_pio2f+0x2c8>
 800606e:	9a04      	ldr	r2, [sp, #16]
 8006070:	a91e      	add	r1, sp, #120	@ 0x78
 8006072:	18a2      	adds	r2, r4, r2
 8006074:	1c66      	adds	r6, r4, #1
 8006076:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800607a:	441c      	add	r4, r3
 800607c:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 8006080:	42b4      	cmp	r4, r6
 8006082:	f6ff aecf 	blt.w	8005e24 <__kernel_rem_pio2f+0x88>
 8006086:	9b07      	ldr	r3, [sp, #28]
 8006088:	46ab      	mov	fp, r5
 800608a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800608e:	f7fa f921 	bl	80002d4 <__aeabi_i2f>
 8006092:	f04f 0a00 	mov.w	sl, #0
 8006096:	f04f 0800 	mov.w	r8, #0
 800609a:	6028      	str	r0, [r5, #0]
 800609c:	9b03      	ldr	r3, [sp, #12]
 800609e:	459a      	cmp	sl, r3
 80060a0:	dd07      	ble.n	80060b2 <__kernel_rem_pio2f+0x316>
 80060a2:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 80060a6:	3504      	adds	r5, #4
 80060a8:	3601      	adds	r6, #1
 80060aa:	e7e9      	b.n	8006080 <__kernel_rem_pio2f+0x2e4>
 80060ac:	2301      	movs	r3, #1
 80060ae:	9a08      	ldr	r2, [sp, #32]
 80060b0:	e7d9      	b.n	8006066 <__kernel_rem_pio2f+0x2ca>
 80060b2:	9b05      	ldr	r3, [sp, #20]
 80060b4:	f85b 0904 	ldr.w	r0, [fp], #-4
 80060b8:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 80060bc:	f7fa f95e 	bl	800037c <__aeabi_fmul>
 80060c0:	4601      	mov	r1, r0
 80060c2:	4640      	mov	r0, r8
 80060c4:	f7fa f852 	bl	800016c <__addsf3>
 80060c8:	f10a 0a01 	add.w	sl, sl, #1
 80060cc:	4680      	mov	r8, r0
 80060ce:	e7e5      	b.n	800609c <__kernel_rem_pio2f+0x300>
 80060d0:	9b06      	ldr	r3, [sp, #24]
 80060d2:	9a02      	ldr	r2, [sp, #8]
 80060d4:	4648      	mov	r0, r9
 80060d6:	1a99      	subs	r1, r3, r2
 80060d8:	f7ff fdf6 	bl	8005cc8 <scalbnf>
 80060dc:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80060e0:	4680      	mov	r8, r0
 80060e2:	f7fa fafd 	bl	80006e0 <__aeabi_fcmpge>
 80060e6:	b1f8      	cbz	r0, 8006128 <__kernel_rem_pio2f+0x38c>
 80060e8:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 80060ec:	4640      	mov	r0, r8
 80060ee:	f7fa f945 	bl	800037c <__aeabi_fmul>
 80060f2:	f7fa fb1f 	bl	8000734 <__aeabi_f2iz>
 80060f6:	f7fa f8ed 	bl	80002d4 <__aeabi_i2f>
 80060fa:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80060fe:	4681      	mov	r9, r0
 8006100:	f7fa f93c 	bl	800037c <__aeabi_fmul>
 8006104:	4601      	mov	r1, r0
 8006106:	4640      	mov	r0, r8
 8006108:	f7fa f82e 	bl	8000168 <__aeabi_fsub>
 800610c:	f7fa fb12 	bl	8000734 <__aeabi_f2iz>
 8006110:	ab0a      	add	r3, sp, #40	@ 0x28
 8006112:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006116:	4648      	mov	r0, r9
 8006118:	3401      	adds	r4, #1
 800611a:	3708      	adds	r7, #8
 800611c:	f7fa fb0a 	bl	8000734 <__aeabi_f2iz>
 8006120:	ab0a      	add	r3, sp, #40	@ 0x28
 8006122:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006126:	e751      	b.n	8005fcc <__kernel_rem_pio2f+0x230>
 8006128:	4640      	mov	r0, r8
 800612a:	e7f7      	b.n	800611c <__kernel_rem_pio2f+0x380>
 800612c:	ab0a      	add	r3, sp, #40	@ 0x28
 800612e:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006132:	f7fa f8cf 	bl	80002d4 <__aeabi_i2f>
 8006136:	4639      	mov	r1, r7
 8006138:	f7fa f920 	bl	800037c <__aeabi_fmul>
 800613c:	4649      	mov	r1, r9
 800613e:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 8006142:	4638      	mov	r0, r7
 8006144:	f7fa f91a 	bl	800037c <__aeabi_fmul>
 8006148:	f10a 3aff 	add.w	sl, sl, #4294967295
 800614c:	4607      	mov	r7, r0
 800614e:	e748      	b.n	8005fe2 <__kernel_rem_pio2f+0x246>
 8006150:	f853 0b04 	ldr.w	r0, [r3], #4
 8006154:	f85b 1b04 	ldr.w	r1, [fp], #4
 8006158:	9203      	str	r2, [sp, #12]
 800615a:	9302      	str	r3, [sp, #8]
 800615c:	f7fa f90e 	bl	800037c <__aeabi_fmul>
 8006160:	4601      	mov	r1, r0
 8006162:	4640      	mov	r0, r8
 8006164:	f7fa f802 	bl	800016c <__addsf3>
 8006168:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800616c:	4680      	mov	r8, r0
 800616e:	f10a 0a01 	add.w	sl, sl, #1
 8006172:	9901      	ldr	r1, [sp, #4]
 8006174:	458a      	cmp	sl, r1
 8006176:	dc01      	bgt.n	800617c <__kernel_rem_pio2f+0x3e0>
 8006178:	45ca      	cmp	sl, r9
 800617a:	dde9      	ble.n	8006150 <__kernel_rem_pio2f+0x3b4>
 800617c:	ab5a      	add	r3, sp, #360	@ 0x168
 800617e:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8006182:	f849 8ca0 	str.w	r8, [r9, #-160]
 8006186:	3f01      	subs	r7, #1
 8006188:	e731      	b.n	8005fee <__kernel_rem_pio2f+0x252>
 800618a:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800618c:	2b02      	cmp	r3, #2
 800618e:	dc07      	bgt.n	80061a0 <__kernel_rem_pio2f+0x404>
 8006190:	2b00      	cmp	r3, #0
 8006192:	dc4e      	bgt.n	8006232 <__kernel_rem_pio2f+0x496>
 8006194:	d02e      	beq.n	80061f4 <__kernel_rem_pio2f+0x458>
 8006196:	f006 0007 	and.w	r0, r6, #7
 800619a:	b05b      	add	sp, #364	@ 0x16c
 800619c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80061a2:	2b03      	cmp	r3, #3
 80061a4:	d1f7      	bne.n	8006196 <__kernel_rem_pio2f+0x3fa>
 80061a6:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 80061aa:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 80061ae:	46b8      	mov	r8, r7
 80061b0:	46a2      	mov	sl, r4
 80061b2:	f1ba 0f00 	cmp.w	sl, #0
 80061b6:	dc49      	bgt.n	800624c <__kernel_rem_pio2f+0x4b0>
 80061b8:	46a1      	mov	r9, r4
 80061ba:	f1b9 0f01 	cmp.w	r9, #1
 80061be:	dc60      	bgt.n	8006282 <__kernel_rem_pio2f+0x4e6>
 80061c0:	2000      	movs	r0, #0
 80061c2:	2c01      	cmp	r4, #1
 80061c4:	dc76      	bgt.n	80062b4 <__kernel_rem_pio2f+0x518>
 80061c6:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 80061c8:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 80061ca:	2d00      	cmp	r5, #0
 80061cc:	d178      	bne.n	80062c0 <__kernel_rem_pio2f+0x524>
 80061ce:	9900      	ldr	r1, [sp, #0]
 80061d0:	600a      	str	r2, [r1, #0]
 80061d2:	460a      	mov	r2, r1
 80061d4:	604b      	str	r3, [r1, #4]
 80061d6:	6090      	str	r0, [r2, #8]
 80061d8:	e7dd      	b.n	8006196 <__kernel_rem_pio2f+0x3fa>
 80061da:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 80061de:	f7f9 ffc5 	bl	800016c <__addsf3>
 80061e2:	3c01      	subs	r4, #1
 80061e4:	2c00      	cmp	r4, #0
 80061e6:	daf8      	bge.n	80061da <__kernel_rem_pio2f+0x43e>
 80061e8:	b10d      	cbz	r5, 80061ee <__kernel_rem_pio2f+0x452>
 80061ea:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80061ee:	9b00      	ldr	r3, [sp, #0]
 80061f0:	6018      	str	r0, [r3, #0]
 80061f2:	e7d0      	b.n	8006196 <__kernel_rem_pio2f+0x3fa>
 80061f4:	2000      	movs	r0, #0
 80061f6:	af32      	add	r7, sp, #200	@ 0xc8
 80061f8:	e7f4      	b.n	80061e4 <__kernel_rem_pio2f+0x448>
 80061fa:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 80061fe:	f7f9 ffb5 	bl	800016c <__addsf3>
 8006202:	f108 38ff 	add.w	r8, r8, #4294967295
 8006206:	f1b8 0f00 	cmp.w	r8, #0
 800620a:	daf6      	bge.n	80061fa <__kernel_rem_pio2f+0x45e>
 800620c:	b1ad      	cbz	r5, 800623a <__kernel_rem_pio2f+0x49e>
 800620e:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 8006212:	9a00      	ldr	r2, [sp, #0]
 8006214:	4601      	mov	r1, r0
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800621a:	f7f9 ffa5 	bl	8000168 <__aeabi_fsub>
 800621e:	f04f 0801 	mov.w	r8, #1
 8006222:	4544      	cmp	r4, r8
 8006224:	da0b      	bge.n	800623e <__kernel_rem_pio2f+0x4a2>
 8006226:	b10d      	cbz	r5, 800622c <__kernel_rem_pio2f+0x490>
 8006228:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800622c:	9b00      	ldr	r3, [sp, #0]
 800622e:	6058      	str	r0, [r3, #4]
 8006230:	e7b1      	b.n	8006196 <__kernel_rem_pio2f+0x3fa>
 8006232:	46a0      	mov	r8, r4
 8006234:	2000      	movs	r0, #0
 8006236:	af32      	add	r7, sp, #200	@ 0xc8
 8006238:	e7e5      	b.n	8006206 <__kernel_rem_pio2f+0x46a>
 800623a:	4603      	mov	r3, r0
 800623c:	e7e9      	b.n	8006212 <__kernel_rem_pio2f+0x476>
 800623e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8006242:	f7f9 ff93 	bl	800016c <__addsf3>
 8006246:	f108 0801 	add.w	r8, r8, #1
 800624a:	e7ea      	b.n	8006222 <__kernel_rem_pio2f+0x486>
 800624c:	f8d8 3000 	ldr.w	r3, [r8]
 8006250:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8006254:	4619      	mov	r1, r3
 8006256:	4610      	mov	r0, r2
 8006258:	9302      	str	r3, [sp, #8]
 800625a:	9201      	str	r2, [sp, #4]
 800625c:	f7f9 ff86 	bl	800016c <__addsf3>
 8006260:	9a01      	ldr	r2, [sp, #4]
 8006262:	4601      	mov	r1, r0
 8006264:	4681      	mov	r9, r0
 8006266:	4610      	mov	r0, r2
 8006268:	f7f9 ff7e 	bl	8000168 <__aeabi_fsub>
 800626c:	9b02      	ldr	r3, [sp, #8]
 800626e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006272:	4619      	mov	r1, r3
 8006274:	f7f9 ff7a 	bl	800016c <__addsf3>
 8006278:	f848 0904 	str.w	r0, [r8], #-4
 800627c:	f8c8 9000 	str.w	r9, [r8]
 8006280:	e797      	b.n	80061b2 <__kernel_rem_pio2f+0x416>
 8006282:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8006286:	f8d7 a000 	ldr.w	sl, [r7]
 800628a:	4618      	mov	r0, r3
 800628c:	4651      	mov	r1, sl
 800628e:	9301      	str	r3, [sp, #4]
 8006290:	f7f9 ff6c 	bl	800016c <__addsf3>
 8006294:	9b01      	ldr	r3, [sp, #4]
 8006296:	4601      	mov	r1, r0
 8006298:	4680      	mov	r8, r0
 800629a:	4618      	mov	r0, r3
 800629c:	f7f9 ff64 	bl	8000168 <__aeabi_fsub>
 80062a0:	4651      	mov	r1, sl
 80062a2:	f7f9 ff63 	bl	800016c <__addsf3>
 80062a6:	f847 0904 	str.w	r0, [r7], #-4
 80062aa:	f109 39ff 	add.w	r9, r9, #4294967295
 80062ae:	f8c7 8000 	str.w	r8, [r7]
 80062b2:	e782      	b.n	80061ba <__kernel_rem_pio2f+0x41e>
 80062b4:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 80062b8:	f7f9 ff58 	bl	800016c <__addsf3>
 80062bc:	3c01      	subs	r4, #1
 80062be:	e780      	b.n	80061c2 <__kernel_rem_pio2f+0x426>
 80062c0:	9900      	ldr	r1, [sp, #0]
 80062c2:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 80062c6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80062ca:	600a      	str	r2, [r1, #0]
 80062cc:	604b      	str	r3, [r1, #4]
 80062ce:	460a      	mov	r2, r1
 80062d0:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80062d4:	e77f      	b.n	80061d6 <__kernel_rem_pio2f+0x43a>
 80062d6:	bf00      	nop

080062d8 <floorf>:
 80062d8:	b570      	push	{r4, r5, r6, lr}
 80062da:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 80062de:	3d7f      	subs	r5, #127	@ 0x7f
 80062e0:	2d16      	cmp	r5, #22
 80062e2:	4601      	mov	r1, r0
 80062e4:	4604      	mov	r4, r0
 80062e6:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 80062ea:	dc26      	bgt.n	800633a <floorf+0x62>
 80062ec:	2d00      	cmp	r5, #0
 80062ee:	da0f      	bge.n	8006310 <floorf+0x38>
 80062f0:	4917      	ldr	r1, [pc, #92]	@ (8006350 <floorf+0x78>)
 80062f2:	f7f9 ff3b 	bl	800016c <__addsf3>
 80062f6:	2100      	movs	r1, #0
 80062f8:	f7fa f9fc 	bl	80006f4 <__aeabi_fcmpgt>
 80062fc:	b130      	cbz	r0, 800630c <floorf+0x34>
 80062fe:	2c00      	cmp	r4, #0
 8006300:	da23      	bge.n	800634a <floorf+0x72>
 8006302:	2e00      	cmp	r6, #0
 8006304:	4c13      	ldr	r4, [pc, #76]	@ (8006354 <floorf+0x7c>)
 8006306:	bf08      	it	eq
 8006308:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800630c:	4621      	mov	r1, r4
 800630e:	e01a      	b.n	8006346 <floorf+0x6e>
 8006310:	4e11      	ldr	r6, [pc, #68]	@ (8006358 <floorf+0x80>)
 8006312:	412e      	asrs	r6, r5
 8006314:	4230      	tst	r0, r6
 8006316:	d016      	beq.n	8006346 <floorf+0x6e>
 8006318:	490d      	ldr	r1, [pc, #52]	@ (8006350 <floorf+0x78>)
 800631a:	f7f9 ff27 	bl	800016c <__addsf3>
 800631e:	2100      	movs	r1, #0
 8006320:	f7fa f9e8 	bl	80006f4 <__aeabi_fcmpgt>
 8006324:	2800      	cmp	r0, #0
 8006326:	d0f1      	beq.n	800630c <floorf+0x34>
 8006328:	2c00      	cmp	r4, #0
 800632a:	bfbe      	ittt	lt
 800632c:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8006330:	412b      	asrlt	r3, r5
 8006332:	18e4      	addlt	r4, r4, r3
 8006334:	ea24 0406 	bic.w	r4, r4, r6
 8006338:	e7e8      	b.n	800630c <floorf+0x34>
 800633a:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800633e:	d302      	bcc.n	8006346 <floorf+0x6e>
 8006340:	f7f9 ff14 	bl	800016c <__addsf3>
 8006344:	4601      	mov	r1, r0
 8006346:	4608      	mov	r0, r1
 8006348:	bd70      	pop	{r4, r5, r6, pc}
 800634a:	2400      	movs	r4, #0
 800634c:	e7de      	b.n	800630c <floorf+0x34>
 800634e:	bf00      	nop
 8006350:	7149f2ca 	.word	0x7149f2ca
 8006354:	bf800000 	.word	0xbf800000
 8006358:	007fffff 	.word	0x007fffff

0800635c <_init>:
 800635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635e:	bf00      	nop
 8006360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006362:	bc08      	pop	{r3}
 8006364:	469e      	mov	lr, r3
 8006366:	4770      	bx	lr

08006368 <_fini>:
 8006368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636a:	bf00      	nop
 800636c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800636e:	bc08      	pop	{r3}
 8006370:	469e      	mov	lr, r3
 8006372:	4770      	bx	lr
