
STM32PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aac  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000074b0  08005bb8  08005bb8  00006bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d068  0800d068  0000f060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800d068  0800d068  0000f060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800d068  0800d068  0000f060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d068  0800d068  0000e068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d06c  0800d06c  0000e06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800d070  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e54  20000060  0800d0d0  0000f060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003eb4  0800d0d0  0000feb4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff85  00000000  00000000  0000f089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d94  00000000  00000000  0001f00e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00021da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e0b  00000000  00000000  00022f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f06  00000000  00000000  00023d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c4f  00000000  00000000  0003bc79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da72  00000000  00000000  000518c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df33a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000506c  00000000  00000000  000df380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000e43ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08005ba0 	.word	0x08005ba0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08005ba0 	.word	0x08005ba0

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpun>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000700:	d102      	bne.n	8000708 <__aeabi_fcmpun+0x14>
 8000702:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000706:	d108      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000708:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800070c:	d102      	bne.n	8000714 <__aeabi_fcmpun+0x20>
 800070e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000712:	d102      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	4770      	bx	lr
 800071a:	f04f 0001 	mov.w	r0, #1
 800071e:	4770      	bx	lr

08000720 <__aeabi_f2iz>:
 8000720:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000724:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000728:	d30f      	bcc.n	800074a <__aeabi_f2iz+0x2a>
 800072a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800072e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000732:	d90d      	bls.n	8000750 <__aeabi_f2iz+0x30>
 8000734:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000738:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000740:	fa23 f002 	lsr.w	r0, r3, r2
 8000744:	bf18      	it	ne
 8000746:	4240      	negne	r0, r0
 8000748:	4770      	bx	lr
 800074a:	f04f 0000 	mov.w	r0, #0
 800074e:	4770      	bx	lr
 8000750:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000754:	d101      	bne.n	800075a <__aeabi_f2iz+0x3a>
 8000756:	0242      	lsls	r2, r0, #9
 8000758:	d105      	bne.n	8000766 <__aeabi_f2iz+0x46>
 800075a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800075e:	bf08      	it	eq
 8000760:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000772:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_DMA_Init+0x38>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	4a0b      	ldr	r2, [pc, #44]	@ (80007a4 <MX_DMA_Init+0x38>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6153      	str	r3, [r2, #20]
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_DMA_Init+0x38>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	2010      	movs	r0, #16
 8000790:	f002 f8fb 	bl	800298a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000794:	2010      	movs	r0, #16
 8000796:	f002 f914 	bl	80029c2 <HAL_NVIC_EnableIRQ>

}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000

080007a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 0310 	add.w	r3, r7, #16
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007bc:	4b34      	ldr	r3, [pc, #208]	@ (8000890 <MX_GPIO_Init+0xe8>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a33      	ldr	r2, [pc, #204]	@ (8000890 <MX_GPIO_Init+0xe8>)
 80007c2:	f043 0310 	orr.w	r3, r3, #16
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b31      	ldr	r3, [pc, #196]	@ (8000890 <MX_GPIO_Init+0xe8>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f003 0310 	and.w	r3, r3, #16
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000890 <MX_GPIO_Init+0xe8>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a2d      	ldr	r2, [pc, #180]	@ (8000890 <MX_GPIO_Init+0xe8>)
 80007da:	f043 0320 	orr.w	r3, r3, #32
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000890 <MX_GPIO_Init+0xe8>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0320 	and.w	r3, r3, #32
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ec:	4b28      	ldr	r3, [pc, #160]	@ (8000890 <MX_GPIO_Init+0xe8>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a27      	ldr	r2, [pc, #156]	@ (8000890 <MX_GPIO_Init+0xe8>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b25      	ldr	r3, [pc, #148]	@ (8000890 <MX_GPIO_Init+0xe8>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0304 	and.w	r3, r3, #4
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000804:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <MX_GPIO_Init+0xe8>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a21      	ldr	r2, [pc, #132]	@ (8000890 <MX_GPIO_Init+0xe8>)
 800080a:	f043 0308 	orr.w	r3, r3, #8
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <MX_GPIO_Init+0xe8>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0308 	and.w	r3, r3, #8
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SysWork_Light_GPIO_Port, SysWork_Light_Pin, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000822:	481c      	ldr	r0, [pc, #112]	@ (8000894 <MX_GPIO_Init+0xec>)
 8000824:	f002 fbcc 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	2180      	movs	r1, #128	@ 0x80
 800082c:	481a      	ldr	r0, [pc, #104]	@ (8000898 <MX_GPIO_Init+0xf0>)
 800082e:	f002 fbc7 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SysWork_Light_Pin */
  GPIO_InitStruct.Pin = SysWork_Light_Pin;
 8000832:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2302      	movs	r3, #2
 8000842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SysWork_Light_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	4619      	mov	r1, r3
 800084a:	4812      	ldr	r0, [pc, #72]	@ (8000894 <MX_GPIO_Init+0xec>)
 800084c:	f002 fa34 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Flash_CS_Pin */
  GPIO_InitStruct.Pin = Flash_CS_Pin;
 8000850:	2380      	movs	r3, #128	@ 0x80
 8000852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000858:	2301      	movs	r3, #1
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2302      	movs	r3, #2
 800085e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Flash_CS_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	4619      	mov	r1, r3
 8000866:	480c      	ldr	r0, [pc, #48]	@ (8000898 <MX_GPIO_Init+0xf0>)
 8000868:	f002 fa26 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch_Input_Pin Encoder_Input_Pin */
  GPIO_InitStruct.Pin = Switch_Input_Pin|Encoder_Input_Pin;
 800086c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000876:	2301      	movs	r3, #1
 8000878:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	4619      	mov	r1, r3
 8000880:	4806      	ldr	r0, [pc, #24]	@ (800089c <MX_GPIO_Init+0xf4>)
 8000882:	f002 fa19 	bl	8002cb8 <HAL_GPIO_Init>

}
 8000886:	bf00      	nop
 8000888:	3720      	adds	r7, #32
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40021000 	.word	0x40021000
 8000894:	40011000 	.word	0x40011000
 8000898:	40010800 	.word	0x40010800
 800089c:	40010c00 	.word	0x40010c00

080008a0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a4:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008a6:	4a13      	ldr	r2, [pc, #76]	@ (80008f4 <MX_I2C1_Init+0x54>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80008aa:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008ac:	4a12      	ldr	r2, [pc, #72]	@ (80008f8 <MX_I2C1_Init+0x58>)
 80008ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d0:	4b07      	ldr	r3, [pc, #28]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008dc:	4804      	ldr	r0, [pc, #16]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008de:	f002 fb87 	bl	8002ff0 <HAL_I2C_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008e8:	f000 f94f 	bl	8000b8a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000007c 	.word	0x2000007c
 80008f4:	40005400 	.word	0x40005400
 80008f8:	00061a80 	.word	0x00061a80

080008fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a29      	ldr	r2, [pc, #164]	@ (80009bc <HAL_I2C_MspInit+0xc0>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d14a      	bne.n	80009b2 <HAL_I2C_MspInit+0xb6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091c:	4b28      	ldr	r3, [pc, #160]	@ (80009c0 <HAL_I2C_MspInit+0xc4>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a27      	ldr	r2, [pc, #156]	@ (80009c0 <HAL_I2C_MspInit+0xc4>)
 8000922:	f043 0308 	orr.w	r3, r3, #8
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b25      	ldr	r3, [pc, #148]	@ (80009c0 <HAL_I2C_MspInit+0xc4>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f003 0308 	and.w	r3, r3, #8
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8000934:	23c0      	movs	r3, #192	@ 0xc0
 8000936:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000938:	2312      	movs	r3, #18
 800093a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	4619      	mov	r1, r3
 8000946:	481f      	ldr	r0, [pc, #124]	@ (80009c4 <HAL_I2C_MspInit+0xc8>)
 8000948:	f002 f9b6 	bl	8002cb8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800094c:	4b1c      	ldr	r3, [pc, #112]	@ (80009c0 <HAL_I2C_MspInit+0xc4>)
 800094e:	69db      	ldr	r3, [r3, #28]
 8000950:	4a1b      	ldr	r2, [pc, #108]	@ (80009c0 <HAL_I2C_MspInit+0xc4>)
 8000952:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000956:	61d3      	str	r3, [r2, #28]
 8000958:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <HAL_I2C_MspInit+0xc4>)
 800095a:	69db      	ldr	r3, [r3, #28]
 800095c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <HAL_I2C_MspInit+0xcc>)
 8000966:	4a19      	ldr	r2, [pc, #100]	@ (80009cc <HAL_I2C_MspInit+0xd0>)
 8000968:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800096a:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <HAL_I2C_MspInit+0xcc>)
 800096c:	2210      	movs	r2, #16
 800096e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000970:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <HAL_I2C_MspInit+0xcc>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000976:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <HAL_I2C_MspInit+0xcc>)
 8000978:	2280      	movs	r2, #128	@ 0x80
 800097a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800097c:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <HAL_I2C_MspInit+0xcc>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000982:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <HAL_I2C_MspInit+0xcc>)
 8000984:	2200      	movs	r2, #0
 8000986:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000988:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <HAL_I2C_MspInit+0xcc>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <HAL_I2C_MspInit+0xcc>)
 8000990:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000994:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000996:	480c      	ldr	r0, [pc, #48]	@ (80009c8 <HAL_I2C_MspInit+0xcc>)
 8000998:	f002 f82e 	bl	80029f8 <HAL_DMA_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 80009a2:	f000 f8f2 	bl	8000b8a <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a07      	ldr	r2, [pc, #28]	@ (80009c8 <HAL_I2C_MspInit+0xcc>)
 80009aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80009ac:	4a06      	ldr	r2, [pc, #24]	@ (80009c8 <HAL_I2C_MspInit+0xcc>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009b2:	bf00      	nop
 80009b4:	3720      	adds	r7, #32
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40005400 	.word	0x40005400
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40010c00 	.word	0x40010c00
 80009c8:	200000d0 	.word	0x200000d0
 80009cc:	4002006c 	.word	0x4002006c

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d6:	f001 fe7b 	bl	80026d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009da:	f000 f891 	bl	8000b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009de:	f7ff fee3 	bl	80007a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80009e2:	f7ff fec3 	bl	800076c <MX_DMA_Init>
  MX_I2C1_Init();
 80009e6:	f7ff ff5b 	bl	80008a0 <MX_I2C1_Init>
  MX_TIM3_Init();
 80009ea:	f001 fbf9 	bl	80021e0 <MX_TIM3_Init>
  MX_SPI2_Init();
 80009ee:	f001 fb07 	bl	8002000 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  // W25Q64_Init(); // 初始化W25Q64
  OLED_Init(); // 初始化OLED
 80009f2:	f000 faad 	bl	8000f50 <OLED_Init>
  OLED_InitBuffer(); // 初始化双缓冲
 80009f6:	f000 f8cf 	bl	8000b98 <OLED_InitBuffer>
  OLED_ClearBuffer(); // 清空缓冲区
 80009fa:	f000 f901 	bl	8000c00 <OLED_ClearBuffer>
  
  OLED_EnableDiffMode(1);  // 启用差分更新
 80009fe:	2001      	movs	r0, #1
 8000a00:	f000 fb00 	bl	8001004 <OLED_EnableDiffMode>
  OLED_EnableFastUpdate(1); // 启用快速更新
 8000a04:	2001      	movs	r0, #1
 8000a06:	f000 fb1b 	bl	8001040 <OLED_EnableFastUpdate>
  uint16_t preCount;
  
  // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // 启动PWM
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1); // 启动编码器
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4832      	ldr	r0, [pc, #200]	@ (8000ad8 <main+0x108>)
 8000a0e:	f003 fcad 	bl	800436c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2); // 启动编码器
 8000a12:	2104      	movs	r1, #4
 8000a14:	4830      	ldr	r0, [pc, #192]	@ (8000ad8 <main+0x108>)
 8000a16:	f003 fca9 	bl	800436c <HAL_TIM_Encoder_Start>

  video_player_init(); // 初始化视频播放器
 8000a1a:	f001 fd79 	bl	8002510 <video_player_init>

  OLED_InitAnimationManager(&g_AnimationManager); // 初始化动画管理器
 8000a1e:	482f      	ldr	r0, [pc, #188]	@ (8000adc <main+0x10c>)
 8000a20:	f001 fa8a 	bl	8001f38 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Menu_AnimationManager); // 初始化菜单动画管理器
 8000a24:	482e      	ldr	r0, [pc, #184]	@ (8000ae0 <main+0x110>)
 8000a26:	f001 fa87 	bl	8001f38 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Games_AnimationManager); // 初始化游戏动画管理器
 8000a2a:	482e      	ldr	r0, [pc, #184]	@ (8000ae4 <main+0x114>)
 8000a2c:	f001 fa84 	bl	8001f38 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Tools_AnimationManager); // 初始化工具动画管理器
 8000a30:	482d      	ldr	r0, [pc, #180]	@ (8000ae8 <main+0x118>)
 8000a32:	f001 fa81 	bl	8001f38 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Settings_AnimationManager); // 初始化设置动画管理器
 8000a36:	482d      	ldr	r0, [pc, #180]	@ (8000aec <main+0x11c>)
 8000a38:	f001 fa7e 	bl	8001f38 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&About_AnimationManager); // 初始化关于动画管理器
 8000a3c:	482c      	ldr	r0, [pc, #176]	@ (8000af0 <main+0x120>)
 8000a3e:	f001 fa7b 	bl	8001f38 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Status_AnimationManager); // 初始化状态动画管理器
 8000a42:	482c      	ldr	r0, [pc, #176]	@ (8000af4 <main+0x124>)
 8000a44:	f001 fa78 	bl	8001f38 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&g_Title_AnimationManager); // 初始化标题动画管理器
 8000a48:	482b      	ldr	r0, [pc, #172]	@ (8000af8 <main+0x128>)
 8000a4a:	f001 fa75 	bl	8001f38 <OLED_InitAnimationManager>
  __HAL_TIM_SET_COUNTER(&htim3, 32767);
 8000a4e:	4b22      	ldr	r3, [pc, #136]	@ (8000ad8 <main+0x108>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000a56:	625a      	str	r2, [r3, #36]	@ 0x24
  preCount = count;
 8000a58:	4b28      	ldr	r3, [pc, #160]	@ (8000afc <main+0x12c>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	80fb      	strh	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {    
    #pragma region OLED_UI_SETTINGS // UI设置
    OLED_ClearBuffer();
 8000a5e:	f000 f8cf 	bl	8000c00 <OLED_ClearBuffer>
    
    // System_UI_Loop(); // UI循环
    play_video(); // 播放视频
 8000a62:	f001 fd65 	bl	8002530 <play_video>
    // uint8_t data[12]; // 分配内存
    // W25Q64_Read(0x0000, data, 12); // 读取数据



    if (preCount > count)
 8000a66:	4b25      	ldr	r3, [pc, #148]	@ (8000afc <main+0x12c>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	88fa      	ldrh	r2, [r7, #6]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d906      	bls.n	8000a7e <main+0xae>
    {
      video_fast_forward(10); // 快进
 8000a70:	200a      	movs	r0, #10
 8000a72:	f001 fdbb 	bl	80025ec <video_fast_forward>
      preCount = count; // 更新上次计数值
 8000a76:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <main+0x12c>)
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	80fb      	strh	r3, [r7, #6]
 8000a7c:	e00a      	b.n	8000a94 <main+0xc4>
    }
    else if (preCount < count)
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000afc <main+0x12c>)
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	88fa      	ldrh	r2, [r7, #6]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d205      	bcs.n	8000a94 <main+0xc4>
    {
      video_rewind(10); // 快退
 8000a88:	200a      	movs	r0, #10
 8000a8a:	f001 fddb 	bl	8002644 <video_rewind>
      preCount = count; // 更新上次计数值
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <main+0x12c>)
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	80fb      	strh	r3, [r7, #6]
    }
    
    // OLED_OptimizedDisplayFPS(80, 56); // 显示帧率
    count = __HAL_TIM_GET_COUNTER(&htim3); // 获取编码器计数值 1圈40
 8000a94:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <main+0x108>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <main+0x12c>)
 8000a9e:	801a      	strh	r2, [r3, #0]
    OLED_UpdateAnimationManager(&Menu_AnimationManager); // 更新菜单动画管理器
 8000aa0:	480f      	ldr	r0, [pc, #60]	@ (8000ae0 <main+0x110>)
 8000aa2:	f001 fa5c 	bl	8001f5e <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_AnimationManager); // 更新动画管理器
 8000aa6:	480d      	ldr	r0, [pc, #52]	@ (8000adc <main+0x10c>)
 8000aa8:	f001 fa59 	bl	8001f5e <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Games_AnimationManager); // 更新游戏动画管理器
 8000aac:	480d      	ldr	r0, [pc, #52]	@ (8000ae4 <main+0x114>)
 8000aae:	f001 fa56 	bl	8001f5e <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Tools_AnimationManager); // 更新工具动画管理器
 8000ab2:	480d      	ldr	r0, [pc, #52]	@ (8000ae8 <main+0x118>)
 8000ab4:	f001 fa53 	bl	8001f5e <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Settings_AnimationManager); // 更新设置动画管理器
 8000ab8:	480c      	ldr	r0, [pc, #48]	@ (8000aec <main+0x11c>)
 8000aba:	f001 fa50 	bl	8001f5e <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&About_AnimationManager); // 更新关于动画管理器
 8000abe:	480c      	ldr	r0, [pc, #48]	@ (8000af0 <main+0x120>)
 8000ac0:	f001 fa4d 	bl	8001f5e <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Status_AnimationManager); // 更新状态动画管理器
 8000ac4:	480b      	ldr	r0, [pc, #44]	@ (8000af4 <main+0x124>)
 8000ac6:	f001 fa4a 	bl	8001f5e <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_Title_AnimationManager); // 更新标题动画管理器
 8000aca:	480b      	ldr	r0, [pc, #44]	@ (8000af8 <main+0x128>)
 8000acc:	f001 fa47 	bl	8001f5e <OLED_UpdateAnimationManager>
    OLED_SmartUpdate(); // 智能更新显示
 8000ad0:	f000 fac6 	bl	8001060 <OLED_SmartUpdate>
    OLED_ClearBuffer();
 8000ad4:	e7c3      	b.n	8000a5e <main+0x8e>
 8000ad6:	bf00      	nop
 8000ad8:	20003d28 	.word	0x20003d28
 8000adc:	200036dc 	.word	0x200036dc
 8000ae0:	20000d30 	.word	0x20000d30
 8000ae4:	20001324 	.word	0x20001324
 8000ae8:	20001918 	.word	0x20001918
 8000aec:	20001f0c 	.word	0x20001f0c
 8000af0:	20002500 	.word	0x20002500
 8000af4:	20002af4 	.word	0x20002af4
 8000af8:	200030e8 	.word	0x200030e8
 8000afc:	20000114 	.word	0x20000114

08000b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b090      	sub	sp, #64	@ 0x40
 8000b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b06:	f107 0318 	add.w	r3, r7, #24
 8000b0a:	2228      	movs	r2, #40	@ 0x28
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f003 fdaa 	bl	8004668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b22:	2301      	movs	r3, #1
 8000b24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b30:	2301      	movs	r3, #1
 8000b32:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b34:	2302      	movs	r3, #2
 8000b36:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b3e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b44:	f107 0318 	add.w	r3, r7, #24
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f002 feed 	bl	8003928 <HAL_RCC_OscConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b54:	f000 f819 	bl	8000b8a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b58:	230f      	movs	r3, #15
 8000b5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2102      	movs	r1, #2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f003 f95a 	bl	8003e2c <HAL_RCC_ClockConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b7e:	f000 f804 	bl	8000b8a <Error_Handler>
  }
}
 8000b82:	bf00      	nop
 8000b84:	3740      	adds	r7, #64	@ 0x40
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8e:	b672      	cpsid	i
}
 8000b90:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b92:	bf00      	nop
 8000b94:	e7fd      	b.n	8000b92 <Error_Handler+0x8>
	...

08000b98 <OLED_InitBuffer>:
        0x22, 0x00, 0x07  // 页地址范围: 0-7
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000b9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4811      	ldr	r0, [pc, #68]	@ (8000bec <OLED_InitBuffer+0x54>)
 8000ba6:	f003 fd5f 	bl	8004668 <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 8000baa:	f240 4201 	movw	r2, #1025	@ 0x401
 8000bae:	2100      	movs	r1, #0
 8000bb0:	480f      	ldr	r0, [pc, #60]	@ (8000bf0 <OLED_InitBuffer+0x58>)
 8000bb2:	f003 fd59 	bl	8004668 <memset>

    // 初始化第一个字节为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <OLED_InitBuffer+0x58>)
 8000bb8:	2240      	movs	r2, #64	@ 0x40
 8000bba:	701a      	strb	r2, [r3, #0]

    // 初始化状态变量
    oled_update_flag = OLED_READY;
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <OLED_InitBuffer+0x5c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
    oled_dma_busy = OLED_READY;
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <OLED_InitBuffer+0x60>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000bc8:	2300      	movs	r3, #0
 8000bca:	71fb      	strb	r3, [r7, #7]
 8000bcc:	e006      	b.n	8000bdc <OLED_InitBuffer+0x44>
    {
        oled_dirty_pages[i] = 1;
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bfc <OLED_InitBuffer+0x64>)
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	71fb      	strb	r3, [r7, #7]
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	2b07      	cmp	r3, #7
 8000be0:	d9f5      	bls.n	8000bce <OLED_InitBuffer+0x36>
    }
}
 8000be2:	bf00      	nop
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000128 	.word	0x20000128
 8000bf0:	20000528 	.word	0x20000528
 8000bf4:	2000011c 	.word	0x2000011c
 8000bf8:	2000011d 	.word	0x2000011d
 8000bfc:	20000120 	.word	0x20000120

08000c00 <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000c06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	480a      	ldr	r0, [pc, #40]	@ (8000c38 <OLED_ClearBuffer+0x38>)
 8000c0e:	f003 fd2b 	bl	8004668 <memset>

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	71fb      	strb	r3, [r7, #7]
 8000c16:	e006      	b.n	8000c26 <OLED_ClearBuffer+0x26>
    {
        oled_dirty_pages[i] = 1;
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	4a08      	ldr	r2, [pc, #32]	@ (8000c3c <OLED_ClearBuffer+0x3c>)
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	3301      	adds	r3, #1
 8000c24:	71fb      	strb	r3, [r7, #7]
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b07      	cmp	r3, #7
 8000c2a:	d9f5      	bls.n	8000c18 <OLED_ClearBuffer+0x18>
    }
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000128 	.word	0x20000128
 8000c3c:	20000120 	.word	0x20000120

08000c40 <OLED_IsBusy>:

uint8_t OLED_IsBusy(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
    // 如果标记为忙，检查是否已经过了足够时间
    if (oled_update_flag)
 8000c46:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <OLED_IsBusy+0x44>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d007      	beq.n	8000c60 <OLED_IsBusy+0x20>
    {
        // SSD1315/SSD1306 典型帧率约为60Hz，每帧约16.7ms
        // 可以根据需要调整刷新率，减小此值可以提高帧率
        uint32_t current_time = HAL_GetTick();
 8000c50:	f001 fd96 	bl	8002780 <HAL_GetTick>
 8000c54:	6078      	str	r0, [r7, #4]
        if (current_time - oled_last_update_time >= 0)
 8000c56:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <OLED_IsBusy+0x48>)
 8000c58:	681b      	ldr	r3, [r3, #0]
        {
            oled_update_flag = OLED_READY; // 已经过了足够时间，不再忙
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c84 <OLED_IsBusy+0x44>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
        }
    }

    // 如果DMA传输正在进行，也视为忙
    return (oled_update_flag || oled_dma_busy);
 8000c60:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <OLED_IsBusy+0x44>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d104      	bne.n	8000c74 <OLED_IsBusy+0x34>
 8000c6a:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <OLED_IsBusy+0x4c>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <OLED_IsBusy+0x38>
 8000c74:	2301      	movs	r3, #1
 8000c76:	e000      	b.n	8000c7a <OLED_IsBusy+0x3a>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	b2db      	uxtb	r3, r3
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2000011c 	.word	0x2000011c
 8000c88:	20000118 	.word	0x20000118
 8000c8c:	2000011d 	.word	0x2000011d

08000c90 <OLED_UpdateDisplayVSync>:

void OLED_UpdateDisplayVSync(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af02      	add	r7, sp, #8
    // 等待上一次更新完成
    while (OLED_IsBusy())
 8000c96:	bf00      	nop
 8000c98:	f7ff ffd2 	bl	8000c40 <OLED_IsBusy>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1fa      	bne.n	8000c98 <OLED_UpdateDisplayVSync+0x8>
    {
        // 可以加入短暂延时或者让出CPU，但通常不会停留很久
    }

    oled_update_flag = OLED_BUSY;
 8000ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d20 <OLED_UpdateDisplayVSync+0x90>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8000ca8:	f001 fd6a 	bl	8002780 <HAL_GetTick>
 8000cac:	4603      	mov	r3, r0
 8000cae:	4a1d      	ldr	r2, [pc, #116]	@ (8000d24 <OLED_UpdateDisplayVSync+0x94>)
 8000cb0:	6013      	str	r3, [r2, #0]

    OLED_FrontBuffer[0] = 0x40;                                             // 数据控制字节：Co=0, D/C#=1 (数据)
 8000cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d28 <OLED_UpdateDisplayVSync+0x98>)
 8000cb4:	2240      	movs	r2, #64	@ 0x40
 8000cb6:	701a      	strb	r2, [r3, #0]
    memcpy(OLED_FrontBuffer + 1, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES); // 复制当前缓冲区到前缓冲区
 8000cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8000d2c <OLED_UpdateDisplayVSync+0x9c>)
 8000cba:	4b1d      	ldr	r3, [pc, #116]	@ (8000d30 <OLED_UpdateDisplayVSync+0xa0>)
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	f003 fd01 	bl	80046cc <memcpy>

    // 一次性发送所有命令
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	71fb      	strb	r3, [r7, #7]
 8000cce:	e008      	b.n	8000ce2 <OLED_UpdateDisplayVSync+0x52>
    {
        OLED_SendCommand(cmds[i]);
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	4a18      	ldr	r2, [pc, #96]	@ (8000d34 <OLED_UpdateDisplayVSync+0xa4>)
 8000cd4:	5cd3      	ldrb	r3, [r2, r3]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f920 	bl	8000f1c <OLED_SendCommand>
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	71fb      	strb	r3, [r7, #7]
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b07      	cmp	r3, #7
 8000ce6:	d9f3      	bls.n	8000cd0 <OLED_UpdateDisplayVSync+0x40>
    }


    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, OLED_WIDTH * OLED_PAGES + 1, HAL_MAX_DELAY);
 8000ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	f240 4301 	movw	r3, #1025	@ 0x401
 8000cf2:	4a0d      	ldr	r2, [pc, #52]	@ (8000d28 <OLED_UpdateDisplayVSync+0x98>)
 8000cf4:	2178      	movs	r1, #120	@ 0x78
 8000cf6:	4810      	ldr	r0, [pc, #64]	@ (8000d38 <OLED_UpdateDisplayVSync+0xa8>)
 8000cf8:	f002 fabe 	bl	8003278 <HAL_I2C_Master_Transmit>

    // 重置所有脏页标记
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	71bb      	strb	r3, [r7, #6]
 8000d00:	e006      	b.n	8000d10 <OLED_UpdateDisplayVSync+0x80>
    {
        oled_dirty_pages[i] = 0;
 8000d02:	79bb      	ldrb	r3, [r7, #6]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	@ (8000d3c <OLED_UpdateDisplayVSync+0xac>)
 8000d06:	2100      	movs	r1, #0
 8000d08:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000d0a:	79bb      	ldrb	r3, [r7, #6]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	71bb      	strb	r3, [r7, #6]
 8000d10:	79bb      	ldrb	r3, [r7, #6]
 8000d12:	2b07      	cmp	r3, #7
 8000d14:	d9f5      	bls.n	8000d02 <OLED_UpdateDisplayVSync+0x72>
    }
}
 8000d16:	bf00      	nop
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	2000011c 	.word	0x2000011c
 8000d24:	20000118 	.word	0x20000118
 8000d28:	20000528 	.word	0x20000528
 8000d2c:	20000529 	.word	0x20000529
 8000d30:	20000128 	.word	0x20000128
 8000d34:	08005bb8 	.word	0x08005bb8
 8000d38:	2000007c 	.word	0x2000007c
 8000d3c:	20000120 	.word	0x20000120

08000d40 <OLED_UpdateDisplayPartial>:
    }
}

// 局部更新显示函数
void OLED_UpdateDisplayPartial(uint8_t startPage, uint8_t endPage)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af02      	add	r7, sp, #8
 8000d46:	4603      	mov	r3, r0
 8000d48:	460a      	mov	r2, r1
 8000d4a:	71fb      	strb	r3, [r7, #7]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	71bb      	strb	r3, [r7, #6]
    // 边界检查
    if (startPage >= OLED_PAGES || endPage >= OLED_PAGES || startPage > endPage)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b07      	cmp	r3, #7
 8000d54:	d85c      	bhi.n	8000e10 <OLED_UpdateDisplayPartial+0xd0>
 8000d56:	79bb      	ldrb	r3, [r7, #6]
 8000d58:	2b07      	cmp	r3, #7
 8000d5a:	d859      	bhi.n	8000e10 <OLED_UpdateDisplayPartial+0xd0>
 8000d5c:	79fa      	ldrb	r2, [r7, #7]
 8000d5e:	79bb      	ldrb	r3, [r7, #6]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d855      	bhi.n	8000e10 <OLED_UpdateDisplayPartial+0xd0>
        return;

    // 等待上一次更新完成
    while (OLED_IsBusy())
 8000d64:	bf00      	nop
 8000d66:	f7ff ff6b 	bl	8000c40 <OLED_IsBusy>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1fa      	bne.n	8000d66 <OLED_UpdateDisplayPartial+0x26>
    {
        // 可以加入短暂延时或者让出CPU
    }

    oled_update_flag = OLED_BUSY;
 8000d70:	4b29      	ldr	r3, [pc, #164]	@ (8000e18 <OLED_UpdateDisplayPartial+0xd8>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8000d76:	f001 fd03 	bl	8002780 <HAL_GetTick>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	4a27      	ldr	r2, [pc, #156]	@ (8000e1c <OLED_UpdateDisplayPartial+0xdc>)
 8000d7e:	6013      	str	r3, [r2, #0]

    // 设置页地址范围
    OLED_SendCommand(0x22);      // 页地址设置命令
 8000d80:	2022      	movs	r0, #34	@ 0x22
 8000d82:	f000 f8cb 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(startPage); // 起始页
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 f8c7 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(endPage);   // 结束页
 8000d8e:	79bb      	ldrb	r3, [r7, #6]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 f8c3 	bl	8000f1c <OLED_SendCommand>

    // 设置列地址范围（总是更新整行）
    OLED_SendCommand(0x21); // 列地址设置命令
 8000d96:	2021      	movs	r0, #33	@ 0x21
 8000d98:	f000 f8c0 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0x00); // 起始列
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f000 f8bd 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0x7F); // 结束列 (127)
 8000da2:	207f      	movs	r0, #127	@ 0x7f
 8000da4:	f000 f8ba 	bl	8000f1c <OLED_SendCommand>

    // 计算需要传输的数据长度
    uint16_t dataLen = OLED_WIDTH * (endPage - startPage + 1);
 8000da8:	79ba      	ldrb	r2, [r7, #6]
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	3301      	adds	r3, #1
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	01db      	lsls	r3, r3, #7
 8000db4:	81bb      	strh	r3, [r7, #12]

    // 前缓冲区的第一个字节设为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8000db6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <OLED_UpdateDisplayPartial+0xe0>)
 8000db8:	2240      	movs	r2, #64	@ 0x40
 8000dba:	701a      	strb	r2, [r3, #0]

    // 只复制需要更新的页
    for (uint8_t page = startPage; page <= endPage; page++)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	e016      	b.n	8000df0 <OLED_UpdateDisplayPartial+0xb0>
    {
        memcpy(
            OLED_FrontBuffer + 1 + (page - startPage) * OLED_WIDTH,
 8000dc2:	7bfa      	ldrb	r2, [r7, #15]
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	01db      	lsls	r3, r3, #7
 8000dca:	3301      	adds	r3, #1
        memcpy(
 8000dcc:	4a14      	ldr	r2, [pc, #80]	@ (8000e20 <OLED_UpdateDisplayPartial+0xe0>)
 8000dce:	1898      	adds	r0, r3, r2
            OLED_BackBuffer + page * OLED_WIDTH,
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	01db      	lsls	r3, r3, #7
 8000dd4:	461a      	mov	r2, r3
        memcpy(
 8000dd6:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <OLED_UpdateDisplayPartial+0xe4>)
 8000dd8:	4413      	add	r3, r2
 8000dda:	2280      	movs	r2, #128	@ 0x80
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f003 fc75 	bl	80046cc <memcpy>
            OLED_WIDTH);
        oled_dirty_pages[page] = 0; // 重置脏页标记
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	4a10      	ldr	r2, [pc, #64]	@ (8000e28 <OLED_UpdateDisplayPartial+0xe8>)
 8000de6:	2100      	movs	r1, #0
 8000de8:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = startPage; page <= endPage; page++)
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	3301      	adds	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
 8000df0:	7bfa      	ldrb	r2, [r7, #15]
 8000df2:	79bb      	ldrb	r3, [r7, #6]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d9e4      	bls.n	8000dc2 <OLED_UpdateDisplayPartial+0x82>
    }

    // 发送数据
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, dataLen + 1, HAL_MAX_DELAY);
 8000df8:	89bb      	ldrh	r3, [r7, #12]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8000e02:	9200      	str	r2, [sp, #0]
 8000e04:	4a06      	ldr	r2, [pc, #24]	@ (8000e20 <OLED_UpdateDisplayPartial+0xe0>)
 8000e06:	2178      	movs	r1, #120	@ 0x78
 8000e08:	4808      	ldr	r0, [pc, #32]	@ (8000e2c <OLED_UpdateDisplayPartial+0xec>)
 8000e0a:	f002 fa35 	bl	8003278 <HAL_I2C_Master_Transmit>
 8000e0e:	e000      	b.n	8000e12 <OLED_UpdateDisplayPartial+0xd2>
        return;
 8000e10:	bf00      	nop
}
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	2000011c 	.word	0x2000011c
 8000e1c:	20000118 	.word	0x20000118
 8000e20:	20000528 	.word	0x20000528
 8000e24:	20000128 	.word	0x20000128
 8000e28:	20000120 	.word	0x20000120
 8000e2c:	2000007c 	.word	0x2000007c

08000e30 <OLED_WritePixel>:

void OLED_WritePixel(int16_t x, int16_t y, uint8_t color)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	80fb      	strh	r3, [r7, #6]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	80bb      	strh	r3, [r7, #4]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	70fb      	strb	r3, [r7, #3]
    // 边界检查
    if (x >= OLED_WIDTH || x < 0 || y >= OLED_HEIGHT || y < 0)
 8000e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e46:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e48:	dc5e      	bgt.n	8000f08 <OLED_WritePixel+0xd8>
 8000e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	db5a      	blt.n	8000f08 <OLED_WritePixel+0xd8>
 8000e52:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e56:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e58:	dc56      	bgt.n	8000f08 <OLED_WritePixel+0xd8>
 8000e5a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	db52      	blt.n	8000f08 <OLED_WritePixel+0xd8>
        return;

    // 计算像素所在的字节位置
    uint16_t byte_index = x + (y / 8) * OLED_WIDTH;
 8000e62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	da00      	bge.n	8000e6c <OLED_WritePixel+0x3c>
 8000e6a:	3307      	adds	r3, #7
 8000e6c:	10db      	asrs	r3, r3, #3
 8000e6e:	b21b      	sxth	r3, r3
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	01db      	lsls	r3, r3, #7
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	4413      	add	r3, r2
 8000e7a:	81fb      	strh	r3, [r7, #14]
    uint8_t bit_position = y % 8;
 8000e7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e80:	425a      	negs	r2, r3
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	f002 0207 	and.w	r2, r2, #7
 8000e8a:	bf58      	it	pl
 8000e8c:	4253      	negpl	r3, r2
 8000e8e:	b21b      	sxth	r3, r3
 8000e90:	737b      	strb	r3, [r7, #13]
    uint8_t page = y / 8; // 计算所在页
 8000e92:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	da00      	bge.n	8000e9c <OLED_WritePixel+0x6c>
 8000e9a:	3307      	adds	r3, #7
 8000e9c:	10db      	asrs	r3, r3, #3
 8000e9e:	b21b      	sxth	r3, r3
 8000ea0:	733b      	strb	r3, [r7, #12]

    // 记录当前像素值
    uint8_t old_value = OLED_BackBuffer[byte_index];
 8000ea2:	89fb      	ldrh	r3, [r7, #14]
 8000ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f14 <OLED_WritePixel+0xe4>)
 8000ea6:	5cd3      	ldrb	r3, [r2, r3]
 8000ea8:	72fb      	strb	r3, [r7, #11]

    if (color) // 如果需要点亮像素
 8000eaa:	78fb      	ldrb	r3, [r7, #3]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00f      	beq.n	8000ed0 <OLED_WritePixel+0xa0>
        OLED_BackBuffer[byte_index] |= (1 << bit_position);
 8000eb0:	89fb      	ldrh	r3, [r7, #14]
 8000eb2:	4a18      	ldr	r2, [pc, #96]	@ (8000f14 <OLED_WritePixel+0xe4>)
 8000eb4:	5cd3      	ldrb	r3, [r2, r3]
 8000eb6:	b25a      	sxtb	r2, r3
 8000eb8:	7b7b      	ldrb	r3, [r7, #13]
 8000eba:	2101      	movs	r1, #1
 8000ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec0:	b25b      	sxtb	r3, r3
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	b25a      	sxtb	r2, r3
 8000ec6:	89fb      	ldrh	r3, [r7, #14]
 8000ec8:	b2d1      	uxtb	r1, r2
 8000eca:	4a12      	ldr	r2, [pc, #72]	@ (8000f14 <OLED_WritePixel+0xe4>)
 8000ecc:	54d1      	strb	r1, [r2, r3]
 8000ece:	e010      	b.n	8000ef2 <OLED_WritePixel+0xc2>
    else // 如果需要熄灭像素
        OLED_BackBuffer[byte_index] &= ~(1 << bit_position);
 8000ed0:	89fb      	ldrh	r3, [r7, #14]
 8000ed2:	4a10      	ldr	r2, [pc, #64]	@ (8000f14 <OLED_WritePixel+0xe4>)
 8000ed4:	5cd3      	ldrb	r3, [r2, r3]
 8000ed6:	b25a      	sxtb	r2, r3
 8000ed8:	7b7b      	ldrb	r3, [r7, #13]
 8000eda:	2101      	movs	r1, #1
 8000edc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	b25b      	sxtb	r3, r3
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	b25a      	sxtb	r2, r3
 8000eea:	89fb      	ldrh	r3, [r7, #14]
 8000eec:	b2d1      	uxtb	r1, r2
 8000eee:	4a09      	ldr	r2, [pc, #36]	@ (8000f14 <OLED_WritePixel+0xe4>)
 8000ef0:	54d1      	strb	r1, [r2, r3]

    // 如果像素值发生变化，标记该页为脏
    if (old_value != OLED_BackBuffer[byte_index])
 8000ef2:	89fb      	ldrh	r3, [r7, #14]
 8000ef4:	4a07      	ldr	r2, [pc, #28]	@ (8000f14 <OLED_WritePixel+0xe4>)
 8000ef6:	5cd3      	ldrb	r3, [r2, r3]
 8000ef8:	7afa      	ldrb	r2, [r7, #11]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d005      	beq.n	8000f0a <OLED_WritePixel+0xda>
    {
        oled_dirty_pages[page] = 1;
 8000efe:	7b3b      	ldrb	r3, [r7, #12]
 8000f00:	4a05      	ldr	r2, [pc, #20]	@ (8000f18 <OLED_WritePixel+0xe8>)
 8000f02:	2101      	movs	r1, #1
 8000f04:	54d1      	strb	r1, [r2, r3]
 8000f06:	e000      	b.n	8000f0a <OLED_WritePixel+0xda>
        return;
 8000f08:	bf00      	nop
    }
}
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000128 	.word	0x20000128
 8000f18:	20000120 	.word	0x20000120

08000f1c <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af02      	add	r7, sp, #8
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 8000f26:	2300      	movs	r3, #0
 8000f28:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8000f2e:	f107 020c 	add.w	r2, r7, #12
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2302      	movs	r3, #2
 8000f3a:	2178      	movs	r1, #120	@ 0x78
 8000f3c:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <OLED_SendCommand+0x30>)
 8000f3e:	f002 f99b 	bl	8003278 <HAL_I2C_Master_Transmit>
}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000007c 	.word	0x2000007c

08000f50 <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 8000f54:	2064      	movs	r0, #100	@ 0x64
 8000f56:	f001 fc1d 	bl	8002794 <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 8000f5a:	20ae      	movs	r0, #174	@ 0xae
 8000f5c:	f7ff ffde 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 8000f60:	20d5      	movs	r0, #213	@ 0xd5
 8000f62:	f7ff ffdb 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 8000f66:	2080      	movs	r0, #128	@ 0x80
 8000f68:	f7ff ffd8 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8000f6c:	20a8      	movs	r0, #168	@ 0xa8
 8000f6e:	f7ff ffd5 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 8000f72:	203f      	movs	r0, #63	@ 0x3f
 8000f74:	f7ff ffd2 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8000f78:	20d3      	movs	r0, #211	@ 0xd3
 8000f7a:	f7ff ffcf 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f7ff ffcc 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8000f84:	2040      	movs	r0, #64	@ 0x40
 8000f86:	f7ff ffc9 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 8000f8a:	208d      	movs	r0, #141	@ 0x8d
 8000f8c:	f7ff ffc6 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 8000f90:	2014      	movs	r0, #20
 8000f92:	f7ff ffc3 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 8000f96:	2020      	movs	r0, #32
 8000f98:	f7ff ffc0 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f7ff ffbd 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 8000fa2:	20a1      	movs	r0, #161	@ 0xa1
 8000fa4:	f7ff ffba 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 8000fa8:	20c8      	movs	r0, #200	@ 0xc8
 8000faa:	f7ff ffb7 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 8000fae:	20da      	movs	r0, #218	@ 0xda
 8000fb0:	f7ff ffb4 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8000fb4:	2012      	movs	r0, #18
 8000fb6:	f7ff ffb1 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 8000fba:	2081      	movs	r0, #129	@ 0x81
 8000fbc:	f7ff ffae 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 8000fc0:	20cf      	movs	r0, #207	@ 0xcf
 8000fc2:	f7ff ffab 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 8000fc6:	20d9      	movs	r0, #217	@ 0xd9
 8000fc8:	f7ff ffa8 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 8000fcc:	20f1      	movs	r0, #241	@ 0xf1
 8000fce:	f7ff ffa5 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 8000fd2:	20db      	movs	r0, #219	@ 0xdb
 8000fd4:	f7ff ffa2 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 8000fd8:	2030      	movs	r0, #48	@ 0x30
 8000fda:	f7ff ff9f 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 8000fde:	20a4      	movs	r0, #164	@ 0xa4
 8000fe0:	f7ff ff9c 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 8000fe4:	20a6      	movs	r0, #166	@ 0xa6
 8000fe6:	f7ff ff99 	bl	8000f1c <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 8000fea:	202e      	movs	r0, #46	@ 0x2e
 8000fec:	f7ff ff96 	bl	8000f1c <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 8000ff0:	f7ff fdd2 	bl	8000b98 <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 8000ff4:	f7ff fe04 	bl	8000c00 <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 8000ff8:	20af      	movs	r0, #175	@ 0xaf
 8000ffa:	f7ff ff8f 	bl	8000f1c <OLED_SendCommand>
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <OLED_EnableDiffMode>:
    }
}

// 启用差分更新模式
void OLED_EnableDiffMode(uint8_t enable)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
    diff_mode_enabled = enable;
 800100e:	4a09      	ldr	r2, [pc, #36]	@ (8001034 <OLED_EnableDiffMode+0x30>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	7013      	strb	r3, [r2, #0]
    if (enable)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d008      	beq.n	800102c <OLED_EnableDiffMode+0x28>
    {
        memcpy(OLED_PrevBuffer, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES);
 800101a:	4a07      	ldr	r2, [pc, #28]	@ (8001038 <OLED_EnableDiffMode+0x34>)
 800101c:	4b07      	ldr	r3, [pc, #28]	@ (800103c <OLED_EnableDiffMode+0x38>)
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001026:	461a      	mov	r2, r3
 8001028:	f003 fb50 	bl	80046cc <memcpy>
    }
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000d2c 	.word	0x20000d2c
 8001038:	2000092c 	.word	0x2000092c
 800103c:	20000128 	.word	0x20000128

08001040 <OLED_EnableFastUpdate>:

// 设置快速更新模式
void OLED_EnableFastUpdate(uint8_t enable)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
    fast_update_enabled = enable;
 800104a:	4a04      	ldr	r2, [pc, #16]	@ (800105c <OLED_EnableFastUpdate+0x1c>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	7013      	strb	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000000 	.word	0x20000000

08001060 <OLED_SmartUpdate>:

// 智能更新显示
// 选择性更新脏页，以提高帧率
void OLED_SmartUpdate(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
    // 如果OLED/DMA忙，直接返回
    if (OLED_IsBusy())
 8001066:	f7ff fdeb 	bl	8000c40 <OLED_IsBusy>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	f040 8082 	bne.w	8001176 <OLED_SmartUpdate+0x116>
    {
        return;
    }

    // 检查是否有脏页需要更新
    uint8_t has_dirty = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]
    uint8_t first_dirty = 255;
 8001076:	23ff      	movs	r3, #255	@ 0xff
 8001078:	73bb      	strb	r3, [r7, #14]
    uint8_t last_dirty = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	737b      	strb	r3, [r7, #13]

    // 如果启用了差分更新，检查哪些页已经变化
    if (diff_mode_enabled)
 800107e:	4b40      	ldr	r3, [pc, #256]	@ (8001180 <OLED_SmartUpdate+0x120>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d046      	beq.n	8001114 <OLED_SmartUpdate+0xb4>
    {
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 8001086:	2300      	movs	r3, #0
 8001088:	733b      	strb	r3, [r7, #12]
 800108a:	e03f      	b.n	800110c <OLED_SmartUpdate+0xac>
        {
            // 检查此页中是否有任何字节发生变化
            uint8_t page_changed = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	72fb      	strb	r3, [r7, #11]
            uint16_t start_idx = page * OLED_WIDTH;
 8001090:	7b3b      	ldrb	r3, [r7, #12]
 8001092:	b29b      	uxth	r3, r3
 8001094:	01db      	lsls	r3, r3, #7
 8001096:	80bb      	strh	r3, [r7, #4]

            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 8001098:	2300      	movs	r3, #0
 800109a:	813b      	strh	r3, [r7, #8]
 800109c:	e015      	b.n	80010ca <OLED_SmartUpdate+0x6a>
            {
                if (OLED_BackBuffer[start_idx + i] != OLED_PrevBuffer[start_idx + i])
 800109e:	88ba      	ldrh	r2, [r7, #4]
 80010a0:	893b      	ldrh	r3, [r7, #8]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a37      	ldr	r2, [pc, #220]	@ (8001184 <OLED_SmartUpdate+0x124>)
 80010a6:	5cd2      	ldrb	r2, [r2, r3]
 80010a8:	88b9      	ldrh	r1, [r7, #4]
 80010aa:	893b      	ldrh	r3, [r7, #8]
 80010ac:	440b      	add	r3, r1
 80010ae:	4936      	ldr	r1, [pc, #216]	@ (8001188 <OLED_SmartUpdate+0x128>)
 80010b0:	5ccb      	ldrb	r3, [r1, r3]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d006      	beq.n	80010c4 <OLED_SmartUpdate+0x64>
                {
                    page_changed = 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	72fb      	strb	r3, [r7, #11]
                    oled_dirty_pages[page] = 1;
 80010ba:	7b3b      	ldrb	r3, [r7, #12]
 80010bc:	4a33      	ldr	r2, [pc, #204]	@ (800118c <OLED_SmartUpdate+0x12c>)
 80010be:	2101      	movs	r1, #1
 80010c0:	54d1      	strb	r1, [r2, r3]
                    break;
 80010c2:	e005      	b.n	80010d0 <OLED_SmartUpdate+0x70>
            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 80010c4:	893b      	ldrh	r3, [r7, #8]
 80010c6:	3301      	adds	r3, #1
 80010c8:	813b      	strh	r3, [r7, #8]
 80010ca:	893b      	ldrh	r3, [r7, #8]
 80010cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80010ce:	d9e6      	bls.n	800109e <OLED_SmartUpdate+0x3e>
                }
            }

            if (page_changed)
 80010d0:	7afb      	ldrb	r3, [r7, #11]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d017      	beq.n	8001106 <OLED_SmartUpdate+0xa6>
            {
                has_dirty = 1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	73fb      	strb	r3, [r7, #15]
                if (page < first_dirty)
 80010da:	7b3a      	ldrb	r2, [r7, #12]
 80010dc:	7bbb      	ldrb	r3, [r7, #14]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d201      	bcs.n	80010e6 <OLED_SmartUpdate+0x86>
                    first_dirty = page;
 80010e2:	7b3b      	ldrb	r3, [r7, #12]
 80010e4:	73bb      	strb	r3, [r7, #14]
                if (page > last_dirty)
 80010e6:	7b3a      	ldrb	r2, [r7, #12]
 80010e8:	7b7b      	ldrb	r3, [r7, #13]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d901      	bls.n	80010f2 <OLED_SmartUpdate+0x92>
                    last_dirty = page;
 80010ee:	7b3b      	ldrb	r3, [r7, #12]
 80010f0:	737b      	strb	r3, [r7, #13]

                // 更新上一帧缓存
                memcpy(
 80010f2:	88bb      	ldrh	r3, [r7, #4]
 80010f4:	4a24      	ldr	r2, [pc, #144]	@ (8001188 <OLED_SmartUpdate+0x128>)
 80010f6:	1898      	adds	r0, r3, r2
 80010f8:	88bb      	ldrh	r3, [r7, #4]
 80010fa:	4a22      	ldr	r2, [pc, #136]	@ (8001184 <OLED_SmartUpdate+0x124>)
 80010fc:	4413      	add	r3, r2
 80010fe:	2280      	movs	r2, #128	@ 0x80
 8001100:	4619      	mov	r1, r3
 8001102:	f003 fae3 	bl	80046cc <memcpy>
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 8001106:	7b3b      	ldrb	r3, [r7, #12]
 8001108:	3301      	adds	r3, #1
 800110a:	733b      	strb	r3, [r7, #12]
 800110c:	7b3b      	ldrb	r3, [r7, #12]
 800110e:	2b07      	cmp	r3, #7
 8001110:	d9bc      	bls.n	800108c <OLED_SmartUpdate+0x2c>
 8001112:	e01c      	b.n	800114e <OLED_SmartUpdate+0xee>
        }
    }
    else
    {
        // 如果未启用差分更新，使用脏页标记
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001114:	2300      	movs	r3, #0
 8001116:	71fb      	strb	r3, [r7, #7]
 8001118:	e016      	b.n	8001148 <OLED_SmartUpdate+0xe8>
        {
            if (oled_dirty_pages[i])
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	4a1b      	ldr	r2, [pc, #108]	@ (800118c <OLED_SmartUpdate+0x12c>)
 800111e:	5cd3      	ldrb	r3, [r2, r3]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00d      	beq.n	8001142 <OLED_SmartUpdate+0xe2>
            {
                has_dirty = 1;
 8001126:	2301      	movs	r3, #1
 8001128:	73fb      	strb	r3, [r7, #15]
                if (i < first_dirty)
 800112a:	79fa      	ldrb	r2, [r7, #7]
 800112c:	7bbb      	ldrb	r3, [r7, #14]
 800112e:	429a      	cmp	r2, r3
 8001130:	d201      	bcs.n	8001136 <OLED_SmartUpdate+0xd6>
                    first_dirty = i;
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	73bb      	strb	r3, [r7, #14]
                if (i > last_dirty)
 8001136:	79fa      	ldrb	r2, [r7, #7]
 8001138:	7b7b      	ldrb	r3, [r7, #13]
 800113a:	429a      	cmp	r2, r3
 800113c:	d901      	bls.n	8001142 <OLED_SmartUpdate+0xe2>
                    last_dirty = i;
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	737b      	strb	r3, [r7, #13]
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	3301      	adds	r3, #1
 8001146:	71fb      	strb	r3, [r7, #7]
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	2b07      	cmp	r3, #7
 800114c:	d9e5      	bls.n	800111a <OLED_SmartUpdate+0xba>
            }
        }
    }

    // 如果有脏页，只更新这些页
    if (has_dirty && fast_update_enabled)
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00a      	beq.n	800116a <OLED_SmartUpdate+0x10a>
 8001154:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <OLED_SmartUpdate+0x130>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d006      	beq.n	800116a <OLED_SmartUpdate+0x10a>
    {
        OLED_UpdateDisplayPartial(first_dirty, last_dirty);
 800115c:	7b7a      	ldrb	r2, [r7, #13]
 800115e:	7bbb      	ldrb	r3, [r7, #14]
 8001160:	4611      	mov	r1, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fdec 	bl	8000d40 <OLED_UpdateDisplayPartial>
 8001168:	e006      	b.n	8001178 <OLED_SmartUpdate+0x118>
    }
    else if (has_dirty)
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <OLED_SmartUpdate+0x118>
    {
        OLED_UpdateDisplayVSync();
 8001170:	f7ff fd8e 	bl	8000c90 <OLED_UpdateDisplayVSync>
 8001174:	e000      	b.n	8001178 <OLED_SmartUpdate+0x118>
        return;
 8001176:	bf00      	nop
    }
}
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000d2c 	.word	0x20000d2c
 8001184:	20000128 	.word	0x20000128
 8001188:	2000092c 	.word	0x2000092c
 800118c:	20000120 	.word	0x20000120
 8001190:	20000000 	.word	0x20000000

08001194 <EaseLinear>:
#include "stdint.h" // 添加 stdint.h 以支持标准整数类型
#include "oled_ui.h"
#pragma region TWEENS // 动画缓动函数全部在这里定义

static float EaseLinear(float t)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
    return t;
 800119c:	687b      	ldr	r3, [r7, #4]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <EaseInQuad>:

static float EaseInQuad(float t)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
    return t * t;
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff f8d8 	bl	8000368 <__aeabi_fmul>
 80011b8:	4603      	mov	r3, r0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <EaseOutQuad>:

static float EaseOutQuad(float t)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
    return t * (2 - t);
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80011d0:	f7fe ffc0 	bl	8000154 <__aeabi_fsub>
 80011d4:	4603      	mov	r3, r0
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f8c5 	bl	8000368 <__aeabi_fmul>
 80011de:	4603      	mov	r3, r0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <EaseInOutQuad>:

static float EaseInOutQuad(float t)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 2 * t * t : -1 + (4 - 2 * t) * t;
 80011f0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff fa55 	bl	80006a4 <__aeabi_fcmplt>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00b      	beq.n	8001218 <EaseInOutQuad+0x30>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4619      	mov	r1, r3
 8001204:	4618      	mov	r0, r3
 8001206:	f7fe ffa7 	bl	8000158 <__addsf3>
 800120a:	4603      	mov	r3, r0
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f8aa 	bl	8000368 <__aeabi_fmul>
 8001214:	4603      	mov	r3, r0
 8001216:	e016      	b.n	8001246 <EaseInOutQuad+0x5e>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4619      	mov	r1, r3
 800121c:	4618      	mov	r0, r3
 800121e:	f7fe ff9b 	bl	8000158 <__addsf3>
 8001222:	4603      	mov	r3, r0
 8001224:	4619      	mov	r1, r3
 8001226:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 800122a:	f7fe ff93 	bl	8000154 <__aeabi_fsub>
 800122e:	4603      	mov	r3, r0
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f898 	bl	8000368 <__aeabi_fmul>
 8001238:	4603      	mov	r3, r0
 800123a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800123e:	4618      	mov	r0, r3
 8001240:	f7fe ff88 	bl	8000154 <__aeabi_fsub>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <EaseInCubic>:

static float EaseInCubic(float t)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
    return t * t * t;
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff f885 	bl	8000368 <__aeabi_fmul>
 800125e:	4603      	mov	r3, r0
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f880 	bl	8000368 <__aeabi_fmul>
 8001268:	4603      	mov	r3, r0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <EaseOutCubic>:

static float EaseOutCubic(float t)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b084      	sub	sp, #16
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
    float t1 = t - 1;
 800127a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7fe ff68 	bl	8000154 <__aeabi_fsub>
 8001284:	4603      	mov	r3, r0
 8001286:	60fb      	str	r3, [r7, #12]
    return t1 * t1 * t1 + 1;
 8001288:	68f9      	ldr	r1, [r7, #12]
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f7ff f86c 	bl	8000368 <__aeabi_fmul>
 8001290:	4603      	mov	r3, r0
 8001292:	68f9      	ldr	r1, [r7, #12]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f867 	bl	8000368 <__aeabi_fmul>
 800129a:	4603      	mov	r3, r0
 800129c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7fe ff59 	bl	8000158 <__addsf3>
 80012a6:	4603      	mov	r3, r0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <EaseInOutCubic>:

static float EaseInOutCubic(float t)
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
 80012b8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff f9f1 	bl	80006a4 <__aeabi_fcmplt>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d010      	beq.n	80012ea <EaseInOutCubic+0x3a>
 80012c8:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff f84b 	bl	8000368 <__aeabi_fmul>
 80012d2:	4603      	mov	r3, r0
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f846 	bl	8000368 <__aeabi_fmul>
 80012dc:	4603      	mov	r3, r0
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f841 	bl	8000368 <__aeabi_fmul>
 80012e6:	4603      	mov	r3, r0
 80012e8:	e02f      	b.n	800134a <EaseInOutCubic+0x9a>
 80012ea:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7fe ff30 	bl	8000154 <__aeabi_fsub>
 80012f4:	4603      	mov	r3, r0
 80012f6:	461c      	mov	r4, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4619      	mov	r1, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7fe ff2b 	bl	8000158 <__addsf3>
 8001302:	4603      	mov	r3, r0
 8001304:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001308:	4618      	mov	r0, r3
 800130a:	f7fe ff23 	bl	8000154 <__aeabi_fsub>
 800130e:	4603      	mov	r3, r0
 8001310:	4619      	mov	r1, r3
 8001312:	4620      	mov	r0, r4
 8001314:	f7ff f828 	bl	8000368 <__aeabi_fmul>
 8001318:	4603      	mov	r3, r0
 800131a:	461c      	mov	r4, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4619      	mov	r1, r3
 8001320:	4618      	mov	r0, r3
 8001322:	f7fe ff19 	bl	8000158 <__addsf3>
 8001326:	4603      	mov	r3, r0
 8001328:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800132c:	4618      	mov	r0, r3
 800132e:	f7fe ff11 	bl	8000154 <__aeabi_fsub>
 8001332:	4603      	mov	r3, r0
 8001334:	4619      	mov	r1, r3
 8001336:	4620      	mov	r0, r4
 8001338:	f7ff f816 	bl	8000368 <__aeabi_fmul>
 800133c:	4603      	mov	r3, r0
 800133e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001342:	4618      	mov	r0, r3
 8001344:	f7fe ff08 	bl	8000158 <__addsf3>
 8001348:	4603      	mov	r3, r0
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}
	...

08001354 <EaseInExpo>:

// 在现有EaseType_t枚举中添加这些新类型
// 指数缓动
static float EaseInExpo(float t)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
    return (t == 0) ? 0 : powf(2, 10 * (t - 1));
 800135c:	f04f 0100 	mov.w	r1, #0
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff f995 	bl	8000690 <__aeabi_fcmpeq>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d111      	bne.n	8001390 <EaseInExpo+0x3c>
 800136c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7fe feef 	bl	8000154 <__aeabi_fsub>
 8001376:	4603      	mov	r3, r0
 8001378:	4908      	ldr	r1, [pc, #32]	@ (800139c <EaseInExpo+0x48>)
 800137a:	4618      	mov	r0, r3
 800137c:	f7fe fff4 	bl	8000368 <__aeabi_fmul>
 8001380:	4603      	mov	r3, r0
 8001382:	4619      	mov	r1, r3
 8001384:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001388:	f003 f9ae 	bl	80046e8 <powf>
 800138c:	4603      	mov	r3, r0
 800138e:	e001      	b.n	8001394 <EaseInExpo+0x40>
 8001390:	f04f 0300 	mov.w	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	41200000 	.word	0x41200000

080013a0 <EaseOutExpo>:

static float EaseOutExpo(float t)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
    return (t == 1) ? 1 : (1 - powf(2, -10 * t));
 80013a8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff f96f 	bl	8000690 <__aeabi_fcmpeq>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d111      	bne.n	80013dc <EaseOutExpo+0x3c>
 80013b8:	490b      	ldr	r1, [pc, #44]	@ (80013e8 <EaseOutExpo+0x48>)
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7fe ffd4 	bl	8000368 <__aeabi_fmul>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4619      	mov	r1, r3
 80013c4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80013c8:	f003 f98e 	bl	80046e8 <powf>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4619      	mov	r1, r3
 80013d0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80013d4:	f7fe febe 	bl	8000154 <__aeabi_fsub>
 80013d8:	4603      	mov	r3, r0
 80013da:	e001      	b.n	80013e0 <EaseOutExpo+0x40>
 80013dc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	c1200000 	.word	0xc1200000

080013ec <EaseInOutExpo>:

static float EaseInOutExpo(float t)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
    if (t == 0)
 80013f4:	f04f 0100 	mov.w	r1, #0
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff f949 	bl	8000690 <__aeabi_fcmpeq>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d002      	beq.n	800140a <EaseInOutExpo+0x1e>
        return 0;
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	e045      	b.n	8001496 <EaseInOutExpo+0xaa>
    if (t == 1)
 800140a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff f93e 	bl	8000690 <__aeabi_fcmpeq>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <EaseInOutExpo+0x34>
        return 1;
 800141a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800141e:	e03a      	b.n	8001496 <EaseInOutExpo+0xaa>
    if (t < 0.5f)
 8001420:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff f93d 	bl	80006a4 <__aeabi_fcmplt>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d016      	beq.n	800145e <EaseInOutExpo+0x72>
        return powf(2, 20 * t - 10) / 2;
 8001430:	491b      	ldr	r1, [pc, #108]	@ (80014a0 <EaseInOutExpo+0xb4>)
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7fe ff98 	bl	8000368 <__aeabi_fmul>
 8001438:	4603      	mov	r3, r0
 800143a:	491a      	ldr	r1, [pc, #104]	@ (80014a4 <EaseInOutExpo+0xb8>)
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe fe89 	bl	8000154 <__aeabi_fsub>
 8001442:	4603      	mov	r3, r0
 8001444:	4619      	mov	r1, r3
 8001446:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800144a:	f003 f94d 	bl	80046e8 <powf>
 800144e:	4603      	mov	r3, r0
 8001450:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f83b 	bl	80004d0 <__aeabi_fdiv>
 800145a:	4603      	mov	r3, r0
 800145c:	e01b      	b.n	8001496 <EaseInOutExpo+0xaa>
    return (2 - powf(2, -20 * t + 10)) / 2;
 800145e:	4912      	ldr	r1, [pc, #72]	@ (80014a8 <EaseInOutExpo+0xbc>)
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7fe ff81 	bl	8000368 <__aeabi_fmul>
 8001466:	4603      	mov	r3, r0
 8001468:	490e      	ldr	r1, [pc, #56]	@ (80014a4 <EaseInOutExpo+0xb8>)
 800146a:	4618      	mov	r0, r3
 800146c:	f7fe fe74 	bl	8000158 <__addsf3>
 8001470:	4603      	mov	r3, r0
 8001472:	4619      	mov	r1, r3
 8001474:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001478:	f003 f936 	bl	80046e8 <powf>
 800147c:	4603      	mov	r3, r0
 800147e:	4619      	mov	r1, r3
 8001480:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001484:	f7fe fe66 	bl	8000154 <__aeabi_fsub>
 8001488:	4603      	mov	r3, r0
 800148a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f81e 	bl	80004d0 <__aeabi_fdiv>
 8001494:	4603      	mov	r3, r0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	41a00000 	.word	0x41a00000
 80014a4:	41200000 	.word	0x41200000
 80014a8:	c1a00000 	.word	0xc1a00000

080014ac <EaseInCirc>:

// 圆形曲线缓动
static float EaseInCirc(float t)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
    return 1 - sqrtf(1 - t * t);
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7fe ff56 	bl	8000368 <__aeabi_fmul>
 80014bc:	4603      	mov	r3, r0
 80014be:	4619      	mov	r1, r3
 80014c0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80014c4:	f7fe fe46 	bl	8000154 <__aeabi_fsub>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f003 f959 	bl	8004782 <sqrtf>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4619      	mov	r1, r3
 80014d4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80014d8:	f7fe fe3c 	bl	8000154 <__aeabi_fsub>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <EaseOutCirc>:

static float EaseOutCirc(float t)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
    return sqrtf(1 - powf(t - 1, 2));
 80014ee:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7fe fe2e 	bl	8000154 <__aeabi_fsub>
 80014f8:	4603      	mov	r3, r0
 80014fa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80014fe:	4618      	mov	r0, r3
 8001500:	f003 f8f2 	bl	80046e8 <powf>
 8001504:	4603      	mov	r3, r0
 8001506:	4619      	mov	r1, r3
 8001508:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800150c:	f7fe fe22 	bl	8000154 <__aeabi_fsub>
 8001510:	4603      	mov	r3, r0
 8001512:	4618      	mov	r0, r3
 8001514:	f003 f935 	bl	8004782 <sqrtf>
 8001518:	4603      	mov	r3, r0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <EaseInOutCirc>:

static float EaseInOutCirc(float t)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 800152a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff f8b8 	bl	80006a4 <__aeabi_fcmplt>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d022      	beq.n	8001580 <EaseInOutCirc+0x5e>
        return (1 - sqrtf(1 - powf(2 * t, 2))) / 2;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4619      	mov	r1, r3
 800153e:	4618      	mov	r0, r3
 8001540:	f7fe fe0a 	bl	8000158 <__addsf3>
 8001544:	4603      	mov	r3, r0
 8001546:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800154a:	4618      	mov	r0, r3
 800154c:	f003 f8cc 	bl	80046e8 <powf>
 8001550:	4603      	mov	r3, r0
 8001552:	4619      	mov	r1, r3
 8001554:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001558:	f7fe fdfc 	bl	8000154 <__aeabi_fsub>
 800155c:	4603      	mov	r3, r0
 800155e:	4618      	mov	r0, r3
 8001560:	f003 f90f 	bl	8004782 <sqrtf>
 8001564:	4603      	mov	r3, r0
 8001566:	4619      	mov	r1, r3
 8001568:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800156c:	f7fe fdf2 	bl	8000154 <__aeabi_fsub>
 8001570:	4603      	mov	r3, r0
 8001572:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ffaa 	bl	80004d0 <__aeabi_fdiv>
 800157c:	4603      	mov	r3, r0
 800157e:	e027      	b.n	80015d0 <EaseInOutCirc+0xae>
    return (sqrtf(1 - powf(-2 * t + 2, 2)) + 1) / 2;
 8001580:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7fe feef 	bl	8000368 <__aeabi_fmul>
 800158a:	4603      	mov	r3, r0
 800158c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe fde1 	bl	8000158 <__addsf3>
 8001596:	4603      	mov	r3, r0
 8001598:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800159c:	4618      	mov	r0, r3
 800159e:	f003 f8a3 	bl	80046e8 <powf>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4619      	mov	r1, r3
 80015a6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80015aa:	f7fe fdd3 	bl	8000154 <__aeabi_fsub>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f003 f8e6 	bl	8004782 <sqrtf>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe fdcb 	bl	8000158 <__addsf3>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ff81 	bl	80004d0 <__aeabi_fdiv>
 80015ce:	4603      	mov	r3, r0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <EaseInElastic>:

// 弹性缓动
static float EaseInElastic(float t)
{
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 80015e0:	4b22      	ldr	r3, [pc, #136]	@ (800166c <EaseInElastic+0x94>)
 80015e2:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 80015e4:	f04f 0100 	mov.w	r1, #0
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff f851 	bl	8000690 <__aeabi_fcmpeq>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d002      	beq.n	80015fa <EaseInElastic+0x22>
        return 0;
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	e034      	b.n	8001664 <EaseInElastic+0x8c>
    if (t == 1)
 80015fa:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff f846 	bl	8000690 <__aeabi_fcmpeq>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <EaseInElastic+0x38>
        return 1;
 800160a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800160e:	e029      	b.n	8001664 <EaseInElastic+0x8c>
    return -powf(2, 10 * t - 10) * sinf((t * 10 - 10.75f) * c4);
 8001610:	4917      	ldr	r1, [pc, #92]	@ (8001670 <EaseInElastic+0x98>)
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7fe fea8 	bl	8000368 <__aeabi_fmul>
 8001618:	4603      	mov	r3, r0
 800161a:	4915      	ldr	r1, [pc, #84]	@ (8001670 <EaseInElastic+0x98>)
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe fd99 	bl	8000154 <__aeabi_fsub>
 8001622:	4603      	mov	r3, r0
 8001624:	4619      	mov	r1, r3
 8001626:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800162a:	f003 f85d 	bl	80046e8 <powf>
 800162e:	4603      	mov	r3, r0
 8001630:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8001634:	490e      	ldr	r1, [pc, #56]	@ (8001670 <EaseInElastic+0x98>)
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7fe fe96 	bl	8000368 <__aeabi_fmul>
 800163c:	4603      	mov	r3, r0
 800163e:	490d      	ldr	r1, [pc, #52]	@ (8001674 <EaseInElastic+0x9c>)
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe fd87 	bl	8000154 <__aeabi_fsub>
 8001646:	4603      	mov	r3, r0
 8001648:	68f9      	ldr	r1, [r7, #12]
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe fe8c 	bl	8000368 <__aeabi_fmul>
 8001650:	4603      	mov	r3, r0
 8001652:	4618      	mov	r0, r3
 8001654:	f003 f8e8 	bl	8004828 <sinf>
 8001658:	4603      	mov	r3, r0
 800165a:	4619      	mov	r1, r3
 800165c:	4620      	mov	r0, r4
 800165e:	f7fe fe83 	bl	8000368 <__aeabi_fmul>
 8001662:	4603      	mov	r3, r0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	bd90      	pop	{r4, r7, pc}
 800166c:	40060a8b 	.word	0x40060a8b
 8001670:	41200000 	.word	0x41200000
 8001674:	412c0000 	.word	0x412c0000

08001678 <EaseOutElastic>:

static float EaseOutElastic(float t)
{
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 8001680:	4b22      	ldr	r3, [pc, #136]	@ (800170c <EaseOutElastic+0x94>)
 8001682:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8001684:	f04f 0100 	mov.w	r1, #0
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff f801 	bl	8000690 <__aeabi_fcmpeq>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d002      	beq.n	800169a <EaseOutElastic+0x22>
        return 0;
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	e034      	b.n	8001704 <EaseOutElastic+0x8c>
    if (t == 1)
 800169a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7fe fff6 	bl	8000690 <__aeabi_fcmpeq>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d002      	beq.n	80016b0 <EaseOutElastic+0x38>
        return 1;
 80016aa:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80016ae:	e029      	b.n	8001704 <EaseOutElastic+0x8c>
    return powf(2, -10 * t) * sinf((t * 10 - 0.75f) * c4) + 1;
 80016b0:	4917      	ldr	r1, [pc, #92]	@ (8001710 <EaseOutElastic+0x98>)
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7fe fe58 	bl	8000368 <__aeabi_fmul>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4619      	mov	r1, r3
 80016bc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016c0:	f003 f812 	bl	80046e8 <powf>
 80016c4:	4604      	mov	r4, r0
 80016c6:	4913      	ldr	r1, [pc, #76]	@ (8001714 <EaseOutElastic+0x9c>)
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7fe fe4d 	bl	8000368 <__aeabi_fmul>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fd3d 	bl	8000154 <__aeabi_fsub>
 80016da:	4603      	mov	r3, r0
 80016dc:	68f9      	ldr	r1, [r7, #12]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe fe42 	bl	8000368 <__aeabi_fmul>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f003 f89e 	bl	8004828 <sinf>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4619      	mov	r1, r3
 80016f0:	4620      	mov	r0, r4
 80016f2:	f7fe fe39 	bl	8000368 <__aeabi_fmul>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fd2b 	bl	8000158 <__addsf3>
 8001702:	4603      	mov	r3, r0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	bd90      	pop	{r4, r7, pc}
 800170c:	40060a8b 	.word	0x40060a8b
 8001710:	c1200000 	.word	0xc1200000
 8001714:	41200000 	.word	0x41200000

08001718 <EaseInOutElastic>:

static float EaseInOutElastic(float t)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
    const float c5 = (2 * 3.14159f) / 4.5f;
 8001720:	4b44      	ldr	r3, [pc, #272]	@ (8001834 <EaseInOutElastic+0x11c>)
 8001722:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8001724:	f04f 0100 	mov.w	r1, #0
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7fe ffb1 	bl	8000690 <__aeabi_fcmpeq>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <EaseInOutElastic+0x22>
        return 0;
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	e077      	b.n	800182a <EaseInOutElastic+0x112>
    if (t == 1)
 800173a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7fe ffa6 	bl	8000690 <__aeabi_fcmpeq>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <EaseInOutElastic+0x38>
        return 1;
 800174a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800174e:	e06c      	b.n	800182a <EaseInOutElastic+0x112>
    if (t < 0.5f)
 8001750:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7fe ffa5 	bl	80006a4 <__aeabi_fcmplt>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d030      	beq.n	80017c2 <EaseInOutElastic+0xaa>
        return -(powf(2, 20 * t - 10) * sinf((20 * t - 11.125f) * c5)) / 2;
 8001760:	4935      	ldr	r1, [pc, #212]	@ (8001838 <EaseInOutElastic+0x120>)
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7fe fe00 	bl	8000368 <__aeabi_fmul>
 8001768:	4603      	mov	r3, r0
 800176a:	4934      	ldr	r1, [pc, #208]	@ (800183c <EaseInOutElastic+0x124>)
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fcf1 	bl	8000154 <__aeabi_fsub>
 8001772:	4603      	mov	r3, r0
 8001774:	4619      	mov	r1, r3
 8001776:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800177a:	f002 ffb5 	bl	80046e8 <powf>
 800177e:	4604      	mov	r4, r0
 8001780:	492d      	ldr	r1, [pc, #180]	@ (8001838 <EaseInOutElastic+0x120>)
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7fe fdf0 	bl	8000368 <__aeabi_fmul>
 8001788:	4603      	mov	r3, r0
 800178a:	492d      	ldr	r1, [pc, #180]	@ (8001840 <EaseInOutElastic+0x128>)
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fce1 	bl	8000154 <__aeabi_fsub>
 8001792:	4603      	mov	r3, r0
 8001794:	68f9      	ldr	r1, [r7, #12]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fde6 	bl	8000368 <__aeabi_fmul>
 800179c:	4603      	mov	r3, r0
 800179e:	4618      	mov	r0, r3
 80017a0:	f003 f842 	bl	8004828 <sinf>
 80017a4:	4603      	mov	r3, r0
 80017a6:	4619      	mov	r1, r3
 80017a8:	4620      	mov	r0, r4
 80017aa:	f7fe fddd 	bl	8000368 <__aeabi_fmul>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80017b4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fe89 	bl	80004d0 <__aeabi_fdiv>
 80017be:	4603      	mov	r3, r0
 80017c0:	e033      	b.n	800182a <EaseInOutElastic+0x112>
    return (powf(2, -20 * t + 10) * sinf((20 * t - 11.125f) * c5)) / 2 + 1;
 80017c2:	4920      	ldr	r1, [pc, #128]	@ (8001844 <EaseInOutElastic+0x12c>)
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7fe fdcf 	bl	8000368 <__aeabi_fmul>
 80017ca:	4603      	mov	r3, r0
 80017cc:	491b      	ldr	r1, [pc, #108]	@ (800183c <EaseInOutElastic+0x124>)
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fcc2 	bl	8000158 <__addsf3>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4619      	mov	r1, r3
 80017d8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80017dc:	f002 ff84 	bl	80046e8 <powf>
 80017e0:	4604      	mov	r4, r0
 80017e2:	4915      	ldr	r1, [pc, #84]	@ (8001838 <EaseInOutElastic+0x120>)
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7fe fdbf 	bl	8000368 <__aeabi_fmul>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4914      	ldr	r1, [pc, #80]	@ (8001840 <EaseInOutElastic+0x128>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe fcb0 	bl	8000154 <__aeabi_fsub>
 80017f4:	4603      	mov	r3, r0
 80017f6:	68f9      	ldr	r1, [r7, #12]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fdb5 	bl	8000368 <__aeabi_fmul>
 80017fe:	4603      	mov	r3, r0
 8001800:	4618      	mov	r0, r3
 8001802:	f003 f811 	bl	8004828 <sinf>
 8001806:	4603      	mov	r3, r0
 8001808:	4619      	mov	r1, r3
 800180a:	4620      	mov	r0, r4
 800180c:	f7fe fdac 	bl	8000368 <__aeabi_fmul>
 8001810:	4603      	mov	r3, r0
 8001812:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fe5a 	bl	80004d0 <__aeabi_fdiv>
 800181c:	4603      	mov	r3, r0
 800181e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fc98 	bl	8000158 <__addsf3>
 8001828:	4603      	mov	r3, r0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	bd90      	pop	{r4, r7, pc}
 8001832:	bf00      	nop
 8001834:	3fb2b8b9 	.word	0x3fb2b8b9
 8001838:	41a00000 	.word	0x41a00000
 800183c:	41200000 	.word	0x41200000
 8001840:	41320000 	.word	0x41320000
 8001844:	c1a00000 	.word	0xc1a00000

08001848 <EaseOutBounce>:

static float EaseOutBounce(float t)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
    const float n1 = 7.5625f;
 8001850:	4b45      	ldr	r3, [pc, #276]	@ (8001968 <EaseOutBounce+0x120>)
 8001852:	60fb      	str	r3, [r7, #12]
    const float d1 = 2.75f;
 8001854:	4b45      	ldr	r3, [pc, #276]	@ (800196c <EaseOutBounce+0x124>)
 8001856:	60bb      	str	r3, [r7, #8]

    if (t < 1 / d1)
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800185e:	f7fe fe37 	bl	80004d0 <__aeabi_fdiv>
 8001862:	4603      	mov	r3, r0
 8001864:	4619      	mov	r1, r3
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7fe ff1c 	bl	80006a4 <__aeabi_fcmplt>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00a      	beq.n	8001888 <EaseOutBounce+0x40>
    {
        return n1 * t * t;
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f7fe fd77 	bl	8000368 <__aeabi_fmul>
 800187a:	4603      	mov	r3, r0
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fd72 	bl	8000368 <__aeabi_fmul>
 8001884:	4603      	mov	r3, r0
 8001886:	e06a      	b.n	800195e <EaseOutBounce+0x116>
    }
    else if (t < 2 / d1)
 8001888:	68b9      	ldr	r1, [r7, #8]
 800188a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800188e:	f7fe fe1f 	bl	80004d0 <__aeabi_fdiv>
 8001892:	4603      	mov	r3, r0
 8001894:	4619      	mov	r1, r3
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7fe ff04 	bl	80006a4 <__aeabi_fcmplt>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d01c      	beq.n	80018dc <EaseOutBounce+0x94>
    {
        t -= 1.5f / d1;
 80018a2:	68b9      	ldr	r1, [r7, #8]
 80018a4:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 80018a8:	f7fe fe12 	bl	80004d0 <__aeabi_fdiv>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4619      	mov	r1, r3
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7fe fc4f 	bl	8000154 <__aeabi_fsub>
 80018b6:	4603      	mov	r3, r0
 80018b8:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.75f;
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f7fe fd53 	bl	8000368 <__aeabi_fmul>
 80018c2:	4603      	mov	r3, r0
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fd4e 	bl	8000368 <__aeabi_fmul>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fc40 	bl	8000158 <__addsf3>
 80018d8:	4603      	mov	r3, r0
 80018da:	e040      	b.n	800195e <EaseOutBounce+0x116>
    }
    else if (t < 2.5f / d1)
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	4824      	ldr	r0, [pc, #144]	@ (8001970 <EaseOutBounce+0x128>)
 80018e0:	f7fe fdf6 	bl	80004d0 <__aeabi_fdiv>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4619      	mov	r1, r3
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7fe fedb 	bl	80006a4 <__aeabi_fcmplt>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d01a      	beq.n	800192a <EaseOutBounce+0xe2>
    {
        t -= 2.25f / d1;
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	481f      	ldr	r0, [pc, #124]	@ (8001974 <EaseOutBounce+0x12c>)
 80018f8:	f7fe fdea 	bl	80004d0 <__aeabi_fdiv>
 80018fc:	4603      	mov	r3, r0
 80018fe:	4619      	mov	r1, r3
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7fe fc27 	bl	8000154 <__aeabi_fsub>
 8001906:	4603      	mov	r3, r0
 8001908:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.9375f;
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f7fe fd2b 	bl	8000368 <__aeabi_fmul>
 8001912:	4603      	mov	r3, r0
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fd26 	bl	8000368 <__aeabi_fmul>
 800191c:	4603      	mov	r3, r0
 800191e:	4916      	ldr	r1, [pc, #88]	@ (8001978 <EaseOutBounce+0x130>)
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fc19 	bl	8000158 <__addsf3>
 8001926:	4603      	mov	r3, r0
 8001928:	e019      	b.n	800195e <EaseOutBounce+0x116>
    }
    else
    {
        t -= 2.625f / d1;
 800192a:	68b9      	ldr	r1, [r7, #8]
 800192c:	4813      	ldr	r0, [pc, #76]	@ (800197c <EaseOutBounce+0x134>)
 800192e:	f7fe fdcf 	bl	80004d0 <__aeabi_fdiv>
 8001932:	4603      	mov	r3, r0
 8001934:	4619      	mov	r1, r3
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7fe fc0c 	bl	8000154 <__aeabi_fsub>
 800193c:	4603      	mov	r3, r0
 800193e:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.984375f;
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f7fe fd10 	bl	8000368 <__aeabi_fmul>
 8001948:	4603      	mov	r3, r0
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fd0b 	bl	8000368 <__aeabi_fmul>
 8001952:	4603      	mov	r3, r0
 8001954:	490a      	ldr	r1, [pc, #40]	@ (8001980 <EaseOutBounce+0x138>)
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fbfe 	bl	8000158 <__addsf3>
 800195c:	4603      	mov	r3, r0
    }
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40f20000 	.word	0x40f20000
 800196c:	40300000 	.word	0x40300000
 8001970:	40200000 	.word	0x40200000
 8001974:	40100000 	.word	0x40100000
 8001978:	3f700000 	.word	0x3f700000
 800197c:	40280000 	.word	0x40280000
 8001980:	3f7c0000 	.word	0x3f7c0000

08001984 <EaseInBounce>:

// 反弹缓动
static float EaseInBounce(float t)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
    return 1 - EaseOutBounce(1 - t);
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001992:	f7fe fbdf 	bl	8000154 <__aeabi_fsub>
 8001996:	4603      	mov	r3, r0
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff55 	bl	8001848 <EaseOutBounce>
 800199e:	4603      	mov	r3, r0
 80019a0:	4619      	mov	r1, r3
 80019a2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80019a6:	f7fe fbd5 	bl	8000154 <__aeabi_fsub>
 80019aa:	4603      	mov	r3, r0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <EaseInOutBounce>:

static float EaseInOutBounce(float t)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 80019bc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7fe fe6f 	bl	80006a4 <__aeabi_fcmplt>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d010      	beq.n	80019ee <EaseInOutBounce+0x3a>
        return EaseInBounce(t * 2) * 0.5f;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4619      	mov	r1, r3
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fbc1 	bl	8000158 <__addsf3>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ffd3 	bl	8001984 <EaseInBounce>
 80019de:	4603      	mov	r3, r0
 80019e0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fcbf 	bl	8000368 <__aeabi_fmul>
 80019ea:	4603      	mov	r3, r0
 80019ec:	e01b      	b.n	8001a26 <EaseInOutBounce+0x72>
    return EaseOutBounce(t * 2 - 1) * 0.5f + 0.5f;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4619      	mov	r1, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fbb0 	bl	8000158 <__addsf3>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fba8 	bl	8000154 <__aeabi_fsub>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff ff1e 	bl	8001848 <EaseOutBounce>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fca8 	bl	8000368 <__aeabi_fmul>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fb9a 	bl	8000158 <__addsf3>
 8001a24:	4603      	mov	r3, r0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <EaseInBack>:

// 背越式缓动
static float EaseInBack(float t)
{
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8001a38:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <EaseInBack+0x60>)
 8001a3a:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8001a3c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f7fe fb89 	bl	8000158 <__addsf3>
 8001a46:	4603      	mov	r3, r0
 8001a48:	60bb      	str	r3, [r7, #8]

    return c3 * t * t * t - c1 * t * t;
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	68b8      	ldr	r0, [r7, #8]
 8001a4e:	f7fe fc8b 	bl	8000368 <__aeabi_fmul>
 8001a52:	4603      	mov	r3, r0
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fc86 	bl	8000368 <__aeabi_fmul>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe fc81 	bl	8000368 <__aeabi_fmul>
 8001a66:	4603      	mov	r3, r0
 8001a68:	461c      	mov	r4, r3
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f7fe fc7b 	bl	8000368 <__aeabi_fmul>
 8001a72:	4603      	mov	r3, r0
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fc76 	bl	8000368 <__aeabi_fmul>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4620      	mov	r0, r4
 8001a82:	f7fe fb67 	bl	8000154 <__aeabi_fsub>
 8001a86:	4603      	mov	r3, r0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd90      	pop	{r4, r7, pc}
 8001a90:	3fd9cd60 	.word	0x3fd9cd60

08001a94 <EaseOutBack>:

static float EaseOutBack(float t)
{
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8001a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b10 <EaseOutBack+0x7c>)
 8001a9e:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8001aa0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f7fe fb57 	bl	8000158 <__addsf3>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	60bb      	str	r3, [r7, #8]

    return 1 + c3 * powf(t - 1, 3) + c1 * powf(t - 1, 2);
 8001aae:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7fe fb4e 	bl	8000154 <__aeabi_fsub>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4916      	ldr	r1, [pc, #88]	@ (8001b14 <EaseOutBack+0x80>)
 8001abc:	4618      	mov	r0, r3
 8001abe:	f002 fe13 	bl	80046e8 <powf>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fc4e 	bl	8000368 <__aeabi_fmul>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fb40 	bl	8000158 <__addsf3>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461c      	mov	r4, r3
 8001adc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7fe fb37 	bl	8000154 <__aeabi_fsub>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001aec:	4618      	mov	r0, r3
 8001aee:	f002 fdfb 	bl	80046e8 <powf>
 8001af2:	4603      	mov	r3, r0
 8001af4:	68f9      	ldr	r1, [r7, #12]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fc36 	bl	8000368 <__aeabi_fmul>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4619      	mov	r1, r3
 8001b00:	4620      	mov	r0, r4
 8001b02:	f7fe fb29 	bl	8000158 <__addsf3>
 8001b06:	4603      	mov	r3, r0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd90      	pop	{r4, r7, pc}
 8001b10:	3fd9cd60 	.word	0x3fd9cd60
 8001b14:	40400000 	.word	0x40400000

08001b18 <EaseInOutBack>:

static float EaseInOutBack(float t)
{
 8001b18:	b5b0      	push	{r4, r5, r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8001b20:	4b40      	ldr	r3, [pc, #256]	@ (8001c24 <EaseInOutBack+0x10c>)
 8001b22:	60fb      	str	r3, [r7, #12]
    const float c2 = c1 * 1.525f;
 8001b24:	4940      	ldr	r1, [pc, #256]	@ (8001c28 <EaseInOutBack+0x110>)
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f7fe fc1e 	bl	8000368 <__aeabi_fmul>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	60bb      	str	r3, [r7, #8]

    if (t < 0.5f)
 8001b30:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7fe fdb5 	bl	80006a4 <__aeabi_fcmplt>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d02c      	beq.n	8001b9a <EaseInOutBack+0x82>
        return (powf(2 * t, 2) * ((c2 + 1) * 2 * t - c2)) / 2;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4619      	mov	r1, r3
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fb07 	bl	8000158 <__addsf3>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 fdc9 	bl	80046e8 <powf>
 8001b56:	4604      	mov	r4, r0
 8001b58:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001b5c:	68b8      	ldr	r0, [r7, #8]
 8001b5e:	f7fe fafb 	bl	8000158 <__addsf3>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4619      	mov	r1, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe faf6 	bl	8000158 <__addsf3>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fbf9 	bl	8000368 <__aeabi_fmul>
 8001b76:	4603      	mov	r3, r0
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe faea 	bl	8000154 <__aeabi_fsub>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4619      	mov	r1, r3
 8001b84:	4620      	mov	r0, r4
 8001b86:	f7fe fbef 	bl	8000368 <__aeabi_fmul>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fc9d 	bl	80004d0 <__aeabi_fdiv>
 8001b96:	4603      	mov	r3, r0
 8001b98:	e03f      	b.n	8001c1a <EaseInOutBack+0x102>
    return (powf(2 * t - 2, 2) * ((c2 + 1) * (t * 2 - 2) + c2) + 2) / 2;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fada 	bl	8000158 <__addsf3>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fad2 	bl	8000154 <__aeabi_fsub>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f002 fd96 	bl	80046e8 <powf>
 8001bbc:	4604      	mov	r4, r0
 8001bbe:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001bc2:	68b8      	ldr	r0, [r7, #8]
 8001bc4:	f7fe fac8 	bl	8000158 <__addsf3>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	461d      	mov	r5, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fac1 	bl	8000158 <__addsf3>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fab9 	bl	8000154 <__aeabi_fsub>
 8001be2:	4603      	mov	r3, r0
 8001be4:	4619      	mov	r1, r3
 8001be6:	4628      	mov	r0, r5
 8001be8:	f7fe fbbe 	bl	8000368 <__aeabi_fmul>
 8001bec:	4603      	mov	r3, r0
 8001bee:	68b9      	ldr	r1, [r7, #8]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fab1 	bl	8000158 <__addsf3>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f7fe fbb4 	bl	8000368 <__aeabi_fmul>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe faa6 	bl	8000158 <__addsf3>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fc5c 	bl	80004d0 <__aeabi_fdiv>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bdb0      	pop	{r4, r5, r7, pc}
 8001c22:	bf00      	nop
 8001c24:	3fd9cd60 	.word	0x3fd9cd60
 8001c28:	3fc33333 	.word	0x3fc33333

08001c2c <EaseInSine>:

// 正弦缓动
static float EaseInSine(float t)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
    return 1 - cosf((t * 3.14159f) / 2);
 8001c34:	490c      	ldr	r1, [pc, #48]	@ (8001c68 <EaseInSine+0x3c>)
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7fe fb96 	bl	8000368 <__aeabi_fmul>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fc44 	bl	80004d0 <__aeabi_fdiv>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f002 fdb4 	bl	80047b8 <cosf>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001c58:	f7fe fa7c 	bl	8000154 <__aeabi_fsub>
 8001c5c:	4603      	mov	r3, r0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40490fd0 	.word	0x40490fd0

08001c6c <EaseOutSine>:

static float EaseOutSine(float t)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    return sinf((t * 3.14159f) / 2);
 8001c74:	4909      	ldr	r1, [pc, #36]	@ (8001c9c <EaseOutSine+0x30>)
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7fe fb76 	bl	8000368 <__aeabi_fmul>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fc24 	bl	80004d0 <__aeabi_fdiv>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f002 fdcc 	bl	8004828 <sinf>
 8001c90:	4603      	mov	r3, r0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40490fd0 	.word	0x40490fd0

08001ca0 <EaseInOutSine>:

static float EaseInOutSine(float t)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
    return -(cosf(3.14159f * t) - 1) / 2;
 8001ca8:	490d      	ldr	r1, [pc, #52]	@ (8001ce0 <EaseInOutSine+0x40>)
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7fe fb5c 	bl	8000368 <__aeabi_fmul>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f002 fd80 	bl	80047b8 <cosf>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe fa48 	bl	8000154 <__aeabi_fsub>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001cca:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fbfe 	bl	80004d0 <__aeabi_fdiv>
 8001cd4:	4603      	mov	r3, r0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40490fd0 	.word	0x40490fd0

08001ce4 <GetEaseValue>:

static float GetEaseValue(float progress, EaseType_t easeType)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	70fb      	strb	r3, [r7, #3]
    switch (easeType)
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	2b18      	cmp	r3, #24
 8001cf4:	f200 80b3 	bhi.w	8001e5e <GetEaseValue+0x17a>
 8001cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8001d00 <GetEaseValue+0x1c>)
 8001cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfe:	bf00      	nop
 8001d00:	08001d65 	.word	0x08001d65
 8001d04:	08001d6f 	.word	0x08001d6f
 8001d08:	08001d79 	.word	0x08001d79
 8001d0c:	08001d83 	.word	0x08001d83
 8001d10:	08001d8d 	.word	0x08001d8d
 8001d14:	08001d97 	.word	0x08001d97
 8001d18:	08001da1 	.word	0x08001da1
 8001d1c:	08001dab 	.word	0x08001dab
 8001d20:	08001db5 	.word	0x08001db5
 8001d24:	08001dbf 	.word	0x08001dbf
 8001d28:	08001dc9 	.word	0x08001dc9
 8001d2c:	08001dd3 	.word	0x08001dd3
 8001d30:	08001ddd 	.word	0x08001ddd
 8001d34:	08001de7 	.word	0x08001de7
 8001d38:	08001df1 	.word	0x08001df1
 8001d3c:	08001dfb 	.word	0x08001dfb
 8001d40:	08001e05 	.word	0x08001e05
 8001d44:	08001e0f 	.word	0x08001e0f
 8001d48:	08001e19 	.word	0x08001e19
 8001d4c:	08001e23 	.word	0x08001e23
 8001d50:	08001e2d 	.word	0x08001e2d
 8001d54:	08001e37 	.word	0x08001e37
 8001d58:	08001e41 	.word	0x08001e41
 8001d5c:	08001e4b 	.word	0x08001e4b
 8001d60:	08001e55 	.word	0x08001e55
    {
    case EASE_LINEAR:
        return EaseLinear(progress);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff fa15 	bl	8001194 <EaseLinear>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	e078      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_IN_QUAD:
        return EaseInQuad(progress);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff fa1a 	bl	80011a8 <EaseInQuad>
 8001d74:	4603      	mov	r3, r0
 8001d76:	e073      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_OUT_QUAD:
        return EaseOutQuad(progress);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff fa22 	bl	80011c2 <EaseOutQuad>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	e06e      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_INOUT_QUAD:
        return EaseInOutQuad(progress);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff fa30 	bl	80011e8 <EaseInOutQuad>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	e069      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_IN_CUBIC:
        return EaseInCubic(progress);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff fa5e 	bl	800124e <EaseInCubic>
 8001d92:	4603      	mov	r3, r0
 8001d94:	e064      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_OUT_CUBIC:
        return EaseOutCubic(progress);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff fa6b 	bl	8001272 <EaseOutCubic>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	e05f      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_INOUT_CUBIC:
        return EaseInOutCubic(progress);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff fa85 	bl	80012b0 <EaseInOutCubic>
 8001da6:	4603      	mov	r3, r0
 8001da8:	e05a      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_IN_EXPO:
        return EaseInExpo(progress);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff fad2 	bl	8001354 <EaseInExpo>
 8001db0:	4603      	mov	r3, r0
 8001db2:	e055      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_OUT_EXPO:
        return EaseOutExpo(progress);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff faf3 	bl	80013a0 <EaseOutExpo>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	e050      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_INOUT_EXPO:
        return EaseInOutExpo(progress);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff fb14 	bl	80013ec <EaseInOutExpo>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	e04b      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_IN_CIRC:
        return EaseInCirc(progress);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff fb6f 	bl	80014ac <EaseInCirc>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	e046      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_OUT_CIRC:
        return EaseOutCirc(progress);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff fb87 	bl	80014e6 <EaseOutCirc>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	e041      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_INOUT_CIRC:
        return EaseInOutCirc(progress);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff fba0 	bl	8001522 <EaseInOutCirc>
 8001de2:	4603      	mov	r3, r0
 8001de4:	e03c      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_IN_ELASTIC:
        return EaseInElastic(progress);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff fbf6 	bl	80015d8 <EaseInElastic>
 8001dec:	4603      	mov	r3, r0
 8001dee:	e037      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_OUT_ELASTIC:
        return EaseOutElastic(progress);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff fc41 	bl	8001678 <EaseOutElastic>
 8001df6:	4603      	mov	r3, r0
 8001df8:	e032      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_INOUT_ELASTIC:
        return EaseInOutElastic(progress);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff fc8c 	bl	8001718 <EaseInOutElastic>
 8001e00:	4603      	mov	r3, r0
 8001e02:	e02d      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_IN_BOUNCE:
        return EaseInBounce(progress);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff fdbd 	bl	8001984 <EaseInBounce>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	e028      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_OUT_BOUNCE:
        return EaseOutBounce(progress);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fd1a 	bl	8001848 <EaseOutBounce>
 8001e14:	4603      	mov	r3, r0
 8001e16:	e023      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_INOUT_BOUNCE:
        return EaseInOutBounce(progress);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff fdcb 	bl	80019b4 <EaseInOutBounce>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	e01e      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_IN_BACK:
        return EaseInBack(progress);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff fe04 	bl	8001a30 <EaseInBack>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	e019      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_OUT_BACK:
        return EaseOutBack(progress);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff fe31 	bl	8001a94 <EaseOutBack>
 8001e32:	4603      	mov	r3, r0
 8001e34:	e014      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_INOUT_BACK:
        return EaseInOutBack(progress);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff fe6e 	bl	8001b18 <EaseInOutBack>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	e00f      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_IN_SINE:
        return EaseInSine(progress);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff fef3 	bl	8001c2c <EaseInSine>
 8001e46:	4603      	mov	r3, r0
 8001e48:	e00a      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_OUT_SINE:
        return EaseOutSine(progress);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ff0e 	bl	8001c6c <EaseOutSine>
 8001e50:	4603      	mov	r3, r0
 8001e52:	e005      	b.n	8001e60 <GetEaseValue+0x17c>
    case EASE_INOUT_SINE:
        return EaseInOutSine(progress);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ff23 	bl	8001ca0 <EaseInOutSine>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	e000      	b.n	8001e60 <GetEaseValue+0x17c>
    default:
        return progress;
 8001e5e:	687b      	ldr	r3, [r7, #4]
    }
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <OLED_UpdateAnimation>:
    anim->easeType = easeType;
}

// 更新动画状态，返回isActive的值
uint8_t OLED_UpdateAnimation(Animation_t *anim, uint32_t currentTime)
{
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
    if (!anim->isActive)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	7d1b      	ldrb	r3, [r3, #20]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <OLED_UpdateAnimation+0x16>
        return 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e04d      	b.n	8001f1a <OLED_UpdateAnimation+0xb2>

    uint32_t elapsedTime = currentTime - anim->startTime;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	617b      	str	r3, [r7, #20]
    // 动画完成
    if (elapsedTime >= anim->duration || anim->currentValue == anim->endValue) // 如果我的目标在指定的点上，也关闭isActive
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d20a      	bcs.n	8001ea8 <OLED_UpdateAnimation+0x40>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691a      	ldr	r2, [r3, #16]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	f7fe fbf7 	bl	8000690 <__aeabi_fcmpeq>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d008      	beq.n	8001eba <OLED_UpdateAnimation+0x52>
    {
        anim->currentValue = anim->endValue;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	611a      	str	r2, [r3, #16]
        anim->isActive = 0;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	751a      	strb	r2, [r3, #20]
        return 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e02f      	b.n	8001f1a <OLED_UpdateAnimation+0xb2>
    }

    // 计算当前进度 (0.0 - 1.0)
    float progress = (float)elapsedTime / anim->duration;
 8001eba:	6978      	ldr	r0, [r7, #20]
 8001ebc:	f7fe f9fc 	bl	80002b8 <__aeabi_ui2f>
 8001ec0:	4604      	mov	r4, r0
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe f9f6 	bl	80002b8 <__aeabi_ui2f>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f7fe fafd 	bl	80004d0 <__aeabi_fdiv>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	613b      	str	r3, [r7, #16]

    // 应用缓动函数
    float easedProgress = GetEaseValue(progress, anim->easeType);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7d5b      	ldrb	r3, [r3, #21]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	6938      	ldr	r0, [r7, #16]
 8001ee2:	f7ff feff 	bl	8001ce4 <GetEaseValue>
 8001ee6:	60f8      	str	r0, [r7, #12]

    // 计算当前值
    anim->currentValue = anim->startValue + (anim->endValue - anim->startValue) * easedProgress;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689c      	ldr	r4, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	f7fe f92c 	bl	8000154 <__aeabi_fsub>
 8001efc:	4603      	mov	r3, r0
 8001efe:	68f9      	ldr	r1, [r7, #12]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fa31 	bl	8000368 <__aeabi_fmul>
 8001f06:	4603      	mov	r3, r0
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	f7fe f924 	bl	8000158 <__addsf3>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	611a      	str	r2, [r3, #16]

    return 1;
 8001f18:	2301      	movs	r3, #1
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	371c      	adds	r7, #28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd90      	pop	{r4, r7, pc}

08001f22 <OLED_GetAnimationValue>:

// 获取当前动画值
float OLED_GetAnimationValue(Animation_t *anim)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
    return anim->currentValue;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <OLED_InitAnimationManager>:
AnimationManager_t Status_AnimationManager;
AnimationManager_t g_Title_AnimationManager; // 菜单动画管理器
AnimationManager_t g_AnimationManager; // 全局动画管理器

void OLED_InitAnimationManager(AnimationManager_t *manager) // 这是初始化一个动画管理器，填入你的manager名字，在系统初始化时候调用它
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
    manager->count = 0;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 25f0 	strb.w	r2, [r3, #1520]	@ 0x5f0
    memset(manager->taggedAnimations, 0, sizeof(manager->taggedAnimations));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f002 fb89 	bl	8004668 <memset>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <OLED_UpdateAnimationManager>:
    anim->isActive = 1;
}

// 更新manager里面的所有动画!
void OLED_UpdateAnimationManager(AnimationManager_t *manager) //! 这里需要使用OLED_UpdateDisplayVSync()来更新显示
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 8001f66:	f000 fc0b 	bl	8002780 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

    for (uint8_t i = 0; i < manager->count; i++)
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	75fb      	strb	r3, [r7, #23]
 8001f70:	e03a      	b.n	8001fe8 <OLED_UpdateAnimationManager+0x8a>
    {
        TaggedAnimation_t *anim = &manager->taggedAnimations[i];
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
 8001f74:	224c      	movs	r2, #76	@ 0x4c
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]
        if (!anim->isActive)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d02a      	beq.n	8001fe0 <OLED_UpdateAnimationManager+0x82>
            continue;

        uint8_t activeX = OLED_UpdateAnimation(&anim->xAnimation, currentTime);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	3310      	adds	r3, #16
 8001f8e:	6939      	ldr	r1, [r7, #16]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff69 	bl	8001e68 <OLED_UpdateAnimation>
 8001f96:	4603      	mov	r3, r0
 8001f98:	72fb      	strb	r3, [r7, #11]
        uint8_t activeY = OLED_UpdateAnimation(&anim->yAnimation, currentTime);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3328      	adds	r3, #40	@ 0x28
 8001f9e:	6939      	ldr	r1, [r7, #16]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff61 	bl	8001e68 <OLED_UpdateAnimation>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	72bb      	strb	r3, [r7, #10]

        anim->currentX = OLED_GetAnimationValue(&anim->xAnimation);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	3310      	adds	r3, #16
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ffb7 	bl	8001f22 <OLED_GetAnimationValue>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = OLED_GetAnimationValue(&anim->yAnimation);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	3328      	adds	r3, #40	@ 0x28
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ffaf 	bl	8001f22 <OLED_GetAnimationValue>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	649a      	str	r2, [r3, #72]	@ 0x48

        // 如果两个动画都结束，则标记该对象动画为非活跃
        if (!activeX && !activeY)
 8001fca:	7afb      	ldrb	r3, [r7, #11]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d108      	bne.n	8001fe2 <OLED_UpdateAnimationManager+0x84>
 8001fd0:	7abb      	ldrb	r3, [r7, #10]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d105      	bne.n	8001fe2 <OLED_UpdateAnimationManager+0x84>
            anim->isActive = 0;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fde:	e000      	b.n	8001fe2 <OLED_UpdateAnimationManager+0x84>
            continue;
 8001fe0:	bf00      	nop
    for (uint8_t i = 0; i < manager->count; i++)
 8001fe2:	7dfb      	ldrb	r3, [r7, #23]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	75fb      	strb	r3, [r7, #23]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8001fee:	7dfa      	ldrb	r2, [r7, #23]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d3be      	bcc.n	8001f72 <OLED_UpdateAnimationManager+0x14>
    }
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002004:	4b17      	ldr	r3, [pc, #92]	@ (8002064 <MX_SPI2_Init+0x64>)
 8002006:	4a18      	ldr	r2, [pc, #96]	@ (8002068 <MX_SPI2_Init+0x68>)
 8002008:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800200a:	4b16      	ldr	r3, [pc, #88]	@ (8002064 <MX_SPI2_Init+0x64>)
 800200c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002010:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002012:	4b14      	ldr	r3, [pc, #80]	@ (8002064 <MX_SPI2_Init+0x64>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002018:	4b12      	ldr	r3, [pc, #72]	@ (8002064 <MX_SPI2_Init+0x64>)
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800201e:	4b11      	ldr	r3, [pc, #68]	@ (8002064 <MX_SPI2_Init+0x64>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002024:	4b0f      	ldr	r3, [pc, #60]	@ (8002064 <MX_SPI2_Init+0x64>)
 8002026:	2200      	movs	r2, #0
 8002028:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800202a:	4b0e      	ldr	r3, [pc, #56]	@ (8002064 <MX_SPI2_Init+0x64>)
 800202c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002030:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002032:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <MX_SPI2_Init+0x64>)
 8002034:	2200      	movs	r2, #0
 8002036:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002038:	4b0a      	ldr	r3, [pc, #40]	@ (8002064 <MX_SPI2_Init+0x64>)
 800203a:	2200      	movs	r2, #0
 800203c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800203e:	4b09      	ldr	r3, [pc, #36]	@ (8002064 <MX_SPI2_Init+0x64>)
 8002040:	2200      	movs	r2, #0
 8002042:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002044:	4b07      	ldr	r3, [pc, #28]	@ (8002064 <MX_SPI2_Init+0x64>)
 8002046:	2200      	movs	r2, #0
 8002048:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800204a:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <MX_SPI2_Init+0x64>)
 800204c:	220a      	movs	r2, #10
 800204e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002050:	4804      	ldr	r0, [pc, #16]	@ (8002064 <MX_SPI2_Init+0x64>)
 8002052:	f002 f865 	bl	8004120 <HAL_SPI_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800205c:	f7fe fd95 	bl	8000b8a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20003cd0 	.word	0x20003cd0
 8002068:	40003800 	.word	0x40003800

0800206c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 0310 	add.w	r3, r7, #16
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a1c      	ldr	r2, [pc, #112]	@ (80020f8 <HAL_SPI_MspInit+0x8c>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d131      	bne.n	80020f0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800208c:	4b1b      	ldr	r3, [pc, #108]	@ (80020fc <HAL_SPI_MspInit+0x90>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	4a1a      	ldr	r2, [pc, #104]	@ (80020fc <HAL_SPI_MspInit+0x90>)
 8002092:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002096:	61d3      	str	r3, [r2, #28]
 8002098:	4b18      	ldr	r3, [pc, #96]	@ (80020fc <HAL_SPI_MspInit+0x90>)
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a4:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <HAL_SPI_MspInit+0x90>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	4a14      	ldr	r2, [pc, #80]	@ (80020fc <HAL_SPI_MspInit+0x90>)
 80020aa:	f043 0308 	orr.w	r3, r3, #8
 80020ae:	6193      	str	r3, [r2, #24]
 80020b0:	4b12      	ldr	r3, [pc, #72]	@ (80020fc <HAL_SPI_MspInit+0x90>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = Flash_SCK_Pin|Flash_MOSI_Pin;
 80020bc:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80020c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c6:	2303      	movs	r3, #3
 80020c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ca:	f107 0310 	add.w	r3, r7, #16
 80020ce:	4619      	mov	r1, r3
 80020d0:	480b      	ldr	r0, [pc, #44]	@ (8002100 <HAL_SPI_MspInit+0x94>)
 80020d2:	f000 fdf1 	bl	8002cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Flash_MISO_Pin;
 80020d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80020da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Flash_MISO_GPIO_Port, &GPIO_InitStruct);
 80020e4:	f107 0310 	add.w	r3, r7, #16
 80020e8:	4619      	mov	r1, r3
 80020ea:	4805      	ldr	r0, [pc, #20]	@ (8002100 <HAL_SPI_MspInit+0x94>)
 80020ec:	f000 fde4 	bl	8002cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80020f0:	bf00      	nop
 80020f2:	3720      	adds	r7, #32
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40003800 	.word	0x40003800
 80020fc:	40021000 	.word	0x40021000
 8002100:	40010c00 	.word	0x40010c00

08002104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800210a:	4b15      	ldr	r3, [pc, #84]	@ (8002160 <HAL_MspInit+0x5c>)
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	4a14      	ldr	r2, [pc, #80]	@ (8002160 <HAL_MspInit+0x5c>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6193      	str	r3, [r2, #24]
 8002116:	4b12      	ldr	r3, [pc, #72]	@ (8002160 <HAL_MspInit+0x5c>)
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	4b0f      	ldr	r3, [pc, #60]	@ (8002160 <HAL_MspInit+0x5c>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4a0e      	ldr	r2, [pc, #56]	@ (8002160 <HAL_MspInit+0x5c>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800212c:	61d3      	str	r3, [r2, #28]
 800212e:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <HAL_MspInit+0x5c>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800213a:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <HAL_MspInit+0x60>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	4a04      	ldr	r2, [pc, #16]	@ (8002164 <HAL_MspInit+0x60>)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	40021000 	.word	0x40021000
 8002164:	40010000 	.word	0x40010000

08002168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800216c:	bf00      	nop
 800216e:	e7fd      	b.n	800216c <NMI_Handler+0x4>

08002170 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002174:	bf00      	nop
 8002176:	e7fd      	b.n	8002174 <HardFault_Handler+0x4>

08002178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800217c:	bf00      	nop
 800217e:	e7fd      	b.n	800217c <MemManage_Handler+0x4>

08002180 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002184:	bf00      	nop
 8002186:	e7fd      	b.n	8002184 <BusFault_Handler+0x4>

08002188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <UsageFault_Handler+0x4>

08002190 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b8:	f000 fad0 	bl	800275c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}

080021c0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80021c4:	4802      	ldr	r0, [pc, #8]	@ (80021d0 <DMA1_Channel6_IRQHandler+0x10>)
 80021c6:	f000 fc71 	bl	8002aac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200000d0 	.word	0x200000d0

080021d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08c      	sub	sp, #48	@ 0x30
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021e6:	f107 030c 	add.w	r3, r7, #12
 80021ea:	2224      	movs	r2, #36	@ 0x24
 80021ec:	2100      	movs	r1, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f002 fa3a 	bl	8004668 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f4:	1d3b      	adds	r3, r7, #4
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021fc:	4b20      	ldr	r3, [pc, #128]	@ (8002280 <MX_TIM3_Init+0xa0>)
 80021fe:	4a21      	ldr	r2, [pc, #132]	@ (8002284 <MX_TIM3_Init+0xa4>)
 8002200:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002202:	4b1f      	ldr	r3, [pc, #124]	@ (8002280 <MX_TIM3_Init+0xa0>)
 8002204:	2200      	movs	r2, #0
 8002206:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002208:	4b1d      	ldr	r3, [pc, #116]	@ (8002280 <MX_TIM3_Init+0xa0>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800220e:	4b1c      	ldr	r3, [pc, #112]	@ (8002280 <MX_TIM3_Init+0xa0>)
 8002210:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002214:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002216:	4b1a      	ldr	r3, [pc, #104]	@ (8002280 <MX_TIM3_Init+0xa0>)
 8002218:	2200      	movs	r2, #0
 800221a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800221c:	4b18      	ldr	r3, [pc, #96]	@ (8002280 <MX_TIM3_Init+0xa0>)
 800221e:	2200      	movs	r2, #0
 8002220:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002222:	2301      	movs	r3, #1
 8002224:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800222a:	2301      	movs	r3, #1
 800222c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002236:	2300      	movs	r3, #0
 8002238:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800223a:	2301      	movs	r3, #1
 800223c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800223e:	2300      	movs	r3, #0
 8002240:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002246:	f107 030c 	add.w	r3, r7, #12
 800224a:	4619      	mov	r1, r3
 800224c:	480c      	ldr	r0, [pc, #48]	@ (8002280 <MX_TIM3_Init+0xa0>)
 800224e:	f001 ffeb 	bl	8004228 <HAL_TIM_Encoder_Init>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002258:	f7fe fc97 	bl	8000b8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800225c:	2300      	movs	r3, #0
 800225e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002260:	2300      	movs	r3, #0
 8002262:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	4619      	mov	r1, r3
 8002268:	4805      	ldr	r0, [pc, #20]	@ (8002280 <MX_TIM3_Init+0xa0>)
 800226a:	f002 f99f 	bl	80045ac <HAL_TIMEx_MasterConfigSynchronization>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002274:	f7fe fc89 	bl	8000b8a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002278:	bf00      	nop
 800227a:	3730      	adds	r7, #48	@ 0x30
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20003d28 	.word	0x20003d28
 8002284:	40000400 	.word	0x40000400

08002288 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	@ 0x28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a1e      	ldr	r2, [pc, #120]	@ (800231c <HAL_TIM_Encoder_MspInit+0x94>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d135      	bne.n	8002314 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x98>)
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x98>)
 80022ae:	f043 0302 	orr.w	r3, r3, #2
 80022b2:	61d3      	str	r3, [r2, #28]
 80022b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x98>)
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c0:	4b17      	ldr	r3, [pc, #92]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x98>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	4a16      	ldr	r2, [pc, #88]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x98>)
 80022c6:	f043 0308 	orr.w	r3, r3, #8
 80022ca:	6193      	str	r3, [r2, #24]
 80022cc:	4b14      	ldr	r3, [pc, #80]	@ (8002320 <HAL_TIM_Encoder_MspInit+0x98>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_CH1_Pin|Encoder_CH2_Pin;
 80022d8:	2330      	movs	r3, #48	@ 0x30
 80022da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022dc:	2300      	movs	r3, #0
 80022de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	4619      	mov	r1, r3
 80022ea:	480e      	ldr	r0, [pc, #56]	@ (8002324 <HAL_TIM_Encoder_MspInit+0x9c>)
 80022ec:	f000 fce4 	bl	8002cb8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80022f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002328 <HAL_TIM_Encoder_MspInit+0xa0>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80022f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80022fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80022fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002300:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24
 8002306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002308:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800230c:	627b      	str	r3, [r7, #36]	@ 0x24
 800230e:	4a06      	ldr	r2, [pc, #24]	@ (8002328 <HAL_TIM_Encoder_MspInit+0xa0>)
 8002310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002312:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002314:	bf00      	nop
 8002316:	3728      	adds	r7, #40	@ 0x28
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40000400 	.word	0x40000400
 8002320:	40021000 	.word	0x40021000
 8002324:	40010c00 	.word	0x40010c00
 8002328:	40010000 	.word	0x40010000

0800232c <lz77_decompress>:
#include <stdint.h>
#include <stdio.h>
#include <stddef.h>

int lz77_decompress(const uint8_t *input, size_t input_size, uint8_t *output, size_t output_size)
{
 800232c:	b480      	push	{r7}
 800232e:	b08f      	sub	sp, #60	@ 0x3c
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	603b      	str	r3, [r7, #0]
    const uint8_t *input_end = input + input_size;
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4413      	add	r3, r2
 8002340:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t *output_end = output + output_size;
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	4413      	add	r3, r2
 8002348:	623b      	str	r3, [r7, #32]
    uint8_t *output_ptr = output;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	637b      	str	r3, [r7, #52]	@ 0x34

    while (input < input_end)
 800234e:	e07d      	b.n	800244c <lz77_decompress+0x120>
    {
        uint8_t flag = *input++;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	60fa      	str	r2, [r7, #12]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	77fb      	strb	r3, [r7, #31]
        if (flag < 0x80)
 800235a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800235e:	2b00      	cmp	r3, #0
 8002360:	db25      	blt.n	80023ae <lz77_decompress+0x82>
        {
            // Literal run
            size_t len = flag & 0x7F;
 8002362:	7ffb      	ldrb	r3, [r7, #31]
 8002364:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002368:	617b      	str	r3, [r7, #20]
            if (input + len > input_end || output_ptr + len > output_end)
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	4413      	add	r3, r2
 8002370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002372:	429a      	cmp	r2, r3
 8002374:	d305      	bcc.n	8002382 <lz77_decompress+0x56>
 8002376:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	4413      	add	r3, r2
 800237c:	6a3a      	ldr	r2, [r7, #32]
 800237e:	429a      	cmp	r2, r3
 8002380:	d202      	bcs.n	8002388 <lz77_decompress+0x5c>
            {
                return -1; // Overflow check
 8002382:	f04f 33ff 	mov.w	r3, #4294967295
 8002386:	e069      	b.n	800245c <lz77_decompress+0x130>
            }
            for (size_t i = 0; i < len; i++)
 8002388:	2300      	movs	r3, #0
 800238a:	633b      	str	r3, [r7, #48]	@ 0x30
 800238c:	e00a      	b.n	80023a4 <lz77_decompress+0x78>
            {
                *output_ptr++ = *input++;
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	1c53      	adds	r3, r2, #1
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002396:	1c59      	adds	r1, r3, #1
 8002398:	6379      	str	r1, [r7, #52]	@ 0x34
 800239a:	7812      	ldrb	r2, [r2, #0]
 800239c:	701a      	strb	r2, [r3, #0]
            for (size_t i = 0; i < len; i++)
 800239e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a0:	3301      	adds	r3, #1
 80023a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80023a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d3f0      	bcc.n	800238e <lz77_decompress+0x62>
 80023ac:	e04e      	b.n	800244c <lz77_decompress+0x120>
            }
        }
        else
        {
            // Back reference
            if (input + 2 > input_end)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	3302      	adds	r3, #2
 80023b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d202      	bcs.n	80023be <lz77_decompress+0x92>
            {
                return -1; // Input overflow
 80023b8:	f04f 33ff 	mov.w	r3, #4294967295
 80023bc:	e04e      	b.n	800245c <lz77_decompress+0x130>
            }
            uint16_t offset = ((flag & 0x7F) << 8) | *input++;
 80023be:	7ffb      	ldrb	r3, [r7, #31]
 80023c0:	b21b      	sxth	r3, r3
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	b21b      	sxth	r3, r3
 80023c6:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 80023ca:	b21a      	sxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	1c59      	adds	r1, r3, #1
 80023d0:	60f9      	str	r1, [r7, #12]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b21b      	sxth	r3, r3
 80023d6:	4313      	orrs	r3, r2
 80023d8:	b21b      	sxth	r3, r3
 80023da:	83bb      	strh	r3, [r7, #28]
            offset += 1; // Offset starts from 1
 80023dc:	8bbb      	ldrh	r3, [r7, #28]
 80023de:	3301      	adds	r3, #1
 80023e0:	83bb      	strh	r3, [r7, #28]
            uint8_t length = *input++;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	60fa      	str	r2, [r7, #12]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	76fb      	strb	r3, [r7, #27]
            if (length == 0 || offset > (size_t)(output_ptr - output))
 80023ec:	7efb      	ldrb	r3, [r7, #27]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <lz77_decompress+0xd2>
 80023f2:	8bbb      	ldrh	r3, [r7, #28]
 80023f4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	1a8a      	subs	r2, r1, r2
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d902      	bls.n	8002404 <lz77_decompress+0xd8>
            {
                return -1; // Invalid length or offset
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002402:	e02b      	b.n	800245c <lz77_decompress+0x130>
            }
            uint8_t *src = output_ptr - offset;
 8002404:	8bbb      	ldrh	r3, [r7, #28]
 8002406:	425b      	negs	r3, r3
 8002408:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800240a:	4413      	add	r3, r2
 800240c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (output_ptr + length > output_end)
 800240e:	7efb      	ldrb	r3, [r7, #27]
 8002410:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002412:	4413      	add	r3, r2
 8002414:	6a3a      	ldr	r2, [r7, #32]
 8002416:	429a      	cmp	r2, r3
 8002418:	d202      	bcs.n	8002420 <lz77_decompress+0xf4>
            {
                return -1; // Output overflow
 800241a:	f04f 33ff 	mov.w	r3, #4294967295
 800241e:	e01d      	b.n	800245c <lz77_decompress+0x130>
            }
            for (uint8_t i = 0; i < length; i++)
 8002420:	2300      	movs	r3, #0
 8002422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002426:	e00c      	b.n	8002442 <lz77_decompress+0x116>
            {
                *output_ptr++ = *src++;
 8002428:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800242a:	1c53      	adds	r3, r2, #1
 800242c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800242e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002430:	1c59      	adds	r1, r3, #1
 8002432:	6379      	str	r1, [r7, #52]	@ 0x34
 8002434:	7812      	ldrb	r2, [r2, #0]
 8002436:	701a      	strb	r2, [r3, #0]
            for (uint8_t i = 0; i < length; i++)
 8002438:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800243c:	3301      	adds	r3, #1
 800243e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002442:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8002446:	7efb      	ldrb	r3, [r7, #27]
 8002448:	429a      	cmp	r2, r3
 800244a:	d3ed      	bcc.n	8002428 <lz77_decompress+0xfc>
    while (input < input_end)
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	429a      	cmp	r2, r3
 8002452:	f4ff af7d 	bcc.w	8002350 <lz77_decompress+0x24>
            }
        }
    }
    return (int)(output_ptr - output);
 8002456:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	1ad3      	subs	r3, r2, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	373c      	adds	r7, #60	@ 0x3c
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr
	...

08002468 <display_frame_oled>:

// Declare the goodapple data if not in goodapple.h (it should be)
// extern const unsigned char goodapple[]; // Ensure this is available

void display_frame_oled(unsigned char *frame)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
    OLED_ClearBuffer();
 8002470:	f7fe fbc6 	bl	8000c00 <OLED_ClearBuffer>
    for (int i = 0; i < 114 * 64; i++)
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	e03d      	b.n	80024f6 <display_frame_oled+0x8e>
    { // Assuming OLED is 128x64, video is 114x64
        bool pixel = (frame[i / 8] & (1 << (i % 8))) != 0;
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2b00      	cmp	r3, #0
 800247e:	da00      	bge.n	8002482 <display_frame_oled+0x1a>
 8002480:	3307      	adds	r3, #7
 8002482:	10db      	asrs	r3, r3, #3
 8002484:	461a      	mov	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	fa42 f303 	asr.w	r3, r2, r3
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	bf14      	ite	ne
 80024a0:	2301      	movne	r3, #1
 80024a2:	2300      	moveq	r3, #0
 80024a4:	74fb      	strb	r3, [r7, #19]
        // Adjust x-coordinate to center the 114-width video on a 128-width screen
        int x = (i % 114) + (OLED_WIDTH - 114) / 2;
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	4a18      	ldr	r2, [pc, #96]	@ (800250c <display_frame_oled+0xa4>)
 80024aa:	fb82 1203 	smull	r1, r2, r2, r3
 80024ae:	441a      	add	r2, r3
 80024b0:	1191      	asrs	r1, r2, #6
 80024b2:	17da      	asrs	r2, r3, #31
 80024b4:	1a8a      	subs	r2, r1, r2
 80024b6:	2172      	movs	r1, #114	@ 0x72
 80024b8:	fb01 f202 	mul.w	r2, r1, r2
 80024bc:	1a9a      	subs	r2, r3, r2
 80024be:	1dd3      	adds	r3, r2, #7
 80024c0:	60fb      	str	r3, [r7, #12]
        int y = i / 114;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	4a11      	ldr	r2, [pc, #68]	@ (800250c <display_frame_oled+0xa4>)
 80024c6:	fb82 1203 	smull	r1, r2, r2, r3
 80024ca:	441a      	add	r2, r3
 80024cc:	1192      	asrs	r2, r2, #6
 80024ce:	17db      	asrs	r3, r3, #31
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	60bb      	str	r3, [r7, #8]
        if (x < OLED_WIDTH && y < OLED_HEIGHT)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80024d8:	dc0a      	bgt.n	80024f0 <display_frame_oled+0x88>
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80024de:	dc07      	bgt.n	80024f0 <display_frame_oled+0x88>
        {                                         // Boundary check
            OLED_WritePixel(x, y, pixel ? 1 : 0); // Draw pixel (1 for white, 0 for black)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	b21b      	sxth	r3, r3
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	b211      	sxth	r1, r2
 80024e8:	7cfa      	ldrb	r2, [r7, #19]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fca0 	bl	8000e30 <OLED_WritePixel>
    for (int i = 0; i < 114 * 64; i++)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	3301      	adds	r3, #1
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f5b3 5fe4 	cmp.w	r3, #7296	@ 0x1c80
 80024fc:	dbbd      	blt.n	800247a <display_frame_oled+0x12>
    }

    // 退出视频播放状态在这里！
    /*code here*/

    OLED_SmartUpdate();
 80024fe:	f7fe fdaf 	bl	8001060 <OLED_SmartUpdate>
}
 8002502:	bf00      	nop
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	8fb823ef 	.word	0x8fb823ef

08002510 <video_player_init>:

void video_player_init()
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
    // Calculate total frames from the pointers array
    // Each pointer is 4 bytes (unsigned int). The last pointer marks the end of the last frame.
    total_frames = (sizeof(pointers) / sizeof(unsigned int)) - 1;
 8002514:	4b04      	ldr	r3, [pc, #16]	@ (8002528 <video_player_init+0x18>)
 8002516:	224a      	movs	r2, #74	@ 0x4a
 8002518:	601a      	str	r2, [r3, #0]
    current_frame_index = 0;
 800251a:	4b04      	ldr	r3, [pc, #16]	@ (800252c <video_player_init+0x1c>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	20003d74 	.word	0x20003d74
 800252c:	20003d70 	.word	0x20003d70

08002530 <play_video>:

void play_video()
{
 8002530:	b580      	push	{r7, lr}
 8002532:	f5ad 7d6c 	sub.w	sp, sp, #944	@ 0x3b0
 8002536:	af00      	add	r7, sp, #0
    unsigned char frame_buffer[920]; // Buffer for one decompressed frame (114*64/8 = 912, rounded up)

    if (total_frames == 0)
 8002538:	4b28      	ldr	r3, [pc, #160]	@ (80025dc <play_video+0xac>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <play_video+0x14>
    { // Initialize if not already done
        video_player_init();
 8002540:	f7ff ffe6 	bl	8002510 <video_player_init>
    }

    if (current_frame_index >= total_frames)
 8002544:	4b26      	ldr	r3, [pc, #152]	@ (80025e0 <play_video+0xb0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	4b24      	ldr	r3, [pc, #144]	@ (80025dc <play_video+0xac>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d302      	bcc.n	8002558 <play_video+0x28>
    {
        current_frame_index = 0; // Loop back to the beginning or stop
 8002552:	4b23      	ldr	r3, [pc, #140]	@ (80025e0 <play_video+0xb0>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
    }

    // Get the start offset of the current frame from the pointers array
    unsigned int frame_offset = *((unsigned int *)pointers + current_frame_index);
 8002558:	4b21      	ldr	r3, [pc, #132]	@ (80025e0 <play_video+0xb0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4a21      	ldr	r2, [pc, #132]	@ (80025e4 <play_video+0xb4>)
 8002560:	4413      	add	r3, r2
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
    const unsigned char *frame_data_start = goodapple + frame_offset;
 8002568:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 800256c:	4a1e      	ldr	r2, [pc, #120]	@ (80025e8 <play_video+0xb8>)
 800256e:	4413      	add	r3, r2
 8002570:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8

    // Get the start offset of the next frame to calculate the current frame's compressed length
    unsigned int next_frame_offset = *((unsigned int *)pointers + current_frame_index + 1);
 8002574:	4b1a      	ldr	r3, [pc, #104]	@ (80025e0 <play_video+0xb0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3301      	adds	r3, #1
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4a19      	ldr	r2, [pc, #100]	@ (80025e4 <play_video+0xb4>)
 800257e:	4413      	add	r3, r2
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
    unsigned short compressed_length = next_frame_offset - frame_offset;
 8002586:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 800258a:	b29a      	uxth	r2, r3
 800258c:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8002590:	b29b      	uxth	r3, r3
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	f8a7 33a2 	strh.w	r3, [r7, #930]	@ 0x3a2

    if (compressed_length == 0)
 8002598:	f8b7 33a2 	ldrh.w	r3, [r7, #930]	@ 0x3a2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d018      	beq.n	80025d2 <play_video+0xa2>
    {
        // End of video or error
        return;
    }

    int decompressed_size = lz77_decompress(frame_data_start, compressed_length, frame_buffer, sizeof(frame_buffer));
 80025a0:	f8b7 13a2 	ldrh.w	r1, [r7, #930]	@ 0x3a2
 80025a4:	1d3a      	adds	r2, r7, #4
 80025a6:	f44f 7366 	mov.w	r3, #920	@ 0x398
 80025aa:	f8d7 03a8 	ldr.w	r0, [r7, #936]	@ 0x3a8
 80025ae:	f7ff febd 	bl	800232c <lz77_decompress>
 80025b2:	f8c7 039c 	str.w	r0, [r7, #924]	@ 0x39c

    if (decompressed_size > 0)
 80025b6:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	dd0a      	ble.n	80025d4 <play_video+0xa4>
    {
        display_frame_oled(frame_buffer);
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff51 	bl	8002468 <display_frame_oled>
        current_frame_index++; // Move to the next frame for the next call
 80025c6:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <play_video+0xb0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3301      	adds	r3, #1
 80025cc:	4a04      	ldr	r2, [pc, #16]	@ (80025e0 <play_video+0xb0>)
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	e000      	b.n	80025d4 <play_video+0xa4>
        return;
 80025d2:	bf00      	nop
        // Consider resetting current_frame_index or logging an error
    }

    // Optional: Add a delay here if needed to control playback speed
    // HAL_Delay(5); // Delay is managed by the caller or main loop typically
}
 80025d4:	f507 776c 	add.w	r7, r7, #944	@ 0x3b0
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20003d74 	.word	0x20003d74
 80025e0:	20003d70 	.word	0x20003d70
 80025e4:	08005bd8 	.word	0x08005bd8
 80025e8:	08005d04 	.word	0x08005d04

080025ec <video_fast_forward>:

void video_fast_forward(int frames_to_skip)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
    if (total_frames == 0)
 80025f4:	4b11      	ldr	r3, [pc, #68]	@ (800263c <video_fast_forward+0x50>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <video_fast_forward+0x14>
        video_player_init(); // Ensure total_frames is initialized
 80025fc:	f7ff ff88 	bl	8002510 <video_player_init>
    current_frame_index += frames_to_skip;
 8002600:	4b0f      	ldr	r3, [pc, #60]	@ (8002640 <video_fast_forward+0x54>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4413      	add	r3, r2
 8002608:	4a0d      	ldr	r2, [pc, #52]	@ (8002640 <video_fast_forward+0x54>)
 800260a:	6013      	str	r3, [r2, #0]
    if (current_frame_index >= total_frames)
 800260c:	4b0c      	ldr	r3, [pc, #48]	@ (8002640 <video_fast_forward+0x54>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <video_fast_forward+0x50>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d305      	bcc.n	8002626 <video_fast_forward+0x3a>
    {
        current_frame_index = total_frames - 1; // Go to last frame
 800261a:	4b08      	ldr	r3, [pc, #32]	@ (800263c <video_fast_forward+0x50>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	3b01      	subs	r3, #1
 8002620:	461a      	mov	r2, r3
 8002622:	4b07      	ldr	r3, [pc, #28]	@ (8002640 <video_fast_forward+0x54>)
 8002624:	601a      	str	r2, [r3, #0]
    }
    if (current_frame_index < 0) // Should not happen with fast forward, but good practice
 8002626:	4b06      	ldr	r3, [pc, #24]	@ (8002640 <video_fast_forward+0x54>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	da02      	bge.n	8002634 <video_fast_forward+0x48>
    {
        current_frame_index = 0;
 800262e:	4b04      	ldr	r3, [pc, #16]	@ (8002640 <video_fast_forward+0x54>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
    }
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20003d74 	.word	0x20003d74
 8002640:	20003d70 	.word	0x20003d70

08002644 <video_rewind>:

void video_rewind(int frames_to_skip)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
    if (total_frames == 0)
 800264c:	4b0b      	ldr	r3, [pc, #44]	@ (800267c <video_rewind+0x38>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <video_rewind+0x14>
        video_player_init(); // Ensure total_frames is initialized
 8002654:	f7ff ff5c 	bl	8002510 <video_player_init>
    current_frame_index -= frames_to_skip;
 8002658:	4b09      	ldr	r3, [pc, #36]	@ (8002680 <video_rewind+0x3c>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	4a07      	ldr	r2, [pc, #28]	@ (8002680 <video_rewind+0x3c>)
 8002662:	6013      	str	r3, [r2, #0]
    if (current_frame_index < 0)
 8002664:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <video_rewind+0x3c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	da02      	bge.n	8002672 <video_rewind+0x2e>
    {
        current_frame_index = 0; // Go to first frame
 800266c:	4b04      	ldr	r3, [pc, #16]	@ (8002680 <video_rewind+0x3c>)
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
    }
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20003d74 	.word	0x20003d74
 8002680:	20003d70 	.word	0x20003d70

08002684 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002684:	f7ff fda6 	bl	80021d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002688:	480b      	ldr	r0, [pc, #44]	@ (80026b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800268a:	490c      	ldr	r1, [pc, #48]	@ (80026bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800268c:	4a0c      	ldr	r2, [pc, #48]	@ (80026c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800268e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002690:	e002      	b.n	8002698 <LoopCopyDataInit>

08002692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002696:	3304      	adds	r3, #4

08002698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800269a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800269c:	d3f9      	bcc.n	8002692 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800269e:	4a09      	ldr	r2, [pc, #36]	@ (80026c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80026a0:	4c09      	ldr	r4, [pc, #36]	@ (80026c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026a4:	e001      	b.n	80026aa <LoopFillZerobss>

080026a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a8:	3204      	adds	r2, #4

080026aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ac:	d3fb      	bcc.n	80026a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ae:	f001 ffe9 	bl	8004684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026b2:	f7fe f98d 	bl	80009d0 <main>
  bx lr
 80026b6:	4770      	bx	lr
  ldr r0, =_sdata
 80026b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026bc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80026c0:	0800d070 	.word	0x0800d070
  ldr r2, =_sbss
 80026c4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80026c8:	20003eb4 	.word	0x20003eb4

080026cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026cc:	e7fe      	b.n	80026cc <ADC1_2_IRQHandler>
	...

080026d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026d4:	4b08      	ldr	r3, [pc, #32]	@ (80026f8 <HAL_Init+0x28>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a07      	ldr	r2, [pc, #28]	@ (80026f8 <HAL_Init+0x28>)
 80026da:	f043 0310 	orr.w	r3, r3, #16
 80026de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026e0:	2003      	movs	r0, #3
 80026e2:	f000 f947 	bl	8002974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026e6:	200f      	movs	r0, #15
 80026e8:	f000 f808 	bl	80026fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026ec:	f7ff fd0a 	bl	8002104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40022000 	.word	0x40022000

080026fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002704:	4b12      	ldr	r3, [pc, #72]	@ (8002750 <HAL_InitTick+0x54>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4b12      	ldr	r3, [pc, #72]	@ (8002754 <HAL_InitTick+0x58>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	4619      	mov	r1, r3
 800270e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002712:	fbb3 f3f1 	udiv	r3, r3, r1
 8002716:	fbb2 f3f3 	udiv	r3, r2, r3
 800271a:	4618      	mov	r0, r3
 800271c:	f000 f95f 	bl	80029de <HAL_SYSTICK_Config>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e00e      	b.n	8002748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b0f      	cmp	r3, #15
 800272e:	d80a      	bhi.n	8002746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002730:	2200      	movs	r2, #0
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	f04f 30ff 	mov.w	r0, #4294967295
 8002738:	f000 f927 	bl	800298a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800273c:	4a06      	ldr	r2, [pc, #24]	@ (8002758 <HAL_InitTick+0x5c>)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	e000      	b.n	8002748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20000004 	.word	0x20000004
 8002754:	2000000c 	.word	0x2000000c
 8002758:	20000008 	.word	0x20000008

0800275c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002760:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <HAL_IncTick+0x1c>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	4b05      	ldr	r3, [pc, #20]	@ (800277c <HAL_IncTick+0x20>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4413      	add	r3, r2
 800276c:	4a03      	ldr	r2, [pc, #12]	@ (800277c <HAL_IncTick+0x20>)
 800276e:	6013      	str	r3, [r2, #0]
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr
 8002778:	2000000c 	.word	0x2000000c
 800277c:	20003d78 	.word	0x20003d78

08002780 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return uwTick;
 8002784:	4b02      	ldr	r3, [pc, #8]	@ (8002790 <HAL_GetTick+0x10>)
 8002786:	681b      	ldr	r3, [r3, #0]
}
 8002788:	4618      	mov	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	20003d78 	.word	0x20003d78

08002794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800279c:	f7ff fff0 	bl	8002780 <HAL_GetTick>
 80027a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ac:	d005      	beq.n	80027ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ae:	4b0a      	ldr	r3, [pc, #40]	@ (80027d8 <HAL_Delay+0x44>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4413      	add	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ba:	bf00      	nop
 80027bc:	f7ff ffe0 	bl	8002780 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d8f7      	bhi.n	80027bc <HAL_Delay+0x28>
  {
  }
}
 80027cc:	bf00      	nop
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	2000000c 	.word	0x2000000c

080027dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027f8:	4013      	ands	r3, r2
 80027fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002804:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800280c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800280e:	4a04      	ldr	r2, [pc, #16]	@ (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	60d3      	str	r3, [r2, #12]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002828:	4b04      	ldr	r3, [pc, #16]	@ (800283c <__NVIC_GetPriorityGrouping+0x18>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	f003 0307 	and.w	r3, r3, #7
}
 8002832:	4618      	mov	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	2b00      	cmp	r3, #0
 8002850:	db0b      	blt.n	800286a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	f003 021f 	and.w	r2, r3, #31
 8002858:	4906      	ldr	r1, [pc, #24]	@ (8002874 <__NVIC_EnableIRQ+0x34>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	2001      	movs	r0, #1
 8002862:	fa00 f202 	lsl.w	r2, r0, r2
 8002866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	e000e100 	.word	0xe000e100

08002878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	6039      	str	r1, [r7, #0]
 8002882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002888:	2b00      	cmp	r3, #0
 800288a:	db0a      	blt.n	80028a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	b2da      	uxtb	r2, r3
 8002890:	490c      	ldr	r1, [pc, #48]	@ (80028c4 <__NVIC_SetPriority+0x4c>)
 8002892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002896:	0112      	lsls	r2, r2, #4
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	440b      	add	r3, r1
 800289c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028a0:	e00a      	b.n	80028b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	4908      	ldr	r1, [pc, #32]	@ (80028c8 <__NVIC_SetPriority+0x50>)
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	3b04      	subs	r3, #4
 80028b0:	0112      	lsls	r2, r2, #4
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	440b      	add	r3, r1
 80028b6:	761a      	strb	r2, [r3, #24]
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	e000e100 	.word	0xe000e100
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b089      	sub	sp, #36	@ 0x24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f1c3 0307 	rsb	r3, r3, #7
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	bf28      	it	cs
 80028ea:	2304      	movcs	r3, #4
 80028ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3304      	adds	r3, #4
 80028f2:	2b06      	cmp	r3, #6
 80028f4:	d902      	bls.n	80028fc <NVIC_EncodePriority+0x30>
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3b03      	subs	r3, #3
 80028fa:	e000      	b.n	80028fe <NVIC_EncodePriority+0x32>
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002900:	f04f 32ff 	mov.w	r2, #4294967295
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43da      	mvns	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	401a      	ands	r2, r3
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002914:	f04f 31ff 	mov.w	r1, #4294967295
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	fa01 f303 	lsl.w	r3, r1, r3
 800291e:	43d9      	mvns	r1, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002924:	4313      	orrs	r3, r2
         );
}
 8002926:	4618      	mov	r0, r3
 8002928:	3724      	adds	r7, #36	@ 0x24
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3b01      	subs	r3, #1
 800293c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002940:	d301      	bcc.n	8002946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002942:	2301      	movs	r3, #1
 8002944:	e00f      	b.n	8002966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002946:	4a0a      	ldr	r2, [pc, #40]	@ (8002970 <SysTick_Config+0x40>)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3b01      	subs	r3, #1
 800294c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800294e:	210f      	movs	r1, #15
 8002950:	f04f 30ff 	mov.w	r0, #4294967295
 8002954:	f7ff ff90 	bl	8002878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <SysTick_Config+0x40>)
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800295e:	4b04      	ldr	r3, [pc, #16]	@ (8002970 <SysTick_Config+0x40>)
 8002960:	2207      	movs	r2, #7
 8002962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	e000e010 	.word	0xe000e010

08002974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff ff2d 	bl	80027dc <__NVIC_SetPriorityGrouping>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800298a:	b580      	push	{r7, lr}
 800298c:	b086      	sub	sp, #24
 800298e:	af00      	add	r7, sp, #0
 8002990:	4603      	mov	r3, r0
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
 8002996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800299c:	f7ff ff42 	bl	8002824 <__NVIC_GetPriorityGrouping>
 80029a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	6978      	ldr	r0, [r7, #20]
 80029a8:	f7ff ff90 	bl	80028cc <NVIC_EncodePriority>
 80029ac:	4602      	mov	r2, r0
 80029ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ff5f 	bl	8002878 <__NVIC_SetPriority>
}
 80029ba:	bf00      	nop
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff35 	bl	8002840 <__NVIC_EnableIRQ>
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff ffa2 	bl	8002930 <SysTick_Config>
 80029ec:	4603      	mov	r3, r0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e043      	b.n	8002a96 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	4b22      	ldr	r3, [pc, #136]	@ (8002aa0 <HAL_DMA_Init+0xa8>)
 8002a16:	4413      	add	r3, r2
 8002a18:	4a22      	ldr	r2, [pc, #136]	@ (8002aa4 <HAL_DMA_Init+0xac>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	091b      	lsrs	r3, r3, #4
 8002a20:	009a      	lsls	r2, r3, #2
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a1f      	ldr	r2, [pc, #124]	@ (8002aa8 <HAL_DMA_Init+0xb0>)
 8002a2a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a42:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002a46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	bffdfff8 	.word	0xbffdfff8
 8002aa4:	cccccccd 	.word	0xcccccccd
 8002aa8:	40020000 	.word	0x40020000

08002aac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac8:	2204      	movs	r2, #4
 8002aca:	409a      	lsls	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d04f      	beq.n	8002b74 <HAL_DMA_IRQHandler+0xc8>
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d04a      	beq.n	8002b74 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d107      	bne.n	8002afc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0204 	bic.w	r2, r2, #4
 8002afa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a66      	ldr	r2, [pc, #408]	@ (8002c9c <HAL_DMA_IRQHandler+0x1f0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d029      	beq.n	8002b5a <HAL_DMA_IRQHandler+0xae>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a65      	ldr	r2, [pc, #404]	@ (8002ca0 <HAL_DMA_IRQHandler+0x1f4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d022      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xaa>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a63      	ldr	r2, [pc, #396]	@ (8002ca4 <HAL_DMA_IRQHandler+0x1f8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d01a      	beq.n	8002b50 <HAL_DMA_IRQHandler+0xa4>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a62      	ldr	r2, [pc, #392]	@ (8002ca8 <HAL_DMA_IRQHandler+0x1fc>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d012      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x9e>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a60      	ldr	r2, [pc, #384]	@ (8002cac <HAL_DMA_IRQHandler+0x200>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00a      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x98>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a5f      	ldr	r2, [pc, #380]	@ (8002cb0 <HAL_DMA_IRQHandler+0x204>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d102      	bne.n	8002b3e <HAL_DMA_IRQHandler+0x92>
 8002b38:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b3c:	e00e      	b.n	8002b5c <HAL_DMA_IRQHandler+0xb0>
 8002b3e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002b42:	e00b      	b.n	8002b5c <HAL_DMA_IRQHandler+0xb0>
 8002b44:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002b48:	e008      	b.n	8002b5c <HAL_DMA_IRQHandler+0xb0>
 8002b4a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b4e:	e005      	b.n	8002b5c <HAL_DMA_IRQHandler+0xb0>
 8002b50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b54:	e002      	b.n	8002b5c <HAL_DMA_IRQHandler+0xb0>
 8002b56:	2340      	movs	r3, #64	@ 0x40
 8002b58:	e000      	b.n	8002b5c <HAL_DMA_IRQHandler+0xb0>
 8002b5a:	2304      	movs	r3, #4
 8002b5c:	4a55      	ldr	r2, [pc, #340]	@ (8002cb4 <HAL_DMA_IRQHandler+0x208>)
 8002b5e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 8094 	beq.w	8002c92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002b72:	e08e      	b.n	8002c92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b78:	2202      	movs	r2, #2
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d056      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x186>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d051      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10b      	bne.n	8002bb4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 020a 	bic.w	r2, r2, #10
 8002baa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a38      	ldr	r2, [pc, #224]	@ (8002c9c <HAL_DMA_IRQHandler+0x1f0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d029      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x166>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a37      	ldr	r2, [pc, #220]	@ (8002ca0 <HAL_DMA_IRQHandler+0x1f4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d022      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x162>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a35      	ldr	r2, [pc, #212]	@ (8002ca4 <HAL_DMA_IRQHandler+0x1f8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01a      	beq.n	8002c08 <HAL_DMA_IRQHandler+0x15c>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a34      	ldr	r2, [pc, #208]	@ (8002ca8 <HAL_DMA_IRQHandler+0x1fc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d012      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x156>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a32      	ldr	r2, [pc, #200]	@ (8002cac <HAL_DMA_IRQHandler+0x200>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00a      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x150>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a31      	ldr	r2, [pc, #196]	@ (8002cb0 <HAL_DMA_IRQHandler+0x204>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d102      	bne.n	8002bf6 <HAL_DMA_IRQHandler+0x14a>
 8002bf0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002bf4:	e00e      	b.n	8002c14 <HAL_DMA_IRQHandler+0x168>
 8002bf6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bfa:	e00b      	b.n	8002c14 <HAL_DMA_IRQHandler+0x168>
 8002bfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c00:	e008      	b.n	8002c14 <HAL_DMA_IRQHandler+0x168>
 8002c02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c06:	e005      	b.n	8002c14 <HAL_DMA_IRQHandler+0x168>
 8002c08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c0c:	e002      	b.n	8002c14 <HAL_DMA_IRQHandler+0x168>
 8002c0e:	2320      	movs	r3, #32
 8002c10:	e000      	b.n	8002c14 <HAL_DMA_IRQHandler+0x168>
 8002c12:	2302      	movs	r3, #2
 8002c14:	4a27      	ldr	r2, [pc, #156]	@ (8002cb4 <HAL_DMA_IRQHandler+0x208>)
 8002c16:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d034      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c30:	e02f      	b.n	8002c92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	2208      	movs	r2, #8
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d028      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x1e8>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d023      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 020e 	bic.w	r2, r2, #14
 8002c5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c64:	2101      	movs	r1, #1
 8002c66:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d004      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	4798      	blx	r3
    }
  }
  return;
 8002c92:	bf00      	nop
 8002c94:	bf00      	nop
}
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40020008 	.word	0x40020008
 8002ca0:	4002001c 	.word	0x4002001c
 8002ca4:	40020030 	.word	0x40020030
 8002ca8:	40020044 	.word	0x40020044
 8002cac:	40020058 	.word	0x40020058
 8002cb0:	4002006c 	.word	0x4002006c
 8002cb4:	40020000 	.word	0x40020000

08002cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b08b      	sub	sp, #44	@ 0x2c
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cca:	e169      	b.n	8002fa0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ccc:	2201      	movs	r2, #1
 8002cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	f040 8158 	bne.w	8002f9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	4a9a      	ldr	r2, [pc, #616]	@ (8002f58 <HAL_GPIO_Init+0x2a0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d05e      	beq.n	8002db2 <HAL_GPIO_Init+0xfa>
 8002cf4:	4a98      	ldr	r2, [pc, #608]	@ (8002f58 <HAL_GPIO_Init+0x2a0>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d875      	bhi.n	8002de6 <HAL_GPIO_Init+0x12e>
 8002cfa:	4a98      	ldr	r2, [pc, #608]	@ (8002f5c <HAL_GPIO_Init+0x2a4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d058      	beq.n	8002db2 <HAL_GPIO_Init+0xfa>
 8002d00:	4a96      	ldr	r2, [pc, #600]	@ (8002f5c <HAL_GPIO_Init+0x2a4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d86f      	bhi.n	8002de6 <HAL_GPIO_Init+0x12e>
 8002d06:	4a96      	ldr	r2, [pc, #600]	@ (8002f60 <HAL_GPIO_Init+0x2a8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d052      	beq.n	8002db2 <HAL_GPIO_Init+0xfa>
 8002d0c:	4a94      	ldr	r2, [pc, #592]	@ (8002f60 <HAL_GPIO_Init+0x2a8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d869      	bhi.n	8002de6 <HAL_GPIO_Init+0x12e>
 8002d12:	4a94      	ldr	r2, [pc, #592]	@ (8002f64 <HAL_GPIO_Init+0x2ac>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d04c      	beq.n	8002db2 <HAL_GPIO_Init+0xfa>
 8002d18:	4a92      	ldr	r2, [pc, #584]	@ (8002f64 <HAL_GPIO_Init+0x2ac>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d863      	bhi.n	8002de6 <HAL_GPIO_Init+0x12e>
 8002d1e:	4a92      	ldr	r2, [pc, #584]	@ (8002f68 <HAL_GPIO_Init+0x2b0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d046      	beq.n	8002db2 <HAL_GPIO_Init+0xfa>
 8002d24:	4a90      	ldr	r2, [pc, #576]	@ (8002f68 <HAL_GPIO_Init+0x2b0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d85d      	bhi.n	8002de6 <HAL_GPIO_Init+0x12e>
 8002d2a:	2b12      	cmp	r3, #18
 8002d2c:	d82a      	bhi.n	8002d84 <HAL_GPIO_Init+0xcc>
 8002d2e:	2b12      	cmp	r3, #18
 8002d30:	d859      	bhi.n	8002de6 <HAL_GPIO_Init+0x12e>
 8002d32:	a201      	add	r2, pc, #4	@ (adr r2, 8002d38 <HAL_GPIO_Init+0x80>)
 8002d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d38:	08002db3 	.word	0x08002db3
 8002d3c:	08002d8d 	.word	0x08002d8d
 8002d40:	08002d9f 	.word	0x08002d9f
 8002d44:	08002de1 	.word	0x08002de1
 8002d48:	08002de7 	.word	0x08002de7
 8002d4c:	08002de7 	.word	0x08002de7
 8002d50:	08002de7 	.word	0x08002de7
 8002d54:	08002de7 	.word	0x08002de7
 8002d58:	08002de7 	.word	0x08002de7
 8002d5c:	08002de7 	.word	0x08002de7
 8002d60:	08002de7 	.word	0x08002de7
 8002d64:	08002de7 	.word	0x08002de7
 8002d68:	08002de7 	.word	0x08002de7
 8002d6c:	08002de7 	.word	0x08002de7
 8002d70:	08002de7 	.word	0x08002de7
 8002d74:	08002de7 	.word	0x08002de7
 8002d78:	08002de7 	.word	0x08002de7
 8002d7c:	08002d95 	.word	0x08002d95
 8002d80:	08002da9 	.word	0x08002da9
 8002d84:	4a79      	ldr	r2, [pc, #484]	@ (8002f6c <HAL_GPIO_Init+0x2b4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d013      	beq.n	8002db2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d8a:	e02c      	b.n	8002de6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	623b      	str	r3, [r7, #32]
          break;
 8002d92:	e029      	b.n	8002de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	623b      	str	r3, [r7, #32]
          break;
 8002d9c:	e024      	b.n	8002de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	3308      	adds	r3, #8
 8002da4:	623b      	str	r3, [r7, #32]
          break;
 8002da6:	e01f      	b.n	8002de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	330c      	adds	r3, #12
 8002dae:	623b      	str	r3, [r7, #32]
          break;
 8002db0:	e01a      	b.n	8002de8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d102      	bne.n	8002dc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002dba:	2304      	movs	r3, #4
 8002dbc:	623b      	str	r3, [r7, #32]
          break;
 8002dbe:	e013      	b.n	8002de8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d105      	bne.n	8002dd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dc8:	2308      	movs	r3, #8
 8002dca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69fa      	ldr	r2, [r7, #28]
 8002dd0:	611a      	str	r2, [r3, #16]
          break;
 8002dd2:	e009      	b.n	8002de8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dd4:	2308      	movs	r3, #8
 8002dd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69fa      	ldr	r2, [r7, #28]
 8002ddc:	615a      	str	r2, [r3, #20]
          break;
 8002dde:	e003      	b.n	8002de8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002de0:	2300      	movs	r3, #0
 8002de2:	623b      	str	r3, [r7, #32]
          break;
 8002de4:	e000      	b.n	8002de8 <HAL_GPIO_Init+0x130>
          break;
 8002de6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	2bff      	cmp	r3, #255	@ 0xff
 8002dec:	d801      	bhi.n	8002df2 <HAL_GPIO_Init+0x13a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	e001      	b.n	8002df6 <HAL_GPIO_Init+0x13e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3304      	adds	r3, #4
 8002df6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2bff      	cmp	r3, #255	@ 0xff
 8002dfc:	d802      	bhi.n	8002e04 <HAL_GPIO_Init+0x14c>
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	e002      	b.n	8002e0a <HAL_GPIO_Init+0x152>
 8002e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e06:	3b08      	subs	r3, #8
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	210f      	movs	r1, #15
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	fa01 f303 	lsl.w	r3, r1, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	6a39      	ldr	r1, [r7, #32]
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	fa01 f303 	lsl.w	r3, r1, r3
 8002e24:	431a      	orrs	r2, r3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 80b1 	beq.w	8002f9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e38:	4b4d      	ldr	r3, [pc, #308]	@ (8002f70 <HAL_GPIO_Init+0x2b8>)
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	4a4c      	ldr	r2, [pc, #304]	@ (8002f70 <HAL_GPIO_Init+0x2b8>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6193      	str	r3, [r2, #24]
 8002e44:	4b4a      	ldr	r3, [pc, #296]	@ (8002f70 <HAL_GPIO_Init+0x2b8>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e50:	4a48      	ldr	r2, [pc, #288]	@ (8002f74 <HAL_GPIO_Init+0x2bc>)
 8002e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e54:	089b      	lsrs	r3, r3, #2
 8002e56:	3302      	adds	r3, #2
 8002e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	220f      	movs	r2, #15
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4013      	ands	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a40      	ldr	r2, [pc, #256]	@ (8002f78 <HAL_GPIO_Init+0x2c0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d013      	beq.n	8002ea4 <HAL_GPIO_Init+0x1ec>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f7c <HAL_GPIO_Init+0x2c4>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d00d      	beq.n	8002ea0 <HAL_GPIO_Init+0x1e8>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a3e      	ldr	r2, [pc, #248]	@ (8002f80 <HAL_GPIO_Init+0x2c8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d007      	beq.n	8002e9c <HAL_GPIO_Init+0x1e4>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a3d      	ldr	r2, [pc, #244]	@ (8002f84 <HAL_GPIO_Init+0x2cc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d101      	bne.n	8002e98 <HAL_GPIO_Init+0x1e0>
 8002e94:	2303      	movs	r3, #3
 8002e96:	e006      	b.n	8002ea6 <HAL_GPIO_Init+0x1ee>
 8002e98:	2304      	movs	r3, #4
 8002e9a:	e004      	b.n	8002ea6 <HAL_GPIO_Init+0x1ee>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e002      	b.n	8002ea6 <HAL_GPIO_Init+0x1ee>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <HAL_GPIO_Init+0x1ee>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ea8:	f002 0203 	and.w	r2, r2, #3
 8002eac:	0092      	lsls	r2, r2, #2
 8002eae:	4093      	lsls	r3, r2
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002eb6:	492f      	ldr	r1, [pc, #188]	@ (8002f74 <HAL_GPIO_Init+0x2bc>)
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eba:	089b      	lsrs	r3, r3, #2
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d006      	beq.n	8002ede <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ed0:	4b2d      	ldr	r3, [pc, #180]	@ (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	492c      	ldr	r1, [pc, #176]	@ (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	608b      	str	r3, [r1, #8]
 8002edc:	e006      	b.n	8002eec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ede:	4b2a      	ldr	r3, [pc, #168]	@ (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	4928      	ldr	r1, [pc, #160]	@ (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d006      	beq.n	8002f06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ef8:	4b23      	ldr	r3, [pc, #140]	@ (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	4922      	ldr	r1, [pc, #136]	@ (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60cb      	str	r3, [r1, #12]
 8002f04:	e006      	b.n	8002f14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f06:	4b20      	ldr	r3, [pc, #128]	@ (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	491e      	ldr	r1, [pc, #120]	@ (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d006      	beq.n	8002f2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f20:	4b19      	ldr	r3, [pc, #100]	@ (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	4918      	ldr	r1, [pc, #96]	@ (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]
 8002f2c:	e006      	b.n	8002f3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f2e:	4b16      	ldr	r3, [pc, #88]	@ (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	4914      	ldr	r1, [pc, #80]	@ (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d021      	beq.n	8002f8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f48:	4b0f      	ldr	r3, [pc, #60]	@ (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	490e      	ldr	r1, [pc, #56]	@ (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	600b      	str	r3, [r1, #0]
 8002f54:	e021      	b.n	8002f9a <HAL_GPIO_Init+0x2e2>
 8002f56:	bf00      	nop
 8002f58:	10320000 	.word	0x10320000
 8002f5c:	10310000 	.word	0x10310000
 8002f60:	10220000 	.word	0x10220000
 8002f64:	10210000 	.word	0x10210000
 8002f68:	10120000 	.word	0x10120000
 8002f6c:	10110000 	.word	0x10110000
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40010000 	.word	0x40010000
 8002f78:	40010800 	.word	0x40010800
 8002f7c:	40010c00 	.word	0x40010c00
 8002f80:	40011000 	.word	0x40011000
 8002f84:	40011400 	.word	0x40011400
 8002f88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fbc <HAL_GPIO_Init+0x304>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	43db      	mvns	r3, r3
 8002f94:	4909      	ldr	r1, [pc, #36]	@ (8002fbc <HAL_GPIO_Init+0x304>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f47f ae8e 	bne.w	8002ccc <HAL_GPIO_Init+0x14>
  }
}
 8002fb0:	bf00      	nop
 8002fb2:	bf00      	nop
 8002fb4:	372c      	adds	r7, #44	@ 0x2c
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr
 8002fbc:	40010400 	.word	0x40010400

08002fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	807b      	strh	r3, [r7, #2]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fd0:	787b      	ldrb	r3, [r7, #1]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fd6:	887a      	ldrh	r2, [r7, #2]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fdc:	e003      	b.n	8002fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fde:	887b      	ldrh	r3, [r7, #2]
 8002fe0:	041a      	lsls	r2, r3, #16
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	611a      	str	r2, [r3, #16]
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr

08002ff0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e12b      	b.n	800325a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fd fc70 	bl	80008fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2224      	movs	r2, #36	@ 0x24
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0201 	bic.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003042:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003052:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003054:	f001 f832 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 8003058:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4a81      	ldr	r2, [pc, #516]	@ (8003264 <HAL_I2C_Init+0x274>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d807      	bhi.n	8003074 <HAL_I2C_Init+0x84>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4a80      	ldr	r2, [pc, #512]	@ (8003268 <HAL_I2C_Init+0x278>)
 8003068:	4293      	cmp	r3, r2
 800306a:	bf94      	ite	ls
 800306c:	2301      	movls	r3, #1
 800306e:	2300      	movhi	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	e006      	b.n	8003082 <HAL_I2C_Init+0x92>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4a7d      	ldr	r2, [pc, #500]	@ (800326c <HAL_I2C_Init+0x27c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	bf94      	ite	ls
 800307c:	2301      	movls	r3, #1
 800307e:	2300      	movhi	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e0e7      	b.n	800325a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4a78      	ldr	r2, [pc, #480]	@ (8003270 <HAL_I2C_Init+0x280>)
 800308e:	fba2 2303 	umull	r2, r3, r2, r3
 8003092:	0c9b      	lsrs	r3, r3, #18
 8003094:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	4a6a      	ldr	r2, [pc, #424]	@ (8003264 <HAL_I2C_Init+0x274>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d802      	bhi.n	80030c4 <HAL_I2C_Init+0xd4>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	3301      	adds	r3, #1
 80030c2:	e009      	b.n	80030d8 <HAL_I2C_Init+0xe8>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030ca:	fb02 f303 	mul.w	r3, r2, r3
 80030ce:	4a69      	ldr	r2, [pc, #420]	@ (8003274 <HAL_I2C_Init+0x284>)
 80030d0:	fba2 2303 	umull	r2, r3, r2, r3
 80030d4:	099b      	lsrs	r3, r3, #6
 80030d6:	3301      	adds	r3, #1
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	430b      	orrs	r3, r1
 80030de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	495c      	ldr	r1, [pc, #368]	@ (8003264 <HAL_I2C_Init+0x274>)
 80030f4:	428b      	cmp	r3, r1
 80030f6:	d819      	bhi.n	800312c <HAL_I2C_Init+0x13c>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1e59      	subs	r1, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	fbb1 f3f3 	udiv	r3, r1, r3
 8003106:	1c59      	adds	r1, r3, #1
 8003108:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800310c:	400b      	ands	r3, r1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <HAL_I2C_Init+0x138>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1e59      	subs	r1, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003120:	3301      	adds	r3, #1
 8003122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003126:	e051      	b.n	80031cc <HAL_I2C_Init+0x1dc>
 8003128:	2304      	movs	r3, #4
 800312a:	e04f      	b.n	80031cc <HAL_I2C_Init+0x1dc>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d111      	bne.n	8003158 <HAL_I2C_Init+0x168>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1e58      	subs	r0, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6859      	ldr	r1, [r3, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	440b      	add	r3, r1
 8003142:	fbb0 f3f3 	udiv	r3, r0, r3
 8003146:	3301      	adds	r3, #1
 8003148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf0c      	ite	eq
 8003150:	2301      	moveq	r3, #1
 8003152:	2300      	movne	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	e012      	b.n	800317e <HAL_I2C_Init+0x18e>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1e58      	subs	r0, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	0099      	lsls	r1, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	fbb0 f3f3 	udiv	r3, r0, r3
 800316e:	3301      	adds	r3, #1
 8003170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf0c      	ite	eq
 8003178:	2301      	moveq	r3, #1
 800317a:	2300      	movne	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_I2C_Init+0x196>
 8003182:	2301      	movs	r3, #1
 8003184:	e022      	b.n	80031cc <HAL_I2C_Init+0x1dc>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10e      	bne.n	80031ac <HAL_I2C_Init+0x1bc>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1e58      	subs	r0, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6859      	ldr	r1, [r3, #4]
 8003196:	460b      	mov	r3, r1
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	440b      	add	r3, r1
 800319c:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a0:	3301      	adds	r3, #1
 80031a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031aa:	e00f      	b.n	80031cc <HAL_I2C_Init+0x1dc>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1e58      	subs	r0, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6859      	ldr	r1, [r3, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	0099      	lsls	r1, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	fbb0 f3f3 	udiv	r3, r0, r3
 80031c2:	3301      	adds	r3, #1
 80031c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	6809      	ldr	r1, [r1, #0]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69da      	ldr	r2, [r3, #28]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6911      	ldr	r1, [r2, #16]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68d2      	ldr	r2, [r2, #12]
 8003206:	4311      	orrs	r1, r2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	430b      	orrs	r3, r1
 800320e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2220      	movs	r2, #32
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	000186a0 	.word	0x000186a0
 8003268:	001e847f 	.word	0x001e847f
 800326c:	003d08ff 	.word	0x003d08ff
 8003270:	431bde83 	.word	0x431bde83
 8003274:	10624dd3 	.word	0x10624dd3

08003278 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af02      	add	r7, sp, #8
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	607a      	str	r2, [r7, #4]
 8003282:	461a      	mov	r2, r3
 8003284:	460b      	mov	r3, r1
 8003286:	817b      	strh	r3, [r7, #10]
 8003288:	4613      	mov	r3, r2
 800328a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800328c:	f7ff fa78 	bl	8002780 <HAL_GetTick>
 8003290:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b20      	cmp	r3, #32
 800329c:	f040 80e0 	bne.w	8003460 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	2319      	movs	r3, #25
 80032a6:	2201      	movs	r2, #1
 80032a8:	4970      	ldr	r1, [pc, #448]	@ (800346c <HAL_I2C_Master_Transmit+0x1f4>)
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f964 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032b6:	2302      	movs	r3, #2
 80032b8:	e0d3      	b.n	8003462 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_I2C_Master_Transmit+0x50>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e0cc      	b.n	8003462 <HAL_I2C_Master_Transmit+0x1ea>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d007      	beq.n	80032ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 0201 	orr.w	r2, r2, #1
 80032ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2221      	movs	r2, #33	@ 0x21
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2210      	movs	r2, #16
 800330a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	893a      	ldrh	r2, [r7, #8]
 800331e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4a50      	ldr	r2, [pc, #320]	@ (8003470 <HAL_I2C_Master_Transmit+0x1f8>)
 800332e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003330:	8979      	ldrh	r1, [r7, #10]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	6a3a      	ldr	r2, [r7, #32]
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f89c 	bl	8003474 <I2C_MasterRequestWrite>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e08d      	b.n	8003462 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800335c:	e066      	b.n	800342c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	6a39      	ldr	r1, [r7, #32]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 fa22 	bl	80037ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00d      	beq.n	800338a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	2b04      	cmp	r3, #4
 8003374:	d107      	bne.n	8003386 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003384:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e06b      	b.n	8003462 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	781a      	ldrb	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d11b      	bne.n	8003400 <HAL_I2C_Master_Transmit+0x188>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d017      	beq.n	8003400 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	6a39      	ldr	r1, [r7, #32]
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 fa19 	bl	800383c <I2C_WaitOnBTFFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00d      	beq.n	800342c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003414:	2b04      	cmp	r3, #4
 8003416:	d107      	bne.n	8003428 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003426:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e01a      	b.n	8003462 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003430:	2b00      	cmp	r3, #0
 8003432:	d194      	bne.n	800335e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	e000      	b.n	8003462 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003460:	2302      	movs	r3, #2
  }
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	00100002 	.word	0x00100002
 8003470:	ffff0000 	.word	0xffff0000

08003474 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	607a      	str	r2, [r7, #4]
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	460b      	mov	r3, r1
 8003482:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003488:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b08      	cmp	r3, #8
 800348e:	d006      	beq.n	800349e <I2C_MasterRequestWrite+0x2a>
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d003      	beq.n	800349e <I2C_MasterRequestWrite+0x2a>
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800349c:	d108      	bne.n	80034b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	e00b      	b.n	80034c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b4:	2b12      	cmp	r3, #18
 80034b6:	d107      	bne.n	80034c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f84f 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00d      	beq.n	80034fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034ee:	d103      	bne.n	80034f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e035      	b.n	8003568 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003504:	d108      	bne.n	8003518 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003506:	897b      	ldrh	r3, [r7, #10]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	461a      	mov	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003514:	611a      	str	r2, [r3, #16]
 8003516:	e01b      	b.n	8003550 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003518:	897b      	ldrh	r3, [r7, #10]
 800351a:	11db      	asrs	r3, r3, #7
 800351c:	b2db      	uxtb	r3, r3
 800351e:	f003 0306 	and.w	r3, r3, #6
 8003522:	b2db      	uxtb	r3, r3
 8003524:	f063 030f 	orn	r3, r3, #15
 8003528:	b2da      	uxtb	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	490e      	ldr	r1, [pc, #56]	@ (8003570 <I2C_MasterRequestWrite+0xfc>)
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 f898 	bl	800366c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e010      	b.n	8003568 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003546:	897b      	ldrh	r3, [r7, #10]
 8003548:	b2da      	uxtb	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	4907      	ldr	r1, [pc, #28]	@ (8003574 <I2C_MasterRequestWrite+0x100>)
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f888 	bl	800366c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	00010008 	.word	0x00010008
 8003574:	00010002 	.word	0x00010002

08003578 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	4613      	mov	r3, r2
 8003586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003588:	e048      	b.n	800361c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d044      	beq.n	800361c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003592:	f7ff f8f5 	bl	8002780 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d302      	bcc.n	80035a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d139      	bne.n	800361c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	0c1b      	lsrs	r3, r3, #16
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d10d      	bne.n	80035ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	43da      	mvns	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	4013      	ands	r3, r2
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf0c      	ite	eq
 80035c4:	2301      	moveq	r3, #1
 80035c6:	2300      	movne	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	e00c      	b.n	80035e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	43da      	mvns	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4013      	ands	r3, r2
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf0c      	ite	eq
 80035e0:	2301      	moveq	r3, #1
 80035e2:	2300      	movne	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d116      	bne.n	800361c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003608:	f043 0220 	orr.w	r2, r3, #32
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e023      	b.n	8003664 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	0c1b      	lsrs	r3, r3, #16
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b01      	cmp	r3, #1
 8003624:	d10d      	bne.n	8003642 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	43da      	mvns	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	4013      	ands	r3, r2
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf0c      	ite	eq
 8003638:	2301      	moveq	r3, #1
 800363a:	2300      	movne	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	461a      	mov	r2, r3
 8003640:	e00c      	b.n	800365c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	43da      	mvns	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	4013      	ands	r3, r2
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	bf0c      	ite	eq
 8003654:	2301      	moveq	r3, #1
 8003656:	2300      	movne	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	79fb      	ldrb	r3, [r7, #7]
 800365e:	429a      	cmp	r2, r3
 8003660:	d093      	beq.n	800358a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800367a:	e071      	b.n	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800368a:	d123      	bne.n	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800369a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c0:	f043 0204 	orr.w	r2, r3, #4
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e067      	b.n	80037a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036da:	d041      	beq.n	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036dc:	f7ff f850 	bl	8002780 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d302      	bcc.n	80036f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d136      	bne.n	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	0c1b      	lsrs	r3, r3, #16
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d10c      	bne.n	8003716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	43da      	mvns	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4013      	ands	r3, r2
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	bf14      	ite	ne
 800370e:	2301      	movne	r3, #1
 8003710:	2300      	moveq	r3, #0
 8003712:	b2db      	uxtb	r3, r3
 8003714:	e00b      	b.n	800372e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	43da      	mvns	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	4013      	ands	r3, r2
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	bf14      	ite	ne
 8003728:	2301      	movne	r3, #1
 800372a:	2300      	moveq	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d016      	beq.n	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374c:	f043 0220 	orr.w	r2, r3, #32
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e021      	b.n	80037a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	0c1b      	lsrs	r3, r3, #16
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	d10c      	bne.n	8003784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	43da      	mvns	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	4013      	ands	r3, r2
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	bf14      	ite	ne
 800377c:	2301      	movne	r3, #1
 800377e:	2300      	moveq	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	e00b      	b.n	800379c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	43da      	mvns	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4013      	ands	r3, r2
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	bf14      	ite	ne
 8003796:	2301      	movne	r3, #1
 8003798:	2300      	moveq	r3, #0
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	f47f af6d 	bne.w	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037b8:	e034      	b.n	8003824 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f886 	bl	80038cc <I2C_IsAcknowledgeFailed>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e034      	b.n	8003834 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d0:	d028      	beq.n	8003824 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d2:	f7fe ffd5 	bl	8002780 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d302      	bcc.n	80037e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d11d      	bne.n	8003824 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f2:	2b80      	cmp	r3, #128	@ 0x80
 80037f4:	d016      	beq.n	8003824 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003810:	f043 0220 	orr.w	r2, r3, #32
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e007      	b.n	8003834 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800382e:	2b80      	cmp	r3, #128	@ 0x80
 8003830:	d1c3      	bne.n	80037ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003848:	e034      	b.n	80038b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f83e 	bl	80038cc <I2C_IsAcknowledgeFailed>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e034      	b.n	80038c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003860:	d028      	beq.n	80038b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003862:	f7fe ff8d 	bl	8002780 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	429a      	cmp	r2, r3
 8003870:	d302      	bcc.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d11d      	bne.n	80038b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b04      	cmp	r3, #4
 8003884:	d016      	beq.n	80038b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a0:	f043 0220 	orr.w	r2, r3, #32
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e007      	b.n	80038c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d1c3      	bne.n	800384a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038e2:	d11b      	bne.n	800391c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	f043 0204 	orr.w	r2, r3, #4
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr

08003928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e272      	b.n	8003e20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 8087 	beq.w	8003a56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003948:	4b92      	ldr	r3, [pc, #584]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 030c 	and.w	r3, r3, #12
 8003950:	2b04      	cmp	r3, #4
 8003952:	d00c      	beq.n	800396e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003954:	4b8f      	ldr	r3, [pc, #572]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 030c 	and.w	r3, r3, #12
 800395c:	2b08      	cmp	r3, #8
 800395e:	d112      	bne.n	8003986 <HAL_RCC_OscConfig+0x5e>
 8003960:	4b8c      	ldr	r3, [pc, #560]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800396c:	d10b      	bne.n	8003986 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800396e:	4b89      	ldr	r3, [pc, #548]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d06c      	beq.n	8003a54 <HAL_RCC_OscConfig+0x12c>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d168      	bne.n	8003a54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e24c      	b.n	8003e20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800398e:	d106      	bne.n	800399e <HAL_RCC_OscConfig+0x76>
 8003990:	4b80      	ldr	r3, [pc, #512]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a7f      	ldr	r2, [pc, #508]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 8003996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	e02e      	b.n	80039fc <HAL_RCC_OscConfig+0xd4>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10c      	bne.n	80039c0 <HAL_RCC_OscConfig+0x98>
 80039a6:	4b7b      	ldr	r3, [pc, #492]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a7a      	ldr	r2, [pc, #488]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 80039ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	4b78      	ldr	r3, [pc, #480]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a77      	ldr	r2, [pc, #476]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 80039b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	e01d      	b.n	80039fc <HAL_RCC_OscConfig+0xd4>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCC_OscConfig+0xbc>
 80039ca:	4b72      	ldr	r3, [pc, #456]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a71      	ldr	r2, [pc, #452]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 80039d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	4b6f      	ldr	r3, [pc, #444]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a6e      	ldr	r2, [pc, #440]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 80039dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	e00b      	b.n	80039fc <HAL_RCC_OscConfig+0xd4>
 80039e4:	4b6b      	ldr	r3, [pc, #428]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a6a      	ldr	r2, [pc, #424]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 80039ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	4b68      	ldr	r3, [pc, #416]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a67      	ldr	r2, [pc, #412]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 80039f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d013      	beq.n	8003a2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a04:	f7fe febc 	bl	8002780 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a0c:	f7fe feb8 	bl	8002780 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b64      	cmp	r3, #100	@ 0x64
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e200      	b.n	8003e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1e:	4b5d      	ldr	r3, [pc, #372]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0xe4>
 8003a2a:	e014      	b.n	8003a56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2c:	f7fe fea8 	bl	8002780 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a34:	f7fe fea4 	bl	8002780 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	@ 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e1ec      	b.n	8003e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a46:	4b53      	ldr	r3, [pc, #332]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x10c>
 8003a52:	e000      	b.n	8003a56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d063      	beq.n	8003b2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a62:	4b4c      	ldr	r3, [pc, #304]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a6e:	4b49      	ldr	r3, [pc, #292]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f003 030c 	and.w	r3, r3, #12
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d11c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x18c>
 8003a7a:	4b46      	ldr	r3, [pc, #280]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d116      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a86:	4b43      	ldr	r3, [pc, #268]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <HAL_RCC_OscConfig+0x176>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d001      	beq.n	8003a9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e1c0      	b.n	8003e20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4939      	ldr	r1, [pc, #228]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab2:	e03a      	b.n	8003b2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d020      	beq.n	8003afe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003abc:	4b36      	ldr	r3, [pc, #216]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003abe:	2201      	movs	r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac2:	f7fe fe5d 	bl	8002780 <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aca:	f7fe fe59 	bl	8002780 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e1a1      	b.n	8003e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003adc:	4b2d      	ldr	r3, [pc, #180]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0f0      	beq.n	8003aca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4927      	ldr	r1, [pc, #156]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	600b      	str	r3, [r1, #0]
 8003afc:	e015      	b.n	8003b2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003afe:	4b26      	ldr	r3, [pc, #152]	@ (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b04:	f7fe fe3c 	bl	8002780 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b0c:	f7fe fe38 	bl	8002780 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e180      	b.n	8003e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d03a      	beq.n	8003bac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d019      	beq.n	8003b72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b3e:	4b17      	ldr	r3, [pc, #92]	@ (8003b9c <HAL_RCC_OscConfig+0x274>)
 8003b40:	2201      	movs	r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b44:	f7fe fe1c 	bl	8002780 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b4c:	f7fe fe18 	bl	8002780 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e160      	b.n	8003e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b94 <HAL_RCC_OscConfig+0x26c>)
 8003b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b6a:	2001      	movs	r0, #1
 8003b6c:	f000 faba 	bl	80040e4 <RCC_Delay>
 8003b70:	e01c      	b.n	8003bac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b72:	4b0a      	ldr	r3, [pc, #40]	@ (8003b9c <HAL_RCC_OscConfig+0x274>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b78:	f7fe fe02 	bl	8002780 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b7e:	e00f      	b.n	8003ba0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b80:	f7fe fdfe 	bl	8002780 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d908      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e146      	b.n	8003e20 <HAL_RCC_OscConfig+0x4f8>
 8003b92:	bf00      	nop
 8003b94:	40021000 	.word	0x40021000
 8003b98:	42420000 	.word	0x42420000
 8003b9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba0:	4b92      	ldr	r3, [pc, #584]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1e9      	bne.n	8003b80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 80a6 	beq.w	8003d06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bbe:	4b8b      	ldr	r3, [pc, #556]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10d      	bne.n	8003be6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bca:	4b88      	ldr	r3, [pc, #544]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	4a87      	ldr	r2, [pc, #540]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bd4:	61d3      	str	r3, [r2, #28]
 8003bd6:	4b85      	ldr	r3, [pc, #532]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bde:	60bb      	str	r3, [r7, #8]
 8003be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be2:	2301      	movs	r3, #1
 8003be4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be6:	4b82      	ldr	r3, [pc, #520]	@ (8003df0 <HAL_RCC_OscConfig+0x4c8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d118      	bne.n	8003c24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bf2:	4b7f      	ldr	r3, [pc, #508]	@ (8003df0 <HAL_RCC_OscConfig+0x4c8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a7e      	ldr	r2, [pc, #504]	@ (8003df0 <HAL_RCC_OscConfig+0x4c8>)
 8003bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bfe:	f7fe fdbf 	bl	8002780 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c06:	f7fe fdbb 	bl	8002780 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b64      	cmp	r3, #100	@ 0x64
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e103      	b.n	8003e20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c18:	4b75      	ldr	r3, [pc, #468]	@ (8003df0 <HAL_RCC_OscConfig+0x4c8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d106      	bne.n	8003c3a <HAL_RCC_OscConfig+0x312>
 8003c2c:	4b6f      	ldr	r3, [pc, #444]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	4a6e      	ldr	r2, [pc, #440]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	6213      	str	r3, [r2, #32]
 8003c38:	e02d      	b.n	8003c96 <HAL_RCC_OscConfig+0x36e>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10c      	bne.n	8003c5c <HAL_RCC_OscConfig+0x334>
 8003c42:	4b6a      	ldr	r3, [pc, #424]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	4a69      	ldr	r2, [pc, #420]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	6213      	str	r3, [r2, #32]
 8003c4e:	4b67      	ldr	r3, [pc, #412]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	4a66      	ldr	r2, [pc, #408]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003c54:	f023 0304 	bic.w	r3, r3, #4
 8003c58:	6213      	str	r3, [r2, #32]
 8003c5a:	e01c      	b.n	8003c96 <HAL_RCC_OscConfig+0x36e>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	2b05      	cmp	r3, #5
 8003c62:	d10c      	bne.n	8003c7e <HAL_RCC_OscConfig+0x356>
 8003c64:	4b61      	ldr	r3, [pc, #388]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	4a60      	ldr	r2, [pc, #384]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003c6a:	f043 0304 	orr.w	r3, r3, #4
 8003c6e:	6213      	str	r3, [r2, #32]
 8003c70:	4b5e      	ldr	r3, [pc, #376]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	4a5d      	ldr	r2, [pc, #372]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003c76:	f043 0301 	orr.w	r3, r3, #1
 8003c7a:	6213      	str	r3, [r2, #32]
 8003c7c:	e00b      	b.n	8003c96 <HAL_RCC_OscConfig+0x36e>
 8003c7e:	4b5b      	ldr	r3, [pc, #364]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	4a5a      	ldr	r2, [pc, #360]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	6213      	str	r3, [r2, #32]
 8003c8a:	4b58      	ldr	r3, [pc, #352]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	4a57      	ldr	r2, [pc, #348]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003c90:	f023 0304 	bic.w	r3, r3, #4
 8003c94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d015      	beq.n	8003cca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c9e:	f7fe fd6f 	bl	8002780 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca4:	e00a      	b.n	8003cbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca6:	f7fe fd6b 	bl	8002780 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e0b1      	b.n	8003e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cbc:	4b4b      	ldr	r3, [pc, #300]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0ee      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x37e>
 8003cc8:	e014      	b.n	8003cf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cca:	f7fe fd59 	bl	8002780 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd0:	e00a      	b.n	8003ce8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd2:	f7fe fd55 	bl	8002780 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e09b      	b.n	8003e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce8:	4b40      	ldr	r3, [pc, #256]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1ee      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cf4:	7dfb      	ldrb	r3, [r7, #23]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d105      	bne.n	8003d06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cfa:	4b3c      	ldr	r3, [pc, #240]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	4a3b      	ldr	r2, [pc, #236]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003d00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 8087 	beq.w	8003e1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d10:	4b36      	ldr	r3, [pc, #216]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 030c 	and.w	r3, r3, #12
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d061      	beq.n	8003de0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d146      	bne.n	8003db2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d24:	4b33      	ldr	r3, [pc, #204]	@ (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2a:	f7fe fd29 	bl	8002780 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d32:	f7fe fd25 	bl	8002780 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e06d      	b.n	8003e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d44:	4b29      	ldr	r3, [pc, #164]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f0      	bne.n	8003d32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d58:	d108      	bne.n	8003d6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d5a:	4b24      	ldr	r3, [pc, #144]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	4921      	ldr	r1, [pc, #132]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a19      	ldr	r1, [r3, #32]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	491b      	ldr	r1, [pc, #108]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d84:	4b1b      	ldr	r3, [pc, #108]	@ (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8a:	f7fe fcf9 	bl	8002780 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d92:	f7fe fcf5 	bl	8002780 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e03d      	b.n	8003e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003da4:	4b11      	ldr	r3, [pc, #68]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0f0      	beq.n	8003d92 <HAL_RCC_OscConfig+0x46a>
 8003db0:	e035      	b.n	8003e1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db2:	4b10      	ldr	r3, [pc, #64]	@ (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db8:	f7fe fce2 	bl	8002780 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc0:	f7fe fcde 	bl	8002780 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e026      	b.n	8003e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dd2:	4b06      	ldr	r3, [pc, #24]	@ (8003dec <HAL_RCC_OscConfig+0x4c4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x498>
 8003dde:	e01e      	b.n	8003e1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d107      	bne.n	8003df8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e019      	b.n	8003e20 <HAL_RCC_OscConfig+0x4f8>
 8003dec:	40021000 	.word	0x40021000
 8003df0:	40007000 	.word	0x40007000
 8003df4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003df8:	4b0b      	ldr	r3, [pc, #44]	@ (8003e28 <HAL_RCC_OscConfig+0x500>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d106      	bne.n	8003e1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d001      	beq.n	8003e1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40021000 	.word	0x40021000

08003e2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0d0      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e40:	4b6a      	ldr	r3, [pc, #424]	@ (8003fec <HAL_RCC_ClockConfig+0x1c0>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d910      	bls.n	8003e70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4e:	4b67      	ldr	r3, [pc, #412]	@ (8003fec <HAL_RCC_ClockConfig+0x1c0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 0207 	bic.w	r2, r3, #7
 8003e56:	4965      	ldr	r1, [pc, #404]	@ (8003fec <HAL_RCC_ClockConfig+0x1c0>)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5e:	4b63      	ldr	r3, [pc, #396]	@ (8003fec <HAL_RCC_ClockConfig+0x1c0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e0b8      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d020      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e88:	4b59      	ldr	r3, [pc, #356]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	4a58      	ldr	r2, [pc, #352]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003e92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ea0:	4b53      	ldr	r3, [pc, #332]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	4a52      	ldr	r2, [pc, #328]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003eaa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eac:	4b50      	ldr	r3, [pc, #320]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	494d      	ldr	r1, [pc, #308]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d040      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d107      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed2:	4b47      	ldr	r3, [pc, #284]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d115      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e07f      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d107      	bne.n	8003efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eea:	4b41      	ldr	r3, [pc, #260]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d109      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e073      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003efa:	4b3d      	ldr	r3, [pc, #244]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e06b      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f0a:	4b39      	ldr	r3, [pc, #228]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f023 0203 	bic.w	r2, r3, #3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	4936      	ldr	r1, [pc, #216]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f1c:	f7fe fc30 	bl	8002780 <HAL_GetTick>
 8003f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f22:	e00a      	b.n	8003f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f24:	f7fe fc2c 	bl	8002780 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e053      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f003 020c 	and.w	r2, r3, #12
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d1eb      	bne.n	8003f24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f4c:	4b27      	ldr	r3, [pc, #156]	@ (8003fec <HAL_RCC_ClockConfig+0x1c0>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d210      	bcs.n	8003f7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5a:	4b24      	ldr	r3, [pc, #144]	@ (8003fec <HAL_RCC_ClockConfig+0x1c0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f023 0207 	bic.w	r2, r3, #7
 8003f62:	4922      	ldr	r1, [pc, #136]	@ (8003fec <HAL_RCC_ClockConfig+0x1c0>)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6a:	4b20      	ldr	r3, [pc, #128]	@ (8003fec <HAL_RCC_ClockConfig+0x1c0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0307 	and.w	r3, r3, #7
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d001      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e032      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f88:	4b19      	ldr	r3, [pc, #100]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	4916      	ldr	r1, [pc, #88]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d009      	beq.n	8003fba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fa6:	4b12      	ldr	r3, [pc, #72]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	490e      	ldr	r1, [pc, #56]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fba:	f000 f821 	bl	8004000 <HAL_RCC_GetSysClockFreq>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	091b      	lsrs	r3, r3, #4
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	490a      	ldr	r1, [pc, #40]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fcc:	5ccb      	ldrb	r3, [r1, r3]
 8003fce:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd2:	4a09      	ldr	r2, [pc, #36]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1cc>)
 8003fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fd6:	4b09      	ldr	r3, [pc, #36]	@ (8003ffc <HAL_RCC_ClockConfig+0x1d0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe fb8e 	bl	80026fc <HAL_InitTick>

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40022000 	.word	0x40022000
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	08005bc0 	.word	0x08005bc0
 8003ff8:	20000004 	.word	0x20000004
 8003ffc:	20000008 	.word	0x20000008

08004000 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	2300      	movs	r3, #0
 800400c:	60bb      	str	r3, [r7, #8]
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	2300      	movs	r3, #0
 8004014:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800401a:	4b1e      	ldr	r3, [pc, #120]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x94>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b04      	cmp	r3, #4
 8004028:	d002      	beq.n	8004030 <HAL_RCC_GetSysClockFreq+0x30>
 800402a:	2b08      	cmp	r3, #8
 800402c:	d003      	beq.n	8004036 <HAL_RCC_GetSysClockFreq+0x36>
 800402e:	e027      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004030:	4b19      	ldr	r3, [pc, #100]	@ (8004098 <HAL_RCC_GetSysClockFreq+0x98>)
 8004032:	613b      	str	r3, [r7, #16]
      break;
 8004034:	e027      	b.n	8004086 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	0c9b      	lsrs	r3, r3, #18
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	4a17      	ldr	r2, [pc, #92]	@ (800409c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004040:	5cd3      	ldrb	r3, [r2, r3]
 8004042:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d010      	beq.n	8004070 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800404e:	4b11      	ldr	r3, [pc, #68]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x94>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	0c5b      	lsrs	r3, r3, #17
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	4a11      	ldr	r2, [pc, #68]	@ (80040a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800405a:	5cd3      	ldrb	r3, [r2, r3]
 800405c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a0d      	ldr	r2, [pc, #52]	@ (8004098 <HAL_RCC_GetSysClockFreq+0x98>)
 8004062:	fb03 f202 	mul.w	r2, r3, r2
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	fbb2 f3f3 	udiv	r3, r2, r3
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	e004      	b.n	800407a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a0c      	ldr	r2, [pc, #48]	@ (80040a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004074:	fb02 f303 	mul.w	r3, r2, r3
 8004078:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	613b      	str	r3, [r7, #16]
      break;
 800407e:	e002      	b.n	8004086 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004080:	4b05      	ldr	r3, [pc, #20]	@ (8004098 <HAL_RCC_GetSysClockFreq+0x98>)
 8004082:	613b      	str	r3, [r7, #16]
      break;
 8004084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004086:	693b      	ldr	r3, [r7, #16]
}
 8004088:	4618      	mov	r0, r3
 800408a:	371c      	adds	r7, #28
 800408c:	46bd      	mov	sp, r7
 800408e:	bc80      	pop	{r7}
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	40021000 	.word	0x40021000
 8004098:	007a1200 	.word	0x007a1200
 800409c:	0800cc64 	.word	0x0800cc64
 80040a0:	0800cc74 	.word	0x0800cc74
 80040a4:	003d0900 	.word	0x003d0900

080040a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040ac:	4b02      	ldr	r3, [pc, #8]	@ (80040b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80040ae:	681b      	ldr	r3, [r3, #0]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr
 80040b8:	20000004 	.word	0x20000004

080040bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040c0:	f7ff fff2 	bl	80040a8 <HAL_RCC_GetHCLKFreq>
 80040c4:	4602      	mov	r2, r0
 80040c6:	4b05      	ldr	r3, [pc, #20]	@ (80040dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	0a1b      	lsrs	r3, r3, #8
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	4903      	ldr	r1, [pc, #12]	@ (80040e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040d2:	5ccb      	ldrb	r3, [r1, r3]
 80040d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d8:	4618      	mov	r0, r3
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40021000 	.word	0x40021000
 80040e0:	08005bd0 	.word	0x08005bd0

080040e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004118 <RCC_Delay+0x34>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a0a      	ldr	r2, [pc, #40]	@ (800411c <RCC_Delay+0x38>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	0a5b      	lsrs	r3, r3, #9
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	fb02 f303 	mul.w	r3, r2, r3
 80040fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004100:	bf00      	nop
  }
  while (Delay --);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	1e5a      	subs	r2, r3, #1
 8004106:	60fa      	str	r2, [r7, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1f9      	bne.n	8004100 <RCC_Delay+0x1c>
}
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr
 8004118:	20000004 	.word	0x20000004
 800411c:	10624dd3 	.word	0x10624dd3

08004120 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e076      	b.n	8004220 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004136:	2b00      	cmp	r3, #0
 8004138:	d108      	bne.n	800414c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004142:	d009      	beq.n	8004158 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	61da      	str	r2, [r3, #28]
 800414a:	e005      	b.n	8004158 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fd ff7a 	bl	800206c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800418e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80041a0:	431a      	orrs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041dc:	ea42 0103 	orr.w	r1, r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	0c1a      	lsrs	r2, r3, #16
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f002 0204 	and.w	r2, r2, #4
 80041fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	69da      	ldr	r2, [r3, #28]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800420e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e093      	b.n	8004364 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d106      	bne.n	8004256 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7fe f819 	bl	8002288 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2202      	movs	r2, #2
 800425a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6812      	ldr	r2, [r2, #0]
 8004268:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800426c:	f023 0307 	bic.w	r3, r3, #7
 8004270:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3304      	adds	r3, #4
 800427a:	4619      	mov	r1, r3
 800427c:	4610      	mov	r0, r2
 800427e:	f000 f903 	bl	8004488 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042aa:	f023 0303 	bic.w	r3, r3, #3
 80042ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	021b      	lsls	r3, r3, #8
 80042ba:	4313      	orrs	r3, r2
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80042c8:	f023 030c 	bic.w	r3, r3, #12
 80042cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	4313      	orrs	r3, r2
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	011a      	lsls	r2, r3, #4
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	031b      	lsls	r3, r3, #12
 80042f8:	4313      	orrs	r3, r2
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004306:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	4313      	orrs	r3, r2
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800437c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004384:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800438c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004394:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d110      	bne.n	80043be <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d102      	bne.n	80043a8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80043a2:	7b7b      	ldrb	r3, [r7, #13]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d001      	beq.n	80043ac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e069      	b.n	8004480 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043bc:	e031      	b.n	8004422 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	d110      	bne.n	80043e6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043c4:	7bbb      	ldrb	r3, [r7, #14]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d102      	bne.n	80043d0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80043ca:	7b3b      	ldrb	r3, [r7, #12]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d001      	beq.n	80043d4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e055      	b.n	8004480 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043e4:	e01d      	b.n	8004422 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d108      	bne.n	80043fe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043ec:	7bbb      	ldrb	r3, [r7, #14]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d105      	bne.n	80043fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043f2:	7b7b      	ldrb	r3, [r7, #13]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d102      	bne.n	80043fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80043f8:	7b3b      	ldrb	r3, [r7, #12]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d001      	beq.n	8004402 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e03e      	b.n	8004480 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2202      	movs	r2, #2
 8004406:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2202      	movs	r2, #2
 800440e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2202      	movs	r2, #2
 8004416:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2202      	movs	r2, #2
 800441e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d003      	beq.n	8004430 <HAL_TIM_Encoder_Start+0xc4>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2b04      	cmp	r3, #4
 800442c:	d008      	beq.n	8004440 <HAL_TIM_Encoder_Start+0xd4>
 800442e:	e00f      	b.n	8004450 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2201      	movs	r2, #1
 8004436:	2100      	movs	r1, #0
 8004438:	4618      	mov	r0, r3
 800443a:	f000 f893 	bl	8004564 <TIM_CCxChannelCmd>
      break;
 800443e:	e016      	b.n	800446e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2201      	movs	r2, #1
 8004446:	2104      	movs	r1, #4
 8004448:	4618      	mov	r0, r3
 800444a:	f000 f88b 	bl	8004564 <TIM_CCxChannelCmd>
      break;
 800444e:	e00e      	b.n	800446e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2201      	movs	r2, #1
 8004456:	2100      	movs	r1, #0
 8004458:	4618      	mov	r0, r3
 800445a:	f000 f883 	bl	8004564 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2201      	movs	r2, #1
 8004464:	2104      	movs	r1, #4
 8004466:	4618      	mov	r0, r3
 8004468:	f000 f87c 	bl	8004564 <TIM_CCxChannelCmd>
      break;
 800446c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0201 	orr.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a2f      	ldr	r2, [pc, #188]	@ (8004558 <TIM_Base_SetConfig+0xd0>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00b      	beq.n	80044b8 <TIM_Base_SetConfig+0x30>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044a6:	d007      	beq.n	80044b8 <TIM_Base_SetConfig+0x30>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a2c      	ldr	r2, [pc, #176]	@ (800455c <TIM_Base_SetConfig+0xd4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d003      	beq.n	80044b8 <TIM_Base_SetConfig+0x30>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004560 <TIM_Base_SetConfig+0xd8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d108      	bne.n	80044ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a22      	ldr	r2, [pc, #136]	@ (8004558 <TIM_Base_SetConfig+0xd0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00b      	beq.n	80044ea <TIM_Base_SetConfig+0x62>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044d8:	d007      	beq.n	80044ea <TIM_Base_SetConfig+0x62>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a1f      	ldr	r2, [pc, #124]	@ (800455c <TIM_Base_SetConfig+0xd4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d003      	beq.n	80044ea <TIM_Base_SetConfig+0x62>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004560 <TIM_Base_SetConfig+0xd8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d108      	bne.n	80044fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a0d      	ldr	r2, [pc, #52]	@ (8004558 <TIM_Base_SetConfig+0xd0>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d103      	bne.n	8004530 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f023 0201 	bic.w	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	611a      	str	r2, [r3, #16]
  }
}
 800454e:	bf00      	nop
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr
 8004558:	40012c00 	.word	0x40012c00
 800455c:	40000400 	.word	0x40000400
 8004560:	40000800 	.word	0x40000800

08004564 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 031f 	and.w	r3, r3, #31
 8004576:	2201      	movs	r2, #1
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a1a      	ldr	r2, [r3, #32]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	43db      	mvns	r3, r3
 8004586:	401a      	ands	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a1a      	ldr	r2, [r3, #32]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 031f 	and.w	r3, r3, #31
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	fa01 f303 	lsl.w	r3, r1, r3
 800459c:	431a      	orrs	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	621a      	str	r2, [r3, #32]
}
 80045a2:	bf00      	nop
 80045a4:	371c      	adds	r7, #28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr

080045ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e046      	b.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a16      	ldr	r2, [pc, #88]	@ (800465c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d00e      	beq.n	8004626 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004610:	d009      	beq.n	8004626 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a12      	ldr	r2, [pc, #72]	@ (8004660 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d004      	beq.n	8004626 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a10      	ldr	r2, [pc, #64]	@ (8004664 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d10c      	bne.n	8004640 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800462c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	4313      	orrs	r3, r2
 8004636:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr
 800465c:	40012c00 	.word	0x40012c00
 8004660:	40000400 	.word	0x40000400
 8004664:	40000800 	.word	0x40000800

08004668 <memset>:
 8004668:	4603      	mov	r3, r0
 800466a:	4402      	add	r2, r0
 800466c:	4293      	cmp	r3, r2
 800466e:	d100      	bne.n	8004672 <memset+0xa>
 8004670:	4770      	bx	lr
 8004672:	f803 1b01 	strb.w	r1, [r3], #1
 8004676:	e7f9      	b.n	800466c <memset+0x4>

08004678 <__errno>:
 8004678:	4b01      	ldr	r3, [pc, #4]	@ (8004680 <__errno+0x8>)
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	20000010 	.word	0x20000010

08004684 <__libc_init_array>:
 8004684:	b570      	push	{r4, r5, r6, lr}
 8004686:	2600      	movs	r6, #0
 8004688:	4d0c      	ldr	r5, [pc, #48]	@ (80046bc <__libc_init_array+0x38>)
 800468a:	4c0d      	ldr	r4, [pc, #52]	@ (80046c0 <__libc_init_array+0x3c>)
 800468c:	1b64      	subs	r4, r4, r5
 800468e:	10a4      	asrs	r4, r4, #2
 8004690:	42a6      	cmp	r6, r4
 8004692:	d109      	bne.n	80046a8 <__libc_init_array+0x24>
 8004694:	f001 fa84 	bl	8005ba0 <_init>
 8004698:	2600      	movs	r6, #0
 800469a:	4d0a      	ldr	r5, [pc, #40]	@ (80046c4 <__libc_init_array+0x40>)
 800469c:	4c0a      	ldr	r4, [pc, #40]	@ (80046c8 <__libc_init_array+0x44>)
 800469e:	1b64      	subs	r4, r4, r5
 80046a0:	10a4      	asrs	r4, r4, #2
 80046a2:	42a6      	cmp	r6, r4
 80046a4:	d105      	bne.n	80046b2 <__libc_init_array+0x2e>
 80046a6:	bd70      	pop	{r4, r5, r6, pc}
 80046a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ac:	4798      	blx	r3
 80046ae:	3601      	adds	r6, #1
 80046b0:	e7ee      	b.n	8004690 <__libc_init_array+0xc>
 80046b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b6:	4798      	blx	r3
 80046b8:	3601      	adds	r6, #1
 80046ba:	e7f2      	b.n	80046a2 <__libc_init_array+0x1e>
 80046bc:	0800d068 	.word	0x0800d068
 80046c0:	0800d068 	.word	0x0800d068
 80046c4:	0800d068 	.word	0x0800d068
 80046c8:	0800d06c 	.word	0x0800d06c

080046cc <memcpy>:
 80046cc:	440a      	add	r2, r1
 80046ce:	4291      	cmp	r1, r2
 80046d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80046d4:	d100      	bne.n	80046d8 <memcpy+0xc>
 80046d6:	4770      	bx	lr
 80046d8:	b510      	push	{r4, lr}
 80046da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046de:	4291      	cmp	r1, r2
 80046e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046e4:	d1f9      	bne.n	80046da <memcpy+0xe>
 80046e6:	bd10      	pop	{r4, pc}

080046e8 <powf>:
 80046e8:	b570      	push	{r4, r5, r6, lr}
 80046ea:	460c      	mov	r4, r1
 80046ec:	4606      	mov	r6, r0
 80046ee:	f000 fa43 	bl	8004b78 <__ieee754_powf>
 80046f2:	4621      	mov	r1, r4
 80046f4:	4605      	mov	r5, r0
 80046f6:	4620      	mov	r0, r4
 80046f8:	f7fb fffc 	bl	80006f4 <__aeabi_fcmpun>
 80046fc:	bb68      	cbnz	r0, 800475a <powf+0x72>
 80046fe:	2100      	movs	r1, #0
 8004700:	4630      	mov	r0, r6
 8004702:	f7fb ffc5 	bl	8000690 <__aeabi_fcmpeq>
 8004706:	b190      	cbz	r0, 800472e <powf+0x46>
 8004708:	2100      	movs	r1, #0
 800470a:	4620      	mov	r0, r4
 800470c:	f7fb ffc0 	bl	8000690 <__aeabi_fcmpeq>
 8004710:	2800      	cmp	r0, #0
 8004712:	d133      	bne.n	800477c <powf+0x94>
 8004714:	4620      	mov	r0, r4
 8004716:	f000 f8c1 	bl	800489c <finitef>
 800471a:	b1f0      	cbz	r0, 800475a <powf+0x72>
 800471c:	2100      	movs	r1, #0
 800471e:	4620      	mov	r0, r4
 8004720:	f7fb ffc0 	bl	80006a4 <__aeabi_fcmplt>
 8004724:	b1c8      	cbz	r0, 800475a <powf+0x72>
 8004726:	f7ff ffa7 	bl	8004678 <__errno>
 800472a:	2322      	movs	r3, #34	@ 0x22
 800472c:	e014      	b.n	8004758 <powf+0x70>
 800472e:	4628      	mov	r0, r5
 8004730:	f000 f8b4 	bl	800489c <finitef>
 8004734:	b998      	cbnz	r0, 800475e <powf+0x76>
 8004736:	4630      	mov	r0, r6
 8004738:	f000 f8b0 	bl	800489c <finitef>
 800473c:	b178      	cbz	r0, 800475e <powf+0x76>
 800473e:	4620      	mov	r0, r4
 8004740:	f000 f8ac 	bl	800489c <finitef>
 8004744:	b158      	cbz	r0, 800475e <powf+0x76>
 8004746:	4629      	mov	r1, r5
 8004748:	4628      	mov	r0, r5
 800474a:	f7fb ffd3 	bl	80006f4 <__aeabi_fcmpun>
 800474e:	2800      	cmp	r0, #0
 8004750:	d0e9      	beq.n	8004726 <powf+0x3e>
 8004752:	f7ff ff91 	bl	8004678 <__errno>
 8004756:	2321      	movs	r3, #33	@ 0x21
 8004758:	6003      	str	r3, [r0, #0]
 800475a:	4628      	mov	r0, r5
 800475c:	bd70      	pop	{r4, r5, r6, pc}
 800475e:	2100      	movs	r1, #0
 8004760:	4628      	mov	r0, r5
 8004762:	f7fb ff95 	bl	8000690 <__aeabi_fcmpeq>
 8004766:	2800      	cmp	r0, #0
 8004768:	d0f7      	beq.n	800475a <powf+0x72>
 800476a:	4630      	mov	r0, r6
 800476c:	f000 f896 	bl	800489c <finitef>
 8004770:	2800      	cmp	r0, #0
 8004772:	d0f2      	beq.n	800475a <powf+0x72>
 8004774:	4620      	mov	r0, r4
 8004776:	f000 f891 	bl	800489c <finitef>
 800477a:	e7d3      	b.n	8004724 <powf+0x3c>
 800477c:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8004780:	e7eb      	b.n	800475a <powf+0x72>

08004782 <sqrtf>:
 8004782:	b538      	push	{r3, r4, r5, lr}
 8004784:	4605      	mov	r5, r0
 8004786:	f000 f891 	bl	80048ac <__ieee754_sqrtf>
 800478a:	4629      	mov	r1, r5
 800478c:	4604      	mov	r4, r0
 800478e:	4628      	mov	r0, r5
 8004790:	f7fb ffb0 	bl	80006f4 <__aeabi_fcmpun>
 8004794:	b968      	cbnz	r0, 80047b2 <sqrtf+0x30>
 8004796:	2100      	movs	r1, #0
 8004798:	4628      	mov	r0, r5
 800479a:	f7fb ff83 	bl	80006a4 <__aeabi_fcmplt>
 800479e:	b140      	cbz	r0, 80047b2 <sqrtf+0x30>
 80047a0:	f7ff ff6a 	bl	8004678 <__errno>
 80047a4:	2321      	movs	r3, #33	@ 0x21
 80047a6:	2100      	movs	r1, #0
 80047a8:	6003      	str	r3, [r0, #0]
 80047aa:	4608      	mov	r0, r1
 80047ac:	f7fb fe90 	bl	80004d0 <__aeabi_fdiv>
 80047b0:	4604      	mov	r4, r0
 80047b2:	4620      	mov	r0, r4
 80047b4:	bd38      	pop	{r3, r4, r5, pc}
	...

080047b8 <cosf>:
 80047b8:	b507      	push	{r0, r1, r2, lr}
 80047ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004824 <cosf+0x6c>)
 80047bc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80047c0:	4293      	cmp	r3, r2
 80047c2:	4601      	mov	r1, r0
 80047c4:	d805      	bhi.n	80047d2 <cosf+0x1a>
 80047c6:	2100      	movs	r1, #0
 80047c8:	b003      	add	sp, #12
 80047ca:	f85d eb04 	ldr.w	lr, [sp], #4
 80047ce:	f000 b8dd 	b.w	800498c <__kernel_cosf>
 80047d2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80047d6:	d304      	bcc.n	80047e2 <cosf+0x2a>
 80047d8:	f7fb fcbc 	bl	8000154 <__aeabi_fsub>
 80047dc:	b003      	add	sp, #12
 80047de:	f85d fb04 	ldr.w	pc, [sp], #4
 80047e2:	4669      	mov	r1, sp
 80047e4:	f000 fd28 	bl	8005238 <__ieee754_rem_pio2f>
 80047e8:	f000 0203 	and.w	r2, r0, #3
 80047ec:	2a01      	cmp	r2, #1
 80047ee:	d007      	beq.n	8004800 <cosf+0x48>
 80047f0:	2a02      	cmp	r2, #2
 80047f2:	d00c      	beq.n	800480e <cosf+0x56>
 80047f4:	b982      	cbnz	r2, 8004818 <cosf+0x60>
 80047f6:	9901      	ldr	r1, [sp, #4]
 80047f8:	9800      	ldr	r0, [sp, #0]
 80047fa:	f000 f8c7 	bl	800498c <__kernel_cosf>
 80047fe:	e7ed      	b.n	80047dc <cosf+0x24>
 8004800:	9901      	ldr	r1, [sp, #4]
 8004802:	9800      	ldr	r0, [sp, #0]
 8004804:	f000 f942 	bl	8004a8c <__kernel_sinf>
 8004808:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800480c:	e7e6      	b.n	80047dc <cosf+0x24>
 800480e:	9901      	ldr	r1, [sp, #4]
 8004810:	9800      	ldr	r0, [sp, #0]
 8004812:	f000 f8bb 	bl	800498c <__kernel_cosf>
 8004816:	e7f7      	b.n	8004808 <cosf+0x50>
 8004818:	2201      	movs	r2, #1
 800481a:	9901      	ldr	r1, [sp, #4]
 800481c:	9800      	ldr	r0, [sp, #0]
 800481e:	f000 f935 	bl	8004a8c <__kernel_sinf>
 8004822:	e7db      	b.n	80047dc <cosf+0x24>
 8004824:	3f490fd8 	.word	0x3f490fd8

08004828 <sinf>:
 8004828:	b507      	push	{r0, r1, r2, lr}
 800482a:	4a1b      	ldr	r2, [pc, #108]	@ (8004898 <sinf+0x70>)
 800482c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8004830:	4293      	cmp	r3, r2
 8004832:	4601      	mov	r1, r0
 8004834:	d806      	bhi.n	8004844 <sinf+0x1c>
 8004836:	2200      	movs	r2, #0
 8004838:	2100      	movs	r1, #0
 800483a:	b003      	add	sp, #12
 800483c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004840:	f000 b924 	b.w	8004a8c <__kernel_sinf>
 8004844:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004848:	d304      	bcc.n	8004854 <sinf+0x2c>
 800484a:	f7fb fc83 	bl	8000154 <__aeabi_fsub>
 800484e:	b003      	add	sp, #12
 8004850:	f85d fb04 	ldr.w	pc, [sp], #4
 8004854:	4669      	mov	r1, sp
 8004856:	f000 fcef 	bl	8005238 <__ieee754_rem_pio2f>
 800485a:	f000 0003 	and.w	r0, r0, #3
 800485e:	2801      	cmp	r0, #1
 8004860:	d008      	beq.n	8004874 <sinf+0x4c>
 8004862:	2802      	cmp	r0, #2
 8004864:	d00b      	beq.n	800487e <sinf+0x56>
 8004866:	b990      	cbnz	r0, 800488e <sinf+0x66>
 8004868:	2201      	movs	r2, #1
 800486a:	9901      	ldr	r1, [sp, #4]
 800486c:	9800      	ldr	r0, [sp, #0]
 800486e:	f000 f90d 	bl	8004a8c <__kernel_sinf>
 8004872:	e7ec      	b.n	800484e <sinf+0x26>
 8004874:	9901      	ldr	r1, [sp, #4]
 8004876:	9800      	ldr	r0, [sp, #0]
 8004878:	f000 f888 	bl	800498c <__kernel_cosf>
 800487c:	e7e7      	b.n	800484e <sinf+0x26>
 800487e:	2201      	movs	r2, #1
 8004880:	9901      	ldr	r1, [sp, #4]
 8004882:	9800      	ldr	r0, [sp, #0]
 8004884:	f000 f902 	bl	8004a8c <__kernel_sinf>
 8004888:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800488c:	e7df      	b.n	800484e <sinf+0x26>
 800488e:	9901      	ldr	r1, [sp, #4]
 8004890:	9800      	ldr	r0, [sp, #0]
 8004892:	f000 f87b 	bl	800498c <__kernel_cosf>
 8004896:	e7f7      	b.n	8004888 <sinf+0x60>
 8004898:	3f490fd8 	.word	0x3f490fd8

0800489c <finitef>:
 800489c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80048a0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80048a4:	bfac      	ite	ge
 80048a6:	2000      	movge	r0, #0
 80048a8:	2001      	movlt	r0, #1
 80048aa:	4770      	bx	lr

080048ac <__ieee754_sqrtf>:
 80048ac:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80048b0:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80048b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048b8:	4603      	mov	r3, r0
 80048ba:	4604      	mov	r4, r0
 80048bc:	d30a      	bcc.n	80048d4 <__ieee754_sqrtf+0x28>
 80048be:	4601      	mov	r1, r0
 80048c0:	f7fb fd52 	bl	8000368 <__aeabi_fmul>
 80048c4:	4601      	mov	r1, r0
 80048c6:	4620      	mov	r0, r4
 80048c8:	f7fb fc46 	bl	8000158 <__addsf3>
 80048cc:	4604      	mov	r4, r0
 80048ce:	4620      	mov	r0, r4
 80048d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048d4:	2a00      	cmp	r2, #0
 80048d6:	d0fa      	beq.n	80048ce <__ieee754_sqrtf+0x22>
 80048d8:	2800      	cmp	r0, #0
 80048da:	da06      	bge.n	80048ea <__ieee754_sqrtf+0x3e>
 80048dc:	4601      	mov	r1, r0
 80048de:	f7fb fc39 	bl	8000154 <__aeabi_fsub>
 80048e2:	4601      	mov	r1, r0
 80048e4:	f7fb fdf4 	bl	80004d0 <__aeabi_fdiv>
 80048e8:	e7f0      	b.n	80048cc <__ieee754_sqrtf+0x20>
 80048ea:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 80048ee:	d03c      	beq.n	800496a <__ieee754_sqrtf+0xbe>
 80048f0:	15c2      	asrs	r2, r0, #23
 80048f2:	2400      	movs	r4, #0
 80048f4:	2019      	movs	r0, #25
 80048f6:	4626      	mov	r6, r4
 80048f8:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80048fc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004900:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8004904:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004908:	07d2      	lsls	r2, r2, #31
 800490a:	bf58      	it	pl
 800490c:	005b      	lslpl	r3, r3, #1
 800490e:	106d      	asrs	r5, r5, #1
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	1872      	adds	r2, r6, r1
 8004914:	429a      	cmp	r2, r3
 8004916:	bfcf      	iteee	gt
 8004918:	461a      	movgt	r2, r3
 800491a:	1856      	addle	r6, r2, r1
 800491c:	1864      	addle	r4, r4, r1
 800491e:	1a9a      	suble	r2, r3, r2
 8004920:	3801      	subs	r0, #1
 8004922:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8004926:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800492a:	d1f2      	bne.n	8004912 <__ieee754_sqrtf+0x66>
 800492c:	b1ba      	cbz	r2, 800495e <__ieee754_sqrtf+0xb2>
 800492e:	4e15      	ldr	r6, [pc, #84]	@ (8004984 <__ieee754_sqrtf+0xd8>)
 8004930:	4f15      	ldr	r7, [pc, #84]	@ (8004988 <__ieee754_sqrtf+0xdc>)
 8004932:	6830      	ldr	r0, [r6, #0]
 8004934:	6839      	ldr	r1, [r7, #0]
 8004936:	f7fb fc0d 	bl	8000154 <__aeabi_fsub>
 800493a:	f8d6 8000 	ldr.w	r8, [r6]
 800493e:	4601      	mov	r1, r0
 8004940:	4640      	mov	r0, r8
 8004942:	f7fb feb9 	bl	80006b8 <__aeabi_fcmple>
 8004946:	b150      	cbz	r0, 800495e <__ieee754_sqrtf+0xb2>
 8004948:	6830      	ldr	r0, [r6, #0]
 800494a:	6839      	ldr	r1, [r7, #0]
 800494c:	f7fb fc04 	bl	8000158 <__addsf3>
 8004950:	6836      	ldr	r6, [r6, #0]
 8004952:	4601      	mov	r1, r0
 8004954:	4630      	mov	r0, r6
 8004956:	f7fb fea5 	bl	80006a4 <__aeabi_fcmplt>
 800495a:	b170      	cbz	r0, 800497a <__ieee754_sqrtf+0xce>
 800495c:	3402      	adds	r4, #2
 800495e:	1064      	asrs	r4, r4, #1
 8004960:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8004964:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8004968:	e7b1      	b.n	80048ce <__ieee754_sqrtf+0x22>
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	0218      	lsls	r0, r3, #8
 800496e:	460a      	mov	r2, r1
 8004970:	f101 0101 	add.w	r1, r1, #1
 8004974:	d5f9      	bpl.n	800496a <__ieee754_sqrtf+0xbe>
 8004976:	4252      	negs	r2, r2
 8004978:	e7bb      	b.n	80048f2 <__ieee754_sqrtf+0x46>
 800497a:	3401      	adds	r4, #1
 800497c:	f024 0401 	bic.w	r4, r4, #1
 8004980:	e7ed      	b.n	800495e <__ieee754_sqrtf+0xb2>
 8004982:	bf00      	nop
 8004984:	0800cc7c 	.word	0x0800cc7c
 8004988:	0800cc78 	.word	0x0800cc78

0800498c <__kernel_cosf>:
 800498c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004990:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8004994:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 8004998:	4606      	mov	r6, r0
 800499a:	4688      	mov	r8, r1
 800499c:	d203      	bcs.n	80049a6 <__kernel_cosf+0x1a>
 800499e:	f7fb febf 	bl	8000720 <__aeabi_f2iz>
 80049a2:	2800      	cmp	r0, #0
 80049a4:	d05c      	beq.n	8004a60 <__kernel_cosf+0xd4>
 80049a6:	4631      	mov	r1, r6
 80049a8:	4630      	mov	r0, r6
 80049aa:	f7fb fcdd 	bl	8000368 <__aeabi_fmul>
 80049ae:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80049b2:	4604      	mov	r4, r0
 80049b4:	f7fb fcd8 	bl	8000368 <__aeabi_fmul>
 80049b8:	492b      	ldr	r1, [pc, #172]	@ (8004a68 <__kernel_cosf+0xdc>)
 80049ba:	4607      	mov	r7, r0
 80049bc:	4620      	mov	r0, r4
 80049be:	f7fb fcd3 	bl	8000368 <__aeabi_fmul>
 80049c2:	492a      	ldr	r1, [pc, #168]	@ (8004a6c <__kernel_cosf+0xe0>)
 80049c4:	f7fb fbc8 	bl	8000158 <__addsf3>
 80049c8:	4621      	mov	r1, r4
 80049ca:	f7fb fccd 	bl	8000368 <__aeabi_fmul>
 80049ce:	4928      	ldr	r1, [pc, #160]	@ (8004a70 <__kernel_cosf+0xe4>)
 80049d0:	f7fb fbc0 	bl	8000154 <__aeabi_fsub>
 80049d4:	4621      	mov	r1, r4
 80049d6:	f7fb fcc7 	bl	8000368 <__aeabi_fmul>
 80049da:	4926      	ldr	r1, [pc, #152]	@ (8004a74 <__kernel_cosf+0xe8>)
 80049dc:	f7fb fbbc 	bl	8000158 <__addsf3>
 80049e0:	4621      	mov	r1, r4
 80049e2:	f7fb fcc1 	bl	8000368 <__aeabi_fmul>
 80049e6:	4924      	ldr	r1, [pc, #144]	@ (8004a78 <__kernel_cosf+0xec>)
 80049e8:	f7fb fbb4 	bl	8000154 <__aeabi_fsub>
 80049ec:	4621      	mov	r1, r4
 80049ee:	f7fb fcbb 	bl	8000368 <__aeabi_fmul>
 80049f2:	4922      	ldr	r1, [pc, #136]	@ (8004a7c <__kernel_cosf+0xf0>)
 80049f4:	f7fb fbb0 	bl	8000158 <__addsf3>
 80049f8:	4621      	mov	r1, r4
 80049fa:	f7fb fcb5 	bl	8000368 <__aeabi_fmul>
 80049fe:	4621      	mov	r1, r4
 8004a00:	f7fb fcb2 	bl	8000368 <__aeabi_fmul>
 8004a04:	4641      	mov	r1, r8
 8004a06:	4604      	mov	r4, r0
 8004a08:	4630      	mov	r0, r6
 8004a0a:	f7fb fcad 	bl	8000368 <__aeabi_fmul>
 8004a0e:	4601      	mov	r1, r0
 8004a10:	4620      	mov	r0, r4
 8004a12:	f7fb fb9f 	bl	8000154 <__aeabi_fsub>
 8004a16:	4b1a      	ldr	r3, [pc, #104]	@ (8004a80 <__kernel_cosf+0xf4>)
 8004a18:	4604      	mov	r4, r0
 8004a1a:	429d      	cmp	r5, r3
 8004a1c:	d80a      	bhi.n	8004a34 <__kernel_cosf+0xa8>
 8004a1e:	4601      	mov	r1, r0
 8004a20:	4638      	mov	r0, r7
 8004a22:	f7fb fb97 	bl	8000154 <__aeabi_fsub>
 8004a26:	4601      	mov	r1, r0
 8004a28:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004a2c:	f7fb fb92 	bl	8000154 <__aeabi_fsub>
 8004a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a34:	4b13      	ldr	r3, [pc, #76]	@ (8004a84 <__kernel_cosf+0xf8>)
 8004a36:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004a3a:	429d      	cmp	r5, r3
 8004a3c:	bf8c      	ite	hi
 8004a3e:	4d12      	ldrhi	r5, [pc, #72]	@ (8004a88 <__kernel_cosf+0xfc>)
 8004a40:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 8004a44:	4629      	mov	r1, r5
 8004a46:	f7fb fb85 	bl	8000154 <__aeabi_fsub>
 8004a4a:	4629      	mov	r1, r5
 8004a4c:	4606      	mov	r6, r0
 8004a4e:	4638      	mov	r0, r7
 8004a50:	f7fb fb80 	bl	8000154 <__aeabi_fsub>
 8004a54:	4621      	mov	r1, r4
 8004a56:	f7fb fb7d 	bl	8000154 <__aeabi_fsub>
 8004a5a:	4601      	mov	r1, r0
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	e7e5      	b.n	8004a2c <__kernel_cosf+0xa0>
 8004a60:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004a64:	e7e4      	b.n	8004a30 <__kernel_cosf+0xa4>
 8004a66:	bf00      	nop
 8004a68:	ad47d74e 	.word	0xad47d74e
 8004a6c:	310f74f6 	.word	0x310f74f6
 8004a70:	3493f27c 	.word	0x3493f27c
 8004a74:	37d00d01 	.word	0x37d00d01
 8004a78:	3ab60b61 	.word	0x3ab60b61
 8004a7c:	3d2aaaab 	.word	0x3d2aaaab
 8004a80:	3e999999 	.word	0x3e999999
 8004a84:	3f480000 	.word	0x3f480000
 8004a88:	3e900000 	.word	0x3e900000

08004a8c <__kernel_sinf>:
 8004a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a90:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8004a94:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8004a98:	4604      	mov	r4, r0
 8004a9a:	460f      	mov	r7, r1
 8004a9c:	4691      	mov	r9, r2
 8004a9e:	d203      	bcs.n	8004aa8 <__kernel_sinf+0x1c>
 8004aa0:	f7fb fe3e 	bl	8000720 <__aeabi_f2iz>
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	d035      	beq.n	8004b14 <__kernel_sinf+0x88>
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	4620      	mov	r0, r4
 8004aac:	f7fb fc5c 	bl	8000368 <__aeabi_fmul>
 8004ab0:	4605      	mov	r5, r0
 8004ab2:	4601      	mov	r1, r0
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f7fb fc57 	bl	8000368 <__aeabi_fmul>
 8004aba:	4929      	ldr	r1, [pc, #164]	@ (8004b60 <__kernel_sinf+0xd4>)
 8004abc:	4606      	mov	r6, r0
 8004abe:	4628      	mov	r0, r5
 8004ac0:	f7fb fc52 	bl	8000368 <__aeabi_fmul>
 8004ac4:	4927      	ldr	r1, [pc, #156]	@ (8004b64 <__kernel_sinf+0xd8>)
 8004ac6:	f7fb fb45 	bl	8000154 <__aeabi_fsub>
 8004aca:	4629      	mov	r1, r5
 8004acc:	f7fb fc4c 	bl	8000368 <__aeabi_fmul>
 8004ad0:	4925      	ldr	r1, [pc, #148]	@ (8004b68 <__kernel_sinf+0xdc>)
 8004ad2:	f7fb fb41 	bl	8000158 <__addsf3>
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	f7fb fc46 	bl	8000368 <__aeabi_fmul>
 8004adc:	4923      	ldr	r1, [pc, #140]	@ (8004b6c <__kernel_sinf+0xe0>)
 8004ade:	f7fb fb39 	bl	8000154 <__aeabi_fsub>
 8004ae2:	4629      	mov	r1, r5
 8004ae4:	f7fb fc40 	bl	8000368 <__aeabi_fmul>
 8004ae8:	4921      	ldr	r1, [pc, #132]	@ (8004b70 <__kernel_sinf+0xe4>)
 8004aea:	f7fb fb35 	bl	8000158 <__addsf3>
 8004aee:	4680      	mov	r8, r0
 8004af0:	f1b9 0f00 	cmp.w	r9, #0
 8004af4:	d111      	bne.n	8004b1a <__kernel_sinf+0x8e>
 8004af6:	4601      	mov	r1, r0
 8004af8:	4628      	mov	r0, r5
 8004afa:	f7fb fc35 	bl	8000368 <__aeabi_fmul>
 8004afe:	491d      	ldr	r1, [pc, #116]	@ (8004b74 <__kernel_sinf+0xe8>)
 8004b00:	f7fb fb28 	bl	8000154 <__aeabi_fsub>
 8004b04:	4631      	mov	r1, r6
 8004b06:	f7fb fc2f 	bl	8000368 <__aeabi_fmul>
 8004b0a:	4601      	mov	r1, r0
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f7fb fb23 	bl	8000158 <__addsf3>
 8004b12:	4604      	mov	r4, r0
 8004b14:	4620      	mov	r0, r4
 8004b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b1a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004b1e:	4638      	mov	r0, r7
 8004b20:	f7fb fc22 	bl	8000368 <__aeabi_fmul>
 8004b24:	4641      	mov	r1, r8
 8004b26:	4681      	mov	r9, r0
 8004b28:	4630      	mov	r0, r6
 8004b2a:	f7fb fc1d 	bl	8000368 <__aeabi_fmul>
 8004b2e:	4601      	mov	r1, r0
 8004b30:	4648      	mov	r0, r9
 8004b32:	f7fb fb0f 	bl	8000154 <__aeabi_fsub>
 8004b36:	4629      	mov	r1, r5
 8004b38:	f7fb fc16 	bl	8000368 <__aeabi_fmul>
 8004b3c:	4639      	mov	r1, r7
 8004b3e:	f7fb fb09 	bl	8000154 <__aeabi_fsub>
 8004b42:	490c      	ldr	r1, [pc, #48]	@ (8004b74 <__kernel_sinf+0xe8>)
 8004b44:	4605      	mov	r5, r0
 8004b46:	4630      	mov	r0, r6
 8004b48:	f7fb fc0e 	bl	8000368 <__aeabi_fmul>
 8004b4c:	4601      	mov	r1, r0
 8004b4e:	4628      	mov	r0, r5
 8004b50:	f7fb fb02 	bl	8000158 <__addsf3>
 8004b54:	4601      	mov	r1, r0
 8004b56:	4620      	mov	r0, r4
 8004b58:	f7fb fafc 	bl	8000154 <__aeabi_fsub>
 8004b5c:	e7d9      	b.n	8004b12 <__kernel_sinf+0x86>
 8004b5e:	bf00      	nop
 8004b60:	2f2ec9d3 	.word	0x2f2ec9d3
 8004b64:	32d72f34 	.word	0x32d72f34
 8004b68:	3638ef1b 	.word	0x3638ef1b
 8004b6c:	39500d01 	.word	0x39500d01
 8004b70:	3c088889 	.word	0x3c088889
 8004b74:	3e2aaaab 	.word	0x3e2aaaab

08004b78 <__ieee754_powf>:
 8004b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b7c:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 8004b80:	4681      	mov	r9, r0
 8004b82:	460f      	mov	r7, r1
 8004b84:	4606      	mov	r6, r0
 8004b86:	460c      	mov	r4, r1
 8004b88:	b087      	sub	sp, #28
 8004b8a:	d10c      	bne.n	8004ba6 <__ieee754_powf+0x2e>
 8004b8c:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 8004b90:	0076      	lsls	r6, r6, #1
 8004b92:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8004b96:	f240 8310 	bls.w	80051ba <__ieee754_powf+0x642>
 8004b9a:	4639      	mov	r1, r7
 8004b9c:	4648      	mov	r0, r9
 8004b9e:	f7fb fadb 	bl	8000158 <__addsf3>
 8004ba2:	4601      	mov	r1, r0
 8004ba4:	e043      	b.n	8004c2e <__ieee754_powf+0xb6>
 8004ba6:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8004baa:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8004bae:	d802      	bhi.n	8004bb6 <__ieee754_powf+0x3e>
 8004bb0:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8004bb4:	d908      	bls.n	8004bc8 <__ieee754_powf+0x50>
 8004bb6:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8004bba:	d1ee      	bne.n	8004b9a <__ieee754_powf+0x22>
 8004bbc:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8004bc0:	0064      	lsls	r4, r4, #1
 8004bc2:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8004bc6:	e7e6      	b.n	8004b96 <__ieee754_powf+0x1e>
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	da1f      	bge.n	8004c0c <__ieee754_powf+0x94>
 8004bcc:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 8004bd0:	f080 82f8 	bcs.w	80051c4 <__ieee754_powf+0x64c>
 8004bd4:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8004bd8:	d32f      	bcc.n	8004c3a <__ieee754_powf+0xc2>
 8004bda:	ea4f 53eb 	mov.w	r3, fp, asr #23
 8004bde:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8004be2:	fa4b f503 	asr.w	r5, fp, r3
 8004be6:	fa05 f303 	lsl.w	r3, r5, r3
 8004bea:	455b      	cmp	r3, fp
 8004bec:	d123      	bne.n	8004c36 <__ieee754_powf+0xbe>
 8004bee:	f005 0501 	and.w	r5, r5, #1
 8004bf2:	f1c5 0502 	rsb	r5, r5, #2
 8004bf6:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8004bfa:	d11f      	bne.n	8004c3c <__ieee754_powf+0xc4>
 8004bfc:	2c00      	cmp	r4, #0
 8004bfe:	4649      	mov	r1, r9
 8004c00:	da15      	bge.n	8004c2e <__ieee754_powf+0xb6>
 8004c02:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004c06:	f7fb fc63 	bl	80004d0 <__aeabi_fdiv>
 8004c0a:	e7ca      	b.n	8004ba2 <__ieee754_powf+0x2a>
 8004c0c:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8004c10:	d111      	bne.n	8004c36 <__ieee754_powf+0xbe>
 8004c12:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8004c16:	f000 82d0 	beq.w	80051ba <__ieee754_powf+0x642>
 8004c1a:	d904      	bls.n	8004c26 <__ieee754_powf+0xae>
 8004c1c:	2c00      	cmp	r4, #0
 8004c1e:	f280 82cf 	bge.w	80051c0 <__ieee754_powf+0x648>
 8004c22:	2100      	movs	r1, #0
 8004c24:	e003      	b.n	8004c2e <__ieee754_powf+0xb6>
 8004c26:	2c00      	cmp	r4, #0
 8004c28:	dafb      	bge.n	8004c22 <__ieee754_powf+0xaa>
 8004c2a:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 8004c2e:	4608      	mov	r0, r1
 8004c30:	b007      	add	sp, #28
 8004c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c36:	2500      	movs	r5, #0
 8004c38:	e7dd      	b.n	8004bf6 <__ieee754_powf+0x7e>
 8004c3a:	2500      	movs	r5, #0
 8004c3c:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8004c40:	d104      	bne.n	8004c4c <__ieee754_powf+0xd4>
 8004c42:	4649      	mov	r1, r9
 8004c44:	4648      	mov	r0, r9
 8004c46:	f7fb fb8f 	bl	8000368 <__aeabi_fmul>
 8004c4a:	e7aa      	b.n	8004ba2 <__ieee754_powf+0x2a>
 8004c4c:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8004c50:	f040 82bd 	bne.w	80051ce <__ieee754_powf+0x656>
 8004c54:	2e00      	cmp	r6, #0
 8004c56:	f2c0 82ba 	blt.w	80051ce <__ieee754_powf+0x656>
 8004c5a:	4648      	mov	r0, r9
 8004c5c:	b007      	add	sp, #28
 8004c5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c62:	f7ff be23 	b.w	80048ac <__ieee754_sqrtf>
 8004c66:	2d01      	cmp	r5, #1
 8004c68:	d1e1      	bne.n	8004c2e <__ieee754_powf+0xb6>
 8004c6a:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8004c6e:	e798      	b.n	8004ba2 <__ieee754_powf+0x2a>
 8004c70:	0ff3      	lsrs	r3, r6, #31
 8004c72:	3b01      	subs	r3, #1
 8004c74:	9303      	str	r3, [sp, #12]
 8004c76:	432b      	orrs	r3, r5
 8004c78:	d101      	bne.n	8004c7e <__ieee754_powf+0x106>
 8004c7a:	4649      	mov	r1, r9
 8004c7c:	e2c5      	b.n	800520a <__ieee754_powf+0x692>
 8004c7e:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 8004c82:	f240 809b 	bls.w	8004dbc <__ieee754_powf+0x244>
 8004c86:	4b46      	ldr	r3, [pc, #280]	@ (8004da0 <__ieee754_powf+0x228>)
 8004c88:	4598      	cmp	r8, r3
 8004c8a:	d807      	bhi.n	8004c9c <__ieee754_powf+0x124>
 8004c8c:	2c00      	cmp	r4, #0
 8004c8e:	da0a      	bge.n	8004ca6 <__ieee754_powf+0x12e>
 8004c90:	2000      	movs	r0, #0
 8004c92:	b007      	add	sp, #28
 8004c94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c98:	f000 bc9d 	b.w	80055d6 <__math_oflowf>
 8004c9c:	4b41      	ldr	r3, [pc, #260]	@ (8004da4 <__ieee754_powf+0x22c>)
 8004c9e:	4598      	cmp	r8, r3
 8004ca0:	d907      	bls.n	8004cb2 <__ieee754_powf+0x13a>
 8004ca2:	2c00      	cmp	r4, #0
 8004ca4:	dcf4      	bgt.n	8004c90 <__ieee754_powf+0x118>
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	b007      	add	sp, #28
 8004caa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cae:	f000 bc8e 	b.w	80055ce <__math_uflowf>
 8004cb2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004cb6:	f7fb fa4d 	bl	8000154 <__aeabi_fsub>
 8004cba:	493b      	ldr	r1, [pc, #236]	@ (8004da8 <__ieee754_powf+0x230>)
 8004cbc:	4606      	mov	r6, r0
 8004cbe:	f7fb fb53 	bl	8000368 <__aeabi_fmul>
 8004cc2:	493a      	ldr	r1, [pc, #232]	@ (8004dac <__ieee754_powf+0x234>)
 8004cc4:	4680      	mov	r8, r0
 8004cc6:	4630      	mov	r0, r6
 8004cc8:	f7fb fb4e 	bl	8000368 <__aeabi_fmul>
 8004ccc:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8004cd0:	4681      	mov	r9, r0
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	f7fb fb48 	bl	8000368 <__aeabi_fmul>
 8004cd8:	4601      	mov	r1, r0
 8004cda:	4835      	ldr	r0, [pc, #212]	@ (8004db0 <__ieee754_powf+0x238>)
 8004cdc:	f7fb fa3a 	bl	8000154 <__aeabi_fsub>
 8004ce0:	4631      	mov	r1, r6
 8004ce2:	f7fb fb41 	bl	8000368 <__aeabi_fmul>
 8004ce6:	4601      	mov	r1, r0
 8004ce8:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8004cec:	f7fb fa32 	bl	8000154 <__aeabi_fsub>
 8004cf0:	4631      	mov	r1, r6
 8004cf2:	4682      	mov	sl, r0
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	f7fb fb37 	bl	8000368 <__aeabi_fmul>
 8004cfa:	4601      	mov	r1, r0
 8004cfc:	4650      	mov	r0, sl
 8004cfe:	f7fb fb33 	bl	8000368 <__aeabi_fmul>
 8004d02:	492c      	ldr	r1, [pc, #176]	@ (8004db4 <__ieee754_powf+0x23c>)
 8004d04:	f7fb fb30 	bl	8000368 <__aeabi_fmul>
 8004d08:	4601      	mov	r1, r0
 8004d0a:	4648      	mov	r0, r9
 8004d0c:	f7fb fa22 	bl	8000154 <__aeabi_fsub>
 8004d10:	4601      	mov	r1, r0
 8004d12:	4606      	mov	r6, r0
 8004d14:	4640      	mov	r0, r8
 8004d16:	f7fb fa1f 	bl	8000158 <__addsf3>
 8004d1a:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8004d1e:	f02b 0b0f 	bic.w	fp, fp, #15
 8004d22:	4641      	mov	r1, r8
 8004d24:	4658      	mov	r0, fp
 8004d26:	f7fb fa15 	bl	8000154 <__aeabi_fsub>
 8004d2a:	4601      	mov	r1, r0
 8004d2c:	4630      	mov	r0, r6
 8004d2e:	f7fb fa11 	bl	8000154 <__aeabi_fsub>
 8004d32:	9b03      	ldr	r3, [sp, #12]
 8004d34:	3d01      	subs	r5, #1
 8004d36:	f36f 040b 	bfc	r4, #0, #12
 8004d3a:	431d      	orrs	r5, r3
 8004d3c:	4606      	mov	r6, r0
 8004d3e:	4621      	mov	r1, r4
 8004d40:	4638      	mov	r0, r7
 8004d42:	bf14      	ite	ne
 8004d44:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 8004d48:	4d1b      	ldreq	r5, [pc, #108]	@ (8004db8 <__ieee754_powf+0x240>)
 8004d4a:	f7fb fa03 	bl	8000154 <__aeabi_fsub>
 8004d4e:	4659      	mov	r1, fp
 8004d50:	f7fb fb0a 	bl	8000368 <__aeabi_fmul>
 8004d54:	4639      	mov	r1, r7
 8004d56:	4680      	mov	r8, r0
 8004d58:	4630      	mov	r0, r6
 8004d5a:	f7fb fb05 	bl	8000368 <__aeabi_fmul>
 8004d5e:	4601      	mov	r1, r0
 8004d60:	4640      	mov	r0, r8
 8004d62:	f7fb f9f9 	bl	8000158 <__addsf3>
 8004d66:	4621      	mov	r1, r4
 8004d68:	4606      	mov	r6, r0
 8004d6a:	4658      	mov	r0, fp
 8004d6c:	f7fb fafc 	bl	8000368 <__aeabi_fmul>
 8004d70:	4601      	mov	r1, r0
 8004d72:	4607      	mov	r7, r0
 8004d74:	4630      	mov	r0, r6
 8004d76:	f7fb f9ef 	bl	8000158 <__addsf3>
 8004d7a:	2800      	cmp	r0, #0
 8004d7c:	4604      	mov	r4, r0
 8004d7e:	4680      	mov	r8, r0
 8004d80:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8004d84:	f340 813f 	ble.w	8005006 <__ieee754_powf+0x48e>
 8004d88:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8004d8c:	f240 8128 	bls.w	8004fe0 <__ieee754_powf+0x468>
 8004d90:	2100      	movs	r1, #0
 8004d92:	4628      	mov	r0, r5
 8004d94:	f7fb fc86 	bl	80006a4 <__aeabi_fcmplt>
 8004d98:	3800      	subs	r0, #0
 8004d9a:	bf18      	it	ne
 8004d9c:	2001      	movne	r0, #1
 8004d9e:	e778      	b.n	8004c92 <__ieee754_powf+0x11a>
 8004da0:	3f7ffff3 	.word	0x3f7ffff3
 8004da4:	3f800007 	.word	0x3f800007
 8004da8:	3fb8aa00 	.word	0x3fb8aa00
 8004dac:	36eca570 	.word	0x36eca570
 8004db0:	3eaaaaab 	.word	0x3eaaaaab
 8004db4:	3fb8aa3b 	.word	0x3fb8aa3b
 8004db8:	bf800000 	.word	0xbf800000
 8004dbc:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8004dc0:	f040 810a 	bne.w	8004fd8 <__ieee754_powf+0x460>
 8004dc4:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8004dc8:	f7fb face 	bl	8000368 <__aeabi_fmul>
 8004dcc:	f06f 0217 	mvn.w	r2, #23
 8004dd0:	4682      	mov	sl, r0
 8004dd2:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8004dd6:	3b7f      	subs	r3, #127	@ 0x7f
 8004dd8:	441a      	add	r2, r3
 8004dda:	4b95      	ldr	r3, [pc, #596]	@ (8005030 <__ieee754_powf+0x4b8>)
 8004ddc:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 8004de0:	459a      	cmp	sl, r3
 8004de2:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 8004de6:	dd06      	ble.n	8004df6 <__ieee754_powf+0x27e>
 8004de8:	4b92      	ldr	r3, [pc, #584]	@ (8005034 <__ieee754_powf+0x4bc>)
 8004dea:	459a      	cmp	sl, r3
 8004dec:	f340 80f6 	ble.w	8004fdc <__ieee754_powf+0x464>
 8004df0:	3201      	adds	r2, #1
 8004df2:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 8004df6:	2300      	movs	r3, #0
 8004df8:	9301      	str	r3, [sp, #4]
 8004dfa:	9205      	str	r2, [sp, #20]
 8004dfc:	4b8e      	ldr	r3, [pc, #568]	@ (8005038 <__ieee754_powf+0x4c0>)
 8004dfe:	9a01      	ldr	r2, [sp, #4]
 8004e00:	4630      	mov	r0, r6
 8004e02:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8004e06:	46b2      	mov	sl, r6
 8004e08:	4659      	mov	r1, fp
 8004e0a:	f7fb f9a3 	bl	8000154 <__aeabi_fsub>
 8004e0e:	4631      	mov	r1, r6
 8004e10:	4681      	mov	r9, r0
 8004e12:	4658      	mov	r0, fp
 8004e14:	f7fb f9a0 	bl	8000158 <__addsf3>
 8004e18:	4601      	mov	r1, r0
 8004e1a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004e1e:	f7fb fb57 	bl	80004d0 <__aeabi_fdiv>
 8004e22:	4601      	mov	r1, r0
 8004e24:	9004      	str	r0, [sp, #16]
 8004e26:	4648      	mov	r0, r9
 8004e28:	f7fb fa9e 	bl	8000368 <__aeabi_fmul>
 8004e2c:	9002      	str	r0, [sp, #8]
 8004e2e:	9b02      	ldr	r3, [sp, #8]
 8004e30:	1076      	asrs	r6, r6, #1
 8004e32:	f36f 030b 	bfc	r3, #0, #12
 8004e36:	4698      	mov	r8, r3
 8004e38:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 8004e3c:	9b01      	ldr	r3, [sp, #4]
 8004e3e:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 8004e42:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 8004e46:	4631      	mov	r1, r6
 8004e48:	4640      	mov	r0, r8
 8004e4a:	f7fb fa8d 	bl	8000368 <__aeabi_fmul>
 8004e4e:	4601      	mov	r1, r0
 8004e50:	4648      	mov	r0, r9
 8004e52:	f7fb f97f 	bl	8000154 <__aeabi_fsub>
 8004e56:	4659      	mov	r1, fp
 8004e58:	4681      	mov	r9, r0
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	f7fb f97a 	bl	8000154 <__aeabi_fsub>
 8004e60:	4601      	mov	r1, r0
 8004e62:	4650      	mov	r0, sl
 8004e64:	f7fb f976 	bl	8000154 <__aeabi_fsub>
 8004e68:	4641      	mov	r1, r8
 8004e6a:	f7fb fa7d 	bl	8000368 <__aeabi_fmul>
 8004e6e:	4601      	mov	r1, r0
 8004e70:	4648      	mov	r0, r9
 8004e72:	f7fb f96f 	bl	8000154 <__aeabi_fsub>
 8004e76:	9b04      	ldr	r3, [sp, #16]
 8004e78:	4619      	mov	r1, r3
 8004e7a:	f7fb fa75 	bl	8000368 <__aeabi_fmul>
 8004e7e:	9902      	ldr	r1, [sp, #8]
 8004e80:	4683      	mov	fp, r0
 8004e82:	4608      	mov	r0, r1
 8004e84:	f7fb fa70 	bl	8000368 <__aeabi_fmul>
 8004e88:	4606      	mov	r6, r0
 8004e8a:	496c      	ldr	r1, [pc, #432]	@ (800503c <__ieee754_powf+0x4c4>)
 8004e8c:	f7fb fa6c 	bl	8000368 <__aeabi_fmul>
 8004e90:	496b      	ldr	r1, [pc, #428]	@ (8005040 <__ieee754_powf+0x4c8>)
 8004e92:	f7fb f961 	bl	8000158 <__addsf3>
 8004e96:	4631      	mov	r1, r6
 8004e98:	f7fb fa66 	bl	8000368 <__aeabi_fmul>
 8004e9c:	4969      	ldr	r1, [pc, #420]	@ (8005044 <__ieee754_powf+0x4cc>)
 8004e9e:	f7fb f95b 	bl	8000158 <__addsf3>
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	f7fb fa60 	bl	8000368 <__aeabi_fmul>
 8004ea8:	4967      	ldr	r1, [pc, #412]	@ (8005048 <__ieee754_powf+0x4d0>)
 8004eaa:	f7fb f955 	bl	8000158 <__addsf3>
 8004eae:	4631      	mov	r1, r6
 8004eb0:	f7fb fa5a 	bl	8000368 <__aeabi_fmul>
 8004eb4:	4965      	ldr	r1, [pc, #404]	@ (800504c <__ieee754_powf+0x4d4>)
 8004eb6:	f7fb f94f 	bl	8000158 <__addsf3>
 8004eba:	4631      	mov	r1, r6
 8004ebc:	f7fb fa54 	bl	8000368 <__aeabi_fmul>
 8004ec0:	4963      	ldr	r1, [pc, #396]	@ (8005050 <__ieee754_powf+0x4d8>)
 8004ec2:	f7fb f949 	bl	8000158 <__addsf3>
 8004ec6:	4631      	mov	r1, r6
 8004ec8:	4681      	mov	r9, r0
 8004eca:	4630      	mov	r0, r6
 8004ecc:	f7fb fa4c 	bl	8000368 <__aeabi_fmul>
 8004ed0:	4601      	mov	r1, r0
 8004ed2:	4648      	mov	r0, r9
 8004ed4:	f7fb fa48 	bl	8000368 <__aeabi_fmul>
 8004ed8:	4606      	mov	r6, r0
 8004eda:	4641      	mov	r1, r8
 8004edc:	9802      	ldr	r0, [sp, #8]
 8004ede:	f7fb f93b 	bl	8000158 <__addsf3>
 8004ee2:	4659      	mov	r1, fp
 8004ee4:	f7fb fa40 	bl	8000368 <__aeabi_fmul>
 8004ee8:	4631      	mov	r1, r6
 8004eea:	f7fb f935 	bl	8000158 <__addsf3>
 8004eee:	4641      	mov	r1, r8
 8004ef0:	4681      	mov	r9, r0
 8004ef2:	4640      	mov	r0, r8
 8004ef4:	f7fb fa38 	bl	8000368 <__aeabi_fmul>
 8004ef8:	4956      	ldr	r1, [pc, #344]	@ (8005054 <__ieee754_powf+0x4dc>)
 8004efa:	4682      	mov	sl, r0
 8004efc:	f7fb f92c 	bl	8000158 <__addsf3>
 8004f00:	4649      	mov	r1, r9
 8004f02:	f7fb f929 	bl	8000158 <__addsf3>
 8004f06:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8004f0a:	f026 060f 	bic.w	r6, r6, #15
 8004f0e:	4631      	mov	r1, r6
 8004f10:	4640      	mov	r0, r8
 8004f12:	f7fb fa29 	bl	8000368 <__aeabi_fmul>
 8004f16:	494f      	ldr	r1, [pc, #316]	@ (8005054 <__ieee754_powf+0x4dc>)
 8004f18:	4680      	mov	r8, r0
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	f7fb f91a 	bl	8000154 <__aeabi_fsub>
 8004f20:	4651      	mov	r1, sl
 8004f22:	f7fb f917 	bl	8000154 <__aeabi_fsub>
 8004f26:	4601      	mov	r1, r0
 8004f28:	4648      	mov	r0, r9
 8004f2a:	f7fb f913 	bl	8000154 <__aeabi_fsub>
 8004f2e:	9902      	ldr	r1, [sp, #8]
 8004f30:	f7fb fa1a 	bl	8000368 <__aeabi_fmul>
 8004f34:	4631      	mov	r1, r6
 8004f36:	4681      	mov	r9, r0
 8004f38:	4658      	mov	r0, fp
 8004f3a:	f7fb fa15 	bl	8000368 <__aeabi_fmul>
 8004f3e:	4601      	mov	r1, r0
 8004f40:	4648      	mov	r0, r9
 8004f42:	f7fb f909 	bl	8000158 <__addsf3>
 8004f46:	4682      	mov	sl, r0
 8004f48:	4601      	mov	r1, r0
 8004f4a:	4640      	mov	r0, r8
 8004f4c:	f7fb f904 	bl	8000158 <__addsf3>
 8004f50:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8004f54:	f026 060f 	bic.w	r6, r6, #15
 8004f58:	4630      	mov	r0, r6
 8004f5a:	493f      	ldr	r1, [pc, #252]	@ (8005058 <__ieee754_powf+0x4e0>)
 8004f5c:	f7fb fa04 	bl	8000368 <__aeabi_fmul>
 8004f60:	4641      	mov	r1, r8
 8004f62:	4681      	mov	r9, r0
 8004f64:	4630      	mov	r0, r6
 8004f66:	f7fb f8f5 	bl	8000154 <__aeabi_fsub>
 8004f6a:	4601      	mov	r1, r0
 8004f6c:	4650      	mov	r0, sl
 8004f6e:	f7fb f8f1 	bl	8000154 <__aeabi_fsub>
 8004f72:	493a      	ldr	r1, [pc, #232]	@ (800505c <__ieee754_powf+0x4e4>)
 8004f74:	f7fb f9f8 	bl	8000368 <__aeabi_fmul>
 8004f78:	4939      	ldr	r1, [pc, #228]	@ (8005060 <__ieee754_powf+0x4e8>)
 8004f7a:	4680      	mov	r8, r0
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f7fb f9f3 	bl	8000368 <__aeabi_fmul>
 8004f82:	4601      	mov	r1, r0
 8004f84:	4640      	mov	r0, r8
 8004f86:	f7fb f8e7 	bl	8000158 <__addsf3>
 8004f8a:	4b36      	ldr	r3, [pc, #216]	@ (8005064 <__ieee754_powf+0x4ec>)
 8004f8c:	9a01      	ldr	r2, [sp, #4]
 8004f8e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f92:	f7fb f8e1 	bl	8000158 <__addsf3>
 8004f96:	9a05      	ldr	r2, [sp, #20]
 8004f98:	4606      	mov	r6, r0
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	f7fb f990 	bl	80002c0 <__aeabi_i2f>
 8004fa0:	4680      	mov	r8, r0
 8004fa2:	4b31      	ldr	r3, [pc, #196]	@ (8005068 <__ieee754_powf+0x4f0>)
 8004fa4:	9a01      	ldr	r2, [sp, #4]
 8004fa6:	4631      	mov	r1, r6
 8004fa8:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8004fac:	4648      	mov	r0, r9
 8004fae:	f7fb f8d3 	bl	8000158 <__addsf3>
 8004fb2:	4651      	mov	r1, sl
 8004fb4:	f7fb f8d0 	bl	8000158 <__addsf3>
 8004fb8:	4641      	mov	r1, r8
 8004fba:	f7fb f8cd 	bl	8000158 <__addsf3>
 8004fbe:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8004fc2:	f02b 0b0f 	bic.w	fp, fp, #15
 8004fc6:	4641      	mov	r1, r8
 8004fc8:	4658      	mov	r0, fp
 8004fca:	f7fb f8c3 	bl	8000154 <__aeabi_fsub>
 8004fce:	4651      	mov	r1, sl
 8004fd0:	f7fb f8c0 	bl	8000154 <__aeabi_fsub>
 8004fd4:	4649      	mov	r1, r9
 8004fd6:	e6a6      	b.n	8004d26 <__ieee754_powf+0x1ae>
 8004fd8:	2200      	movs	r2, #0
 8004fda:	e6fa      	b.n	8004dd2 <__ieee754_powf+0x25a>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e70b      	b.n	8004df8 <__ieee754_powf+0x280>
 8004fe0:	d148      	bne.n	8005074 <__ieee754_powf+0x4fc>
 8004fe2:	4922      	ldr	r1, [pc, #136]	@ (800506c <__ieee754_powf+0x4f4>)
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	f7fb f8b7 	bl	8000158 <__addsf3>
 8004fea:	4639      	mov	r1, r7
 8004fec:	4681      	mov	r9, r0
 8004fee:	4620      	mov	r0, r4
 8004ff0:	f7fb f8b0 	bl	8000154 <__aeabi_fsub>
 8004ff4:	4601      	mov	r1, r0
 8004ff6:	4648      	mov	r0, r9
 8004ff8:	f7fb fb72 	bl	80006e0 <__aeabi_fcmpgt>
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	f47f aec7 	bne.w	8004d90 <__ieee754_powf+0x218>
 8005002:	2386      	movs	r3, #134	@ 0x86
 8005004:	e03b      	b.n	800507e <__ieee754_powf+0x506>
 8005006:	4a1a      	ldr	r2, [pc, #104]	@ (8005070 <__ieee754_powf+0x4f8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d907      	bls.n	800501c <__ieee754_powf+0x4a4>
 800500c:	2100      	movs	r1, #0
 800500e:	4628      	mov	r0, r5
 8005010:	f7fb fb48 	bl	80006a4 <__aeabi_fcmplt>
 8005014:	3800      	subs	r0, #0
 8005016:	bf18      	it	ne
 8005018:	2001      	movne	r0, #1
 800501a:	e645      	b.n	8004ca8 <__ieee754_powf+0x130>
 800501c:	d12a      	bne.n	8005074 <__ieee754_powf+0x4fc>
 800501e:	4639      	mov	r1, r7
 8005020:	f7fb f898 	bl	8000154 <__aeabi_fsub>
 8005024:	4631      	mov	r1, r6
 8005026:	f7fb fb51 	bl	80006cc <__aeabi_fcmpge>
 800502a:	2800      	cmp	r0, #0
 800502c:	d0e9      	beq.n	8005002 <__ieee754_powf+0x48a>
 800502e:	e7ed      	b.n	800500c <__ieee754_powf+0x494>
 8005030:	001cc471 	.word	0x001cc471
 8005034:	005db3d6 	.word	0x005db3d6
 8005038:	0800cc90 	.word	0x0800cc90
 800503c:	3e53f142 	.word	0x3e53f142
 8005040:	3e6c3255 	.word	0x3e6c3255
 8005044:	3e8ba305 	.word	0x3e8ba305
 8005048:	3eaaaaab 	.word	0x3eaaaaab
 800504c:	3edb6db7 	.word	0x3edb6db7
 8005050:	3f19999a 	.word	0x3f19999a
 8005054:	40400000 	.word	0x40400000
 8005058:	3f763800 	.word	0x3f763800
 800505c:	3f76384f 	.word	0x3f76384f
 8005060:	369dc3a0 	.word	0x369dc3a0
 8005064:	0800cc80 	.word	0x0800cc80
 8005068:	0800cc88 	.word	0x0800cc88
 800506c:	3338aa3c 	.word	0x3338aa3c
 8005070:	43160000 	.word	0x43160000
 8005074:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8005078:	f240 809b 	bls.w	80051b2 <__ieee754_powf+0x63a>
 800507c:	15db      	asrs	r3, r3, #23
 800507e:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 8005082:	3b7e      	subs	r3, #126	@ 0x7e
 8005084:	411c      	asrs	r4, r3
 8005086:	4444      	add	r4, r8
 8005088:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 800508c:	4961      	ldr	r1, [pc, #388]	@ (8005214 <__ieee754_powf+0x69c>)
 800508e:	3b7f      	subs	r3, #127	@ 0x7f
 8005090:	4119      	asrs	r1, r3
 8005092:	4021      	ands	r1, r4
 8005094:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8005098:	f1c3 0317 	rsb	r3, r3, #23
 800509c:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 80050a0:	4638      	mov	r0, r7
 80050a2:	411c      	asrs	r4, r3
 80050a4:	f1b8 0f00 	cmp.w	r8, #0
 80050a8:	bfb8      	it	lt
 80050aa:	4264      	neglt	r4, r4
 80050ac:	f7fb f852 	bl	8000154 <__aeabi_fsub>
 80050b0:	4607      	mov	r7, r0
 80050b2:	4631      	mov	r1, r6
 80050b4:	4638      	mov	r0, r7
 80050b6:	f7fb f84f 	bl	8000158 <__addsf3>
 80050ba:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 80050be:	f028 080f 	bic.w	r8, r8, #15
 80050c2:	4640      	mov	r0, r8
 80050c4:	4954      	ldr	r1, [pc, #336]	@ (8005218 <__ieee754_powf+0x6a0>)
 80050c6:	f7fb f94f 	bl	8000368 <__aeabi_fmul>
 80050ca:	4639      	mov	r1, r7
 80050cc:	4681      	mov	r9, r0
 80050ce:	4640      	mov	r0, r8
 80050d0:	f7fb f840 	bl	8000154 <__aeabi_fsub>
 80050d4:	4601      	mov	r1, r0
 80050d6:	4630      	mov	r0, r6
 80050d8:	f7fb f83c 	bl	8000154 <__aeabi_fsub>
 80050dc:	494f      	ldr	r1, [pc, #316]	@ (800521c <__ieee754_powf+0x6a4>)
 80050de:	f7fb f943 	bl	8000368 <__aeabi_fmul>
 80050e2:	494f      	ldr	r1, [pc, #316]	@ (8005220 <__ieee754_powf+0x6a8>)
 80050e4:	4606      	mov	r6, r0
 80050e6:	4640      	mov	r0, r8
 80050e8:	f7fb f93e 	bl	8000368 <__aeabi_fmul>
 80050ec:	4601      	mov	r1, r0
 80050ee:	4630      	mov	r0, r6
 80050f0:	f7fb f832 	bl	8000158 <__addsf3>
 80050f4:	4607      	mov	r7, r0
 80050f6:	4601      	mov	r1, r0
 80050f8:	4648      	mov	r0, r9
 80050fa:	f7fb f82d 	bl	8000158 <__addsf3>
 80050fe:	4649      	mov	r1, r9
 8005100:	4606      	mov	r6, r0
 8005102:	f7fb f827 	bl	8000154 <__aeabi_fsub>
 8005106:	4601      	mov	r1, r0
 8005108:	4638      	mov	r0, r7
 800510a:	f7fb f823 	bl	8000154 <__aeabi_fsub>
 800510e:	4631      	mov	r1, r6
 8005110:	4680      	mov	r8, r0
 8005112:	4630      	mov	r0, r6
 8005114:	f7fb f928 	bl	8000368 <__aeabi_fmul>
 8005118:	4607      	mov	r7, r0
 800511a:	4942      	ldr	r1, [pc, #264]	@ (8005224 <__ieee754_powf+0x6ac>)
 800511c:	f7fb f924 	bl	8000368 <__aeabi_fmul>
 8005120:	4941      	ldr	r1, [pc, #260]	@ (8005228 <__ieee754_powf+0x6b0>)
 8005122:	f7fb f817 	bl	8000154 <__aeabi_fsub>
 8005126:	4639      	mov	r1, r7
 8005128:	f7fb f91e 	bl	8000368 <__aeabi_fmul>
 800512c:	493f      	ldr	r1, [pc, #252]	@ (800522c <__ieee754_powf+0x6b4>)
 800512e:	f7fb f813 	bl	8000158 <__addsf3>
 8005132:	4639      	mov	r1, r7
 8005134:	f7fb f918 	bl	8000368 <__aeabi_fmul>
 8005138:	493d      	ldr	r1, [pc, #244]	@ (8005230 <__ieee754_powf+0x6b8>)
 800513a:	f7fb f80b 	bl	8000154 <__aeabi_fsub>
 800513e:	4639      	mov	r1, r7
 8005140:	f7fb f912 	bl	8000368 <__aeabi_fmul>
 8005144:	493b      	ldr	r1, [pc, #236]	@ (8005234 <__ieee754_powf+0x6bc>)
 8005146:	f7fb f807 	bl	8000158 <__addsf3>
 800514a:	4639      	mov	r1, r7
 800514c:	f7fb f90c 	bl	8000368 <__aeabi_fmul>
 8005150:	4601      	mov	r1, r0
 8005152:	4630      	mov	r0, r6
 8005154:	f7fa fffe 	bl	8000154 <__aeabi_fsub>
 8005158:	4607      	mov	r7, r0
 800515a:	4601      	mov	r1, r0
 800515c:	4630      	mov	r0, r6
 800515e:	f7fb f903 	bl	8000368 <__aeabi_fmul>
 8005162:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005166:	4681      	mov	r9, r0
 8005168:	4638      	mov	r0, r7
 800516a:	f7fa fff3 	bl	8000154 <__aeabi_fsub>
 800516e:	4601      	mov	r1, r0
 8005170:	4648      	mov	r0, r9
 8005172:	f7fb f9ad 	bl	80004d0 <__aeabi_fdiv>
 8005176:	4641      	mov	r1, r8
 8005178:	4607      	mov	r7, r0
 800517a:	4630      	mov	r0, r6
 800517c:	f7fb f8f4 	bl	8000368 <__aeabi_fmul>
 8005180:	4641      	mov	r1, r8
 8005182:	f7fa ffe9 	bl	8000158 <__addsf3>
 8005186:	4601      	mov	r1, r0
 8005188:	4638      	mov	r0, r7
 800518a:	f7fa ffe3 	bl	8000154 <__aeabi_fsub>
 800518e:	4631      	mov	r1, r6
 8005190:	f7fa ffe0 	bl	8000154 <__aeabi_fsub>
 8005194:	4601      	mov	r1, r0
 8005196:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800519a:	f7fa ffdb 	bl	8000154 <__aeabi_fsub>
 800519e:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 80051a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80051a6:	da06      	bge.n	80051b6 <__ieee754_powf+0x63e>
 80051a8:	4621      	mov	r1, r4
 80051aa:	f000 f9af 	bl	800550c <scalbnf>
 80051ae:	4629      	mov	r1, r5
 80051b0:	e549      	b.n	8004c46 <__ieee754_powf+0xce>
 80051b2:	2400      	movs	r4, #0
 80051b4:	e77d      	b.n	80050b2 <__ieee754_powf+0x53a>
 80051b6:	4618      	mov	r0, r3
 80051b8:	e7f9      	b.n	80051ae <__ieee754_powf+0x636>
 80051ba:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80051be:	e536      	b.n	8004c2e <__ieee754_powf+0xb6>
 80051c0:	4639      	mov	r1, r7
 80051c2:	e534      	b.n	8004c2e <__ieee754_powf+0xb6>
 80051c4:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 80051c8:	f43f ad23 	beq.w	8004c12 <__ieee754_powf+0x9a>
 80051cc:	2502      	movs	r5, #2
 80051ce:	4648      	mov	r0, r9
 80051d0:	f000 f998 	bl	8005504 <fabsf>
 80051d4:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80051d8:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80051dc:	46c2      	mov	sl, r8
 80051de:	4601      	mov	r1, r0
 80051e0:	d003      	beq.n	80051ea <__ieee754_powf+0x672>
 80051e2:	f1b8 0f00 	cmp.w	r8, #0
 80051e6:	f47f ad43 	bne.w	8004c70 <__ieee754_powf+0xf8>
 80051ea:	2c00      	cmp	r4, #0
 80051ec:	da04      	bge.n	80051f8 <__ieee754_powf+0x680>
 80051ee:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80051f2:	f7fb f96d 	bl	80004d0 <__aeabi_fdiv>
 80051f6:	4601      	mov	r1, r0
 80051f8:	2e00      	cmp	r6, #0
 80051fa:	f6bf ad18 	bge.w	8004c2e <__ieee754_powf+0xb6>
 80051fe:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8005202:	ea58 0805 	orrs.w	r8, r8, r5
 8005206:	f47f ad2e 	bne.w	8004c66 <__ieee754_powf+0xee>
 800520a:	4608      	mov	r0, r1
 800520c:	f7fa ffa2 	bl	8000154 <__aeabi_fsub>
 8005210:	4601      	mov	r1, r0
 8005212:	e4f8      	b.n	8004c06 <__ieee754_powf+0x8e>
 8005214:	ff800000 	.word	0xff800000
 8005218:	3f317200 	.word	0x3f317200
 800521c:	3f317218 	.word	0x3f317218
 8005220:	35bfbe8c 	.word	0x35bfbe8c
 8005224:	3331bb4c 	.word	0x3331bb4c
 8005228:	35ddea0e 	.word	0x35ddea0e
 800522c:	388ab355 	.word	0x388ab355
 8005230:	3b360b61 	.word	0x3b360b61
 8005234:	3e2aaaab 	.word	0x3e2aaaab

08005238 <__ieee754_rem_pio2f>:
 8005238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523c:	4aa4      	ldr	r2, [pc, #656]	@ (80054d0 <__ieee754_rem_pio2f+0x298>)
 800523e:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8005242:	4590      	cmp	r8, r2
 8005244:	460c      	mov	r4, r1
 8005246:	4682      	mov	sl, r0
 8005248:	b087      	sub	sp, #28
 800524a:	d804      	bhi.n	8005256 <__ieee754_rem_pio2f+0x1e>
 800524c:	2300      	movs	r3, #0
 800524e:	6008      	str	r0, [r1, #0]
 8005250:	604b      	str	r3, [r1, #4]
 8005252:	2500      	movs	r5, #0
 8005254:	e01d      	b.n	8005292 <__ieee754_rem_pio2f+0x5a>
 8005256:	4a9f      	ldr	r2, [pc, #636]	@ (80054d4 <__ieee754_rem_pio2f+0x29c>)
 8005258:	4590      	cmp	r8, r2
 800525a:	d84f      	bhi.n	80052fc <__ieee754_rem_pio2f+0xc4>
 800525c:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8005260:	2800      	cmp	r0, #0
 8005262:	499d      	ldr	r1, [pc, #628]	@ (80054d8 <__ieee754_rem_pio2f+0x2a0>)
 8005264:	4f9d      	ldr	r7, [pc, #628]	@ (80054dc <__ieee754_rem_pio2f+0x2a4>)
 8005266:	f025 050f 	bic.w	r5, r5, #15
 800526a:	dd24      	ble.n	80052b6 <__ieee754_rem_pio2f+0x7e>
 800526c:	f7fa ff72 	bl	8000154 <__aeabi_fsub>
 8005270:	42bd      	cmp	r5, r7
 8005272:	4606      	mov	r6, r0
 8005274:	d011      	beq.n	800529a <__ieee754_rem_pio2f+0x62>
 8005276:	499a      	ldr	r1, [pc, #616]	@ (80054e0 <__ieee754_rem_pio2f+0x2a8>)
 8005278:	f7fa ff6c 	bl	8000154 <__aeabi_fsub>
 800527c:	4601      	mov	r1, r0
 800527e:	4605      	mov	r5, r0
 8005280:	4630      	mov	r0, r6
 8005282:	f7fa ff67 	bl	8000154 <__aeabi_fsub>
 8005286:	4996      	ldr	r1, [pc, #600]	@ (80054e0 <__ieee754_rem_pio2f+0x2a8>)
 8005288:	f7fa ff64 	bl	8000154 <__aeabi_fsub>
 800528c:	6025      	str	r5, [r4, #0]
 800528e:	2501      	movs	r5, #1
 8005290:	6060      	str	r0, [r4, #4]
 8005292:	4628      	mov	r0, r5
 8005294:	b007      	add	sp, #28
 8005296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800529a:	4992      	ldr	r1, [pc, #584]	@ (80054e4 <__ieee754_rem_pio2f+0x2ac>)
 800529c:	f7fa ff5a 	bl	8000154 <__aeabi_fsub>
 80052a0:	4991      	ldr	r1, [pc, #580]	@ (80054e8 <__ieee754_rem_pio2f+0x2b0>)
 80052a2:	4606      	mov	r6, r0
 80052a4:	f7fa ff56 	bl	8000154 <__aeabi_fsub>
 80052a8:	4601      	mov	r1, r0
 80052aa:	4605      	mov	r5, r0
 80052ac:	4630      	mov	r0, r6
 80052ae:	f7fa ff51 	bl	8000154 <__aeabi_fsub>
 80052b2:	498d      	ldr	r1, [pc, #564]	@ (80054e8 <__ieee754_rem_pio2f+0x2b0>)
 80052b4:	e7e8      	b.n	8005288 <__ieee754_rem_pio2f+0x50>
 80052b6:	f7fa ff4f 	bl	8000158 <__addsf3>
 80052ba:	42bd      	cmp	r5, r7
 80052bc:	4606      	mov	r6, r0
 80052be:	d00f      	beq.n	80052e0 <__ieee754_rem_pio2f+0xa8>
 80052c0:	4987      	ldr	r1, [pc, #540]	@ (80054e0 <__ieee754_rem_pio2f+0x2a8>)
 80052c2:	f7fa ff49 	bl	8000158 <__addsf3>
 80052c6:	4601      	mov	r1, r0
 80052c8:	4605      	mov	r5, r0
 80052ca:	4630      	mov	r0, r6
 80052cc:	f7fa ff42 	bl	8000154 <__aeabi_fsub>
 80052d0:	4983      	ldr	r1, [pc, #524]	@ (80054e0 <__ieee754_rem_pio2f+0x2a8>)
 80052d2:	f7fa ff41 	bl	8000158 <__addsf3>
 80052d6:	6025      	str	r5, [r4, #0]
 80052d8:	6060      	str	r0, [r4, #4]
 80052da:	f04f 35ff 	mov.w	r5, #4294967295
 80052de:	e7d8      	b.n	8005292 <__ieee754_rem_pio2f+0x5a>
 80052e0:	4980      	ldr	r1, [pc, #512]	@ (80054e4 <__ieee754_rem_pio2f+0x2ac>)
 80052e2:	f7fa ff39 	bl	8000158 <__addsf3>
 80052e6:	4980      	ldr	r1, [pc, #512]	@ (80054e8 <__ieee754_rem_pio2f+0x2b0>)
 80052e8:	4606      	mov	r6, r0
 80052ea:	f7fa ff35 	bl	8000158 <__addsf3>
 80052ee:	4601      	mov	r1, r0
 80052f0:	4605      	mov	r5, r0
 80052f2:	4630      	mov	r0, r6
 80052f4:	f7fa ff2e 	bl	8000154 <__aeabi_fsub>
 80052f8:	497b      	ldr	r1, [pc, #492]	@ (80054e8 <__ieee754_rem_pio2f+0x2b0>)
 80052fa:	e7ea      	b.n	80052d2 <__ieee754_rem_pio2f+0x9a>
 80052fc:	4a7b      	ldr	r2, [pc, #492]	@ (80054ec <__ieee754_rem_pio2f+0x2b4>)
 80052fe:	4590      	cmp	r8, r2
 8005300:	f200 8095 	bhi.w	800542e <__ieee754_rem_pio2f+0x1f6>
 8005304:	f000 f8fe 	bl	8005504 <fabsf>
 8005308:	4979      	ldr	r1, [pc, #484]	@ (80054f0 <__ieee754_rem_pio2f+0x2b8>)
 800530a:	4606      	mov	r6, r0
 800530c:	f7fb f82c 	bl	8000368 <__aeabi_fmul>
 8005310:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005314:	f7fa ff20 	bl	8000158 <__addsf3>
 8005318:	f7fb fa02 	bl	8000720 <__aeabi_f2iz>
 800531c:	4605      	mov	r5, r0
 800531e:	f7fa ffcf 	bl	80002c0 <__aeabi_i2f>
 8005322:	496d      	ldr	r1, [pc, #436]	@ (80054d8 <__ieee754_rem_pio2f+0x2a0>)
 8005324:	4681      	mov	r9, r0
 8005326:	f7fb f81f 	bl	8000368 <__aeabi_fmul>
 800532a:	4601      	mov	r1, r0
 800532c:	4630      	mov	r0, r6
 800532e:	f7fa ff11 	bl	8000154 <__aeabi_fsub>
 8005332:	496b      	ldr	r1, [pc, #428]	@ (80054e0 <__ieee754_rem_pio2f+0x2a8>)
 8005334:	4607      	mov	r7, r0
 8005336:	4648      	mov	r0, r9
 8005338:	f7fb f816 	bl	8000368 <__aeabi_fmul>
 800533c:	2d1f      	cmp	r5, #31
 800533e:	4606      	mov	r6, r0
 8005340:	dc0e      	bgt.n	8005360 <__ieee754_rem_pio2f+0x128>
 8005342:	4a6c      	ldr	r2, [pc, #432]	@ (80054f4 <__ieee754_rem_pio2f+0x2bc>)
 8005344:	1e69      	subs	r1, r5, #1
 8005346:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800534a:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 800534e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005352:	4293      	cmp	r3, r2
 8005354:	d004      	beq.n	8005360 <__ieee754_rem_pio2f+0x128>
 8005356:	4631      	mov	r1, r6
 8005358:	4638      	mov	r0, r7
 800535a:	f7fa fefb 	bl	8000154 <__aeabi_fsub>
 800535e:	e00b      	b.n	8005378 <__ieee754_rem_pio2f+0x140>
 8005360:	4631      	mov	r1, r6
 8005362:	4638      	mov	r0, r7
 8005364:	f7fa fef6 	bl	8000154 <__aeabi_fsub>
 8005368:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800536c:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 8005370:	2b08      	cmp	r3, #8
 8005372:	ea4f 5be8 	mov.w	fp, r8, asr #23
 8005376:	dc01      	bgt.n	800537c <__ieee754_rem_pio2f+0x144>
 8005378:	6020      	str	r0, [r4, #0]
 800537a:	e026      	b.n	80053ca <__ieee754_rem_pio2f+0x192>
 800537c:	4959      	ldr	r1, [pc, #356]	@ (80054e4 <__ieee754_rem_pio2f+0x2ac>)
 800537e:	4648      	mov	r0, r9
 8005380:	f7fa fff2 	bl	8000368 <__aeabi_fmul>
 8005384:	4606      	mov	r6, r0
 8005386:	4601      	mov	r1, r0
 8005388:	4638      	mov	r0, r7
 800538a:	f7fa fee3 	bl	8000154 <__aeabi_fsub>
 800538e:	4601      	mov	r1, r0
 8005390:	4680      	mov	r8, r0
 8005392:	4638      	mov	r0, r7
 8005394:	f7fa fede 	bl	8000154 <__aeabi_fsub>
 8005398:	4631      	mov	r1, r6
 800539a:	f7fa fedb 	bl	8000154 <__aeabi_fsub>
 800539e:	4606      	mov	r6, r0
 80053a0:	4951      	ldr	r1, [pc, #324]	@ (80054e8 <__ieee754_rem_pio2f+0x2b0>)
 80053a2:	4648      	mov	r0, r9
 80053a4:	f7fa ffe0 	bl	8000368 <__aeabi_fmul>
 80053a8:	4631      	mov	r1, r6
 80053aa:	f7fa fed3 	bl	8000154 <__aeabi_fsub>
 80053ae:	4601      	mov	r1, r0
 80053b0:	4606      	mov	r6, r0
 80053b2:	4640      	mov	r0, r8
 80053b4:	f7fa fece 	bl	8000154 <__aeabi_fsub>
 80053b8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80053bc:	ebab 0b03 	sub.w	fp, fp, r3
 80053c0:	f1bb 0f19 	cmp.w	fp, #25
 80053c4:	dc18      	bgt.n	80053f8 <__ieee754_rem_pio2f+0x1c0>
 80053c6:	4647      	mov	r7, r8
 80053c8:	6020      	str	r0, [r4, #0]
 80053ca:	f8d4 8000 	ldr.w	r8, [r4]
 80053ce:	4638      	mov	r0, r7
 80053d0:	4641      	mov	r1, r8
 80053d2:	f7fa febf 	bl	8000154 <__aeabi_fsub>
 80053d6:	4631      	mov	r1, r6
 80053d8:	f7fa febc 	bl	8000154 <__aeabi_fsub>
 80053dc:	f1ba 0f00 	cmp.w	sl, #0
 80053e0:	6060      	str	r0, [r4, #4]
 80053e2:	f6bf af56 	bge.w	8005292 <__ieee754_rem_pio2f+0x5a>
 80053e6:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 80053ea:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80053ee:	f8c4 8000 	str.w	r8, [r4]
 80053f2:	6060      	str	r0, [r4, #4]
 80053f4:	426d      	negs	r5, r5
 80053f6:	e74c      	b.n	8005292 <__ieee754_rem_pio2f+0x5a>
 80053f8:	493f      	ldr	r1, [pc, #252]	@ (80054f8 <__ieee754_rem_pio2f+0x2c0>)
 80053fa:	4648      	mov	r0, r9
 80053fc:	f7fa ffb4 	bl	8000368 <__aeabi_fmul>
 8005400:	4606      	mov	r6, r0
 8005402:	4601      	mov	r1, r0
 8005404:	4640      	mov	r0, r8
 8005406:	f7fa fea5 	bl	8000154 <__aeabi_fsub>
 800540a:	4601      	mov	r1, r0
 800540c:	4607      	mov	r7, r0
 800540e:	4640      	mov	r0, r8
 8005410:	f7fa fea0 	bl	8000154 <__aeabi_fsub>
 8005414:	4631      	mov	r1, r6
 8005416:	f7fa fe9d 	bl	8000154 <__aeabi_fsub>
 800541a:	4606      	mov	r6, r0
 800541c:	4937      	ldr	r1, [pc, #220]	@ (80054fc <__ieee754_rem_pio2f+0x2c4>)
 800541e:	4648      	mov	r0, r9
 8005420:	f7fa ffa2 	bl	8000368 <__aeabi_fmul>
 8005424:	4631      	mov	r1, r6
 8005426:	f7fa fe95 	bl	8000154 <__aeabi_fsub>
 800542a:	4606      	mov	r6, r0
 800542c:	e793      	b.n	8005356 <__ieee754_rem_pio2f+0x11e>
 800542e:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8005432:	d305      	bcc.n	8005440 <__ieee754_rem_pio2f+0x208>
 8005434:	4601      	mov	r1, r0
 8005436:	f7fa fe8d 	bl	8000154 <__aeabi_fsub>
 800543a:	6060      	str	r0, [r4, #4]
 800543c:	6020      	str	r0, [r4, #0]
 800543e:	e708      	b.n	8005252 <__ieee754_rem_pio2f+0x1a>
 8005440:	ea4f 56e8 	mov.w	r6, r8, asr #23
 8005444:	3e86      	subs	r6, #134	@ 0x86
 8005446:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800544a:	4640      	mov	r0, r8
 800544c:	f7fb f968 	bl	8000720 <__aeabi_f2iz>
 8005450:	f7fa ff36 	bl	80002c0 <__aeabi_i2f>
 8005454:	4601      	mov	r1, r0
 8005456:	9003      	str	r0, [sp, #12]
 8005458:	4640      	mov	r0, r8
 800545a:	f7fa fe7b 	bl	8000154 <__aeabi_fsub>
 800545e:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8005462:	f7fa ff81 	bl	8000368 <__aeabi_fmul>
 8005466:	4607      	mov	r7, r0
 8005468:	f7fb f95a 	bl	8000720 <__aeabi_f2iz>
 800546c:	f7fa ff28 	bl	80002c0 <__aeabi_i2f>
 8005470:	4601      	mov	r1, r0
 8005472:	9004      	str	r0, [sp, #16]
 8005474:	4605      	mov	r5, r0
 8005476:	4638      	mov	r0, r7
 8005478:	f7fa fe6c 	bl	8000154 <__aeabi_fsub>
 800547c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8005480:	f7fa ff72 	bl	8000368 <__aeabi_fmul>
 8005484:	2100      	movs	r1, #0
 8005486:	9005      	str	r0, [sp, #20]
 8005488:	f7fb f902 	bl	8000690 <__aeabi_fcmpeq>
 800548c:	b1f0      	cbz	r0, 80054cc <__ieee754_rem_pio2f+0x294>
 800548e:	2100      	movs	r1, #0
 8005490:	4628      	mov	r0, r5
 8005492:	f7fb f8fd 	bl	8000690 <__aeabi_fcmpeq>
 8005496:	2800      	cmp	r0, #0
 8005498:	bf14      	ite	ne
 800549a:	2301      	movne	r3, #1
 800549c:	2302      	moveq	r3, #2
 800549e:	4a18      	ldr	r2, [pc, #96]	@ (8005500 <__ieee754_rem_pio2f+0x2c8>)
 80054a0:	4621      	mov	r1, r4
 80054a2:	9201      	str	r2, [sp, #4]
 80054a4:	2202      	movs	r2, #2
 80054a6:	a803      	add	r0, sp, #12
 80054a8:	9200      	str	r2, [sp, #0]
 80054aa:	4632      	mov	r2, r6
 80054ac:	f000 f898 	bl	80055e0 <__kernel_rem_pio2f>
 80054b0:	f1ba 0f00 	cmp.w	sl, #0
 80054b4:	4605      	mov	r5, r0
 80054b6:	f6bf aeec 	bge.w	8005292 <__ieee754_rem_pio2f+0x5a>
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80054c0:	6023      	str	r3, [r4, #0]
 80054c2:	6863      	ldr	r3, [r4, #4]
 80054c4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80054c8:	6063      	str	r3, [r4, #4]
 80054ca:	e793      	b.n	80053f4 <__ieee754_rem_pio2f+0x1bc>
 80054cc:	2303      	movs	r3, #3
 80054ce:	e7e6      	b.n	800549e <__ieee754_rem_pio2f+0x266>
 80054d0:	3f490fd8 	.word	0x3f490fd8
 80054d4:	4016cbe3 	.word	0x4016cbe3
 80054d8:	3fc90f80 	.word	0x3fc90f80
 80054dc:	3fc90fd0 	.word	0x3fc90fd0
 80054e0:	37354443 	.word	0x37354443
 80054e4:	37354400 	.word	0x37354400
 80054e8:	2e85a308 	.word	0x2e85a308
 80054ec:	43490f80 	.word	0x43490f80
 80054f0:	3f22f984 	.word	0x3f22f984
 80054f4:	0800cc98 	.word	0x0800cc98
 80054f8:	2e85a300 	.word	0x2e85a300
 80054fc:	248d3132 	.word	0x248d3132
 8005500:	0800cd18 	.word	0x0800cd18

08005504 <fabsf>:
 8005504:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005508:	4770      	bx	lr
	...

0800550c <scalbnf>:
 800550c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8005510:	b538      	push	{r3, r4, r5, lr}
 8005512:	4603      	mov	r3, r0
 8005514:	460d      	mov	r5, r1
 8005516:	4604      	mov	r4, r0
 8005518:	d02e      	beq.n	8005578 <scalbnf+0x6c>
 800551a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800551e:	d304      	bcc.n	800552a <scalbnf+0x1e>
 8005520:	4601      	mov	r1, r0
 8005522:	f7fa fe19 	bl	8000158 <__addsf3>
 8005526:	4603      	mov	r3, r0
 8005528:	e026      	b.n	8005578 <scalbnf+0x6c>
 800552a:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800552e:	d118      	bne.n	8005562 <scalbnf+0x56>
 8005530:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8005534:	f7fa ff18 	bl	8000368 <__aeabi_fmul>
 8005538:	4a17      	ldr	r2, [pc, #92]	@ (8005598 <scalbnf+0x8c>)
 800553a:	4603      	mov	r3, r0
 800553c:	4295      	cmp	r5, r2
 800553e:	db0c      	blt.n	800555a <scalbnf+0x4e>
 8005540:	4604      	mov	r4, r0
 8005542:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8005546:	3a19      	subs	r2, #25
 8005548:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800554c:	428d      	cmp	r5, r1
 800554e:	dd0a      	ble.n	8005566 <scalbnf+0x5a>
 8005550:	4912      	ldr	r1, [pc, #72]	@ (800559c <scalbnf+0x90>)
 8005552:	4618      	mov	r0, r3
 8005554:	f361 001e 	bfi	r0, r1, #0, #31
 8005558:	e000      	b.n	800555c <scalbnf+0x50>
 800555a:	4911      	ldr	r1, [pc, #68]	@ (80055a0 <scalbnf+0x94>)
 800555c:	f7fa ff04 	bl	8000368 <__aeabi_fmul>
 8005560:	e7e1      	b.n	8005526 <scalbnf+0x1a>
 8005562:	0dd2      	lsrs	r2, r2, #23
 8005564:	e7f0      	b.n	8005548 <scalbnf+0x3c>
 8005566:	1951      	adds	r1, r2, r5
 8005568:	29fe      	cmp	r1, #254	@ 0xfe
 800556a:	dcf1      	bgt.n	8005550 <scalbnf+0x44>
 800556c:	2900      	cmp	r1, #0
 800556e:	dd05      	ble.n	800557c <scalbnf+0x70>
 8005570:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8005574:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8005578:	4618      	mov	r0, r3
 800557a:	bd38      	pop	{r3, r4, r5, pc}
 800557c:	f111 0f16 	cmn.w	r1, #22
 8005580:	da01      	bge.n	8005586 <scalbnf+0x7a>
 8005582:	4907      	ldr	r1, [pc, #28]	@ (80055a0 <scalbnf+0x94>)
 8005584:	e7e5      	b.n	8005552 <scalbnf+0x46>
 8005586:	f101 0019 	add.w	r0, r1, #25
 800558a:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800558e:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8005592:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8005596:	e7e1      	b.n	800555c <scalbnf+0x50>
 8005598:	ffff3cb0 	.word	0xffff3cb0
 800559c:	7149f2ca 	.word	0x7149f2ca
 80055a0:	0da24260 	.word	0x0da24260

080055a4 <with_errnof>:
 80055a4:	b538      	push	{r3, r4, r5, lr}
 80055a6:	4604      	mov	r4, r0
 80055a8:	460d      	mov	r5, r1
 80055aa:	f7ff f865 	bl	8004678 <__errno>
 80055ae:	6005      	str	r5, [r0, #0]
 80055b0:	4620      	mov	r0, r4
 80055b2:	bd38      	pop	{r3, r4, r5, pc}

080055b4 <xflowf>:
 80055b4:	b508      	push	{r3, lr}
 80055b6:	b140      	cbz	r0, 80055ca <xflowf+0x16>
 80055b8:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 80055bc:	f7fa fed4 	bl	8000368 <__aeabi_fmul>
 80055c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80055c4:	2122      	movs	r1, #34	@ 0x22
 80055c6:	f7ff bfed 	b.w	80055a4 <with_errnof>
 80055ca:	4608      	mov	r0, r1
 80055cc:	e7f6      	b.n	80055bc <xflowf+0x8>

080055ce <__math_uflowf>:
 80055ce:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 80055d2:	f7ff bfef 	b.w	80055b4 <xflowf>

080055d6 <__math_oflowf>:
 80055d6:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 80055da:	f7ff bfeb 	b.w	80055b4 <xflowf>
	...

080055e0 <__kernel_rem_pio2f>:
 80055e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e4:	b0db      	sub	sp, #364	@ 0x16c
 80055e6:	9202      	str	r2, [sp, #8]
 80055e8:	9304      	str	r3, [sp, #16]
 80055ea:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80055ec:	4bac      	ldr	r3, [pc, #688]	@ (80058a0 <__kernel_rem_pio2f+0x2c0>)
 80055ee:	9005      	str	r0, [sp, #20]
 80055f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055f4:	9100      	str	r1, [sp, #0]
 80055f6:	9301      	str	r3, [sp, #4]
 80055f8:	9b04      	ldr	r3, [sp, #16]
 80055fa:	3b01      	subs	r3, #1
 80055fc:	9303      	str	r3, [sp, #12]
 80055fe:	9b02      	ldr	r3, [sp, #8]
 8005600:	1d1a      	adds	r2, r3, #4
 8005602:	f2c0 8099 	blt.w	8005738 <__kernel_rem_pio2f+0x158>
 8005606:	1edc      	subs	r4, r3, #3
 8005608:	bf48      	it	mi
 800560a:	1d1c      	addmi	r4, r3, #4
 800560c:	10e4      	asrs	r4, r4, #3
 800560e:	2500      	movs	r5, #0
 8005610:	f04f 0b00 	mov.w	fp, #0
 8005614:	1c67      	adds	r7, r4, #1
 8005616:	00fb      	lsls	r3, r7, #3
 8005618:	9306      	str	r3, [sp, #24]
 800561a:	9b02      	ldr	r3, [sp, #8]
 800561c:	9a03      	ldr	r2, [sp, #12]
 800561e:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8005622:	9b01      	ldr	r3, [sp, #4]
 8005624:	eba4 0802 	sub.w	r8, r4, r2
 8005628:	eb03 0902 	add.w	r9, r3, r2
 800562c:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800562e:	ae1e      	add	r6, sp, #120	@ 0x78
 8005630:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8005634:	454d      	cmp	r5, r9
 8005636:	f340 8081 	ble.w	800573c <__kernel_rem_pio2f+0x15c>
 800563a:	9a04      	ldr	r2, [sp, #16]
 800563c:	ab1e      	add	r3, sp, #120	@ 0x78
 800563e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8005642:	f04f 0900 	mov.w	r9, #0
 8005646:	2300      	movs	r3, #0
 8005648:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800564c:	9a01      	ldr	r2, [sp, #4]
 800564e:	4591      	cmp	r9, r2
 8005650:	f340 809a 	ble.w	8005788 <__kernel_rem_pio2f+0x1a8>
 8005654:	4613      	mov	r3, r2
 8005656:	aa0a      	add	r2, sp, #40	@ 0x28
 8005658:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800565c:	9308      	str	r3, [sp, #32]
 800565e:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8005660:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005664:	9c01      	ldr	r4, [sp, #4]
 8005666:	9307      	str	r3, [sp, #28]
 8005668:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800566c:	4646      	mov	r6, r8
 800566e:	4625      	mov	r5, r4
 8005670:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 8005674:	ab5a      	add	r3, sp, #360	@ 0x168
 8005676:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800567a:	f853 bc50 	ldr.w	fp, [r3, #-80]
 800567e:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8005682:	2d00      	cmp	r5, #0
 8005684:	f300 8085 	bgt.w	8005792 <__kernel_rem_pio2f+0x1b2>
 8005688:	4639      	mov	r1, r7
 800568a:	4658      	mov	r0, fp
 800568c:	f7ff ff3e 	bl	800550c <scalbnf>
 8005690:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8005694:	4605      	mov	r5, r0
 8005696:	f7fa fe67 	bl	8000368 <__aeabi_fmul>
 800569a:	f000 fa3f 	bl	8005b1c <floorf>
 800569e:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80056a2:	f7fa fe61 	bl	8000368 <__aeabi_fmul>
 80056a6:	4601      	mov	r1, r0
 80056a8:	4628      	mov	r0, r5
 80056aa:	f7fa fd53 	bl	8000154 <__aeabi_fsub>
 80056ae:	4605      	mov	r5, r0
 80056b0:	f7fb f836 	bl	8000720 <__aeabi_f2iz>
 80056b4:	4606      	mov	r6, r0
 80056b6:	f7fa fe03 	bl	80002c0 <__aeabi_i2f>
 80056ba:	4601      	mov	r1, r0
 80056bc:	4628      	mov	r0, r5
 80056be:	f7fa fd49 	bl	8000154 <__aeabi_fsub>
 80056c2:	2f00      	cmp	r7, #0
 80056c4:	4681      	mov	r9, r0
 80056c6:	f340 8081 	ble.w	80057cc <__kernel_rem_pio2f+0x1ec>
 80056ca:	1e62      	subs	r2, r4, #1
 80056cc:	ab0a      	add	r3, sp, #40	@ 0x28
 80056ce:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80056d2:	f1c7 0108 	rsb	r1, r7, #8
 80056d6:	fa45 f301 	asr.w	r3, r5, r1
 80056da:	441e      	add	r6, r3
 80056dc:	408b      	lsls	r3, r1
 80056de:	1aed      	subs	r5, r5, r3
 80056e0:	ab0a      	add	r3, sp, #40	@ 0x28
 80056e2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80056e6:	f1c7 0307 	rsb	r3, r7, #7
 80056ea:	411d      	asrs	r5, r3
 80056ec:	2d00      	cmp	r5, #0
 80056ee:	dd7a      	ble.n	80057e6 <__kernel_rem_pio2f+0x206>
 80056f0:	2200      	movs	r2, #0
 80056f2:	4692      	mov	sl, r2
 80056f4:	3601      	adds	r6, #1
 80056f6:	4294      	cmp	r4, r2
 80056f8:	f300 80aa 	bgt.w	8005850 <__kernel_rem_pio2f+0x270>
 80056fc:	2f00      	cmp	r7, #0
 80056fe:	dd05      	ble.n	800570c <__kernel_rem_pio2f+0x12c>
 8005700:	2f01      	cmp	r7, #1
 8005702:	f000 80b6 	beq.w	8005872 <__kernel_rem_pio2f+0x292>
 8005706:	2f02      	cmp	r7, #2
 8005708:	f000 80bd 	beq.w	8005886 <__kernel_rem_pio2f+0x2a6>
 800570c:	2d02      	cmp	r5, #2
 800570e:	d16a      	bne.n	80057e6 <__kernel_rem_pio2f+0x206>
 8005710:	4649      	mov	r1, r9
 8005712:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005716:	f7fa fd1d 	bl	8000154 <__aeabi_fsub>
 800571a:	4681      	mov	r9, r0
 800571c:	f1ba 0f00 	cmp.w	sl, #0
 8005720:	d061      	beq.n	80057e6 <__kernel_rem_pio2f+0x206>
 8005722:	4639      	mov	r1, r7
 8005724:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005728:	f7ff fef0 	bl	800550c <scalbnf>
 800572c:	4601      	mov	r1, r0
 800572e:	4648      	mov	r0, r9
 8005730:	f7fa fd10 	bl	8000154 <__aeabi_fsub>
 8005734:	4681      	mov	r9, r0
 8005736:	e056      	b.n	80057e6 <__kernel_rem_pio2f+0x206>
 8005738:	2400      	movs	r4, #0
 800573a:	e768      	b.n	800560e <__kernel_rem_pio2f+0x2e>
 800573c:	eb18 0f05 	cmn.w	r8, r5
 8005740:	d407      	bmi.n	8005752 <__kernel_rem_pio2f+0x172>
 8005742:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8005746:	f7fa fdbb 	bl	80002c0 <__aeabi_i2f>
 800574a:	f846 0b04 	str.w	r0, [r6], #4
 800574e:	3501      	adds	r5, #1
 8005750:	e770      	b.n	8005634 <__kernel_rem_pio2f+0x54>
 8005752:	4658      	mov	r0, fp
 8005754:	e7f9      	b.n	800574a <__kernel_rem_pio2f+0x16a>
 8005756:	9307      	str	r3, [sp, #28]
 8005758:	9b05      	ldr	r3, [sp, #20]
 800575a:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 800575e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005762:	f7fa fe01 	bl	8000368 <__aeabi_fmul>
 8005766:	4601      	mov	r1, r0
 8005768:	4630      	mov	r0, r6
 800576a:	f7fa fcf5 	bl	8000158 <__addsf3>
 800576e:	4606      	mov	r6, r0
 8005770:	9b07      	ldr	r3, [sp, #28]
 8005772:	f108 0801 	add.w	r8, r8, #1
 8005776:	9a03      	ldr	r2, [sp, #12]
 8005778:	4590      	cmp	r8, r2
 800577a:	ddec      	ble.n	8005756 <__kernel_rem_pio2f+0x176>
 800577c:	f84a 6b04 	str.w	r6, [sl], #4
 8005780:	f109 0901 	add.w	r9, r9, #1
 8005784:	3504      	adds	r5, #4
 8005786:	e761      	b.n	800564c <__kernel_rem_pio2f+0x6c>
 8005788:	46ab      	mov	fp, r5
 800578a:	461e      	mov	r6, r3
 800578c:	f04f 0800 	mov.w	r8, #0
 8005790:	e7f1      	b.n	8005776 <__kernel_rem_pio2f+0x196>
 8005792:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8005796:	4658      	mov	r0, fp
 8005798:	f7fa fde6 	bl	8000368 <__aeabi_fmul>
 800579c:	f7fa ffc0 	bl	8000720 <__aeabi_f2iz>
 80057a0:	f7fa fd8e 	bl	80002c0 <__aeabi_i2f>
 80057a4:	4649      	mov	r1, r9
 80057a6:	9009      	str	r0, [sp, #36]	@ 0x24
 80057a8:	f7fa fdde 	bl	8000368 <__aeabi_fmul>
 80057ac:	4601      	mov	r1, r0
 80057ae:	4658      	mov	r0, fp
 80057b0:	f7fa fcd0 	bl	8000154 <__aeabi_fsub>
 80057b4:	f7fa ffb4 	bl	8000720 <__aeabi_f2iz>
 80057b8:	3d01      	subs	r5, #1
 80057ba:	f846 0b04 	str.w	r0, [r6], #4
 80057be:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 80057c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057c4:	f7fa fcc8 	bl	8000158 <__addsf3>
 80057c8:	4683      	mov	fp, r0
 80057ca:	e75a      	b.n	8005682 <__kernel_rem_pio2f+0xa2>
 80057cc:	d105      	bne.n	80057da <__kernel_rem_pio2f+0x1fa>
 80057ce:	1e63      	subs	r3, r4, #1
 80057d0:	aa0a      	add	r2, sp, #40	@ 0x28
 80057d2:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80057d6:	11ed      	asrs	r5, r5, #7
 80057d8:	e788      	b.n	80056ec <__kernel_rem_pio2f+0x10c>
 80057da:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80057de:	f7fa ff75 	bl	80006cc <__aeabi_fcmpge>
 80057e2:	4605      	mov	r5, r0
 80057e4:	bb90      	cbnz	r0, 800584c <__kernel_rem_pio2f+0x26c>
 80057e6:	2100      	movs	r1, #0
 80057e8:	4648      	mov	r0, r9
 80057ea:	f7fa ff51 	bl	8000690 <__aeabi_fcmpeq>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	f000 8090 	beq.w	8005914 <__kernel_rem_pio2f+0x334>
 80057f4:	2200      	movs	r2, #0
 80057f6:	1e63      	subs	r3, r4, #1
 80057f8:	9901      	ldr	r1, [sp, #4]
 80057fa:	428b      	cmp	r3, r1
 80057fc:	da4a      	bge.n	8005894 <__kernel_rem_pio2f+0x2b4>
 80057fe:	2a00      	cmp	r2, #0
 8005800:	d076      	beq.n	80058f0 <__kernel_rem_pio2f+0x310>
 8005802:	3c01      	subs	r4, #1
 8005804:	ab0a      	add	r3, sp, #40	@ 0x28
 8005806:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800580a:	3f08      	subs	r7, #8
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0f8      	beq.n	8005802 <__kernel_rem_pio2f+0x222>
 8005810:	4639      	mov	r1, r7
 8005812:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005816:	f7ff fe79 	bl	800550c <scalbnf>
 800581a:	46a2      	mov	sl, r4
 800581c:	4607      	mov	r7, r0
 800581e:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 8005822:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 8005826:	f1ba 0f00 	cmp.w	sl, #0
 800582a:	f280 80a1 	bge.w	8005970 <__kernel_rem_pio2f+0x390>
 800582e:	4627      	mov	r7, r4
 8005830:	2200      	movs	r2, #0
 8005832:	2f00      	cmp	r7, #0
 8005834:	f2c0 80cb 	blt.w	80059ce <__kernel_rem_pio2f+0x3ee>
 8005838:	a946      	add	r1, sp, #280	@ 0x118
 800583a:	4690      	mov	r8, r2
 800583c:	f04f 0a00 	mov.w	sl, #0
 8005840:	4b18      	ldr	r3, [pc, #96]	@ (80058a4 <__kernel_rem_pio2f+0x2c4>)
 8005842:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8005846:	eba4 0907 	sub.w	r9, r4, r7
 800584a:	e0b4      	b.n	80059b6 <__kernel_rem_pio2f+0x3d6>
 800584c:	2502      	movs	r5, #2
 800584e:	e74f      	b.n	80056f0 <__kernel_rem_pio2f+0x110>
 8005850:	f858 3b04 	ldr.w	r3, [r8], #4
 8005854:	f1ba 0f00 	cmp.w	sl, #0
 8005858:	d108      	bne.n	800586c <__kernel_rem_pio2f+0x28c>
 800585a:	b123      	cbz	r3, 8005866 <__kernel_rem_pio2f+0x286>
 800585c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8005860:	f848 3c04 	str.w	r3, [r8, #-4]
 8005864:	2301      	movs	r3, #1
 8005866:	469a      	mov	sl, r3
 8005868:	3201      	adds	r2, #1
 800586a:	e744      	b.n	80056f6 <__kernel_rem_pio2f+0x116>
 800586c:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8005870:	e7f6      	b.n	8005860 <__kernel_rem_pio2f+0x280>
 8005872:	1e62      	subs	r2, r4, #1
 8005874:	ab0a      	add	r3, sp, #40	@ 0x28
 8005876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800587a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800587e:	a90a      	add	r1, sp, #40	@ 0x28
 8005880:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005884:	e742      	b.n	800570c <__kernel_rem_pio2f+0x12c>
 8005886:	1e62      	subs	r2, r4, #1
 8005888:	ab0a      	add	r3, sp, #40	@ 0x28
 800588a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800588e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005892:	e7f4      	b.n	800587e <__kernel_rem_pio2f+0x29e>
 8005894:	a90a      	add	r1, sp, #40	@ 0x28
 8005896:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800589a:	3b01      	subs	r3, #1
 800589c:	430a      	orrs	r2, r1
 800589e:	e7ab      	b.n	80057f8 <__kernel_rem_pio2f+0x218>
 80058a0:	0800d05c 	.word	0x0800d05c
 80058a4:	0800d030 	.word	0x0800d030
 80058a8:	3301      	adds	r3, #1
 80058aa:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80058ae:	2900      	cmp	r1, #0
 80058b0:	d0fa      	beq.n	80058a8 <__kernel_rem_pio2f+0x2c8>
 80058b2:	9a04      	ldr	r2, [sp, #16]
 80058b4:	a91e      	add	r1, sp, #120	@ 0x78
 80058b6:	18a2      	adds	r2, r4, r2
 80058b8:	1c66      	adds	r6, r4, #1
 80058ba:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 80058be:	441c      	add	r4, r3
 80058c0:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 80058c4:	42b4      	cmp	r4, r6
 80058c6:	f6ff aecf 	blt.w	8005668 <__kernel_rem_pio2f+0x88>
 80058ca:	9b07      	ldr	r3, [sp, #28]
 80058cc:	46ab      	mov	fp, r5
 80058ce:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80058d2:	f7fa fcf5 	bl	80002c0 <__aeabi_i2f>
 80058d6:	f04f 0a00 	mov.w	sl, #0
 80058da:	f04f 0800 	mov.w	r8, #0
 80058de:	6028      	str	r0, [r5, #0]
 80058e0:	9b03      	ldr	r3, [sp, #12]
 80058e2:	459a      	cmp	sl, r3
 80058e4:	dd07      	ble.n	80058f6 <__kernel_rem_pio2f+0x316>
 80058e6:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 80058ea:	3504      	adds	r5, #4
 80058ec:	3601      	adds	r6, #1
 80058ee:	e7e9      	b.n	80058c4 <__kernel_rem_pio2f+0x2e4>
 80058f0:	2301      	movs	r3, #1
 80058f2:	9a08      	ldr	r2, [sp, #32]
 80058f4:	e7d9      	b.n	80058aa <__kernel_rem_pio2f+0x2ca>
 80058f6:	9b05      	ldr	r3, [sp, #20]
 80058f8:	f85b 0904 	ldr.w	r0, [fp], #-4
 80058fc:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8005900:	f7fa fd32 	bl	8000368 <__aeabi_fmul>
 8005904:	4601      	mov	r1, r0
 8005906:	4640      	mov	r0, r8
 8005908:	f7fa fc26 	bl	8000158 <__addsf3>
 800590c:	f10a 0a01 	add.w	sl, sl, #1
 8005910:	4680      	mov	r8, r0
 8005912:	e7e5      	b.n	80058e0 <__kernel_rem_pio2f+0x300>
 8005914:	9b06      	ldr	r3, [sp, #24]
 8005916:	9a02      	ldr	r2, [sp, #8]
 8005918:	4648      	mov	r0, r9
 800591a:	1a99      	subs	r1, r3, r2
 800591c:	f7ff fdf6 	bl	800550c <scalbnf>
 8005920:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8005924:	4680      	mov	r8, r0
 8005926:	f7fa fed1 	bl	80006cc <__aeabi_fcmpge>
 800592a:	b1f8      	cbz	r0, 800596c <__kernel_rem_pio2f+0x38c>
 800592c:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8005930:	4640      	mov	r0, r8
 8005932:	f7fa fd19 	bl	8000368 <__aeabi_fmul>
 8005936:	f7fa fef3 	bl	8000720 <__aeabi_f2iz>
 800593a:	f7fa fcc1 	bl	80002c0 <__aeabi_i2f>
 800593e:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8005942:	4681      	mov	r9, r0
 8005944:	f7fa fd10 	bl	8000368 <__aeabi_fmul>
 8005948:	4601      	mov	r1, r0
 800594a:	4640      	mov	r0, r8
 800594c:	f7fa fc02 	bl	8000154 <__aeabi_fsub>
 8005950:	f7fa fee6 	bl	8000720 <__aeabi_f2iz>
 8005954:	ab0a      	add	r3, sp, #40	@ 0x28
 8005956:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800595a:	4648      	mov	r0, r9
 800595c:	3401      	adds	r4, #1
 800595e:	3708      	adds	r7, #8
 8005960:	f7fa fede 	bl	8000720 <__aeabi_f2iz>
 8005964:	ab0a      	add	r3, sp, #40	@ 0x28
 8005966:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800596a:	e751      	b.n	8005810 <__kernel_rem_pio2f+0x230>
 800596c:	4640      	mov	r0, r8
 800596e:	e7f7      	b.n	8005960 <__kernel_rem_pio2f+0x380>
 8005970:	ab0a      	add	r3, sp, #40	@ 0x28
 8005972:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005976:	f7fa fca3 	bl	80002c0 <__aeabi_i2f>
 800597a:	4639      	mov	r1, r7
 800597c:	f7fa fcf4 	bl	8000368 <__aeabi_fmul>
 8005980:	4649      	mov	r1, r9
 8005982:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 8005986:	4638      	mov	r0, r7
 8005988:	f7fa fcee 	bl	8000368 <__aeabi_fmul>
 800598c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005990:	4607      	mov	r7, r0
 8005992:	e748      	b.n	8005826 <__kernel_rem_pio2f+0x246>
 8005994:	f853 0b04 	ldr.w	r0, [r3], #4
 8005998:	f85b 1b04 	ldr.w	r1, [fp], #4
 800599c:	9203      	str	r2, [sp, #12]
 800599e:	9302      	str	r3, [sp, #8]
 80059a0:	f7fa fce2 	bl	8000368 <__aeabi_fmul>
 80059a4:	4601      	mov	r1, r0
 80059a6:	4640      	mov	r0, r8
 80059a8:	f7fa fbd6 	bl	8000158 <__addsf3>
 80059ac:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80059b0:	4680      	mov	r8, r0
 80059b2:	f10a 0a01 	add.w	sl, sl, #1
 80059b6:	9901      	ldr	r1, [sp, #4]
 80059b8:	458a      	cmp	sl, r1
 80059ba:	dc01      	bgt.n	80059c0 <__kernel_rem_pio2f+0x3e0>
 80059bc:	45ca      	cmp	sl, r9
 80059be:	dde9      	ble.n	8005994 <__kernel_rem_pio2f+0x3b4>
 80059c0:	ab5a      	add	r3, sp, #360	@ 0x168
 80059c2:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 80059c6:	f849 8ca0 	str.w	r8, [r9, #-160]
 80059ca:	3f01      	subs	r7, #1
 80059cc:	e731      	b.n	8005832 <__kernel_rem_pio2f+0x252>
 80059ce:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	dc07      	bgt.n	80059e4 <__kernel_rem_pio2f+0x404>
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	dc4e      	bgt.n	8005a76 <__kernel_rem_pio2f+0x496>
 80059d8:	d02e      	beq.n	8005a38 <__kernel_rem_pio2f+0x458>
 80059da:	f006 0007 	and.w	r0, r6, #7
 80059de:	b05b      	add	sp, #364	@ 0x16c
 80059e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059e4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d1f7      	bne.n	80059da <__kernel_rem_pio2f+0x3fa>
 80059ea:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 80059ee:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 80059f2:	46b8      	mov	r8, r7
 80059f4:	46a2      	mov	sl, r4
 80059f6:	f1ba 0f00 	cmp.w	sl, #0
 80059fa:	dc49      	bgt.n	8005a90 <__kernel_rem_pio2f+0x4b0>
 80059fc:	46a1      	mov	r9, r4
 80059fe:	f1b9 0f01 	cmp.w	r9, #1
 8005a02:	dc60      	bgt.n	8005ac6 <__kernel_rem_pio2f+0x4e6>
 8005a04:	2000      	movs	r0, #0
 8005a06:	2c01      	cmp	r4, #1
 8005a08:	dc76      	bgt.n	8005af8 <__kernel_rem_pio2f+0x518>
 8005a0a:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8005a0c:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8005a0e:	2d00      	cmp	r5, #0
 8005a10:	d178      	bne.n	8005b04 <__kernel_rem_pio2f+0x524>
 8005a12:	9900      	ldr	r1, [sp, #0]
 8005a14:	600a      	str	r2, [r1, #0]
 8005a16:	460a      	mov	r2, r1
 8005a18:	604b      	str	r3, [r1, #4]
 8005a1a:	6090      	str	r0, [r2, #8]
 8005a1c:	e7dd      	b.n	80059da <__kernel_rem_pio2f+0x3fa>
 8005a1e:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8005a22:	f7fa fb99 	bl	8000158 <__addsf3>
 8005a26:	3c01      	subs	r4, #1
 8005a28:	2c00      	cmp	r4, #0
 8005a2a:	daf8      	bge.n	8005a1e <__kernel_rem_pio2f+0x43e>
 8005a2c:	b10d      	cbz	r5, 8005a32 <__kernel_rem_pio2f+0x452>
 8005a2e:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8005a32:	9b00      	ldr	r3, [sp, #0]
 8005a34:	6018      	str	r0, [r3, #0]
 8005a36:	e7d0      	b.n	80059da <__kernel_rem_pio2f+0x3fa>
 8005a38:	2000      	movs	r0, #0
 8005a3a:	af32      	add	r7, sp, #200	@ 0xc8
 8005a3c:	e7f4      	b.n	8005a28 <__kernel_rem_pio2f+0x448>
 8005a3e:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8005a42:	f7fa fb89 	bl	8000158 <__addsf3>
 8005a46:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a4a:	f1b8 0f00 	cmp.w	r8, #0
 8005a4e:	daf6      	bge.n	8005a3e <__kernel_rem_pio2f+0x45e>
 8005a50:	b1ad      	cbz	r5, 8005a7e <__kernel_rem_pio2f+0x49e>
 8005a52:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 8005a56:	9a00      	ldr	r2, [sp, #0]
 8005a58:	4601      	mov	r1, r0
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8005a5e:	f7fa fb79 	bl	8000154 <__aeabi_fsub>
 8005a62:	f04f 0801 	mov.w	r8, #1
 8005a66:	4544      	cmp	r4, r8
 8005a68:	da0b      	bge.n	8005a82 <__kernel_rem_pio2f+0x4a2>
 8005a6a:	b10d      	cbz	r5, 8005a70 <__kernel_rem_pio2f+0x490>
 8005a6c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8005a70:	9b00      	ldr	r3, [sp, #0]
 8005a72:	6058      	str	r0, [r3, #4]
 8005a74:	e7b1      	b.n	80059da <__kernel_rem_pio2f+0x3fa>
 8005a76:	46a0      	mov	r8, r4
 8005a78:	2000      	movs	r0, #0
 8005a7a:	af32      	add	r7, sp, #200	@ 0xc8
 8005a7c:	e7e5      	b.n	8005a4a <__kernel_rem_pio2f+0x46a>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	e7e9      	b.n	8005a56 <__kernel_rem_pio2f+0x476>
 8005a82:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8005a86:	f7fa fb67 	bl	8000158 <__addsf3>
 8005a8a:	f108 0801 	add.w	r8, r8, #1
 8005a8e:	e7ea      	b.n	8005a66 <__kernel_rem_pio2f+0x486>
 8005a90:	f8d8 3000 	ldr.w	r3, [r8]
 8005a94:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	9302      	str	r3, [sp, #8]
 8005a9e:	9201      	str	r2, [sp, #4]
 8005aa0:	f7fa fb5a 	bl	8000158 <__addsf3>
 8005aa4:	9a01      	ldr	r2, [sp, #4]
 8005aa6:	4601      	mov	r1, r0
 8005aa8:	4681      	mov	r9, r0
 8005aaa:	4610      	mov	r0, r2
 8005aac:	f7fa fb52 	bl	8000154 <__aeabi_fsub>
 8005ab0:	9b02      	ldr	r3, [sp, #8]
 8005ab2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	f7fa fb4e 	bl	8000158 <__addsf3>
 8005abc:	f848 0904 	str.w	r0, [r8], #-4
 8005ac0:	f8c8 9000 	str.w	r9, [r8]
 8005ac4:	e797      	b.n	80059f6 <__kernel_rem_pio2f+0x416>
 8005ac6:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8005aca:	f8d7 a000 	ldr.w	sl, [r7]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	4651      	mov	r1, sl
 8005ad2:	9301      	str	r3, [sp, #4]
 8005ad4:	f7fa fb40 	bl	8000158 <__addsf3>
 8005ad8:	9b01      	ldr	r3, [sp, #4]
 8005ada:	4601      	mov	r1, r0
 8005adc:	4680      	mov	r8, r0
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fa fb38 	bl	8000154 <__aeabi_fsub>
 8005ae4:	4651      	mov	r1, sl
 8005ae6:	f7fa fb37 	bl	8000158 <__addsf3>
 8005aea:	f847 0904 	str.w	r0, [r7], #-4
 8005aee:	f109 39ff 	add.w	r9, r9, #4294967295
 8005af2:	f8c7 8000 	str.w	r8, [r7]
 8005af6:	e782      	b.n	80059fe <__kernel_rem_pio2f+0x41e>
 8005af8:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8005afc:	f7fa fb2c 	bl	8000158 <__addsf3>
 8005b00:	3c01      	subs	r4, #1
 8005b02:	e780      	b.n	8005a06 <__kernel_rem_pio2f+0x426>
 8005b04:	9900      	ldr	r1, [sp, #0]
 8005b06:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8005b0a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005b0e:	600a      	str	r2, [r1, #0]
 8005b10:	604b      	str	r3, [r1, #4]
 8005b12:	460a      	mov	r2, r1
 8005b14:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8005b18:	e77f      	b.n	8005a1a <__kernel_rem_pio2f+0x43a>
 8005b1a:	bf00      	nop

08005b1c <floorf>:
 8005b1c:	b570      	push	{r4, r5, r6, lr}
 8005b1e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8005b22:	3d7f      	subs	r5, #127	@ 0x7f
 8005b24:	2d16      	cmp	r5, #22
 8005b26:	4601      	mov	r1, r0
 8005b28:	4604      	mov	r4, r0
 8005b2a:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 8005b2e:	dc26      	bgt.n	8005b7e <floorf+0x62>
 8005b30:	2d00      	cmp	r5, #0
 8005b32:	da0f      	bge.n	8005b54 <floorf+0x38>
 8005b34:	4917      	ldr	r1, [pc, #92]	@ (8005b94 <floorf+0x78>)
 8005b36:	f7fa fb0f 	bl	8000158 <__addsf3>
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	f7fa fdd0 	bl	80006e0 <__aeabi_fcmpgt>
 8005b40:	b130      	cbz	r0, 8005b50 <floorf+0x34>
 8005b42:	2c00      	cmp	r4, #0
 8005b44:	da23      	bge.n	8005b8e <floorf+0x72>
 8005b46:	2e00      	cmp	r6, #0
 8005b48:	4c13      	ldr	r4, [pc, #76]	@ (8005b98 <floorf+0x7c>)
 8005b4a:	bf08      	it	eq
 8005b4c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005b50:	4621      	mov	r1, r4
 8005b52:	e01a      	b.n	8005b8a <floorf+0x6e>
 8005b54:	4e11      	ldr	r6, [pc, #68]	@ (8005b9c <floorf+0x80>)
 8005b56:	412e      	asrs	r6, r5
 8005b58:	4230      	tst	r0, r6
 8005b5a:	d016      	beq.n	8005b8a <floorf+0x6e>
 8005b5c:	490d      	ldr	r1, [pc, #52]	@ (8005b94 <floorf+0x78>)
 8005b5e:	f7fa fafb 	bl	8000158 <__addsf3>
 8005b62:	2100      	movs	r1, #0
 8005b64:	f7fa fdbc 	bl	80006e0 <__aeabi_fcmpgt>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	d0f1      	beq.n	8005b50 <floorf+0x34>
 8005b6c:	2c00      	cmp	r4, #0
 8005b6e:	bfbe      	ittt	lt
 8005b70:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8005b74:	412b      	asrlt	r3, r5
 8005b76:	18e4      	addlt	r4, r4, r3
 8005b78:	ea24 0406 	bic.w	r4, r4, r6
 8005b7c:	e7e8      	b.n	8005b50 <floorf+0x34>
 8005b7e:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8005b82:	d302      	bcc.n	8005b8a <floorf+0x6e>
 8005b84:	f7fa fae8 	bl	8000158 <__addsf3>
 8005b88:	4601      	mov	r1, r0
 8005b8a:	4608      	mov	r0, r1
 8005b8c:	bd70      	pop	{r4, r5, r6, pc}
 8005b8e:	2400      	movs	r4, #0
 8005b90:	e7de      	b.n	8005b50 <floorf+0x34>
 8005b92:	bf00      	nop
 8005b94:	7149f2ca 	.word	0x7149f2ca
 8005b98:	bf800000 	.word	0xbf800000
 8005b9c:	007fffff 	.word	0x007fffff

08005ba0 <_init>:
 8005ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba2:	bf00      	nop
 8005ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba6:	bc08      	pop	{r3}
 8005ba8:	469e      	mov	lr, r3
 8005baa:	4770      	bx	lr

08005bac <_fini>:
 8005bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bae:	bf00      	nop
 8005bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bb2:	bc08      	pop	{r3}
 8005bb4:	469e      	mov	lr, r3
 8005bb6:	4770      	bx	lr
